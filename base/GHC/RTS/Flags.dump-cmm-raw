
==================== Raw Cmm ====================
2018-03-16 16:07:55.400011199 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:07:55.40111859 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoCostCentres10_closure" {
     GHC.RTS.Flags.$fEnumDoCostCentres10_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:55.403308176 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoCostCentres9_closure" {
     GHC.RTS.Flags.$fEnumDoCostCentres9_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:55.404966133 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoCostCentres8_closure" {
     GHC.RTS.Flags.$fEnumDoCostCentres8_closure:
         const GHC.Types.I#_con_info;
         const 2;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:55.40676296 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoCostCentres7_closure" {
     GHC.RTS.Flags.$fEnumDoCostCentres7_closure:
         const GHC.Types.I#_con_info;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:55.408426419 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoCostCentres6_closure" {
     GHC.RTS.Flags.$fEnumDoCostCentres6_closure:
         const GHC.Types.I#_con_info;
         const 4;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:55.412177431 UTC

[section ""data" . GHC.RTS.Flags.$fEnumGiveGCStats_$cfromEnum_closure" {
     GHC.RTS.Flags.$fEnumGiveGCStats_$cfromEnum_closure:
         const GHC.RTS.Flags.$fEnumGiveGCStats_$cfromEnum_info;
 },
 GHC.RTS.Flags.$fEnumGiveGCStats_$cfromEnum_entry() //  [R2]
         { []
         }
     {offset
       cd5qR: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd5qS; else goto cd5qT;
       cd5qS: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumGiveGCStats_$cfromEnum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd5qT: // global
           I64[Sp - 8] = block_cd5qH_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud5rc; else goto cd5qI;
       ud5rc: // global
           call _cd5qH(R1) args: 0, res: 0, upd: 0;
       cd5qI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumGiveGCStats_$cfromEnum_info" {
     GHC.RTS.Flags.$fEnumGiveGCStats_$cfromEnum_info:
         const GHC.RTS.Flags.$fEnumGiveGCStats_$cfromEnum_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd5qH() //  [R1]
         { []
         }
     {offset
       cd5qH: // global
           _cd5qQ::P64 = R1 & 7;
           if (_cd5qQ::P64 < 4) goto ud5r9; else goto ud5rb;
       ud5r9: // global
           if (_cd5qQ::P64 < 3) goto ud5ra; else goto cd5qN;
       ud5ra: // global
           if (_cd5qQ::P64 < 2) goto cd5qL; else goto cd5qM;
       cd5qL: // global
           R1 = GHC.RTS.Flags.$fEnumDoCostCentres10_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cd5qM: // global
           R1 = GHC.RTS.Flags.$fEnumDoCostCentres9_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cd5qN: // global
           R1 = GHC.RTS.Flags.$fEnumDoCostCentres8_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ud5rb: // global
           if (_cd5qQ::P64 < 5) goto cd5qO; else goto cd5qP;
       cd5qO: // global
           R1 = GHC.RTS.Flags.$fEnumDoCostCentres7_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cd5qP: // global
           R1 = GHC.RTS.Flags.$fEnumDoCostCentres6_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd5qH_info" {
     block_cd5qH_info:
         const _cd5qH;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:55.41804753 UTC

[section ""cstring" . lvl_rcV4Y_bytes" {
     lvl_rcV4Y_bytes:
         I8[] [105,110,118,97,108,105,100,32,101,110,117,109,32,102,111,114,32,71,105,118,101,71,67,83,116,97,116,115,58,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:55.421280354 UTC

[section ""data" . GHC.RTS.Flags.$wlvl3_closure" {
     GHC.RTS.Flags.$wlvl3_closure:
         const GHC.RTS.Flags.$wlvl3_info;
         const 0;
 },
 sat_scV8B_entry() //  [R1]
         { []
         }
     {offset
       cd5rE: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cd5rF; else goto cd5rG;
       cd5rF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd5rG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cd5rB_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 16];
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scV8B_info" {
     sat_scV8B_info:
         const sat_scV8B_entry;
         const 4294967296;
         const 17;
 },
 _cd5rB() //  [R1, R2]
         { []
         }
     {offset
       cd5rB: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cd5rJ; else goto cd5rI;
       cd5rJ: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cd5rI: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd5rB_info" {
     block_cd5rB_info:
         const _cd5rB;
         const 0;
         const 30;
 },
 GHC.RTS.Flags.$wlvl3_entry() //  [R2]
         { []
         }
     {offset
       cd5rM: // global
           _scV8x::I64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto cd5rN; else goto cd5rO;
       cd5rO: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cd5rQ; else goto cd5rP;
       cd5rQ: // global
           HpAlloc = 24;
           goto cd5rN;
       cd5rN: // global
           R2 = _scV8x::I64;
           R1 = GHC.RTS.Flags.$wlvl3_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd5rP: // global
           I64[Hp - 16] = sat_scV8B_info;
           I64[Hp] = _scV8x::I64;
           I64[Sp - 8] = block_cd5rK_info;
           R3 = Hp - 16;
           R2 = lvl_rcV4Y_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$wlvl3_info" {
     GHC.RTS.Flags.$wlvl3_info:
         const GHC.RTS.Flags.$wlvl3_entry;
         const 0;
         const 12884901902;
         const 4294967300;
         const ScWiZ_srt;
 },
 _cd5rK() //  [R1]
         { []
         }
     {offset
       cd5rK: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd5rK_info" {
     block_cd5rK_info:
         const _cd5rK;
         const 0;
         const 4294967326;
         const ScWiZ_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:55.43050137 UTC

[section ""data" . GHC.RTS.Flags.$fEnumGiveGCStats6_closure" {
     GHC.RTS.Flags.$fEnumGiveGCStats6_closure:
         const GHC.RTS.Flags.$fEnumGiveGCStats6_info;
         const 0;
 },
 GHC.RTS.Flags.$fEnumGiveGCStats6_entry() //  [R2]
         { []
         }
     {offset
       cd5sh: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd5si; else goto cd5sj;
       cd5si: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumGiveGCStats6_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd5sj: // global
           I64[Sp - 8] = block_cd5se_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud5sn; else goto cd5sf;
       ud5sn: // global
           call _cd5se(R1) args: 0, res: 0, upd: 0;
       cd5sf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumGiveGCStats6_info" {
     GHC.RTS.Flags.$fEnumGiveGCStats6_info:
         const GHC.RTS.Flags.$fEnumGiveGCStats6_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const ScWiZ_srt+8;
 },
 _cd5se() //  [R1]
         { []
         }
     {offset
       cd5se: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd5se_info" {
     block_cd5se_info:
         const _cd5se;
         const 0;
         const 4294967326;
         const ScWiZ_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:55.435982197 UTC

[section ""data" . GHC.RTS.Flags.$w$ctoEnum2_closure" {
     GHC.RTS.Flags.$w$ctoEnum2_closure:
         const GHC.RTS.Flags.$w$ctoEnum2_info;
         const 0;
 },
 GHC.RTS.Flags.$w$ctoEnum2_entry() //  [R2]
         { []
         }
     {offset
       cd5sJ: // global
           if (%MO_S_Lt_W64(R2, 3)) goto ud5sM; else goto ud5sP;
       ud5sM: // global
           if (%MO_S_Lt_W64(R2, 1)) goto ud5sN; else goto ud5sO;
       ud5sN: // global
           _scV8H::I64 = R2;
           if (%MO_S_Lt_W64(R2, 0)) goto cd5sD; else goto cd5sE;
       cd5sE: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ud5sO: // global
           if (%MO_S_Lt_W64(R2, 2)) goto cd5sF; else goto cd5sG;
       cd5sF: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cd5sG: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ud5sP: // global
           _scV8H::I64 = R2;
           if (%MO_S_Ge_W64(R2, 5)) goto cd5sD; else goto ud5sQ;
       cd5sD: // global
           R2 = _scV8H::I64;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 8, res: 0, upd: 8;
       ud5sQ: // global
           if (%MO_S_Lt_W64(_scV8H::I64, 4)) goto cd5sH; else goto cd5sI;
       cd5sH: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cd5sI: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$w$ctoEnum2_info" {
     GHC.RTS.Flags.$w$ctoEnum2_info:
         const GHC.RTS.Flags.$w$ctoEnum2_entry;
         const 0;
         const 4294967310;
         const 4294967300;
         const ScWiZ_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:55.440578166 UTC

[section ""data" . GHC.RTS.Flags.$fEnumGiveGCStats_$ctoEnum_closure" {
     GHC.RTS.Flags.$fEnumGiveGCStats_$ctoEnum_closure:
         const GHC.RTS.Flags.$fEnumGiveGCStats_$ctoEnum_info;
         const 0;
 },
 GHC.RTS.Flags.$fEnumGiveGCStats_$ctoEnum_entry() //  [R2]
         { []
         }
     {offset
       cd5t7: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd5t8; else goto cd5t9;
       cd5t8: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumGiveGCStats_$ctoEnum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd5t9: // global
           I64[Sp - 8] = block_cd5t4_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud5td; else goto cd5t5;
       ud5td: // global
           call _cd5t4(R1) args: 0, res: 0, upd: 0;
       cd5t5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumGiveGCStats_$ctoEnum_info" {
     GHC.RTS.Flags.$fEnumGiveGCStats_$ctoEnum_info:
         const GHC.RTS.Flags.$fEnumGiveGCStats_$ctoEnum_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const ScWiZ_srt+24;
 },
 _cd5t4() //  [R1]
         { []
         }
     {offset
       cd5t4: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.RTS.Flags.$w$ctoEnum2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd5t4_info" {
     block_cd5t4_info:
         const _cd5t4;
         const 0;
         const 4294967326;
         const ScWiZ_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:55.4467479 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoCostCentres_$cfromEnum_closure" {
     GHC.RTS.Flags.$fEnumDoCostCentres_$cfromEnum_closure:
         const GHC.RTS.Flags.$fEnumDoCostCentres_$cfromEnum_info;
 },
 GHC.RTS.Flags.$fEnumDoCostCentres_$cfromEnum_entry() //  [R2]
         { []
         }
     {offset
       cd5tB: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd5tC; else goto cd5tD;
       cd5tC: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoCostCentres_$cfromEnum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd5tD: // global
           I64[Sp - 8] = block_cd5tr_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud5tW; else goto cd5ts;
       ud5tW: // global
           call _cd5tr(R1) args: 0, res: 0, upd: 0;
       cd5ts: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoCostCentres_$cfromEnum_info" {
     GHC.RTS.Flags.$fEnumDoCostCentres_$cfromEnum_info:
         const GHC.RTS.Flags.$fEnumDoCostCentres_$cfromEnum_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd5tr() //  [R1]
         { []
         }
     {offset
       cd5tr: // global
           _cd5tA::P64 = R1 & 7;
           if (_cd5tA::P64 < 4) goto ud5tT; else goto ud5tV;
       ud5tT: // global
           if (_cd5tA::P64 < 3) goto ud5tU; else goto cd5tx;
       ud5tU: // global
           if (_cd5tA::P64 < 2) goto cd5tv; else goto cd5tw;
       cd5tv: // global
           R1 = GHC.RTS.Flags.$fEnumDoCostCentres10_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cd5tw: // global
           R1 = GHC.RTS.Flags.$fEnumDoCostCentres9_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cd5tx: // global
           R1 = GHC.RTS.Flags.$fEnumDoCostCentres8_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ud5tV: // global
           if (_cd5tA::P64 < 5) goto cd5ty; else goto cd5tz;
       cd5ty: // global
           R1 = GHC.RTS.Flags.$fEnumDoCostCentres7_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cd5tz: // global
           R1 = GHC.RTS.Flags.$fEnumDoCostCentres6_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd5tr_info" {
     block_cd5tr_info:
         const _cd5tr;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:55.45263678 UTC

[section ""cstring" . lvl1_rcV4Z_bytes" {
     lvl1_rcV4Z_bytes:
         I8[] [105,110,118,97,108,105,100,32,101,110,117,109,32,102,111,114,32,68,111,67,111,115,116,67,101,110,116,114,101,115,58,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:55.455784962 UTC

[section ""data" . GHC.RTS.Flags.$wlvl_closure" {
     GHC.RTS.Flags.$wlvl_closure:
         const GHC.RTS.Flags.$wlvl_info;
         const 0;
 },
 sat_scV8R_entry() //  [R1]
         { []
         }
     {offset
       cd5uo: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cd5up; else goto cd5uq;
       cd5up: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd5uq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cd5ul_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 16];
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scV8R_info" {
     sat_scV8R_info:
         const sat_scV8R_entry;
         const 4294967296;
         const 17;
 },
 _cd5ul() //  [R1, R2]
         { []
         }
     {offset
       cd5ul: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cd5ut; else goto cd5us;
       cd5ut: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cd5us: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd5ul_info" {
     block_cd5ul_info:
         const _cd5ul;
         const 0;
         const 30;
 },
 GHC.RTS.Flags.$wlvl_entry() //  [R2]
         { []
         }
     {offset
       cd5uw: // global
           _scV8N::I64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto cd5ux; else goto cd5uy;
       cd5uy: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cd5uA; else goto cd5uz;
       cd5uA: // global
           HpAlloc = 24;
           goto cd5ux;
       cd5ux: // global
           R2 = _scV8N::I64;
           R1 = GHC.RTS.Flags.$wlvl_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd5uz: // global
           I64[Hp - 16] = sat_scV8R_info;
           I64[Hp] = _scV8N::I64;
           I64[Sp - 8] = block_cd5uu_info;
           R3 = Hp - 16;
           R2 = lvl1_rcV4Z_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$wlvl_info" {
     GHC.RTS.Flags.$wlvl_info:
         const GHC.RTS.Flags.$wlvl_entry;
         const 0;
         const 141733920782;
         const 4294967300;
         const ScWiZ_srt;
 },
 _cd5uu() //  [R1]
         { []
         }
     {offset
       cd5uu: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd5uu_info" {
     block_cd5uu_info:
         const _cd5uu;
         const 0;
         const 4294967326;
         const ScWiZ_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:55.464880072 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoCostCentres11_closure" {
     GHC.RTS.Flags.$fEnumDoCostCentres11_closure:
         const GHC.RTS.Flags.$fEnumDoCostCentres11_info;
         const 0;
 },
 GHC.RTS.Flags.$fEnumDoCostCentres11_entry() //  [R2]
         { []
         }
     {offset
       cd5v1: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd5v2; else goto cd5v3;
       cd5v2: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoCostCentres11_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd5v3: // global
           I64[Sp - 8] = block_cd5uY_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud5v7; else goto cd5uZ;
       ud5v7: // global
           call _cd5uY(R1) args: 0, res: 0, upd: 0;
       cd5uZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoCostCentres11_info" {
     GHC.RTS.Flags.$fEnumDoCostCentres11_info:
         const GHC.RTS.Flags.$fEnumDoCostCentres11_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const ScWiZ_srt+40;
 },
 _cd5uY() //  [R1]
         { []
         }
     {offset
       cd5uY: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd5uY_info" {
     block_cd5uY_info:
         const _cd5uY;
         const 0;
         const 4294967326;
         const ScWiZ_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:55.470498016 UTC

[section ""data" . GHC.RTS.Flags.$w$ctoEnum_closure" {
     GHC.RTS.Flags.$w$ctoEnum_closure:
         const GHC.RTS.Flags.$w$ctoEnum_info;
         const 0;
 },
 GHC.RTS.Flags.$w$ctoEnum_entry() //  [R2]
         { []
         }
     {offset
       cd5vt: // global
           if (%MO_S_Lt_W64(R2, 3)) goto ud5vw; else goto ud5vz;
       ud5vw: // global
           if (%MO_S_Lt_W64(R2, 1)) goto ud5vx; else goto ud5vy;
       ud5vx: // global
           _scV8X::I64 = R2;
           if (%MO_S_Lt_W64(R2, 0)) goto cd5vn; else goto cd5vo;
       cd5vo: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ud5vy: // global
           if (%MO_S_Lt_W64(R2, 2)) goto cd5vp; else goto cd5vq;
       cd5vp: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cd5vq: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ud5vz: // global
           _scV8X::I64 = R2;
           if (%MO_S_Ge_W64(R2, 5)) goto cd5vn; else goto ud5vA;
       cd5vn: // global
           R2 = _scV8X::I64;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
       ud5vA: // global
           if (%MO_S_Lt_W64(_scV8X::I64, 4)) goto cd5vr; else goto cd5vs;
       cd5vr: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cd5vs: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$w$ctoEnum_info" {
     GHC.RTS.Flags.$w$ctoEnum_info:
         const GHC.RTS.Flags.$w$ctoEnum_entry;
         const 0;
         const 4294967310;
         const 4294967300;
         const ScWiZ_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:55.474842857 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoCostCentres_$ctoEnum_closure" {
     GHC.RTS.Flags.$fEnumDoCostCentres_$ctoEnum_closure:
         const GHC.RTS.Flags.$fEnumDoCostCentres_$ctoEnum_info;
         const 0;
 },
 GHC.RTS.Flags.$fEnumDoCostCentres_$ctoEnum_entry() //  [R2]
         { []
         }
     {offset
       cd5vR: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd5vS; else goto cd5vT;
       cd5vS: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoCostCentres_$ctoEnum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd5vT: // global
           I64[Sp - 8] = block_cd5vO_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud5vX; else goto cd5vP;
       ud5vX: // global
           call _cd5vO(R1) args: 0, res: 0, upd: 0;
       cd5vP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoCostCentres_$ctoEnum_info" {
     GHC.RTS.Flags.$fEnumDoCostCentres_$ctoEnum_info:
         const GHC.RTS.Flags.$fEnumDoCostCentres_$ctoEnum_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const ScWiZ_srt+56;
 },
 _cd5vO() //  [R1]
         { []
         }
     {offset
       cd5vO: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.RTS.Flags.$w$ctoEnum_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd5vO_info" {
     block_cd5vO_info:
         const _cd5vO;
         const 0;
         const 4294967326;
         const ScWiZ_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:55.479847929 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoHeapProfile12_closure" {
     GHC.RTS.Flags.$fEnumDoHeapProfile12_closure:
         const GHC.Types.I#_con_info;
         const 5;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:55.481638604 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoHeapProfile11_closure" {
     GHC.RTS.Flags.$fEnumDoHeapProfile11_closure:
         const GHC.Types.I#_con_info;
         const 6;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:55.48389387 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoHeapProfile10_closure" {
     GHC.RTS.Flags.$fEnumDoHeapProfile10_closure:
         const GHC.Types.I#_con_info;
         const 7;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:55.485645858 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoHeapProfile9_closure" {
     GHC.RTS.Flags.$fEnumDoHeapProfile9_closure:
         const GHC.Types.I#_con_info;
         const 8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:55.488611232 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoHeapProfile_$cfromEnum_closure" {
     GHC.RTS.Flags.$fEnumDoHeapProfile_$cfromEnum_closure:
         const GHC.RTS.Flags.$fEnumDoHeapProfile_$cfromEnum_info;
 },
 GHC.RTS.Flags.$fEnumDoHeapProfile_$cfromEnum_entry() //  [R2]
         { []
         }
     {offset
       cd5ws: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd5wt; else goto cd5wu;
       cd5wt: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoHeapProfile_$cfromEnum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd5wu: // global
           I64[Sp - 8] = block_cd5wf_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud5wT; else goto cd5wg;
       ud5wT: // global
           call _cd5wf(R1) args: 0, res: 0, upd: 0;
       cd5wg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoHeapProfile_$cfromEnum_info" {
     GHC.RTS.Flags.$fEnumDoHeapProfile_$cfromEnum_info:
         const GHC.RTS.Flags.$fEnumDoHeapProfile_$cfromEnum_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd5wf() //  [R1]
         { []
         }
     {offset
       cd5wf: // global
           switch [0 .. 7] (%MO_UU_Conv_W32_W64(I32[I64[R1 - 1] + 20])) {
               case 0 : goto cd5wj;
               case 1 : goto cd5wk;
               case 2 : goto cd5wl;
               case 3 : goto cd5wm;
               case 4 : goto cd5wn;
               case 5 : goto cd5wo;
               case 6 : goto cd5wp;
               case 7 : goto cd5wq;
           }
       cd5wq: // global
           R1 = GHC.RTS.Flags.$fEnumDoHeapProfile9_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cd5wp: // global
           R1 = GHC.RTS.Flags.$fEnumDoHeapProfile10_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cd5wo: // global
           R1 = GHC.RTS.Flags.$fEnumDoHeapProfile11_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cd5wn: // global
           R1 = GHC.RTS.Flags.$fEnumDoHeapProfile12_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cd5wm: // global
           R1 = GHC.RTS.Flags.$fEnumDoCostCentres6_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cd5wl: // global
           R1 = GHC.RTS.Flags.$fEnumDoCostCentres8_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cd5wk: // global
           R1 = GHC.RTS.Flags.$fEnumDoCostCentres9_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cd5wj: // global
           R1 = GHC.RTS.Flags.$fEnumDoCostCentres10_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd5wf_info" {
     block_cd5wf_info:
         const _cd5wf;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:55.495134748 UTC

[section ""cstring" . lvl2_rcV50_bytes" {
     lvl2_rcV50_bytes:
         I8[] [105,110,118,97,108,105,100,32,101,110,117,109,32,102,111,114,32,68,111,72,101,97,112,80,114,111,102,105,108,101,58,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:55.500053374 UTC

[section ""data" . GHC.RTS.Flags.$wlvl1_closure" {
     GHC.RTS.Flags.$wlvl1_closure:
         const GHC.RTS.Flags.$wlvl1_info;
         const 0;
 },
 sat_scV97_entry() //  [R1]
         { []
         }
     {offset
       cd5xq: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cd5xr; else goto cd5xs;
       cd5xr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd5xs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cd5xn_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 16];
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scV97_info" {
     sat_scV97_info:
         const sat_scV97_entry;
         const 4294967296;
         const 17;
 },
 _cd5xn() //  [R1, R2]
         { []
         }
     {offset
       cd5xn: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cd5xv; else goto cd5xu;
       cd5xv: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cd5xu: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd5xn_info" {
     block_cd5xn_info:
         const _cd5xn;
         const 0;
         const 30;
 },
 GHC.RTS.Flags.$wlvl1_entry() //  [R2]
         { []
         }
     {offset
       cd5xy: // global
           _scV93::I64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto cd5xz; else goto cd5xA;
       cd5xA: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cd5xC; else goto cd5xB;
       cd5xC: // global
           HpAlloc = 24;
           goto cd5xz;
       cd5xz: // global
           R2 = _scV93::I64;
           R1 = GHC.RTS.Flags.$wlvl1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd5xB: // global
           I64[Hp - 16] = sat_scV97_info;
           I64[Hp] = _scV93::I64;
           I64[Sp - 8] = block_cd5xw_info;
           R3 = Hp - 16;
           R2 = lvl2_rcV50_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$wlvl1_info" {
     GHC.RTS.Flags.$wlvl1_info:
         const GHC.RTS.Flags.$wlvl1_entry;
         const 0;
         const 2203318222862;
         const 4294967300;
         const ScWiZ_srt;
 },
 _cd5xw() //  [R1]
         { []
         }
     {offset
       cd5xw: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd5xw_info" {
     block_cd5xw_info:
         const _cd5xw;
         const 0;
         const 4294967326;
         const ScWiZ_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:55.512422498 UTC

[section ""data" . GHC.RTS.Flags.$w$ctoEnum1_closure" {
     GHC.RTS.Flags.$w$ctoEnum1_closure:
         const GHC.RTS.Flags.$w$ctoEnum1_info;
         const 0;
 },
 GHC.RTS.Flags.$w$ctoEnum1_entry() //  [R2]
         { []
         }
     {offset
       cd5yb: // global
           _scV9a::I64 = R2;
           if (%MO_S_Ge_W64(R2, 9)) goto cd5y2; else goto ud5ye;
       ud5ye: // global
           if (%MO_S_Lt_W64(_scV9a::I64, 0)) goto cd5y2; else goto ud5yf;
       ud5yf: // global
           switch [0 .. 8] _scV9a::I64 {
               case 0 : goto cd5y3;
               case 1 : goto cd5y4;
               case 2 : goto cd5y5;
               case 4 : goto cd5y6;
               case 5 : goto cd5y7;
               case 6 : goto cd5y8;
               case 7 : goto cd5y9;
               case 8 : goto cd5ya;
               default: {goto cd5y2;}
           }
       cd5ya: // global
           R1 = GHC.RTS.Flags.HeapByClosureType_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cd5y9: // global
           R1 = GHC.RTS.Flags.HeapByLDV_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cd5y8: // global
           R1 = GHC.RTS.Flags.HeapByRetainer_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cd5y7: // global
           R1 = GHC.RTS.Flags.HeapByType_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cd5y6: // global
           R1 = GHC.RTS.Flags.HeapByDescr_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cd5y5: // global
           R1 = GHC.RTS.Flags.HeapByMod_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cd5y4: // global
           R1 = GHC.RTS.Flags.HeapByCCS_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cd5y3: // global
           R1 = GHC.RTS.Flags.NoHeapProfiling_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cd5y2: // global
           R2 = _scV9a::I64;
           call GHC.RTS.Flags.$wlvl1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$w$ctoEnum1_info" {
     GHC.RTS.Flags.$w$ctoEnum1_info:
         const GHC.RTS.Flags.$w$ctoEnum1_entry;
         const 0;
         const 4294967310;
         const 4294967300;
         const ScWiZ_srt+72;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:55.519759348 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoHeapProfile_$ctoEnum_closure" {
     GHC.RTS.Flags.$fEnumDoHeapProfile_$ctoEnum_closure:
         const GHC.RTS.Flags.$fEnumDoHeapProfile_$ctoEnum_info;
         const 0;
 },
 GHC.RTS.Flags.$fEnumDoHeapProfile_$ctoEnum_entry() //  [R2]
         { []
         }
     {offset
       cd5yA: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd5yB; else goto cd5yC;
       cd5yB: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoHeapProfile_$ctoEnum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd5yC: // global
           I64[Sp - 8] = block_cd5yx_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud5yG; else goto cd5yy;
       ud5yG: // global
           call _cd5yx(R1) args: 0, res: 0, upd: 0;
       cd5yy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoHeapProfile_$ctoEnum_info" {
     GHC.RTS.Flags.$fEnumDoHeapProfile_$ctoEnum_info:
         const GHC.RTS.Flags.$fEnumDoHeapProfile_$ctoEnum_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const ScWiZ_srt+80;
 },
 _cd5yx() //  [R1]
         { []
         }
     {offset
       cd5yx: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd5yx_info" {
     block_cd5yx_info:
         const _cd5yx;
         const 0;
         const 4294967326;
         const ScWiZ_srt+88;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:55.527748337 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoTrace_$cfromEnum_closure" {
     GHC.RTS.Flags.$fEnumDoTrace_$cfromEnum_closure:
         const GHC.RTS.Flags.$fEnumDoTrace_$cfromEnum_info;
 },
 GHC.RTS.Flags.$fEnumDoTrace_$cfromEnum_entry() //  [R2]
         { []
         }
     {offset
       cd5z2: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd5z3; else goto cd5z4;
       cd5z3: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoTrace_$cfromEnum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd5z4: // global
           I64[Sp - 8] = block_cd5yU_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud5zf; else goto cd5yV;
       ud5zf: // global
           call _cd5yU(R1) args: 0, res: 0, upd: 0;
       cd5yV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoTrace_$cfromEnum_info" {
     GHC.RTS.Flags.$fEnumDoTrace_$cfromEnum_info:
         const GHC.RTS.Flags.$fEnumDoTrace_$cfromEnum_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd5yU() //  [R1]
         { []
         }
     {offset
       cd5yU: // global
           _cd5z1::P64 = R1 & 7;
           if (_cd5z1::P64 < 3) goto ud5ze; else goto cd5z0;
       ud5ze: // global
           if (_cd5z1::P64 < 2) goto cd5yY; else goto cd5yZ;
       cd5yY: // global
           R1 = GHC.RTS.Flags.$fEnumDoCostCentres10_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cd5yZ: // global
           R1 = GHC.RTS.Flags.$fEnumDoCostCentres9_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cd5z0: // global
           R1 = GHC.RTS.Flags.$fEnumDoCostCentres8_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd5yU_info" {
     block_cd5yU_info:
         const _cd5yU;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:55.535656369 UTC

[section ""cstring" . lvl3_rcV51_bytes" {
     lvl3_rcV51_bytes:
         I8[] [105,110,118,97,108,105,100,32,101,110,117,109,32,102,111,114,32,68,111,84,114,97,99,101,58,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:55.540373333 UTC

[section ""data" . GHC.RTS.Flags.$wlvl2_closure" {
     GHC.RTS.Flags.$wlvl2_closure:
         const GHC.RTS.Flags.$wlvl2_info;
         const 0;
 },
 sat_scV9k_entry() //  [R1]
         { []
         }
     {offset
       cd5zF: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cd5zG; else goto cd5zH;
       cd5zG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd5zH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cd5zC_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 16];
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scV9k_info" {
     sat_scV9k_info:
         const sat_scV9k_entry;
         const 4294967296;
         const 17;
 },
 _cd5zC() //  [R1, R2]
         { []
         }
     {offset
       cd5zC: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cd5zK; else goto cd5zJ;
       cd5zK: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cd5zJ: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd5zC_info" {
     block_cd5zC_info:
         const _cd5zC;
         const 0;
         const 30;
 },
 GHC.RTS.Flags.$wlvl2_entry() //  [R2]
         { []
         }
     {offset
       cd5zN: // global
           _scV9g::I64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto cd5zO; else goto cd5zP;
       cd5zP: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cd5zR; else goto cd5zQ;
       cd5zR: // global
           HpAlloc = 24;
           goto cd5zO;
       cd5zO: // global
           R2 = _scV9g::I64;
           R1 = GHC.RTS.Flags.$wlvl2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd5zQ: // global
           I64[Hp - 16] = sat_scV9k_info;
           I64[Hp] = _scV9g::I64;
           I64[Sp - 8] = block_cd5zL_info;
           R3 = Hp - 16;
           R2 = lvl3_rcV51_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$wlvl2_info" {
     GHC.RTS.Flags.$wlvl2_info:
         const GHC.RTS.Flags.$wlvl2_entry;
         const 0;
         const 17596481011726;
         const 4294967300;
         const ScWiZ_srt;
 },
 _cd5zL() //  [R1]
         { []
         }
     {offset
       cd5zL: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd5zL_info" {
     block_cd5zL_info:
         const _cd5zL;
         const 0;
         const 4294967326;
         const ScWiZ_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:55.55312865 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoTrace1_closure" {
     GHC.RTS.Flags.$fEnumDoTrace1_closure:
         const GHC.RTS.Flags.$fEnumDoTrace1_info;
         const 0;
 },
 GHC.RTS.Flags.$fEnumDoTrace1_entry() //  [R2]
         { []
         }
     {offset
       cd5Ai: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd5Aj; else goto cd5Ak;
       cd5Aj: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoTrace1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd5Ak: // global
           I64[Sp - 8] = block_cd5Af_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud5Ao; else goto cd5Ag;
       ud5Ao: // global
           call _cd5Af(R1) args: 0, res: 0, upd: 0;
       cd5Ag: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoTrace1_info" {
     GHC.RTS.Flags.$fEnumDoTrace1_info:
         const GHC.RTS.Flags.$fEnumDoTrace1_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const ScWiZ_srt+96;
 },
 _cd5Af() //  [R1]
         { []
         }
     {offset
       cd5Af: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.RTS.Flags.$wlvl2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd5Af_info" {
     block_cd5Af_info:
         const _cd5Af;
         const 0;
         const 4294967326;
         const ScWiZ_srt+96;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:55.562357145 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoTrace_$ctoEnum_closure" {
     GHC.RTS.Flags.$fEnumDoTrace_$ctoEnum_closure:
         const GHC.RTS.Flags.$fEnumDoTrace_$ctoEnum_info;
         const 0;
 },
 GHC.RTS.Flags.$fEnumDoTrace_$ctoEnum_entry() //  [R2]
         { []
         }
     {offset
       cd5AF: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd5AG; else goto cd5AH;
       cd5AG: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoTrace_$ctoEnum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd5AH: // global
           I64[Sp - 8] = block_cd5AC_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud5AU; else goto cd5AD;
       ud5AU: // global
           call _cd5AC(R1) args: 0, res: 0, upd: 0;
       cd5AD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoTrace_$ctoEnum_info" {
     GHC.RTS.Flags.$fEnumDoTrace_$ctoEnum_info:
         const GHC.RTS.Flags.$fEnumDoTrace_$ctoEnum_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const ScWiZ_srt+96;
 },
 _cd5AC() //  [R1]
         { []
         }
     {offset
       cd5AC: // global
           _scV9s::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_scV9s::I64, 2)) goto ud5AR; else goto ud5AT;
       ud5AR: // global
           if (%MO_S_Lt_W64(_scV9s::I64, 1)) goto ud5AS; else goto cd5AP;
       ud5AS: // global
           if (%MO_S_Lt_W64(_scV9s::I64, 0)) goto cd5AN; else goto cd5AO;
       cd5AO: // global
           R1 = GHC.RTS.Flags.TraceNone_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cd5AP: // global
           R1 = GHC.RTS.Flags.TraceEventLog_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ud5AT: // global
           if (%MO_S_Ge_W64(_scV9s::I64, 3)) goto cd5AN; else goto cd5AQ;
       cd5AN: // global
           R2 = _scV9s::I64;
           Sp = Sp + 8;
           call GHC.RTS.Flags.$wlvl2_entry(R2) args: 8, res: 0, upd: 8;
       cd5AQ: // global
           R1 = GHC.RTS.Flags.TraceStderr_closure+3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd5AC_info" {
     block_cd5AC_info:
         const _cd5AC;
         const 0;
         const 4294967326;
         const ScWiZ_srt+96;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:55.57031412 UTC

[section ""cstring" . GHC.RTS.Flags.$fShowCCFlags2_bytes" {
     GHC.RTS.Flags.$fShowCCFlags2_bytes:
         I8[] [125]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:55.573496075 UTC

[section ""data" . g_rcV52_closure" {
     g_rcV52_closure:
         const g_rcV52_info;
         const 0;
         const 0;
         const 0;
 },
 g_rcV52_entry() //  [R1]
         { []
         }
     {offset
       cd5Be: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd5Bf; else goto cd5Bg;
       cd5Bf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd5Bg: // global
           (_cd5Bb::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cd5Bb::I64 == 0) goto cd5Bd; else goto cd5Bc;
       cd5Bd: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cd5Bc: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cd5Bb::I64;
           R2 = GHC.RTS.Flags.$fShowCCFlags2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . g_rcV52_info" {
     g_rcV52_info:
         const g_rcV52_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:55.578177159 UTC

[section ""cstring" . lvl4_rcV53_bytes" {
     lvl4_rcV53_bytes:
         I8[] [80,97,114,70,108,97,103,115,32,123]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:55.580398453 UTC

[section ""cstring" . lvl5_rcV54_bytes" {
     lvl5_rcV54_bytes:
         I8[] [110,67,97,112,97,98,105,108,105,116,105,101,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:55.58228936 UTC

[section ""cstring" . lvl6_rcV55_bytes" {
     lvl6_rcV55_bytes:
         I8[] [109,105,103,114,97,116,101,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:55.584001588 UTC

[section ""cstring" . lvl7_rcV56_bytes" {
     lvl7_rcV56_bytes:
         I8[] [109,97,120,76,111,99,97,108,83,112,97,114,107,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:55.586359336 UTC

[section ""cstring" . lvl8_rcV57_bytes" {
     lvl8_rcV57_bytes:
         I8[] [112,97,114,71,99,69,110,97,98,108,101,100,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:55.588792194 UTC

[section ""cstring" . lvl9_rcV58_bytes" {
     lvl9_rcV58_bytes:
         I8[] [112,97,114,71,99,71,101,110,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:55.591233372 UTC

[section ""cstring" . lvl10_rcV59_bytes" {
     lvl10_rcV59_bytes:
         I8[] [112,97,114,71,99,76,111,97,100,66,97,108,97,110,99,105,110,103,69,110,97,98,108,101,100,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:55.593600647 UTC

[section ""cstring" . lvl11_rcV5a_bytes" {
     lvl11_rcV5a_bytes:
         I8[] [112,97,114,71,99,76,111,97,100,66,97,108,97,110,99,105,110,103,71,101,110,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:55.596019473 UTC

[section ""cstring" . lvl12_rcV5b_bytes" {
     lvl12_rcV5b_bytes:
         I8[] [112,97,114,71,99,78,111,83,121,110,99,87,105,116,104,73,100,108,101,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:55.59838438 UTC

[section ""cstring" . lvl13_rcV5c_bytes" {
     lvl13_rcV5c_bytes:
         I8[] [112,97,114,71,99,84,104,114,101,97,100,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:55.600615451 UTC

[section ""cstring" . lvl14_rcV5d_bytes" {
     lvl14_rcV5d_bytes:
         I8[] [115,101,116,65,102,102,105,110,105,116,121,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:55.641881764 UTC

[section ""data" . GHC.RTS.Flags.$fShowParFlags_$cshowsPrec_closure" {
     GHC.RTS.Flags.$fShowParFlags_$cshowsPrec_closure:
         const GHC.RTS.Flags.$fShowParFlags_$cshowsPrec_info;
         const 0;
 },
 sat_scVa7_entry() //  [R1]
         { []
         }
     {offset
       cd5En: // global
           R3 = P64[R1 + 16];
           R2 = g_rcV52_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVa7_info" {
     sat_scVa7_info:
         const sat_scVa7_entry;
         const 1;
         const 4294967312;
         const ScWiZ_srt+120;
 },
 sat_scVa8_entry() //  [R1]
         { []
         }
     {offset
       cd5Ew: // global
           R3 = P64[R1 + 16];
           R2 = g_rcV52_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVa8_info" {
     sat_scVa8_info:
         const sat_scVa8_entry;
         const 1;
         const 4294967312;
         const ScWiZ_srt+120;
 },
 sat_scVa9_entry() //  [R1]
         { []
         }
     {offset
       cd5ED: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cd5EE; else goto cd5EF;
       cd5EE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd5EF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cd5Ee_info;
           _scV9K::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _scV9K::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ud5EM; else goto cd5Ef;
       ud5EM: // global
           call _cd5Ee(R1) args: 0, res: 0, upd: 0;
       cd5Ef: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVa9_info" {
     sat_scVa9_info:
         const sat_scVa9_entry;
         const 2;
         const 30064771090;
         const ScWiZ_srt+120;
 },
 _cd5Ee() //  [R1]
         { []
         }
     {offset
       cd5Ee: // global
           _scV9K::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cd5EA; else goto cd5EB;
       cd5EA: // global
           Hp = Hp + 24;
           _scVa6::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cd5EL; else goto cd5EH;
       cd5EH: // global
           I64[Hp - 16] = sat_scVa7_info;
           P64[Hp] = _scV9K::P64;
           R3 = Hp - 16;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cd5EB: // global
           Hp = Hp + 24;
           _scVa6::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cd5EL; else goto cd5EK;
       cd5EL: // global
           HpAlloc = 24;
           R1 = _scVa6::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cd5EK: // global
           I64[Hp - 16] = sat_scVa8_info;
           P64[Hp] = _scV9K::P64;
           R3 = Hp - 16;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd5Ee_info" {
     block_cd5Ee_info:
         const _cd5Ee;
         const 1;
         const 30064771102;
         const ScWiZ_srt+120;
 },
 sat_scVaa_entry() //  [R1]
         { []
         }
     {offset
       cd5EN: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cd5ER; else goto cd5EQ;
       cd5ER: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd5EQ: // global
           _scV9G::P64 = P64[R1 + 16];
           _scV9K::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_scVa9_info;
           P64[Hp - 8] = _scV9G::P64;
           P64[Hp] = _scV9K::P64;
           R3 = Hp - 24;
           R2 = lvl14_rcV5d_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVaa_info" {
     sat_scVaa_info:
         const sat_scVaa_entry;
         const 2;
         const 30064771090;
         const ScWiZ_srt+120;
 },
 sat_scVab_entry() //  [R1]
         { []
         }
     {offset
       cd5ES: // global
           _scVab::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd5ET; else goto cd5EU;
       cd5EU: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cd5EW; else goto cd5EV;
       cd5EW: // global
           HpAlloc = 32;
           goto cd5ET;
       cd5ET: // global
           R1 = _scVab::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd5EV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVab::P64;
           _scV9G::P64 = P64[_scVab::P64 + 16];
           _scV9K::P64 = P64[_scVab::P64 + 24];
           I64[Hp - 24] = sat_scVaa_info;
           P64[Hp - 8] = _scV9G::P64;
           P64[Hp] = _scV9K::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVab_info" {
     sat_scVab_info:
         const sat_scVab_entry;
         const 2;
         const 64424509458;
         const ScWiZ_srt+120;
 },
 sat_scVaf_entry() //  [R1]
         { []
         }
     {offset
       cd5EX: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cd5F4; else goto cd5F5;
       cd5F4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd5F5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cd5DX_info;
           _scV9G::P64 = P64[R1 + 24];
           _scV9K::P64 = P64[R1 + 32];
           R1 = P64[R1 + 16];
           P64[Sp - 32] = _scV9G::P64;
           P64[Sp - 24] = _scV9K::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ud5Fc; else goto cd5DY;
       ud5Fc: // global
           call _cd5DX(R1) args: 0, res: 0, upd: 0;
       cd5DY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVaf_info" {
     sat_scVaf_info:
         const sat_scVaf_entry;
         const 3;
         const 64424509455;
         const ScWiZ_srt+120;
 },
 _cd5DX() //  [R1]
         { []
         }
     {offset
       cd5DX: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cd5F8; else goto cd5F7;
       cd5F8: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cd5F7: // global
           _scVa4::I64 = I64[R1 + 7];
           I64[Hp - 24] = sat_scVab_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_cd5F1_info;
           R3 = Hp - 24;
           R2 = _scVa4::I64;
           Sp = Sp + 16;
           call GHC.Show.$witos_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cd5DX_info" {
     block_cd5DX_info:
         const _cd5DX;
         const 2;
         const 64424509470;
         const ScWiZ_srt+120;
 },
 _cd5F1() //  [R1, R2]
         { []
         }
     {offset
       cd5F1: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cd5Fb; else goto cd5Fa;
       cd5Fb: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cd5Fa: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd5F1_info" {
     block_cd5F1_info:
         const _cd5F1;
         const 0;
         const 30;
 },
 sat_scVag_entry() //  [R1]
         { []
         }
     {offset
       cd5Fd: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cd5Fh; else goto cd5Fg;
       cd5Fh: // global
           HpAlloc = 40;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd5Fg: // global
           _scV9F::P64 = P64[R1 + 16];
           _scV9G::P64 = P64[R1 + 24];
           _scV9K::P64 = P64[R1 + 32];
           I64[Hp - 32] = sat_scVaf_info;
           P64[Hp - 16] = _scV9F::P64;
           P64[Hp - 8] = _scV9G::P64;
           P64[Hp] = _scV9K::P64;
           R3 = Hp - 32;
           R2 = lvl13_rcV5c_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVag_info" {
     sat_scVag_info:
         const sat_scVag_entry;
         const 3;
         const 64424509455;
         const ScWiZ_srt+120;
 },
 sat_scVah_entry() //  [R1]
         { []
         }
     {offset
       cd5Fi: // global
           _scVah::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd5Fj; else goto cd5Fk;
       cd5Fk: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cd5Fm; else goto cd5Fl;
       cd5Fm: // global
           HpAlloc = 40;
           goto cd5Fj;
       cd5Fj: // global
           R1 = _scVah::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd5Fl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVah::P64;
           _scV9F::P64 = P64[_scVah::P64 + 16];
           _scV9G::P64 = P64[_scVah::P64 + 24];
           _scV9K::P64 = P64[_scVah::P64 + 32];
           I64[Hp - 32] = sat_scVag_info;
           P64[Hp - 16] = _scV9F::P64;
           P64[Hp - 8] = _scV9G::P64;
           P64[Hp] = _scV9K::P64;
           R3 = Hp - 32;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVah_info" {
     sat_scVah_info:
         const sat_scVah_entry;
         const 3;
         const 64424509455;
         const ScWiZ_srt+120;
 },
 sat_scVal_entry() //  [R1]
         { []
         }
     {offset
       cd5Fn: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cd5Fu; else goto cd5Fv;
       cd5Fu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd5Fv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_cd5DG_info;
           _scV9F::P64 = P64[R1 + 24];
           _scV9G::P64 = P64[R1 + 32];
           _scV9K::P64 = P64[R1 + 40];
           R1 = P64[R1 + 16];
           P64[Sp - 40] = _scV9F::P64;
           P64[Sp - 32] = _scV9G::P64;
           P64[Sp - 24] = _scV9K::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto ud5FC; else goto cd5DH;
       ud5FC: // global
           call _cd5DG(R1) args: 0, res: 0, upd: 0;
       cd5DH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVal_info" {
     sat_scVal_info:
         const sat_scVal_entry;
         const 4;
         const 64424509455;
         const ScWiZ_srt+120;
 },
 _cd5DG() //  [R1]
         { []
         }
     {offset
       cd5DG: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cd5Fy; else goto cd5Fx;
       cd5Fy: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cd5Fx: // global
           _scVa1::I64 = I64[R1 + 7];
           I64[Hp - 32] = sat_scVah_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 24];
           I64[Sp + 24] = block_cd5Fr_info;
           R3 = Hp - 32;
           R2 = _scVa1::I64;
           Sp = Sp + 24;
           call GHC.Show.$witos_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cd5DG_info" {
     block_cd5DG_info:
         const _cd5DG;
         const 3;
         const 64424509470;
         const ScWiZ_srt+120;
 },
 _cd5Fr() //  [R1, R2]
         { []
         }
     {offset
       cd5Fr: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cd5FB; else goto cd5FA;
       cd5FB: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cd5FA: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd5Fr_info" {
     block_cd5Fr_info:
         const _cd5Fr;
         const 0;
         const 30;
 },
 sat_scVam_entry() //  [R1]
         { []
         }
     {offset
       cd5FD: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cd5FH; else goto cd5FG;
       cd5FH: // global
           HpAlloc = 48;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd5FG: // global
           _scV9E::P64 = P64[R1 + 16];
           _scV9F::P64 = P64[R1 + 24];
           _scV9G::P64 = P64[R1 + 32];
           _scV9K::P64 = P64[R1 + 40];
           I64[Hp - 40] = sat_scVal_info;
           P64[Hp - 24] = _scV9E::P64;
           P64[Hp - 16] = _scV9F::P64;
           P64[Hp - 8] = _scV9G::P64;
           P64[Hp] = _scV9K::P64;
           R3 = Hp - 40;
           R2 = lvl12_rcV5b_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVam_info" {
     sat_scVam_info:
         const sat_scVam_entry;
         const 4;
         const 64424509455;
         const ScWiZ_srt+120;
 },
 sat_scVan_entry() //  [R1]
         { []
         }
     {offset
       cd5FI: // global
           _scVan::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd5FJ; else goto cd5FK;
       cd5FK: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cd5FM; else goto cd5FL;
       cd5FM: // global
           HpAlloc = 48;
           goto cd5FJ;
       cd5FJ: // global
           R1 = _scVan::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd5FL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVan::P64;
           _scV9E::P64 = P64[_scVan::P64 + 16];
           _scV9F::P64 = P64[_scVan::P64 + 24];
           _scV9G::P64 = P64[_scVan::P64 + 32];
           _scV9K::P64 = P64[_scVan::P64 + 40];
           I64[Hp - 40] = sat_scVam_info;
           P64[Hp - 24] = _scV9E::P64;
           P64[Hp - 16] = _scV9F::P64;
           P64[Hp - 8] = _scV9G::P64;
           P64[Hp] = _scV9K::P64;
           R3 = Hp - 40;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVan_info" {
     sat_scVan_info:
         const sat_scVan_entry;
         const 4;
         const 64424509455;
         const ScWiZ_srt+120;
 },
 sat_scVar_entry() //  [R1]
         { []
         }
     {offset
       cd5FN: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cd5FU; else goto cd5FV;
       cd5FU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd5FV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 56] = block_cd5Dp_info;
           _scV9E::P64 = P64[R1 + 24];
           _scV9F::P64 = P64[R1 + 32];
           _scV9G::P64 = P64[R1 + 40];
           _scV9K::P64 = P64[R1 + 48];
           R1 = P64[R1 + 16];
           P64[Sp - 48] = _scV9E::P64;
           P64[Sp - 40] = _scV9F::P64;
           P64[Sp - 32] = _scV9G::P64;
           P64[Sp - 24] = _scV9K::P64;
           Sp = Sp - 56;
           if (R1 & 7 != 0) goto ud5G2; else goto cd5Dq;
       ud5G2: // global
           call _cd5Dp(R1) args: 0, res: 0, upd: 0;
       cd5Dq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVar_info" {
     sat_scVar_info:
         const sat_scVar_entry;
         const 5;
         const 64424509455;
         const ScWiZ_srt+120;
 },
 _cd5Dp() //  [R1]
         { []
         }
     {offset
       cd5Dp: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cd5FY; else goto cd5FX;
       cd5FY: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cd5FX: // global
           _scV9Y::I64 = I64[R1 + 7];
           I64[Hp - 40] = sat_scVan_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = P64[Sp + 32];
           I64[Sp + 32] = block_cd5FR_info;
           R3 = Hp - 40;
           R2 = _scV9Y::I64;
           Sp = Sp + 32;
           call GHC.Show.$witos_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cd5Dp_info" {
     block_cd5Dp_info:
         const _cd5Dp;
         const 4;
         const 64424509470;
         const ScWiZ_srt+120;
 },
 _cd5FR() //  [R1, R2]
         { []
         }
     {offset
       cd5FR: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cd5G1; else goto cd5G0;
       cd5G1: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cd5G0: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd5FR_info" {
     block_cd5FR_info:
         const _cd5FR;
         const 0;
         const 30;
 },
 sat_scVas_entry() //  [R1]
         { []
         }
     {offset
       cd5G3: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cd5G7; else goto cd5G6;
       cd5G7: // global
           HpAlloc = 56;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd5G6: // global
           _scV9D::P64 = P64[R1 + 16];
           _scV9E::P64 = P64[R1 + 24];
           _scV9F::P64 = P64[R1 + 32];
           _scV9G::P64 = P64[R1 + 40];
           _scV9K::P64 = P64[R1 + 48];
           I64[Hp - 48] = sat_scVar_info;
           P64[Hp - 32] = _scV9D::P64;
           P64[Hp - 24] = _scV9E::P64;
           P64[Hp - 16] = _scV9F::P64;
           P64[Hp - 8] = _scV9G::P64;
           P64[Hp] = _scV9K::P64;
           R3 = Hp - 48;
           R2 = lvl11_rcV5a_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVas_info" {
     sat_scVas_info:
         const sat_scVas_entry;
         const 5;
         const 64424509455;
         const ScWiZ_srt+120;
 },
 eta3_scV9W_entry() //  [R1]
         { []
         }
     {offset
       cd5G8: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cd5Gc; else goto cd5Gb;
       cd5Gc: // global
           HpAlloc = 56;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd5Gb: // global
           _scV9D::P64 = P64[R1 + 16];
           _scV9E::P64 = P64[R1 + 24];
           _scV9F::P64 = P64[R1 + 32];
           _scV9G::P64 = P64[R1 + 40];
           _scV9K::P64 = P64[R1 + 48];
           I64[Hp - 48] = sat_scVas_info;
           P64[Hp - 32] = _scV9D::P64;
           P64[Hp - 24] = _scV9E::P64;
           P64[Hp - 16] = _scV9F::P64;
           P64[Hp - 8] = _scV9G::P64;
           P64[Hp] = _scV9K::P64;
           R3 = Hp - 48;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . eta3_scV9W_info" {
     eta3_scV9W_info:
         const eta3_scV9W_entry;
         const 5;
         const 64424509455;
         const ScWiZ_srt+120;
 },
 sat_scVau_entry() //  [R1]
         { []
         }
     {offset
       cd5Gk: // global
           _scVau::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cd5Gl; else goto cd5Gm;
       cd5Gm: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cd5Go; else goto cd5Gn;
       cd5Go: // global
           HpAlloc = 56;
           goto cd5Gl;
       cd5Gl: // global
           R1 = _scVau::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd5Gn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVau::P64;
           _scV9C::P64 = P64[_scVau::P64 + 16];
           _scV9D::P64 = P64[_scVau::P64 + 24];
           _scV9E::P64 = P64[_scVau::P64 + 32];
           _scV9F::P64 = P64[_scVau::P64 + 40];
           _scV9G::P64 = P64[_scVau::P64 + 48];
           _scV9K::P64 = P64[_scVau::P64 + 56];
           I64[Hp - 48] = eta3_scV9W_info;
           P64[Hp - 32] = _scV9D::P64;
           P64[Hp - 24] = _scV9E::P64;
           P64[Hp - 16] = _scV9F::P64;
           P64[Hp - 8] = _scV9G::P64;
           P64[Hp] = _scV9K::P64;
           I64[Sp - 32] = block_cd5Gd_info;
           R1 = _scV9C::P64;
           P64[Sp - 24] = Hp - 48;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ud5Gv; else goto cd5Ge;
       ud5Gv: // global
           call _cd5Gd(R1) args: 0, res: 0, upd: 0;
       cd5Ge: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVau_info" {
     sat_scVau_info:
         const sat_scVau_entry;
         const 6;
         const 64424509455;
         const ScWiZ_srt+120;
 },
 _cd5Gd() //  [R1]
         { []
         }
     {offset
       cd5Gd: // global
           _cd5Dd::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cd5Gh; else goto cd5Gi;
       cd5Gh: // global
           R3 = _cd5Dd::P64;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cd5Gi: // global
           R3 = _cd5Dd::P64;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd5Gd_info" {
     block_cd5Gd_info:
         const _cd5Gd;
         const 1;
         const 12884901918;
         const ScWiZ_srt+128;
 },
 sat_scVav_entry() //  [R1]
         { []
         }
     {offset
       cd5Gw: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cd5GA; else goto cd5Gz;
       cd5GA: // global
           HpAlloc = 64;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd5Gz: // global
           _scV9C::P64 = P64[R1 + 16];
           _scV9D::P64 = P64[R1 + 24];
           _scV9E::P64 = P64[R1 + 32];
           _scV9F::P64 = P64[R1 + 40];
           _scV9G::P64 = P64[R1 + 48];
           _scV9K::P64 = P64[R1 + 56];
           I64[Hp - 56] = sat_scVau_info;
           P64[Hp - 40] = _scV9C::P64;
           P64[Hp - 32] = _scV9D::P64;
           P64[Hp - 24] = _scV9E::P64;
           P64[Hp - 16] = _scV9F::P64;
           P64[Hp - 8] = _scV9G::P64;
           P64[Hp] = _scV9K::P64;
           R3 = Hp - 56;
           R2 = lvl10_rcV59_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVav_info" {
     sat_scVav_info:
         const sat_scVav_entry;
         const 6;
         const 64424509455;
         const ScWiZ_srt+120;
 },
 sat_scVaw_entry() //  [R1]
         { []
         }
     {offset
       cd5GB: // global
           _scVaw::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd5GC; else goto cd5GD;
       cd5GD: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cd5GF; else goto cd5GE;
       cd5GF: // global
           HpAlloc = 64;
           goto cd5GC;
       cd5GC: // global
           R1 = _scVaw::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd5GE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVaw::P64;
           _scV9C::P64 = P64[_scVaw::P64 + 16];
           _scV9D::P64 = P64[_scVaw::P64 + 24];
           _scV9E::P64 = P64[_scVaw::P64 + 32];
           _scV9F::P64 = P64[_scVaw::P64 + 40];
           _scV9G::P64 = P64[_scVaw::P64 + 48];
           _scV9K::P64 = P64[_scVaw::P64 + 56];
           I64[Hp - 56] = sat_scVav_info;
           P64[Hp - 40] = _scV9C::P64;
           P64[Hp - 32] = _scV9D::P64;
           P64[Hp - 24] = _scV9E::P64;
           P64[Hp - 16] = _scV9F::P64;
           P64[Hp - 8] = _scV9G::P64;
           P64[Hp] = _scV9K::P64;
           R3 = Hp - 56;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVaw_info" {
     sat_scVaw_info:
         const sat_scVaw_entry;
         const 6;
         const 64424509455;
         const ScWiZ_srt+120;
 },
 sat_scVaA_entry() //  [R1]
         { []
         }
     {offset
       cd5GG: // global
           if ((Sp + -72) < SpLim) (likely: False) goto cd5GN; else goto cd5GO;
       cd5GN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd5GO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 72] = block_cd5CW_info;
           _scV9C::P64 = P64[R1 + 24];
           _scV9D::P64 = P64[R1 + 32];
           _scV9E::P64 = P64[R1 + 40];
           _scV9F::P64 = P64[R1 + 48];
           _scV9G::P64 = P64[R1 + 56];
           _scV9K::P64 = P64[R1 + 64];
           R1 = P64[R1 + 16];
           P64[Sp - 64] = _scV9C::P64;
           P64[Sp - 56] = _scV9D::P64;
           P64[Sp - 48] = _scV9E::P64;
           P64[Sp - 40] = _scV9F::P64;
           P64[Sp - 32] = _scV9G::P64;
           P64[Sp - 24] = _scV9K::P64;
           Sp = Sp - 72;
           if (R1 & 7 != 0) goto ud5GV; else goto cd5CX;
       ud5GV: // global
           call _cd5CW(R1) args: 0, res: 0, upd: 0;
       cd5CX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVaA_info" {
     sat_scVaA_info:
         const sat_scVaA_entry;
         const 7;
         const 64424509455;
         const ScWiZ_srt+120;
 },
 _cd5CW() //  [R1]
         { []
         }
     {offset
       cd5CW: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cd5GR; else goto cd5GQ;
       cd5GR: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cd5GQ: // global
           _scV9U::I64 = I64[R1 + 7];
           I64[Hp - 56] = sat_scVaw_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = P64[Sp + 48];
           I64[Sp + 48] = block_cd5GK_info;
           R3 = Hp - 56;
           R2 = _scV9U::I64;
           Sp = Sp + 48;
           call GHC.Show.$witos_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cd5CW_info" {
     block_cd5CW_info:
         const _cd5CW;
         const 6;
         const 64424509470;
         const ScWiZ_srt+120;
 },
 _cd5GK() //  [R1, R2]
         { []
         }
     {offset
       cd5GK: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cd5GU; else goto cd5GT;
       cd5GU: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cd5GT: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd5GK_info" {
     block_cd5GK_info:
         const _cd5GK;
         const 0;
         const 30;
 },
 sat_scVaB_entry() //  [R1]
         { []
         }
     {offset
       cd5GW: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cd5H0; else goto cd5GZ;
       cd5H0: // global
           HpAlloc = 72;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd5GZ: // global
           _scV9B::P64 = P64[R1 + 16];
           _scV9C::P64 = P64[R1 + 24];
           _scV9D::P64 = P64[R1 + 32];
           _scV9E::P64 = P64[R1 + 40];
           _scV9F::P64 = P64[R1 + 48];
           _scV9G::P64 = P64[R1 + 56];
           _scV9K::P64 = P64[R1 + 64];
           I64[Hp - 64] = sat_scVaA_info;
           P64[Hp - 48] = _scV9B::P64;
           P64[Hp - 40] = _scV9C::P64;
           P64[Hp - 32] = _scV9D::P64;
           P64[Hp - 24] = _scV9E::P64;
           P64[Hp - 16] = _scV9F::P64;
           P64[Hp - 8] = _scV9G::P64;
           P64[Hp] = _scV9K::P64;
           R3 = Hp - 64;
           R2 = lvl9_rcV58_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVaB_info" {
     sat_scVaB_info:
         const sat_scVaB_entry;
         const 7;
         const 64424509455;
         const ScWiZ_srt+120;
 },
 eta2_scV9S_entry() //  [R1]
         { []
         }
     {offset
       cd5H1: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cd5H5; else goto cd5H4;
       cd5H5: // global
           HpAlloc = 72;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd5H4: // global
           _scV9B::P64 = P64[R1 + 16];
           _scV9C::P64 = P64[R1 + 24];
           _scV9D::P64 = P64[R1 + 32];
           _scV9E::P64 = P64[R1 + 40];
           _scV9F::P64 = P64[R1 + 48];
           _scV9G::P64 = P64[R1 + 56];
           _scV9K::P64 = P64[R1 + 64];
           I64[Hp - 64] = sat_scVaB_info;
           P64[Hp - 48] = _scV9B::P64;
           P64[Hp - 40] = _scV9C::P64;
           P64[Hp - 32] = _scV9D::P64;
           P64[Hp - 24] = _scV9E::P64;
           P64[Hp - 16] = _scV9F::P64;
           P64[Hp - 8] = _scV9G::P64;
           P64[Hp] = _scV9K::P64;
           R3 = Hp - 64;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . eta2_scV9S_info" {
     eta2_scV9S_info:
         const eta2_scV9S_entry;
         const 7;
         const 64424509455;
         const ScWiZ_srt+120;
 },
 sat_scVaD_entry() //  [R1]
         { []
         }
     {offset
       cd5Hd: // global
           _scVaD::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cd5He; else goto cd5Hf;
       cd5Hf: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cd5Hh; else goto cd5Hg;
       cd5Hh: // global
           HpAlloc = 72;
           goto cd5He;
       cd5He: // global
           R1 = _scVaD::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd5Hg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVaD::P64;
           _scV9A::P64 = P64[_scVaD::P64 + 16];
           _scV9B::P64 = P64[_scVaD::P64 + 24];
           _scV9C::P64 = P64[_scVaD::P64 + 32];
           _scV9D::P64 = P64[_scVaD::P64 + 40];
           _scV9E::P64 = P64[_scVaD::P64 + 48];
           _scV9F::P64 = P64[_scVaD::P64 + 56];
           _scV9G::P64 = P64[_scVaD::P64 + 64];
           _scV9K::P64 = P64[_scVaD::P64 + 72];
           I64[Hp - 64] = eta2_scV9S_info;
           P64[Hp - 48] = _scV9B::P64;
           P64[Hp - 40] = _scV9C::P64;
           P64[Hp - 32] = _scV9D::P64;
           P64[Hp - 24] = _scV9E::P64;
           P64[Hp - 16] = _scV9F::P64;
           P64[Hp - 8] = _scV9G::P64;
           P64[Hp] = _scV9K::P64;
           I64[Sp - 32] = block_cd5H6_info;
           R1 = _scV9A::P64;
           P64[Sp - 24] = Hp - 64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ud5Ho; else goto cd5H7;
       ud5Ho: // global
           call _cd5H6(R1) args: 0, res: 0, upd: 0;
       cd5H7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVaD_info" {
     sat_scVaD_info:
         const sat_scVaD_entry;
         const 8;
         const 64424509455;
         const ScWiZ_srt+120;
 },
 _cd5H6() //  [R1]
         { []
         }
     {offset
       cd5H6: // global
           _cd5CK::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cd5Ha; else goto cd5Hb;
       cd5Ha: // global
           R3 = _cd5CK::P64;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cd5Hb: // global
           R3 = _cd5CK::P64;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd5H6_info" {
     block_cd5H6_info:
         const _cd5H6;
         const 1;
         const 12884901918;
         const ScWiZ_srt+128;
 },
 sat_scVaE_entry() //  [R1]
         { []
         }
     {offset
       cd5Hp: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cd5Ht; else goto cd5Hs;
       cd5Ht: // global
           HpAlloc = 80;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd5Hs: // global
           _scV9A::P64 = P64[R1 + 16];
           _scV9B::P64 = P64[R1 + 24];
           _scV9C::P64 = P64[R1 + 32];
           _scV9D::P64 = P64[R1 + 40];
           _scV9E::P64 = P64[R1 + 48];
           _scV9F::P64 = P64[R1 + 56];
           _scV9G::P64 = P64[R1 + 64];
           _scV9K::P64 = P64[R1 + 72];
           I64[Hp - 72] = sat_scVaD_info;
           P64[Hp - 56] = _scV9A::P64;
           P64[Hp - 48] = _scV9B::P64;
           P64[Hp - 40] = _scV9C::P64;
           P64[Hp - 32] = _scV9D::P64;
           P64[Hp - 24] = _scV9E::P64;
           P64[Hp - 16] = _scV9F::P64;
           P64[Hp - 8] = _scV9G::P64;
           P64[Hp] = _scV9K::P64;
           R3 = Hp - 72;
           R2 = lvl8_rcV57_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVaE_info" {
     sat_scVaE_info:
         const sat_scVaE_entry;
         const 8;
         const 64424509455;
         const ScWiZ_srt+120;
 },
 sat_scVaF_entry() //  [R1]
         { []
         }
     {offset
       cd5Hu: // global
           _scVaF::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd5Hv; else goto cd5Hw;
       cd5Hw: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cd5Hy; else goto cd5Hx;
       cd5Hy: // global
           HpAlloc = 80;
           goto cd5Hv;
       cd5Hv: // global
           R1 = _scVaF::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd5Hx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVaF::P64;
           _scV9A::P64 = P64[_scVaF::P64 + 16];
           _scV9B::P64 = P64[_scVaF::P64 + 24];
           _scV9C::P64 = P64[_scVaF::P64 + 32];
           _scV9D::P64 = P64[_scVaF::P64 + 40];
           _scV9E::P64 = P64[_scVaF::P64 + 48];
           _scV9F::P64 = P64[_scVaF::P64 + 56];
           _scV9G::P64 = P64[_scVaF::P64 + 64];
           _scV9K::P64 = P64[_scVaF::P64 + 72];
           I64[Hp - 72] = sat_scVaE_info;
           P64[Hp - 56] = _scV9A::P64;
           P64[Hp - 48] = _scV9B::P64;
           P64[Hp - 40] = _scV9C::P64;
           P64[Hp - 32] = _scV9D::P64;
           P64[Hp - 24] = _scV9E::P64;
           P64[Hp - 16] = _scV9F::P64;
           P64[Hp - 8] = _scV9G::P64;
           P64[Hp] = _scV9K::P64;
           R3 = Hp - 72;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVaF_info" {
     sat_scVaF_info:
         const sat_scVaF_entry;
         const 8;
         const 64424509455;
         const ScWiZ_srt+120;
 },
 sat_scVaJ_entry() //  [R1]
         { []
         }
     {offset
       cd5Hz: // global
           if ((Sp + -88) < SpLim) (likely: False) goto cd5HG; else goto cd5HH;
       cd5HG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd5HH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 88] = block_cd5Ct_info;
           _scV9A::P64 = P64[R1 + 24];
           _scV9B::P64 = P64[R1 + 32];
           _scV9C::P64 = P64[R1 + 40];
           _scV9D::P64 = P64[R1 + 48];
           _scV9E::P64 = P64[R1 + 56];
           _scV9F::P64 = P64[R1 + 64];
           _scV9G::P64 = P64[R1 + 72];
           _scV9K::P64 = P64[R1 + 80];
           R1 = P64[R1 + 16];
           P64[Sp - 80] = _scV9A::P64;
           P64[Sp - 72] = _scV9B::P64;
           P64[Sp - 64] = _scV9C::P64;
           P64[Sp - 56] = _scV9D::P64;
           P64[Sp - 48] = _scV9E::P64;
           P64[Sp - 40] = _scV9F::P64;
           P64[Sp - 32] = _scV9G::P64;
           P64[Sp - 24] = _scV9K::P64;
           Sp = Sp - 88;
           if (R1 & 7 != 0) goto ud5HO; else goto cd5Cu;
       ud5HO: // global
           call _cd5Ct(R1) args: 0, res: 0, upd: 0;
       cd5Cu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVaJ_info" {
     sat_scVaJ_info:
         const sat_scVaJ_entry;
         const 9;
         const 64424509455;
         const ScWiZ_srt+120;
 },
 _cd5Ct() //  [R1]
         { []
         }
     {offset
       cd5Ct: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cd5HK; else goto cd5HJ;
       cd5HK: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cd5HJ: // global
           _scV9Q::I64 = I64[R1 + 7];
           I64[Hp - 72] = sat_scVaF_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = P64[Sp + 16];
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = P64[Sp + 40];
           P64[Hp - 16] = P64[Sp + 48];
           P64[Hp - 8] = P64[Sp + 56];
           P64[Hp] = P64[Sp + 64];
           I64[Sp + 64] = block_cd5HD_info;
           R3 = Hp - 72;
           R2 = _scV9Q::I64;
           Sp = Sp + 64;
           call GHC.Show.$witos_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cd5Ct_info" {
     block_cd5Ct_info:
         const _cd5Ct;
         const 8;
         const 64424509470;
         const ScWiZ_srt+120;
 },
 _cd5HD() //  [R1, R2]
         { []
         }
     {offset
       cd5HD: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cd5HN; else goto cd5HM;
       cd5HN: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cd5HM: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd5HD_info" {
     block_cd5HD_info:
         const _cd5HD;
         const 0;
         const 30;
 },
 sat_scVaK_entry() //  [R1]
         { []
         }
     {offset
       cd5HP: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cd5HT; else goto cd5HS;
       cd5HT: // global
           HpAlloc = 88;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd5HS: // global
           _scV9z::P64 = P64[R1 + 16];
           _scV9A::P64 = P64[R1 + 24];
           _scV9B::P64 = P64[R1 + 32];
           _scV9C::P64 = P64[R1 + 40];
           _scV9D::P64 = P64[R1 + 48];
           _scV9E::P64 = P64[R1 + 56];
           _scV9F::P64 = P64[R1 + 64];
           _scV9G::P64 = P64[R1 + 72];
           _scV9K::P64 = P64[R1 + 80];
           I64[Hp - 80] = sat_scVaJ_info;
           P64[Hp - 64] = _scV9z::P64;
           P64[Hp - 56] = _scV9A::P64;
           P64[Hp - 48] = _scV9B::P64;
           P64[Hp - 40] = _scV9C::P64;
           P64[Hp - 32] = _scV9D::P64;
           P64[Hp - 24] = _scV9E::P64;
           P64[Hp - 16] = _scV9F::P64;
           P64[Hp - 8] = _scV9G::P64;
           P64[Hp] = _scV9K::P64;
           R3 = Hp - 80;
           R2 = lvl7_rcV56_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVaK_info" {
     sat_scVaK_info:
         const sat_scVaK_entry;
         const 9;
         const 64424509455;
         const ScWiZ_srt+120;
 },
 eta1_scV9O_entry() //  [R1]
         { []
         }
     {offset
       cd5HU: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cd5HY; else goto cd5HX;
       cd5HY: // global
           HpAlloc = 88;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd5HX: // global
           _scV9z::P64 = P64[R1 + 16];
           _scV9A::P64 = P64[R1 + 24];
           _scV9B::P64 = P64[R1 + 32];
           _scV9C::P64 = P64[R1 + 40];
           _scV9D::P64 = P64[R1 + 48];
           _scV9E::P64 = P64[R1 + 56];
           _scV9F::P64 = P64[R1 + 64];
           _scV9G::P64 = P64[R1 + 72];
           _scV9K::P64 = P64[R1 + 80];
           I64[Hp - 80] = sat_scVaK_info;
           P64[Hp - 64] = _scV9z::P64;
           P64[Hp - 56] = _scV9A::P64;
           P64[Hp - 48] = _scV9B::P64;
           P64[Hp - 40] = _scV9C::P64;
           P64[Hp - 32] = _scV9D::P64;
           P64[Hp - 24] = _scV9E::P64;
           P64[Hp - 16] = _scV9F::P64;
           P64[Hp - 8] = _scV9G::P64;
           P64[Hp] = _scV9K::P64;
           R3 = Hp - 80;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . eta1_scV9O_info" {
     eta1_scV9O_info:
         const eta1_scV9O_entry;
         const 9;
         const 64424509455;
         const ScWiZ_srt+120;
 },
 sat_scVaM_entry() //  [R1]
         { []
         }
     {offset
       cd5I6: // global
           _scVaM::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cd5I7; else goto cd5I8;
       cd5I8: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cd5Ia; else goto cd5I9;
       cd5Ia: // global
           HpAlloc = 88;
           goto cd5I7;
       cd5I7: // global
           R1 = _scVaM::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd5I9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVaM::P64;
           _scV9y::P64 = P64[_scVaM::P64 + 16];
           _scV9z::P64 = P64[_scVaM::P64 + 24];
           _scV9A::P64 = P64[_scVaM::P64 + 32];
           _scV9B::P64 = P64[_scVaM::P64 + 40];
           _scV9C::P64 = P64[_scVaM::P64 + 48];
           _scV9D::P64 = P64[_scVaM::P64 + 56];
           _scV9E::P64 = P64[_scVaM::P64 + 64];
           _scV9F::P64 = P64[_scVaM::P64 + 72];
           _scV9G::P64 = P64[_scVaM::P64 + 80];
           _scV9K::P64 = P64[_scVaM::P64 + 88];
           I64[Hp - 80] = eta1_scV9O_info;
           P64[Hp - 64] = _scV9z::P64;
           P64[Hp - 56] = _scV9A::P64;
           P64[Hp - 48] = _scV9B::P64;
           P64[Hp - 40] = _scV9C::P64;
           P64[Hp - 32] = _scV9D::P64;
           P64[Hp - 24] = _scV9E::P64;
           P64[Hp - 16] = _scV9F::P64;
           P64[Hp - 8] = _scV9G::P64;
           P64[Hp] = _scV9K::P64;
           I64[Sp - 32] = block_cd5HZ_info;
           R1 = _scV9y::P64;
           P64[Sp - 24] = Hp - 80;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ud5Ih; else goto cd5I0;
       ud5Ih: // global
           call _cd5HZ(R1) args: 0, res: 0, upd: 0;
       cd5I0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVaM_info" {
     sat_scVaM_info:
         const sat_scVaM_entry;
         const 10;
         const 64424509455;
         const ScWiZ_srt+120;
 },
 _cd5HZ() //  [R1]
         { []
         }
     {offset
       cd5HZ: // global
           _cd5Ch::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cd5I3; else goto cd5I4;
       cd5I3: // global
           R3 = _cd5Ch::P64;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cd5I4: // global
           R3 = _cd5Ch::P64;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd5HZ_info" {
     block_cd5HZ_info:
         const _cd5HZ;
         const 1;
         const 12884901918;
         const ScWiZ_srt+128;
 },
 sat_scVaN_entry() //  [R1]
         { []
         }
     {offset
       cd5Ii: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cd5Im; else goto cd5Il;
       cd5Im: // global
           HpAlloc = 96;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd5Il: // global
           _scV9y::P64 = P64[R1 + 16];
           _scV9z::P64 = P64[R1 + 24];
           _scV9A::P64 = P64[R1 + 32];
           _scV9B::P64 = P64[R1 + 40];
           _scV9C::P64 = P64[R1 + 48];
           _scV9D::P64 = P64[R1 + 56];
           _scV9E::P64 = P64[R1 + 64];
           _scV9F::P64 = P64[R1 + 72];
           _scV9G::P64 = P64[R1 + 80];
           _scV9K::P64 = P64[R1 + 88];
           I64[Hp - 88] = sat_scVaM_info;
           P64[Hp - 72] = _scV9y::P64;
           P64[Hp - 64] = _scV9z::P64;
           P64[Hp - 56] = _scV9A::P64;
           P64[Hp - 48] = _scV9B::P64;
           P64[Hp - 40] = _scV9C::P64;
           P64[Hp - 32] = _scV9D::P64;
           P64[Hp - 24] = _scV9E::P64;
           P64[Hp - 16] = _scV9F::P64;
           P64[Hp - 8] = _scV9G::P64;
           P64[Hp] = _scV9K::P64;
           R3 = Hp - 88;
           R2 = lvl6_rcV55_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVaN_info" {
     sat_scVaN_info:
         const sat_scVaN_entry;
         const 10;
         const 64424509455;
         const ScWiZ_srt+120;
 },
 sat_scVaO_entry() //  [R1]
         { []
         }
     {offset
       cd5In: // global
           _scVaO::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd5Io; else goto cd5Ip;
       cd5Ip: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cd5Ir; else goto cd5Iq;
       cd5Ir: // global
           HpAlloc = 96;
           goto cd5Io;
       cd5Io: // global
           R1 = _scVaO::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd5Iq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVaO::P64;
           _scV9y::P64 = P64[_scVaO::P64 + 16];
           _scV9z::P64 = P64[_scVaO::P64 + 24];
           _scV9A::P64 = P64[_scVaO::P64 + 32];
           _scV9B::P64 = P64[_scVaO::P64 + 40];
           _scV9C::P64 = P64[_scVaO::P64 + 48];
           _scV9D::P64 = P64[_scVaO::P64 + 56];
           _scV9E::P64 = P64[_scVaO::P64 + 64];
           _scV9F::P64 = P64[_scVaO::P64 + 72];
           _scV9G::P64 = P64[_scVaO::P64 + 80];
           _scV9K::P64 = P64[_scVaO::P64 + 88];
           I64[Hp - 88] = sat_scVaN_info;
           P64[Hp - 72] = _scV9y::P64;
           P64[Hp - 64] = _scV9z::P64;
           P64[Hp - 56] = _scV9A::P64;
           P64[Hp - 48] = _scV9B::P64;
           P64[Hp - 40] = _scV9C::P64;
           P64[Hp - 32] = _scV9D::P64;
           P64[Hp - 24] = _scV9E::P64;
           P64[Hp - 16] = _scV9F::P64;
           P64[Hp - 8] = _scV9G::P64;
           P64[Hp] = _scV9K::P64;
           R3 = Hp - 88;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVaO_info" {
     sat_scVaO_info:
         const sat_scVaO_entry;
         const 10;
         const 64424509455;
         const ScWiZ_srt+120;
 },
 sat_scVaS_entry() //  [R1]
         { []
         }
     {offset
       cd5Is: // global
           if ((Sp + -104) < SpLim) (likely: False) goto cd5Iz; else goto cd5IA;
       cd5Iz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd5IA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 104] = block_cd5C0_info;
           _scV9y::P64 = P64[R1 + 24];
           _scV9z::P64 = P64[R1 + 32];
           _scV9A::P64 = P64[R1 + 40];
           _scV9B::P64 = P64[R1 + 48];
           _scV9C::P64 = P64[R1 + 56];
           _scV9D::P64 = P64[R1 + 64];
           _scV9E::P64 = P64[R1 + 72];
           _scV9F::P64 = P64[R1 + 80];
           _scV9G::P64 = P64[R1 + 88];
           _scV9K::P64 = P64[R1 + 96];
           R1 = P64[R1 + 16];
           P64[Sp - 96] = _scV9y::P64;
           P64[Sp - 88] = _scV9z::P64;
           P64[Sp - 80] = _scV9A::P64;
           P64[Sp - 72] = _scV9B::P64;
           P64[Sp - 64] = _scV9C::P64;
           P64[Sp - 56] = _scV9D::P64;
           P64[Sp - 48] = _scV9E::P64;
           P64[Sp - 40] = _scV9F::P64;
           P64[Sp - 32] = _scV9G::P64;
           P64[Sp - 24] = _scV9K::P64;
           Sp = Sp - 104;
           if (R1 & 7 != 0) goto ud5IH; else goto cd5C1;
       ud5IH: // global
           call _cd5C0(R1) args: 0, res: 0, upd: 0;
       cd5C1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVaS_info" {
     sat_scVaS_info:
         const sat_scVaS_entry;
         const 11;
         const 64424509455;
         const ScWiZ_srt+120;
 },
 _cd5C0() //  [R1]
         { []
         }
     {offset
       cd5C0: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cd5ID; else goto cd5IC;
       cd5ID: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cd5IC: // global
           _scV9M::I64 = I64[R1 + 7];
           I64[Hp - 88] = sat_scVaO_info;
           P64[Hp - 72] = P64[Sp + 8];
           P64[Hp - 64] = P64[Sp + 16];
           P64[Hp - 56] = P64[Sp + 24];
           P64[Hp - 48] = P64[Sp + 32];
           P64[Hp - 40] = P64[Sp + 40];
           P64[Hp - 32] = P64[Sp + 48];
           P64[Hp - 24] = P64[Sp + 56];
           P64[Hp - 16] = P64[Sp + 64];
           P64[Hp - 8] = P64[Sp + 72];
           P64[Hp] = P64[Sp + 80];
           I64[Sp + 80] = block_cd5Iw_info;
           R3 = Hp - 88;
           R2 = _scV9M::I64;
           Sp = Sp + 80;
           call GHC.Show.$witos_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cd5C0_info" {
     block_cd5C0_info:
         const _cd5C0;
         const 10;
         const 64424509470;
         const ScWiZ_srt+120;
 },
 _cd5Iw() //  [R1, R2]
         { []
         }
     {offset
       cd5Iw: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cd5IG; else goto cd5IF;
       cd5IG: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cd5IF: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd5Iw_info" {
     block_cd5Iw_info:
         const _cd5Iw;
         const 0;
         const 30;
 },
 sat_scVaT_entry() //  [R1]
         { []
         }
     {offset
       cd5II: // global
           _scVaT::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd5IJ; else goto cd5IK;
       cd5IK: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cd5IM; else goto cd5IL;
       cd5IM: // global
           HpAlloc = 104;
           goto cd5IJ;
       cd5IJ: // global
           R1 = _scVaT::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd5IL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVaT::P64;
           _scV9x::P64 = P64[_scVaT::P64 + 16];
           _scV9y::P64 = P64[_scVaT::P64 + 24];
           _scV9z::P64 = P64[_scVaT::P64 + 32];
           _scV9A::P64 = P64[_scVaT::P64 + 40];
           _scV9B::P64 = P64[_scVaT::P64 + 48];
           _scV9C::P64 = P64[_scVaT::P64 + 56];
           _scV9D::P64 = P64[_scVaT::P64 + 64];
           _scV9E::P64 = P64[_scVaT::P64 + 72];
           _scV9F::P64 = P64[_scVaT::P64 + 80];
           _scV9G::P64 = P64[_scVaT::P64 + 88];
           _scV9K::P64 = P64[_scVaT::P64 + 96];
           I64[Hp - 96] = sat_scVaS_info;
           P64[Hp - 80] = _scV9x::P64;
           P64[Hp - 72] = _scV9y::P64;
           P64[Hp - 64] = _scV9z::P64;
           P64[Hp - 56] = _scV9A::P64;
           P64[Hp - 48] = _scV9B::P64;
           P64[Hp - 40] = _scV9C::P64;
           P64[Hp - 32] = _scV9D::P64;
           P64[Hp - 24] = _scV9E::P64;
           P64[Hp - 16] = _scV9F::P64;
           P64[Hp - 8] = _scV9G::P64;
           P64[Hp] = _scV9K::P64;
           R3 = Hp - 96;
           R2 = lvl5_rcV54_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVaT_info" {
     sat_scVaT_info:
         const sat_scVaT_entry;
         const 11;
         const 64424509455;
         const ScWiZ_srt+120;
 },
 p_scV9J_entry() //  [R1, R2]
         { []
         }
     {offset
       cd5IN: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cd5IR; else goto cd5IQ;
       cd5IR: // global
           HpAlloc = 104;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd5IQ: // global
           _scV9x::P64 = P64[R1 + 7];
           _scV9y::P64 = P64[R1 + 15];
           _scV9z::P64 = P64[R1 + 23];
           _scV9A::P64 = P64[R1 + 31];
           _scV9B::P64 = P64[R1 + 39];
           _scV9C::P64 = P64[R1 + 47];
           _scV9D::P64 = P64[R1 + 55];
           _scV9E::P64 = P64[R1 + 63];
           _scV9F::P64 = P64[R1 + 71];
           _scV9G::P64 = P64[R1 + 79];
           I64[Hp - 96] = sat_scVaT_info;
           P64[Hp - 80] = _scV9x::P64;
           P64[Hp - 72] = _scV9y::P64;
           P64[Hp - 64] = _scV9z::P64;
           P64[Hp - 56] = _scV9A::P64;
           P64[Hp - 48] = _scV9B::P64;
           P64[Hp - 40] = _scV9C::P64;
           P64[Hp - 32] = _scV9D::P64;
           P64[Hp - 24] = _scV9E::P64;
           P64[Hp - 16] = _scV9F::P64;
           P64[Hp - 8] = _scV9G::P64;
           P64[Hp] = R2;
           R3 = Hp - 96;
           R2 = lvl4_rcV53_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . p_scV9J_info" {
     p_scV9J_info:
         const p_scV9J_entry;
         const 10;
         const 64424509448;
         const 4294967301;
         const ScWiZ_srt+120;
 },
 sat_scVaW_entry() //  [R1]
         { []
         }
     {offset
       cd5J1: // global
           _scVaW::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd5J2; else goto cd5J3;
       cd5J3: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cd5J5; else goto cd5J4;
       cd5J5: // global
           HpAlloc = 24;
           goto cd5J2;
       cd5J2: // global
           R1 = _scVaW::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd5J4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVaW::P64;
           _scV9v::P64 = P64[_scVaW::P64 + 16];
           _scV9J::P64 = P64[_scVaW::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _scV9v::P64;
           R2 = Hp - 14;
           R1 = _scV9J::P64;
           Sp = Sp - 16;
           call p_scV9J_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVaW_info" {
     sat_scVaW_info:
         const sat_scVaW_entry;
         const 2;
         const 64424509458;
         const ScWiZ_srt+120;
 },
 GHC.RTS.Flags.$fShowParFlags_$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cd5J6: // global
           if ((Sp + -96) < SpLim) (likely: False) goto cd5J7; else goto cd5J8;
       cd5J7: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fShowParFlags_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cd5J8: // global
           I64[Sp - 24] = block_cd5BD_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ud5Ji; else goto cd5BE;
       ud5Ji: // global
           call _cd5BD(R1) args: 0, res: 0, upd: 0;
       cd5BE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowParFlags_$cshowsPrec_info" {
     GHC.RTS.Flags.$fShowParFlags_$cshowsPrec_info:
         const GHC.RTS.Flags.$fShowParFlags_$cshowsPrec_entry;
         const 0;
         const 133143986190;
         const 12884901911;
         const ScWiZ_srt+120;
 },
 _cd5BD() //  [R1]
         { []
         }
     {offset
       cd5BD: // global
           I64[Sp - 72] = block_cd5BI_info;
           _scV9x::P64 = P64[R1 + 7];
           _scV9y::P64 = P64[R1 + 15];
           _scV9z::P64 = P64[R1 + 23];
           _scV9A::P64 = P64[R1 + 31];
           _scV9B::P64 = P64[R1 + 39];
           _scV9C::P64 = P64[R1 + 47];
           _scV9D::P64 = P64[R1 + 55];
           _scV9E::P64 = P64[R1 + 63];
           _scV9F::P64 = P64[R1 + 71];
           _scV9G::P64 = P64[R1 + 79];
           R1 = P64[Sp + 8];
           P64[Sp - 64] = _scV9z::P64;
           P64[Sp - 56] = _scV9A::P64;
           P64[Sp - 48] = _scV9B::P64;
           P64[Sp - 40] = _scV9C::P64;
           P64[Sp - 32] = _scV9D::P64;
           P64[Sp - 24] = _scV9E::P64;
           P64[Sp - 16] = _scV9F::P64;
           P64[Sp - 8] = _scV9G::P64;
           P64[Sp] = _scV9y::P64;
           P64[Sp + 8] = _scV9x::P64;
           Sp = Sp - 72;
           if (R1 & 7 != 0) goto ud5Jh; else goto cd5BJ;
       ud5Jh: // global
           call _cd5BI(R1) args: 0, res: 0, upd: 0;
       cd5BJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cd5BD_info" {
     block_cd5BD_info:
         const _cd5BD;
         const 2;
         const 64424509470;
         const ScWiZ_srt+120;
 },
 _cd5BI() //  [R1]
         { []
         }
     {offset
       cd5BI: // global
           Hp = Hp + 144;
           if (Hp > HpLim) (likely: False) goto cd5Jc; else goto cd5Jb;
       cd5Jc: // global
           HpAlloc = 144;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cd5Jb: // global
           _scV9I::I64 = I64[R1 + 7];
           I64[Hp - 136] = p_scV9J_info;
           P64[Hp - 128] = P64[Sp + 80];
           P64[Hp - 120] = P64[Sp + 72];
           P64[Hp - 112] = P64[Sp + 8];
           P64[Hp - 104] = P64[Sp + 16];
           P64[Hp - 96] = P64[Sp + 24];
           P64[Hp - 88] = P64[Sp + 32];
           P64[Hp - 80] = P64[Sp + 40];
           P64[Hp - 72] = P64[Sp + 48];
           P64[Hp - 64] = P64[Sp + 56];
           P64[Hp - 56] = P64[Sp + 64];
           _scV9v::P64 = P64[Sp + 88];
           _cd5BN::P64 = Hp - 135;
           if (%MO_S_Lt_W64(_scV9I::I64, 11)) goto cd5Je; else goto cd5Jg;
       cd5Je: // global
           Hp = Hp - 56;
           R2 = _scV9v::P64;
           R1 = _cd5BN::P64;
           Sp = Sp + 96;
           call p_scV9J_entry(R2, R1) args: 8, res: 0, upd: 8;
       cd5Jg: // global
           I64[Hp - 48] = sat_scVaW_info;
           P64[Hp - 32] = _scV9v::P64;
           P64[Hp - 24] = _cd5BN::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 96;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd5BI_info" {
     block_cd5BI_info:
         const _cd5BI;
         const 11;
         const 64424509470;
         const ScWiZ_srt+120;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:55.743722635 UTC

[section ""data" . GHC.RTS.Flags.$fShowParFlags_$cshow_closure" {
     GHC.RTS.Flags.$fShowParFlags_$cshow_closure:
         const GHC.RTS.Flags.$fShowParFlags_$cshow_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowParFlags_$cshow_entry() //  [R2]
         { []
         }
     {offset
       cd5Np: // global
           R4 = GHC.Types.[]_closure+1;
           R3 = R2;
           R2 = GHC.RTS.Flags.$fEnumDoCostCentres10_closure+1;
           call GHC.RTS.Flags.$fShowParFlags_$cshowsPrec_entry(R4,
                                                               R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowParFlags_$cshow_info" {
     GHC.RTS.Flags.$fShowParFlags_$cshow_info:
         const GHC.RTS.Flags.$fShowParFlags_$cshow_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const ScWiZ_srt+152;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:55.747224737 UTC

[section ""data" . GHC.RTS.Flags.$fShowParFlags1_closure" {
     GHC.RTS.Flags.$fShowParFlags1_closure:
         const GHC.RTS.Flags.$fShowParFlags1_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowParFlags1_entry() //  [R2, R3]
         { []
         }
     {offset
       cd5NA: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.RTS.Flags.$fEnumDoCostCentres10_closure+1;
           call GHC.RTS.Flags.$fShowParFlags_$cshowsPrec_entry(R4,
                                                               R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowParFlags1_info" {
     GHC.RTS.Flags.$fShowParFlags1_info:
         const GHC.RTS.Flags.$fShowParFlags1_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const ScWiZ_srt+152;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:55.751118008 UTC

[section ""data" . GHC.RTS.Flags.$fShowParFlags_$cshowList_closure" {
     GHC.RTS.Flags.$fShowParFlags_$cshowList_closure:
         const GHC.RTS.Flags.$fShowParFlags_$cshowList_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowParFlags_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       cd5NL: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.RTS.Flags.$fShowParFlags1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowParFlags_$cshowList_info" {
     GHC.RTS.Flags.$fShowParFlags_$cshowList_info:
         const GHC.RTS.Flags.$fShowParFlags_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const ScWiZ_srt+160;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:55.754379799 UTC

[section ""data" . GHC.RTS.Flags.$fShowParFlags_closure" {
     GHC.RTS.Flags.$fShowParFlags_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.RTS.Flags.$fShowParFlags_$cshowsPrec_closure+3;
         const GHC.RTS.Flags.$fShowParFlags_$cshow_closure+1;
         const GHC.RTS.Flags.$fShowParFlags_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:55.756147142 UTC

[section ""cstring" . GHC.RTS.Flags.$fShowTickyFlags5_bytes" {
     GHC.RTS.Flags.$fShowTickyFlags5_bytes:
         I8[] [84,105,99,107,121,70,108,97,103,115,32,123]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:55.75838448 UTC

[section ""data" . GHC.RTS.Flags.$fShowTickyFlags4_closure" {
     GHC.RTS.Flags.$fShowTickyFlags4_closure:
         const GHC.RTS.Flags.$fShowTickyFlags4_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fShowTickyFlags4_entry() //  [R1]
         { []
         }
     {offset
       cd5O0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd5O1; else goto cd5O2;
       cd5O1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd5O2: // global
           (_cd5NX::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cd5NX::I64 == 0) goto cd5NZ; else goto cd5NY;
       cd5NZ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cd5NY: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cd5NX::I64;
           R2 = GHC.RTS.Flags.$fShowTickyFlags5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowTickyFlags4_info" {
     GHC.RTS.Flags.$fShowTickyFlags4_info:
         const GHC.RTS.Flags.$fShowTickyFlags4_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:55.7619627 UTC

[section ""cstring" . GHC.RTS.Flags.$fShowTickyFlags3_bytes" {
     GHC.RTS.Flags.$fShowTickyFlags3_bytes:
         I8[] [115,104,111,119,84,105,99,107,121,83,116,97,116,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:55.763577698 UTC

[section ""cstring" . GHC.RTS.Flags.$fShowTickyFlags2_bytes" {
     GHC.RTS.Flags.$fShowTickyFlags2_bytes:
         I8[] [116,105,99,107,121,70,105,108,101,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:55.778100299 UTC

[section ""data" . GHC.RTS.Flags.$w$cshowsPrec8_closure" {
     GHC.RTS.Flags.$w$cshowsPrec8_closure:
         const GHC.RTS.Flags.$w$cshowsPrec8_info;
         const 0;
 },
 f8_scVb3_entry() //  [R1]
         { []
         }
     {offset
       cd5Ok: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd5Ol; else goto cd5Om;
       cd5Ol: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd5Om: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 16];
           R3 = GHC.RTS.Flags.$fEnumDoCostCentres10_closure+1;
           R2 = GHC.Show.$fShow[]_$s$fShow[]1_closure;
           Sp = Sp - 16;
           call GHC.Show.$fShowMaybe_$cshowsPrec_entry(R4,
                                                       R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f8_scVb3_info" {
     f8_scVb3_info:
         const f8_scVb3_entry;
         const 1;
         const 12884901904;
         const ScWiZ_srt+168;
 },
 sat_scVb7_entry() //  [R1]
         { []
         }
     {offset
       cd5OY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd5OZ; else goto cd5P0;
       cd5OZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd5P0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.RTS.Flags.$fShowCCFlags2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVb7_info" {
     sat_scVb7_info:
         const sat_scVb7_entry;
         const 1;
         const 16;
 },
 sat_scVb8_entry() //  [R1]
         { []
         }
     {offset
       cd5P1: // global
           _scVb8::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd5P2; else goto cd5P3;
       cd5P3: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cd5P5; else goto cd5P4;
       cd5P5: // global
           HpAlloc = 24;
           goto cd5P2;
       cd5P2: // global
           R1 = _scVb8::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd5P4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVb8::P64;
           _scVb3::P64 = P64[_scVb8::P64 + 16];
           _scVb5::P64 = P64[_scVb8::P64 + 24];
           I64[Hp - 16] = sat_scVb7_info;
           P64[Hp] = _scVb5::P64;
           R2 = Hp - 16;
           R1 = _scVb3::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVb8_info" {
     sat_scVb8_info:
         const sat_scVb8_entry;
         const 2;
         const 18;
 },
 sat_scVb9_entry() //  [R1]
         { []
         }
     {offset
       cd5P6: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cd5Pa; else goto cd5P9;
       cd5Pa: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd5P9: // global
           _scVb3::P64 = P64[R1 + 16];
           _scVb5::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_scVb8_info;
           P64[Hp - 8] = _scVb3::P64;
           P64[Hp] = _scVb5::P64;
           R3 = Hp - 24;
           R2 = GHC.RTS.Flags.$fShowTickyFlags2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVb9_info" {
     sat_scVb9_info:
         const sat_scVb9_entry;
         const 2;
         const 18;
 },
 sat_scVba_entry() //  [R1]
         { []
         }
     {offset
       cd5Pb: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cd5Pf; else goto cd5Pe;
       cd5Pf: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd5Pe: // global
           _scVb3::P64 = P64[R1 + 16];
           _scVb5::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_scVb9_info;
           P64[Hp - 8] = _scVb3::P64;
           P64[Hp] = _scVb5::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVba_info" {
     sat_scVba_info:
         const sat_scVba_entry;
         const 2;
         const 4294967314;
         const ScWiZ_srt+144;
 },
 sat_scVbb_entry() //  [R1]
         { []
         }
     {offset
       cd5Py: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd5Pz; else goto cd5PA;
       cd5Pz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd5PA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.RTS.Flags.$fShowCCFlags2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVbb_info" {
     sat_scVbb_info:
         const sat_scVbb_entry;
         const 1;
         const 16;
 },
 sat_scVbc_entry() //  [R1]
         { []
         }
     {offset
       cd5PB: // global
           _scVbc::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd5PC; else goto cd5PD;
       cd5PD: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cd5PF; else goto cd5PE;
       cd5PF: // global
           HpAlloc = 24;
           goto cd5PC;
       cd5PC: // global
           R1 = _scVbc::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd5PE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVbc::P64;
           _scVb3::P64 = P64[_scVbc::P64 + 16];
           _scVb5::P64 = P64[_scVbc::P64 + 24];
           I64[Hp - 16] = sat_scVbb_info;
           P64[Hp] = _scVb5::P64;
           R2 = Hp - 16;
           R1 = _scVb3::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVbc_info" {
     sat_scVbc_info:
         const sat_scVbc_entry;
         const 2;
         const 18;
 },
 sat_scVbd_entry() //  [R1]
         { []
         }
     {offset
       cd5PG: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cd5PK; else goto cd5PJ;
       cd5PK: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd5PJ: // global
           _scVb3::P64 = P64[R1 + 16];
           _scVb5::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_scVbc_info;
           P64[Hp - 8] = _scVb3::P64;
           P64[Hp] = _scVb5::P64;
           R3 = Hp - 24;
           R2 = GHC.RTS.Flags.$fShowTickyFlags2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVbd_info" {
     sat_scVbd_info:
         const sat_scVbd_entry;
         const 2;
         const 18;
 },
 sat_scVbe_entry() //  [R1]
         { []
         }
     {offset
       cd5PL: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cd5PP; else goto cd5PO;
       cd5PP: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd5PO: // global
           _scVb3::P64 = P64[R1 + 16];
           _scVb5::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_scVbd_info;
           P64[Hp - 8] = _scVb3::P64;
           P64[Hp] = _scVb5::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVbe_info" {
     sat_scVbe_info:
         const sat_scVbe_entry;
         const 2;
         const 4294967314;
         const ScWiZ_srt+144;
 },
 sat_scVbf_entry() //  [R1]
         { []
         }
     {offset
       cd5PU: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cd5PV; else goto cd5PW;
       cd5PV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd5PW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cd5OD_info;
           _scVb3::P64 = P64[R1 + 24];
           _scVb5::P64 = P64[R1 + 32];
           R1 = P64[R1 + 16];
           P64[Sp - 32] = _scVb3::P64;
           P64[Sp - 24] = _scVb5::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ud5Q3; else goto cd5OE;
       ud5Q3: // global
           call _cd5OD(R1) args: 0, res: 0, upd: 0;
       cd5OE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVbf_info" {
     sat_scVbf_info:
         const sat_scVbf_entry;
         const 3;
         const 30064771087;
         const ScWiZ_srt+128;
 },
 _cd5OD() //  [R1]
         { []
         }
     {offset
       cd5OD: // global
           _scVb3::P64 = P64[Sp + 8];
           _scVb5::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto cd5PR; else goto cd5PS;
       cd5PR: // global
           Hp = Hp + 32;
           _scVb6::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cd5Q2; else goto cd5PY;
       cd5PY: // global
           I64[Hp - 24] = sat_scVba_info;
           P64[Hp - 8] = _scVb3::P64;
           P64[Hp] = _scVb5::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cd5PS: // global
           Hp = Hp + 32;
           _scVb6::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cd5Q2; else goto cd5Q1;
       cd5Q2: // global
           HpAlloc = 32;
           R1 = _scVb6::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cd5Q1: // global
           I64[Hp - 24] = sat_scVbe_info;
           P64[Hp - 8] = _scVb3::P64;
           P64[Hp] = _scVb5::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd5OD_info" {
     block_cd5OD_info:
         const _cd5OD;
         const 2;
         const 30064771102;
         const ScWiZ_srt+128;
 },
 sat_scVbg_entry() //  [R1]
         { []
         }
     {offset
       cd5Q4: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cd5Q8; else goto cd5Q7;
       cd5Q8: // global
           HpAlloc = 40;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd5Q7: // global
           _scVb1::P64 = P64[R1 + 16];
           _scVb3::P64 = P64[R1 + 24];
           _scVb5::P64 = P64[R1 + 32];
           I64[Hp - 32] = sat_scVbf_info;
           P64[Hp - 16] = _scVb1::P64;
           P64[Hp - 8] = _scVb3::P64;
           P64[Hp] = _scVb5::P64;
           R3 = Hp - 32;
           R2 = GHC.RTS.Flags.$fShowTickyFlags3_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVbg_info" {
     sat_scVbg_info:
         const sat_scVbg_entry;
         const 3;
         const 30064771087;
         const ScWiZ_srt+128;
 },
 sat_scVbh_entry() //  [R1, R2]
         { []
         }
     {offset
       cd5Q9: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cd5Qd; else goto cd5Qc;
       cd5Qd: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd5Qc: // global
           _scVb1::P64 = P64[R1 + 7];
           _scVb3::P64 = P64[R1 + 15];
           I64[Hp - 32] = sat_scVbg_info;
           P64[Hp - 16] = _scVb1::P64;
           P64[Hp - 8] = _scVb3::P64;
           P64[Hp] = R2;
           R3 = Hp - 32;
           R2 = GHC.RTS.Flags.$fShowTickyFlags4_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVbh_info" {
     sat_scVbh_info:
         const sat_scVbh_entry;
         const 2;
         const 579820584971;
         const 4294967301;
         const ScWiZ_srt+128;
 },
 sat_scVbl_entry() //  [R1]
         { []
         }
     {offset
       cd5QS: // global
           _scVbl::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd5QT; else goto cd5QU;
       cd5QU: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cd5QW; else goto cd5QV;
       cd5QW: // global
           HpAlloc = 24;
           goto cd5QT;
       cd5QT: // global
           R1 = _scVbl::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd5QV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVbl::P64;
           _scVbi::P64 = P64[_scVbl::P64 + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _scVbi::P64;
           R3 = Hp - 14;
           R2 = GHC.RTS.Flags.$fShowCCFlags2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVbl_info" {
     sat_scVbl_info:
         const sat_scVbl_entry;
         const 1;
         const 16;
 },
 sat_scVbm_entry() //  [R1]
         { []
         }
     {offset
       cd5QX: // global
           _scVbm::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd5QY; else goto cd5QZ;
       cd5QZ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cd5R1; else goto cd5R0;
       cd5R1: // global
           HpAlloc = 24;
           goto cd5QY;
       cd5QY: // global
           R1 = _scVbm::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd5R0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVbm::P64;
           _scVb3::P64 = P64[_scVbm::P64 + 16];
           _scVbi::P64 = P64[_scVbm::P64 + 24];
           I64[Hp - 16] = sat_scVbl_info;
           P64[Hp] = _scVbi::P64;
           R2 = Hp - 16;
           R1 = _scVb3::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVbm_info" {
     sat_scVbm_info:
         const sat_scVbm_entry;
         const 2;
         const 18;
 },
 sat_scVbn_entry() //  [R1]
         { []
         }
     {offset
       cd5R2: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cd5R6; else goto cd5R5;
       cd5R6: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd5R5: // global
           _scVb3::P64 = P64[R1 + 16];
           _scVbi::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_scVbm_info;
           P64[Hp - 8] = _scVb3::P64;
           P64[Hp] = _scVbi::P64;
           R3 = Hp - 24;
           R2 = GHC.RTS.Flags.$fShowTickyFlags2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVbn_info" {
     sat_scVbn_info:
         const sat_scVbn_entry;
         const 2;
         const 18;
 },
 sat_scVbo_entry() //  [R1]
         { []
         }
     {offset
       cd5R7: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cd5Rb; else goto cd5Ra;
       cd5Rb: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd5Ra: // global
           _scVb3::P64 = P64[R1 + 16];
           _scVbi::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_scVbn_info;
           P64[Hp - 8] = _scVb3::P64;
           P64[Hp] = _scVbi::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVbo_info" {
     sat_scVbo_info:
         const sat_scVbo_entry;
         const 2;
         const 4294967314;
         const ScWiZ_srt+144;
 },
 sat_scVbq_entry() //  [R1]
         { []
         }
     {offset
       cd5Rv: // global
           _scVbq::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd5Rw; else goto cd5Rx;
       cd5Rx: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cd5Rz; else goto cd5Ry;
       cd5Rz: // global
           HpAlloc = 24;
           goto cd5Rw;
       cd5Rw: // global
           R1 = _scVbq::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd5Ry: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVbq::P64;
           _scVbi::P64 = P64[_scVbq::P64 + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _scVbi::P64;
           R3 = Hp - 14;
           R2 = GHC.RTS.Flags.$fShowCCFlags2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVbq_info" {
     sat_scVbq_info:
         const sat_scVbq_entry;
         const 1;
         const 16;
 },
 sat_scVbr_entry() //  [R1]
         { []
         }
     {offset
       cd5RA: // global
           _scVbr::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd5RB; else goto cd5RC;
       cd5RC: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cd5RE; else goto cd5RD;
       cd5RE: // global
           HpAlloc = 24;
           goto cd5RB;
       cd5RB: // global
           R1 = _scVbr::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd5RD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVbr::P64;
           _scVb3::P64 = P64[_scVbr::P64 + 16];
           _scVbi::P64 = P64[_scVbr::P64 + 24];
           I64[Hp - 16] = sat_scVbq_info;
           P64[Hp] = _scVbi::P64;
           R2 = Hp - 16;
           R1 = _scVb3::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVbr_info" {
     sat_scVbr_info:
         const sat_scVbr_entry;
         const 2;
         const 18;
 },
 sat_scVbs_entry() //  [R1]
         { []
         }
     {offset
       cd5RF: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cd5RJ; else goto cd5RI;
       cd5RJ: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd5RI: // global
           _scVb3::P64 = P64[R1 + 16];
           _scVbi::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_scVbr_info;
           P64[Hp - 8] = _scVb3::P64;
           P64[Hp] = _scVbi::P64;
           R3 = Hp - 24;
           R2 = GHC.RTS.Flags.$fShowTickyFlags2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVbs_info" {
     sat_scVbs_info:
         const sat_scVbs_entry;
         const 2;
         const 18;
 },
 sat_scVbt_entry() //  [R1]
         { []
         }
     {offset
       cd5RK: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cd5RO; else goto cd5RN;
       cd5RO: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd5RN: // global
           _scVb3::P64 = P64[R1 + 16];
           _scVbi::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_scVbs_info;
           P64[Hp - 8] = _scVb3::P64;
           P64[Hp] = _scVbi::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVbt_info" {
     sat_scVbt_info:
         const sat_scVbt_entry;
         const 2;
         const 4294967314;
         const ScWiZ_srt+144;
 },
 sat_scVbu_entry() //  [R1]
         { []
         }
     {offset
       cd5RT: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cd5RU; else goto cd5RV;
       cd5RU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd5RV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cd5Qw_info;
           _scVb3::P64 = P64[R1 + 24];
           _scVbi::P64 = P64[R1 + 32];
           R1 = P64[R1 + 16];
           P64[Sp - 32] = _scVb3::P64;
           P64[Sp - 24] = _scVbi::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ud5S2; else goto cd5Qx;
       ud5S2: // global
           call _cd5Qw(R1) args: 0, res: 0, upd: 0;
       cd5Qx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVbu_info" {
     sat_scVbu_info:
         const sat_scVbu_entry;
         const 3;
         const 30064771087;
         const ScWiZ_srt+128;
 },
 _cd5Qw() //  [R1]
         { []
         }
     {offset
       cd5Qw: // global
           _scVb3::P64 = P64[Sp + 8];
           _scVbi::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto cd5RQ; else goto cd5RR;
       cd5RQ: // global
           Hp = Hp + 32;
           _scVbj::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cd5S1; else goto cd5RX;
       cd5RX: // global
           I64[Hp - 24] = sat_scVbo_info;
           P64[Hp - 8] = _scVb3::P64;
           P64[Hp] = _scVbi::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cd5RR: // global
           Hp = Hp + 32;
           _scVbj::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cd5S1; else goto cd5S0;
       cd5S1: // global
           HpAlloc = 32;
           R1 = _scVbj::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cd5S0: // global
           I64[Hp - 24] = sat_scVbt_info;
           P64[Hp - 8] = _scVb3::P64;
           P64[Hp] = _scVbi::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd5Qw_info" {
     block_cd5Qw_info:
         const _cd5Qw;
         const 2;
         const 30064771102;
         const ScWiZ_srt+128;
 },
 sat_scVbv_entry() //  [R1]
         { []
         }
     {offset
       cd5S3: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cd5S7; else goto cd5S6;
       cd5S7: // global
           HpAlloc = 40;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd5S6: // global
           _scVb1::P64 = P64[R1 + 16];
           _scVb3::P64 = P64[R1 + 24];
           _scVbi::P64 = P64[R1 + 32];
           I64[Hp - 32] = sat_scVbu_info;
           P64[Hp - 16] = _scVb1::P64;
           P64[Hp - 8] = _scVb3::P64;
           P64[Hp] = _scVbi::P64;
           R3 = Hp - 32;
           R2 = GHC.RTS.Flags.$fShowTickyFlags3_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVbv_info" {
     sat_scVbv_info:
         const sat_scVbv_entry;
         const 3;
         const 30064771087;
         const ScWiZ_srt+128;
 },
 sat_scVbw_entry() //  [R1]
         { []
         }
     {offset
       cd5S8: // global
           _scVbw::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd5S9; else goto cd5Sa;
       cd5Sa: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cd5Sc; else goto cd5Sb;
       cd5Sc: // global
           HpAlloc = 40;
           goto cd5S9;
       cd5S9: // global
           R1 = _scVbw::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd5Sb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVbw::P64;
           _scVb1::P64 = P64[_scVbw::P64 + 16];
           _scVb3::P64 = P64[_scVbw::P64 + 24];
           _scVbi::P64 = P64[_scVbw::P64 + 32];
           I64[Hp - 32] = sat_scVbv_info;
           P64[Hp - 16] = _scVb1::P64;
           P64[Hp - 8] = _scVb3::P64;
           P64[Hp] = _scVbi::P64;
           R3 = Hp - 32;
           R2 = GHC.RTS.Flags.$fShowTickyFlags4_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVbw_info" {
     sat_scVbw_info:
         const sat_scVbw_entry;
         const 3;
         const 579820584975;
         const ScWiZ_srt+128;
 },
 sat_scVbx_entry() //  [R1, R2]
         { []
         }
     {offset
       cd5Se: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cd5Si; else goto cd5Sh;
       cd5Si: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd5Sh: // global
           _scVb1::P64 = P64[R1 + 7];
           _scVb3::P64 = P64[R1 + 15];
           I64[Hp - 56] = sat_scVbw_info;
           P64[Hp - 40] = _scVb1::P64;
           P64[Hp - 32] = _scVb3::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVbx_info" {
     sat_scVbx_info:
         const sat_scVbx_entry;
         const 2;
         const 579820584971;
         const 4294967301;
         const ScWiZ_srt+128;
 },
 GHC.RTS.Flags.$w$cshowsPrec8_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cd5Sm: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cd5Sq; else goto cd5Sp;
       cd5Sq: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.RTS.Flags.$w$cshowsPrec8_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cd5Sp: // global
           I64[Hp - 40] = f8_scVb3_info;
           P64[Hp - 24] = R4;
           _cd5Og::P64 = Hp - 40;
           if (%MO_S_Lt_W64(R2, 11)) goto cd5Sk; else goto cd5Sl;
       cd5Sk: // global
           I64[Hp - 16] = sat_scVbh_info;
           P64[Hp - 8] = R3;
           P64[Hp] = _cd5Og::P64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cd5Sl: // global
           I64[Hp - 16] = sat_scVbx_info;
           P64[Hp - 8] = R3;
           P64[Hp] = _cd5Og::P64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$w$cshowsPrec8_info" {
     GHC.RTS.Flags.$w$cshowsPrec8_info:
         const GHC.RTS.Flags.$w$cshowsPrec8_entry;
         const 0;
         const 2091649073166;
         const 12884901907;
         const ScWiZ_srt+128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:55.830779001 UTC

[section ""data" . GHC.RTS.Flags.$fShowTickyFlags_$cshowsPrec_closure" {
     GHC.RTS.Flags.$fShowTickyFlags_$cshowsPrec_closure:
         const GHC.RTS.Flags.$fShowTickyFlags_$cshowsPrec_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowTickyFlags_$cshowsPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       cd5Ue: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd5Ui; else goto cd5Uj;
       cd5Ui: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fShowTickyFlags_$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cd5Uj: // global
           I64[Sp - 16] = block_cd5Ub_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ud5Ur; else goto cd5Uc;
       ud5Ur: // global
           call _cd5Ub(R1) args: 0, res: 0, upd: 0;
       cd5Uc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowTickyFlags_$cshowsPrec_info" {
     GHC.RTS.Flags.$fShowTickyFlags_$cshowsPrec_info:
         const GHC.RTS.Flags.$fShowTickyFlags_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const ScWiZ_srt+192;
 },
 _cd5Ub() //  [R1]
         { []
         }
     {offset
       cd5Ub: // global
           I64[Sp] = block_cd5Uh_info;
           _scVbB::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _scVbB::I64;
           if (R1 & 7 != 0) goto ud5Uq; else goto cd5Ul;
       ud5Uq: // global
           call _cd5Uh(R1) args: 0, res: 0, upd: 0;
       cd5Ul: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cd5Ub_info" {
     block_cd5Ub_info:
         const _cd5Ub;
         const 1;
         const 4294967326;
         const ScWiZ_srt+192;
 },
 _cd5Uh() //  [R1]
         { []
         }
     {offset
       cd5Uh: // global
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = I64[Sp + 8];
           Sp = Sp + 16;
           call GHC.RTS.Flags.$w$cshowsPrec8_entry(R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd5Uh_info" {
     block_cd5Uh_info:
         const _cd5Uh;
         const 65;
         const 4294967326;
         const ScWiZ_srt+192;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:55.837733964 UTC

[section ""data" . GHC.RTS.Flags.$fShowTickyFlags_$cshow_closure" {
     GHC.RTS.Flags.$fShowTickyFlags_$cshow_closure:
         const GHC.RTS.Flags.$fShowTickyFlags_$cshow_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowTickyFlags_$cshow_entry() //  [R2]
         { []
         }
     {offset
       cd5UM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd5UN; else goto cd5UO;
       cd5UN: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.$fShowTickyFlags_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd5UO: // global
           I64[Sp - 8] = block_cd5UJ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud5US; else goto cd5UK;
       ud5US: // global
           call _cd5UJ(R1) args: 0, res: 0, upd: 0;
       cd5UK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowTickyFlags_$cshow_info" {
     GHC.RTS.Flags.$fShowTickyFlags_$cshow_info:
         const GHC.RTS.Flags.$fShowTickyFlags_$cshow_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const ScWiZ_srt+192;
 },
 _cd5UJ() //  [R1]
         { []
         }
     {offset
       cd5UJ: // global
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = 0;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = GHC.Types.[]_closure+1;
           Sp = Sp - 8;
           call GHC.RTS.Flags.$w$cshowsPrec8_entry(R4,
                                                   R3,
                                                   R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd5UJ_info" {
     block_cd5UJ_info:
         const _cd5UJ;
         const 0;
         const 4294967326;
         const ScWiZ_srt+192;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:55.843304365 UTC

[section ""data" . GHC.RTS.Flags.$fShowTickyFlags1_closure" {
     GHC.RTS.Flags.$fShowTickyFlags1_closure:
         const GHC.RTS.Flags.$fShowTickyFlags1_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowTickyFlags1_entry() //  [R2]
         { []
         }
     {offset
       cd5V9: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd5Va; else goto cd5Vb;
       cd5Va: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.$fShowTickyFlags1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd5Vb: // global
           I64[Sp - 8] = block_cd5V6_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud5Vf; else goto cd5V7;
       ud5Vf: // global
           call _cd5V6(R1) args: 0, res: 0, upd: 0;
       cd5V7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowTickyFlags1_info" {
     GHC.RTS.Flags.$fShowTickyFlags1_info:
         const GHC.RTS.Flags.$fShowTickyFlags1_entry;
         const 0;
         const 38654705678;
         const 4294967301;
         const ScWiZ_srt+192;
 },
 _cd5V6() //  [R1]
         { []
         }
     {offset
       cd5V6: // global
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = 0;
           Sp = Sp + 8;
           call GHC.RTS.Flags.$w$cshowsPrec8_entry(R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd5V6_info" {
     block_cd5V6_info:
         const _cd5V6;
         const 0;
         const 4294967326;
         const ScWiZ_srt+192;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:55.848406531 UTC

[section ""data" . GHC.RTS.Flags.$fShowTickyFlags_$cshowList_closure" {
     GHC.RTS.Flags.$fShowTickyFlags_$cshowList_closure:
         const GHC.RTS.Flags.$fShowTickyFlags_$cshowList_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowTickyFlags_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       cd5Vt: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.RTS.Flags.$fShowTickyFlags1_closure+1;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowTickyFlags_$cshowList_info" {
     GHC.RTS.Flags.$fShowTickyFlags_$cshowList_info:
         const GHC.RTS.Flags.$fShowTickyFlags_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const ScWiZ_srt+216;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:55.851602041 UTC

[section ""data" . GHC.RTS.Flags.$fShowTickyFlags_closure" {
     GHC.RTS.Flags.$fShowTickyFlags_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.RTS.Flags.$fShowTickyFlags_$cshowsPrec_closure+2;
         const GHC.RTS.Flags.$fShowTickyFlags_$cshow_closure+1;
         const GHC.RTS.Flags.$fShowTickyFlags_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:55.854218913 UTC

[section ""cstring" . GHC.RTS.Flags.$fShowDoTrace6_bytes" {
     GHC.RTS.Flags.$fShowDoTrace6_bytes:
         I8[] [84,114,97,99,101,78,111,110,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:55.856512892 UTC

[section ""data" . GHC.RTS.Flags.$fShowDoTrace5_closure" {
     GHC.RTS.Flags.$fShowDoTrace5_closure:
         const GHC.RTS.Flags.$fShowDoTrace5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fShowDoTrace5_entry() //  [R1]
         { []
         }
     {offset
       cd5VI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd5VJ; else goto cd5VK;
       cd5VJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd5VK: // global
           (_cd5VF::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cd5VF::I64 == 0) goto cd5VH; else goto cd5VG;
       cd5VH: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cd5VG: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cd5VF::I64;
           R2 = GHC.RTS.Flags.$fShowDoTrace6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowDoTrace5_info" {
     GHC.RTS.Flags.$fShowDoTrace5_info:
         const GHC.RTS.Flags.$fShowDoTrace5_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:55.860062404 UTC

[section ""cstring" . GHC.RTS.Flags.$fShowDoTrace4_bytes" {
     GHC.RTS.Flags.$fShowDoTrace4_bytes:
         I8[] [84,114,97,99,101,69,118,101,110,116,76,111,103]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:55.862233661 UTC

[section ""data" . GHC.RTS.Flags.$fShowDoTrace3_closure" {
     GHC.RTS.Flags.$fShowDoTrace3_closure:
         const GHC.RTS.Flags.$fShowDoTrace3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fShowDoTrace3_entry() //  [R1]
         { []
         }
     {offset
       cd5VZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd5W0; else goto cd5W1;
       cd5W0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd5W1: // global
           (_cd5VW::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cd5VW::I64 == 0) goto cd5VY; else goto cd5VX;
       cd5VY: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cd5VX: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cd5VW::I64;
           R2 = GHC.RTS.Flags.$fShowDoTrace4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowDoTrace3_info" {
     GHC.RTS.Flags.$fShowDoTrace3_info:
         const GHC.RTS.Flags.$fShowDoTrace3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:55.865884955 UTC

[section ""cstring" . GHC.RTS.Flags.$fShowDoTrace2_bytes" {
     GHC.RTS.Flags.$fShowDoTrace2_bytes:
         I8[] [84,114,97,99,101,83,116,100,101,114,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:55.868070459 UTC

[section ""data" . GHC.RTS.Flags.$fShowDoTrace1_closure" {
     GHC.RTS.Flags.$fShowDoTrace1_closure:
         const GHC.RTS.Flags.$fShowDoTrace1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fShowDoTrace1_entry() //  [R1]
         { []
         }
     {offset
       cd5Wg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd5Wh; else goto cd5Wi;
       cd5Wh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd5Wi: // global
           (_cd5Wd::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cd5Wd::I64 == 0) goto cd5Wf; else goto cd5We;
       cd5Wf: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cd5We: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cd5Wd::I64;
           R2 = GHC.RTS.Flags.$fShowDoTrace2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowDoTrace1_info" {
     GHC.RTS.Flags.$fShowDoTrace1_info:
         const GHC.RTS.Flags.$fShowDoTrace1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:55.872738528 UTC

[section ""data" . GHC.RTS.Flags.$w$cshowsPrec4_closure" {
     GHC.RTS.Flags.$w$cshowsPrec4_closure:
         const GHC.RTS.Flags.$w$cshowsPrec4_info;
         const 0;
 },
 GHC.RTS.Flags.$w$cshowsPrec4_entry() //  [R2, R3]
         { []
         }
     {offset
       cd5WC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd5WD; else goto cd5WE;
       cd5WD: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.RTS.Flags.$w$cshowsPrec4_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cd5WE: // global
           I64[Sp - 16] = block_cd5Wu_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ud5WP; else goto cd5Wv;
       ud5WP: // global
           call _cd5Wu(R1) args: 0, res: 0, upd: 0;
       cd5Wv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$w$cshowsPrec4_info" {
     GHC.RTS.Flags.$w$cshowsPrec4_info:
         const GHC.RTS.Flags.$w$cshowsPrec4_entry;
         const 0;
         const 64424509454;
         const 8589934607;
         const ScWiZ_srt+224;
 },
 _cd5Wu() //  [R1]
         { []
         }
     {offset
       cd5Wu: // global
           _scVbQ::P64 = P64[Sp + 8];
           _cd5WB::P64 = R1 & 7;
           if (_cd5WB::P64 < 3) goto ud5WO; else goto cd5WA;
       ud5WO: // global
           if (_cd5WB::P64 < 2) goto cd5Wy; else goto cd5Wz;
       cd5Wy: // global
           R3 = _scVbQ::P64;
           R2 = GHC.RTS.Flags.$fShowDoTrace5_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cd5Wz: // global
           R3 = _scVbQ::P64;
           R2 = GHC.RTS.Flags.$fShowDoTrace3_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cd5WA: // global
           R3 = _scVbQ::P64;
           R2 = GHC.RTS.Flags.$fShowDoTrace1_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd5Wu_info" {
     block_cd5Wu_info:
         const _cd5Wu;
         const 1;
         const 30064771102;
         const ScWiZ_srt+232;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:55.878770087 UTC

[section ""data" . GHC.RTS.Flags.$fShowDoTrace_$cshowsPrec_closure" {
     GHC.RTS.Flags.$fShowDoTrace_$cshowsPrec_closure:
         const GHC.RTS.Flags.$fShowDoTrace_$cshowsPrec_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowDoTrace_$cshowsPrec_entry() //  [R3, R4]
         { []
         }
     {offset
       cd5X4: // global
           _scVbT::P64 = R3;
           R3 = R4;
           R2 = _scVbT::P64;
           call GHC.RTS.Flags.$w$cshowsPrec4_entry(R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowDoTrace_$cshowsPrec_info" {
     GHC.RTS.Flags.$fShowDoTrace_$cshowsPrec_info:
         const GHC.RTS.Flags.$fShowDoTrace_$cshowsPrec_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const ScWiZ_srt+224;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:55.882834056 UTC

[section ""data" . GHC.RTS.Flags.$fShowDoTrace_$cshow_closure" {
     GHC.RTS.Flags.$fShowDoTrace_$cshow_closure:
         const GHC.RTS.Flags.$fShowDoTrace_$cshow_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowDoTrace_$cshow_entry() //  [R2]
         { []
         }
     {offset
       cd5Xn: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd5Xo; else goto cd5Xp;
       cd5Xo: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.$fShowDoTrace_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd5Xp: // global
           I64[Sp - 8] = block_cd5Xf_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud5XA; else goto cd5Xg;
       ud5XA: // global
           call _cd5Xf(R1) args: 0, res: 0, upd: 0;
       cd5Xg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowDoTrace_$cshow_info" {
     GHC.RTS.Flags.$fShowDoTrace_$cshow_info:
         const GHC.RTS.Flags.$fShowDoTrace_$cshow_entry;
         const 0;
         const 64424509454;
         const 4294967301;
         const ScWiZ_srt+232;
 },
 _cd5Xf() //  [R1]
         { []
         }
     {offset
       cd5Xf: // global
           _cd5Xm::P64 = R1 & 7;
           if (_cd5Xm::P64 < 3) goto ud5Xz; else goto cd5Xl;
       ud5Xz: // global
           if (_cd5Xm::P64 < 2) goto cd5Xj; else goto cd5Xk;
       cd5Xj: // global
           R1 = GHC.RTS.Flags.$fShowDoTrace5_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cd5Xk: // global
           R1 = GHC.RTS.Flags.$fShowDoTrace3_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cd5Xl: // global
           R1 = GHC.RTS.Flags.$fShowDoTrace1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd5Xf_info" {
     block_cd5Xf_info:
         const _cd5Xf;
         const 0;
         const 30064771102;
         const ScWiZ_srt+232;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:55.889274709 UTC

[section ""data" . GHC.RTS.Flags.$fShowDoTrace_$cshowList_closure" {
     GHC.RTS.Flags.$fShowDoTrace_$cshowList_closure:
         const GHC.RTS.Flags.$fShowDoTrace_$cshowList_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowDoTrace_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       cd5XS: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.RTS.Flags.$w$cshowsPrec4_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowDoTrace_$cshowList_info" {
     GHC.RTS.Flags.$fShowDoTrace_$cshowList_info:
         const GHC.RTS.Flags.$fShowDoTrace_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const ScWiZ_srt+224;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:55.892369739 UTC

[section ""data" . GHC.RTS.Flags.$fShowDoTrace_closure" {
     GHC.RTS.Flags.$fShowDoTrace_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.RTS.Flags.$fShowDoTrace_$cshowsPrec_closure+3;
         const GHC.RTS.Flags.$fShowDoTrace_$cshow_closure+1;
         const GHC.RTS.Flags.$fShowDoTrace_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:55.894149141 UTC

[section ""cstring" . f_rcV5e_bytes" {
     f_rcV5e_bytes:
         I8[] [84,114,97,99,101,70,108,97,103,115,32,123]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:55.896429029 UTC

[section ""data" . f1_rcV5f_closure" {
     f1_rcV5f_closure:
         const f1_rcV5f_info;
         const 0;
         const 0;
         const 0;
 },
 f1_rcV5f_entry() //  [R1]
         { []
         }
     {offset
       cd5Y7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd5Y8; else goto cd5Y9;
       cd5Y8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd5Y9: // global
           (_cd5Y4::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cd5Y4::I64 == 0) goto cd5Y6; else goto cd5Y5;
       cd5Y6: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cd5Y5: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cd5Y4::I64;
           R2 = f_rcV5e_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f1_rcV5f_info" {
     f1_rcV5f_info:
         const f1_rcV5f_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:55.899961067 UTC

[section ""cstring" . lvl15_rcV5g_bytes" {
     lvl15_rcV5g_bytes:
         I8[] [116,114,97,99,105,110,103,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:55.90166188 UTC

[section ""cstring" . lvl16_rcV5h_bytes" {
     lvl16_rcV5h_bytes:
         I8[] [116,105,109,101,115,116,97,109,112,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:55.903333274 UTC

[section ""cstring" . lvl17_rcV5i_bytes" {
     lvl17_rcV5i_bytes:
         I8[] [116,114,97,99,101,83,99,104,101,100,117,108,101,114,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:55.90499356 UTC

[section ""cstring" . lvl18_rcV5j_bytes" {
     lvl18_rcV5j_bytes:
         I8[] [116,114,97,99,101,71,99,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:55.906989786 UTC

[section ""cstring" . lvl19_rcV5k_bytes" {
     lvl19_rcV5k_bytes:
         I8[] [115,112,97,114,107,115,83,97,109,112,108,101,100,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:55.908639941 UTC

[section ""cstring" . lvl20_rcV5l_bytes" {
     lvl20_rcV5l_bytes:
         I8[] [115,112,97,114,107,115,70,117,108,108,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:55.911065467 UTC

[section ""cstring" . lvl21_rcV5m_bytes" {
     lvl21_rcV5m_bytes:
         I8[] [117,115,101,114,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:55.940162155 UTC

[section ""data" . GHC.RTS.Flags.$w$cshowsPrec9_closure" {
     GHC.RTS.Flags.$w$cshowsPrec9_closure:
         const GHC.RTS.Flags.$w$cshowsPrec9_info;
         const 0;
 },
 GHC.RTS.Flags.$w$cshowsPrec9_slow() //  [R1]
         { []
         }
     {offset
       cd5Yp: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.RTS.Flags.$w$cshowsPrec9_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2,
                                                   R1) args: 40, res: 0, upd: 8;
     }
 },
 sat_scVch_entry() //  [R1]
         { []
         }
     {offset
       cd605: // global
           R3 = P64[R1 + 16];
           R2 = g_rcV52_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVch_info" {
     sat_scVch_info:
         const sat_scVch_entry;
         const 1;
         const 4294967312;
         const ScWiZ_srt+120;
 },
 sat_scVci_entry() //  [R1]
         { []
         }
     {offset
       cd60e: // global
           R3 = P64[R1 + 16];
           R2 = g_rcV52_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVci_info" {
     sat_scVci_info:
         const sat_scVci_entry;
         const 1;
         const 4294967312;
         const ScWiZ_srt+120;
 },
 sat_scVcj_entry() //  [R1]
         { []
         }
     {offset
       cd60l: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cd60m; else goto cd60n;
       cd60m: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd60n: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cd5ZW_info;
           _scVc9::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _scVc9::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ud60u; else goto cd5ZX;
       ud60u: // global
           call _cd5ZW(R1) args: 0, res: 0, upd: 0;
       cd5ZX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVcj_info" {
     sat_scVcj_info:
         const sat_scVcj_entry;
         const 2;
         const 30064771090;
         const ScWiZ_srt+120;
 },
 _cd5ZW() //  [R1]
         { []
         }
     {offset
       cd5ZW: // global
           _scVc9::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cd60i; else goto cd60j;
       cd60i: // global
           Hp = Hp + 24;
           _scVcg::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cd60t; else goto cd60p;
       cd60p: // global
           I64[Hp - 16] = sat_scVch_info;
           P64[Hp] = _scVc9::P64;
           R3 = Hp - 16;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cd60j: // global
           Hp = Hp + 24;
           _scVcg::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cd60t; else goto cd60s;
       cd60t: // global
           HpAlloc = 24;
           R1 = _scVcg::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cd60s: // global
           I64[Hp - 16] = sat_scVci_info;
           P64[Hp] = _scVc9::P64;
           R3 = Hp - 16;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd5ZW_info" {
     block_cd5ZW_info:
         const _cd5ZW;
         const 1;
         const 30064771102;
         const ScWiZ_srt+120;
 },
 sat_scVck_entry() //  [R1]
         { []
         }
     {offset
       cd60v: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cd60z; else goto cd60y;
       cd60z: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd60y: // global
           _scVc6::P64 = P64[R1 + 16];
           _scVc9::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_scVcj_info;
           P64[Hp - 8] = _scVc6::P64;
           P64[Hp] = _scVc9::P64;
           R3 = Hp - 24;
           R2 = lvl21_rcV5m_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVck_info" {
     sat_scVck_info:
         const sat_scVck_entry;
         const 2;
         const 30064771090;
         const ScWiZ_srt+120;
 },
 sat_scVcl_entry() //  [R1]
         { []
         }
     {offset
       cd60A: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cd60E; else goto cd60D;
       cd60E: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd60D: // global
           _scVc6::P64 = P64[R1 + 16];
           _scVc9::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_scVck_info;
           P64[Hp - 8] = _scVc6::P64;
           P64[Hp] = _scVc9::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVcl_info" {
     sat_scVcl_info:
         const sat_scVcl_entry;
         const 2;
         const 64424509458;
         const ScWiZ_srt+120;
 },
 sat_scVcn_entry() //  [R1]
         { []
         }
     {offset
       cd612: // global
           R3 = P64[R1 + 16];
           R2 = g_rcV52_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVcn_info" {
     sat_scVcn_info:
         const sat_scVcn_entry;
         const 1;
         const 4294967312;
         const ScWiZ_srt+120;
 },
 sat_scVco_entry() //  [R1]
         { []
         }
     {offset
       cd61b: // global
           R3 = P64[R1 + 16];
           R2 = g_rcV52_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVco_info" {
     sat_scVco_info:
         const sat_scVco_entry;
         const 1;
         const 4294967312;
         const ScWiZ_srt+120;
 },
 sat_scVcp_entry() //  [R1]
         { []
         }
     {offset
       cd61i: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cd61j; else goto cd61k;
       cd61j: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd61k: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cd60T_info;
           _scVc9::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _scVc9::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ud61r; else goto cd60U;
       ud61r: // global
           call _cd60T(R1) args: 0, res: 0, upd: 0;
       cd60U: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVcp_info" {
     sat_scVcp_info:
         const sat_scVcp_entry;
         const 2;
         const 30064771090;
         const ScWiZ_srt+120;
 },
 _cd60T() //  [R1]
         { []
         }
     {offset
       cd60T: // global
           _scVc9::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cd61f; else goto cd61g;
       cd61f: // global
           Hp = Hp + 24;
           _scVcm::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cd61q; else goto cd61m;
       cd61m: // global
           I64[Hp - 16] = sat_scVcn_info;
           P64[Hp] = _scVc9::P64;
           R3 = Hp - 16;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cd61g: // global
           Hp = Hp + 24;
           _scVcm::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cd61q; else goto cd61p;
       cd61q: // global
           HpAlloc = 24;
           R1 = _scVcm::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cd61p: // global
           I64[Hp - 16] = sat_scVco_info;
           P64[Hp] = _scVc9::P64;
           R3 = Hp - 16;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd60T_info" {
     block_cd60T_info:
         const _cd60T;
         const 1;
         const 30064771102;
         const ScWiZ_srt+120;
 },
 sat_scVcq_entry() //  [R1]
         { []
         }
     {offset
       cd61s: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cd61w; else goto cd61v;
       cd61w: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd61v: // global
           _scVc6::P64 = P64[R1 + 16];
           _scVc9::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_scVcp_info;
           P64[Hp - 8] = _scVc6::P64;
           P64[Hp] = _scVc9::P64;
           R3 = Hp - 24;
           R2 = lvl21_rcV5m_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVcq_info" {
     sat_scVcq_info:
         const sat_scVcq_entry;
         const 2;
         const 30064771090;
         const ScWiZ_srt+120;
 },
 sat_scVcr_entry() //  [R1]
         { []
         }
     {offset
       cd61x: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cd61B; else goto cd61A;
       cd61B: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd61A: // global
           _scVc6::P64 = P64[R1 + 16];
           _scVc9::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_scVcq_info;
           P64[Hp - 8] = _scVc6::P64;
           P64[Hp] = _scVc9::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVcr_info" {
     sat_scVcr_info:
         const sat_scVcr_entry;
         const 2;
         const 64424509458;
         const ScWiZ_srt+120;
 },
 sat_scVcs_entry() //  [R1]
         { []
         }
     {offset
       cd61G: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cd61H; else goto cd61I;
       cd61H: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd61I: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cd5ZF_info;
           _scVc6::P64 = P64[R1 + 24];
           _scVc9::P64 = P64[R1 + 32];
           R1 = P64[R1 + 16];
           P64[Sp - 32] = _scVc6::P64;
           P64[Sp - 24] = _scVc9::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ud61P; else goto cd5ZG;
       ud61P: // global
           call _cd5ZF(R1) args: 0, res: 0, upd: 0;
       cd5ZG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVcs_info" {
     sat_scVcs_info:
         const sat_scVcs_entry;
         const 3;
         const 64424509455;
         const ScWiZ_srt+120;
 },
 _cd5ZF() //  [R1]
         { []
         }
     {offset
       cd5ZF: // global
           _scVc6::P64 = P64[Sp + 8];
           _scVc9::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto cd61D; else goto cd61E;
       cd61D: // global
           Hp = Hp + 32;
           _scVcf::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cd61O; else goto cd61K;
       cd61K: // global
           I64[Hp - 24] = sat_scVcl_info;
           P64[Hp - 8] = _scVc6::P64;
           P64[Hp] = _scVc9::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cd61E: // global
           Hp = Hp + 32;
           _scVcf::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cd61O; else goto cd61N;
       cd61O: // global
           HpAlloc = 32;
           R1 = _scVcf::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cd61N: // global
           I64[Hp - 24] = sat_scVcr_info;
           P64[Hp - 8] = _scVc6::P64;
           P64[Hp] = _scVc9::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd5ZF_info" {
     block_cd5ZF_info:
         const _cd5ZF;
         const 2;
         const 64424509470;
         const ScWiZ_srt+120;
 },
 sat_scVct_entry() //  [R1]
         { []
         }
     {offset
       cd61Q: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cd61U; else goto cd61T;
       cd61U: // global
           HpAlloc = 40;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd61T: // global
           _scVc5::P64 = P64[R1 + 16];
           _scVc6::P64 = P64[R1 + 24];
           _scVc9::P64 = P64[R1 + 32];
           I64[Hp - 32] = sat_scVcs_info;
           P64[Hp - 16] = _scVc5::P64;
           P64[Hp - 8] = _scVc6::P64;
           P64[Hp] = _scVc9::P64;
           R3 = Hp - 32;
           R2 = lvl20_rcV5l_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVct_info" {
     sat_scVct_info:
         const sat_scVct_entry;
         const 3;
         const 64424509455;
         const ScWiZ_srt+120;
 },
 sat_scVcu_entry() //  [R1]
         { []
         }
     {offset
       cd61V: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cd61Z; else goto cd61Y;
       cd61Z: // global
           HpAlloc = 40;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd61Y: // global
           _scVc5::P64 = P64[R1 + 16];
           _scVc6::P64 = P64[R1 + 24];
           _scVc9::P64 = P64[R1 + 32];
           I64[Hp - 32] = sat_scVct_info;
           P64[Hp - 16] = _scVc5::P64;
           P64[Hp - 8] = _scVc6::P64;
           P64[Hp] = _scVc9::P64;
           R3 = Hp - 32;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVcu_info" {
     sat_scVcu_info:
         const sat_scVcu_entry;
         const 3;
         const 64424509455;
         const ScWiZ_srt+120;
 },
 sat_scVcx_entry() //  [R1]
         { []
         }
     {offset
       cd62E: // global
           R3 = P64[R1 + 16];
           R2 = g_rcV52_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVcx_info" {
     sat_scVcx_info:
         const sat_scVcx_entry;
         const 1;
         const 4294967312;
         const ScWiZ_srt+120;
 },
 sat_scVcy_entry() //  [R1]
         { []
         }
     {offset
       cd62N: // global
           R3 = P64[R1 + 16];
           R2 = g_rcV52_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVcy_info" {
     sat_scVcy_info:
         const sat_scVcy_entry;
         const 1;
         const 4294967312;
         const ScWiZ_srt+120;
 },
 sat_scVcz_entry() //  [R1]
         { []
         }
     {offset
       cd62U: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cd62V; else goto cd62W;
       cd62V: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd62W: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cd62v_info;
           _scVc9::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _scVc9::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ud633; else goto cd62w;
       ud633: // global
           call _cd62v(R1) args: 0, res: 0, upd: 0;
       cd62w: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVcz_info" {
     sat_scVcz_info:
         const sat_scVcz_entry;
         const 2;
         const 30064771090;
         const ScWiZ_srt+120;
 },
 _cd62v() //  [R1]
         { []
         }
     {offset
       cd62v: // global
           _scVc9::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cd62R; else goto cd62S;
       cd62R: // global
           Hp = Hp + 24;
           _scVcw::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cd632; else goto cd62Y;
       cd62Y: // global
           I64[Hp - 16] = sat_scVcx_info;
           P64[Hp] = _scVc9::P64;
           R3 = Hp - 16;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cd62S: // global
           Hp = Hp + 24;
           _scVcw::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cd632; else goto cd631;
       cd632: // global
           HpAlloc = 24;
           R1 = _scVcw::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cd631: // global
           I64[Hp - 16] = sat_scVcy_info;
           P64[Hp] = _scVc9::P64;
           R3 = Hp - 16;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd62v_info" {
     block_cd62v_info:
         const _cd62v;
         const 1;
         const 30064771102;
         const ScWiZ_srt+120;
 },
 sat_scVcA_entry() //  [R1]
         { []
         }
     {offset
       cd634: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cd638; else goto cd637;
       cd638: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd637: // global
           _scVc6::P64 = P64[R1 + 16];
           _scVc9::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_scVcz_info;
           P64[Hp - 8] = _scVc6::P64;
           P64[Hp] = _scVc9::P64;
           R3 = Hp - 24;
           R2 = lvl21_rcV5m_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVcA_info" {
     sat_scVcA_info:
         const sat_scVcA_entry;
         const 2;
         const 30064771090;
         const ScWiZ_srt+120;
 },
 sat_scVcB_entry() //  [R1]
         { []
         }
     {offset
       cd639: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cd63d; else goto cd63c;
       cd63d: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd63c: // global
           _scVc6::P64 = P64[R1 + 16];
           _scVc9::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_scVcA_info;
           P64[Hp - 8] = _scVc6::P64;
           P64[Hp] = _scVc9::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVcB_info" {
     sat_scVcB_info:
         const sat_scVcB_entry;
         const 2;
         const 64424509458;
         const ScWiZ_srt+120;
 },
 sat_scVcD_entry() //  [R1]
         { []
         }
     {offset
       cd63B: // global
           R3 = P64[R1 + 16];
           R2 = g_rcV52_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVcD_info" {
     sat_scVcD_info:
         const sat_scVcD_entry;
         const 1;
         const 4294967312;
         const ScWiZ_srt+120;
 },
 sat_scVcE_entry() //  [R1]
         { []
         }
     {offset
       cd63K: // global
           R3 = P64[R1 + 16];
           R2 = g_rcV52_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVcE_info" {
     sat_scVcE_info:
         const sat_scVcE_entry;
         const 1;
         const 4294967312;
         const ScWiZ_srt+120;
 },
 sat_scVcF_entry() //  [R1]
         { []
         }
     {offset
       cd63R: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cd63S; else goto cd63T;
       cd63S: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd63T: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cd63s_info;
           _scVc9::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _scVc9::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ud640; else goto cd63t;
       ud640: // global
           call _cd63s(R1) args: 0, res: 0, upd: 0;
       cd63t: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVcF_info" {
     sat_scVcF_info:
         const sat_scVcF_entry;
         const 2;
         const 30064771090;
         const ScWiZ_srt+120;
 },
 _cd63s() //  [R1]
         { []
         }
     {offset
       cd63s: // global
           _scVc9::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cd63O; else goto cd63P;
       cd63O: // global
           Hp = Hp + 24;
           _scVcC::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cd63Z; else goto cd63V;
       cd63V: // global
           I64[Hp - 16] = sat_scVcD_info;
           P64[Hp] = _scVc9::P64;
           R3 = Hp - 16;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cd63P: // global
           Hp = Hp + 24;
           _scVcC::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cd63Z; else goto cd63Y;
       cd63Z: // global
           HpAlloc = 24;
           R1 = _scVcC::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cd63Y: // global
           I64[Hp - 16] = sat_scVcE_info;
           P64[Hp] = _scVc9::P64;
           R3 = Hp - 16;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd63s_info" {
     block_cd63s_info:
         const _cd63s;
         const 1;
         const 30064771102;
         const ScWiZ_srt+120;
 },
 sat_scVcG_entry() //  [R1]
         { []
         }
     {offset
       cd641: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cd645; else goto cd644;
       cd645: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd644: // global
           _scVc6::P64 = P64[R1 + 16];
           _scVc9::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_scVcF_info;
           P64[Hp - 8] = _scVc6::P64;
           P64[Hp] = _scVc9::P64;
           R3 = Hp - 24;
           R2 = lvl21_rcV5m_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVcG_info" {
     sat_scVcG_info:
         const sat_scVcG_entry;
         const 2;
         const 30064771090;
         const ScWiZ_srt+120;
 },
 sat_scVcH_entry() //  [R1]
         { []
         }
     {offset
       cd646: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cd64a; else goto cd649;
       cd64a: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd649: // global
           _scVc6::P64 = P64[R1 + 16];
           _scVc9::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_scVcG_info;
           P64[Hp - 8] = _scVc6::P64;
           P64[Hp] = _scVc9::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVcH_info" {
     sat_scVcH_info:
         const sat_scVcH_entry;
         const 2;
         const 64424509458;
         const ScWiZ_srt+120;
 },
 sat_scVcI_entry() //  [R1]
         { []
         }
     {offset
       cd64f: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cd64g; else goto cd64h;
       cd64g: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd64h: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cd62e_info;
           _scVc6::P64 = P64[R1 + 24];
           _scVc9::P64 = P64[R1 + 32];
           R1 = P64[R1 + 16];
           P64[Sp - 32] = _scVc6::P64;
           P64[Sp - 24] = _scVc9::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ud64o; else goto cd62f;
       ud64o: // global
           call _cd62e(R1) args: 0, res: 0, upd: 0;
       cd62f: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVcI_info" {
     sat_scVcI_info:
         const sat_scVcI_entry;
         const 3;
         const 64424509455;
         const ScWiZ_srt+120;
 },
 _cd62e() //  [R1]
         { []
         }
     {offset
       cd62e: // global
           _scVc6::P64 = P64[Sp + 8];
           _scVc9::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto cd64c; else goto cd64d;
       cd64c: // global
           Hp = Hp + 32;
           _scVcv::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cd64n; else goto cd64j;
       cd64j: // global
           I64[Hp - 24] = sat_scVcB_info;
           P64[Hp - 8] = _scVc6::P64;
           P64[Hp] = _scVc9::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cd64d: // global
           Hp = Hp + 32;
           _scVcv::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cd64n; else goto cd64m;
       cd64n: // global
           HpAlloc = 32;
           R1 = _scVcv::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cd64m: // global
           I64[Hp - 24] = sat_scVcH_info;
           P64[Hp - 8] = _scVc6::P64;
           P64[Hp] = _scVc9::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd62e_info" {
     block_cd62e_info:
         const _cd62e;
         const 2;
         const 64424509470;
         const ScWiZ_srt+120;
 },
 sat_scVcJ_entry() //  [R1]
         { []
         }
     {offset
       cd64p: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cd64t; else goto cd64s;
       cd64t: // global
           HpAlloc = 40;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd64s: // global
           _scVc5::P64 = P64[R1 + 16];
           _scVc6::P64 = P64[R1 + 24];
           _scVc9::P64 = P64[R1 + 32];
           I64[Hp - 32] = sat_scVcI_info;
           P64[Hp - 16] = _scVc5::P64;
           P64[Hp - 8] = _scVc6::P64;
           P64[Hp] = _scVc9::P64;
           R3 = Hp - 32;
           R2 = lvl20_rcV5l_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVcJ_info" {
     sat_scVcJ_info:
         const sat_scVcJ_entry;
         const 3;
         const 64424509455;
         const ScWiZ_srt+120;
 },
 sat_scVcK_entry() //  [R1]
         { []
         }
     {offset
       cd64u: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cd64y; else goto cd64x;
       cd64y: // global
           HpAlloc = 40;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd64x: // global
           _scVc5::P64 = P64[R1 + 16];
           _scVc6::P64 = P64[R1 + 24];
           _scVc9::P64 = P64[R1 + 32];
           I64[Hp - 32] = sat_scVcJ_info;
           P64[Hp - 16] = _scVc5::P64;
           P64[Hp - 8] = _scVc6::P64;
           P64[Hp] = _scVc9::P64;
           R3 = Hp - 32;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVcK_info" {
     sat_scVcK_info:
         const sat_scVcK_entry;
         const 3;
         const 64424509455;
         const ScWiZ_srt+120;
 },
 sat_scVcL_entry() //  [R1]
         { []
         }
     {offset
       cd64D: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cd64E; else goto cd64F;
       cd64E: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd64F: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_cd5Zo_info;
           _scVc5::P64 = P64[R1 + 24];
           _scVc6::P64 = P64[R1 + 32];
           _scVc9::P64 = P64[R1 + 40];
           R1 = P64[R1 + 16];
           P64[Sp - 40] = _scVc5::P64;
           P64[Sp - 32] = _scVc6::P64;
           P64[Sp - 24] = _scVc9::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto ud64M; else goto cd5Zp;
       ud64M: // global
           call _cd5Zo(R1) args: 0, res: 0, upd: 0;
       cd5Zp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVcL_info" {
     sat_scVcL_info:
         const sat_scVcL_entry;
         const 4;
         const 64424509455;
         const ScWiZ_srt+120;
 },
 _cd5Zo() //  [R1]
         { []
         }
     {offset
       cd5Zo: // global
           _scVc5::P64 = P64[Sp + 8];
           _scVc6::P64 = P64[Sp + 16];
           _scVc9::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto cd64A; else goto cd64B;
       cd64A: // global
           Hp = Hp + 40;
           _scVce::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cd64L; else goto cd64H;
       cd64H: // global
           I64[Hp - 32] = sat_scVcu_info;
           P64[Hp - 16] = _scVc5::P64;
           P64[Hp - 8] = _scVc6::P64;
           P64[Hp] = _scVc9::P64;
           R3 = Hp - 32;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 32;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cd64B: // global
           Hp = Hp + 40;
           _scVce::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cd64L; else goto cd64K;
       cd64L: // global
           HpAlloc = 40;
           R1 = _scVce::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cd64K: // global
           I64[Hp - 32] = sat_scVcK_info;
           P64[Hp - 16] = _scVc5::P64;
           P64[Hp - 8] = _scVc6::P64;
           P64[Hp] = _scVc9::P64;
           R3 = Hp - 32;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 32;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd5Zo_info" {
     block_cd5Zo_info:
         const _cd5Zo;
         const 3;
         const 64424509470;
         const ScWiZ_srt+120;
 },
 sat_scVcM_entry() //  [R1]
         { []
         }
     {offset
       cd64N: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cd64R; else goto cd64Q;
       cd64R: // global
           HpAlloc = 48;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd64Q: // global
           _scVc4::P64 = P64[R1 + 16];
           _scVc5::P64 = P64[R1 + 24];
           _scVc6::P64 = P64[R1 + 32];
           _scVc9::P64 = P64[R1 + 40];
           I64[Hp - 40] = sat_scVcL_info;
           P64[Hp - 24] = _scVc4::P64;
           P64[Hp - 16] = _scVc5::P64;
           P64[Hp - 8] = _scVc6::P64;
           P64[Hp] = _scVc9::P64;
           R3 = Hp - 40;
           R2 = lvl19_rcV5k_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVcM_info" {
     sat_scVcM_info:
         const sat_scVcM_entry;
         const 4;
         const 64424509455;
         const ScWiZ_srt+120;
 },
 eta3_scVcd_entry() //  [R1]
         { []
         }
     {offset
       cd64S: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cd64W; else goto cd64V;
       cd64W: // global
           HpAlloc = 48;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd64V: // global
           _scVc4::P64 = P64[R1 + 16];
           _scVc5::P64 = P64[R1 + 24];
           _scVc6::P64 = P64[R1 + 32];
           _scVc9::P64 = P64[R1 + 40];
           I64[Hp - 40] = sat_scVcM_info;
           P64[Hp - 24] = _scVc4::P64;
           P64[Hp - 16] = _scVc5::P64;
           P64[Hp - 8] = _scVc6::P64;
           P64[Hp] = _scVc9::P64;
           R3 = Hp - 40;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . eta3_scVcd_info" {
     eta3_scVcd_info:
         const eta3_scVcd_entry;
         const 4;
         const 64424509455;
         const ScWiZ_srt+120;
 },
 sat_scVcO_entry() //  [R1]
         { []
         }
     {offset
       cd654: // global
           _scVcO::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cd655; else goto cd656;
       cd656: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cd658; else goto cd657;
       cd658: // global
           HpAlloc = 48;
           goto cd655;
       cd655: // global
           R1 = _scVcO::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd657: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVcO::P64;
           _scVc3::P64 = P64[_scVcO::P64 + 16];
           _scVc4::P64 = P64[_scVcO::P64 + 24];
           _scVc5::P64 = P64[_scVcO::P64 + 32];
           _scVc6::P64 = P64[_scVcO::P64 + 40];
           _scVc9::P64 = P64[_scVcO::P64 + 48];
           I64[Hp - 40] = eta3_scVcd_info;
           P64[Hp - 24] = _scVc4::P64;
           P64[Hp - 16] = _scVc5::P64;
           P64[Hp - 8] = _scVc6::P64;
           P64[Hp] = _scVc9::P64;
           I64[Sp - 32] = block_cd64X_info;
           R1 = _scVc3::P64;
           P64[Sp - 24] = Hp - 40;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ud65f; else goto cd64Y;
       ud65f: // global
           call _cd64X(R1) args: 0, res: 0, upd: 0;
       cd64Y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVcO_info" {
     sat_scVcO_info:
         const sat_scVcO_entry;
         const 5;
         const 64424509455;
         const ScWiZ_srt+120;
 },
 _cd64X() //  [R1]
         { []
         }
     {offset
       cd64X: // global
           _cd5Zc::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cd651; else goto cd652;
       cd651: // global
           R3 = _cd5Zc::P64;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cd652: // global
           R3 = _cd5Zc::P64;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd64X_info" {
     block_cd64X_info:
         const _cd64X;
         const 1;
         const 12884901918;
         const ScWiZ_srt+128;
 },
 sat_scVcP_entry() //  [R1]
         { []
         }
     {offset
       cd65g: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cd65k; else goto cd65j;
       cd65k: // global
           HpAlloc = 56;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd65j: // global
           _scVc3::P64 = P64[R1 + 16];
           _scVc4::P64 = P64[R1 + 24];
           _scVc5::P64 = P64[R1 + 32];
           _scVc6::P64 = P64[R1 + 40];
           _scVc9::P64 = P64[R1 + 48];
           I64[Hp - 48] = sat_scVcO_info;
           P64[Hp - 32] = _scVc3::P64;
           P64[Hp - 24] = _scVc4::P64;
           P64[Hp - 16] = _scVc5::P64;
           P64[Hp - 8] = _scVc6::P64;
           P64[Hp] = _scVc9::P64;
           R3 = Hp - 48;
           R2 = lvl18_rcV5j_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVcP_info" {
     sat_scVcP_info:
         const sat_scVcP_entry;
         const 5;
         const 64424509455;
         const ScWiZ_srt+120;
 },
 eta2_scVcc_entry() //  [R1]
         { []
         }
     {offset
       cd65l: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cd65p; else goto cd65o;
       cd65p: // global
           HpAlloc = 56;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd65o: // global
           _scVc3::P64 = P64[R1 + 16];
           _scVc4::P64 = P64[R1 + 24];
           _scVc5::P64 = P64[R1 + 32];
           _scVc6::P64 = P64[R1 + 40];
           _scVc9::P64 = P64[R1 + 48];
           I64[Hp - 48] = sat_scVcP_info;
           P64[Hp - 32] = _scVc3::P64;
           P64[Hp - 24] = _scVc4::P64;
           P64[Hp - 16] = _scVc5::P64;
           P64[Hp - 8] = _scVc6::P64;
           P64[Hp] = _scVc9::P64;
           R3 = Hp - 48;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . eta2_scVcc_info" {
     eta2_scVcc_info:
         const eta2_scVcc_entry;
         const 5;
         const 64424509455;
         const ScWiZ_srt+120;
 },
 sat_scVcR_entry() //  [R1]
         { []
         }
     {offset
       cd65x: // global
           _scVcR::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cd65y; else goto cd65z;
       cd65z: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cd65B; else goto cd65A;
       cd65B: // global
           HpAlloc = 56;
           goto cd65y;
       cd65y: // global
           R1 = _scVcR::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd65A: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVcR::P64;
           _scVc2::P64 = P64[_scVcR::P64 + 16];
           _scVc3::P64 = P64[_scVcR::P64 + 24];
           _scVc4::P64 = P64[_scVcR::P64 + 32];
           _scVc5::P64 = P64[_scVcR::P64 + 40];
           _scVc6::P64 = P64[_scVcR::P64 + 48];
           _scVc9::P64 = P64[_scVcR::P64 + 56];
           I64[Hp - 48] = eta2_scVcc_info;
           P64[Hp - 32] = _scVc3::P64;
           P64[Hp - 24] = _scVc4::P64;
           P64[Hp - 16] = _scVc5::P64;
           P64[Hp - 8] = _scVc6::P64;
           P64[Hp] = _scVc9::P64;
           I64[Sp - 32] = block_cd65q_info;
           R1 = _scVc2::P64;
           P64[Sp - 24] = Hp - 48;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ud65I; else goto cd65r;
       ud65I: // global
           call _cd65q(R1) args: 0, res: 0, upd: 0;
       cd65r: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVcR_info" {
     sat_scVcR_info:
         const sat_scVcR_entry;
         const 6;
         const 64424509455;
         const ScWiZ_srt+120;
 },
 _cd65q() //  [R1]
         { []
         }
     {offset
       cd65q: // global
           _cd5Z0::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cd65u; else goto cd65v;
       cd65u: // global
           R3 = _cd5Z0::P64;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cd65v: // global
           R3 = _cd5Z0::P64;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd65q_info" {
     block_cd65q_info:
         const _cd65q;
         const 1;
         const 12884901918;
         const ScWiZ_srt+128;
 },
 sat_scVcS_entry() //  [R1]
         { []
         }
     {offset
       cd65J: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cd65N; else goto cd65M;
       cd65N: // global
           HpAlloc = 64;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd65M: // global
           _scVc2::P64 = P64[R1 + 16];
           _scVc3::P64 = P64[R1 + 24];
           _scVc4::P64 = P64[R1 + 32];
           _scVc5::P64 = P64[R1 + 40];
           _scVc6::P64 = P64[R1 + 48];
           _scVc9::P64 = P64[R1 + 56];
           I64[Hp - 56] = sat_scVcR_info;
           P64[Hp - 40] = _scVc2::P64;
           P64[Hp - 32] = _scVc3::P64;
           P64[Hp - 24] = _scVc4::P64;
           P64[Hp - 16] = _scVc5::P64;
           P64[Hp - 8] = _scVc6::P64;
           P64[Hp] = _scVc9::P64;
           R3 = Hp - 56;
           R2 = lvl17_rcV5i_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVcS_info" {
     sat_scVcS_info:
         const sat_scVcS_entry;
         const 6;
         const 64424509455;
         const ScWiZ_srt+120;
 },
 eta1_scVcb_entry() //  [R1]
         { []
         }
     {offset
       cd65O: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cd65S; else goto cd65R;
       cd65S: // global
           HpAlloc = 64;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd65R: // global
           _scVc2::P64 = P64[R1 + 16];
           _scVc3::P64 = P64[R1 + 24];
           _scVc4::P64 = P64[R1 + 32];
           _scVc5::P64 = P64[R1 + 40];
           _scVc6::P64 = P64[R1 + 48];
           _scVc9::P64 = P64[R1 + 56];
           I64[Hp - 56] = sat_scVcS_info;
           P64[Hp - 40] = _scVc2::P64;
           P64[Hp - 32] = _scVc3::P64;
           P64[Hp - 24] = _scVc4::P64;
           P64[Hp - 16] = _scVc5::P64;
           P64[Hp - 8] = _scVc6::P64;
           P64[Hp] = _scVc9::P64;
           R3 = Hp - 56;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . eta1_scVcb_info" {
     eta1_scVcb_info:
         const eta1_scVcb_entry;
         const 6;
         const 64424509455;
         const ScWiZ_srt+120;
 },
 sat_scVcU_entry() //  [R1]
         { []
         }
     {offset
       cd660: // global
           _scVcU::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cd661; else goto cd662;
       cd662: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cd664; else goto cd663;
       cd664: // global
           HpAlloc = 64;
           goto cd661;
       cd661: // global
           R1 = _scVcU::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd663: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVcU::P64;
           _scVc1::P64 = P64[_scVcU::P64 + 16];
           _scVc2::P64 = P64[_scVcU::P64 + 24];
           _scVc3::P64 = P64[_scVcU::P64 + 32];
           _scVc4::P64 = P64[_scVcU::P64 + 40];
           _scVc5::P64 = P64[_scVcU::P64 + 48];
           _scVc6::P64 = P64[_scVcU::P64 + 56];
           _scVc9::P64 = P64[_scVcU::P64 + 64];
           I64[Hp - 56] = eta1_scVcb_info;
           P64[Hp - 40] = _scVc2::P64;
           P64[Hp - 32] = _scVc3::P64;
           P64[Hp - 24] = _scVc4::P64;
           P64[Hp - 16] = _scVc5::P64;
           P64[Hp - 8] = _scVc6::P64;
           P64[Hp] = _scVc9::P64;
           I64[Sp - 32] = block_cd65T_info;
           R1 = _scVc1::P64;
           P64[Sp - 24] = Hp - 56;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ud66b; else goto cd65U;
       ud66b: // global
           call _cd65T(R1) args: 0, res: 0, upd: 0;
       cd65U: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVcU_info" {
     sat_scVcU_info:
         const sat_scVcU_entry;
         const 7;
         const 64424509455;
         const ScWiZ_srt+120;
 },
 _cd65T() //  [R1]
         { []
         }
     {offset
       cd65T: // global
           _cd5YO::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cd65X; else goto cd65Y;
       cd65X: // global
           R3 = _cd5YO::P64;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cd65Y: // global
           R3 = _cd5YO::P64;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd65T_info" {
     block_cd65T_info:
         const _cd65T;
         const 1;
         const 12884901918;
         const ScWiZ_srt+128;
 },
 sat_scVcV_entry() //  [R1]
         { []
         }
     {offset
       cd66c: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cd66g; else goto cd66f;
       cd66g: // global
           HpAlloc = 72;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd66f: // global
           _scVc1::P64 = P64[R1 + 16];
           _scVc2::P64 = P64[R1 + 24];
           _scVc3::P64 = P64[R1 + 32];
           _scVc4::P64 = P64[R1 + 40];
           _scVc5::P64 = P64[R1 + 48];
           _scVc6::P64 = P64[R1 + 56];
           _scVc9::P64 = P64[R1 + 64];
           I64[Hp - 64] = sat_scVcU_info;
           P64[Hp - 48] = _scVc1::P64;
           P64[Hp - 40] = _scVc2::P64;
           P64[Hp - 32] = _scVc3::P64;
           P64[Hp - 24] = _scVc4::P64;
           P64[Hp - 16] = _scVc5::P64;
           P64[Hp - 8] = _scVc6::P64;
           P64[Hp] = _scVc9::P64;
           R3 = Hp - 64;
           R2 = lvl16_rcV5h_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVcV_info" {
     sat_scVcV_info:
         const sat_scVcV_entry;
         const 7;
         const 64424509455;
         const ScWiZ_srt+120;
 },
 eta_scVca_entry() //  [R1]
         { []
         }
     {offset
       cd66h: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cd66l; else goto cd66k;
       cd66l: // global
           HpAlloc = 72;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd66k: // global
           _scVc1::P64 = P64[R1 + 16];
           _scVc2::P64 = P64[R1 + 24];
           _scVc3::P64 = P64[R1 + 32];
           _scVc4::P64 = P64[R1 + 40];
           _scVc5::P64 = P64[R1 + 48];
           _scVc6::P64 = P64[R1 + 56];
           _scVc9::P64 = P64[R1 + 64];
           I64[Hp - 64] = sat_scVcV_info;
           P64[Hp - 48] = _scVc1::P64;
           P64[Hp - 40] = _scVc2::P64;
           P64[Hp - 32] = _scVc3::P64;
           P64[Hp - 24] = _scVc4::P64;
           P64[Hp - 16] = _scVc5::P64;
           P64[Hp - 8] = _scVc6::P64;
           P64[Hp] = _scVc9::P64;
           R3 = Hp - 64;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . eta_scVca_info" {
     eta_scVca_info:
         const eta_scVca_entry;
         const 7;
         const 64424509455;
         const ScWiZ_srt+120;
 },
 sat_scVcX_entry() //  [R1]
         { []
         }
     {offset
       cd66u: // global
           _scVcX::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cd66v; else goto cd66w;
       cd66w: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cd66y; else goto cd66x;
       cd66y: // global
           HpAlloc = 72;
           goto cd66v;
       cd66v: // global
           R1 = _scVcX::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd66x: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVcX::P64;
           _scVc0::P64 = P64[_scVcX::P64 + 16];
           _scVc1::P64 = P64[_scVcX::P64 + 24];
           _scVc2::P64 = P64[_scVcX::P64 + 32];
           _scVc3::P64 = P64[_scVcX::P64 + 40];
           _scVc4::P64 = P64[_scVcX::P64 + 48];
           _scVc5::P64 = P64[_scVcX::P64 + 56];
           _scVc6::P64 = P64[_scVcX::P64 + 64];
           _scVc9::P64 = P64[_scVcX::P64 + 72];
           I64[Hp - 64] = eta_scVca_info;
           P64[Hp - 48] = _scVc1::P64;
           P64[Hp - 40] = _scVc2::P64;
           P64[Hp - 32] = _scVc3::P64;
           P64[Hp - 24] = _scVc4::P64;
           P64[Hp - 16] = _scVc5::P64;
           P64[Hp - 8] = _scVc6::P64;
           P64[Hp] = _scVc9::P64;
           I64[Sp - 32] = block_cd66m_info;
           R1 = _scVc0::P64;
           P64[Sp - 24] = Hp - 64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ud66J; else goto cd66n;
       ud66J: // global
           call _cd66m(R1) args: 0, res: 0, upd: 0;
       cd66n: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVcX_info" {
     sat_scVcX_info:
         const sat_scVcX_entry;
         const 8;
         const 492645633753103;
         const ScWiZ_srt+120;
 },
 _cd66m() //  [R1]
         { []
         }
     {offset
       cd66m: // global
           _cd5YC::P64 = P64[Sp + 8];
           _cd66t::P64 = R1 & 7;
           if (_cd66t::P64 < 3) goto ud66I; else goto cd66s;
       ud66I: // global
           if (_cd66t::P64 < 2) goto cd66q; else goto cd66r;
       cd66q: // global
           R3 = _cd5YC::P64;
           R2 = GHC.RTS.Flags.$fShowDoTrace5_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cd66r: // global
           R3 = _cd5YC::P64;
           R2 = GHC.RTS.Flags.$fShowDoTrace3_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cd66s: // global
           R3 = _cd5YC::P64;
           R2 = GHC.RTS.Flags.$fShowDoTrace1_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd66m_info" {
     block_cd66m_info:
         const _cd66m;
         const 1;
         const 30064771102;
         const ScWiZ_srt+232;
 },
 g1_scVc8_entry() //  [R1, R2]
         { []
         }
     {offset
       cd66K: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cd66O; else goto cd66N;
       cd66O: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd66N: // global
           _scVc0::P64 = P64[R1 + 7];
           _scVc1::P64 = P64[R1 + 15];
           _scVc2::P64 = P64[R1 + 23];
           _scVc3::P64 = P64[R1 + 31];
           _scVc4::P64 = P64[R1 + 39];
           _scVc5::P64 = P64[R1 + 47];
           _scVc6::P64 = P64[R1 + 55];
           I64[Hp - 72] = sat_scVcX_info;
           P64[Hp - 56] = _scVc0::P64;
           P64[Hp - 48] = _scVc1::P64;
           P64[Hp - 40] = _scVc2::P64;
           P64[Hp - 32] = _scVc3::P64;
           P64[Hp - 24] = _scVc4::P64;
           P64[Hp - 16] = _scVc5::P64;
           P64[Hp - 8] = _scVc6::P64;
           P64[Hp] = R2;
           R3 = Hp - 72;
           R2 = lvl15_rcV5g_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . g1_scVc8_info" {
     g1_scVc8_info:
         const g1_scVc8_entry;
         const 7;
         const 492645633753096;
         const 4294967301;
         const ScWiZ_srt+120;
 },
 sat_scVcZ_entry() //  [R1]
         { []
         }
     {offset
       cd66W: // global
           R2 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           call g1_scVc8_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVcZ_info" {
     sat_scVcZ_info:
         const sat_scVcZ_entry;
         const 2;
         const 492645633753106;
         const ScWiZ_srt+120;
 },
 sat_scVd1_entry() //  [R1]
         { []
         }
     {offset
       cd679: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cd67d; else goto cd67c;
       cd67d: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd67c: // global
           _scVc7::P64 = P64[R1 + 16];
           _scVc8::P64 = P64[R1 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _scVc7::P64;
           R2 = Hp - 14;
           R1 = _scVc8::P64;
           call g1_scVc8_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVd1_info" {
     sat_scVd1_info:
         const sat_scVd1_entry;
         const 2;
         const 492645633753106;
         const ScWiZ_srt+120;
 },
 sat_scVd2_entry() //  [R1]
         { []
         }
     {offset
       cd67e: // global
           _scVd2::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd67f; else goto cd67g;
       cd67g: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cd67i; else goto cd67h;
       cd67i: // global
           HpAlloc = 32;
           goto cd67f;
       cd67f: // global
           R1 = _scVd2::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd67h: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVd2::P64;
           _scVc7::P64 = P64[_scVd2::P64 + 16];
           _scVc8::P64 = P64[_scVd2::P64 + 24];
           I64[Hp - 24] = sat_scVd1_info;
           P64[Hp - 8] = _scVc7::P64;
           P64[Hp] = _scVc8::P64;
           R3 = Hp - 24;
           R2 = f1_rcV5f_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVd2_info" {
     sat_scVd2_info:
         const sat_scVd2_entry;
         const 2;
         const 1618545540595730;
         const ScWiZ_srt+120;
 },
 GHC.RTS.Flags.$w$cshowsPrec9_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cd67m: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto cd67q; else goto cd67p;
       cd67q: // global
           HpAlloc = 120;
           R1 = GHC.RTS.Flags.$w$cshowsPrec9_closure;
           I64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 80, res: 0, upd: 8;
       cd67p: // global
           I64[Hp - 112] = g1_scVc8_info;
           P64[Hp - 104] = R3;
           P64[Hp - 96] = R4;
           P64[Hp - 88] = R5;
           P64[Hp - 80] = R6;
           P64[Hp - 72] = P64[Sp];
           P64[Hp - 64] = P64[Sp + 8];
           P64[Hp - 56] = P64[Sp + 16];
           _scVc7::P64 = P64[Sp + 24];
           _cd5Yt::P64 = Hp - 111;
           if (%MO_S_Lt_W64(R2, 11)) goto cd67k; else goto cd67l;
       cd67k: // global
           I64[Hp - 48] = sat_scVcZ_info;
           P64[Hp - 32] = _scVc7::P64;
           P64[Hp - 24] = _cd5Yt::P64;
           _cd66S::P64 = Hp - 48;
           Hp = Hp - 24;
           R3 = _cd66S::P64;
           R2 = f1_rcV5f_closure;
           Sp = Sp + 32;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cd67l: // global
           I64[Hp - 48] = sat_scVd2_info;
           P64[Hp - 32] = _scVc7::P64;
           P64[Hp - 24] = _cd5Yt::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$w$cshowsPrec9_info" {
     GHC.RTS.Flags.$w$cshowsPrec9_info:
         const GHC.RTS.Flags.$w$cshowsPrec9_entry;
         const 0;
         const 3870345354280974;
         const 38654705664;
         const ScWiZ_srt+120;
         const 73;
         const GHC.RTS.Flags.$w$cshowsPrec9_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.042307897 UTC

[section ""data" . GHC.RTS.Flags.$fShowTraceFlags_$cshowsPrec_closure" {
     GHC.RTS.Flags.$fShowTraceFlags_$cshowsPrec_closure:
         const GHC.RTS.Flags.$fShowTraceFlags_$cshowsPrec_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowTraceFlags_$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cd6b8: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cd6bc; else goto cd6bd;
       cd6bc: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fShowTraceFlags_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cd6bd: // global
           I64[Sp - 24] = block_cd6b5_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ud6bl; else goto cd6b6;
       ud6bl: // global
           call _cd6b5(R1) args: 0, res: 0, upd: 0;
       cd6b6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowTraceFlags_$cshowsPrec_info" {
     GHC.RTS.Flags.$fShowTraceFlags_$cshowsPrec_info:
         const GHC.RTS.Flags.$fShowTraceFlags_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const ScWiZ_srt+272;
 },
 _cd6b5() //  [R1]
         { []
         }
     {offset
       cd6b5: // global
           I64[Sp] = block_cd6bb_info;
           _scVd7::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _scVd7::I64;
           if (R1 & 7 != 0) goto ud6bk; else goto cd6bf;
       ud6bk: // global
           call _cd6bb(R1) args: 0, res: 0, upd: 0;
       cd6bf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cd6b5_info" {
     block_cd6b5_info:
         const _cd6b5;
         const 2;
         const 4294967326;
         const ScWiZ_srt+272;
 },
 _cd6bb() //  [R1]
         { []
         }
     {offset
       cd6bb: // global
           R6 = P64[R1 + 31];
           R5 = P64[R1 + 23];
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = I64[Sp + 8];
           P64[Sp - 8] = P64[R1 + 39];
           P64[Sp] = P64[R1 + 47];
           P64[Sp + 8] = P64[R1 + 55];
           Sp = Sp - 8;
           call GHC.RTS.Flags.$w$cshowsPrec9_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd6bb_info" {
     block_cd6bb_info:
         const _cd6bb;
         const 66;
         const 4294967326;
         const ScWiZ_srt+272;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.050012087 UTC

[section ""data" . GHC.RTS.Flags.$fShowTraceFlags_$cshow_closure" {
     GHC.RTS.Flags.$fShowTraceFlags_$cshow_closure:
         const GHC.RTS.Flags.$fShowTraceFlags_$cshow_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowTraceFlags_$cshow_entry() //  [R2]
         { []
         }
     {offset
       cd6bJ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cd6bK; else goto cd6bL;
       cd6bK: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.$fShowTraceFlags_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd6bL: // global
           I64[Sp - 8] = block_cd6bG_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud6bP; else goto cd6bH;
       ud6bP: // global
           call _cd6bG(R1) args: 0, res: 0, upd: 0;
       cd6bH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowTraceFlags_$cshow_info" {
     GHC.RTS.Flags.$fShowTraceFlags_$cshow_info:
         const GHC.RTS.Flags.$fShowTraceFlags_$cshow_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const ScWiZ_srt+272;
 },
 _cd6bG() //  [R1]
         { []
         }
     {offset
       cd6bG: // global
           R6 = P64[R1 + 31];
           R5 = P64[R1 + 23];
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = 0;
           P64[Sp - 24] = P64[R1 + 39];
           P64[Sp - 16] = P64[R1 + 47];
           P64[Sp - 8] = P64[R1 + 55];
           P64[Sp] = GHC.Types.[]_closure+1;
           Sp = Sp - 24;
           call GHC.RTS.Flags.$w$cshowsPrec9_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd6bG_info" {
     block_cd6bG_info:
         const _cd6bG;
         const 0;
         const 4294967326;
         const ScWiZ_srt+272;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.055811482 UTC

[section ""data" . GHC.RTS.Flags.$fShowTraceFlags1_closure" {
     GHC.RTS.Flags.$fShowTraceFlags1_closure:
         const GHC.RTS.Flags.$fShowTraceFlags1_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowTraceFlags1_entry() //  [R2, R3]
         { []
         }
     {offset
       cd6c9: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cd6ca; else goto cd6cb;
       cd6ca: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fShowTraceFlags1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cd6cb: // global
           I64[Sp - 16] = block_cd6c6_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ud6cf; else goto cd6c7;
       ud6cf: // global
           call _cd6c6(R1) args: 0, res: 0, upd: 0;
       cd6c7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowTraceFlags1_info" {
     GHC.RTS.Flags.$fShowTraceFlags1_info:
         const GHC.RTS.Flags.$fShowTraceFlags1_entry;
         const 0;
         const 38654705678;
         const 8589934607;
         const ScWiZ_srt+272;
 },
 _cd6c6() //  [R1]
         { []
         }
     {offset
       cd6c6: // global
           R6 = P64[R1 + 31];
           R5 = P64[R1 + 23];
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = 0;
           P64[Sp - 16] = P64[R1 + 39];
           P64[Sp - 8] = P64[R1 + 47];
           P64[Sp] = P64[R1 + 55];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$cshowsPrec9_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd6c6_info" {
     block_cd6c6_info:
         const _cd6c6;
         const 1;
         const 4294967326;
         const ScWiZ_srt+272;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.061887485 UTC

[section ""data" . GHC.RTS.Flags.$fShowTraceFlags_$cshowList_closure" {
     GHC.RTS.Flags.$fShowTraceFlags_$cshowList_closure:
         const GHC.RTS.Flags.$fShowTraceFlags_$cshowList_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowTraceFlags_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       cd6cw: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.RTS.Flags.$fShowTraceFlags1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowTraceFlags_$cshowList_info" {
     GHC.RTS.Flags.$fShowTraceFlags_$cshowList_info:
         const GHC.RTS.Flags.$fShowTraceFlags_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const ScWiZ_srt+296;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.06494871 UTC

[section ""data" . GHC.RTS.Flags.$fShowTraceFlags_closure" {
     GHC.RTS.Flags.$fShowTraceFlags_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.RTS.Flags.$fShowTraceFlags_$cshowsPrec_closure+3;
         const GHC.RTS.Flags.$fShowTraceFlags_$cshow_closure+1;
         const GHC.RTS.Flags.$fShowTraceFlags_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.066648265 UTC

[section ""cstring" . GHC.RTS.Flags.$fShowDoHeapProfile16_bytes" {
     GHC.RTS.Flags.$fShowDoHeapProfile16_bytes:
         I8[] [78,111,72,101,97,112,80,114,111,102,105,108,105,110,103]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.068834682 UTC

[section ""data" . GHC.RTS.Flags.$fShowDoHeapProfile15_closure" {
     GHC.RTS.Flags.$fShowDoHeapProfile15_closure:
         const GHC.RTS.Flags.$fShowDoHeapProfile15_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fShowDoHeapProfile15_entry() //  [R1]
         { []
         }
     {offset
       cd6cL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd6cM; else goto cd6cN;
       cd6cM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6cN: // global
           (_cd6cI::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cd6cI::I64 == 0) goto cd6cK; else goto cd6cJ;
       cd6cK: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cd6cJ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cd6cI::I64;
           R2 = GHC.RTS.Flags.$fShowDoHeapProfile16_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowDoHeapProfile15_info" {
     GHC.RTS.Flags.$fShowDoHeapProfile15_info:
         const GHC.RTS.Flags.$fShowDoHeapProfile15_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.072273186 UTC

[section ""cstring" . GHC.RTS.Flags.$fShowDoHeapProfile14_bytes" {
     GHC.RTS.Flags.$fShowDoHeapProfile14_bytes:
         I8[] [72,101,97,112,66,121,67,67,83]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.074841085 UTC

[section ""data" . GHC.RTS.Flags.$fShowDoHeapProfile13_closure" {
     GHC.RTS.Flags.$fShowDoHeapProfile13_closure:
         const GHC.RTS.Flags.$fShowDoHeapProfile13_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fShowDoHeapProfile13_entry() //  [R1]
         { []
         }
     {offset
       cd6d2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd6d3; else goto cd6d4;
       cd6d3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6d4: // global
           (_cd6cZ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cd6cZ::I64 == 0) goto cd6d1; else goto cd6d0;
       cd6d1: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cd6d0: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cd6cZ::I64;
           R2 = GHC.RTS.Flags.$fShowDoHeapProfile14_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowDoHeapProfile13_info" {
     GHC.RTS.Flags.$fShowDoHeapProfile13_info:
         const GHC.RTS.Flags.$fShowDoHeapProfile13_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.078286303 UTC

[section ""cstring" . GHC.RTS.Flags.$fShowDoHeapProfile12_bytes" {
     GHC.RTS.Flags.$fShowDoHeapProfile12_bytes:
         I8[] [72,101,97,112,66,121,77,111,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.080460611 UTC

[section ""data" . GHC.RTS.Flags.$fShowDoHeapProfile11_closure" {
     GHC.RTS.Flags.$fShowDoHeapProfile11_closure:
         const GHC.RTS.Flags.$fShowDoHeapProfile11_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fShowDoHeapProfile11_entry() //  [R1]
         { []
         }
     {offset
       cd6dj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd6dk; else goto cd6dl;
       cd6dk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6dl: // global
           (_cd6dg::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cd6dg::I64 == 0) goto cd6di; else goto cd6dh;
       cd6di: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cd6dh: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cd6dg::I64;
           R2 = GHC.RTS.Flags.$fShowDoHeapProfile12_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowDoHeapProfile11_info" {
     GHC.RTS.Flags.$fShowDoHeapProfile11_info:
         const GHC.RTS.Flags.$fShowDoHeapProfile11_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.083952015 UTC

[section ""cstring" . GHC.RTS.Flags.$fShowDoHeapProfile10_bytes" {
     GHC.RTS.Flags.$fShowDoHeapProfile10_bytes:
         I8[] [72,101,97,112,66,121,68,101,115,99,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.086113025 UTC

[section ""data" . GHC.RTS.Flags.$fShowDoHeapProfile9_closure" {
     GHC.RTS.Flags.$fShowDoHeapProfile9_closure:
         const GHC.RTS.Flags.$fShowDoHeapProfile9_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fShowDoHeapProfile9_entry() //  [R1]
         { []
         }
     {offset
       cd6dA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd6dB; else goto cd6dC;
       cd6dB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6dC: // global
           (_cd6dx::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cd6dx::I64 == 0) goto cd6dz; else goto cd6dy;
       cd6dz: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cd6dy: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cd6dx::I64;
           R2 = GHC.RTS.Flags.$fShowDoHeapProfile10_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowDoHeapProfile9_info" {
     GHC.RTS.Flags.$fShowDoHeapProfile9_info:
         const GHC.RTS.Flags.$fShowDoHeapProfile9_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.090471725 UTC

[section ""cstring" . GHC.RTS.Flags.$fShowDoHeapProfile8_bytes" {
     GHC.RTS.Flags.$fShowDoHeapProfile8_bytes:
         I8[] [72,101,97,112,66,121,84,121,112,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.092596673 UTC

[section ""data" . GHC.RTS.Flags.$fShowDoHeapProfile7_closure" {
     GHC.RTS.Flags.$fShowDoHeapProfile7_closure:
         const GHC.RTS.Flags.$fShowDoHeapProfile7_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fShowDoHeapProfile7_entry() //  [R1]
         { []
         }
     {offset
       cd6dR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd6dS; else goto cd6dT;
       cd6dS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6dT: // global
           (_cd6dO::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cd6dO::I64 == 0) goto cd6dQ; else goto cd6dP;
       cd6dQ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cd6dP: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cd6dO::I64;
           R2 = GHC.RTS.Flags.$fShowDoHeapProfile8_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowDoHeapProfile7_info" {
     GHC.RTS.Flags.$fShowDoHeapProfile7_info:
         const GHC.RTS.Flags.$fShowDoHeapProfile7_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.096202168 UTC

[section ""cstring" . GHC.RTS.Flags.$fShowDoHeapProfile6_bytes" {
     GHC.RTS.Flags.$fShowDoHeapProfile6_bytes:
         I8[] [72,101,97,112,66,121,82,101,116,97,105,110,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.098389462 UTC

[section ""data" . GHC.RTS.Flags.$fShowDoHeapProfile5_closure" {
     GHC.RTS.Flags.$fShowDoHeapProfile5_closure:
         const GHC.RTS.Flags.$fShowDoHeapProfile5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fShowDoHeapProfile5_entry() //  [R1]
         { []
         }
     {offset
       cd6e8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd6e9; else goto cd6ea;
       cd6e9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6ea: // global
           (_cd6e5::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cd6e5::I64 == 0) goto cd6e7; else goto cd6e6;
       cd6e7: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cd6e6: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cd6e5::I64;
           R2 = GHC.RTS.Flags.$fShowDoHeapProfile6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowDoHeapProfile5_info" {
     GHC.RTS.Flags.$fShowDoHeapProfile5_info:
         const GHC.RTS.Flags.$fShowDoHeapProfile5_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.10226184 UTC

[section ""cstring" . GHC.RTS.Flags.$fShowDoHeapProfile4_bytes" {
     GHC.RTS.Flags.$fShowDoHeapProfile4_bytes:
         I8[] [72,101,97,112,66,121,76,68,86]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.104501961 UTC

[section ""data" . GHC.RTS.Flags.$fShowDoHeapProfile3_closure" {
     GHC.RTS.Flags.$fShowDoHeapProfile3_closure:
         const GHC.RTS.Flags.$fShowDoHeapProfile3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fShowDoHeapProfile3_entry() //  [R1]
         { []
         }
     {offset
       cd6ep: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd6eq; else goto cd6er;
       cd6eq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6er: // global
           (_cd6em::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cd6em::I64 == 0) goto cd6eo; else goto cd6en;
       cd6eo: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cd6en: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cd6em::I64;
           R2 = GHC.RTS.Flags.$fShowDoHeapProfile4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowDoHeapProfile3_info" {
     GHC.RTS.Flags.$fShowDoHeapProfile3_info:
         const GHC.RTS.Flags.$fShowDoHeapProfile3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.108020228 UTC

[section ""cstring" . GHC.RTS.Flags.$fShowDoHeapProfile2_bytes" {
     GHC.RTS.Flags.$fShowDoHeapProfile2_bytes:
         I8[] [72,101,97,112,66,121,67,108,111,115,117,114,101,84,121,112,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.110240981 UTC

[section ""data" . GHC.RTS.Flags.$fShowDoHeapProfile1_closure" {
     GHC.RTS.Flags.$fShowDoHeapProfile1_closure:
         const GHC.RTS.Flags.$fShowDoHeapProfile1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fShowDoHeapProfile1_entry() //  [R1]
         { []
         }
     {offset
       cd6eG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd6eH; else goto cd6eI;
       cd6eH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6eI: // global
           (_cd6eD::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cd6eD::I64 == 0) goto cd6eF; else goto cd6eE;
       cd6eF: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cd6eE: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cd6eD::I64;
           R2 = GHC.RTS.Flags.$fShowDoHeapProfile2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowDoHeapProfile1_info" {
     GHC.RTS.Flags.$fShowDoHeapProfile1_info:
         const GHC.RTS.Flags.$fShowDoHeapProfile1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.11511756 UTC

[section ""data" . GHC.RTS.Flags.$w$cshowsPrec3_closure" {
     GHC.RTS.Flags.$w$cshowsPrec3_closure:
         const GHC.RTS.Flags.$w$cshowsPrec3_info;
         const 0;
 },
 GHC.RTS.Flags.$w$cshowsPrec3_entry() //  [R2, R3]
         { []
         }
     {offset
       cd6f7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd6f8; else goto cd6f9;
       cd6f8: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.RTS.Flags.$w$cshowsPrec3_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cd6f9: // global
           I64[Sp - 16] = block_cd6eU_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ud6fy; else goto cd6eV;
       ud6fy: // global
           call _cd6eU(R1) args: 0, res: 0, upd: 0;
       cd6eV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$w$cshowsPrec3_info" {
     GHC.RTS.Flags.$w$cshowsPrec3_info:
         const GHC.RTS.Flags.$w$cshowsPrec3_entry;
         const 0;
         const 2194728288270;
         const 8589934607;
         const ScWiZ_srt+304;
 },
 _cd6eU() //  [R1]
         { []
         }
     {offset
       cd6eU: // global
           _scVdC::P64 = P64[Sp + 8];
           switch [0 .. 7] (%MO_UU_Conv_W32_W64(I32[I64[R1 - 1] + 20])) {
               case 0 : goto cd6eY;
               case 1 : goto cd6eZ;
               case 2 : goto cd6f0;
               case 3 : goto cd6f1;
               case 4 : goto cd6f2;
               case 5 : goto cd6f3;
               case 6 : goto cd6f4;
               case 7 : goto cd6f5;
           }
       cd6f5: // global
           R3 = _scVdC::P64;
           R2 = GHC.RTS.Flags.$fShowDoHeapProfile1_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cd6f4: // global
           R3 = _scVdC::P64;
           R2 = GHC.RTS.Flags.$fShowDoHeapProfile3_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cd6f3: // global
           R3 = _scVdC::P64;
           R2 = GHC.RTS.Flags.$fShowDoHeapProfile5_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cd6f2: // global
           R3 = _scVdC::P64;
           R2 = GHC.RTS.Flags.$fShowDoHeapProfile7_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cd6f1: // global
           R3 = _scVdC::P64;
           R2 = GHC.RTS.Flags.$fShowDoHeapProfile9_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cd6f0: // global
           R3 = _scVdC::P64;
           R2 = GHC.RTS.Flags.$fShowDoHeapProfile11_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cd6eZ: // global
           R3 = _scVdC::P64;
           R2 = GHC.RTS.Flags.$fShowDoHeapProfile13_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cd6eY: // global
           R3 = _scVdC::P64;
           R2 = GHC.RTS.Flags.$fShowDoHeapProfile15_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd6eU_info" {
     block_cd6eU_info:
         const _cd6eU;
         const 1;
         const 1095216660510;
         const ScWiZ_srt+312;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.121133137 UTC

[section ""data" . GHC.RTS.Flags.$fShowDoHeapProfile_$cshowsPrec_closure" {
     GHC.RTS.Flags.$fShowDoHeapProfile_$cshowsPrec_closure:
         const GHC.RTS.Flags.$fShowDoHeapProfile_$cshowsPrec_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowDoHeapProfile_$cshowsPrec_entry() //  [R3, R4]
         { []
         }
     {offset
       cd6fP: // global
           _scVdF::P64 = R3;
           R3 = R4;
           R2 = _scVdF::P64;
           call GHC.RTS.Flags.$w$cshowsPrec3_entry(R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowDoHeapProfile_$cshowsPrec_info" {
     GHC.RTS.Flags.$fShowDoHeapProfile_$cshowsPrec_info:
         const GHC.RTS.Flags.$fShowDoHeapProfile_$cshowsPrec_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const ScWiZ_srt+304;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.126381055 UTC

[section ""data" . GHC.RTS.Flags.$fShowDoHeapProfile_$cshow_closure" {
     GHC.RTS.Flags.$fShowDoHeapProfile_$cshow_closure:
         const GHC.RTS.Flags.$fShowDoHeapProfile_$cshow_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowDoHeapProfile_$cshow_entry() //  [R2]
         { []
         }
     {offset
       cd6gd: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd6ge; else goto cd6gf;
       cd6ge: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.$fShowDoHeapProfile_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd6gf: // global
           I64[Sp - 8] = block_cd6g0_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud6gE; else goto cd6g1;
       ud6gE: // global
           call _cd6g0(R1) args: 0, res: 0, upd: 0;
       cd6g1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowDoHeapProfile_$cshow_info" {
     GHC.RTS.Flags.$fShowDoHeapProfile_$cshow_info:
         const GHC.RTS.Flags.$fShowDoHeapProfile_$cshow_entry;
         const 0;
         const 2194728288270;
         const 4294967301;
         const ScWiZ_srt+312;
 },
 _cd6g0() //  [R1]
         { []
         }
     {offset
       cd6g0: // global
           switch [0 .. 7] (%MO_UU_Conv_W32_W64(I32[I64[R1 - 1] + 20])) {
               case 0 : goto cd6g4;
               case 1 : goto cd6g5;
               case 2 : goto cd6g6;
               case 3 : goto cd6g7;
               case 4 : goto cd6g8;
               case 5 : goto cd6g9;
               case 6 : goto cd6ga;
               case 7 : goto cd6gb;
           }
       cd6gb: // global
           R1 = GHC.RTS.Flags.$fShowDoHeapProfile1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cd6ga: // global
           R1 = GHC.RTS.Flags.$fShowDoHeapProfile3_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cd6g9: // global
           R1 = GHC.RTS.Flags.$fShowDoHeapProfile5_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cd6g8: // global
           R1 = GHC.RTS.Flags.$fShowDoHeapProfile7_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cd6g7: // global
           R1 = GHC.RTS.Flags.$fShowDoHeapProfile9_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cd6g6: // global
           R1 = GHC.RTS.Flags.$fShowDoHeapProfile11_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cd6g5: // global
           R1 = GHC.RTS.Flags.$fShowDoHeapProfile13_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cd6g4: // global
           R1 = GHC.RTS.Flags.$fShowDoHeapProfile15_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd6g0_info" {
     block_cd6g0_info:
         const _cd6g0;
         const 0;
         const 1095216660510;
         const ScWiZ_srt+312;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.13217828 UTC

[section ""data" . GHC.RTS.Flags.$fShowDoHeapProfile_$cshowList_closure" {
     GHC.RTS.Flags.$fShowDoHeapProfile_$cshowList_closure:
         const GHC.RTS.Flags.$fShowDoHeapProfile_$cshowList_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowDoHeapProfile_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       cd6h3: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.RTS.Flags.$w$cshowsPrec3_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowDoHeapProfile_$cshowList_info" {
     GHC.RTS.Flags.$fShowDoHeapProfile_$cshowList_info:
         const GHC.RTS.Flags.$fShowDoHeapProfile_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const ScWiZ_srt+304;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.135389898 UTC

[section ""data" . GHC.RTS.Flags.$fShowDoHeapProfile_closure" {
     GHC.RTS.Flags.$fShowDoHeapProfile_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.RTS.Flags.$fShowDoHeapProfile_$cshowsPrec_closure+3;
         const GHC.RTS.Flags.$fShowDoHeapProfile_$cshow_closure+1;
         const GHC.RTS.Flags.$fShowDoHeapProfile_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.137100579 UTC

[section ""cstring" . f2_rcV5n_bytes" {
     f2_rcV5n_bytes:
         I8[] [80,114,111,102,70,108,97,103,115,32,123]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.139790056 UTC

[section ""data" . f3_rcV5o_closure" {
     f3_rcV5o_closure:
         const f3_rcV5o_info;
         const 0;
         const 0;
         const 0;
 },
 f3_rcV5o_entry() //  [R1]
         { []
         }
     {offset
       cd6hi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd6hj; else goto cd6hk;
       cd6hj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6hk: // global
           (_cd6hf::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cd6hf::I64 == 0) goto cd6hh; else goto cd6hg;
       cd6hh: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cd6hg: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cd6hf::I64;
           R2 = f2_rcV5n_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f3_rcV5o_info" {
     f3_rcV5o_info:
         const f3_rcV5o_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.143264463 UTC

[section ""cstring" . lvl22_rcV5p_bytes" {
     lvl22_rcV5p_bytes:
         I8[] [115,104,111,119,67,67,83,79,110,69,120,99,101,112,116,105,111,110,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.14485968 UTC

[section ""cstring" . lvl23_rcV5q_bytes" {
     lvl23_rcV5q_bytes:
         I8[] [109,97,120,82,101,116,97,105,110,101,114,83,101,116,83,105,122,101,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.14644354 UTC

[section ""cstring" . lvl24_rcV5r_bytes" {
     lvl24_rcV5r_bytes:
         I8[] [99,99,115,76,101,110,103,116,104,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.148088199 UTC

[section ""cstring" . lvl25_rcV5s_bytes" {
     lvl25_rcV5s_bytes:
         I8[] [109,111,100,83,101,108,101,99,116,111,114,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.150178664 UTC

[section ""cstring" . lvl26_rcV5t_bytes" {
     lvl26_rcV5t_bytes:
         I8[] [100,101,115,99,114,83,101,108,101,99,116,111,114,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.15180834 UTC

[section ""cstring" . lvl27_rcV5u_bytes" {
     lvl27_rcV5u_bytes:
         I8[] [116,121,112,101,83,101,108,101,99,116,111,114,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.153989702 UTC

[section ""cstring" . lvl28_rcV5v_bytes" {
     lvl28_rcV5v_bytes:
         I8[] [99,99,83,101,108,101,99,116,111,114,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.155585147 UTC

[section ""cstring" . lvl29_rcV5w_bytes" {
     lvl29_rcV5w_bytes:
         I8[] [99,99,115,83,101,108,101,99,116,111,114,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.157224294 UTC

[section ""cstring" . lvl30_rcV5x_bytes" {
     lvl30_rcV5x_bytes:
         I8[] [114,101,116,97,105,110,101,114,83,101,108,101,99,116,111,114,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.158961147 UTC

[section ""cstring" . lvl31_rcV5y_bytes" {
     lvl31_rcV5y_bytes:
         I8[] [98,105,111,83,101,108,101,99,116,111,114,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.160614866 UTC

[section ""cstring" . lvl32_rcV5z_bytes" {
     lvl32_rcV5z_bytes:
         I8[] [100,111,72,101,97,112,80,114,111,102,105,108,101,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.162388045 UTC

[section ""cstring" . lvl33_rcV5A_bytes" {
     lvl33_rcV5A_bytes:
         I8[] [104,101,97,112,80,114,111,102,105,108,101,73,110,116,101,114,118,97,108,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.163962151 UTC

[section ""cstring" . lvl34_rcV5B_bytes" {
     lvl34_rcV5B_bytes:
         I8[] [104,101,97,112,80,114,111,102,105,108,101,73,110,116,101,114,118,97,108,84,105,99,107,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.166008366 UTC

[section ""cstring" . lvl35_rcV5C_bytes" {
     lvl35_rcV5C_bytes:
         I8[] [105,110,99,108,117,100,101,84,83,79,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.206861393 UTC

[section ""data" . GHC.RTS.Flags.$fShowProfFlags_$cshowsPrec_closure" {
     GHC.RTS.Flags.$fShowProfFlags_$cshowsPrec_closure:
         const GHC.RTS.Flags.$fShowProfFlags_$cshowsPrec_info;
         const 0;
 },
 w1_scVe4_entry() //  [R1]
         { []
         }
     {offset
       cd6i1: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cd6i2; else goto cd6i3;
       cd6i2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6i3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cd6hY_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ud6if; else goto cd6hZ;
       ud6if: // global
           call _cd6hY(R1) args: 0, res: 0, upd: 0;
       cd6hZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . w1_scVe4_info" {
     w1_scVe4_info:
         const w1_scVe4_entry;
         const 1;
         const 16;
 },
 _cd6hY() //  [R1]
         { []
         }
     {offset
       cd6hY: // global
           _scVe6::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_scVe6::I64, 0)) goto cd6id; else goto cd6ie;
       cd6id: // global
           R2 = _scVe6::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.wordToInteger_entry(R2) args: 24, res: 0, upd: 24;
       cd6ie: // global
           R2 = _scVe6::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd6hY_info" {
     block_cd6hY_info:
         const _cd6hY;
         const 0;
         const 30;
 },
 f8_scVe9_entry() //  [R1]
         { []
         }
     {offset
       cd6ik: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd6il; else goto cd6im;
       cd6il: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6im: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 16];
           R3 = GHC.RTS.Flags.$fEnumDoCostCentres10_closure+1;
           R2 = GHC.Show.$fShow[]_$s$fShow[]1_closure;
           Sp = Sp - 16;
           call GHC.Show.$fShowMaybe_$cshowsPrec_entry(R4,
                                                       R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f8_scVe9_info" {
     f8_scVe9_info:
         const f8_scVe9_entry;
         const 1;
         const 12884901904;
         const ScWiZ_srt+168;
 },
 f9_scVea_entry() //  [R1]
         { []
         }
     {offset
       cd6ir: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd6is; else goto cd6it;
       cd6is: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6it: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 16];
           R3 = GHC.RTS.Flags.$fEnumDoCostCentres10_closure+1;
           R2 = GHC.Show.$fShow[]_$s$fShow[]1_closure;
           Sp = Sp - 16;
           call GHC.Show.$fShowMaybe_$cshowsPrec_entry(R4,
                                                       R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f9_scVea_info" {
     f9_scVea_info:
         const f9_scVea_entry;
         const 1;
         const 12884901904;
         const ScWiZ_srt+168;
 },
 f10_scVeb_entry() //  [R1]
         { []
         }
     {offset
       cd6iy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd6iz; else goto cd6iA;
       cd6iz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6iA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 16];
           R3 = GHC.RTS.Flags.$fEnumDoCostCentres10_closure+1;
           R2 = GHC.Show.$fShow[]_$s$fShow[]1_closure;
           Sp = Sp - 16;
           call GHC.Show.$fShowMaybe_$cshowsPrec_entry(R4,
                                                       R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f10_scVeb_info" {
     f10_scVeb_info:
         const f10_scVeb_entry;
         const 1;
         const 12884901904;
         const ScWiZ_srt+168;
 },
 f11_scVec_entry() //  [R1]
         { []
         }
     {offset
       cd6iF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd6iG; else goto cd6iH;
       cd6iG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6iH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 16];
           R3 = GHC.RTS.Flags.$fEnumDoCostCentres10_closure+1;
           R2 = GHC.Show.$fShow[]_$s$fShow[]1_closure;
           Sp = Sp - 16;
           call GHC.Show.$fShowMaybe_$cshowsPrec_entry(R4,
                                                       R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f11_scVec_info" {
     f11_scVec_info:
         const f11_scVec_entry;
         const 1;
         const 12884901904;
         const ScWiZ_srt+168;
 },
 f12_scVed_entry() //  [R1]
         { []
         }
     {offset
       cd6iM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd6iN; else goto cd6iO;
       cd6iN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6iO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 16];
           R3 = GHC.RTS.Flags.$fEnumDoCostCentres10_closure+1;
           R2 = GHC.Show.$fShow[]_$s$fShow[]1_closure;
           Sp = Sp - 16;
           call GHC.Show.$fShowMaybe_$cshowsPrec_entry(R4,
                                                       R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f12_scVed_info" {
     f12_scVed_info:
         const f12_scVed_entry;
         const 1;
         const 12884901904;
         const ScWiZ_srt+168;
 },
 f13_scVee_entry() //  [R1]
         { []
         }
     {offset
       cd6iT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd6iU; else goto cd6iV;
       cd6iU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6iV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 16];
           R3 = GHC.RTS.Flags.$fEnumDoCostCentres10_closure+1;
           R2 = GHC.Show.$fShow[]_$s$fShow[]1_closure;
           Sp = Sp - 16;
           call GHC.Show.$fShowMaybe_$cshowsPrec_entry(R4,
                                                       R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f13_scVee_info" {
     f13_scVee_info:
         const f13_scVee_entry;
         const 1;
         const 12884901904;
         const ScWiZ_srt+168;
 },
 f14_scVef_entry() //  [R1]
         { []
         }
     {offset
       cd6j0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd6j1; else goto cd6j2;
       cd6j1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6j2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 16];
           R3 = GHC.RTS.Flags.$fEnumDoCostCentres10_closure+1;
           R2 = GHC.Show.$fShow[]_$s$fShow[]1_closure;
           Sp = Sp - 16;
           call GHC.Show.$fShowMaybe_$cshowsPrec_entry(R4,
                                                       R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f14_scVef_info" {
     f14_scVef_info:
         const f14_scVef_entry;
         const 1;
         const 12884901904;
         const ScWiZ_srt+168;
 },
 sat_scVem_entry() //  [R1]
         { []
         }
     {offset
       cd6l2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd6l3; else goto cd6l4;
       cd6l3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6l4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.RTS.Flags.$fShowCCFlags2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVem_info" {
     sat_scVem_info:
         const sat_scVem_entry;
         const 1;
         const 16;
 },
 sat_scVen_entry() //  [R1]
         { []
         }
     {offset
       cd6l5: // global
           _scVen::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd6l6; else goto cd6l7;
       cd6l7: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cd6l9; else goto cd6l8;
       cd6l9: // global
           HpAlloc = 24;
           goto cd6l6;
       cd6l6: // global
           R1 = _scVen::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6l8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVen::P64;
           _scVef::P64 = P64[_scVen::P64 + 16];
           _scVeh::P64 = P64[_scVen::P64 + 24];
           I64[Hp - 16] = sat_scVem_info;
           P64[Hp] = _scVeh::P64;
           R2 = Hp - 16;
           R1 = _scVef::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVen_info" {
     sat_scVen_info:
         const sat_scVen_entry;
         const 2;
         const 18;
 },
 sat_scVeo_entry() //  [R1]
         { []
         }
     {offset
       cd6la: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cd6le; else goto cd6ld;
       cd6le: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6ld: // global
           _scVef::P64 = P64[R1 + 16];
           _scVeh::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_scVen_info;
           P64[Hp - 8] = _scVef::P64;
           P64[Hp] = _scVeh::P64;
           R3 = Hp - 24;
           R2 = lvl31_rcV5y_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVeo_info" {
     sat_scVeo_info:
         const sat_scVeo_entry;
         const 2;
         const 18;
 },
 sat_scVep_entry() //  [R1]
         { []
         }
     {offset
       cd6lf: // global
           _scVep::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd6lg; else goto cd6lh;
       cd6lh: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cd6lj; else goto cd6li;
       cd6lj: // global
           HpAlloc = 32;
           goto cd6lg;
       cd6lg: // global
           R1 = _scVep::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6li: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVep::P64;
           _scVef::P64 = P64[_scVep::P64 + 16];
           _scVeh::P64 = P64[_scVep::P64 + 24];
           I64[Hp - 24] = sat_scVeo_info;
           P64[Hp - 8] = _scVef::P64;
           P64[Hp] = _scVeh::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVep_info" {
     sat_scVep_info:
         const sat_scVep_entry;
         const 2;
         const 4294967314;
         const ScWiZ_srt+144;
 },
 sat_scVeq_entry() //  [R1]
         { []
         }
     {offset
       cd6lk: // global
           _scVeq::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd6ll; else goto cd6lm;
       cd6lm: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cd6lo; else goto cd6ln;
       cd6lo: // global
           HpAlloc = 32;
           goto cd6ll;
       cd6ll: // global
           R1 = _scVeq::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6ln: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVeq::P64;
           _scVee::P64 = P64[_scVeq::P64 + 16];
           _scVef::P64 = P64[_scVeq::P64 + 24];
           _scVeh::P64 = P64[_scVeq::P64 + 32];
           I64[Hp - 24] = sat_scVep_info;
           P64[Hp - 8] = _scVef::P64;
           P64[Hp] = _scVeh::P64;
           R2 = Hp - 24;
           R1 = _scVee::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVeq_info" {
     sat_scVeq_info:
         const sat_scVeq_entry;
         const 3;
         const 4294967311;
         const ScWiZ_srt+144;
 },
 sat_scVer_entry() //  [R1]
         { []
         }
     {offset
       cd6lp: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cd6lt; else goto cd6ls;
       cd6lt: // global
           HpAlloc = 40;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6ls: // global
           _scVee::P64 = P64[R1 + 16];
           _scVef::P64 = P64[R1 + 24];
           _scVeh::P64 = P64[R1 + 32];
           I64[Hp - 32] = sat_scVeq_info;
           P64[Hp - 16] = _scVee::P64;
           P64[Hp - 8] = _scVef::P64;
           P64[Hp] = _scVeh::P64;
           R3 = Hp - 32;
           R2 = lvl30_rcV5x_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVer_info" {
     sat_scVer_info:
         const sat_scVer_entry;
         const 3;
         const 4294967311;
         const ScWiZ_srt+144;
 },
 sat_scVes_entry() //  [R1]
         { []
         }
     {offset
       cd6lu: // global
           _scVes::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd6lv; else goto cd6lw;
       cd6lw: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cd6ly; else goto cd6lx;
       cd6ly: // global
           HpAlloc = 40;
           goto cd6lv;
       cd6lv: // global
           R1 = _scVes::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6lx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVes::P64;
           _scVee::P64 = P64[_scVes::P64 + 16];
           _scVef::P64 = P64[_scVes::P64 + 24];
           _scVeh::P64 = P64[_scVes::P64 + 32];
           I64[Hp - 32] = sat_scVer_info;
           P64[Hp - 16] = _scVee::P64;
           P64[Hp - 8] = _scVef::P64;
           P64[Hp] = _scVeh::P64;
           R3 = Hp - 32;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVes_info" {
     sat_scVes_info:
         const sat_scVes_entry;
         const 3;
         const 4294967311;
         const ScWiZ_srt+144;
 },
 sat_scVet_entry() //  [R1]
         { []
         }
     {offset
       cd6lz: // global
           _scVet::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd6lA; else goto cd6lB;
       cd6lB: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cd6lD; else goto cd6lC;
       cd6lD: // global
           HpAlloc = 40;
           goto cd6lA;
       cd6lA: // global
           R1 = _scVet::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6lC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVet::P64;
           _scVed::P64 = P64[_scVet::P64 + 16];
           _scVee::P64 = P64[_scVet::P64 + 24];
           _scVef::P64 = P64[_scVet::P64 + 32];
           _scVeh::P64 = P64[_scVet::P64 + 40];
           I64[Hp - 32] = sat_scVes_info;
           P64[Hp - 16] = _scVee::P64;
           P64[Hp - 8] = _scVef::P64;
           P64[Hp] = _scVeh::P64;
           R2 = Hp - 32;
           R1 = _scVed::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVet_info" {
     sat_scVet_info:
         const sat_scVet_entry;
         const 4;
         const 4294967311;
         const ScWiZ_srt+144;
 },
 sat_scVeu_entry() //  [R1]
         { []
         }
     {offset
       cd6lE: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cd6lI; else goto cd6lH;
       cd6lI: // global
           HpAlloc = 48;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6lH: // global
           _scVed::P64 = P64[R1 + 16];
           _scVee::P64 = P64[R1 + 24];
           _scVef::P64 = P64[R1 + 32];
           _scVeh::P64 = P64[R1 + 40];
           I64[Hp - 40] = sat_scVet_info;
           P64[Hp - 24] = _scVed::P64;
           P64[Hp - 16] = _scVee::P64;
           P64[Hp - 8] = _scVef::P64;
           P64[Hp] = _scVeh::P64;
           R3 = Hp - 40;
           R2 = lvl29_rcV5w_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVeu_info" {
     sat_scVeu_info:
         const sat_scVeu_entry;
         const 4;
         const 4294967311;
         const ScWiZ_srt+144;
 },
 sat_scVev_entry() //  [R1]
         { []
         }
     {offset
       cd6lJ: // global
           _scVev::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd6lK; else goto cd6lL;
       cd6lL: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cd6lN; else goto cd6lM;
       cd6lN: // global
           HpAlloc = 48;
           goto cd6lK;
       cd6lK: // global
           R1 = _scVev::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6lM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVev::P64;
           _scVed::P64 = P64[_scVev::P64 + 16];
           _scVee::P64 = P64[_scVev::P64 + 24];
           _scVef::P64 = P64[_scVev::P64 + 32];
           _scVeh::P64 = P64[_scVev::P64 + 40];
           I64[Hp - 40] = sat_scVeu_info;
           P64[Hp - 24] = _scVed::P64;
           P64[Hp - 16] = _scVee::P64;
           P64[Hp - 8] = _scVef::P64;
           P64[Hp] = _scVeh::P64;
           R3 = Hp - 40;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVev_info" {
     sat_scVev_info:
         const sat_scVev_entry;
         const 4;
         const 4294967311;
         const ScWiZ_srt+144;
 },
 sat_scVew_entry() //  [R1]
         { []
         }
     {offset
       cd6lO: // global
           _scVew::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd6lP; else goto cd6lQ;
       cd6lQ: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cd6lS; else goto cd6lR;
       cd6lS: // global
           HpAlloc = 48;
           goto cd6lP;
       cd6lP: // global
           R1 = _scVew::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6lR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVew::P64;
           _scVec::P64 = P64[_scVew::P64 + 16];
           _scVed::P64 = P64[_scVew::P64 + 24];
           _scVee::P64 = P64[_scVew::P64 + 32];
           _scVef::P64 = P64[_scVew::P64 + 40];
           _scVeh::P64 = P64[_scVew::P64 + 48];
           I64[Hp - 40] = sat_scVev_info;
           P64[Hp - 24] = _scVed::P64;
           P64[Hp - 16] = _scVee::P64;
           P64[Hp - 8] = _scVef::P64;
           P64[Hp] = _scVeh::P64;
           R2 = Hp - 40;
           R1 = _scVec::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVew_info" {
     sat_scVew_info:
         const sat_scVew_entry;
         const 5;
         const 4294967311;
         const ScWiZ_srt+144;
 },
 sat_scVex_entry() //  [R1]
         { []
         }
     {offset
       cd6lT: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cd6lX; else goto cd6lW;
       cd6lX: // global
           HpAlloc = 56;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6lW: // global
           _scVec::P64 = P64[R1 + 16];
           _scVed::P64 = P64[R1 + 24];
           _scVee::P64 = P64[R1 + 32];
           _scVef::P64 = P64[R1 + 40];
           _scVeh::P64 = P64[R1 + 48];
           I64[Hp - 48] = sat_scVew_info;
           P64[Hp - 32] = _scVec::P64;
           P64[Hp - 24] = _scVed::P64;
           P64[Hp - 16] = _scVee::P64;
           P64[Hp - 8] = _scVef::P64;
           P64[Hp] = _scVeh::P64;
           R3 = Hp - 48;
           R2 = lvl28_rcV5v_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVex_info" {
     sat_scVex_info:
         const sat_scVex_entry;
         const 5;
         const 4294967311;
         const ScWiZ_srt+144;
 },
 sat_scVey_entry() //  [R1]
         { []
         }
     {offset
       cd6lY: // global
           _scVey::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd6lZ; else goto cd6m0;
       cd6m0: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cd6m2; else goto cd6m1;
       cd6m2: // global
           HpAlloc = 56;
           goto cd6lZ;
       cd6lZ: // global
           R1 = _scVey::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6m1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVey::P64;
           _scVec::P64 = P64[_scVey::P64 + 16];
           _scVed::P64 = P64[_scVey::P64 + 24];
           _scVee::P64 = P64[_scVey::P64 + 32];
           _scVef::P64 = P64[_scVey::P64 + 40];
           _scVeh::P64 = P64[_scVey::P64 + 48];
           I64[Hp - 48] = sat_scVex_info;
           P64[Hp - 32] = _scVec::P64;
           P64[Hp - 24] = _scVed::P64;
           P64[Hp - 16] = _scVee::P64;
           P64[Hp - 8] = _scVef::P64;
           P64[Hp] = _scVeh::P64;
           R3 = Hp - 48;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVey_info" {
     sat_scVey_info:
         const sat_scVey_entry;
         const 5;
         const 4294967311;
         const ScWiZ_srt+144;
 },
 sat_scVez_entry() //  [R1]
         { []
         }
     {offset
       cd6m3: // global
           _scVez::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd6m4; else goto cd6m5;
       cd6m5: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cd6m7; else goto cd6m6;
       cd6m7: // global
           HpAlloc = 56;
           goto cd6m4;
       cd6m4: // global
           R1 = _scVez::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6m6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVez::P64;
           _scVeb::P64 = P64[_scVez::P64 + 16];
           _scVec::P64 = P64[_scVez::P64 + 24];
           _scVed::P64 = P64[_scVez::P64 + 32];
           _scVee::P64 = P64[_scVez::P64 + 40];
           _scVef::P64 = P64[_scVez::P64 + 48];
           _scVeh::P64 = P64[_scVez::P64 + 56];
           I64[Hp - 48] = sat_scVey_info;
           P64[Hp - 32] = _scVec::P64;
           P64[Hp - 24] = _scVed::P64;
           P64[Hp - 16] = _scVee::P64;
           P64[Hp - 8] = _scVef::P64;
           P64[Hp] = _scVeh::P64;
           R2 = Hp - 48;
           R1 = _scVeb::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVez_info" {
     sat_scVez_info:
         const sat_scVez_entry;
         const 6;
         const 4294967311;
         const ScWiZ_srt+144;
 },
 sat_scVeA_entry() //  [R1]
         { []
         }
     {offset
       cd6m8: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cd6mc; else goto cd6mb;
       cd6mc: // global
           HpAlloc = 64;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6mb: // global
           _scVeb::P64 = P64[R1 + 16];
           _scVec::P64 = P64[R1 + 24];
           _scVed::P64 = P64[R1 + 32];
           _scVee::P64 = P64[R1 + 40];
           _scVef::P64 = P64[R1 + 48];
           _scVeh::P64 = P64[R1 + 56];
           I64[Hp - 56] = sat_scVez_info;
           P64[Hp - 40] = _scVeb::P64;
           P64[Hp - 32] = _scVec::P64;
           P64[Hp - 24] = _scVed::P64;
           P64[Hp - 16] = _scVee::P64;
           P64[Hp - 8] = _scVef::P64;
           P64[Hp] = _scVeh::P64;
           R3 = Hp - 56;
           R2 = lvl27_rcV5u_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVeA_info" {
     sat_scVeA_info:
         const sat_scVeA_entry;
         const 6;
         const 4294967311;
         const ScWiZ_srt+144;
 },
 sat_scVeB_entry() //  [R1]
         { []
         }
     {offset
       cd6md: // global
           _scVeB::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd6me; else goto cd6mf;
       cd6mf: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cd6mh; else goto cd6mg;
       cd6mh: // global
           HpAlloc = 64;
           goto cd6me;
       cd6me: // global
           R1 = _scVeB::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6mg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVeB::P64;
           _scVeb::P64 = P64[_scVeB::P64 + 16];
           _scVec::P64 = P64[_scVeB::P64 + 24];
           _scVed::P64 = P64[_scVeB::P64 + 32];
           _scVee::P64 = P64[_scVeB::P64 + 40];
           _scVef::P64 = P64[_scVeB::P64 + 48];
           _scVeh::P64 = P64[_scVeB::P64 + 56];
           I64[Hp - 56] = sat_scVeA_info;
           P64[Hp - 40] = _scVeb::P64;
           P64[Hp - 32] = _scVec::P64;
           P64[Hp - 24] = _scVed::P64;
           P64[Hp - 16] = _scVee::P64;
           P64[Hp - 8] = _scVef::P64;
           P64[Hp] = _scVeh::P64;
           R3 = Hp - 56;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVeB_info" {
     sat_scVeB_info:
         const sat_scVeB_entry;
         const 6;
         const 4294967311;
         const ScWiZ_srt+144;
 },
 sat_scVeC_entry() //  [R1]
         { []
         }
     {offset
       cd6mi: // global
           _scVeC::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd6mj; else goto cd6mk;
       cd6mk: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cd6mm; else goto cd6ml;
       cd6mm: // global
           HpAlloc = 64;
           goto cd6mj;
       cd6mj: // global
           R1 = _scVeC::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6ml: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVeC::P64;
           _scVea::P64 = P64[_scVeC::P64 + 16];
           _scVeb::P64 = P64[_scVeC::P64 + 24];
           _scVec::P64 = P64[_scVeC::P64 + 32];
           _scVed::P64 = P64[_scVeC::P64 + 40];
           _scVee::P64 = P64[_scVeC::P64 + 48];
           _scVef::P64 = P64[_scVeC::P64 + 56];
           _scVeh::P64 = P64[_scVeC::P64 + 64];
           I64[Hp - 56] = sat_scVeB_info;
           P64[Hp - 40] = _scVeb::P64;
           P64[Hp - 32] = _scVec::P64;
           P64[Hp - 24] = _scVed::P64;
           P64[Hp - 16] = _scVee::P64;
           P64[Hp - 8] = _scVef::P64;
           P64[Hp] = _scVeh::P64;
           R2 = Hp - 56;
           R1 = _scVea::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVeC_info" {
     sat_scVeC_info:
         const sat_scVeC_entry;
         const 7;
         const 4294967311;
         const ScWiZ_srt+144;
 },
 sat_scVeD_entry() //  [R1]
         { []
         }
     {offset
       cd6mn: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cd6mr; else goto cd6mq;
       cd6mr: // global
           HpAlloc = 72;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6mq: // global
           _scVea::P64 = P64[R1 + 16];
           _scVeb::P64 = P64[R1 + 24];
           _scVec::P64 = P64[R1 + 32];
           _scVed::P64 = P64[R1 + 40];
           _scVee::P64 = P64[R1 + 48];
           _scVef::P64 = P64[R1 + 56];
           _scVeh::P64 = P64[R1 + 64];
           I64[Hp - 64] = sat_scVeC_info;
           P64[Hp - 48] = _scVea::P64;
           P64[Hp - 40] = _scVeb::P64;
           P64[Hp - 32] = _scVec::P64;
           P64[Hp - 24] = _scVed::P64;
           P64[Hp - 16] = _scVee::P64;
           P64[Hp - 8] = _scVef::P64;
           P64[Hp] = _scVeh::P64;
           R3 = Hp - 64;
           R2 = lvl26_rcV5t_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVeD_info" {
     sat_scVeD_info:
         const sat_scVeD_entry;
         const 7;
         const 4294967311;
         const ScWiZ_srt+144;
 },
 sat_scVeE_entry() //  [R1]
         { []
         }
     {offset
       cd6ms: // global
           _scVeE::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd6mt; else goto cd6mu;
       cd6mu: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cd6mw; else goto cd6mv;
       cd6mw: // global
           HpAlloc = 72;
           goto cd6mt;
       cd6mt: // global
           R1 = _scVeE::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6mv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVeE::P64;
           _scVea::P64 = P64[_scVeE::P64 + 16];
           _scVeb::P64 = P64[_scVeE::P64 + 24];
           _scVec::P64 = P64[_scVeE::P64 + 32];
           _scVed::P64 = P64[_scVeE::P64 + 40];
           _scVee::P64 = P64[_scVeE::P64 + 48];
           _scVef::P64 = P64[_scVeE::P64 + 56];
           _scVeh::P64 = P64[_scVeE::P64 + 64];
           I64[Hp - 64] = sat_scVeD_info;
           P64[Hp - 48] = _scVea::P64;
           P64[Hp - 40] = _scVeb::P64;
           P64[Hp - 32] = _scVec::P64;
           P64[Hp - 24] = _scVed::P64;
           P64[Hp - 16] = _scVee::P64;
           P64[Hp - 8] = _scVef::P64;
           P64[Hp] = _scVeh::P64;
           R3 = Hp - 64;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVeE_info" {
     sat_scVeE_info:
         const sat_scVeE_entry;
         const 7;
         const 4294967311;
         const ScWiZ_srt+144;
 },
 sat_scVeF_entry() //  [R1]
         { []
         }
     {offset
       cd6mx: // global
           _scVeF::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd6my; else goto cd6mz;
       cd6mz: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cd6mB; else goto cd6mA;
       cd6mB: // global
           HpAlloc = 72;
           goto cd6my;
       cd6my: // global
           R1 = _scVeF::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6mA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVeF::P64;
           _scVe9::P64 = P64[_scVeF::P64 + 16];
           _scVea::P64 = P64[_scVeF::P64 + 24];
           _scVeb::P64 = P64[_scVeF::P64 + 32];
           _scVec::P64 = P64[_scVeF::P64 + 40];
           _scVed::P64 = P64[_scVeF::P64 + 48];
           _scVee::P64 = P64[_scVeF::P64 + 56];
           _scVef::P64 = P64[_scVeF::P64 + 64];
           _scVeh::P64 = P64[_scVeF::P64 + 72];
           I64[Hp - 64] = sat_scVeE_info;
           P64[Hp - 48] = _scVea::P64;
           P64[Hp - 40] = _scVeb::P64;
           P64[Hp - 32] = _scVec::P64;
           P64[Hp - 24] = _scVed::P64;
           P64[Hp - 16] = _scVee::P64;
           P64[Hp - 8] = _scVef::P64;
           P64[Hp] = _scVeh::P64;
           R2 = Hp - 64;
           R1 = _scVe9::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVeF_info" {
     sat_scVeF_info:
         const sat_scVeF_entry;
         const 8;
         const 4294967311;
         const ScWiZ_srt+144;
 },
 sat_scVeG_entry() //  [R1]
         { []
         }
     {offset
       cd6mC: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cd6mG; else goto cd6mF;
       cd6mG: // global
           HpAlloc = 80;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6mF: // global
           _scVe9::P64 = P64[R1 + 16];
           _scVea::P64 = P64[R1 + 24];
           _scVeb::P64 = P64[R1 + 32];
           _scVec::P64 = P64[R1 + 40];
           _scVed::P64 = P64[R1 + 48];
           _scVee::P64 = P64[R1 + 56];
           _scVef::P64 = P64[R1 + 64];
           _scVeh::P64 = P64[R1 + 72];
           I64[Hp - 72] = sat_scVeF_info;
           P64[Hp - 56] = _scVe9::P64;
           P64[Hp - 48] = _scVea::P64;
           P64[Hp - 40] = _scVeb::P64;
           P64[Hp - 32] = _scVec::P64;
           P64[Hp - 24] = _scVed::P64;
           P64[Hp - 16] = _scVee::P64;
           P64[Hp - 8] = _scVef::P64;
           P64[Hp] = _scVeh::P64;
           R3 = Hp - 72;
           R2 = lvl25_rcV5s_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVeG_info" {
     sat_scVeG_info:
         const sat_scVeG_entry;
         const 8;
         const 4294967311;
         const ScWiZ_srt+144;
 },
 sat_scVeH_entry() //  [R1]
         { []
         }
     {offset
       cd6mH: // global
           _scVeH::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd6mI; else goto cd6mJ;
       cd6mJ: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cd6mL; else goto cd6mK;
       cd6mL: // global
           HpAlloc = 80;
           goto cd6mI;
       cd6mI: // global
           R1 = _scVeH::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6mK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVeH::P64;
           _scVe9::P64 = P64[_scVeH::P64 + 16];
           _scVea::P64 = P64[_scVeH::P64 + 24];
           _scVeb::P64 = P64[_scVeH::P64 + 32];
           _scVec::P64 = P64[_scVeH::P64 + 40];
           _scVed::P64 = P64[_scVeH::P64 + 48];
           _scVee::P64 = P64[_scVeH::P64 + 56];
           _scVef::P64 = P64[_scVeH::P64 + 64];
           _scVeh::P64 = P64[_scVeH::P64 + 72];
           I64[Hp - 72] = sat_scVeG_info;
           P64[Hp - 56] = _scVe9::P64;
           P64[Hp - 48] = _scVea::P64;
           P64[Hp - 40] = _scVeb::P64;
           P64[Hp - 32] = _scVec::P64;
           P64[Hp - 24] = _scVed::P64;
           P64[Hp - 16] = _scVee::P64;
           P64[Hp - 8] = _scVef::P64;
           P64[Hp] = _scVeh::P64;
           R3 = Hp - 72;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVeH_info" {
     sat_scVeH_info:
         const sat_scVeH_entry;
         const 8;
         const 4294967311;
         const ScWiZ_srt+144;
 },
 sat_scVeL_entry() //  [R1]
         { []
         }
     {offset
       cd6mM: // global
           if ((Sp + -88) < SpLim) (likely: False) goto cd6mQ; else goto cd6mR;
       cd6mQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6mR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 88] = block_cd6jx_info;
           _scVe9::P64 = P64[R1 + 24];
           _scVea::P64 = P64[R1 + 32];
           _scVeb::P64 = P64[R1 + 40];
           _scVec::P64 = P64[R1 + 48];
           _scVed::P64 = P64[R1 + 56];
           _scVee::P64 = P64[R1 + 64];
           _scVef::P64 = P64[R1 + 72];
           _scVeh::P64 = P64[R1 + 80];
           R1 = P64[R1 + 16];
           P64[Sp - 80] = _scVe9::P64;
           P64[Sp - 72] = _scVea::P64;
           P64[Sp - 64] = _scVeb::P64;
           P64[Sp - 56] = _scVec::P64;
           P64[Sp - 48] = _scVed::P64;
           P64[Sp - 40] = _scVee::P64;
           P64[Sp - 32] = _scVef::P64;
           P64[Sp - 24] = _scVeh::P64;
           Sp = Sp - 88;
           if (R1 & 7 != 0) goto ud6mY; else goto cd6jy;
       ud6mY: // global
           call _cd6jx(R1) args: 0, res: 0, upd: 0;
       cd6jy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVeL_info" {
     sat_scVeL_info:
         const sat_scVeL_entry;
         const 9;
         const 4294967311;
         const ScWiZ_srt+144;
 },
 _cd6jx() //  [R1]
         { []
         }
     {offset
       cd6jx: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cd6mU; else goto cd6mT;
       cd6mU: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cd6mT: // global
           _scVel::I64 = I64[R1 + 7];
           I64[Hp - 72] = sat_scVeH_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = P64[Sp + 16];
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = P64[Sp + 40];
           P64[Hp - 16] = P64[Sp + 48];
           P64[Hp - 8] = P64[Sp + 56];
           P64[Hp] = P64[Sp + 64];
           I64[Sp + 64] = block_cd6mN_info;
           R3 = Hp - 72;
           R2 = _scVel::I64;
           Sp = Sp + 64;
           call GHC.Show.$wshowWord_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cd6jx_info" {
     block_cd6jx_info:
         const _cd6jx;
         const 8;
         const 4294967326;
         const ScWiZ_srt+144;
 },
 _cd6mN() //  [R1, R2]
         { []
         }
     {offset
       cd6mN: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cd6mX; else goto cd6mW;
       cd6mX: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cd6mW: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd6mN_info" {
     block_cd6mN_info:
         const _cd6mN;
         const 0;
         const 30;
 },
 sat_scVeM_entry() //  [R1]
         { []
         }
     {offset
       cd6mZ: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cd6n3; else goto cd6n2;
       cd6n3: // global
           HpAlloc = 88;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6n2: // global
           _scVdU::P64 = P64[R1 + 16];
           _scVe9::P64 = P64[R1 + 24];
           _scVea::P64 = P64[R1 + 32];
           _scVeb::P64 = P64[R1 + 40];
           _scVec::P64 = P64[R1 + 48];
           _scVed::P64 = P64[R1 + 56];
           _scVee::P64 = P64[R1 + 64];
           _scVef::P64 = P64[R1 + 72];
           _scVeh::P64 = P64[R1 + 80];
           I64[Hp - 80] = sat_scVeL_info;
           P64[Hp - 64] = _scVdU::P64;
           P64[Hp - 56] = _scVe9::P64;
           P64[Hp - 48] = _scVea::P64;
           P64[Hp - 40] = _scVeb::P64;
           P64[Hp - 32] = _scVec::P64;
           P64[Hp - 24] = _scVed::P64;
           P64[Hp - 16] = _scVee::P64;
           P64[Hp - 8] = _scVef::P64;
           P64[Hp] = _scVeh::P64;
           R3 = Hp - 80;
           R2 = lvl24_rcV5r_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVeM_info" {
     sat_scVeM_info:
         const sat_scVeM_entry;
         const 9;
         const 4294967311;
         const ScWiZ_srt+144;
 },
 sat_scVeN_entry() //  [R1]
         { []
         }
     {offset
       cd6n4: // global
           _scVeN::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd6n5; else goto cd6n6;
       cd6n6: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cd6n8; else goto cd6n7;
       cd6n8: // global
           HpAlloc = 88;
           goto cd6n5;
       cd6n5: // global
           R1 = _scVeN::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6n7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVeN::P64;
           _scVdU::P64 = P64[_scVeN::P64 + 16];
           _scVe9::P64 = P64[_scVeN::P64 + 24];
           _scVea::P64 = P64[_scVeN::P64 + 32];
           _scVeb::P64 = P64[_scVeN::P64 + 40];
           _scVec::P64 = P64[_scVeN::P64 + 48];
           _scVed::P64 = P64[_scVeN::P64 + 56];
           _scVee::P64 = P64[_scVeN::P64 + 64];
           _scVef::P64 = P64[_scVeN::P64 + 72];
           _scVeh::P64 = P64[_scVeN::P64 + 80];
           I64[Hp - 80] = sat_scVeM_info;
           P64[Hp - 64] = _scVdU::P64;
           P64[Hp - 56] = _scVe9::P64;
           P64[Hp - 48] = _scVea::P64;
           P64[Hp - 40] = _scVeb::P64;
           P64[Hp - 32] = _scVec::P64;
           P64[Hp - 24] = _scVed::P64;
           P64[Hp - 16] = _scVee::P64;
           P64[Hp - 8] = _scVef::P64;
           P64[Hp] = _scVeh::P64;
           R3 = Hp - 80;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVeN_info" {
     sat_scVeN_info:
         const sat_scVeN_entry;
         const 9;
         const 4294967311;
         const ScWiZ_srt+144;
 },
 sat_scVeR_entry() //  [R1]
         { []
         }
     {offset
       cd6n9: // global
           if ((Sp + -96) < SpLim) (likely: False) goto cd6nd; else goto cd6ne;
       cd6nd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6ne: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 96] = block_cd6jg_info;
           _scVdU::P64 = P64[R1 + 24];
           _scVe9::P64 = P64[R1 + 32];
           _scVea::P64 = P64[R1 + 40];
           _scVeb::P64 = P64[R1 + 48];
           _scVec::P64 = P64[R1 + 56];
           _scVed::P64 = P64[R1 + 64];
           _scVee::P64 = P64[R1 + 72];
           _scVef::P64 = P64[R1 + 80];
           _scVeh::P64 = P64[R1 + 88];
           R1 = P64[R1 + 16];
           P64[Sp - 88] = _scVdU::P64;
           P64[Sp - 80] = _scVe9::P64;
           P64[Sp - 72] = _scVea::P64;
           P64[Sp - 64] = _scVeb::P64;
           P64[Sp - 56] = _scVec::P64;
           P64[Sp - 48] = _scVed::P64;
           P64[Sp - 40] = _scVee::P64;
           P64[Sp - 32] = _scVef::P64;
           P64[Sp - 24] = _scVeh::P64;
           Sp = Sp - 96;
           if (R1 & 7 != 0) goto ud6nl; else goto cd6jh;
       ud6nl: // global
           call _cd6jg(R1) args: 0, res: 0, upd: 0;
       cd6jh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVeR_info" {
     sat_scVeR_info:
         const sat_scVeR_entry;
         const 10;
         const 4294967311;
         const ScWiZ_srt+144;
 },
 _cd6jg() //  [R1]
         { []
         }
     {offset
       cd6jg: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cd6nh; else goto cd6ng;
       cd6nh: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cd6ng: // global
           _scVej::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_scVeN_info;
           P64[Hp - 64] = P64[Sp + 8];
           P64[Hp - 56] = P64[Sp + 16];
           P64[Hp - 48] = P64[Sp + 24];
           P64[Hp - 40] = P64[Sp + 32];
           P64[Hp - 32] = P64[Sp + 40];
           P64[Hp - 24] = P64[Sp + 48];
           P64[Hp - 16] = P64[Sp + 56];
           P64[Hp - 8] = P64[Sp + 64];
           P64[Hp] = P64[Sp + 72];
           I64[Sp + 72] = block_cd6na_info;
           R3 = Hp - 80;
           R2 = _scVej::I64;
           Sp = Sp + 72;
           call GHC.Show.$wshowWord_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cd6jg_info" {
     block_cd6jg_info:
         const _cd6jg;
         const 9;
         const 4294967326;
         const ScWiZ_srt+144;
 },
 _cd6na() //  [R1, R2]
         { []
         }
     {offset
       cd6na: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cd6nk; else goto cd6nj;
       cd6nk: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cd6nj: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd6na_info" {
     block_cd6na_info:
         const _cd6na;
         const 0;
         const 30;
 },
 sat_scVeS_entry() //  [R1]
         { []
         }
     {offset
       cd6nm: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cd6nq; else goto cd6np;
       cd6nq: // global
           HpAlloc = 96;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6np: // global
           _scVdT::P64 = P64[R1 + 16];
           _scVdU::P64 = P64[R1 + 24];
           _scVe9::P64 = P64[R1 + 32];
           _scVea::P64 = P64[R1 + 40];
           _scVeb::P64 = P64[R1 + 48];
           _scVec::P64 = P64[R1 + 56];
           _scVed::P64 = P64[R1 + 64];
           _scVee::P64 = P64[R1 + 72];
           _scVef::P64 = P64[R1 + 80];
           _scVeh::P64 = P64[R1 + 88];
           I64[Hp - 88] = sat_scVeR_info;
           P64[Hp - 72] = _scVdT::P64;
           P64[Hp - 64] = _scVdU::P64;
           P64[Hp - 56] = _scVe9::P64;
           P64[Hp - 48] = _scVea::P64;
           P64[Hp - 40] = _scVeb::P64;
           P64[Hp - 32] = _scVec::P64;
           P64[Hp - 24] = _scVed::P64;
           P64[Hp - 16] = _scVee::P64;
           P64[Hp - 8] = _scVef::P64;
           P64[Hp] = _scVeh::P64;
           R3 = Hp - 88;
           R2 = lvl23_rcV5q_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVeS_info" {
     sat_scVeS_info:
         const sat_scVeS_entry;
         const 10;
         const 4294967311;
         const ScWiZ_srt+144;
 },
 g1_scVeg_entry() //  [R1, R2]
         { []
         }
     {offset
       cd6nr: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cd6nv; else goto cd6nu;
       cd6nv: // global
           HpAlloc = 96;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd6nu: // global
           _scVdT::P64 = P64[R1 + 7];
           _scVdU::P64 = P64[R1 + 15];
           _scVe9::P64 = P64[R1 + 23];
           _scVea::P64 = P64[R1 + 31];
           _scVeb::P64 = P64[R1 + 39];
           _scVec::P64 = P64[R1 + 47];
           _scVed::P64 = P64[R1 + 55];
           _scVee::P64 = P64[R1 + 63];
           _scVef::P64 = P64[R1 + 71];
           I64[Hp - 88] = sat_scVeS_info;
           P64[Hp - 72] = _scVdT::P64;
           P64[Hp - 64] = _scVdU::P64;
           P64[Hp - 56] = _scVe9::P64;
           P64[Hp - 48] = _scVea::P64;
           P64[Hp - 40] = _scVeb::P64;
           P64[Hp - 32] = _scVec::P64;
           P64[Hp - 24] = _scVed::P64;
           P64[Hp - 16] = _scVee::P64;
           P64[Hp - 8] = _scVef::P64;
           P64[Hp] = R2;
           R3 = Hp - 88;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . g1_scVeg_info" {
     g1_scVeg_info:
         const g1_scVeg_entry;
         const 9;
         const 4294967304;
         const 4294967301;
         const ScWiZ_srt+144;
 },
 sat_scVeZ_entry() //  [R1]
         { []
         }
     {offset
       cd6oK: // global
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           call g1_scVeg_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVeZ_info" {
     sat_scVeZ_info:
         const sat_scVeZ_entry;
         const 2;
         const 4294967314;
         const ScWiZ_srt+144;
 },
 sat_scVf0_entry() //  [R1]
         { []
         }
     {offset
       cd6oT: // global
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           call g1_scVeg_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVf0_info" {
     sat_scVf0_info:
         const sat_scVf0_entry;
         const 2;
         const 4294967314;
         const ScWiZ_srt+144;
 },
 sat_scVf1_entry() //  [R1]
         { []
         }
     {offset
       cd6p0: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cd6p1; else goto cd6p2;
       cd6p1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6p2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cd6oB_info;
           _scVeg::P64 = P64[R1 + 24];
           _scVeU::P64 = P64[R1 + 32];
           R1 = P64[R1 + 16];
           P64[Sp - 32] = _scVeg::P64;
           P64[Sp - 24] = _scVeU::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ud6p9; else goto cd6oC;
       ud6p9: // global
           call _cd6oB(R1) args: 0, res: 0, upd: 0;
       cd6oC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVf1_info" {
     sat_scVf1_info:
         const sat_scVf1_entry;
         const 3;
         const 30064771087;
         const ScWiZ_srt+128;
 },
 _cd6oB() //  [R1]
         { []
         }
     {offset
       cd6oB: // global
           _scVeg::P64 = P64[Sp + 8];
           _scVeU::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto cd6oX; else goto cd6oY;
       cd6oX: // global
           Hp = Hp + 32;
           _scVeY::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cd6p8; else goto cd6p4;
       cd6p4: // global
           I64[Hp - 24] = sat_scVeZ_info;
           P64[Hp - 8] = _scVeg::P64;
           P64[Hp] = _scVeU::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cd6oY: // global
           Hp = Hp + 32;
           _scVeY::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cd6p8; else goto cd6p7;
       cd6p8: // global
           HpAlloc = 32;
           R1 = _scVeY::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cd6p7: // global
           I64[Hp - 24] = sat_scVf0_info;
           P64[Hp - 8] = _scVeg::P64;
           P64[Hp] = _scVeU::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd6oB_info" {
     block_cd6oB_info:
         const _cd6oB;
         const 2;
         const 30064771102;
         const ScWiZ_srt+128;
 },
 sat_scVf2_entry() //  [R1]
         { []
         }
     {offset
       cd6pa: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cd6pe; else goto cd6pd;
       cd6pe: // global
           HpAlloc = 40;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6pd: // global
           _scVdS::P64 = P64[R1 + 16];
           _scVeg::P64 = P64[R1 + 24];
           _scVeU::P64 = P64[R1 + 32];
           I64[Hp - 32] = sat_scVf1_info;
           P64[Hp - 16] = _scVdS::P64;
           P64[Hp - 8] = _scVeg::P64;
           P64[Hp] = _scVeU::P64;
           R3 = Hp - 32;
           R2 = lvl22_rcV5p_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVf2_info" {
     sat_scVf2_info:
         const sat_scVf2_entry;
         const 3;
         const 30064771087;
         const ScWiZ_srt+128;
 },
 sat_scVf3_entry() //  [R1]
         { []
         }
     {offset
       cd6pf: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cd6pj; else goto cd6pi;
       cd6pj: // global
           HpAlloc = 40;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6pi: // global
           _scVdS::P64 = P64[R1 + 16];
           _scVeg::P64 = P64[R1 + 24];
           _scVeU::P64 = P64[R1 + 32];
           I64[Hp - 32] = sat_scVf2_info;
           P64[Hp - 16] = _scVdS::P64;
           P64[Hp - 8] = _scVeg::P64;
           P64[Hp] = _scVeU::P64;
           R3 = Hp - 32;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVf3_info" {
     sat_scVf3_info:
         const sat_scVf3_entry;
         const 3;
         const 30064771087;
         const ScWiZ_srt+128;
 },
 sat_scVf5_entry() //  [R1]
         { []
         }
     {offset
       cd6pH: // global
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           call g1_scVeg_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVf5_info" {
     sat_scVf5_info:
         const sat_scVf5_entry;
         const 2;
         const 4294967314;
         const ScWiZ_srt+144;
 },
 sat_scVf6_entry() //  [R1]
         { []
         }
     {offset
       cd6pQ: // global
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           call g1_scVeg_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVf6_info" {
     sat_scVf6_info:
         const sat_scVf6_entry;
         const 2;
         const 4294967314;
         const ScWiZ_srt+144;
 },
 sat_scVf7_entry() //  [R1]
         { []
         }
     {offset
       cd6pX: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cd6pY; else goto cd6pZ;
       cd6pY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6pZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cd6py_info;
           _scVeg::P64 = P64[R1 + 24];
           _scVeU::P64 = P64[R1 + 32];
           R1 = P64[R1 + 16];
           P64[Sp - 32] = _scVeg::P64;
           P64[Sp - 24] = _scVeU::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ud6q6; else goto cd6pz;
       ud6q6: // global
           call _cd6py(R1) args: 0, res: 0, upd: 0;
       cd6pz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVf7_info" {
     sat_scVf7_info:
         const sat_scVf7_entry;
         const 3;
         const 30064771087;
         const ScWiZ_srt+128;
 },
 _cd6py() //  [R1]
         { []
         }
     {offset
       cd6py: // global
           _scVeg::P64 = P64[Sp + 8];
           _scVeU::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto cd6pU; else goto cd6pV;
       cd6pU: // global
           Hp = Hp + 32;
           _scVf4::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cd6q5; else goto cd6q1;
       cd6q1: // global
           I64[Hp - 24] = sat_scVf5_info;
           P64[Hp - 8] = _scVeg::P64;
           P64[Hp] = _scVeU::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cd6pV: // global
           Hp = Hp + 32;
           _scVf4::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cd6q5; else goto cd6q4;
       cd6q5: // global
           HpAlloc = 32;
           R1 = _scVf4::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cd6q4: // global
           I64[Hp - 24] = sat_scVf6_info;
           P64[Hp - 8] = _scVeg::P64;
           P64[Hp] = _scVeU::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd6py_info" {
     block_cd6py_info:
         const _cd6py;
         const 2;
         const 30064771102;
         const ScWiZ_srt+128;
 },
 sat_scVf8_entry() //  [R1]
         { []
         }
     {offset
       cd6q7: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cd6qb; else goto cd6qa;
       cd6qb: // global
           HpAlloc = 40;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6qa: // global
           _scVdS::P64 = P64[R1 + 16];
           _scVeg::P64 = P64[R1 + 24];
           _scVeU::P64 = P64[R1 + 32];
           I64[Hp - 32] = sat_scVf7_info;
           P64[Hp - 16] = _scVdS::P64;
           P64[Hp - 8] = _scVeg::P64;
           P64[Hp] = _scVeU::P64;
           R3 = Hp - 32;
           R2 = lvl22_rcV5p_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVf8_info" {
     sat_scVf8_info:
         const sat_scVf8_entry;
         const 3;
         const 30064771087;
         const ScWiZ_srt+128;
 },
 sat_scVf9_entry() //  [R1]
         { []
         }
     {offset
       cd6qc: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cd6qg; else goto cd6qf;
       cd6qg: // global
           HpAlloc = 40;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6qf: // global
           _scVdS::P64 = P64[R1 + 16];
           _scVeg::P64 = P64[R1 + 24];
           _scVeU::P64 = P64[R1 + 32];
           I64[Hp - 32] = sat_scVf8_info;
           P64[Hp - 16] = _scVdS::P64;
           P64[Hp - 8] = _scVeg::P64;
           P64[Hp] = _scVeU::P64;
           R3 = Hp - 32;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVf9_info" {
     sat_scVf9_info:
         const sat_scVf9_entry;
         const 3;
         const 30064771087;
         const ScWiZ_srt+128;
 },
 sat_scVfa_entry() //  [R1]
         { []
         }
     {offset
       cd6ql: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cd6qm; else goto cd6qn;
       cd6qm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6qn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_cd6ok_info;
           _scVdS::P64 = P64[R1 + 24];
           _scVeg::P64 = P64[R1 + 32];
           _scVeU::P64 = P64[R1 + 40];
           R1 = P64[R1 + 16];
           P64[Sp - 40] = _scVdS::P64;
           P64[Sp - 32] = _scVeg::P64;
           P64[Sp - 24] = _scVeU::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto ud6qu; else goto cd6ol;
       ud6qu: // global
           call _cd6ok(R1) args: 0, res: 0, upd: 0;
       cd6ol: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVfa_info" {
     sat_scVfa_info:
         const sat_scVfa_entry;
         const 4;
         const 30064771087;
         const ScWiZ_srt+128;
 },
 _cd6ok() //  [R1]
         { []
         }
     {offset
       cd6ok: // global
           _scVdS::P64 = P64[Sp + 8];
           _scVeg::P64 = P64[Sp + 16];
           _scVeU::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto cd6qi; else goto cd6qj;
       cd6qi: // global
           Hp = Hp + 40;
           _scVeX::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cd6qt; else goto cd6qp;
       cd6qp: // global
           I64[Hp - 32] = sat_scVf3_info;
           P64[Hp - 16] = _scVdS::P64;
           P64[Hp - 8] = _scVeg::P64;
           P64[Hp] = _scVeU::P64;
           R3 = Hp - 32;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 32;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cd6qj: // global
           Hp = Hp + 40;
           _scVeX::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cd6qt; else goto cd6qs;
       cd6qt: // global
           HpAlloc = 40;
           R1 = _scVeX::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cd6qs: // global
           I64[Hp - 32] = sat_scVf9_info;
           P64[Hp - 16] = _scVdS::P64;
           P64[Hp - 8] = _scVeg::P64;
           P64[Hp] = _scVeU::P64;
           R3 = Hp - 32;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 32;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd6ok_info" {
     block_cd6ok_info:
         const _cd6ok;
         const 3;
         const 30064771102;
         const ScWiZ_srt+128;
 },
 sat_scVfb_entry() //  [R1]
         { []
         }
     {offset
       cd6qv: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cd6qz; else goto cd6qy;
       cd6qz: // global
           HpAlloc = 48;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6qy: // global
           _scVdR::P64 = P64[R1 + 16];
           _scVdS::P64 = P64[R1 + 24];
           _scVeg::P64 = P64[R1 + 32];
           _scVeU::P64 = P64[R1 + 40];
           I64[Hp - 40] = sat_scVfa_info;
           P64[Hp - 24] = _scVdR::P64;
           P64[Hp - 16] = _scVdS::P64;
           P64[Hp - 8] = _scVeg::P64;
           P64[Hp] = _scVeU::P64;
           R3 = Hp - 40;
           R2 = lvl35_rcV5C_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVfb_info" {
     sat_scVfb_info:
         const sat_scVfb_entry;
         const 4;
         const 30064771087;
         const ScWiZ_srt+128;
 },
 sat_scVfc_entry() //  [R1]
         { []
         }
     {offset
       cd6qA: // global
           _scVfc::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd6qB; else goto cd6qC;
       cd6qC: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cd6qE; else goto cd6qD;
       cd6qE: // global
           HpAlloc = 48;
           goto cd6qB;
       cd6qB: // global
           R1 = _scVfc::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6qD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVfc::P64;
           _scVdR::P64 = P64[_scVfc::P64 + 16];
           _scVdS::P64 = P64[_scVfc::P64 + 24];
           _scVeg::P64 = P64[_scVfc::P64 + 32];
           _scVeU::P64 = P64[_scVfc::P64 + 40];
           I64[Hp - 40] = sat_scVfb_info;
           P64[Hp - 24] = _scVdR::P64;
           P64[Hp - 16] = _scVdS::P64;
           P64[Hp - 8] = _scVeg::P64;
           P64[Hp] = _scVeU::P64;
           R3 = Hp - 40;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVfc_info" {
     sat_scVfc_info:
         const sat_scVfc_entry;
         const 4;
         const 30064771087;
         const ScWiZ_srt+128;
 },
 sat_scVfg_entry() //  [R1]
         { []
         }
     {offset
       cd6qF: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cd6qJ; else goto cd6qK;
       cd6qJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6qK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 56] = block_cd6o3_info;
           _scVdR::P64 = P64[R1 + 24];
           _scVdS::P64 = P64[R1 + 32];
           _scVeg::P64 = P64[R1 + 40];
           _scVeU::P64 = P64[R1 + 48];
           R1 = P64[R1 + 16];
           P64[Sp - 48] = _scVdR::P64;
           P64[Sp - 40] = _scVdS::P64;
           P64[Sp - 32] = _scVeg::P64;
           P64[Sp - 24] = _scVeU::P64;
           Sp = Sp - 56;
           if (R1 & 7 != 0) goto ud6qR; else goto cd6o4;
       ud6qR: // global
           call _cd6o3(R1) args: 0, res: 0, upd: 0;
       cd6o4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVfg_info" {
     sat_scVfg_info:
         const sat_scVfg_entry;
         const 5;
         const 30064771087;
         const ScWiZ_srt+128;
 },
 _cd6o3() //  [R1]
         { []
         }
     {offset
       cd6o3: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cd6qN; else goto cd6qM;
       cd6qN: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cd6qM: // global
           _scVeW::I64 = I64[R1 + 7];
           I64[Hp - 40] = sat_scVfc_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = P64[Sp + 32];
           I64[Sp + 32] = block_cd6qG_info;
           R3 = Hp - 40;
           R2 = _scVeW::I64;
           Sp = Sp + 32;
           call GHC.Show.$wshowWord_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cd6o3_info" {
     block_cd6o3_info:
         const _cd6o3;
         const 4;
         const 30064771102;
         const ScWiZ_srt+128;
 },
 _cd6qG() //  [R1, R2]
         { []
         }
     {offset
       cd6qG: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cd6qQ; else goto cd6qP;
       cd6qQ: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cd6qP: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd6qG_info" {
     block_cd6qG_info:
         const _cd6qG;
         const 0;
         const 30;
 },
 sat_scVfh_entry() //  [R1]
         { []
         }
     {offset
       cd6qS: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cd6qW; else goto cd6qV;
       cd6qW: // global
           HpAlloc = 56;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6qV: // global
           _scVdQ::P64 = P64[R1 + 16];
           _scVdR::P64 = P64[R1 + 24];
           _scVdS::P64 = P64[R1 + 32];
           _scVeg::P64 = P64[R1 + 40];
           _scVeU::P64 = P64[R1 + 48];
           I64[Hp - 48] = sat_scVfg_info;
           P64[Hp - 32] = _scVdQ::P64;
           P64[Hp - 24] = _scVdR::P64;
           P64[Hp - 16] = _scVdS::P64;
           P64[Hp - 8] = _scVeg::P64;
           P64[Hp] = _scVeU::P64;
           R3 = Hp - 48;
           R2 = lvl34_rcV5B_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVfh_info" {
     sat_scVfh_info:
         const sat_scVfh_entry;
         const 5;
         const 30064771087;
         const ScWiZ_srt+128;
 },
 sat_scVfi_entry() //  [R1]
         { []
         }
     {offset
       cd6qX: // global
           _scVfi::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd6qY; else goto cd6qZ;
       cd6qZ: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cd6r1; else goto cd6r0;
       cd6r1: // global
           HpAlloc = 56;
           goto cd6qY;
       cd6qY: // global
           R1 = _scVfi::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6r0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVfi::P64;
           _scVdQ::P64 = P64[_scVfi::P64 + 16];
           _scVdR::P64 = P64[_scVfi::P64 + 24];
           _scVdS::P64 = P64[_scVfi::P64 + 32];
           _scVeg::P64 = P64[_scVfi::P64 + 40];
           _scVeU::P64 = P64[_scVfi::P64 + 48];
           I64[Hp - 48] = sat_scVfh_info;
           P64[Hp - 32] = _scVdQ::P64;
           P64[Hp - 24] = _scVdR::P64;
           P64[Hp - 16] = _scVdS::P64;
           P64[Hp - 8] = _scVeg::P64;
           P64[Hp] = _scVeU::P64;
           R3 = Hp - 48;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVfi_info" {
     sat_scVfi_info:
         const sat_scVfi_entry;
         const 5;
         const 30064771087;
         const ScWiZ_srt+128;
 },
 section ""relreadonly" . ud6sy_srtd" {
     ud6sy_srtd:
         const ScWiZ_srt+128;
         const 33;
         const 4294967303;
 },
 sat_scVfm_entry() //  [R1]
         { []
         }
     {offset
       cd6r5: // global
           _scVfm::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cd6r6; else goto cd6r7;
       cd6r7: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cd6r9; else goto cd6r8;
       cd6r9: // global
           HpAlloc = 56;
           goto cd6r6;
       cd6r6: // global
           R1 = _scVfm::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6r8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVfm::P64;
           _scVdQ::P64 = P64[_scVfm::P64 + 16];
           _scVdR::P64 = P64[_scVfm::P64 + 24];
           _scVdS::P64 = P64[_scVfm::P64 + 32];
           _scVe4::P64 = P64[_scVfm::P64 + 40];
           _scVeg::P64 = P64[_scVfm::P64 + 48];
           _scVeU::P64 = P64[_scVfm::P64 + 56];
           I64[Hp - 48] = sat_scVfi_info;
           P64[Hp - 32] = _scVdQ::P64;
           P64[Hp - 24] = _scVdR::P64;
           P64[Hp - 16] = _scVdS::P64;
           P64[Hp - 8] = _scVeg::P64;
           P64[Hp] = _scVeU::P64;
           I64[Sp - 24] = block_cd6r2_info;
           R4 = Hp - 48;
           R3 = _scVe4::P64;
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVfm_info" {
     sat_scVfm_info:
         const sat_scVfm_entry;
         const 6;
         const 18446744069414584335;
         const ud6sy_srtd;
 },
 _cd6r2() //  [R1, R2]
         { []
         }
     {offset
       cd6r2: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cd6rc; else goto cd6rb;
       cd6rc: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cd6rb: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd6r2_info" {
     block_cd6r2_info:
         const _cd6r2;
         const 0;
         const 30;
 },
 section ""relreadonly" . ud6sz_srtd" {
     ud6sz_srtd:
         const ScWiZ_srt+128;
         const 33;
         const 4294967303;
 },
 sat_scVfn_entry() //  [R1]
         { []
         }
     {offset
       cd6rd: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cd6rh; else goto cd6rg;
       cd6rh: // global
           HpAlloc = 64;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6rg: // global
           _scVdQ::P64 = P64[R1 + 16];
           _scVdR::P64 = P64[R1 + 24];
           _scVdS::P64 = P64[R1 + 32];
           _scVe4::P64 = P64[R1 + 40];
           _scVeg::P64 = P64[R1 + 48];
           _scVeU::P64 = P64[R1 + 56];
           I64[Hp - 56] = sat_scVfm_info;
           P64[Hp - 40] = _scVdQ::P64;
           P64[Hp - 32] = _scVdR::P64;
           P64[Hp - 24] = _scVdS::P64;
           P64[Hp - 16] = _scVe4::P64;
           P64[Hp - 8] = _scVeg::P64;
           P64[Hp] = _scVeU::P64;
           R3 = Hp - 56;
           R2 = lvl33_rcV5A_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVfn_info" {
     sat_scVfn_info:
         const sat_scVfn_entry;
         const 6;
         const 18446744069414584335;
         const ud6sz_srtd;
 },
 section ""relreadonly" . ud6sA_srtd" {
     ud6sA_srtd:
         const ScWiZ_srt+128;
         const 33;
         const 4294967303;
 },
 sat_scVfo_entry() //  [R1]
         { []
         }
     {offset
       cd6ri: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cd6rm; else goto cd6rl;
       cd6rm: // global
           HpAlloc = 64;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6rl: // global
           _scVdQ::P64 = P64[R1 + 16];
           _scVdR::P64 = P64[R1 + 24];
           _scVdS::P64 = P64[R1 + 32];
           _scVe4::P64 = P64[R1 + 40];
           _scVeg::P64 = P64[R1 + 48];
           _scVeU::P64 = P64[R1 + 56];
           I64[Hp - 56] = sat_scVfn_info;
           P64[Hp - 40] = _scVdQ::P64;
           P64[Hp - 32] = _scVdR::P64;
           P64[Hp - 24] = _scVdS::P64;
           P64[Hp - 16] = _scVe4::P64;
           P64[Hp - 8] = _scVeg::P64;
           P64[Hp] = _scVeU::P64;
           R3 = Hp - 56;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVfo_info" {
     sat_scVfo_info:
         const sat_scVfo_entry;
         const 6;
         const 18446744069414584335;
         const ud6sA_srtd;
 },
 section ""relreadonly" . ud6sB_srtd" {
     ud6sB_srtd:
         const ScWiZ_srt+128;
         const 33;
         const 4299161607;
 },
 sat_scVfp_entry() //  [R1]
         { []
         }
     {offset
       cd6rn: // global
           _scVfp::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd6ro; else goto cd6rp;
       cd6rp: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cd6rr; else goto cd6rq;
       cd6rr: // global
           HpAlloc = 64;
           goto cd6ro;
       cd6ro: // global
           R1 = _scVfp::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6rq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVfp::P64;
           _scVdO::P64 = P64[_scVfp::P64 + 16];
           _scVdQ::P64 = P64[_scVfp::P64 + 24];
           _scVdR::P64 = P64[_scVfp::P64 + 32];
           _scVdS::P64 = P64[_scVfp::P64 + 40];
           _scVe4::P64 = P64[_scVfp::P64 + 48];
           _scVeg::P64 = P64[_scVfp::P64 + 56];
           _scVeU::P64 = P64[_scVfp::P64 + 64];
           I64[Hp - 56] = sat_scVfo_info;
           P64[Hp - 40] = _scVdQ::P64;
           P64[Hp - 32] = _scVdR::P64;
           P64[Hp - 24] = _scVdS::P64;
           P64[Hp - 16] = _scVe4::P64;
           P64[Hp - 8] = _scVeg::P64;
           P64[Hp] = _scVeU::P64;
           R3 = Hp - 56;
           R2 = _scVdO::P64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$cshowsPrec3_entry(R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVfp_info" {
     sat_scVfp_info:
         const sat_scVfp_entry;
         const 7;
         const 18446744069414584335;
         const ud6sB_srtd;
 },
 section ""relreadonly" . ud6sC_srtd" {
     ud6sC_srtd:
         const ScWiZ_srt+128;
         const 33;
         const 4299161607;
 },
 g2_scVeT_entry() //  [R1, R2]
         { []
         }
     {offset
       cd6rs: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cd6rw; else goto cd6rv;
       cd6rw: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd6rv: // global
           _scVdO::P64 = P64[R1 + 7];
           _scVdQ::P64 = P64[R1 + 15];
           _scVdR::P64 = P64[R1 + 23];
           _scVdS::P64 = P64[R1 + 31];
           _scVe4::P64 = P64[R1 + 39];
           _scVeg::P64 = P64[R1 + 47];
           I64[Hp - 64] = sat_scVfp_info;
           P64[Hp - 48] = _scVdO::P64;
           P64[Hp - 40] = _scVdQ::P64;
           P64[Hp - 32] = _scVdR::P64;
           P64[Hp - 24] = _scVdS::P64;
           P64[Hp - 16] = _scVe4::P64;
           P64[Hp - 8] = _scVeg::P64;
           P64[Hp] = R2;
           R3 = Hp - 64;
           R2 = lvl32_rcV5z_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . g2_scVeT_info" {
     g2_scVeT_info:
         const g2_scVeT_entry;
         const 6;
         const 18446744069414584328;
         const 4294967301;
         const ud6sC_srtd;
 },
 section ""relreadonly" . ud6sD_srtd" {
     ud6sD_srtd:
         const ScWiZ_srt+128;
         const 33;
         const 4299161607;
 },
 sat_scVfs_entry() //  [R1]
         { []
         }
     {offset
       cd6rJ: // global
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           call g2_scVeT_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVfs_info" {
     sat_scVfs_info:
         const sat_scVfs_entry;
         const 2;
         const 18446744069414584338;
         const ud6sD_srtd;
 },
 section ""relreadonly" . ud6sE_srtd" {
     ud6sE_srtd:
         const ScWiZ_srt+128;
         const 34;
         const 12889096199;
 },
 sat_scVft_entry() //  [R1, R2]
         { []
         }
     {offset
       cd6rM: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cd6rQ; else goto cd6rP;
       cd6rQ: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd6rP: // global
           _scVeT::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_scVfs_info;
           P64[Hp - 8] = _scVeT::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = f3_rcV5o_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVft_info" {
     sat_scVft_info:
         const sat_scVft_entry;
         const 1;
         const 18446744069414584329;
         const 4294967301;
         const ud6sE_srtd;
 },
 section ""relreadonly" . ud6sF_srtd" {
     ud6sF_srtd:
         const ScWiZ_srt+128;
         const 33;
         const 4299161607;
 },
 sat_scVfw_entry() //  [R1]
         { []
         }
     {offset
       cd6s6: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cd6sa; else goto cd6s9;
       cd6sa: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6s9: // global
           _scVeT::P64 = P64[R1 + 16];
           _scVfu::P64 = P64[R1 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _scVfu::P64;
           R2 = Hp - 14;
           R1 = _scVeT::P64;
           call g2_scVeT_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVfw_info" {
     sat_scVfw_info:
         const sat_scVfw_entry;
         const 2;
         const 18446744069414584338;
         const ud6sF_srtd;
 },
 section ""relreadonly" . ud6sG_srtd" {
     ud6sG_srtd:
         const ScWiZ_srt+128;
         const 34;
         const 12889096199;
 },
 sat_scVfx_entry() //  [R1]
         { []
         }
     {offset
       cd6sb: // global
           _scVfx::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd6sc; else goto cd6sd;
       cd6sd: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cd6sf; else goto cd6se;
       cd6sf: // global
           HpAlloc = 32;
           goto cd6sc;
       cd6sc: // global
           R1 = _scVfx::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6se: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVfx::P64;
           _scVeT::P64 = P64[_scVfx::P64 + 16];
           _scVfu::P64 = P64[_scVfx::P64 + 24];
           I64[Hp - 24] = sat_scVfw_info;
           P64[Hp - 8] = _scVeT::P64;
           P64[Hp] = _scVfu::P64;
           R3 = Hp - 24;
           R2 = f3_rcV5o_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVfx_info" {
     sat_scVfx_info:
         const sat_scVfx_entry;
         const 2;
         const 18446744069414584338;
         const ud6sG_srtd;
 },
 section ""relreadonly" . ud6sH_srtd" {
     ud6sH_srtd:
         const ScWiZ_srt+128;
         const 34;
         const 12889096199;
 },
 sat_scVfy_entry() //  [R1, R2]
         { []
         }
     {offset
       cd6sh: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cd6sl; else goto cd6sk;
       cd6sl: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd6sk: // global
           _scVeT::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_scVfx_info;
           P64[Hp - 32] = _scVeT::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVfy_info" {
     sat_scVfy_info:
         const sat_scVfy_entry;
         const 1;
         const 18446744069414584329;
         const 4294967301;
         const ud6sH_srtd;
 },
 section ""relreadonly" . ud6sI_srtd" {
     ud6sI_srtd:
         const ScWiZ_srt+128;
         const 35;
         const 30068965479;
 },
 GHC.RTS.Flags.$fShowProfFlags_$cshowsPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       cd6sm: // global
           if ((Sp + -120) < SpLim) (likely: False) goto cd6sn; else goto cd6so;
       cd6sn: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fShowProfFlags_$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cd6so: // global
           I64[Sp - 16] = block_cd6hK_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ud6sx; else goto cd6hL;
       ud6sx: // global
           call _cd6hK(R1) args: 0, res: 0, upd: 0;
       cd6hL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowProfFlags_$cshowsPrec_info" {
     GHC.RTS.Flags.$fShowProfFlags_$cshowsPrec_info:
         const GHC.RTS.Flags.$fShowProfFlags_$cshowsPrec_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const ud6sI_srtd;
 },
 section ""relreadonly" . ud6sJ_srtd" {
     ud6sJ_srtd:
         const ScWiZ_srt+128;
         const 34;
         const 12889096295;
 },
 _cd6hK() //  [R1]
         { []
         }
     {offset
       cd6hK: // global
           I64[Sp - 104] = block_cd6hP_info;
           _scVdO::P64 = P64[R1 + 7];
           _scVdP::P64 = P64[R1 + 15];
           _scVdQ::P64 = P64[R1 + 23];
           _scVdR::P64 = P64[R1 + 31];
           _scVdS::P64 = P64[R1 + 39];
           _scVdT::P64 = P64[R1 + 47];
           _scVdU::P64 = P64[R1 + 55];
           _scVdV::P64 = P64[R1 + 63];
           _scVdW::P64 = P64[R1 + 71];
           _scVdX::P64 = P64[R1 + 79];
           _scVdY::P64 = P64[R1 + 87];
           _scVdZ::P64 = P64[R1 + 95];
           _scVe0::P64 = P64[R1 + 103];
           _scVe1::P64 = P64[R1 + 111];
           R1 = P64[Sp + 8];
           P64[Sp - 96] = _scVdQ::P64;
           P64[Sp - 88] = _scVdR::P64;
           P64[Sp - 80] = _scVdS::P64;
           P64[Sp - 72] = _scVdT::P64;
           P64[Sp - 64] = _scVdU::P64;
           P64[Sp - 56] = _scVdV::P64;
           P64[Sp - 48] = _scVdW::P64;
           P64[Sp - 40] = _scVdX::P64;
           P64[Sp - 32] = _scVdY::P64;
           P64[Sp - 24] = _scVdZ::P64;
           P64[Sp - 16] = _scVe0::P64;
           P64[Sp - 8] = _scVe1::P64;
           P64[Sp] = _scVdP::P64;
           P64[Sp + 8] = _scVdO::P64;
           Sp = Sp - 104;
           if (R1 & 7 != 0) goto ud6sw; else goto cd6hQ;
       ud6sw: // global
           call _cd6hP(R1) args: 0, res: 0, upd: 0;
       cd6hQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cd6hK_info" {
     block_cd6hK_info:
         const _cd6hK;
         const 1;
         const 18446744069414584350;
         const ud6sJ_srtd;
 },
 section ""relreadonly" . ud6sK_srtd" {
     ud6sK_srtd:
         const ScWiZ_srt+128;
         const 34;
         const 12889096295;
 },
 _cd6hP() //  [R1]
         { []
         }
     {offset
       cd6hP: // global
           Hp = Hp + 344;
           if (Hp > HpLim) (likely: False) goto cd6ss; else goto cd6sr;
       cd6ss: // global
           HpAlloc = 344;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cd6sr: // global
           _scVe3::I64 = I64[R1 + 7];
           I64[Hp - 336] = w1_scVe4_info;
           P64[Hp - 320] = P64[Sp + 104];
           I64[Hp - 312] = f8_scVe9_info;
           P64[Hp - 296] = P64[Sp + 48];
           I64[Hp - 288] = f9_scVea_info;
           P64[Hp - 272] = P64[Sp + 56];
           I64[Hp - 264] = f10_scVeb_info;
           P64[Hp - 248] = P64[Sp + 64];
           I64[Hp - 240] = f11_scVec_info;
           P64[Hp - 224] = P64[Sp + 72];
           I64[Hp - 216] = f12_scVed_info;
           P64[Hp - 200] = P64[Sp + 80];
           I64[Hp - 192] = f13_scVee_info;
           P64[Hp - 176] = P64[Sp + 88];
           I64[Hp - 168] = f14_scVef_info;
           P64[Hp - 152] = P64[Sp + 96];
           I64[Hp - 144] = g1_scVeg_info;
           P64[Hp - 136] = P64[Sp + 32];
           P64[Hp - 128] = P64[Sp + 40];
           P64[Hp - 120] = Hp - 312;
           P64[Hp - 112] = Hp - 288;
           P64[Hp - 104] = Hp - 264;
           P64[Hp - 96] = Hp - 240;
           P64[Hp - 88] = Hp - 216;
           P64[Hp - 80] = Hp - 192;
           P64[Hp - 72] = Hp - 168;
           I64[Hp - 64] = g2_scVeT_info;
           P64[Hp - 56] = P64[Sp + 112];
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = Hp - 336;
           P64[Hp - 16] = Hp - 143;
           _cd6nw::P64 = Hp - 63;
           if (%MO_S_Lt_W64(_scVe3::I64, 11)) goto cd6su; else goto cd6sv;
       cd6su: // global
           I64[Hp - 8] = sat_scVft_info;
           P64[Hp] = _cd6nw::P64;
           R1 = Hp - 7;
           Sp = Sp + 120;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cd6sv: // global
           I64[Hp - 8] = sat_scVfy_info;
           P64[Hp] = _cd6nw::P64;
           R1 = Hp - 7;
           Sp = Sp + 120;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd6hP_info" {
     block_cd6hP_info:
         const _cd6hP;
         const 14;
         const 18446744069414584350;
         const ud6sK_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.360433321 UTC

[section ""data" . GHC.RTS.Flags.$fShowProfFlags_$cshow_closure" {
     GHC.RTS.Flags.$fShowProfFlags_$cshow_closure:
         const GHC.RTS.Flags.$fShowProfFlags_$cshow_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowProfFlags_$cshow_entry() //  [R2]
         { []
         }
     {offset
       cd6yo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd6yp; else goto cd6yq;
       cd6yp: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.$fShowProfFlags_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd6yq: // global
           R3 = R2;
           R2 = GHC.RTS.Flags.$fEnumDoCostCentres10_closure+1;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = GHC.Types.[]_closure+1;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fShowProfFlags_$cshowsPrec_entry(R3,
                                                                R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowProfFlags_$cshow_info" {
     GHC.RTS.Flags.$fShowProfFlags_$cshow_info:
         const GHC.RTS.Flags.$fShowProfFlags_$cshow_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const ScWiZ_srt+400;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.364141788 UTC

[section ""data" . GHC.RTS.Flags.$fShowProfFlags1_closure" {
     GHC.RTS.Flags.$fShowProfFlags1_closure:
         const GHC.RTS.Flags.$fShowProfFlags1_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowProfFlags1_entry() //  [R2]
         { []
         }
     {offset
       cd6yA: // global
           R3 = R2;
           R2 = GHC.RTS.Flags.$fEnumDoCostCentres10_closure+1;
           call GHC.RTS.Flags.$fShowProfFlags_$cshowsPrec_entry(R3,
                                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowProfFlags1_info" {
     GHC.RTS.Flags.$fShowProfFlags1_info:
         const GHC.RTS.Flags.$fShowProfFlags1_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const ScWiZ_srt+400;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.367517324 UTC

[section ""data" . GHC.RTS.Flags.$fShowProfFlags_$cshowList_closure" {
     GHC.RTS.Flags.$fShowProfFlags_$cshowList_closure:
         const GHC.RTS.Flags.$fShowProfFlags_$cshowList_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowProfFlags_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       cd6yL: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.RTS.Flags.$fShowProfFlags1_closure+1;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowProfFlags_$cshowList_info" {
     GHC.RTS.Flags.$fShowProfFlags_$cshowList_info:
         const GHC.RTS.Flags.$fShowProfFlags_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const ScWiZ_srt+416;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.371545125 UTC

[section ""data" . GHC.RTS.Flags.$fShowProfFlags_closure" {
     GHC.RTS.Flags.$fShowProfFlags_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.RTS.Flags.$fShowProfFlags_$cshowsPrec_closure+2;
         const GHC.RTS.Flags.$fShowProfFlags_$cshow_closure+1;
         const GHC.RTS.Flags.$fShowProfFlags_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.373234955 UTC

[section ""cstring" . GHC.RTS.Flags.$fShowCCFlags14_bytes" {
     GHC.RTS.Flags.$fShowCCFlags14_bytes:
         I8[] [67,111,115,116,67,101,110,116,114,101,115,78,111,110,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.37558067 UTC

[section ""data" . GHC.RTS.Flags.$fShowCCFlags13_closure" {
     GHC.RTS.Flags.$fShowCCFlags13_closure:
         const GHC.RTS.Flags.$fShowCCFlags13_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fShowCCFlags13_entry() //  [R1]
         { []
         }
     {offset
       cd6z0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd6z1; else goto cd6z2;
       cd6z1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6z2: // global
           (_cd6yX::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cd6yX::I64 == 0) goto cd6yZ; else goto cd6yY;
       cd6yZ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cd6yY: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cd6yX::I64;
           R2 = GHC.RTS.Flags.$fShowCCFlags14_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowCCFlags13_info" {
     GHC.RTS.Flags.$fShowCCFlags13_info:
         const GHC.RTS.Flags.$fShowCCFlags13_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.379243427 UTC

[section ""cstring" . GHC.RTS.Flags.$fShowCCFlags12_bytes" {
     GHC.RTS.Flags.$fShowCCFlags12_bytes:
         I8[] [67,111,115,116,67,101,110,116,114,101,115,83,117,109,109,97,114,121]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.38153711 UTC

[section ""data" . GHC.RTS.Flags.$fShowCCFlags11_closure" {
     GHC.RTS.Flags.$fShowCCFlags11_closure:
         const GHC.RTS.Flags.$fShowCCFlags11_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fShowCCFlags11_entry() //  [R1]
         { []
         }
     {offset
       cd6zh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd6zi; else goto cd6zj;
       cd6zi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6zj: // global
           (_cd6ze::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cd6ze::I64 == 0) goto cd6zg; else goto cd6zf;
       cd6zg: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cd6zf: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cd6ze::I64;
           R2 = GHC.RTS.Flags.$fShowCCFlags12_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowCCFlags11_info" {
     GHC.RTS.Flags.$fShowCCFlags11_info:
         const GHC.RTS.Flags.$fShowCCFlags11_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.38513906 UTC

[section ""cstring" . GHC.RTS.Flags.$fShowCCFlags10_bytes" {
     GHC.RTS.Flags.$fShowCCFlags10_bytes:
         I8[] [67,111,115,116,67,101,110,116,114,101,115,86,101,114,98,111,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.387892914 UTC

[section ""data" . GHC.RTS.Flags.$fShowCCFlags9_closure" {
     GHC.RTS.Flags.$fShowCCFlags9_closure:
         const GHC.RTS.Flags.$fShowCCFlags9_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fShowCCFlags9_entry() //  [R1]
         { []
         }
     {offset
       cd6zy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd6zz; else goto cd6zA;
       cd6zz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6zA: // global
           (_cd6zv::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cd6zv::I64 == 0) goto cd6zx; else goto cd6zw;
       cd6zx: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cd6zw: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cd6zv::I64;
           R2 = GHC.RTS.Flags.$fShowCCFlags10_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowCCFlags9_info" {
     GHC.RTS.Flags.$fShowCCFlags9_info:
         const GHC.RTS.Flags.$fShowCCFlags9_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.391599456 UTC

[section ""cstring" . GHC.RTS.Flags.$fShowCCFlags8_bytes" {
     GHC.RTS.Flags.$fShowCCFlags8_bytes:
         I8[] [67,111,115,116,67,101,110,116,114,101,115,65,108,108]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.393882609 UTC

[section ""data" . GHC.RTS.Flags.$fShowCCFlags7_closure" {
     GHC.RTS.Flags.$fShowCCFlags7_closure:
         const GHC.RTS.Flags.$fShowCCFlags7_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fShowCCFlags7_entry() //  [R1]
         { []
         }
     {offset
       cd6zP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd6zQ; else goto cd6zR;
       cd6zQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6zR: // global
           (_cd6zM::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cd6zM::I64 == 0) goto cd6zO; else goto cd6zN;
       cd6zO: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cd6zN: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cd6zM::I64;
           R2 = GHC.RTS.Flags.$fShowCCFlags8_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowCCFlags7_info" {
     GHC.RTS.Flags.$fShowCCFlags7_info:
         const GHC.RTS.Flags.$fShowCCFlags7_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.398019098 UTC

[section ""cstring" . GHC.RTS.Flags.$fShowCCFlags6_bytes" {
     GHC.RTS.Flags.$fShowCCFlags6_bytes:
         I8[] [67,111,115,116,67,101,110,116,114,101,115,74,83,79,78]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.400257649 UTC

[section ""data" . GHC.RTS.Flags.$fShowCCFlags5_closure" {
     GHC.RTS.Flags.$fShowCCFlags5_closure:
         const GHC.RTS.Flags.$fShowCCFlags5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fShowCCFlags5_entry() //  [R1]
         { []
         }
     {offset
       cd6A6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd6A7; else goto cd6A8;
       cd6A7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6A8: // global
           (_cd6A3::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cd6A3::I64 == 0) goto cd6A5; else goto cd6A4;
       cd6A5: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cd6A4: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cd6A3::I64;
           R2 = GHC.RTS.Flags.$fShowCCFlags6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowCCFlags5_info" {
     GHC.RTS.Flags.$fShowCCFlags5_info:
         const GHC.RTS.Flags.$fShowCCFlags5_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.405594247 UTC

[section ""data" . GHC.RTS.Flags.$w$cshowsPrec1_closure" {
     GHC.RTS.Flags.$w$cshowsPrec1_closure:
         const GHC.RTS.Flags.$w$cshowsPrec1_info;
         const 0;
 },
 GHC.RTS.Flags.$w$cshowsPrec1_entry() //  [R2, R3]
         { []
         }
     {offset
       cd6Au: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd6Av; else goto cd6Aw;
       cd6Av: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.RTS.Flags.$w$cshowsPrec1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cd6Aw: // global
           I64[Sp - 16] = block_cd6Ak_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ud6AP; else goto cd6Al;
       ud6AP: // global
           call _cd6Ak(R1) args: 0, res: 0, upd: 0;
       cd6Al: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$w$cshowsPrec1_info" {
     GHC.RTS.Flags.$w$cshowsPrec1_info:
         const GHC.RTS.Flags.$w$cshowsPrec1_entry;
         const 0;
         const 270582939662;
         const 8589934607;
         const ScWiZ_srt+424;
 },
 _cd6Ak() //  [R1]
         { []
         }
     {offset
       cd6Ak: // global
           _scVfD::P64 = P64[Sp + 8];
           _cd6At::P64 = R1 & 7;
           if (_cd6At::P64 < 4) goto ud6AM; else goto ud6AO;
       ud6AM: // global
           if (_cd6At::P64 < 3) goto ud6AN; else goto cd6Aq;
       ud6AN: // global
           if (_cd6At::P64 < 2) goto cd6Ao; else goto cd6Ap;
       cd6Ao: // global
           R3 = _scVfD::P64;
           R2 = GHC.RTS.Flags.$fShowCCFlags13_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cd6Ap: // global
           R3 = _scVfD::P64;
           R2 = GHC.RTS.Flags.$fShowCCFlags11_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cd6Aq: // global
           R3 = _scVfD::P64;
           R2 = GHC.RTS.Flags.$fShowCCFlags9_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       ud6AO: // global
           if (_cd6At::P64 < 5) goto cd6Ar; else goto cd6As;
       cd6Ar: // global
           R3 = _scVfD::P64;
           R2 = GHC.RTS.Flags.$fShowCCFlags7_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cd6As: // global
           R3 = _scVfD::P64;
           R2 = GHC.RTS.Flags.$fShowCCFlags5_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd6Ak_info" {
     block_cd6Ak_info:
         const _cd6Ak;
         const 1;
         const 133143986206;
         const ScWiZ_srt+432;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.411454539 UTC

[section ""data" . GHC.RTS.Flags.$fShowDoCostCentres_$cshowsPrec_closure" {
     GHC.RTS.Flags.$fShowDoCostCentres_$cshowsPrec_closure:
         const GHC.RTS.Flags.$fShowDoCostCentres_$cshowsPrec_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowDoCostCentres_$cshowsPrec_entry() //  [R3, R4]
         { []
         }
     {offset
       cd6B4: // global
           _scVfG::P64 = R3;
           R3 = R4;
           R2 = _scVfG::P64;
           call GHC.RTS.Flags.$w$cshowsPrec1_entry(R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowDoCostCentres_$cshowsPrec_info" {
     GHC.RTS.Flags.$fShowDoCostCentres_$cshowsPrec_info:
         const GHC.RTS.Flags.$fShowDoCostCentres_$cshowsPrec_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const ScWiZ_srt+424;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.41601272 UTC

[section ""data" . GHC.RTS.Flags.$fShowDoCostCentres_$cshow_closure" {
     GHC.RTS.Flags.$fShowDoCostCentres_$cshow_closure:
         const GHC.RTS.Flags.$fShowDoCostCentres_$cshow_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowDoCostCentres_$cshow_entry() //  [R2]
         { []
         }
     {offset
       cd6Bp: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd6Bq; else goto cd6Br;
       cd6Bq: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.$fShowDoCostCentres_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd6Br: // global
           I64[Sp - 8] = block_cd6Bf_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud6BK; else goto cd6Bg;
       ud6BK: // global
           call _cd6Bf(R1) args: 0, res: 0, upd: 0;
       cd6Bg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowDoCostCentres_$cshow_info" {
     GHC.RTS.Flags.$fShowDoCostCentres_$cshow_info:
         const GHC.RTS.Flags.$fShowDoCostCentres_$cshow_entry;
         const 0;
         const 270582939662;
         const 4294967301;
         const ScWiZ_srt+432;
 },
 _cd6Bf() //  [R1]
         { []
         }
     {offset
       cd6Bf: // global
           _cd6Bo::P64 = R1 & 7;
           if (_cd6Bo::P64 < 4) goto ud6BH; else goto ud6BJ;
       ud6BH: // global
           if (_cd6Bo::P64 < 3) goto ud6BI; else goto cd6Bl;
       ud6BI: // global
           if (_cd6Bo::P64 < 2) goto cd6Bj; else goto cd6Bk;
       cd6Bj: // global
           R1 = GHC.RTS.Flags.$fShowCCFlags13_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cd6Bk: // global
           R1 = GHC.RTS.Flags.$fShowCCFlags11_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cd6Bl: // global
           R1 = GHC.RTS.Flags.$fShowCCFlags9_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       ud6BJ: // global
           if (_cd6Bo::P64 < 5) goto cd6Bm; else goto cd6Bn;
       cd6Bm: // global
           R1 = GHC.RTS.Flags.$fShowCCFlags7_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cd6Bn: // global
           R1 = GHC.RTS.Flags.$fShowCCFlags5_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd6Bf_info" {
     block_cd6Bf_info:
         const _cd6Bf;
         const 0;
         const 133143986206;
         const ScWiZ_srt+432;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.421742513 UTC

[section ""data" . GHC.RTS.Flags.$fShowDoCostCentres_$cshowList_closure" {
     GHC.RTS.Flags.$fShowDoCostCentres_$cshowList_closure:
         const GHC.RTS.Flags.$fShowDoCostCentres_$cshowList_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowDoCostCentres_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       cd6C4: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.RTS.Flags.$w$cshowsPrec1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowDoCostCentres_$cshowList_info" {
     GHC.RTS.Flags.$fShowDoCostCentres_$cshowList_info:
         const GHC.RTS.Flags.$fShowDoCostCentres_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const ScWiZ_srt+424;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.424971579 UTC

[section ""data" . GHC.RTS.Flags.$fShowDoCostCentres_closure" {
     GHC.RTS.Flags.$fShowDoCostCentres_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.RTS.Flags.$fShowDoCostCentres_$cshowsPrec_closure+3;
         const GHC.RTS.Flags.$fShowDoCostCentres_$cshow_closure+1;
         const GHC.RTS.Flags.$fShowDoCostCentres_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.426775153 UTC

[section ""cstring" . GHC.RTS.Flags.$fShowCCFlags16_bytes" {
     GHC.RTS.Flags.$fShowCCFlags16_bytes:
         I8[] [67,67,70,108,97,103,115,32,123]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.428473348 UTC

[section ""cstring" . GHC.RTS.Flags.$fShowCCFlags15_bytes" {
     GHC.RTS.Flags.$fShowCCFlags15_bytes:
         I8[] [100,111,67,111,115,116,67,101,110,116,114,101,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.430175862 UTC

[section ""cstring" . GHC.RTS.Flags.$fShowCCFlags4_bytes" {
     GHC.RTS.Flags.$fShowCCFlags4_bytes:
         I8[] [112,114,111,102,105,108,101,114,84,105,99,107,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.431839565 UTC

[section ""cstring" . GHC.RTS.Flags.$fShowCCFlags3_bytes" {
     GHC.RTS.Flags.$fShowCCFlags3_bytes:
         I8[] [109,115,101,99,115,80,101,114,84,105,99,107,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.442191052 UTC

[section ""data" . GHC.RTS.Flags.$w$cshowsPrec_closure" {
     GHC.RTS.Flags.$w$cshowsPrec_closure:
         const GHC.RTS.Flags.$w$cshowsPrec_info;
         const 0;
 },
 GHC.RTS.Flags.$w$cshowsPrec_slow() //  [R1]
         { []
         }
     {offset
       cd6Ch: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.RTS.Flags.$w$cshowsPrec_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2,
                                                  R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_scVfX_entry() //  [R1]
         { []
         }
     {offset
       cd6Da: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd6Db; else goto cd6Dc;
       cd6Db: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6Dc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.RTS.Flags.$fShowCCFlags2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVfX_info" {
     sat_scVfX_info:
         const sat_scVfX_entry;
         const 1;
         const 16;
 },
 sat_scVg1_entry() //  [R1]
         { []
         }
     {offset
       cd6Dd: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cd6Dh; else goto cd6Di;
       cd6Dh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6Di: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cd6D1_info;
           _scVfS::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _scVfS::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ud6Dp; else goto cd6D2;
       ud6Dp: // global
           call _cd6D1(R1) args: 0, res: 0, upd: 0;
       cd6D2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVg1_info" {
     sat_scVg1_info:
         const sat_scVg1_entry;
         const 2;
         const 18;
 },
 _cd6D1() //  [R1]
         { []
         }
     {offset
       cd6D1: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cd6Dl; else goto cd6Dk;
       cd6Dl: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cd6Dk: // global
           _scVfW::I64 = I64[R1 + 7];
           I64[Hp - 16] = sat_scVfX_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_cd6De_info;
           R4 = Hp - 16;
           R3 = _scVfW::I64;
           R2 = 0;
           Sp = Sp + 8;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cd6D1_info" {
     block_cd6D1_info:
         const _cd6D1;
         const 1;
         const 30;
 },
 _cd6De() //  [R1, R2]
         { []
         }
     {offset
       cd6De: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cd6Do; else goto cd6Dn;
       cd6Do: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cd6Dn: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd6De_info" {
     block_cd6De_info:
         const _cd6De;
         const 0;
         const 30;
 },
 sat_scVg2_entry() //  [R1]
         { []
         }
     {offset
       cd6Dq: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cd6Du; else goto cd6Dt;
       cd6Du: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6Dt: // global
           _scVfP::P64 = P64[R1 + 16];
           _scVfS::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_scVg1_info;
           P64[Hp - 8] = _scVfP::P64;
           P64[Hp] = _scVfS::P64;
           R3 = Hp - 24;
           R2 = GHC.RTS.Flags.$fShowCCFlags3_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVg2_info" {
     sat_scVg2_info:
         const sat_scVg2_entry;
         const 2;
         const 18;
 },
 sat_scVg3_entry() //  [R1]
         { []
         }
     {offset
       cd6Dv: // global
           _scVg3::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd6Dw; else goto cd6Dx;
       cd6Dx: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cd6Dz; else goto cd6Dy;
       cd6Dz: // global
           HpAlloc = 32;
           goto cd6Dw;
       cd6Dw: // global
           R1 = _scVg3::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6Dy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVg3::P64;
           _scVfP::P64 = P64[_scVg3::P64 + 16];
           _scVfS::P64 = P64[_scVg3::P64 + 24];
           I64[Hp - 24] = sat_scVg2_info;
           P64[Hp - 8] = _scVfP::P64;
           P64[Hp] = _scVfS::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVg3_info" {
     sat_scVg3_info:
         const sat_scVg3_entry;
         const 2;
         const 4294967314;
         const ScWiZ_srt+480;
 },
 sat_scVg7_entry() //  [R1]
         { []
         }
     {offset
       cd6DA: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cd6DE; else goto cd6DF;
       cd6DE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6DF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cd6CK_info;
           _scVfP::P64 = P64[R1 + 24];
           _scVfS::P64 = P64[R1 + 32];
           R1 = P64[R1 + 16];
           P64[Sp - 32] = _scVfP::P64;
           P64[Sp - 24] = _scVfS::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ud6DM; else goto cd6CL;
       ud6DM: // global
           call _cd6CK(R1) args: 0, res: 0, upd: 0;
       cd6CL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVg7_info" {
     sat_scVg7_info:
         const sat_scVg7_entry;
         const 3;
         const 4294967311;
         const ScWiZ_srt+480;
 },
 _cd6CK() //  [R1]
         { []
         }
     {offset
       cd6CK: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cd6DI; else goto cd6DH;
       cd6DI: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cd6DH: // global
           _scVfU::I64 = I64[R1 + 7];
           I64[Hp - 24] = sat_scVg3_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_cd6DB_info;
           R4 = Hp - 24;
           R3 = _scVfU::I64;
           R2 = 0;
           Sp = Sp + 16;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cd6CK_info" {
     block_cd6CK_info:
         const _cd6CK;
         const 2;
         const 4294967326;
         const ScWiZ_srt+480;
 },
 _cd6DB() //  [R1, R2]
         { []
         }
     {offset
       cd6DB: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cd6DL; else goto cd6DK;
       cd6DL: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cd6DK: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd6DB_info" {
     block_cd6DB_info:
         const _cd6DB;
         const 0;
         const 30;
 },
 sat_scVg8_entry() //  [R1]
         { []
         }
     {offset
       cd6DN: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cd6DR; else goto cd6DQ;
       cd6DR: // global
           HpAlloc = 40;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6DQ: // global
           _scVfO::P64 = P64[R1 + 16];
           _scVfP::P64 = P64[R1 + 24];
           _scVfS::P64 = P64[R1 + 32];
           I64[Hp - 32] = sat_scVg7_info;
           P64[Hp - 16] = _scVfO::P64;
           P64[Hp - 8] = _scVfP::P64;
           P64[Hp] = _scVfS::P64;
           R3 = Hp - 32;
           R2 = GHC.RTS.Flags.$fShowCCFlags4_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVg8_info" {
     sat_scVg8_info:
         const sat_scVg8_entry;
         const 3;
         const 4294967311;
         const ScWiZ_srt+480;
 },
 sat_scVg9_entry() //  [R1]
         { []
         }
     {offset
       cd6DS: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cd6DW; else goto cd6DV;
       cd6DW: // global
           HpAlloc = 40;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6DV: // global
           _scVfO::P64 = P64[R1 + 16];
           _scVfP::P64 = P64[R1 + 24];
           _scVfS::P64 = P64[R1 + 32];
           I64[Hp - 32] = sat_scVg8_info;
           P64[Hp - 16] = _scVfO::P64;
           P64[Hp - 8] = _scVfP::P64;
           P64[Hp] = _scVfS::P64;
           R3 = Hp - 32;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVg9_info" {
     sat_scVg9_info:
         const sat_scVg9_entry;
         const 3;
         const 4294967311;
         const ScWiZ_srt+480;
 },
 sat_scVga_entry() //  [R1]
         { []
         }
     {offset
       cd6DX: // global
           _scVga::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd6DY; else goto cd6DZ;
       cd6DZ: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cd6E1; else goto cd6E0;
       cd6E1: // global
           HpAlloc = 40;
           goto cd6DY;
       cd6DY: // global
           R1 = _scVga::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6E0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVga::P64;
           _scVfN::P64 = P64[_scVga::P64 + 16];
           _scVfO::P64 = P64[_scVga::P64 + 24];
           _scVfP::P64 = P64[_scVga::P64 + 32];
           _scVfS::P64 = P64[_scVga::P64 + 40];
           I64[Hp - 32] = sat_scVg9_info;
           P64[Hp - 16] = _scVfO::P64;
           P64[Hp - 8] = _scVfP::P64;
           P64[Hp] = _scVfS::P64;
           R3 = Hp - 32;
           R2 = _scVfN::P64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$cshowsPrec1_entry(R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVga_info" {
     sat_scVga_info:
         const sat_scVga_entry;
         const 4;
         const 554050781199;
         const ScWiZ_srt+424;
 },
 sat_scVgb_entry() //  [R1]
         { []
         }
     {offset
       cd6E2: // global
           _scVgb::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd6E3; else goto cd6E4;
       cd6E4: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cd6E6; else goto cd6E5;
       cd6E6: // global
           HpAlloc = 48;
           goto cd6E3;
       cd6E3: // global
           R1 = _scVgb::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6E5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVgb::P64;
           _scVfN::P64 = P64[_scVgb::P64 + 16];
           _scVfO::P64 = P64[_scVgb::P64 + 24];
           _scVfP::P64 = P64[_scVgb::P64 + 32];
           _scVfS::P64 = P64[_scVgb::P64 + 40];
           I64[Hp - 40] = sat_scVga_info;
           P64[Hp - 24] = _scVfN::P64;
           P64[Hp - 16] = _scVfO::P64;
           P64[Hp - 8] = _scVfP::P64;
           P64[Hp] = _scVfS::P64;
           R3 = Hp - 40;
           R2 = GHC.RTS.Flags.$fShowCCFlags15_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVgb_info" {
     sat_scVgb_info:
         const sat_scVgb_entry;
         const 4;
         const 554050781199;
         const ScWiZ_srt+424;
 },
 p_scVfR_entry() //  [R1, R2]
         { []
         }
     {offset
       cd6E7: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cd6Eb; else goto cd6Ea;
       cd6Eb: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd6Ea: // global
           _scVfN::P64 = P64[R1 + 7];
           _scVfO::P64 = P64[R1 + 15];
           _scVfP::P64 = P64[R1 + 23];
           I64[Hp - 40] = sat_scVgb_info;
           P64[Hp - 24] = _scVfN::P64;
           P64[Hp - 16] = _scVfO::P64;
           P64[Hp - 8] = _scVfP::P64;
           P64[Hp] = R2;
           R3 = Hp - 40;
           R2 = GHC.RTS.Flags.$fShowCCFlags16_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . p_scVfR_info" {
     p_scVfR_info:
         const p_scVfR_entry;
         const 3;
         const 554050781192;
         const 4294967301;
         const ScWiZ_srt+424;
 },
 sat_scVge_entry() //  [R1]
         { []
         }
     {offset
       cd6El: // global
           _scVge::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd6Em; else goto cd6En;
       cd6En: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cd6Ep; else goto cd6Eo;
       cd6Ep: // global
           HpAlloc = 24;
           goto cd6Em;
       cd6Em: // global
           R1 = _scVge::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6Eo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVge::P64;
           _scVfQ::P64 = P64[_scVge::P64 + 16];
           _scVfR::P64 = P64[_scVge::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _scVfQ::P64;
           R2 = Hp - 14;
           R1 = _scVfR::P64;
           Sp = Sp - 16;
           call p_scVfR_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVge_info" {
     sat_scVge_info:
         const sat_scVge_entry;
         const 2;
         const 554050781202;
         const ScWiZ_srt+424;
 },
 GHC.RTS.Flags.$w$cshowsPrec_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cd6Et: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cd6Ex; else goto cd6Ew;
       cd6Ex: // global
           HpAlloc = 88;
           R1 = GHC.RTS.Flags.$w$cshowsPrec_closure;
           I64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 48, res: 0, upd: 8;
       cd6Ew: // global
           I64[Hp - 80] = p_scVfR_info;
           P64[Hp - 72] = R3;
           P64[Hp - 64] = R4;
           P64[Hp - 56] = R5;
           _cd6Cl::P64 = Hp - 79;
           if (%MO_S_Lt_W64(R2, 11)) goto cd6Er; else goto cd6Es;
       cd6Er: // global
           Hp = Hp - 56;
           R2 = R6;
           R1 = _cd6Cl::P64;
           call p_scVfR_entry(R2, R1) args: 8, res: 0, upd: 8;
       cd6Es: // global
           I64[Hp - 48] = sat_scVge_info;
           P64[Hp - 32] = R6;
           P64[Hp - 24] = _cd6Cl::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$w$cshowsPrec_info" {
     GHC.RTS.Flags.$w$cshowsPrec_info:
         const GHC.RTS.Flags.$w$cshowsPrec_entry;
         const 0;
         const 1653562408974;
         const 21474836480;
         const ScWiZ_srt+424;
         const 69;
         const GHC.RTS.Flags.$w$cshowsPrec_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.474860187 UTC

[section ""data" . GHC.RTS.Flags.$fShowCCFlags_$cshowsPrec_closure" {
     GHC.RTS.Flags.$fShowCCFlags_$cshowsPrec_closure:
         const GHC.RTS.Flags.$fShowCCFlags_$cshowsPrec_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowCCFlags_$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cd6FL: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cd6FP; else goto cd6FQ;
       cd6FP: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fShowCCFlags_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cd6FQ: // global
           I64[Sp - 24] = block_cd6FI_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ud6FY; else goto cd6FJ;
       ud6FY: // global
           call _cd6FI(R1) args: 0, res: 0, upd: 0;
       cd6FJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowCCFlags_$cshowsPrec_info" {
     GHC.RTS.Flags.$fShowCCFlags_$cshowsPrec_info:
         const GHC.RTS.Flags.$fShowCCFlags_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const ScWiZ_srt+488;
 },
 _cd6FI() //  [R1]
         { []
         }
     {offset
       cd6FI: // global
           I64[Sp] = block_cd6FO_info;
           _scVgj::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _scVgj::I64;
           if (R1 & 7 != 0) goto ud6FX; else goto cd6FS;
       ud6FX: // global
           call _cd6FO(R1) args: 0, res: 0, upd: 0;
       cd6FS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cd6FI_info" {
     block_cd6FI_info:
         const _cd6FI;
         const 2;
         const 4294967326;
         const ScWiZ_srt+488;
 },
 _cd6FO() //  [R1]
         { []
         }
     {offset
       cd6FO: // global
           R6 = P64[Sp + 16];
           R5 = P64[R1 + 23];
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = I64[Sp + 8];
           Sp = Sp + 24;
           call GHC.RTS.Flags.$w$cshowsPrec_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd6FO_info" {
     block_cd6FO_info:
         const _cd6FO;
         const 66;
         const 4294967326;
         const ScWiZ_srt+488;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.482852728 UTC

[section ""data" . GHC.RTS.Flags.$fShowCCFlags17_closure" {
     GHC.RTS.Flags.$fShowCCFlags17_closure:
         const GHC.RTS.Flags.$fShowCCFlags17_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fShowCCFlags17_entry() //  [R1]
         { []
         }
     {offset
       cd6Gi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd6Gj; else goto cd6Gk;
       cd6Gj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6Gk: // global
           (_cd6Gf::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cd6Gf::I64 == 0) goto cd6Gh; else goto cd6Gg;
       cd6Gh: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cd6Gg: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cd6Gf::I64;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.RTS.Flags.$fShowCCFlags2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowCCFlags17_info" {
     GHC.RTS.Flags.$fShowCCFlags17_info:
         const GHC.RTS.Flags.$fShowCCFlags17_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.491747295 UTC

[section ""data" . GHC.RTS.Flags.$w$cshow_closure" {
     GHC.RTS.Flags.$w$cshow_closure:
         const GHC.RTS.Flags.$w$cshow_info;
         const 0;
 },
 sat_scVgy_entry() //  [R1]
         { []
         }
     {offset
       cd6Ha: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cd6Hg; else goto cd6Hh;
       cd6Hg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6Hh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cd6H7_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ud6Hm; else goto cd6H8;
       ud6Hm: // global
           call _cd6H7(R1) args: 0, res: 0, upd: 0;
       cd6H8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVgy_info" {
     sat_scVgy_info:
         const sat_scVgy_entry;
         const 1;
         const 4294967312;
         const ScWiZ_srt+504;
 },
 _cd6H7() //  [R1]
         { []
         }
     {offset
       cd6H7: // global
           I64[Sp] = block_cd6Hd_info;
           R4 = GHC.RTS.Flags.$fShowCCFlags17_closure;
           R3 = I64[R1 + 7];
           R2 = 0;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cd6H7_info" {
     block_cd6H7_info:
         const _cd6H7;
         const 0;
         const 4294967326;
         const ScWiZ_srt+504;
 },
 _cd6Hd() //  [R1, R2]
         { []
         }
     {offset
       cd6Hd: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cd6Hl; else goto cd6Hk;
       cd6Hl: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cd6Hk: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd6Hd_info" {
     block_cd6Hd_info:
         const _cd6Hd;
         const 0;
         const 30;
 },
 sat_scVgz_entry() //  [R1]
         { []
         }
     {offset
       cd6Hn: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cd6Hr; else goto cd6Hq;
       cd6Hr: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6Hq: // global
           _scVgq::P64 = P64[R1 + 16];
           I64[Hp - 16] = sat_scVgy_info;
           P64[Hp] = _scVgq::P64;
           R3 = Hp - 16;
           R2 = GHC.RTS.Flags.$fShowCCFlags3_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVgz_info" {
     sat_scVgz_info:
         const sat_scVgz_entry;
         const 1;
         const 4294967312;
         const ScWiZ_srt+504;
 },
 sat_scVgA_entry() //  [R1]
         { []
         }
     {offset
       cd6Hs: // global
           _scVgA::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd6Ht; else goto cd6Hu;
       cd6Hu: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cd6Hw; else goto cd6Hv;
       cd6Hw: // global
           HpAlloc = 24;
           goto cd6Ht;
       cd6Ht: // global
           R1 = _scVgA::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6Hv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVgA::P64;
           _scVgq::P64 = P64[_scVgA::P64 + 16];
           I64[Hp - 16] = sat_scVgz_info;
           P64[Hp] = _scVgq::P64;
           R3 = Hp - 16;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVgA_info" {
     sat_scVgA_info:
         const sat_scVgA_entry;
         const 1;
         const 38654705680;
         const ScWiZ_srt+480;
 },
 sat_scVgE_entry() //  [R1]
         { []
         }
     {offset
       cd6Hx: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cd6HB; else goto cd6HC;
       cd6HB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6HC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cd6GQ_info;
           _scVgq::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _scVgq::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ud6HJ; else goto cd6GR;
       ud6HJ: // global
           call _cd6GQ(R1) args: 0, res: 0, upd: 0;
       cd6GR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVgE_info" {
     sat_scVgE_info:
         const sat_scVgE_entry;
         const 2;
         const 38654705682;
         const ScWiZ_srt+480;
 },
 _cd6GQ() //  [R1]
         { []
         }
     {offset
       cd6GQ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cd6HF; else goto cd6HE;
       cd6HF: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cd6HE: // global
           _scVgs::I64 = I64[R1 + 7];
           I64[Hp - 16] = sat_scVgA_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_cd6Hy_info;
           R4 = Hp - 16;
           R3 = _scVgs::I64;
           R2 = 0;
           Sp = Sp + 8;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cd6GQ_info" {
     block_cd6GQ_info:
         const _cd6GQ;
         const 1;
         const 38654705694;
         const ScWiZ_srt+480;
 },
 _cd6Hy() //  [R1, R2]
         { []
         }
     {offset
       cd6Hy: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cd6HI; else goto cd6HH;
       cd6HI: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cd6HH: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd6Hy_info" {
     block_cd6Hy_info:
         const _cd6Hy;
         const 0;
         const 30;
 },
 sat_scVgF_entry() //  [R1]
         { []
         }
     {offset
       cd6HK: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cd6HO; else goto cd6HN;
       cd6HO: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6HN: // global
           _scVgp::P64 = P64[R1 + 16];
           _scVgq::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_scVgE_info;
           P64[Hp - 8] = _scVgp::P64;
           P64[Hp] = _scVgq::P64;
           R3 = Hp - 24;
           R2 = GHC.RTS.Flags.$fShowCCFlags4_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVgF_info" {
     sat_scVgF_info:
         const sat_scVgF_entry;
         const 2;
         const 38654705682;
         const ScWiZ_srt+480;
 },
 sat_scVgG_entry() //  [R1]
         { []
         }
     {offset
       cd6HP: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cd6HT; else goto cd6HS;
       cd6HT: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6HS: // global
           _scVgp::P64 = P64[R1 + 16];
           _scVgq::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_scVgF_info;
           P64[Hp - 8] = _scVgp::P64;
           P64[Hp] = _scVgq::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVgG_info" {
     sat_scVgG_info:
         const sat_scVgG_entry;
         const 2;
         const 38654705682;
         const ScWiZ_srt+480;
 },
 sat_scVgH_entry() //  [R1]
         { []
         }
     {offset
       cd6HU: // global
           _scVgH::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd6HV; else goto cd6HW;
       cd6HW: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cd6HY; else goto cd6HX;
       cd6HY: // global
           HpAlloc = 32;
           goto cd6HV;
       cd6HV: // global
           R1 = _scVgH::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6HX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVgH::P64;
           _scVgo::P64 = P64[_scVgH::P64 + 16];
           _scVgp::P64 = P64[_scVgH::P64 + 24];
           _scVgq::P64 = P64[_scVgH::P64 + 32];
           I64[Hp - 24] = sat_scVgG_info;
           P64[Hp - 8] = _scVgp::P64;
           P64[Hp] = _scVgq::P64;
           R3 = Hp - 24;
           R2 = _scVgo::P64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$cshowsPrec1_entry(R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVgH_info" {
     sat_scVgH_info:
         const sat_scVgH_entry;
         const 3;
         const 4952097292303;
         const ScWiZ_srt+424;
 },
 sat_scVgI_entry() //  [R1]
         { []
         }
     {offset
       cd6HZ: // global
           _scVgI::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd6I0; else goto cd6I1;
       cd6I1: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cd6I3; else goto cd6I2;
       cd6I3: // global
           HpAlloc = 40;
           goto cd6I0;
       cd6I0: // global
           R1 = _scVgI::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6I2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVgI::P64;
           _scVgo::P64 = P64[_scVgI::P64 + 16];
           _scVgp::P64 = P64[_scVgI::P64 + 24];
           _scVgq::P64 = P64[_scVgI::P64 + 32];
           I64[Hp - 32] = sat_scVgH_info;
           P64[Hp - 16] = _scVgo::P64;
           P64[Hp - 8] = _scVgp::P64;
           P64[Hp] = _scVgq::P64;
           R3 = Hp - 32;
           R2 = GHC.RTS.Flags.$fShowCCFlags15_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVgI_info" {
     sat_scVgI_info:
         const sat_scVgI_entry;
         const 3;
         const 4952097292303;
         const ScWiZ_srt+424;
 },
 GHC.RTS.Flags.$w$cshow_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cd6I4: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cd6I8; else goto cd6I7;
       cd6I8: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.RTS.Flags.$w$cshow_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cd6I7: // global
           I64[Hp - 32] = sat_scVgI_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R3 = Hp - 32;
           R2 = GHC.RTS.Flags.$fShowCCFlags16_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$w$cshow_info" {
     GHC.RTS.Flags.$w$cshow_info:
         const GHC.RTS.Flags.$w$cshow_entry;
         const 0;
         const 13748190314510;
         const 12884901911;
         const ScWiZ_srt+424;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.516456121 UTC

[section ""data" . GHC.RTS.Flags.$fShowCCFlags_$cshow_closure" {
     GHC.RTS.Flags.$fShowCCFlags_$cshow_closure:
         const GHC.RTS.Flags.$fShowCCFlags_$cshow_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowCCFlags_$cshow_entry() //  [R2]
         { []
         }
     {offset
       cd6J4: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd6J5; else goto cd6J6;
       cd6J5: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.$fShowCCFlags_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd6J6: // global
           I64[Sp - 8] = block_cd6J1_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud6Ja; else goto cd6J2;
       ud6Ja: // global
           call _cd6J1(R1) args: 0, res: 0, upd: 0;
       cd6J2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowCCFlags_$cshow_info" {
     GHC.RTS.Flags.$fShowCCFlags_$cshow_info:
         const GHC.RTS.Flags.$fShowCCFlags_$cshow_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const ScWiZ_srt+512;
 },
 _cd6J1() //  [R1]
         { []
         }
     {offset
       cd6J1: // global
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.RTS.Flags.$w$cshow_entry(R4,
                                             R3,
                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd6J1_info" {
     block_cd6J1_info:
         const _cd6J1;
         const 0;
         const 4294967326;
         const ScWiZ_srt+512;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.522521 UTC

[section ""data" . GHC.RTS.Flags.$fShowCCFlags1_closure" {
     GHC.RTS.Flags.$fShowCCFlags1_closure:
         const GHC.RTS.Flags.$fShowCCFlags1_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowCCFlags1_entry() //  [R2, R3]
         { []
         }
     {offset
       cd6Jr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd6Js; else goto cd6Jt;
       cd6Js: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fShowCCFlags1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cd6Jt: // global
           I64[Sp - 16] = block_cd6Jo_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ud6Jx; else goto cd6Jp;
       ud6Jx: // global
           call _cd6Jo(R1) args: 0, res: 0, upd: 0;
       cd6Jp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowCCFlags1_info" {
     GHC.RTS.Flags.$fShowCCFlags1_info:
         const GHC.RTS.Flags.$fShowCCFlags1_entry;
         const 0;
         const 141733920782;
         const 8589934607;
         const ScWiZ_srt+488;
 },
 _cd6Jo() //  [R1]
         { []
         }
     {offset
       cd6Jo: // global
           R6 = P64[Sp + 8];
           R5 = P64[R1 + 23];
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = 0;
           Sp = Sp + 16;
           call GHC.RTS.Flags.$w$cshowsPrec_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd6Jo_info" {
     block_cd6Jo_info:
         const _cd6Jo;
         const 1;
         const 4294967326;
         const ScWiZ_srt+488;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.528324346 UTC

[section ""data" . GHC.RTS.Flags.$fShowCCFlags_$cshowList_closure" {
     GHC.RTS.Flags.$fShowCCFlags_$cshowList_closure:
         const GHC.RTS.Flags.$fShowCCFlags_$cshowList_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowCCFlags_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       cd6JL: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.RTS.Flags.$fShowCCFlags1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowCCFlags_$cshowList_info" {
     GHC.RTS.Flags.$fShowCCFlags_$cshowList_info:
         const GHC.RTS.Flags.$fShowCCFlags_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const ScWiZ_srt+528;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.531488453 UTC

[section ""data" . GHC.RTS.Flags.$fShowCCFlags_closure" {
     GHC.RTS.Flags.$fShowCCFlags_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.RTS.Flags.$fShowCCFlags_$cshowsPrec_closure+3;
         const GHC.RTS.Flags.$fShowCCFlags_$cshow_closure+1;
         const GHC.RTS.Flags.$fShowCCFlags_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.533199259 UTC

[section ""cstring" . f4_rcV5D_bytes" {
     f4_rcV5D_bytes:
         I8[] [68,101,98,117,103,70,108,97,103,115,32,123]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.5357577 UTC

[section ""data" . f5_rcV5E_closure" {
     f5_rcV5E_closure:
         const f5_rcV5E_info;
         const 0;
         const 0;
         const 0;
 },
 f5_rcV5E_entry() //  [R1]
         { []
         }
     {offset
       cd6K0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd6K1; else goto cd6K2;
       cd6K1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6K2: // global
           (_cd6JX::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cd6JX::I64 == 0) goto cd6JZ; else goto cd6JY;
       cd6JZ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cd6JY: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cd6JX::I64;
           R2 = f4_rcV5D_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f5_rcV5E_info" {
     f5_rcV5E_info:
         const f5_rcV5E_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.539235506 UTC

[section ""cstring" . lvl36_rcV5F_bytes" {
     lvl36_rcV5F_bytes:
         I8[] [115,99,104,101,100,117,108,101,114,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.540910838 UTC

[section ""cstring" . lvl37_rcV5G_bytes" {
     lvl37_rcV5G_bytes:
         I8[] [105,110,116,101,114,112,114,101,116,101,114,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.542647237 UTC

[section ""cstring" . lvl38_rcV5H_bytes" {
     lvl38_rcV5H_bytes:
         I8[] [119,101,97,107,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.544325028 UTC

[section ""cstring" . lvl39_rcV5I_bytes" {
     lvl39_rcV5I_bytes:
         I8[] [103,99,99,97,102,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.545940082 UTC

[section ""cstring" . lvl40_rcV5J_bytes" {
     lvl40_rcV5J_bytes:
         I8[] [103,99,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.547600395 UTC

[section ""cstring" . lvl41_rcV5K_bytes" {
     lvl41_rcV5K_bytes:
         I8[] [98,108,111,99,107,95,97,108,108,111,99,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.549694929 UTC

[section ""cstring" . lvl42_rcV5L_bytes" {
     lvl42_rcV5L_bytes:
         I8[] [115,97,110,105,116,121,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.55184785 UTC

[section ""cstring" . lvl43_rcV5M_bytes" {
     lvl43_rcV5M_bytes:
         I8[] [115,116,97,98,108,101,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.553506313 UTC

[section ""cstring" . lvl44_rcV5N_bytes" {
     lvl44_rcV5N_bytes:
         I8[] [112,114,111,102,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.555101277 UTC

[section ""cstring" . lvl45_rcV5O_bytes" {
     lvl45_rcV5O_bytes:
         I8[] [108,105,110,107,101,114,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.556801433 UTC

[section ""cstring" . lvl46_rcV5P_bytes" {
     lvl46_rcV5P_bytes:
         I8[] [97,112,112,108,121,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.558522949 UTC

[section ""cstring" . lvl47_rcV5Q_bytes" {
     lvl47_rcV5Q_bytes:
         I8[] [115,116,109,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.560201974 UTC

[section ""cstring" . lvl48_rcV5R_bytes" {
     lvl48_rcV5R_bytes:
         I8[] [115,113,117,101,101,122,101,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.562460912 UTC

[section ""cstring" . lvl49_rcV5S_bytes" {
     lvl49_rcV5S_bytes:
         I8[] [104,112,99,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.564125793 UTC

[section ""cstring" . lvl50_rcV5T_bytes" {
     lvl50_rcV5T_bytes:
         I8[] [115,112,97,114,107,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.616673293 UTC

[section ""data" . GHC.RTS.Flags.$fShowDebugFlags_$cshowsPrec_closure" {
     GHC.RTS.Flags.$fShowDebugFlags_$cshowsPrec_closure:
         const GHC.RTS.Flags.$fShowDebugFlags_$cshowsPrec_info;
         const 0;
 },
 sat_scVhy_entry() //  [R1]
         { []
         }
     {offset
       cd6NN: // global
           R3 = P64[R1 + 16];
           R2 = g_rcV52_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVhy_info" {
     sat_scVhy_info:
         const sat_scVhy_entry;
         const 1;
         const 4294967312;
         const ScWiZ_srt+536;
 },
 sat_scVhz_entry() //  [R1]
         { []
         }
     {offset
       cd6NW: // global
           R3 = P64[R1 + 16];
           R2 = g_rcV52_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVhz_info" {
     sat_scVhz_info:
         const sat_scVhz_entry;
         const 1;
         const 4294967312;
         const ScWiZ_srt+536;
 },
 section ""relreadonly" . ud6YT_srtd" {
     ud6YT_srtd:
         const ScWiZ_srt+128;
         const 52;
         const 2251799813685251;
 },
 sat_scVhA_entry() //  [R1]
         { []
         }
     {offset
       cd6O3: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cd6O4; else goto cd6O5;
       cd6O4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6O5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cd6NE_info;
           _scVhi::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _scVhi::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ud6Oc; else goto cd6NF;
       ud6Oc: // global
           call _cd6NE(R1) args: 0, res: 0, upd: 0;
       cd6NF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVhA_info" {
     sat_scVhA_info:
         const sat_scVhA_entry;
         const 2;
         const 18446744069414584338;
         const ud6YT_srtd;
 },
 section ""relreadonly" . ud6YU_srtd" {
     ud6YU_srtd:
         const ScWiZ_srt+128;
         const 52;
         const 2251799813685251;
 },
 _cd6NE() //  [R1]
         { []
         }
     {offset
       cd6NE: // global
           _scVhi::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cd6O0; else goto cd6O1;
       cd6O0: // global
           Hp = Hp + 24;
           _scVhx::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cd6Ob; else goto cd6O7;
       cd6O7: // global
           I64[Hp - 16] = sat_scVhy_info;
           P64[Hp] = _scVhi::P64;
           R3 = Hp - 16;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cd6O1: // global
           Hp = Hp + 24;
           _scVhx::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cd6Ob; else goto cd6Oa;
       cd6Ob: // global
           HpAlloc = 24;
           R1 = _scVhx::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cd6Oa: // global
           I64[Hp - 16] = sat_scVhz_info;
           P64[Hp] = _scVhi::P64;
           R3 = Hp - 16;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd6NE_info" {
     block_cd6NE_info:
         const _cd6NE;
         const 1;
         const 18446744069414584350;
         const ud6YU_srtd;
 },
 section ""relreadonly" . ud6YV_srtd" {
     ud6YV_srtd:
         const ScWiZ_srt+128;
         const 52;
         const 2251799813685251;
 },
 sat_scVhB_entry() //  [R1]
         { []
         }
     {offset
       cd6Od: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cd6Oh; else goto cd6Og;
       cd6Oh: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6Og: // global
           _scVhe::P64 = P64[R1 + 16];
           _scVhi::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_scVhA_info;
           P64[Hp - 8] = _scVhe::P64;
           P64[Hp] = _scVhi::P64;
           R3 = Hp - 24;
           R2 = lvl50_rcV5T_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVhB_info" {
     sat_scVhB_info:
         const sat_scVhB_entry;
         const 2;
         const 18446744069414584338;
         const ud6YV_srtd;
 },
 section ""relreadonly" . ud6YW_srtd" {
     ud6YW_srtd:
         const ScWiZ_srt+128;
         const 52;
         const 2269391999729667;
 },
 sat_scVhC_entry() //  [R1]
         { []
         }
     {offset
       cd6Oi: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cd6Om; else goto cd6Ol;
       cd6Om: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6Ol: // global
           _scVhe::P64 = P64[R1 + 16];
           _scVhi::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_scVhB_info;
           P64[Hp - 8] = _scVhe::P64;
           P64[Hp] = _scVhi::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVhC_info" {
     sat_scVhC_info:
         const sat_scVhC_entry;
         const 2;
         const 18446744069414584338;
         const ud6YW_srtd;
 },
 sat_scVhE_entry() //  [R1]
         { []
         }
     {offset
       cd6OK: // global
           R3 = P64[R1 + 16];
           R2 = g_rcV52_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVhE_info" {
     sat_scVhE_info:
         const sat_scVhE_entry;
         const 1;
         const 4294967312;
         const ScWiZ_srt+536;
 },
 sat_scVhF_entry() //  [R1]
         { []
         }
     {offset
       cd6OT: // global
           R3 = P64[R1 + 16];
           R2 = g_rcV52_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVhF_info" {
     sat_scVhF_info:
         const sat_scVhF_entry;
         const 1;
         const 4294967312;
         const ScWiZ_srt+536;
 },
 section ""relreadonly" . ud6YX_srtd" {
     ud6YX_srtd:
         const ScWiZ_srt+128;
         const 52;
         const 2251799813685251;
 },
 sat_scVhG_entry() //  [R1]
         { []
         }
     {offset
       cd6P0: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cd6P1; else goto cd6P2;
       cd6P1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6P2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cd6OB_info;
           _scVhi::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _scVhi::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ud6P9; else goto cd6OC;
       ud6P9: // global
           call _cd6OB(R1) args: 0, res: 0, upd: 0;
       cd6OC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVhG_info" {
     sat_scVhG_info:
         const sat_scVhG_entry;
         const 2;
         const 18446744069414584338;
         const ud6YX_srtd;
 },
 section ""relreadonly" . ud6YY_srtd" {
     ud6YY_srtd:
         const ScWiZ_srt+128;
         const 52;
         const 2251799813685251;
 },
 _cd6OB() //  [R1]
         { []
         }
     {offset
       cd6OB: // global
           _scVhi::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cd6OX; else goto cd6OY;
       cd6OX: // global
           Hp = Hp + 24;
           _scVhD::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cd6P8; else goto cd6P4;
       cd6P4: // global
           I64[Hp - 16] = sat_scVhE_info;
           P64[Hp] = _scVhi::P64;
           R3 = Hp - 16;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cd6OY: // global
           Hp = Hp + 24;
           _scVhD::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cd6P8; else goto cd6P7;
       cd6P8: // global
           HpAlloc = 24;
           R1 = _scVhD::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cd6P7: // global
           I64[Hp - 16] = sat_scVhF_info;
           P64[Hp] = _scVhi::P64;
           R3 = Hp - 16;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd6OB_info" {
     block_cd6OB_info:
         const _cd6OB;
         const 1;
         const 18446744069414584350;
         const ud6YY_srtd;
 },
 section ""relreadonly" . ud6YZ_srtd" {
     ud6YZ_srtd:
         const ScWiZ_srt+128;
         const 52;
         const 2251799813685251;
 },
 sat_scVhH_entry() //  [R1]
         { []
         }
     {offset
       cd6Pa: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cd6Pe; else goto cd6Pd;
       cd6Pe: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6Pd: // global
           _scVhe::P64 = P64[R1 + 16];
           _scVhi::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_scVhG_info;
           P64[Hp - 8] = _scVhe::P64;
           P64[Hp] = _scVhi::P64;
           R3 = Hp - 24;
           R2 = lvl50_rcV5T_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVhH_info" {
     sat_scVhH_info:
         const sat_scVhH_entry;
         const 2;
         const 18446744069414584338;
         const ud6YZ_srtd;
 },
 section ""relreadonly" . ud6Z0_srtd" {
     ud6Z0_srtd:
         const ScWiZ_srt+128;
         const 52;
         const 2269391999729667;
 },
 sat_scVhI_entry() //  [R1]
         { []
         }
     {offset
       cd6Pf: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cd6Pj; else goto cd6Pi;
       cd6Pj: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6Pi: // global
           _scVhe::P64 = P64[R1 + 16];
           _scVhi::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_scVhH_info;
           P64[Hp - 8] = _scVhe::P64;
           P64[Hp] = _scVhi::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVhI_info" {
     sat_scVhI_info:
         const sat_scVhI_entry;
         const 2;
         const 18446744069414584338;
         const ud6Z0_srtd;
 },
 section ""relreadonly" . ud6Z1_srtd" {
     ud6Z1_srtd:
         const ScWiZ_srt+128;
         const 52;
         const 2269391999729667;
 },
 sat_scVhJ_entry() //  [R1]
         { []
         }
     {offset
       cd6Po: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cd6Pp; else goto cd6Pq;
       cd6Pp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6Pq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cd6Nn_info;
           _scVhe::P64 = P64[R1 + 24];
           _scVhi::P64 = P64[R1 + 32];
           R1 = P64[R1 + 16];
           P64[Sp - 32] = _scVhe::P64;
           P64[Sp - 24] = _scVhi::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ud6Px; else goto cd6No;
       ud6Px: // global
           call _cd6Nn(R1) args: 0, res: 0, upd: 0;
       cd6No: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVhJ_info" {
     sat_scVhJ_info:
         const sat_scVhJ_entry;
         const 3;
         const 18446744069414584335;
         const ud6Z1_srtd;
 },
 section ""relreadonly" . ud6Z2_srtd" {
     ud6Z2_srtd:
         const ScWiZ_srt+128;
         const 52;
         const 2269391999729667;
 },
 _cd6Nn() //  [R1]
         { []
         }
     {offset
       cd6Nn: // global
           _scVhe::P64 = P64[Sp + 8];
           _scVhi::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto cd6Pl; else goto cd6Pm;
       cd6Pl: // global
           Hp = Hp + 32;
           _scVhw::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cd6Pw; else goto cd6Ps;
       cd6Ps: // global
           I64[Hp - 24] = sat_scVhC_info;
           P64[Hp - 8] = _scVhe::P64;
           P64[Hp] = _scVhi::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cd6Pm: // global
           Hp = Hp + 32;
           _scVhw::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cd6Pw; else goto cd6Pv;
       cd6Pw: // global
           HpAlloc = 32;
           R1 = _scVhw::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cd6Pv: // global
           I64[Hp - 24] = sat_scVhI_info;
           P64[Hp - 8] = _scVhe::P64;
           P64[Hp] = _scVhi::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd6Nn_info" {
     block_cd6Nn_info:
         const _cd6Nn;
         const 2;
         const 18446744069414584350;
         const ud6Z2_srtd;
 },
 section ""relreadonly" . ud6Z3_srtd" {
     ud6Z3_srtd:
         const ScWiZ_srt+128;
         const 52;
         const 2269391999729667;
 },
 sat_scVhK_entry() //  [R1]
         { []
         }
     {offset
       cd6Py: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cd6PC; else goto cd6PB;
       cd6PC: // global
           HpAlloc = 40;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6PB: // global
           _scVhd::P64 = P64[R1 + 16];
           _scVhe::P64 = P64[R1 + 24];
           _scVhi::P64 = P64[R1 + 32];
           I64[Hp - 32] = sat_scVhJ_info;
           P64[Hp - 16] = _scVhd::P64;
           P64[Hp - 8] = _scVhe::P64;
           P64[Hp] = _scVhi::P64;
           R3 = Hp - 32;
           R2 = lvl49_rcV5S_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVhK_info" {
     sat_scVhK_info:
         const sat_scVhK_entry;
         const 3;
         const 18446744069414584335;
         const ud6Z3_srtd;
 },
 section ""relreadonly" . ud6Z4_srtd" {
     ud6Z4_srtd:
         const ScWiZ_srt+128;
         const 52;
         const 2269391999729667;
 },
 sat_scVhL_entry() //  [R1]
         { []
         }
     {offset
       cd6PD: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cd6PH; else goto cd6PG;
       cd6PH: // global
           HpAlloc = 40;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6PG: // global
           _scVhd::P64 = P64[R1 + 16];
           _scVhe::P64 = P64[R1 + 24];
           _scVhi::P64 = P64[R1 + 32];
           I64[Hp - 32] = sat_scVhK_info;
           P64[Hp - 16] = _scVhd::P64;
           P64[Hp - 8] = _scVhe::P64;
           P64[Hp] = _scVhi::P64;
           R3 = Hp - 32;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVhL_info" {
     sat_scVhL_info:
         const sat_scVhL_entry;
         const 3;
         const 18446744069414584335;
         const ud6Z4_srtd;
 },
 sat_scVhO_entry() //  [R1]
         { []
         }
     {offset
       cd6Qm: // global
           R3 = P64[R1 + 16];
           R2 = g_rcV52_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVhO_info" {
     sat_scVhO_info:
         const sat_scVhO_entry;
         const 1;
         const 4294967312;
         const ScWiZ_srt+536;
 },
 sat_scVhP_entry() //  [R1]
         { []
         }
     {offset
       cd6Qv: // global
           R3 = P64[R1 + 16];
           R2 = g_rcV52_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVhP_info" {
     sat_scVhP_info:
         const sat_scVhP_entry;
         const 1;
         const 4294967312;
         const ScWiZ_srt+536;
 },
 section ""relreadonly" . ud6Z5_srtd" {
     ud6Z5_srtd:
         const ScWiZ_srt+128;
         const 52;
         const 2251799813685251;
 },
 sat_scVhQ_entry() //  [R1]
         { []
         }
     {offset
       cd6QC: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cd6QD; else goto cd6QE;
       cd6QD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6QE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cd6Qd_info;
           _scVhi::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _scVhi::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ud6QL; else goto cd6Qe;
       ud6QL: // global
           call _cd6Qd(R1) args: 0, res: 0, upd: 0;
       cd6Qe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVhQ_info" {
     sat_scVhQ_info:
         const sat_scVhQ_entry;
         const 2;
         const 18446744069414584338;
         const ud6Z5_srtd;
 },
 section ""relreadonly" . ud6Z6_srtd" {
     ud6Z6_srtd:
         const ScWiZ_srt+128;
         const 52;
         const 2251799813685251;
 },
 _cd6Qd() //  [R1]
         { []
         }
     {offset
       cd6Qd: // global
           _scVhi::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cd6Qz; else goto cd6QA;
       cd6Qz: // global
           Hp = Hp + 24;
           _scVhN::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cd6QK; else goto cd6QG;
       cd6QG: // global
           I64[Hp - 16] = sat_scVhO_info;
           P64[Hp] = _scVhi::P64;
           R3 = Hp - 16;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cd6QA: // global
           Hp = Hp + 24;
           _scVhN::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cd6QK; else goto cd6QJ;
       cd6QK: // global
           HpAlloc = 24;
           R1 = _scVhN::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cd6QJ: // global
           I64[Hp - 16] = sat_scVhP_info;
           P64[Hp] = _scVhi::P64;
           R3 = Hp - 16;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd6Qd_info" {
     block_cd6Qd_info:
         const _cd6Qd;
         const 1;
         const 18446744069414584350;
         const ud6Z6_srtd;
 },
 section ""relreadonly" . ud6Z7_srtd" {
     ud6Z7_srtd:
         const ScWiZ_srt+128;
         const 52;
         const 2251799813685251;
 },
 sat_scVhR_entry() //  [R1]
         { []
         }
     {offset
       cd6QM: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cd6QQ; else goto cd6QP;
       cd6QQ: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6QP: // global
           _scVhe::P64 = P64[R1 + 16];
           _scVhi::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_scVhQ_info;
           P64[Hp - 8] = _scVhe::P64;
           P64[Hp] = _scVhi::P64;
           R3 = Hp - 24;
           R2 = lvl50_rcV5T_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVhR_info" {
     sat_scVhR_info:
         const sat_scVhR_entry;
         const 2;
         const 18446744069414584338;
         const ud6Z7_srtd;
 },
 section ""relreadonly" . ud6Z8_srtd" {
     ud6Z8_srtd:
         const ScWiZ_srt+128;
         const 52;
         const 2269391999729667;
 },
 sat_scVhS_entry() //  [R1]
         { []
         }
     {offset
       cd6QR: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cd6QV; else goto cd6QU;
       cd6QV: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6QU: // global
           _scVhe::P64 = P64[R1 + 16];
           _scVhi::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_scVhR_info;
           P64[Hp - 8] = _scVhe::P64;
           P64[Hp] = _scVhi::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVhS_info" {
     sat_scVhS_info:
         const sat_scVhS_entry;
         const 2;
         const 18446744069414584338;
         const ud6Z8_srtd;
 },
 sat_scVhU_entry() //  [R1]
         { []
         }
     {offset
       cd6Rj: // global
           R3 = P64[R1 + 16];
           R2 = g_rcV52_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVhU_info" {
     sat_scVhU_info:
         const sat_scVhU_entry;
         const 1;
         const 4294967312;
         const ScWiZ_srt+536;
 },
 sat_scVhV_entry() //  [R1]
         { []
         }
     {offset
       cd6Rs: // global
           R3 = P64[R1 + 16];
           R2 = g_rcV52_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVhV_info" {
     sat_scVhV_info:
         const sat_scVhV_entry;
         const 1;
         const 4294967312;
         const ScWiZ_srt+536;
 },
 section ""relreadonly" . ud6Z9_srtd" {
     ud6Z9_srtd:
         const ScWiZ_srt+128;
         const 52;
         const 2251799813685251;
 },
 sat_scVhW_entry() //  [R1]
         { []
         }
     {offset
       cd6Rz: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cd6RA; else goto cd6RB;
       cd6RA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6RB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cd6Ra_info;
           _scVhi::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _scVhi::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ud6RI; else goto cd6Rb;
       ud6RI: // global
           call _cd6Ra(R1) args: 0, res: 0, upd: 0;
       cd6Rb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVhW_info" {
     sat_scVhW_info:
         const sat_scVhW_entry;
         const 2;
         const 18446744069414584338;
         const ud6Z9_srtd;
 },
 section ""relreadonly" . ud6Za_srtd" {
     ud6Za_srtd:
         const ScWiZ_srt+128;
         const 52;
         const 2251799813685251;
 },
 _cd6Ra() //  [R1]
         { []
         }
     {offset
       cd6Ra: // global
           _scVhi::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cd6Rw; else goto cd6Rx;
       cd6Rw: // global
           Hp = Hp + 24;
           _scVhT::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cd6RH; else goto cd6RD;
       cd6RD: // global
           I64[Hp - 16] = sat_scVhU_info;
           P64[Hp] = _scVhi::P64;
           R3 = Hp - 16;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cd6Rx: // global
           Hp = Hp + 24;
           _scVhT::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cd6RH; else goto cd6RG;
       cd6RH: // global
           HpAlloc = 24;
           R1 = _scVhT::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cd6RG: // global
           I64[Hp - 16] = sat_scVhV_info;
           P64[Hp] = _scVhi::P64;
           R3 = Hp - 16;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd6Ra_info" {
     block_cd6Ra_info:
         const _cd6Ra;
         const 1;
         const 18446744069414584350;
         const ud6Za_srtd;
 },
 section ""relreadonly" . ud6Zb_srtd" {
     ud6Zb_srtd:
         const ScWiZ_srt+128;
         const 52;
         const 2251799813685251;
 },
 sat_scVhX_entry() //  [R1]
         { []
         }
     {offset
       cd6RJ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cd6RN; else goto cd6RM;
       cd6RN: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6RM: // global
           _scVhe::P64 = P64[R1 + 16];
           _scVhi::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_scVhW_info;
           P64[Hp - 8] = _scVhe::P64;
           P64[Hp] = _scVhi::P64;
           R3 = Hp - 24;
           R2 = lvl50_rcV5T_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVhX_info" {
     sat_scVhX_info:
         const sat_scVhX_entry;
         const 2;
         const 18446744069414584338;
         const ud6Zb_srtd;
 },
 section ""relreadonly" . ud6Zc_srtd" {
     ud6Zc_srtd:
         const ScWiZ_srt+128;
         const 52;
         const 2269391999729667;
 },
 sat_scVhY_entry() //  [R1]
         { []
         }
     {offset
       cd6RO: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cd6RS; else goto cd6RR;
       cd6RS: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6RR: // global
           _scVhe::P64 = P64[R1 + 16];
           _scVhi::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_scVhX_info;
           P64[Hp - 8] = _scVhe::P64;
           P64[Hp] = _scVhi::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVhY_info" {
     sat_scVhY_info:
         const sat_scVhY_entry;
         const 2;
         const 18446744069414584338;
         const ud6Zc_srtd;
 },
 section ""relreadonly" . ud6Zd_srtd" {
     ud6Zd_srtd:
         const ScWiZ_srt+128;
         const 52;
         const 2269391999729667;
 },
 sat_scVhZ_entry() //  [R1]
         { []
         }
     {offset
       cd6RX: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cd6RY; else goto cd6RZ;
       cd6RY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6RZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cd6PW_info;
           _scVhe::P64 = P64[R1 + 24];
           _scVhi::P64 = P64[R1 + 32];
           R1 = P64[R1 + 16];
           P64[Sp - 32] = _scVhe::P64;
           P64[Sp - 24] = _scVhi::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ud6S6; else goto cd6PX;
       ud6S6: // global
           call _cd6PW(R1) args: 0, res: 0, upd: 0;
       cd6PX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVhZ_info" {
     sat_scVhZ_info:
         const sat_scVhZ_entry;
         const 3;
         const 18446744069414584335;
         const ud6Zd_srtd;
 },
 section ""relreadonly" . ud6Ze_srtd" {
     ud6Ze_srtd:
         const ScWiZ_srt+128;
         const 52;
         const 2269391999729667;
 },
 _cd6PW() //  [R1]
         { []
         }
     {offset
       cd6PW: // global
           _scVhe::P64 = P64[Sp + 8];
           _scVhi::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto cd6RU; else goto cd6RV;
       cd6RU: // global
           Hp = Hp + 32;
           _scVhM::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cd6S5; else goto cd6S1;
       cd6S1: // global
           I64[Hp - 24] = sat_scVhS_info;
           P64[Hp - 8] = _scVhe::P64;
           P64[Hp] = _scVhi::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cd6RV: // global
           Hp = Hp + 32;
           _scVhM::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cd6S5; else goto cd6S4;
       cd6S5: // global
           HpAlloc = 32;
           R1 = _scVhM::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cd6S4: // global
           I64[Hp - 24] = sat_scVhY_info;
           P64[Hp - 8] = _scVhe::P64;
           P64[Hp] = _scVhi::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd6PW_info" {
     block_cd6PW_info:
         const _cd6PW;
         const 2;
         const 18446744069414584350;
         const ud6Ze_srtd;
 },
 section ""relreadonly" . ud6Zf_srtd" {
     ud6Zf_srtd:
         const ScWiZ_srt+128;
         const 52;
         const 2269391999729667;
 },
 sat_scVi0_entry() //  [R1]
         { []
         }
     {offset
       cd6S7: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cd6Sb; else goto cd6Sa;
       cd6Sb: // global
           HpAlloc = 40;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6Sa: // global
           _scVhd::P64 = P64[R1 + 16];
           _scVhe::P64 = P64[R1 + 24];
           _scVhi::P64 = P64[R1 + 32];
           I64[Hp - 32] = sat_scVhZ_info;
           P64[Hp - 16] = _scVhd::P64;
           P64[Hp - 8] = _scVhe::P64;
           P64[Hp] = _scVhi::P64;
           R3 = Hp - 32;
           R2 = lvl49_rcV5S_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVi0_info" {
     sat_scVi0_info:
         const sat_scVi0_entry;
         const 3;
         const 18446744069414584335;
         const ud6Zf_srtd;
 },
 section ""relreadonly" . ud6Zg_srtd" {
     ud6Zg_srtd:
         const ScWiZ_srt+128;
         const 52;
         const 2269391999729667;
 },
 sat_scVi1_entry() //  [R1]
         { []
         }
     {offset
       cd6Sc: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cd6Sg; else goto cd6Sf;
       cd6Sg: // global
           HpAlloc = 40;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6Sf: // global
           _scVhd::P64 = P64[R1 + 16];
           _scVhe::P64 = P64[R1 + 24];
           _scVhi::P64 = P64[R1 + 32];
           I64[Hp - 32] = sat_scVi0_info;
           P64[Hp - 16] = _scVhd::P64;
           P64[Hp - 8] = _scVhe::P64;
           P64[Hp] = _scVhi::P64;
           R3 = Hp - 32;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVi1_info" {
     sat_scVi1_info:
         const sat_scVi1_entry;
         const 3;
         const 18446744069414584335;
         const ud6Zg_srtd;
 },
 section ""relreadonly" . ud6Zh_srtd" {
     ud6Zh_srtd:
         const ScWiZ_srt+128;
         const 52;
         const 2269391999729667;
 },
 sat_scVi2_entry() //  [R1]
         { []
         }
     {offset
       cd6Sl: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cd6Sm; else goto cd6Sn;
       cd6Sm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6Sn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_cd6N6_info;
           _scVhd::P64 = P64[R1 + 24];
           _scVhe::P64 = P64[R1 + 32];
           _scVhi::P64 = P64[R1 + 40];
           R1 = P64[R1 + 16];
           P64[Sp - 40] = _scVhd::P64;
           P64[Sp - 32] = _scVhe::P64;
           P64[Sp - 24] = _scVhi::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto ud6Su; else goto cd6N7;
       ud6Su: // global
           call _cd6N6(R1) args: 0, res: 0, upd: 0;
       cd6N7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVi2_info" {
     sat_scVi2_info:
         const sat_scVi2_entry;
         const 4;
         const 18446744069414584335;
         const ud6Zh_srtd;
 },
 section ""relreadonly" . ud6Zi_srtd" {
     ud6Zi_srtd:
         const ScWiZ_srt+128;
         const 52;
         const 2269391999729667;
 },
 _cd6N6() //  [R1]
         { []
         }
     {offset
       cd6N6: // global
           _scVhd::P64 = P64[Sp + 8];
           _scVhe::P64 = P64[Sp + 16];
           _scVhi::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto cd6Si; else goto cd6Sj;
       cd6Si: // global
           Hp = Hp + 40;
           _scVhv::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cd6St; else goto cd6Sp;
       cd6Sp: // global
           I64[Hp - 32] = sat_scVhL_info;
           P64[Hp - 16] = _scVhd::P64;
           P64[Hp - 8] = _scVhe::P64;
           P64[Hp] = _scVhi::P64;
           R3 = Hp - 32;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 32;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cd6Sj: // global
           Hp = Hp + 40;
           _scVhv::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cd6St; else goto cd6Ss;
       cd6St: // global
           HpAlloc = 40;
           R1 = _scVhv::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cd6Ss: // global
           I64[Hp - 32] = sat_scVi1_info;
           P64[Hp - 16] = _scVhd::P64;
           P64[Hp - 8] = _scVhe::P64;
           P64[Hp] = _scVhi::P64;
           R3 = Hp - 32;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 32;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd6N6_info" {
     block_cd6N6_info:
         const _cd6N6;
         const 3;
         const 18446744069414584350;
         const ud6Zi_srtd;
 },
 section ""relreadonly" . ud6Zj_srtd" {
     ud6Zj_srtd:
         const ScWiZ_srt+128;
         const 52;
         const 2269391999729667;
 },
 sat_scVi3_entry() //  [R1]
         { []
         }
     {offset
       cd6Sv: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cd6Sz; else goto cd6Sy;
       cd6Sz: // global
           HpAlloc = 48;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6Sy: // global
           _scVhc::P64 = P64[R1 + 16];
           _scVhd::P64 = P64[R1 + 24];
           _scVhe::P64 = P64[R1 + 32];
           _scVhi::P64 = P64[R1 + 40];
           I64[Hp - 40] = sat_scVi2_info;
           P64[Hp - 24] = _scVhc::P64;
           P64[Hp - 16] = _scVhd::P64;
           P64[Hp - 8] = _scVhe::P64;
           P64[Hp] = _scVhi::P64;
           R3 = Hp - 40;
           R2 = lvl48_rcV5R_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVi3_info" {
     sat_scVi3_info:
         const sat_scVi3_entry;
         const 4;
         const 18446744069414584335;
         const ud6Zj_srtd;
 },
 section ""relreadonly" . ud6Zk_srtd" {
     ud6Zk_srtd:
         const ScWiZ_srt+128;
         const 52;
         const 2269391999729667;
 },
 eta12_scVhu_entry() //  [R1]
         { []
         }
     {offset
       cd6SA: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cd6SE; else goto cd6SD;
       cd6SE: // global
           HpAlloc = 48;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6SD: // global
           _scVhc::P64 = P64[R1 + 16];
           _scVhd::P64 = P64[R1 + 24];
           _scVhe::P64 = P64[R1 + 32];
           _scVhi::P64 = P64[R1 + 40];
           I64[Hp - 40] = sat_scVi3_info;
           P64[Hp - 24] = _scVhc::P64;
           P64[Hp - 16] = _scVhd::P64;
           P64[Hp - 8] = _scVhe::P64;
           P64[Hp] = _scVhi::P64;
           R3 = Hp - 40;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . eta12_scVhu_info" {
     eta12_scVhu_info:
         const eta12_scVhu_entry;
         const 4;
         const 18446744069414584335;
         const ud6Zk_srtd;
 },
 section ""relreadonly" . ud6Zl_srtd" {
     ud6Zl_srtd:
         const ScWiZ_srt+128;
         const 52;
         const 2269391999729667;
 },
 sat_scVi5_entry() //  [R1]
         { []
         }
     {offset
       cd6SM: // global
           _scVi5::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cd6SN; else goto cd6SO;
       cd6SO: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cd6SQ; else goto cd6SP;
       cd6SQ: // global
           HpAlloc = 48;
           goto cd6SN;
       cd6SN: // global
           R1 = _scVi5::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6SP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVi5::P64;
           _scVhb::P64 = P64[_scVi5::P64 + 16];
           _scVhc::P64 = P64[_scVi5::P64 + 24];
           _scVhd::P64 = P64[_scVi5::P64 + 32];
           _scVhe::P64 = P64[_scVi5::P64 + 40];
           _scVhi::P64 = P64[_scVi5::P64 + 48];
           I64[Hp - 40] = eta12_scVhu_info;
           P64[Hp - 24] = _scVhc::P64;
           P64[Hp - 16] = _scVhd::P64;
           P64[Hp - 8] = _scVhe::P64;
           P64[Hp] = _scVhi::P64;
           I64[Sp - 32] = block_cd6SF_info;
           R1 = _scVhb::P64;
           P64[Sp - 24] = Hp - 40;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ud6SX; else goto cd6SG;
       ud6SX: // global
           call _cd6SF(R1) args: 0, res: 0, upd: 0;
       cd6SG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVi5_info" {
     sat_scVi5_info:
         const sat_scVi5_entry;
         const 5;
         const 18446744069414584335;
         const ud6Zl_srtd;
 },
 _cd6SF() //  [R1]
         { []
         }
     {offset
       cd6SF: // global
           _cd6MU::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cd6SJ; else goto cd6SK;
       cd6SJ: // global
           R3 = _cd6MU::P64;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cd6SK: // global
           R3 = _cd6MU::P64;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd6SF_info" {
     block_cd6SF_info:
         const _cd6SF;
         const 1;
         const 12884901918;
         const ScWiZ_srt+544;
 },
 sat_scVi6_entry() //  [R1]
         { []
         }
     {offset
       cd6SY: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cd6T2; else goto cd6T1;
       cd6T2: // global
           HpAlloc = 56;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6T1: // global
           _scVhb::P64 = P64[R1 + 16];
           _scVhc::P64 = P64[R1 + 24];
           _scVhd::P64 = P64[R1 + 32];
           _scVhe::P64 = P64[R1 + 40];
           _scVhi::P64 = P64[R1 + 48];
           I64[Hp - 48] = sat_scVi5_info;
           P64[Hp - 32] = _scVhb::P64;
           P64[Hp - 24] = _scVhc::P64;
           P64[Hp - 16] = _scVhd::P64;
           P64[Hp - 8] = _scVhe::P64;
           P64[Hp] = _scVhi::P64;
           R3 = Hp - 48;
           R2 = lvl47_rcV5Q_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVi6_info" {
     sat_scVi6_info:
         const sat_scVi6_entry;
         const 5;
         const 3852585664527;
         const ScWiZ_srt+480;
 },
 eta11_scVht_entry() //  [R1]
         { []
         }
     {offset
       cd6T3: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cd6T7; else goto cd6T6;
       cd6T7: // global
           HpAlloc = 56;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6T6: // global
           _scVhb::P64 = P64[R1 + 16];
           _scVhc::P64 = P64[R1 + 24];
           _scVhd::P64 = P64[R1 + 32];
           _scVhe::P64 = P64[R1 + 40];
           _scVhi::P64 = P64[R1 + 48];
           I64[Hp - 48] = sat_scVi6_info;
           P64[Hp - 32] = _scVhb::P64;
           P64[Hp - 24] = _scVhc::P64;
           P64[Hp - 16] = _scVhd::P64;
           P64[Hp - 8] = _scVhe::P64;
           P64[Hp] = _scVhi::P64;
           R3 = Hp - 48;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . eta11_scVht_info" {
     eta11_scVht_info:
         const eta11_scVht_entry;
         const 5;
         const 3852585664527;
         const ScWiZ_srt+480;
 },
 sat_scVi8_entry() //  [R1]
         { []
         }
     {offset
       cd6Tf: // global
           _scVi8::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cd6Tg; else goto cd6Th;
       cd6Th: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cd6Tj; else goto cd6Ti;
       cd6Tj: // global
           HpAlloc = 56;
           goto cd6Tg;
       cd6Tg: // global
           R1 = _scVi8::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6Ti: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVi8::P64;
           _scVha::P64 = P64[_scVi8::P64 + 16];
           _scVhb::P64 = P64[_scVi8::P64 + 24];
           _scVhc::P64 = P64[_scVi8::P64 + 32];
           _scVhd::P64 = P64[_scVi8::P64 + 40];
           _scVhe::P64 = P64[_scVi8::P64 + 48];
           _scVhi::P64 = P64[_scVi8::P64 + 56];
           I64[Hp - 48] = eta11_scVht_info;
           P64[Hp - 32] = _scVhb::P64;
           P64[Hp - 24] = _scVhc::P64;
           P64[Hp - 16] = _scVhd::P64;
           P64[Hp - 8] = _scVhe::P64;
           P64[Hp] = _scVhi::P64;
           I64[Sp - 32] = block_cd6T8_info;
           R1 = _scVha::P64;
           P64[Sp - 24] = Hp - 48;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ud6Tq; else goto cd6T9;
       ud6Tq: // global
           call _cd6T8(R1) args: 0, res: 0, upd: 0;
       cd6T9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVi8_info" {
     sat_scVi8_info:
         const sat_scVi8_entry;
         const 6;
         const 3852585664527;
         const ScWiZ_srt+480;
 },
 _cd6T8() //  [R1]
         { []
         }
     {offset
       cd6T8: // global
           _cd6MI::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cd6Tc; else goto cd6Td;
       cd6Tc: // global
           R3 = _cd6MI::P64;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cd6Td: // global
           R3 = _cd6MI::P64;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd6T8_info" {
     block_cd6T8_info:
         const _cd6T8;
         const 1;
         const 12884901918;
         const ScWiZ_srt+544;
 },
 sat_scVi9_entry() //  [R1]
         { []
         }
     {offset
       cd6Tr: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cd6Tv; else goto cd6Tu;
       cd6Tv: // global
           HpAlloc = 64;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6Tu: // global
           _scVha::P64 = P64[R1 + 16];
           _scVhb::P64 = P64[R1 + 24];
           _scVhc::P64 = P64[R1 + 32];
           _scVhd::P64 = P64[R1 + 40];
           _scVhe::P64 = P64[R1 + 48];
           _scVhi::P64 = P64[R1 + 56];
           I64[Hp - 56] = sat_scVi8_info;
           P64[Hp - 40] = _scVha::P64;
           P64[Hp - 32] = _scVhb::P64;
           P64[Hp - 24] = _scVhc::P64;
           P64[Hp - 16] = _scVhd::P64;
           P64[Hp - 8] = _scVhe::P64;
           P64[Hp] = _scVhi::P64;
           R3 = Hp - 56;
           R2 = lvl46_rcV5P_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVi9_info" {
     sat_scVi9_info:
         const sat_scVi9_entry;
         const 6;
         const 3852585664527;
         const ScWiZ_srt+480;
 },
 eta10_scVhs_entry() //  [R1]
         { []
         }
     {offset
       cd6Tw: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cd6TA; else goto cd6Tz;
       cd6TA: // global
           HpAlloc = 64;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6Tz: // global
           _scVha::P64 = P64[R1 + 16];
           _scVhb::P64 = P64[R1 + 24];
           _scVhc::P64 = P64[R1 + 32];
           _scVhd::P64 = P64[R1 + 40];
           _scVhe::P64 = P64[R1 + 48];
           _scVhi::P64 = P64[R1 + 56];
           I64[Hp - 56] = sat_scVi9_info;
           P64[Hp - 40] = _scVha::P64;
           P64[Hp - 32] = _scVhb::P64;
           P64[Hp - 24] = _scVhc::P64;
           P64[Hp - 16] = _scVhd::P64;
           P64[Hp - 8] = _scVhe::P64;
           P64[Hp] = _scVhi::P64;
           R3 = Hp - 56;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . eta10_scVhs_info" {
     eta10_scVhs_info:
         const eta10_scVhs_entry;
         const 6;
         const 3852585664527;
         const ScWiZ_srt+480;
 },
 sat_scVib_entry() //  [R1]
         { []
         }
     {offset
       cd6TI: // global
           _scVib::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cd6TJ; else goto cd6TK;
       cd6TK: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cd6TM; else goto cd6TL;
       cd6TM: // global
           HpAlloc = 64;
           goto cd6TJ;
       cd6TJ: // global
           R1 = _scVib::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6TL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVib::P64;
           _scVh9::P64 = P64[_scVib::P64 + 16];
           _scVha::P64 = P64[_scVib::P64 + 24];
           _scVhb::P64 = P64[_scVib::P64 + 32];
           _scVhc::P64 = P64[_scVib::P64 + 40];
           _scVhd::P64 = P64[_scVib::P64 + 48];
           _scVhe::P64 = P64[_scVib::P64 + 56];
           _scVhi::P64 = P64[_scVib::P64 + 64];
           I64[Hp - 56] = eta10_scVhs_info;
           P64[Hp - 40] = _scVha::P64;
           P64[Hp - 32] = _scVhb::P64;
           P64[Hp - 24] = _scVhc::P64;
           P64[Hp - 16] = _scVhd::P64;
           P64[Hp - 8] = _scVhe::P64;
           P64[Hp] = _scVhi::P64;
           I64[Sp - 32] = block_cd6TB_info;
           R1 = _scVh9::P64;
           P64[Sp - 24] = Hp - 56;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ud6TT; else goto cd6TC;
       ud6TT: // global
           call _cd6TB(R1) args: 0, res: 0, upd: 0;
       cd6TC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVib_info" {
     sat_scVib_info:
         const sat_scVib_entry;
         const 7;
         const 3852585664527;
         const ScWiZ_srt+480;
 },
 _cd6TB() //  [R1]
         { []
         }
     {offset
       cd6TB: // global
           _cd6Mw::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cd6TF; else goto cd6TG;
       cd6TF: // global
           R3 = _cd6Mw::P64;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cd6TG: // global
           R3 = _cd6Mw::P64;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd6TB_info" {
     block_cd6TB_info:
         const _cd6TB;
         const 1;
         const 12884901918;
         const ScWiZ_srt+544;
 },
 sat_scVic_entry() //  [R1]
         { []
         }
     {offset
       cd6TU: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cd6TY; else goto cd6TX;
       cd6TY: // global
           HpAlloc = 72;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6TX: // global
           _scVh9::P64 = P64[R1 + 16];
           _scVha::P64 = P64[R1 + 24];
           _scVhb::P64 = P64[R1 + 32];
           _scVhc::P64 = P64[R1 + 40];
           _scVhd::P64 = P64[R1 + 48];
           _scVhe::P64 = P64[R1 + 56];
           _scVhi::P64 = P64[R1 + 64];
           I64[Hp - 64] = sat_scVib_info;
           P64[Hp - 48] = _scVh9::P64;
           P64[Hp - 40] = _scVha::P64;
           P64[Hp - 32] = _scVhb::P64;
           P64[Hp - 24] = _scVhc::P64;
           P64[Hp - 16] = _scVhd::P64;
           P64[Hp - 8] = _scVhe::P64;
           P64[Hp] = _scVhi::P64;
           R3 = Hp - 64;
           R2 = lvl45_rcV5O_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVic_info" {
     sat_scVic_info:
         const sat_scVic_entry;
         const 7;
         const 3852585664527;
         const ScWiZ_srt+480;
 },
 eta9_scVhr_entry() //  [R1]
         { []
         }
     {offset
       cd6TZ: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cd6U3; else goto cd6U2;
       cd6U3: // global
           HpAlloc = 72;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6U2: // global
           _scVh9::P64 = P64[R1 + 16];
           _scVha::P64 = P64[R1 + 24];
           _scVhb::P64 = P64[R1 + 32];
           _scVhc::P64 = P64[R1 + 40];
           _scVhd::P64 = P64[R1 + 48];
           _scVhe::P64 = P64[R1 + 56];
           _scVhi::P64 = P64[R1 + 64];
           I64[Hp - 64] = sat_scVic_info;
           P64[Hp - 48] = _scVh9::P64;
           P64[Hp - 40] = _scVha::P64;
           P64[Hp - 32] = _scVhb::P64;
           P64[Hp - 24] = _scVhc::P64;
           P64[Hp - 16] = _scVhd::P64;
           P64[Hp - 8] = _scVhe::P64;
           P64[Hp] = _scVhi::P64;
           R3 = Hp - 64;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . eta9_scVhr_info" {
     eta9_scVhr_info:
         const eta9_scVhr_entry;
         const 7;
         const 3852585664527;
         const ScWiZ_srt+480;
 },
 sat_scVie_entry() //  [R1]
         { []
         }
     {offset
       cd6Ub: // global
           _scVie::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cd6Uc; else goto cd6Ud;
       cd6Ud: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cd6Uf; else goto cd6Ue;
       cd6Uf: // global
           HpAlloc = 72;
           goto cd6Uc;
       cd6Uc: // global
           R1 = _scVie::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6Ue: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVie::P64;
           _scVh8::P64 = P64[_scVie::P64 + 16];
           _scVh9::P64 = P64[_scVie::P64 + 24];
           _scVha::P64 = P64[_scVie::P64 + 32];
           _scVhb::P64 = P64[_scVie::P64 + 40];
           _scVhc::P64 = P64[_scVie::P64 + 48];
           _scVhd::P64 = P64[_scVie::P64 + 56];
           _scVhe::P64 = P64[_scVie::P64 + 64];
           _scVhi::P64 = P64[_scVie::P64 + 72];
           I64[Hp - 64] = eta9_scVhr_info;
           P64[Hp - 48] = _scVh9::P64;
           P64[Hp - 40] = _scVha::P64;
           P64[Hp - 32] = _scVhb::P64;
           P64[Hp - 24] = _scVhc::P64;
           P64[Hp - 16] = _scVhd::P64;
           P64[Hp - 8] = _scVhe::P64;
           P64[Hp] = _scVhi::P64;
           I64[Sp - 32] = block_cd6U4_info;
           R1 = _scVh8::P64;
           P64[Sp - 24] = Hp - 64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ud6Um; else goto cd6U5;
       ud6Um: // global
           call _cd6U4(R1) args: 0, res: 0, upd: 0;
       cd6U5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVie_info" {
     sat_scVie_info:
         const sat_scVie_entry;
         const 8;
         const 3852585664527;
         const ScWiZ_srt+480;
 },
 _cd6U4() //  [R1]
         { []
         }
     {offset
       cd6U4: // global
           _cd6Mk::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cd6U8; else goto cd6U9;
       cd6U8: // global
           R3 = _cd6Mk::P64;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cd6U9: // global
           R3 = _cd6Mk::P64;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd6U4_info" {
     block_cd6U4_info:
         const _cd6U4;
         const 1;
         const 12884901918;
         const ScWiZ_srt+544;
 },
 sat_scVif_entry() //  [R1]
         { []
         }
     {offset
       cd6Un: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cd6Ur; else goto cd6Uq;
       cd6Ur: // global
           HpAlloc = 80;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6Uq: // global
           _scVh8::P64 = P64[R1 + 16];
           _scVh9::P64 = P64[R1 + 24];
           _scVha::P64 = P64[R1 + 32];
           _scVhb::P64 = P64[R1 + 40];
           _scVhc::P64 = P64[R1 + 48];
           _scVhd::P64 = P64[R1 + 56];
           _scVhe::P64 = P64[R1 + 64];
           _scVhi::P64 = P64[R1 + 72];
           I64[Hp - 72] = sat_scVie_info;
           P64[Hp - 56] = _scVh8::P64;
           P64[Hp - 48] = _scVh9::P64;
           P64[Hp - 40] = _scVha::P64;
           P64[Hp - 32] = _scVhb::P64;
           P64[Hp - 24] = _scVhc::P64;
           P64[Hp - 16] = _scVhd::P64;
           P64[Hp - 8] = _scVhe::P64;
           P64[Hp] = _scVhi::P64;
           R3 = Hp - 72;
           R2 = lvl44_rcV5N_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVif_info" {
     sat_scVif_info:
         const sat_scVif_entry;
         const 8;
         const 3852585664527;
         const ScWiZ_srt+480;
 },
 eta8_scVhq_entry() //  [R1]
         { []
         }
     {offset
       cd6Us: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cd6Uw; else goto cd6Uv;
       cd6Uw: // global
           HpAlloc = 80;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6Uv: // global
           _scVh8::P64 = P64[R1 + 16];
           _scVh9::P64 = P64[R1 + 24];
           _scVha::P64 = P64[R1 + 32];
           _scVhb::P64 = P64[R1 + 40];
           _scVhc::P64 = P64[R1 + 48];
           _scVhd::P64 = P64[R1 + 56];
           _scVhe::P64 = P64[R1 + 64];
           _scVhi::P64 = P64[R1 + 72];
           I64[Hp - 72] = sat_scVif_info;
           P64[Hp - 56] = _scVh8::P64;
           P64[Hp - 48] = _scVh9::P64;
           P64[Hp - 40] = _scVha::P64;
           P64[Hp - 32] = _scVhb::P64;
           P64[Hp - 24] = _scVhc::P64;
           P64[Hp - 16] = _scVhd::P64;
           P64[Hp - 8] = _scVhe::P64;
           P64[Hp] = _scVhi::P64;
           R3 = Hp - 72;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . eta8_scVhq_info" {
     eta8_scVhq_info:
         const eta8_scVhq_entry;
         const 8;
         const 3852585664527;
         const ScWiZ_srt+480;
 },
 sat_scVih_entry() //  [R1]
         { []
         }
     {offset
       cd6UE: // global
           _scVih::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cd6UF; else goto cd6UG;
       cd6UG: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cd6UI; else goto cd6UH;
       cd6UI: // global
           HpAlloc = 80;
           goto cd6UF;
       cd6UF: // global
           R1 = _scVih::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6UH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVih::P64;
           _scVh7::P64 = P64[_scVih::P64 + 16];
           _scVh8::P64 = P64[_scVih::P64 + 24];
           _scVh9::P64 = P64[_scVih::P64 + 32];
           _scVha::P64 = P64[_scVih::P64 + 40];
           _scVhb::P64 = P64[_scVih::P64 + 48];
           _scVhc::P64 = P64[_scVih::P64 + 56];
           _scVhd::P64 = P64[_scVih::P64 + 64];
           _scVhe::P64 = P64[_scVih::P64 + 72];
           _scVhi::P64 = P64[_scVih::P64 + 80];
           I64[Hp - 72] = eta8_scVhq_info;
           P64[Hp - 56] = _scVh8::P64;
           P64[Hp - 48] = _scVh9::P64;
           P64[Hp - 40] = _scVha::P64;
           P64[Hp - 32] = _scVhb::P64;
           P64[Hp - 24] = _scVhc::P64;
           P64[Hp - 16] = _scVhd::P64;
           P64[Hp - 8] = _scVhe::P64;
           P64[Hp] = _scVhi::P64;
           I64[Sp - 32] = block_cd6Ux_info;
           R1 = _scVh7::P64;
           P64[Sp - 24] = Hp - 72;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ud6UP; else goto cd6Uy;
       ud6UP: // global
           call _cd6Ux(R1) args: 0, res: 0, upd: 0;
       cd6Uy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVih_info" {
     sat_scVih_info:
         const sat_scVih_entry;
         const 9;
         const 3852585664527;
         const ScWiZ_srt+480;
 },
 _cd6Ux() //  [R1]
         { []
         }
     {offset
       cd6Ux: // global
           _cd6M8::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cd6UB; else goto cd6UC;
       cd6UB: // global
           R3 = _cd6M8::P64;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cd6UC: // global
           R3 = _cd6M8::P64;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd6Ux_info" {
     block_cd6Ux_info:
         const _cd6Ux;
         const 1;
         const 12884901918;
         const ScWiZ_srt+544;
 },
 sat_scVii_entry() //  [R1]
         { []
         }
     {offset
       cd6UQ: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cd6UU; else goto cd6UT;
       cd6UU: // global
           HpAlloc = 88;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6UT: // global
           _scVh7::P64 = P64[R1 + 16];
           _scVh8::P64 = P64[R1 + 24];
           _scVh9::P64 = P64[R1 + 32];
           _scVha::P64 = P64[R1 + 40];
           _scVhb::P64 = P64[R1 + 48];
           _scVhc::P64 = P64[R1 + 56];
           _scVhd::P64 = P64[R1 + 64];
           _scVhe::P64 = P64[R1 + 72];
           _scVhi::P64 = P64[R1 + 80];
           I64[Hp - 80] = sat_scVih_info;
           P64[Hp - 64] = _scVh7::P64;
           P64[Hp - 56] = _scVh8::P64;
           P64[Hp - 48] = _scVh9::P64;
           P64[Hp - 40] = _scVha::P64;
           P64[Hp - 32] = _scVhb::P64;
           P64[Hp - 24] = _scVhc::P64;
           P64[Hp - 16] = _scVhd::P64;
           P64[Hp - 8] = _scVhe::P64;
           P64[Hp] = _scVhi::P64;
           R3 = Hp - 80;
           R2 = lvl43_rcV5M_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVii_info" {
     sat_scVii_info:
         const sat_scVii_entry;
         const 9;
         const 3852585664527;
         const ScWiZ_srt+480;
 },
 eta7_scVhp_entry() //  [R1]
         { []
         }
     {offset
       cd6UV: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cd6UZ; else goto cd6UY;
       cd6UZ: // global
           HpAlloc = 88;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6UY: // global
           _scVh7::P64 = P64[R1 + 16];
           _scVh8::P64 = P64[R1 + 24];
           _scVh9::P64 = P64[R1 + 32];
           _scVha::P64 = P64[R1 + 40];
           _scVhb::P64 = P64[R1 + 48];
           _scVhc::P64 = P64[R1 + 56];
           _scVhd::P64 = P64[R1 + 64];
           _scVhe::P64 = P64[R1 + 72];
           _scVhi::P64 = P64[R1 + 80];
           I64[Hp - 80] = sat_scVii_info;
           P64[Hp - 64] = _scVh7::P64;
           P64[Hp - 56] = _scVh8::P64;
           P64[Hp - 48] = _scVh9::P64;
           P64[Hp - 40] = _scVha::P64;
           P64[Hp - 32] = _scVhb::P64;
           P64[Hp - 24] = _scVhc::P64;
           P64[Hp - 16] = _scVhd::P64;
           P64[Hp - 8] = _scVhe::P64;
           P64[Hp] = _scVhi::P64;
           R3 = Hp - 80;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . eta7_scVhp_info" {
     eta7_scVhp_info:
         const eta7_scVhp_entry;
         const 9;
         const 3852585664527;
         const ScWiZ_srt+480;
 },
 sat_scVik_entry() //  [R1]
         { []
         }
     {offset
       cd6V7: // global
           _scVik::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cd6V8; else goto cd6V9;
       cd6V9: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cd6Vb; else goto cd6Va;
       cd6Vb: // global
           HpAlloc = 88;
           goto cd6V8;
       cd6V8: // global
           R1 = _scVik::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6Va: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVik::P64;
           _scVh6::P64 = P64[_scVik::P64 + 16];
           _scVh7::P64 = P64[_scVik::P64 + 24];
           _scVh8::P64 = P64[_scVik::P64 + 32];
           _scVh9::P64 = P64[_scVik::P64 + 40];
           _scVha::P64 = P64[_scVik::P64 + 48];
           _scVhb::P64 = P64[_scVik::P64 + 56];
           _scVhc::P64 = P64[_scVik::P64 + 64];
           _scVhd::P64 = P64[_scVik::P64 + 72];
           _scVhe::P64 = P64[_scVik::P64 + 80];
           _scVhi::P64 = P64[_scVik::P64 + 88];
           I64[Hp - 80] = eta7_scVhp_info;
           P64[Hp - 64] = _scVh7::P64;
           P64[Hp - 56] = _scVh8::P64;
           P64[Hp - 48] = _scVh9::P64;
           P64[Hp - 40] = _scVha::P64;
           P64[Hp - 32] = _scVhb::P64;
           P64[Hp - 24] = _scVhc::P64;
           P64[Hp - 16] = _scVhd::P64;
           P64[Hp - 8] = _scVhe::P64;
           P64[Hp] = _scVhi::P64;
           I64[Sp - 32] = block_cd6V0_info;
           R1 = _scVh6::P64;
           P64[Sp - 24] = Hp - 80;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ud6Vi; else goto cd6V1;
       ud6Vi: // global
           call _cd6V0(R1) args: 0, res: 0, upd: 0;
       cd6V1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVik_info" {
     sat_scVik_info:
         const sat_scVik_entry;
         const 10;
         const 3852585664527;
         const ScWiZ_srt+480;
 },
 _cd6V0() //  [R1]
         { []
         }
     {offset
       cd6V0: // global
           _cd6LW::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cd6V4; else goto cd6V5;
       cd6V4: // global
           R3 = _cd6LW::P64;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cd6V5: // global
           R3 = _cd6LW::P64;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd6V0_info" {
     block_cd6V0_info:
         const _cd6V0;
         const 1;
         const 12884901918;
         const ScWiZ_srt+544;
 },
 sat_scVil_entry() //  [R1]
         { []
         }
     {offset
       cd6Vj: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cd6Vn; else goto cd6Vm;
       cd6Vn: // global
           HpAlloc = 96;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6Vm: // global
           _scVh6::P64 = P64[R1 + 16];
           _scVh7::P64 = P64[R1 + 24];
           _scVh8::P64 = P64[R1 + 32];
           _scVh9::P64 = P64[R1 + 40];
           _scVha::P64 = P64[R1 + 48];
           _scVhb::P64 = P64[R1 + 56];
           _scVhc::P64 = P64[R1 + 64];
           _scVhd::P64 = P64[R1 + 72];
           _scVhe::P64 = P64[R1 + 80];
           _scVhi::P64 = P64[R1 + 88];
           I64[Hp - 88] = sat_scVik_info;
           P64[Hp - 72] = _scVh6::P64;
           P64[Hp - 64] = _scVh7::P64;
           P64[Hp - 56] = _scVh8::P64;
           P64[Hp - 48] = _scVh9::P64;
           P64[Hp - 40] = _scVha::P64;
           P64[Hp - 32] = _scVhb::P64;
           P64[Hp - 24] = _scVhc::P64;
           P64[Hp - 16] = _scVhd::P64;
           P64[Hp - 8] = _scVhe::P64;
           P64[Hp] = _scVhi::P64;
           R3 = Hp - 88;
           R2 = lvl42_rcV5L_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVil_info" {
     sat_scVil_info:
         const sat_scVil_entry;
         const 10;
         const 3852585664527;
         const ScWiZ_srt+480;
 },
 eta6_scVho_entry() //  [R1]
         { []
         }
     {offset
       cd6Vo: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cd6Vs; else goto cd6Vr;
       cd6Vs: // global
           HpAlloc = 96;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6Vr: // global
           _scVh6::P64 = P64[R1 + 16];
           _scVh7::P64 = P64[R1 + 24];
           _scVh8::P64 = P64[R1 + 32];
           _scVh9::P64 = P64[R1 + 40];
           _scVha::P64 = P64[R1 + 48];
           _scVhb::P64 = P64[R1 + 56];
           _scVhc::P64 = P64[R1 + 64];
           _scVhd::P64 = P64[R1 + 72];
           _scVhe::P64 = P64[R1 + 80];
           _scVhi::P64 = P64[R1 + 88];
           I64[Hp - 88] = sat_scVil_info;
           P64[Hp - 72] = _scVh6::P64;
           P64[Hp - 64] = _scVh7::P64;
           P64[Hp - 56] = _scVh8::P64;
           P64[Hp - 48] = _scVh9::P64;
           P64[Hp - 40] = _scVha::P64;
           P64[Hp - 32] = _scVhb::P64;
           P64[Hp - 24] = _scVhc::P64;
           P64[Hp - 16] = _scVhd::P64;
           P64[Hp - 8] = _scVhe::P64;
           P64[Hp] = _scVhi::P64;
           R3 = Hp - 88;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . eta6_scVho_info" {
     eta6_scVho_info:
         const eta6_scVho_entry;
         const 10;
         const 3852585664527;
         const ScWiZ_srt+480;
 },
 sat_scVin_entry() //  [R1]
         { []
         }
     {offset
       cd6VA: // global
           _scVin::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cd6VB; else goto cd6VC;
       cd6VC: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cd6VE; else goto cd6VD;
       cd6VE: // global
           HpAlloc = 96;
           goto cd6VB;
       cd6VB: // global
           R1 = _scVin::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6VD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVin::P64;
           _scVh5::P64 = P64[_scVin::P64 + 16];
           _scVh6::P64 = P64[_scVin::P64 + 24];
           _scVh7::P64 = P64[_scVin::P64 + 32];
           _scVh8::P64 = P64[_scVin::P64 + 40];
           _scVh9::P64 = P64[_scVin::P64 + 48];
           _scVha::P64 = P64[_scVin::P64 + 56];
           _scVhb::P64 = P64[_scVin::P64 + 64];
           _scVhc::P64 = P64[_scVin::P64 + 72];
           _scVhd::P64 = P64[_scVin::P64 + 80];
           _scVhe::P64 = P64[_scVin::P64 + 88];
           _scVhi::P64 = P64[_scVin::P64 + 96];
           I64[Hp - 88] = eta6_scVho_info;
           P64[Hp - 72] = _scVh6::P64;
           P64[Hp - 64] = _scVh7::P64;
           P64[Hp - 56] = _scVh8::P64;
           P64[Hp - 48] = _scVh9::P64;
           P64[Hp - 40] = _scVha::P64;
           P64[Hp - 32] = _scVhb::P64;
           P64[Hp - 24] = _scVhc::P64;
           P64[Hp - 16] = _scVhd::P64;
           P64[Hp - 8] = _scVhe::P64;
           P64[Hp] = _scVhi::P64;
           I64[Sp - 32] = block_cd6Vt_info;
           R1 = _scVh5::P64;
           P64[Sp - 24] = Hp - 88;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ud6VL; else goto cd6Vu;
       ud6VL: // global
           call _cd6Vt(R1) args: 0, res: 0, upd: 0;
       cd6Vu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVin_info" {
     sat_scVin_info:
         const sat_scVin_entry;
         const 11;
         const 3852585664527;
         const ScWiZ_srt+480;
 },
 _cd6Vt() //  [R1]
         { []
         }
     {offset
       cd6Vt: // global
           _cd6LK::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cd6Vx; else goto cd6Vy;
       cd6Vx: // global
           R3 = _cd6LK::P64;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cd6Vy: // global
           R3 = _cd6LK::P64;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd6Vt_info" {
     block_cd6Vt_info:
         const _cd6Vt;
         const 1;
         const 12884901918;
         const ScWiZ_srt+544;
 },
 sat_scVio_entry() //  [R1]
         { []
         }
     {offset
       cd6VM: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cd6VQ; else goto cd6VP;
       cd6VQ: // global
           HpAlloc = 104;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6VP: // global
           _scVh5::P64 = P64[R1 + 16];
           _scVh6::P64 = P64[R1 + 24];
           _scVh7::P64 = P64[R1 + 32];
           _scVh8::P64 = P64[R1 + 40];
           _scVh9::P64 = P64[R1 + 48];
           _scVha::P64 = P64[R1 + 56];
           _scVhb::P64 = P64[R1 + 64];
           _scVhc::P64 = P64[R1 + 72];
           _scVhd::P64 = P64[R1 + 80];
           _scVhe::P64 = P64[R1 + 88];
           _scVhi::P64 = P64[R1 + 96];
           I64[Hp - 96] = sat_scVin_info;
           P64[Hp - 80] = _scVh5::P64;
           P64[Hp - 72] = _scVh6::P64;
           P64[Hp - 64] = _scVh7::P64;
           P64[Hp - 56] = _scVh8::P64;
           P64[Hp - 48] = _scVh9::P64;
           P64[Hp - 40] = _scVha::P64;
           P64[Hp - 32] = _scVhb::P64;
           P64[Hp - 24] = _scVhc::P64;
           P64[Hp - 16] = _scVhd::P64;
           P64[Hp - 8] = _scVhe::P64;
           P64[Hp] = _scVhi::P64;
           R3 = Hp - 96;
           R2 = lvl41_rcV5K_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVio_info" {
     sat_scVio_info:
         const sat_scVio_entry;
         const 11;
         const 3852585664527;
         const ScWiZ_srt+480;
 },
 eta5_scVhn_entry() //  [R1]
         { []
         }
     {offset
       cd6VR: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cd6VV; else goto cd6VU;
       cd6VV: // global
           HpAlloc = 104;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6VU: // global
           _scVh5::P64 = P64[R1 + 16];
           _scVh6::P64 = P64[R1 + 24];
           _scVh7::P64 = P64[R1 + 32];
           _scVh8::P64 = P64[R1 + 40];
           _scVh9::P64 = P64[R1 + 48];
           _scVha::P64 = P64[R1 + 56];
           _scVhb::P64 = P64[R1 + 64];
           _scVhc::P64 = P64[R1 + 72];
           _scVhd::P64 = P64[R1 + 80];
           _scVhe::P64 = P64[R1 + 88];
           _scVhi::P64 = P64[R1 + 96];
           I64[Hp - 96] = sat_scVio_info;
           P64[Hp - 80] = _scVh5::P64;
           P64[Hp - 72] = _scVh6::P64;
           P64[Hp - 64] = _scVh7::P64;
           P64[Hp - 56] = _scVh8::P64;
           P64[Hp - 48] = _scVh9::P64;
           P64[Hp - 40] = _scVha::P64;
           P64[Hp - 32] = _scVhb::P64;
           P64[Hp - 24] = _scVhc::P64;
           P64[Hp - 16] = _scVhd::P64;
           P64[Hp - 8] = _scVhe::P64;
           P64[Hp] = _scVhi::P64;
           R3 = Hp - 96;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . eta5_scVhn_info" {
     eta5_scVhn_info:
         const eta5_scVhn_entry;
         const 11;
         const 3852585664527;
         const ScWiZ_srt+480;
 },
 sat_scViq_entry() //  [R1]
         { []
         }
     {offset
       cd6W3: // global
           _scViq::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cd6W4; else goto cd6W5;
       cd6W5: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cd6W7; else goto cd6W6;
       cd6W7: // global
           HpAlloc = 104;
           goto cd6W4;
       cd6W4: // global
           R1 = _scViq::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6W6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scViq::P64;
           _scVh4::P64 = P64[_scViq::P64 + 16];
           _scVh5::P64 = P64[_scViq::P64 + 24];
           _scVh6::P64 = P64[_scViq::P64 + 32];
           _scVh7::P64 = P64[_scViq::P64 + 40];
           _scVh8::P64 = P64[_scViq::P64 + 48];
           _scVh9::P64 = P64[_scViq::P64 + 56];
           _scVha::P64 = P64[_scViq::P64 + 64];
           _scVhb::P64 = P64[_scViq::P64 + 72];
           _scVhc::P64 = P64[_scViq::P64 + 80];
           _scVhd::P64 = P64[_scViq::P64 + 88];
           _scVhe::P64 = P64[_scViq::P64 + 96];
           _scVhi::P64 = P64[_scViq::P64 + 104];
           I64[Hp - 96] = eta5_scVhn_info;
           P64[Hp - 80] = _scVh5::P64;
           P64[Hp - 72] = _scVh6::P64;
           P64[Hp - 64] = _scVh7::P64;
           P64[Hp - 56] = _scVh8::P64;
           P64[Hp - 48] = _scVh9::P64;
           P64[Hp - 40] = _scVha::P64;
           P64[Hp - 32] = _scVhb::P64;
           P64[Hp - 24] = _scVhc::P64;
           P64[Hp - 16] = _scVhd::P64;
           P64[Hp - 8] = _scVhe::P64;
           P64[Hp] = _scVhi::P64;
           I64[Sp - 32] = block_cd6VW_info;
           R1 = _scVh4::P64;
           P64[Sp - 24] = Hp - 96;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ud6We; else goto cd6VX;
       ud6We: // global
           call _cd6VW(R1) args: 0, res: 0, upd: 0;
       cd6VX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scViq_info" {
     sat_scViq_info:
         const sat_scViq_entry;
         const 12;
         const 3852585664527;
         const ScWiZ_srt+480;
 },
 _cd6VW() //  [R1]
         { []
         }
     {offset
       cd6VW: // global
           _cd6Ly::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cd6W0; else goto cd6W1;
       cd6W0: // global
           R3 = _cd6Ly::P64;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cd6W1: // global
           R3 = _cd6Ly::P64;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd6VW_info" {
     block_cd6VW_info:
         const _cd6VW;
         const 1;
         const 12884901918;
         const ScWiZ_srt+544;
 },
 sat_scVir_entry() //  [R1]
         { []
         }
     {offset
       cd6Wf: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto cd6Wj; else goto cd6Wi;
       cd6Wj: // global
           HpAlloc = 112;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6Wi: // global
           _scVh4::P64 = P64[R1 + 16];
           _scVh5::P64 = P64[R1 + 24];
           _scVh6::P64 = P64[R1 + 32];
           _scVh7::P64 = P64[R1 + 40];
           _scVh8::P64 = P64[R1 + 48];
           _scVh9::P64 = P64[R1 + 56];
           _scVha::P64 = P64[R1 + 64];
           _scVhb::P64 = P64[R1 + 72];
           _scVhc::P64 = P64[R1 + 80];
           _scVhd::P64 = P64[R1 + 88];
           _scVhe::P64 = P64[R1 + 96];
           _scVhi::P64 = P64[R1 + 104];
           I64[Hp - 104] = sat_scViq_info;
           P64[Hp - 88] = _scVh4::P64;
           P64[Hp - 80] = _scVh5::P64;
           P64[Hp - 72] = _scVh6::P64;
           P64[Hp - 64] = _scVh7::P64;
           P64[Hp - 56] = _scVh8::P64;
           P64[Hp - 48] = _scVh9::P64;
           P64[Hp - 40] = _scVha::P64;
           P64[Hp - 32] = _scVhb::P64;
           P64[Hp - 24] = _scVhc::P64;
           P64[Hp - 16] = _scVhd::P64;
           P64[Hp - 8] = _scVhe::P64;
           P64[Hp] = _scVhi::P64;
           R3 = Hp - 104;
           R2 = lvl40_rcV5J_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVir_info" {
     sat_scVir_info:
         const sat_scVir_entry;
         const 12;
         const 3852585664527;
         const ScWiZ_srt+480;
 },
 eta4_scVhm_entry() //  [R1]
         { []
         }
     {offset
       cd6Wk: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto cd6Wo; else goto cd6Wn;
       cd6Wo: // global
           HpAlloc = 112;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6Wn: // global
           _scVh4::P64 = P64[R1 + 16];
           _scVh5::P64 = P64[R1 + 24];
           _scVh6::P64 = P64[R1 + 32];
           _scVh7::P64 = P64[R1 + 40];
           _scVh8::P64 = P64[R1 + 48];
           _scVh9::P64 = P64[R1 + 56];
           _scVha::P64 = P64[R1 + 64];
           _scVhb::P64 = P64[R1 + 72];
           _scVhc::P64 = P64[R1 + 80];
           _scVhd::P64 = P64[R1 + 88];
           _scVhe::P64 = P64[R1 + 96];
           _scVhi::P64 = P64[R1 + 104];
           I64[Hp - 104] = sat_scVir_info;
           P64[Hp - 88] = _scVh4::P64;
           P64[Hp - 80] = _scVh5::P64;
           P64[Hp - 72] = _scVh6::P64;
           P64[Hp - 64] = _scVh7::P64;
           P64[Hp - 56] = _scVh8::P64;
           P64[Hp - 48] = _scVh9::P64;
           P64[Hp - 40] = _scVha::P64;
           P64[Hp - 32] = _scVhb::P64;
           P64[Hp - 24] = _scVhc::P64;
           P64[Hp - 16] = _scVhd::P64;
           P64[Hp - 8] = _scVhe::P64;
           P64[Hp] = _scVhi::P64;
           R3 = Hp - 104;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . eta4_scVhm_info" {
     eta4_scVhm_info:
         const eta4_scVhm_entry;
         const 12;
         const 3852585664527;
         const ScWiZ_srt+480;
 },
 sat_scVit_entry() //  [R1]
         { []
         }
     {offset
       cd6Ww: // global
           _scVit::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cd6Wx; else goto cd6Wy;
       cd6Wy: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto cd6WA; else goto cd6Wz;
       cd6WA: // global
           HpAlloc = 112;
           goto cd6Wx;
       cd6Wx: // global
           R1 = _scVit::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6Wz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVit::P64;
           _scVh3::P64 = P64[_scVit::P64 + 16];
           _scVh4::P64 = P64[_scVit::P64 + 24];
           _scVh5::P64 = P64[_scVit::P64 + 32];
           _scVh6::P64 = P64[_scVit::P64 + 40];
           _scVh7::P64 = P64[_scVit::P64 + 48];
           _scVh8::P64 = P64[_scVit::P64 + 56];
           _scVh9::P64 = P64[_scVit::P64 + 64];
           _scVha::P64 = P64[_scVit::P64 + 72];
           _scVhb::P64 = P64[_scVit::P64 + 80];
           _scVhc::P64 = P64[_scVit::P64 + 88];
           _scVhd::P64 = P64[_scVit::P64 + 96];
           _scVhe::P64 = P64[_scVit::P64 + 104];
           _scVhi::P64 = P64[_scVit::P64 + 112];
           I64[Hp - 104] = eta4_scVhm_info;
           P64[Hp - 88] = _scVh4::P64;
           P64[Hp - 80] = _scVh5::P64;
           P64[Hp - 72] = _scVh6::P64;
           P64[Hp - 64] = _scVh7::P64;
           P64[Hp - 56] = _scVh8::P64;
           P64[Hp - 48] = _scVh9::P64;
           P64[Hp - 40] = _scVha::P64;
           P64[Hp - 32] = _scVhb::P64;
           P64[Hp - 24] = _scVhc::P64;
           P64[Hp - 16] = _scVhd::P64;
           P64[Hp - 8] = _scVhe::P64;
           P64[Hp] = _scVhi::P64;
           I64[Sp - 32] = block_cd6Wp_info;
           R1 = _scVh3::P64;
           P64[Sp - 24] = Hp - 104;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ud6WH; else goto cd6Wq;
       ud6WH: // global
           call _cd6Wp(R1) args: 0, res: 0, upd: 0;
       cd6Wq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVit_info" {
     sat_scVit_info:
         const sat_scVit_entry;
         const 13;
         const 3852585664527;
         const ScWiZ_srt+480;
 },
 _cd6Wp() //  [R1]
         { []
         }
     {offset
       cd6Wp: // global
           _cd6Lm::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cd6Wt; else goto cd6Wu;
       cd6Wt: // global
           R3 = _cd6Lm::P64;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cd6Wu: // global
           R3 = _cd6Lm::P64;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd6Wp_info" {
     block_cd6Wp_info:
         const _cd6Wp;
         const 1;
         const 12884901918;
         const ScWiZ_srt+544;
 },
 sat_scViu_entry() //  [R1]
         { []
         }
     {offset
       cd6WI: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto cd6WM; else goto cd6WL;
       cd6WM: // global
           HpAlloc = 120;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6WL: // global
           _scVh3::P64 = P64[R1 + 16];
           _scVh4::P64 = P64[R1 + 24];
           _scVh5::P64 = P64[R1 + 32];
           _scVh6::P64 = P64[R1 + 40];
           _scVh7::P64 = P64[R1 + 48];
           _scVh8::P64 = P64[R1 + 56];
           _scVh9::P64 = P64[R1 + 64];
           _scVha::P64 = P64[R1 + 72];
           _scVhb::P64 = P64[R1 + 80];
           _scVhc::P64 = P64[R1 + 88];
           _scVhd::P64 = P64[R1 + 96];
           _scVhe::P64 = P64[R1 + 104];
           _scVhi::P64 = P64[R1 + 112];
           I64[Hp - 112] = sat_scVit_info;
           P64[Hp - 96] = _scVh3::P64;
           P64[Hp - 88] = _scVh4::P64;
           P64[Hp - 80] = _scVh5::P64;
           P64[Hp - 72] = _scVh6::P64;
           P64[Hp - 64] = _scVh7::P64;
           P64[Hp - 56] = _scVh8::P64;
           P64[Hp - 48] = _scVh9::P64;
           P64[Hp - 40] = _scVha::P64;
           P64[Hp - 32] = _scVhb::P64;
           P64[Hp - 24] = _scVhc::P64;
           P64[Hp - 16] = _scVhd::P64;
           P64[Hp - 8] = _scVhe::P64;
           P64[Hp] = _scVhi::P64;
           R3 = Hp - 112;
           R2 = lvl39_rcV5I_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scViu_info" {
     sat_scViu_info:
         const sat_scViu_entry;
         const 13;
         const 3852585664527;
         const ScWiZ_srt+480;
 },
 eta3_scVhl_entry() //  [R1]
         { []
         }
     {offset
       cd6WN: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto cd6WR; else goto cd6WQ;
       cd6WR: // global
           HpAlloc = 120;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6WQ: // global
           _scVh3::P64 = P64[R1 + 16];
           _scVh4::P64 = P64[R1 + 24];
           _scVh5::P64 = P64[R1 + 32];
           _scVh6::P64 = P64[R1 + 40];
           _scVh7::P64 = P64[R1 + 48];
           _scVh8::P64 = P64[R1 + 56];
           _scVh9::P64 = P64[R1 + 64];
           _scVha::P64 = P64[R1 + 72];
           _scVhb::P64 = P64[R1 + 80];
           _scVhc::P64 = P64[R1 + 88];
           _scVhd::P64 = P64[R1 + 96];
           _scVhe::P64 = P64[R1 + 104];
           _scVhi::P64 = P64[R1 + 112];
           I64[Hp - 112] = sat_scViu_info;
           P64[Hp - 96] = _scVh3::P64;
           P64[Hp - 88] = _scVh4::P64;
           P64[Hp - 80] = _scVh5::P64;
           P64[Hp - 72] = _scVh6::P64;
           P64[Hp - 64] = _scVh7::P64;
           P64[Hp - 56] = _scVh8::P64;
           P64[Hp - 48] = _scVh9::P64;
           P64[Hp - 40] = _scVha::P64;
           P64[Hp - 32] = _scVhb::P64;
           P64[Hp - 24] = _scVhc::P64;
           P64[Hp - 16] = _scVhd::P64;
           P64[Hp - 8] = _scVhe::P64;
           P64[Hp] = _scVhi::P64;
           R3 = Hp - 112;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . eta3_scVhl_info" {
     eta3_scVhl_info:
         const eta3_scVhl_entry;
         const 13;
         const 3852585664527;
         const ScWiZ_srt+480;
 },
 sat_scViw_entry() //  [R1]
         { []
         }
     {offset
       cd6WZ: // global
           _scViw::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cd6X0; else goto cd6X1;
       cd6X1: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto cd6X3; else goto cd6X2;
       cd6X3: // global
           HpAlloc = 120;
           goto cd6X0;
       cd6X0: // global
           R1 = _scViw::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6X2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scViw::P64;
           _scVh2::P64 = P64[_scViw::P64 + 16];
           _scVh3::P64 = P64[_scViw::P64 + 24];
           _scVh4::P64 = P64[_scViw::P64 + 32];
           _scVh5::P64 = P64[_scViw::P64 + 40];
           _scVh6::P64 = P64[_scViw::P64 + 48];
           _scVh7::P64 = P64[_scViw::P64 + 56];
           _scVh8::P64 = P64[_scViw::P64 + 64];
           _scVh9::P64 = P64[_scViw::P64 + 72];
           _scVha::P64 = P64[_scViw::P64 + 80];
           _scVhb::P64 = P64[_scViw::P64 + 88];
           _scVhc::P64 = P64[_scViw::P64 + 96];
           _scVhd::P64 = P64[_scViw::P64 + 104];
           _scVhe::P64 = P64[_scViw::P64 + 112];
           _scVhi::P64 = P64[_scViw::P64 + 120];
           I64[Hp - 112] = eta3_scVhl_info;
           P64[Hp - 96] = _scVh3::P64;
           P64[Hp - 88] = _scVh4::P64;
           P64[Hp - 80] = _scVh5::P64;
           P64[Hp - 72] = _scVh6::P64;
           P64[Hp - 64] = _scVh7::P64;
           P64[Hp - 56] = _scVh8::P64;
           P64[Hp - 48] = _scVh9::P64;
           P64[Hp - 40] = _scVha::P64;
           P64[Hp - 32] = _scVhb::P64;
           P64[Hp - 24] = _scVhc::P64;
           P64[Hp - 16] = _scVhd::P64;
           P64[Hp - 8] = _scVhe::P64;
           P64[Hp] = _scVhi::P64;
           I64[Sp - 32] = block_cd6WS_info;
           R1 = _scVh2::P64;
           P64[Sp - 24] = Hp - 112;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ud6Xa; else goto cd6WT;
       ud6Xa: // global
           call _cd6WS(R1) args: 0, res: 0, upd: 0;
       cd6WT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scViw_info" {
     sat_scViw_info:
         const sat_scViw_entry;
         const 14;
         const 3852585664527;
         const ScWiZ_srt+480;
 },
 _cd6WS() //  [R1]
         { []
         }
     {offset
       cd6WS: // global
           _cd6La::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cd6WW; else goto cd6WX;
       cd6WW: // global
           R3 = _cd6La::P64;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cd6WX: // global
           R3 = _cd6La::P64;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd6WS_info" {
     block_cd6WS_info:
         const _cd6WS;
         const 1;
         const 12884901918;
         const ScWiZ_srt+544;
 },
 sat_scVix_entry() //  [R1]
         { []
         }
     {offset
       cd6Xb: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto cd6Xf; else goto cd6Xe;
       cd6Xf: // global
           HpAlloc = 128;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6Xe: // global
           _scVh2::P64 = P64[R1 + 16];
           _scVh3::P64 = P64[R1 + 24];
           _scVh4::P64 = P64[R1 + 32];
           _scVh5::P64 = P64[R1 + 40];
           _scVh6::P64 = P64[R1 + 48];
           _scVh7::P64 = P64[R1 + 56];
           _scVh8::P64 = P64[R1 + 64];
           _scVh9::P64 = P64[R1 + 72];
           _scVha::P64 = P64[R1 + 80];
           _scVhb::P64 = P64[R1 + 88];
           _scVhc::P64 = P64[R1 + 96];
           _scVhd::P64 = P64[R1 + 104];
           _scVhe::P64 = P64[R1 + 112];
           _scVhi::P64 = P64[R1 + 120];
           I64[Hp - 120] = sat_scViw_info;
           P64[Hp - 104] = _scVh2::P64;
           P64[Hp - 96] = _scVh3::P64;
           P64[Hp - 88] = _scVh4::P64;
           P64[Hp - 80] = _scVh5::P64;
           P64[Hp - 72] = _scVh6::P64;
           P64[Hp - 64] = _scVh7::P64;
           P64[Hp - 56] = _scVh8::P64;
           P64[Hp - 48] = _scVh9::P64;
           P64[Hp - 40] = _scVha::P64;
           P64[Hp - 32] = _scVhb::P64;
           P64[Hp - 24] = _scVhc::P64;
           P64[Hp - 16] = _scVhd::P64;
           P64[Hp - 8] = _scVhe::P64;
           P64[Hp] = _scVhi::P64;
           R3 = Hp - 120;
           R2 = lvl38_rcV5H_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVix_info" {
     sat_scVix_info:
         const sat_scVix_entry;
         const 14;
         const 3852585664527;
         const ScWiZ_srt+480;
 },
 eta2_scVhk_entry() //  [R1]
         { []
         }
     {offset
       cd6Xg: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto cd6Xk; else goto cd6Xj;
       cd6Xk: // global
           HpAlloc = 128;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6Xj: // global
           _scVh2::P64 = P64[R1 + 16];
           _scVh3::P64 = P64[R1 + 24];
           _scVh4::P64 = P64[R1 + 32];
           _scVh5::P64 = P64[R1 + 40];
           _scVh6::P64 = P64[R1 + 48];
           _scVh7::P64 = P64[R1 + 56];
           _scVh8::P64 = P64[R1 + 64];
           _scVh9::P64 = P64[R1 + 72];
           _scVha::P64 = P64[R1 + 80];
           _scVhb::P64 = P64[R1 + 88];
           _scVhc::P64 = P64[R1 + 96];
           _scVhd::P64 = P64[R1 + 104];
           _scVhe::P64 = P64[R1 + 112];
           _scVhi::P64 = P64[R1 + 120];
           I64[Hp - 120] = sat_scVix_info;
           P64[Hp - 104] = _scVh2::P64;
           P64[Hp - 96] = _scVh3::P64;
           P64[Hp - 88] = _scVh4::P64;
           P64[Hp - 80] = _scVh5::P64;
           P64[Hp - 72] = _scVh6::P64;
           P64[Hp - 64] = _scVh7::P64;
           P64[Hp - 56] = _scVh8::P64;
           P64[Hp - 48] = _scVh9::P64;
           P64[Hp - 40] = _scVha::P64;
           P64[Hp - 32] = _scVhb::P64;
           P64[Hp - 24] = _scVhc::P64;
           P64[Hp - 16] = _scVhd::P64;
           P64[Hp - 8] = _scVhe::P64;
           P64[Hp] = _scVhi::P64;
           R3 = Hp - 120;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . eta2_scVhk_info" {
     eta2_scVhk_info:
         const eta2_scVhk_entry;
         const 14;
         const 3852585664527;
         const ScWiZ_srt+480;
 },
 sat_scViz_entry() //  [R1]
         { []
         }
     {offset
       cd6Xs: // global
           _scViz::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cd6Xt; else goto cd6Xu;
       cd6Xu: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto cd6Xw; else goto cd6Xv;
       cd6Xw: // global
           HpAlloc = 128;
           goto cd6Xt;
       cd6Xt: // global
           R1 = _scViz::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6Xv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scViz::P64;
           _scVh1::P64 = P64[_scViz::P64 + 16];
           _scVh2::P64 = P64[_scViz::P64 + 24];
           _scVh3::P64 = P64[_scViz::P64 + 32];
           _scVh4::P64 = P64[_scViz::P64 + 40];
           _scVh5::P64 = P64[_scViz::P64 + 48];
           _scVh6::P64 = P64[_scViz::P64 + 56];
           _scVh7::P64 = P64[_scViz::P64 + 64];
           _scVh8::P64 = P64[_scViz::P64 + 72];
           _scVh9::P64 = P64[_scViz::P64 + 80];
           _scVha::P64 = P64[_scViz::P64 + 88];
           _scVhb::P64 = P64[_scViz::P64 + 96];
           _scVhc::P64 = P64[_scViz::P64 + 104];
           _scVhd::P64 = P64[_scViz::P64 + 112];
           _scVhe::P64 = P64[_scViz::P64 + 120];
           _scVhi::P64 = P64[_scViz::P64 + 128];
           I64[Hp - 120] = eta2_scVhk_info;
           P64[Hp - 104] = _scVh2::P64;
           P64[Hp - 96] = _scVh3::P64;
           P64[Hp - 88] = _scVh4::P64;
           P64[Hp - 80] = _scVh5::P64;
           P64[Hp - 72] = _scVh6::P64;
           P64[Hp - 64] = _scVh7::P64;
           P64[Hp - 56] = _scVh8::P64;
           P64[Hp - 48] = _scVh9::P64;
           P64[Hp - 40] = _scVha::P64;
           P64[Hp - 32] = _scVhb::P64;
           P64[Hp - 24] = _scVhc::P64;
           P64[Hp - 16] = _scVhd::P64;
           P64[Hp - 8] = _scVhe::P64;
           P64[Hp] = _scVhi::P64;
           I64[Sp - 32] = block_cd6Xl_info;
           R1 = _scVh1::P64;
           P64[Sp - 24] = Hp - 120;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ud6XD; else goto cd6Xm;
       ud6XD: // global
           call _cd6Xl(R1) args: 0, res: 0, upd: 0;
       cd6Xm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scViz_info" {
     sat_scViz_info:
         const sat_scViz_entry;
         const 15;
         const 3852585664527;
         const ScWiZ_srt+480;
 },
 _cd6Xl() //  [R1]
         { []
         }
     {offset
       cd6Xl: // global
           _cd6KY::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cd6Xp; else goto cd6Xq;
       cd6Xp: // global
           R3 = _cd6KY::P64;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cd6Xq: // global
           R3 = _cd6KY::P64;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd6Xl_info" {
     block_cd6Xl_info:
         const _cd6Xl;
         const 1;
         const 12884901918;
         const ScWiZ_srt+544;
 },
 sat_scViA_entry() //  [R1]
         { []
         }
     {offset
       cd6XE: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto cd6XI; else goto cd6XH;
       cd6XI: // global
           HpAlloc = 136;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6XH: // global
           _scVh1::P64 = P64[R1 + 16];
           _scVh2::P64 = P64[R1 + 24];
           _scVh3::P64 = P64[R1 + 32];
           _scVh4::P64 = P64[R1 + 40];
           _scVh5::P64 = P64[R1 + 48];
           _scVh6::P64 = P64[R1 + 56];
           _scVh7::P64 = P64[R1 + 64];
           _scVh8::P64 = P64[R1 + 72];
           _scVh9::P64 = P64[R1 + 80];
           _scVha::P64 = P64[R1 + 88];
           _scVhb::P64 = P64[R1 + 96];
           _scVhc::P64 = P64[R1 + 104];
           _scVhd::P64 = P64[R1 + 112];
           _scVhe::P64 = P64[R1 + 120];
           _scVhi::P64 = P64[R1 + 128];
           I64[Hp - 128] = sat_scViz_info;
           P64[Hp - 112] = _scVh1::P64;
           P64[Hp - 104] = _scVh2::P64;
           P64[Hp - 96] = _scVh3::P64;
           P64[Hp - 88] = _scVh4::P64;
           P64[Hp - 80] = _scVh5::P64;
           P64[Hp - 72] = _scVh6::P64;
           P64[Hp - 64] = _scVh7::P64;
           P64[Hp - 56] = _scVh8::P64;
           P64[Hp - 48] = _scVh9::P64;
           P64[Hp - 40] = _scVha::P64;
           P64[Hp - 32] = _scVhb::P64;
           P64[Hp - 24] = _scVhc::P64;
           P64[Hp - 16] = _scVhd::P64;
           P64[Hp - 8] = _scVhe::P64;
           P64[Hp] = _scVhi::P64;
           R3 = Hp - 128;
           R2 = lvl37_rcV5G_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scViA_info" {
     sat_scViA_info:
         const sat_scViA_entry;
         const 15;
         const 3852585664527;
         const ScWiZ_srt+480;
 },
 eta1_scVhj_entry() //  [R1]
         { []
         }
     {offset
       cd6XJ: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto cd6XN; else goto cd6XM;
       cd6XN: // global
           HpAlloc = 136;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6XM: // global
           _scVh1::P64 = P64[R1 + 16];
           _scVh2::P64 = P64[R1 + 24];
           _scVh3::P64 = P64[R1 + 32];
           _scVh4::P64 = P64[R1 + 40];
           _scVh5::P64 = P64[R1 + 48];
           _scVh6::P64 = P64[R1 + 56];
           _scVh7::P64 = P64[R1 + 64];
           _scVh8::P64 = P64[R1 + 72];
           _scVh9::P64 = P64[R1 + 80];
           _scVha::P64 = P64[R1 + 88];
           _scVhb::P64 = P64[R1 + 96];
           _scVhc::P64 = P64[R1 + 104];
           _scVhd::P64 = P64[R1 + 112];
           _scVhe::P64 = P64[R1 + 120];
           _scVhi::P64 = P64[R1 + 128];
           I64[Hp - 128] = sat_scViA_info;
           P64[Hp - 112] = _scVh1::P64;
           P64[Hp - 104] = _scVh2::P64;
           P64[Hp - 96] = _scVh3::P64;
           P64[Hp - 88] = _scVh4::P64;
           P64[Hp - 80] = _scVh5::P64;
           P64[Hp - 72] = _scVh6::P64;
           P64[Hp - 64] = _scVh7::P64;
           P64[Hp - 56] = _scVh8::P64;
           P64[Hp - 48] = _scVh9::P64;
           P64[Hp - 40] = _scVha::P64;
           P64[Hp - 32] = _scVhb::P64;
           P64[Hp - 24] = _scVhc::P64;
           P64[Hp - 16] = _scVhd::P64;
           P64[Hp - 8] = _scVhe::P64;
           P64[Hp] = _scVhi::P64;
           R3 = Hp - 128;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . eta1_scVhj_info" {
     eta1_scVhj_info:
         const eta1_scVhj_entry;
         const 15;
         const 3852585664527;
         const ScWiZ_srt+480;
 },
 sat_scViC_entry() //  [R1]
         { []
         }
     {offset
       cd6XV: // global
           _scViC::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cd6XW; else goto cd6XX;
       cd6XX: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto cd6XZ; else goto cd6XY;
       cd6XZ: // global
           HpAlloc = 136;
           goto cd6XW;
       cd6XW: // global
           R1 = _scViC::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6XY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scViC::P64;
           _scVh0::P64 = P64[_scViC::P64 + 16];
           _scVh1::P64 = P64[_scViC::P64 + 24];
           _scVh2::P64 = P64[_scViC::P64 + 32];
           _scVh3::P64 = P64[_scViC::P64 + 40];
           _scVh4::P64 = P64[_scViC::P64 + 48];
           _scVh5::P64 = P64[_scViC::P64 + 56];
           _scVh6::P64 = P64[_scViC::P64 + 64];
           _scVh7::P64 = P64[_scViC::P64 + 72];
           _scVh8::P64 = P64[_scViC::P64 + 80];
           _scVh9::P64 = P64[_scViC::P64 + 88];
           _scVha::P64 = P64[_scViC::P64 + 96];
           _scVhb::P64 = P64[_scViC::P64 + 104];
           _scVhc::P64 = P64[_scViC::P64 + 112];
           _scVhd::P64 = P64[_scViC::P64 + 120];
           _scVhe::P64 = P64[_scViC::P64 + 128];
           _scVhi::P64 = P64[_scViC::P64 + 136];
           I64[Hp - 128] = eta1_scVhj_info;
           P64[Hp - 112] = _scVh1::P64;
           P64[Hp - 104] = _scVh2::P64;
           P64[Hp - 96] = _scVh3::P64;
           P64[Hp - 88] = _scVh4::P64;
           P64[Hp - 80] = _scVh5::P64;
           P64[Hp - 72] = _scVh6::P64;
           P64[Hp - 64] = _scVh7::P64;
           P64[Hp - 56] = _scVh8::P64;
           P64[Hp - 48] = _scVh9::P64;
           P64[Hp - 40] = _scVha::P64;
           P64[Hp - 32] = _scVhb::P64;
           P64[Hp - 24] = _scVhc::P64;
           P64[Hp - 16] = _scVhd::P64;
           P64[Hp - 8] = _scVhe::P64;
           P64[Hp] = _scVhi::P64;
           I64[Sp - 32] = block_cd6XO_info;
           R1 = _scVh0::P64;
           P64[Sp - 24] = Hp - 128;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ud6Y6; else goto cd6XP;
       ud6Y6: // global
           call _cd6XO(R1) args: 0, res: 0, upd: 0;
       cd6XP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scViC_info" {
     sat_scViC_info:
         const sat_scViC_entry;
         const 16;
         const 3852585664527;
         const ScWiZ_srt+480;
 },
 _cd6XO() //  [R1]
         { []
         }
     {offset
       cd6XO: // global
           _cd6KM::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cd6XS; else goto cd6XT;
       cd6XS: // global
           R3 = _cd6KM::P64;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cd6XT: // global
           R3 = _cd6KM::P64;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd6XO_info" {
     block_cd6XO_info:
         const _cd6XO;
         const 1;
         const 12884901918;
         const ScWiZ_srt+544;
 },
 g1_scVhh_entry() //  [R1, R2]
         { []
         }
     {offset
       cd6Y7: // global
           Hp = Hp + 144;
           if (Hp > HpLim) (likely: False) goto cd6Yb; else goto cd6Ya;
       cd6Yb: // global
           HpAlloc = 144;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd6Ya: // global
           _scVh0::P64 = P64[R1 + 7];
           _scVh1::P64 = P64[R1 + 15];
           _scVh2::P64 = P64[R1 + 23];
           _scVh3::P64 = P64[R1 + 31];
           _scVh4::P64 = P64[R1 + 39];
           _scVh5::P64 = P64[R1 + 47];
           _scVh6::P64 = P64[R1 + 55];
           _scVh7::P64 = P64[R1 + 63];
           _scVh8::P64 = P64[R1 + 71];
           _scVh9::P64 = P64[R1 + 79];
           _scVha::P64 = P64[R1 + 87];
           _scVhb::P64 = P64[R1 + 95];
           _scVhc::P64 = P64[R1 + 103];
           _scVhd::P64 = P64[R1 + 111];
           _scVhe::P64 = P64[R1 + 119];
           I64[Hp - 136] = sat_scViC_info;
           P64[Hp - 120] = _scVh0::P64;
           P64[Hp - 112] = _scVh1::P64;
           P64[Hp - 104] = _scVh2::P64;
           P64[Hp - 96] = _scVh3::P64;
           P64[Hp - 88] = _scVh4::P64;
           P64[Hp - 80] = _scVh5::P64;
           P64[Hp - 72] = _scVh6::P64;
           P64[Hp - 64] = _scVh7::P64;
           P64[Hp - 56] = _scVh8::P64;
           P64[Hp - 48] = _scVh9::P64;
           P64[Hp - 40] = _scVha::P64;
           P64[Hp - 32] = _scVhb::P64;
           P64[Hp - 24] = _scVhc::P64;
           P64[Hp - 16] = _scVhd::P64;
           P64[Hp - 8] = _scVhe::P64;
           P64[Hp] = R2;
           R3 = Hp - 136;
           R2 = lvl36_rcV5F_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . g1_scVhh_info" {
     g1_scVhh_info:
         const g1_scVhh_entry;
         const 15;
         const 3852585664520;
         const 4294967301;
         const ScWiZ_srt+480;
 },
 sat_scViE_entry() //  [R1]
         { []
         }
     {offset
       cd6Yj: // global
           R2 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           call g1_scVhh_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scViE_info" {
     sat_scViE_info:
         const sat_scViE_entry;
         const 2;
         const 3852585664530;
         const ScWiZ_srt+480;
 },
 sat_scViG_entry() //  [R1]
         { []
         }
     {offset
       cd6Yw: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cd6YA; else goto cd6Yz;
       cd6YA: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6Yz: // global
           _scVgY::P64 = P64[R1 + 16];
           _scVhh::P64 = P64[R1 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _scVgY::P64;
           R2 = Hp - 14;
           R1 = _scVhh::P64;
           call g1_scVhh_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scViG_info" {
     sat_scViG_info:
         const sat_scViG_entry;
         const 2;
         const 3852585664530;
         const ScWiZ_srt+480;
 },
 sat_scViH_entry() //  [R1]
         { []
         }
     {offset
       cd6YB: // global
           _scViH::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd6YC; else goto cd6YD;
       cd6YD: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cd6YF; else goto cd6YE;
       cd6YF: // global
           HpAlloc = 32;
           goto cd6YC;
       cd6YC: // global
           R1 = _scViH::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd6YE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scViH::P64;
           _scVgY::P64 = P64[_scViH::P64 + 16];
           _scVhh::P64 = P64[_scViH::P64 + 24];
           I64[Hp - 24] = sat_scViG_info;
           P64[Hp - 8] = _scVgY::P64;
           P64[Hp] = _scVhh::P64;
           R3 = Hp - 24;
           R2 = f5_rcV5E_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scViH_info" {
     sat_scViH_info:
         const sat_scViH_entry;
         const 2;
         const 8250632175634;
         const ScWiZ_srt+480;
 },
 GHC.RTS.Flags.$fShowDebugFlags_$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cd6YG: // global
           if ((Sp + -136) < SpLim) (likely: False) goto cd6YH; else goto cd6YI;
       cd6YH: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fShowDebugFlags_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cd6YI: // global
           I64[Sp - 24] = block_cd6Kt_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ud6YS; else goto cd6Ku;
       ud6YS: // global
           call _cd6Kt(R1) args: 0, res: 0, upd: 0;
       cd6Ku: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowDebugFlags_$cshowsPrec_info" {
     GHC.RTS.Flags.$fShowDebugFlags_$cshowsPrec_info:
         const GHC.RTS.Flags.$fShowDebugFlags_$cshowsPrec_entry;
         const 0;
         const 17046725197838;
         const 12884901911;
         const ScWiZ_srt+480;
 },
 _cd6Kt() //  [R1]
         { []
         }
     {offset
       cd6Kt: // global
           I64[Sp - 112] = block_cd6Ky_info;
           _scVh0::P64 = P64[R1 + 7];
           _scVh1::P64 = P64[R1 + 15];
           _scVh2::P64 = P64[R1 + 23];
           _scVh3::P64 = P64[R1 + 31];
           _scVh4::P64 = P64[R1 + 39];
           _scVh5::P64 = P64[R1 + 47];
           _scVh6::P64 = P64[R1 + 55];
           _scVh7::P64 = P64[R1 + 63];
           _scVh8::P64 = P64[R1 + 71];
           _scVh9::P64 = P64[R1 + 79];
           _scVha::P64 = P64[R1 + 87];
           _scVhb::P64 = P64[R1 + 95];
           _scVhc::P64 = P64[R1 + 103];
           _scVhd::P64 = P64[R1 + 111];
           _scVhe::P64 = P64[R1 + 119];
           R1 = P64[Sp + 8];
           P64[Sp - 104] = _scVh2::P64;
           P64[Sp - 96] = _scVh3::P64;
           P64[Sp - 88] = _scVh4::P64;
           P64[Sp - 80] = _scVh5::P64;
           P64[Sp - 72] = _scVh6::P64;
           P64[Sp - 64] = _scVh7::P64;
           P64[Sp - 56] = _scVh8::P64;
           P64[Sp - 48] = _scVh9::P64;
           P64[Sp - 40] = _scVha::P64;
           P64[Sp - 32] = _scVhb::P64;
           P64[Sp - 24] = _scVhc::P64;
           P64[Sp - 16] = _scVhd::P64;
           P64[Sp - 8] = _scVhe::P64;
           P64[Sp] = _scVh1::P64;
           P64[Sp + 8] = _scVh0::P64;
           Sp = Sp - 112;
           if (R1 & 7 != 0) goto ud6YR; else goto cd6Kz;
       ud6YR: // global
           call _cd6Ky(R1) args: 0, res: 0, upd: 0;
       cd6Kz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cd6Kt_info" {
     block_cd6Kt_info:
         const _cd6Kt;
         const 2;
         const 8250632175646;
         const ScWiZ_srt+480;
 },
 _cd6Ky() //  [R1]
         { []
         }
     {offset
       cd6Ky: // global
           Hp = Hp + 184;
           if (Hp > HpLim) (likely: False) goto cd6YM; else goto cd6YL;
       cd6YM: // global
           HpAlloc = 184;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cd6YL: // global
           _scVhg::I64 = I64[R1 + 7];
           I64[Hp - 176] = g1_scVhh_info;
           P64[Hp - 168] = P64[Sp + 120];
           P64[Hp - 160] = P64[Sp + 112];
           P64[Hp - 152] = P64[Sp + 8];
           P64[Hp - 144] = P64[Sp + 16];
           P64[Hp - 136] = P64[Sp + 24];
           P64[Hp - 128] = P64[Sp + 32];
           P64[Hp - 120] = P64[Sp + 40];
           P64[Hp - 112] = P64[Sp + 48];
           P64[Hp - 104] = P64[Sp + 56];
           P64[Hp - 96] = P64[Sp + 64];
           P64[Hp - 88] = P64[Sp + 72];
           P64[Hp - 80] = P64[Sp + 80];
           P64[Hp - 72] = P64[Sp + 88];
           P64[Hp - 64] = P64[Sp + 96];
           P64[Hp - 56] = P64[Sp + 104];
           _scVgY::P64 = P64[Sp + 128];
           _cd6KD::P64 = Hp - 175;
           if (%MO_S_Lt_W64(_scVhg::I64, 11)) goto cd6YO; else goto cd6YQ;
       cd6YO: // global
           I64[Hp - 48] = sat_scViE_info;
           P64[Hp - 32] = _scVgY::P64;
           P64[Hp - 24] = _cd6KD::P64;
           _cd6Yf::P64 = Hp - 48;
           Hp = Hp - 24;
           R3 = _cd6Yf::P64;
           R2 = f5_rcV5E_closure;
           Sp = Sp + 136;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cd6YQ: // global
           I64[Hp - 48] = sat_scViH_info;
           P64[Hp - 32] = _scVgY::P64;
           P64[Hp - 24] = _cd6KD::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 136;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd6Ky_info" {
     block_cd6Ky_info:
         const _cd6Ky;
         const 16;
         const 8250632175646;
         const ScWiZ_srt+480;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.812125839 UTC

[section ""data" . GHC.RTS.Flags.$fShowDebugFlags_$cshow_closure" {
     GHC.RTS.Flags.$fShowDebugFlags_$cshow_closure:
         const GHC.RTS.Flags.$fShowDebugFlags_$cshow_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowDebugFlags_$cshow_entry() //  [R2]
         { []
         }
     {offset
       cd75Y: // global
           R4 = GHC.Types.[]_closure+1;
           R3 = R2;
           R2 = GHC.RTS.Flags.$fEnumDoCostCentres10_closure+1;
           call GHC.RTS.Flags.$fShowDebugFlags_$cshowsPrec_entry(R4,
                                                                 R3,
                                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowDebugFlags_$cshow_info" {
     GHC.RTS.Flags.$fShowDebugFlags_$cshow_info:
         const GHC.RTS.Flags.$fShowDebugFlags_$cshow_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const ScWiZ_srt+568;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.816261475 UTC

[section ""data" . GHC.RTS.Flags.$fShowDebugFlags1_closure" {
     GHC.RTS.Flags.$fShowDebugFlags1_closure:
         const GHC.RTS.Flags.$fShowDebugFlags1_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowDebugFlags1_entry() //  [R2, R3]
         { []
         }
     {offset
       cd769: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.RTS.Flags.$fEnumDoCostCentres10_closure+1;
           call GHC.RTS.Flags.$fShowDebugFlags_$cshowsPrec_entry(R4,
                                                                 R3,
                                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowDebugFlags1_info" {
     GHC.RTS.Flags.$fShowDebugFlags1_info:
         const GHC.RTS.Flags.$fShowDebugFlags1_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const ScWiZ_srt+568;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.8197497 UTC

[section ""data" . GHC.RTS.Flags.$fShowDebugFlags_$cshowList_closure" {
     GHC.RTS.Flags.$fShowDebugFlags_$cshowList_closure:
         const GHC.RTS.Flags.$fShowDebugFlags_$cshowList_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowDebugFlags_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       cd76k: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.RTS.Flags.$fShowDebugFlags1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowDebugFlags_$cshowList_info" {
     GHC.RTS.Flags.$fShowDebugFlags_$cshowList_info:
         const GHC.RTS.Flags.$fShowDebugFlags_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const ScWiZ_srt+576;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.823479982 UTC

[section ""data" . GHC.RTS.Flags.$fShowDebugFlags_closure" {
     GHC.RTS.Flags.$fShowDebugFlags_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.RTS.Flags.$fShowDebugFlags_$cshowsPrec_closure+3;
         const GHC.RTS.Flags.$fShowDebugFlags_$cshow_closure+1;
         const GHC.RTS.Flags.$fShowDebugFlags_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.825199749 UTC

[section ""cstring" . lvl51_rcV5U_bytes" {
     lvl51_rcV5U_bytes:
         I8[] [77,105,115,99,70,108,97,103,115,32,123]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.82698793 UTC

[section ""cstring" . lvl52_rcV5V_bytes" {
     lvl52_rcV5V_bytes:
         I8[] [116,105,99,107,73,110,116,101,114,118,97,108,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.828627767 UTC

[section ""cstring" . lvl53_rcV5W_bytes" {
     lvl53_rcV5W_bytes:
         I8[] [105,110,115,116,97,108,108,83,105,103,110,97,108,72,97,110,100,108,101,114,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.830343569 UTC

[section ""cstring" . lvl54_rcV5X_bytes" {
     lvl54_rcV5X_bytes:
         I8[] [105,110,115,116,97,108,108,83,69,72,72,97,110,100,108,101,114,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.83199415 UTC

[section ""cstring" . lvl55_rcV5Y_bytes" {
     lvl55_rcV5Y_bytes:
         I8[] [103,101,110,101,114,97,116,101,67,114,97,115,104,68,117,109,112,70,105,108,101,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.833680767 UTC

[section ""cstring" . lvl56_rcV5Z_bytes" {
     lvl56_rcV5Z_bytes:
         I8[] [103,101,110,101,114,97,116,101,83,116,97,99,107,84,114,97,99,101,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.835378653 UTC

[section ""cstring" . lvl57_rcV60_bytes" {
     lvl57_rcV60_bytes:
         I8[] [109,97,99,104,105,110,101,82,101,97,100,97,98,108,101,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.837073376 UTC

[section ""cstring" . lvl58_rcV61_bytes" {
     lvl58_rcV61_bytes:
         I8[] [108,105,110,107,101,114,77,101,109,66,97,115,101,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.860193873 UTC

[section ""data" . GHC.RTS.Flags.$w$cshowsPrec6_closure" {
     GHC.RTS.Flags.$w$cshowsPrec6_closure:
         const GHC.RTS.Flags.$w$cshowsPrec6_info;
         const 0;
 },
 GHC.RTS.Flags.$w$cshowsPrec6_slow() //  [R1]
         { []
         }
     {offset
       cd76B: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.RTS.Flags.$w$cshowsPrec6_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2,
                                                   R1) args: 32, res: 0, upd: 8;
     }
 },
 w1_scViT_entry() //  [R1]
         { []
         }
     {offset
       cd76M: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cd76N; else goto cd76O;
       cd76N: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd76O: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cd76J_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ud770; else goto cd76K;
       ud770: // global
           call _cd76J(R1) args: 0, res: 0, upd: 0;
       cd76K: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . w1_scViT_info" {
     w1_scViT_info:
         const w1_scViT_entry;
         const 1;
         const 16;
 },
 _cd76J() //  [R1]
         { []
         }
     {offset
       cd76J: // global
           _scViV::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_scViV::I64, 0)) goto cd76Y; else goto cd76Z;
       cd76Y: // global
           R2 = _scViV::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.wordToInteger_entry(R2) args: 24, res: 0, upd: 24;
       cd76Z: // global
           R2 = _scViV::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd76J_info" {
     block_cd76J_info:
         const _cd76J;
         const 0;
         const 30;
 },
 sat_scVj7_entry() //  [R1]
         { []
         }
     {offset
       cd78C: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd78D; else goto cd78E;
       cd78D: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd78E: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.RTS.Flags.$fShowCCFlags2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVj7_info" {
     sat_scVj7_info:
         const sat_scVj7_entry;
         const 1;
         const 16;
 },
 sat_scVjb_entry() //  [R1]
         { []
         }
     {offset
       cd78F: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cd78J; else goto cd78K;
       cd78J: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd78K: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cd78t_info;
           _scViZ::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _scViZ::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ud78R; else goto cd78u;
       ud78R: // global
           call _cd78t(R1) args: 0, res: 0, upd: 0;
       cd78u: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVjb_info" {
     sat_scVjb_info:
         const sat_scVjb_entry;
         const 2;
         const 18;
 },
 _cd78t() //  [R1]
         { []
         }
     {offset
       cd78t: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cd78N; else goto cd78M;
       cd78N: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cd78M: // global
           _scVj6::I64 = I64[R1 + 7];
           I64[Hp - 16] = sat_scVj7_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_cd78G_info;
           R3 = Hp - 16;
           R2 = _scVj6::I64;
           Sp = Sp + 8;
           call GHC.Show.$wshowWord_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cd78t_info" {
     block_cd78t_info:
         const _cd78t;
         const 1;
         const 30;
 },
 _cd78G() //  [R1, R2]
         { []
         }
     {offset
       cd78G: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cd78Q; else goto cd78P;
       cd78Q: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cd78P: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd78G_info" {
     block_cd78G_info:
         const _cd78G;
         const 0;
         const 30;
 },
 sat_scVjc_entry() //  [R1]
         { []
         }
     {offset
       cd78S: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cd78W; else goto cd78V;
       cd78W: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd78V: // global
           _scViS::P64 = P64[R1 + 16];
           _scViZ::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_scVjb_info;
           P64[Hp - 8] = _scViS::P64;
           P64[Hp] = _scViZ::P64;
           R3 = Hp - 24;
           R2 = lvl58_rcV61_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVjc_info" {
     sat_scVjc_info:
         const sat_scVjc_entry;
         const 2;
         const 18;
 },
 sat_scVjd_entry() //  [R1]
         { []
         }
     {offset
       cd78X: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cd791; else goto cd790;
       cd791: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd790: // global
           _scViS::P64 = P64[R1 + 16];
           _scViZ::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_scVjc_info;
           P64[Hp - 8] = _scViS::P64;
           P64[Hp] = _scViZ::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVjd_info" {
     sat_scVjd_info:
         const sat_scVjd_entry;
         const 2;
         const 4294967314;
         const ScWiZ_srt+480;
 },
 sat_scVjg_entry() //  [R1]
         { []
         }
     {offset
       cd79p: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd79q; else goto cd79r;
       cd79q: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd79r: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.RTS.Flags.$fShowCCFlags2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVjg_info" {
     sat_scVjg_info:
         const sat_scVjg_entry;
         const 1;
         const 16;
 },
 sat_scVjk_entry() //  [R1]
         { []
         }
     {offset
       cd79s: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cd79w; else goto cd79x;
       cd79w: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd79x: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cd79g_info;
           _scViZ::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _scViZ::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ud79E; else goto cd79h;
       ud79E: // global
           call _cd79g(R1) args: 0, res: 0, upd: 0;
       cd79h: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVjk_info" {
     sat_scVjk_info:
         const sat_scVjk_entry;
         const 2;
         const 18;
 },
 _cd79g() //  [R1]
         { []
         }
     {offset
       cd79g: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cd79A; else goto cd79z;
       cd79A: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cd79z: // global
           _scVjf::I64 = I64[R1 + 7];
           I64[Hp - 16] = sat_scVjg_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_cd79t_info;
           R3 = Hp - 16;
           R2 = _scVjf::I64;
           Sp = Sp + 8;
           call GHC.Show.$wshowWord_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cd79g_info" {
     block_cd79g_info:
         const _cd79g;
         const 1;
         const 30;
 },
 _cd79t() //  [R1, R2]
         { []
         }
     {offset
       cd79t: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cd79D; else goto cd79C;
       cd79D: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cd79C: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd79t_info" {
     block_cd79t_info:
         const _cd79t;
         const 0;
         const 30;
 },
 sat_scVjl_entry() //  [R1]
         { []
         }
     {offset
       cd79F: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cd79J; else goto cd79I;
       cd79J: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd79I: // global
           _scViS::P64 = P64[R1 + 16];
           _scViZ::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_scVjk_info;
           P64[Hp - 8] = _scViS::P64;
           P64[Hp] = _scViZ::P64;
           R3 = Hp - 24;
           R2 = lvl58_rcV61_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVjl_info" {
     sat_scVjl_info:
         const sat_scVjl_entry;
         const 2;
         const 18;
 },
 sat_scVjm_entry() //  [R1]
         { []
         }
     {offset
       cd79K: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cd79O; else goto cd79N;
       cd79O: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd79N: // global
           _scViS::P64 = P64[R1 + 16];
           _scViZ::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_scVjl_info;
           P64[Hp - 8] = _scViS::P64;
           P64[Hp] = _scViZ::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVjm_info" {
     sat_scVjm_info:
         const sat_scVjm_entry;
         const 2;
         const 4294967314;
         const ScWiZ_srt+480;
 },
 sat_scVjn_entry() //  [R1]
         { []
         }
     {offset
       cd79T: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cd79U; else goto cd79V;
       cd79U: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd79V: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cd78c_info;
           _scViS::P64 = P64[R1 + 24];
           _scViZ::P64 = P64[R1 + 32];
           R1 = P64[R1 + 16];
           P64[Sp - 32] = _scViS::P64;
           P64[Sp - 24] = _scViZ::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ud7a2; else goto cd78d;
       ud7a2: // global
           call _cd78c(R1) args: 0, res: 0, upd: 0;
       cd78d: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVjn_info" {
     sat_scVjn_info:
         const sat_scVjn_entry;
         const 3;
         const 3302829850639;
         const ScWiZ_srt+480;
 },
 _cd78c() //  [R1]
         { []
         }
     {offset
       cd78c: // global
           _scViS::P64 = P64[Sp + 8];
           _scViZ::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto cd79Q; else goto cd79R;
       cd79Q: // global
           Hp = Hp + 32;
           _scVj4::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cd7a1; else goto cd79X;
       cd79X: // global
           I64[Hp - 24] = sat_scVjd_info;
           P64[Hp - 8] = _scViS::P64;
           P64[Hp] = _scViZ::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cd79R: // global
           Hp = Hp + 32;
           _scVj4::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cd7a1; else goto cd7a0;
       cd7a1: // global
           HpAlloc = 32;
           R1 = _scVj4::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cd7a0: // global
           I64[Hp - 24] = sat_scVjm_info;
           P64[Hp - 8] = _scViS::P64;
           P64[Hp] = _scViZ::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd78c_info" {
     block_cd78c_info:
         const _cd78c;
         const 2;
         const 3302829850654;
         const ScWiZ_srt+480;
 },
 sat_scVjo_entry() //  [R1]
         { []
         }
     {offset
       cd7a3: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cd7a7; else goto cd7a6;
       cd7a7: // global
           HpAlloc = 40;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7a6: // global
           _scViR::P64 = P64[R1 + 16];
           _scViS::P64 = P64[R1 + 24];
           _scViZ::P64 = P64[R1 + 32];
           I64[Hp - 32] = sat_scVjn_info;
           P64[Hp - 16] = _scViR::P64;
           P64[Hp - 8] = _scViS::P64;
           P64[Hp] = _scViZ::P64;
           R3 = Hp - 32;
           R2 = lvl57_rcV60_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVjo_info" {
     sat_scVjo_info:
         const sat_scVjo_entry;
         const 3;
         const 3302829850639;
         const ScWiZ_srt+480;
 },
 eta3_scVj3_entry() //  [R1]
         { []
         }
     {offset
       cd7a8: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cd7ac; else goto cd7ab;
       cd7ac: // global
           HpAlloc = 40;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7ab: // global
           _scViR::P64 = P64[R1 + 16];
           _scViS::P64 = P64[R1 + 24];
           _scViZ::P64 = P64[R1 + 32];
           I64[Hp - 32] = sat_scVjo_info;
           P64[Hp - 16] = _scViR::P64;
           P64[Hp - 8] = _scViS::P64;
           P64[Hp] = _scViZ::P64;
           R3 = Hp - 32;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . eta3_scVj3_info" {
     eta3_scVj3_info:
         const eta3_scVj3_entry;
         const 3;
         const 3302829850639;
         const ScWiZ_srt+480;
 },
 sat_scVjq_entry() //  [R1]
         { []
         }
     {offset
       cd7ak: // global
           _scVjq::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cd7al; else goto cd7am;
       cd7am: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cd7ao; else goto cd7an;
       cd7ao: // global
           HpAlloc = 40;
           goto cd7al;
       cd7al: // global
           R1 = _scVjq::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7an: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVjq::P64;
           _scViQ::P64 = P64[_scVjq::P64 + 16];
           _scViR::P64 = P64[_scVjq::P64 + 24];
           _scViS::P64 = P64[_scVjq::P64 + 32];
           _scViZ::P64 = P64[_scVjq::P64 + 40];
           I64[Hp - 32] = eta3_scVj3_info;
           P64[Hp - 16] = _scViR::P64;
           P64[Hp - 8] = _scViS::P64;
           P64[Hp] = _scViZ::P64;
           I64[Sp - 32] = block_cd7ad_info;
           R1 = _scViQ::P64;
           P64[Sp - 24] = Hp - 32;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ud7av; else goto cd7ae;
       ud7av: // global
           call _cd7ad(R1) args: 0, res: 0, upd: 0;
       cd7ae: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVjq_info" {
     sat_scVjq_info:
         const sat_scVjq_entry;
         const 4;
         const 3302829850639;
         const ScWiZ_srt+480;
 },
 _cd7ad() //  [R1]
         { []
         }
     {offset
       cd7ad: // global
           _cd780::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cd7ah; else goto cd7ai;
       cd7ah: // global
           R3 = _cd780::P64;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cd7ai: // global
           R3 = _cd780::P64;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd7ad_info" {
     block_cd7ad_info:
         const _cd7ad;
         const 1;
         const 12884901918;
         const ScWiZ_srt+544;
 },
 sat_scVjr_entry() //  [R1]
         { []
         }
     {offset
       cd7aw: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cd7aA; else goto cd7az;
       cd7aA: // global
           HpAlloc = 48;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7az: // global
           _scViQ::P64 = P64[R1 + 16];
           _scViR::P64 = P64[R1 + 24];
           _scViS::P64 = P64[R1 + 32];
           _scViZ::P64 = P64[R1 + 40];
           I64[Hp - 40] = sat_scVjq_info;
           P64[Hp - 24] = _scViQ::P64;
           P64[Hp - 16] = _scViR::P64;
           P64[Hp - 8] = _scViS::P64;
           P64[Hp] = _scViZ::P64;
           R3 = Hp - 40;
           R2 = lvl56_rcV5Z_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVjr_info" {
     sat_scVjr_info:
         const sat_scVjr_entry;
         const 4;
         const 3302829850639;
         const ScWiZ_srt+480;
 },
 eta2_scVj2_entry() //  [R1]
         { []
         }
     {offset
       cd7aB: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cd7aF; else goto cd7aE;
       cd7aF: // global
           HpAlloc = 48;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7aE: // global
           _scViQ::P64 = P64[R1 + 16];
           _scViR::P64 = P64[R1 + 24];
           _scViS::P64 = P64[R1 + 32];
           _scViZ::P64 = P64[R1 + 40];
           I64[Hp - 40] = sat_scVjr_info;
           P64[Hp - 24] = _scViQ::P64;
           P64[Hp - 16] = _scViR::P64;
           P64[Hp - 8] = _scViS::P64;
           P64[Hp] = _scViZ::P64;
           R3 = Hp - 40;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . eta2_scVj2_info" {
     eta2_scVj2_info:
         const eta2_scVj2_entry;
         const 4;
         const 3302829850639;
         const ScWiZ_srt+480;
 },
 sat_scVjt_entry() //  [R1]
         { []
         }
     {offset
       cd7aN: // global
           _scVjt::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cd7aO; else goto cd7aP;
       cd7aP: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cd7aR; else goto cd7aQ;
       cd7aR: // global
           HpAlloc = 48;
           goto cd7aO;
       cd7aO: // global
           R1 = _scVjt::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7aQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVjt::P64;
           _scViP::P64 = P64[_scVjt::P64 + 16];
           _scViQ::P64 = P64[_scVjt::P64 + 24];
           _scViR::P64 = P64[_scVjt::P64 + 32];
           _scViS::P64 = P64[_scVjt::P64 + 40];
           _scViZ::P64 = P64[_scVjt::P64 + 48];
           I64[Hp - 40] = eta2_scVj2_info;
           P64[Hp - 24] = _scViQ::P64;
           P64[Hp - 16] = _scViR::P64;
           P64[Hp - 8] = _scViS::P64;
           P64[Hp] = _scViZ::P64;
           I64[Sp - 32] = block_cd7aG_info;
           R1 = _scViP::P64;
           P64[Sp - 24] = Hp - 40;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ud7aY; else goto cd7aH;
       ud7aY: // global
           call _cd7aG(R1) args: 0, res: 0, upd: 0;
       cd7aH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVjt_info" {
     sat_scVjt_info:
         const sat_scVjt_entry;
         const 5;
         const 3302829850639;
         const ScWiZ_srt+480;
 },
 _cd7aG() //  [R1]
         { []
         }
     {offset
       cd7aG: // global
           _cd77O::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cd7aK; else goto cd7aL;
       cd7aK: // global
           R3 = _cd77O::P64;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cd7aL: // global
           R3 = _cd77O::P64;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd7aG_info" {
     block_cd7aG_info:
         const _cd7aG;
         const 1;
         const 12884901918;
         const ScWiZ_srt+544;
 },
 sat_scVju_entry() //  [R1]
         { []
         }
     {offset
       cd7aZ: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cd7b3; else goto cd7b2;
       cd7b3: // global
           HpAlloc = 56;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7b2: // global
           _scViP::P64 = P64[R1 + 16];
           _scViQ::P64 = P64[R1 + 24];
           _scViR::P64 = P64[R1 + 32];
           _scViS::P64 = P64[R1 + 40];
           _scViZ::P64 = P64[R1 + 48];
           I64[Hp - 48] = sat_scVjt_info;
           P64[Hp - 32] = _scViP::P64;
           P64[Hp - 24] = _scViQ::P64;
           P64[Hp - 16] = _scViR::P64;
           P64[Hp - 8] = _scViS::P64;
           P64[Hp] = _scViZ::P64;
           R3 = Hp - 48;
           R2 = lvl55_rcV5Y_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVju_info" {
     sat_scVju_info:
         const sat_scVju_entry;
         const 5;
         const 3302829850639;
         const ScWiZ_srt+480;
 },
 eta1_scVj1_entry() //  [R1]
         { []
         }
     {offset
       cd7b4: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cd7b8; else goto cd7b7;
       cd7b8: // global
           HpAlloc = 56;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7b7: // global
           _scViP::P64 = P64[R1 + 16];
           _scViQ::P64 = P64[R1 + 24];
           _scViR::P64 = P64[R1 + 32];
           _scViS::P64 = P64[R1 + 40];
           _scViZ::P64 = P64[R1 + 48];
           I64[Hp - 48] = sat_scVju_info;
           P64[Hp - 32] = _scViP::P64;
           P64[Hp - 24] = _scViQ::P64;
           P64[Hp - 16] = _scViR::P64;
           P64[Hp - 8] = _scViS::P64;
           P64[Hp] = _scViZ::P64;
           R3 = Hp - 48;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . eta1_scVj1_info" {
     eta1_scVj1_info:
         const eta1_scVj1_entry;
         const 5;
         const 3302829850639;
         const ScWiZ_srt+480;
 },
 sat_scVjw_entry() //  [R1]
         { []
         }
     {offset
       cd7bg: // global
           _scVjw::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cd7bh; else goto cd7bi;
       cd7bi: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cd7bk; else goto cd7bj;
       cd7bk: // global
           HpAlloc = 56;
           goto cd7bh;
       cd7bh: // global
           R1 = _scVjw::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7bj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVjw::P64;
           _scViO::P64 = P64[_scVjw::P64 + 16];
           _scViP::P64 = P64[_scVjw::P64 + 24];
           _scViQ::P64 = P64[_scVjw::P64 + 32];
           _scViR::P64 = P64[_scVjw::P64 + 40];
           _scViS::P64 = P64[_scVjw::P64 + 48];
           _scViZ::P64 = P64[_scVjw::P64 + 56];
           I64[Hp - 48] = eta1_scVj1_info;
           P64[Hp - 32] = _scViP::P64;
           P64[Hp - 24] = _scViQ::P64;
           P64[Hp - 16] = _scViR::P64;
           P64[Hp - 8] = _scViS::P64;
           P64[Hp] = _scViZ::P64;
           I64[Sp - 32] = block_cd7b9_info;
           R1 = _scViO::P64;
           P64[Sp - 24] = Hp - 48;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ud7br; else goto cd7ba;
       ud7br: // global
           call _cd7b9(R1) args: 0, res: 0, upd: 0;
       cd7ba: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVjw_info" {
     sat_scVjw_info:
         const sat_scVjw_entry;
         const 6;
         const 3302829850639;
         const ScWiZ_srt+480;
 },
 _cd7b9() //  [R1]
         { []
         }
     {offset
       cd7b9: // global
           _cd77C::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cd7bd; else goto cd7be;
       cd7bd: // global
           R3 = _cd77C::P64;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cd7be: // global
           R3 = _cd77C::P64;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd7b9_info" {
     block_cd7b9_info:
         const _cd7b9;
         const 1;
         const 12884901918;
         const ScWiZ_srt+544;
 },
 sat_scVjx_entry() //  [R1]
         { []
         }
     {offset
       cd7bs: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cd7bw; else goto cd7bv;
       cd7bw: // global
           HpAlloc = 64;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7bv: // global
           _scViO::P64 = P64[R1 + 16];
           _scViP::P64 = P64[R1 + 24];
           _scViQ::P64 = P64[R1 + 32];
           _scViR::P64 = P64[R1 + 40];
           _scViS::P64 = P64[R1 + 48];
           _scViZ::P64 = P64[R1 + 56];
           I64[Hp - 56] = sat_scVjw_info;
           P64[Hp - 40] = _scViO::P64;
           P64[Hp - 32] = _scViP::P64;
           P64[Hp - 24] = _scViQ::P64;
           P64[Hp - 16] = _scViR::P64;
           P64[Hp - 8] = _scViS::P64;
           P64[Hp] = _scViZ::P64;
           R3 = Hp - 56;
           R2 = lvl54_rcV5X_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVjx_info" {
     sat_scVjx_info:
         const sat_scVjx_entry;
         const 6;
         const 3302829850639;
         const ScWiZ_srt+480;
 },
 eta_scVj0_entry() //  [R1]
         { []
         }
     {offset
       cd7bx: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cd7bB; else goto cd7bA;
       cd7bB: // global
           HpAlloc = 64;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7bA: // global
           _scViO::P64 = P64[R1 + 16];
           _scViP::P64 = P64[R1 + 24];
           _scViQ::P64 = P64[R1 + 32];
           _scViR::P64 = P64[R1 + 40];
           _scViS::P64 = P64[R1 + 48];
           _scViZ::P64 = P64[R1 + 56];
           I64[Hp - 56] = sat_scVjx_info;
           P64[Hp - 40] = _scViO::P64;
           P64[Hp - 32] = _scViP::P64;
           P64[Hp - 24] = _scViQ::P64;
           P64[Hp - 16] = _scViR::P64;
           P64[Hp - 8] = _scViS::P64;
           P64[Hp] = _scViZ::P64;
           R3 = Hp - 56;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . eta_scVj0_info" {
     eta_scVj0_info:
         const eta_scVj0_entry;
         const 6;
         const 3302829850639;
         const ScWiZ_srt+480;
 },
 sat_scVjz_entry() //  [R1]
         { []
         }
     {offset
       cd7bJ: // global
           _scVjz::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cd7bK; else goto cd7bL;
       cd7bL: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cd7bN; else goto cd7bM;
       cd7bN: // global
           HpAlloc = 64;
           goto cd7bK;
       cd7bK: // global
           R1 = _scVjz::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7bM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVjz::P64;
           _scViN::P64 = P64[_scVjz::P64 + 16];
           _scViO::P64 = P64[_scVjz::P64 + 24];
           _scViP::P64 = P64[_scVjz::P64 + 32];
           _scViQ::P64 = P64[_scVjz::P64 + 40];
           _scViR::P64 = P64[_scVjz::P64 + 48];
           _scViS::P64 = P64[_scVjz::P64 + 56];
           _scViZ::P64 = P64[_scVjz::P64 + 64];
           I64[Hp - 56] = eta_scVj0_info;
           P64[Hp - 40] = _scViO::P64;
           P64[Hp - 32] = _scViP::P64;
           P64[Hp - 24] = _scViQ::P64;
           P64[Hp - 16] = _scViR::P64;
           P64[Hp - 8] = _scViS::P64;
           P64[Hp] = _scViZ::P64;
           I64[Sp - 32] = block_cd7bC_info;
           R1 = _scViN::P64;
           P64[Sp - 24] = Hp - 56;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ud7bU; else goto cd7bD;
       ud7bU: // global
           call _cd7bC(R1) args: 0, res: 0, upd: 0;
       cd7bD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVjz_info" {
     sat_scVjz_info:
         const sat_scVjz_entry;
         const 7;
         const 3302829850639;
         const ScWiZ_srt+480;
 },
 _cd7bC() //  [R1]
         { []
         }
     {offset
       cd7bC: // global
           _cd77q::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cd7bG; else goto cd7bH;
       cd7bG: // global
           R3 = _cd77q::P64;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cd7bH: // global
           R3 = _cd77q::P64;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd7bC_info" {
     block_cd7bC_info:
         const _cd7bC;
         const 1;
         const 12884901918;
         const ScWiZ_srt+544;
 },
 sat_scVjA_entry() //  [R1]
         { []
         }
     {offset
       cd7bV: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cd7bZ; else goto cd7bY;
       cd7bZ: // global
           HpAlloc = 72;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7bY: // global
           _scViN::P64 = P64[R1 + 16];
           _scViO::P64 = P64[R1 + 24];
           _scViP::P64 = P64[R1 + 32];
           _scViQ::P64 = P64[R1 + 40];
           _scViR::P64 = P64[R1 + 48];
           _scViS::P64 = P64[R1 + 56];
           _scViZ::P64 = P64[R1 + 64];
           I64[Hp - 64] = sat_scVjz_info;
           P64[Hp - 48] = _scViN::P64;
           P64[Hp - 40] = _scViO::P64;
           P64[Hp - 32] = _scViP::P64;
           P64[Hp - 24] = _scViQ::P64;
           P64[Hp - 16] = _scViR::P64;
           P64[Hp - 8] = _scViS::P64;
           P64[Hp] = _scViZ::P64;
           R3 = Hp - 64;
           R2 = lvl53_rcV5W_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVjA_info" {
     sat_scVjA_info:
         const sat_scVjA_entry;
         const 7;
         const 3302829850639;
         const ScWiZ_srt+480;
 },
 sat_scVjB_entry() //  [R1]
         { []
         }
     {offset
       cd7c0: // global
           _scVjB::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd7c1; else goto cd7c2;
       cd7c2: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cd7c4; else goto cd7c3;
       cd7c4: // global
           HpAlloc = 72;
           goto cd7c1;
       cd7c1: // global
           R1 = _scVjB::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7c3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVjB::P64;
           _scViN::P64 = P64[_scVjB::P64 + 16];
           _scViO::P64 = P64[_scVjB::P64 + 24];
           _scViP::P64 = P64[_scVjB::P64 + 32];
           _scViQ::P64 = P64[_scVjB::P64 + 40];
           _scViR::P64 = P64[_scVjB::P64 + 48];
           _scViS::P64 = P64[_scVjB::P64 + 56];
           _scViZ::P64 = P64[_scVjB::P64 + 64];
           I64[Hp - 64] = sat_scVjA_info;
           P64[Hp - 48] = _scViN::P64;
           P64[Hp - 40] = _scViO::P64;
           P64[Hp - 32] = _scViP::P64;
           P64[Hp - 24] = _scViQ::P64;
           P64[Hp - 16] = _scViR::P64;
           P64[Hp - 8] = _scViS::P64;
           P64[Hp] = _scViZ::P64;
           R3 = Hp - 64;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVjB_info" {
     sat_scVjB_info:
         const sat_scVjB_entry;
         const 7;
         const 3302829850639;
         const ScWiZ_srt+480;
 },
 sat_scVjF_entry() //  [R1]
         { []
         }
     {offset
       cd7c8: // global
           _scVjF::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cd7c9; else goto cd7ca;
       cd7ca: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cd7cc; else goto cd7cb;
       cd7cc: // global
           HpAlloc = 72;
           goto cd7c9;
       cd7c9: // global
           R1 = _scVjF::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7cb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVjF::P64;
           _scViN::P64 = P64[_scVjF::P64 + 16];
           _scViO::P64 = P64[_scVjF::P64 + 24];
           _scViP::P64 = P64[_scVjF::P64 + 32];
           _scViQ::P64 = P64[_scVjF::P64 + 40];
           _scViR::P64 = P64[_scVjF::P64 + 48];
           _scViS::P64 = P64[_scVjF::P64 + 56];
           _scViT::P64 = P64[_scVjF::P64 + 64];
           _scViZ::P64 = P64[_scVjF::P64 + 72];
           I64[Hp - 64] = sat_scVjB_info;
           P64[Hp - 48] = _scViN::P64;
           P64[Hp - 40] = _scViO::P64;
           P64[Hp - 32] = _scViP::P64;
           P64[Hp - 24] = _scViQ::P64;
           P64[Hp - 16] = _scViR::P64;
           P64[Hp - 8] = _scViS::P64;
           P64[Hp] = _scViZ::P64;
           I64[Sp - 24] = block_cd7c5_info;
           R4 = Hp - 64;
           R3 = _scViT::P64;
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVjF_info" {
     sat_scVjF_info:
         const sat_scVjF_entry;
         const 8;
         const 13528395363123215;
         const ScWiZ_srt+384;
 },
 _cd7c5() //  [R1, R2]
         { []
         }
     {offset
       cd7c5: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cd7cf; else goto cd7ce;
       cd7cf: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cd7ce: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd7c5_info" {
     block_cd7c5_info:
         const _cd7c5;
         const 0;
         const 30;
 },
 sat_scVjG_entry() //  [R1]
         { []
         }
     {offset
       cd7cg: // global
           _scVjG::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd7ch; else goto cd7ci;
       cd7ci: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cd7ck; else goto cd7cj;
       cd7ck: // global
           HpAlloc = 80;
           goto cd7ch;
       cd7ch: // global
           R1 = _scVjG::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7cj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVjG::P64;
           _scViN::P64 = P64[_scVjG::P64 + 16];
           _scViO::P64 = P64[_scVjG::P64 + 24];
           _scViP::P64 = P64[_scVjG::P64 + 32];
           _scViQ::P64 = P64[_scVjG::P64 + 40];
           _scViR::P64 = P64[_scVjG::P64 + 48];
           _scViS::P64 = P64[_scVjG::P64 + 56];
           _scViT::P64 = P64[_scVjG::P64 + 64];
           _scViZ::P64 = P64[_scVjG::P64 + 72];
           I64[Hp - 72] = sat_scVjF_info;
           P64[Hp - 56] = _scViN::P64;
           P64[Hp - 48] = _scViO::P64;
           P64[Hp - 40] = _scViP::P64;
           P64[Hp - 32] = _scViQ::P64;
           P64[Hp - 24] = _scViR::P64;
           P64[Hp - 16] = _scViS::P64;
           P64[Hp - 8] = _scViT::P64;
           P64[Hp] = _scViZ::P64;
           R3 = Hp - 72;
           R2 = lvl52_rcV5V_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVjG_info" {
     sat_scVjG_info:
         const sat_scVjG_entry;
         const 8;
         const 13528395363123215;
         const ScWiZ_srt+384;
 },
 p_scViY_entry() //  [R1, R2]
         { []
         }
     {offset
       cd7cl: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cd7cp; else goto cd7co;
       cd7cp: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd7co: // global
           _scViN::P64 = P64[R1 + 7];
           _scViO::P64 = P64[R1 + 15];
           _scViP::P64 = P64[R1 + 23];
           _scViQ::P64 = P64[R1 + 31];
           _scViR::P64 = P64[R1 + 39];
           _scViS::P64 = P64[R1 + 47];
           _scViT::P64 = P64[R1 + 55];
           I64[Hp - 72] = sat_scVjG_info;
           P64[Hp - 56] = _scViN::P64;
           P64[Hp - 48] = _scViO::P64;
           P64[Hp - 40] = _scViP::P64;
           P64[Hp - 32] = _scViQ::P64;
           P64[Hp - 24] = _scViR::P64;
           P64[Hp - 16] = _scViS::P64;
           P64[Hp - 8] = _scViT::P64;
           P64[Hp] = R2;
           R3 = Hp - 72;
           R2 = lvl51_rcV5U_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . p_scViY_info" {
     p_scViY_info:
         const p_scViY_entry;
         const 7;
         const 13528395363123208;
         const 4294967301;
         const ScWiZ_srt+384;
 },
 sat_scVjK_entry() //  [R1]
         { []
         }
     {offset
       cd7cE: // global
           _scVjK::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd7cF; else goto cd7cG;
       cd7cG: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cd7cI; else goto cd7cH;
       cd7cI: // global
           HpAlloc = 24;
           goto cd7cF;
       cd7cF: // global
           R1 = _scVjK::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7cH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVjK::P64;
           _scViY::P64 = P64[_scVjK::P64 + 16];
           _scVjI::P64 = P64[_scVjK::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _scVjI::P64;
           R2 = Hp - 14;
           R1 = _scViY::P64;
           Sp = Sp - 16;
           call p_scViY_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVjK_info" {
     sat_scVjK_info:
         const sat_scVjK_entry;
         const 2;
         const 13528395363123218;
         const ScWiZ_srt+384;
 },
 sat_scVjL_entry() //  [R1, R2]
         { []
         }
     {offset
       cd7cK: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cd7cO; else goto cd7cN;
       cd7cO: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd7cN: // global
           _scViY::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_scVjK_info;
           P64[Hp - 32] = _scViY::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVjL_info" {
     sat_scVjL_info:
         const sat_scVjL_entry;
         const 1;
         const 13528395363123209;
         const 4294967301;
         const ScWiZ_srt+384;
 },
 GHC.RTS.Flags.$w$cshowsPrec6_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cd7cS: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cd7cW; else goto cd7cV;
       cd7cW: // global
           HpAlloc = 104;
           R1 = GHC.RTS.Flags.$w$cshowsPrec6_closure;
           I64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 72, res: 0, upd: 8;
       cd7cV: // global
           I64[Hp - 96] = w1_scViT_info;
           P64[Hp - 80] = R3;
           I64[Hp - 72] = p_scViY_info;
           P64[Hp - 64] = R4;
           P64[Hp - 56] = R5;
           P64[Hp - 48] = R6;
           P64[Hp - 40] = P64[Sp];
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = Hp - 96;
           _cd771::P64 = Hp - 71;
           if (%MO_S_Lt_W64(R2, 11)) goto cd7cQ; else goto cd7cR;
       cd7cQ: // global
           Hp = Hp - 16;
           R1 = _cd771::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cd7cR: // global
           I64[Hp - 8] = sat_scVjL_info;
           P64[Hp] = _cd771::P64;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$w$cshowsPrec6_info" {
     GHC.RTS.Flags.$w$cshowsPrec6_info:
         const GHC.RTS.Flags.$w$cshowsPrec6_entry;
         const 0;
         const 157643583438979086;
         const 34359738368;
         const ScWiZ_srt+384;
         const 72;
         const GHC.RTS.Flags.$w$cshowsPrec6_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.940577876 UTC

[section ""data" . GHC.RTS.Flags.$fShowMiscFlags_$cshowsPrec_closure" {
     GHC.RTS.Flags.$fShowMiscFlags_$cshowsPrec_closure:
         const GHC.RTS.Flags.$fShowMiscFlags_$cshowsPrec_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowMiscFlags_$cshowsPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       cd7fT: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cd7fX; else goto cd7fY;
       cd7fX: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fShowMiscFlags_$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cd7fY: // global
           I64[Sp - 16] = block_cd7fQ_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ud7g6; else goto cd7fR;
       ud7g6: // global
           call _cd7fQ(R1) args: 0, res: 0, upd: 0;
       cd7fR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowMiscFlags_$cshowsPrec_info" {
     GHC.RTS.Flags.$fShowMiscFlags_$cshowsPrec_info:
         const GHC.RTS.Flags.$fShowMiscFlags_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const ScWiZ_srt+584;
 },
 _cd7fQ() //  [R1]
         { []
         }
     {offset
       cd7fQ: // global
           I64[Sp] = block_cd7fW_info;
           _scVjP::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _scVjP::I64;
           if (R1 & 7 != 0) goto ud7g5; else goto cd7g0;
       ud7g5: // global
           call _cd7fW(R1) args: 0, res: 0, upd: 0;
       cd7g0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cd7fQ_info" {
     block_cd7fQ_info:
         const _cd7fQ;
         const 1;
         const 4294967326;
         const ScWiZ_srt+584;
 },
 _cd7fW() //  [R1]
         { []
         }
     {offset
       cd7fW: // global
           R6 = P64[R1 + 31];
           R5 = P64[R1 + 23];
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = I64[Sp + 8];
           P64[Sp - 8] = P64[R1 + 39];
           P64[Sp] = P64[R1 + 47];
           P64[Sp + 8] = P64[R1 + 55];
           Sp = Sp - 8;
           call GHC.RTS.Flags.$w$cshowsPrec6_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd7fW_info" {
     block_cd7fW_info:
         const _cd7fW;
         const 65;
         const 4294967326;
         const ScWiZ_srt+584;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.948589379 UTC

[section ""data" . GHC.RTS.Flags.$fShowMiscFlags_$cshow_closure" {
     GHC.RTS.Flags.$fShowMiscFlags_$cshow_closure:
         const GHC.RTS.Flags.$fShowMiscFlags_$cshow_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowMiscFlags_$cshow_entry() //  [R2]
         { []
         }
     {offset
       cd7gu: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cd7gv; else goto cd7gw;
       cd7gv: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.$fShowMiscFlags_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd7gw: // global
           I64[Sp - 8] = block_cd7gr_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud7gA; else goto cd7gs;
       ud7gA: // global
           call _cd7gr(R1) args: 0, res: 0, upd: 0;
       cd7gs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowMiscFlags_$cshow_info" {
     GHC.RTS.Flags.$fShowMiscFlags_$cshow_info:
         const GHC.RTS.Flags.$fShowMiscFlags_$cshow_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const ScWiZ_srt+584;
 },
 _cd7gr() //  [R1]
         { []
         }
     {offset
       cd7gr: // global
           R6 = P64[R1 + 31];
           R5 = P64[R1 + 23];
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = 0;
           P64[Sp - 32] = P64[R1 + 39];
           P64[Sp - 24] = P64[R1 + 47];
           P64[Sp - 16] = P64[R1 + 55];
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = GHC.Types.[]_closure+1;
           Sp = Sp - 32;
           call GHC.RTS.Flags.$w$cshowsPrec6_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd7gr_info" {
     block_cd7gr_info:
         const _cd7gr;
         const 0;
         const 4294967326;
         const ScWiZ_srt+584;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.954768001 UTC

[section ""data" . GHC.RTS.Flags.$fShowMiscFlags1_closure" {
     GHC.RTS.Flags.$fShowMiscFlags1_closure:
         const GHC.RTS.Flags.$fShowMiscFlags1_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowMiscFlags1_entry() //  [R2]
         { []
         }
     {offset
       cd7gU: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cd7gV; else goto cd7gW;
       cd7gV: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.$fShowMiscFlags1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd7gW: // global
           I64[Sp - 8] = block_cd7gR_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud7h0; else goto cd7gS;
       ud7h0: // global
           call _cd7gR(R1) args: 0, res: 0, upd: 0;
       cd7gS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowMiscFlags1_info" {
     GHC.RTS.Flags.$fShowMiscFlags1_info:
         const GHC.RTS.Flags.$fShowMiscFlags1_entry;
         const 0;
         const 38654705678;
         const 4294967301;
         const ScWiZ_srt+584;
 },
 _cd7gR() //  [R1]
         { []
         }
     {offset
       cd7gR: // global
           R6 = P64[R1 + 31];
           R5 = P64[R1 + 23];
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = 0;
           P64[Sp - 16] = P64[R1 + 39];
           P64[Sp - 8] = P64[R1 + 47];
           P64[Sp] = P64[R1 + 55];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$cshowsPrec6_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd7gR_info" {
     block_cd7gR_info:
         const _cd7gR;
         const 0;
         const 4294967326;
         const ScWiZ_srt+584;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.960136935 UTC

[section ""data" . GHC.RTS.Flags.$fShowMiscFlags_$cshowList_closure" {
     GHC.RTS.Flags.$fShowMiscFlags_$cshowList_closure:
         const GHC.RTS.Flags.$fShowMiscFlags_$cshowList_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowMiscFlags_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       cd7hh: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.RTS.Flags.$fShowMiscFlags1_closure+1;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowMiscFlags_$cshowList_info" {
     GHC.RTS.Flags.$fShowMiscFlags_$cshowList_info:
         const GHC.RTS.Flags.$fShowMiscFlags_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const ScWiZ_srt+608;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.963543377 UTC

[section ""data" . GHC.RTS.Flags.$fShowMiscFlags_closure" {
     GHC.RTS.Flags.$fShowMiscFlags_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.RTS.Flags.$fShowMiscFlags_$cshowsPrec_closure+2;
         const GHC.RTS.Flags.$fShowMiscFlags_$cshow_closure+1;
         const GHC.RTS.Flags.$fShowMiscFlags_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.965286711 UTC

[section ""cstring" . GHC.RTS.Flags.$fShowConcFlags4_bytes" {
     GHC.RTS.Flags.$fShowConcFlags4_bytes:
         I8[] [67,111,110,99,70,108,97,103,115,32,123]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.966997645 UTC

[section ""cstring" . GHC.RTS.Flags.$fShowConcFlags3_bytes" {
     GHC.RTS.Flags.$fShowConcFlags3_bytes:
         I8[] [99,116,120,116,83,119,105,116,99,104,84,105,109,101,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.968612247 UTC

[section ""cstring" . GHC.RTS.Flags.$fShowConcFlags2_bytes" {
     GHC.RTS.Flags.$fShowConcFlags2_bytes:
         I8[] [99,116,120,116,83,119,105,116,99,104,84,105,99,107,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:56.977685309 UTC

[section ""data" . GHC.RTS.Flags.$w$cshowsPrec2_closure" {
     GHC.RTS.Flags.$w$cshowsPrec2_closure:
         const GHC.RTS.Flags.$w$cshowsPrec2_info;
         const 0;
 },
 w1_scVkl_entry() //  [R1]
         { []
         }
     {offset
       cd7hD: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cd7hE; else goto cd7hF;
       cd7hE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7hF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cd7hA_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ud7hR; else goto cd7hB;
       ud7hR: // global
           call _cd7hA(R1) args: 0, res: 0, upd: 0;
       cd7hB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . w1_scVkl_info" {
     w1_scVkl_info:
         const w1_scVkl_entry;
         const 1;
         const 16;
 },
 _cd7hA() //  [R1]
         { []
         }
     {offset
       cd7hA: // global
           _scVkn::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_scVkn::I64, 0)) goto cd7hP; else goto cd7hQ;
       cd7hP: // global
           R2 = _scVkn::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.wordToInteger_entry(R2) args: 24, res: 0, upd: 24;
       cd7hQ: // global
           R2 = _scVkn::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd7hA_info" {
     block_cd7hA_info:
         const _cd7hA;
         const 0;
         const 30;
 },
 sat_scVku_entry() //  [R1]
         { []
         }
     {offset
       cd7iq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd7ir; else goto cd7is;
       cd7ir: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7is: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.RTS.Flags.$fShowCCFlags2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVku_info" {
     sat_scVku_info:
         const sat_scVku_entry;
         const 1;
         const 16;
 },
 sat_scVky_entry() //  [R1]
         { []
         }
     {offset
       cd7it: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cd7ix; else goto cd7iy;
       cd7ix: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7iy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cd7ih_info;
           _scVkr::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _scVkr::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ud7iF; else goto cd7ii;
       ud7iF: // global
           call _cd7ih(R1) args: 0, res: 0, upd: 0;
       cd7ii: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVky_info" {
     sat_scVky_info:
         const sat_scVky_entry;
         const 2;
         const 18;
 },
 _cd7ih() //  [R1]
         { []
         }
     {offset
       cd7ih: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cd7iB; else goto cd7iA;
       cd7iB: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cd7iA: // global
           _scVkt::I64 = I64[R1 + 7];
           I64[Hp - 16] = sat_scVku_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_cd7iu_info;
           R4 = Hp - 16;
           R3 = _scVkt::I64;
           R2 = 0;
           Sp = Sp + 8;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cd7ih_info" {
     block_cd7ih_info:
         const _cd7ih;
         const 1;
         const 30;
 },
 _cd7iu() //  [R1, R2]
         { []
         }
     {offset
       cd7iu: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cd7iE; else goto cd7iD;
       cd7iE: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cd7iD: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd7iu_info" {
     block_cd7iu_info:
         const _cd7iu;
         const 0;
         const 30;
 },
 sat_scVkz_entry() //  [R1]
         { []
         }
     {offset
       cd7iG: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cd7iK; else goto cd7iJ;
       cd7iK: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7iJ: // global
           _scVkk::P64 = P64[R1 + 16];
           _scVkr::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_scVky_info;
           P64[Hp - 8] = _scVkk::P64;
           P64[Hp] = _scVkr::P64;
           R3 = Hp - 24;
           R2 = GHC.RTS.Flags.$fShowConcFlags2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVkz_info" {
     sat_scVkz_info:
         const sat_scVkz_entry;
         const 2;
         const 18;
 },
 sat_scVkA_entry() //  [R1]
         { []
         }
     {offset
       cd7iL: // global
           _scVkA::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd7iM; else goto cd7iN;
       cd7iN: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cd7iP; else goto cd7iO;
       cd7iP: // global
           HpAlloc = 32;
           goto cd7iM;
       cd7iM: // global
           R1 = _scVkA::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7iO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVkA::P64;
           _scVkk::P64 = P64[_scVkA::P64 + 16];
           _scVkr::P64 = P64[_scVkA::P64 + 24];
           I64[Hp - 24] = sat_scVkz_info;
           P64[Hp - 8] = _scVkk::P64;
           P64[Hp] = _scVkr::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVkA_info" {
     sat_scVkA_info:
         const sat_scVkA_entry;
         const 2;
         const 4294967314;
         const ScWiZ_srt+480;
 },
 sat_scVkE_entry() //  [R1]
         { []
         }
     {offset
       cd7iT: // global
           _scVkE::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cd7iU; else goto cd7iV;
       cd7iV: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cd7iX; else goto cd7iW;
       cd7iX: // global
           HpAlloc = 32;
           goto cd7iU;
       cd7iU: // global
           R1 = _scVkE::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7iW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVkE::P64;
           _scVkk::P64 = P64[_scVkE::P64 + 16];
           _scVkl::P64 = P64[_scVkE::P64 + 24];
           _scVkr::P64 = P64[_scVkE::P64 + 32];
           I64[Hp - 24] = sat_scVkA_info;
           P64[Hp - 8] = _scVkk::P64;
           P64[Hp] = _scVkr::P64;
           I64[Sp - 24] = block_cd7iQ_info;
           R4 = Hp - 24;
           R3 = _scVkl::P64;
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVkE_info" {
     sat_scVkE_info:
         const sat_scVkE_entry;
         const 3;
         const 17596481011727;
         const ScWiZ_srt+384;
 },
 _cd7iQ() //  [R1, R2]
         { []
         }
     {offset
       cd7iQ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cd7j0; else goto cd7iZ;
       cd7j0: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cd7iZ: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd7iQ_info" {
     block_cd7iQ_info:
         const _cd7iQ;
         const 0;
         const 30;
 },
 sat_scVkF_entry() //  [R1]
         { []
         }
     {offset
       cd7j1: // global
           _scVkF::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd7j2; else goto cd7j3;
       cd7j3: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cd7j5; else goto cd7j4;
       cd7j5: // global
           HpAlloc = 40;
           goto cd7j2;
       cd7j2: // global
           R1 = _scVkF::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7j4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVkF::P64;
           _scVkk::P64 = P64[_scVkF::P64 + 16];
           _scVkl::P64 = P64[_scVkF::P64 + 24];
           _scVkr::P64 = P64[_scVkF::P64 + 32];
           I64[Hp - 32] = sat_scVkE_info;
           P64[Hp - 16] = _scVkk::P64;
           P64[Hp - 8] = _scVkl::P64;
           P64[Hp] = _scVkr::P64;
           R3 = Hp - 32;
           R2 = GHC.RTS.Flags.$fShowConcFlags3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVkF_info" {
     sat_scVkF_info:
         const sat_scVkF_entry;
         const 3;
         const 17596481011727;
         const ScWiZ_srt+384;
 },
 p_scVkq_entry() //  [R1, R2]
         { []
         }
     {offset
       cd7j6: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cd7ja; else goto cd7j9;
       cd7ja: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd7j9: // global
           _scVkk::P64 = P64[R1 + 7];
           _scVkl::P64 = P64[R1 + 15];
           I64[Hp - 32] = sat_scVkF_info;
           P64[Hp - 16] = _scVkk::P64;
           P64[Hp - 8] = _scVkl::P64;
           P64[Hp] = R2;
           R3 = Hp - 32;
           R2 = GHC.RTS.Flags.$fShowConcFlags4_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . p_scVkq_info" {
     p_scVkq_info:
         const p_scVkq_entry;
         const 2;
         const 17596481011723;
         const 4294967301;
         const ScWiZ_srt+384;
 },
 sat_scVkJ_entry() //  [R1]
         { []
         }
     {offset
       cd7jp: // global
           _scVkJ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd7jq; else goto cd7jr;
       cd7jr: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cd7jt; else goto cd7js;
       cd7jt: // global
           HpAlloc = 24;
           goto cd7jq;
       cd7jq: // global
           R1 = _scVkJ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7js: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVkJ::P64;
           _scVkq::P64 = P64[_scVkJ::P64 + 16];
           _scVkH::P64 = P64[_scVkJ::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _scVkH::P64;
           R2 = Hp - 14;
           R1 = _scVkq::P64;
           Sp = Sp - 16;
           call p_scVkq_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVkJ_info" {
     sat_scVkJ_info:
         const sat_scVkJ_entry;
         const 2;
         const 17596481011730;
         const ScWiZ_srt+384;
 },
 sat_scVkK_entry() //  [R1, R2]
         { []
         }
     {offset
       cd7jv: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cd7jz; else goto cd7jy;
       cd7jz: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd7jy: // global
           _scVkq::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_scVkJ_info;
           P64[Hp - 32] = _scVkq::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVkK_info" {
     sat_scVkK_info:
         const sat_scVkK_entry;
         const 1;
         const 17596481011721;
         const 4294967301;
         const ScWiZ_srt+384;
 },
 GHC.RTS.Flags.$w$cshowsPrec2_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cd7jD: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cd7jH; else goto cd7jG;
       cd7jH: // global
           HpAlloc = 64;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.RTS.Flags.$w$cshowsPrec2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cd7jG: // global
           I64[Hp - 56] = w1_scVkl_info;
           P64[Hp - 40] = R3;
           I64[Hp - 32] = p_scVkq_info;
           P64[Hp - 24] = R4;
           P64[Hp - 16] = Hp - 56;
           _cd7hS::P64 = Hp - 31;
           if (%MO_S_Lt_W64(R2, 11)) goto cd7jB; else goto cd7jC;
       cd7jB: // global
           Hp = Hp - 16;
           R1 = _cd7hS::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cd7jC: // global
           I64[Hp - 8] = sat_scVkK_info;
           P64[Hp] = _cd7hS::P64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$w$cshowsPrec2_info" {
     GHC.RTS.Flags.$w$cshowsPrec2_info:
         const GHC.RTS.Flags.$w$cshowsPrec2_entry;
         const 0;
         const 2305860605694705678;
         const 12884901907;
         const ScWiZ_srt+384;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.007080516 UTC

[section ""data" . GHC.RTS.Flags.$fShowConcFlags_$cshowsPrec_closure" {
     GHC.RTS.Flags.$fShowConcFlags_$cshowsPrec_closure:
         const GHC.RTS.Flags.$fShowConcFlags_$cshowsPrec_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowConcFlags_$cshowsPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       cd7kQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd7kU; else goto cd7kV;
       cd7kU: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fShowConcFlags_$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cd7kV: // global
           I64[Sp - 16] = block_cd7kN_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ud7l3; else goto cd7kO;
       ud7l3: // global
           call _cd7kN(R1) args: 0, res: 0, upd: 0;
       cd7kO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowConcFlags_$cshowsPrec_info" {
     GHC.RTS.Flags.$fShowConcFlags_$cshowsPrec_info:
         const GHC.RTS.Flags.$fShowConcFlags_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const ScWiZ_srt+616;
 },
 _cd7kN() //  [R1]
         { []
         }
     {offset
       cd7kN: // global
           I64[Sp] = block_cd7kT_info;
           _scVkO::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _scVkO::I64;
           if (R1 & 7 != 0) goto ud7l2; else goto cd7kX;
       ud7l2: // global
           call _cd7kT(R1) args: 0, res: 0, upd: 0;
       cd7kX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cd7kN_info" {
     block_cd7kN_info:
         const _cd7kN;
         const 1;
         const 4294967326;
         const ScWiZ_srt+616;
 },
 _cd7kT() //  [R1]
         { []
         }
     {offset
       cd7kT: // global
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = I64[Sp + 8];
           Sp = Sp + 16;
           call GHC.RTS.Flags.$w$cshowsPrec2_entry(R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd7kT_info" {
     block_cd7kT_info:
         const _cd7kT;
         const 65;
         const 4294967326;
         const ScWiZ_srt+616;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.014080457 UTC

[section ""data" . GHC.RTS.Flags.$fShowConcFlags_$cshow_closure" {
     GHC.RTS.Flags.$fShowConcFlags_$cshow_closure:
         const GHC.RTS.Flags.$fShowConcFlags_$cshow_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowConcFlags_$cshow_entry() //  [R2]
         { []
         }
     {offset
       cd7lo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd7lp; else goto cd7lq;
       cd7lp: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.$fShowConcFlags_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd7lq: // global
           I64[Sp - 8] = block_cd7ll_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud7lu; else goto cd7lm;
       ud7lu: // global
           call _cd7ll(R1) args: 0, res: 0, upd: 0;
       cd7lm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowConcFlags_$cshow_info" {
     GHC.RTS.Flags.$fShowConcFlags_$cshow_info:
         const GHC.RTS.Flags.$fShowConcFlags_$cshow_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const ScWiZ_srt+616;
 },
 _cd7ll() //  [R1]
         { []
         }
     {offset
       cd7ll: // global
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = 0;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = GHC.Types.[]_closure+1;
           Sp = Sp - 8;
           call GHC.RTS.Flags.$w$cshowsPrec2_entry(R4,
                                                   R3,
                                                   R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd7ll_info" {
     block_cd7ll_info:
         const _cd7ll;
         const 0;
         const 4294967326;
         const ScWiZ_srt+616;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.020479526 UTC

[section ""data" . GHC.RTS.Flags.$fShowConcFlags1_closure" {
     GHC.RTS.Flags.$fShowConcFlags1_closure:
         const GHC.RTS.Flags.$fShowConcFlags1_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowConcFlags1_entry() //  [R2]
         { []
         }
     {offset
       cd7lL: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd7lM; else goto cd7lN;
       cd7lM: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.$fShowConcFlags1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd7lN: // global
           I64[Sp - 8] = block_cd7lI_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud7lR; else goto cd7lJ;
       ud7lR: // global
           call _cd7lI(R1) args: 0, res: 0, upd: 0;
       cd7lJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowConcFlags1_info" {
     GHC.RTS.Flags.$fShowConcFlags1_info:
         const GHC.RTS.Flags.$fShowConcFlags1_entry;
         const 0;
         const 38654705678;
         const 4294967301;
         const ScWiZ_srt+616;
 },
 _cd7lI() //  [R1]
         { []
         }
     {offset
       cd7lI: // global
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = 0;
           Sp = Sp + 8;
           call GHC.RTS.Flags.$w$cshowsPrec2_entry(R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd7lI_info" {
     block_cd7lI_info:
         const _cd7lI;
         const 0;
         const 4294967326;
         const ScWiZ_srt+616;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.025575133 UTC

[section ""data" . GHC.RTS.Flags.$fShowConcFlags_$cshowList_closure" {
     GHC.RTS.Flags.$fShowConcFlags_$cshowList_closure:
         const GHC.RTS.Flags.$fShowConcFlags_$cshowList_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowConcFlags_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       cd7m5: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.RTS.Flags.$fShowConcFlags1_closure+1;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowConcFlags_$cshowList_info" {
     GHC.RTS.Flags.$fShowConcFlags_$cshowList_info:
         const GHC.RTS.Flags.$fShowConcFlags_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const ScWiZ_srt+640;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.028670878 UTC

[section ""data" . GHC.RTS.Flags.$fShowConcFlags_closure" {
     GHC.RTS.Flags.$fShowConcFlags_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.RTS.Flags.$fShowConcFlags_$cshowsPrec_closure+2;
         const GHC.RTS.Flags.$fShowConcFlags_$cshow_closure+1;
         const GHC.RTS.Flags.$fShowConcFlags_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.030348312 UTC

[section ""cstring" . GHC.RTS.Flags.$fShowGiveGCStats10_bytes" {
     GHC.RTS.Flags.$fShowGiveGCStats10_bytes:
         I8[] [78,111,71,67,83,116,97,116,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.032515315 UTC

[section ""data" . GHC.RTS.Flags.$fShowGiveGCStats9_closure" {
     GHC.RTS.Flags.$fShowGiveGCStats9_closure:
         const GHC.RTS.Flags.$fShowGiveGCStats9_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fShowGiveGCStats9_entry() //  [R1]
         { []
         }
     {offset
       cd7mk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd7ml; else goto cd7mm;
       cd7ml: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7mm: // global
           (_cd7mh::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cd7mh::I64 == 0) goto cd7mj; else goto cd7mi;
       cd7mj: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cd7mi: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cd7mh::I64;
           R2 = GHC.RTS.Flags.$fShowGiveGCStats10_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowGiveGCStats9_info" {
     GHC.RTS.Flags.$fShowGiveGCStats9_info:
         const GHC.RTS.Flags.$fShowGiveGCStats9_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.036311384 UTC

[section ""cstring" . GHC.RTS.Flags.$fShowGiveGCStats8_bytes" {
     GHC.RTS.Flags.$fShowGiveGCStats8_bytes:
         I8[] [67,111,108,108,101,99,116,71,67,83,116,97,116,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.038565293 UTC

[section ""data" . GHC.RTS.Flags.$fShowGiveGCStats7_closure" {
     GHC.RTS.Flags.$fShowGiveGCStats7_closure:
         const GHC.RTS.Flags.$fShowGiveGCStats7_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fShowGiveGCStats7_entry() //  [R1]
         { []
         }
     {offset
       cd7mB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd7mC; else goto cd7mD;
       cd7mC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7mD: // global
           (_cd7my::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cd7my::I64 == 0) goto cd7mA; else goto cd7mz;
       cd7mA: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cd7mz: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cd7my::I64;
           R2 = GHC.RTS.Flags.$fShowGiveGCStats8_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowGiveGCStats7_info" {
     GHC.RTS.Flags.$fShowGiveGCStats7_info:
         const GHC.RTS.Flags.$fShowGiveGCStats7_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.042140487 UTC

[section ""cstring" . GHC.RTS.Flags.$fShowGiveGCStats6_bytes" {
     GHC.RTS.Flags.$fShowGiveGCStats6_bytes:
         I8[] [79,110,101,76,105,110,101,71,67,83,116,97,116,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.044296599 UTC

[section ""data" . GHC.RTS.Flags.$fShowGiveGCStats5_closure" {
     GHC.RTS.Flags.$fShowGiveGCStats5_closure:
         const GHC.RTS.Flags.$fShowGiveGCStats5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fShowGiveGCStats5_entry() //  [R1]
         { []
         }
     {offset
       cd7mS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd7mT; else goto cd7mU;
       cd7mT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7mU: // global
           (_cd7mP::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cd7mP::I64 == 0) goto cd7mR; else goto cd7mQ;
       cd7mR: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cd7mQ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cd7mP::I64;
           R2 = GHC.RTS.Flags.$fShowGiveGCStats6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowGiveGCStats5_info" {
     GHC.RTS.Flags.$fShowGiveGCStats5_info:
         const GHC.RTS.Flags.$fShowGiveGCStats5_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.047820797 UTC

[section ""cstring" . GHC.RTS.Flags.$fShowGiveGCStats4_bytes" {
     GHC.RTS.Flags.$fShowGiveGCStats4_bytes:
         I8[] [83,117,109,109,97,114,121,71,67,83,116,97,116,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.05002238 UTC

[section ""data" . GHC.RTS.Flags.$fShowGiveGCStats3_closure" {
     GHC.RTS.Flags.$fShowGiveGCStats3_closure:
         const GHC.RTS.Flags.$fShowGiveGCStats3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fShowGiveGCStats3_entry() //  [R1]
         { []
         }
     {offset
       cd7n9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd7na; else goto cd7nb;
       cd7na: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7nb: // global
           (_cd7n6::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cd7n6::I64 == 0) goto cd7n8; else goto cd7n7;
       cd7n8: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cd7n7: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cd7n6::I64;
           R2 = GHC.RTS.Flags.$fShowGiveGCStats4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowGiveGCStats3_info" {
     GHC.RTS.Flags.$fShowGiveGCStats3_info:
         const GHC.RTS.Flags.$fShowGiveGCStats3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.054407658 UTC

[section ""cstring" . GHC.RTS.Flags.$fShowGiveGCStats2_bytes" {
     GHC.RTS.Flags.$fShowGiveGCStats2_bytes:
         I8[] [86,101,114,98,111,115,101,71,67,83,116,97,116,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.056584446 UTC

[section ""data" . GHC.RTS.Flags.$fShowGiveGCStats1_closure" {
     GHC.RTS.Flags.$fShowGiveGCStats1_closure:
         const GHC.RTS.Flags.$fShowGiveGCStats1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fShowGiveGCStats1_entry() //  [R1]
         { []
         }
     {offset
       cd7nq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd7nr; else goto cd7ns;
       cd7nr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7ns: // global
           (_cd7nn::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cd7nn::I64 == 0) goto cd7np; else goto cd7no;
       cd7np: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cd7no: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cd7nn::I64;
           R2 = GHC.RTS.Flags.$fShowGiveGCStats2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowGiveGCStats1_info" {
     GHC.RTS.Flags.$fShowGiveGCStats1_info:
         const GHC.RTS.Flags.$fShowGiveGCStats1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.061410972 UTC

[section ""data" . GHC.RTS.Flags.$w$cshowsPrec5_closure" {
     GHC.RTS.Flags.$w$cshowsPrec5_closure:
         const GHC.RTS.Flags.$w$cshowsPrec5_info;
         const 0;
 },
 GHC.RTS.Flags.$w$cshowsPrec5_entry() //  [R2, R3]
         { []
         }
     {offset
       cd7nO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd7nP; else goto cd7nQ;
       cd7nP: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.RTS.Flags.$w$cshowsPrec5_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cd7nQ: // global
           I64[Sp - 16] = block_cd7nE_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ud7o9; else goto cd7nF;
       ud7o9: // global
           call _cd7nE(R1) args: 0, res: 0, upd: 0;
       cd7nF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$w$cshowsPrec5_info" {
     GHC.RTS.Flags.$w$cshowsPrec5_info:
         const GHC.RTS.Flags.$w$cshowsPrec5_entry;
         const 0;
         const 270582939662;
         const 8589934607;
         const ScWiZ_srt+648;
 },
 _cd7nE() //  [R1]
         { []
         }
     {offset
       cd7nE: // global
           _scVl3::P64 = P64[Sp + 8];
           _cd7nN::P64 = R1 & 7;
           if (_cd7nN::P64 < 4) goto ud7o6; else goto ud7o8;
       ud7o6: // global
           if (_cd7nN::P64 < 3) goto ud7o7; else goto cd7nK;
       ud7o7: // global
           if (_cd7nN::P64 < 2) goto cd7nI; else goto cd7nJ;
       cd7nI: // global
           R3 = _scVl3::P64;
           R2 = GHC.RTS.Flags.$fShowGiveGCStats9_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cd7nJ: // global
           R3 = _scVl3::P64;
           R2 = GHC.RTS.Flags.$fShowGiveGCStats7_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cd7nK: // global
           R3 = _scVl3::P64;
           R2 = GHC.RTS.Flags.$fShowGiveGCStats5_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       ud7o8: // global
           if (_cd7nN::P64 < 5) goto cd7nL; else goto cd7nM;
       cd7nL: // global
           R3 = _scVl3::P64;
           R2 = GHC.RTS.Flags.$fShowGiveGCStats3_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cd7nM: // global
           R3 = _scVl3::P64;
           R2 = GHC.RTS.Flags.$fShowGiveGCStats1_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd7nE_info" {
     block_cd7nE_info:
         const _cd7nE;
         const 1;
         const 133143986206;
         const ScWiZ_srt+656;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.06719388 UTC

[section ""data" . GHC.RTS.Flags.$fShowGiveGCStats_$cshowsPrec_closure" {
     GHC.RTS.Flags.$fShowGiveGCStats_$cshowsPrec_closure:
         const GHC.RTS.Flags.$fShowGiveGCStats_$cshowsPrec_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowGiveGCStats_$cshowsPrec_entry() //  [R3, R4]
         { []
         }
     {offset
       cd7oo: // global
           _scVl6::P64 = R3;
           R3 = R4;
           R2 = _scVl6::P64;
           call GHC.RTS.Flags.$w$cshowsPrec5_entry(R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowGiveGCStats_$cshowsPrec_info" {
     GHC.RTS.Flags.$fShowGiveGCStats_$cshowsPrec_info:
         const GHC.RTS.Flags.$fShowGiveGCStats_$cshowsPrec_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const ScWiZ_srt+648;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.071404691 UTC

[section ""data" . GHC.RTS.Flags.$fShowGiveGCStats_$cshow_closure" {
     GHC.RTS.Flags.$fShowGiveGCStats_$cshow_closure:
         const GHC.RTS.Flags.$fShowGiveGCStats_$cshow_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowGiveGCStats_$cshow_entry() //  [R2]
         { []
         }
     {offset
       cd7oJ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd7oK; else goto cd7oL;
       cd7oK: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.$fShowGiveGCStats_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd7oL: // global
           I64[Sp - 8] = block_cd7oz_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud7p4; else goto cd7oA;
       ud7p4: // global
           call _cd7oz(R1) args: 0, res: 0, upd: 0;
       cd7oA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowGiveGCStats_$cshow_info" {
     GHC.RTS.Flags.$fShowGiveGCStats_$cshow_info:
         const GHC.RTS.Flags.$fShowGiveGCStats_$cshow_entry;
         const 0;
         const 270582939662;
         const 4294967301;
         const ScWiZ_srt+656;
 },
 _cd7oz() //  [R1]
         { []
         }
     {offset
       cd7oz: // global
           _cd7oI::P64 = R1 & 7;
           if (_cd7oI::P64 < 4) goto ud7p1; else goto ud7p3;
       ud7p1: // global
           if (_cd7oI::P64 < 3) goto ud7p2; else goto cd7oF;
       ud7p2: // global
           if (_cd7oI::P64 < 2) goto cd7oD; else goto cd7oE;
       cd7oD: // global
           R1 = GHC.RTS.Flags.$fShowGiveGCStats9_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cd7oE: // global
           R1 = GHC.RTS.Flags.$fShowGiveGCStats7_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cd7oF: // global
           R1 = GHC.RTS.Flags.$fShowGiveGCStats5_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       ud7p3: // global
           if (_cd7oI::P64 < 5) goto cd7oG; else goto cd7oH;
       cd7oG: // global
           R1 = GHC.RTS.Flags.$fShowGiveGCStats3_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cd7oH: // global
           R1 = GHC.RTS.Flags.$fShowGiveGCStats1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd7oz_info" {
     block_cd7oz_info:
         const _cd7oz;
         const 0;
         const 133143986206;
         const ScWiZ_srt+656;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.077036556 UTC

[section ""data" . GHC.RTS.Flags.$fShowGiveGCStats_$cshowList_closure" {
     GHC.RTS.Flags.$fShowGiveGCStats_$cshowList_closure:
         const GHC.RTS.Flags.$fShowGiveGCStats_$cshowList_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowGiveGCStats_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       cd7po: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.RTS.Flags.$w$cshowsPrec5_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowGiveGCStats_$cshowList_info" {
     GHC.RTS.Flags.$fShowGiveGCStats_$cshowList_info:
         const GHC.RTS.Flags.$fShowGiveGCStats_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const ScWiZ_srt+648;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.080313864 UTC

[section ""data" . GHC.RTS.Flags.$fShowGiveGCStats_closure" {
     GHC.RTS.Flags.$fShowGiveGCStats_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.RTS.Flags.$fShowGiveGCStats_$cshowsPrec_closure+3;
         const GHC.RTS.Flags.$fShowGiveGCStats_$cshow_closure+1;
         const GHC.RTS.Flags.$fShowGiveGCStats_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.082606195 UTC

[section ""cstring" . f6_rcV62_bytes" {
     f6_rcV62_bytes:
         I8[] [71,67,70,108,97,103,115,32,123]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.084797194 UTC

[section ""data" . f7_rcV63_closure" {
     f7_rcV63_closure:
         const f7_rcV63_info;
         const 0;
         const 0;
         const 0;
 },
 f7_rcV63_entry() //  [R1]
         { []
         }
     {offset
       cd7pD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd7pE; else goto cd7pF;
       cd7pE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7pF: // global
           (_cd7pA::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cd7pA::I64 == 0) goto cd7pC; else goto cd7pB;
       cd7pC: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cd7pB: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cd7pA::I64;
           R2 = f6_rcV62_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f7_rcV63_info" {
     f7_rcV63_info:
         const f7_rcV63_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.088892847 UTC

[section ""cstring" . lvl59_rcV64_bytes" {
     lvl59_rcV64_bytes:
         I8[] [115,116,97,116,115,70,105,108,101,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.090642224 UTC

[section ""cstring" . lvl60_rcV65_bytes" {
     lvl60_rcV65_bytes:
         I8[] [103,105,118,101,83,116,97,116,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.092238726 UTC

[section ""cstring" . lvl61_rcV66_bytes" {
     lvl61_rcV66_bytes:
         I8[] [109,97,120,83,116,107,83,105,122,101,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.093979066 UTC

[section ""cstring" . lvl62_rcV67_bytes" {
     lvl62_rcV67_bytes:
         I8[] [105,110,105,116,105,97,108,83,116,107,83,105,122,101,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.095640371 UTC

[section ""cstring" . lvl63_rcV68_bytes" {
     lvl63_rcV68_bytes:
         I8[] [115,116,107,67,104,117,110,107,83,105,122,101,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.097170081 UTC

[section ""cstring" . lvl64_rcV69_bytes" {
     lvl64_rcV69_bytes:
         I8[] [115,116,107,67,104,117,110,107,66,117,102,102,101,114,83,105,122,101,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.099445513 UTC

[section ""cstring" . lvl65_rcV6a_bytes" {
     lvl65_rcV6a_bytes:
         I8[] [109,97,120,72,101,97,112,83,105,122,101,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.10104618 UTC

[section ""cstring" . lvl66_rcV6b_bytes" {
     lvl66_rcV6b_bytes:
         I8[] [109,105,110,65,108,108,111,99,65,114,101,97,83,105,122,101,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.102704678 UTC

[section ""cstring" . lvl67_rcV6c_bytes" {
     lvl67_rcV6c_bytes:
         I8[] [108,97,114,103,101,65,108,108,111,99,76,105,109,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.104320977 UTC

[section ""cstring" . lvl68_rcV6d_bytes" {
     lvl68_rcV6d_bytes:
         I8[] [110,117,114,115,101,114,121,67,104,117,110,107,83,105,122,101,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.106071035 UTC

[section ""cstring" . lvl69_rcV6e_bytes" {
     lvl69_rcV6e_bytes:
         I8[] [109,105,110,79,108,100,71,101,110,83,105,122,101,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.107651797 UTC

[section ""cstring" . lvl70_rcV6f_bytes" {
     lvl70_rcV6f_bytes:
         I8[] [104,101,97,112,83,105,122,101,83,117,103,103,101,115,116,105,111,110,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.109353742 UTC

[section ""cstring" . lvl71_rcV6g_bytes" {
     lvl71_rcV6g_bytes:
         I8[] [104,101,97,112,83,105,122,101,83,117,103,103,101,115,116,105,111,110,65,117,116,111,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.111491291 UTC

[section ""cstring" . lvl72_rcV6h_bytes" {
     lvl72_rcV6h_bytes:
         I8[] [111,108,100,71,101,110,70,97,99,116,111,114,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.11315198 UTC

[section ""cstring" . lvl73_rcV6i_bytes" {
     lvl73_rcV6i_bytes:
         I8[] [112,99,70,114,101,101,72,101,97,112,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.115311768 UTC

[section ""cstring" . lvl74_rcV6j_bytes" {
     lvl74_rcV6j_bytes:
         I8[] [103,101,110,101,114,97,116,105,111,110,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.116885882 UTC

[section ""cstring" . lvl75_rcV6k_bytes" {
     lvl75_rcV6k_bytes:
         I8[] [115,113,117,101,101,122,101,85,112,100,70,114,97,109,101,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.118558847 UTC

[section ""cstring" . lvl76_rcV6l_bytes" {
     lvl76_rcV6l_bytes:
         I8[] [99,111,109,112,97,99,116,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.120193823 UTC

[section ""cstring" . lvl77_rcV6m_bytes" {
     lvl77_rcV6m_bytes:
         I8[] [99,111,109,112,97,99,116,84,104,114,101,115,104,111,108,100,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.121951421 UTC

[section ""cstring" . lvl78_rcV6n_bytes" {
     lvl78_rcV6n_bytes:
         I8[] [115,119,101,101,112,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.123561972 UTC

[section ""cstring" . lvl79_rcV6o_bytes" {
     lvl79_rcV6o_bytes:
         I8[] [114,105,110,103,66,101,108,108,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.125138383 UTC

[section ""cstring" . lvl80_rcV6p_bytes" {
     lvl80_rcV6p_bytes:
         I8[] [105,100,108,101,71,67,68,101,108,97,121,84,105,109,101,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.126855354 UTC

[section ""cstring" . lvl81_rcV6q_bytes" {
     lvl81_rcV6q_bytes:
         I8[] [100,111,73,100,108,101,71,67,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.128513313 UTC

[section ""cstring" . lvl82_rcV6r_bytes" {
     lvl82_rcV6r_bytes:
         I8[] [104,101,97,112,66,97,115,101,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.130723013 UTC

[section ""cstring" . lvl83_rcV6s_bytes" {
     lvl83_rcV6s_bytes:
         I8[] [97,108,108,111,99,76,105,109,105,116,71,114,97,99,101,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.13246142 UTC

[section ""cstring" . lvl84_rcV6t_bytes" {
     lvl84_rcV6t_bytes:
         I8[] [110,117,109,97,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.134140439 UTC

[section ""cstring" . lvl85_rcV6u_bytes" {
     lvl85_rcV6u_bytes:
         I8[] [110,117,109,97,77,97,115,107,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.239085196 UTC

[section ""data" . GHC.RTS.Flags.$fShowGCFlags_$cshowsPrec_closure" {
     GHC.RTS.Flags.$fShowGCFlags_$cshowsPrec_closure:
         const GHC.RTS.Flags.$fShowGCFlags_$cshowsPrec_info;
         const 0;
 },
 f8_scVlI_entry() //  [R1]
         { []
         }
     {offset
       cd7qw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd7qx; else goto cd7qy;
       cd7qx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7qy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 16];
           R3 = GHC.RTS.Flags.$fEnumDoCostCentres10_closure+1;
           R2 = GHC.Show.$fShow[]_$s$fShow[]1_closure;
           Sp = Sp - 16;
           call GHC.Show.$fShowMaybe_$cshowsPrec_entry(R4,
                                                       R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f8_scVlI_info" {
     f8_scVlI_info:
         const f8_scVlI_entry;
         const 1;
         const 12884901904;
         const ScWiZ_srt+704;
 },
 f9_scVlJ_entry() //  [R1]
         { []
         }
     {offset
       cd7qG: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cd7qH; else goto cd7qI;
       cd7qH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7qI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cd7qD_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ud7qM; else goto cd7qE;
       ud7qM: // global
           call _cd7qD(R1) args: 0, res: 0, upd: 0;
       cd7qE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . f9_scVlJ_info" {
     f9_scVlJ_info:
         const f9_scVlJ_entry;
         const 1;
         const 4294967312;
         const ScWiZ_srt+720;
 },
 _cd7qD() //  [R1]
         { []
         }
     {offset
       cd7qD: // global
           D1 = F64[R1 + 7];
           R3 = GHC.RTS.Flags.$fEnumDoCostCentres10_closure+1;
           R2 = GHC.Float.$fShowDouble2_closure+1;
           Sp = Sp + 8;
           call GHC.Float.$w$sshowSignedFloat_entry(D1,
                                                    R3,
                                                    R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd7qD_info" {
     block_cd7qD_info:
         const _cd7qD;
         const 0;
         const 4294967326;
         const ScWiZ_srt+720;
 },
 f10_scVlM_entry() //  [R1]
         { []
         }
     {offset
       cd7qU: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cd7qV; else goto cd7qW;
       cd7qV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7qW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cd7qR_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ud7r0; else goto cd7qS;
       ud7r0: // global
           call _cd7qR(R1) args: 0, res: 0, upd: 0;
       cd7qS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . f10_scVlM_info" {
     f10_scVlM_info:
         const f10_scVlM_entry;
         const 1;
         const 4294967312;
         const ScWiZ_srt+720;
 },
 _cd7qR() //  [R1]
         { []
         }
     {offset
       cd7qR: // global
           D1 = F64[R1 + 7];
           R3 = GHC.RTS.Flags.$fEnumDoCostCentres10_closure+1;
           R2 = GHC.Float.$fShowDouble2_closure+1;
           Sp = Sp + 8;
           call GHC.Float.$w$sshowSignedFloat_entry(D1,
                                                    R3,
                                                    R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd7qR_info" {
     block_cd7qR_info:
         const _cd7qR;
         const 0;
         const 4294967326;
         const ScWiZ_srt+720;
 },
 f11_scVlP_entry() //  [R1]
         { []
         }
     {offset
       cd7r8: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cd7r9; else goto cd7ra;
       cd7r9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7ra: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cd7r5_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ud7re; else goto cd7r6;
       ud7re: // global
           call _cd7r5(R1) args: 0, res: 0, upd: 0;
       cd7r6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . f11_scVlP_info" {
     f11_scVlP_info:
         const f11_scVlP_entry;
         const 1;
         const 4294967312;
         const ScWiZ_srt+720;
 },
 _cd7r5() //  [R1]
         { []
         }
     {offset
       cd7r5: // global
           D1 = F64[R1 + 7];
           R3 = GHC.RTS.Flags.$fEnumDoCostCentres10_closure+1;
           R2 = GHC.Float.$fShowDouble2_closure+1;
           Sp = Sp + 8;
           call GHC.Float.$w$sshowSignedFloat_entry(D1,
                                                    R3,
                                                    R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd7r5_info" {
     block_cd7r5_info:
         const _cd7r5;
         const 0;
         const 4294967326;
         const ScWiZ_srt+720;
 },
 w1_scVlS_entry() //  [R1]
         { []
         }
     {offset
       cd7rm: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cd7rn; else goto cd7ro;
       cd7rn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7ro: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cd7rj_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ud7rA; else goto cd7rk;
       ud7rA: // global
           call _cd7rj(R1) args: 0, res: 0, upd: 0;
       cd7rk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . w1_scVlS_info" {
     w1_scVlS_info:
         const w1_scVlS_entry;
         const 1;
         const 16;
 },
 _cd7rj() //  [R1]
         { []
         }
     {offset
       cd7rj: // global
           _scVlU::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_scVlU::I64, 0)) goto cd7ry; else goto cd7rz;
       cd7ry: // global
           R2 = _scVlU::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.wordToInteger_entry(R2) args: 24, res: 0, upd: 24;
       cd7rz: // global
           R2 = _scVlU::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd7rj_info" {
     block_cd7rj_info:
         const _cd7rj;
         const 0;
         const 30;
 },
 sat_scVmJ_entry() //  [R1]
         { []
         }
     {offset
       cd7y3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd7y4; else goto cd7y5;
       cd7y4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7y5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.RTS.Flags.$fShowCCFlags2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVmJ_info" {
     sat_scVmJ_info:
         const sat_scVmJ_entry;
         const 1;
         const 16;
 },
 sat_scVmN_entry() //  [R1]
         { []
         }
     {offset
       cd7y6: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cd7ya; else goto cd7yb;
       cd7ya: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7yb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cd7xU_info;
           _scVlY::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _scVlY::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ud7yi; else goto cd7xV;
       ud7yi: // global
           call _cd7xU(R1) args: 0, res: 0, upd: 0;
       cd7xV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVmN_info" {
     sat_scVmN_info:
         const sat_scVmN_entry;
         const 2;
         const 18;
 },
 _cd7xU() //  [R1]
         { []
         }
     {offset
       cd7xU: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cd7ye; else goto cd7yd;
       cd7ye: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cd7yd: // global
           _scVmI::I64 = I64[R1 + 7];
           I64[Hp - 16] = sat_scVmJ_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_cd7y7_info;
           R3 = Hp - 16;
           R2 = _scVmI::I64;
           Sp = Sp + 8;
           call GHC.Show.$wshowWord_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cd7xU_info" {
     block_cd7xU_info:
         const _cd7xU;
         const 1;
         const 30;
 },
 _cd7y7() //  [R1, R2]
         { []
         }
     {offset
       cd7y7: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cd7yh; else goto cd7yg;
       cd7yh: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cd7yg: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd7y7_info" {
     block_cd7y7_info:
         const _cd7y7;
         const 0;
         const 30;
 },
 sat_scVmO_entry() //  [R1]
         { []
         }
     {offset
       cd7yj: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cd7yn; else goto cd7ym;
       cd7yn: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7ym: // global
           _scVlF::P64 = P64[R1 + 16];
           _scVlY::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_scVmN_info;
           P64[Hp - 8] = _scVlF::P64;
           P64[Hp] = _scVlY::P64;
           R3 = Hp - 24;
           R2 = lvl85_rcV6u_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVmO_info" {
     sat_scVmO_info:
         const sat_scVmO_entry;
         const 2;
         const 18;
 },
 sat_scVmP_entry() //  [R1]
         { []
         }
     {offset
       cd7yo: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cd7ys; else goto cd7yr;
       cd7ys: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7yr: // global
           _scVlF::P64 = P64[R1 + 16];
           _scVlY::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_scVmO_info;
           P64[Hp - 8] = _scVlF::P64;
           P64[Hp] = _scVlY::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVmP_info" {
     sat_scVmP_info:
         const sat_scVmP_entry;
         const 2;
         const 4294967314;
         const ScWiZ_srt+480;
 },
 sat_scVmS_entry() //  [R1]
         { []
         }
     {offset
       cd7yQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd7yR; else goto cd7yS;
       cd7yR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7yS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.RTS.Flags.$fShowCCFlags2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVmS_info" {
     sat_scVmS_info:
         const sat_scVmS_entry;
         const 1;
         const 16;
 },
 sat_scVmW_entry() //  [R1]
         { []
         }
     {offset
       cd7yT: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cd7yX; else goto cd7yY;
       cd7yX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7yY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cd7yH_info;
           _scVlY::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _scVlY::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ud7z5; else goto cd7yI;
       ud7z5: // global
           call _cd7yH(R1) args: 0, res: 0, upd: 0;
       cd7yI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVmW_info" {
     sat_scVmW_info:
         const sat_scVmW_entry;
         const 2;
         const 18;
 },
 _cd7yH() //  [R1]
         { []
         }
     {offset
       cd7yH: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cd7z1; else goto cd7z0;
       cd7z1: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cd7z0: // global
           _scVmR::I64 = I64[R1 + 7];
           I64[Hp - 16] = sat_scVmS_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_cd7yU_info;
           R3 = Hp - 16;
           R2 = _scVmR::I64;
           Sp = Sp + 8;
           call GHC.Show.$wshowWord_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cd7yH_info" {
     block_cd7yH_info:
         const _cd7yH;
         const 1;
         const 30;
 },
 _cd7yU() //  [R1, R2]
         { []
         }
     {offset
       cd7yU: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cd7z4; else goto cd7z3;
       cd7z4: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cd7z3: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd7yU_info" {
     block_cd7yU_info:
         const _cd7yU;
         const 0;
         const 30;
 },
 sat_scVmX_entry() //  [R1]
         { []
         }
     {offset
       cd7z6: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cd7za; else goto cd7z9;
       cd7za: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7z9: // global
           _scVlF::P64 = P64[R1 + 16];
           _scVlY::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_scVmW_info;
           P64[Hp - 8] = _scVlF::P64;
           P64[Hp] = _scVlY::P64;
           R3 = Hp - 24;
           R2 = lvl85_rcV6u_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVmX_info" {
     sat_scVmX_info:
         const sat_scVmX_entry;
         const 2;
         const 18;
 },
 sat_scVmY_entry() //  [R1]
         { []
         }
     {offset
       cd7zb: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cd7zf; else goto cd7ze;
       cd7zf: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7ze: // global
           _scVlF::P64 = P64[R1 + 16];
           _scVlY::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_scVmX_info;
           P64[Hp - 8] = _scVlF::P64;
           P64[Hp] = _scVlY::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVmY_info" {
     sat_scVmY_info:
         const sat_scVmY_entry;
         const 2;
         const 4294967314;
         const ScWiZ_srt+480;
 },
 sat_scVmZ_entry() //  [R1]
         { []
         }
     {offset
       cd7zk: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cd7zl; else goto cd7zm;
       cd7zl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7zm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cd7xD_info;
           _scVlF::P64 = P64[R1 + 24];
           _scVlY::P64 = P64[R1 + 32];
           R1 = P64[R1 + 16];
           P64[Sp - 32] = _scVlF::P64;
           P64[Sp - 24] = _scVlY::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ud7zt; else goto cd7xE;
       ud7zt: // global
           call _cd7xD(R1) args: 0, res: 0, upd: 0;
       cd7xE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVmZ_info" {
     sat_scVmZ_info:
         const sat_scVmZ_entry;
         const 3;
         const 3302829850639;
         const ScWiZ_srt+480;
 },
 _cd7xD() //  [R1]
         { []
         }
     {offset
       cd7xD: // global
           _scVlF::P64 = P64[Sp + 8];
           _scVlY::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto cd7zh; else goto cd7zi;
       cd7zh: // global
           Hp = Hp + 32;
           _scVmG::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cd7zs; else goto cd7zo;
       cd7zo: // global
           I64[Hp - 24] = sat_scVmP_info;
           P64[Hp - 8] = _scVlF::P64;
           P64[Hp] = _scVlY::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cd7zi: // global
           Hp = Hp + 32;
           _scVmG::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cd7zs; else goto cd7zr;
       cd7zs: // global
           HpAlloc = 32;
           R1 = _scVmG::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cd7zr: // global
           I64[Hp - 24] = sat_scVmY_info;
           P64[Hp - 8] = _scVlF::P64;
           P64[Hp] = _scVlY::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd7xD_info" {
     block_cd7xD_info:
         const _cd7xD;
         const 2;
         const 3302829850654;
         const ScWiZ_srt+480;
 },
 sat_scVn0_entry() //  [R1]
         { []
         }
     {offset
       cd7zu: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cd7zy; else goto cd7zx;
       cd7zy: // global
           HpAlloc = 40;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7zx: // global
           _scVlE::P64 = P64[R1 + 16];
           _scVlF::P64 = P64[R1 + 24];
           _scVlY::P64 = P64[R1 + 32];
           I64[Hp - 32] = sat_scVmZ_info;
           P64[Hp - 16] = _scVlE::P64;
           P64[Hp - 8] = _scVlF::P64;
           P64[Hp] = _scVlY::P64;
           R3 = Hp - 32;
           R2 = lvl84_rcV6t_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVn0_info" {
     sat_scVn0_info:
         const sat_scVn0_entry;
         const 3;
         const 3302829850639;
         const ScWiZ_srt+480;
 },
 sat_scVn1_entry() //  [R1]
         { []
         }
     {offset
       cd7zz: // global
           _scVn1::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd7zA; else goto cd7zB;
       cd7zB: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cd7zD; else goto cd7zC;
       cd7zD: // global
           HpAlloc = 40;
           goto cd7zA;
       cd7zA: // global
           R1 = _scVn1::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7zC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVn1::P64;
           _scVlE::P64 = P64[_scVn1::P64 + 16];
           _scVlF::P64 = P64[_scVn1::P64 + 24];
           _scVlY::P64 = P64[_scVn1::P64 + 32];
           I64[Hp - 32] = sat_scVn0_info;
           P64[Hp - 16] = _scVlE::P64;
           P64[Hp - 8] = _scVlF::P64;
           P64[Hp] = _scVlY::P64;
           R3 = Hp - 32;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVn1_info" {
     sat_scVn1_info:
         const sat_scVn1_entry;
         const 3;
         const 3302829850639;
         const ScWiZ_srt+480;
 },
 sat_scVn5_entry() //  [R1]
         { []
         }
     {offset
       cd7zE: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cd7zI; else goto cd7zJ;
       cd7zI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7zJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_cd7xm_info;
           _scVlE::P64 = P64[R1 + 24];
           _scVlF::P64 = P64[R1 + 32];
           _scVlY::P64 = P64[R1 + 40];
           R1 = P64[R1 + 16];
           P64[Sp - 40] = _scVlE::P64;
           P64[Sp - 32] = _scVlF::P64;
           P64[Sp - 24] = _scVlY::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto ud7zQ; else goto cd7xn;
       ud7zQ: // global
           call _cd7xm(R1) args: 0, res: 0, upd: 0;
       cd7xn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVn5_info" {
     sat_scVn5_info:
         const sat_scVn5_entry;
         const 4;
         const 3302829850639;
         const ScWiZ_srt+480;
 },
 _cd7xm() //  [R1]
         { []
         }
     {offset
       cd7xm: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cd7zM; else goto cd7zL;
       cd7zM: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cd7zL: // global
           _scVmF::I64 = I64[R1 + 7];
           I64[Hp - 32] = sat_scVn1_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 24];
           I64[Sp + 24] = block_cd7zF_info;
           R3 = Hp - 32;
           R2 = _scVmF::I64;
           Sp = Sp + 24;
           call GHC.Show.$wshowWord_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cd7xm_info" {
     block_cd7xm_info:
         const _cd7xm;
         const 3;
         const 3302829850654;
         const ScWiZ_srt+480;
 },
 _cd7zF() //  [R1, R2]
         { []
         }
     {offset
       cd7zF: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cd7zP; else goto cd7zO;
       cd7zP: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cd7zO: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd7zF_info" {
     block_cd7zF_info:
         const _cd7zF;
         const 0;
         const 30;
 },
 sat_scVn6_entry() //  [R1]
         { []
         }
     {offset
       cd7zR: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cd7zV; else goto cd7zU;
       cd7zV: // global
           HpAlloc = 48;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7zU: // global
           _scVlD::P64 = P64[R1 + 16];
           _scVlE::P64 = P64[R1 + 24];
           _scVlF::P64 = P64[R1 + 32];
           _scVlY::P64 = P64[R1 + 40];
           I64[Hp - 40] = sat_scVn5_info;
           P64[Hp - 24] = _scVlD::P64;
           P64[Hp - 16] = _scVlE::P64;
           P64[Hp - 8] = _scVlF::P64;
           P64[Hp] = _scVlY::P64;
           R3 = Hp - 40;
           R2 = lvl83_rcV6s_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVn6_info" {
     sat_scVn6_info:
         const sat_scVn6_entry;
         const 4;
         const 3302829850639;
         const ScWiZ_srt+480;
 },
 sat_scVn7_entry() //  [R1]
         { []
         }
     {offset
       cd7zW: // global
           _scVn7::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd7zX; else goto cd7zY;
       cd7zY: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cd7A0; else goto cd7zZ;
       cd7A0: // global
           HpAlloc = 48;
           goto cd7zX;
       cd7zX: // global
           R1 = _scVn7::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7zZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVn7::P64;
           _scVlD::P64 = P64[_scVn7::P64 + 16];
           _scVlE::P64 = P64[_scVn7::P64 + 24];
           _scVlF::P64 = P64[_scVn7::P64 + 32];
           _scVlY::P64 = P64[_scVn7::P64 + 40];
           I64[Hp - 40] = sat_scVn6_info;
           P64[Hp - 24] = _scVlD::P64;
           P64[Hp - 16] = _scVlE::P64;
           P64[Hp - 8] = _scVlF::P64;
           P64[Hp] = _scVlY::P64;
           R3 = Hp - 40;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVn7_info" {
     sat_scVn7_info:
         const sat_scVn7_entry;
         const 4;
         const 3302829850639;
         const ScWiZ_srt+480;
 },
 sat_scVnb_entry() //  [R1]
         { []
         }
     {offset
       cd7A1: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cd7A5; else goto cd7A6;
       cd7A5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7A6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 56] = block_cd7x5_info;
           _scVlD::P64 = P64[R1 + 24];
           _scVlE::P64 = P64[R1 + 32];
           _scVlF::P64 = P64[R1 + 40];
           _scVlY::P64 = P64[R1 + 48];
           R1 = P64[R1 + 16];
           P64[Sp - 48] = _scVlD::P64;
           P64[Sp - 40] = _scVlE::P64;
           P64[Sp - 32] = _scVlF::P64;
           P64[Sp - 24] = _scVlY::P64;
           Sp = Sp - 56;
           if (R1 & 7 != 0) goto ud7Ad; else goto cd7x6;
       ud7Ad: // global
           call _cd7x5(R1) args: 0, res: 0, upd: 0;
       cd7x6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVnb_info" {
     sat_scVnb_info:
         const sat_scVnb_entry;
         const 5;
         const 3302829850639;
         const ScWiZ_srt+480;
 },
 _cd7x5() //  [R1]
         { []
         }
     {offset
       cd7x5: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cd7A9; else goto cd7A8;
       cd7A9: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cd7A8: // global
           _scVmD::I64 = I64[R1 + 7];
           I64[Hp - 40] = sat_scVn7_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = P64[Sp + 32];
           I64[Sp + 32] = block_cd7A2_info;
           R3 = Hp - 40;
           R2 = _scVmD::I64;
           Sp = Sp + 32;
           call GHC.Show.$wshowWord_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cd7x5_info" {
     block_cd7x5_info:
         const _cd7x5;
         const 4;
         const 3302829850654;
         const ScWiZ_srt+480;
 },
 _cd7A2() //  [R1, R2]
         { []
         }
     {offset
       cd7A2: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cd7Ac; else goto cd7Ab;
       cd7Ac: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cd7Ab: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd7A2_info" {
     block_cd7A2_info:
         const _cd7A2;
         const 0;
         const 30;
 },
 sat_scVnc_entry() //  [R1]
         { []
         }
     {offset
       cd7Ae: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cd7Ai; else goto cd7Ah;
       cd7Ai: // global
           HpAlloc = 56;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7Ah: // global
           _scVlC::P64 = P64[R1 + 16];
           _scVlD::P64 = P64[R1 + 24];
           _scVlE::P64 = P64[R1 + 32];
           _scVlF::P64 = P64[R1 + 40];
           _scVlY::P64 = P64[R1 + 48];
           I64[Hp - 48] = sat_scVnb_info;
           P64[Hp - 32] = _scVlC::P64;
           P64[Hp - 24] = _scVlD::P64;
           P64[Hp - 16] = _scVlE::P64;
           P64[Hp - 8] = _scVlF::P64;
           P64[Hp] = _scVlY::P64;
           R3 = Hp - 48;
           R2 = lvl82_rcV6r_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVnc_info" {
     sat_scVnc_info:
         const sat_scVnc_entry;
         const 5;
         const 3302829850639;
         const ScWiZ_srt+480;
 },
 eta5_scVmB_entry() //  [R1]
         { []
         }
     {offset
       cd7Aj: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cd7An; else goto cd7Am;
       cd7An: // global
           HpAlloc = 56;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7Am: // global
           _scVlC::P64 = P64[R1 + 16];
           _scVlD::P64 = P64[R1 + 24];
           _scVlE::P64 = P64[R1 + 32];
           _scVlF::P64 = P64[R1 + 40];
           _scVlY::P64 = P64[R1 + 48];
           I64[Hp - 48] = sat_scVnc_info;
           P64[Hp - 32] = _scVlC::P64;
           P64[Hp - 24] = _scVlD::P64;
           P64[Hp - 16] = _scVlE::P64;
           P64[Hp - 8] = _scVlF::P64;
           P64[Hp] = _scVlY::P64;
           R3 = Hp - 48;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . eta5_scVmB_info" {
     eta5_scVmB_info:
         const eta5_scVmB_entry;
         const 5;
         const 3302829850639;
         const ScWiZ_srt+480;
 },
 sat_scVne_entry() //  [R1]
         { []
         }
     {offset
       cd7Av: // global
           _scVne::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cd7Aw; else goto cd7Ax;
       cd7Ax: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cd7Az; else goto cd7Ay;
       cd7Az: // global
           HpAlloc = 56;
           goto cd7Aw;
       cd7Aw: // global
           R1 = _scVne::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7Ay: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVne::P64;
           _scVlB::P64 = P64[_scVne::P64 + 16];
           _scVlC::P64 = P64[_scVne::P64 + 24];
           _scVlD::P64 = P64[_scVne::P64 + 32];
           _scVlE::P64 = P64[_scVne::P64 + 40];
           _scVlF::P64 = P64[_scVne::P64 + 48];
           _scVlY::P64 = P64[_scVne::P64 + 56];
           I64[Hp - 48] = eta5_scVmB_info;
           P64[Hp - 32] = _scVlC::P64;
           P64[Hp - 24] = _scVlD::P64;
           P64[Hp - 16] = _scVlE::P64;
           P64[Hp - 8] = _scVlF::P64;
           P64[Hp] = _scVlY::P64;
           I64[Sp - 32] = block_cd7Ao_info;
           R1 = _scVlB::P64;
           P64[Sp - 24] = Hp - 48;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ud7AG; else goto cd7Ap;
       ud7AG: // global
           call _cd7Ao(R1) args: 0, res: 0, upd: 0;
       cd7Ap: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVne_info" {
     sat_scVne_info:
         const sat_scVne_entry;
         const 6;
         const 3302829850639;
         const ScWiZ_srt+480;
 },
 _cd7Ao() //  [R1]
         { []
         }
     {offset
       cd7Ao: // global
           _cd7wT::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cd7As; else goto cd7At;
       cd7As: // global
           R3 = _cd7wT::P64;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cd7At: // global
           R3 = _cd7wT::P64;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd7Ao_info" {
     block_cd7Ao_info:
         const _cd7Ao;
         const 1;
         const 12884901918;
         const ScWiZ_srt+544;
 },
 sat_scVnf_entry() //  [R1]
         { []
         }
     {offset
       cd7AH: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cd7AL; else goto cd7AK;
       cd7AL: // global
           HpAlloc = 64;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7AK: // global
           _scVlB::P64 = P64[R1 + 16];
           _scVlC::P64 = P64[R1 + 24];
           _scVlD::P64 = P64[R1 + 32];
           _scVlE::P64 = P64[R1 + 40];
           _scVlF::P64 = P64[R1 + 48];
           _scVlY::P64 = P64[R1 + 56];
           I64[Hp - 56] = sat_scVne_info;
           P64[Hp - 40] = _scVlB::P64;
           P64[Hp - 32] = _scVlC::P64;
           P64[Hp - 24] = _scVlD::P64;
           P64[Hp - 16] = _scVlE::P64;
           P64[Hp - 8] = _scVlF::P64;
           P64[Hp] = _scVlY::P64;
           R3 = Hp - 56;
           R2 = lvl81_rcV6q_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVnf_info" {
     sat_scVnf_info:
         const sat_scVnf_entry;
         const 6;
         const 3302829850639;
         const ScWiZ_srt+480;
 },
 sat_scVng_entry() //  [R1]
         { []
         }
     {offset
       cd7AM: // global
           _scVng::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd7AN; else goto cd7AO;
       cd7AO: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cd7AQ; else goto cd7AP;
       cd7AQ: // global
           HpAlloc = 64;
           goto cd7AN;
       cd7AN: // global
           R1 = _scVng::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7AP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVng::P64;
           _scVlB::P64 = P64[_scVng::P64 + 16];
           _scVlC::P64 = P64[_scVng::P64 + 24];
           _scVlD::P64 = P64[_scVng::P64 + 32];
           _scVlE::P64 = P64[_scVng::P64 + 40];
           _scVlF::P64 = P64[_scVng::P64 + 48];
           _scVlY::P64 = P64[_scVng::P64 + 56];
           I64[Hp - 56] = sat_scVnf_info;
           P64[Hp - 40] = _scVlB::P64;
           P64[Hp - 32] = _scVlC::P64;
           P64[Hp - 24] = _scVlD::P64;
           P64[Hp - 16] = _scVlE::P64;
           P64[Hp - 8] = _scVlF::P64;
           P64[Hp] = _scVlY::P64;
           R3 = Hp - 56;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVng_info" {
     sat_scVng_info:
         const sat_scVng_entry;
         const 6;
         const 3302829850639;
         const ScWiZ_srt+480;
 },
 sat_scVnk_entry() //  [R1]
         { []
         }
     {offset
       cd7AU: // global
           _scVnk::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cd7AV; else goto cd7AW;
       cd7AW: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cd7AY; else goto cd7AX;
       cd7AY: // global
           HpAlloc = 64;
           goto cd7AV;
       cd7AV: // global
           R1 = _scVnk::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7AX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVnk::P64;
           _scVlB::P64 = P64[_scVnk::P64 + 16];
           _scVlC::P64 = P64[_scVnk::P64 + 24];
           _scVlD::P64 = P64[_scVnk::P64 + 32];
           _scVlE::P64 = P64[_scVnk::P64 + 40];
           _scVlF::P64 = P64[_scVnk::P64 + 48];
           _scVlS::P64 = P64[_scVnk::P64 + 56];
           _scVlY::P64 = P64[_scVnk::P64 + 64];
           I64[Hp - 56] = sat_scVng_info;
           P64[Hp - 40] = _scVlB::P64;
           P64[Hp - 32] = _scVlC::P64;
           P64[Hp - 24] = _scVlD::P64;
           P64[Hp - 16] = _scVlE::P64;
           P64[Hp - 8] = _scVlF::P64;
           P64[Hp] = _scVlY::P64;
           I64[Sp - 24] = block_cd7AR_info;
           R4 = Hp - 56;
           R3 = _scVlS::P64;
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVnk_info" {
     sat_scVnk_info:
         const sat_scVnk_entry;
         const 7;
         const 13528395363123215;
         const ScWiZ_srt+384;
 },
 _cd7AR() //  [R1, R2]
         { []
         }
     {offset
       cd7AR: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cd7B1; else goto cd7B0;
       cd7B1: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cd7B0: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd7AR_info" {
     block_cd7AR_info:
         const _cd7AR;
         const 0;
         const 30;
 },
 sat_scVnl_entry() //  [R1]
         { []
         }
     {offset
       cd7B2: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cd7B6; else goto cd7B5;
       cd7B6: // global
           HpAlloc = 72;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7B5: // global
           _scVlB::P64 = P64[R1 + 16];
           _scVlC::P64 = P64[R1 + 24];
           _scVlD::P64 = P64[R1 + 32];
           _scVlE::P64 = P64[R1 + 40];
           _scVlF::P64 = P64[R1 + 48];
           _scVlS::P64 = P64[R1 + 56];
           _scVlY::P64 = P64[R1 + 64];
           I64[Hp - 64] = sat_scVnk_info;
           P64[Hp - 48] = _scVlB::P64;
           P64[Hp - 40] = _scVlC::P64;
           P64[Hp - 32] = _scVlD::P64;
           P64[Hp - 24] = _scVlE::P64;
           P64[Hp - 16] = _scVlF::P64;
           P64[Hp - 8] = _scVlS::P64;
           P64[Hp] = _scVlY::P64;
           R3 = Hp - 64;
           R2 = lvl80_rcV6p_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVnl_info" {
     sat_scVnl_info:
         const sat_scVnl_entry;
         const 7;
         const 13528395363123215;
         const ScWiZ_srt+384;
 },
 eta4_scVmA_entry() //  [R1]
         { []
         }
     {offset
       cd7B7: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cd7Bb; else goto cd7Ba;
       cd7Bb: // global
           HpAlloc = 72;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7Ba: // global
           _scVlB::P64 = P64[R1 + 16];
           _scVlC::P64 = P64[R1 + 24];
           _scVlD::P64 = P64[R1 + 32];
           _scVlE::P64 = P64[R1 + 40];
           _scVlF::P64 = P64[R1 + 48];
           _scVlS::P64 = P64[R1 + 56];
           _scVlY::P64 = P64[R1 + 64];
           I64[Hp - 64] = sat_scVnl_info;
           P64[Hp - 48] = _scVlB::P64;
           P64[Hp - 40] = _scVlC::P64;
           P64[Hp - 32] = _scVlD::P64;
           P64[Hp - 24] = _scVlE::P64;
           P64[Hp - 16] = _scVlF::P64;
           P64[Hp - 8] = _scVlS::P64;
           P64[Hp] = _scVlY::P64;
           R3 = Hp - 64;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . eta4_scVmA_info" {
     eta4_scVmA_info:
         const eta4_scVmA_entry;
         const 7;
         const 13528395363123215;
         const ScWiZ_srt+384;
 },
 sat_scVnn_entry() //  [R1]
         { []
         }
     {offset
       cd7Bj: // global
           _scVnn::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cd7Bk; else goto cd7Bl;
       cd7Bl: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cd7Bn; else goto cd7Bm;
       cd7Bn: // global
           HpAlloc = 72;
           goto cd7Bk;
       cd7Bk: // global
           R1 = _scVnn::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7Bm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVnn::P64;
           _scVlz::P64 = P64[_scVnn::P64 + 16];
           _scVlB::P64 = P64[_scVnn::P64 + 24];
           _scVlC::P64 = P64[_scVnn::P64 + 32];
           _scVlD::P64 = P64[_scVnn::P64 + 40];
           _scVlE::P64 = P64[_scVnn::P64 + 48];
           _scVlF::P64 = P64[_scVnn::P64 + 56];
           _scVlS::P64 = P64[_scVnn::P64 + 64];
           _scVlY::P64 = P64[_scVnn::P64 + 72];
           I64[Hp - 64] = eta4_scVmA_info;
           P64[Hp - 48] = _scVlB::P64;
           P64[Hp - 40] = _scVlC::P64;
           P64[Hp - 32] = _scVlD::P64;
           P64[Hp - 24] = _scVlE::P64;
           P64[Hp - 16] = _scVlF::P64;
           P64[Hp - 8] = _scVlS::P64;
           P64[Hp] = _scVlY::P64;
           I64[Sp - 32] = block_cd7Bc_info;
           R1 = _scVlz::P64;
           P64[Sp - 24] = Hp - 64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ud7Bu; else goto cd7Bd;
       ud7Bu: // global
           call _cd7Bc(R1) args: 0, res: 0, upd: 0;
       cd7Bd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVnn_info" {
     sat_scVnn_info:
         const sat_scVnn_entry;
         const 8;
         const 13528395363123215;
         const ScWiZ_srt+384;
 },
 _cd7Bc() //  [R1]
         { []
         }
     {offset
       cd7Bc: // global
           _cd7wv::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cd7Bg; else goto cd7Bh;
       cd7Bg: // global
           R3 = _cd7wv::P64;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cd7Bh: // global
           R3 = _cd7wv::P64;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd7Bc_info" {
     block_cd7Bc_info:
         const _cd7Bc;
         const 1;
         const 12884901918;
         const ScWiZ_srt+544;
 },
 sat_scVno_entry() //  [R1]
         { []
         }
     {offset
       cd7Bv: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cd7Bz; else goto cd7By;
       cd7Bz: // global
           HpAlloc = 80;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7By: // global
           _scVlz::P64 = P64[R1 + 16];
           _scVlB::P64 = P64[R1 + 24];
           _scVlC::P64 = P64[R1 + 32];
           _scVlD::P64 = P64[R1 + 40];
           _scVlE::P64 = P64[R1 + 48];
           _scVlF::P64 = P64[R1 + 56];
           _scVlS::P64 = P64[R1 + 64];
           _scVlY::P64 = P64[R1 + 72];
           I64[Hp - 72] = sat_scVnn_info;
           P64[Hp - 56] = _scVlz::P64;
           P64[Hp - 48] = _scVlB::P64;
           P64[Hp - 40] = _scVlC::P64;
           P64[Hp - 32] = _scVlD::P64;
           P64[Hp - 24] = _scVlE::P64;
           P64[Hp - 16] = _scVlF::P64;
           P64[Hp - 8] = _scVlS::P64;
           P64[Hp] = _scVlY::P64;
           R3 = Hp - 72;
           R2 = lvl79_rcV6o_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVno_info" {
     sat_scVno_info:
         const sat_scVno_entry;
         const 8;
         const 13528395363123215;
         const ScWiZ_srt+384;
 },
 eta3_scVmz_entry() //  [R1]
         { []
         }
     {offset
       cd7BA: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cd7BE; else goto cd7BD;
       cd7BE: // global
           HpAlloc = 80;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7BD: // global
           _scVlz::P64 = P64[R1 + 16];
           _scVlB::P64 = P64[R1 + 24];
           _scVlC::P64 = P64[R1 + 32];
           _scVlD::P64 = P64[R1 + 40];
           _scVlE::P64 = P64[R1 + 48];
           _scVlF::P64 = P64[R1 + 56];
           _scVlS::P64 = P64[R1 + 64];
           _scVlY::P64 = P64[R1 + 72];
           I64[Hp - 72] = sat_scVno_info;
           P64[Hp - 56] = _scVlz::P64;
           P64[Hp - 48] = _scVlB::P64;
           P64[Hp - 40] = _scVlC::P64;
           P64[Hp - 32] = _scVlD::P64;
           P64[Hp - 24] = _scVlE::P64;
           P64[Hp - 16] = _scVlF::P64;
           P64[Hp - 8] = _scVlS::P64;
           P64[Hp] = _scVlY::P64;
           R3 = Hp - 72;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . eta3_scVmz_info" {
     eta3_scVmz_info:
         const eta3_scVmz_entry;
         const 8;
         const 13528395363123215;
         const ScWiZ_srt+384;
 },
 sat_scVnq_entry() //  [R1]
         { []
         }
     {offset
       cd7BM: // global
           _scVnq::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cd7BN; else goto cd7BO;
       cd7BO: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cd7BQ; else goto cd7BP;
       cd7BQ: // global
           HpAlloc = 80;
           goto cd7BN;
       cd7BN: // global
           R1 = _scVnq::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7BP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVnq::P64;
           _scVly::P64 = P64[_scVnq::P64 + 16];
           _scVlz::P64 = P64[_scVnq::P64 + 24];
           _scVlB::P64 = P64[_scVnq::P64 + 32];
           _scVlC::P64 = P64[_scVnq::P64 + 40];
           _scVlD::P64 = P64[_scVnq::P64 + 48];
           _scVlE::P64 = P64[_scVnq::P64 + 56];
           _scVlF::P64 = P64[_scVnq::P64 + 64];
           _scVlS::P64 = P64[_scVnq::P64 + 72];
           _scVlY::P64 = P64[_scVnq::P64 + 80];
           I64[Hp - 72] = eta3_scVmz_info;
           P64[Hp - 56] = _scVlz::P64;
           P64[Hp - 48] = _scVlB::P64;
           P64[Hp - 40] = _scVlC::P64;
           P64[Hp - 32] = _scVlD::P64;
           P64[Hp - 24] = _scVlE::P64;
           P64[Hp - 16] = _scVlF::P64;
           P64[Hp - 8] = _scVlS::P64;
           P64[Hp] = _scVlY::P64;
           I64[Sp - 32] = block_cd7BF_info;
           R1 = _scVly::P64;
           P64[Sp - 24] = Hp - 72;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ud7BX; else goto cd7BG;
       ud7BX: // global
           call _cd7BF(R1) args: 0, res: 0, upd: 0;
       cd7BG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVnq_info" {
     sat_scVnq_info:
         const sat_scVnq_entry;
         const 9;
         const 13528395363123215;
         const ScWiZ_srt+384;
 },
 _cd7BF() //  [R1]
         { []
         }
     {offset
       cd7BF: // global
           _cd7wj::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cd7BJ; else goto cd7BK;
       cd7BJ: // global
           R3 = _cd7wj::P64;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cd7BK: // global
           R3 = _cd7wj::P64;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd7BF_info" {
     block_cd7BF_info:
         const _cd7BF;
         const 1;
         const 12884901918;
         const ScWiZ_srt+544;
 },
 sat_scVnr_entry() //  [R1]
         { []
         }
     {offset
       cd7BY: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cd7C2; else goto cd7C1;
       cd7C2: // global
           HpAlloc = 88;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7C1: // global
           _scVly::P64 = P64[R1 + 16];
           _scVlz::P64 = P64[R1 + 24];
           _scVlB::P64 = P64[R1 + 32];
           _scVlC::P64 = P64[R1 + 40];
           _scVlD::P64 = P64[R1 + 48];
           _scVlE::P64 = P64[R1 + 56];
           _scVlF::P64 = P64[R1 + 64];
           _scVlS::P64 = P64[R1 + 72];
           _scVlY::P64 = P64[R1 + 80];
           I64[Hp - 80] = sat_scVnq_info;
           P64[Hp - 64] = _scVly::P64;
           P64[Hp - 56] = _scVlz::P64;
           P64[Hp - 48] = _scVlB::P64;
           P64[Hp - 40] = _scVlC::P64;
           P64[Hp - 32] = _scVlD::P64;
           P64[Hp - 24] = _scVlE::P64;
           P64[Hp - 16] = _scVlF::P64;
           P64[Hp - 8] = _scVlS::P64;
           P64[Hp] = _scVlY::P64;
           R3 = Hp - 80;
           R2 = lvl78_rcV6n_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVnr_info" {
     sat_scVnr_info:
         const sat_scVnr_entry;
         const 9;
         const 13528395363123215;
         const ScWiZ_srt+384;
 },
 sat_scVns_entry() //  [R1]
         { []
         }
     {offset
       cd7C3: // global
           _scVns::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd7C4; else goto cd7C5;
       cd7C5: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cd7C7; else goto cd7C6;
       cd7C7: // global
           HpAlloc = 88;
           goto cd7C4;
       cd7C4: // global
           R1 = _scVns::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7C6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVns::P64;
           _scVly::P64 = P64[_scVns::P64 + 16];
           _scVlz::P64 = P64[_scVns::P64 + 24];
           _scVlB::P64 = P64[_scVns::P64 + 32];
           _scVlC::P64 = P64[_scVns::P64 + 40];
           _scVlD::P64 = P64[_scVns::P64 + 48];
           _scVlE::P64 = P64[_scVns::P64 + 56];
           _scVlF::P64 = P64[_scVns::P64 + 64];
           _scVlS::P64 = P64[_scVns::P64 + 72];
           _scVlY::P64 = P64[_scVns::P64 + 80];
           I64[Hp - 80] = sat_scVnr_info;
           P64[Hp - 64] = _scVly::P64;
           P64[Hp - 56] = _scVlz::P64;
           P64[Hp - 48] = _scVlB::P64;
           P64[Hp - 40] = _scVlC::P64;
           P64[Hp - 32] = _scVlD::P64;
           P64[Hp - 24] = _scVlE::P64;
           P64[Hp - 16] = _scVlF::P64;
           P64[Hp - 8] = _scVlS::P64;
           P64[Hp] = _scVlY::P64;
           R3 = Hp - 80;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVns_info" {
     sat_scVns_info:
         const sat_scVns_entry;
         const 9;
         const 13528395363123215;
         const ScWiZ_srt+384;
 },
 sat_scVnt_entry() //  [R1]
         { []
         }
     {offset
       cd7C8: // global
           _scVnt::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd7C9; else goto cd7Ca;
       cd7Ca: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cd7Cc; else goto cd7Cb;
       cd7Cc: // global
           HpAlloc = 88;
           goto cd7C9;
       cd7C9: // global
           R1 = _scVnt::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7Cb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVnt::P64;
           _scVly::P64 = P64[_scVnt::P64 + 16];
           _scVlz::P64 = P64[_scVnt::P64 + 24];
           _scVlB::P64 = P64[_scVnt::P64 + 32];
           _scVlC::P64 = P64[_scVnt::P64 + 40];
           _scVlD::P64 = P64[_scVnt::P64 + 48];
           _scVlE::P64 = P64[_scVnt::P64 + 56];
           _scVlF::P64 = P64[_scVnt::P64 + 64];
           _scVlP::P64 = P64[_scVnt::P64 + 72];
           _scVlS::P64 = P64[_scVnt::P64 + 80];
           _scVlY::P64 = P64[_scVnt::P64 + 88];
           I64[Hp - 80] = sat_scVns_info;
           P64[Hp - 64] = _scVly::P64;
           P64[Hp - 56] = _scVlz::P64;
           P64[Hp - 48] = _scVlB::P64;
           P64[Hp - 40] = _scVlC::P64;
           P64[Hp - 32] = _scVlD::P64;
           P64[Hp - 24] = _scVlE::P64;
           P64[Hp - 16] = _scVlF::P64;
           P64[Hp - 8] = _scVlS::P64;
           P64[Hp] = _scVlY::P64;
           R2 = Hp - 80;
           R1 = _scVlP::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVnt_info" {
     sat_scVnt_info:
         const sat_scVnt_entry;
         const 10;
         const 13528395363123215;
         const ScWiZ_srt+384;
 },
 sat_scVnu_entry() //  [R1]
         { []
         }
     {offset
       cd7Cd: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cd7Ch; else goto cd7Cg;
       cd7Ch: // global
           HpAlloc = 96;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7Cg: // global
           _scVly::P64 = P64[R1 + 16];
           _scVlz::P64 = P64[R1 + 24];
           _scVlB::P64 = P64[R1 + 32];
           _scVlC::P64 = P64[R1 + 40];
           _scVlD::P64 = P64[R1 + 48];
           _scVlE::P64 = P64[R1 + 56];
           _scVlF::P64 = P64[R1 + 64];
           _scVlP::P64 = P64[R1 + 72];
           _scVlS::P64 = P64[R1 + 80];
           _scVlY::P64 = P64[R1 + 88];
           I64[Hp - 88] = sat_scVnt_info;
           P64[Hp - 72] = _scVly::P64;
           P64[Hp - 64] = _scVlz::P64;
           P64[Hp - 56] = _scVlB::P64;
           P64[Hp - 48] = _scVlC::P64;
           P64[Hp - 40] = _scVlD::P64;
           P64[Hp - 32] = _scVlE::P64;
           P64[Hp - 24] = _scVlF::P64;
           P64[Hp - 16] = _scVlP::P64;
           P64[Hp - 8] = _scVlS::P64;
           P64[Hp] = _scVlY::P64;
           R3 = Hp - 88;
           R2 = lvl77_rcV6m_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVnu_info" {
     sat_scVnu_info:
         const sat_scVnu_entry;
         const 10;
         const 13528395363123215;
         const ScWiZ_srt+384;
 },
 eta2_scVmy_entry() //  [R1]
         { []
         }
     {offset
       cd7Ci: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cd7Cm; else goto cd7Cl;
       cd7Cm: // global
           HpAlloc = 96;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7Cl: // global
           _scVly::P64 = P64[R1 + 16];
           _scVlz::P64 = P64[R1 + 24];
           _scVlB::P64 = P64[R1 + 32];
           _scVlC::P64 = P64[R1 + 40];
           _scVlD::P64 = P64[R1 + 48];
           _scVlE::P64 = P64[R1 + 56];
           _scVlF::P64 = P64[R1 + 64];
           _scVlP::P64 = P64[R1 + 72];
           _scVlS::P64 = P64[R1 + 80];
           _scVlY::P64 = P64[R1 + 88];
           I64[Hp - 88] = sat_scVnu_info;
           P64[Hp - 72] = _scVly::P64;
           P64[Hp - 64] = _scVlz::P64;
           P64[Hp - 56] = _scVlB::P64;
           P64[Hp - 48] = _scVlC::P64;
           P64[Hp - 40] = _scVlD::P64;
           P64[Hp - 32] = _scVlE::P64;
           P64[Hp - 24] = _scVlF::P64;
           P64[Hp - 16] = _scVlP::P64;
           P64[Hp - 8] = _scVlS::P64;
           P64[Hp] = _scVlY::P64;
           R3 = Hp - 88;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . eta2_scVmy_info" {
     eta2_scVmy_info:
         const eta2_scVmy_entry;
         const 10;
         const 13528395363123215;
         const ScWiZ_srt+384;
 },
 sat_scVnw_entry() //  [R1]
         { []
         }
     {offset
       cd7Cu: // global
           _scVnw::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cd7Cv; else goto cd7Cw;
       cd7Cw: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cd7Cy; else goto cd7Cx;
       cd7Cy: // global
           HpAlloc = 96;
           goto cd7Cv;
       cd7Cv: // global
           R1 = _scVnw::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7Cx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVnw::P64;
           _scVlw::P64 = P64[_scVnw::P64 + 16];
           _scVly::P64 = P64[_scVnw::P64 + 24];
           _scVlz::P64 = P64[_scVnw::P64 + 32];
           _scVlB::P64 = P64[_scVnw::P64 + 40];
           _scVlC::P64 = P64[_scVnw::P64 + 48];
           _scVlD::P64 = P64[_scVnw::P64 + 56];
           _scVlE::P64 = P64[_scVnw::P64 + 64];
           _scVlF::P64 = P64[_scVnw::P64 + 72];
           _scVlP::P64 = P64[_scVnw::P64 + 80];
           _scVlS::P64 = P64[_scVnw::P64 + 88];
           _scVlY::P64 = P64[_scVnw::P64 + 96];
           I64[Hp - 88] = eta2_scVmy_info;
           P64[Hp - 72] = _scVly::P64;
           P64[Hp - 64] = _scVlz::P64;
           P64[Hp - 56] = _scVlB::P64;
           P64[Hp - 48] = _scVlC::P64;
           P64[Hp - 40] = _scVlD::P64;
           P64[Hp - 32] = _scVlE::P64;
           P64[Hp - 24] = _scVlF::P64;
           P64[Hp - 16] = _scVlP::P64;
           P64[Hp - 8] = _scVlS::P64;
           P64[Hp] = _scVlY::P64;
           I64[Sp - 32] = block_cd7Cn_info;
           R1 = _scVlw::P64;
           P64[Sp - 24] = Hp - 88;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ud7CF; else goto cd7Co;
       ud7CF: // global
           call _cd7Cn(R1) args: 0, res: 0, upd: 0;
       cd7Co: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVnw_info" {
     sat_scVnw_info:
         const sat_scVnw_entry;
         const 11;
         const 13528395363123215;
         const ScWiZ_srt+384;
 },
 _cd7Cn() //  [R1]
         { []
         }
     {offset
       cd7Cn: // global
           _cd7vV::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cd7Cr; else goto cd7Cs;
       cd7Cr: // global
           R3 = _cd7vV::P64;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cd7Cs: // global
           R3 = _cd7vV::P64;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd7Cn_info" {
     block_cd7Cn_info:
         const _cd7Cn;
         const 1;
         const 12884901918;
         const ScWiZ_srt+544;
 },
 sat_scVnx_entry() //  [R1]
         { []
         }
     {offset
       cd7CG: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cd7CK; else goto cd7CJ;
       cd7CK: // global
           HpAlloc = 104;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7CJ: // global
           _scVlw::P64 = P64[R1 + 16];
           _scVly::P64 = P64[R1 + 24];
           _scVlz::P64 = P64[R1 + 32];
           _scVlB::P64 = P64[R1 + 40];
           _scVlC::P64 = P64[R1 + 48];
           _scVlD::P64 = P64[R1 + 56];
           _scVlE::P64 = P64[R1 + 64];
           _scVlF::P64 = P64[R1 + 72];
           _scVlP::P64 = P64[R1 + 80];
           _scVlS::P64 = P64[R1 + 88];
           _scVlY::P64 = P64[R1 + 96];
           I64[Hp - 96] = sat_scVnw_info;
           P64[Hp - 80] = _scVlw::P64;
           P64[Hp - 72] = _scVly::P64;
           P64[Hp - 64] = _scVlz::P64;
           P64[Hp - 56] = _scVlB::P64;
           P64[Hp - 48] = _scVlC::P64;
           P64[Hp - 40] = _scVlD::P64;
           P64[Hp - 32] = _scVlE::P64;
           P64[Hp - 24] = _scVlF::P64;
           P64[Hp - 16] = _scVlP::P64;
           P64[Hp - 8] = _scVlS::P64;
           P64[Hp] = _scVlY::P64;
           R3 = Hp - 96;
           R2 = lvl76_rcV6l_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVnx_info" {
     sat_scVnx_info:
         const sat_scVnx_entry;
         const 11;
         const 13528395363123215;
         const ScWiZ_srt+384;
 },
 eta1_scVmx_entry() //  [R1]
         { []
         }
     {offset
       cd7CL: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cd7CP; else goto cd7CO;
       cd7CP: // global
           HpAlloc = 104;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7CO: // global
           _scVlw::P64 = P64[R1 + 16];
           _scVly::P64 = P64[R1 + 24];
           _scVlz::P64 = P64[R1 + 32];
           _scVlB::P64 = P64[R1 + 40];
           _scVlC::P64 = P64[R1 + 48];
           _scVlD::P64 = P64[R1 + 56];
           _scVlE::P64 = P64[R1 + 64];
           _scVlF::P64 = P64[R1 + 72];
           _scVlP::P64 = P64[R1 + 80];
           _scVlS::P64 = P64[R1 + 88];
           _scVlY::P64 = P64[R1 + 96];
           I64[Hp - 96] = sat_scVnx_info;
           P64[Hp - 80] = _scVlw::P64;
           P64[Hp - 72] = _scVly::P64;
           P64[Hp - 64] = _scVlz::P64;
           P64[Hp - 56] = _scVlB::P64;
           P64[Hp - 48] = _scVlC::P64;
           P64[Hp - 40] = _scVlD::P64;
           P64[Hp - 32] = _scVlE::P64;
           P64[Hp - 24] = _scVlF::P64;
           P64[Hp - 16] = _scVlP::P64;
           P64[Hp - 8] = _scVlS::P64;
           P64[Hp] = _scVlY::P64;
           R3 = Hp - 96;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . eta1_scVmx_info" {
     eta1_scVmx_info:
         const eta1_scVmx_entry;
         const 11;
         const 13528395363123215;
         const ScWiZ_srt+384;
 },
 sat_scVnz_entry() //  [R1]
         { []
         }
     {offset
       cd7CX: // global
           _scVnz::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cd7CY; else goto cd7CZ;
       cd7CZ: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cd7D1; else goto cd7D0;
       cd7D1: // global
           HpAlloc = 104;
           goto cd7CY;
       cd7CY: // global
           R1 = _scVnz::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7D0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVnz::P64;
           _scVlv::P64 = P64[_scVnz::P64 + 16];
           _scVlw::P64 = P64[_scVnz::P64 + 24];
           _scVly::P64 = P64[_scVnz::P64 + 32];
           _scVlz::P64 = P64[_scVnz::P64 + 40];
           _scVlB::P64 = P64[_scVnz::P64 + 48];
           _scVlC::P64 = P64[_scVnz::P64 + 56];
           _scVlD::P64 = P64[_scVnz::P64 + 64];
           _scVlE::P64 = P64[_scVnz::P64 + 72];
           _scVlF::P64 = P64[_scVnz::P64 + 80];
           _scVlP::P64 = P64[_scVnz::P64 + 88];
           _scVlS::P64 = P64[_scVnz::P64 + 96];
           _scVlY::P64 = P64[_scVnz::P64 + 104];
           I64[Hp - 96] = eta1_scVmx_info;
           P64[Hp - 80] = _scVlw::P64;
           P64[Hp - 72] = _scVly::P64;
           P64[Hp - 64] = _scVlz::P64;
           P64[Hp - 56] = _scVlB::P64;
           P64[Hp - 48] = _scVlC::P64;
           P64[Hp - 40] = _scVlD::P64;
           P64[Hp - 32] = _scVlE::P64;
           P64[Hp - 24] = _scVlF::P64;
           P64[Hp - 16] = _scVlP::P64;
           P64[Hp - 8] = _scVlS::P64;
           P64[Hp] = _scVlY::P64;
           I64[Sp - 32] = block_cd7CQ_info;
           R1 = _scVlv::P64;
           P64[Sp - 24] = Hp - 96;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ud7D8; else goto cd7CR;
       ud7D8: // global
           call _cd7CQ(R1) args: 0, res: 0, upd: 0;
       cd7CR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVnz_info" {
     sat_scVnz_info:
         const sat_scVnz_entry;
         const 12;
         const 13528395363123215;
         const ScWiZ_srt+384;
 },
 _cd7CQ() //  [R1]
         { []
         }
     {offset
       cd7CQ: // global
           _cd7vJ::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cd7CU; else goto cd7CV;
       cd7CU: // global
           R3 = _cd7vJ::P64;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cd7CV: // global
           R3 = _cd7vJ::P64;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd7CQ_info" {
     block_cd7CQ_info:
         const _cd7CQ;
         const 1;
         const 12884901918;
         const ScWiZ_srt+544;
 },
 sat_scVnA_entry() //  [R1]
         { []
         }
     {offset
       cd7D9: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto cd7Dd; else goto cd7Dc;
       cd7Dd: // global
           HpAlloc = 112;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7Dc: // global
           _scVlv::P64 = P64[R1 + 16];
           _scVlw::P64 = P64[R1 + 24];
           _scVly::P64 = P64[R1 + 32];
           _scVlz::P64 = P64[R1 + 40];
           _scVlB::P64 = P64[R1 + 48];
           _scVlC::P64 = P64[R1 + 56];
           _scVlD::P64 = P64[R1 + 64];
           _scVlE::P64 = P64[R1 + 72];
           _scVlF::P64 = P64[R1 + 80];
           _scVlP::P64 = P64[R1 + 88];
           _scVlS::P64 = P64[R1 + 96];
           _scVlY::P64 = P64[R1 + 104];
           I64[Hp - 104] = sat_scVnz_info;
           P64[Hp - 88] = _scVlv::P64;
           P64[Hp - 80] = _scVlw::P64;
           P64[Hp - 72] = _scVly::P64;
           P64[Hp - 64] = _scVlz::P64;
           P64[Hp - 56] = _scVlB::P64;
           P64[Hp - 48] = _scVlC::P64;
           P64[Hp - 40] = _scVlD::P64;
           P64[Hp - 32] = _scVlE::P64;
           P64[Hp - 24] = _scVlF::P64;
           P64[Hp - 16] = _scVlP::P64;
           P64[Hp - 8] = _scVlS::P64;
           P64[Hp] = _scVlY::P64;
           R3 = Hp - 104;
           R2 = lvl75_rcV6k_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVnA_info" {
     sat_scVnA_info:
         const sat_scVnA_entry;
         const 12;
         const 13528395363123215;
         const ScWiZ_srt+384;
 },
 sat_scVnB_entry() //  [R1]
         { []
         }
     {offset
       cd7De: // global
           _scVnB::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd7Df; else goto cd7Dg;
       cd7Dg: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto cd7Di; else goto cd7Dh;
       cd7Di: // global
           HpAlloc = 112;
           goto cd7Df;
       cd7Df: // global
           R1 = _scVnB::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7Dh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVnB::P64;
           _scVlv::P64 = P64[_scVnB::P64 + 16];
           _scVlw::P64 = P64[_scVnB::P64 + 24];
           _scVly::P64 = P64[_scVnB::P64 + 32];
           _scVlz::P64 = P64[_scVnB::P64 + 40];
           _scVlB::P64 = P64[_scVnB::P64 + 48];
           _scVlC::P64 = P64[_scVnB::P64 + 56];
           _scVlD::P64 = P64[_scVnB::P64 + 64];
           _scVlE::P64 = P64[_scVnB::P64 + 72];
           _scVlF::P64 = P64[_scVnB::P64 + 80];
           _scVlP::P64 = P64[_scVnB::P64 + 88];
           _scVlS::P64 = P64[_scVnB::P64 + 96];
           _scVlY::P64 = P64[_scVnB::P64 + 104];
           I64[Hp - 104] = sat_scVnA_info;
           P64[Hp - 88] = _scVlv::P64;
           P64[Hp - 80] = _scVlw::P64;
           P64[Hp - 72] = _scVly::P64;
           P64[Hp - 64] = _scVlz::P64;
           P64[Hp - 56] = _scVlB::P64;
           P64[Hp - 48] = _scVlC::P64;
           P64[Hp - 40] = _scVlD::P64;
           P64[Hp - 32] = _scVlE::P64;
           P64[Hp - 24] = _scVlF::P64;
           P64[Hp - 16] = _scVlP::P64;
           P64[Hp - 8] = _scVlS::P64;
           P64[Hp] = _scVlY::P64;
           R3 = Hp - 104;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVnB_info" {
     sat_scVnB_info:
         const sat_scVnB_entry;
         const 12;
         const 13528395363123215;
         const ScWiZ_srt+384;
 },
 sat_scVnF_entry() //  [R1]
         { []
         }
     {offset
       cd7Dj: // global
           if ((Sp + -120) < SpLim) (likely: False) goto cd7Dq; else goto cd7Dr;
       cd7Dq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7Dr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 120] = block_cd7vs_info;
           _scVlv::P64 = P64[R1 + 24];
           _scVlw::P64 = P64[R1 + 32];
           _scVly::P64 = P64[R1 + 40];
           _scVlz::P64 = P64[R1 + 48];
           _scVlB::P64 = P64[R1 + 56];
           _scVlC::P64 = P64[R1 + 64];
           _scVlD::P64 = P64[R1 + 72];
           _scVlE::P64 = P64[R1 + 80];
           _scVlF::P64 = P64[R1 + 88];
           _scVlP::P64 = P64[R1 + 96];
           _scVlS::P64 = P64[R1 + 104];
           _scVlY::P64 = P64[R1 + 112];
           R1 = P64[R1 + 16];
           P64[Sp - 112] = _scVlv::P64;
           P64[Sp - 104] = _scVlw::P64;
           P64[Sp - 96] = _scVly::P64;
           P64[Sp - 88] = _scVlz::P64;
           P64[Sp - 80] = _scVlB::P64;
           P64[Sp - 72] = _scVlC::P64;
           P64[Sp - 64] = _scVlD::P64;
           P64[Sp - 56] = _scVlE::P64;
           P64[Sp - 48] = _scVlF::P64;
           P64[Sp - 40] = _scVlP::P64;
           P64[Sp - 32] = _scVlS::P64;
           P64[Sp - 24] = _scVlY::P64;
           Sp = Sp - 120;
           if (R1 & 7 != 0) goto ud7Dy; else goto cd7vt;
       ud7Dy: // global
           call _cd7vs(R1) args: 0, res: 0, upd: 0;
       cd7vt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVnF_info" {
     sat_scVnF_info:
         const sat_scVnF_entry;
         const 13;
         const 13528395363123215;
         const ScWiZ_srt+384;
 },
 _cd7vs() //  [R1]
         { []
         }
     {offset
       cd7vs: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto cd7Du; else goto cd7Dt;
       cd7Du: // global
           HpAlloc = 112;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cd7Dt: // global
           _scVmv::I64 = I64[R1 + 7];
           I64[Hp - 104] = sat_scVnB_info;
           P64[Hp - 88] = P64[Sp + 8];
           P64[Hp - 80] = P64[Sp + 16];
           P64[Hp - 72] = P64[Sp + 24];
           P64[Hp - 64] = P64[Sp + 32];
           P64[Hp - 56] = P64[Sp + 40];
           P64[Hp - 48] = P64[Sp + 48];
           P64[Hp - 40] = P64[Sp + 56];
           P64[Hp - 32] = P64[Sp + 64];
           P64[Hp - 24] = P64[Sp + 72];
           P64[Hp - 16] = P64[Sp + 80];
           P64[Hp - 8] = P64[Sp + 88];
           P64[Hp] = P64[Sp + 96];
           I64[Sp + 96] = block_cd7Dn_info;
           R3 = Hp - 104;
           R2 = _scVmv::I64;
           Sp = Sp + 96;
           call GHC.Show.$witos_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cd7vs_info" {
     block_cd7vs_info:
         const _cd7vs;
         const 12;
         const 13528395363123230;
         const ScWiZ_srt+384;
 },
 _cd7Dn() //  [R1, R2]
         { []
         }
     {offset
       cd7Dn: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cd7Dx; else goto cd7Dw;
       cd7Dx: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cd7Dw: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd7Dn_info" {
     block_cd7Dn_info:
         const _cd7Dn;
         const 0;
         const 30;
 },
 sat_scVnG_entry() //  [R1]
         { []
         }
     {offset
       cd7Dz: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto cd7DD; else goto cd7DC;
       cd7DD: // global
           HpAlloc = 120;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7DC: // global
           _scVlu::P64 = P64[R1 + 16];
           _scVlv::P64 = P64[R1 + 24];
           _scVlw::P64 = P64[R1 + 32];
           _scVly::P64 = P64[R1 + 40];
           _scVlz::P64 = P64[R1 + 48];
           _scVlB::P64 = P64[R1 + 56];
           _scVlC::P64 = P64[R1 + 64];
           _scVlD::P64 = P64[R1 + 72];
           _scVlE::P64 = P64[R1 + 80];
           _scVlF::P64 = P64[R1 + 88];
           _scVlP::P64 = P64[R1 + 96];
           _scVlS::P64 = P64[R1 + 104];
           _scVlY::P64 = P64[R1 + 112];
           I64[Hp - 112] = sat_scVnF_info;
           P64[Hp - 96] = _scVlu::P64;
           P64[Hp - 88] = _scVlv::P64;
           P64[Hp - 80] = _scVlw::P64;
           P64[Hp - 72] = _scVly::P64;
           P64[Hp - 64] = _scVlz::P64;
           P64[Hp - 56] = _scVlB::P64;
           P64[Hp - 48] = _scVlC::P64;
           P64[Hp - 40] = _scVlD::P64;
           P64[Hp - 32] = _scVlE::P64;
           P64[Hp - 24] = _scVlF::P64;
           P64[Hp - 16] = _scVlP::P64;
           P64[Hp - 8] = _scVlS::P64;
           P64[Hp] = _scVlY::P64;
           R3 = Hp - 112;
           R2 = lvl74_rcV6j_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVnG_info" {
     sat_scVnG_info:
         const sat_scVnG_entry;
         const 13;
         const 13528395363123215;
         const ScWiZ_srt+384;
 },
 sat_scVnH_entry() //  [R1]
         { []
         }
     {offset
       cd7DE: // global
           _scVnH::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd7DF; else goto cd7DG;
       cd7DG: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto cd7DI; else goto cd7DH;
       cd7DI: // global
           HpAlloc = 120;
           goto cd7DF;
       cd7DF: // global
           R1 = _scVnH::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7DH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVnH::P64;
           _scVlu::P64 = P64[_scVnH::P64 + 16];
           _scVlv::P64 = P64[_scVnH::P64 + 24];
           _scVlw::P64 = P64[_scVnH::P64 + 32];
           _scVly::P64 = P64[_scVnH::P64 + 40];
           _scVlz::P64 = P64[_scVnH::P64 + 48];
           _scVlB::P64 = P64[_scVnH::P64 + 56];
           _scVlC::P64 = P64[_scVnH::P64 + 64];
           _scVlD::P64 = P64[_scVnH::P64 + 72];
           _scVlE::P64 = P64[_scVnH::P64 + 80];
           _scVlF::P64 = P64[_scVnH::P64 + 88];
           _scVlP::P64 = P64[_scVnH::P64 + 96];
           _scVlS::P64 = P64[_scVnH::P64 + 104];
           _scVlY::P64 = P64[_scVnH::P64 + 112];
           I64[Hp - 112] = sat_scVnG_info;
           P64[Hp - 96] = _scVlu::P64;
           P64[Hp - 88] = _scVlv::P64;
           P64[Hp - 80] = _scVlw::P64;
           P64[Hp - 72] = _scVly::P64;
           P64[Hp - 64] = _scVlz::P64;
           P64[Hp - 56] = _scVlB::P64;
           P64[Hp - 48] = _scVlC::P64;
           P64[Hp - 40] = _scVlD::P64;
           P64[Hp - 32] = _scVlE::P64;
           P64[Hp - 24] = _scVlF::P64;
           P64[Hp - 16] = _scVlP::P64;
           P64[Hp - 8] = _scVlS::P64;
           P64[Hp] = _scVlY::P64;
           R3 = Hp - 112;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVnH_info" {
     sat_scVnH_info:
         const sat_scVnH_entry;
         const 13;
         const 13528395363123215;
         const ScWiZ_srt+384;
 },
 sat_scVnI_entry() //  [R1]
         { []
         }
     {offset
       cd7DJ: // global
           _scVnI::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd7DK; else goto cd7DL;
       cd7DL: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto cd7DN; else goto cd7DM;
       cd7DN: // global
           HpAlloc = 120;
           goto cd7DK;
       cd7DK: // global
           R1 = _scVnI::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7DM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVnI::P64;
           _scVlu::P64 = P64[_scVnI::P64 + 16];
           _scVlv::P64 = P64[_scVnI::P64 + 24];
           _scVlw::P64 = P64[_scVnI::P64 + 32];
           _scVly::P64 = P64[_scVnI::P64 + 40];
           _scVlz::P64 = P64[_scVnI::P64 + 48];
           _scVlB::P64 = P64[_scVnI::P64 + 56];
           _scVlC::P64 = P64[_scVnI::P64 + 64];
           _scVlD::P64 = P64[_scVnI::P64 + 72];
           _scVlE::P64 = P64[_scVnI::P64 + 80];
           _scVlF::P64 = P64[_scVnI::P64 + 88];
           _scVlM::P64 = P64[_scVnI::P64 + 96];
           _scVlP::P64 = P64[_scVnI::P64 + 104];
           _scVlS::P64 = P64[_scVnI::P64 + 112];
           _scVlY::P64 = P64[_scVnI::P64 + 120];
           I64[Hp - 112] = sat_scVnH_info;
           P64[Hp - 96] = _scVlu::P64;
           P64[Hp - 88] = _scVlv::P64;
           P64[Hp - 80] = _scVlw::P64;
           P64[Hp - 72] = _scVly::P64;
           P64[Hp - 64] = _scVlz::P64;
           P64[Hp - 56] = _scVlB::P64;
           P64[Hp - 48] = _scVlC::P64;
           P64[Hp - 40] = _scVlD::P64;
           P64[Hp - 32] = _scVlE::P64;
           P64[Hp - 24] = _scVlF::P64;
           P64[Hp - 16] = _scVlP::P64;
           P64[Hp - 8] = _scVlS::P64;
           P64[Hp] = _scVlY::P64;
           R2 = Hp - 112;
           R1 = _scVlM::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVnI_info" {
     sat_scVnI_info:
         const sat_scVnI_entry;
         const 14;
         const 13528395363123215;
         const ScWiZ_srt+384;
 },
 sat_scVnJ_entry() //  [R1]
         { []
         }
     {offset
       cd7DO: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto cd7DS; else goto cd7DR;
       cd7DS: // global
           HpAlloc = 128;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7DR: // global
           _scVlu::P64 = P64[R1 + 16];
           _scVlv::P64 = P64[R1 + 24];
           _scVlw::P64 = P64[R1 + 32];
           _scVly::P64 = P64[R1 + 40];
           _scVlz::P64 = P64[R1 + 48];
           _scVlB::P64 = P64[R1 + 56];
           _scVlC::P64 = P64[R1 + 64];
           _scVlD::P64 = P64[R1 + 72];
           _scVlE::P64 = P64[R1 + 80];
           _scVlF::P64 = P64[R1 + 88];
           _scVlM::P64 = P64[R1 + 96];
           _scVlP::P64 = P64[R1 + 104];
           _scVlS::P64 = P64[R1 + 112];
           _scVlY::P64 = P64[R1 + 120];
           I64[Hp - 120] = sat_scVnI_info;
           P64[Hp - 104] = _scVlu::P64;
           P64[Hp - 96] = _scVlv::P64;
           P64[Hp - 88] = _scVlw::P64;
           P64[Hp - 80] = _scVly::P64;
           P64[Hp - 72] = _scVlz::P64;
           P64[Hp - 64] = _scVlB::P64;
           P64[Hp - 56] = _scVlC::P64;
           P64[Hp - 48] = _scVlD::P64;
           P64[Hp - 40] = _scVlE::P64;
           P64[Hp - 32] = _scVlF::P64;
           P64[Hp - 24] = _scVlM::P64;
           P64[Hp - 16] = _scVlP::P64;
           P64[Hp - 8] = _scVlS::P64;
           P64[Hp] = _scVlY::P64;
           R3 = Hp - 120;
           R2 = lvl73_rcV6i_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVnJ_info" {
     sat_scVnJ_info:
         const sat_scVnJ_entry;
         const 14;
         const 13528395363123215;
         const ScWiZ_srt+384;
 },
 sat_scVnK_entry() //  [R1]
         { []
         }
     {offset
       cd7DT: // global
           _scVnK::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd7DU; else goto cd7DV;
       cd7DV: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto cd7DX; else goto cd7DW;
       cd7DX: // global
           HpAlloc = 128;
           goto cd7DU;
       cd7DU: // global
           R1 = _scVnK::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7DW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVnK::P64;
           _scVlu::P64 = P64[_scVnK::P64 + 16];
           _scVlv::P64 = P64[_scVnK::P64 + 24];
           _scVlw::P64 = P64[_scVnK::P64 + 32];
           _scVly::P64 = P64[_scVnK::P64 + 40];
           _scVlz::P64 = P64[_scVnK::P64 + 48];
           _scVlB::P64 = P64[_scVnK::P64 + 56];
           _scVlC::P64 = P64[_scVnK::P64 + 64];
           _scVlD::P64 = P64[_scVnK::P64 + 72];
           _scVlE::P64 = P64[_scVnK::P64 + 80];
           _scVlF::P64 = P64[_scVnK::P64 + 88];
           _scVlM::P64 = P64[_scVnK::P64 + 96];
           _scVlP::P64 = P64[_scVnK::P64 + 104];
           _scVlS::P64 = P64[_scVnK::P64 + 112];
           _scVlY::P64 = P64[_scVnK::P64 + 120];
           I64[Hp - 120] = sat_scVnJ_info;
           P64[Hp - 104] = _scVlu::P64;
           P64[Hp - 96] = _scVlv::P64;
           P64[Hp - 88] = _scVlw::P64;
           P64[Hp - 80] = _scVly::P64;
           P64[Hp - 72] = _scVlz::P64;
           P64[Hp - 64] = _scVlB::P64;
           P64[Hp - 56] = _scVlC::P64;
           P64[Hp - 48] = _scVlD::P64;
           P64[Hp - 40] = _scVlE::P64;
           P64[Hp - 32] = _scVlF::P64;
           P64[Hp - 24] = _scVlM::P64;
           P64[Hp - 16] = _scVlP::P64;
           P64[Hp - 8] = _scVlS::P64;
           P64[Hp] = _scVlY::P64;
           R3 = Hp - 120;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVnK_info" {
     sat_scVnK_info:
         const sat_scVnK_entry;
         const 14;
         const 13528395363123215;
         const ScWiZ_srt+384;
 },
 sat_scVnL_entry() //  [R1]
         { []
         }
     {offset
       cd7DY: // global
           _scVnL::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd7DZ; else goto cd7E0;
       cd7E0: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto cd7E2; else goto cd7E1;
       cd7E2: // global
           HpAlloc = 128;
           goto cd7DZ;
       cd7DZ: // global
           R1 = _scVnL::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7E1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVnL::P64;
           _scVlu::P64 = P64[_scVnL::P64 + 16];
           _scVlv::P64 = P64[_scVnL::P64 + 24];
           _scVlw::P64 = P64[_scVnL::P64 + 32];
           _scVly::P64 = P64[_scVnL::P64 + 40];
           _scVlz::P64 = P64[_scVnL::P64 + 48];
           _scVlB::P64 = P64[_scVnL::P64 + 56];
           _scVlC::P64 = P64[_scVnL::P64 + 64];
           _scVlD::P64 = P64[_scVnL::P64 + 72];
           _scVlE::P64 = P64[_scVnL::P64 + 80];
           _scVlF::P64 = P64[_scVnL::P64 + 88];
           _scVlJ::P64 = P64[_scVnL::P64 + 96];
           _scVlM::P64 = P64[_scVnL::P64 + 104];
           _scVlP::P64 = P64[_scVnL::P64 + 112];
           _scVlS::P64 = P64[_scVnL::P64 + 120];
           _scVlY::P64 = P64[_scVnL::P64 + 128];
           I64[Hp - 120] = sat_scVnK_info;
           P64[Hp - 104] = _scVlu::P64;
           P64[Hp - 96] = _scVlv::P64;
           P64[Hp - 88] = _scVlw::P64;
           P64[Hp - 80] = _scVly::P64;
           P64[Hp - 72] = _scVlz::P64;
           P64[Hp - 64] = _scVlB::P64;
           P64[Hp - 56] = _scVlC::P64;
           P64[Hp - 48] = _scVlD::P64;
           P64[Hp - 40] = _scVlE::P64;
           P64[Hp - 32] = _scVlF::P64;
           P64[Hp - 24] = _scVlM::P64;
           P64[Hp - 16] = _scVlP::P64;
           P64[Hp - 8] = _scVlS::P64;
           P64[Hp] = _scVlY::P64;
           R2 = Hp - 120;
           R1 = _scVlJ::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVnL_info" {
     sat_scVnL_info:
         const sat_scVnL_entry;
         const 15;
         const 13528395363123215;
         const ScWiZ_srt+384;
 },
 sat_scVnM_entry() //  [R1]
         { []
         }
     {offset
       cd7E3: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto cd7E7; else goto cd7E6;
       cd7E7: // global
           HpAlloc = 136;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7E6: // global
           _scVlu::P64 = P64[R1 + 16];
           _scVlv::P64 = P64[R1 + 24];
           _scVlw::P64 = P64[R1 + 32];
           _scVly::P64 = P64[R1 + 40];
           _scVlz::P64 = P64[R1 + 48];
           _scVlB::P64 = P64[R1 + 56];
           _scVlC::P64 = P64[R1 + 64];
           _scVlD::P64 = P64[R1 + 72];
           _scVlE::P64 = P64[R1 + 80];
           _scVlF::P64 = P64[R1 + 88];
           _scVlJ::P64 = P64[R1 + 96];
           _scVlM::P64 = P64[R1 + 104];
           _scVlP::P64 = P64[R1 + 112];
           _scVlS::P64 = P64[R1 + 120];
           _scVlY::P64 = P64[R1 + 128];
           I64[Hp - 128] = sat_scVnL_info;
           P64[Hp - 112] = _scVlu::P64;
           P64[Hp - 104] = _scVlv::P64;
           P64[Hp - 96] = _scVlw::P64;
           P64[Hp - 88] = _scVly::P64;
           P64[Hp - 80] = _scVlz::P64;
           P64[Hp - 72] = _scVlB::P64;
           P64[Hp - 64] = _scVlC::P64;
           P64[Hp - 56] = _scVlD::P64;
           P64[Hp - 48] = _scVlE::P64;
           P64[Hp - 40] = _scVlF::P64;
           P64[Hp - 32] = _scVlJ::P64;
           P64[Hp - 24] = _scVlM::P64;
           P64[Hp - 16] = _scVlP::P64;
           P64[Hp - 8] = _scVlS::P64;
           P64[Hp] = _scVlY::P64;
           R3 = Hp - 128;
           R2 = lvl72_rcV6h_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVnM_info" {
     sat_scVnM_info:
         const sat_scVnM_entry;
         const 15;
         const 13528395363123215;
         const ScWiZ_srt+384;
 },
 eta_scVmt_entry() //  [R1]
         { []
         }
     {offset
       cd7E8: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto cd7Ec; else goto cd7Eb;
       cd7Ec: // global
           HpAlloc = 136;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7Eb: // global
           _scVlu::P64 = P64[R1 + 16];
           _scVlv::P64 = P64[R1 + 24];
           _scVlw::P64 = P64[R1 + 32];
           _scVly::P64 = P64[R1 + 40];
           _scVlz::P64 = P64[R1 + 48];
           _scVlB::P64 = P64[R1 + 56];
           _scVlC::P64 = P64[R1 + 64];
           _scVlD::P64 = P64[R1 + 72];
           _scVlE::P64 = P64[R1 + 80];
           _scVlF::P64 = P64[R1 + 88];
           _scVlJ::P64 = P64[R1 + 96];
           _scVlM::P64 = P64[R1 + 104];
           _scVlP::P64 = P64[R1 + 112];
           _scVlS::P64 = P64[R1 + 120];
           _scVlY::P64 = P64[R1 + 128];
           I64[Hp - 128] = sat_scVnM_info;
           P64[Hp - 112] = _scVlu::P64;
           P64[Hp - 104] = _scVlv::P64;
           P64[Hp - 96] = _scVlw::P64;
           P64[Hp - 88] = _scVly::P64;
           P64[Hp - 80] = _scVlz::P64;
           P64[Hp - 72] = _scVlB::P64;
           P64[Hp - 64] = _scVlC::P64;
           P64[Hp - 56] = _scVlD::P64;
           P64[Hp - 48] = _scVlE::P64;
           P64[Hp - 40] = _scVlF::P64;
           P64[Hp - 32] = _scVlJ::P64;
           P64[Hp - 24] = _scVlM::P64;
           P64[Hp - 16] = _scVlP::P64;
           P64[Hp - 8] = _scVlS::P64;
           P64[Hp] = _scVlY::P64;
           R3 = Hp - 128;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . eta_scVmt_info" {
     eta_scVmt_info:
         const eta_scVmt_entry;
         const 15;
         const 13528395363123215;
         const ScWiZ_srt+384;
 },
 sat_scVnO_entry() //  [R1]
         { []
         }
     {offset
       cd7Ek: // global
           _scVnO::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cd7El; else goto cd7Em;
       cd7Em: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto cd7Eo; else goto cd7En;
       cd7Eo: // global
           HpAlloc = 136;
           goto cd7El;
       cd7El: // global
           R1 = _scVnO::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7En: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVnO::P64;
           _scVlr::P64 = P64[_scVnO::P64 + 16];
           _scVlu::P64 = P64[_scVnO::P64 + 24];
           _scVlv::P64 = P64[_scVnO::P64 + 32];
           _scVlw::P64 = P64[_scVnO::P64 + 40];
           _scVly::P64 = P64[_scVnO::P64 + 48];
           _scVlz::P64 = P64[_scVnO::P64 + 56];
           _scVlB::P64 = P64[_scVnO::P64 + 64];
           _scVlC::P64 = P64[_scVnO::P64 + 72];
           _scVlD::P64 = P64[_scVnO::P64 + 80];
           _scVlE::P64 = P64[_scVnO::P64 + 88];
           _scVlF::P64 = P64[_scVnO::P64 + 96];
           _scVlJ::P64 = P64[_scVnO::P64 + 104];
           _scVlM::P64 = P64[_scVnO::P64 + 112];
           _scVlP::P64 = P64[_scVnO::P64 + 120];
           _scVlS::P64 = P64[_scVnO::P64 + 128];
           _scVlY::P64 = P64[_scVnO::P64 + 136];
           I64[Hp - 128] = eta_scVmt_info;
           P64[Hp - 112] = _scVlu::P64;
           P64[Hp - 104] = _scVlv::P64;
           P64[Hp - 96] = _scVlw::P64;
           P64[Hp - 88] = _scVly::P64;
           P64[Hp - 80] = _scVlz::P64;
           P64[Hp - 72] = _scVlB::P64;
           P64[Hp - 64] = _scVlC::P64;
           P64[Hp - 56] = _scVlD::P64;
           P64[Hp - 48] = _scVlE::P64;
           P64[Hp - 40] = _scVlF::P64;
           P64[Hp - 32] = _scVlJ::P64;
           P64[Hp - 24] = _scVlM::P64;
           P64[Hp - 16] = _scVlP::P64;
           P64[Hp - 8] = _scVlS::P64;
           P64[Hp] = _scVlY::P64;
           I64[Sp - 32] = block_cd7Ed_info;
           R1 = _scVlr::P64;
           P64[Sp - 24] = Hp - 128;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ud7Ev; else goto cd7Ee;
       ud7Ev: // global
           call _cd7Ed(R1) args: 0, res: 0, upd: 0;
       cd7Ee: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVnO_info" {
     sat_scVnO_info:
         const sat_scVnO_entry;
         const 16;
         const 13528395363123215;
         const ScWiZ_srt+384;
 },
 _cd7Ed() //  [R1]
         { []
         }
     {offset
       cd7Ed: // global
           _cd7uS::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cd7Eh; else goto cd7Ei;
       cd7Eh: // global
           R3 = _cd7uS::P64;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cd7Ei: // global
           R3 = _cd7uS::P64;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd7Ed_info" {
     block_cd7Ed_info:
         const _cd7Ed;
         const 1;
         const 12884901918;
         const ScWiZ_srt+544;
 },
 sat_scVnP_entry() //  [R1]
         { []
         }
     {offset
       cd7Ew: // global
           Hp = Hp + 144;
           if (Hp > HpLim) (likely: False) goto cd7EA; else goto cd7Ez;
       cd7EA: // global
           HpAlloc = 144;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7Ez: // global
           _scVlr::P64 = P64[R1 + 16];
           _scVlu::P64 = P64[R1 + 24];
           _scVlv::P64 = P64[R1 + 32];
           _scVlw::P64 = P64[R1 + 40];
           _scVly::P64 = P64[R1 + 48];
           _scVlz::P64 = P64[R1 + 56];
           _scVlB::P64 = P64[R1 + 64];
           _scVlC::P64 = P64[R1 + 72];
           _scVlD::P64 = P64[R1 + 80];
           _scVlE::P64 = P64[R1 + 88];
           _scVlF::P64 = P64[R1 + 96];
           _scVlJ::P64 = P64[R1 + 104];
           _scVlM::P64 = P64[R1 + 112];
           _scVlP::P64 = P64[R1 + 120];
           _scVlS::P64 = P64[R1 + 128];
           _scVlY::P64 = P64[R1 + 136];
           I64[Hp - 136] = sat_scVnO_info;
           P64[Hp - 120] = _scVlr::P64;
           P64[Hp - 112] = _scVlu::P64;
           P64[Hp - 104] = _scVlv::P64;
           P64[Hp - 96] = _scVlw::P64;
           P64[Hp - 88] = _scVly::P64;
           P64[Hp - 80] = _scVlz::P64;
           P64[Hp - 72] = _scVlB::P64;
           P64[Hp - 64] = _scVlC::P64;
           P64[Hp - 56] = _scVlD::P64;
           P64[Hp - 48] = _scVlE::P64;
           P64[Hp - 40] = _scVlF::P64;
           P64[Hp - 32] = _scVlJ::P64;
           P64[Hp - 24] = _scVlM::P64;
           P64[Hp - 16] = _scVlP::P64;
           P64[Hp - 8] = _scVlS::P64;
           P64[Hp] = _scVlY::P64;
           R3 = Hp - 136;
           R2 = lvl71_rcV6g_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVnP_info" {
     sat_scVnP_info:
         const sat_scVnP_entry;
         const 16;
         const 13528395363123215;
         const ScWiZ_srt+384;
 },
 sat_scVnQ_entry() //  [R1]
         { []
         }
     {offset
       cd7EB: // global
           _scVnQ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd7EC; else goto cd7ED;
       cd7ED: // global
           Hp = Hp + 144;
           if (Hp > HpLim) (likely: False) goto cd7EF; else goto cd7EE;
       cd7EF: // global
           HpAlloc = 144;
           goto cd7EC;
       cd7EC: // global
           R1 = _scVnQ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7EE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVnQ::P64;
           _scVlr::P64 = P64[_scVnQ::P64 + 16];
           _scVlu::P64 = P64[_scVnQ::P64 + 24];
           _scVlv::P64 = P64[_scVnQ::P64 + 32];
           _scVlw::P64 = P64[_scVnQ::P64 + 40];
           _scVly::P64 = P64[_scVnQ::P64 + 48];
           _scVlz::P64 = P64[_scVnQ::P64 + 56];
           _scVlB::P64 = P64[_scVnQ::P64 + 64];
           _scVlC::P64 = P64[_scVnQ::P64 + 72];
           _scVlD::P64 = P64[_scVnQ::P64 + 80];
           _scVlE::P64 = P64[_scVnQ::P64 + 88];
           _scVlF::P64 = P64[_scVnQ::P64 + 96];
           _scVlJ::P64 = P64[_scVnQ::P64 + 104];
           _scVlM::P64 = P64[_scVnQ::P64 + 112];
           _scVlP::P64 = P64[_scVnQ::P64 + 120];
           _scVlS::P64 = P64[_scVnQ::P64 + 128];
           _scVlY::P64 = P64[_scVnQ::P64 + 136];
           I64[Hp - 136] = sat_scVnP_info;
           P64[Hp - 120] = _scVlr::P64;
           P64[Hp - 112] = _scVlu::P64;
           P64[Hp - 104] = _scVlv::P64;
           P64[Hp - 96] = _scVlw::P64;
           P64[Hp - 88] = _scVly::P64;
           P64[Hp - 80] = _scVlz::P64;
           P64[Hp - 72] = _scVlB::P64;
           P64[Hp - 64] = _scVlC::P64;
           P64[Hp - 56] = _scVlD::P64;
           P64[Hp - 48] = _scVlE::P64;
           P64[Hp - 40] = _scVlF::P64;
           P64[Hp - 32] = _scVlJ::P64;
           P64[Hp - 24] = _scVlM::P64;
           P64[Hp - 16] = _scVlP::P64;
           P64[Hp - 8] = _scVlS::P64;
           P64[Hp] = _scVlY::P64;
           R3 = Hp - 136;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVnQ_info" {
     sat_scVnQ_info:
         const sat_scVnQ_entry;
         const 16;
         const 13528395363123215;
         const ScWiZ_srt+384;
 },
 sat_scVnU_entry() //  [R1]
         { []
         }
     {offset
       cd7EG: // global
           if ((Sp + -152) < SpLim) (likely: False) goto cd7EN; else goto cd7EO;
       cd7EN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7EO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 152] = block_cd7uB_info;
           _scVlr::P64 = P64[R1 + 24];
           _scVlu::P64 = P64[R1 + 32];
           _scVlv::P64 = P64[R1 + 40];
           _scVlw::P64 = P64[R1 + 48];
           _scVly::P64 = P64[R1 + 56];
           _scVlz::P64 = P64[R1 + 64];
           _scVlB::P64 = P64[R1 + 72];
           _scVlC::P64 = P64[R1 + 80];
           _scVlD::P64 = P64[R1 + 88];
           _scVlE::P64 = P64[R1 + 96];
           _scVlF::P64 = P64[R1 + 104];
           _scVlJ::P64 = P64[R1 + 112];
           _scVlM::P64 = P64[R1 + 120];
           _scVlP::P64 = P64[R1 + 128];
           _scVlS::P64 = P64[R1 + 136];
           _scVlY::P64 = P64[R1 + 144];
           R1 = P64[R1 + 16];
           P64[Sp - 144] = _scVlr::P64;
           P64[Sp - 136] = _scVlu::P64;
           P64[Sp - 128] = _scVlv::P64;
           P64[Sp - 120] = _scVlw::P64;
           P64[Sp - 112] = _scVly::P64;
           P64[Sp - 104] = _scVlz::P64;
           P64[Sp - 96] = _scVlB::P64;
           P64[Sp - 88] = _scVlC::P64;
           P64[Sp - 80] = _scVlD::P64;
           P64[Sp - 72] = _scVlE::P64;
           P64[Sp - 64] = _scVlF::P64;
           P64[Sp - 56] = _scVlJ::P64;
           P64[Sp - 48] = _scVlM::P64;
           P64[Sp - 40] = _scVlP::P64;
           P64[Sp - 32] = _scVlS::P64;
           P64[Sp - 24] = _scVlY::P64;
           Sp = Sp - 152;
           if (R1 & 7 != 0) goto ud7EV; else goto cd7uC;
       ud7EV: // global
           call _cd7uB(R1) args: 0, res: 0, upd: 0;
       cd7uC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVnU_info" {
     sat_scVnU_info:
         const sat_scVnU_entry;
         const 17;
         const 13528395363123215;
         const ScWiZ_srt+384;
 },
 _cd7uB() //  [R1]
         { []
         }
     {offset
       cd7uB: // global
           Hp = Hp + 144;
           if (Hp > HpLim) (likely: False) goto cd7ER; else goto cd7EQ;
       cd7ER: // global
           HpAlloc = 144;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cd7EQ: // global
           _scVmr::I64 = I64[R1 + 7];
           I64[Hp - 136] = sat_scVnQ_info;
           P64[Hp - 120] = P64[Sp + 8];
           P64[Hp - 112] = P64[Sp + 16];
           P64[Hp - 104] = P64[Sp + 24];
           P64[Hp - 96] = P64[Sp + 32];
           P64[Hp - 88] = P64[Sp + 40];
           P64[Hp - 80] = P64[Sp + 48];
           P64[Hp - 72] = P64[Sp + 56];
           P64[Hp - 64] = P64[Sp + 64];
           P64[Hp - 56] = P64[Sp + 72];
           P64[Hp - 48] = P64[Sp + 80];
           P64[Hp - 40] = P64[Sp + 88];
           P64[Hp - 32] = P64[Sp + 96];
           P64[Hp - 24] = P64[Sp + 104];
           P64[Hp - 16] = P64[Sp + 112];
           P64[Hp - 8] = P64[Sp + 120];
           P64[Hp] = P64[Sp + 128];
           I64[Sp + 128] = block_cd7EK_info;
           R3 = Hp - 136;
           R2 = _scVmr::I64;
           Sp = Sp + 128;
           call GHC.Show.$witos_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cd7uB_info" {
     block_cd7uB_info:
         const _cd7uB;
         const 16;
         const 13528395363123230;
         const ScWiZ_srt+384;
 },
 _cd7EK() //  [R1, R2]
         { []
         }
     {offset
       cd7EK: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cd7EU; else goto cd7ET;
       cd7EU: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cd7ET: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd7EK_info" {
     block_cd7EK_info:
         const _cd7EK;
         const 0;
         const 30;
 },
 sat_scVnV_entry() //  [R1]
         { []
         }
     {offset
       cd7EW: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto cd7F0; else goto cd7EZ;
       cd7F0: // global
           HpAlloc = 152;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7EZ: // global
           _scVlq::P64 = P64[R1 + 16];
           _scVlr::P64 = P64[R1 + 24];
           _scVlu::P64 = P64[R1 + 32];
           _scVlv::P64 = P64[R1 + 40];
           _scVlw::P64 = P64[R1 + 48];
           _scVly::P64 = P64[R1 + 56];
           _scVlz::P64 = P64[R1 + 64];
           _scVlB::P64 = P64[R1 + 72];
           _scVlC::P64 = P64[R1 + 80];
           _scVlD::P64 = P64[R1 + 88];
           _scVlE::P64 = P64[R1 + 96];
           _scVlF::P64 = P64[R1 + 104];
           _scVlJ::P64 = P64[R1 + 112];
           _scVlM::P64 = P64[R1 + 120];
           _scVlP::P64 = P64[R1 + 128];
           _scVlS::P64 = P64[R1 + 136];
           _scVlY::P64 = P64[R1 + 144];
           I64[Hp - 144] = sat_scVnU_info;
           P64[Hp - 128] = _scVlq::P64;
           P64[Hp - 120] = _scVlr::P64;
           P64[Hp - 112] = _scVlu::P64;
           P64[Hp - 104] = _scVlv::P64;
           P64[Hp - 96] = _scVlw::P64;
           P64[Hp - 88] = _scVly::P64;
           P64[Hp - 80] = _scVlz::P64;
           P64[Hp - 72] = _scVlB::P64;
           P64[Hp - 64] = _scVlC::P64;
           P64[Hp - 56] = _scVlD::P64;
           P64[Hp - 48] = _scVlE::P64;
           P64[Hp - 40] = _scVlF::P64;
           P64[Hp - 32] = _scVlJ::P64;
           P64[Hp - 24] = _scVlM::P64;
           P64[Hp - 16] = _scVlP::P64;
           P64[Hp - 8] = _scVlS::P64;
           P64[Hp] = _scVlY::P64;
           R3 = Hp - 144;
           R2 = lvl70_rcV6f_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVnV_info" {
     sat_scVnV_info:
         const sat_scVnV_entry;
         const 17;
         const 13528395363123215;
         const ScWiZ_srt+384;
 },
 sat_scVnW_entry() //  [R1]
         { []
         }
     {offset
       cd7F1: // global
           _scVnW::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd7F2; else goto cd7F3;
       cd7F3: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto cd7F5; else goto cd7F4;
       cd7F5: // global
           HpAlloc = 152;
           goto cd7F2;
       cd7F2: // global
           R1 = _scVnW::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7F4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVnW::P64;
           _scVlq::P64 = P64[_scVnW::P64 + 16];
           _scVlr::P64 = P64[_scVnW::P64 + 24];
           _scVlu::P64 = P64[_scVnW::P64 + 32];
           _scVlv::P64 = P64[_scVnW::P64 + 40];
           _scVlw::P64 = P64[_scVnW::P64 + 48];
           _scVly::P64 = P64[_scVnW::P64 + 56];
           _scVlz::P64 = P64[_scVnW::P64 + 64];
           _scVlB::P64 = P64[_scVnW::P64 + 72];
           _scVlC::P64 = P64[_scVnW::P64 + 80];
           _scVlD::P64 = P64[_scVnW::P64 + 88];
           _scVlE::P64 = P64[_scVnW::P64 + 96];
           _scVlF::P64 = P64[_scVnW::P64 + 104];
           _scVlJ::P64 = P64[_scVnW::P64 + 112];
           _scVlM::P64 = P64[_scVnW::P64 + 120];
           _scVlP::P64 = P64[_scVnW::P64 + 128];
           _scVlS::P64 = P64[_scVnW::P64 + 136];
           _scVlY::P64 = P64[_scVnW::P64 + 144];
           I64[Hp - 144] = sat_scVnV_info;
           P64[Hp - 128] = _scVlq::P64;
           P64[Hp - 120] = _scVlr::P64;
           P64[Hp - 112] = _scVlu::P64;
           P64[Hp - 104] = _scVlv::P64;
           P64[Hp - 96] = _scVlw::P64;
           P64[Hp - 88] = _scVly::P64;
           P64[Hp - 80] = _scVlz::P64;
           P64[Hp - 72] = _scVlB::P64;
           P64[Hp - 64] = _scVlC::P64;
           P64[Hp - 56] = _scVlD::P64;
           P64[Hp - 48] = _scVlE::P64;
           P64[Hp - 40] = _scVlF::P64;
           P64[Hp - 32] = _scVlJ::P64;
           P64[Hp - 24] = _scVlM::P64;
           P64[Hp - 16] = _scVlP::P64;
           P64[Hp - 8] = _scVlS::P64;
           P64[Hp] = _scVlY::P64;
           R3 = Hp - 144;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVnW_info" {
     sat_scVnW_info:
         const sat_scVnW_entry;
         const 17;
         const 13528395363123215;
         const ScWiZ_srt+384;
 },
 sat_scVo0_entry() //  [R1]
         { []
         }
     {offset
       cd7F6: // global
           if ((Sp + -160) < SpLim) (likely: False) goto cd7Fd; else goto cd7Fe;
       cd7Fd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7Fe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 160] = block_cd7uk_info;
           _scVlq::P64 = P64[R1 + 24];
           _scVlr::P64 = P64[R1 + 32];
           _scVlu::P64 = P64[R1 + 40];
           _scVlv::P64 = P64[R1 + 48];
           _scVlw::P64 = P64[R1 + 56];
           _scVly::P64 = P64[R1 + 64];
           _scVlz::P64 = P64[R1 + 72];
           _scVlB::P64 = P64[R1 + 80];
           _scVlC::P64 = P64[R1 + 88];
           _scVlD::P64 = P64[R1 + 96];
           _scVlE::P64 = P64[R1 + 104];
           _scVlF::P64 = P64[R1 + 112];
           _scVlJ::P64 = P64[R1 + 120];
           _scVlM::P64 = P64[R1 + 128];
           _scVlP::P64 = P64[R1 + 136];
           _scVlS::P64 = P64[R1 + 144];
           _scVlY::P64 = P64[R1 + 152];
           R1 = P64[R1 + 16];
           P64[Sp - 152] = _scVlq::P64;
           P64[Sp - 144] = _scVlr::P64;
           P64[Sp - 136] = _scVlu::P64;
           P64[Sp - 128] = _scVlv::P64;
           P64[Sp - 120] = _scVlw::P64;
           P64[Sp - 112] = _scVly::P64;
           P64[Sp - 104] = _scVlz::P64;
           P64[Sp - 96] = _scVlB::P64;
           P64[Sp - 88] = _scVlC::P64;
           P64[Sp - 80] = _scVlD::P64;
           P64[Sp - 72] = _scVlE::P64;
           P64[Sp - 64] = _scVlF::P64;
           P64[Sp - 56] = _scVlJ::P64;
           P64[Sp - 48] = _scVlM::P64;
           P64[Sp - 40] = _scVlP::P64;
           P64[Sp - 32] = _scVlS::P64;
           P64[Sp - 24] = _scVlY::P64;
           Sp = Sp - 160;
           if (R1 & 7 != 0) goto ud7Fl; else goto cd7ul;
       ud7Fl: // global
           call _cd7uk(R1) args: 0, res: 0, upd: 0;
       cd7ul: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVo0_info" {
     sat_scVo0_info:
         const sat_scVo0_entry;
         const 18;
         const 13528395363123215;
         const ScWiZ_srt+384;
 },
 _cd7uk() //  [R1]
         { []
         }
     {offset
       cd7uk: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto cd7Fh; else goto cd7Fg;
       cd7Fh: // global
           HpAlloc = 152;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cd7Fg: // global
           _scVmo::I64 = I64[R1 + 7];
           I64[Hp - 144] = sat_scVnW_info;
           P64[Hp - 128] = P64[Sp + 8];
           P64[Hp - 120] = P64[Sp + 16];
           P64[Hp - 112] = P64[Sp + 24];
           P64[Hp - 104] = P64[Sp + 32];
           P64[Hp - 96] = P64[Sp + 40];
           P64[Hp - 88] = P64[Sp + 48];
           P64[Hp - 80] = P64[Sp + 56];
           P64[Hp - 72] = P64[Sp + 64];
           P64[Hp - 64] = P64[Sp + 72];
           P64[Hp - 56] = P64[Sp + 80];
           P64[Hp - 48] = P64[Sp + 88];
           P64[Hp - 40] = P64[Sp + 96];
           P64[Hp - 32] = P64[Sp + 104];
           P64[Hp - 24] = P64[Sp + 112];
           P64[Hp - 16] = P64[Sp + 120];
           P64[Hp - 8] = P64[Sp + 128];
           P64[Hp] = P64[Sp + 136];
           I64[Sp + 136] = block_cd7Fa_info;
           R3 = Hp - 144;
           R2 = _scVmo::I64;
           Sp = Sp + 136;
           call GHC.Show.$witos_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cd7uk_info" {
     block_cd7uk_info:
         const _cd7uk;
         const 17;
         const 13528395363123230;
         const ScWiZ_srt+384;
 },
 _cd7Fa() //  [R1, R2]
         { []
         }
     {offset
       cd7Fa: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cd7Fk; else goto cd7Fj;
       cd7Fk: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cd7Fj: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd7Fa_info" {
     block_cd7Fa_info:
         const _cd7Fa;
         const 0;
         const 30;
 },
 sat_scVo1_entry() //  [R1]
         { []
         }
     {offset
       cd7Fm: // global
           Hp = Hp + 160;
           if (Hp > HpLim) (likely: False) goto cd7Fq; else goto cd7Fp;
       cd7Fq: // global
           HpAlloc = 160;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7Fp: // global
           _scVlp::P64 = P64[R1 + 16];
           _scVlq::P64 = P64[R1 + 24];
           _scVlr::P64 = P64[R1 + 32];
           _scVlu::P64 = P64[R1 + 40];
           _scVlv::P64 = P64[R1 + 48];
           _scVlw::P64 = P64[R1 + 56];
           _scVly::P64 = P64[R1 + 64];
           _scVlz::P64 = P64[R1 + 72];
           _scVlB::P64 = P64[R1 + 80];
           _scVlC::P64 = P64[R1 + 88];
           _scVlD::P64 = P64[R1 + 96];
           _scVlE::P64 = P64[R1 + 104];
           _scVlF::P64 = P64[R1 + 112];
           _scVlJ::P64 = P64[R1 + 120];
           _scVlM::P64 = P64[R1 + 128];
           _scVlP::P64 = P64[R1 + 136];
           _scVlS::P64 = P64[R1 + 144];
           _scVlY::P64 = P64[R1 + 152];
           I64[Hp - 152] = sat_scVo0_info;
           P64[Hp - 136] = _scVlp::P64;
           P64[Hp - 128] = _scVlq::P64;
           P64[Hp - 120] = _scVlr::P64;
           P64[Hp - 112] = _scVlu::P64;
           P64[Hp - 104] = _scVlv::P64;
           P64[Hp - 96] = _scVlw::P64;
           P64[Hp - 88] = _scVly::P64;
           P64[Hp - 80] = _scVlz::P64;
           P64[Hp - 72] = _scVlB::P64;
           P64[Hp - 64] = _scVlC::P64;
           P64[Hp - 56] = _scVlD::P64;
           P64[Hp - 48] = _scVlE::P64;
           P64[Hp - 40] = _scVlF::P64;
           P64[Hp - 32] = _scVlJ::P64;
           P64[Hp - 24] = _scVlM::P64;
           P64[Hp - 16] = _scVlP::P64;
           P64[Hp - 8] = _scVlS::P64;
           P64[Hp] = _scVlY::P64;
           R3 = Hp - 152;
           R2 = lvl69_rcV6e_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVo1_info" {
     sat_scVo1_info:
         const sat_scVo1_entry;
         const 18;
         const 13528395363123215;
         const ScWiZ_srt+384;
 },
 sat_scVo2_entry() //  [R1]
         { []
         }
     {offset
       cd7Fr: // global
           _scVo2::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd7Fs; else goto cd7Ft;
       cd7Ft: // global
           Hp = Hp + 160;
           if (Hp > HpLim) (likely: False) goto cd7Fv; else goto cd7Fu;
       cd7Fv: // global
           HpAlloc = 160;
           goto cd7Fs;
       cd7Fs: // global
           R1 = _scVo2::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7Fu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVo2::P64;
           _scVlp::P64 = P64[_scVo2::P64 + 16];
           _scVlq::P64 = P64[_scVo2::P64 + 24];
           _scVlr::P64 = P64[_scVo2::P64 + 32];
           _scVlu::P64 = P64[_scVo2::P64 + 40];
           _scVlv::P64 = P64[_scVo2::P64 + 48];
           _scVlw::P64 = P64[_scVo2::P64 + 56];
           _scVly::P64 = P64[_scVo2::P64 + 64];
           _scVlz::P64 = P64[_scVo2::P64 + 72];
           _scVlB::P64 = P64[_scVo2::P64 + 80];
           _scVlC::P64 = P64[_scVo2::P64 + 88];
           _scVlD::P64 = P64[_scVo2::P64 + 96];
           _scVlE::P64 = P64[_scVo2::P64 + 104];
           _scVlF::P64 = P64[_scVo2::P64 + 112];
           _scVlJ::P64 = P64[_scVo2::P64 + 120];
           _scVlM::P64 = P64[_scVo2::P64 + 128];
           _scVlP::P64 = P64[_scVo2::P64 + 136];
           _scVlS::P64 = P64[_scVo2::P64 + 144];
           _scVlY::P64 = P64[_scVo2::P64 + 152];
           I64[Hp - 152] = sat_scVo1_info;
           P64[Hp - 136] = _scVlp::P64;
           P64[Hp - 128] = _scVlq::P64;
           P64[Hp - 120] = _scVlr::P64;
           P64[Hp - 112] = _scVlu::P64;
           P64[Hp - 104] = _scVlv::P64;
           P64[Hp - 96] = _scVlw::P64;
           P64[Hp - 88] = _scVly::P64;
           P64[Hp - 80] = _scVlz::P64;
           P64[Hp - 72] = _scVlB::P64;
           P64[Hp - 64] = _scVlC::P64;
           P64[Hp - 56] = _scVlD::P64;
           P64[Hp - 48] = _scVlE::P64;
           P64[Hp - 40] = _scVlF::P64;
           P64[Hp - 32] = _scVlJ::P64;
           P64[Hp - 24] = _scVlM::P64;
           P64[Hp - 16] = _scVlP::P64;
           P64[Hp - 8] = _scVlS::P64;
           P64[Hp] = _scVlY::P64;
           R3 = Hp - 152;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVo2_info" {
     sat_scVo2_info:
         const sat_scVo2_entry;
         const 18;
         const 13528395363123215;
         const ScWiZ_srt+384;
 },
 sat_scVo6_entry() //  [R1]
         { []
         }
     {offset
       cd7Fw: // global
           if ((Sp + -168) < SpLim) (likely: False) goto cd7FD; else goto cd7FE;
       cd7FD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7FE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 168] = block_cd7u3_info;
           _scVlp::P64 = P64[R1 + 24];
           _scVlq::P64 = P64[R1 + 32];
           _scVlr::P64 = P64[R1 + 40];
           _scVlu::P64 = P64[R1 + 48];
           _scVlv::P64 = P64[R1 + 56];
           _scVlw::P64 = P64[R1 + 64];
           _scVly::P64 = P64[R1 + 72];
           _scVlz::P64 = P64[R1 + 80];
           _scVlB::P64 = P64[R1 + 88];
           _scVlC::P64 = P64[R1 + 96];
           _scVlD::P64 = P64[R1 + 104];
           _scVlE::P64 = P64[R1 + 112];
           _scVlF::P64 = P64[R1 + 120];
           _scVlJ::P64 = P64[R1 + 128];
           _scVlM::P64 = P64[R1 + 136];
           _scVlP::P64 = P64[R1 + 144];
           _scVlS::P64 = P64[R1 + 152];
           _scVlY::P64 = P64[R1 + 160];
           R1 = P64[R1 + 16];
           P64[Sp - 160] = _scVlp::P64;
           P64[Sp - 152] = _scVlq::P64;
           P64[Sp - 144] = _scVlr::P64;
           P64[Sp - 136] = _scVlu::P64;
           P64[Sp - 128] = _scVlv::P64;
           P64[Sp - 120] = _scVlw::P64;
           P64[Sp - 112] = _scVly::P64;
           P64[Sp - 104] = _scVlz::P64;
           P64[Sp - 96] = _scVlB::P64;
           P64[Sp - 88] = _scVlC::P64;
           P64[Sp - 80] = _scVlD::P64;
           P64[Sp - 72] = _scVlE::P64;
           P64[Sp - 64] = _scVlF::P64;
           P64[Sp - 56] = _scVlJ::P64;
           P64[Sp - 48] = _scVlM::P64;
           P64[Sp - 40] = _scVlP::P64;
           P64[Sp - 32] = _scVlS::P64;
           P64[Sp - 24] = _scVlY::P64;
           Sp = Sp - 168;
           if (R1 & 7 != 0) goto ud7FL; else goto cd7u4;
       ud7FL: // global
           call _cd7u3(R1) args: 0, res: 0, upd: 0;
       cd7u4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVo6_info" {
     sat_scVo6_info:
         const sat_scVo6_entry;
         const 19;
         const 13528395363123215;
         const ScWiZ_srt+384;
 },
 _cd7u3() //  [R1]
         { []
         }
     {offset
       cd7u3: // global
           Hp = Hp + 160;
           if (Hp > HpLim) (likely: False) goto cd7FH; else goto cd7FG;
       cd7FH: // global
           HpAlloc = 160;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cd7FG: // global
           _scVml::I64 = I64[R1 + 7];
           I64[Hp - 152] = sat_scVo2_info;
           P64[Hp - 136] = P64[Sp + 8];
           P64[Hp - 128] = P64[Sp + 16];
           P64[Hp - 120] = P64[Sp + 24];
           P64[Hp - 112] = P64[Sp + 32];
           P64[Hp - 104] = P64[Sp + 40];
           P64[Hp - 96] = P64[Sp + 48];
           P64[Hp - 88] = P64[Sp + 56];
           P64[Hp - 80] = P64[Sp + 64];
           P64[Hp - 72] = P64[Sp + 72];
           P64[Hp - 64] = P64[Sp + 80];
           P64[Hp - 56] = P64[Sp + 88];
           P64[Hp - 48] = P64[Sp + 96];
           P64[Hp - 40] = P64[Sp + 104];
           P64[Hp - 32] = P64[Sp + 112];
           P64[Hp - 24] = P64[Sp + 120];
           P64[Hp - 16] = P64[Sp + 128];
           P64[Hp - 8] = P64[Sp + 136];
           P64[Hp] = P64[Sp + 144];
           I64[Sp + 144] = block_cd7FA_info;
           R3 = Hp - 152;
           R2 = _scVml::I64;
           Sp = Sp + 144;
           call GHC.Show.$witos_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cd7u3_info" {
     block_cd7u3_info:
         const _cd7u3;
         const 18;
         const 13528395363123230;
         const ScWiZ_srt+384;
 },
 _cd7FA() //  [R1, R2]
         { []
         }
     {offset
       cd7FA: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cd7FK; else goto cd7FJ;
       cd7FK: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cd7FJ: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd7FA_info" {
     block_cd7FA_info:
         const _cd7FA;
         const 0;
         const 30;
 },
 sat_scVo7_entry() //  [R1]
         { []
         }
     {offset
       cd7FM: // global
           Hp = Hp + 168;
           if (Hp > HpLim) (likely: False) goto cd7FQ; else goto cd7FP;
       cd7FQ: // global
           HpAlloc = 168;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7FP: // global
           _scVlo::P64 = P64[R1 + 16];
           _scVlp::P64 = P64[R1 + 24];
           _scVlq::P64 = P64[R1 + 32];
           _scVlr::P64 = P64[R1 + 40];
           _scVlu::P64 = P64[R1 + 48];
           _scVlv::P64 = P64[R1 + 56];
           _scVlw::P64 = P64[R1 + 64];
           _scVly::P64 = P64[R1 + 72];
           _scVlz::P64 = P64[R1 + 80];
           _scVlB::P64 = P64[R1 + 88];
           _scVlC::P64 = P64[R1 + 96];
           _scVlD::P64 = P64[R1 + 104];
           _scVlE::P64 = P64[R1 + 112];
           _scVlF::P64 = P64[R1 + 120];
           _scVlJ::P64 = P64[R1 + 128];
           _scVlM::P64 = P64[R1 + 136];
           _scVlP::P64 = P64[R1 + 144];
           _scVlS::P64 = P64[R1 + 152];
           _scVlY::P64 = P64[R1 + 160];
           I64[Hp - 160] = sat_scVo6_info;
           P64[Hp - 144] = _scVlo::P64;
           P64[Hp - 136] = _scVlp::P64;
           P64[Hp - 128] = _scVlq::P64;
           P64[Hp - 120] = _scVlr::P64;
           P64[Hp - 112] = _scVlu::P64;
           P64[Hp - 104] = _scVlv::P64;
           P64[Hp - 96] = _scVlw::P64;
           P64[Hp - 88] = _scVly::P64;
           P64[Hp - 80] = _scVlz::P64;
           P64[Hp - 72] = _scVlB::P64;
           P64[Hp - 64] = _scVlC::P64;
           P64[Hp - 56] = _scVlD::P64;
           P64[Hp - 48] = _scVlE::P64;
           P64[Hp - 40] = _scVlF::P64;
           P64[Hp - 32] = _scVlJ::P64;
           P64[Hp - 24] = _scVlM::P64;
           P64[Hp - 16] = _scVlP::P64;
           P64[Hp - 8] = _scVlS::P64;
           P64[Hp] = _scVlY::P64;
           R3 = Hp - 160;
           R2 = lvl68_rcV6d_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVo7_info" {
     sat_scVo7_info:
         const sat_scVo7_entry;
         const 19;
         const 13528395363123215;
         const ScWiZ_srt+384;
 },
 sat_scVo8_entry() //  [R1]
         { []
         }
     {offset
       cd7FR: // global
           _scVo8::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd7FS; else goto cd7FT;
       cd7FT: // global
           Hp = Hp + 168;
           if (Hp > HpLim) (likely: False) goto cd7FV; else goto cd7FU;
       cd7FV: // global
           HpAlloc = 168;
           goto cd7FS;
       cd7FS: // global
           R1 = _scVo8::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7FU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVo8::P64;
           _scVlo::P64 = P64[_scVo8::P64 + 16];
           _scVlp::P64 = P64[_scVo8::P64 + 24];
           _scVlq::P64 = P64[_scVo8::P64 + 32];
           _scVlr::P64 = P64[_scVo8::P64 + 40];
           _scVlu::P64 = P64[_scVo8::P64 + 48];
           _scVlv::P64 = P64[_scVo8::P64 + 56];
           _scVlw::P64 = P64[_scVo8::P64 + 64];
           _scVly::P64 = P64[_scVo8::P64 + 72];
           _scVlz::P64 = P64[_scVo8::P64 + 80];
           _scVlB::P64 = P64[_scVo8::P64 + 88];
           _scVlC::P64 = P64[_scVo8::P64 + 96];
           _scVlD::P64 = P64[_scVo8::P64 + 104];
           _scVlE::P64 = P64[_scVo8::P64 + 112];
           _scVlF::P64 = P64[_scVo8::P64 + 120];
           _scVlJ::P64 = P64[_scVo8::P64 + 128];
           _scVlM::P64 = P64[_scVo8::P64 + 136];
           _scVlP::P64 = P64[_scVo8::P64 + 144];
           _scVlS::P64 = P64[_scVo8::P64 + 152];
           _scVlY::P64 = P64[_scVo8::P64 + 160];
           I64[Hp - 160] = sat_scVo7_info;
           P64[Hp - 144] = _scVlo::P64;
           P64[Hp - 136] = _scVlp::P64;
           P64[Hp - 128] = _scVlq::P64;
           P64[Hp - 120] = _scVlr::P64;
           P64[Hp - 112] = _scVlu::P64;
           P64[Hp - 104] = _scVlv::P64;
           P64[Hp - 96] = _scVlw::P64;
           P64[Hp - 88] = _scVly::P64;
           P64[Hp - 80] = _scVlz::P64;
           P64[Hp - 72] = _scVlB::P64;
           P64[Hp - 64] = _scVlC::P64;
           P64[Hp - 56] = _scVlD::P64;
           P64[Hp - 48] = _scVlE::P64;
           P64[Hp - 40] = _scVlF::P64;
           P64[Hp - 32] = _scVlJ::P64;
           P64[Hp - 24] = _scVlM::P64;
           P64[Hp - 16] = _scVlP::P64;
           P64[Hp - 8] = _scVlS::P64;
           P64[Hp] = _scVlY::P64;
           R3 = Hp - 160;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVo8_info" {
     sat_scVo8_info:
         const sat_scVo8_entry;
         const 19;
         const 13528395363123215;
         const ScWiZ_srt+384;
 },
 sat_scVoc_entry() //  [R1]
         { []
         }
     {offset
       cd7FW: // global
           if ((Sp + -176) < SpLim) (likely: False) goto cd7G3; else goto cd7G4;
       cd7G3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7G4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 176] = block_cd7tM_info;
           _scVlo::P64 = P64[R1 + 24];
           _scVlp::P64 = P64[R1 + 32];
           _scVlq::P64 = P64[R1 + 40];
           _scVlr::P64 = P64[R1 + 48];
           _scVlu::P64 = P64[R1 + 56];
           _scVlv::P64 = P64[R1 + 64];
           _scVlw::P64 = P64[R1 + 72];
           _scVly::P64 = P64[R1 + 80];
           _scVlz::P64 = P64[R1 + 88];
           _scVlB::P64 = P64[R1 + 96];
           _scVlC::P64 = P64[R1 + 104];
           _scVlD::P64 = P64[R1 + 112];
           _scVlE::P64 = P64[R1 + 120];
           _scVlF::P64 = P64[R1 + 128];
           _scVlJ::P64 = P64[R1 + 136];
           _scVlM::P64 = P64[R1 + 144];
           _scVlP::P64 = P64[R1 + 152];
           _scVlS::P64 = P64[R1 + 160];
           _scVlY::P64 = P64[R1 + 168];
           R1 = P64[R1 + 16];
           P64[Sp - 168] = _scVlo::P64;
           P64[Sp - 160] = _scVlp::P64;
           P64[Sp - 152] = _scVlq::P64;
           P64[Sp - 144] = _scVlr::P64;
           P64[Sp - 136] = _scVlu::P64;
           P64[Sp - 128] = _scVlv::P64;
           P64[Sp - 120] = _scVlw::P64;
           P64[Sp - 112] = _scVly::P64;
           P64[Sp - 104] = _scVlz::P64;
           P64[Sp - 96] = _scVlB::P64;
           P64[Sp - 88] = _scVlC::P64;
           P64[Sp - 80] = _scVlD::P64;
           P64[Sp - 72] = _scVlE::P64;
           P64[Sp - 64] = _scVlF::P64;
           P64[Sp - 56] = _scVlJ::P64;
           P64[Sp - 48] = _scVlM::P64;
           P64[Sp - 40] = _scVlP::P64;
           P64[Sp - 32] = _scVlS::P64;
           P64[Sp - 24] = _scVlY::P64;
           Sp = Sp - 176;
           if (R1 & 7 != 0) goto ud7Gb; else goto cd7tN;
       ud7Gb: // global
           call _cd7tM(R1) args: 0, res: 0, upd: 0;
       cd7tN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVoc_info" {
     sat_scVoc_info:
         const sat_scVoc_entry;
         const 20;
         const 13528395363123215;
         const ScWiZ_srt+384;
 },
 _cd7tM() //  [R1]
         { []
         }
     {offset
       cd7tM: // global
           Hp = Hp + 168;
           if (Hp > HpLim) (likely: False) goto cd7G7; else goto cd7G6;
       cd7G7: // global
           HpAlloc = 168;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cd7G6: // global
           _scVmi::I64 = I64[R1 + 7];
           I64[Hp - 160] = sat_scVo8_info;
           P64[Hp - 144] = P64[Sp + 8];
           P64[Hp - 136] = P64[Sp + 16];
           P64[Hp - 128] = P64[Sp + 24];
           P64[Hp - 120] = P64[Sp + 32];
           P64[Hp - 112] = P64[Sp + 40];
           P64[Hp - 104] = P64[Sp + 48];
           P64[Hp - 96] = P64[Sp + 56];
           P64[Hp - 88] = P64[Sp + 64];
           P64[Hp - 80] = P64[Sp + 72];
           P64[Hp - 72] = P64[Sp + 80];
           P64[Hp - 64] = P64[Sp + 88];
           P64[Hp - 56] = P64[Sp + 96];
           P64[Hp - 48] = P64[Sp + 104];
           P64[Hp - 40] = P64[Sp + 112];
           P64[Hp - 32] = P64[Sp + 120];
           P64[Hp - 24] = P64[Sp + 128];
           P64[Hp - 16] = P64[Sp + 136];
           P64[Hp - 8] = P64[Sp + 144];
           P64[Hp] = P64[Sp + 152];
           I64[Sp + 152] = block_cd7G0_info;
           R3 = Hp - 160;
           R2 = _scVmi::I64;
           Sp = Sp + 152;
           call GHC.Show.$witos_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cd7tM_info" {
     block_cd7tM_info:
         const _cd7tM;
         const 19;
         const 13528395363123230;
         const ScWiZ_srt+384;
 },
 _cd7G0() //  [R1, R2]
         { []
         }
     {offset
       cd7G0: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cd7Ga; else goto cd7G9;
       cd7Ga: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cd7G9: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd7G0_info" {
     block_cd7G0_info:
         const _cd7G0;
         const 0;
         const 30;
 },
 sat_scVod_entry() //  [R1]
         { []
         }
     {offset
       cd7Gc: // global
           Hp = Hp + 176;
           if (Hp > HpLim) (likely: False) goto cd7Gg; else goto cd7Gf;
       cd7Gg: // global
           HpAlloc = 176;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7Gf: // global
           _scVln::P64 = P64[R1 + 16];
           _scVlo::P64 = P64[R1 + 24];
           _scVlp::P64 = P64[R1 + 32];
           _scVlq::P64 = P64[R1 + 40];
           _scVlr::P64 = P64[R1 + 48];
           _scVlu::P64 = P64[R1 + 56];
           _scVlv::P64 = P64[R1 + 64];
           _scVlw::P64 = P64[R1 + 72];
           _scVly::P64 = P64[R1 + 80];
           _scVlz::P64 = P64[R1 + 88];
           _scVlB::P64 = P64[R1 + 96];
           _scVlC::P64 = P64[R1 + 104];
           _scVlD::P64 = P64[R1 + 112];
           _scVlE::P64 = P64[R1 + 120];
           _scVlF::P64 = P64[R1 + 128];
           _scVlJ::P64 = P64[R1 + 136];
           _scVlM::P64 = P64[R1 + 144];
           _scVlP::P64 = P64[R1 + 152];
           _scVlS::P64 = P64[R1 + 160];
           _scVlY::P64 = P64[R1 + 168];
           I64[Hp - 168] = sat_scVoc_info;
           P64[Hp - 152] = _scVln::P64;
           P64[Hp - 144] = _scVlo::P64;
           P64[Hp - 136] = _scVlp::P64;
           P64[Hp - 128] = _scVlq::P64;
           P64[Hp - 120] = _scVlr::P64;
           P64[Hp - 112] = _scVlu::P64;
           P64[Hp - 104] = _scVlv::P64;
           P64[Hp - 96] = _scVlw::P64;
           P64[Hp - 88] = _scVly::P64;
           P64[Hp - 80] = _scVlz::P64;
           P64[Hp - 72] = _scVlB::P64;
           P64[Hp - 64] = _scVlC::P64;
           P64[Hp - 56] = _scVlD::P64;
           P64[Hp - 48] = _scVlE::P64;
           P64[Hp - 40] = _scVlF::P64;
           P64[Hp - 32] = _scVlJ::P64;
           P64[Hp - 24] = _scVlM::P64;
           P64[Hp - 16] = _scVlP::P64;
           P64[Hp - 8] = _scVlS::P64;
           P64[Hp] = _scVlY::P64;
           R3 = Hp - 168;
           R2 = lvl67_rcV6c_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVod_info" {
     sat_scVod_info:
         const sat_scVod_entry;
         const 20;
         const 13528395363123215;
         const ScWiZ_srt+384;
 },
 sat_scVoe_entry() //  [R1]
         { []
         }
     {offset
       cd7Gh: // global
           _scVoe::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd7Gi; else goto cd7Gj;
       cd7Gj: // global
           Hp = Hp + 176;
           if (Hp > HpLim) (likely: False) goto cd7Gl; else goto cd7Gk;
       cd7Gl: // global
           HpAlloc = 176;
           goto cd7Gi;
       cd7Gi: // global
           R1 = _scVoe::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7Gk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVoe::P64;
           _scVln::P64 = P64[_scVoe::P64 + 16];
           _scVlo::P64 = P64[_scVoe::P64 + 24];
           _scVlp::P64 = P64[_scVoe::P64 + 32];
           _scVlq::P64 = P64[_scVoe::P64 + 40];
           _scVlr::P64 = P64[_scVoe::P64 + 48];
           _scVlu::P64 = P64[_scVoe::P64 + 56];
           _scVlv::P64 = P64[_scVoe::P64 + 64];
           _scVlw::P64 = P64[_scVoe::P64 + 72];
           _scVly::P64 = P64[_scVoe::P64 + 80];
           _scVlz::P64 = P64[_scVoe::P64 + 88];
           _scVlB::P64 = P64[_scVoe::P64 + 96];
           _scVlC::P64 = P64[_scVoe::P64 + 104];
           _scVlD::P64 = P64[_scVoe::P64 + 112];
           _scVlE::P64 = P64[_scVoe::P64 + 120];
           _scVlF::P64 = P64[_scVoe::P64 + 128];
           _scVlJ::P64 = P64[_scVoe::P64 + 136];
           _scVlM::P64 = P64[_scVoe::P64 + 144];
           _scVlP::P64 = P64[_scVoe::P64 + 152];
           _scVlS::P64 = P64[_scVoe::P64 + 160];
           _scVlY::P64 = P64[_scVoe::P64 + 168];
           I64[Hp - 168] = sat_scVod_info;
           P64[Hp - 152] = _scVln::P64;
           P64[Hp - 144] = _scVlo::P64;
           P64[Hp - 136] = _scVlp::P64;
           P64[Hp - 128] = _scVlq::P64;
           P64[Hp - 120] = _scVlr::P64;
           P64[Hp - 112] = _scVlu::P64;
           P64[Hp - 104] = _scVlv::P64;
           P64[Hp - 96] = _scVlw::P64;
           P64[Hp - 88] = _scVly::P64;
           P64[Hp - 80] = _scVlz::P64;
           P64[Hp - 72] = _scVlB::P64;
           P64[Hp - 64] = _scVlC::P64;
           P64[Hp - 56] = _scVlD::P64;
           P64[Hp - 48] = _scVlE::P64;
           P64[Hp - 40] = _scVlF::P64;
           P64[Hp - 32] = _scVlJ::P64;
           P64[Hp - 24] = _scVlM::P64;
           P64[Hp - 16] = _scVlP::P64;
           P64[Hp - 8] = _scVlS::P64;
           P64[Hp] = _scVlY::P64;
           R3 = Hp - 168;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVoe_info" {
     sat_scVoe_info:
         const sat_scVoe_entry;
         const 20;
         const 13528395363123215;
         const ScWiZ_srt+384;
 },
 sat_scVoi_entry() //  [R1]
         { []
         }
     {offset
       cd7Gm: // global
           if ((Sp + -184) < SpLim) (likely: False) goto cd7Gt; else goto cd7Gu;
       cd7Gt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7Gu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 184] = block_cd7tv_info;
           _scVln::P64 = P64[R1 + 24];
           _scVlo::P64 = P64[R1 + 32];
           _scVlp::P64 = P64[R1 + 40];
           _scVlq::P64 = P64[R1 + 48];
           _scVlr::P64 = P64[R1 + 56];
           _scVlu::P64 = P64[R1 + 64];
           _scVlv::P64 = P64[R1 + 72];
           _scVlw::P64 = P64[R1 + 80];
           _scVly::P64 = P64[R1 + 88];
           _scVlz::P64 = P64[R1 + 96];
           _scVlB::P64 = P64[R1 + 104];
           _scVlC::P64 = P64[R1 + 112];
           _scVlD::P64 = P64[R1 + 120];
           _scVlE::P64 = P64[R1 + 128];
           _scVlF::P64 = P64[R1 + 136];
           _scVlJ::P64 = P64[R1 + 144];
           _scVlM::P64 = P64[R1 + 152];
           _scVlP::P64 = P64[R1 + 160];
           _scVlS::P64 = P64[R1 + 168];
           _scVlY::P64 = P64[R1 + 176];
           R1 = P64[R1 + 16];
           P64[Sp - 176] = _scVln::P64;
           P64[Sp - 168] = _scVlo::P64;
           P64[Sp - 160] = _scVlp::P64;
           P64[Sp - 152] = _scVlq::P64;
           P64[Sp - 144] = _scVlr::P64;
           P64[Sp - 136] = _scVlu::P64;
           P64[Sp - 128] = _scVlv::P64;
           P64[Sp - 120] = _scVlw::P64;
           P64[Sp - 112] = _scVly::P64;
           P64[Sp - 104] = _scVlz::P64;
           P64[Sp - 96] = _scVlB::P64;
           P64[Sp - 88] = _scVlC::P64;
           P64[Sp - 80] = _scVlD::P64;
           P64[Sp - 72] = _scVlE::P64;
           P64[Sp - 64] = _scVlF::P64;
           P64[Sp - 56] = _scVlJ::P64;
           P64[Sp - 48] = _scVlM::P64;
           P64[Sp - 40] = _scVlP::P64;
           P64[Sp - 32] = _scVlS::P64;
           P64[Sp - 24] = _scVlY::P64;
           Sp = Sp - 184;
           if (R1 & 7 != 0) goto ud7GB; else goto cd7tw;
       ud7GB: // global
           call _cd7tv(R1) args: 0, res: 0, upd: 0;
       cd7tw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVoi_info" {
     sat_scVoi_info:
         const sat_scVoi_entry;
         const 21;
         const 13528395363123215;
         const ScWiZ_srt+384;
 },
 _cd7tv() //  [R1]
         { []
         }
     {offset
       cd7tv: // global
           Hp = Hp + 176;
           if (Hp > HpLim) (likely: False) goto cd7Gx; else goto cd7Gw;
       cd7Gx: // global
           HpAlloc = 176;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cd7Gw: // global
           _scVmf::I64 = I64[R1 + 7];
           I64[Hp - 168] = sat_scVoe_info;
           P64[Hp - 152] = P64[Sp + 8];
           P64[Hp - 144] = P64[Sp + 16];
           P64[Hp - 136] = P64[Sp + 24];
           P64[Hp - 128] = P64[Sp + 32];
           P64[Hp - 120] = P64[Sp + 40];
           P64[Hp - 112] = P64[Sp + 48];
           P64[Hp - 104] = P64[Sp + 56];
           P64[Hp - 96] = P64[Sp + 64];
           P64[Hp - 88] = P64[Sp + 72];
           P64[Hp - 80] = P64[Sp + 80];
           P64[Hp - 72] = P64[Sp + 88];
           P64[Hp - 64] = P64[Sp + 96];
           P64[Hp - 56] = P64[Sp + 104];
           P64[Hp - 48] = P64[Sp + 112];
           P64[Hp - 40] = P64[Sp + 120];
           P64[Hp - 32] = P64[Sp + 128];
           P64[Hp - 24] = P64[Sp + 136];
           P64[Hp - 16] = P64[Sp + 144];
           P64[Hp - 8] = P64[Sp + 152];
           P64[Hp] = P64[Sp + 160];
           I64[Sp + 160] = block_cd7Gq_info;
           R3 = Hp - 168;
           R2 = _scVmf::I64;
           Sp = Sp + 160;
           call GHC.Show.$witos_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cd7tv_info" {
     block_cd7tv_info:
         const _cd7tv;
         const 20;
         const 13528395363123230;
         const ScWiZ_srt+384;
 },
 _cd7Gq() //  [R1, R2]
         { []
         }
     {offset
       cd7Gq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cd7GA; else goto cd7Gz;
       cd7GA: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cd7Gz: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd7Gq_info" {
     block_cd7Gq_info:
         const _cd7Gq;
         const 0;
         const 30;
 },
 sat_scVoj_entry() //  [R1]
         { []
         }
     {offset
       cd7GC: // global
           Hp = Hp + 184;
           if (Hp > HpLim) (likely: False) goto cd7GG; else goto cd7GF;
       cd7GG: // global
           HpAlloc = 184;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7GF: // global
           _scVlm::P64 = P64[R1 + 16];
           _scVln::P64 = P64[R1 + 24];
           _scVlo::P64 = P64[R1 + 32];
           _scVlp::P64 = P64[R1 + 40];
           _scVlq::P64 = P64[R1 + 48];
           _scVlr::P64 = P64[R1 + 56];
           _scVlu::P64 = P64[R1 + 64];
           _scVlv::P64 = P64[R1 + 72];
           _scVlw::P64 = P64[R1 + 80];
           _scVly::P64 = P64[R1 + 88];
           _scVlz::P64 = P64[R1 + 96];
           _scVlB::P64 = P64[R1 + 104];
           _scVlC::P64 = P64[R1 + 112];
           _scVlD::P64 = P64[R1 + 120];
           _scVlE::P64 = P64[R1 + 128];
           _scVlF::P64 = P64[R1 + 136];
           _scVlJ::P64 = P64[R1 + 144];
           _scVlM::P64 = P64[R1 + 152];
           _scVlP::P64 = P64[R1 + 160];
           _scVlS::P64 = P64[R1 + 168];
           _scVlY::P64 = P64[R1 + 176];
           I64[Hp - 176] = sat_scVoi_info;
           P64[Hp - 160] = _scVlm::P64;
           P64[Hp - 152] = _scVln::P64;
           P64[Hp - 144] = _scVlo::P64;
           P64[Hp - 136] = _scVlp::P64;
           P64[Hp - 128] = _scVlq::P64;
           P64[Hp - 120] = _scVlr::P64;
           P64[Hp - 112] = _scVlu::P64;
           P64[Hp - 104] = _scVlv::P64;
           P64[Hp - 96] = _scVlw::P64;
           P64[Hp - 88] = _scVly::P64;
           P64[Hp - 80] = _scVlz::P64;
           P64[Hp - 72] = _scVlB::P64;
           P64[Hp - 64] = _scVlC::P64;
           P64[Hp - 56] = _scVlD::P64;
           P64[Hp - 48] = _scVlE::P64;
           P64[Hp - 40] = _scVlF::P64;
           P64[Hp - 32] = _scVlJ::P64;
           P64[Hp - 24] = _scVlM::P64;
           P64[Hp - 16] = _scVlP::P64;
           P64[Hp - 8] = _scVlS::P64;
           P64[Hp] = _scVlY::P64;
           R3 = Hp - 176;
           R2 = lvl66_rcV6b_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVoj_info" {
     sat_scVoj_info:
         const sat_scVoj_entry;
         const 21;
         const 13528395363123215;
         const ScWiZ_srt+384;
 },
 sat_scVok_entry() //  [R1]
         { []
         }
     {offset
       cd7GH: // global
           _scVok::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd7GI; else goto cd7GJ;
       cd7GJ: // global
           Hp = Hp + 184;
           if (Hp > HpLim) (likely: False) goto cd7GL; else goto cd7GK;
       cd7GL: // global
           HpAlloc = 184;
           goto cd7GI;
       cd7GI: // global
           R1 = _scVok::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7GK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVok::P64;
           _scVlm::P64 = P64[_scVok::P64 + 16];
           _scVln::P64 = P64[_scVok::P64 + 24];
           _scVlo::P64 = P64[_scVok::P64 + 32];
           _scVlp::P64 = P64[_scVok::P64 + 40];
           _scVlq::P64 = P64[_scVok::P64 + 48];
           _scVlr::P64 = P64[_scVok::P64 + 56];
           _scVlu::P64 = P64[_scVok::P64 + 64];
           _scVlv::P64 = P64[_scVok::P64 + 72];
           _scVlw::P64 = P64[_scVok::P64 + 80];
           _scVly::P64 = P64[_scVok::P64 + 88];
           _scVlz::P64 = P64[_scVok::P64 + 96];
           _scVlB::P64 = P64[_scVok::P64 + 104];
           _scVlC::P64 = P64[_scVok::P64 + 112];
           _scVlD::P64 = P64[_scVok::P64 + 120];
           _scVlE::P64 = P64[_scVok::P64 + 128];
           _scVlF::P64 = P64[_scVok::P64 + 136];
           _scVlJ::P64 = P64[_scVok::P64 + 144];
           _scVlM::P64 = P64[_scVok::P64 + 152];
           _scVlP::P64 = P64[_scVok::P64 + 160];
           _scVlS::P64 = P64[_scVok::P64 + 168];
           _scVlY::P64 = P64[_scVok::P64 + 176];
           I64[Hp - 176] = sat_scVoj_info;
           P64[Hp - 160] = _scVlm::P64;
           P64[Hp - 152] = _scVln::P64;
           P64[Hp - 144] = _scVlo::P64;
           P64[Hp - 136] = _scVlp::P64;
           P64[Hp - 128] = _scVlq::P64;
           P64[Hp - 120] = _scVlr::P64;
           P64[Hp - 112] = _scVlu::P64;
           P64[Hp - 104] = _scVlv::P64;
           P64[Hp - 96] = _scVlw::P64;
           P64[Hp - 88] = _scVly::P64;
           P64[Hp - 80] = _scVlz::P64;
           P64[Hp - 72] = _scVlB::P64;
           P64[Hp - 64] = _scVlC::P64;
           P64[Hp - 56] = _scVlD::P64;
           P64[Hp - 48] = _scVlE::P64;
           P64[Hp - 40] = _scVlF::P64;
           P64[Hp - 32] = _scVlJ::P64;
           P64[Hp - 24] = _scVlM::P64;
           P64[Hp - 16] = _scVlP::P64;
           P64[Hp - 8] = _scVlS::P64;
           P64[Hp] = _scVlY::P64;
           R3 = Hp - 176;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVok_info" {
     sat_scVok_info:
         const sat_scVok_entry;
         const 21;
         const 13528395363123215;
         const ScWiZ_srt+384;
 },
 sat_scVoo_entry() //  [R1]
         { []
         }
     {offset
       cd7GM: // global
           if ((Sp + -192) < SpLim) (likely: False) goto cd7GT; else goto cd7GU;
       cd7GT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7GU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 192] = block_cd7te_info;
           _scVlm::P64 = P64[R1 + 24];
           _scVln::P64 = P64[R1 + 32];
           _scVlo::P64 = P64[R1 + 40];
           _scVlp::P64 = P64[R1 + 48];
           _scVlq::P64 = P64[R1 + 56];
           _scVlr::P64 = P64[R1 + 64];
           _scVlu::P64 = P64[R1 + 72];
           _scVlv::P64 = P64[R1 + 80];
           _scVlw::P64 = P64[R1 + 88];
           _scVly::P64 = P64[R1 + 96];
           _scVlz::P64 = P64[R1 + 104];
           _scVlB::P64 = P64[R1 + 112];
           _scVlC::P64 = P64[R1 + 120];
           _scVlD::P64 = P64[R1 + 128];
           _scVlE::P64 = P64[R1 + 136];
           _scVlF::P64 = P64[R1 + 144];
           _scVlJ::P64 = P64[R1 + 152];
           _scVlM::P64 = P64[R1 + 160];
           _scVlP::P64 = P64[R1 + 168];
           _scVlS::P64 = P64[R1 + 176];
           _scVlY::P64 = P64[R1 + 184];
           R1 = P64[R1 + 16];
           P64[Sp - 184] = _scVlm::P64;
           P64[Sp - 176] = _scVln::P64;
           P64[Sp - 168] = _scVlo::P64;
           P64[Sp - 160] = _scVlp::P64;
           P64[Sp - 152] = _scVlq::P64;
           P64[Sp - 144] = _scVlr::P64;
           P64[Sp - 136] = _scVlu::P64;
           P64[Sp - 128] = _scVlv::P64;
           P64[Sp - 120] = _scVlw::P64;
           P64[Sp - 112] = _scVly::P64;
           P64[Sp - 104] = _scVlz::P64;
           P64[Sp - 96] = _scVlB::P64;
           P64[Sp - 88] = _scVlC::P64;
           P64[Sp - 80] = _scVlD::P64;
           P64[Sp - 72] = _scVlE::P64;
           P64[Sp - 64] = _scVlF::P64;
           P64[Sp - 56] = _scVlJ::P64;
           P64[Sp - 48] = _scVlM::P64;
           P64[Sp - 40] = _scVlP::P64;
           P64[Sp - 32] = _scVlS::P64;
           P64[Sp - 24] = _scVlY::P64;
           Sp = Sp - 192;
           if (R1 & 7 != 0) goto ud7H1; else goto cd7tf;
       ud7H1: // global
           call _cd7te(R1) args: 0, res: 0, upd: 0;
       cd7tf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVoo_info" {
     sat_scVoo_info:
         const sat_scVoo_entry;
         const 22;
         const 13528395363123215;
         const ScWiZ_srt+384;
 },
 _cd7te() //  [R1]
         { []
         }
     {offset
       cd7te: // global
           Hp = Hp + 184;
           if (Hp > HpLim) (likely: False) goto cd7GX; else goto cd7GW;
       cd7GX: // global
           HpAlloc = 184;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cd7GW: // global
           _scVmc::I64 = I64[R1 + 7];
           I64[Hp - 176] = sat_scVok_info;
           P64[Hp - 160] = P64[Sp + 8];
           P64[Hp - 152] = P64[Sp + 16];
           P64[Hp - 144] = P64[Sp + 24];
           P64[Hp - 136] = P64[Sp + 32];
           P64[Hp - 128] = P64[Sp + 40];
           P64[Hp - 120] = P64[Sp + 48];
           P64[Hp - 112] = P64[Sp + 56];
           P64[Hp - 104] = P64[Sp + 64];
           P64[Hp - 96] = P64[Sp + 72];
           P64[Hp - 88] = P64[Sp + 80];
           P64[Hp - 80] = P64[Sp + 88];
           P64[Hp - 72] = P64[Sp + 96];
           P64[Hp - 64] = P64[Sp + 104];
           P64[Hp - 56] = P64[Sp + 112];
           P64[Hp - 48] = P64[Sp + 120];
           P64[Hp - 40] = P64[Sp + 128];
           P64[Hp - 32] = P64[Sp + 136];
           P64[Hp - 24] = P64[Sp + 144];
           P64[Hp - 16] = P64[Sp + 152];
           P64[Hp - 8] = P64[Sp + 160];
           P64[Hp] = P64[Sp + 168];
           I64[Sp + 168] = block_cd7GQ_info;
           R3 = Hp - 176;
           R2 = _scVmc::I64;
           Sp = Sp + 168;
           call GHC.Show.$witos_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cd7te_info" {
     block_cd7te_info:
         const _cd7te;
         const 21;
         const 13528395363123230;
         const ScWiZ_srt+384;
 },
 _cd7GQ() //  [R1, R2]
         { []
         }
     {offset
       cd7GQ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cd7H0; else goto cd7GZ;
       cd7H0: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cd7GZ: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd7GQ_info" {
     block_cd7GQ_info:
         const _cd7GQ;
         const 0;
         const 30;
 },
 sat_scVop_entry() //  [R1]
         { []
         }
     {offset
       cd7H2: // global
           Hp = Hp + 192;
           if (Hp > HpLim) (likely: False) goto cd7H6; else goto cd7H5;
       cd7H6: // global
           HpAlloc = 192;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7H5: // global
           _scVll::P64 = P64[R1 + 16];
           _scVlm::P64 = P64[R1 + 24];
           _scVln::P64 = P64[R1 + 32];
           _scVlo::P64 = P64[R1 + 40];
           _scVlp::P64 = P64[R1 + 48];
           _scVlq::P64 = P64[R1 + 56];
           _scVlr::P64 = P64[R1 + 64];
           _scVlu::P64 = P64[R1 + 72];
           _scVlv::P64 = P64[R1 + 80];
           _scVlw::P64 = P64[R1 + 88];
           _scVly::P64 = P64[R1 + 96];
           _scVlz::P64 = P64[R1 + 104];
           _scVlB::P64 = P64[R1 + 112];
           _scVlC::P64 = P64[R1 + 120];
           _scVlD::P64 = P64[R1 + 128];
           _scVlE::P64 = P64[R1 + 136];
           _scVlF::P64 = P64[R1 + 144];
           _scVlJ::P64 = P64[R1 + 152];
           _scVlM::P64 = P64[R1 + 160];
           _scVlP::P64 = P64[R1 + 168];
           _scVlS::P64 = P64[R1 + 176];
           _scVlY::P64 = P64[R1 + 184];
           I64[Hp - 184] = sat_scVoo_info;
           P64[Hp - 168] = _scVll::P64;
           P64[Hp - 160] = _scVlm::P64;
           P64[Hp - 152] = _scVln::P64;
           P64[Hp - 144] = _scVlo::P64;
           P64[Hp - 136] = _scVlp::P64;
           P64[Hp - 128] = _scVlq::P64;
           P64[Hp - 120] = _scVlr::P64;
           P64[Hp - 112] = _scVlu::P64;
           P64[Hp - 104] = _scVlv::P64;
           P64[Hp - 96] = _scVlw::P64;
           P64[Hp - 88] = _scVly::P64;
           P64[Hp - 80] = _scVlz::P64;
           P64[Hp - 72] = _scVlB::P64;
           P64[Hp - 64] = _scVlC::P64;
           P64[Hp - 56] = _scVlD::P64;
           P64[Hp - 48] = _scVlE::P64;
           P64[Hp - 40] = _scVlF::P64;
           P64[Hp - 32] = _scVlJ::P64;
           P64[Hp - 24] = _scVlM::P64;
           P64[Hp - 16] = _scVlP::P64;
           P64[Hp - 8] = _scVlS::P64;
           P64[Hp] = _scVlY::P64;
           R3 = Hp - 184;
           R2 = lvl65_rcV6a_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVop_info" {
     sat_scVop_info:
         const sat_scVop_entry;
         const 22;
         const 13528395363123215;
         const ScWiZ_srt+384;
 },
 sat_scVoq_entry() //  [R1]
         { []
         }
     {offset
       cd7H7: // global
           _scVoq::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd7H8; else goto cd7H9;
       cd7H9: // global
           Hp = Hp + 192;
           if (Hp > HpLim) (likely: False) goto cd7Hb; else goto cd7Ha;
       cd7Hb: // global
           HpAlloc = 192;
           goto cd7H8;
       cd7H8: // global
           R1 = _scVoq::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7Ha: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVoq::P64;
           _scVll::P64 = P64[_scVoq::P64 + 16];
           _scVlm::P64 = P64[_scVoq::P64 + 24];
           _scVln::P64 = P64[_scVoq::P64 + 32];
           _scVlo::P64 = P64[_scVoq::P64 + 40];
           _scVlp::P64 = P64[_scVoq::P64 + 48];
           _scVlq::P64 = P64[_scVoq::P64 + 56];
           _scVlr::P64 = P64[_scVoq::P64 + 64];
           _scVlu::P64 = P64[_scVoq::P64 + 72];
           _scVlv::P64 = P64[_scVoq::P64 + 80];
           _scVlw::P64 = P64[_scVoq::P64 + 88];
           _scVly::P64 = P64[_scVoq::P64 + 96];
           _scVlz::P64 = P64[_scVoq::P64 + 104];
           _scVlB::P64 = P64[_scVoq::P64 + 112];
           _scVlC::P64 = P64[_scVoq::P64 + 120];
           _scVlD::P64 = P64[_scVoq::P64 + 128];
           _scVlE::P64 = P64[_scVoq::P64 + 136];
           _scVlF::P64 = P64[_scVoq::P64 + 144];
           _scVlJ::P64 = P64[_scVoq::P64 + 152];
           _scVlM::P64 = P64[_scVoq::P64 + 160];
           _scVlP::P64 = P64[_scVoq::P64 + 168];
           _scVlS::P64 = P64[_scVoq::P64 + 176];
           _scVlY::P64 = P64[_scVoq::P64 + 184];
           I64[Hp - 184] = sat_scVop_info;
           P64[Hp - 168] = _scVll::P64;
           P64[Hp - 160] = _scVlm::P64;
           P64[Hp - 152] = _scVln::P64;
           P64[Hp - 144] = _scVlo::P64;
           P64[Hp - 136] = _scVlp::P64;
           P64[Hp - 128] = _scVlq::P64;
           P64[Hp - 120] = _scVlr::P64;
           P64[Hp - 112] = _scVlu::P64;
           P64[Hp - 104] = _scVlv::P64;
           P64[Hp - 96] = _scVlw::P64;
           P64[Hp - 88] = _scVly::P64;
           P64[Hp - 80] = _scVlz::P64;
           P64[Hp - 72] = _scVlB::P64;
           P64[Hp - 64] = _scVlC::P64;
           P64[Hp - 56] = _scVlD::P64;
           P64[Hp - 48] = _scVlE::P64;
           P64[Hp - 40] = _scVlF::P64;
           P64[Hp - 32] = _scVlJ::P64;
           P64[Hp - 24] = _scVlM::P64;
           P64[Hp - 16] = _scVlP::P64;
           P64[Hp - 8] = _scVlS::P64;
           P64[Hp] = _scVlY::P64;
           R3 = Hp - 184;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVoq_info" {
     sat_scVoq_info:
         const sat_scVoq_entry;
         const 22;
         const 13528395363123215;
         const ScWiZ_srt+384;
 },
 sat_scVou_entry() //  [R1]
         { []
         }
     {offset
       cd7Hc: // global
           if ((Sp + -200) < SpLim) (likely: False) goto cd7Hj; else goto cd7Hk;
       cd7Hj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7Hk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 200] = block_cd7sX_info;
           _scVll::P64 = P64[R1 + 24];
           _scVlm::P64 = P64[R1 + 32];
           _scVln::P64 = P64[R1 + 40];
           _scVlo::P64 = P64[R1 + 48];
           _scVlp::P64 = P64[R1 + 56];
           _scVlq::P64 = P64[R1 + 64];
           _scVlr::P64 = P64[R1 + 72];
           _scVlu::P64 = P64[R1 + 80];
           _scVlv::P64 = P64[R1 + 88];
           _scVlw::P64 = P64[R1 + 96];
           _scVly::P64 = P64[R1 + 104];
           _scVlz::P64 = P64[R1 + 112];
           _scVlB::P64 = P64[R1 + 120];
           _scVlC::P64 = P64[R1 + 128];
           _scVlD::P64 = P64[R1 + 136];
           _scVlE::P64 = P64[R1 + 144];
           _scVlF::P64 = P64[R1 + 152];
           _scVlJ::P64 = P64[R1 + 160];
           _scVlM::P64 = P64[R1 + 168];
           _scVlP::P64 = P64[R1 + 176];
           _scVlS::P64 = P64[R1 + 184];
           _scVlY::P64 = P64[R1 + 192];
           R1 = P64[R1 + 16];
           P64[Sp - 192] = _scVll::P64;
           P64[Sp - 184] = _scVlm::P64;
           P64[Sp - 176] = _scVln::P64;
           P64[Sp - 168] = _scVlo::P64;
           P64[Sp - 160] = _scVlp::P64;
           P64[Sp - 152] = _scVlq::P64;
           P64[Sp - 144] = _scVlr::P64;
           P64[Sp - 136] = _scVlu::P64;
           P64[Sp - 128] = _scVlv::P64;
           P64[Sp - 120] = _scVlw::P64;
           P64[Sp - 112] = _scVly::P64;
           P64[Sp - 104] = _scVlz::P64;
           P64[Sp - 96] = _scVlB::P64;
           P64[Sp - 88] = _scVlC::P64;
           P64[Sp - 80] = _scVlD::P64;
           P64[Sp - 72] = _scVlE::P64;
           P64[Sp - 64] = _scVlF::P64;
           P64[Sp - 56] = _scVlJ::P64;
           P64[Sp - 48] = _scVlM::P64;
           P64[Sp - 40] = _scVlP::P64;
           P64[Sp - 32] = _scVlS::P64;
           P64[Sp - 24] = _scVlY::P64;
           Sp = Sp - 200;
           if (R1 & 7 != 0) goto ud7Hr; else goto cd7sY;
       ud7Hr: // global
           call _cd7sX(R1) args: 0, res: 0, upd: 0;
       cd7sY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVou_info" {
     sat_scVou_info:
         const sat_scVou_entry;
         const 23;
         const 13528395363123215;
         const ScWiZ_srt+384;
 },
 _cd7sX() //  [R1]
         { []
         }
     {offset
       cd7sX: // global
           Hp = Hp + 192;
           if (Hp > HpLim) (likely: False) goto cd7Hn; else goto cd7Hm;
       cd7Hn: // global
           HpAlloc = 192;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cd7Hm: // global
           _scVm9::I64 = I64[R1 + 7];
           I64[Hp - 184] = sat_scVoq_info;
           P64[Hp - 168] = P64[Sp + 8];
           P64[Hp - 160] = P64[Sp + 16];
           P64[Hp - 152] = P64[Sp + 24];
           P64[Hp - 144] = P64[Sp + 32];
           P64[Hp - 136] = P64[Sp + 40];
           P64[Hp - 128] = P64[Sp + 48];
           P64[Hp - 120] = P64[Sp + 56];
           P64[Hp - 112] = P64[Sp + 64];
           P64[Hp - 104] = P64[Sp + 72];
           P64[Hp - 96] = P64[Sp + 80];
           P64[Hp - 88] = P64[Sp + 88];
           P64[Hp - 80] = P64[Sp + 96];
           P64[Hp - 72] = P64[Sp + 104];
           P64[Hp - 64] = P64[Sp + 112];
           P64[Hp - 56] = P64[Sp + 120];
           P64[Hp - 48] = P64[Sp + 128];
           P64[Hp - 40] = P64[Sp + 136];
           P64[Hp - 32] = P64[Sp + 144];
           P64[Hp - 24] = P64[Sp + 152];
           P64[Hp - 16] = P64[Sp + 160];
           P64[Hp - 8] = P64[Sp + 168];
           P64[Hp] = P64[Sp + 176];
           I64[Sp + 176] = block_cd7Hg_info;
           R3 = Hp - 184;
           R2 = _scVm9::I64;
           Sp = Sp + 176;
           call GHC.Show.$witos_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cd7sX_info" {
     block_cd7sX_info:
         const _cd7sX;
         const 22;
         const 13528395363123230;
         const ScWiZ_srt+384;
 },
 _cd7Hg() //  [R1, R2]
         { []
         }
     {offset
       cd7Hg: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cd7Hq; else goto cd7Hp;
       cd7Hq: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cd7Hp: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd7Hg_info" {
     block_cd7Hg_info:
         const _cd7Hg;
         const 0;
         const 30;
 },
 sat_scVov_entry() //  [R1]
         { []
         }
     {offset
       cd7Hs: // global
           Hp = Hp + 200;
           if (Hp > HpLim) (likely: False) goto cd7Hw; else goto cd7Hv;
       cd7Hw: // global
           HpAlloc = 200;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7Hv: // global
           _scVlk::P64 = P64[R1 + 16];
           _scVll::P64 = P64[R1 + 24];
           _scVlm::P64 = P64[R1 + 32];
           _scVln::P64 = P64[R1 + 40];
           _scVlo::P64 = P64[R1 + 48];
           _scVlp::P64 = P64[R1 + 56];
           _scVlq::P64 = P64[R1 + 64];
           _scVlr::P64 = P64[R1 + 72];
           _scVlu::P64 = P64[R1 + 80];
           _scVlv::P64 = P64[R1 + 88];
           _scVlw::P64 = P64[R1 + 96];
           _scVly::P64 = P64[R1 + 104];
           _scVlz::P64 = P64[R1 + 112];
           _scVlB::P64 = P64[R1 + 120];
           _scVlC::P64 = P64[R1 + 128];
           _scVlD::P64 = P64[R1 + 136];
           _scVlE::P64 = P64[R1 + 144];
           _scVlF::P64 = P64[R1 + 152];
           _scVlJ::P64 = P64[R1 + 160];
           _scVlM::P64 = P64[R1 + 168];
           _scVlP::P64 = P64[R1 + 176];
           _scVlS::P64 = P64[R1 + 184];
           _scVlY::P64 = P64[R1 + 192];
           I64[Hp - 192] = sat_scVou_info;
           P64[Hp - 176] = _scVlk::P64;
           P64[Hp - 168] = _scVll::P64;
           P64[Hp - 160] = _scVlm::P64;
           P64[Hp - 152] = _scVln::P64;
           P64[Hp - 144] = _scVlo::P64;
           P64[Hp - 136] = _scVlp::P64;
           P64[Hp - 128] = _scVlq::P64;
           P64[Hp - 120] = _scVlr::P64;
           P64[Hp - 112] = _scVlu::P64;
           P64[Hp - 104] = _scVlv::P64;
           P64[Hp - 96] = _scVlw::P64;
           P64[Hp - 88] = _scVly::P64;
           P64[Hp - 80] = _scVlz::P64;
           P64[Hp - 72] = _scVlB::P64;
           P64[Hp - 64] = _scVlC::P64;
           P64[Hp - 56] = _scVlD::P64;
           P64[Hp - 48] = _scVlE::P64;
           P64[Hp - 40] = _scVlF::P64;
           P64[Hp - 32] = _scVlJ::P64;
           P64[Hp - 24] = _scVlM::P64;
           P64[Hp - 16] = _scVlP::P64;
           P64[Hp - 8] = _scVlS::P64;
           P64[Hp] = _scVlY::P64;
           R3 = Hp - 192;
           R2 = lvl64_rcV69_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVov_info" {
     sat_scVov_info:
         const sat_scVov_entry;
         const 23;
         const 13528395363123215;
         const ScWiZ_srt+384;
 },
 sat_scVow_entry() //  [R1]
         { []
         }
     {offset
       cd7Hx: // global
           _scVow::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd7Hy; else goto cd7Hz;
       cd7Hz: // global
           Hp = Hp + 200;
           if (Hp > HpLim) (likely: False) goto cd7HB; else goto cd7HA;
       cd7HB: // global
           HpAlloc = 200;
           goto cd7Hy;
       cd7Hy: // global
           R1 = _scVow::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7HA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVow::P64;
           _scVlk::P64 = P64[_scVow::P64 + 16];
           _scVll::P64 = P64[_scVow::P64 + 24];
           _scVlm::P64 = P64[_scVow::P64 + 32];
           _scVln::P64 = P64[_scVow::P64 + 40];
           _scVlo::P64 = P64[_scVow::P64 + 48];
           _scVlp::P64 = P64[_scVow::P64 + 56];
           _scVlq::P64 = P64[_scVow::P64 + 64];
           _scVlr::P64 = P64[_scVow::P64 + 72];
           _scVlu::P64 = P64[_scVow::P64 + 80];
           _scVlv::P64 = P64[_scVow::P64 + 88];
           _scVlw::P64 = P64[_scVow::P64 + 96];
           _scVly::P64 = P64[_scVow::P64 + 104];
           _scVlz::P64 = P64[_scVow::P64 + 112];
           _scVlB::P64 = P64[_scVow::P64 + 120];
           _scVlC::P64 = P64[_scVow::P64 + 128];
           _scVlD::P64 = P64[_scVow::P64 + 136];
           _scVlE::P64 = P64[_scVow::P64 + 144];
           _scVlF::P64 = P64[_scVow::P64 + 152];
           _scVlJ::P64 = P64[_scVow::P64 + 160];
           _scVlM::P64 = P64[_scVow::P64 + 168];
           _scVlP::P64 = P64[_scVow::P64 + 176];
           _scVlS::P64 = P64[_scVow::P64 + 184];
           _scVlY::P64 = P64[_scVow::P64 + 192];
           I64[Hp - 192] = sat_scVov_info;
           P64[Hp - 176] = _scVlk::P64;
           P64[Hp - 168] = _scVll::P64;
           P64[Hp - 160] = _scVlm::P64;
           P64[Hp - 152] = _scVln::P64;
           P64[Hp - 144] = _scVlo::P64;
           P64[Hp - 136] = _scVlp::P64;
           P64[Hp - 128] = _scVlq::P64;
           P64[Hp - 120] = _scVlr::P64;
           P64[Hp - 112] = _scVlu::P64;
           P64[Hp - 104] = _scVlv::P64;
           P64[Hp - 96] = _scVlw::P64;
           P64[Hp - 88] = _scVly::P64;
           P64[Hp - 80] = _scVlz::P64;
           P64[Hp - 72] = _scVlB::P64;
           P64[Hp - 64] = _scVlC::P64;
           P64[Hp - 56] = _scVlD::P64;
           P64[Hp - 48] = _scVlE::P64;
           P64[Hp - 40] = _scVlF::P64;
           P64[Hp - 32] = _scVlJ::P64;
           P64[Hp - 24] = _scVlM::P64;
           P64[Hp - 16] = _scVlP::P64;
           P64[Hp - 8] = _scVlS::P64;
           P64[Hp] = _scVlY::P64;
           R3 = Hp - 192;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVow_info" {
     sat_scVow_info:
         const sat_scVow_entry;
         const 23;
         const 13528395363123215;
         const ScWiZ_srt+384;
 },
 sat_scVoA_entry() //  [R1]
         { []
         }
     {offset
       cd7HC: // global
           if ((Sp + -208) < SpLim) (likely: False) goto cd7HJ; else goto cd7HK;
       cd7HJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7HK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 208] = block_cd7sG_info;
           _scVlk::P64 = P64[R1 + 24];
           _scVll::P64 = P64[R1 + 32];
           _scVlm::P64 = P64[R1 + 40];
           _scVln::P64 = P64[R1 + 48];
           _scVlo::P64 = P64[R1 + 56];
           _scVlp::P64 = P64[R1 + 64];
           _scVlq::P64 = P64[R1 + 72];
           _scVlr::P64 = P64[R1 + 80];
           _scVlu::P64 = P64[R1 + 88];
           _scVlv::P64 = P64[R1 + 96];
           _scVlw::P64 = P64[R1 + 104];
           _scVly::P64 = P64[R1 + 112];
           _scVlz::P64 = P64[R1 + 120];
           _scVlB::P64 = P64[R1 + 128];
           _scVlC::P64 = P64[R1 + 136];
           _scVlD::P64 = P64[R1 + 144];
           _scVlE::P64 = P64[R1 + 152];
           _scVlF::P64 = P64[R1 + 160];
           _scVlJ::P64 = P64[R1 + 168];
           _scVlM::P64 = P64[R1 + 176];
           _scVlP::P64 = P64[R1 + 184];
           _scVlS::P64 = P64[R1 + 192];
           _scVlY::P64 = P64[R1 + 200];
           R1 = P64[R1 + 16];
           P64[Sp - 200] = _scVlk::P64;
           P64[Sp - 192] = _scVll::P64;
           P64[Sp - 184] = _scVlm::P64;
           P64[Sp - 176] = _scVln::P64;
           P64[Sp - 168] = _scVlo::P64;
           P64[Sp - 160] = _scVlp::P64;
           P64[Sp - 152] = _scVlq::P64;
           P64[Sp - 144] = _scVlr::P64;
           P64[Sp - 136] = _scVlu::P64;
           P64[Sp - 128] = _scVlv::P64;
           P64[Sp - 120] = _scVlw::P64;
           P64[Sp - 112] = _scVly::P64;
           P64[Sp - 104] = _scVlz::P64;
           P64[Sp - 96] = _scVlB::P64;
           P64[Sp - 88] = _scVlC::P64;
           P64[Sp - 80] = _scVlD::P64;
           P64[Sp - 72] = _scVlE::P64;
           P64[Sp - 64] = _scVlF::P64;
           P64[Sp - 56] = _scVlJ::P64;
           P64[Sp - 48] = _scVlM::P64;
           P64[Sp - 40] = _scVlP::P64;
           P64[Sp - 32] = _scVlS::P64;
           P64[Sp - 24] = _scVlY::P64;
           Sp = Sp - 208;
           if (R1 & 7 != 0) goto ud7HR; else goto cd7sH;
       ud7HR: // global
           call _cd7sG(R1) args: 0, res: 0, upd: 0;
       cd7sH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVoA_info" {
     sat_scVoA_info:
         const sat_scVoA_entry;
         const 24;
         const 13528395363123215;
         const ScWiZ_srt+384;
 },
 _cd7sG() //  [R1]
         { []
         }
     {offset
       cd7sG: // global
           Hp = Hp + 200;
           if (Hp > HpLim) (likely: False) goto cd7HN; else goto cd7HM;
       cd7HN: // global
           HpAlloc = 200;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cd7HM: // global
           _scVm6::I64 = I64[R1 + 7];
           I64[Hp - 192] = sat_scVow_info;
           P64[Hp - 176] = P64[Sp + 8];
           P64[Hp - 168] = P64[Sp + 16];
           P64[Hp - 160] = P64[Sp + 24];
           P64[Hp - 152] = P64[Sp + 32];
           P64[Hp - 144] = P64[Sp + 40];
           P64[Hp - 136] = P64[Sp + 48];
           P64[Hp - 128] = P64[Sp + 56];
           P64[Hp - 120] = P64[Sp + 64];
           P64[Hp - 112] = P64[Sp + 72];
           P64[Hp - 104] = P64[Sp + 80];
           P64[Hp - 96] = P64[Sp + 88];
           P64[Hp - 88] = P64[Sp + 96];
           P64[Hp - 80] = P64[Sp + 104];
           P64[Hp - 72] = P64[Sp + 112];
           P64[Hp - 64] = P64[Sp + 120];
           P64[Hp - 56] = P64[Sp + 128];
           P64[Hp - 48] = P64[Sp + 136];
           P64[Hp - 40] = P64[Sp + 144];
           P64[Hp - 32] = P64[Sp + 152];
           P64[Hp - 24] = P64[Sp + 160];
           P64[Hp - 16] = P64[Sp + 168];
           P64[Hp - 8] = P64[Sp + 176];
           P64[Hp] = P64[Sp + 184];
           I64[Sp + 184] = block_cd7HG_info;
           R3 = Hp - 192;
           R2 = _scVm6::I64;
           Sp = Sp + 184;
           call GHC.Show.$witos_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cd7sG_info" {
     block_cd7sG_info:
         const _cd7sG;
         const 23;
         const 13528395363123230;
         const ScWiZ_srt+384;
 },
 _cd7HG() //  [R1, R2]
         { []
         }
     {offset
       cd7HG: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cd7HQ; else goto cd7HP;
       cd7HQ: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cd7HP: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd7HG_info" {
     block_cd7HG_info:
         const _cd7HG;
         const 0;
         const 30;
 },
 sat_scVoB_entry() //  [R1]
         { []
         }
     {offset
       cd7HS: // global
           Hp = Hp + 208;
           if (Hp > HpLim) (likely: False) goto cd7HW; else goto cd7HV;
       cd7HW: // global
           HpAlloc = 208;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7HV: // global
           _scVlj::P64 = P64[R1 + 16];
           _scVlk::P64 = P64[R1 + 24];
           _scVll::P64 = P64[R1 + 32];
           _scVlm::P64 = P64[R1 + 40];
           _scVln::P64 = P64[R1 + 48];
           _scVlo::P64 = P64[R1 + 56];
           _scVlp::P64 = P64[R1 + 64];
           _scVlq::P64 = P64[R1 + 72];
           _scVlr::P64 = P64[R1 + 80];
           _scVlu::P64 = P64[R1 + 88];
           _scVlv::P64 = P64[R1 + 96];
           _scVlw::P64 = P64[R1 + 104];
           _scVly::P64 = P64[R1 + 112];
           _scVlz::P64 = P64[R1 + 120];
           _scVlB::P64 = P64[R1 + 128];
           _scVlC::P64 = P64[R1 + 136];
           _scVlD::P64 = P64[R1 + 144];
           _scVlE::P64 = P64[R1 + 152];
           _scVlF::P64 = P64[R1 + 160];
           _scVlJ::P64 = P64[R1 + 168];
           _scVlM::P64 = P64[R1 + 176];
           _scVlP::P64 = P64[R1 + 184];
           _scVlS::P64 = P64[R1 + 192];
           _scVlY::P64 = P64[R1 + 200];
           I64[Hp - 200] = sat_scVoA_info;
           P64[Hp - 184] = _scVlj::P64;
           P64[Hp - 176] = _scVlk::P64;
           P64[Hp - 168] = _scVll::P64;
           P64[Hp - 160] = _scVlm::P64;
           P64[Hp - 152] = _scVln::P64;
           P64[Hp - 144] = _scVlo::P64;
           P64[Hp - 136] = _scVlp::P64;
           P64[Hp - 128] = _scVlq::P64;
           P64[Hp - 120] = _scVlr::P64;
           P64[Hp - 112] = _scVlu::P64;
           P64[Hp - 104] = _scVlv::P64;
           P64[Hp - 96] = _scVlw::P64;
           P64[Hp - 88] = _scVly::P64;
           P64[Hp - 80] = _scVlz::P64;
           P64[Hp - 72] = _scVlB::P64;
           P64[Hp - 64] = _scVlC::P64;
           P64[Hp - 56] = _scVlD::P64;
           P64[Hp - 48] = _scVlE::P64;
           P64[Hp - 40] = _scVlF::P64;
           P64[Hp - 32] = _scVlJ::P64;
           P64[Hp - 24] = _scVlM::P64;
           P64[Hp - 16] = _scVlP::P64;
           P64[Hp - 8] = _scVlS::P64;
           P64[Hp] = _scVlY::P64;
           R3 = Hp - 200;
           R2 = lvl63_rcV68_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVoB_info" {
     sat_scVoB_info:
         const sat_scVoB_entry;
         const 24;
         const 13528395363123215;
         const ScWiZ_srt+384;
 },
 sat_scVoC_entry() //  [R1]
         { []
         }
     {offset
       cd7HX: // global
           _scVoC::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd7HY; else goto cd7HZ;
       cd7HZ: // global
           Hp = Hp + 208;
           if (Hp > HpLim) (likely: False) goto cd7I1; else goto cd7I0;
       cd7I1: // global
           HpAlloc = 208;
           goto cd7HY;
       cd7HY: // global
           R1 = _scVoC::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7I0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVoC::P64;
           _scVlj::P64 = P64[_scVoC::P64 + 16];
           _scVlk::P64 = P64[_scVoC::P64 + 24];
           _scVll::P64 = P64[_scVoC::P64 + 32];
           _scVlm::P64 = P64[_scVoC::P64 + 40];
           _scVln::P64 = P64[_scVoC::P64 + 48];
           _scVlo::P64 = P64[_scVoC::P64 + 56];
           _scVlp::P64 = P64[_scVoC::P64 + 64];
           _scVlq::P64 = P64[_scVoC::P64 + 72];
           _scVlr::P64 = P64[_scVoC::P64 + 80];
           _scVlu::P64 = P64[_scVoC::P64 + 88];
           _scVlv::P64 = P64[_scVoC::P64 + 96];
           _scVlw::P64 = P64[_scVoC::P64 + 104];
           _scVly::P64 = P64[_scVoC::P64 + 112];
           _scVlz::P64 = P64[_scVoC::P64 + 120];
           _scVlB::P64 = P64[_scVoC::P64 + 128];
           _scVlC::P64 = P64[_scVoC::P64 + 136];
           _scVlD::P64 = P64[_scVoC::P64 + 144];
           _scVlE::P64 = P64[_scVoC::P64 + 152];
           _scVlF::P64 = P64[_scVoC::P64 + 160];
           _scVlJ::P64 = P64[_scVoC::P64 + 168];
           _scVlM::P64 = P64[_scVoC::P64 + 176];
           _scVlP::P64 = P64[_scVoC::P64 + 184];
           _scVlS::P64 = P64[_scVoC::P64 + 192];
           _scVlY::P64 = P64[_scVoC::P64 + 200];
           I64[Hp - 200] = sat_scVoB_info;
           P64[Hp - 184] = _scVlj::P64;
           P64[Hp - 176] = _scVlk::P64;
           P64[Hp - 168] = _scVll::P64;
           P64[Hp - 160] = _scVlm::P64;
           P64[Hp - 152] = _scVln::P64;
           P64[Hp - 144] = _scVlo::P64;
           P64[Hp - 136] = _scVlp::P64;
           P64[Hp - 128] = _scVlq::P64;
           P64[Hp - 120] = _scVlr::P64;
           P64[Hp - 112] = _scVlu::P64;
           P64[Hp - 104] = _scVlv::P64;
           P64[Hp - 96] = _scVlw::P64;
           P64[Hp - 88] = _scVly::P64;
           P64[Hp - 80] = _scVlz::P64;
           P64[Hp - 72] = _scVlB::P64;
           P64[Hp - 64] = _scVlC::P64;
           P64[Hp - 56] = _scVlD::P64;
           P64[Hp - 48] = _scVlE::P64;
           P64[Hp - 40] = _scVlF::P64;
           P64[Hp - 32] = _scVlJ::P64;
           P64[Hp - 24] = _scVlM::P64;
           P64[Hp - 16] = _scVlP::P64;
           P64[Hp - 8] = _scVlS::P64;
           P64[Hp] = _scVlY::P64;
           R3 = Hp - 200;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVoC_info" {
     sat_scVoC_info:
         const sat_scVoC_entry;
         const 24;
         const 13528395363123215;
         const ScWiZ_srt+384;
 },
 sat_scVoG_entry() //  [R1]
         { []
         }
     {offset
       cd7I2: // global
           if ((Sp + -216) < SpLim) (likely: False) goto cd7I9; else goto cd7Ia;
       cd7I9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7Ia: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 216] = block_cd7sp_info;
           _scVlj::P64 = P64[R1 + 24];
           _scVlk::P64 = P64[R1 + 32];
           _scVll::P64 = P64[R1 + 40];
           _scVlm::P64 = P64[R1 + 48];
           _scVln::P64 = P64[R1 + 56];
           _scVlo::P64 = P64[R1 + 64];
           _scVlp::P64 = P64[R1 + 72];
           _scVlq::P64 = P64[R1 + 80];
           _scVlr::P64 = P64[R1 + 88];
           _scVlu::P64 = P64[R1 + 96];
           _scVlv::P64 = P64[R1 + 104];
           _scVlw::P64 = P64[R1 + 112];
           _scVly::P64 = P64[R1 + 120];
           _scVlz::P64 = P64[R1 + 128];
           _scVlB::P64 = P64[R1 + 136];
           _scVlC::P64 = P64[R1 + 144];
           _scVlD::P64 = P64[R1 + 152];
           _scVlE::P64 = P64[R1 + 160];
           _scVlF::P64 = P64[R1 + 168];
           _scVlJ::P64 = P64[R1 + 176];
           _scVlM::P64 = P64[R1 + 184];
           _scVlP::P64 = P64[R1 + 192];
           _scVlS::P64 = P64[R1 + 200];
           _scVlY::P64 = P64[R1 + 208];
           R1 = P64[R1 + 16];
           P64[Sp - 208] = _scVlj::P64;
           P64[Sp - 200] = _scVlk::P64;
           P64[Sp - 192] = _scVll::P64;
           P64[Sp - 184] = _scVlm::P64;
           P64[Sp - 176] = _scVln::P64;
           P64[Sp - 168] = _scVlo::P64;
           P64[Sp - 160] = _scVlp::P64;
           P64[Sp - 152] = _scVlq::P64;
           P64[Sp - 144] = _scVlr::P64;
           P64[Sp - 136] = _scVlu::P64;
           P64[Sp - 128] = _scVlv::P64;
           P64[Sp - 120] = _scVlw::P64;
           P64[Sp - 112] = _scVly::P64;
           P64[Sp - 104] = _scVlz::P64;
           P64[Sp - 96] = _scVlB::P64;
           P64[Sp - 88] = _scVlC::P64;
           P64[Sp - 80] = _scVlD::P64;
           P64[Sp - 72] = _scVlE::P64;
           P64[Sp - 64] = _scVlF::P64;
           P64[Sp - 56] = _scVlJ::P64;
           P64[Sp - 48] = _scVlM::P64;
           P64[Sp - 40] = _scVlP::P64;
           P64[Sp - 32] = _scVlS::P64;
           P64[Sp - 24] = _scVlY::P64;
           Sp = Sp - 216;
           if (R1 & 7 != 0) goto ud7Ih; else goto cd7sq;
       ud7Ih: // global
           call _cd7sp(R1) args: 0, res: 0, upd: 0;
       cd7sq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVoG_info" {
     sat_scVoG_info:
         const sat_scVoG_entry;
         const 25;
         const 13528395363123215;
         const ScWiZ_srt+384;
 },
 _cd7sp() //  [R1]
         { []
         }
     {offset
       cd7sp: // global
           Hp = Hp + 208;
           if (Hp > HpLim) (likely: False) goto cd7Id; else goto cd7Ic;
       cd7Id: // global
           HpAlloc = 208;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cd7Ic: // global
           _scVm3::I64 = I64[R1 + 7];
           I64[Hp - 200] = sat_scVoC_info;
           P64[Hp - 184] = P64[Sp + 8];
           P64[Hp - 176] = P64[Sp + 16];
           P64[Hp - 168] = P64[Sp + 24];
           P64[Hp - 160] = P64[Sp + 32];
           P64[Hp - 152] = P64[Sp + 40];
           P64[Hp - 144] = P64[Sp + 48];
           P64[Hp - 136] = P64[Sp + 56];
           P64[Hp - 128] = P64[Sp + 64];
           P64[Hp - 120] = P64[Sp + 72];
           P64[Hp - 112] = P64[Sp + 80];
           P64[Hp - 104] = P64[Sp + 88];
           P64[Hp - 96] = P64[Sp + 96];
           P64[Hp - 88] = P64[Sp + 104];
           P64[Hp - 80] = P64[Sp + 112];
           P64[Hp - 72] = P64[Sp + 120];
           P64[Hp - 64] = P64[Sp + 128];
           P64[Hp - 56] = P64[Sp + 136];
           P64[Hp - 48] = P64[Sp + 144];
           P64[Hp - 40] = P64[Sp + 152];
           P64[Hp - 32] = P64[Sp + 160];
           P64[Hp - 24] = P64[Sp + 168];
           P64[Hp - 16] = P64[Sp + 176];
           P64[Hp - 8] = P64[Sp + 184];
           P64[Hp] = P64[Sp + 192];
           I64[Sp + 192] = block_cd7I6_info;
           R3 = Hp - 200;
           R2 = _scVm3::I64;
           Sp = Sp + 192;
           call GHC.Show.$witos_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cd7sp_info" {
     block_cd7sp_info:
         const _cd7sp;
         const 24;
         const 13528395363123230;
         const ScWiZ_srt+384;
 },
 _cd7I6() //  [R1, R2]
         { []
         }
     {offset
       cd7I6: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cd7Ig; else goto cd7If;
       cd7Ig: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cd7If: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd7I6_info" {
     block_cd7I6_info:
         const _cd7I6;
         const 0;
         const 30;
 },
 sat_scVoH_entry() //  [R1]
         { []
         }
     {offset
       cd7Ii: // global
           Hp = Hp + 216;
           if (Hp > HpLim) (likely: False) goto cd7Im; else goto cd7Il;
       cd7Im: // global
           HpAlloc = 216;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7Il: // global
           _scVli::P64 = P64[R1 + 16];
           _scVlj::P64 = P64[R1 + 24];
           _scVlk::P64 = P64[R1 + 32];
           _scVll::P64 = P64[R1 + 40];
           _scVlm::P64 = P64[R1 + 48];
           _scVln::P64 = P64[R1 + 56];
           _scVlo::P64 = P64[R1 + 64];
           _scVlp::P64 = P64[R1 + 72];
           _scVlq::P64 = P64[R1 + 80];
           _scVlr::P64 = P64[R1 + 88];
           _scVlu::P64 = P64[R1 + 96];
           _scVlv::P64 = P64[R1 + 104];
           _scVlw::P64 = P64[R1 + 112];
           _scVly::P64 = P64[R1 + 120];
           _scVlz::P64 = P64[R1 + 128];
           _scVlB::P64 = P64[R1 + 136];
           _scVlC::P64 = P64[R1 + 144];
           _scVlD::P64 = P64[R1 + 152];
           _scVlE::P64 = P64[R1 + 160];
           _scVlF::P64 = P64[R1 + 168];
           _scVlJ::P64 = P64[R1 + 176];
           _scVlM::P64 = P64[R1 + 184];
           _scVlP::P64 = P64[R1 + 192];
           _scVlS::P64 = P64[R1 + 200];
           _scVlY::P64 = P64[R1 + 208];
           I64[Hp - 208] = sat_scVoG_info;
           P64[Hp - 192] = _scVli::P64;
           P64[Hp - 184] = _scVlj::P64;
           P64[Hp - 176] = _scVlk::P64;
           P64[Hp - 168] = _scVll::P64;
           P64[Hp - 160] = _scVlm::P64;
           P64[Hp - 152] = _scVln::P64;
           P64[Hp - 144] = _scVlo::P64;
           P64[Hp - 136] = _scVlp::P64;
           P64[Hp - 128] = _scVlq::P64;
           P64[Hp - 120] = _scVlr::P64;
           P64[Hp - 112] = _scVlu::P64;
           P64[Hp - 104] = _scVlv::P64;
           P64[Hp - 96] = _scVlw::P64;
           P64[Hp - 88] = _scVly::P64;
           P64[Hp - 80] = _scVlz::P64;
           P64[Hp - 72] = _scVlB::P64;
           P64[Hp - 64] = _scVlC::P64;
           P64[Hp - 56] = _scVlD::P64;
           P64[Hp - 48] = _scVlE::P64;
           P64[Hp - 40] = _scVlF::P64;
           P64[Hp - 32] = _scVlJ::P64;
           P64[Hp - 24] = _scVlM::P64;
           P64[Hp - 16] = _scVlP::P64;
           P64[Hp - 8] = _scVlS::P64;
           P64[Hp] = _scVlY::P64;
           R3 = Hp - 208;
           R2 = lvl62_rcV67_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVoH_info" {
     sat_scVoH_info:
         const sat_scVoH_entry;
         const 25;
         const 13528395363123215;
         const ScWiZ_srt+384;
 },
 sat_scVoI_entry() //  [R1]
         { []
         }
     {offset
       cd7In: // global
           _scVoI::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd7Io; else goto cd7Ip;
       cd7Ip: // global
           Hp = Hp + 216;
           if (Hp > HpLim) (likely: False) goto cd7Ir; else goto cd7Iq;
       cd7Ir: // global
           HpAlloc = 216;
           goto cd7Io;
       cd7Io: // global
           R1 = _scVoI::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7Iq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVoI::P64;
           _scVli::P64 = P64[_scVoI::P64 + 16];
           _scVlj::P64 = P64[_scVoI::P64 + 24];
           _scVlk::P64 = P64[_scVoI::P64 + 32];
           _scVll::P64 = P64[_scVoI::P64 + 40];
           _scVlm::P64 = P64[_scVoI::P64 + 48];
           _scVln::P64 = P64[_scVoI::P64 + 56];
           _scVlo::P64 = P64[_scVoI::P64 + 64];
           _scVlp::P64 = P64[_scVoI::P64 + 72];
           _scVlq::P64 = P64[_scVoI::P64 + 80];
           _scVlr::P64 = P64[_scVoI::P64 + 88];
           _scVlu::P64 = P64[_scVoI::P64 + 96];
           _scVlv::P64 = P64[_scVoI::P64 + 104];
           _scVlw::P64 = P64[_scVoI::P64 + 112];
           _scVly::P64 = P64[_scVoI::P64 + 120];
           _scVlz::P64 = P64[_scVoI::P64 + 128];
           _scVlB::P64 = P64[_scVoI::P64 + 136];
           _scVlC::P64 = P64[_scVoI::P64 + 144];
           _scVlD::P64 = P64[_scVoI::P64 + 152];
           _scVlE::P64 = P64[_scVoI::P64 + 160];
           _scVlF::P64 = P64[_scVoI::P64 + 168];
           _scVlJ::P64 = P64[_scVoI::P64 + 176];
           _scVlM::P64 = P64[_scVoI::P64 + 184];
           _scVlP::P64 = P64[_scVoI::P64 + 192];
           _scVlS::P64 = P64[_scVoI::P64 + 200];
           _scVlY::P64 = P64[_scVoI::P64 + 208];
           I64[Hp - 208] = sat_scVoH_info;
           P64[Hp - 192] = _scVli::P64;
           P64[Hp - 184] = _scVlj::P64;
           P64[Hp - 176] = _scVlk::P64;
           P64[Hp - 168] = _scVll::P64;
           P64[Hp - 160] = _scVlm::P64;
           P64[Hp - 152] = _scVln::P64;
           P64[Hp - 144] = _scVlo::P64;
           P64[Hp - 136] = _scVlp::P64;
           P64[Hp - 128] = _scVlq::P64;
           P64[Hp - 120] = _scVlr::P64;
           P64[Hp - 112] = _scVlu::P64;
           P64[Hp - 104] = _scVlv::P64;
           P64[Hp - 96] = _scVlw::P64;
           P64[Hp - 88] = _scVly::P64;
           P64[Hp - 80] = _scVlz::P64;
           P64[Hp - 72] = _scVlB::P64;
           P64[Hp - 64] = _scVlC::P64;
           P64[Hp - 56] = _scVlD::P64;
           P64[Hp - 48] = _scVlE::P64;
           P64[Hp - 40] = _scVlF::P64;
           P64[Hp - 32] = _scVlJ::P64;
           P64[Hp - 24] = _scVlM::P64;
           P64[Hp - 16] = _scVlP::P64;
           P64[Hp - 8] = _scVlS::P64;
           P64[Hp] = _scVlY::P64;
           R3 = Hp - 208;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVoI_info" {
     sat_scVoI_info:
         const sat_scVoI_entry;
         const 25;
         const 13528395363123215;
         const ScWiZ_srt+384;
 },
 sat_scVoM_entry() //  [R1]
         { []
         }
     {offset
       cd7Is: // global
           if ((Sp + -224) < SpLim) (likely: False) goto cd7Iz; else goto cd7IA;
       cd7Iz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7IA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 224] = block_cd7s8_info;
           _scVli::P64 = P64[R1 + 24];
           _scVlj::P64 = P64[R1 + 32];
           _scVlk::P64 = P64[R1 + 40];
           _scVll::P64 = P64[R1 + 48];
           _scVlm::P64 = P64[R1 + 56];
           _scVln::P64 = P64[R1 + 64];
           _scVlo::P64 = P64[R1 + 72];
           _scVlp::P64 = P64[R1 + 80];
           _scVlq::P64 = P64[R1 + 88];
           _scVlr::P64 = P64[R1 + 96];
           _scVlu::P64 = P64[R1 + 104];
           _scVlv::P64 = P64[R1 + 112];
           _scVlw::P64 = P64[R1 + 120];
           _scVly::P64 = P64[R1 + 128];
           _scVlz::P64 = P64[R1 + 136];
           _scVlB::P64 = P64[R1 + 144];
           _scVlC::P64 = P64[R1 + 152];
           _scVlD::P64 = P64[R1 + 160];
           _scVlE::P64 = P64[R1 + 168];
           _scVlF::P64 = P64[R1 + 176];
           _scVlJ::P64 = P64[R1 + 184];
           _scVlM::P64 = P64[R1 + 192];
           _scVlP::P64 = P64[R1 + 200];
           _scVlS::P64 = P64[R1 + 208];
           _scVlY::P64 = P64[R1 + 216];
           R1 = P64[R1 + 16];
           P64[Sp - 216] = _scVli::P64;
           P64[Sp - 208] = _scVlj::P64;
           P64[Sp - 200] = _scVlk::P64;
           P64[Sp - 192] = _scVll::P64;
           P64[Sp - 184] = _scVlm::P64;
           P64[Sp - 176] = _scVln::P64;
           P64[Sp - 168] = _scVlo::P64;
           P64[Sp - 160] = _scVlp::P64;
           P64[Sp - 152] = _scVlq::P64;
           P64[Sp - 144] = _scVlr::P64;
           P64[Sp - 136] = _scVlu::P64;
           P64[Sp - 128] = _scVlv::P64;
           P64[Sp - 120] = _scVlw::P64;
           P64[Sp - 112] = _scVly::P64;
           P64[Sp - 104] = _scVlz::P64;
           P64[Sp - 96] = _scVlB::P64;
           P64[Sp - 88] = _scVlC::P64;
           P64[Sp - 80] = _scVlD::P64;
           P64[Sp - 72] = _scVlE::P64;
           P64[Sp - 64] = _scVlF::P64;
           P64[Sp - 56] = _scVlJ::P64;
           P64[Sp - 48] = _scVlM::P64;
           P64[Sp - 40] = _scVlP::P64;
           P64[Sp - 32] = _scVlS::P64;
           P64[Sp - 24] = _scVlY::P64;
           Sp = Sp - 224;
           if (R1 & 7 != 0) goto ud7IH; else goto cd7s9;
       ud7IH: // global
           call _cd7s8(R1) args: 0, res: 0, upd: 0;
       cd7s9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVoM_info" {
     sat_scVoM_info:
         const sat_scVoM_entry;
         const 26;
         const 13528395363123215;
         const ScWiZ_srt+384;
 },
 _cd7s8() //  [R1]
         { []
         }
     {offset
       cd7s8: // global
           Hp = Hp + 216;
           if (Hp > HpLim) (likely: False) goto cd7ID; else goto cd7IC;
       cd7ID: // global
           HpAlloc = 216;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cd7IC: // global
           _scVm0::I64 = I64[R1 + 7];
           I64[Hp - 208] = sat_scVoI_info;
           P64[Hp - 192] = P64[Sp + 8];
           P64[Hp - 184] = P64[Sp + 16];
           P64[Hp - 176] = P64[Sp + 24];
           P64[Hp - 168] = P64[Sp + 32];
           P64[Hp - 160] = P64[Sp + 40];
           P64[Hp - 152] = P64[Sp + 48];
           P64[Hp - 144] = P64[Sp + 56];
           P64[Hp - 136] = P64[Sp + 64];
           P64[Hp - 128] = P64[Sp + 72];
           P64[Hp - 120] = P64[Sp + 80];
           P64[Hp - 112] = P64[Sp + 88];
           P64[Hp - 104] = P64[Sp + 96];
           P64[Hp - 96] = P64[Sp + 104];
           P64[Hp - 88] = P64[Sp + 112];
           P64[Hp - 80] = P64[Sp + 120];
           P64[Hp - 72] = P64[Sp + 128];
           P64[Hp - 64] = P64[Sp + 136];
           P64[Hp - 56] = P64[Sp + 144];
           P64[Hp - 48] = P64[Sp + 152];
           P64[Hp - 40] = P64[Sp + 160];
           P64[Hp - 32] = P64[Sp + 168];
           P64[Hp - 24] = P64[Sp + 176];
           P64[Hp - 16] = P64[Sp + 184];
           P64[Hp - 8] = P64[Sp + 192];
           P64[Hp] = P64[Sp + 200];
           I64[Sp + 200] = block_cd7Iw_info;
           R3 = Hp - 208;
           R2 = _scVm0::I64;
           Sp = Sp + 200;
           call GHC.Show.$witos_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cd7s8_info" {
     block_cd7s8_info:
         const _cd7s8;
         const 25;
         const 13528395363123230;
         const ScWiZ_srt+384;
 },
 _cd7Iw() //  [R1, R2]
         { []
         }
     {offset
       cd7Iw: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cd7IG; else goto cd7IF;
       cd7IG: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cd7IF: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd7Iw_info" {
     block_cd7Iw_info:
         const _cd7Iw;
         const 0;
         const 30;
 },
 sat_scVoN_entry() //  [R1]
         { []
         }
     {offset
       cd7II: // global
           Hp = Hp + 224;
           if (Hp > HpLim) (likely: False) goto cd7IM; else goto cd7IL;
       cd7IM: // global
           HpAlloc = 224;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7IL: // global
           _scVlh::P64 = P64[R1 + 16];
           _scVli::P64 = P64[R1 + 24];
           _scVlj::P64 = P64[R1 + 32];
           _scVlk::P64 = P64[R1 + 40];
           _scVll::P64 = P64[R1 + 48];
           _scVlm::P64 = P64[R1 + 56];
           _scVln::P64 = P64[R1 + 64];
           _scVlo::P64 = P64[R1 + 72];
           _scVlp::P64 = P64[R1 + 80];
           _scVlq::P64 = P64[R1 + 88];
           _scVlr::P64 = P64[R1 + 96];
           _scVlu::P64 = P64[R1 + 104];
           _scVlv::P64 = P64[R1 + 112];
           _scVlw::P64 = P64[R1 + 120];
           _scVly::P64 = P64[R1 + 128];
           _scVlz::P64 = P64[R1 + 136];
           _scVlB::P64 = P64[R1 + 144];
           _scVlC::P64 = P64[R1 + 152];
           _scVlD::P64 = P64[R1 + 160];
           _scVlE::P64 = P64[R1 + 168];
           _scVlF::P64 = P64[R1 + 176];
           _scVlJ::P64 = P64[R1 + 184];
           _scVlM::P64 = P64[R1 + 192];
           _scVlP::P64 = P64[R1 + 200];
           _scVlS::P64 = P64[R1 + 208];
           _scVlY::P64 = P64[R1 + 216];
           I64[Hp - 216] = sat_scVoM_info;
           P64[Hp - 200] = _scVlh::P64;
           P64[Hp - 192] = _scVli::P64;
           P64[Hp - 184] = _scVlj::P64;
           P64[Hp - 176] = _scVlk::P64;
           P64[Hp - 168] = _scVll::P64;
           P64[Hp - 160] = _scVlm::P64;
           P64[Hp - 152] = _scVln::P64;
           P64[Hp - 144] = _scVlo::P64;
           P64[Hp - 136] = _scVlp::P64;
           P64[Hp - 128] = _scVlq::P64;
           P64[Hp - 120] = _scVlr::P64;
           P64[Hp - 112] = _scVlu::P64;
           P64[Hp - 104] = _scVlv::P64;
           P64[Hp - 96] = _scVlw::P64;
           P64[Hp - 88] = _scVly::P64;
           P64[Hp - 80] = _scVlz::P64;
           P64[Hp - 72] = _scVlB::P64;
           P64[Hp - 64] = _scVlC::P64;
           P64[Hp - 56] = _scVlD::P64;
           P64[Hp - 48] = _scVlE::P64;
           P64[Hp - 40] = _scVlF::P64;
           P64[Hp - 32] = _scVlJ::P64;
           P64[Hp - 24] = _scVlM::P64;
           P64[Hp - 16] = _scVlP::P64;
           P64[Hp - 8] = _scVlS::P64;
           P64[Hp] = _scVlY::P64;
           R3 = Hp - 216;
           R2 = lvl61_rcV66_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVoN_info" {
     sat_scVoN_info:
         const sat_scVoN_entry;
         const 26;
         const 13528395363123215;
         const ScWiZ_srt+384;
 },
 sat_scVoO_entry() //  [R1]
         { []
         }
     {offset
       cd7IN: // global
           Hp = Hp + 224;
           if (Hp > HpLim) (likely: False) goto cd7IR; else goto cd7IQ;
       cd7IR: // global
           HpAlloc = 224;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7IQ: // global
           _scVlh::P64 = P64[R1 + 16];
           _scVli::P64 = P64[R1 + 24];
           _scVlj::P64 = P64[R1 + 32];
           _scVlk::P64 = P64[R1 + 40];
           _scVll::P64 = P64[R1 + 48];
           _scVlm::P64 = P64[R1 + 56];
           _scVln::P64 = P64[R1 + 64];
           _scVlo::P64 = P64[R1 + 72];
           _scVlp::P64 = P64[R1 + 80];
           _scVlq::P64 = P64[R1 + 88];
           _scVlr::P64 = P64[R1 + 96];
           _scVlu::P64 = P64[R1 + 104];
           _scVlv::P64 = P64[R1 + 112];
           _scVlw::P64 = P64[R1 + 120];
           _scVly::P64 = P64[R1 + 128];
           _scVlz::P64 = P64[R1 + 136];
           _scVlB::P64 = P64[R1 + 144];
           _scVlC::P64 = P64[R1 + 152];
           _scVlD::P64 = P64[R1 + 160];
           _scVlE::P64 = P64[R1 + 168];
           _scVlF::P64 = P64[R1 + 176];
           _scVlJ::P64 = P64[R1 + 184];
           _scVlM::P64 = P64[R1 + 192];
           _scVlP::P64 = P64[R1 + 200];
           _scVlS::P64 = P64[R1 + 208];
           _scVlY::P64 = P64[R1 + 216];
           I64[Hp - 216] = sat_scVoN_info;
           P64[Hp - 200] = _scVlh::P64;
           P64[Hp - 192] = _scVli::P64;
           P64[Hp - 184] = _scVlj::P64;
           P64[Hp - 176] = _scVlk::P64;
           P64[Hp - 168] = _scVll::P64;
           P64[Hp - 160] = _scVlm::P64;
           P64[Hp - 152] = _scVln::P64;
           P64[Hp - 144] = _scVlo::P64;
           P64[Hp - 136] = _scVlp::P64;
           P64[Hp - 128] = _scVlq::P64;
           P64[Hp - 120] = _scVlr::P64;
           P64[Hp - 112] = _scVlu::P64;
           P64[Hp - 104] = _scVlv::P64;
           P64[Hp - 96] = _scVlw::P64;
           P64[Hp - 88] = _scVly::P64;
           P64[Hp - 80] = _scVlz::P64;
           P64[Hp - 72] = _scVlB::P64;
           P64[Hp - 64] = _scVlC::P64;
           P64[Hp - 56] = _scVlD::P64;
           P64[Hp - 48] = _scVlE::P64;
           P64[Hp - 40] = _scVlF::P64;
           P64[Hp - 32] = _scVlJ::P64;
           P64[Hp - 24] = _scVlM::P64;
           P64[Hp - 16] = _scVlP::P64;
           P64[Hp - 8] = _scVlS::P64;
           P64[Hp] = _scVlY::P64;
           R3 = Hp - 216;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVoO_info" {
     sat_scVoO_info:
         const sat_scVoO_entry;
         const 26;
         const 13528395363123215;
         const ScWiZ_srt+384;
 },
 section ""relreadonly" . ud7Ki_srtd" {
     ud7Ki_srtd:
         const ScWiZ_srt+384;
         const 34;
         const 8593084417;
 },
 sat_scVoP_entry() //  [R1]
         { []
         }
     {offset
       cd7IS: // global
           _scVoP::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd7IT; else goto cd7IU;
       cd7IU: // global
           Hp = Hp + 224;
           if (Hp > HpLim) (likely: False) goto cd7IW; else goto cd7IV;
       cd7IW: // global
           HpAlloc = 224;
           goto cd7IT;
       cd7IT: // global
           R1 = _scVoP::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7IV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVoP::P64;
           _scVlg::P64 = P64[_scVoP::P64 + 16];
           _scVlh::P64 = P64[_scVoP::P64 + 24];
           _scVli::P64 = P64[_scVoP::P64 + 32];
           _scVlj::P64 = P64[_scVoP::P64 + 40];
           _scVlk::P64 = P64[_scVoP::P64 + 48];
           _scVll::P64 = P64[_scVoP::P64 + 56];
           _scVlm::P64 = P64[_scVoP::P64 + 64];
           _scVln::P64 = P64[_scVoP::P64 + 72];
           _scVlo::P64 = P64[_scVoP::P64 + 80];
           _scVlp::P64 = P64[_scVoP::P64 + 88];
           _scVlq::P64 = P64[_scVoP::P64 + 96];
           _scVlr::P64 = P64[_scVoP::P64 + 104];
           _scVlu::P64 = P64[_scVoP::P64 + 112];
           _scVlv::P64 = P64[_scVoP::P64 + 120];
           _scVlw::P64 = P64[_scVoP::P64 + 128];
           _scVly::P64 = P64[_scVoP::P64 + 136];
           _scVlz::P64 = P64[_scVoP::P64 + 144];
           _scVlB::P64 = P64[_scVoP::P64 + 152];
           _scVlC::P64 = P64[_scVoP::P64 + 160];
           _scVlD::P64 = P64[_scVoP::P64 + 168];
           _scVlE::P64 = P64[_scVoP::P64 + 176];
           _scVlF::P64 = P64[_scVoP::P64 + 184];
           _scVlJ::P64 = P64[_scVoP::P64 + 192];
           _scVlM::P64 = P64[_scVoP::P64 + 200];
           _scVlP::P64 = P64[_scVoP::P64 + 208];
           _scVlS::P64 = P64[_scVoP::P64 + 216];
           _scVlY::P64 = P64[_scVoP::P64 + 224];
           I64[Hp - 216] = sat_scVoO_info;
           P64[Hp - 200] = _scVlh::P64;
           P64[Hp - 192] = _scVli::P64;
           P64[Hp - 184] = _scVlj::P64;
           P64[Hp - 176] = _scVlk::P64;
           P64[Hp - 168] = _scVll::P64;
           P64[Hp - 160] = _scVlm::P64;
           P64[Hp - 152] = _scVln::P64;
           P64[Hp - 144] = _scVlo::P64;
           P64[Hp - 136] = _scVlp::P64;
           P64[Hp - 128] = _scVlq::P64;
           P64[Hp - 120] = _scVlr::P64;
           P64[Hp - 112] = _scVlu::P64;
           P64[Hp - 104] = _scVlv::P64;
           P64[Hp - 96] = _scVlw::P64;
           P64[Hp - 88] = _scVly::P64;
           P64[Hp - 80] = _scVlz::P64;
           P64[Hp - 72] = _scVlB::P64;
           P64[Hp - 64] = _scVlC::P64;
           P64[Hp - 56] = _scVlD::P64;
           P64[Hp - 48] = _scVlE::P64;
           P64[Hp - 40] = _scVlF::P64;
           P64[Hp - 32] = _scVlJ::P64;
           P64[Hp - 24] = _scVlM::P64;
           P64[Hp - 16] = _scVlP::P64;
           P64[Hp - 8] = _scVlS::P64;
           P64[Hp] = _scVlY::P64;
           R3 = Hp - 216;
           R2 = _scVlg::P64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$cshowsPrec5_entry(R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVoP_info" {
     sat_scVoP_info:
         const sat_scVoP_entry;
         const 27;
         const 18446744069414584335;
         const ud7Ki_srtd;
 },
 section ""relreadonly" . ud7Kj_srtd" {
     ud7Kj_srtd:
         const ScWiZ_srt+384;
         const 34;
         const 8593084417;
 },
 sat_scVoQ_entry() //  [R1]
         { []
         }
     {offset
       cd7IX: // global
           Hp = Hp + 232;
           if (Hp > HpLim) (likely: False) goto cd7J1; else goto cd7J0;
       cd7J1: // global
           HpAlloc = 232;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7J0: // global
           _scVlg::P64 = P64[R1 + 16];
           _scVlh::P64 = P64[R1 + 24];
           _scVli::P64 = P64[R1 + 32];
           _scVlj::P64 = P64[R1 + 40];
           _scVlk::P64 = P64[R1 + 48];
           _scVll::P64 = P64[R1 + 56];
           _scVlm::P64 = P64[R1 + 64];
           _scVln::P64 = P64[R1 + 72];
           _scVlo::P64 = P64[R1 + 80];
           _scVlp::P64 = P64[R1 + 88];
           _scVlq::P64 = P64[R1 + 96];
           _scVlr::P64 = P64[R1 + 104];
           _scVlu::P64 = P64[R1 + 112];
           _scVlv::P64 = P64[R1 + 120];
           _scVlw::P64 = P64[R1 + 128];
           _scVly::P64 = P64[R1 + 136];
           _scVlz::P64 = P64[R1 + 144];
           _scVlB::P64 = P64[R1 + 152];
           _scVlC::P64 = P64[R1 + 160];
           _scVlD::P64 = P64[R1 + 168];
           _scVlE::P64 = P64[R1 + 176];
           _scVlF::P64 = P64[R1 + 184];
           _scVlJ::P64 = P64[R1 + 192];
           _scVlM::P64 = P64[R1 + 200];
           _scVlP::P64 = P64[R1 + 208];
           _scVlS::P64 = P64[R1 + 216];
           _scVlY::P64 = P64[R1 + 224];
           I64[Hp - 224] = sat_scVoP_info;
           P64[Hp - 208] = _scVlg::P64;
           P64[Hp - 200] = _scVlh::P64;
           P64[Hp - 192] = _scVli::P64;
           P64[Hp - 184] = _scVlj::P64;
           P64[Hp - 176] = _scVlk::P64;
           P64[Hp - 168] = _scVll::P64;
           P64[Hp - 160] = _scVlm::P64;
           P64[Hp - 152] = _scVln::P64;
           P64[Hp - 144] = _scVlo::P64;
           P64[Hp - 136] = _scVlp::P64;
           P64[Hp - 128] = _scVlq::P64;
           P64[Hp - 120] = _scVlr::P64;
           P64[Hp - 112] = _scVlu::P64;
           P64[Hp - 104] = _scVlv::P64;
           P64[Hp - 96] = _scVlw::P64;
           P64[Hp - 88] = _scVly::P64;
           P64[Hp - 80] = _scVlz::P64;
           P64[Hp - 72] = _scVlB::P64;
           P64[Hp - 64] = _scVlC::P64;
           P64[Hp - 56] = _scVlD::P64;
           P64[Hp - 48] = _scVlE::P64;
           P64[Hp - 40] = _scVlF::P64;
           P64[Hp - 32] = _scVlJ::P64;
           P64[Hp - 24] = _scVlM::P64;
           P64[Hp - 16] = _scVlP::P64;
           P64[Hp - 8] = _scVlS::P64;
           P64[Hp] = _scVlY::P64;
           R3 = Hp - 224;
           R2 = lvl60_rcV65_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVoQ_info" {
     sat_scVoQ_info:
         const sat_scVoQ_entry;
         const 27;
         const 18446744069414584335;
         const ud7Kj_srtd;
 },
 section ""relreadonly" . ud7Kk_srtd" {
     ud7Kk_srtd:
         const ScWiZ_srt+384;
         const 34;
         const 8593084417;
 },
 sat_scVoR_entry() //  [R1]
         { []
         }
     {offset
       cd7J2: // global
           _scVoR::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd7J3; else goto cd7J4;
       cd7J4: // global
           Hp = Hp + 232;
           if (Hp > HpLim) (likely: False) goto cd7J6; else goto cd7J5;
       cd7J6: // global
           HpAlloc = 232;
           goto cd7J3;
       cd7J3: // global
           R1 = _scVoR::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7J5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVoR::P64;
           _scVlg::P64 = P64[_scVoR::P64 + 16];
           _scVlh::P64 = P64[_scVoR::P64 + 24];
           _scVli::P64 = P64[_scVoR::P64 + 32];
           _scVlj::P64 = P64[_scVoR::P64 + 40];
           _scVlk::P64 = P64[_scVoR::P64 + 48];
           _scVll::P64 = P64[_scVoR::P64 + 56];
           _scVlm::P64 = P64[_scVoR::P64 + 64];
           _scVln::P64 = P64[_scVoR::P64 + 72];
           _scVlo::P64 = P64[_scVoR::P64 + 80];
           _scVlp::P64 = P64[_scVoR::P64 + 88];
           _scVlq::P64 = P64[_scVoR::P64 + 96];
           _scVlr::P64 = P64[_scVoR::P64 + 104];
           _scVlu::P64 = P64[_scVoR::P64 + 112];
           _scVlv::P64 = P64[_scVoR::P64 + 120];
           _scVlw::P64 = P64[_scVoR::P64 + 128];
           _scVly::P64 = P64[_scVoR::P64 + 136];
           _scVlz::P64 = P64[_scVoR::P64 + 144];
           _scVlB::P64 = P64[_scVoR::P64 + 152];
           _scVlC::P64 = P64[_scVoR::P64 + 160];
           _scVlD::P64 = P64[_scVoR::P64 + 168];
           _scVlE::P64 = P64[_scVoR::P64 + 176];
           _scVlF::P64 = P64[_scVoR::P64 + 184];
           _scVlJ::P64 = P64[_scVoR::P64 + 192];
           _scVlM::P64 = P64[_scVoR::P64 + 200];
           _scVlP::P64 = P64[_scVoR::P64 + 208];
           _scVlS::P64 = P64[_scVoR::P64 + 216];
           _scVlY::P64 = P64[_scVoR::P64 + 224];
           I64[Hp - 224] = sat_scVoQ_info;
           P64[Hp - 208] = _scVlg::P64;
           P64[Hp - 200] = _scVlh::P64;
           P64[Hp - 192] = _scVli::P64;
           P64[Hp - 184] = _scVlj::P64;
           P64[Hp - 176] = _scVlk::P64;
           P64[Hp - 168] = _scVll::P64;
           P64[Hp - 160] = _scVlm::P64;
           P64[Hp - 152] = _scVln::P64;
           P64[Hp - 144] = _scVlo::P64;
           P64[Hp - 136] = _scVlp::P64;
           P64[Hp - 128] = _scVlq::P64;
           P64[Hp - 120] = _scVlr::P64;
           P64[Hp - 112] = _scVlu::P64;
           P64[Hp - 104] = _scVlv::P64;
           P64[Hp - 96] = _scVlw::P64;
           P64[Hp - 88] = _scVly::P64;
           P64[Hp - 80] = _scVlz::P64;
           P64[Hp - 72] = _scVlB::P64;
           P64[Hp - 64] = _scVlC::P64;
           P64[Hp - 56] = _scVlD::P64;
           P64[Hp - 48] = _scVlE::P64;
           P64[Hp - 40] = _scVlF::P64;
           P64[Hp - 32] = _scVlJ::P64;
           P64[Hp - 24] = _scVlM::P64;
           P64[Hp - 16] = _scVlP::P64;
           P64[Hp - 8] = _scVlS::P64;
           P64[Hp] = _scVlY::P64;
           R3 = Hp - 224;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVoR_info" {
     sat_scVoR_info:
         const sat_scVoR_entry;
         const 27;
         const 18446744069414584335;
         const ud7Kk_srtd;
 },
 section ""relreadonly" . ud7Kl_srtd" {
     ud7Kl_srtd:
         const ScWiZ_srt+384;
         const 34;
         const 8593084417;
 },
 sat_scVoS_entry() //  [R1]
         { []
         }
     {offset
       cd7J7: // global
           _scVoS::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd7J8; else goto cd7J9;
       cd7J9: // global
           Hp = Hp + 232;
           if (Hp > HpLim) (likely: False) goto cd7Jb; else goto cd7Ja;
       cd7Jb: // global
           HpAlloc = 232;
           goto cd7J8;
       cd7J8: // global
           R1 = _scVoS::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7Ja: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVoS::P64;
           _scVlg::P64 = P64[_scVoS::P64 + 16];
           _scVlh::P64 = P64[_scVoS::P64 + 24];
           _scVli::P64 = P64[_scVoS::P64 + 32];
           _scVlj::P64 = P64[_scVoS::P64 + 40];
           _scVlk::P64 = P64[_scVoS::P64 + 48];
           _scVll::P64 = P64[_scVoS::P64 + 56];
           _scVlm::P64 = P64[_scVoS::P64 + 64];
           _scVln::P64 = P64[_scVoS::P64 + 72];
           _scVlo::P64 = P64[_scVoS::P64 + 80];
           _scVlp::P64 = P64[_scVoS::P64 + 88];
           _scVlq::P64 = P64[_scVoS::P64 + 96];
           _scVlr::P64 = P64[_scVoS::P64 + 104];
           _scVlu::P64 = P64[_scVoS::P64 + 112];
           _scVlv::P64 = P64[_scVoS::P64 + 120];
           _scVlw::P64 = P64[_scVoS::P64 + 128];
           _scVly::P64 = P64[_scVoS::P64 + 136];
           _scVlz::P64 = P64[_scVoS::P64 + 144];
           _scVlB::P64 = P64[_scVoS::P64 + 152];
           _scVlC::P64 = P64[_scVoS::P64 + 160];
           _scVlD::P64 = P64[_scVoS::P64 + 168];
           _scVlE::P64 = P64[_scVoS::P64 + 176];
           _scVlF::P64 = P64[_scVoS::P64 + 184];
           _scVlI::P64 = P64[_scVoS::P64 + 192];
           _scVlJ::P64 = P64[_scVoS::P64 + 200];
           _scVlM::P64 = P64[_scVoS::P64 + 208];
           _scVlP::P64 = P64[_scVoS::P64 + 216];
           _scVlS::P64 = P64[_scVoS::P64 + 224];
           _scVlY::P64 = P64[_scVoS::P64 + 232];
           I64[Hp - 224] = sat_scVoR_info;
           P64[Hp - 208] = _scVlg::P64;
           P64[Hp - 200] = _scVlh::P64;
           P64[Hp - 192] = _scVli::P64;
           P64[Hp - 184] = _scVlj::P64;
           P64[Hp - 176] = _scVlk::P64;
           P64[Hp - 168] = _scVll::P64;
           P64[Hp - 160] = _scVlm::P64;
           P64[Hp - 152] = _scVln::P64;
           P64[Hp - 144] = _scVlo::P64;
           P64[Hp - 136] = _scVlp::P64;
           P64[Hp - 128] = _scVlq::P64;
           P64[Hp - 120] = _scVlr::P64;
           P64[Hp - 112] = _scVlu::P64;
           P64[Hp - 104] = _scVlv::P64;
           P64[Hp - 96] = _scVlw::P64;
           P64[Hp - 88] = _scVly::P64;
           P64[Hp - 80] = _scVlz::P64;
           P64[Hp - 72] = _scVlB::P64;
           P64[Hp - 64] = _scVlC::P64;
           P64[Hp - 56] = _scVlD::P64;
           P64[Hp - 48] = _scVlE::P64;
           P64[Hp - 40] = _scVlF::P64;
           P64[Hp - 32] = _scVlJ::P64;
           P64[Hp - 24] = _scVlM::P64;
           P64[Hp - 16] = _scVlP::P64;
           P64[Hp - 8] = _scVlS::P64;
           P64[Hp] = _scVlY::P64;
           R2 = Hp - 224;
           R1 = _scVlI::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVoS_info" {
     sat_scVoS_info:
         const sat_scVoS_entry;
         const 28;
         const 18446744069414584335;
         const ud7Kl_srtd;
 },
 section ""relreadonly" . ud7Km_srtd" {
     ud7Km_srtd:
         const ScWiZ_srt+384;
         const 34;
         const 8593084417;
 },
 g1_scVlX_entry() //  [R1, R2]
         { []
         }
     {offset
       cd7Jc: // global
           Hp = Hp + 240;
           if (Hp > HpLim) (likely: False) goto cd7Jg; else goto cd7Jf;
       cd7Jg: // global
           HpAlloc = 240;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd7Jf: // global
           _scVlg::P64 = P64[R1 + 7];
           _scVlh::P64 = P64[R1 + 15];
           _scVli::P64 = P64[R1 + 23];
           _scVlj::P64 = P64[R1 + 31];
           _scVlk::P64 = P64[R1 + 39];
           _scVll::P64 = P64[R1 + 47];
           _scVlm::P64 = P64[R1 + 55];
           _scVln::P64 = P64[R1 + 63];
           _scVlo::P64 = P64[R1 + 71];
           _scVlp::P64 = P64[R1 + 79];
           _scVlq::P64 = P64[R1 + 87];
           _scVlr::P64 = P64[R1 + 95];
           _scVlu::P64 = P64[R1 + 103];
           _scVlv::P64 = P64[R1 + 111];
           _scVlw::P64 = P64[R1 + 119];
           _scVly::P64 = P64[R1 + 127];
           _scVlz::P64 = P64[R1 + 135];
           _scVlB::P64 = P64[R1 + 143];
           _scVlC::P64 = P64[R1 + 151];
           _scVlD::P64 = P64[R1 + 159];
           _scVlE::P64 = P64[R1 + 167];
           _scVlF::P64 = P64[R1 + 175];
           _scVlI::P64 = P64[R1 + 183];
           _scVlJ::P64 = P64[R1 + 191];
           _scVlM::P64 = P64[R1 + 199];
           _scVlP::P64 = P64[R1 + 207];
           _scVlS::P64 = P64[R1 + 215];
           I64[Hp - 232] = sat_scVoS_info;
           P64[Hp - 216] = _scVlg::P64;
           P64[Hp - 208] = _scVlh::P64;
           P64[Hp - 200] = _scVli::P64;
           P64[Hp - 192] = _scVlj::P64;
           P64[Hp - 184] = _scVlk::P64;
           P64[Hp - 176] = _scVll::P64;
           P64[Hp - 168] = _scVlm::P64;
           P64[Hp - 160] = _scVln::P64;
           P64[Hp - 152] = _scVlo::P64;
           P64[Hp - 144] = _scVlp::P64;
           P64[Hp - 136] = _scVlq::P64;
           P64[Hp - 128] = _scVlr::P64;
           P64[Hp - 120] = _scVlu::P64;
           P64[Hp - 112] = _scVlv::P64;
           P64[Hp - 104] = _scVlw::P64;
           P64[Hp - 96] = _scVly::P64;
           P64[Hp - 88] = _scVlz::P64;
           P64[Hp - 80] = _scVlB::P64;
           P64[Hp - 72] = _scVlC::P64;
           P64[Hp - 64] = _scVlD::P64;
           P64[Hp - 56] = _scVlE::P64;
           P64[Hp - 48] = _scVlF::P64;
           P64[Hp - 40] = _scVlI::P64;
           P64[Hp - 32] = _scVlJ::P64;
           P64[Hp - 24] = _scVlM::P64;
           P64[Hp - 16] = _scVlP::P64;
           P64[Hp - 8] = _scVlS::P64;
           P64[Hp] = R2;
           R3 = Hp - 232;
           R2 = lvl59_rcV64_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . g1_scVlX_info" {
     g1_scVlX_info:
         const g1_scVlX_entry;
         const 27;
         const 18446744069414584328;
         const 4294967301;
         const ud7Km_srtd;
 },
 section ""relreadonly" . ud7Kn_srtd" {
     ud7Kn_srtd:
         const ScWiZ_srt+384;
         const 34;
         const 8593084417;
 },
 sat_scVoV_entry() //  [R1]
         { []
         }
     {offset
       cd7Jt: // global
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           call g1_scVlX_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVoV_info" {
     sat_scVoV_info:
         const sat_scVoV_entry;
         const 2;
         const 18446744069414584338;
         const ud7Kn_srtd;
 },
 section ""relreadonly" . ud7Ko_srtd" {
     ud7Ko_srtd:
         const ScWiZ_srt+384;
         const 44;
         const 8804686106625;
 },
 sat_scVoW_entry() //  [R1, R2]
         { []
         }
     {offset
       cd7Jw: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cd7JA; else goto cd7Jz;
       cd7JA: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd7Jz: // global
           _scVlX::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_scVoV_info;
           P64[Hp - 8] = _scVlX::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = f7_rcV63_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVoW_info" {
     sat_scVoW_info:
         const sat_scVoW_entry;
         const 1;
         const 18446744069414584329;
         const 4294967301;
         const ud7Ko_srtd;
 },
 section ""relreadonly" . ud7Kp_srtd" {
     ud7Kp_srtd:
         const ScWiZ_srt+384;
         const 34;
         const 8593084417;
 },
 sat_scVoZ_entry() //  [R1]
         { []
         }
     {offset
       cd7JQ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cd7JU; else goto cd7JT;
       cd7JU: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7JT: // global
           _scVlX::P64 = P64[R1 + 16];
           _scVoX::P64 = P64[R1 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _scVoX::P64;
           R2 = Hp - 14;
           R1 = _scVlX::P64;
           call g1_scVlX_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVoZ_info" {
     sat_scVoZ_info:
         const sat_scVoZ_entry;
         const 2;
         const 18446744069414584338;
         const ud7Kp_srtd;
 },
 section ""relreadonly" . ud7Kq_srtd" {
     ud7Kq_srtd:
         const ScWiZ_srt+384;
         const 44;
         const 8804686106625;
 },
 sat_scVp0_entry() //  [R1]
         { []
         }
     {offset
       cd7JV: // global
           _scVp0::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd7JW; else goto cd7JX;
       cd7JX: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cd7JZ; else goto cd7JY;
       cd7JZ: // global
           HpAlloc = 32;
           goto cd7JW;
       cd7JW: // global
           R1 = _scVp0::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7JY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVp0::P64;
           _scVlX::P64 = P64[_scVp0::P64 + 16];
           _scVoX::P64 = P64[_scVp0::P64 + 24];
           I64[Hp - 24] = sat_scVoZ_info;
           P64[Hp - 8] = _scVlX::P64;
           P64[Hp] = _scVoX::P64;
           R3 = Hp - 24;
           R2 = f7_rcV63_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVp0_info" {
     sat_scVp0_info:
         const sat_scVp0_entry;
         const 2;
         const 18446744069414584338;
         const ud7Kq_srtd;
 },
 section ""relreadonly" . ud7Kr_srtd" {
     ud7Kr_srtd:
         const ScWiZ_srt+384;
         const 44;
         const 8804686106625;
 },
 sat_scVp1_entry() //  [R1, R2]
         { []
         }
     {offset
       cd7K1: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cd7K5; else goto cd7K4;
       cd7K5: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd7K4: // global
           _scVlX::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_scVp0_info;
           P64[Hp - 32] = _scVlX::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVp1_info" {
     sat_scVp1_info:
         const sat_scVp1_entry;
         const 1;
         const 18446744069414584329;
         const 4294967301;
         const ud7Kr_srtd;
 },
 section ""relreadonly" . ud7Ks_srtd" {
     ud7Ks_srtd:
         const ScWiZ_srt+384;
         const 45;
         const 34093453545473;
 },
 GHC.RTS.Flags.$fShowGCFlags_$cshowsPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       cd7K6: // global
           if ((Sp + -224) < SpLim) (likely: False) goto cd7K7; else goto cd7K8;
       cd7K7: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fShowGCFlags_$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cd7K8: // global
           I64[Sp - 16] = block_cd7qi_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ud7Kh; else goto cd7qj;
       ud7Kh: // global
           call _cd7qi(R1) args: 0, res: 0, upd: 0;
       cd7qj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowGCFlags_$cshowsPrec_info" {
     GHC.RTS.Flags.$fShowGCFlags_$cshowsPrec_info:
         const GHC.RTS.Flags.$fShowGCFlags_$cshowsPrec_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const ud7Ks_srtd;
 },
 section ""relreadonly" . ud7Kt_srtd" {
     ud7Kt_srtd:
         const ScWiZ_srt+384;
         const 44;
         const 16501267501057;
 },
 _cd7qi() //  [R1]
         { []
         }
     {offset
       cd7qi: // global
           I64[Sp - 208] = block_cd7qn_info;
           _scVlf::P64 = P64[R1 + 7];
           _scVlg::P64 = P64[R1 + 15];
           _scVlh::P64 = P64[R1 + 23];
           _scVli::P64 = P64[R1 + 31];
           _scVlj::P64 = P64[R1 + 39];
           _scVlk::P64 = P64[R1 + 47];
           _scVll::P64 = P64[R1 + 55];
           _scVlm::P64 = P64[R1 + 63];
           _scVln::P64 = P64[R1 + 71];
           _scVlo::P64 = P64[R1 + 79];
           _scVlp::P64 = P64[R1 + 87];
           _scVlq::P64 = P64[R1 + 95];
           _scVlr::P64 = P64[R1 + 103];
           _scVls::P64 = P64[R1 + 111];
           _scVlt::P64 = P64[R1 + 119];
           _scVlu::P64 = P64[R1 + 127];
           _scVlv::P64 = P64[R1 + 135];
           _scVlw::P64 = P64[R1 + 143];
           _scVlx::P64 = P64[R1 + 151];
           _scVly::P64 = P64[R1 + 159];
           _scVlz::P64 = P64[R1 + 167];
           _scVlA::P64 = P64[R1 + 175];
           _scVlB::P64 = P64[R1 + 183];
           _scVlC::P64 = P64[R1 + 191];
           _scVlD::P64 = P64[R1 + 199];
           _scVlE::P64 = P64[R1 + 207];
           _scVlF::P64 = P64[R1 + 215];
           R1 = P64[Sp + 8];
           P64[Sp - 200] = _scVlh::P64;
           P64[Sp - 192] = _scVli::P64;
           P64[Sp - 184] = _scVlj::P64;
           P64[Sp - 176] = _scVlk::P64;
           P64[Sp - 168] = _scVll::P64;
           P64[Sp - 160] = _scVlm::P64;
           P64[Sp - 152] = _scVln::P64;
           P64[Sp - 144] = _scVlo::P64;
           P64[Sp - 136] = _scVlp::P64;
           P64[Sp - 128] = _scVlq::P64;
           P64[Sp - 120] = _scVlr::P64;
           P64[Sp - 112] = _scVls::P64;
           P64[Sp - 104] = _scVlt::P64;
           P64[Sp - 96] = _scVlu::P64;
           P64[Sp - 88] = _scVlv::P64;
           P64[Sp - 80] = _scVlw::P64;
           P64[Sp - 72] = _scVlx::P64;
           P64[Sp - 64] = _scVly::P64;
           P64[Sp - 56] = _scVlz::P64;
           P64[Sp - 48] = _scVlA::P64;
           P64[Sp - 40] = _scVlB::P64;
           P64[Sp - 32] = _scVlC::P64;
           P64[Sp - 24] = _scVlD::P64;
           P64[Sp - 16] = _scVlE::P64;
           P64[Sp - 8] = _scVlF::P64;
           P64[Sp] = _scVlg::P64;
           P64[Sp + 8] = _scVlf::P64;
           Sp = Sp - 208;
           if (R1 & 7 != 0) goto ud7Kg; else goto cd7qo;
       ud7Kg: // global
           call _cd7qn(R1) args: 0, res: 0, upd: 0;
       cd7qo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cd7qi_info" {
     block_cd7qi_info:
         const _cd7qi;
         const 1;
         const 18446744069414584350;
         const ud7Kt_srtd;
 },
 section ""relreadonly" . ud7Ku_srtd" {
     ud7Ku_srtd:
         const ScWiZ_srt+384;
         const 44;
         const 16501267501057;
 },
 _cd7qn() //  [R1]
         { []
         }
     {offset
       cd7qn: // global
           Hp = Hp + 360;
           if (Hp > HpLim) (likely: False) goto cd7Kc; else goto cd7Kb;
       cd7Kc: // global
           HpAlloc = 360;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cd7Kb: // global
           _scVlH::I64 = I64[R1 + 7];
           I64[Hp - 352] = f8_scVlI_info;
           P64[Hp - 336] = P64[Sp + 216];
           I64[Hp - 328] = f9_scVlJ_info;
           P64[Hp - 312] = P64[Sp + 96];
           I64[Hp - 304] = f10_scVlM_info;
           P64[Hp - 288] = P64[Sp + 104];
           I64[Hp - 280] = f11_scVlP_info;
           P64[Hp - 264] = P64[Sp + 136];
           I64[Hp - 256] = w1_scVlS_info;
           P64[Hp - 240] = P64[Sp + 160];
           I64[Hp - 232] = g1_scVlX_info;
           P64[Hp - 224] = P64[Sp + 208];
           P64[Hp - 216] = P64[Sp + 8];
           P64[Hp - 208] = P64[Sp + 16];
           P64[Hp - 200] = P64[Sp + 24];
           P64[Hp - 192] = P64[Sp + 32];
           P64[Hp - 184] = P64[Sp + 40];
           P64[Hp - 176] = P64[Sp + 48];
           P64[Hp - 168] = P64[Sp + 56];
           P64[Hp - 160] = P64[Sp + 64];
           P64[Hp - 152] = P64[Sp + 72];
           P64[Hp - 144] = P64[Sp + 80];
           P64[Hp - 136] = P64[Sp + 88];
           P64[Hp - 128] = P64[Sp + 112];
           P64[Hp - 120] = P64[Sp + 120];
           P64[Hp - 112] = P64[Sp + 128];
           P64[Hp - 104] = P64[Sp + 144];
           P64[Hp - 96] = P64[Sp + 152];
           P64[Hp - 88] = P64[Sp + 168];
           P64[Hp - 80] = P64[Sp + 176];
           P64[Hp - 72] = P64[Sp + 184];
           P64[Hp - 64] = P64[Sp + 192];
           P64[Hp - 56] = P64[Sp + 200];
           P64[Hp - 48] = Hp - 352;
           P64[Hp - 40] = Hp - 328;
           P64[Hp - 32] = Hp - 304;
           P64[Hp - 24] = Hp - 280;
           P64[Hp - 16] = Hp - 256;
           _cd7rB::P64 = Hp - 231;
           if (%MO_S_Lt_W64(_scVlH::I64, 11)) goto cd7Ke; else goto cd7Kf;
       cd7Ke: // global
           I64[Hp - 8] = sat_scVoW_info;
           P64[Hp] = _cd7rB::P64;
           R1 = Hp - 7;
           Sp = Sp + 224;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cd7Kf: // global
           I64[Hp - 8] = sat_scVp1_info;
           P64[Hp] = _cd7rB::P64;
           R1 = Hp - 7;
           Sp = Sp + 224;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd7qn_info" {
     block_cd7qn_info:
         const _cd7qn;
         const 27;
         const 18446744069414584350;
         const ud7Ku_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.580418828 UTC

[section ""data" . GHC.RTS.Flags.$fShowGCFlags_$cshow_closure" {
     GHC.RTS.Flags.$fShowGCFlags_$cshow_closure:
         const GHC.RTS.Flags.$fShowGCFlags_$cshow_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowGCFlags_$cshow_entry() //  [R2]
         { []
         }
     {offset
       cd7XI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd7XJ; else goto cd7XK;
       cd7XJ: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.$fShowGCFlags_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd7XK: // global
           R3 = R2;
           R2 = GHC.RTS.Flags.$fEnumDoCostCentres10_closure+1;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = GHC.Types.[]_closure+1;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fShowGCFlags_$cshowsPrec_entry(R3,
                                                              R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowGCFlags_$cshow_info" {
     GHC.RTS.Flags.$fShowGCFlags_$cshow_info:
         const GHC.RTS.Flags.$fShowGCFlags_$cshow_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const ScWiZ_srt+736;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.584800314 UTC

[section ""data" . GHC.RTS.Flags.$fShowGCFlags1_closure" {
     GHC.RTS.Flags.$fShowGCFlags1_closure:
         const GHC.RTS.Flags.$fShowGCFlags1_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowGCFlags1_entry() //  [R2]
         { []
         }
     {offset
       cd7XU: // global
           R3 = R2;
           R2 = GHC.RTS.Flags.$fEnumDoCostCentres10_closure+1;
           call GHC.RTS.Flags.$fShowGCFlags_$cshowsPrec_entry(R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowGCFlags1_info" {
     GHC.RTS.Flags.$fShowGCFlags1_info:
         const GHC.RTS.Flags.$fShowGCFlags1_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const ScWiZ_srt+736;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.588334511 UTC

[section ""data" . GHC.RTS.Flags.$fShowGCFlags_$cshowList_closure" {
     GHC.RTS.Flags.$fShowGCFlags_$cshowList_closure:
         const GHC.RTS.Flags.$fShowGCFlags_$cshowList_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowGCFlags_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       cd7Y5: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.RTS.Flags.$fShowGCFlags1_closure+1;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowGCFlags_$cshowList_info" {
     GHC.RTS.Flags.$fShowGCFlags_$cshowList_info:
         const GHC.RTS.Flags.$fShowGCFlags_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const ScWiZ_srt+752;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.592088111 UTC

[section ""data" . GHC.RTS.Flags.$fShowGCFlags_closure" {
     GHC.RTS.Flags.$fShowGCFlags_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.RTS.Flags.$fShowGCFlags_$cshowsPrec_closure+2;
         const GHC.RTS.Flags.$fShowGCFlags_$cshow_closure+1;
         const GHC.RTS.Flags.$fShowGCFlags_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.593953703 UTC

[section ""cstring" . lvl86_rcV6v_bytes" {
     lvl86_rcV6v_bytes:
         I8[] [82,84,83,70,108,97,103,115,32,123]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.595584727 UTC

[section ""cstring" . lvl87_rcV6w_bytes" {
     lvl87_rcV6w_bytes:
         I8[] [103,99,70,108,97,103,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.597200356 UTC

[section ""cstring" . lvl88_rcV6x_bytes" {
     lvl88_rcV6x_bytes:
         I8[] [99,111,110,99,117,114,114,101,110,116,70,108,97,103,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.59957116 UTC

[section ""cstring" . lvl89_rcV6y_bytes" {
     lvl89_rcV6y_bytes:
         I8[] [109,105,115,99,70,108,97,103,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.601985373 UTC

[section ""cstring" . lvl90_rcV6z_bytes" {
     lvl90_rcV6z_bytes:
         I8[] [100,101,98,117,103,70,108,97,103,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.604530205 UTC

[section ""cstring" . lvl91_rcV6A_bytes" {
     lvl91_rcV6A_bytes:
         I8[] [99,111,115,116,67,101,110,116,114,101,70,108,97,103,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.607593621 UTC

[section ""cstring" . lvl92_rcV6B_bytes" {
     lvl92_rcV6B_bytes:
         I8[] [112,114,111,102,105,108,105,110,103,70,108,97,103,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.610208927 UTC

[section ""cstring" . lvl93_rcV6C_bytes" {
     lvl93_rcV6C_bytes:
         I8[] [116,114,97,99,101,70,108,97,103,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.612655271 UTC

[section ""cstring" . lvl94_rcV6D_bytes" {
     lvl94_rcV6D_bytes:
         I8[] [116,105,99,107,121,70,108,97,103,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.615399688 UTC

[section ""cstring" . lvl95_rcV6E_bytes" {
     lvl95_rcV6E_bytes:
         I8[] [112,97,114,70,108,97,103,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.658473902 UTC

[section ""data" . GHC.RTS.Flags.$w$cshowsPrec7_closure" {
     GHC.RTS.Flags.$w$cshowsPrec7_closure:
         const GHC.RTS.Flags.$w$cshowsPrec7_info;
         const 0;
 },
 GHC.RTS.Flags.$w$cshowsPrec7_slow() //  [R1]
         { []
         }
     {offset
       cd7Yo: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.RTS.Flags.$w$cshowsPrec7_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2,
                                                   R1) args: 48, res: 0, upd: 8;
     }
 },
 f8_scVpf_entry() //  [R1]
         { []
         }
     {offset
       cd7Yw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd7Yx; else goto cd7Yy;
       cd7Yx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7Yy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.RTS.Flags.$fEnumDoCostCentres10_closure+1;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fShowGCFlags_$cshowsPrec_entry(R3,
                                                              R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f8_scVpf_info" {
     f8_scVpf_info:
         const f8_scVpf_entry;
         const 1;
         const 4294967312;
         const ScWiZ_srt+736;
 },
 f9_scVpg_entry() //  [R1]
         { []
         }
     {offset
       cd7YG: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cd7YH; else goto cd7YI;
       cd7YH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7YI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cd7YD_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ud7YM; else goto cd7YE;
       ud7YM: // global
           call _cd7YD(R1) args: 0, res: 0, upd: 0;
       cd7YE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . f9_scVpg_info" {
     f9_scVpg_info:
         const f9_scVpg_entry;
         const 1;
         const 4294967312;
         const ScWiZ_srt+616;
 },
 _cd7YD() //  [R1]
         { []
         }
     {offset
       cd7YD: // global
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = 0;
           Sp = Sp + 8;
           call GHC.RTS.Flags.$w$cshowsPrec2_entry(R4,
                                                   R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd7YD_info" {
     block_cd7YD_info:
         const _cd7YD;
         const 0;
         const 4294967326;
         const ScWiZ_srt+616;
 },
 f10_scVpk_entry() //  [R1]
         { []
         }
     {offset
       cd7YU: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cd7YV; else goto cd7YW;
       cd7YV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7YW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cd7YR_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ud7Z0; else goto cd7YS;
       ud7Z0: // global
           call _cd7YR(R1) args: 0, res: 0, upd: 0;
       cd7YS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . f10_scVpk_info" {
     f10_scVpk_info:
         const f10_scVpk_entry;
         const 1;
         const 4294967312;
         const ScWiZ_srt+584;
 },
 _cd7YR() //  [R1]
         { []
         }
     {offset
       cd7YR: // global
           R6 = P64[R1 + 31];
           R5 = P64[R1 + 23];
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = 0;
           P64[Sp - 16] = P64[R1 + 39];
           P64[Sp - 8] = P64[R1 + 47];
           P64[Sp] = P64[R1 + 55];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$cshowsPrec6_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd7YR_info" {
     block_cd7YR_info:
         const _cd7YR;
         const 0;
         const 4294967326;
         const ScWiZ_srt+584;
 },
 f11_scVpt_entry() //  [R1]
         { []
         }
     {offset
       cd7Z5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd7Z6; else goto cd7Z7;
       cd7Z6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7Z7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.RTS.Flags.$fEnumDoCostCentres10_closure+1;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fShowProfFlags_$cshowsPrec_entry(R3,
                                                                R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f11_scVpt_info" {
     f11_scVpt_info:
         const f11_scVpt_entry;
         const 1;
         const 4294967312;
         const ScWiZ_srt+760;
 },
 f12_scVpu_entry() //  [R1]
         { []
         }
     {offset
       cd7Zf: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cd7Zg; else goto cd7Zh;
       cd7Zg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd7Zh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cd7Zc_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ud7Zl; else goto cd7Zd;
       ud7Zl: // global
           call _cd7Zc(R1) args: 0, res: 0, upd: 0;
       cd7Zd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . f12_scVpu_info" {
     f12_scVpu_info:
         const f12_scVpu_entry;
         const 1;
         const 4294967312;
         const ScWiZ_srt+768;
 },
 _cd7Zc() //  [R1]
         { []
         }
     {offset
       cd7Zc: // global
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = 0;
           Sp = Sp + 8;
           call GHC.RTS.Flags.$w$cshowsPrec8_entry(R4,
                                                   R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd7Zc_info" {
     block_cd7Zc_info:
         const _cd7Zc;
         const 0;
         const 4294967326;
         const ScWiZ_srt+768;
 },
 sat_scVpM_entry() //  [R1]
         { []
         }
     {offset
       cd81l: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd81m; else goto cd81n;
       cd81m: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd81n: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.RTS.Flags.$fShowCCFlags2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVpM_info" {
     sat_scVpM_info:
         const sat_scVpM_entry;
         const 1;
         const 16;
 },
 sat_scVpN_entry() //  [R1]
         { []
         }
     {offset
       cd81o: // global
           _scVpN::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd81p; else goto cd81q;
       cd81q: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cd81s; else goto cd81r;
       cd81s: // global
           HpAlloc = 24;
           goto cd81p;
       cd81p: // global
           R1 = _scVpN::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd81r: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVpN::P64;
           _scVpe::P64 = P64[_scVpN::P64 + 16];
           _scVpz::P64 = P64[_scVpN::P64 + 24];
           I64[Hp - 16] = sat_scVpM_info;
           P64[Hp] = _scVpz::P64;
           R4 = Hp - 16;
           R3 = _scVpe::P64;
           R2 = GHC.RTS.Flags.$fEnumDoCostCentres10_closure+1;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fShowParFlags_$cshowsPrec_entry(R4,
                                                               R3,
                                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVpN_info" {
     sat_scVpN_info:
         const sat_scVpN_entry;
         const 2;
         const 4294967314;
         const ScWiZ_srt+776;
 },
 sat_scVpO_entry() //  [R1]
         { []
         }
     {offset
       cd81t: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cd81x; else goto cd81w;
       cd81x: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd81w: // global
           _scVpe::P64 = P64[R1 + 16];
           _scVpz::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_scVpN_info;
           P64[Hp - 8] = _scVpe::P64;
           P64[Hp] = _scVpz::P64;
           R3 = Hp - 24;
           R2 = lvl95_rcV6E_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVpO_info" {
     sat_scVpO_info:
         const sat_scVpO_entry;
         const 2;
         const 4294967314;
         const ScWiZ_srt+776;
 },
 section ""relreadonly" . ud84a_srtd" {
     ud84a_srtd:
         const ScWiZ_srt+480;
         const 38;
         const 137438953473;
 },
 sat_scVpP_entry() //  [R1]
         { []
         }
     {offset
       cd81y: // global
           _scVpP::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd81z; else goto cd81A;
       cd81A: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cd81C; else goto cd81B;
       cd81C: // global
           HpAlloc = 32;
           goto cd81z;
       cd81z: // global
           R1 = _scVpP::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd81B: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVpP::P64;
           _scVpe::P64 = P64[_scVpP::P64 + 16];
           _scVpz::P64 = P64[_scVpP::P64 + 24];
           I64[Hp - 24] = sat_scVpO_info;
           P64[Hp - 8] = _scVpe::P64;
           P64[Hp] = _scVpz::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVpP_info" {
     sat_scVpP_info:
         const sat_scVpP_entry;
         const 2;
         const 18446744069414584338;
         const ud84a_srtd;
 },
 section ""relreadonly" . ud84b_srtd" {
     ud84b_srtd:
         const ScWiZ_srt+480;
         const 38;
         const 137438953473;
 },
 sat_scVpQ_entry() //  [R1]
         { []
         }
     {offset
       cd81D: // global
           _scVpQ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd81E; else goto cd81F;
       cd81F: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cd81H; else goto cd81G;
       cd81H: // global
           HpAlloc = 32;
           goto cd81E;
       cd81E: // global
           R1 = _scVpQ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd81G: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVpQ::P64;
           _scVpe::P64 = P64[_scVpQ::P64 + 16];
           _scVpu::P64 = P64[_scVpQ::P64 + 24];
           _scVpz::P64 = P64[_scVpQ::P64 + 32];
           I64[Hp - 24] = sat_scVpP_info;
           P64[Hp - 8] = _scVpe::P64;
           P64[Hp] = _scVpz::P64;
           R2 = Hp - 24;
           R1 = _scVpu::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVpQ_info" {
     sat_scVpQ_info:
         const sat_scVpQ_entry;
         const 3;
         const 18446744069414584335;
         const ud84b_srtd;
 },
 section ""relreadonly" . ud84c_srtd" {
     ud84c_srtd:
         const ScWiZ_srt+480;
         const 38;
         const 137438953473;
 },
 sat_scVpR_entry() //  [R1]
         { []
         }
     {offset
       cd81I: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cd81M; else goto cd81L;
       cd81M: // global
           HpAlloc = 40;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd81L: // global
           _scVpe::P64 = P64[R1 + 16];
           _scVpu::P64 = P64[R1 + 24];
           _scVpz::P64 = P64[R1 + 32];
           I64[Hp - 32] = sat_scVpQ_info;
           P64[Hp - 16] = _scVpe::P64;
           P64[Hp - 8] = _scVpu::P64;
           P64[Hp] = _scVpz::P64;
           R3 = Hp - 32;
           R2 = lvl94_rcV6D_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVpR_info" {
     sat_scVpR_info:
         const sat_scVpR_entry;
         const 3;
         const 18446744069414584335;
         const ud84c_srtd;
 },
 section ""relreadonly" . ud84d_srtd" {
     ud84d_srtd:
         const ScWiZ_srt+480;
         const 38;
         const 137438953473;
 },
 sat_scVpS_entry() //  [R1]
         { []
         }
     {offset
       cd81N: // global
           _scVpS::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd81O; else goto cd81P;
       cd81P: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cd81R; else goto cd81Q;
       cd81R: // global
           HpAlloc = 40;
           goto cd81O;
       cd81O: // global
           R1 = _scVpS::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd81Q: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVpS::P64;
           _scVpe::P64 = P64[_scVpS::P64 + 16];
           _scVpu::P64 = P64[_scVpS::P64 + 24];
           _scVpz::P64 = P64[_scVpS::P64 + 32];
           I64[Hp - 32] = sat_scVpR_info;
           P64[Hp - 16] = _scVpe::P64;
           P64[Hp - 8] = _scVpu::P64;
           P64[Hp] = _scVpz::P64;
           R3 = Hp - 32;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVpS_info" {
     sat_scVpS_info:
         const sat_scVpS_entry;
         const 3;
         const 18446744069414584335;
         const ud84d_srtd;
 },
 section ""relreadonly" . ud84e_srtd" {
     ud84e_srtd:
         const ScWiZ_srt+272;
         const 64;
         const 9223372036921884673;
 },
 sat_scVpT_entry() //  [R1]
         { []
         }
     {offset
       cd81S: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cd81T; else goto cd81U;
       cd81T: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd81U: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_cd80O_info;
           _scVpe::P64 = P64[R1 + 24];
           _scVpu::P64 = P64[R1 + 32];
           _scVpz::P64 = P64[R1 + 40];
           R1 = P64[R1 + 16];
           P64[Sp - 40] = _scVpe::P64;
           P64[Sp - 32] = _scVpu::P64;
           P64[Sp - 24] = _scVpz::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto ud81Y; else goto cd80P;
       ud81Y: // global
           call _cd80O(R1) args: 0, res: 0, upd: 0;
       cd80P: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVpT_info" {
     sat_scVpT_info:
         const sat_scVpT_entry;
         const 4;
         const 18446744069414584335;
         const ud84e_srtd;
 },
 section ""relreadonly" . ud84f_srtd" {
     ud84f_srtd:
         const ScWiZ_srt+272;
         const 64;
         const 9223372036921884673;
 },
 _cd80O() //  [R1]
         { []
         }
     {offset
       cd80O: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cd81X; else goto cd81W;
       cd81X: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cd81W: // global
           _scVpF::P64 = P64[R1 + 7];
           _scVpG::P64 = P64[R1 + 15];
           _scVpH::P64 = P64[R1 + 23];
           _scVpI::P64 = P64[R1 + 31];
           _scVpJ::P64 = P64[R1 + 39];
           _scVpK::P64 = P64[R1 + 47];
           _scVpL::P64 = P64[R1 + 55];
           I64[Hp - 32] = sat_scVpS_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 24];
           R6 = _scVpI::P64;
           R5 = _scVpH::P64;
           R4 = _scVpG::P64;
           R3 = _scVpF::P64;
           R2 = 0;
           P64[Sp] = _scVpJ::P64;
           P64[Sp + 8] = _scVpK::P64;
           P64[Sp + 16] = _scVpL::P64;
           P64[Sp + 24] = Hp - 32;
           call GHC.RTS.Flags.$w$cshowsPrec9_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd80O_info" {
     block_cd80O_info:
         const _cd80O;
         const 3;
         const 18446744069414584350;
         const ud84f_srtd;
 },
 section ""relreadonly" . ud84g_srtd" {
     ud84g_srtd:
         const ScWiZ_srt+272;
         const 64;
         const 9223372036921884673;
 },
 sat_scVpU_entry() //  [R1]
         { []
         }
     {offset
       cd81Z: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cd823; else goto cd822;
       cd823: // global
           HpAlloc = 48;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd822: // global
           _scVpc::P64 = P64[R1 + 16];
           _scVpe::P64 = P64[R1 + 24];
           _scVpu::P64 = P64[R1 + 32];
           _scVpz::P64 = P64[R1 + 40];
           I64[Hp - 40] = sat_scVpT_info;
           P64[Hp - 24] = _scVpc::P64;
           P64[Hp - 16] = _scVpe::P64;
           P64[Hp - 8] = _scVpu::P64;
           P64[Hp] = _scVpz::P64;
           R3 = Hp - 40;
           R2 = lvl93_rcV6C_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVpU_info" {
     sat_scVpU_info:
         const sat_scVpU_entry;
         const 4;
         const 18446744069414584335;
         const ud84g_srtd;
 },
 section ""relreadonly" . ud84h_srtd" {
     ud84h_srtd:
         const ScWiZ_srt+272;
         const 64;
         const 9223372036921884673;
 },
 sat_scVpV_entry() //  [R1]
         { []
         }
     {offset
       cd824: // global
           _scVpV::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd825; else goto cd826;
       cd826: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cd828; else goto cd827;
       cd828: // global
           HpAlloc = 48;
           goto cd825;
       cd825: // global
           R1 = _scVpV::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd827: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVpV::P64;
           _scVpc::P64 = P64[_scVpV::P64 + 16];
           _scVpe::P64 = P64[_scVpV::P64 + 24];
           _scVpu::P64 = P64[_scVpV::P64 + 32];
           _scVpz::P64 = P64[_scVpV::P64 + 40];
           I64[Hp - 40] = sat_scVpU_info;
           P64[Hp - 24] = _scVpc::P64;
           P64[Hp - 16] = _scVpe::P64;
           P64[Hp - 8] = _scVpu::P64;
           P64[Hp] = _scVpz::P64;
           R3 = Hp - 40;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVpV_info" {
     sat_scVpV_info:
         const sat_scVpV_entry;
         const 4;
         const 18446744069414584335;
         const ud84h_srtd;
 },
 section ""relreadonly" . ud84i_srtd" {
     ud84i_srtd:
         const ScWiZ_srt+272;
         const 64;
         const 9223372036921884673;
 },
 sat_scVpW_entry() //  [R1]
         { []
         }
     {offset
       cd829: // global
           _scVpW::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd82a; else goto cd82b;
       cd82b: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cd82d; else goto cd82c;
       cd82d: // global
           HpAlloc = 48;
           goto cd82a;
       cd82a: // global
           R1 = _scVpW::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd82c: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVpW::P64;
           _scVpc::P64 = P64[_scVpW::P64 + 16];
           _scVpe::P64 = P64[_scVpW::P64 + 24];
           _scVpt::P64 = P64[_scVpW::P64 + 32];
           _scVpu::P64 = P64[_scVpW::P64 + 40];
           _scVpz::P64 = P64[_scVpW::P64 + 48];
           I64[Hp - 40] = sat_scVpV_info;
           P64[Hp - 24] = _scVpc::P64;
           P64[Hp - 16] = _scVpe::P64;
           P64[Hp - 8] = _scVpu::P64;
           P64[Hp] = _scVpz::P64;
           R2 = Hp - 40;
           R1 = _scVpt::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVpW_info" {
     sat_scVpW_info:
         const sat_scVpW_entry;
         const 5;
         const 18446744069414584335;
         const ud84i_srtd;
 },
 section ""relreadonly" . ud84j_srtd" {
     ud84j_srtd:
         const ScWiZ_srt+272;
         const 64;
         const 9223372036921884673;
 },
 sat_scVpX_entry() //  [R1]
         { []
         }
     {offset
       cd82e: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cd82i; else goto cd82h;
       cd82i: // global
           HpAlloc = 56;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd82h: // global
           _scVpc::P64 = P64[R1 + 16];
           _scVpe::P64 = P64[R1 + 24];
           _scVpt::P64 = P64[R1 + 32];
           _scVpu::P64 = P64[R1 + 40];
           _scVpz::P64 = P64[R1 + 48];
           I64[Hp - 48] = sat_scVpW_info;
           P64[Hp - 32] = _scVpc::P64;
           P64[Hp - 24] = _scVpe::P64;
           P64[Hp - 16] = _scVpt::P64;
           P64[Hp - 8] = _scVpu::P64;
           P64[Hp] = _scVpz::P64;
           R3 = Hp - 48;
           R2 = lvl92_rcV6B_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVpX_info" {
     sat_scVpX_info:
         const sat_scVpX_entry;
         const 5;
         const 18446744069414584335;
         const ud84j_srtd;
 },
 section ""relreadonly" . ud84k_srtd" {
     ud84k_srtd:
         const ScWiZ_srt+272;
         const 64;
         const 9223372036921884673;
 },
 sat_scVpY_entry() //  [R1]
         { []
         }
     {offset
       cd82j: // global
           _scVpY::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd82k; else goto cd82l;
       cd82l: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cd82n; else goto cd82m;
       cd82n: // global
           HpAlloc = 56;
           goto cd82k;
       cd82k: // global
           R1 = _scVpY::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd82m: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVpY::P64;
           _scVpc::P64 = P64[_scVpY::P64 + 16];
           _scVpe::P64 = P64[_scVpY::P64 + 24];
           _scVpt::P64 = P64[_scVpY::P64 + 32];
           _scVpu::P64 = P64[_scVpY::P64 + 40];
           _scVpz::P64 = P64[_scVpY::P64 + 48];
           I64[Hp - 48] = sat_scVpX_info;
           P64[Hp - 32] = _scVpc::P64;
           P64[Hp - 24] = _scVpe::P64;
           P64[Hp - 16] = _scVpt::P64;
           P64[Hp - 8] = _scVpu::P64;
           P64[Hp] = _scVpz::P64;
           R3 = Hp - 48;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVpY_info" {
     sat_scVpY_info:
         const sat_scVpY_entry;
         const 5;
         const 18446744069414584335;
         const ud84k_srtd;
 },
 section ""relreadonly" . ud84l_srtd" {
     ud84l_srtd:
         const ScWiZ_srt+272;
         const 64;
         const 9223372037056102401;
 },
 sat_scVpZ_entry() //  [R1]
         { []
         }
     {offset
       cd82o: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cd82p; else goto cd82q;
       cd82p: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd82q: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 64] = block_cd80l_info;
           _scVpc::P64 = P64[R1 + 24];
           _scVpe::P64 = P64[R1 + 32];
           _scVpt::P64 = P64[R1 + 40];
           _scVpu::P64 = P64[R1 + 48];
           _scVpz::P64 = P64[R1 + 56];
           R1 = P64[R1 + 16];
           P64[Sp - 56] = _scVpc::P64;
           P64[Sp - 48] = _scVpe::P64;
           P64[Sp - 40] = _scVpt::P64;
           P64[Sp - 32] = _scVpu::P64;
           P64[Sp - 24] = _scVpz::P64;
           Sp = Sp - 64;
           if (R1 & 7 != 0) goto ud82u; else goto cd80m;
       ud82u: // global
           call _cd80l(R1) args: 0, res: 0, upd: 0;
       cd80m: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVpZ_info" {
     sat_scVpZ_info:
         const sat_scVpZ_entry;
         const 6;
         const 18446744069414584335;
         const ud84l_srtd;
 },
 section ""relreadonly" . ud84m_srtd" {
     ud84m_srtd:
         const ScWiZ_srt+272;
         const 64;
         const 9223372037056102401;
 },
 _cd80l() //  [R1]
         { []
         }
     {offset
       cd80l: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cd82t; else goto cd82s;
       cd82t: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cd82s: // global
           _scVpB::P64 = P64[R1 + 7];
           _scVpC::P64 = P64[R1 + 15];
           _scVpD::P64 = P64[R1 + 23];
           I64[Hp - 48] = sat_scVpY_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = P64[Sp + 40];
           R6 = Hp - 48;
           R5 = _scVpD::P64;
           R4 = _scVpC::P64;
           R3 = _scVpB::P64;
           R2 = 0;
           Sp = Sp + 48;
           call GHC.RTS.Flags.$w$cshowsPrec_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cd80l_info" {
     block_cd80l_info:
         const _cd80l;
         const 5;
         const 18446744069414584350;
         const ud84m_srtd;
 },
 section ""relreadonly" . ud84n_srtd" {
     ud84n_srtd:
         const ScWiZ_srt+272;
         const 64;
         const 9223372037056102401;
 },
 sat_scVq0_entry() //  [R1]
         { []
         }
     {offset
       cd82v: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cd82z; else goto cd82y;
       cd82z: // global
           HpAlloc = 64;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd82y: // global
           _scVpa::P64 = P64[R1 + 16];
           _scVpc::P64 = P64[R1 + 24];
           _scVpe::P64 = P64[R1 + 32];
           _scVpt::P64 = P64[R1 + 40];
           _scVpu::P64 = P64[R1 + 48];
           _scVpz::P64 = P64[R1 + 56];
           I64[Hp - 56] = sat_scVpZ_info;
           P64[Hp - 40] = _scVpa::P64;
           P64[Hp - 32] = _scVpc::P64;
           P64[Hp - 24] = _scVpe::P64;
           P64[Hp - 16] = _scVpt::P64;
           P64[Hp - 8] = _scVpu::P64;
           P64[Hp] = _scVpz::P64;
           R3 = Hp - 56;
           R2 = lvl91_rcV6A_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVq0_info" {
     sat_scVq0_info:
         const sat_scVq0_entry;
         const 6;
         const 18446744069414584335;
         const ud84n_srtd;
 },
 section ""relreadonly" . ud84o_srtd" {
     ud84o_srtd:
         const ScWiZ_srt+272;
         const 64;
         const 9223372037056102401;
 },
 sat_scVq1_entry() //  [R1]
         { []
         }
     {offset
       cd82A: // global
           _scVq1::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd82B; else goto cd82C;
       cd82C: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cd82E; else goto cd82D;
       cd82E: // global
           HpAlloc = 64;
           goto cd82B;
       cd82B: // global
           R1 = _scVq1::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd82D: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVq1::P64;
           _scVpa::P64 = P64[_scVq1::P64 + 16];
           _scVpc::P64 = P64[_scVq1::P64 + 24];
           _scVpe::P64 = P64[_scVq1::P64 + 32];
           _scVpt::P64 = P64[_scVq1::P64 + 40];
           _scVpu::P64 = P64[_scVq1::P64 + 48];
           _scVpz::P64 = P64[_scVq1::P64 + 56];
           I64[Hp - 56] = sat_scVq0_info;
           P64[Hp - 40] = _scVpa::P64;
           P64[Hp - 32] = _scVpc::P64;
           P64[Hp - 24] = _scVpe::P64;
           P64[Hp - 16] = _scVpt::P64;
           P64[Hp - 8] = _scVpu::P64;
           P64[Hp] = _scVpz::P64;
           R3 = Hp - 56;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVq1_info" {
     sat_scVq1_info:
         const sat_scVq1_entry;
         const 6;
         const 18446744069414584335;
         const ud84o_srtd;
 },
 section ""relreadonly" . ud84p_srtd" {
     ud84p_srtd:
         const ScWiZ_srt+272;
         const 64;
         const 9223372174495055873;
 },
 sat_scVq2_entry() //  [R1]
         { []
         }
     {offset
       cd82F: // global
           _scVq2::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd82G; else goto cd82H;
       cd82H: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cd82J; else goto cd82I;
       cd82J: // global
           HpAlloc = 64;
           goto cd82G;
       cd82G: // global
           R1 = _scVq2::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd82I: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVq2::P64;
           _scVp9::P64 = P64[_scVq2::P64 + 16];
           _scVpa::P64 = P64[_scVq2::P64 + 24];
           _scVpc::P64 = P64[_scVq2::P64 + 32];
           _scVpe::P64 = P64[_scVq2::P64 + 40];
           _scVpt::P64 = P64[_scVq2::P64 + 48];
           _scVpu::P64 = P64[_scVq2::P64 + 56];
           _scVpz::P64 = P64[_scVq2::P64 + 64];
           I64[Hp - 56] = sat_scVq1_info;
           P64[Hp - 40] = _scVpa::P64;
           P64[Hp - 32] = _scVpc::P64;
           P64[Hp - 24] = _scVpe::P64;
           P64[Hp - 16] = _scVpt::P64;
           P64[Hp - 8] = _scVpu::P64;
           P64[Hp] = _scVpz::P64;
           R4 = Hp - 56;
           R3 = _scVp9::P64;
           R2 = GHC.RTS.Flags.$fEnumDoCostCentres10_closure+1;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fShowDebugFlags_$cshowsPrec_entry(R4,
                                                                 R3,
                                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVq2_info" {
     sat_scVq2_info:
         const sat_scVq2_entry;
         const 7;
         const 18446744069414584335;
         const ud84p_srtd;
 },
 section ""relreadonly" . ud84q_srtd" {
     ud84q_srtd:
         const ScWiZ_srt+272;
         const 64;
         const 9223372174495055873;
 },
 sat_scVq3_entry() //  [R1]
         { []
         }
     {offset
       cd82K: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cd82O; else goto cd82N;
       cd82O: // global
           HpAlloc = 72;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd82N: // global
           _scVp9::P64 = P64[R1 + 16];
           _scVpa::P64 = P64[R1 + 24];
           _scVpc::P64 = P64[R1 + 32];
           _scVpe::P64 = P64[R1 + 40];
           _scVpt::P64 = P64[R1 + 48];
           _scVpu::P64 = P64[R1 + 56];
           _scVpz::P64 = P64[R1 + 64];
           I64[Hp - 64] = sat_scVq2_info;
           P64[Hp - 48] = _scVp9::P64;
           P64[Hp - 40] = _scVpa::P64;
           P64[Hp - 32] = _scVpc::P64;
           P64[Hp - 24] = _scVpe::P64;
           P64[Hp - 16] = _scVpt::P64;
           P64[Hp - 8] = _scVpu::P64;
           P64[Hp] = _scVpz::P64;
           R3 = Hp - 64;
           R2 = lvl90_rcV6z_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVq3_info" {
     sat_scVq3_info:
         const sat_scVq3_entry;
         const 7;
         const 18446744069414584335;
         const ud84q_srtd;
 },
 section ""relreadonly" . ud84r_srtd" {
     ud84r_srtd:
         const ScWiZ_srt+272;
         const 64;
         const 9223372174495055873;
 },
 sat_scVq4_entry() //  [R1]
         { []
         }
     {offset
       cd82P: // global
           _scVq4::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd82Q; else goto cd82R;
       cd82R: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cd82T; else goto cd82S;
       cd82T: // global
           HpAlloc = 72;
           goto cd82Q;
       cd82Q: // global
           R1 = _scVq4::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd82S: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVq4::P64;
           _scVp9::P64 = P64[_scVq4::P64 + 16];
           _scVpa::P64 = P64[_scVq4::P64 + 24];
           _scVpc::P64 = P64[_scVq4::P64 + 32];
           _scVpe::P64 = P64[_scVq4::P64 + 40];
           _scVpt::P64 = P64[_scVq4::P64 + 48];
           _scVpu::P64 = P64[_scVq4::P64 + 56];
           _scVpz::P64 = P64[_scVq4::P64 + 64];
           I64[Hp - 64] = sat_scVq3_info;
           P64[Hp - 48] = _scVp9::P64;
           P64[Hp - 40] = _scVpa::P64;
           P64[Hp - 32] = _scVpc::P64;
           P64[Hp - 24] = _scVpe::P64;
           P64[Hp - 16] = _scVpt::P64;
           P64[Hp - 8] = _scVpu::P64;
           P64[Hp] = _scVpz::P64;
           R3 = Hp - 64;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVq4_info" {
     sat_scVq4_info:
         const sat_scVq4_entry;
         const 7;
         const 18446744069414584335;
         const ud84r_srtd;
 },
 section ""relreadonly" . ud84s_srtd" {
     ud84s_srtd:
         const ScWiZ_srt+272;
         const 64;
         const 9223372174495055873;
 },
 sat_scVq5_entry() //  [R1]
         { []
         }
     {offset
       cd82U: // global
           _scVq5::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd82V; else goto cd82W;
       cd82W: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cd82Y; else goto cd82X;
       cd82Y: // global
           HpAlloc = 72;
           goto cd82V;
       cd82V: // global
           R1 = _scVq5::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd82X: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVq5::P64;
           _scVp9::P64 = P64[_scVq5::P64 + 16];
           _scVpa::P64 = P64[_scVq5::P64 + 24];
           _scVpc::P64 = P64[_scVq5::P64 + 32];
           _scVpe::P64 = P64[_scVq5::P64 + 40];
           _scVpk::P64 = P64[_scVq5::P64 + 48];
           _scVpt::P64 = P64[_scVq5::P64 + 56];
           _scVpu::P64 = P64[_scVq5::P64 + 64];
           _scVpz::P64 = P64[_scVq5::P64 + 72];
           I64[Hp - 64] = sat_scVq4_info;
           P64[Hp - 48] = _scVp9::P64;
           P64[Hp - 40] = _scVpa::P64;
           P64[Hp - 32] = _scVpc::P64;
           P64[Hp - 24] = _scVpe::P64;
           P64[Hp - 16] = _scVpt::P64;
           P64[Hp - 8] = _scVpu::P64;
           P64[Hp] = _scVpz::P64;
           R2 = Hp - 64;
           R1 = _scVpk::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVq5_info" {
     sat_scVq5_info:
         const sat_scVq5_entry;
         const 8;
         const 18446744069414584335;
         const ud84s_srtd;
 },
 section ""relreadonly" . ud84t_srtd" {
     ud84t_srtd:
         const ScWiZ_srt+272;
         const 64;
         const 9223372174495055873;
 },
 sat_scVq6_entry() //  [R1]
         { []
         }
     {offset
       cd82Z: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cd833; else goto cd832;
       cd833: // global
           HpAlloc = 80;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd832: // global
           _scVp9::P64 = P64[R1 + 16];
           _scVpa::P64 = P64[R1 + 24];
           _scVpc::P64 = P64[R1 + 32];
           _scVpe::P64 = P64[R1 + 40];
           _scVpk::P64 = P64[R1 + 48];
           _scVpt::P64 = P64[R1 + 56];
           _scVpu::P64 = P64[R1 + 64];
           _scVpz::P64 = P64[R1 + 72];
           I64[Hp - 72] = sat_scVq5_info;
           P64[Hp - 56] = _scVp9::P64;
           P64[Hp - 48] = _scVpa::P64;
           P64[Hp - 40] = _scVpc::P64;
           P64[Hp - 32] = _scVpe::P64;
           P64[Hp - 24] = _scVpk::P64;
           P64[Hp - 16] = _scVpt::P64;
           P64[Hp - 8] = _scVpu::P64;
           P64[Hp] = _scVpz::P64;
           R3 = Hp - 72;
           R2 = lvl89_rcV6y_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVq6_info" {
     sat_scVq6_info:
         const sat_scVq6_entry;
         const 8;
         const 18446744069414584335;
         const ud84t_srtd;
 },
 section ""relreadonly" . ud84u_srtd" {
     ud84u_srtd:
         const ScWiZ_srt+272;
         const 64;
         const 9223372174495055873;
 },
 sat_scVq7_entry() //  [R1]
         { []
         }
     {offset
       cd834: // global
           _scVq7::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd835; else goto cd836;
       cd836: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cd838; else goto cd837;
       cd838: // global
           HpAlloc = 80;
           goto cd835;
       cd835: // global
           R1 = _scVq7::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd837: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVq7::P64;
           _scVp9::P64 = P64[_scVq7::P64 + 16];
           _scVpa::P64 = P64[_scVq7::P64 + 24];
           _scVpc::P64 = P64[_scVq7::P64 + 32];
           _scVpe::P64 = P64[_scVq7::P64 + 40];
           _scVpk::P64 = P64[_scVq7::P64 + 48];
           _scVpt::P64 = P64[_scVq7::P64 + 56];
           _scVpu::P64 = P64[_scVq7::P64 + 64];
           _scVpz::P64 = P64[_scVq7::P64 + 72];
           I64[Hp - 72] = sat_scVq6_info;
           P64[Hp - 56] = _scVp9::P64;
           P64[Hp - 48] = _scVpa::P64;
           P64[Hp - 40] = _scVpc::P64;
           P64[Hp - 32] = _scVpe::P64;
           P64[Hp - 24] = _scVpk::P64;
           P64[Hp - 16] = _scVpt::P64;
           P64[Hp - 8] = _scVpu::P64;
           P64[Hp] = _scVpz::P64;
           R3 = Hp - 72;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVq7_info" {
     sat_scVq7_info:
         const sat_scVq7_entry;
         const 8;
         const 18446744069414584335;
         const ud84u_srtd;
 },
 section ""relreadonly" . ud84v_srtd" {
     ud84v_srtd:
         const ScWiZ_srt+272;
         const 64;
         const 9223372174495055873;
 },
 sat_scVq8_entry() //  [R1]
         { []
         }
     {offset
       cd839: // global
           _scVq8::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd83a; else goto cd83b;
       cd83b: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cd83d; else goto cd83c;
       cd83d: // global
           HpAlloc = 80;
           goto cd83a;
       cd83a: // global
           R1 = _scVq8::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd83c: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVq8::P64;
           _scVp9::P64 = P64[_scVq8::P64 + 16];
           _scVpa::P64 = P64[_scVq8::P64 + 24];
           _scVpc::P64 = P64[_scVq8::P64 + 32];
           _scVpe::P64 = P64[_scVq8::P64 + 40];
           _scVpg::P64 = P64[_scVq8::P64 + 48];
           _scVpk::P64 = P64[_scVq8::P64 + 56];
           _scVpt::P64 = P64[_scVq8::P64 + 64];
           _scVpu::P64 = P64[_scVq8::P64 + 72];
           _scVpz::P64 = P64[_scVq8::P64 + 80];
           I64[Hp - 72] = sat_scVq7_info;
           P64[Hp - 56] = _scVp9::P64;
           P64[Hp - 48] = _scVpa::P64;
           P64[Hp - 40] = _scVpc::P64;
           P64[Hp - 32] = _scVpe::P64;
           P64[Hp - 24] = _scVpk::P64;
           P64[Hp - 16] = _scVpt::P64;
           P64[Hp - 8] = _scVpu::P64;
           P64[Hp] = _scVpz::P64;
           R2 = Hp - 72;
           R1 = _scVpg::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVq8_info" {
     sat_scVq8_info:
         const sat_scVq8_entry;
         const 9;
         const 18446744069414584335;
         const ud84v_srtd;
 },
 section ""relreadonly" . ud84w_srtd" {
     ud84w_srtd:
         const ScWiZ_srt+272;
         const 64;
         const 9223372174495055873;
 },
 sat_scVq9_entry() //  [R1]
         { []
         }
     {offset
       cd83e: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cd83i; else goto cd83h;
       cd83i: // global
           HpAlloc = 88;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd83h: // global
           _scVp9::P64 = P64[R1 + 16];
           _scVpa::P64 = P64[R1 + 24];
           _scVpc::P64 = P64[R1 + 32];
           _scVpe::P64 = P64[R1 + 40];
           _scVpg::P64 = P64[R1 + 48];
           _scVpk::P64 = P64[R1 + 56];
           _scVpt::P64 = P64[R1 + 64];
           _scVpu::P64 = P64[R1 + 72];
           _scVpz::P64 = P64[R1 + 80];
           I64[Hp - 80] = sat_scVq8_info;
           P64[Hp - 64] = _scVp9::P64;
           P64[Hp - 56] = _scVpa::P64;
           P64[Hp - 48] = _scVpc::P64;
           P64[Hp - 40] = _scVpe::P64;
           P64[Hp - 32] = _scVpg::P64;
           P64[Hp - 24] = _scVpk::P64;
           P64[Hp - 16] = _scVpt::P64;
           P64[Hp - 8] = _scVpu::P64;
           P64[Hp] = _scVpz::P64;
           R3 = Hp - 80;
           R2 = lvl88_rcV6x_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVq9_info" {
     sat_scVq9_info:
         const sat_scVq9_entry;
         const 9;
         const 18446744069414584335;
         const ud84w_srtd;
 },
 section ""relreadonly" . ud84x_srtd" {
     ud84x_srtd:
         const ScWiZ_srt+272;
         const 64;
         const 9223372174495055873;
 },
 sat_scVqa_entry() //  [R1]
         { []
         }
     {offset
       cd83j: // global
           _scVqa::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd83k; else goto cd83l;
       cd83l: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cd83n; else goto cd83m;
       cd83n: // global
           HpAlloc = 88;
           goto cd83k;
       cd83k: // global
           R1 = _scVqa::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd83m: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVqa::P64;
           _scVp9::P64 = P64[_scVqa::P64 + 16];
           _scVpa::P64 = P64[_scVqa::P64 + 24];
           _scVpc::P64 = P64[_scVqa::P64 + 32];
           _scVpe::P64 = P64[_scVqa::P64 + 40];
           _scVpg::P64 = P64[_scVqa::P64 + 48];
           _scVpk::P64 = P64[_scVqa::P64 + 56];
           _scVpt::P64 = P64[_scVqa::P64 + 64];
           _scVpu::P64 = P64[_scVqa::P64 + 72];
           _scVpz::P64 = P64[_scVqa::P64 + 80];
           I64[Hp - 80] = sat_scVq9_info;
           P64[Hp - 64] = _scVp9::P64;
           P64[Hp - 56] = _scVpa::P64;
           P64[Hp - 48] = _scVpc::P64;
           P64[Hp - 40] = _scVpe::P64;
           P64[Hp - 32] = _scVpg::P64;
           P64[Hp - 24] = _scVpk::P64;
           P64[Hp - 16] = _scVpt::P64;
           P64[Hp - 8] = _scVpu::P64;
           P64[Hp] = _scVpz::P64;
           R3 = Hp - 80;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVqa_info" {
     sat_scVqa_info:
         const sat_scVqa_entry;
         const 9;
         const 18446744069414584335;
         const ud84x_srtd;
 },
 section ""relreadonly" . ud84y_srtd" {
     ud84y_srtd:
         const ScWiZ_srt+272;
         const 64;
         const 9223372174495055873;
 },
 sat_scVqb_entry() //  [R1]
         { []
         }
     {offset
       cd83o: // global
           _scVqb::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd83p; else goto cd83q;
       cd83q: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cd83s; else goto cd83r;
       cd83s: // global
           HpAlloc = 88;
           goto cd83p;
       cd83p: // global
           R1 = _scVqb::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd83r: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVqb::P64;
           _scVp9::P64 = P64[_scVqb::P64 + 16];
           _scVpa::P64 = P64[_scVqb::P64 + 24];
           _scVpc::P64 = P64[_scVqb::P64 + 32];
           _scVpe::P64 = P64[_scVqb::P64 + 40];
           _scVpf::P64 = P64[_scVqb::P64 + 48];
           _scVpg::P64 = P64[_scVqb::P64 + 56];
           _scVpk::P64 = P64[_scVqb::P64 + 64];
           _scVpt::P64 = P64[_scVqb::P64 + 72];
           _scVpu::P64 = P64[_scVqb::P64 + 80];
           _scVpz::P64 = P64[_scVqb::P64 + 88];
           I64[Hp - 80] = sat_scVqa_info;
           P64[Hp - 64] = _scVp9::P64;
           P64[Hp - 56] = _scVpa::P64;
           P64[Hp - 48] = _scVpc::P64;
           P64[Hp - 40] = _scVpe::P64;
           P64[Hp - 32] = _scVpg::P64;
           P64[Hp - 24] = _scVpk::P64;
           P64[Hp - 16] = _scVpt::P64;
           P64[Hp - 8] = _scVpu::P64;
           P64[Hp] = _scVpz::P64;
           R2 = Hp - 80;
           R1 = _scVpf::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVqb_info" {
     sat_scVqb_info:
         const sat_scVqb_entry;
         const 10;
         const 18446744069414584335;
         const ud84y_srtd;
 },
 section ""relreadonly" . ud84z_srtd" {
     ud84z_srtd:
         const ScWiZ_srt+272;
         const 64;
         const 9223372174495055873;
 },
 sat_scVqc_entry() //  [R1]
         { []
         }
     {offset
       cd83t: // global
           _scVqc::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd83u; else goto cd83v;
       cd83v: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cd83x; else goto cd83w;
       cd83x: // global
           HpAlloc = 96;
           goto cd83u;
       cd83u: // global
           R1 = _scVqc::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd83w: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVqc::P64;
           _scVp9::P64 = P64[_scVqc::P64 + 16];
           _scVpa::P64 = P64[_scVqc::P64 + 24];
           _scVpc::P64 = P64[_scVqc::P64 + 32];
           _scVpe::P64 = P64[_scVqc::P64 + 40];
           _scVpf::P64 = P64[_scVqc::P64 + 48];
           _scVpg::P64 = P64[_scVqc::P64 + 56];
           _scVpk::P64 = P64[_scVqc::P64 + 64];
           _scVpt::P64 = P64[_scVqc::P64 + 72];
           _scVpu::P64 = P64[_scVqc::P64 + 80];
           _scVpz::P64 = P64[_scVqc::P64 + 88];
           I64[Hp - 88] = sat_scVqb_info;
           P64[Hp - 72] = _scVp9::P64;
           P64[Hp - 64] = _scVpa::P64;
           P64[Hp - 56] = _scVpc::P64;
           P64[Hp - 48] = _scVpe::P64;
           P64[Hp - 40] = _scVpf::P64;
           P64[Hp - 32] = _scVpg::P64;
           P64[Hp - 24] = _scVpk::P64;
           P64[Hp - 16] = _scVpt::P64;
           P64[Hp - 8] = _scVpu::P64;
           P64[Hp] = _scVpz::P64;
           R3 = Hp - 88;
           R2 = lvl87_rcV6w_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVqc_info" {
     sat_scVqc_info:
         const sat_scVqc_entry;
         const 10;
         const 18446744069414584335;
         const ud84z_srtd;
 },
 section ""relreadonly" . ud84A_srtd" {
     ud84A_srtd:
         const ScWiZ_srt+272;
         const 64;
         const 9223372174495055873;
 },
 p_scVpy_entry() //  [R1, R2]
         { []
         }
     {offset
       cd83y: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cd83C; else goto cd83B;
       cd83C: // global
           HpAlloc = 96;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd83B: // global
           _scVp9::P64 = P64[R1 + 7];
           _scVpa::P64 = P64[R1 + 15];
           _scVpc::P64 = P64[R1 + 23];
           _scVpe::P64 = P64[R1 + 31];
           _scVpf::P64 = P64[R1 + 39];
           _scVpg::P64 = P64[R1 + 47];
           _scVpk::P64 = P64[R1 + 55];
           _scVpt::P64 = P64[R1 + 63];
           _scVpu::P64 = P64[R1 + 71];
           I64[Hp - 88] = sat_scVqc_info;
           P64[Hp - 72] = _scVp9::P64;
           P64[Hp - 64] = _scVpa::P64;
           P64[Hp - 56] = _scVpc::P64;
           P64[Hp - 48] = _scVpe::P64;
           P64[Hp - 40] = _scVpf::P64;
           P64[Hp - 32] = _scVpg::P64;
           P64[Hp - 24] = _scVpk::P64;
           P64[Hp - 16] = _scVpt::P64;
           P64[Hp - 8] = _scVpu::P64;
           P64[Hp] = R2;
           R3 = Hp - 88;
           R2 = lvl86_rcV6v_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . p_scVpy_info" {
     p_scVpy_info:
         const p_scVpy_entry;
         const 9;
         const 18446744069414584328;
         const 4294967301;
         const ud84A_srtd;
 },
 section ""relreadonly" . ud84B_srtd" {
     ud84B_srtd:
         const ScWiZ_srt+272;
         const 64;
         const 9223372174495055873;
 },
 sat_scVqg_entry() //  [R1]
         { []
         }
     {offset
       cd83R: // global
           _scVqg::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd83S; else goto cd83T;
       cd83T: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cd83V; else goto cd83U;
       cd83V: // global
           HpAlloc = 24;
           goto cd83S;
       cd83S: // global
           R1 = _scVqg::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd83U: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVqg::P64;
           _scVpy::P64 = P64[_scVqg::P64 + 16];
           _scVqe::P64 = P64[_scVqg::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _scVqe::P64;
           R2 = Hp - 14;
           R1 = _scVpy::P64;
           Sp = Sp - 16;
           call p_scVpy_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVqg_info" {
     sat_scVqg_info:
         const sat_scVqg_entry;
         const 2;
         const 18446744069414584338;
         const ud84B_srtd;
 },
 section ""relreadonly" . ud84C_srtd" {
     ud84C_srtd:
         const ScWiZ_srt+272;
         const 64;
         const 9223372174495055873;
 },
 sat_scVqh_entry() //  [R1, R2]
         { []
         }
     {offset
       cd83X: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cd841; else goto cd840;
       cd841: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd840: // global
           _scVpy::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_scVqg_info;
           P64[Hp - 32] = _scVpy::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scVqh_info" {
     sat_scVqh_info:
         const sat_scVqh_entry;
         const 1;
         const 18446744069414584329;
         const 4294967301;
         const ud84C_srtd;
 },
 section ""relreadonly" . ud84D_srtd" {
     ud84D_srtd:
         const ScWiZ_srt+272;
         const 65;
         const 16429140924136685569;
         const 1;
 },
 GHC.RTS.Flags.$w$cshowsPrec7_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cd845: // global
           Hp = Hp + 216;
           if (Hp > HpLim) (likely: False) goto cd849; else goto cd848;
       cd849: // global
           HpAlloc = 216;
           R1 = GHC.RTS.Flags.$w$cshowsPrec7_closure;
           I64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 88, res: 0, upd: 8;
       cd848: // global
           I64[Hp - 208] = f8_scVpf_info;
           P64[Hp - 192] = R3;
           I64[Hp - 184] = f9_scVpg_info;
           P64[Hp - 168] = R4;
           I64[Hp - 160] = f10_scVpk_info;
           P64[Hp - 144] = R5;
           I64[Hp - 136] = f11_scVpt_info;
           P64[Hp - 120] = P64[Sp + 8];
           I64[Hp - 112] = f12_scVpu_info;
           P64[Hp - 96] = P64[Sp + 24];
           I64[Hp - 88] = p_scVpy_info;
           P64[Hp - 80] = R6;
           P64[Hp - 72] = P64[Sp];
           P64[Hp - 64] = P64[Sp + 16];
           P64[Hp - 56] = P64[Sp + 32];
           P64[Hp - 48] = Hp - 208;
           P64[Hp - 40] = Hp - 184;
           P64[Hp - 32] = Hp - 160;
           P64[Hp - 24] = Hp - 136;
           P64[Hp - 16] = Hp - 112;
           _cd7Zm::P64 = Hp - 87;
           if (%MO_S_Lt_W64(R2, 11)) goto cd843; else goto cd844;
       cd843: // global
           Hp = Hp - 16;
           R1 = _cd7Zm::P64;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cd844: // global
           I64[Hp - 8] = sat_scVqh_info;
           P64[Hp] = _cd7Zm::P64;
           R1 = Hp - 7;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$w$cshowsPrec7_info" {
     GHC.RTS.Flags.$w$cshowsPrec7_info:
         const GHC.RTS.Flags.$w$cshowsPrec7_entry;
         const 0;
         const 18446744069414584334;
         const 42949672960;
         const ud84D_srtd;
         const 74;
         const GHC.RTS.Flags.$w$cshowsPrec7_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.764086154 UTC

[section ""data" . GHC.RTS.Flags.$fShowRTSFlags_$cshowsPrec_closure" {
     GHC.RTS.Flags.$fShowRTSFlags_$cshowsPrec_closure:
         const GHC.RTS.Flags.$fShowRTSFlags_$cshowsPrec_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowRTSFlags_$cshowsPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       cd88b: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cd88f; else goto cd88g;
       cd88f: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fShowRTSFlags_$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cd88g: // global
           I64[Sp - 16] = block_cd888_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ud88o; else goto cd889;
       ud88o: // global
           call _cd888(R1) args: 0, res: 0, upd: 0;
       cd889: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowRTSFlags_$cshowsPrec_info" {
     GHC.RTS.Flags.$fShowRTSFlags_$cshowsPrec_info:
         const GHC.RTS.Flags.$fShowRTSFlags_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const ScWiZ_srt+784;
 },
 _cd888() //  [R1]
         { []
         }
     {offset
       cd888: // global
           I64[Sp] = block_cd88e_info;
           _scVql::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _scVql::I64;
           if (R1 & 7 != 0) goto ud88n; else goto cd88i;
       ud88n: // global
           call _cd88e(R1) args: 0, res: 0, upd: 0;
       cd88i: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cd888_info" {
     block_cd888_info:
         const _cd888;
         const 1;
         const 4294967326;
         const ScWiZ_srt+784;
 },
 _cd88e() //  [R1]
         { []
         }
     {offset
       cd88e: // global
           R6 = P64[R1 + 31];
           R5 = P64[R1 + 23];
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = I64[Sp + 8];
           P64[Sp - 24] = P64[R1 + 39];
           P64[Sp - 16] = P64[R1 + 47];
           P64[Sp - 8] = P64[R1 + 55];
           P64[Sp] = P64[R1 + 63];
           P64[Sp + 8] = P64[R1 + 71];
           Sp = Sp - 24;
           call GHC.RTS.Flags.$w$cshowsPrec7_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd88e_info" {
     block_cd88e_info:
         const _cd88e;
         const 65;
         const 4294967326;
         const ScWiZ_srt+784;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.772315196 UTC

[section ""data" . GHC.RTS.Flags.$fShowRTSFlags_$cshow_closure" {
     GHC.RTS.Flags.$fShowRTSFlags_$cshow_closure:
         const GHC.RTS.Flags.$fShowRTSFlags_$cshow_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowRTSFlags_$cshow_entry() //  [R2]
         { []
         }
     {offset
       cd88O: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cd88P; else goto cd88Q;
       cd88P: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.$fShowRTSFlags_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd88Q: // global
           I64[Sp - 8] = block_cd88L_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud88U; else goto cd88M;
       ud88U: // global
           call _cd88L(R1) args: 0, res: 0, upd: 0;
       cd88M: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowRTSFlags_$cshow_info" {
     GHC.RTS.Flags.$fShowRTSFlags_$cshow_info:
         const GHC.RTS.Flags.$fShowRTSFlags_$cshow_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const ScWiZ_srt+784;
 },
 _cd88L() //  [R1]
         { []
         }
     {offset
       cd88L: // global
           R6 = P64[R1 + 31];
           R5 = P64[R1 + 23];
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = 0;
           P64[Sp - 48] = P64[R1 + 39];
           P64[Sp - 40] = P64[R1 + 47];
           P64[Sp - 32] = P64[R1 + 55];
           P64[Sp - 24] = P64[R1 + 63];
           P64[Sp - 16] = P64[R1 + 71];
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = GHC.Types.[]_closure+1;
           Sp = Sp - 48;
           call GHC.RTS.Flags.$w$cshowsPrec7_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 64, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd88L_info" {
     block_cd88L_info:
         const _cd88L;
         const 0;
         const 4294967326;
         const ScWiZ_srt+784;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.778835734 UTC

[section ""data" . GHC.RTS.Flags.$fShowRTSFlags1_closure" {
     GHC.RTS.Flags.$fShowRTSFlags1_closure:
         const GHC.RTS.Flags.$fShowRTSFlags1_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowRTSFlags1_entry() //  [R2]
         { []
         }
     {offset
       cd89g: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cd89h; else goto cd89i;
       cd89h: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.$fShowRTSFlags1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd89i: // global
           I64[Sp - 8] = block_cd89d_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud89m; else goto cd89e;
       ud89m: // global
           call _cd89d(R1) args: 0, res: 0, upd: 0;
       cd89e: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowRTSFlags1_info" {
     GHC.RTS.Flags.$fShowRTSFlags1_info:
         const GHC.RTS.Flags.$fShowRTSFlags1_entry;
         const 0;
         const 38654705678;
         const 4294967301;
         const ScWiZ_srt+784;
 },
 _cd89d() //  [R1]
         { []
         }
     {offset
       cd89d: // global
           R6 = P64[R1 + 31];
           R5 = P64[R1 + 23];
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = 0;
           P64[Sp - 32] = P64[R1 + 39];
           P64[Sp - 24] = P64[R1 + 47];
           P64[Sp - 16] = P64[R1 + 55];
           P64[Sp - 8] = P64[R1 + 63];
           P64[Sp] = P64[R1 + 71];
           Sp = Sp - 32;
           call GHC.RTS.Flags.$w$cshowsPrec7_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd89d_info" {
     block_cd89d_info:
         const _cd89d;
         const 0;
         const 4294967326;
         const ScWiZ_srt+784;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.784587325 UTC

[section ""data" . GHC.RTS.Flags.$fShowRTSFlags_$cshowList_closure" {
     GHC.RTS.Flags.$fShowRTSFlags_$cshowList_closure:
         const GHC.RTS.Flags.$fShowRTSFlags_$cshowList_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowRTSFlags_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       cd89F: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.RTS.Flags.$fShowRTSFlags1_closure+1;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowRTSFlags_$cshowList_info" {
     GHC.RTS.Flags.$fShowRTSFlags_$cshowList_info:
         const GHC.RTS.Flags.$fShowRTSFlags_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const ScWiZ_srt+808;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.78779077 UTC

[section ""data" . GHC.RTS.Flags.$fShowRTSFlags_closure" {
     GHC.RTS.Flags.$fShowRTSFlags_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.RTS.Flags.$fShowRTSFlags_$cshowsPrec_closure+2;
         const GHC.RTS.Flags.$fShowRTSFlags_$cshow_closure+1;
         const GHC.RTS.Flags.$fShowRTSFlags_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.790279591 UTC

[section ""data" . GHC.RTS.Flags.numaMask_closure" {
     GHC.RTS.Flags.numaMask_closure:
         const GHC.RTS.Flags.numaMask_info;
 },
 GHC.RTS.Flags.numaMask_entry() //  [R2]
         { []
         }
     {offset
       cd89U: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd89V; else goto cd89W;
       cd89V: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.numaMask_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd89W: // global
           I64[Sp - 8] = block_cd89R_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8a0; else goto cd89S;
       ud8a0: // global
           call _cd89R(R1) args: 0, res: 0, upd: 0;
       cd89S: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.numaMask_info" {
     GHC.RTS.Flags.numaMask_info:
         const GHC.RTS.Flags.numaMask_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd89R() //  [R1]
         { []
         }
     {offset
       cd89R: // global
           R1 = P64[R1 + 215] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd89R_info" {
     block_cd89R_info:
         const _cd89R;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.796117736 UTC

[section ""data" . GHC.RTS.Flags.numa_closure" {
     GHC.RTS.Flags.numa_closure:
         const GHC.RTS.Flags.numa_info;
 },
 GHC.RTS.Flags.numa_entry() //  [R2]
         { []
         }
     {offset
       cd8aj: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8ak; else goto cd8al;
       cd8ak: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.numa_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8al: // global
           I64[Sp - 8] = block_cd8ag_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8ap; else goto cd8ah;
       ud8ap: // global
           call _cd8ag(R1) args: 0, res: 0, upd: 0;
       cd8ah: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.numa_info" {
     GHC.RTS.Flags.numa_info:
         const GHC.RTS.Flags.numa_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8ag() //  [R1]
         { []
         }
     {offset
       cd8ag: // global
           R1 = P64[R1 + 207] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8ag_info" {
     block_cd8ag_info:
         const _cd8ag;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.801577304 UTC

[section ""data" . GHC.RTS.Flags.allocLimitGrace_closure" {
     GHC.RTS.Flags.allocLimitGrace_closure:
         const GHC.RTS.Flags.allocLimitGrace_info;
 },
 GHC.RTS.Flags.allocLimitGrace_entry() //  [R2]
         { []
         }
     {offset
       cd8aI: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8aJ; else goto cd8aK;
       cd8aJ: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.allocLimitGrace_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8aK: // global
           I64[Sp - 8] = block_cd8aF_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8aO; else goto cd8aG;
       ud8aO: // global
           call _cd8aF(R1) args: 0, res: 0, upd: 0;
       cd8aG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.allocLimitGrace_info" {
     GHC.RTS.Flags.allocLimitGrace_info:
         const GHC.RTS.Flags.allocLimitGrace_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8aF() //  [R1]
         { []
         }
     {offset
       cd8aF: // global
           R1 = P64[R1 + 199] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8aF_info" {
     block_cd8aF_info:
         const _cd8aF;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.807337065 UTC

[section ""data" . GHC.RTS.Flags.heapBase_closure" {
     GHC.RTS.Flags.heapBase_closure:
         const GHC.RTS.Flags.heapBase_info;
 },
 GHC.RTS.Flags.heapBase_entry() //  [R2]
         { []
         }
     {offset
       cd8b7: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8b8; else goto cd8b9;
       cd8b8: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.heapBase_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8b9: // global
           I64[Sp - 8] = block_cd8b4_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8bd; else goto cd8b5;
       ud8bd: // global
           call _cd8b4(R1) args: 0, res: 0, upd: 0;
       cd8b5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.heapBase_info" {
     GHC.RTS.Flags.heapBase_info:
         const GHC.RTS.Flags.heapBase_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8b4() //  [R1]
         { []
         }
     {offset
       cd8b4: // global
           R1 = P64[R1 + 191] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8b4_info" {
     block_cd8b4_info:
         const _cd8b4;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.813393383 UTC

[section ""data" . GHC.RTS.Flags.doIdleGC_closure" {
     GHC.RTS.Flags.doIdleGC_closure:
         const GHC.RTS.Flags.doIdleGC_info;
 },
 GHC.RTS.Flags.doIdleGC_entry() //  [R2]
         { []
         }
     {offset
       cd8bw: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8bx; else goto cd8by;
       cd8bx: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.doIdleGC_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8by: // global
           I64[Sp - 8] = block_cd8bt_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8bC; else goto cd8bu;
       ud8bC: // global
           call _cd8bt(R1) args: 0, res: 0, upd: 0;
       cd8bu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.doIdleGC_info" {
     GHC.RTS.Flags.doIdleGC_info:
         const GHC.RTS.Flags.doIdleGC_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8bt() //  [R1]
         { []
         }
     {offset
       cd8bt: // global
           R1 = P64[R1 + 183] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8bt_info" {
     block_cd8bt_info:
         const _cd8bt;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.819159986 UTC

[section ""data" . GHC.RTS.Flags.idleGCDelayTime_closure" {
     GHC.RTS.Flags.idleGCDelayTime_closure:
         const GHC.RTS.Flags.idleGCDelayTime_info;
 },
 GHC.RTS.Flags.idleGCDelayTime_entry() //  [R2]
         { []
         }
     {offset
       cd8bV: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8bW; else goto cd8bX;
       cd8bW: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.idleGCDelayTime_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8bX: // global
           I64[Sp - 8] = block_cd8bS_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8c1; else goto cd8bT;
       ud8c1: // global
           call _cd8bS(R1) args: 0, res: 0, upd: 0;
       cd8bT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.idleGCDelayTime_info" {
     GHC.RTS.Flags.idleGCDelayTime_info:
         const GHC.RTS.Flags.idleGCDelayTime_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8bS() //  [R1]
         { []
         }
     {offset
       cd8bS: // global
           R1 = P64[R1 + 175] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8bS_info" {
     block_cd8bS_info:
         const _cd8bS;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.824773285 UTC

[section ""data" . GHC.RTS.Flags.ringBell_closure" {
     GHC.RTS.Flags.ringBell_closure:
         const GHC.RTS.Flags.ringBell_info;
 },
 GHC.RTS.Flags.ringBell_entry() //  [R2]
         { []
         }
     {offset
       cd8ck: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8cl; else goto cd8cm;
       cd8cl: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.ringBell_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8cm: // global
           I64[Sp - 8] = block_cd8ch_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8cq; else goto cd8ci;
       ud8cq: // global
           call _cd8ch(R1) args: 0, res: 0, upd: 0;
       cd8ci: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.ringBell_info" {
     GHC.RTS.Flags.ringBell_info:
         const GHC.RTS.Flags.ringBell_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8ch() //  [R1]
         { []
         }
     {offset
       cd8ch: // global
           R1 = P64[R1 + 167] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8ch_info" {
     block_cd8ch_info:
         const _cd8ch;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.830249517 UTC

[section ""data" . GHC.RTS.Flags.sweep_closure" {
     GHC.RTS.Flags.sweep_closure:
         const GHC.RTS.Flags.sweep_info;
 },
 GHC.RTS.Flags.sweep_entry() //  [R2]
         { []
         }
     {offset
       cd8cJ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8cK; else goto cd8cL;
       cd8cK: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.sweep_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8cL: // global
           I64[Sp - 8] = block_cd8cG_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8cP; else goto cd8cH;
       ud8cP: // global
           call _cd8cG(R1) args: 0, res: 0, upd: 0;
       cd8cH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.sweep_info" {
     GHC.RTS.Flags.sweep_info:
         const GHC.RTS.Flags.sweep_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8cG() //  [R1]
         { []
         }
     {offset
       cd8cG: // global
           R1 = P64[R1 + 159] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8cG_info" {
     block_cd8cG_info:
         const _cd8cG;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.835936725 UTC

[section ""data" . GHC.RTS.Flags.compactThreshold_closure" {
     GHC.RTS.Flags.compactThreshold_closure:
         const GHC.RTS.Flags.compactThreshold_info;
 },
 GHC.RTS.Flags.compactThreshold_entry() //  [R2]
         { []
         }
     {offset
       cd8d8: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8d9; else goto cd8da;
       cd8d9: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.compactThreshold_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8da: // global
           I64[Sp - 8] = block_cd8d5_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8de; else goto cd8d6;
       ud8de: // global
           call _cd8d5(R1) args: 0, res: 0, upd: 0;
       cd8d6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.compactThreshold_info" {
     GHC.RTS.Flags.compactThreshold_info:
         const GHC.RTS.Flags.compactThreshold_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8d5() //  [R1]
         { []
         }
     {offset
       cd8d5: // global
           R1 = P64[R1 + 151] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8d5_info" {
     block_cd8d5_info:
         const _cd8d5;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.841576787 UTC

[section ""data" . GHC.RTS.Flags.compact_closure" {
     GHC.RTS.Flags.compact_closure:
         const GHC.RTS.Flags.compact_info;
 },
 GHC.RTS.Flags.compact_entry() //  [R2]
         { []
         }
     {offset
       cd8dx: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8dy; else goto cd8dz;
       cd8dy: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.compact_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8dz: // global
           I64[Sp - 8] = block_cd8du_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8dD; else goto cd8dv;
       ud8dD: // global
           call _cd8du(R1) args: 0, res: 0, upd: 0;
       cd8dv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.compact_info" {
     GHC.RTS.Flags.compact_info:
         const GHC.RTS.Flags.compact_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8du() //  [R1]
         { []
         }
     {offset
       cd8du: // global
           R1 = P64[R1 + 143] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8du_info" {
     block_cd8du_info:
         const _cd8du;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.848022047 UTC

[section ""data" . GHC.RTS.Flags.squeezeUpdFrames_closure" {
     GHC.RTS.Flags.squeezeUpdFrames_closure:
         const GHC.RTS.Flags.squeezeUpdFrames_info;
 },
 GHC.RTS.Flags.squeezeUpdFrames_entry() //  [R2]
         { []
         }
     {offset
       cd8dW: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8dX; else goto cd8dY;
       cd8dX: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.squeezeUpdFrames_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8dY: // global
           I64[Sp - 8] = block_cd8dT_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8e2; else goto cd8dU;
       ud8e2: // global
           call _cd8dT(R1) args: 0, res: 0, upd: 0;
       cd8dU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.squeezeUpdFrames_info" {
     GHC.RTS.Flags.squeezeUpdFrames_info:
         const GHC.RTS.Flags.squeezeUpdFrames_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8dT() //  [R1]
         { []
         }
     {offset
       cd8dT: // global
           R1 = P64[R1 + 135] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8dT_info" {
     block_cd8dT_info:
         const _cd8dT;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.853415202 UTC

[section ""data" . GHC.RTS.Flags.generations_closure" {
     GHC.RTS.Flags.generations_closure:
         const GHC.RTS.Flags.generations_info;
 },
 GHC.RTS.Flags.generations_entry() //  [R2]
         { []
         }
     {offset
       cd8el: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8em; else goto cd8en;
       cd8em: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.generations_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8en: // global
           I64[Sp - 8] = block_cd8ei_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8er; else goto cd8ej;
       ud8er: // global
           call _cd8ei(R1) args: 0, res: 0, upd: 0;
       cd8ej: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.generations_info" {
     GHC.RTS.Flags.generations_info:
         const GHC.RTS.Flags.generations_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8ei() //  [R1]
         { []
         }
     {offset
       cd8ei: // global
           R1 = P64[R1 + 127] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8ei_info" {
     block_cd8ei_info:
         const _cd8ei;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.858829418 UTC

[section ""data" . GHC.RTS.Flags.pcFreeHeap_closure" {
     GHC.RTS.Flags.pcFreeHeap_closure:
         const GHC.RTS.Flags.pcFreeHeap_info;
 },
 GHC.RTS.Flags.pcFreeHeap_entry() //  [R2]
         { []
         }
     {offset
       cd8eK: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8eL; else goto cd8eM;
       cd8eL: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.pcFreeHeap_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8eM: // global
           I64[Sp - 8] = block_cd8eH_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8eQ; else goto cd8eI;
       ud8eQ: // global
           call _cd8eH(R1) args: 0, res: 0, upd: 0;
       cd8eI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.pcFreeHeap_info" {
     GHC.RTS.Flags.pcFreeHeap_info:
         const GHC.RTS.Flags.pcFreeHeap_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8eH() //  [R1]
         { []
         }
     {offset
       cd8eH: // global
           R1 = P64[R1 + 119] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8eH_info" {
     block_cd8eH_info:
         const _cd8eH;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.864398506 UTC

[section ""data" . GHC.RTS.Flags.oldGenFactor_closure" {
     GHC.RTS.Flags.oldGenFactor_closure:
         const GHC.RTS.Flags.oldGenFactor_info;
 },
 GHC.RTS.Flags.oldGenFactor_entry() //  [R2]
         { []
         }
     {offset
       cd8f9: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8fa; else goto cd8fb;
       cd8fa: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.oldGenFactor_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8fb: // global
           I64[Sp - 8] = block_cd8f6_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8ff; else goto cd8f7;
       ud8ff: // global
           call _cd8f6(R1) args: 0, res: 0, upd: 0;
       cd8f7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.oldGenFactor_info" {
     GHC.RTS.Flags.oldGenFactor_info:
         const GHC.RTS.Flags.oldGenFactor_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8f6() //  [R1]
         { []
         }
     {offset
       cd8f6: // global
           R1 = P64[R1 + 111] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8f6_info" {
     block_cd8f6_info:
         const _cd8f6;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.869884525 UTC

[section ""data" . GHC.RTS.Flags.heapSizeSuggestionAuto_closure" {
     GHC.RTS.Flags.heapSizeSuggestionAuto_closure:
         const GHC.RTS.Flags.heapSizeSuggestionAuto_info;
 },
 GHC.RTS.Flags.heapSizeSuggestionAuto_entry() //  [R2]
         { []
         }
     {offset
       cd8fy: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8fz; else goto cd8fA;
       cd8fz: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.heapSizeSuggestionAuto_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8fA: // global
           I64[Sp - 8] = block_cd8fv_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8fE; else goto cd8fw;
       ud8fE: // global
           call _cd8fv(R1) args: 0, res: 0, upd: 0;
       cd8fw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.heapSizeSuggestionAuto_info" {
     GHC.RTS.Flags.heapSizeSuggestionAuto_info:
         const GHC.RTS.Flags.heapSizeSuggestionAuto_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8fv() //  [R1]
         { []
         }
     {offset
       cd8fv: // global
           R1 = P64[R1 + 103] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8fv_info" {
     block_cd8fv_info:
         const _cd8fv;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.875772459 UTC

[section ""data" . GHC.RTS.Flags.heapSizeSuggestion_closure" {
     GHC.RTS.Flags.heapSizeSuggestion_closure:
         const GHC.RTS.Flags.heapSizeSuggestion_info;
 },
 GHC.RTS.Flags.heapSizeSuggestion_entry() //  [R2]
         { []
         }
     {offset
       cd8fX: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8fY; else goto cd8fZ;
       cd8fY: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.heapSizeSuggestion_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8fZ: // global
           I64[Sp - 8] = block_cd8fU_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8g3; else goto cd8fV;
       ud8g3: // global
           call _cd8fU(R1) args: 0, res: 0, upd: 0;
       cd8fV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.heapSizeSuggestion_info" {
     GHC.RTS.Flags.heapSizeSuggestion_info:
         const GHC.RTS.Flags.heapSizeSuggestion_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8fU() //  [R1]
         { []
         }
     {offset
       cd8fU: // global
           R1 = P64[R1 + 95] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8fU_info" {
     block_cd8fU_info:
         const _cd8fU;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.881761701 UTC

[section ""data" . GHC.RTS.Flags.minOldGenSize_closure" {
     GHC.RTS.Flags.minOldGenSize_closure:
         const GHC.RTS.Flags.minOldGenSize_info;
 },
 GHC.RTS.Flags.minOldGenSize_entry() //  [R2]
         { []
         }
     {offset
       cd8gm: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8gn; else goto cd8go;
       cd8gn: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.minOldGenSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8go: // global
           I64[Sp - 8] = block_cd8gj_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8gs; else goto cd8gk;
       ud8gs: // global
           call _cd8gj(R1) args: 0, res: 0, upd: 0;
       cd8gk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.minOldGenSize_info" {
     GHC.RTS.Flags.minOldGenSize_info:
         const GHC.RTS.Flags.minOldGenSize_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8gj() //  [R1]
         { []
         }
     {offset
       cd8gj: // global
           R1 = P64[R1 + 87] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8gj_info" {
     block_cd8gj_info:
         const _cd8gj;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.887159424 UTC

[section ""data" . GHC.RTS.Flags.nurseryChunkSize_closure" {
     GHC.RTS.Flags.nurseryChunkSize_closure:
         const GHC.RTS.Flags.nurseryChunkSize_info;
 },
 GHC.RTS.Flags.nurseryChunkSize_entry() //  [R2]
         { []
         }
     {offset
       cd8gL: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8gM; else goto cd8gN;
       cd8gM: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.nurseryChunkSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8gN: // global
           I64[Sp - 8] = block_cd8gI_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8gR; else goto cd8gJ;
       ud8gR: // global
           call _cd8gI(R1) args: 0, res: 0, upd: 0;
       cd8gJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.nurseryChunkSize_info" {
     GHC.RTS.Flags.nurseryChunkSize_info:
         const GHC.RTS.Flags.nurseryChunkSize_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8gI() //  [R1]
         { []
         }
     {offset
       cd8gI: // global
           R1 = P64[R1 + 79] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8gI_info" {
     block_cd8gI_info:
         const _cd8gI;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.89244475 UTC

[section ""data" . GHC.RTS.Flags.largeAllocLim_closure" {
     GHC.RTS.Flags.largeAllocLim_closure:
         const GHC.RTS.Flags.largeAllocLim_info;
 },
 GHC.RTS.Flags.largeAllocLim_entry() //  [R2]
         { []
         }
     {offset
       cd8ha: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8hb; else goto cd8hc;
       cd8hb: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.largeAllocLim_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8hc: // global
           I64[Sp - 8] = block_cd8h7_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8hg; else goto cd8h8;
       ud8hg: // global
           call _cd8h7(R1) args: 0, res: 0, upd: 0;
       cd8h8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.largeAllocLim_info" {
     GHC.RTS.Flags.largeAllocLim_info:
         const GHC.RTS.Flags.largeAllocLim_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8h7() //  [R1]
         { []
         }
     {offset
       cd8h7: // global
           R1 = P64[R1 + 71] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8h7_info" {
     block_cd8h7_info:
         const _cd8h7;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.898504798 UTC

[section ""data" . GHC.RTS.Flags.minAllocAreaSize_closure" {
     GHC.RTS.Flags.minAllocAreaSize_closure:
         const GHC.RTS.Flags.minAllocAreaSize_info;
 },
 GHC.RTS.Flags.minAllocAreaSize_entry() //  [R2]
         { []
         }
     {offset
       cd8hz: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8hA; else goto cd8hB;
       cd8hA: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.minAllocAreaSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8hB: // global
           I64[Sp - 8] = block_cd8hw_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8hF; else goto cd8hx;
       ud8hF: // global
           call _cd8hw(R1) args: 0, res: 0, upd: 0;
       cd8hx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.minAllocAreaSize_info" {
     GHC.RTS.Flags.minAllocAreaSize_info:
         const GHC.RTS.Flags.minAllocAreaSize_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8hw() //  [R1]
         { []
         }
     {offset
       cd8hw: // global
           R1 = P64[R1 + 63] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8hw_info" {
     block_cd8hw_info:
         const _cd8hw;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.903969647 UTC

[section ""data" . GHC.RTS.Flags.maxHeapSize_closure" {
     GHC.RTS.Flags.maxHeapSize_closure:
         const GHC.RTS.Flags.maxHeapSize_info;
 },
 GHC.RTS.Flags.maxHeapSize_entry() //  [R2]
         { []
         }
     {offset
       cd8hY: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8hZ; else goto cd8i0;
       cd8hZ: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.maxHeapSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8i0: // global
           I64[Sp - 8] = block_cd8hV_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8i4; else goto cd8hW;
       ud8i4: // global
           call _cd8hV(R1) args: 0, res: 0, upd: 0;
       cd8hW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.maxHeapSize_info" {
     GHC.RTS.Flags.maxHeapSize_info:
         const GHC.RTS.Flags.maxHeapSize_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8hV() //  [R1]
         { []
         }
     {offset
       cd8hV: // global
           R1 = P64[R1 + 55] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8hV_info" {
     block_cd8hV_info:
         const _cd8hV;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.909779 UTC

[section ""data" . GHC.RTS.Flags.stkChunkBufferSize_closure" {
     GHC.RTS.Flags.stkChunkBufferSize_closure:
         const GHC.RTS.Flags.stkChunkBufferSize_info;
 },
 GHC.RTS.Flags.stkChunkBufferSize_entry() //  [R2]
         { []
         }
     {offset
       cd8in: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8io; else goto cd8ip;
       cd8io: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.stkChunkBufferSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8ip: // global
           I64[Sp - 8] = block_cd8ik_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8it; else goto cd8il;
       ud8it: // global
           call _cd8ik(R1) args: 0, res: 0, upd: 0;
       cd8il: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.stkChunkBufferSize_info" {
     GHC.RTS.Flags.stkChunkBufferSize_info:
         const GHC.RTS.Flags.stkChunkBufferSize_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8ik() //  [R1]
         { []
         }
     {offset
       cd8ik: // global
           R1 = P64[R1 + 47] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8ik_info" {
     block_cd8ik_info:
         const _cd8ik;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.915859919 UTC

[section ""data" . GHC.RTS.Flags.stkChunkSize_closure" {
     GHC.RTS.Flags.stkChunkSize_closure:
         const GHC.RTS.Flags.stkChunkSize_info;
 },
 GHC.RTS.Flags.stkChunkSize_entry() //  [R2]
         { []
         }
     {offset
       cd8iM: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8iN; else goto cd8iO;
       cd8iN: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.stkChunkSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8iO: // global
           I64[Sp - 8] = block_cd8iJ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8iS; else goto cd8iK;
       ud8iS: // global
           call _cd8iJ(R1) args: 0, res: 0, upd: 0;
       cd8iK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.stkChunkSize_info" {
     GHC.RTS.Flags.stkChunkSize_info:
         const GHC.RTS.Flags.stkChunkSize_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8iJ() //  [R1]
         { []
         }
     {offset
       cd8iJ: // global
           R1 = P64[R1 + 39] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8iJ_info" {
     block_cd8iJ_info:
         const _cd8iJ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.921590372 UTC

[section ""data" . GHC.RTS.Flags.initialStkSize_closure" {
     GHC.RTS.Flags.initialStkSize_closure:
         const GHC.RTS.Flags.initialStkSize_info;
 },
 GHC.RTS.Flags.initialStkSize_entry() //  [R2]
         { []
         }
     {offset
       cd8jb: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8jc; else goto cd8jd;
       cd8jc: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.initialStkSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8jd: // global
           I64[Sp - 8] = block_cd8j8_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8jh; else goto cd8j9;
       ud8jh: // global
           call _cd8j8(R1) args: 0, res: 0, upd: 0;
       cd8j9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.initialStkSize_info" {
     GHC.RTS.Flags.initialStkSize_info:
         const GHC.RTS.Flags.initialStkSize_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8j8() //  [R1]
         { []
         }
     {offset
       cd8j8: // global
           R1 = P64[R1 + 31] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8j8_info" {
     block_cd8j8_info:
         const _cd8j8;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.92690517 UTC

[section ""data" . GHC.RTS.Flags.maxStkSize_closure" {
     GHC.RTS.Flags.maxStkSize_closure:
         const GHC.RTS.Flags.maxStkSize_info;
 },
 GHC.RTS.Flags.maxStkSize_entry() //  [R2]
         { []
         }
     {offset
       cd8jA: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8jB; else goto cd8jC;
       cd8jB: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.maxStkSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8jC: // global
           I64[Sp - 8] = block_cd8jx_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8jG; else goto cd8jy;
       ud8jG: // global
           call _cd8jx(R1) args: 0, res: 0, upd: 0;
       cd8jy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.maxStkSize_info" {
     GHC.RTS.Flags.maxStkSize_info:
         const GHC.RTS.Flags.maxStkSize_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8jx() //  [R1]
         { []
         }
     {offset
       cd8jx: // global
           R1 = P64[R1 + 23] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8jx_info" {
     block_cd8jx_info:
         const _cd8jx;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.932511125 UTC

[section ""data" . GHC.RTS.Flags.giveStats_closure" {
     GHC.RTS.Flags.giveStats_closure:
         const GHC.RTS.Flags.giveStats_info;
 },
 GHC.RTS.Flags.giveStats_entry() //  [R2]
         { []
         }
     {offset
       cd8jZ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8k0; else goto cd8k1;
       cd8k0: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.giveStats_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8k1: // global
           I64[Sp - 8] = block_cd8jW_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8k5; else goto cd8jX;
       ud8k5: // global
           call _cd8jW(R1) args: 0, res: 0, upd: 0;
       cd8jX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.giveStats_info" {
     GHC.RTS.Flags.giveStats_info:
         const GHC.RTS.Flags.giveStats_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8jW() //  [R1]
         { []
         }
     {offset
       cd8jW: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8jW_info" {
     block_cd8jW_info:
         const _cd8jW;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.938010594 UTC

[section ""data" . GHC.RTS.Flags.statsFile_closure" {
     GHC.RTS.Flags.statsFile_closure:
         const GHC.RTS.Flags.statsFile_info;
 },
 GHC.RTS.Flags.statsFile_entry() //  [R2]
         { []
         }
     {offset
       cd8ko: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8kp; else goto cd8kq;
       cd8kp: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.statsFile_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8kq: // global
           I64[Sp - 8] = block_cd8kl_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8ku; else goto cd8km;
       ud8ku: // global
           call _cd8kl(R1) args: 0, res: 0, upd: 0;
       cd8km: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.statsFile_info" {
     GHC.RTS.Flags.statsFile_info:
         const GHC.RTS.Flags.statsFile_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8kl() //  [R1]
         { []
         }
     {offset
       cd8kl: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8kl_info" {
     block_cd8kl_info:
         const _cd8kl;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.943754951 UTC

[section ""data" . GHC.RTS.Flags.ctxtSwitchTicks_closure" {
     GHC.RTS.Flags.ctxtSwitchTicks_closure:
         const GHC.RTS.Flags.ctxtSwitchTicks_info;
 },
 GHC.RTS.Flags.ctxtSwitchTicks_entry() //  [R2]
         { []
         }
     {offset
       cd8kN: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8kO; else goto cd8kP;
       cd8kO: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.ctxtSwitchTicks_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8kP: // global
           I64[Sp - 8] = block_cd8kK_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8kT; else goto cd8kL;
       ud8kT: // global
           call _cd8kK(R1) args: 0, res: 0, upd: 0;
       cd8kL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.ctxtSwitchTicks_info" {
     GHC.RTS.Flags.ctxtSwitchTicks_info:
         const GHC.RTS.Flags.ctxtSwitchTicks_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8kK() //  [R1]
         { []
         }
     {offset
       cd8kK: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8kK_info" {
     block_cd8kK_info:
         const _cd8kK;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.949730165 UTC

[section ""data" . GHC.RTS.Flags.ctxtSwitchTime_closure" {
     GHC.RTS.Flags.ctxtSwitchTime_closure:
         const GHC.RTS.Flags.ctxtSwitchTime_info;
 },
 GHC.RTS.Flags.ctxtSwitchTime_entry() //  [R2]
         { []
         }
     {offset
       cd8lc: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8ld; else goto cd8le;
       cd8ld: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.ctxtSwitchTime_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8le: // global
           I64[Sp - 8] = block_cd8l9_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8li; else goto cd8la;
       ud8li: // global
           call _cd8l9(R1) args: 0, res: 0, upd: 0;
       cd8la: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.ctxtSwitchTime_info" {
     GHC.RTS.Flags.ctxtSwitchTime_info:
         const GHC.RTS.Flags.ctxtSwitchTime_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8l9() //  [R1]
         { []
         }
     {offset
       cd8l9: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8l9_info" {
     block_cd8l9_info:
         const _cd8l9;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.955019704 UTC

[section ""data" . GHC.RTS.Flags.linkerMemBase_closure" {
     GHC.RTS.Flags.linkerMemBase_closure:
         const GHC.RTS.Flags.linkerMemBase_info;
 },
 GHC.RTS.Flags.linkerMemBase_entry() //  [R2]
         { []
         }
     {offset
       cd8lB: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8lC; else goto cd8lD;
       cd8lC: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.linkerMemBase_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8lD: // global
           I64[Sp - 8] = block_cd8ly_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8lH; else goto cd8lz;
       ud8lH: // global
           call _cd8ly(R1) args: 0, res: 0, upd: 0;
       cd8lz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.linkerMemBase_info" {
     GHC.RTS.Flags.linkerMemBase_info:
         const GHC.RTS.Flags.linkerMemBase_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8ly() //  [R1]
         { []
         }
     {offset
       cd8ly: // global
           R1 = P64[R1 + 55] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8ly_info" {
     block_cd8ly_info:
         const _cd8ly;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.960635884 UTC

[section ""data" . GHC.RTS.Flags.machineReadable_closure" {
     GHC.RTS.Flags.machineReadable_closure:
         const GHC.RTS.Flags.machineReadable_info;
 },
 GHC.RTS.Flags.machineReadable_entry() //  [R2]
         { []
         }
     {offset
       cd8m0: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8m1; else goto cd8m2;
       cd8m1: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.machineReadable_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8m2: // global
           I64[Sp - 8] = block_cd8lX_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8m6; else goto cd8lY;
       ud8m6: // global
           call _cd8lX(R1) args: 0, res: 0, upd: 0;
       cd8lY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.machineReadable_info" {
     GHC.RTS.Flags.machineReadable_info:
         const GHC.RTS.Flags.machineReadable_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8lX() //  [R1]
         { []
         }
     {offset
       cd8lX: // global
           R1 = P64[R1 + 47] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8lX_info" {
     block_cd8lX_info:
         const _cd8lX;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.96600285 UTC

[section ""data" . GHC.RTS.Flags.generateStackTrace_closure" {
     GHC.RTS.Flags.generateStackTrace_closure:
         const GHC.RTS.Flags.generateStackTrace_info;
 },
 GHC.RTS.Flags.generateStackTrace_entry() //  [R2]
         { []
         }
     {offset
       cd8mp: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8mq; else goto cd8mr;
       cd8mq: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.generateStackTrace_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8mr: // global
           I64[Sp - 8] = block_cd8mm_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8mv; else goto cd8mn;
       ud8mv: // global
           call _cd8mm(R1) args: 0, res: 0, upd: 0;
       cd8mn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.generateStackTrace_info" {
     GHC.RTS.Flags.generateStackTrace_info:
         const GHC.RTS.Flags.generateStackTrace_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8mm() //  [R1]
         { []
         }
     {offset
       cd8mm: // global
           R1 = P64[R1 + 39] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8mm_info" {
     block_cd8mm_info:
         const _cd8mm;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.971804988 UTC

[section ""data" . GHC.RTS.Flags.generateCrashDumpFile_closure" {
     GHC.RTS.Flags.generateCrashDumpFile_closure:
         const GHC.RTS.Flags.generateCrashDumpFile_info;
 },
 GHC.RTS.Flags.generateCrashDumpFile_entry() //  [R2]
         { []
         }
     {offset
       cd8mO: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8mP; else goto cd8mQ;
       cd8mP: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.generateCrashDumpFile_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8mQ: // global
           I64[Sp - 8] = block_cd8mL_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8mU; else goto cd8mM;
       ud8mU: // global
           call _cd8mL(R1) args: 0, res: 0, upd: 0;
       cd8mM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.generateCrashDumpFile_info" {
     GHC.RTS.Flags.generateCrashDumpFile_info:
         const GHC.RTS.Flags.generateCrashDumpFile_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8mL() //  [R1]
         { []
         }
     {offset
       cd8mL: // global
           R1 = P64[R1 + 31] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8mL_info" {
     block_cd8mL_info:
         const _cd8mL;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.977257249 UTC

[section ""data" . GHC.RTS.Flags.installSEHHandlers_closure" {
     GHC.RTS.Flags.installSEHHandlers_closure:
         const GHC.RTS.Flags.installSEHHandlers_info;
 },
 GHC.RTS.Flags.installSEHHandlers_entry() //  [R2]
         { []
         }
     {offset
       cd8nd: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8ne; else goto cd8nf;
       cd8ne: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.installSEHHandlers_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8nf: // global
           I64[Sp - 8] = block_cd8na_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8nj; else goto cd8nb;
       ud8nj: // global
           call _cd8na(R1) args: 0, res: 0, upd: 0;
       cd8nb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.installSEHHandlers_info" {
     GHC.RTS.Flags.installSEHHandlers_info:
         const GHC.RTS.Flags.installSEHHandlers_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8na() //  [R1]
         { []
         }
     {offset
       cd8na: // global
           R1 = P64[R1 + 23] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8na_info" {
     block_cd8na_info:
         const _cd8na;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.983297369 UTC

[section ""data" . GHC.RTS.Flags.installSignalHandlers_closure" {
     GHC.RTS.Flags.installSignalHandlers_closure:
         const GHC.RTS.Flags.installSignalHandlers_info;
 },
 GHC.RTS.Flags.installSignalHandlers_entry() //  [R2]
         { []
         }
     {offset
       cd8nC: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8nD; else goto cd8nE;
       cd8nD: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.installSignalHandlers_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8nE: // global
           I64[Sp - 8] = block_cd8nz_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8nI; else goto cd8nA;
       ud8nI: // global
           call _cd8nz(R1) args: 0, res: 0, upd: 0;
       cd8nA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.installSignalHandlers_info" {
     GHC.RTS.Flags.installSignalHandlers_info:
         const GHC.RTS.Flags.installSignalHandlers_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8nz() //  [R1]
         { []
         }
     {offset
       cd8nz: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8nz_info" {
     block_cd8nz_info:
         const _cd8nz;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.988607296 UTC

[section ""data" . GHC.RTS.Flags.tickInterval_closure" {
     GHC.RTS.Flags.tickInterval_closure:
         const GHC.RTS.Flags.tickInterval_info;
 },
 GHC.RTS.Flags.tickInterval_entry() //  [R2]
         { []
         }
     {offset
       cd8o1: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8o2; else goto cd8o3;
       cd8o2: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.tickInterval_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8o3: // global
           I64[Sp - 8] = block_cd8nY_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8o7; else goto cd8nZ;
       ud8o7: // global
           call _cd8nY(R1) args: 0, res: 0, upd: 0;
       cd8nZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.tickInterval_info" {
     GHC.RTS.Flags.tickInterval_info:
         const GHC.RTS.Flags.tickInterval_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8nY() //  [R1]
         { []
         }
     {offset
       cd8nY: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8nY_info" {
     block_cd8nY_info:
         const _cd8nY;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.994189852 UTC

[section ""data" . GHC.RTS.Flags.sparks_closure" {
     GHC.RTS.Flags.sparks_closure:
         const GHC.RTS.Flags.sparks_info;
 },
 GHC.RTS.Flags.sparks_entry() //  [R2]
         { []
         }
     {offset
       cd8oq: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8or; else goto cd8os;
       cd8or: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.sparks_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8os: // global
           I64[Sp - 8] = block_cd8on_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8ow; else goto cd8oo;
       ud8ow: // global
           call _cd8on(R1) args: 0, res: 0, upd: 0;
       cd8oo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.sparks_info" {
     GHC.RTS.Flags.sparks_info:
         const GHC.RTS.Flags.sparks_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8on() //  [R1]
         { []
         }
     {offset
       cd8on: // global
           R1 = P64[R1 + 119] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8on_info" {
     block_cd8on_info:
         const _cd8on;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:57.999448242 UTC

[section ""data" . GHC.RTS.Flags.hpc_closure" {
     GHC.RTS.Flags.hpc_closure:
         const GHC.RTS.Flags.hpc_info;
 },
 GHC.RTS.Flags.hpc_entry() //  [R2]
         { []
         }
     {offset
       cd8oP: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8oQ; else goto cd8oR;
       cd8oQ: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.hpc_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8oR: // global
           I64[Sp - 8] = block_cd8oM_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8oV; else goto cd8oN;
       ud8oV: // global
           call _cd8oM(R1) args: 0, res: 0, upd: 0;
       cd8oN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.hpc_info" {
     GHC.RTS.Flags.hpc_info:
         const GHC.RTS.Flags.hpc_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8oM() //  [R1]
         { []
         }
     {offset
       cd8oM: // global
           R1 = P64[R1 + 111] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8oM_info" {
     block_cd8oM_info:
         const _cd8oM;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.005122443 UTC

[section ""data" . GHC.RTS.Flags.squeeze_closure" {
     GHC.RTS.Flags.squeeze_closure:
         const GHC.RTS.Flags.squeeze_info;
 },
 GHC.RTS.Flags.squeeze_entry() //  [R2]
         { []
         }
     {offset
       cd8pe: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8pf; else goto cd8pg;
       cd8pf: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.squeeze_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8pg: // global
           I64[Sp - 8] = block_cd8pb_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8pk; else goto cd8pc;
       ud8pk: // global
           call _cd8pb(R1) args: 0, res: 0, upd: 0;
       cd8pc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.squeeze_info" {
     GHC.RTS.Flags.squeeze_info:
         const GHC.RTS.Flags.squeeze_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8pb() //  [R1]
         { []
         }
     {offset
       cd8pb: // global
           R1 = P64[R1 + 103] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8pb_info" {
     block_cd8pb_info:
         const _cd8pb;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.010436078 UTC

[section ""data" . GHC.RTS.Flags.stm_closure" {
     GHC.RTS.Flags.stm_closure:
         const GHC.RTS.Flags.stm_info;
 },
 GHC.RTS.Flags.stm_entry() //  [R2]
         { []
         }
     {offset
       cd8pD: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8pE; else goto cd8pF;
       cd8pE: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.stm_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8pF: // global
           I64[Sp - 8] = block_cd8pA_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8pJ; else goto cd8pB;
       ud8pJ: // global
           call _cd8pA(R1) args: 0, res: 0, upd: 0;
       cd8pB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.stm_info" {
     GHC.RTS.Flags.stm_info:
         const GHC.RTS.Flags.stm_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8pA() //  [R1]
         { []
         }
     {offset
       cd8pA: // global
           R1 = P64[R1 + 95] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8pA_info" {
     block_cd8pA_info:
         const _cd8pA;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.018248795 UTC

[section ""data" . GHC.RTS.Flags.apply_closure" {
     GHC.RTS.Flags.apply_closure:
         const GHC.RTS.Flags.apply_info;
 },
 GHC.RTS.Flags.apply_entry() //  [R2]
         { []
         }
     {offset
       cd8q2: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8q3; else goto cd8q4;
       cd8q3: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.apply_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8q4: // global
           I64[Sp - 8] = block_cd8pZ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8q8; else goto cd8q0;
       ud8q8: // global
           call _cd8pZ(R1) args: 0, res: 0, upd: 0;
       cd8q0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.apply_info" {
     GHC.RTS.Flags.apply_info:
         const GHC.RTS.Flags.apply_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8pZ() //  [R1]
         { []
         }
     {offset
       cd8pZ: // global
           R1 = P64[R1 + 87] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8pZ_info" {
     block_cd8pZ_info:
         const _cd8pZ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.026823571 UTC

[section ""data" . GHC.RTS.Flags.linker_closure" {
     GHC.RTS.Flags.linker_closure:
         const GHC.RTS.Flags.linker_info;
 },
 GHC.RTS.Flags.linker_entry() //  [R2]
         { []
         }
     {offset
       cd8qr: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8qs; else goto cd8qt;
       cd8qs: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.linker_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8qt: // global
           I64[Sp - 8] = block_cd8qo_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8qx; else goto cd8qp;
       ud8qx: // global
           call _cd8qo(R1) args: 0, res: 0, upd: 0;
       cd8qp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.linker_info" {
     GHC.RTS.Flags.linker_info:
         const GHC.RTS.Flags.linker_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8qo() //  [R1]
         { []
         }
     {offset
       cd8qo: // global
           R1 = P64[R1 + 79] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8qo_info" {
     block_cd8qo_info:
         const _cd8qo;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.034939175 UTC

[section ""data" . GHC.RTS.Flags.prof_closure" {
     GHC.RTS.Flags.prof_closure:
         const GHC.RTS.Flags.prof_info;
 },
 GHC.RTS.Flags.prof_entry() //  [R2]
         { []
         }
     {offset
       cd8qQ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8qR; else goto cd8qS;
       cd8qR: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.prof_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8qS: // global
           I64[Sp - 8] = block_cd8qN_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8qW; else goto cd8qO;
       ud8qW: // global
           call _cd8qN(R1) args: 0, res: 0, upd: 0;
       cd8qO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.prof_info" {
     GHC.RTS.Flags.prof_info:
         const GHC.RTS.Flags.prof_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8qN() //  [R1]
         { []
         }
     {offset
       cd8qN: // global
           R1 = P64[R1 + 71] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8qN_info" {
     block_cd8qN_info:
         const _cd8qN;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.04372036 UTC

[section ""data" . GHC.RTS.Flags.stable_closure" {
     GHC.RTS.Flags.stable_closure:
         const GHC.RTS.Flags.stable_info;
 },
 GHC.RTS.Flags.stable_entry() //  [R2]
         { []
         }
     {offset
       cd8rf: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8rg; else goto cd8rh;
       cd8rg: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.stable_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8rh: // global
           I64[Sp - 8] = block_cd8rc_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8rl; else goto cd8rd;
       ud8rl: // global
           call _cd8rc(R1) args: 0, res: 0, upd: 0;
       cd8rd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.stable_info" {
     GHC.RTS.Flags.stable_info:
         const GHC.RTS.Flags.stable_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8rc() //  [R1]
         { []
         }
     {offset
       cd8rc: // global
           R1 = P64[R1 + 63] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8rc_info" {
     block_cd8rc_info:
         const _cd8rc;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.052672464 UTC

[section ""data" . GHC.RTS.Flags.sanity_closure" {
     GHC.RTS.Flags.sanity_closure:
         const GHC.RTS.Flags.sanity_info;
 },
 GHC.RTS.Flags.sanity_entry() //  [R2]
         { []
         }
     {offset
       cd8rE: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8rF; else goto cd8rG;
       cd8rF: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.sanity_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8rG: // global
           I64[Sp - 8] = block_cd8rB_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8rK; else goto cd8rC;
       ud8rK: // global
           call _cd8rB(R1) args: 0, res: 0, upd: 0;
       cd8rC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.sanity_info" {
     GHC.RTS.Flags.sanity_info:
         const GHC.RTS.Flags.sanity_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8rB() //  [R1]
         { []
         }
     {offset
       cd8rB: // global
           R1 = P64[R1 + 55] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8rB_info" {
     block_cd8rB_info:
         const _cd8rB;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.059446711 UTC

[section ""data" . GHC.RTS.Flags.block_alloc_closure" {
     GHC.RTS.Flags.block_alloc_closure:
         const GHC.RTS.Flags.block_alloc_info;
 },
 GHC.RTS.Flags.block_alloc_entry() //  [R2]
         { []
         }
     {offset
       cd8s3: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8s4; else goto cd8s5;
       cd8s4: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.block_alloc_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8s5: // global
           I64[Sp - 8] = block_cd8s0_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8s9; else goto cd8s1;
       ud8s9: // global
           call _cd8s0(R1) args: 0, res: 0, upd: 0;
       cd8s1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.block_alloc_info" {
     GHC.RTS.Flags.block_alloc_info:
         const GHC.RTS.Flags.block_alloc_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8s0() //  [R1]
         { []
         }
     {offset
       cd8s0: // global
           R1 = P64[R1 + 47] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8s0_info" {
     block_cd8s0_info:
         const _cd8s0;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.065740896 UTC

[section ""data" . GHC.RTS.Flags.gc_closure" {
     GHC.RTS.Flags.gc_closure:
         const GHC.RTS.Flags.gc_info;
 },
 GHC.RTS.Flags.gc_entry() //  [R2]
         { []
         }
     {offset
       cd8ss: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8st; else goto cd8su;
       cd8st: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.gc_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8su: // global
           I64[Sp - 8] = block_cd8sp_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8sy; else goto cd8sq;
       ud8sy: // global
           call _cd8sp(R1) args: 0, res: 0, upd: 0;
       cd8sq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.gc_info" {
     GHC.RTS.Flags.gc_info:
         const GHC.RTS.Flags.gc_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8sp() //  [R1]
         { []
         }
     {offset
       cd8sp: // global
           R1 = P64[R1 + 39] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8sp_info" {
     block_cd8sp_info:
         const _cd8sp;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.070949808 UTC

[section ""data" . GHC.RTS.Flags.gccafs_closure" {
     GHC.RTS.Flags.gccafs_closure:
         const GHC.RTS.Flags.gccafs_info;
 },
 GHC.RTS.Flags.gccafs_entry() //  [R2]
         { []
         }
     {offset
       cd8sR: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8sS; else goto cd8sT;
       cd8sS: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.gccafs_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8sT: // global
           I64[Sp - 8] = block_cd8sO_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8sX; else goto cd8sP;
       ud8sX: // global
           call _cd8sO(R1) args: 0, res: 0, upd: 0;
       cd8sP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.gccafs_info" {
     GHC.RTS.Flags.gccafs_info:
         const GHC.RTS.Flags.gccafs_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8sO() //  [R1]
         { []
         }
     {offset
       cd8sO: // global
           R1 = P64[R1 + 31] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8sO_info" {
     block_cd8sO_info:
         const _cd8sO;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.076740189 UTC

[section ""data" . GHC.RTS.Flags.weak_closure" {
     GHC.RTS.Flags.weak_closure:
         const GHC.RTS.Flags.weak_info;
 },
 GHC.RTS.Flags.weak_entry() //  [R2]
         { []
         }
     {offset
       cd8tg: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8th; else goto cd8ti;
       cd8th: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.weak_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8ti: // global
           I64[Sp - 8] = block_cd8td_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8tm; else goto cd8te;
       ud8tm: // global
           call _cd8td(R1) args: 0, res: 0, upd: 0;
       cd8te: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.weak_info" {
     GHC.RTS.Flags.weak_info:
         const GHC.RTS.Flags.weak_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8td() //  [R1]
         { []
         }
     {offset
       cd8td: // global
           R1 = P64[R1 + 23] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8td_info" {
     block_cd8td_info:
         const _cd8td;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.082315805 UTC

[section ""data" . GHC.RTS.Flags.interpreter_closure" {
     GHC.RTS.Flags.interpreter_closure:
         const GHC.RTS.Flags.interpreter_info;
 },
 GHC.RTS.Flags.interpreter_entry() //  [R2]
         { []
         }
     {offset
       cd8tF: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8tG; else goto cd8tH;
       cd8tG: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.interpreter_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8tH: // global
           I64[Sp - 8] = block_cd8tC_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8tL; else goto cd8tD;
       ud8tL: // global
           call _cd8tC(R1) args: 0, res: 0, upd: 0;
       cd8tD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.interpreter_info" {
     GHC.RTS.Flags.interpreter_info:
         const GHC.RTS.Flags.interpreter_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8tC() //  [R1]
         { []
         }
     {offset
       cd8tC: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8tC_info" {
     block_cd8tC_info:
         const _cd8tC;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.087746356 UTC

[section ""data" . GHC.RTS.Flags.scheduler_closure" {
     GHC.RTS.Flags.scheduler_closure:
         const GHC.RTS.Flags.scheduler_info;
 },
 GHC.RTS.Flags.scheduler_entry() //  [R2]
         { []
         }
     {offset
       cd8u4: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8u5; else goto cd8u6;
       cd8u5: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.scheduler_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8u6: // global
           I64[Sp - 8] = block_cd8u1_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8ua; else goto cd8u2;
       ud8ua: // global
           call _cd8u1(R1) args: 0, res: 0, upd: 0;
       cd8u2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.scheduler_info" {
     GHC.RTS.Flags.scheduler_info:
         const GHC.RTS.Flags.scheduler_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8u1() //  [R1]
         { []
         }
     {offset
       cd8u1: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8u1_info" {
     block_cd8u1_info:
         const _cd8u1;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.093635962 UTC

[section ""data" . GHC.RTS.Flags.msecsPerTick_closure" {
     GHC.RTS.Flags.msecsPerTick_closure:
         const GHC.RTS.Flags.msecsPerTick_info;
 },
 GHC.RTS.Flags.msecsPerTick_entry() //  [R2]
         { []
         }
     {offset
       cd8ut: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8uu; else goto cd8uv;
       cd8uu: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.msecsPerTick_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8uv: // global
           I64[Sp - 8] = block_cd8uq_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8uz; else goto cd8ur;
       ud8uz: // global
           call _cd8uq(R1) args: 0, res: 0, upd: 0;
       cd8ur: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.msecsPerTick_info" {
     GHC.RTS.Flags.msecsPerTick_info:
         const GHC.RTS.Flags.msecsPerTick_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8uq() //  [R1]
         { []
         }
     {offset
       cd8uq: // global
           R1 = P64[R1 + 23] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8uq_info" {
     block_cd8uq_info:
         const _cd8uq;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.099576702 UTC

[section ""data" . GHC.RTS.Flags.profilerTicks_closure" {
     GHC.RTS.Flags.profilerTicks_closure:
         const GHC.RTS.Flags.profilerTicks_info;
 },
 GHC.RTS.Flags.profilerTicks_entry() //  [R2]
         { []
         }
     {offset
       cd8uS: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8uT; else goto cd8uU;
       cd8uT: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.profilerTicks_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8uU: // global
           I64[Sp - 8] = block_cd8uP_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8uY; else goto cd8uQ;
       ud8uY: // global
           call _cd8uP(R1) args: 0, res: 0, upd: 0;
       cd8uQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.profilerTicks_info" {
     GHC.RTS.Flags.profilerTicks_info:
         const GHC.RTS.Flags.profilerTicks_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8uP() //  [R1]
         { []
         }
     {offset
       cd8uP: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8uP_info" {
     block_cd8uP_info:
         const _cd8uP;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.104962839 UTC

[section ""data" . GHC.RTS.Flags.doCostCentres_closure" {
     GHC.RTS.Flags.doCostCentres_closure:
         const GHC.RTS.Flags.doCostCentres_info;
 },
 GHC.RTS.Flags.doCostCentres_entry() //  [R2]
         { []
         }
     {offset
       cd8vh: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8vi; else goto cd8vj;
       cd8vi: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.doCostCentres_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8vj: // global
           I64[Sp - 8] = block_cd8ve_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8vn; else goto cd8vf;
       ud8vn: // global
           call _cd8ve(R1) args: 0, res: 0, upd: 0;
       cd8vf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.doCostCentres_info" {
     GHC.RTS.Flags.doCostCentres_info:
         const GHC.RTS.Flags.doCostCentres_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8ve() //  [R1]
         { []
         }
     {offset
       cd8ve: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8ve_info" {
     block_cd8ve_info:
         const _cd8ve;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.111007171 UTC

[section ""data" . GHC.RTS.Flags.bioSelector_closure" {
     GHC.RTS.Flags.bioSelector_closure:
         const GHC.RTS.Flags.bioSelector_info;
 },
 GHC.RTS.Flags.bioSelector_entry() //  [R2]
         { []
         }
     {offset
       cd8vG: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8vH; else goto cd8vI;
       cd8vH: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.bioSelector_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8vI: // global
           I64[Sp - 8] = block_cd8vD_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8vM; else goto cd8vE;
       ud8vM: // global
           call _cd8vD(R1) args: 0, res: 0, upd: 0;
       cd8vE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.bioSelector_info" {
     GHC.RTS.Flags.bioSelector_info:
         const GHC.RTS.Flags.bioSelector_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8vD() //  [R1]
         { []
         }
     {offset
       cd8vD: // global
           R1 = P64[R1 + 111] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8vD_info" {
     block_cd8vD_info:
         const _cd8vD;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.116385492 UTC

[section ""data" . GHC.RTS.Flags.retainerSelector_closure" {
     GHC.RTS.Flags.retainerSelector_closure:
         const GHC.RTS.Flags.retainerSelector_info;
 },
 GHC.RTS.Flags.retainerSelector_entry() //  [R2]
         { []
         }
     {offset
       cd8w5: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8w6; else goto cd8w7;
       cd8w6: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.retainerSelector_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8w7: // global
           I64[Sp - 8] = block_cd8w2_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8wb; else goto cd8w3;
       ud8wb: // global
           call _cd8w2(R1) args: 0, res: 0, upd: 0;
       cd8w3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.retainerSelector_info" {
     GHC.RTS.Flags.retainerSelector_info:
         const GHC.RTS.Flags.retainerSelector_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8w2() //  [R1]
         { []
         }
     {offset
       cd8w2: // global
           R1 = P64[R1 + 103] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8w2_info" {
     block_cd8w2_info:
         const _cd8w2;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.121825015 UTC

[section ""data" . GHC.RTS.Flags.ccsSelector_closure" {
     GHC.RTS.Flags.ccsSelector_closure:
         const GHC.RTS.Flags.ccsSelector_info;
 },
 GHC.RTS.Flags.ccsSelector_entry() //  [R2]
         { []
         }
     {offset
       cd8wu: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8wv; else goto cd8ww;
       cd8wv: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.ccsSelector_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8ww: // global
           I64[Sp - 8] = block_cd8wr_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8wA; else goto cd8ws;
       ud8wA: // global
           call _cd8wr(R1) args: 0, res: 0, upd: 0;
       cd8ws: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.ccsSelector_info" {
     GHC.RTS.Flags.ccsSelector_info:
         const GHC.RTS.Flags.ccsSelector_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8wr() //  [R1]
         { []
         }
     {offset
       cd8wr: // global
           R1 = P64[R1 + 95] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8wr_info" {
     block_cd8wr_info:
         const _cd8wr;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.12703421 UTC

[section ""data" . GHC.RTS.Flags.ccSelector_closure" {
     GHC.RTS.Flags.ccSelector_closure:
         const GHC.RTS.Flags.ccSelector_info;
 },
 GHC.RTS.Flags.ccSelector_entry() //  [R2]
         { []
         }
     {offset
       cd8wT: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8wU; else goto cd8wV;
       cd8wU: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.ccSelector_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8wV: // global
           I64[Sp - 8] = block_cd8wQ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8wZ; else goto cd8wR;
       ud8wZ: // global
           call _cd8wQ(R1) args: 0, res: 0, upd: 0;
       cd8wR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.ccSelector_info" {
     GHC.RTS.Flags.ccSelector_info:
         const GHC.RTS.Flags.ccSelector_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8wQ() //  [R1]
         { []
         }
     {offset
       cd8wQ: // global
           R1 = P64[R1 + 87] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8wQ_info" {
     block_cd8wQ_info:
         const _cd8wQ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.133218807 UTC

[section ""data" . GHC.RTS.Flags.typeSelector_closure" {
     GHC.RTS.Flags.typeSelector_closure:
         const GHC.RTS.Flags.typeSelector_info;
 },
 GHC.RTS.Flags.typeSelector_entry() //  [R2]
         { []
         }
     {offset
       cd8xi: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8xj; else goto cd8xk;
       cd8xj: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.typeSelector_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8xk: // global
           I64[Sp - 8] = block_cd8xf_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8xo; else goto cd8xg;
       ud8xo: // global
           call _cd8xf(R1) args: 0, res: 0, upd: 0;
       cd8xg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.typeSelector_info" {
     GHC.RTS.Flags.typeSelector_info:
         const GHC.RTS.Flags.typeSelector_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8xf() //  [R1]
         { []
         }
     {offset
       cd8xf: // global
           R1 = P64[R1 + 79] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8xf_info" {
     block_cd8xf_info:
         const _cd8xf;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.138651212 UTC

[section ""data" . GHC.RTS.Flags.descrSelector_closure" {
     GHC.RTS.Flags.descrSelector_closure:
         const GHC.RTS.Flags.descrSelector_info;
 },
 GHC.RTS.Flags.descrSelector_entry() //  [R2]
         { []
         }
     {offset
       cd8xH: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8xI; else goto cd8xJ;
       cd8xI: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.descrSelector_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8xJ: // global
           I64[Sp - 8] = block_cd8xE_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8xN; else goto cd8xF;
       ud8xN: // global
           call _cd8xE(R1) args: 0, res: 0, upd: 0;
       cd8xF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.descrSelector_info" {
     GHC.RTS.Flags.descrSelector_info:
         const GHC.RTS.Flags.descrSelector_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8xE() //  [R1]
         { []
         }
     {offset
       cd8xE: // global
           R1 = P64[R1 + 71] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8xE_info" {
     block_cd8xE_info:
         const _cd8xE;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.143830422 UTC

[section ""data" . GHC.RTS.Flags.modSelector_closure" {
     GHC.RTS.Flags.modSelector_closure:
         const GHC.RTS.Flags.modSelector_info;
 },
 GHC.RTS.Flags.modSelector_entry() //  [R2]
         { []
         }
     {offset
       cd8y6: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8y7; else goto cd8y8;
       cd8y7: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.modSelector_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8y8: // global
           I64[Sp - 8] = block_cd8y3_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8yc; else goto cd8y4;
       ud8yc: // global
           call _cd8y3(R1) args: 0, res: 0, upd: 0;
       cd8y4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.modSelector_info" {
     GHC.RTS.Flags.modSelector_info:
         const GHC.RTS.Flags.modSelector_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8y3() //  [R1]
         { []
         }
     {offset
       cd8y3: // global
           R1 = P64[R1 + 63] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8y3_info" {
     block_cd8y3_info:
         const _cd8y3;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.149204651 UTC

[section ""data" . GHC.RTS.Flags.ccsLength_closure" {
     GHC.RTS.Flags.ccsLength_closure:
         const GHC.RTS.Flags.ccsLength_info;
 },
 GHC.RTS.Flags.ccsLength_entry() //  [R2]
         { []
         }
     {offset
       cd8yv: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8yw; else goto cd8yx;
       cd8yw: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.ccsLength_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8yx: // global
           I64[Sp - 8] = block_cd8ys_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8yB; else goto cd8yt;
       ud8yB: // global
           call _cd8ys(R1) args: 0, res: 0, upd: 0;
       cd8yt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.ccsLength_info" {
     GHC.RTS.Flags.ccsLength_info:
         const GHC.RTS.Flags.ccsLength_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8ys() //  [R1]
         { []
         }
     {offset
       cd8ys: // global
           R1 = P64[R1 + 55] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8ys_info" {
     block_cd8ys_info:
         const _cd8ys;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.155236109 UTC

[section ""data" . GHC.RTS.Flags.maxRetainerSetSize_closure" {
     GHC.RTS.Flags.maxRetainerSetSize_closure:
         const GHC.RTS.Flags.maxRetainerSetSize_info;
 },
 GHC.RTS.Flags.maxRetainerSetSize_entry() //  [R2]
         { []
         }
     {offset
       cd8yU: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8yV; else goto cd8yW;
       cd8yV: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.maxRetainerSetSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8yW: // global
           I64[Sp - 8] = block_cd8yR_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8z0; else goto cd8yS;
       ud8z0: // global
           call _cd8yR(R1) args: 0, res: 0, upd: 0;
       cd8yS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.maxRetainerSetSize_info" {
     GHC.RTS.Flags.maxRetainerSetSize_info:
         const GHC.RTS.Flags.maxRetainerSetSize_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8yR() //  [R1]
         { []
         }
     {offset
       cd8yR: // global
           R1 = P64[R1 + 47] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8yR_info" {
     block_cd8yR_info:
         const _cd8yR;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.160555995 UTC

[section ""data" . GHC.RTS.Flags.showCCSOnException_closure" {
     GHC.RTS.Flags.showCCSOnException_closure:
         const GHC.RTS.Flags.showCCSOnException_info;
 },
 GHC.RTS.Flags.showCCSOnException_entry() //  [R2]
         { []
         }
     {offset
       cd8zj: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8zk; else goto cd8zl;
       cd8zk: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.showCCSOnException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8zl: // global
           I64[Sp - 8] = block_cd8zg_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8zp; else goto cd8zh;
       ud8zp: // global
           call _cd8zg(R1) args: 0, res: 0, upd: 0;
       cd8zh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.showCCSOnException_info" {
     GHC.RTS.Flags.showCCSOnException_info:
         const GHC.RTS.Flags.showCCSOnException_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8zg() //  [R1]
         { []
         }
     {offset
       cd8zg: // global
           R1 = P64[R1 + 39] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8zg_info" {
     block_cd8zg_info:
         const _cd8zg;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.166755752 UTC

[section ""data" . GHC.RTS.Flags.includeTSOs_closure" {
     GHC.RTS.Flags.includeTSOs_closure:
         const GHC.RTS.Flags.includeTSOs_info;
 },
 GHC.RTS.Flags.includeTSOs_entry() //  [R2]
         { []
         }
     {offset
       cd8zI: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8zJ; else goto cd8zK;
       cd8zJ: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.includeTSOs_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8zK: // global
           I64[Sp - 8] = block_cd8zF_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8zO; else goto cd8zG;
       ud8zO: // global
           call _cd8zF(R1) args: 0, res: 0, upd: 0;
       cd8zG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.includeTSOs_info" {
     GHC.RTS.Flags.includeTSOs_info:
         const GHC.RTS.Flags.includeTSOs_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8zF() //  [R1]
         { []
         }
     {offset
       cd8zF: // global
           R1 = P64[R1 + 31] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8zF_info" {
     block_cd8zF_info:
         const _cd8zF;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.172105331 UTC

[section ""data" . GHC.RTS.Flags.heapProfileIntervalTicks_closure" {
     GHC.RTS.Flags.heapProfileIntervalTicks_closure:
         const GHC.RTS.Flags.heapProfileIntervalTicks_info;
 },
 GHC.RTS.Flags.heapProfileIntervalTicks_entry() //  [R2]
         { []
         }
     {offset
       cd8A7: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8A8; else goto cd8A9;
       cd8A8: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.heapProfileIntervalTicks_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8A9: // global
           I64[Sp - 8] = block_cd8A4_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8Ad; else goto cd8A5;
       ud8Ad: // global
           call _cd8A4(R1) args: 0, res: 0, upd: 0;
       cd8A5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.heapProfileIntervalTicks_info" {
     GHC.RTS.Flags.heapProfileIntervalTicks_info:
         const GHC.RTS.Flags.heapProfileIntervalTicks_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8A4() //  [R1]
         { []
         }
     {offset
       cd8A4: // global
           R1 = P64[R1 + 23] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8A4_info" {
     block_cd8A4_info:
         const _cd8A4;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.178002283 UTC

[section ""data" . GHC.RTS.Flags.heapProfileInterval_closure" {
     GHC.RTS.Flags.heapProfileInterval_closure:
         const GHC.RTS.Flags.heapProfileInterval_info;
 },
 GHC.RTS.Flags.heapProfileInterval_entry() //  [R2]
         { []
         }
     {offset
       cd8Aw: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8Ax; else goto cd8Ay;
       cd8Ax: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.heapProfileInterval_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8Ay: // global
           I64[Sp - 8] = block_cd8At_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8AC; else goto cd8Au;
       ud8AC: // global
           call _cd8At(R1) args: 0, res: 0, upd: 0;
       cd8Au: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.heapProfileInterval_info" {
     GHC.RTS.Flags.heapProfileInterval_info:
         const GHC.RTS.Flags.heapProfileInterval_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8At() //  [R1]
         { []
         }
     {offset
       cd8At: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8At_info" {
     block_cd8At_info:
         const _cd8At;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.183516153 UTC

[section ""data" . GHC.RTS.Flags.doHeapProfile_closure" {
     GHC.RTS.Flags.doHeapProfile_closure:
         const GHC.RTS.Flags.doHeapProfile_info;
 },
 GHC.RTS.Flags.doHeapProfile_entry() //  [R2]
         { []
         }
     {offset
       cd8AV: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8AW; else goto cd8AX;
       cd8AW: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.doHeapProfile_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8AX: // global
           I64[Sp - 8] = block_cd8AS_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8B1; else goto cd8AT;
       ud8B1: // global
           call _cd8AS(R1) args: 0, res: 0, upd: 0;
       cd8AT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.doHeapProfile_info" {
     GHC.RTS.Flags.doHeapProfile_info:
         const GHC.RTS.Flags.doHeapProfile_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8AS() //  [R1]
         { []
         }
     {offset
       cd8AS: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8AS_info" {
     block_cd8AS_info:
         const _cd8AS;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.189331017 UTC

[section ""data" . GHC.RTS.Flags.user_closure" {
     GHC.RTS.Flags.user_closure:
         const GHC.RTS.Flags.user_info;
 },
 GHC.RTS.Flags.user_entry() //  [R2]
         { []
         }
     {offset
       cd8Bk: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8Bl; else goto cd8Bm;
       cd8Bl: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.user_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8Bm: // global
           I64[Sp - 8] = block_cd8Bh_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8Bq; else goto cd8Bi;
       ud8Bq: // global
           call _cd8Bh(R1) args: 0, res: 0, upd: 0;
       cd8Bi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.user_info" {
     GHC.RTS.Flags.user_info:
         const GHC.RTS.Flags.user_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8Bh() //  [R1]
         { []
         }
     {offset
       cd8Bh: // global
           R1 = P64[R1 + 55] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8Bh_info" {
     block_cd8Bh_info:
         const _cd8Bh;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.194694099 UTC

[section ""data" . GHC.RTS.Flags.sparksFull_closure" {
     GHC.RTS.Flags.sparksFull_closure:
         const GHC.RTS.Flags.sparksFull_info;
 },
 GHC.RTS.Flags.sparksFull_entry() //  [R2]
         { []
         }
     {offset
       cd8BJ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8BK; else goto cd8BL;
       cd8BK: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.sparksFull_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8BL: // global
           I64[Sp - 8] = block_cd8BG_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8BP; else goto cd8BH;
       ud8BP: // global
           call _cd8BG(R1) args: 0, res: 0, upd: 0;
       cd8BH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.sparksFull_info" {
     GHC.RTS.Flags.sparksFull_info:
         const GHC.RTS.Flags.sparksFull_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8BG() //  [R1]
         { []
         }
     {offset
       cd8BG: // global
           R1 = P64[R1 + 47] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8BG_info" {
     block_cd8BG_info:
         const _cd8BG;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.200164299 UTC

[section ""data" . GHC.RTS.Flags.sparksSampled_closure" {
     GHC.RTS.Flags.sparksSampled_closure:
         const GHC.RTS.Flags.sparksSampled_info;
 },
 GHC.RTS.Flags.sparksSampled_entry() //  [R2]
         { []
         }
     {offset
       cd8C8: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8C9; else goto cd8Ca;
       cd8C9: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.sparksSampled_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8Ca: // global
           I64[Sp - 8] = block_cd8C5_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8Ce; else goto cd8C6;
       ud8Ce: // global
           call _cd8C5(R1) args: 0, res: 0, upd: 0;
       cd8C6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.sparksSampled_info" {
     GHC.RTS.Flags.sparksSampled_info:
         const GHC.RTS.Flags.sparksSampled_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8C5() //  [R1]
         { []
         }
     {offset
       cd8C5: // global
           R1 = P64[R1 + 39] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8C5_info" {
     block_cd8C5_info:
         const _cd8C5;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.20616569 UTC

[section ""data" . GHC.RTS.Flags.traceGc_closure" {
     GHC.RTS.Flags.traceGc_closure:
         const GHC.RTS.Flags.traceGc_info;
 },
 GHC.RTS.Flags.traceGc_entry() //  [R2]
         { []
         }
     {offset
       cd8Cx: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8Cy; else goto cd8Cz;
       cd8Cy: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.traceGc_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8Cz: // global
           I64[Sp - 8] = block_cd8Cu_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8CD; else goto cd8Cv;
       ud8CD: // global
           call _cd8Cu(R1) args: 0, res: 0, upd: 0;
       cd8Cv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.traceGc_info" {
     GHC.RTS.Flags.traceGc_info:
         const GHC.RTS.Flags.traceGc_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8Cu() //  [R1]
         { []
         }
     {offset
       cd8Cu: // global
           R1 = P64[R1 + 31] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8Cu_info" {
     block_cd8Cu_info:
         const _cd8Cu;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.211646767 UTC

[section ""data" . GHC.RTS.Flags.traceScheduler_closure" {
     GHC.RTS.Flags.traceScheduler_closure:
         const GHC.RTS.Flags.traceScheduler_info;
 },
 GHC.RTS.Flags.traceScheduler_entry() //  [R2]
         { []
         }
     {offset
       cd8CW: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8CX; else goto cd8CY;
       cd8CX: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.traceScheduler_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8CY: // global
           I64[Sp - 8] = block_cd8CT_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8D2; else goto cd8CU;
       ud8D2: // global
           call _cd8CT(R1) args: 0, res: 0, upd: 0;
       cd8CU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.traceScheduler_info" {
     GHC.RTS.Flags.traceScheduler_info:
         const GHC.RTS.Flags.traceScheduler_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8CT() //  [R1]
         { []
         }
     {offset
       cd8CT: // global
           R1 = P64[R1 + 23] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8CT_info" {
     block_cd8CT_info:
         const _cd8CT;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.217046089 UTC

[section ""data" . GHC.RTS.Flags.timestamp_closure" {
     GHC.RTS.Flags.timestamp_closure:
         const GHC.RTS.Flags.timestamp_info;
 },
 GHC.RTS.Flags.timestamp_entry() //  [R2]
         { []
         }
     {offset
       cd8Dl: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8Dm; else goto cd8Dn;
       cd8Dm: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.timestamp_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8Dn: // global
           I64[Sp - 8] = block_cd8Di_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8Dr; else goto cd8Dj;
       ud8Dr: // global
           call _cd8Di(R1) args: 0, res: 0, upd: 0;
       cd8Dj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.timestamp_info" {
     GHC.RTS.Flags.timestamp_info:
         const GHC.RTS.Flags.timestamp_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8Di() //  [R1]
         { []
         }
     {offset
       cd8Di: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8Di_info" {
     block_cd8Di_info:
         const _cd8Di;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.22257558 UTC

[section ""data" . GHC.RTS.Flags.tracing_closure" {
     GHC.RTS.Flags.tracing_closure:
         const GHC.RTS.Flags.tracing_info;
 },
 GHC.RTS.Flags.tracing_entry() //  [R2]
         { []
         }
     {offset
       cd8DK: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8DL; else goto cd8DM;
       cd8DL: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.tracing_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8DM: // global
           I64[Sp - 8] = block_cd8DH_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8DQ; else goto cd8DI;
       ud8DQ: // global
           call _cd8DH(R1) args: 0, res: 0, upd: 0;
       cd8DI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.tracing_info" {
     GHC.RTS.Flags.tracing_info:
         const GHC.RTS.Flags.tracing_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8DH() //  [R1]
         { []
         }
     {offset
       cd8DH: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8DH_info" {
     block_cd8DH_info:
         const _cd8DH;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.228698953 UTC

[section ""data" . GHC.RTS.Flags.tickyFile_closure" {
     GHC.RTS.Flags.tickyFile_closure:
         const GHC.RTS.Flags.tickyFile_info;
 },
 GHC.RTS.Flags.tickyFile_entry() //  [R2]
         { []
         }
     {offset
       cd8E9: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8Ea; else goto cd8Eb;
       cd8Ea: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.tickyFile_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8Eb: // global
           I64[Sp - 8] = block_cd8E6_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8Ef; else goto cd8E7;
       ud8Ef: // global
           call _cd8E6(R1) args: 0, res: 0, upd: 0;
       cd8E7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.tickyFile_info" {
     GHC.RTS.Flags.tickyFile_info:
         const GHC.RTS.Flags.tickyFile_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8E6() //  [R1]
         { []
         }
     {offset
       cd8E6: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8E6_info" {
     block_cd8E6_info:
         const _cd8E6;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.234647326 UTC

[section ""data" . GHC.RTS.Flags.showTickyStats_closure" {
     GHC.RTS.Flags.showTickyStats_closure:
         const GHC.RTS.Flags.showTickyStats_info;
 },
 GHC.RTS.Flags.showTickyStats_entry() //  [R2]
         { []
         }
     {offset
       cd8Ey: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8Ez; else goto cd8EA;
       cd8Ez: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.showTickyStats_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8EA: // global
           I64[Sp - 8] = block_cd8Ev_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8EE; else goto cd8Ew;
       ud8EE: // global
           call _cd8Ev(R1) args: 0, res: 0, upd: 0;
       cd8Ew: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.showTickyStats_info" {
     GHC.RTS.Flags.showTickyStats_info:
         const GHC.RTS.Flags.showTickyStats_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8Ev() //  [R1]
         { []
         }
     {offset
       cd8Ev: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8Ev_info" {
     block_cd8Ev_info:
         const _cd8Ev;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.240587341 UTC

[section ""data" . GHC.RTS.Flags.setAffinity_closure" {
     GHC.RTS.Flags.setAffinity_closure:
         const GHC.RTS.Flags.setAffinity_info;
 },
 GHC.RTS.Flags.setAffinity_entry() //  [R2]
         { []
         }
     {offset
       cd8EX: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8EY; else goto cd8EZ;
       cd8EY: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.setAffinity_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8EZ: // global
           I64[Sp - 8] = block_cd8EU_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8F3; else goto cd8EV;
       ud8F3: // global
           call _cd8EU(R1) args: 0, res: 0, upd: 0;
       cd8EV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.setAffinity_info" {
     GHC.RTS.Flags.setAffinity_info:
         const GHC.RTS.Flags.setAffinity_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8EU() //  [R1]
         { []
         }
     {offset
       cd8EU: // global
           R1 = P64[R1 + 79] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8EU_info" {
     block_cd8EU_info:
         const _cd8EU;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.246311309 UTC

[section ""data" . GHC.RTS.Flags.parGcThreads_closure" {
     GHC.RTS.Flags.parGcThreads_closure:
         const GHC.RTS.Flags.parGcThreads_info;
 },
 GHC.RTS.Flags.parGcThreads_entry() //  [R2]
         { []
         }
     {offset
       cd8Fm: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8Fn; else goto cd8Fo;
       cd8Fn: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.parGcThreads_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8Fo: // global
           I64[Sp - 8] = block_cd8Fj_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8Fs; else goto cd8Fk;
       ud8Fs: // global
           call _cd8Fj(R1) args: 0, res: 0, upd: 0;
       cd8Fk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.parGcThreads_info" {
     GHC.RTS.Flags.parGcThreads_info:
         const GHC.RTS.Flags.parGcThreads_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8Fj() //  [R1]
         { []
         }
     {offset
       cd8Fj: // global
           R1 = P64[R1 + 71] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8Fj_info" {
     block_cd8Fj_info:
         const _cd8Fj;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.251553367 UTC

[section ""data" . GHC.RTS.Flags.parGcNoSyncWithIdle_closure" {
     GHC.RTS.Flags.parGcNoSyncWithIdle_closure:
         const GHC.RTS.Flags.parGcNoSyncWithIdle_info;
 },
 GHC.RTS.Flags.parGcNoSyncWithIdle_entry() //  [R2]
         { []
         }
     {offset
       cd8FL: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8FM; else goto cd8FN;
       cd8FM: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.parGcNoSyncWithIdle_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8FN: // global
           I64[Sp - 8] = block_cd8FI_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8FR; else goto cd8FJ;
       ud8FR: // global
           call _cd8FI(R1) args: 0, res: 0, upd: 0;
       cd8FJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.parGcNoSyncWithIdle_info" {
     GHC.RTS.Flags.parGcNoSyncWithIdle_info:
         const GHC.RTS.Flags.parGcNoSyncWithIdle_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8FI() //  [R1]
         { []
         }
     {offset
       cd8FI: // global
           R1 = P64[R1 + 63] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8FI_info" {
     block_cd8FI_info:
         const _cd8FI;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.256890833 UTC

[section ""data" . GHC.RTS.Flags.parGcLoadBalancingGen_closure" {
     GHC.RTS.Flags.parGcLoadBalancingGen_closure:
         const GHC.RTS.Flags.parGcLoadBalancingGen_info;
 },
 GHC.RTS.Flags.parGcLoadBalancingGen_entry() //  [R2]
         { []
         }
     {offset
       cd8Ga: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8Gb; else goto cd8Gc;
       cd8Gb: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.parGcLoadBalancingGen_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8Gc: // global
           I64[Sp - 8] = block_cd8G7_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8Gg; else goto cd8G8;
       ud8Gg: // global
           call _cd8G7(R1) args: 0, res: 0, upd: 0;
       cd8G8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.parGcLoadBalancingGen_info" {
     GHC.RTS.Flags.parGcLoadBalancingGen_info:
         const GHC.RTS.Flags.parGcLoadBalancingGen_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8G7() //  [R1]
         { []
         }
     {offset
       cd8G7: // global
           R1 = P64[R1 + 55] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8G7_info" {
     block_cd8G7_info:
         const _cd8G7;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.262698991 UTC

[section ""data" . GHC.RTS.Flags.parGcLoadBalancingEnabled_closure" {
     GHC.RTS.Flags.parGcLoadBalancingEnabled_closure:
         const GHC.RTS.Flags.parGcLoadBalancingEnabled_info;
 },
 GHC.RTS.Flags.parGcLoadBalancingEnabled_entry() //  [R2]
         { []
         }
     {offset
       cd8Gz: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8GA; else goto cd8GB;
       cd8GA: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.parGcLoadBalancingEnabled_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8GB: // global
           I64[Sp - 8] = block_cd8Gw_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8GF; else goto cd8Gx;
       ud8GF: // global
           call _cd8Gw(R1) args: 0, res: 0, upd: 0;
       cd8Gx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.parGcLoadBalancingEnabled_info" {
     GHC.RTS.Flags.parGcLoadBalancingEnabled_info:
         const GHC.RTS.Flags.parGcLoadBalancingEnabled_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8Gw() //  [R1]
         { []
         }
     {offset
       cd8Gw: // global
           R1 = P64[R1 + 47] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8Gw_info" {
     block_cd8Gw_info:
         const _cd8Gw;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.268081649 UTC

[section ""data" . GHC.RTS.Flags.parGcGen_closure" {
     GHC.RTS.Flags.parGcGen_closure:
         const GHC.RTS.Flags.parGcGen_info;
 },
 GHC.RTS.Flags.parGcGen_entry() //  [R2]
         { []
         }
     {offset
       cd8GY: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8GZ; else goto cd8H0;
       cd8GZ: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.parGcGen_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8H0: // global
           I64[Sp - 8] = block_cd8GV_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8H4; else goto cd8GW;
       ud8H4: // global
           call _cd8GV(R1) args: 0, res: 0, upd: 0;
       cd8GW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.parGcGen_info" {
     GHC.RTS.Flags.parGcGen_info:
         const GHC.RTS.Flags.parGcGen_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8GV() //  [R1]
         { []
         }
     {offset
       cd8GV: // global
           R1 = P64[R1 + 39] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8GV_info" {
     block_cd8GV_info:
         const _cd8GV;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.274214947 UTC

[section ""data" . GHC.RTS.Flags.parGcEnabled_closure" {
     GHC.RTS.Flags.parGcEnabled_closure:
         const GHC.RTS.Flags.parGcEnabled_info;
 },
 GHC.RTS.Flags.parGcEnabled_entry() //  [R2]
         { []
         }
     {offset
       cd8Hn: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8Ho; else goto cd8Hp;
       cd8Ho: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.parGcEnabled_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8Hp: // global
           I64[Sp - 8] = block_cd8Hk_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8Ht; else goto cd8Hl;
       ud8Ht: // global
           call _cd8Hk(R1) args: 0, res: 0, upd: 0;
       cd8Hl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.parGcEnabled_info" {
     GHC.RTS.Flags.parGcEnabled_info:
         const GHC.RTS.Flags.parGcEnabled_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8Hk() //  [R1]
         { []
         }
     {offset
       cd8Hk: // global
           R1 = P64[R1 + 31] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8Hk_info" {
     block_cd8Hk_info:
         const _cd8Hk;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.280085978 UTC

[section ""data" . GHC.RTS.Flags.maxLocalSparks_closure" {
     GHC.RTS.Flags.maxLocalSparks_closure:
         const GHC.RTS.Flags.maxLocalSparks_info;
 },
 GHC.RTS.Flags.maxLocalSparks_entry() //  [R2]
         { []
         }
     {offset
       cd8HM: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8HN; else goto cd8HO;
       cd8HN: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.maxLocalSparks_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8HO: // global
           I64[Sp - 8] = block_cd8HJ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8HS; else goto cd8HK;
       ud8HS: // global
           call _cd8HJ(R1) args: 0, res: 0, upd: 0;
       cd8HK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.maxLocalSparks_info" {
     GHC.RTS.Flags.maxLocalSparks_info:
         const GHC.RTS.Flags.maxLocalSparks_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8HJ() //  [R1]
         { []
         }
     {offset
       cd8HJ: // global
           R1 = P64[R1 + 23] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8HJ_info" {
     block_cd8HJ_info:
         const _cd8HJ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.285463098 UTC

[section ""data" . GHC.RTS.Flags.migrate_closure" {
     GHC.RTS.Flags.migrate_closure:
         const GHC.RTS.Flags.migrate_info;
 },
 GHC.RTS.Flags.migrate_entry() //  [R2]
         { []
         }
     {offset
       cd8Ib: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8Ic; else goto cd8Id;
       cd8Ic: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.migrate_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8Id: // global
           I64[Sp - 8] = block_cd8I8_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8Ih; else goto cd8I9;
       ud8Ih: // global
           call _cd8I8(R1) args: 0, res: 0, upd: 0;
       cd8I9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.migrate_info" {
     GHC.RTS.Flags.migrate_info:
         const GHC.RTS.Flags.migrate_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8I8() //  [R1]
         { []
         }
     {offset
       cd8I8: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8I8_info" {
     block_cd8I8_info:
         const _cd8I8;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.291197044 UTC

[section ""data" . GHC.RTS.Flags.nCapabilities_closure" {
     GHC.RTS.Flags.nCapabilities_closure:
         const GHC.RTS.Flags.nCapabilities_info;
 },
 GHC.RTS.Flags.nCapabilities_entry() //  [R2]
         { []
         }
     {offset
       cd8IA: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8IB; else goto cd8IC;
       cd8IB: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.nCapabilities_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8IC: // global
           I64[Sp - 8] = block_cd8Ix_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8IG; else goto cd8Iy;
       ud8IG: // global
           call _cd8Ix(R1) args: 0, res: 0, upd: 0;
       cd8Iy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.nCapabilities_info" {
     GHC.RTS.Flags.nCapabilities_info:
         const GHC.RTS.Flags.nCapabilities_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8Ix() //  [R1]
         { []
         }
     {offset
       cd8Ix: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8Ix_info" {
     block_cd8Ix_info:
         const _cd8Ix;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.296617835 UTC

[section ""data" . GHC.RTS.Flags.parFlags_closure" {
     GHC.RTS.Flags.parFlags_closure:
         const GHC.RTS.Flags.parFlags_info;
 },
 GHC.RTS.Flags.parFlags_entry() //  [R2]
         { []
         }
     {offset
       cd8IZ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8J0; else goto cd8J1;
       cd8J0: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.parFlags_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8J1: // global
           I64[Sp - 8] = block_cd8IW_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8J5; else goto cd8IX;
       ud8J5: // global
           call _cd8IW(R1) args: 0, res: 0, upd: 0;
       cd8IX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.parFlags_info" {
     GHC.RTS.Flags.parFlags_info:
         const GHC.RTS.Flags.parFlags_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8IW() //  [R1]
         { []
         }
     {offset
       cd8IW: // global
           R1 = P64[R1 + 71] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8IW_info" {
     block_cd8IW_info:
         const _cd8IW;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.30211198 UTC

[section ""data" . GHC.RTS.Flags.tickyFlags_closure" {
     GHC.RTS.Flags.tickyFlags_closure:
         const GHC.RTS.Flags.tickyFlags_info;
 },
 GHC.RTS.Flags.tickyFlags_entry() //  [R2]
         { []
         }
     {offset
       cd8Jo: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8Jp; else goto cd8Jq;
       cd8Jp: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.tickyFlags_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8Jq: // global
           I64[Sp - 8] = block_cd8Jl_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8Ju; else goto cd8Jm;
       ud8Ju: // global
           call _cd8Jl(R1) args: 0, res: 0, upd: 0;
       cd8Jm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.tickyFlags_info" {
     GHC.RTS.Flags.tickyFlags_info:
         const GHC.RTS.Flags.tickyFlags_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8Jl() //  [R1]
         { []
         }
     {offset
       cd8Jl: // global
           R1 = P64[R1 + 63] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8Jl_info" {
     block_cd8Jl_info:
         const _cd8Jl;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.308098299 UTC

[section ""data" . GHC.RTS.Flags.traceFlags_closure" {
     GHC.RTS.Flags.traceFlags_closure:
         const GHC.RTS.Flags.traceFlags_info;
 },
 GHC.RTS.Flags.traceFlags_entry() //  [R2]
         { []
         }
     {offset
       cd8JN: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8JO; else goto cd8JP;
       cd8JO: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.traceFlags_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8JP: // global
           I64[Sp - 8] = block_cd8JK_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8JT; else goto cd8JL;
       ud8JT: // global
           call _cd8JK(R1) args: 0, res: 0, upd: 0;
       cd8JL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.traceFlags_info" {
     GHC.RTS.Flags.traceFlags_info:
         const GHC.RTS.Flags.traceFlags_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8JK() //  [R1]
         { []
         }
     {offset
       cd8JK: // global
           R1 = P64[R1 + 55] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8JK_info" {
     block_cd8JK_info:
         const _cd8JK;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.313792687 UTC

[section ""data" . GHC.RTS.Flags.profilingFlags_closure" {
     GHC.RTS.Flags.profilingFlags_closure:
         const GHC.RTS.Flags.profilingFlags_info;
 },
 GHC.RTS.Flags.profilingFlags_entry() //  [R2]
         { []
         }
     {offset
       cd8Kc: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8Kd; else goto cd8Ke;
       cd8Kd: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.profilingFlags_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8Ke: // global
           I64[Sp - 8] = block_cd8K9_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8Ki; else goto cd8Ka;
       ud8Ki: // global
           call _cd8K9(R1) args: 0, res: 0, upd: 0;
       cd8Ka: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.profilingFlags_info" {
     GHC.RTS.Flags.profilingFlags_info:
         const GHC.RTS.Flags.profilingFlags_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8K9() //  [R1]
         { []
         }
     {offset
       cd8K9: // global
           R1 = P64[R1 + 47] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8K9_info" {
     block_cd8K9_info:
         const _cd8K9;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.319171723 UTC

[section ""data" . GHC.RTS.Flags.costCentreFlags_closure" {
     GHC.RTS.Flags.costCentreFlags_closure:
         const GHC.RTS.Flags.costCentreFlags_info;
 },
 GHC.RTS.Flags.costCentreFlags_entry() //  [R2]
         { []
         }
     {offset
       cd8KB: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8KC; else goto cd8KD;
       cd8KC: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.costCentreFlags_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8KD: // global
           I64[Sp - 8] = block_cd8Ky_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8KH; else goto cd8Kz;
       ud8KH: // global
           call _cd8Ky(R1) args: 0, res: 0, upd: 0;
       cd8Kz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.costCentreFlags_info" {
     GHC.RTS.Flags.costCentreFlags_info:
         const GHC.RTS.Flags.costCentreFlags_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8Ky() //  [R1]
         { []
         }
     {offset
       cd8Ky: // global
           R1 = P64[R1 + 39] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8Ky_info" {
     block_cd8Ky_info:
         const _cd8Ky;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.32462712 UTC

[section ""data" . GHC.RTS.Flags.debugFlags_closure" {
     GHC.RTS.Flags.debugFlags_closure:
         const GHC.RTS.Flags.debugFlags_info;
 },
 GHC.RTS.Flags.debugFlags_entry() //  [R2]
         { []
         }
     {offset
       cd8L0: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8L1; else goto cd8L2;
       cd8L1: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.debugFlags_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8L2: // global
           I64[Sp - 8] = block_cd8KX_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8L6; else goto cd8KY;
       ud8L6: // global
           call _cd8KX(R1) args: 0, res: 0, upd: 0;
       cd8KY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.debugFlags_info" {
     GHC.RTS.Flags.debugFlags_info:
         const GHC.RTS.Flags.debugFlags_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8KX() //  [R1]
         { []
         }
     {offset
       cd8KX: // global
           R1 = P64[R1 + 31] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8KX_info" {
     block_cd8KX_info:
         const _cd8KX;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.33046557 UTC

[section ""data" . GHC.RTS.Flags.miscFlags_closure" {
     GHC.RTS.Flags.miscFlags_closure:
         const GHC.RTS.Flags.miscFlags_info;
 },
 GHC.RTS.Flags.miscFlags_entry() //  [R2]
         { []
         }
     {offset
       cd8Lp: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8Lq; else goto cd8Lr;
       cd8Lq: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.miscFlags_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8Lr: // global
           I64[Sp - 8] = block_cd8Lm_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8Lv; else goto cd8Ln;
       ud8Lv: // global
           call _cd8Lm(R1) args: 0, res: 0, upd: 0;
       cd8Ln: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.miscFlags_info" {
     GHC.RTS.Flags.miscFlags_info:
         const GHC.RTS.Flags.miscFlags_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8Lm() //  [R1]
         { []
         }
     {offset
       cd8Lm: // global
           R1 = P64[R1 + 23] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8Lm_info" {
     block_cd8Lm_info:
         const _cd8Lm;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.335670608 UTC

[section ""data" . GHC.RTS.Flags.concurrentFlags_closure" {
     GHC.RTS.Flags.concurrentFlags_closure:
         const GHC.RTS.Flags.concurrentFlags_info;
 },
 GHC.RTS.Flags.concurrentFlags_entry() //  [R2]
         { []
         }
     {offset
       cd8LO: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8LP; else goto cd8LQ;
       cd8LP: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.concurrentFlags_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8LQ: // global
           I64[Sp - 8] = block_cd8LL_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8LU; else goto cd8LM;
       ud8LU: // global
           call _cd8LL(R1) args: 0, res: 0, upd: 0;
       cd8LM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.concurrentFlags_info" {
     GHC.RTS.Flags.concurrentFlags_info:
         const GHC.RTS.Flags.concurrentFlags_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8LL() //  [R1]
         { []
         }
     {offset
       cd8LL: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8LL_info" {
     block_cd8LL_info:
         const _cd8LL;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.341567852 UTC

[section ""data" . GHC.RTS.Flags.gcFlags_closure" {
     GHC.RTS.Flags.gcFlags_closure:
         const GHC.RTS.Flags.gcFlags_info;
 },
 GHC.RTS.Flags.gcFlags_entry() //  [R2]
         { []
         }
     {offset
       cd8Md: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8Me; else goto cd8Mf;
       cd8Me: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.gcFlags_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8Mf: // global
           I64[Sp - 8] = block_cd8Ma_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8Mj; else goto cd8Mb;
       ud8Mj: // global
           call _cd8Ma(R1) args: 0, res: 0, upd: 0;
       cd8Mb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.gcFlags_info" {
     GHC.RTS.Flags.gcFlags_info:
         const GHC.RTS.Flags.gcFlags_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cd8Ma() //  [R1]
         { []
         }
     {offset
       cd8Ma: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8Ma_info" {
     block_cd8Ma_info:
         const _cd8Ma;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.346143451 UTC

[section ""cstring" . GHC.RTS.Flags.$trModule4_bytes" {
     GHC.RTS.Flags.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.347865797 UTC

[section ""data" . GHC.RTS.Flags.$trModule3_closure" {
     GHC.RTS.Flags.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.349650343 UTC

[section ""cstring" . GHC.RTS.Flags.$trModule2_bytes" {
     GHC.RTS.Flags.$trModule2_bytes:
         I8[] [71,72,67,46,82,84,83,46,70,108,97,103,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.351256593 UTC

[section ""data" . GHC.RTS.Flags.$trModule1_closure" {
     GHC.RTS.Flags.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.352939563 UTC

[section ""data" . GHC.RTS.Flags.$trModule_closure" {
     GHC.RTS.Flags.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.RTS.Flags.$trModule3_closure+1;
         const GHC.RTS.Flags.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.355196057 UTC

[section ""data" . $krep_rcV6F_closure" {
     $krep_rcV6F_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcDouble_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.356958415 UTC

[section ""data" . $krep1_rcV6G_closure" {
     $krep1_rcV6G_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.358732915 UTC

[section ""data" . $krep2_rcV6H_closure" {
     $krep2_rcV6H_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcWord_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.360494248 UTC

[section ""data" . $krep3_rcV6I_closure" {
     $krep3_rcV6I_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Word.$tcWord64_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.362245952 UTC

[section ""data" . $krep4_rcV6J_closure" {
     $krep4_rcV6J_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcChar_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.363981854 UTC

[section ""data" . $krep5_rcV6K_closure" {
     $krep5_rcV6K_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcBool_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.366276881 UTC

[section ""data" . $krep6_rcV6L_closure" {
     $krep6_rcV6L_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Word.$tcWord32_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.368010377 UTC

[section ""data" . $krep7_rcV6M_closure" {
     $krep7_rcV6M_closure:
         const :_con_info;
         const $krep4_rcV6J_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.370688087 UTC

[section ""data" . $krep8_rcV6N_closure" {
     $krep8_rcV6N_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep7_rcV6M_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.372332645 UTC

[section ""data" . $krep9_rcV6O_closure" {
     $krep9_rcV6O_closure:
         const :_con_info;
         const $krep8_rcV6N_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.374075799 UTC

[section ""data" . $krep10_rcV6P_closure" {
     $krep10_rcV6P_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Base.$tcMaybe_closure;
         const $krep9_rcV6O_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.375798761 UTC

[section ""cstring" . GHC.RTS.Flags.$tcGiveGCStats2_bytes" {
     GHC.RTS.Flags.$tcGiveGCStats2_bytes:
         I8[] [71,105,118,101,71,67,83,116,97,116,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.377548572 UTC

[section ""data" . GHC.RTS.Flags.$tcGiveGCStats1_closure" {
     GHC.RTS.Flags.$tcGiveGCStats1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tcGiveGCStats2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.379290151 UTC

[section ""data" . GHC.RTS.Flags.$tcGiveGCStats_closure" {
     GHC.RTS.Flags.$tcGiveGCStats_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tcGiveGCStats1_closure+1;
         const GHC.Types.krep$*_closure;
         const 6610677523385408458;
         const 17305718893788490736;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.381104119 UTC

[section ""data" . GHC.RTS.Flags.$tc'CollectGCStats1_closure" {
     GHC.RTS.Flags.$tc'CollectGCStats1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.RTS.Flags.$tcGiveGCStats_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.383455211 UTC

[section ""cstring" . GHC.RTS.Flags.$tc'NoGCStats2_bytes" {
     GHC.RTS.Flags.$tc'NoGCStats2_bytes:
         I8[] [39,78,111,71,67,83,116,97,116,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.38510145 UTC

[section ""data" . GHC.RTS.Flags.$tc'NoGCStats1_closure" {
     GHC.RTS.Flags.$tc'NoGCStats1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tc'NoGCStats2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.386944684 UTC

[section ""data" . GHC.RTS.Flags.$tc'NoGCStats_closure" {
     GHC.RTS.Flags.$tc'NoGCStats_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tc'NoGCStats1_closure+1;
         const GHC.RTS.Flags.$tc'CollectGCStats1_closure+1;
         const 7933034681225600823;
         const 3740225576493790291;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.38883438 UTC

[section ""cstring" . GHC.RTS.Flags.$tc'CollectGCStats3_bytes" {
     GHC.RTS.Flags.$tc'CollectGCStats3_bytes:
         I8[] [39,67,111,108,108,101,99,116,71,67,83,116,97,116,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.390567335 UTC

[section ""data" . GHC.RTS.Flags.$tc'CollectGCStats2_closure" {
     GHC.RTS.Flags.$tc'CollectGCStats2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tc'CollectGCStats3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.392826484 UTC

[section ""data" . GHC.RTS.Flags.$tc'CollectGCStats_closure" {
     GHC.RTS.Flags.$tc'CollectGCStats_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tc'CollectGCStats2_closure+1;
         const GHC.RTS.Flags.$tc'CollectGCStats1_closure+1;
         const 3746479294690445129;
         const 11560471058246341246;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.394788008 UTC

[section ""cstring" . GHC.RTS.Flags.$tc'OneLineGCStats2_bytes" {
     GHC.RTS.Flags.$tc'OneLineGCStats2_bytes:
         I8[] [39,79,110,101,76,105,110,101,71,67,83,116,97,116,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.39647374 UTC

[section ""data" . GHC.RTS.Flags.$tc'OneLineGCStats1_closure" {
     GHC.RTS.Flags.$tc'OneLineGCStats1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tc'OneLineGCStats2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.398721983 UTC

[section ""data" . GHC.RTS.Flags.$tc'OneLineGCStats_closure" {
     GHC.RTS.Flags.$tc'OneLineGCStats_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tc'OneLineGCStats1_closure+1;
         const GHC.RTS.Flags.$tc'CollectGCStats1_closure+1;
         const 10050868986052397820;
         const 7762915732892167917;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.402078752 UTC

[section ""cstring" . GHC.RTS.Flags.$tc'SummaryGCStats2_bytes" {
     GHC.RTS.Flags.$tc'SummaryGCStats2_bytes:
         I8[] [39,83,117,109,109,97,114,121,71,67,83,116,97,116,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.404554466 UTC

[section ""data" . GHC.RTS.Flags.$tc'SummaryGCStats1_closure" {
     GHC.RTS.Flags.$tc'SummaryGCStats1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tc'SummaryGCStats2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.40751516 UTC

[section ""data" . GHC.RTS.Flags.$tc'SummaryGCStats_closure" {
     GHC.RTS.Flags.$tc'SummaryGCStats_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tc'SummaryGCStats1_closure+1;
         const GHC.RTS.Flags.$tc'CollectGCStats1_closure+1;
         const 903385594733568743;
         const 408941185149856254;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.41037566 UTC

[section ""cstring" . GHC.RTS.Flags.$tc'VerboseGCStats2_bytes" {
     GHC.RTS.Flags.$tc'VerboseGCStats2_bytes:
         I8[] [39,86,101,114,98,111,115,101,71,67,83,116,97,116,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.413010856 UTC

[section ""data" . GHC.RTS.Flags.$tc'VerboseGCStats1_closure" {
     GHC.RTS.Flags.$tc'VerboseGCStats1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tc'VerboseGCStats2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.416536346 UTC

[section ""data" . GHC.RTS.Flags.$tc'VerboseGCStats_closure" {
     GHC.RTS.Flags.$tc'VerboseGCStats_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tc'VerboseGCStats1_closure+1;
         const GHC.RTS.Flags.$tc'CollectGCStats1_closure+1;
         const 5306241424052285901;
         const 7221383768387793036;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.41927421 UTC

[section ""cstring" . GHC.RTS.Flags.$tcGCFlags2_bytes" {
     GHC.RTS.Flags.$tcGCFlags2_bytes:
         I8[] [71,67,70,108,97,103,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.421852213 UTC

[section ""data" . GHC.RTS.Flags.$tcGCFlags1_closure" {
     GHC.RTS.Flags.$tcGCFlags1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tcGCFlags2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.42460124 UTC

[section ""data" . GHC.RTS.Flags.$tcGCFlags_closure" {
     GHC.RTS.Flags.$tcGCFlags_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tcGCFlags1_closure+1;
         const GHC.Types.krep$*_closure;
         const 7972238777300781582;
         const 877769587847050685;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.427435142 UTC

[section ""data" . $krep11_rcV6Q_closure" {
     $krep11_rcV6Q_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.RTS.Flags.$tcGCFlags_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.430568347 UTC

[section ""data" . $krep12_rcV6R_closure" {
     $krep12_rcV6R_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_rcV6H_closure+1;
         const $krep11_rcV6Q_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.434092912 UTC

[section ""data" . $krep13_rcV6S_closure" {
     $krep13_rcV6S_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rcV6K_closure+1;
         const $krep12_rcV6R_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.43661815 UTC

[section ""data" . $krep14_rcV6T_closure" {
     $krep14_rcV6T_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_rcV6H_closure+1;
         const $krep13_rcV6S_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.43935305 UTC

[section ""data" . $krep15_rcV6U_closure" {
     $krep15_rcV6U_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_rcV6H_closure+1;
         const $krep14_rcV6T_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.442572663 UTC

[section ""data" . $krep16_rcV6V_closure" {
     $krep16_rcV6V_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rcV6K_closure+1;
         const $krep15_rcV6U_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.445218279 UTC

[section ""data" . $krep17_rcV6W_closure" {
     $krep17_rcV6W_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_rcV6I_closure+1;
         const $krep16_rcV6V_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.447995455 UTC

[section ""data" . $krep18_rcV6X_closure" {
     $krep18_rcV6X_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rcV6K_closure+1;
         const $krep17_rcV6W_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.450856433 UTC

[section ""data" . $krep19_rcV6Y_closure" {
     $krep19_rcV6Y_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rcV6K_closure+1;
         const $krep18_rcV6X_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.453601577 UTC

[section ""data" . $krep20_rcV6Z_closure" {
     $krep20_rcV6Z_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_rcV6F_closure+1;
         const $krep19_rcV6Y_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.456251517 UTC

[section ""data" . $krep21_rcV70_closure" {
     $krep21_rcV70_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rcV6K_closure+1;
         const $krep20_rcV6Z_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.458439169 UTC

[section ""data" . $krep22_rcV71_closure" {
     $krep22_rcV71_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rcV6K_closure+1;
         const $krep21_rcV70_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.460179236 UTC

[section ""data" . $krep23_rcV72_closure" {
     $krep23_rcV72_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_rcV6L_closure+1;
         const $krep22_rcV71_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.461951222 UTC

[section ""data" . $krep24_rcV73_closure" {
     $krep24_rcV73_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_rcV6F_closure+1;
         const $krep23_rcV72_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.463610692 UTC

[section ""data" . $krep25_rcV74_closure" {
     $krep25_rcV74_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_rcV6F_closure+1;
         const $krep24_rcV73_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.46534578 UTC

[section ""data" . $krep26_rcV75_closure" {
     $krep26_rcV75_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rcV6K_closure+1;
         const $krep25_rcV74_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.467587994 UTC

[section ""data" . $krep27_rcV76_closure" {
     $krep27_rcV76_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_rcV6L_closure+1;
         const $krep26_rcV75_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.469286924 UTC

[section ""data" . $krep28_rcV77_closure" {
     $krep28_rcV77_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_rcV6L_closure+1;
         const $krep27_rcV76_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.471015594 UTC

[section ""data" . $krep29_rcV78_closure" {
     $krep29_rcV78_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_rcV6L_closure+1;
         const $krep28_rcV77_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.472748154 UTC

[section ""data" . $krep30_rcV79_closure" {
     $krep30_rcV79_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_rcV6L_closure+1;
         const $krep29_rcV78_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.474517061 UTC

[section ""data" . $krep31_rcV7a_closure" {
     $krep31_rcV7a_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_rcV6L_closure+1;
         const $krep30_rcV79_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.476201666 UTC

[section ""data" . $krep32_rcV7b_closure" {
     $krep32_rcV7b_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_rcV6L_closure+1;
         const $krep31_rcV7a_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.477971347 UTC

[section ""data" . $krep33_rcV7c_closure" {
     $krep33_rcV7c_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_rcV6L_closure+1;
         const $krep32_rcV7b_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.479688553 UTC

[section ""data" . $krep34_rcV7d_closure" {
     $krep34_rcV7d_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_rcV6L_closure+1;
         const $krep33_rcV7c_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.481434684 UTC

[section ""data" . $krep35_rcV7e_closure" {
     $krep35_rcV7e_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_rcV6L_closure+1;
         const $krep34_rcV7d_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.483149958 UTC

[section ""data" . $krep36_rcV7f_closure" {
     $krep36_rcV7f_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_rcV6L_closure+1;
         const $krep35_rcV7e_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.484894274 UTC

[section ""data" . $krep37_rcV7g_closure" {
     $krep37_rcV7g_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.RTS.Flags.$tc'CollectGCStats1_closure+1;
         const $krep36_rcV7f_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.486636038 UTC

[section ""data" . GHC.RTS.Flags.$tc'GCFlags1_closure" {
     GHC.RTS.Flags.$tc'GCFlags1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_rcV6P_closure+1;
         const $krep37_rcV7g_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.488374352 UTC

[section ""cstring" . GHC.RTS.Flags.$tc'GCFlags3_bytes" {
     GHC.RTS.Flags.$tc'GCFlags3_bytes:
         I8[] [39,71,67,70,108,97,103,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.49065818 UTC

[section ""data" . GHC.RTS.Flags.$tc'GCFlags2_closure" {
     GHC.RTS.Flags.$tc'GCFlags2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tc'GCFlags3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.492972771 UTC

[section ""data" . GHC.RTS.Flags.$tc'GCFlags_closure" {
     GHC.RTS.Flags.$tc'GCFlags_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tc'GCFlags2_closure+1;
         const GHC.RTS.Flags.$tc'GCFlags1_closure+4;
         const 15077871255757076606;
         const 428936906040764902;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.494780148 UTC

[section ""cstring" . GHC.RTS.Flags.$tcConcFlags2_bytes" {
     GHC.RTS.Flags.$tcConcFlags2_bytes:
         I8[] [67,111,110,99,70,108,97,103,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.496422868 UTC

[section ""data" . GHC.RTS.Flags.$tcConcFlags1_closure" {
     GHC.RTS.Flags.$tcConcFlags1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tcConcFlags2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.498484438 UTC

[section ""data" . GHC.RTS.Flags.$tcConcFlags_closure" {
     GHC.RTS.Flags.$tcConcFlags_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tcConcFlags1_closure+1;
         const GHC.Types.krep$*_closure;
         const 8014663245729948380;
         const 13771385662434223247;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.500212781 UTC

[section ""data" . $krep38_rcV7h_closure" {
     $krep38_rcV7h_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.RTS.Flags.$tcConcFlags_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.501879339 UTC

[section ""data" . $krep39_rcV7i_closure" {
     $krep39_rcV7i_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_rcV6G_closure+1;
         const $krep38_rcV7h_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.503568761 UTC

[section ""data" . GHC.RTS.Flags.$tc'ConcFlags1_closure" {
     GHC.RTS.Flags.$tc'ConcFlags1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_rcV6I_closure+1;
         const $krep39_rcV7i_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.505258685 UTC

[section ""cstring" . GHC.RTS.Flags.$tc'ConcFlags3_bytes" {
     GHC.RTS.Flags.$tc'ConcFlags3_bytes:
         I8[] [39,67,111,110,99,70,108,97,103,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.506873172 UTC

[section ""data" . GHC.RTS.Flags.$tc'ConcFlags2_closure" {
     GHC.RTS.Flags.$tc'ConcFlags2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tc'ConcFlags3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.508580295 UTC

[section ""data" . GHC.RTS.Flags.$tc'ConcFlags_closure" {
     GHC.RTS.Flags.$tc'ConcFlags_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tc'ConcFlags2_closure+1;
         const GHC.RTS.Flags.$tc'ConcFlags1_closure+4;
         const 3887237771069755887;
         const 16720223823447457419;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.510403278 UTC

[section ""cstring" . GHC.RTS.Flags.$tcMiscFlags2_bytes" {
     GHC.RTS.Flags.$tcMiscFlags2_bytes:
         I8[] [77,105,115,99,70,108,97,103,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.512140773 UTC

[section ""data" . GHC.RTS.Flags.$tcMiscFlags1_closure" {
     GHC.RTS.Flags.$tcMiscFlags1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tcMiscFlags2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.514199821 UTC

[section ""data" . GHC.RTS.Flags.$tcMiscFlags_closure" {
     GHC.RTS.Flags.$tcMiscFlags_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tcMiscFlags1_closure+1;
         const GHC.Types.krep$*_closure;
         const 8345734398582159173;
         const 13018943964024104206;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.516042204 UTC

[section ""data" . $krep40_rcV7j_closure" {
     $krep40_rcV7j_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.RTS.Flags.$tcMiscFlags_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.518281871 UTC

[section ""data" . $krep41_rcV7k_closure" {
     $krep41_rcV7k_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_rcV6H_closure+1;
         const $krep40_rcV7j_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.520075189 UTC

[section ""data" . $krep42_rcV7l_closure" {
     $krep42_rcV7l_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rcV6K_closure+1;
         const $krep41_rcV7k_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.521866661 UTC

[section ""data" . $krep43_rcV7m_closure" {
     $krep43_rcV7m_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rcV6K_closure+1;
         const $krep42_rcV7l_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.523607296 UTC

[section ""data" . $krep44_rcV7n_closure" {
     $krep44_rcV7n_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rcV6K_closure+1;
         const $krep43_rcV7m_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.525823178 UTC

[section ""data" . $krep45_rcV7o_closure" {
     $krep45_rcV7o_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rcV6K_closure+1;
         const $krep44_rcV7n_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.527587855 UTC

[section ""data" . $krep46_rcV7p_closure" {
     $krep46_rcV7p_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rcV6K_closure+1;
         const $krep45_rcV7o_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.529405303 UTC

[section ""data" . GHC.RTS.Flags.$tc'MiscFlags1_closure" {
     GHC.RTS.Flags.$tc'MiscFlags1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_rcV6I_closure+1;
         const $krep46_rcV7p_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.531135063 UTC

[section ""cstring" . GHC.RTS.Flags.$tc'MiscFlags3_bytes" {
     GHC.RTS.Flags.$tc'MiscFlags3_bytes:
         I8[] [39,77,105,115,99,70,108,97,103,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.532902388 UTC

[section ""data" . GHC.RTS.Flags.$tc'MiscFlags2_closure" {
     GHC.RTS.Flags.$tc'MiscFlags2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tc'MiscFlags3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.534756483 UTC

[section ""data" . GHC.RTS.Flags.$tc'MiscFlags_closure" {
     GHC.RTS.Flags.$tc'MiscFlags_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tc'MiscFlags2_closure+1;
         const GHC.RTS.Flags.$tc'MiscFlags1_closure+4;
         const 8738274121432326663;
         const 17456949991610747249;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.536592666 UTC

[section ""cstring" . GHC.RTS.Flags.$tcDebugFlags2_bytes" {
     GHC.RTS.Flags.$tcDebugFlags2_bytes:
         I8[] [68,101,98,117,103,70,108,97,103,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.538500749 UTC

[section ""data" . GHC.RTS.Flags.$tcDebugFlags1_closure" {
     GHC.RTS.Flags.$tcDebugFlags1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tcDebugFlags2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.540241095 UTC

[section ""data" . GHC.RTS.Flags.$tcDebugFlags_closure" {
     GHC.RTS.Flags.$tcDebugFlags_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tcDebugFlags1_closure+1;
         const GHC.Types.krep$*_closure;
         const 6148836561850888235;
         const 4971417148613417489;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.542130217 UTC

[section ""data" . $krep47_rcV7q_closure" {
     $krep47_rcV7q_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.RTS.Flags.$tcDebugFlags_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.544377202 UTC

[section ""data" . $krep48_rcV7r_closure" {
     $krep48_rcV7r_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rcV6K_closure+1;
         const $krep47_rcV7q_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.546199666 UTC

[section ""data" . $krep49_rcV7s_closure" {
     $krep49_rcV7s_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rcV6K_closure+1;
         const $krep48_rcV7r_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.547971978 UTC

[section ""data" . $krep50_rcV7t_closure" {
     $krep50_rcV7t_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rcV6K_closure+1;
         const $krep49_rcV7s_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.550264986 UTC

[section ""data" . $krep51_rcV7u_closure" {
     $krep51_rcV7u_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rcV6K_closure+1;
         const $krep50_rcV7t_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.551978893 UTC

[section ""data" . $krep52_rcV7v_closure" {
     $krep52_rcV7v_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rcV6K_closure+1;
         const $krep51_rcV7u_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.553697247 UTC

[section ""data" . $krep53_rcV7w_closure" {
     $krep53_rcV7w_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rcV6K_closure+1;
         const $krep52_rcV7v_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.555500955 UTC

[section ""data" . $krep54_rcV7x_closure" {
     $krep54_rcV7x_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rcV6K_closure+1;
         const $krep53_rcV7w_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.557218823 UTC

[section ""data" . $krep55_rcV7y_closure" {
     $krep55_rcV7y_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rcV6K_closure+1;
         const $krep54_rcV7x_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.558986449 UTC

[section ""data" . $krep56_rcV7z_closure" {
     $krep56_rcV7z_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rcV6K_closure+1;
         const $krep55_rcV7y_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.560795454 UTC

[section ""data" . $krep57_rcV7A_closure" {
     $krep57_rcV7A_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rcV6K_closure+1;
         const $krep56_rcV7z_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.562858384 UTC

[section ""data" . $krep58_rcV7B_closure" {
     $krep58_rcV7B_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rcV6K_closure+1;
         const $krep57_rcV7A_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.564587742 UTC

[section ""data" . $krep59_rcV7C_closure" {
     $krep59_rcV7C_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rcV6K_closure+1;
         const $krep58_rcV7B_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.566372593 UTC

[section ""data" . $krep60_rcV7D_closure" {
     $krep60_rcV7D_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rcV6K_closure+1;
         const $krep59_rcV7C_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.568118706 UTC

[section ""data" . $krep61_rcV7E_closure" {
     $krep61_rcV7E_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rcV6K_closure+1;
         const $krep60_rcV7D_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.569895431 UTC

[section ""data" . GHC.RTS.Flags.$tc'DebugFlags1_closure" {
     GHC.RTS.Flags.$tc'DebugFlags1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rcV6K_closure+1;
         const $krep61_rcV7E_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.572147932 UTC

[section ""cstring" . GHC.RTS.Flags.$tc'DebugFlags3_bytes" {
     GHC.RTS.Flags.$tc'DebugFlags3_bytes:
         I8[] [39,68,101,98,117,103,70,108,97,103,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.574230794 UTC

[section ""data" . GHC.RTS.Flags.$tc'DebugFlags2_closure" {
     GHC.RTS.Flags.$tc'DebugFlags2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tc'DebugFlags3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.575864857 UTC

[section ""data" . GHC.RTS.Flags.$tc'DebugFlags_closure" {
     GHC.RTS.Flags.$tc'DebugFlags_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tc'DebugFlags2_closure+1;
         const GHC.RTS.Flags.$tc'DebugFlags1_closure+4;
         const 5797788004444129297;
         const 18307470711129601643;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.577754866 UTC

[section ""cstring" . GHC.RTS.Flags.$tcDoCostCentres2_bytes" {
     GHC.RTS.Flags.$tcDoCostCentres2_bytes:
         I8[] [68,111,67,111,115,116,67,101,110,116,114,101,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.579471059 UTC

[section ""data" . GHC.RTS.Flags.$tcDoCostCentres1_closure" {
     GHC.RTS.Flags.$tcDoCostCentres1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tcDoCostCentres2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.581236211 UTC

[section ""data" . GHC.RTS.Flags.$tcDoCostCentres_closure" {
     GHC.RTS.Flags.$tcDoCostCentres_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tcDoCostCentres1_closure+1;
         const GHC.Types.krep$*_closure;
         const 12247765477237709938;
         const 15987815848961641446;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.58312884 UTC

[section ""data" . GHC.RTS.Flags.$tc'CostCentresAll1_closure" {
     GHC.RTS.Flags.$tc'CostCentresAll1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.RTS.Flags.$tcDoCostCentres_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.58487977 UTC

[section ""cstring" . GHC.RTS.Flags.$tc'CostCentresNone2_bytes" {
     GHC.RTS.Flags.$tc'CostCentresNone2_bytes:
         I8[] [39,67,111,115,116,67,101,110,116,114,101,115,78,111,110,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.586524285 UTC

[section ""data" . GHC.RTS.Flags.$tc'CostCentresNone1_closure" {
     GHC.RTS.Flags.$tc'CostCentresNone1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tc'CostCentresNone2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.588324155 UTC

[section ""data" . GHC.RTS.Flags.$tc'CostCentresNone_closure" {
     GHC.RTS.Flags.$tc'CostCentresNone_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tc'CostCentresNone1_closure+1;
         const GHC.RTS.Flags.$tc'CostCentresAll1_closure+1;
         const 9941076719153329985;
         const 5975200043947881410;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.5901798 UTC

[section ""cstring" . GHC.RTS.Flags.$tc'CostCentresSummary2_bytes" {
     GHC.RTS.Flags.$tc'CostCentresSummary2_bytes:
         I8[] [39,67,111,115,116,67,101,110,116,114,101,115,83,117,109,109,97,114,121]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.591892337 UTC

[section ""data" . GHC.RTS.Flags.$tc'CostCentresSummary1_closure" {
     GHC.RTS.Flags.$tc'CostCentresSummary1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tc'CostCentresSummary2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.594170282 UTC

[section ""data" . GHC.RTS.Flags.$tc'CostCentresSummary_closure" {
     GHC.RTS.Flags.$tc'CostCentresSummary_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tc'CostCentresSummary1_closure+1;
         const GHC.RTS.Flags.$tc'CostCentresAll1_closure+1;
         const 7907150943011235483;
         const 8448171742954198172;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.596038295 UTC

[section ""cstring" . GHC.RTS.Flags.$tc'CostCentresVerbose2_bytes" {
     GHC.RTS.Flags.$tc'CostCentresVerbose2_bytes:
         I8[] [39,67,111,115,116,67,101,110,116,114,101,115,86,101,114,98,111,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.598337818 UTC

[section ""data" . GHC.RTS.Flags.$tc'CostCentresVerbose1_closure" {
     GHC.RTS.Flags.$tc'CostCentresVerbose1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tc'CostCentresVerbose2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.600020567 UTC

[section ""data" . GHC.RTS.Flags.$tc'CostCentresVerbose_closure" {
     GHC.RTS.Flags.$tc'CostCentresVerbose_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tc'CostCentresVerbose1_closure+1;
         const GHC.RTS.Flags.$tc'CostCentresAll1_closure+1;
         const 9824578800821523041;
         const 10307761995494160912;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.60175363 UTC

[section ""cstring" . GHC.RTS.Flags.$tc'CostCentresAll3_bytes" {
     GHC.RTS.Flags.$tc'CostCentresAll3_bytes:
         I8[] [39,67,111,115,116,67,101,110,116,114,101,115,65,108,108]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.603530118 UTC

[section ""data" . GHC.RTS.Flags.$tc'CostCentresAll2_closure" {
     GHC.RTS.Flags.$tc'CostCentresAll2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tc'CostCentresAll3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.605304227 UTC

[section ""data" . GHC.RTS.Flags.$tc'CostCentresAll_closure" {
     GHC.RTS.Flags.$tc'CostCentresAll_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tc'CostCentresAll2_closure+1;
         const GHC.RTS.Flags.$tc'CostCentresAll1_closure+1;
         const 17708860571824488665;
         const 3474022764015128952;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.607079093 UTC

[section ""cstring" . GHC.RTS.Flags.$tc'CostCentresJSON2_bytes" {
     GHC.RTS.Flags.$tc'CostCentresJSON2_bytes:
         I8[] [39,67,111,115,116,67,101,110,116,114,101,115,74,83,79,78]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.608824888 UTC

[section ""data" . GHC.RTS.Flags.$tc'CostCentresJSON1_closure" {
     GHC.RTS.Flags.$tc'CostCentresJSON1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tc'CostCentresJSON2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.611248155 UTC

[section ""data" . GHC.RTS.Flags.$tc'CostCentresJSON_closure" {
     GHC.RTS.Flags.$tc'CostCentresJSON_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tc'CostCentresJSON1_closure+1;
         const GHC.RTS.Flags.$tc'CostCentresAll1_closure+1;
         const 14898309595742757340;
         const 1701943173654928528;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.61307089 UTC

[section ""cstring" . GHC.RTS.Flags.$tcCCFlags2_bytes" {
     GHC.RTS.Flags.$tcCCFlags2_bytes:
         I8[] [67,67,70,108,97,103,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.614787955 UTC

[section ""data" . GHC.RTS.Flags.$tcCCFlags1_closure" {
     GHC.RTS.Flags.$tcCCFlags1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tcCCFlags2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.616536141 UTC

[section ""data" . GHC.RTS.Flags.$tcCCFlags_closure" {
     GHC.RTS.Flags.$tcCCFlags_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tcCCFlags1_closure+1;
         const GHC.Types.krep$*_closure;
         const 1712213186479039283;
         const 2219924391185601312;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.618475564 UTC

[section ""data" . $krep62_rcV7F_closure" {
     $krep62_rcV7F_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.RTS.Flags.$tcCCFlags_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.620286553 UTC

[section ""data" . $krep63_rcV7G_closure" {
     $krep63_rcV7G_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_rcV6G_closure+1;
         const $krep62_rcV7F_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.622632877 UTC

[section ""data" . $krep64_rcV7H_closure" {
     $krep64_rcV7H_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_rcV6G_closure+1;
         const $krep63_rcV7G_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.625084946 UTC

[section ""data" . GHC.RTS.Flags.$tc'CCFlags1_closure" {
     GHC.RTS.Flags.$tc'CCFlags1_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.RTS.Flags.$tc'CostCentresAll1_closure+1;
         const $krep64_rcV7H_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.626838879 UTC

[section ""cstring" . GHC.RTS.Flags.$tc'CCFlags3_bytes" {
     GHC.RTS.Flags.$tc'CCFlags3_bytes:
         I8[] [39,67,67,70,108,97,103,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.628602032 UTC

[section ""data" . GHC.RTS.Flags.$tc'CCFlags2_closure" {
     GHC.RTS.Flags.$tc'CCFlags2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tc'CCFlags3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.630440919 UTC

[section ""data" . GHC.RTS.Flags.$tc'CCFlags_closure" {
     GHC.RTS.Flags.$tc'CCFlags_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tc'CCFlags2_closure+1;
         const GHC.RTS.Flags.$tc'CCFlags1_closure+4;
         const 1463973452671583834;
         const 3241436776007668974;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.632232547 UTC

[section ""cstring" . GHC.RTS.Flags.$tcDoHeapProfile2_bytes" {
     GHC.RTS.Flags.$tcDoHeapProfile2_bytes:
         I8[] [68,111,72,101,97,112,80,114,111,102,105,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.634070449 UTC

[section ""data" . GHC.RTS.Flags.$tcDoHeapProfile1_closure" {
     GHC.RTS.Flags.$tcDoHeapProfile1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tcDoHeapProfile2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.635881407 UTC

[section ""data" . GHC.RTS.Flags.$tcDoHeapProfile_closure" {
     GHC.RTS.Flags.$tcDoHeapProfile_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tcDoHeapProfile1_closure+1;
         const GHC.Types.krep$*_closure;
         const 7452162420331529362;
         const 2264204561499252260;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.638091814 UTC

[section ""data" . GHC.RTS.Flags.$tc'HeapByCCS1_closure" {
     GHC.RTS.Flags.$tc'HeapByCCS1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.RTS.Flags.$tcDoHeapProfile_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.639823278 UTC

[section ""cstring" . GHC.RTS.Flags.$tc'NoHeapProfiling2_bytes" {
     GHC.RTS.Flags.$tc'NoHeapProfiling2_bytes:
         I8[] [39,78,111,72,101,97,112,80,114,111,102,105,108,105,110,103]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.641639543 UTC

[section ""data" . GHC.RTS.Flags.$tc'NoHeapProfiling1_closure" {
     GHC.RTS.Flags.$tc'NoHeapProfiling1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tc'NoHeapProfiling2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.643449572 UTC

[section ""data" . GHC.RTS.Flags.$tc'NoHeapProfiling_closure" {
     GHC.RTS.Flags.$tc'NoHeapProfiling_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tc'NoHeapProfiling1_closure+1;
         const GHC.RTS.Flags.$tc'HeapByCCS1_closure+1;
         const 15256181505853116399;
         const 12572078876854188631;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.645328258 UTC

[section ""cstring" . GHC.RTS.Flags.$tc'HeapByCCS3_bytes" {
     GHC.RTS.Flags.$tc'HeapByCCS3_bytes:
         I8[] [39,72,101,97,112,66,121,67,67,83]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.647022177 UTC

[section ""data" . GHC.RTS.Flags.$tc'HeapByCCS2_closure" {
     GHC.RTS.Flags.$tc'HeapByCCS2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tc'HeapByCCS3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.648872118 UTC

[section ""data" . GHC.RTS.Flags.$tc'HeapByCCS_closure" {
     GHC.RTS.Flags.$tc'HeapByCCS_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tc'HeapByCCS2_closure+1;
         const GHC.RTS.Flags.$tc'HeapByCCS1_closure+1;
         const 375182006286221967;
         const 1294461661035214646;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.651314462 UTC

[section ""cstring" . GHC.RTS.Flags.$tc'HeapByMod2_bytes" {
     GHC.RTS.Flags.$tc'HeapByMod2_bytes:
         I8[] [39,72,101,97,112,66,121,77,111,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.653105463 UTC

[section ""data" . GHC.RTS.Flags.$tc'HeapByMod1_closure" {
     GHC.RTS.Flags.$tc'HeapByMod1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tc'HeapByMod2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.655425152 UTC

[section ""data" . GHC.RTS.Flags.$tc'HeapByMod_closure" {
     GHC.RTS.Flags.$tc'HeapByMod_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tc'HeapByMod1_closure+1;
         const GHC.RTS.Flags.$tc'HeapByCCS1_closure+1;
         const 3073782159796995121;
         const 5048279594980811938;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.657189371 UTC

[section ""cstring" . GHC.RTS.Flags.$tc'HeapByDescr2_bytes" {
     GHC.RTS.Flags.$tc'HeapByDescr2_bytes:
         I8[] [39,72,101,97,112,66,121,68,101,115,99,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.65899792 UTC

[section ""data" . GHC.RTS.Flags.$tc'HeapByDescr1_closure" {
     GHC.RTS.Flags.$tc'HeapByDescr1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tc'HeapByDescr2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.66082765 UTC

[section ""data" . GHC.RTS.Flags.$tc'HeapByDescr_closure" {
     GHC.RTS.Flags.$tc'HeapByDescr_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tc'HeapByDescr1_closure+1;
         const GHC.RTS.Flags.$tc'HeapByCCS1_closure+1;
         const 14294268926604566514;
         const 3131270777588004653;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.662711968 UTC

[section ""cstring" . GHC.RTS.Flags.$tc'HeapByType2_bytes" {
     GHC.RTS.Flags.$tc'HeapByType2_bytes:
         I8[] [39,72,101,97,112,66,121,84,121,112,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.664346791 UTC

[section ""data" . GHC.RTS.Flags.$tc'HeapByType1_closure" {
     GHC.RTS.Flags.$tc'HeapByType1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tc'HeapByType2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.666509257 UTC

[section ""data" . GHC.RTS.Flags.$tc'HeapByType_closure" {
     GHC.RTS.Flags.$tc'HeapByType_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tc'HeapByType1_closure+1;
         const GHC.RTS.Flags.$tc'HeapByCCS1_closure+1;
         const 8520880302045566888;
         const 14673716970937392818;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.668195144 UTC

[section ""cstring" . GHC.RTS.Flags.$tc'HeapByRetainer2_bytes" {
     GHC.RTS.Flags.$tc'HeapByRetainer2_bytes:
         I8[] [39,72,101,97,112,66,121,82,101,116,97,105,110,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.669848133 UTC

[section ""data" . GHC.RTS.Flags.$tc'HeapByRetainer1_closure" {
     GHC.RTS.Flags.$tc'HeapByRetainer1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tc'HeapByRetainer2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.671642729 UTC

[section ""data" . GHC.RTS.Flags.$tc'HeapByRetainer_closure" {
     GHC.RTS.Flags.$tc'HeapByRetainer_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tc'HeapByRetainer1_closure+1;
         const GHC.RTS.Flags.$tc'HeapByCCS1_closure+1;
         const 61843641731792008;
         const 4241776275235002595;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.673467199 UTC

[section ""cstring" . GHC.RTS.Flags.$tc'HeapByLDV2_bytes" {
     GHC.RTS.Flags.$tc'HeapByLDV2_bytes:
         I8[] [39,72,101,97,112,66,121,76,68,86]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.675196353 UTC

[section ""data" . GHC.RTS.Flags.$tc'HeapByLDV1_closure" {
     GHC.RTS.Flags.$tc'HeapByLDV1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tc'HeapByLDV2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.676896641 UTC

[section ""data" . GHC.RTS.Flags.$tc'HeapByLDV_closure" {
     GHC.RTS.Flags.$tc'HeapByLDV_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tc'HeapByLDV1_closure+1;
         const GHC.RTS.Flags.$tc'HeapByCCS1_closure+1;
         const 7831191687879172657;
         const 1806202913880638899;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.679376371 UTC

[section ""cstring" . GHC.RTS.Flags.$tc'HeapByClosureType2_bytes" {
     GHC.RTS.Flags.$tc'HeapByClosureType2_bytes:
         I8[] [39,72,101,97,112,66,121,67,108,111,115,117,114,101,84,121,112,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.681003456 UTC

[section ""data" . GHC.RTS.Flags.$tc'HeapByClosureType1_closure" {
     GHC.RTS.Flags.$tc'HeapByClosureType1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tc'HeapByClosureType2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.682760164 UTC

[section ""data" . GHC.RTS.Flags.$tc'HeapByClosureType_closure" {
     GHC.RTS.Flags.$tc'HeapByClosureType_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tc'HeapByClosureType1_closure+1;
         const GHC.RTS.Flags.$tc'HeapByCCS1_closure+1;
         const 6110411975351435084;
         const 11148202771200845961;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.684520958 UTC

[section ""cstring" . GHC.RTS.Flags.$tcProfFlags2_bytes" {
     GHC.RTS.Flags.$tcProfFlags2_bytes:
         I8[] [80,114,111,102,70,108,97,103,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.686749587 UTC

[section ""data" . GHC.RTS.Flags.$tcProfFlags1_closure" {
     GHC.RTS.Flags.$tcProfFlags1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tcProfFlags2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.688532907 UTC

[section ""data" . GHC.RTS.Flags.$tcProfFlags_closure" {
     GHC.RTS.Flags.$tcProfFlags_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tcProfFlags1_closure+1;
         const GHC.Types.krep$*_closure;
         const 18303143489504836683;
         const 5771588416076717584;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.690405529 UTC

[section ""data" . $krep65_rcV7I_closure" {
     $krep65_rcV7I_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.RTS.Flags.$tcProfFlags_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.692172671 UTC

[section ""data" . $krep66_rcV7J_closure" {
     $krep66_rcV7J_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_rcV6P_closure+1;
         const $krep65_rcV7I_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.694000947 UTC

[section ""data" . $krep67_rcV7K_closure" {
     $krep67_rcV7K_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_rcV6P_closure+1;
         const $krep66_rcV7J_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.695814264 UTC

[section ""data" . $krep68_rcV7L_closure" {
     $krep68_rcV7L_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_rcV6P_closure+1;
         const $krep67_rcV7K_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.697539219 UTC

[section ""data" . $krep69_rcV7M_closure" {
     $krep69_rcV7M_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_rcV6P_closure+1;
         const $krep68_rcV7L_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.699265414 UTC

[section ""data" . $krep70_rcV7N_closure" {
     $krep70_rcV7N_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_rcV6P_closure+1;
         const $krep69_rcV7M_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.701030822 UTC

[section ""data" . $krep71_rcV7O_closure" {
     $krep71_rcV7O_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_rcV6P_closure+1;
         const $krep70_rcV7N_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.7027582 UTC

[section ""data" . $krep72_rcV7P_closure" {
     $krep72_rcV7P_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_rcV6P_closure+1;
         const $krep71_rcV7O_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.705062584 UTC

[section ""data" . $krep73_rcV7Q_closure" {
     $krep73_rcV7Q_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_rcV6H_closure+1;
         const $krep72_rcV7P_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.707408364 UTC

[section ""data" . $krep74_rcV7R_closure" {
     $krep74_rcV7R_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_rcV6H_closure+1;
         const $krep73_rcV7Q_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.709183372 UTC

[section ""data" . $krep75_rcV7S_closure" {
     $krep75_rcV7S_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rcV6K_closure+1;
         const $krep74_rcV7R_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.710891606 UTC

[section ""data" . $krep76_rcV7T_closure" {
     $krep76_rcV7T_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rcV6K_closure+1;
         const $krep75_rcV7S_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.712621278 UTC

[section ""data" . $krep77_rcV7U_closure" {
     $krep77_rcV7U_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_rcV6H_closure+1;
         const $krep76_rcV7T_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.714444299 UTC

[section ""data" . $krep78_rcV7V_closure" {
     $krep78_rcV7V_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_rcV6I_closure+1;
         const $krep77_rcV7U_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.716143276 UTC

[section ""data" . GHC.RTS.Flags.$tc'ProfFlags1_closure" {
     GHC.RTS.Flags.$tc'ProfFlags1_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.RTS.Flags.$tc'HeapByCCS1_closure+1;
         const $krep78_rcV7V_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.717912417 UTC

[section ""cstring" . GHC.RTS.Flags.$tc'ProfFlags3_bytes" {
     GHC.RTS.Flags.$tc'ProfFlags3_bytes:
         I8[] [39,80,114,111,102,70,108,97,103,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.719638055 UTC

[section ""data" . GHC.RTS.Flags.$tc'ProfFlags2_closure" {
     GHC.RTS.Flags.$tc'ProfFlags2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tc'ProfFlags3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.721501311 UTC

[section ""data" . GHC.RTS.Flags.$tc'ProfFlags_closure" {
     GHC.RTS.Flags.$tc'ProfFlags_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tc'ProfFlags2_closure+1;
         const GHC.RTS.Flags.$tc'ProfFlags1_closure+4;
         const 9752289794957121031;
         const 14994683249272336230;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.723411913 UTC

[section ""cstring" . GHC.RTS.Flags.$tcDoTrace2_bytes" {
     GHC.RTS.Flags.$tcDoTrace2_bytes:
         I8[] [68,111,84,114,97,99,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.725111518 UTC

[section ""data" . GHC.RTS.Flags.$tcDoTrace1_closure" {
     GHC.RTS.Flags.$tcDoTrace1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tcDoTrace2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.727552224 UTC

[section ""data" . GHC.RTS.Flags.$tcDoTrace_closure" {
     GHC.RTS.Flags.$tcDoTrace_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tcDoTrace1_closure+1;
         const GHC.Types.krep$*_closure;
         const 8168148363895152846;
         const 15356139801098904848;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.729448427 UTC

[section ""data" . GHC.RTS.Flags.$tc'TraceEventLog1_closure" {
     GHC.RTS.Flags.$tc'TraceEventLog1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.RTS.Flags.$tcDoTrace_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.731740025 UTC

[section ""cstring" . GHC.RTS.Flags.$tc'TraceNone2_bytes" {
     GHC.RTS.Flags.$tc'TraceNone2_bytes:
         I8[] [39,84,114,97,99,101,78,111,110,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.733462327 UTC

[section ""data" . GHC.RTS.Flags.$tc'TraceNone1_closure" {
     GHC.RTS.Flags.$tc'TraceNone1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tc'TraceNone2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.735171167 UTC

[section ""data" . GHC.RTS.Flags.$tc'TraceNone_closure" {
     GHC.RTS.Flags.$tc'TraceNone_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tc'TraceNone1_closure+1;
         const GHC.RTS.Flags.$tc'TraceEventLog1_closure+1;
         const 14634634304079691876;
         const 15533180491606473078;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.737008369 UTC

[section ""cstring" . GHC.RTS.Flags.$tc'TraceEventLog3_bytes" {
     GHC.RTS.Flags.$tc'TraceEventLog3_bytes:
         I8[] [39,84,114,97,99,101,69,118,101,110,116,76,111,103]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.738818596 UTC

[section ""data" . GHC.RTS.Flags.$tc'TraceEventLog2_closure" {
     GHC.RTS.Flags.$tc'TraceEventLog2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tc'TraceEventLog3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.740653723 UTC

[section ""data" . GHC.RTS.Flags.$tc'TraceEventLog_closure" {
     GHC.RTS.Flags.$tc'TraceEventLog_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tc'TraceEventLog2_closure+1;
         const GHC.RTS.Flags.$tc'TraceEventLog1_closure+1;
         const 7440420927604344223;
         const 10976987085514046969;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.743125635 UTC

[section ""cstring" . GHC.RTS.Flags.$tc'TraceStderr2_bytes" {
     GHC.RTS.Flags.$tc'TraceStderr2_bytes:
         I8[] [39,84,114,97,99,101,83,116,100,101,114,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.744863406 UTC

[section ""data" . GHC.RTS.Flags.$tc'TraceStderr1_closure" {
     GHC.RTS.Flags.$tc'TraceStderr1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tc'TraceStderr2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.746660791 UTC

[section ""data" . GHC.RTS.Flags.$tc'TraceStderr_closure" {
     GHC.RTS.Flags.$tc'TraceStderr_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tc'TraceStderr1_closure+1;
         const GHC.RTS.Flags.$tc'TraceEventLog1_closure+1;
         const 8388789781026742095;
         const 13828162497742776102;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.748519461 UTC

[section ""cstring" . GHC.RTS.Flags.$tcTraceFlags2_bytes" {
     GHC.RTS.Flags.$tcTraceFlags2_bytes:
         I8[] [84,114,97,99,101,70,108,97,103,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.750230079 UTC

[section ""data" . GHC.RTS.Flags.$tcTraceFlags1_closure" {
     GHC.RTS.Flags.$tcTraceFlags1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tcTraceFlags2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.751980409 UTC

[section ""data" . GHC.RTS.Flags.$tcTraceFlags_closure" {
     GHC.RTS.Flags.$tcTraceFlags_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tcTraceFlags1_closure+1;
         const GHC.Types.krep$*_closure;
         const 10588031724247337177;
         const 11094204731105652221;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.7538326 UTC

[section ""data" . $krep79_rcV7W_closure" {
     $krep79_rcV7W_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.RTS.Flags.$tcTraceFlags_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.75547215 UTC

[section ""data" . $krep80_rcV7X_closure" {
     $krep80_rcV7X_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rcV6K_closure+1;
         const $krep79_rcV7W_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.758153722 UTC

[section ""data" . $krep81_rcV7Y_closure" {
     $krep81_rcV7Y_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rcV6K_closure+1;
         const $krep80_rcV7X_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.75994779 UTC

[section ""data" . $krep82_rcV7Z_closure" {
     $krep82_rcV7Z_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rcV6K_closure+1;
         const $krep81_rcV7Y_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.761681038 UTC

[section ""data" . $krep83_rcV80_closure" {
     $krep83_rcV80_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rcV6K_closure+1;
         const $krep82_rcV7Z_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.763416941 UTC

[section ""data" . $krep84_rcV81_closure" {
     $krep84_rcV81_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rcV6K_closure+1;
         const $krep83_rcV80_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.765230544 UTC

[section ""data" . $krep85_rcV82_closure" {
     $krep85_rcV82_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rcV6K_closure+1;
         const $krep84_rcV81_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.767078002 UTC

[section ""data" . GHC.RTS.Flags.$tc'TraceFlags1_closure" {
     GHC.RTS.Flags.$tc'TraceFlags1_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.RTS.Flags.$tc'TraceEventLog1_closure+1;
         const $krep85_rcV82_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.768788202 UTC

[section ""cstring" . GHC.RTS.Flags.$tc'TraceFlags3_bytes" {
     GHC.RTS.Flags.$tc'TraceFlags3_bytes:
         I8[] [39,84,114,97,99,101,70,108,97,103,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.770536624 UTC

[section ""data" . GHC.RTS.Flags.$tc'TraceFlags2_closure" {
     GHC.RTS.Flags.$tc'TraceFlags2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tc'TraceFlags3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.772312541 UTC

[section ""data" . GHC.RTS.Flags.$tc'TraceFlags_closure" {
     GHC.RTS.Flags.$tc'TraceFlags_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tc'TraceFlags2_closure+1;
         const GHC.RTS.Flags.$tc'TraceFlags1_closure+4;
         const 10426638099741820496;
         const 9827927718155532703;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.774604031 UTC

[section ""cstring" . GHC.RTS.Flags.$tcTickyFlags2_bytes" {
     GHC.RTS.Flags.$tcTickyFlags2_bytes:
         I8[] [84,105,99,107,121,70,108,97,103,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.776318693 UTC

[section ""data" . GHC.RTS.Flags.$tcTickyFlags1_closure" {
     GHC.RTS.Flags.$tcTickyFlags1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tcTickyFlags2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.777997869 UTC

[section ""data" . GHC.RTS.Flags.$tcTickyFlags_closure" {
     GHC.RTS.Flags.$tcTickyFlags_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tcTickyFlags1_closure+1;
         const GHC.Types.krep$*_closure;
         const 3140770608719878061;
         const 4402696908558552646;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.779813442 UTC

[section ""data" . $krep86_rcV83_closure" {
     $krep86_rcV83_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.RTS.Flags.$tcTickyFlags_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.7816568 UTC

[section ""data" . $krep87_rcV84_closure" {
     $krep87_rcV84_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_rcV6P_closure+1;
         const $krep86_rcV83_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.783891568 UTC

[section ""data" . GHC.RTS.Flags.$tc'TickyFlags1_closure" {
     GHC.RTS.Flags.$tc'TickyFlags1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rcV6K_closure+1;
         const $krep87_rcV84_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.78571552 UTC

[section ""cstring" . GHC.RTS.Flags.$tc'TickyFlags3_bytes" {
     GHC.RTS.Flags.$tc'TickyFlags3_bytes:
         I8[] [39,84,105,99,107,121,70,108,97,103,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.7873129 UTC

[section ""data" . GHC.RTS.Flags.$tc'TickyFlags2_closure" {
     GHC.RTS.Flags.$tc'TickyFlags2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tc'TickyFlags3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.789056972 UTC

[section ""data" . GHC.RTS.Flags.$tc'TickyFlags_closure" {
     GHC.RTS.Flags.$tc'TickyFlags_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tc'TickyFlags2_closure+1;
         const GHC.RTS.Flags.$tc'TickyFlags1_closure+4;
         const 793201039098423274;
         const 12626117550845714720;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.791419619 UTC

[section ""cstring" . GHC.RTS.Flags.$tcParFlags2_bytes" {
     GHC.RTS.Flags.$tcParFlags2_bytes:
         I8[] [80,97,114,70,108,97,103,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.79311517 UTC

[section ""data" . GHC.RTS.Flags.$tcParFlags1_closure" {
     GHC.RTS.Flags.$tcParFlags1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tcParFlags2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.79492096 UTC

[section ""data" . GHC.RTS.Flags.$tcParFlags_closure" {
     GHC.RTS.Flags.$tcParFlags_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tcParFlags1_closure+1;
         const GHC.Types.krep$*_closure;
         const 17485272812108883877;
         const 6760473700794560465;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.796699368 UTC

[section ""data" . $krep88_rcV85_closure" {
     $krep88_rcV85_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.RTS.Flags.$tcParFlags_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.798448248 UTC

[section ""data" . $krep89_rcV86_closure" {
     $krep89_rcV86_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rcV6K_closure+1;
         const $krep88_rcV85_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.800140906 UTC

[section ""data" . $krep90_rcV87_closure" {
     $krep90_rcV87_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_rcV6L_closure+1;
         const $krep89_rcV86_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.801772501 UTC

[section ""data" . $krep91_rcV88_closure" {
     $krep91_rcV88_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_rcV6L_closure+1;
         const $krep90_rcV87_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.803502611 UTC

[section ""data" . $krep92_rcV89_closure" {
     $krep92_rcV89_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_rcV6L_closure+1;
         const $krep91_rcV88_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.805204455 UTC

[section ""data" . $krep93_rcV8a_closure" {
     $krep93_rcV8a_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rcV6K_closure+1;
         const $krep92_rcV89_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.807413954 UTC

[section ""data" . $krep94_rcV8b_closure" {
     $krep94_rcV8b_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_rcV6L_closure+1;
         const $krep93_rcV8a_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.809227837 UTC

[section ""data" . $krep95_rcV8c_closure" {
     $krep95_rcV8c_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rcV6K_closure+1;
         const $krep94_rcV8b_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.811599758 UTC

[section ""data" . $krep96_rcV8d_closure" {
     $krep96_rcV8d_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_rcV6L_closure+1;
         const $krep95_rcV8c_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.81338329 UTC

[section ""data" . $krep97_rcV8e_closure" {
     $krep97_rcV8e_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rcV6K_closure+1;
         const $krep96_rcV8d_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.815145833 UTC

[section ""data" . GHC.RTS.Flags.$tc'ParFlags1_closure" {
     GHC.RTS.Flags.$tc'ParFlags1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_rcV6L_closure+1;
         const $krep97_rcV8e_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.816879261 UTC

[section ""cstring" . GHC.RTS.Flags.$tc'ParFlags3_bytes" {
     GHC.RTS.Flags.$tc'ParFlags3_bytes:
         I8[] [39,80,97,114,70,108,97,103,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.818638261 UTC

[section ""data" . GHC.RTS.Flags.$tc'ParFlags2_closure" {
     GHC.RTS.Flags.$tc'ParFlags2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tc'ParFlags3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.820444451 UTC

[section ""data" . GHC.RTS.Flags.$tc'ParFlags_closure" {
     GHC.RTS.Flags.$tc'ParFlags_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tc'ParFlags2_closure+1;
         const GHC.RTS.Flags.$tc'ParFlags1_closure+4;
         const 18026295039373871109;
         const 526055960347961992;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.822791925 UTC

[section ""cstring" . GHC.RTS.Flags.$tcRTSFlags2_bytes" {
     GHC.RTS.Flags.$tcRTSFlags2_bytes:
         I8[] [82,84,83,70,108,97,103,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.824418998 UTC

[section ""data" . GHC.RTS.Flags.$tcRTSFlags1_closure" {
     GHC.RTS.Flags.$tcRTSFlags1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tcRTSFlags2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.826224833 UTC

[section ""data" . GHC.RTS.Flags.$tcRTSFlags_closure" {
     GHC.RTS.Flags.$tcRTSFlags_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tcRTSFlags1_closure+1;
         const GHC.Types.krep$*_closure;
         const 4919046205018020996;
         const 18187576420379731741;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.828055838 UTC

[section ""data" . $krep98_rcV8f_closure" {
     $krep98_rcV8f_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.RTS.Flags.$tcRTSFlags_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.829804554 UTC

[section ""data" . $krep99_rcV8g_closure" {
     $krep99_rcV8g_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep88_rcV85_closure+1;
         const $krep98_rcV8f_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.831501769 UTC

[section ""data" . $krep100_rcV8h_closure" {
     $krep100_rcV8h_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep86_rcV83_closure+1;
         const $krep99_rcV8g_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.833273317 UTC

[section ""data" . $krep101_rcV8i_closure" {
     $krep101_rcV8i_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep79_rcV7W_closure+1;
         const $krep100_rcV8h_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.834975219 UTC

[section ""data" . $krep102_rcV8j_closure" {
     $krep102_rcV8j_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep65_rcV7I_closure+1;
         const $krep101_rcV8i_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.837821065 UTC

[section ""data" . $krep103_rcV8k_closure" {
     $krep103_rcV8k_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep62_rcV7F_closure+1;
         const $krep102_rcV8j_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.839559772 UTC

[section ""data" . $krep104_rcV8l_closure" {
     $krep104_rcV8l_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep47_rcV7q_closure+1;
         const $krep103_rcV8k_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.841341424 UTC

[section ""data" . $krep105_rcV8m_closure" {
     $krep105_rcV8m_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep40_rcV7j_closure+1;
         const $krep104_rcV8l_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.843117718 UTC

[section ""data" . $krep106_rcV8n_closure" {
     $krep106_rcV8n_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep38_rcV7h_closure+1;
         const $krep105_rcV8m_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.844834583 UTC

[section ""data" . GHC.RTS.Flags.$tc'RTSFlags1_closure" {
     GHC.RTS.Flags.$tc'RTSFlags1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep11_rcV6Q_closure+1;
         const $krep106_rcV8n_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.846549243 UTC

[section ""cstring" . GHC.RTS.Flags.$tc'RTSFlags3_bytes" {
     GHC.RTS.Flags.$tc'RTSFlags3_bytes:
         I8[] [39,82,84,83,70,108,97,103,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.84819149 UTC

[section ""data" . GHC.RTS.Flags.$tc'RTSFlags2_closure" {
     GHC.RTS.Flags.$tc'RTSFlags2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tc'RTSFlags3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.850004215 UTC

[section ""data" . GHC.RTS.Flags.$tc'RTSFlags_closure" {
     GHC.RTS.Flags.$tc'RTSFlags_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tc'RTSFlags2_closure+1;
         const GHC.RTS.Flags.$tc'RTSFlags1_closure+4;
         const 541346542500161105;
         const 7434587216372587438;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.85262827 UTC

[section ""data" . lvl96_rcV8o_closure" {
     lvl96_rcV8o_closure:
         const lvl96_rcV8o_info;
         const 0;
         const 0;
         const 0;
 },
 lvl96_rcV8o_entry() //  [R1]
         { []
         }
     {offset
       cd8QO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd8QP; else goto cd8QQ;
       cd8QP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd8QQ: // global
           (_cd8QL::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cd8QL::I64 == 0) goto cd8QN; else goto cd8QM;
       cd8QN: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cd8QM: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cd8QL::I64;
           R2 = 5;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl96_rcV8o_info" {
     lvl96_rcV8o_info:
         const lvl96_rcV8o_entry;
         const 0;
         const 4294967317;
         const ScWiZ_srt+816;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.858152964 UTC

[section ""data" . GHC.RTS.Flags.$fEnumGiveGCStats_$csucc_closure" {
     GHC.RTS.Flags.$fEnumGiveGCStats_$csucc_closure:
         const GHC.RTS.Flags.$fEnumGiveGCStats_$csucc_info;
         const 0;
 },
 GHC.RTS.Flags.$fEnumGiveGCStats_$csucc_entry() //  [R2]
         { []
         }
     {offset
       cd8Rc: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd8Rd; else goto cd8Re;
       cd8Rd: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumGiveGCStats_$csucc_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8Re: // global
           I64[Sp - 8] = block_cd8R2_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud8Rx; else goto cd8R3;
       ud8Rx: // global
           call _cd8R2(R1) args: 0, res: 0, upd: 0;
       cd8R3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumGiveGCStats_$csucc_info" {
     GHC.RTS.Flags.$fEnumGiveGCStats_$csucc_info:
         const GHC.RTS.Flags.$fEnumGiveGCStats_$csucc_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const ScWiZ_srt+824;
 },
 _cd8R2() //  [R1]
         { []
         }
     {offset
       cd8R2: // global
           _cd8Rb::P64 = R1 & 7;
           if (_cd8Rb::P64 < 4) goto ud8Ru; else goto ud8Rw;
       ud8Ru: // global
           if (_cd8Rb::P64 < 3) goto ud8Rv; else goto cd8R8;
       ud8Rv: // global
           if (_cd8Rb::P64 < 2) goto cd8R6; else goto cd8R7;
       cd8R6: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cd8R7: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cd8R8: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ud8Rw: // global
           if (_cd8Rb::P64 < 5) goto cd8R9; else goto cd8Ra;
       cd8R9: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cd8Ra: // global
           R1 = lvl96_rcV8o_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8R2_info" {
     block_cd8R2_info:
         const _cd8R2;
         const 0;
         const 4294967326;
         const ScWiZ_srt+832;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.86606413 UTC

[section ""data" . GHC.RTS.Flags.$fEnumGiveGCStats_go4_closure" {
     GHC.RTS.Flags.$fEnumGiveGCStats_go4_closure:
         const GHC.RTS.Flags.$fEnumGiveGCStats_go4_info;
         const 0;
 },
 sat_scVRr_entry() //  [R1]
         { []
         }
     {offset
       cd8RZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd8S0; else goto cd8S1;
       cd8S0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd8S1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scVRp::I64 = I64[R1 + 16];
           if (_scVRp::I64 != 0) goto cd8RX; else goto cd8RY;
       cd8RX: // global
           R2 = _scVRp::I64 + 1;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumGiveGCStats_go4_entry(R2) args: 24, res: 0, upd: 24;
       cd8RY: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVRr_info" {
     sat_scVRr_info:
         const sat_scVRr_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+840;
 },
 sat_scVRo_entry() //  [R1]
         { []
         }
     {offset
       cd8Sg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd8Sh; else goto cd8Si;
       cd8Sh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd8Si: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scVRn::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scVRn::I64, 3)) goto ud8Sj; else goto ud8Sm;
       ud8Sj: // global
           if (%MO_S_Lt_W64(_scVRn::I64, 1)) goto ud8Sk; else goto ud8Sl;
       ud8Sk: // global
           if (%MO_S_Lt_W64(_scVRn::I64, 0)) goto cd8Sa; else goto cd8Sb;
       cd8Sb: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud8Sl: // global
           if (%MO_S_Lt_W64(_scVRn::I64, 2)) goto cd8Sc; else goto cd8Sd;
       cd8Sc: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd8Sd: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud8Sm: // global
           if (%MO_S_Ge_W64(_scVRn::I64, 5)) goto cd8Sa; else goto ud8Sn;
       cd8Sa: // global
           R2 = _scVRn::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       ud8Sn: // global
           if (%MO_S_Lt_W64(_scVRn::I64, 4)) goto cd8Se; else goto cd8Sf;
       cd8Se: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd8Sf: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVRo_info" {
     sat_scVRo_info:
         const sat_scVRo_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+816;
 },
 GHC.RTS.Flags.$fEnumGiveGCStats_go4_entry() //  [R2]
         { []
         }
     {offset
       cd8Sp: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cd8St; else goto cd8Ss;
       cd8St: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumGiveGCStats_go4_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8Ss: // global
           I64[Hp - 64] = sat_scVRr_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_scVRo_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumGiveGCStats_go4_info" {
     GHC.RTS.Flags.$fEnumGiveGCStats_go4_info:
         const GHC.RTS.Flags.$fEnumGiveGCStats_go4_entry;
         const 0;
         const 38654705678;
         const 4294967300;
         const ScWiZ_srt+816;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.877117317 UTC

[section ""data" . GHC.RTS.Flags.$fEnumGiveGCStats_go3_closure" {
     GHC.RTS.Flags.$fEnumGiveGCStats_go3_closure:
         const GHC.RTS.Flags.$fEnumGiveGCStats_go3_info;
         const 0;
 },
 sat_scVRx_entry() //  [R1]
         { []
         }
     {offset
       cd8T1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd8T2; else goto cd8T3;
       cd8T2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd8T3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scVRv::I64 = I64[R1 + 16];
           if (_scVRv::I64 != 1) goto cd8SZ; else goto cd8T0;
       cd8SZ: // global
           R2 = _scVRv::I64 + 1;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumGiveGCStats_go3_entry(R2) args: 24, res: 0, upd: 24;
       cd8T0: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVRx_info" {
     sat_scVRx_info:
         const sat_scVRx_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+848;
 },
 sat_scVRu_entry() //  [R1]
         { []
         }
     {offset
       cd8Ti: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd8Tj; else goto cd8Tk;
       cd8Tj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd8Tk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scVRt::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scVRt::I64, 3)) goto ud8Tl; else goto ud8To;
       ud8Tl: // global
           if (%MO_S_Lt_W64(_scVRt::I64, 1)) goto ud8Tm; else goto ud8Tn;
       ud8Tm: // global
           if (%MO_S_Lt_W64(_scVRt::I64, 0)) goto cd8Tc; else goto cd8Td;
       cd8Td: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud8Tn: // global
           if (%MO_S_Lt_W64(_scVRt::I64, 2)) goto cd8Te; else goto cd8Tf;
       cd8Te: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd8Tf: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud8To: // global
           if (%MO_S_Ge_W64(_scVRt::I64, 5)) goto cd8Tc; else goto ud8Tp;
       cd8Tc: // global
           R2 = _scVRt::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       ud8Tp: // global
           if (%MO_S_Lt_W64(_scVRt::I64, 4)) goto cd8Tg; else goto cd8Th;
       cd8Tg: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd8Th: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVRu_info" {
     sat_scVRu_info:
         const sat_scVRu_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+816;
 },
 GHC.RTS.Flags.$fEnumGiveGCStats_go3_entry() //  [R2]
         { []
         }
     {offset
       cd8Tr: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cd8Tv; else goto cd8Tu;
       cd8Tv: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumGiveGCStats_go3_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8Tu: // global
           I64[Hp - 64] = sat_scVRx_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_scVRu_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumGiveGCStats_go3_info" {
     GHC.RTS.Flags.$fEnumGiveGCStats_go3_info:
         const GHC.RTS.Flags.$fEnumGiveGCStats_go3_entry;
         const 0;
         const 73014444046;
         const 4294967300;
         const ScWiZ_srt+816;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.887329492 UTC

[section ""data" . GHC.RTS.Flags.$fEnumGiveGCStats_go2_closure" {
     GHC.RTS.Flags.$fEnumGiveGCStats_go2_closure:
         const GHC.RTS.Flags.$fEnumGiveGCStats_go2_info;
         const 0;
 },
 sat_scVRD_entry() //  [R1]
         { []
         }
     {offset
       cd8U3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd8U4; else goto cd8U5;
       cd8U4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd8U5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scVRB::I64 = I64[R1 + 16];
           if (_scVRB::I64 != 2) goto cd8U1; else goto cd8U2;
       cd8U1: // global
           R2 = _scVRB::I64 + 1;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumGiveGCStats_go2_entry(R2) args: 24, res: 0, upd: 24;
       cd8U2: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVRD_info" {
     sat_scVRD_info:
         const sat_scVRD_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+856;
 },
 sat_scVRA_entry() //  [R1]
         { []
         }
     {offset
       cd8Uk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd8Ul; else goto cd8Um;
       cd8Ul: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd8Um: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scVRz::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scVRz::I64, 3)) goto ud8Un; else goto ud8Uq;
       ud8Un: // global
           if (%MO_S_Lt_W64(_scVRz::I64, 1)) goto ud8Uo; else goto ud8Up;
       ud8Uo: // global
           if (%MO_S_Lt_W64(_scVRz::I64, 0)) goto cd8Ue; else goto cd8Uf;
       cd8Uf: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud8Up: // global
           if (%MO_S_Lt_W64(_scVRz::I64, 2)) goto cd8Ug; else goto cd8Uh;
       cd8Ug: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd8Uh: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud8Uq: // global
           if (%MO_S_Ge_W64(_scVRz::I64, 5)) goto cd8Ue; else goto ud8Ur;
       cd8Ue: // global
           R2 = _scVRz::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       ud8Ur: // global
           if (%MO_S_Lt_W64(_scVRz::I64, 4)) goto cd8Ui; else goto cd8Uj;
       cd8Ui: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd8Uj: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVRA_info" {
     sat_scVRA_info:
         const sat_scVRA_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+816;
 },
 GHC.RTS.Flags.$fEnumGiveGCStats_go2_entry() //  [R2]
         { []
         }
     {offset
       cd8Ut: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cd8Ux; else goto cd8Uw;
       cd8Ux: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumGiveGCStats_go2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8Uw: // global
           I64[Hp - 64] = sat_scVRD_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_scVRA_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumGiveGCStats_go2_info" {
     GHC.RTS.Flags.$fEnumGiveGCStats_go2_info:
         const GHC.RTS.Flags.$fEnumGiveGCStats_go2_entry;
         const 0;
         const 141733920782;
         const 4294967300;
         const ScWiZ_srt+816;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.89756477 UTC

[section ""data" . GHC.RTS.Flags.$fEnumGiveGCStats_go1_closure" {
     GHC.RTS.Flags.$fEnumGiveGCStats_go1_closure:
         const GHC.RTS.Flags.$fEnumGiveGCStats_go1_info;
         const 0;
 },
 sat_scVRJ_entry() //  [R1]
         { []
         }
     {offset
       cd8V5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd8V6; else goto cd8V7;
       cd8V6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd8V7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scVRH::I64 = I64[R1 + 16];
           if (_scVRH::I64 != 3) goto cd8V3; else goto cd8V4;
       cd8V3: // global
           R2 = _scVRH::I64 + 1;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumGiveGCStats_go1_entry(R2) args: 24, res: 0, upd: 24;
       cd8V4: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVRJ_info" {
     sat_scVRJ_info:
         const sat_scVRJ_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+864;
 },
 sat_scVRG_entry() //  [R1]
         { []
         }
     {offset
       cd8Vm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd8Vn; else goto cd8Vo;
       cd8Vn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd8Vo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scVRF::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scVRF::I64, 3)) goto ud8Vp; else goto ud8Vs;
       ud8Vp: // global
           if (%MO_S_Lt_W64(_scVRF::I64, 1)) goto ud8Vq; else goto ud8Vr;
       ud8Vq: // global
           if (%MO_S_Lt_W64(_scVRF::I64, 0)) goto cd8Vg; else goto cd8Vh;
       cd8Vh: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud8Vr: // global
           if (%MO_S_Lt_W64(_scVRF::I64, 2)) goto cd8Vi; else goto cd8Vj;
       cd8Vi: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd8Vj: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud8Vs: // global
           if (%MO_S_Ge_W64(_scVRF::I64, 5)) goto cd8Vg; else goto ud8Vt;
       cd8Vg: // global
           R2 = _scVRF::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       ud8Vt: // global
           if (%MO_S_Lt_W64(_scVRF::I64, 4)) goto cd8Vk; else goto cd8Vl;
       cd8Vk: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd8Vl: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVRG_info" {
     sat_scVRG_info:
         const sat_scVRG_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+816;
 },
 GHC.RTS.Flags.$fEnumGiveGCStats_go1_entry() //  [R2]
         { []
         }
     {offset
       cd8Vv: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cd8Vz; else goto cd8Vy;
       cd8Vz: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumGiveGCStats_go1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8Vy: // global
           I64[Hp - 64] = sat_scVRJ_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_scVRG_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumGiveGCStats_go1_info" {
     GHC.RTS.Flags.$fEnumGiveGCStats_go1_info:
         const GHC.RTS.Flags.$fEnumGiveGCStats_go1_entry;
         const 0;
         const 279172874254;
         const 4294967300;
         const ScWiZ_srt+816;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.907760994 UTC

[section ""data" . GHC.RTS.Flags.$fEnumGiveGCStats_go_closure" {
     GHC.RTS.Flags.$fEnumGiveGCStats_go_closure:
         const GHC.RTS.Flags.$fEnumGiveGCStats_go_info;
         const 0;
 },
 sat_scVRP_entry() //  [R1]
         { []
         }
     {offset
       cd8W7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd8W8; else goto cd8W9;
       cd8W8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd8W9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scVRN::I64 = I64[R1 + 16];
           if (_scVRN::I64 != 4) goto cd8W5; else goto cd8W6;
       cd8W5: // global
           R2 = _scVRN::I64 + 1;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumGiveGCStats_go_entry(R2) args: 24, res: 0, upd: 24;
       cd8W6: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVRP_info" {
     sat_scVRP_info:
         const sat_scVRP_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+872;
 },
 sat_scVRM_entry() //  [R1]
         { []
         }
     {offset
       cd8Wo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd8Wp; else goto cd8Wq;
       cd8Wp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd8Wq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scVRL::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scVRL::I64, 3)) goto ud8Wr; else goto ud8Wu;
       ud8Wr: // global
           if (%MO_S_Lt_W64(_scVRL::I64, 1)) goto ud8Ws; else goto ud8Wt;
       ud8Ws: // global
           if (%MO_S_Lt_W64(_scVRL::I64, 0)) goto cd8Wi; else goto cd8Wj;
       cd8Wj: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud8Wt: // global
           if (%MO_S_Lt_W64(_scVRL::I64, 2)) goto cd8Wk; else goto cd8Wl;
       cd8Wk: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd8Wl: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud8Wu: // global
           if (%MO_S_Ge_W64(_scVRL::I64, 5)) goto cd8Wi; else goto ud8Wv;
       cd8Wi: // global
           R2 = _scVRL::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       ud8Wv: // global
           if (%MO_S_Lt_W64(_scVRL::I64, 4)) goto cd8Wm; else goto cd8Wn;
       cd8Wm: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd8Wn: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVRM_info" {
     sat_scVRM_info:
         const sat_scVRM_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+816;
 },
 GHC.RTS.Flags.$fEnumGiveGCStats_go_entry() //  [R2]
         { []
         }
     {offset
       cd8Wx: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cd8WB; else goto cd8WA;
       cd8WB: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumGiveGCStats_go_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd8WA: // global
           I64[Hp - 64] = sat_scVRP_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_scVRM_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumGiveGCStats_go_info" {
     GHC.RTS.Flags.$fEnumGiveGCStats_go_info:
         const GHC.RTS.Flags.$fEnumGiveGCStats_go_entry;
         const 0;
         const 554050781198;
         const 4294967300;
         const ScWiZ_srt+816;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.917724572 UTC

[section ""data" . GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFromTo_closure" {
     GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFromTo_closure:
         const GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFromTo_info;
         const 0;
 },
 GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFromTo_entry() //  [R2, R3]
         { []
         }
     {offset
       cd8Xd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd8Xe; else goto cd8Xf;
       cd8Xe: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFromTo_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cd8Xf: // global
           I64[Sp - 16] = block_cd8X3_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ud8Yu; else goto cd8X4;
       ud8Yu: // global
           call _cd8X3(R1) args: 0, res: 0, upd: 0;
       cd8X4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFromTo_info" {
     GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFromTo_info:
         const GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFromTo_entry;
         const 0;
         const 270582939662;
         const 8589934607;
         const ScWiZ_srt+840;
 },
 _cd8X3() //  [R1]
         { []
         }
     {offset
       cd8X3: // global
           _scVRR::P64 = P64[Sp + 8];
           _cd8Xc::P64 = R1 & 7;
           if (_cd8Xc::P64 < 4) goto ud8Yn; else goto ud8Yp;
       ud8Yn: // global
           if (_cd8Xc::P64 < 3) goto ud8Yo; else goto cd8X9;
       ud8Yo: // global
           if (_cd8Xc::P64 < 2) goto cd8X7; else goto cd8X8;
       cd8X7: // global
           _scVRT::I64 = 0;
           goto scVRS;
       cd8X8: // global
           _scVRT::I64 = 1;
           goto scVRS;
       cd8X9: // global
           _scVRT::I64 = 2;
           goto scVRS;
       ud8Yp: // global
           if (_cd8Xc::P64 < 5) goto cd8Xa; else goto cd8Xb;
       cd8Xa: // global
           _scVRT::I64 = 3;
           goto scVRS;
       cd8Xb: // global
           _scVRT::I64 = 4;
           goto scVRS;
       scVRS: // global
           I64[Sp] = block_cd8Xj_info;
           R1 = _scVRR::P64;
           I64[Sp + 8] = _scVRT::I64;
           if (R1 & 7 != 0) goto ud8Yt; else goto cd8Xl;
       ud8Yt: // global
           call _cd8Xj(R1) args: 0, res: 0, upd: 0;
       cd8Xl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8X3_info" {
     block_cd8X3_info:
         const _cd8X3;
         const 1;
         const 133143986206;
         const ScWiZ_srt+840;
 },
 _cd8Xj() //  [R1]
         { []
         }
     {offset
       cd8Xj: // global
           _scVRT::I64 = I64[Sp + 8];
           _cd8Ym::P64 = R1 & 7;
           if (_cd8Ym::P64 < 4) goto ud8Yq; else goto ud8Ys;
       ud8Yq: // global
           if (_cd8Ym::P64 < 3) goto ud8Yr; else goto cd8XO;
       ud8Yr: // global
           if (_cd8Ym::P64 < 2) goto cd8Xw; else goto cd8XF;
       cd8Xw: // global
           if (%MO_S_Gt_W64(_scVRT::I64, 0)) goto cd8Y5; else goto cd8Xt;
       cd8Xt: // global
           R2 = _scVRT::I64;
           Sp = Sp + 16;
           call GHC.RTS.Flags.$fEnumGiveGCStats_go4_entry(R2) args: 8, res: 0, upd: 8;
       cd8XF: // global
           if (%MO_S_Gt_W64(_scVRT::I64, 1)) goto cd8Y5; else goto cd8XD;
       cd8XD: // global
           R2 = _scVRT::I64;
           Sp = Sp + 16;
           call GHC.RTS.Flags.$fEnumGiveGCStats_go3_entry(R2) args: 8, res: 0, upd: 8;
       cd8XO: // global
           if (%MO_S_Gt_W64(_scVRT::I64, 2)) goto cd8Y5; else goto cd8XM;
       cd8XM: // global
           R2 = _scVRT::I64;
           Sp = Sp + 16;
           call GHC.RTS.Flags.$fEnumGiveGCStats_go2_entry(R2) args: 8, res: 0, upd: 8;
       ud8Ys: // global
           if (_cd8Ym::P64 < 5) goto cd8XX; else goto cd8Y6;
       cd8XX: // global
           if (%MO_S_Gt_W64(_scVRT::I64, 3)) goto cd8Y5; else goto cd8XV;
       cd8XV: // global
           R2 = _scVRT::I64;
           Sp = Sp + 16;
           call GHC.RTS.Flags.$fEnumGiveGCStats_go1_entry(R2) args: 8, res: 0, upd: 8;
       cd8Y6: // global
           if (%MO_S_Gt_W64(_scVRT::I64, 4)) goto cd8Y5; else goto cd8Y4;
       cd8Y5: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cd8Y4: // global
           R2 = _scVRT::I64;
           Sp = Sp + 16;
           call GHC.RTS.Flags.$fEnumGiveGCStats_go_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8Xj_info" {
     block_cd8Xj_info:
         const _cd8Xj;
         const 65;
         const 133143986206;
         const ScWiZ_srt+840;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.929022919 UTC

[section ""data" . GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFromThen_closure" {
     GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFromThen_closure:
         const GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFromThen_info;
         const 0;
 },
 GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFromThen_entry() //  [R2, R3]
         { []
         }
     {offset
       cd8Z1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd8Z2; else goto cd8Z3;
       cd8Z2: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFromThen_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cd8Z3: // global
           I64[Sp - 16] = block_cd8YR_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ud90i; else goto cd8YS;
       ud90i: // global
           call _cd8YR(R1) args: 0, res: 0, upd: 0;
       cd8YS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFromThen_info" {
     GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFromThen_info:
         const GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFromThen_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const ScWiZ_srt+888;
 },
 _cd8YR() //  [R1]
         { []
         }
     {offset
       cd8YR: // global
           _scVS2::P64 = P64[Sp + 8];
           _cd8Z0::P64 = R1 & 7;
           if (_cd8Z0::P64 < 4) goto ud90b; else goto ud90d;
       ud90b: // global
           if (_cd8Z0::P64 < 3) goto ud90c; else goto cd8YX;
       ud90c: // global
           if (_cd8Z0::P64 < 2) goto cd8YV; else goto cd8YW;
       cd8YV: // global
           _scVS4::I64 = 0;
           goto scVS3;
       cd8YW: // global
           _scVS4::I64 = 1;
           goto scVS3;
       cd8YX: // global
           _scVS4::I64 = 2;
           goto scVS3;
       ud90d: // global
           if (_cd8Z0::P64 < 5) goto cd8YY; else goto cd8YZ;
       cd8YY: // global
           _scVS4::I64 = 3;
           goto scVS3;
       cd8YZ: // global
           _scVS4::I64 = 4;
           goto scVS3;
       scVS3: // global
           I64[Sp] = block_cd8Z7_info;
           R1 = _scVS2::P64;
           I64[Sp + 8] = _scVS4::I64;
           if (R1 & 7 != 0) goto ud90h; else goto cd8Z9;
       ud90h: // global
           call _cd8Z7(R1) args: 0, res: 0, upd: 0;
       cd8Z9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8YR_info" {
     block_cd8YR_info:
         const _cd8YR;
         const 1;
         const 4294967326;
         const ScWiZ_srt+896;
 },
 _cd8Z7() //  [R1]
         { []
         }
     {offset
       cd8Z7: // global
           _scVS4::I64 = I64[Sp + 8];
           _cd90a::P64 = R1 & 7;
           if (_cd90a::P64 < 4) goto ud90e; else goto ud90g;
       ud90e: // global
           if (_cd90a::P64 < 3) goto ud90f; else goto cd8Zy;
       ud90f: // global
           if (_cd90a::P64 < 2) goto cd8Zg; else goto cd8Zp;
       cd8Zg: // global
           I64[Sp + 8] = block_cd8Zd_info;
           R3 = 0;
           R2 = _scVS4::I64;
           Sp = Sp + 8;
           call GHC.Enum.efdInt_entry(R3, R2) args: 8, res: 8, upd: 8;
       cd8Zp: // global
           I64[Sp + 8] = block_cd8Zn_info;
           R3 = 1;
           R2 = _scVS4::I64;
           Sp = Sp + 8;
           call GHC.Enum.efdInt_entry(R3, R2) args: 8, res: 8, upd: 8;
       cd8Zy: // global
           I64[Sp + 8] = block_cd8Zw_info;
           R3 = 2;
           R2 = _scVS4::I64;
           Sp = Sp + 8;
           call GHC.Enum.efdInt_entry(R3, R2) args: 8, res: 8, upd: 8;
       ud90g: // global
           if (_cd90a::P64 < 5) goto cd8ZH; else goto cd8ZQ;
       cd8ZH: // global
           I64[Sp + 8] = block_cd8ZF_info;
           R3 = 3;
           R2 = _scVS4::I64;
           Sp = Sp + 8;
           call GHC.Enum.efdInt_entry(R3, R2) args: 8, res: 8, upd: 8;
       cd8ZQ: // global
           I64[Sp + 8] = block_cd8ZO_info;
           R3 = 4;
           R2 = _scVS4::I64;
           Sp = Sp + 8;
           call GHC.Enum.efdInt_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8Z7_info" {
     block_cd8Z7_info:
         const _cd8Z7;
         const 65;
         const 4294967326;
         const ScWiZ_srt+896;
 },
 _cd8Zd() //  [R1]
         { []
         }
     {offset
       cd8Zd: // global
           R3 = R1;
           R2 = GHC.RTS.Flags.$fEnumGiveGCStats_$ctoEnum_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8Zd_info" {
     block_cd8Zd_info:
         const _cd8Zd;
         const 0;
         const 4294967326;
         const ScWiZ_srt+896;
 },
 _cd8Zn() //  [R1]
         { []
         }
     {offset
       cd8Zn: // global
           R3 = R1;
           R2 = GHC.RTS.Flags.$fEnumGiveGCStats_$ctoEnum_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8Zn_info" {
     block_cd8Zn_info:
         const _cd8Zn;
         const 0;
         const 4294967326;
         const ScWiZ_srt+896;
 },
 _cd8Zw() //  [R1]
         { []
         }
     {offset
       cd8Zw: // global
           R3 = R1;
           R2 = GHC.RTS.Flags.$fEnumGiveGCStats_$ctoEnum_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8Zw_info" {
     block_cd8Zw_info:
         const _cd8Zw;
         const 0;
         const 4294967326;
         const ScWiZ_srt+896;
 },
 _cd8ZF() //  [R1]
         { []
         }
     {offset
       cd8ZF: // global
           R3 = R1;
           R2 = GHC.RTS.Flags.$fEnumGiveGCStats_$ctoEnum_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8ZF_info" {
     block_cd8ZF_info:
         const _cd8ZF;
         const 0;
         const 4294967326;
         const ScWiZ_srt+896;
 },
 _cd8ZO() //  [R1]
         { []
         }
     {offset
       cd8ZO: // global
           R3 = R1;
           R2 = GHC.RTS.Flags.$fEnumGiveGCStats_$ctoEnum_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd8ZO_info" {
     block_cd8ZO_info:
         const _cd8ZO;
         const 0;
         const 4294967326;
         const ScWiZ_srt+896;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.946179974 UTC

[section ""data" . GHC.RTS.Flags.$fEnumGiveGCStats_go5_closure" {
     GHC.RTS.Flags.$fEnumGiveGCStats_go5_closure:
         const GHC.RTS.Flags.$fEnumGiveGCStats_go5_info;
         const 0;
 },
 sat_scVSh_entry() //  [R1]
         { []
         }
     {offset
       cd90Z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd910; else goto cd911;
       cd910: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd911: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scVSf::I64 = I64[R1 + 16];
           if (_scVSf::I64 != 9223372036854775807) goto cd90X; else goto cd90Y;
       cd90X: // global
           R2 = _scVSf::I64 + 1;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumGiveGCStats_go5_entry(R2) args: 24, res: 0, upd: 24;
       cd90Y: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVSh_info" {
     sat_scVSh_info:
         const sat_scVSh_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+904;
 },
 sat_scVSe_entry() //  [R1]
         { []
         }
     {offset
       cd91g: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd91h; else goto cd91i;
       cd91h: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd91i: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scVSd::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scVSd::I64, 3)) goto ud91j; else goto ud91m;
       ud91j: // global
           if (%MO_S_Lt_W64(_scVSd::I64, 1)) goto ud91k; else goto ud91l;
       ud91k: // global
           if (%MO_S_Lt_W64(_scVSd::I64, 0)) goto cd91a; else goto cd91b;
       cd91b: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud91l: // global
           if (%MO_S_Lt_W64(_scVSd::I64, 2)) goto cd91c; else goto cd91d;
       cd91c: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd91d: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud91m: // global
           if (%MO_S_Ge_W64(_scVSd::I64, 5)) goto cd91a; else goto ud91n;
       cd91a: // global
           R2 = _scVSd::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       ud91n: // global
           if (%MO_S_Lt_W64(_scVSd::I64, 4)) goto cd91e; else goto cd91f;
       cd91e: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd91f: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVSe_info" {
     sat_scVSe_info:
         const sat_scVSe_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+816;
 },
 GHC.RTS.Flags.$fEnumGiveGCStats_go5_entry() //  [R2]
         { []
         }
     {offset
       cd91p: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cd91t; else goto cd91s;
       cd91t: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumGiveGCStats_go5_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd91s: // global
           I64[Hp - 64] = sat_scVSh_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_scVSe_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumGiveGCStats_go5_info" {
     GHC.RTS.Flags.$fEnumGiveGCStats_go5_info:
         const GHC.RTS.Flags.$fEnumGiveGCStats_go5_entry;
         const 0;
         const 8800387989518;
         const 4294967300;
         const ScWiZ_srt+816;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.954652913 UTC

[section ""data" . GHC.RTS.Flags.$fEnumGiveGCStats5_closure" {
     GHC.RTS.Flags.$fEnumGiveGCStats5_closure:
         const GHC.RTS.Flags.$fEnumGiveGCStats5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fEnumGiveGCStats5_entry() //  [R1]
         { []
         }
     {offset
       cd91W: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd91X; else goto cd91Y;
       cd91X: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd91Y: // global
           (_cd91T::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cd91T::I64 == 0) goto cd91V; else goto cd91U;
       cd91V: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cd91U: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cd91T::I64;
           R2 = 0;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumGiveGCStats_go5_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumGiveGCStats5_info" {
     GHC.RTS.Flags.$fEnumGiveGCStats5_info:
         const GHC.RTS.Flags.$fEnumGiveGCStats5_entry;
         const 0;
         const 4294967317;
         const ScWiZ_srt+904;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.959123811 UTC

[section ""data" . GHC.RTS.Flags.$fEnumGiveGCStats4_closure" {
     GHC.RTS.Flags.$fEnumGiveGCStats4_closure:
         const GHC.RTS.Flags.$fEnumGiveGCStats4_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fEnumGiveGCStats4_entry() //  [R1]
         { []
         }
     {offset
       cd92c: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd92d; else goto cd92e;
       cd92d: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd92e: // global
           (_cd929::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cd929::I64 == 0) goto cd92b; else goto cd92a;
       cd92b: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cd92a: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cd929::I64;
           R2 = 1;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumGiveGCStats_go5_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumGiveGCStats4_info" {
     GHC.RTS.Flags.$fEnumGiveGCStats4_info:
         const GHC.RTS.Flags.$fEnumGiveGCStats4_entry;
         const 0;
         const 4294967317;
         const ScWiZ_srt+904;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.963998408 UTC

[section ""data" . GHC.RTS.Flags.$fEnumGiveGCStats3_closure" {
     GHC.RTS.Flags.$fEnumGiveGCStats3_closure:
         const GHC.RTS.Flags.$fEnumGiveGCStats3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fEnumGiveGCStats3_entry() //  [R1]
         { []
         }
     {offset
       cd92s: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd92t; else goto cd92u;
       cd92t: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd92u: // global
           (_cd92p::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cd92p::I64 == 0) goto cd92r; else goto cd92q;
       cd92r: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cd92q: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cd92p::I64;
           R2 = 2;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumGiveGCStats_go5_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumGiveGCStats3_info" {
     GHC.RTS.Flags.$fEnumGiveGCStats3_info:
         const GHC.RTS.Flags.$fEnumGiveGCStats3_entry;
         const 0;
         const 4294967317;
         const ScWiZ_srt+904;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.968196764 UTC

[section ""data" . GHC.RTS.Flags.$fEnumGiveGCStats2_closure" {
     GHC.RTS.Flags.$fEnumGiveGCStats2_closure:
         const GHC.RTS.Flags.$fEnumGiveGCStats2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fEnumGiveGCStats2_entry() //  [R1]
         { []
         }
     {offset
       cd92I: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd92J; else goto cd92K;
       cd92J: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd92K: // global
           (_cd92F::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cd92F::I64 == 0) goto cd92H; else goto cd92G;
       cd92H: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cd92G: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cd92F::I64;
           R2 = 3;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumGiveGCStats_go5_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumGiveGCStats2_info" {
     GHC.RTS.Flags.$fEnumGiveGCStats2_info:
         const GHC.RTS.Flags.$fEnumGiveGCStats2_entry;
         const 0;
         const 4294967317;
         const ScWiZ_srt+904;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.972282346 UTC

[section ""data" . GHC.RTS.Flags.$fEnumGiveGCStats1_closure" {
     GHC.RTS.Flags.$fEnumGiveGCStats1_closure:
         const GHC.RTS.Flags.$fEnumGiveGCStats1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fEnumGiveGCStats1_entry() //  [R1]
         { []
         }
     {offset
       cd92Y: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd92Z; else goto cd930;
       cd92Z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd930: // global
           (_cd92V::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cd92V::I64 == 0) goto cd92X; else goto cd92W;
       cd92X: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cd92W: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cd92V::I64;
           R2 = 4;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumGiveGCStats_go5_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumGiveGCStats1_info" {
     GHC.RTS.Flags.$fEnumGiveGCStats1_info:
         const GHC.RTS.Flags.$fEnumGiveGCStats1_entry;
         const 0;
         const 4294967317;
         const ScWiZ_srt+904;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.977223114 UTC

[section ""data" . GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFrom_closure" {
     GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFrom_closure:
         const GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFrom_info;
         const 0;
 },
 GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFrom_entry() //  [R2]
         { []
         }
     {offset
       cd93m: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd93n; else goto cd93o;
       cd93n: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFrom_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd93o: // global
           I64[Sp - 8] = block_cd93c_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud93H; else goto cd93d;
       ud93H: // global
           call _cd93c(R1) args: 0, res: 0, upd: 0;
       cd93d: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFrom_info" {
     GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFrom_info:
         const GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFrom_entry;
         const 0;
         const 270582939662;
         const 4294967301;
         const ScWiZ_srt+912;
 },
 _cd93c() //  [R1]
         { []
         }
     {offset
       cd93c: // global
           _cd93l::P64 = R1 & 7;
           if (_cd93l::P64 < 4) goto ud93E; else goto ud93G;
       ud93E: // global
           if (_cd93l::P64 < 3) goto ud93F; else goto cd93i;
       ud93F: // global
           if (_cd93l::P64 < 2) goto cd93g; else goto cd93h;
       cd93g: // global
           R1 = GHC.RTS.Flags.$fEnumGiveGCStats5_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cd93h: // global
           R1 = GHC.RTS.Flags.$fEnumGiveGCStats4_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cd93i: // global
           R1 = GHC.RTS.Flags.$fEnumGiveGCStats3_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       ud93G: // global
           if (_cd93l::P64 < 5) goto cd93j; else goto cd93k;
       cd93j: // global
           R1 = GHC.RTS.Flags.$fEnumGiveGCStats2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cd93k: // global
           R1 = GHC.RTS.Flags.$fEnumGiveGCStats1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd93c_info" {
     block_cd93c_info:
         const _cd93c;
         const 0;
         const 133143986206;
         const ScWiZ_srt+920;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.983081708 UTC

[section ""data" . lvl97_rcV8p_closure" {
     lvl97_rcV8p_closure:
         const lvl97_rcV8p_info;
         const 0;
         const 0;
         const 0;
 },
 lvl97_rcV8p_entry() //  [R1]
         { []
         }
     {offset
       cd943: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd944; else goto cd945;
       cd944: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd945: // global
           (_cd940::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cd940::I64 == 0) goto cd942; else goto cd941;
       cd942: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cd941: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cd940::I64;
           R2 = (-1);
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl97_rcV8p_info" {
     lvl97_rcV8p_info:
         const lvl97_rcV8p_entry;
         const 0;
         const 4294967317;
         const ScWiZ_srt+816;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:58.987931833 UTC

[section ""data" . GHC.RTS.Flags.$fEnumGiveGCStats_$cpred_closure" {
     GHC.RTS.Flags.$fEnumGiveGCStats_$cpred_closure:
         const GHC.RTS.Flags.$fEnumGiveGCStats_$cpred_info;
         const 0;
 },
 GHC.RTS.Flags.$fEnumGiveGCStats_$cpred_entry() //  [R2]
         { []
         }
     {offset
       cd94r: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd94s; else goto cd94t;
       cd94s: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumGiveGCStats_$cpred_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd94t: // global
           I64[Sp - 8] = block_cd94h_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud94M; else goto cd94i;
       ud94M: // global
           call _cd94h(R1) args: 0, res: 0, upd: 0;
       cd94i: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumGiveGCStats_$cpred_info" {
     GHC.RTS.Flags.$fEnumGiveGCStats_$cpred_info:
         const GHC.RTS.Flags.$fEnumGiveGCStats_$cpred_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const ScWiZ_srt+960;
 },
 _cd94h() //  [R1]
         { []
         }
     {offset
       cd94h: // global
           _cd94q::P64 = R1 & 7;
           if (_cd94q::P64 < 4) goto ud94J; else goto ud94L;
       ud94J: // global
           if (_cd94q::P64 < 3) goto ud94K; else goto cd94n;
       ud94K: // global
           if (_cd94q::P64 < 2) goto cd94l; else goto cd94m;
       cd94l: // global
           R1 = lvl97_rcV8p_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cd94m: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cd94n: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ud94L: // global
           if (_cd94q::P64 < 5) goto cd94o; else goto cd94p;
       cd94o: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cd94p: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd94h_info" {
     block_cd94h_info:
         const _cd94h;
         const 0;
         const 4294967326;
         const ScWiZ_srt+968;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:59.055708109 UTC

[section ""data" . GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFromThenTo_closure" {
     GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFromThenTo_closure:
         const GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFromThenTo_info;
         const 0;
 },
 sat_scVSG_entry() //  [R1]
         { []
         }
     {offset
       cd95P: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd95Q; else goto cd95R;
       cd95Q: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd95R: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_scVSA_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVSG_info" {
     sat_scVSG_info:
         const sat_scVSG_entry;
         const 8589934593;
         const 4294967311;
         const ScWiZ_srt+816;
 },
 sat_scVSE_entry() //  [R1]
         { []
         }
     {offset
       cd964: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd965; else goto cd966;
       cd965: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd966: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scVSD::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scVSD::I64, 3)) goto ud967; else goto ud96a;
       ud967: // global
           if (%MO_S_Lt_W64(_scVSD::I64, 1)) goto ud968; else goto ud969;
       ud968: // global
           if (%MO_S_Lt_W64(_scVSD::I64, 0)) goto cd95Y; else goto cd95Z;
       cd95Z: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud969: // global
           if (%MO_S_Lt_W64(_scVSD::I64, 2)) goto cd960; else goto cd961;
       cd960: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd961: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud96a: // global
           if (%MO_S_Ge_W64(_scVSD::I64, 5)) goto cd95Y; else goto ud96b;
       cd95Y: // global
           R2 = _scVSD::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       ud96b: // global
           if (%MO_S_Lt_W64(_scVSD::I64, 4)) goto cd962; else goto cd963;
       cd962: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd963: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVSE_info" {
     sat_scVSE_info:
         const sat_scVSE_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+816;
 },
 sat_scVSI_entry() //  [R1]
         { []
         }
     {offset
       cd96p: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd96q; else goto cd96r;
       cd96q: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd96r: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scVSH::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scVSH::I64, 3)) goto ud96s; else goto ud96v;
       ud96s: // global
           if (%MO_S_Lt_W64(_scVSH::I64, 1)) goto ud96t; else goto ud96u;
       ud96t: // global
           if (%MO_S_Lt_W64(_scVSH::I64, 0)) goto cd96j; else goto cd96k;
       cd96k: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud96u: // global
           if (%MO_S_Lt_W64(_scVSH::I64, 2)) goto cd96l; else goto cd96m;
       cd96l: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd96m: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud96v: // global
           if (%MO_S_Ge_W64(_scVSH::I64, 5)) goto cd96j; else goto ud96w;
       cd96j: // global
           R2 = _scVSH::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       ud96w: // global
           if (%MO_S_Lt_W64(_scVSH::I64, 4)) goto cd96n; else goto cd96o;
       cd96n: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd96o: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVSI_info" {
     sat_scVSI_info:
         const sat_scVSI_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+816;
 },
 go_dn_scVSA_entry() //  [R1, R2]
         { []
         }
     {offset
       cd96A: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cd96E; else goto cd96D;
       cd96E: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd96D: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto cd96y; else goto cd96z;
       cd96y: // global
           _scVSy::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_scVSG_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _scVSy::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_scVSE_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cd96z: // global
           I64[Hp - 80] = sat_scVSI_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _cd96G::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _cd96G::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_scVSA_info" {
     go_dn_scVSA_info:
         const go_dn_scVSA_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const ScWiZ_srt+816;
 },
 sat_scVSJ_entry() //  [R1]
         { []
         }
     {offset
       cd96H: // global
           _scVSJ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd96I; else goto cd96J;
       cd96J: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cd96L; else goto cd96K;
       cd96L: // global
           HpAlloc = 24;
           goto cd96I;
       cd96I: // global
           R1 = _scVSJ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd96K: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVSJ::P64;
           _scVSs::I64 = I64[_scVSJ::P64 + 24];
           _scVSy::I64 = _scVSs::I64 - I64[_scVSJ::P64 + 16];
           I64[Hp - 16] = go_dn_scVSA_info;
           I64[Hp - 8] = _scVSy::I64;
           I64[Hp] = 0 - _scVSy::I64;
           R2 = _scVSs::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_scVSA_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVSJ_info" {
     sat_scVSJ_info:
         const sat_scVSJ_entry;
         const 8589934592;
         const 4294967316;
         const ScWiZ_srt+816;
 },
 sat_scVSx_entry() //  [R1]
         { []
         }
     {offset
       cd96Y: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd96Z; else goto cd970;
       cd96Z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd970: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scVSw::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scVSw::I64, 3)) goto ud971; else goto ud974;
       ud971: // global
           if (%MO_S_Lt_W64(_scVSw::I64, 1)) goto ud972; else goto ud973;
       ud972: // global
           if (%MO_S_Lt_W64(_scVSw::I64, 0)) goto cd96S; else goto cd96T;
       cd96T: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud973: // global
           if (%MO_S_Lt_W64(_scVSw::I64, 2)) goto cd96U; else goto cd96V;
       cd96U: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd96V: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud974: // global
           if (%MO_S_Ge_W64(_scVSw::I64, 5)) goto cd96S; else goto ud975;
       cd96S: // global
           R2 = _scVSw::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       ud975: // global
           if (%MO_S_Lt_W64(_scVSw::I64, 4)) goto cd96W; else goto cd96X;
       cd96W: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd96X: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVSx_info" {
     sat_scVSx_info:
         const sat_scVSx_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+816;
 },
 sat_scVSM_entry() //  [R1]
         { []
         }
     {offset
       cd97m: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd97n; else goto cd97o;
       cd97n: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd97o: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scVSL::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scVSL::I64, 3)) goto ud97p; else goto ud97s;
       ud97p: // global
           if (%MO_S_Lt_W64(_scVSL::I64, 1)) goto ud97q; else goto ud97r;
       ud97q: // global
           if (%MO_S_Lt_W64(_scVSL::I64, 0)) goto cd97g; else goto cd97h;
       cd97h: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud97r: // global
           if (%MO_S_Lt_W64(_scVSL::I64, 2)) goto cd97i; else goto cd97j;
       cd97i: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd97j: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud97s: // global
           if (%MO_S_Ge_W64(_scVSL::I64, 5)) goto cd97g; else goto ud97t;
       cd97g: // global
           R2 = _scVSL::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       ud97t: // global
           if (%MO_S_Lt_W64(_scVSL::I64, 4)) goto cd97k; else goto cd97l;
       cd97k: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd97l: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVSM_info" {
     sat_scVSM_info:
         const sat_scVSM_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+816;
 },
 sat_scVSY_entry() //  [R1]
         { []
         }
     {offset
       cd97W: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd97X; else goto cd97Y;
       cd97X: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd97Y: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_scVSS_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVSY_info" {
     sat_scVSY_info:
         const sat_scVSY_entry;
         const 8589934593;
         const 4294967311;
         const ScWiZ_srt+816;
 },
 sat_scVSW_entry() //  [R1]
         { []
         }
     {offset
       cd98b: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd98c; else goto cd98d;
       cd98c: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd98d: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scVSV::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scVSV::I64, 3)) goto ud98e; else goto ud98h;
       ud98e: // global
           if (%MO_S_Lt_W64(_scVSV::I64, 1)) goto ud98f; else goto ud98g;
       ud98f: // global
           if (%MO_S_Lt_W64(_scVSV::I64, 0)) goto cd985; else goto cd986;
       cd986: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud98g: // global
           if (%MO_S_Lt_W64(_scVSV::I64, 2)) goto cd987; else goto cd988;
       cd987: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd988: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud98h: // global
           if (%MO_S_Ge_W64(_scVSV::I64, 5)) goto cd985; else goto ud98i;
       cd985: // global
           R2 = _scVSV::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       ud98i: // global
           if (%MO_S_Lt_W64(_scVSV::I64, 4)) goto cd989; else goto cd98a;
       cd989: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd98a: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVSW_info" {
     sat_scVSW_info:
         const sat_scVSW_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+816;
 },
 sat_scVT0_entry() //  [R1]
         { []
         }
     {offset
       cd98w: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd98x; else goto cd98y;
       cd98x: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd98y: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scVSZ::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scVSZ::I64, 3)) goto ud98z; else goto ud98C;
       ud98z: // global
           if (%MO_S_Lt_W64(_scVSZ::I64, 1)) goto ud98A; else goto ud98B;
       ud98A: // global
           if (%MO_S_Lt_W64(_scVSZ::I64, 0)) goto cd98q; else goto cd98r;
       cd98r: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud98B: // global
           if (%MO_S_Lt_W64(_scVSZ::I64, 2)) goto cd98s; else goto cd98t;
       cd98s: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd98t: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud98C: // global
           if (%MO_S_Ge_W64(_scVSZ::I64, 5)) goto cd98q; else goto ud98D;
       cd98q: // global
           R2 = _scVSZ::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       ud98D: // global
           if (%MO_S_Lt_W64(_scVSZ::I64, 4)) goto cd98u; else goto cd98v;
       cd98u: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd98v: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVT0_info" {
     sat_scVT0_info:
         const sat_scVT0_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+816;
 },
 go_up_scVSS_entry() //  [R1, R2]
         { []
         }
     {offset
       cd98H: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cd98L; else goto cd98K;
       cd98L: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd98K: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto cd98F; else goto cd98G;
       cd98F: // global
           _scVSQ::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_scVSY_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _scVSQ::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_scVSW_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cd98G: // global
           I64[Hp - 80] = sat_scVT0_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _cd98N::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _cd98N::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_scVSS_info" {
     go_up_scVSS_info:
         const go_up_scVSS_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const ScWiZ_srt+816;
 },
 sat_scVT1_entry() //  [R1]
         { []
         }
     {offset
       cd98O: // global
           _scVT1::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd98P; else goto cd98Q;
       cd98Q: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cd98S; else goto cd98R;
       cd98S: // global
           HpAlloc = 24;
           goto cd98P;
       cd98P: // global
           R1 = _scVT1::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd98R: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVT1::P64;
           _scVSs::I64 = I64[_scVT1::P64 + 24];
           _scVSQ::I64 = _scVSs::I64 - I64[_scVT1::P64 + 16];
           I64[Hp - 16] = go_up_scVSS_info;
           I64[Hp - 8] = _scVSQ::I64;
           I64[Hp] = 0 - _scVSQ::I64;
           R2 = _scVSs::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_scVSS_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVT1_info" {
     sat_scVT1_info:
         const sat_scVT1_entry;
         const 8589934592;
         const 4294967316;
         const ScWiZ_srt+816;
 },
 sat_scVSP_entry() //  [R1]
         { []
         }
     {offset
       cd995: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd996; else goto cd997;
       cd996: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd997: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scVSO::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scVSO::I64, 3)) goto ud998; else goto ud99b;
       ud998: // global
           if (%MO_S_Lt_W64(_scVSO::I64, 1)) goto ud999; else goto ud99a;
       ud999: // global
           if (%MO_S_Lt_W64(_scVSO::I64, 0)) goto cd98Z; else goto cd990;
       cd990: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud99a: // global
           if (%MO_S_Lt_W64(_scVSO::I64, 2)) goto cd991; else goto cd992;
       cd991: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd992: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud99b: // global
           if (%MO_S_Ge_W64(_scVSO::I64, 5)) goto cd98Z; else goto ud99c;
       cd98Z: // global
           R2 = _scVSO::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       ud99c: // global
           if (%MO_S_Lt_W64(_scVSO::I64, 4)) goto cd993; else goto cd994;
       cd993: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd994: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVSP_info" {
     sat_scVSP_info:
         const sat_scVSP_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+816;
 },
 sat_scVT4_entry() //  [R1]
         { []
         }
     {offset
       cd99t: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd99u; else goto cd99v;
       cd99u: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd99v: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scVT3::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scVT3::I64, 3)) goto ud99w; else goto ud99z;
       ud99w: // global
           if (%MO_S_Lt_W64(_scVT3::I64, 1)) goto ud99x; else goto ud99y;
       ud99x: // global
           if (%MO_S_Lt_W64(_scVT3::I64, 0)) goto cd99n; else goto cd99o;
       cd99o: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud99y: // global
           if (%MO_S_Lt_W64(_scVT3::I64, 2)) goto cd99p; else goto cd99q;
       cd99p: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd99q: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud99z: // global
           if (%MO_S_Ge_W64(_scVT3::I64, 5)) goto cd99n; else goto ud99A;
       cd99n: // global
           R2 = _scVT3::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       ud99A: // global
           if (%MO_S_Lt_W64(_scVT3::I64, 4)) goto cd99r; else goto cd99s;
       cd99r: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd99s: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVT4_info" {
     sat_scVT4_info:
         const sat_scVT4_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+816;
 },
 sat_scVTh_entry() //  [R1]
         { []
         }
     {offset
       cd9a7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd9a8; else goto cd9a9;
       cd9a8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9a9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_scVTb_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVTh_info" {
     sat_scVTh_info:
         const sat_scVTh_entry;
         const 8589934593;
         const 4294967311;
         const ScWiZ_srt+816;
 },
 sat_scVTf_entry() //  [R1]
         { []
         }
     {offset
       cd9am: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd9an; else goto cd9ao;
       cd9an: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9ao: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scVTe::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scVTe::I64, 3)) goto ud9ap; else goto ud9as;
       ud9ap: // global
           if (%MO_S_Lt_W64(_scVTe::I64, 1)) goto ud9aq; else goto ud9ar;
       ud9aq: // global
           if (%MO_S_Lt_W64(_scVTe::I64, 0)) goto cd9ag; else goto cd9ah;
       cd9ah: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud9ar: // global
           if (%MO_S_Lt_W64(_scVTe::I64, 2)) goto cd9ai; else goto cd9aj;
       cd9ai: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd9aj: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud9as: // global
           if (%MO_S_Ge_W64(_scVTe::I64, 5)) goto cd9ag; else goto ud9at;
       cd9ag: // global
           R2 = _scVTe::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       ud9at: // global
           if (%MO_S_Lt_W64(_scVTe::I64, 4)) goto cd9ak; else goto cd9al;
       cd9ak: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd9al: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVTf_info" {
     sat_scVTf_info:
         const sat_scVTf_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+816;
 },
 sat_scVTj_entry() //  [R1]
         { []
         }
     {offset
       cd9aH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd9aI; else goto cd9aJ;
       cd9aI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9aJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scVTi::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scVTi::I64, 3)) goto ud9aK; else goto ud9aN;
       ud9aK: // global
           if (%MO_S_Lt_W64(_scVTi::I64, 1)) goto ud9aL; else goto ud9aM;
       ud9aL: // global
           if (%MO_S_Lt_W64(_scVTi::I64, 0)) goto cd9aB; else goto cd9aC;
       cd9aC: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud9aM: // global
           if (%MO_S_Lt_W64(_scVTi::I64, 2)) goto cd9aD; else goto cd9aE;
       cd9aD: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd9aE: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud9aN: // global
           if (%MO_S_Ge_W64(_scVTi::I64, 5)) goto cd9aB; else goto ud9aO;
       cd9aB: // global
           R2 = _scVTi::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       ud9aO: // global
           if (%MO_S_Lt_W64(_scVTi::I64, 4)) goto cd9aF; else goto cd9aG;
       cd9aF: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd9aG: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVTj_info" {
     sat_scVTj_info:
         const sat_scVTj_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+816;
 },
 go_dn_scVTb_entry() //  [R1, R2]
         { []
         }
     {offset
       cd9aS: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cd9aW; else goto cd9aV;
       cd9aW: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd9aV: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto cd9aQ; else goto cd9aR;
       cd9aQ: // global
           _scVT9::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_scVTh_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _scVT9::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_scVTf_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cd9aR: // global
           I64[Hp - 80] = sat_scVTj_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _cd9aY::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _cd9aY::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_scVTb_info" {
     go_dn_scVTb_info:
         const go_dn_scVTb_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const ScWiZ_srt+816;
 },
 sat_scVTk_entry() //  [R1]
         { []
         }
     {offset
       cd9aZ: // global
           _scVTk::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd9b0; else goto cd9b1;
       cd9b1: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cd9b3; else goto cd9b2;
       cd9b3: // global
           HpAlloc = 24;
           goto cd9b0;
       cd9b0: // global
           R1 = _scVTk::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9b2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVTk::P64;
           _scVSs::I64 = I64[_scVTk::P64 + 24];
           _scVT9::I64 = _scVSs::I64 - I64[_scVTk::P64 + 16];
           I64[Hp - 16] = go_dn_scVTb_info;
           I64[Hp - 8] = _scVT9::I64;
           I64[Hp] = 1 - _scVT9::I64;
           R2 = _scVSs::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_scVTb_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVTk_info" {
     sat_scVTk_info:
         const sat_scVTk_entry;
         const 8589934592;
         const 4294967316;
         const ScWiZ_srt+816;
 },
 sat_scVT8_entry() //  [R1]
         { []
         }
     {offset
       cd9bg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd9bh; else goto cd9bi;
       cd9bh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9bi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scVT7::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scVT7::I64, 3)) goto ud9bj; else goto ud9bm;
       ud9bj: // global
           if (%MO_S_Lt_W64(_scVT7::I64, 1)) goto ud9bk; else goto ud9bl;
       ud9bk: // global
           if (%MO_S_Lt_W64(_scVT7::I64, 0)) goto cd9ba; else goto cd9bb;
       cd9bb: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud9bl: // global
           if (%MO_S_Lt_W64(_scVT7::I64, 2)) goto cd9bc; else goto cd9bd;
       cd9bc: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd9bd: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud9bm: // global
           if (%MO_S_Ge_W64(_scVT7::I64, 5)) goto cd9ba; else goto ud9bn;
       cd9ba: // global
           R2 = _scVT7::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       ud9bn: // global
           if (%MO_S_Lt_W64(_scVT7::I64, 4)) goto cd9be; else goto cd9bf;
       cd9be: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd9bf: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVT8_info" {
     sat_scVT8_info:
         const sat_scVT8_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+816;
 },
 sat_scVTn_entry() //  [R1]
         { []
         }
     {offset
       cd9bE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd9bF; else goto cd9bG;
       cd9bF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9bG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scVTm::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scVTm::I64, 3)) goto ud9bH; else goto ud9bK;
       ud9bH: // global
           if (%MO_S_Lt_W64(_scVTm::I64, 1)) goto ud9bI; else goto ud9bJ;
       ud9bI: // global
           if (%MO_S_Lt_W64(_scVTm::I64, 0)) goto cd9by; else goto cd9bz;
       cd9bz: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud9bJ: // global
           if (%MO_S_Lt_W64(_scVTm::I64, 2)) goto cd9bA; else goto cd9bB;
       cd9bA: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd9bB: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud9bK: // global
           if (%MO_S_Ge_W64(_scVTm::I64, 5)) goto cd9by; else goto ud9bL;
       cd9by: // global
           R2 = _scVTm::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       ud9bL: // global
           if (%MO_S_Lt_W64(_scVTm::I64, 4)) goto cd9bC; else goto cd9bD;
       cd9bC: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd9bD: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVTn_info" {
     sat_scVTn_info:
         const sat_scVTn_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+816;
 },
 sat_scVTz_entry() //  [R1]
         { []
         }
     {offset
       cd9ce: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd9cf; else goto cd9cg;
       cd9cf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9cg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_scVTt_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVTz_info" {
     sat_scVTz_info:
         const sat_scVTz_entry;
         const 8589934593;
         const 4294967311;
         const ScWiZ_srt+816;
 },
 sat_scVTx_entry() //  [R1]
         { []
         }
     {offset
       cd9ct: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd9cu; else goto cd9cv;
       cd9cu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9cv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scVTw::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scVTw::I64, 3)) goto ud9cw; else goto ud9cz;
       ud9cw: // global
           if (%MO_S_Lt_W64(_scVTw::I64, 1)) goto ud9cx; else goto ud9cy;
       ud9cx: // global
           if (%MO_S_Lt_W64(_scVTw::I64, 0)) goto cd9cn; else goto cd9co;
       cd9co: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud9cy: // global
           if (%MO_S_Lt_W64(_scVTw::I64, 2)) goto cd9cp; else goto cd9cq;
       cd9cp: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd9cq: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud9cz: // global
           if (%MO_S_Ge_W64(_scVTw::I64, 5)) goto cd9cn; else goto ud9cA;
       cd9cn: // global
           R2 = _scVTw::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       ud9cA: // global
           if (%MO_S_Lt_W64(_scVTw::I64, 4)) goto cd9cr; else goto cd9cs;
       cd9cr: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd9cs: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVTx_info" {
     sat_scVTx_info:
         const sat_scVTx_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+816;
 },
 sat_scVTB_entry() //  [R1]
         { []
         }
     {offset
       cd9cO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd9cP; else goto cd9cQ;
       cd9cP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9cQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scVTA::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scVTA::I64, 3)) goto ud9cR; else goto ud9cU;
       ud9cR: // global
           if (%MO_S_Lt_W64(_scVTA::I64, 1)) goto ud9cS; else goto ud9cT;
       ud9cS: // global
           if (%MO_S_Lt_W64(_scVTA::I64, 0)) goto cd9cI; else goto cd9cJ;
       cd9cJ: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud9cT: // global
           if (%MO_S_Lt_W64(_scVTA::I64, 2)) goto cd9cK; else goto cd9cL;
       cd9cK: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd9cL: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud9cU: // global
           if (%MO_S_Ge_W64(_scVTA::I64, 5)) goto cd9cI; else goto ud9cV;
       cd9cI: // global
           R2 = _scVTA::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       ud9cV: // global
           if (%MO_S_Lt_W64(_scVTA::I64, 4)) goto cd9cM; else goto cd9cN;
       cd9cM: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd9cN: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVTB_info" {
     sat_scVTB_info:
         const sat_scVTB_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+816;
 },
 go_up_scVTt_entry() //  [R1, R2]
         { []
         }
     {offset
       cd9cZ: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cd9d3; else goto cd9d2;
       cd9d3: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd9d2: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto cd9cX; else goto cd9cY;
       cd9cX: // global
           _scVTr::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_scVTz_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _scVTr::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_scVTx_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cd9cY: // global
           I64[Hp - 80] = sat_scVTB_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _cd9d5::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _cd9d5::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_scVTt_info" {
     go_up_scVTt_info:
         const go_up_scVTt_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const ScWiZ_srt+816;
 },
 sat_scVTC_entry() //  [R1]
         { []
         }
     {offset
       cd9d6: // global
           _scVTC::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd9d7; else goto cd9d8;
       cd9d8: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cd9da; else goto cd9d9;
       cd9da: // global
           HpAlloc = 24;
           goto cd9d7;
       cd9d7: // global
           R1 = _scVTC::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9d9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVTC::P64;
           _scVSs::I64 = I64[_scVTC::P64 + 24];
           _scVTr::I64 = _scVSs::I64 - I64[_scVTC::P64 + 16];
           I64[Hp - 16] = go_up_scVTt_info;
           I64[Hp - 8] = _scVTr::I64;
           I64[Hp] = 1 - _scVTr::I64;
           R2 = _scVSs::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_scVTt_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVTC_info" {
     sat_scVTC_info:
         const sat_scVTC_entry;
         const 8589934592;
         const 4294967316;
         const ScWiZ_srt+816;
 },
 sat_scVTq_entry() //  [R1]
         { []
         }
     {offset
       cd9dn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd9do; else goto cd9dp;
       cd9do: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9dp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scVTp::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scVTp::I64, 3)) goto ud9dq; else goto ud9dt;
       ud9dq: // global
           if (%MO_S_Lt_W64(_scVTp::I64, 1)) goto ud9dr; else goto ud9ds;
       ud9dr: // global
           if (%MO_S_Lt_W64(_scVTp::I64, 0)) goto cd9dh; else goto cd9di;
       cd9di: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud9ds: // global
           if (%MO_S_Lt_W64(_scVTp::I64, 2)) goto cd9dj; else goto cd9dk;
       cd9dj: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd9dk: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud9dt: // global
           if (%MO_S_Ge_W64(_scVTp::I64, 5)) goto cd9dh; else goto ud9du;
       cd9dh: // global
           R2 = _scVTp::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       ud9du: // global
           if (%MO_S_Lt_W64(_scVTp::I64, 4)) goto cd9dl; else goto cd9dm;
       cd9dl: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd9dm: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVTq_info" {
     sat_scVTq_info:
         const sat_scVTq_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+816;
 },
 sat_scVTF_entry() //  [R1]
         { []
         }
     {offset
       cd9dL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd9dM; else goto cd9dN;
       cd9dM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9dN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scVTE::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scVTE::I64, 3)) goto ud9dO; else goto ud9dR;
       ud9dO: // global
           if (%MO_S_Lt_W64(_scVTE::I64, 1)) goto ud9dP; else goto ud9dQ;
       ud9dP: // global
           if (%MO_S_Lt_W64(_scVTE::I64, 0)) goto cd9dF; else goto cd9dG;
       cd9dG: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud9dQ: // global
           if (%MO_S_Lt_W64(_scVTE::I64, 2)) goto cd9dH; else goto cd9dI;
       cd9dH: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd9dI: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud9dR: // global
           if (%MO_S_Ge_W64(_scVTE::I64, 5)) goto cd9dF; else goto ud9dS;
       cd9dF: // global
           R2 = _scVTE::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       ud9dS: // global
           if (%MO_S_Lt_W64(_scVTE::I64, 4)) goto cd9dJ; else goto cd9dK;
       cd9dJ: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd9dK: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVTF_info" {
     sat_scVTF_info:
         const sat_scVTF_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+816;
 },
 sat_scVTS_entry() //  [R1]
         { []
         }
     {offset
       cd9ep: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd9eq; else goto cd9er;
       cd9eq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9er: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_scVTM_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVTS_info" {
     sat_scVTS_info:
         const sat_scVTS_entry;
         const 8589934593;
         const 4294967311;
         const ScWiZ_srt+816;
 },
 sat_scVTQ_entry() //  [R1]
         { []
         }
     {offset
       cd9eE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd9eF; else goto cd9eG;
       cd9eF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9eG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scVTP::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scVTP::I64, 3)) goto ud9eH; else goto ud9eK;
       ud9eH: // global
           if (%MO_S_Lt_W64(_scVTP::I64, 1)) goto ud9eI; else goto ud9eJ;
       ud9eI: // global
           if (%MO_S_Lt_W64(_scVTP::I64, 0)) goto cd9ey; else goto cd9ez;
       cd9ez: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud9eJ: // global
           if (%MO_S_Lt_W64(_scVTP::I64, 2)) goto cd9eA; else goto cd9eB;
       cd9eA: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd9eB: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud9eK: // global
           if (%MO_S_Ge_W64(_scVTP::I64, 5)) goto cd9ey; else goto ud9eL;
       cd9ey: // global
           R2 = _scVTP::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       ud9eL: // global
           if (%MO_S_Lt_W64(_scVTP::I64, 4)) goto cd9eC; else goto cd9eD;
       cd9eC: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd9eD: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVTQ_info" {
     sat_scVTQ_info:
         const sat_scVTQ_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+816;
 },
 sat_scVTU_entry() //  [R1]
         { []
         }
     {offset
       cd9eZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd9f0; else goto cd9f1;
       cd9f0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9f1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scVTT::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scVTT::I64, 3)) goto ud9f2; else goto ud9f5;
       ud9f2: // global
           if (%MO_S_Lt_W64(_scVTT::I64, 1)) goto ud9f3; else goto ud9f4;
       ud9f3: // global
           if (%MO_S_Lt_W64(_scVTT::I64, 0)) goto cd9eT; else goto cd9eU;
       cd9eU: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud9f4: // global
           if (%MO_S_Lt_W64(_scVTT::I64, 2)) goto cd9eV; else goto cd9eW;
       cd9eV: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd9eW: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud9f5: // global
           if (%MO_S_Ge_W64(_scVTT::I64, 5)) goto cd9eT; else goto ud9f6;
       cd9eT: // global
           R2 = _scVTT::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       ud9f6: // global
           if (%MO_S_Lt_W64(_scVTT::I64, 4)) goto cd9eX; else goto cd9eY;
       cd9eX: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd9eY: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVTU_info" {
     sat_scVTU_info:
         const sat_scVTU_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+816;
 },
 go_dn_scVTM_entry() //  [R1, R2]
         { []
         }
     {offset
       cd9fa: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cd9fe; else goto cd9fd;
       cd9fe: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd9fd: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto cd9f8; else goto cd9f9;
       cd9f8: // global
           _scVTK::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_scVTS_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _scVTK::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_scVTQ_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cd9f9: // global
           I64[Hp - 80] = sat_scVTU_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _cd9fg::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _cd9fg::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_scVTM_info" {
     go_dn_scVTM_info:
         const go_dn_scVTM_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const ScWiZ_srt+816;
 },
 sat_scVTV_entry() //  [R1]
         { []
         }
     {offset
       cd9fh: // global
           _scVTV::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd9fi; else goto cd9fj;
       cd9fj: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cd9fl; else goto cd9fk;
       cd9fl: // global
           HpAlloc = 24;
           goto cd9fi;
       cd9fi: // global
           R1 = _scVTV::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9fk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVTV::P64;
           _scVSs::I64 = I64[_scVTV::P64 + 24];
           _scVTK::I64 = _scVSs::I64 - I64[_scVTV::P64 + 16];
           I64[Hp - 16] = go_dn_scVTM_info;
           I64[Hp - 8] = _scVTK::I64;
           I64[Hp] = 2 - _scVTK::I64;
           R2 = _scVSs::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_scVTM_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVTV_info" {
     sat_scVTV_info:
         const sat_scVTV_entry;
         const 8589934592;
         const 4294967316;
         const ScWiZ_srt+816;
 },
 sat_scVTJ_entry() //  [R1]
         { []
         }
     {offset
       cd9fy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd9fz; else goto cd9fA;
       cd9fz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9fA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scVTI::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scVTI::I64, 3)) goto ud9fB; else goto ud9fE;
       ud9fB: // global
           if (%MO_S_Lt_W64(_scVTI::I64, 1)) goto ud9fC; else goto ud9fD;
       ud9fC: // global
           if (%MO_S_Lt_W64(_scVTI::I64, 0)) goto cd9fs; else goto cd9ft;
       cd9ft: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud9fD: // global
           if (%MO_S_Lt_W64(_scVTI::I64, 2)) goto cd9fu; else goto cd9fv;
       cd9fu: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd9fv: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud9fE: // global
           if (%MO_S_Ge_W64(_scVTI::I64, 5)) goto cd9fs; else goto ud9fF;
       cd9fs: // global
           R2 = _scVTI::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       ud9fF: // global
           if (%MO_S_Lt_W64(_scVTI::I64, 4)) goto cd9fw; else goto cd9fx;
       cd9fw: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd9fx: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVTJ_info" {
     sat_scVTJ_info:
         const sat_scVTJ_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+816;
 },
 sat_scVTY_entry() //  [R1]
         { []
         }
     {offset
       cd9fW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd9fX; else goto cd9fY;
       cd9fX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9fY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scVTX::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scVTX::I64, 3)) goto ud9fZ; else goto ud9g2;
       ud9fZ: // global
           if (%MO_S_Lt_W64(_scVTX::I64, 1)) goto ud9g0; else goto ud9g1;
       ud9g0: // global
           if (%MO_S_Lt_W64(_scVTX::I64, 0)) goto cd9fQ; else goto cd9fR;
       cd9fR: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud9g1: // global
           if (%MO_S_Lt_W64(_scVTX::I64, 2)) goto cd9fS; else goto cd9fT;
       cd9fS: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd9fT: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud9g2: // global
           if (%MO_S_Ge_W64(_scVTX::I64, 5)) goto cd9fQ; else goto ud9g3;
       cd9fQ: // global
           R2 = _scVTX::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       ud9g3: // global
           if (%MO_S_Lt_W64(_scVTX::I64, 4)) goto cd9fU; else goto cd9fV;
       cd9fU: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd9fV: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVTY_info" {
     sat_scVTY_info:
         const sat_scVTY_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+816;
 },
 sat_scVUa_entry() //  [R1]
         { []
         }
     {offset
       cd9gw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd9gx; else goto cd9gy;
       cd9gx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9gy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_scVU4_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVUa_info" {
     sat_scVUa_info:
         const sat_scVUa_entry;
         const 8589934593;
         const 4294967311;
         const ScWiZ_srt+816;
 },
 sat_scVU8_entry() //  [R1]
         { []
         }
     {offset
       cd9gL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd9gM; else goto cd9gN;
       cd9gM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9gN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scVU7::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scVU7::I64, 3)) goto ud9gO; else goto ud9gR;
       ud9gO: // global
           if (%MO_S_Lt_W64(_scVU7::I64, 1)) goto ud9gP; else goto ud9gQ;
       ud9gP: // global
           if (%MO_S_Lt_W64(_scVU7::I64, 0)) goto cd9gF; else goto cd9gG;
       cd9gG: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud9gQ: // global
           if (%MO_S_Lt_W64(_scVU7::I64, 2)) goto cd9gH; else goto cd9gI;
       cd9gH: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd9gI: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud9gR: // global
           if (%MO_S_Ge_W64(_scVU7::I64, 5)) goto cd9gF; else goto ud9gS;
       cd9gF: // global
           R2 = _scVU7::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       ud9gS: // global
           if (%MO_S_Lt_W64(_scVU7::I64, 4)) goto cd9gJ; else goto cd9gK;
       cd9gJ: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd9gK: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVU8_info" {
     sat_scVU8_info:
         const sat_scVU8_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+816;
 },
 sat_scVUc_entry() //  [R1]
         { []
         }
     {offset
       cd9h6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd9h7; else goto cd9h8;
       cd9h7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9h8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scVUb::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scVUb::I64, 3)) goto ud9h9; else goto ud9hc;
       ud9h9: // global
           if (%MO_S_Lt_W64(_scVUb::I64, 1)) goto ud9ha; else goto ud9hb;
       ud9ha: // global
           if (%MO_S_Lt_W64(_scVUb::I64, 0)) goto cd9h0; else goto cd9h1;
       cd9h1: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud9hb: // global
           if (%MO_S_Lt_W64(_scVUb::I64, 2)) goto cd9h2; else goto cd9h3;
       cd9h2: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd9h3: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud9hc: // global
           if (%MO_S_Ge_W64(_scVUb::I64, 5)) goto cd9h0; else goto ud9hd;
       cd9h0: // global
           R2 = _scVUb::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       ud9hd: // global
           if (%MO_S_Lt_W64(_scVUb::I64, 4)) goto cd9h4; else goto cd9h5;
       cd9h4: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd9h5: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVUc_info" {
     sat_scVUc_info:
         const sat_scVUc_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+816;
 },
 go_up_scVU4_entry() //  [R1, R2]
         { []
         }
     {offset
       cd9hh: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cd9hl; else goto cd9hk;
       cd9hl: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd9hk: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto cd9hf; else goto cd9hg;
       cd9hf: // global
           _scVU2::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_scVUa_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _scVU2::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_scVU8_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cd9hg: // global
           I64[Hp - 80] = sat_scVUc_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _cd9hn::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _cd9hn::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_scVU4_info" {
     go_up_scVU4_info:
         const go_up_scVU4_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const ScWiZ_srt+816;
 },
 sat_scVUd_entry() //  [R1]
         { []
         }
     {offset
       cd9ho: // global
           _scVUd::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd9hp; else goto cd9hq;
       cd9hq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cd9hs; else goto cd9hr;
       cd9hs: // global
           HpAlloc = 24;
           goto cd9hp;
       cd9hp: // global
           R1 = _scVUd::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9hr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVUd::P64;
           _scVSs::I64 = I64[_scVUd::P64 + 24];
           _scVU2::I64 = _scVSs::I64 - I64[_scVUd::P64 + 16];
           I64[Hp - 16] = go_up_scVU4_info;
           I64[Hp - 8] = _scVU2::I64;
           I64[Hp] = 2 - _scVU2::I64;
           R2 = _scVSs::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_scVU4_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVUd_info" {
     sat_scVUd_info:
         const sat_scVUd_entry;
         const 8589934592;
         const 4294967316;
         const ScWiZ_srt+816;
 },
 sat_scVU1_entry() //  [R1]
         { []
         }
     {offset
       cd9hF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd9hG; else goto cd9hH;
       cd9hG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9hH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scVU0::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scVU0::I64, 3)) goto ud9hI; else goto ud9hL;
       ud9hI: // global
           if (%MO_S_Lt_W64(_scVU0::I64, 1)) goto ud9hJ; else goto ud9hK;
       ud9hJ: // global
           if (%MO_S_Lt_W64(_scVU0::I64, 0)) goto cd9hz; else goto cd9hA;
       cd9hA: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud9hK: // global
           if (%MO_S_Lt_W64(_scVU0::I64, 2)) goto cd9hB; else goto cd9hC;
       cd9hB: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd9hC: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud9hL: // global
           if (%MO_S_Ge_W64(_scVU0::I64, 5)) goto cd9hz; else goto ud9hM;
       cd9hz: // global
           R2 = _scVU0::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       ud9hM: // global
           if (%MO_S_Lt_W64(_scVU0::I64, 4)) goto cd9hD; else goto cd9hE;
       cd9hD: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd9hE: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVU1_info" {
     sat_scVU1_info:
         const sat_scVU1_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+816;
 },
 sat_scVUg_entry() //  [R1]
         { []
         }
     {offset
       cd9i3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd9i4; else goto cd9i5;
       cd9i4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9i5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scVUf::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scVUf::I64, 3)) goto ud9i6; else goto ud9i9;
       ud9i6: // global
           if (%MO_S_Lt_W64(_scVUf::I64, 1)) goto ud9i7; else goto ud9i8;
       ud9i7: // global
           if (%MO_S_Lt_W64(_scVUf::I64, 0)) goto cd9hX; else goto cd9hY;
       cd9hY: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud9i8: // global
           if (%MO_S_Lt_W64(_scVUf::I64, 2)) goto cd9hZ; else goto cd9i0;
       cd9hZ: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd9i0: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud9i9: // global
           if (%MO_S_Ge_W64(_scVUf::I64, 5)) goto cd9hX; else goto ud9ia;
       cd9hX: // global
           R2 = _scVUf::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       ud9ia: // global
           if (%MO_S_Lt_W64(_scVUf::I64, 4)) goto cd9i1; else goto cd9i2;
       cd9i1: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd9i2: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVUg_info" {
     sat_scVUg_info:
         const sat_scVUg_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+816;
 },
 sat_scVUt_entry() //  [R1]
         { []
         }
     {offset
       cd9iH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd9iI; else goto cd9iJ;
       cd9iI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9iJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_scVUn_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVUt_info" {
     sat_scVUt_info:
         const sat_scVUt_entry;
         const 8589934593;
         const 4294967311;
         const ScWiZ_srt+816;
 },
 sat_scVUr_entry() //  [R1]
         { []
         }
     {offset
       cd9iW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd9iX; else goto cd9iY;
       cd9iX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9iY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scVUq::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scVUq::I64, 3)) goto ud9iZ; else goto ud9j2;
       ud9iZ: // global
           if (%MO_S_Lt_W64(_scVUq::I64, 1)) goto ud9j0; else goto ud9j1;
       ud9j0: // global
           if (%MO_S_Lt_W64(_scVUq::I64, 0)) goto cd9iQ; else goto cd9iR;
       cd9iR: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud9j1: // global
           if (%MO_S_Lt_W64(_scVUq::I64, 2)) goto cd9iS; else goto cd9iT;
       cd9iS: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd9iT: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud9j2: // global
           if (%MO_S_Ge_W64(_scVUq::I64, 5)) goto cd9iQ; else goto ud9j3;
       cd9iQ: // global
           R2 = _scVUq::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       ud9j3: // global
           if (%MO_S_Lt_W64(_scVUq::I64, 4)) goto cd9iU; else goto cd9iV;
       cd9iU: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd9iV: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVUr_info" {
     sat_scVUr_info:
         const sat_scVUr_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+816;
 },
 sat_scVUv_entry() //  [R1]
         { []
         }
     {offset
       cd9jh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd9ji; else goto cd9jj;
       cd9ji: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9jj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scVUu::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scVUu::I64, 3)) goto ud9jk; else goto ud9jn;
       ud9jk: // global
           if (%MO_S_Lt_W64(_scVUu::I64, 1)) goto ud9jl; else goto ud9jm;
       ud9jl: // global
           if (%MO_S_Lt_W64(_scVUu::I64, 0)) goto cd9jb; else goto cd9jc;
       cd9jc: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud9jm: // global
           if (%MO_S_Lt_W64(_scVUu::I64, 2)) goto cd9jd; else goto cd9je;
       cd9jd: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd9je: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud9jn: // global
           if (%MO_S_Ge_W64(_scVUu::I64, 5)) goto cd9jb; else goto ud9jo;
       cd9jb: // global
           R2 = _scVUu::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       ud9jo: // global
           if (%MO_S_Lt_W64(_scVUu::I64, 4)) goto cd9jf; else goto cd9jg;
       cd9jf: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd9jg: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVUv_info" {
     sat_scVUv_info:
         const sat_scVUv_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+816;
 },
 go_dn_scVUn_entry() //  [R1, R2]
         { []
         }
     {offset
       cd9js: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cd9jw; else goto cd9jv;
       cd9jw: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd9jv: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto cd9jq; else goto cd9jr;
       cd9jq: // global
           _scVUl::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_scVUt_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _scVUl::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_scVUr_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cd9jr: // global
           I64[Hp - 80] = sat_scVUv_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _cd9jy::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _cd9jy::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_scVUn_info" {
     go_dn_scVUn_info:
         const go_dn_scVUn_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const ScWiZ_srt+816;
 },
 sat_scVUw_entry() //  [R1]
         { []
         }
     {offset
       cd9jz: // global
           _scVUw::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd9jA; else goto cd9jB;
       cd9jB: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cd9jD; else goto cd9jC;
       cd9jD: // global
           HpAlloc = 24;
           goto cd9jA;
       cd9jA: // global
           R1 = _scVUw::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9jC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVUw::P64;
           _scVSs::I64 = I64[_scVUw::P64 + 24];
           _scVUl::I64 = _scVSs::I64 - I64[_scVUw::P64 + 16];
           I64[Hp - 16] = go_dn_scVUn_info;
           I64[Hp - 8] = _scVUl::I64;
           I64[Hp] = 3 - _scVUl::I64;
           R2 = _scVSs::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_scVUn_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVUw_info" {
     sat_scVUw_info:
         const sat_scVUw_entry;
         const 8589934592;
         const 4294967316;
         const ScWiZ_srt+816;
 },
 sat_scVUk_entry() //  [R1]
         { []
         }
     {offset
       cd9jQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd9jR; else goto cd9jS;
       cd9jR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9jS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scVUj::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scVUj::I64, 3)) goto ud9jT; else goto ud9jW;
       ud9jT: // global
           if (%MO_S_Lt_W64(_scVUj::I64, 1)) goto ud9jU; else goto ud9jV;
       ud9jU: // global
           if (%MO_S_Lt_W64(_scVUj::I64, 0)) goto cd9jK; else goto cd9jL;
       cd9jL: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud9jV: // global
           if (%MO_S_Lt_W64(_scVUj::I64, 2)) goto cd9jM; else goto cd9jN;
       cd9jM: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd9jN: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud9jW: // global
           if (%MO_S_Ge_W64(_scVUj::I64, 5)) goto cd9jK; else goto ud9jX;
       cd9jK: // global
           R2 = _scVUj::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       ud9jX: // global
           if (%MO_S_Lt_W64(_scVUj::I64, 4)) goto cd9jO; else goto cd9jP;
       cd9jO: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd9jP: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVUk_info" {
     sat_scVUk_info:
         const sat_scVUk_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+816;
 },
 sat_scVUz_entry() //  [R1]
         { []
         }
     {offset
       cd9ke: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd9kf; else goto cd9kg;
       cd9kf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9kg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scVUy::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scVUy::I64, 3)) goto ud9kh; else goto ud9kk;
       ud9kh: // global
           if (%MO_S_Lt_W64(_scVUy::I64, 1)) goto ud9ki; else goto ud9kj;
       ud9ki: // global
           if (%MO_S_Lt_W64(_scVUy::I64, 0)) goto cd9k8; else goto cd9k9;
       cd9k9: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud9kj: // global
           if (%MO_S_Lt_W64(_scVUy::I64, 2)) goto cd9ka; else goto cd9kb;
       cd9ka: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd9kb: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud9kk: // global
           if (%MO_S_Ge_W64(_scVUy::I64, 5)) goto cd9k8; else goto ud9kl;
       cd9k8: // global
           R2 = _scVUy::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       ud9kl: // global
           if (%MO_S_Lt_W64(_scVUy::I64, 4)) goto cd9kc; else goto cd9kd;
       cd9kc: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd9kd: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVUz_info" {
     sat_scVUz_info:
         const sat_scVUz_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+816;
 },
 sat_scVUL_entry() //  [R1]
         { []
         }
     {offset
       cd9kO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd9kP; else goto cd9kQ;
       cd9kP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9kQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_scVUF_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVUL_info" {
     sat_scVUL_info:
         const sat_scVUL_entry;
         const 8589934593;
         const 4294967311;
         const ScWiZ_srt+816;
 },
 sat_scVUJ_entry() //  [R1]
         { []
         }
     {offset
       cd9l3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd9l4; else goto cd9l5;
       cd9l4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9l5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scVUI::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scVUI::I64, 3)) goto ud9l6; else goto ud9l9;
       ud9l6: // global
           if (%MO_S_Lt_W64(_scVUI::I64, 1)) goto ud9l7; else goto ud9l8;
       ud9l7: // global
           if (%MO_S_Lt_W64(_scVUI::I64, 0)) goto cd9kX; else goto cd9kY;
       cd9kY: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud9l8: // global
           if (%MO_S_Lt_W64(_scVUI::I64, 2)) goto cd9kZ; else goto cd9l0;
       cd9kZ: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd9l0: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud9l9: // global
           if (%MO_S_Ge_W64(_scVUI::I64, 5)) goto cd9kX; else goto ud9la;
       cd9kX: // global
           R2 = _scVUI::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       ud9la: // global
           if (%MO_S_Lt_W64(_scVUI::I64, 4)) goto cd9l1; else goto cd9l2;
       cd9l1: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd9l2: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVUJ_info" {
     sat_scVUJ_info:
         const sat_scVUJ_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+816;
 },
 sat_scVUN_entry() //  [R1]
         { []
         }
     {offset
       cd9lo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd9lp; else goto cd9lq;
       cd9lp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9lq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scVUM::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scVUM::I64, 3)) goto ud9lr; else goto ud9lu;
       ud9lr: // global
           if (%MO_S_Lt_W64(_scVUM::I64, 1)) goto ud9ls; else goto ud9lt;
       ud9ls: // global
           if (%MO_S_Lt_W64(_scVUM::I64, 0)) goto cd9li; else goto cd9lj;
       cd9lj: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud9lt: // global
           if (%MO_S_Lt_W64(_scVUM::I64, 2)) goto cd9lk; else goto cd9ll;
       cd9lk: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd9ll: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud9lu: // global
           if (%MO_S_Ge_W64(_scVUM::I64, 5)) goto cd9li; else goto ud9lv;
       cd9li: // global
           R2 = _scVUM::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       ud9lv: // global
           if (%MO_S_Lt_W64(_scVUM::I64, 4)) goto cd9lm; else goto cd9ln;
       cd9lm: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd9ln: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVUN_info" {
     sat_scVUN_info:
         const sat_scVUN_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+816;
 },
 go_up_scVUF_entry() //  [R1, R2]
         { []
         }
     {offset
       cd9lz: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cd9lD; else goto cd9lC;
       cd9lD: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd9lC: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto cd9lx; else goto cd9ly;
       cd9lx: // global
           _scVUD::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_scVUL_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _scVUD::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_scVUJ_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cd9ly: // global
           I64[Hp - 80] = sat_scVUN_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _cd9lF::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _cd9lF::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_scVUF_info" {
     go_up_scVUF_info:
         const go_up_scVUF_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const ScWiZ_srt+816;
 },
 sat_scVUO_entry() //  [R1]
         { []
         }
     {offset
       cd9lG: // global
           _scVUO::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd9lH; else goto cd9lI;
       cd9lI: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cd9lK; else goto cd9lJ;
       cd9lK: // global
           HpAlloc = 24;
           goto cd9lH;
       cd9lH: // global
           R1 = _scVUO::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9lJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVUO::P64;
           _scVSs::I64 = I64[_scVUO::P64 + 24];
           _scVUD::I64 = _scVSs::I64 - I64[_scVUO::P64 + 16];
           I64[Hp - 16] = go_up_scVUF_info;
           I64[Hp - 8] = _scVUD::I64;
           I64[Hp] = 3 - _scVUD::I64;
           R2 = _scVSs::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_scVUF_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVUO_info" {
     sat_scVUO_info:
         const sat_scVUO_entry;
         const 8589934592;
         const 4294967316;
         const ScWiZ_srt+816;
 },
 sat_scVUC_entry() //  [R1]
         { []
         }
     {offset
       cd9lX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd9lY; else goto cd9lZ;
       cd9lY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9lZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scVUB::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scVUB::I64, 3)) goto ud9m0; else goto ud9m3;
       ud9m0: // global
           if (%MO_S_Lt_W64(_scVUB::I64, 1)) goto ud9m1; else goto ud9m2;
       ud9m1: // global
           if (%MO_S_Lt_W64(_scVUB::I64, 0)) goto cd9lR; else goto cd9lS;
       cd9lS: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud9m2: // global
           if (%MO_S_Lt_W64(_scVUB::I64, 2)) goto cd9lT; else goto cd9lU;
       cd9lT: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd9lU: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud9m3: // global
           if (%MO_S_Ge_W64(_scVUB::I64, 5)) goto cd9lR; else goto ud9m4;
       cd9lR: // global
           R2 = _scVUB::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       ud9m4: // global
           if (%MO_S_Lt_W64(_scVUB::I64, 4)) goto cd9lV; else goto cd9lW;
       cd9lV: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd9lW: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVUC_info" {
     sat_scVUC_info:
         const sat_scVUC_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+816;
 },
 sat_scVUR_entry() //  [R1]
         { []
         }
     {offset
       cd9ml: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd9mm; else goto cd9mn;
       cd9mm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9mn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scVUQ::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scVUQ::I64, 3)) goto ud9mo; else goto ud9mr;
       ud9mo: // global
           if (%MO_S_Lt_W64(_scVUQ::I64, 1)) goto ud9mp; else goto ud9mq;
       ud9mp: // global
           if (%MO_S_Lt_W64(_scVUQ::I64, 0)) goto cd9mf; else goto cd9mg;
       cd9mg: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud9mq: // global
           if (%MO_S_Lt_W64(_scVUQ::I64, 2)) goto cd9mh; else goto cd9mi;
       cd9mh: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd9mi: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud9mr: // global
           if (%MO_S_Ge_W64(_scVUQ::I64, 5)) goto cd9mf; else goto ud9ms;
       cd9mf: // global
           R2 = _scVUQ::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       ud9ms: // global
           if (%MO_S_Lt_W64(_scVUQ::I64, 4)) goto cd9mj; else goto cd9mk;
       cd9mj: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd9mk: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVUR_info" {
     sat_scVUR_info:
         const sat_scVUR_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+816;
 },
 sat_scVV4_entry() //  [R1]
         { []
         }
     {offset
       cd9mZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd9n0; else goto cd9n1;
       cd9n0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9n1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_scVUY_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVV4_info" {
     sat_scVV4_info:
         const sat_scVV4_entry;
         const 8589934593;
         const 4294967311;
         const ScWiZ_srt+816;
 },
 sat_scVV2_entry() //  [R1]
         { []
         }
     {offset
       cd9ne: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd9nf; else goto cd9ng;
       cd9nf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9ng: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scVV1::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scVV1::I64, 3)) goto ud9nh; else goto ud9nk;
       ud9nh: // global
           if (%MO_S_Lt_W64(_scVV1::I64, 1)) goto ud9ni; else goto ud9nj;
       ud9ni: // global
           if (%MO_S_Lt_W64(_scVV1::I64, 0)) goto cd9n8; else goto cd9n9;
       cd9n9: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud9nj: // global
           if (%MO_S_Lt_W64(_scVV1::I64, 2)) goto cd9na; else goto cd9nb;
       cd9na: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd9nb: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud9nk: // global
           if (%MO_S_Ge_W64(_scVV1::I64, 5)) goto cd9n8; else goto ud9nl;
       cd9n8: // global
           R2 = _scVV1::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       ud9nl: // global
           if (%MO_S_Lt_W64(_scVV1::I64, 4)) goto cd9nc; else goto cd9nd;
       cd9nc: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd9nd: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVV2_info" {
     sat_scVV2_info:
         const sat_scVV2_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+816;
 },
 sat_scVV6_entry() //  [R1]
         { []
         }
     {offset
       cd9nz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd9nA; else goto cd9nB;
       cd9nA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9nB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scVV5::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scVV5::I64, 3)) goto ud9nC; else goto ud9nF;
       ud9nC: // global
           if (%MO_S_Lt_W64(_scVV5::I64, 1)) goto ud9nD; else goto ud9nE;
       ud9nD: // global
           if (%MO_S_Lt_W64(_scVV5::I64, 0)) goto cd9nt; else goto cd9nu;
       cd9nu: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud9nE: // global
           if (%MO_S_Lt_W64(_scVV5::I64, 2)) goto cd9nv; else goto cd9nw;
       cd9nv: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd9nw: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud9nF: // global
           if (%MO_S_Ge_W64(_scVV5::I64, 5)) goto cd9nt; else goto ud9nG;
       cd9nt: // global
           R2 = _scVV5::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       ud9nG: // global
           if (%MO_S_Lt_W64(_scVV5::I64, 4)) goto cd9nx; else goto cd9ny;
       cd9nx: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd9ny: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVV6_info" {
     sat_scVV6_info:
         const sat_scVV6_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+816;
 },
 go_dn_scVUY_entry() //  [R1, R2]
         { []
         }
     {offset
       cd9nK: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cd9nO; else goto cd9nN;
       cd9nO: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd9nN: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto cd9nI; else goto cd9nJ;
       cd9nI: // global
           _scVUW::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_scVV4_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _scVUW::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_scVV2_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cd9nJ: // global
           I64[Hp - 80] = sat_scVV6_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _cd9nQ::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _cd9nQ::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_scVUY_info" {
     go_dn_scVUY_info:
         const go_dn_scVUY_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const ScWiZ_srt+816;
 },
 sat_scVV7_entry() //  [R1]
         { []
         }
     {offset
       cd9nR: // global
           _scVV7::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd9nS; else goto cd9nT;
       cd9nT: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cd9nV; else goto cd9nU;
       cd9nV: // global
           HpAlloc = 24;
           goto cd9nS;
       cd9nS: // global
           R1 = _scVV7::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9nU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVV7::P64;
           _scVSs::I64 = I64[_scVV7::P64 + 24];
           _scVUW::I64 = _scVSs::I64 - I64[_scVV7::P64 + 16];
           I64[Hp - 16] = go_dn_scVUY_info;
           I64[Hp - 8] = _scVUW::I64;
           I64[Hp] = 4 - _scVUW::I64;
           R2 = _scVSs::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_scVUY_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVV7_info" {
     sat_scVV7_info:
         const sat_scVV7_entry;
         const 8589934592;
         const 4294967316;
         const ScWiZ_srt+816;
 },
 sat_scVUV_entry() //  [R1]
         { []
         }
     {offset
       cd9o8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd9o9; else goto cd9oa;
       cd9o9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9oa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scVUU::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scVUU::I64, 3)) goto ud9ob; else goto ud9oe;
       ud9ob: // global
           if (%MO_S_Lt_W64(_scVUU::I64, 1)) goto ud9oc; else goto ud9od;
       ud9oc: // global
           if (%MO_S_Lt_W64(_scVUU::I64, 0)) goto cd9o2; else goto cd9o3;
       cd9o3: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud9od: // global
           if (%MO_S_Lt_W64(_scVUU::I64, 2)) goto cd9o4; else goto cd9o5;
       cd9o4: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd9o5: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud9oe: // global
           if (%MO_S_Ge_W64(_scVUU::I64, 5)) goto cd9o2; else goto ud9of;
       cd9o2: // global
           R2 = _scVUU::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       ud9of: // global
           if (%MO_S_Lt_W64(_scVUU::I64, 4)) goto cd9o6; else goto cd9o7;
       cd9o6: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd9o7: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVUV_info" {
     sat_scVUV_info:
         const sat_scVUV_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+816;
 },
 sat_scVVa_entry() //  [R1]
         { []
         }
     {offset
       cd9ow: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd9ox; else goto cd9oy;
       cd9ox: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9oy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scVV9::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scVV9::I64, 3)) goto ud9oz; else goto ud9oC;
       ud9oz: // global
           if (%MO_S_Lt_W64(_scVV9::I64, 1)) goto ud9oA; else goto ud9oB;
       ud9oA: // global
           if (%MO_S_Lt_W64(_scVV9::I64, 0)) goto cd9oq; else goto cd9or;
       cd9or: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud9oB: // global
           if (%MO_S_Lt_W64(_scVV9::I64, 2)) goto cd9os; else goto cd9ot;
       cd9os: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd9ot: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud9oC: // global
           if (%MO_S_Ge_W64(_scVV9::I64, 5)) goto cd9oq; else goto ud9oD;
       cd9oq: // global
           R2 = _scVV9::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       ud9oD: // global
           if (%MO_S_Lt_W64(_scVV9::I64, 4)) goto cd9ou; else goto cd9ov;
       cd9ou: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd9ov: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVVa_info" {
     sat_scVVa_info:
         const sat_scVVa_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+816;
 },
 sat_scVVm_entry() //  [R1]
         { []
         }
     {offset
       cd9p6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd9p7; else goto cd9p8;
       cd9p7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9p8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_scVVg_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVVm_info" {
     sat_scVVm_info:
         const sat_scVVm_entry;
         const 8589934593;
         const 4294967311;
         const ScWiZ_srt+816;
 },
 sat_scVVk_entry() //  [R1]
         { []
         }
     {offset
       cd9pl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd9pm; else goto cd9pn;
       cd9pm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9pn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scVVj::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scVVj::I64, 3)) goto ud9po; else goto ud9pr;
       ud9po: // global
           if (%MO_S_Lt_W64(_scVVj::I64, 1)) goto ud9pp; else goto ud9pq;
       ud9pp: // global
           if (%MO_S_Lt_W64(_scVVj::I64, 0)) goto cd9pf; else goto cd9pg;
       cd9pg: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud9pq: // global
           if (%MO_S_Lt_W64(_scVVj::I64, 2)) goto cd9ph; else goto cd9pi;
       cd9ph: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd9pi: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud9pr: // global
           if (%MO_S_Ge_W64(_scVVj::I64, 5)) goto cd9pf; else goto ud9ps;
       cd9pf: // global
           R2 = _scVVj::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       ud9ps: // global
           if (%MO_S_Lt_W64(_scVVj::I64, 4)) goto cd9pj; else goto cd9pk;
       cd9pj: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd9pk: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVVk_info" {
     sat_scVVk_info:
         const sat_scVVk_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+816;
 },
 sat_scVVo_entry() //  [R1]
         { []
         }
     {offset
       cd9pG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd9pH; else goto cd9pI;
       cd9pH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9pI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scVVn::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scVVn::I64, 3)) goto ud9pJ; else goto ud9pM;
       ud9pJ: // global
           if (%MO_S_Lt_W64(_scVVn::I64, 1)) goto ud9pK; else goto ud9pL;
       ud9pK: // global
           if (%MO_S_Lt_W64(_scVVn::I64, 0)) goto cd9pA; else goto cd9pB;
       cd9pB: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud9pL: // global
           if (%MO_S_Lt_W64(_scVVn::I64, 2)) goto cd9pC; else goto cd9pD;
       cd9pC: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd9pD: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud9pM: // global
           if (%MO_S_Ge_W64(_scVVn::I64, 5)) goto cd9pA; else goto ud9pN;
       cd9pA: // global
           R2 = _scVVn::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       ud9pN: // global
           if (%MO_S_Lt_W64(_scVVn::I64, 4)) goto cd9pE; else goto cd9pF;
       cd9pE: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd9pF: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVVo_info" {
     sat_scVVo_info:
         const sat_scVVo_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+816;
 },
 go_up_scVVg_entry() //  [R1, R2]
         { []
         }
     {offset
       cd9pR: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cd9pV; else goto cd9pU;
       cd9pV: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd9pU: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto cd9pP; else goto cd9pQ;
       cd9pP: // global
           _scVVe::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_scVVm_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _scVVe::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_scVVk_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cd9pQ: // global
           I64[Hp - 80] = sat_scVVo_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _cd9pX::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _cd9pX::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_scVVg_info" {
     go_up_scVVg_info:
         const go_up_scVVg_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const ScWiZ_srt+816;
 },
 sat_scVVp_entry() //  [R1]
         { []
         }
     {offset
       cd9pY: // global
           _scVVp::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd9pZ; else goto cd9q0;
       cd9q0: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cd9q2; else goto cd9q1;
       cd9q2: // global
           HpAlloc = 24;
           goto cd9pZ;
       cd9pZ: // global
           R1 = _scVVp::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9q1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVVp::P64;
           _scVSs::I64 = I64[_scVVp::P64 + 24];
           _scVVe::I64 = _scVSs::I64 - I64[_scVVp::P64 + 16];
           I64[Hp - 16] = go_up_scVVg_info;
           I64[Hp - 8] = _scVVe::I64;
           I64[Hp] = 4 - _scVVe::I64;
           R2 = _scVSs::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_scVVg_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVVp_info" {
     sat_scVVp_info:
         const sat_scVVp_entry;
         const 8589934592;
         const 4294967316;
         const ScWiZ_srt+816;
 },
 sat_scVVd_entry() //  [R1]
         { []
         }
     {offset
       cd9qf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd9qg; else goto cd9qh;
       cd9qg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9qh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scVVc::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scVVc::I64, 3)) goto ud9qi; else goto ud9ql;
       ud9qi: // global
           if (%MO_S_Lt_W64(_scVVc::I64, 1)) goto ud9qj; else goto ud9qk;
       ud9qj: // global
           if (%MO_S_Lt_W64(_scVVc::I64, 0)) goto cd9q9; else goto cd9qa;
       cd9qa: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud9qk: // global
           if (%MO_S_Lt_W64(_scVVc::I64, 2)) goto cd9qb; else goto cd9qc;
       cd9qb: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd9qc: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud9ql: // global
           if (%MO_S_Ge_W64(_scVVc::I64, 5)) goto cd9q9; else goto ud9qm;
       cd9q9: // global
           R2 = _scVVc::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       ud9qm: // global
           if (%MO_S_Lt_W64(_scVVc::I64, 4)) goto cd9qd; else goto cd9qe;
       cd9qd: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd9qe: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVVd_info" {
     sat_scVVd_info:
         const sat_scVVd_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+816;
 },
 sat_scVVs_entry() //  [R1]
         { []
         }
     {offset
       cd9qD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd9qE; else goto cd9qF;
       cd9qE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9qF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scVVr::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scVVr::I64, 3)) goto ud9qG; else goto ud9qJ;
       ud9qG: // global
           if (%MO_S_Lt_W64(_scVVr::I64, 1)) goto ud9qH; else goto ud9qI;
       ud9qH: // global
           if (%MO_S_Lt_W64(_scVVr::I64, 0)) goto cd9qx; else goto cd9qy;
       cd9qy: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud9qI: // global
           if (%MO_S_Lt_W64(_scVVr::I64, 2)) goto cd9qz; else goto cd9qA;
       cd9qz: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd9qA: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ud9qJ: // global
           if (%MO_S_Ge_W64(_scVVr::I64, 5)) goto cd9qx; else goto ud9qK;
       cd9qx: // global
           R2 = _scVVr::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       ud9qK: // global
           if (%MO_S_Lt_W64(_scVVr::I64, 4)) goto cd9qB; else goto cd9qC;
       cd9qB: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cd9qC: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVVs_info" {
     sat_scVVs_info:
         const sat_scVVs_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+816;
 },
 GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFromThenTo_entry() //  [R2,
                                                               R3, R4]
         { []
         }
     {offset
       cd9qV: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cd9qW; else goto cd9qX;
       cd9qW: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFromThenTo_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cd9qX: // global
           I64[Sp - 24] = block_cd9qL_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ud9tH; else goto cd9qM;
       ud9tH: // global
           call _cd9qL(R1) args: 0, res: 0, upd: 0;
       cd9qM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFromThenTo_info" {
     GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFromThenTo_info:
         const GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFromThenTo_entry;
         const 0;
         const 4503603922337806;
         const 12884901911;
         const ScWiZ_srt+816;
 },
 _cd9qL() //  [R1]
         { []
         }
     {offset
       cd9qL: // global
           _scVSn::P64 = P64[Sp + 8];
           _cd9qU::P64 = R1 & 7;
           if (_cd9qU::P64 < 4) goto ud9tA; else goto ud9tC;
       ud9tA: // global
           if (_cd9qU::P64 < 3) goto ud9tB; else goto cd9qR;
       ud9tB: // global
           if (_cd9qU::P64 < 2) goto cd9qP; else goto cd9qQ;
       cd9qP: // global
           _scVSq::I64 = 0;
           goto scVSp;
       cd9qQ: // global
           _scVSq::I64 = 1;
           goto scVSp;
       cd9qR: // global
           _scVSq::I64 = 2;
           goto scVSp;
       ud9tC: // global
           if (_cd9qU::P64 < 5) goto cd9qS; else goto cd9qT;
       cd9qS: // global
           _scVSq::I64 = 3;
           goto scVSp;
       cd9qT: // global
           _scVSq::I64 = 4;
           goto scVSp;
       scVSp: // global
           I64[Sp] = block_cd9qY_info;
           R1 = _scVSn::P64;
           I64[Sp + 8] = _scVSq::I64;
           if (R1 & 7 != 0) goto ud9tG; else goto cd9sT;
       ud9tG: // global
           call _cd9qY(R1) args: 0, res: 0, upd: 0;
       cd9sT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cd9qL_info" {
     block_cd9qL_info:
         const _cd9qL;
         const 2;
         const 4294967326;
         const ScWiZ_srt+816;
 },
 _cd9qY() //  [R1]
         { []
         }
     {offset
       cd9qY: // global
           _scVSo::P64 = P64[Sp + 16];
           _cd9tv::P64 = R1 & 7;
           if (_cd9tv::P64 < 4) goto ud9tD; else goto ud9tF;
       ud9tD: // global
           if (_cd9tv::P64 < 3) goto ud9tE; else goto cd9t7;
       ud9tE: // global
           if (_cd9tv::P64 < 2) goto cd9sZ; else goto cd9t3;
       cd9sZ: // global
           _scVSs::I64 = 0;
           goto scVSr;
       cd9t3: // global
           _scVSs::I64 = 1;
           goto scVSr;
       cd9t7: // global
           _scVSs::I64 = 2;
           goto scVSr;
       ud9tF: // global
           if (_cd9tv::P64 < 5) goto cd9tb; else goto cd9tf;
       cd9tb: // global
           _scVSs::I64 = 3;
           goto scVSr;
       cd9tf: // global
           _scVSs::I64 = 4;
           goto scVSr;
       scVSr: // global
           I64[Sp] = block_cd95g_info;
           R1 = _scVSo::P64;
           I64[Sp + 16] = _scVSs::I64;
           if (R1 & 7 != 0) goto ud9tI; else goto cd95h;
       ud9tI: // global
           call _cd95g(R1) args: 0, res: 0, upd: 0;
       cd95h: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cd9qY_info" {
     block_cd9qY_info:
         const _cd9qY;
         const 66;
         const 4294967326;
         const ScWiZ_srt+816;
 },
 _cd95g() //  [R1]
         { []
         }
     {offset
       cd95g: // global
           _scVSq::I64 = I64[Sp + 8];
           _scVSs::I64 = I64[Sp + 16];
           _cd9tw::P64 = R1 & 7;
           if (_cd9tw::P64 < 4) goto ud9tx; else goto ud9tz;
       ud9tx: // global
           if (_cd9tw::P64 < 3) goto ud9ty; else goto cd9rM;
       ud9ty: // global
           if (_cd9tw::P64 < 2) goto cd9r2; else goto cd9rp;
       cd9r2: // global
           Hp = Hp + 80;
           _scVSt::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cd9sz; else goto cd9r4;
       cd9r4: // global
           if (%MO_S_Lt_W64(_scVSs::I64,
                            _scVSq::I64)) goto cd9rf; else goto cd9ro;
       cd9rf: // global
           if (%MO_S_Le_W64(0, _scVSs::I64)) goto cd9r8; else goto cd9rd;
       cd9r8: // global
           I64[Hp - 72] = sat_scVSJ_info;
           I64[Hp - 56] = _scVSq::I64;
           I64[Hp - 48] = _scVSs::I64;
           I64[Hp - 40] = sat_scVSx_info;
           I64[Hp - 24] = _scVSq::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cd9rd: // global
           if (%MO_S_Gt_W64(0, _scVSq::I64)) goto cd9sQ; else goto cd9rb;
       cd9rb: // global
           I64[Hp - 72] = sat_scVSM_info;
           I64[Hp - 56] = _scVSq::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _cd9r9::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _cd9r9::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cd9ro: // global
           if (%MO_S_Ge_W64(0, _scVSs::I64)) goto cd9ri; else goto cd9rn;
       cd9ri: // global
           I64[Hp - 72] = sat_scVT1_info;
           I64[Hp - 56] = _scVSq::I64;
           I64[Hp - 48] = _scVSs::I64;
           I64[Hp - 40] = sat_scVSP_info;
           I64[Hp - 24] = _scVSq::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cd9rn: // global
           if (%MO_S_Lt_W64(0, _scVSq::I64)) goto cd9sQ; else goto cd9rl;
       cd9rl: // global
           I64[Hp - 72] = sat_scVT4_info;
           I64[Hp - 56] = _scVSq::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _cd9rj::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _cd9rj::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cd9rp: // global
           Hp = Hp + 80;
           _scVSt::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cd9sz; else goto cd9rr;
       cd9rr: // global
           if (%MO_S_Lt_W64(_scVSs::I64,
                            _scVSq::I64)) goto cd9rC; else goto cd9rL;
       cd9rC: // global
           if (%MO_S_Le_W64(1, _scVSs::I64)) goto cd9rv; else goto cd9rA;
       cd9rv: // global
           I64[Hp - 72] = sat_scVTk_info;
           I64[Hp - 56] = _scVSq::I64;
           I64[Hp - 48] = _scVSs::I64;
           I64[Hp - 40] = sat_scVT8_info;
           I64[Hp - 24] = _scVSq::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cd9rA: // global
           if (%MO_S_Gt_W64(1, _scVSq::I64)) goto cd9sQ; else goto cd9ry;
       cd9ry: // global
           I64[Hp - 72] = sat_scVTn_info;
           I64[Hp - 56] = _scVSq::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _cd9rw::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _cd9rw::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cd9rL: // global
           if (%MO_S_Ge_W64(1, _scVSs::I64)) goto cd9rF; else goto cd9rK;
       cd9rF: // global
           I64[Hp - 72] = sat_scVTC_info;
           I64[Hp - 56] = _scVSq::I64;
           I64[Hp - 48] = _scVSs::I64;
           I64[Hp - 40] = sat_scVTq_info;
           I64[Hp - 24] = _scVSq::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cd9rK: // global
           if (%MO_S_Lt_W64(1, _scVSq::I64)) goto cd9sQ; else goto cd9rI;
       cd9rI: // global
           I64[Hp - 72] = sat_scVTF_info;
           I64[Hp - 56] = _scVSq::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _cd9rG::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _cd9rG::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cd9rM: // global
           Hp = Hp + 80;
           _scVSt::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cd9sz; else goto cd9rO;
       cd9rO: // global
           if (%MO_S_Lt_W64(_scVSs::I64,
                            _scVSq::I64)) goto cd9rZ; else goto cd9s8;
       cd9rZ: // global
           if (%MO_S_Le_W64(2, _scVSs::I64)) goto cd9rS; else goto cd9rX;
       cd9rS: // global
           I64[Hp - 72] = sat_scVTV_info;
           I64[Hp - 56] = _scVSq::I64;
           I64[Hp - 48] = _scVSs::I64;
           I64[Hp - 40] = sat_scVTJ_info;
           I64[Hp - 24] = _scVSq::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cd9rX: // global
           if (%MO_S_Gt_W64(2, _scVSq::I64)) goto cd9sQ; else goto cd9rV;
       cd9rV: // global
           I64[Hp - 72] = sat_scVTY_info;
           I64[Hp - 56] = _scVSq::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _cd9rT::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _cd9rT::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cd9s8: // global
           if (%MO_S_Ge_W64(2, _scVSs::I64)) goto cd9s2; else goto cd9s7;
       cd9s2: // global
           I64[Hp - 72] = sat_scVUd_info;
           I64[Hp - 56] = _scVSq::I64;
           I64[Hp - 48] = _scVSs::I64;
           I64[Hp - 40] = sat_scVU1_info;
           I64[Hp - 24] = _scVSq::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cd9s7: // global
           if (%MO_S_Lt_W64(2, _scVSq::I64)) goto cd9sQ; else goto cd9s5;
       cd9s5: // global
           I64[Hp - 72] = sat_scVUg_info;
           I64[Hp - 56] = _scVSq::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _cd9s3::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _cd9s3::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ud9tz: // global
           if (_cd9tw::P64 < 5) goto cd9s9; else goto cd9sw;
       cd9s9: // global
           Hp = Hp + 80;
           _scVSt::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cd9sz; else goto cd9sb;
       cd9sb: // global
           if (%MO_S_Lt_W64(_scVSs::I64,
                            _scVSq::I64)) goto cd9sm; else goto cd9sv;
       cd9sm: // global
           if (%MO_S_Le_W64(3, _scVSs::I64)) goto cd9sf; else goto cd9sk;
       cd9sf: // global
           I64[Hp - 72] = sat_scVUw_info;
           I64[Hp - 56] = _scVSq::I64;
           I64[Hp - 48] = _scVSs::I64;
           I64[Hp - 40] = sat_scVUk_info;
           I64[Hp - 24] = _scVSq::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cd9sk: // global
           if (%MO_S_Gt_W64(3, _scVSq::I64)) goto cd9sQ; else goto cd9si;
       cd9si: // global
           I64[Hp - 72] = sat_scVUz_info;
           I64[Hp - 56] = _scVSq::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _cd9sg::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _cd9sg::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cd9sv: // global
           if (%MO_S_Ge_W64(3, _scVSs::I64)) goto cd9sp; else goto cd9su;
       cd9sp: // global
           I64[Hp - 72] = sat_scVUO_info;
           I64[Hp - 56] = _scVSq::I64;
           I64[Hp - 48] = _scVSs::I64;
           I64[Hp - 40] = sat_scVUC_info;
           I64[Hp - 24] = _scVSq::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cd9su: // global
           if (%MO_S_Lt_W64(3, _scVSq::I64)) goto cd9sQ; else goto cd9ss;
       cd9ss: // global
           I64[Hp - 72] = sat_scVUR_info;
           I64[Hp - 56] = _scVSq::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _cd9sq::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _cd9sq::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cd9sw: // global
           Hp = Hp + 80;
           _scVSt::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cd9sz; else goto cd9sy;
       cd9sz: // global
           HpAlloc = 80;
           R1 = _scVSt::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cd9sy: // global
           if (%MO_S_Lt_W64(_scVSs::I64,
                            _scVSq::I64)) goto cd9sJ; else goto cd9sS;
       cd9sJ: // global
           if (%MO_S_Le_W64(4, _scVSs::I64)) goto cd9sC; else goto cd9sH;
       cd9sC: // global
           I64[Hp - 72] = sat_scVV7_info;
           I64[Hp - 56] = _scVSq::I64;
           I64[Hp - 48] = _scVSs::I64;
           I64[Hp - 40] = sat_scVUV_info;
           I64[Hp - 24] = _scVSq::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cd9sH: // global
           if (%MO_S_Gt_W64(4, _scVSq::I64)) goto cd9sQ; else goto cd9sF;
       cd9sF: // global
           I64[Hp - 72] = sat_scVVa_info;
           I64[Hp - 56] = _scVSq::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _cd9sD::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _cd9sD::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cd9sS: // global
           if (%MO_S_Ge_W64(4, _scVSs::I64)) goto cd9sM; else goto cd9sR;
       cd9sM: // global
           I64[Hp - 72] = sat_scVVp_info;
           I64[Hp - 56] = _scVSq::I64;
           I64[Hp - 48] = _scVSs::I64;
           I64[Hp - 40] = sat_scVVd_info;
           I64[Hp - 24] = _scVSq::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cd9sR: // global
           if (%MO_S_Lt_W64(4, _scVSq::I64)) goto cd9sQ; else goto cd9sP;
       cd9sQ: // global
           Hp = Hp - 80;
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cd9sP: // global
           I64[Hp - 72] = sat_scVVs_info;
           I64[Hp - 56] = _scVSq::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _cd9sN::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _cd9sN::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd95g_info" {
     block_cd95g_info:
         const _cd95g;
         const 194;
         const 4294967326;
         const ScWiZ_srt+816;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:59.226399711 UTC

[section ""data" . GHC.RTS.Flags.$fEnumGiveGCStats_closure" {
     GHC.RTS.Flags.$fEnumGiveGCStats_closure:
         const GHC.Enum.C:Enum_con_info;
         const GHC.RTS.Flags.$fEnumGiveGCStats_$csucc_closure+1;
         const GHC.RTS.Flags.$fEnumGiveGCStats_$cpred_closure+1;
         const GHC.RTS.Flags.$fEnumGiveGCStats_$ctoEnum_closure+1;
         const GHC.RTS.Flags.$fEnumGiveGCStats_$cfromEnum_closure+1;
         const GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFrom_closure+1;
         const GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFromThen_closure+2;
         const GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFromTo_closure+2;
         const GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFromThenTo_closure+3;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:59.228962568 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoHeapProfile13_closure" {
     GHC.RTS.Flags.$fEnumDoHeapProfile13_closure:
         const GHC.RTS.Flags.$fEnumDoHeapProfile13_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fEnumDoHeapProfile13_entry() //  [R1]
         { []
         }
     {offset
       cd9Eb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd9Ec; else goto cd9Ed;
       cd9Ec: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9Ed: // global
           (_cd9E8::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cd9E8::I64 == 0) goto cd9Ea; else goto cd9E9;
       cd9Ea: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cd9E9: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cd9E8::I64;
           R2 = 3;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoHeapProfile13_info" {
     GHC.RTS.Flags.$fEnumDoHeapProfile13_info:
         const GHC.RTS.Flags.$fEnumDoHeapProfile13_entry;
         const 0;
         const 4294967317;
         const ScWiZ_srt+984;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:59.233038987 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoHeapProfile15_closure" {
     GHC.RTS.Flags.$fEnumDoHeapProfile15_closure:
         const GHC.RTS.Flags.$fEnumDoHeapProfile15_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fEnumDoHeapProfile15_entry() //  [R1]
         { []
         }
     {offset
       cd9Er: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd9Es; else goto cd9Et;
       cd9Es: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9Et: // global
           (_cd9Eo::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cd9Eo::I64 == 0) goto cd9Eq; else goto cd9Ep;
       cd9Eq: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cd9Ep: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cd9Eo::I64;
           R2 = 9;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoHeapProfile15_info" {
     GHC.RTS.Flags.$fEnumDoHeapProfile15_info:
         const GHC.RTS.Flags.$fEnumDoHeapProfile15_entry;
         const 0;
         const 4294967317;
         const ScWiZ_srt+984;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:59.237759884 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoHeapProfile_$csucc_closure" {
     GHC.RTS.Flags.$fEnumDoHeapProfile_$csucc_closure:
         const GHC.RTS.Flags.$fEnumDoHeapProfile_$csucc_info;
         const 0;
 },
 GHC.RTS.Flags.$fEnumDoHeapProfile_$csucc_entry() //  [R2]
         { []
         }
     {offset
       cd9ES: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd9ET; else goto cd9EU;
       cd9ET: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoHeapProfile_$csucc_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd9EU: // global
           I64[Sp - 8] = block_cd9EF_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud9Fj; else goto cd9EG;
       ud9Fj: // global
           call _cd9EF(R1) args: 0, res: 0, upd: 0;
       cd9EG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoHeapProfile_$csucc_info" {
     GHC.RTS.Flags.$fEnumDoHeapProfile_$csucc_info:
         const GHC.RTS.Flags.$fEnumDoHeapProfile_$csucc_entry;
         const 0;
         const 30064771086;
         const 4294967301;
         const ScWiZ_srt+992;
 },
 _cd9EF() //  [R1]
         { []
         }
     {offset
       cd9EF: // global
           switch [0 .. 7] (%MO_UU_Conv_W32_W64(I32[I64[R1 - 1] + 20])) {
               case 0 : goto cd9EJ;
               case 1 : goto cd9EK;
               case 2 : goto cd9EL;
               case 3 : goto cd9EM;
               case 4 : goto cd9EN;
               case 5 : goto cd9EO;
               case 6 : goto cd9EP;
               case 7 : goto cd9EQ;
           }
       cd9EQ: // global
           R1 = GHC.RTS.Flags.$fEnumDoHeapProfile15_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cd9EP: // global
           R1 = GHC.RTS.Flags.HeapByClosureType_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cd9EO: // global
           R1 = GHC.RTS.Flags.HeapByLDV_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cd9EN: // global
           R1 = GHC.RTS.Flags.HeapByRetainer_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cd9EM: // global
           R1 = GHC.RTS.Flags.HeapByType_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cd9EL: // global
           R1 = GHC.RTS.Flags.$fEnumDoHeapProfile13_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cd9EK: // global
           R1 = GHC.RTS.Flags.HeapByMod_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cd9EJ: // global
           R1 = GHC.RTS.Flags.HeapByCCS_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd9EF_info" {
     block_cd9EF_info:
         const _cd9EF;
         const 0;
         const 21474836510;
         const ScWiZ_srt+992;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:59.245812315 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoHeapProfile_go7_closure" {
     GHC.RTS.Flags.$fEnumDoHeapProfile_go7_closure:
         const GHC.RTS.Flags.$fEnumDoHeapProfile_go7_info;
         const 0;
 },
 sat_scVVB_entry() //  [R1]
         { []
         }
     {offset
       cd9FQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd9FR; else goto cd9FS;
       cd9FR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9FS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scVVz::I64 = I64[R1 + 16];
           if (_scVVz::I64 != 0) goto cd9FO; else goto cd9FP;
       cd9FO: // global
           R2 = _scVVz::I64 + 1;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumDoHeapProfile_go7_entry(R2) args: 24, res: 0, upd: 24;
       cd9FP: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVVB_info" {
     sat_scVVB_info:
         const sat_scVVB_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1016;
 },
 sat_scVVy_entry() //  [R1]
         { []
         }
     {offset
       cd9FZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd9G0; else goto cd9G1;
       cd9G0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9G1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVVy_info" {
     sat_scVVy_info:
         const sat_scVVy_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1024;
 },
 GHC.RTS.Flags.$fEnumDoHeapProfile_go7_entry() //  [R2]
         { []
         }
     {offset
       cd9G3: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cd9G7; else goto cd9G6;
       cd9G7: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoHeapProfile_go7_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd9G6: // global
           I64[Hp - 64] = sat_scVVB_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_scVVy_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoHeapProfile_go7_info" {
     GHC.RTS.Flags.$fEnumDoHeapProfile_go7_info:
         const GHC.RTS.Flags.$fEnumDoHeapProfile_go7_entry;
         const 0;
         const 12884901902;
         const 4294967300;
         const ScWiZ_srt+1016;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:59.253787101 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoHeapProfile_go6_closure" {
     GHC.RTS.Flags.$fEnumDoHeapProfile_go6_closure:
         const GHC.RTS.Flags.$fEnumDoHeapProfile_go6_info;
         const 0;
 },
 sat_scVVG_entry() //  [R1]
         { []
         }
     {offset
       cd9GA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd9GB; else goto cd9GC;
       cd9GB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9GC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scVVE::I64 = I64[R1 + 16];
           if (_scVVE::I64 != 1) goto cd9Gy; else goto cd9Gz;
       cd9Gy: // global
           R2 = _scVVE::I64 + 1;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumDoHeapProfile_go6_entry(R2) args: 24, res: 0, upd: 24;
       cd9Gz: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVVG_info" {
     sat_scVVG_info:
         const sat_scVVG_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1032;
 },
 sat_scVVD_entry() //  [R1]
         { []
         }
     {offset
       cd9GJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd9GK; else goto cd9GL;
       cd9GK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9GL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVVD_info" {
     sat_scVVD_info:
         const sat_scVVD_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1024;
 },
 GHC.RTS.Flags.$fEnumDoHeapProfile_go6_entry() //  [R2]
         { []
         }
     {offset
       cd9GN: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cd9GR; else goto cd9GQ;
       cd9GR: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoHeapProfile_go6_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd9GQ: // global
           I64[Hp - 64] = sat_scVVG_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_scVVD_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoHeapProfile_go6_info" {
     GHC.RTS.Flags.$fEnumDoHeapProfile_go6_info:
         const GHC.RTS.Flags.$fEnumDoHeapProfile_go6_entry;
         const 0;
         const 12884901902;
         const 4294967300;
         const ScWiZ_srt+1024;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:59.261834027 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoHeapProfile_go5_closure" {
     GHC.RTS.Flags.$fEnumDoHeapProfile_go5_closure:
         const GHC.RTS.Flags.$fEnumDoHeapProfile_go5_info;
         const 0;
 },
 sat_scVVL_entry() //  [R1]
         { []
         }
     {offset
       cd9Hk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd9Hl; else goto cd9Hm;
       cd9Hl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9Hm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scVVJ::I64 = I64[R1 + 16];
           if (_scVVJ::I64 != 2) goto cd9Hi; else goto cd9Hj;
       cd9Hi: // global
           R2 = _scVVJ::I64 + 1;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumDoHeapProfile_go5_entry(R2) args: 24, res: 0, upd: 24;
       cd9Hj: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVVL_info" {
     sat_scVVL_info:
         const sat_scVVL_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1040;
 },
 sat_scVVI_entry() //  [R1]
         { []
         }
     {offset
       cd9Ht: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd9Hu; else goto cd9Hv;
       cd9Hu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9Hv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVVI_info" {
     sat_scVVI_info:
         const sat_scVVI_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1024;
 },
 GHC.RTS.Flags.$fEnumDoHeapProfile_go5_entry() //  [R2]
         { []
         }
     {offset
       cd9Hx: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cd9HB; else goto cd9HA;
       cd9HB: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoHeapProfile_go5_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd9HA: // global
           I64[Hp - 64] = sat_scVVL_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_scVVI_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoHeapProfile_go5_info" {
     GHC.RTS.Flags.$fEnumDoHeapProfile_go5_info:
         const GHC.RTS.Flags.$fEnumDoHeapProfile_go5_entry;
         const 0;
         const 21474836494;
         const 4294967300;
         const ScWiZ_srt+1024;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:59.269816448 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoHeapProfile_go4_closure" {
     GHC.RTS.Flags.$fEnumDoHeapProfile_go4_closure:
         const GHC.RTS.Flags.$fEnumDoHeapProfile_go4_info;
         const 0;
 },
 sat_scVVQ_entry() //  [R1]
         { []
         }
     {offset
       cd9I4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd9I5; else goto cd9I6;
       cd9I5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9I6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scVVO::I64 = I64[R1 + 16];
           if (_scVVO::I64 != 4) goto cd9I2; else goto cd9I3;
       cd9I2: // global
           R2 = _scVVO::I64 + 1;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumDoHeapProfile_go4_entry(R2) args: 24, res: 0, upd: 24;
       cd9I3: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVVQ_info" {
     sat_scVVQ_info:
         const sat_scVVQ_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1048;
 },
 sat_scVVN_entry() //  [R1]
         { []
         }
     {offset
       cd9Id: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd9Ie; else goto cd9If;
       cd9Ie: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9If: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVVN_info" {
     sat_scVVN_info:
         const sat_scVVN_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1024;
 },
 GHC.RTS.Flags.$fEnumDoHeapProfile_go4_entry() //  [R2]
         { []
         }
     {offset
       cd9Ih: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cd9Il; else goto cd9Ik;
       cd9Il: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoHeapProfile_go4_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd9Ik: // global
           I64[Hp - 64] = sat_scVVQ_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_scVVN_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoHeapProfile_go4_info" {
     GHC.RTS.Flags.$fEnumDoHeapProfile_go4_info:
         const GHC.RTS.Flags.$fEnumDoHeapProfile_go4_entry;
         const 0;
         const 38654705678;
         const 4294967300;
         const ScWiZ_srt+1024;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:59.278639931 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoHeapProfile_go3_closure" {
     GHC.RTS.Flags.$fEnumDoHeapProfile_go3_closure:
         const GHC.RTS.Flags.$fEnumDoHeapProfile_go3_info;
         const 0;
 },
 sat_scVVV_entry() //  [R1]
         { []
         }
     {offset
       cd9IO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd9IP; else goto cd9IQ;
       cd9IP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9IQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scVVT::I64 = I64[R1 + 16];
           if (_scVVT::I64 != 5) goto cd9IM; else goto cd9IN;
       cd9IM: // global
           R2 = _scVVT::I64 + 1;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumDoHeapProfile_go3_entry(R2) args: 24, res: 0, upd: 24;
       cd9IN: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVVV_info" {
     sat_scVVV_info:
         const sat_scVVV_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1056;
 },
 sat_scVVS_entry() //  [R1]
         { []
         }
     {offset
       cd9IX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd9IY; else goto cd9IZ;
       cd9IY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9IZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVVS_info" {
     sat_scVVS_info:
         const sat_scVVS_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1024;
 },
 GHC.RTS.Flags.$fEnumDoHeapProfile_go3_entry() //  [R2]
         { []
         }
     {offset
       cd9J1: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cd9J5; else goto cd9J4;
       cd9J5: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoHeapProfile_go3_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd9J4: // global
           I64[Hp - 64] = sat_scVVV_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_scVVS_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoHeapProfile_go3_info" {
     GHC.RTS.Flags.$fEnumDoHeapProfile_go3_info:
         const GHC.RTS.Flags.$fEnumDoHeapProfile_go3_entry;
         const 0;
         const 73014444046;
         const 4294967300;
         const ScWiZ_srt+1024;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:59.287752389 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoHeapProfile_go2_closure" {
     GHC.RTS.Flags.$fEnumDoHeapProfile_go2_closure:
         const GHC.RTS.Flags.$fEnumDoHeapProfile_go2_info;
         const 0;
 },
 sat_scVW0_entry() //  [R1]
         { []
         }
     {offset
       cd9Jy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd9Jz; else goto cd9JA;
       cd9Jz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9JA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scVVY::I64 = I64[R1 + 16];
           if (_scVVY::I64 != 6) goto cd9Jw; else goto cd9Jx;
       cd9Jw: // global
           R2 = _scVVY::I64 + 1;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumDoHeapProfile_go2_entry(R2) args: 24, res: 0, upd: 24;
       cd9Jx: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVW0_info" {
     sat_scVW0_info:
         const sat_scVW0_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1064;
 },
 sat_scVVX_entry() //  [R1]
         { []
         }
     {offset
       cd9JH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd9JI; else goto cd9JJ;
       cd9JI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9JJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVVX_info" {
     sat_scVVX_info:
         const sat_scVVX_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1024;
 },
 GHC.RTS.Flags.$fEnumDoHeapProfile_go2_entry() //  [R2]
         { []
         }
     {offset
       cd9JL: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cd9JP; else goto cd9JO;
       cd9JP: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoHeapProfile_go2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd9JO: // global
           I64[Hp - 64] = sat_scVW0_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_scVVX_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoHeapProfile_go2_info" {
     GHC.RTS.Flags.$fEnumDoHeapProfile_go2_info:
         const GHC.RTS.Flags.$fEnumDoHeapProfile_go2_entry;
         const 0;
         const 141733920782;
         const 4294967300;
         const ScWiZ_srt+1024;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:59.295830006 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoHeapProfile_go1_closure" {
     GHC.RTS.Flags.$fEnumDoHeapProfile_go1_closure:
         const GHC.RTS.Flags.$fEnumDoHeapProfile_go1_info;
         const 0;
 },
 sat_scVW5_entry() //  [R1]
         { []
         }
     {offset
       cd9Ki: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd9Kj; else goto cd9Kk;
       cd9Kj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9Kk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scVW3::I64 = I64[R1 + 16];
           if (_scVW3::I64 != 7) goto cd9Kg; else goto cd9Kh;
       cd9Kg: // global
           R2 = _scVW3::I64 + 1;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumDoHeapProfile_go1_entry(R2) args: 24, res: 0, upd: 24;
       cd9Kh: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVW5_info" {
     sat_scVW5_info:
         const sat_scVW5_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1072;
 },
 sat_scVW2_entry() //  [R1]
         { []
         }
     {offset
       cd9Kr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd9Ks; else goto cd9Kt;
       cd9Ks: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9Kt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVW2_info" {
     sat_scVW2_info:
         const sat_scVW2_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1024;
 },
 GHC.RTS.Flags.$fEnumDoHeapProfile_go1_entry() //  [R2]
         { []
         }
     {offset
       cd9Kv: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cd9Kz; else goto cd9Ky;
       cd9Kz: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoHeapProfile_go1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd9Ky: // global
           I64[Hp - 64] = sat_scVW5_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_scVW2_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoHeapProfile_go1_info" {
     GHC.RTS.Flags.$fEnumDoHeapProfile_go1_info:
         const GHC.RTS.Flags.$fEnumDoHeapProfile_go1_entry;
         const 0;
         const 279172874254;
         const 4294967300;
         const ScWiZ_srt+1024;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:59.3041468 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoHeapProfile_go_closure" {
     GHC.RTS.Flags.$fEnumDoHeapProfile_go_closure:
         const GHC.RTS.Flags.$fEnumDoHeapProfile_go_info;
         const 0;
 },
 sat_scVWa_entry() //  [R1]
         { []
         }
     {offset
       cd9L2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd9L3; else goto cd9L4;
       cd9L3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9L4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scVW8::I64 = I64[R1 + 16];
           if (_scVW8::I64 != 8) goto cd9L0; else goto cd9L1;
       cd9L0: // global
           R2 = _scVW8::I64 + 1;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumDoHeapProfile_go_entry(R2) args: 24, res: 0, upd: 24;
       cd9L1: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVWa_info" {
     sat_scVWa_info:
         const sat_scVWa_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1080;
 },
 sat_scVW7_entry() //  [R1]
         { []
         }
     {offset
       cd9Lb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd9Lc; else goto cd9Ld;
       cd9Lc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9Ld: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVW7_info" {
     sat_scVW7_info:
         const sat_scVW7_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1024;
 },
 GHC.RTS.Flags.$fEnumDoHeapProfile_go_entry() //  [R2]
         { []
         }
     {offset
       cd9Lf: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cd9Lj; else goto cd9Li;
       cd9Lj: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoHeapProfile_go_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd9Li: // global
           I64[Hp - 64] = sat_scVWa_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_scVW7_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoHeapProfile_go_info" {
     GHC.RTS.Flags.$fEnumDoHeapProfile_go_info:
         const GHC.RTS.Flags.$fEnumDoHeapProfile_go_entry;
         const 0;
         const 554050781198;
         const 4294967300;
         const ScWiZ_srt+1024;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:59.313933329 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFromTo_closure" {
     GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFromTo_closure:
         const GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFromTo_info;
         const 0;
 },
 GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFromTo_entry() //  [R2, R3]
         { []
         }
     {offset
       cd9LT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd9LU; else goto cd9LV;
       cd9LU: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFromTo_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cd9LV: // global
           I64[Sp - 16] = block_cd9LG_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ud9NE; else goto cd9LH;
       ud9NE: // global
           call _cd9LG(R1) args: 0, res: 0, upd: 0;
       cd9LH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFromTo_info" {
     GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFromTo_info:
         const GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFromTo_entry;
         const 0;
         const 4385161609230;
         const 8589934607;
         const ScWiZ_srt+1016;
 },
 _cd9LG() //  [R1]
         { []
         }
     {offset
       cd9LG: // global
           _scVWc::P64 = P64[Sp + 8];
           switch [0 .. 7] (%MO_UU_Conv_W32_W64(I32[I64[R1 - 1] + 20])) {
               case 0 : goto cd9LK;
               case 1 : goto cd9LL;
               case 2 : goto cd9LM;
               case 3 : goto cd9LN;
               case 4 : goto cd9LO;
               case 5 : goto cd9LP;
               case 6 : goto cd9LQ;
               case 7 : goto cd9LR;
           }
       cd9LR: // global
           _scVWe::I64 = 8;
           goto scVWd;
       cd9LQ: // global
           _scVWe::I64 = 7;
           goto scVWd;
       cd9LP: // global
           _scVWe::I64 = 6;
           goto scVWd;
       cd9LO: // global
           _scVWe::I64 = 5;
           goto scVWd;
       cd9LN: // global
           _scVWe::I64 = 4;
           goto scVWd;
       cd9LM: // global
           _scVWe::I64 = 2;
           goto scVWd;
       cd9LL: // global
           _scVWe::I64 = 1;
           goto scVWd;
       cd9LK: // global
           _scVWe::I64 = 0;
           goto scVWd;
       scVWd: // global
           I64[Sp] = block_cd9LZ_info;
           R1 = _scVWc::P64;
           I64[Sp + 8] = _scVWe::I64;
           if (R1 & 7 != 0) goto ud9ND; else goto cd9M1;
       ud9ND: // global
           call _cd9LZ(R1) args: 0, res: 0, upd: 0;
       cd9M1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cd9LG_info" {
     block_cd9LG_info:
         const _cd9LG;
         const 1;
         const 2186138353694;
         const ScWiZ_srt+1016;
 },
 _cd9LZ() //  [R1]
         { []
         }
     {offset
       cd9LZ: // global
           _scVWe::I64 = I64[Sp + 8];
           switch [0 .. 7] (%MO_UU_Conv_W32_W64(I32[I64[R1 - 1] + 20])) {
               case 0 : goto cd9Mc;
               case 1 : goto cd9Ml;
               case 2 : goto cd9Mu;
               case 3 : goto cd9MD;
               case 4 : goto cd9MM;
               case 5 : goto cd9MV;
               case 6 : goto cd9N4;
               case 7 : goto cd9Nd;
           }
       cd9Nd: // global
           if (%MO_S_Gt_W64(_scVWe::I64, 8)) goto cd9Nc; else goto cd9Nb;
       cd9Nb: // global
           R2 = _scVWe::I64;
           Sp = Sp + 16;
           call GHC.RTS.Flags.$fEnumDoHeapProfile_go_entry(R2) args: 8, res: 0, upd: 8;
       cd9N4: // global
           if (%MO_S_Gt_W64(_scVWe::I64, 7)) goto cd9Nc; else goto cd9N2;
       cd9N2: // global
           R2 = _scVWe::I64;
           Sp = Sp + 16;
           call GHC.RTS.Flags.$fEnumDoHeapProfile_go1_entry(R2) args: 8, res: 0, upd: 8;
       cd9MV: // global
           if (%MO_S_Gt_W64(_scVWe::I64, 6)) goto cd9Nc; else goto cd9MT;
       cd9MT: // global
           R2 = _scVWe::I64;
           Sp = Sp + 16;
           call GHC.RTS.Flags.$fEnumDoHeapProfile_go2_entry(R2) args: 8, res: 0, upd: 8;
       cd9MM: // global
           if (%MO_S_Gt_W64(_scVWe::I64, 5)) goto cd9Nc; else goto cd9MK;
       cd9MK: // global
           R2 = _scVWe::I64;
           Sp = Sp + 16;
           call GHC.RTS.Flags.$fEnumDoHeapProfile_go3_entry(R2) args: 8, res: 0, upd: 8;
       cd9MD: // global
           if (%MO_S_Gt_W64(_scVWe::I64, 4)) goto cd9Nc; else goto cd9MB;
       cd9MB: // global
           R2 = _scVWe::I64;
           Sp = Sp + 16;
           call GHC.RTS.Flags.$fEnumDoHeapProfile_go4_entry(R2) args: 8, res: 0, upd: 8;
       cd9Mu: // global
           if (%MO_S_Gt_W64(_scVWe::I64, 2)) goto cd9Nc; else goto cd9Ms;
       cd9Ms: // global
           R2 = _scVWe::I64;
           Sp = Sp + 16;
           call GHC.RTS.Flags.$fEnumDoHeapProfile_go5_entry(R2) args: 8, res: 0, upd: 8;
       cd9Ml: // global
           if (%MO_S_Gt_W64(_scVWe::I64, 1)) goto cd9Nc; else goto cd9Mj;
       cd9Mj: // global
           R2 = _scVWe::I64;
           Sp = Sp + 16;
           call GHC.RTS.Flags.$fEnumDoHeapProfile_go6_entry(R2) args: 8, res: 0, upd: 8;
       cd9Mc: // global
           if (%MO_S_Gt_W64(_scVWe::I64, 0)) goto cd9Nc; else goto cd9M9;
       cd9Nc: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cd9M9: // global
           R2 = _scVWe::I64;
           Sp = Sp + 16;
           call GHC.RTS.Flags.$fEnumDoHeapProfile_go7_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd9LZ_info" {
     block_cd9LZ_info:
         const _cd9LZ;
         const 65;
         const 2186138353694;
         const ScWiZ_srt+1016;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:59.325819163 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFromThen_closure" {
     GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFromThen_closure:
         const GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFromThen_info;
         const 0;
 },
 GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFromThen_entry() //  [R2,
                                                               R3]
         { []
         }
     {offset
       cd9Oi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd9Oj; else goto cd9Ok;
       cd9Oj: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFromThen_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cd9Ok: // global
           I64[Sp - 16] = block_cd9O5_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ud9Q3; else goto cd9O6;
       ud9Q3: // global
           call _cd9O5(R1) args: 0, res: 0, upd: 0;
       cd9O6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFromThen_info" {
     GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFromThen_info:
         const GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFromThen_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const ScWiZ_srt+1096;
 },
 _cd9O5() //  [R1]
         { []
         }
     {offset
       cd9O5: // global
           _scVWq::P64 = P64[Sp + 8];
           switch [0 .. 7] (%MO_UU_Conv_W32_W64(I32[I64[R1 - 1] + 20])) {
               case 0 : goto cd9O9;
               case 1 : goto cd9Oa;
               case 2 : goto cd9Ob;
               case 3 : goto cd9Oc;
               case 4 : goto cd9Od;
               case 5 : goto cd9Oe;
               case 6 : goto cd9Of;
               case 7 : goto cd9Og;
           }
       cd9Og: // global
           _scVWs::I64 = 8;
           goto scVWr;
       cd9Of: // global
           _scVWs::I64 = 7;
           goto scVWr;
       cd9Oe: // global
           _scVWs::I64 = 6;
           goto scVWr;
       cd9Od: // global
           _scVWs::I64 = 5;
           goto scVWr;
       cd9Oc: // global
           _scVWs::I64 = 4;
           goto scVWr;
       cd9Ob: // global
           _scVWs::I64 = 2;
           goto scVWr;
       cd9Oa: // global
           _scVWs::I64 = 1;
           goto scVWr;
       cd9O9: // global
           _scVWs::I64 = 0;
           goto scVWr;
       scVWr: // global
           I64[Sp] = block_cd9Oo_info;
           R1 = _scVWq::P64;
           I64[Sp + 8] = _scVWs::I64;
           if (R1 & 7 != 0) goto ud9Q2; else goto cd9Oq;
       ud9Q2: // global
           call _cd9Oo(R1) args: 0, res: 0, upd: 0;
       cd9Oq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cd9O5_info" {
     block_cd9O5_info:
         const _cd9O5;
         const 1;
         const 4294967326;
         const ScWiZ_srt+1104;
 },
 _cd9Oo() //  [R1]
         { []
         }
     {offset
       cd9Oo: // global
           _scVWs::I64 = I64[Sp + 8];
           switch [0 .. 7] (%MO_UU_Conv_W32_W64(I32[I64[R1 - 1] + 20])) {
               case 0 : goto cd9Ox;
               case 1 : goto cd9OG;
               case 2 : goto cd9OP;
               case 3 : goto cd9OY;
               case 4 : goto cd9P7;
               case 5 : goto cd9Pg;
               case 6 : goto cd9Pp;
               case 7 : goto cd9Py;
           }
       cd9Py: // global
           I64[Sp + 8] = block_cd9Pw_info;
           R3 = 8;
           R2 = _scVWs::I64;
           Sp = Sp + 8;
           call GHC.Enum.efdInt_entry(R3, R2) args: 8, res: 8, upd: 8;
       cd9Pp: // global
           I64[Sp + 8] = block_cd9Pn_info;
           R3 = 7;
           R2 = _scVWs::I64;
           Sp = Sp + 8;
           call GHC.Enum.efdInt_entry(R3, R2) args: 8, res: 8, upd: 8;
       cd9Pg: // global
           I64[Sp + 8] = block_cd9Pe_info;
           R3 = 6;
           R2 = _scVWs::I64;
           Sp = Sp + 8;
           call GHC.Enum.efdInt_entry(R3, R2) args: 8, res: 8, upd: 8;
       cd9P7: // global
           I64[Sp + 8] = block_cd9P5_info;
           R3 = 5;
           R2 = _scVWs::I64;
           Sp = Sp + 8;
           call GHC.Enum.efdInt_entry(R3, R2) args: 8, res: 8, upd: 8;
       cd9OY: // global
           I64[Sp + 8] = block_cd9OW_info;
           R3 = 4;
           R2 = _scVWs::I64;
           Sp = Sp + 8;
           call GHC.Enum.efdInt_entry(R3, R2) args: 8, res: 8, upd: 8;
       cd9OP: // global
           I64[Sp + 8] = block_cd9ON_info;
           R3 = 2;
           R2 = _scVWs::I64;
           Sp = Sp + 8;
           call GHC.Enum.efdInt_entry(R3, R2) args: 8, res: 8, upd: 8;
       cd9OG: // global
           I64[Sp + 8] = block_cd9OE_info;
           R3 = 1;
           R2 = _scVWs::I64;
           Sp = Sp + 8;
           call GHC.Enum.efdInt_entry(R3, R2) args: 8, res: 8, upd: 8;
       cd9Ox: // global
           I64[Sp + 8] = block_cd9Ou_info;
           R3 = 0;
           R2 = _scVWs::I64;
           Sp = Sp + 8;
           call GHC.Enum.efdInt_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cd9Oo_info" {
     block_cd9Oo_info:
         const _cd9Oo;
         const 65;
         const 4294967326;
         const ScWiZ_srt+1104;
 },
 _cd9Pw() //  [R1]
         { []
         }
     {offset
       cd9Pw: // global
           R3 = R1;
           R2 = GHC.RTS.Flags.$fEnumDoHeapProfile_$ctoEnum_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd9Pw_info" {
     block_cd9Pw_info:
         const _cd9Pw;
         const 0;
         const 4294967326;
         const ScWiZ_srt+1104;
 },
 _cd9Pn() //  [R1]
         { []
         }
     {offset
       cd9Pn: // global
           R3 = R1;
           R2 = GHC.RTS.Flags.$fEnumDoHeapProfile_$ctoEnum_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd9Pn_info" {
     block_cd9Pn_info:
         const _cd9Pn;
         const 0;
         const 4294967326;
         const ScWiZ_srt+1104;
 },
 _cd9Pe() //  [R1]
         { []
         }
     {offset
       cd9Pe: // global
           R3 = R1;
           R2 = GHC.RTS.Flags.$fEnumDoHeapProfile_$ctoEnum_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd9Pe_info" {
     block_cd9Pe_info:
         const _cd9Pe;
         const 0;
         const 4294967326;
         const ScWiZ_srt+1104;
 },
 _cd9P5() //  [R1]
         { []
         }
     {offset
       cd9P5: // global
           R3 = R1;
           R2 = GHC.RTS.Flags.$fEnumDoHeapProfile_$ctoEnum_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd9P5_info" {
     block_cd9P5_info:
         const _cd9P5;
         const 0;
         const 4294967326;
         const ScWiZ_srt+1104;
 },
 _cd9OW() //  [R1]
         { []
         }
     {offset
       cd9OW: // global
           R3 = R1;
           R2 = GHC.RTS.Flags.$fEnumDoHeapProfile_$ctoEnum_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd9OW_info" {
     block_cd9OW_info:
         const _cd9OW;
         const 0;
         const 4294967326;
         const ScWiZ_srt+1104;
 },
 _cd9ON() //  [R1]
         { []
         }
     {offset
       cd9ON: // global
           R3 = R1;
           R2 = GHC.RTS.Flags.$fEnumDoHeapProfile_$ctoEnum_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd9ON_info" {
     block_cd9ON_info:
         const _cd9ON;
         const 0;
         const 4294967326;
         const ScWiZ_srt+1104;
 },
 _cd9OE() //  [R1]
         { []
         }
     {offset
       cd9OE: // global
           R3 = R1;
           R2 = GHC.RTS.Flags.$fEnumDoHeapProfile_$ctoEnum_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd9OE_info" {
     block_cd9OE_info:
         const _cd9OE;
         const 0;
         const 4294967326;
         const ScWiZ_srt+1104;
 },
 _cd9Ou() //  [R1]
         { []
         }
     {offset
       cd9Ou: // global
           R3 = R1;
           R2 = GHC.RTS.Flags.$fEnumDoHeapProfile_$ctoEnum_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd9Ou_info" {
     block_cd9Ou_info:
         const _cd9Ou;
         const 0;
         const 4294967326;
         const ScWiZ_srt+1104;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:59.346706743 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoHeapProfile_go8_closure" {
     GHC.RTS.Flags.$fEnumDoHeapProfile_go8_closure:
         const GHC.RTS.Flags.$fEnumDoHeapProfile_go8_info;
         const 0;
 },
 sat_scVWH_entry() //  [R1]
         { []
         }
     {offset
       cd9QX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd9QY; else goto cd9QZ;
       cd9QY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9QZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scVWF::I64 = I64[R1 + 16];
           if (_scVWF::I64 != 9223372036854775807) goto cd9QV; else goto cd9QW;
       cd9QV: // global
           R2 = _scVWF::I64 + 1;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumDoHeapProfile_go8_entry(R2) args: 24, res: 0, upd: 24;
       cd9QW: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVWH_info" {
     sat_scVWH_info:
         const sat_scVWH_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1112;
 },
 sat_scVWE_entry() //  [R1]
         { []
         }
     {offset
       cd9R6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd9R7; else goto cd9R8;
       cd9R7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9R8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVWE_info" {
     sat_scVWE_info:
         const sat_scVWE_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1024;
 },
 GHC.RTS.Flags.$fEnumDoHeapProfile_go8_entry() //  [R2]
         { []
         }
     {offset
       cd9Ra: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cd9Re; else goto cd9Rd;
       cd9Re: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoHeapProfile_go8_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd9Rd: // global
           I64[Hp - 64] = sat_scVWH_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_scVWE_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoHeapProfile_go8_info" {
     GHC.RTS.Flags.$fEnumDoHeapProfile_go8_info:
         const GHC.RTS.Flags.$fEnumDoHeapProfile_go8_entry;
         const 0;
         const 8800387989518;
         const 4294967300;
         const ScWiZ_srt+1024;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:59.353919638 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoHeapProfile8_closure" {
     GHC.RTS.Flags.$fEnumDoHeapProfile8_closure:
         const GHC.RTS.Flags.$fEnumDoHeapProfile8_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fEnumDoHeapProfile8_entry() //  [R1]
         { []
         }
     {offset
       cd9RC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd9RD; else goto cd9RE;
       cd9RD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9RE: // global
           (_cd9Rz::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cd9Rz::I64 == 0) goto cd9RB; else goto cd9RA;
       cd9RB: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cd9RA: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cd9Rz::I64;
           R2 = 0;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumDoHeapProfile_go8_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoHeapProfile8_info" {
     GHC.RTS.Flags.$fEnumDoHeapProfile8_info:
         const GHC.RTS.Flags.$fEnumDoHeapProfile8_entry;
         const 0;
         const 4294967317;
         const ScWiZ_srt+1112;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:59.357856598 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoHeapProfile7_closure" {
     GHC.RTS.Flags.$fEnumDoHeapProfile7_closure:
         const GHC.RTS.Flags.$fEnumDoHeapProfile7_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fEnumDoHeapProfile7_entry() //  [R1]
         { []
         }
     {offset
       cd9RS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd9RT; else goto cd9RU;
       cd9RT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9RU: // global
           (_cd9RP::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cd9RP::I64 == 0) goto cd9RR; else goto cd9RQ;
       cd9RR: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cd9RQ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cd9RP::I64;
           R2 = 1;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumDoHeapProfile_go8_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoHeapProfile7_info" {
     GHC.RTS.Flags.$fEnumDoHeapProfile7_info:
         const GHC.RTS.Flags.$fEnumDoHeapProfile7_entry;
         const 0;
         const 4294967317;
         const ScWiZ_srt+1112;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:59.362509071 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoHeapProfile6_closure" {
     GHC.RTS.Flags.$fEnumDoHeapProfile6_closure:
         const GHC.RTS.Flags.$fEnumDoHeapProfile6_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fEnumDoHeapProfile6_entry() //  [R1]
         { []
         }
     {offset
       cd9S8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd9S9; else goto cd9Sa;
       cd9S9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9Sa: // global
           (_cd9S5::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cd9S5::I64 == 0) goto cd9S7; else goto cd9S6;
       cd9S7: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cd9S6: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cd9S5::I64;
           R2 = 2;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumDoHeapProfile_go8_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoHeapProfile6_info" {
     GHC.RTS.Flags.$fEnumDoHeapProfile6_info:
         const GHC.RTS.Flags.$fEnumDoHeapProfile6_entry;
         const 0;
         const 4294967317;
         const ScWiZ_srt+1112;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:59.367083409 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoHeapProfile5_closure" {
     GHC.RTS.Flags.$fEnumDoHeapProfile5_closure:
         const GHC.RTS.Flags.$fEnumDoHeapProfile5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fEnumDoHeapProfile5_entry() //  [R1]
         { []
         }
     {offset
       cd9So: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd9Sp; else goto cd9Sq;
       cd9Sp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9Sq: // global
           (_cd9Sl::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cd9Sl::I64 == 0) goto cd9Sn; else goto cd9Sm;
       cd9Sn: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cd9Sm: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cd9Sl::I64;
           R2 = 4;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumDoHeapProfile_go8_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoHeapProfile5_info" {
     GHC.RTS.Flags.$fEnumDoHeapProfile5_info:
         const GHC.RTS.Flags.$fEnumDoHeapProfile5_entry;
         const 0;
         const 4294967317;
         const ScWiZ_srt+1112;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:59.37117837 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoHeapProfile4_closure" {
     GHC.RTS.Flags.$fEnumDoHeapProfile4_closure:
         const GHC.RTS.Flags.$fEnumDoHeapProfile4_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fEnumDoHeapProfile4_entry() //  [R1]
         { []
         }
     {offset
       cd9SE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd9SF; else goto cd9SG;
       cd9SF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9SG: // global
           (_cd9SB::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cd9SB::I64 == 0) goto cd9SD; else goto cd9SC;
       cd9SD: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cd9SC: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cd9SB::I64;
           R2 = 5;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumDoHeapProfile_go8_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoHeapProfile4_info" {
     GHC.RTS.Flags.$fEnumDoHeapProfile4_info:
         const GHC.RTS.Flags.$fEnumDoHeapProfile4_entry;
         const 0;
         const 4294967317;
         const ScWiZ_srt+1112;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:59.375252966 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoHeapProfile3_closure" {
     GHC.RTS.Flags.$fEnumDoHeapProfile3_closure:
         const GHC.RTS.Flags.$fEnumDoHeapProfile3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fEnumDoHeapProfile3_entry() //  [R1]
         { []
         }
     {offset
       cd9SU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd9SV; else goto cd9SW;
       cd9SV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9SW: // global
           (_cd9SR::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cd9SR::I64 == 0) goto cd9ST; else goto cd9SS;
       cd9ST: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cd9SS: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cd9SR::I64;
           R2 = 6;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumDoHeapProfile_go8_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoHeapProfile3_info" {
     GHC.RTS.Flags.$fEnumDoHeapProfile3_info:
         const GHC.RTS.Flags.$fEnumDoHeapProfile3_entry;
         const 0;
         const 4294967317;
         const ScWiZ_srt+1112;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:59.379673147 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoHeapProfile2_closure" {
     GHC.RTS.Flags.$fEnumDoHeapProfile2_closure:
         const GHC.RTS.Flags.$fEnumDoHeapProfile2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fEnumDoHeapProfile2_entry() //  [R1]
         { []
         }
     {offset
       cd9Ta: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd9Tb; else goto cd9Tc;
       cd9Tb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9Tc: // global
           (_cd9T7::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cd9T7::I64 == 0) goto cd9T9; else goto cd9T8;
       cd9T9: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cd9T8: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cd9T7::I64;
           R2 = 7;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumDoHeapProfile_go8_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoHeapProfile2_info" {
     GHC.RTS.Flags.$fEnumDoHeapProfile2_info:
         const GHC.RTS.Flags.$fEnumDoHeapProfile2_entry;
         const 0;
         const 4294967317;
         const ScWiZ_srt+1112;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:59.383697741 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoHeapProfile1_closure" {
     GHC.RTS.Flags.$fEnumDoHeapProfile1_closure:
         const GHC.RTS.Flags.$fEnumDoHeapProfile1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fEnumDoHeapProfile1_entry() //  [R1]
         { []
         }
     {offset
       cd9Tq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd9Tr; else goto cd9Ts;
       cd9Tr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9Ts: // global
           (_cd9Tn::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cd9Tn::I64 == 0) goto cd9Tp; else goto cd9To;
       cd9Tp: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cd9To: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cd9Tn::I64;
           R2 = 8;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumDoHeapProfile_go8_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoHeapProfile1_info" {
     GHC.RTS.Flags.$fEnumDoHeapProfile1_info:
         const GHC.RTS.Flags.$fEnumDoHeapProfile1_entry;
         const 0;
         const 4294967317;
         const ScWiZ_srt+1112;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:59.388493686 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFrom_closure" {
     GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFrom_closure:
         const GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFrom_info;
         const 0;
 },
 GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFrom_entry() //  [R2]
         { []
         }
     {offset
       cd9TR: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd9TS; else goto cd9TT;
       cd9TS: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFrom_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd9TT: // global
           I64[Sp - 8] = block_cd9TE_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud9Ui; else goto cd9TF;
       ud9Ui: // global
           call _cd9TE(R1) args: 0, res: 0, upd: 0;
       cd9TF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFrom_info" {
     GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFrom_info:
         const GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFrom_entry;
         const 0;
         const 2194728288270;
         const 4294967301;
         const ScWiZ_srt+1120;
 },
 _cd9TE() //  [R1]
         { []
         }
     {offset
       cd9TE: // global
           switch [0 .. 7] (%MO_UU_Conv_W32_W64(I32[I64[R1 - 1] + 20])) {
               case 0 : goto cd9TI;
               case 1 : goto cd9TJ;
               case 2 : goto cd9TK;
               case 3 : goto cd9TL;
               case 4 : goto cd9TM;
               case 5 : goto cd9TN;
               case 6 : goto cd9TO;
               case 7 : goto cd9TP;
           }
       cd9TP: // global
           R1 = GHC.RTS.Flags.$fEnumDoHeapProfile1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cd9TO: // global
           R1 = GHC.RTS.Flags.$fEnumDoHeapProfile2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cd9TN: // global
           R1 = GHC.RTS.Flags.$fEnumDoHeapProfile3_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cd9TM: // global
           R1 = GHC.RTS.Flags.$fEnumDoHeapProfile4_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cd9TL: // global
           R1 = GHC.RTS.Flags.$fEnumDoHeapProfile5_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cd9TK: // global
           R1 = GHC.RTS.Flags.$fEnumDoHeapProfile6_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cd9TJ: // global
           R1 = GHC.RTS.Flags.$fEnumDoHeapProfile7_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cd9TI: // global
           R1 = GHC.RTS.Flags.$fEnumDoHeapProfile8_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd9TE_info" {
     block_cd9TE_info:
         const _cd9TE;
         const 0;
         const 1095216660510;
         const ScWiZ_srt+1128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:59.395074527 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoHeapProfile14_closure" {
     GHC.RTS.Flags.$fEnumDoHeapProfile14_closure:
         const GHC.RTS.Flags.$fEnumDoHeapProfile14_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fEnumDoHeapProfile14_entry() //  [R1]
         { []
         }
     {offset
       cd9UJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd9UK; else goto cd9UL;
       cd9UK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9UL: // global
           (_cd9UG::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cd9UG::I64 == 0) goto cd9UI; else goto cd9UH;
       cd9UI: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cd9UH: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cd9UG::I64;
           R2 = (-1);
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoHeapProfile14_info" {
     GHC.RTS.Flags.$fEnumDoHeapProfile14_info:
         const GHC.RTS.Flags.$fEnumDoHeapProfile14_entry;
         const 0;
         const 4294967317;
         const ScWiZ_srt+984;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:59.399931774 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoHeapProfile_$cpred_closure" {
     GHC.RTS.Flags.$fEnumDoHeapProfile_$cpred_closure:
         const GHC.RTS.Flags.$fEnumDoHeapProfile_$cpred_info;
         const 0;
 },
 GHC.RTS.Flags.$fEnumDoHeapProfile_$cpred_entry() //  [R2]
         { []
         }
     {offset
       cd9Va: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cd9Vb; else goto cd9Vc;
       cd9Vb: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoHeapProfile_$cpred_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd9Vc: // global
           I64[Sp - 8] = block_cd9UX_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ud9VB; else goto cd9UY;
       ud9VB: // global
           call _cd9UX(R1) args: 0, res: 0, upd: 0;
       cd9UY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoHeapProfile_$cpred_info" {
     GHC.RTS.Flags.$fEnumDoHeapProfile_$cpred_info:
         const GHC.RTS.Flags.$fEnumDoHeapProfile_$cpred_entry;
         const 0;
         const 432345568522534926;
         const 4294967301;
         const ScWiZ_srt+992;
 },
 _cd9UX() //  [R1]
         { []
         }
     {offset
       cd9UX: // global
           switch [0 .. 7] (%MO_UU_Conv_W32_W64(I32[I64[R1 - 1] + 20])) {
               case 0 : goto cd9V1;
               case 1 : goto cd9V2;
               case 2 : goto cd9V3;
               case 3 : goto cd9V4;
               case 4 : goto cd9V5;
               case 5 : goto cd9V6;
               case 6 : goto cd9V7;
               case 7 : goto cd9V8;
           }
       cd9V8: // global
           R1 = GHC.RTS.Flags.HeapByLDV_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cd9V7: // global
           R1 = GHC.RTS.Flags.HeapByRetainer_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cd9V6: // global
           R1 = GHC.RTS.Flags.HeapByType_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cd9V5: // global
           R1 = GHC.RTS.Flags.HeapByDescr_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cd9V4: // global
           R1 = GHC.RTS.Flags.$fEnumDoHeapProfile13_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cd9V3: // global
           R1 = GHC.RTS.Flags.HeapByCCS_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cd9V2: // global
           R1 = GHC.RTS.Flags.NoHeapProfiling_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cd9V1: // global
           R1 = GHC.RTS.Flags.$fEnumDoHeapProfile14_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd9UX_info" {
     block_cd9UX_info:
         const _cd9UX;
         const 0;
         const 288230380446679070;
         const ScWiZ_srt+992;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:59.46395767 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFromThenTo_closure" {
     GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFromThenTo_closure:
         const GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFromThenTo_info;
         const 0;
 },
 sat_scVX4_entry() //  [R1]
         { []
         }
     {offset
       cd9WJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd9WK; else goto cd9WL;
       cd9WK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9WL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_scVWZ_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVX4_info" {
     sat_scVX4_info:
         const sat_scVX4_entry;
         const 8589934593;
         const 4294967311;
         const ScWiZ_srt+1024;
 },
 sat_scVX2_entry() //  [R1]
         { []
         }
     {offset
       cd9WQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd9WR; else goto cd9WS;
       cd9WR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9WS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVX2_info" {
     sat_scVX2_info:
         const sat_scVX2_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1024;
 },
 sat_scVX5_entry() //  [R1]
         { []
         }
     {offset
       cd9WY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd9WZ; else goto cd9X0;
       cd9WZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9X0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVX5_info" {
     sat_scVX5_info:
         const sat_scVX5_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1024;
 },
 go_dn_scVWZ_entry() //  [R1, R2]
         { []
         }
     {offset
       cd9X4: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cd9X8; else goto cd9X7;
       cd9X8: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd9X7: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto cd9X2; else goto cd9X3;
       cd9X2: // global
           _scVWX::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_scVX4_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _scVWX::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_scVX2_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cd9X3: // global
           I64[Hp - 80] = sat_scVX5_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _cd9Xa::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _cd9Xa::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_scVWZ_info" {
     go_dn_scVWZ_info:
         const go_dn_scVWZ_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const ScWiZ_srt+1024;
 },
 sat_scVX6_entry() //  [R1]
         { []
         }
     {offset
       cd9Xb: // global
           _scVX6::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd9Xc; else goto cd9Xd;
       cd9Xd: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cd9Xf; else goto cd9Xe;
       cd9Xf: // global
           HpAlloc = 24;
           goto cd9Xc;
       cd9Xc: // global
           R1 = _scVX6::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9Xe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVX6::P64;
           _scVWS::I64 = I64[_scVX6::P64 + 24];
           _scVWX::I64 = _scVWS::I64 - I64[_scVX6::P64 + 16];
           I64[Hp - 16] = go_dn_scVWZ_info;
           I64[Hp - 8] = _scVWX::I64;
           I64[Hp] = 0 - _scVWX::I64;
           R2 = _scVWS::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_scVWZ_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVX6_info" {
     sat_scVX6_info:
         const sat_scVX6_entry;
         const 8589934592;
         const 4294967316;
         const ScWiZ_srt+1024;
 },
 sat_scVWW_entry() //  [R1]
         { []
         }
     {offset
       cd9Xk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd9Xl; else goto cd9Xm;
       cd9Xl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9Xm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVWW_info" {
     sat_scVWW_info:
         const sat_scVWW_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1024;
 },
 sat_scVX8_entry() //  [R1]
         { []
         }
     {offset
       cd9Xv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd9Xw; else goto cd9Xx;
       cd9Xw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9Xx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVX8_info" {
     sat_scVX8_info:
         const sat_scVX8_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1024;
 },
 sat_scVXi_entry() //  [R1]
         { []
         }
     {offset
       cd9Y0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd9Y1; else goto cd9Y2;
       cd9Y1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9Y2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_scVXd_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVXi_info" {
     sat_scVXi_info:
         const sat_scVXi_entry;
         const 8589934593;
         const 4294967311;
         const ScWiZ_srt+1024;
 },
 sat_scVXg_entry() //  [R1]
         { []
         }
     {offset
       cd9Y7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd9Y8; else goto cd9Y9;
       cd9Y8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9Y9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVXg_info" {
     sat_scVXg_info:
         const sat_scVXg_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1024;
 },
 sat_scVXj_entry() //  [R1]
         { []
         }
     {offset
       cd9Yf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd9Yg; else goto cd9Yh;
       cd9Yg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9Yh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVXj_info" {
     sat_scVXj_info:
         const sat_scVXj_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1024;
 },
 go_up_scVXd_entry() //  [R1, R2]
         { []
         }
     {offset
       cd9Yl: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cd9Yp; else goto cd9Yo;
       cd9Yp: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd9Yo: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto cd9Yj; else goto cd9Yk;
       cd9Yj: // global
           _scVXb::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_scVXi_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _scVXb::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_scVXg_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cd9Yk: // global
           I64[Hp - 80] = sat_scVXj_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _cd9Yr::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _cd9Yr::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_scVXd_info" {
     go_up_scVXd_info:
         const go_up_scVXd_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const ScWiZ_srt+1024;
 },
 sat_scVXk_entry() //  [R1]
         { []
         }
     {offset
       cd9Ys: // global
           _scVXk::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd9Yt; else goto cd9Yu;
       cd9Yu: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cd9Yw; else goto cd9Yv;
       cd9Yw: // global
           HpAlloc = 24;
           goto cd9Yt;
       cd9Yt: // global
           R1 = _scVXk::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9Yv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVXk::P64;
           _scVWS::I64 = I64[_scVXk::P64 + 24];
           _scVXb::I64 = _scVWS::I64 - I64[_scVXk::P64 + 16];
           I64[Hp - 16] = go_up_scVXd_info;
           I64[Hp - 8] = _scVXb::I64;
           I64[Hp] = 0 - _scVXb::I64;
           R2 = _scVWS::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_scVXd_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVXk_info" {
     sat_scVXk_info:
         const sat_scVXk_entry;
         const 8589934592;
         const 4294967316;
         const ScWiZ_srt+1024;
 },
 sat_scVXa_entry() //  [R1]
         { []
         }
     {offset
       cd9YB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd9YC; else goto cd9YD;
       cd9YC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9YD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVXa_info" {
     sat_scVXa_info:
         const sat_scVXa_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1024;
 },
 sat_scVXm_entry() //  [R1]
         { []
         }
     {offset
       cd9YM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd9YN; else goto cd9YO;
       cd9YN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9YO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVXm_info" {
     sat_scVXm_info:
         const sat_scVXm_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1024;
 },
 sat_scVXx_entry() //  [R1]
         { []
         }
     {offset
       cd9Zl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd9Zm; else goto cd9Zn;
       cd9Zm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9Zn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_scVXs_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVXx_info" {
     sat_scVXx_info:
         const sat_scVXx_entry;
         const 8589934593;
         const 4294967311;
         const ScWiZ_srt+1024;
 },
 sat_scVXv_entry() //  [R1]
         { []
         }
     {offset
       cd9Zs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd9Zt; else goto cd9Zu;
       cd9Zt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9Zu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVXv_info" {
     sat_scVXv_info:
         const sat_scVXv_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1024;
 },
 sat_scVXy_entry() //  [R1]
         { []
         }
     {offset
       cd9ZA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd9ZB; else goto cd9ZC;
       cd9ZB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9ZC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVXy_info" {
     sat_scVXy_info:
         const sat_scVXy_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1024;
 },
 go_dn_scVXs_entry() //  [R1, R2]
         { []
         }
     {offset
       cd9ZG: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cd9ZK; else goto cd9ZJ;
       cd9ZK: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cd9ZJ: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto cd9ZE; else goto cd9ZF;
       cd9ZE: // global
           _scVXq::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_scVXx_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _scVXq::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_scVXv_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cd9ZF: // global
           I64[Hp - 80] = sat_scVXy_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _cd9ZM::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _cd9ZM::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_scVXs_info" {
     go_dn_scVXs_info:
         const go_dn_scVXs_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const ScWiZ_srt+1024;
 },
 sat_scVXz_entry() //  [R1]
         { []
         }
     {offset
       cd9ZN: // global
           _scVXz::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cd9ZO; else goto cd9ZP;
       cd9ZP: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cd9ZR; else goto cd9ZQ;
       cd9ZR: // global
           HpAlloc = 24;
           goto cd9ZO;
       cd9ZO: // global
           R1 = _scVXz::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9ZQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVXz::P64;
           _scVWS::I64 = I64[_scVXz::P64 + 24];
           _scVXq::I64 = _scVWS::I64 - I64[_scVXz::P64 + 16];
           I64[Hp - 16] = go_dn_scVXs_info;
           I64[Hp - 8] = _scVXq::I64;
           I64[Hp] = 1 - _scVXq::I64;
           R2 = _scVWS::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_scVXs_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVXz_info" {
     sat_scVXz_info:
         const sat_scVXz_entry;
         const 8589934592;
         const 4294967316;
         const ScWiZ_srt+1024;
 },
 sat_scVXp_entry() //  [R1]
         { []
         }
     {offset
       cd9ZW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cd9ZX; else goto cd9ZY;
       cd9ZX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cd9ZY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVXp_info" {
     sat_scVXp_info:
         const sat_scVXp_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1024;
 },
 sat_scVXB_entry() //  [R1]
         { []
         }
     {offset
       cda07: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cda08; else goto cda09;
       cda08: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cda09: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVXB_info" {
     sat_scVXB_info:
         const sat_scVXB_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1024;
 },
 sat_scVXL_entry() //  [R1]
         { []
         }
     {offset
       cda0C: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cda0D; else goto cda0E;
       cda0D: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cda0E: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_scVXG_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVXL_info" {
     sat_scVXL_info:
         const sat_scVXL_entry;
         const 8589934593;
         const 4294967311;
         const ScWiZ_srt+1024;
 },
 sat_scVXJ_entry() //  [R1]
         { []
         }
     {offset
       cda0J: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cda0K; else goto cda0L;
       cda0K: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cda0L: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVXJ_info" {
     sat_scVXJ_info:
         const sat_scVXJ_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1024;
 },
 sat_scVXM_entry() //  [R1]
         { []
         }
     {offset
       cda0R: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cda0S; else goto cda0T;
       cda0S: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cda0T: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVXM_info" {
     sat_scVXM_info:
         const sat_scVXM_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1024;
 },
 go_up_scVXG_entry() //  [R1, R2]
         { []
         }
     {offset
       cda0X: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cda11; else goto cda10;
       cda11: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cda10: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto cda0V; else goto cda0W;
       cda0V: // global
           _scVXE::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_scVXL_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _scVXE::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_scVXJ_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cda0W: // global
           I64[Hp - 80] = sat_scVXM_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _cda13::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _cda13::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_scVXG_info" {
     go_up_scVXG_info:
         const go_up_scVXG_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const ScWiZ_srt+1024;
 },
 sat_scVXN_entry() //  [R1]
         { []
         }
     {offset
       cda14: // global
           _scVXN::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cda15; else goto cda16;
       cda16: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cda18; else goto cda17;
       cda18: // global
           HpAlloc = 24;
           goto cda15;
       cda15: // global
           R1 = _scVXN::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cda17: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVXN::P64;
           _scVWS::I64 = I64[_scVXN::P64 + 24];
           _scVXE::I64 = _scVWS::I64 - I64[_scVXN::P64 + 16];
           I64[Hp - 16] = go_up_scVXG_info;
           I64[Hp - 8] = _scVXE::I64;
           I64[Hp] = 1 - _scVXE::I64;
           R2 = _scVWS::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_scVXG_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVXN_info" {
     sat_scVXN_info:
         const sat_scVXN_entry;
         const 8589934592;
         const 4294967316;
         const ScWiZ_srt+1024;
 },
 sat_scVXD_entry() //  [R1]
         { []
         }
     {offset
       cda1d: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cda1e; else goto cda1f;
       cda1e: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cda1f: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVXD_info" {
     sat_scVXD_info:
         const sat_scVXD_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1024;
 },
 sat_scVXP_entry() //  [R1]
         { []
         }
     {offset
       cda1o: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cda1p; else goto cda1q;
       cda1p: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cda1q: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVXP_info" {
     sat_scVXP_info:
         const sat_scVXP_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1024;
 },
 sat_scVY0_entry() //  [R1]
         { []
         }
     {offset
       cda1X: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cda1Y; else goto cda1Z;
       cda1Y: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cda1Z: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_scVXV_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVY0_info" {
     sat_scVY0_info:
         const sat_scVY0_entry;
         const 8589934593;
         const 4294967311;
         const ScWiZ_srt+1024;
 },
 sat_scVXY_entry() //  [R1]
         { []
         }
     {offset
       cda24: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cda25; else goto cda26;
       cda25: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cda26: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVXY_info" {
     sat_scVXY_info:
         const sat_scVXY_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1024;
 },
 sat_scVY1_entry() //  [R1]
         { []
         }
     {offset
       cda2c: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cda2d; else goto cda2e;
       cda2d: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cda2e: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVY1_info" {
     sat_scVY1_info:
         const sat_scVY1_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1024;
 },
 go_dn_scVXV_entry() //  [R1, R2]
         { []
         }
     {offset
       cda2i: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cda2m; else goto cda2l;
       cda2m: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cda2l: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto cda2g; else goto cda2h;
       cda2g: // global
           _scVXT::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_scVY0_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _scVXT::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_scVXY_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cda2h: // global
           I64[Hp - 80] = sat_scVY1_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _cda2o::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _cda2o::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_scVXV_info" {
     go_dn_scVXV_info:
         const go_dn_scVXV_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const ScWiZ_srt+1024;
 },
 sat_scVY2_entry() //  [R1]
         { []
         }
     {offset
       cda2p: // global
           _scVY2::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cda2q; else goto cda2r;
       cda2r: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cda2t; else goto cda2s;
       cda2t: // global
           HpAlloc = 24;
           goto cda2q;
       cda2q: // global
           R1 = _scVY2::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cda2s: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVY2::P64;
           _scVWS::I64 = I64[_scVY2::P64 + 24];
           _scVXT::I64 = _scVWS::I64 - I64[_scVY2::P64 + 16];
           I64[Hp - 16] = go_dn_scVXV_info;
           I64[Hp - 8] = _scVXT::I64;
           I64[Hp] = 2 - _scVXT::I64;
           R2 = _scVWS::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_scVXV_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVY2_info" {
     sat_scVY2_info:
         const sat_scVY2_entry;
         const 8589934592;
         const 4294967316;
         const ScWiZ_srt+1024;
 },
 sat_scVXS_entry() //  [R1]
         { []
         }
     {offset
       cda2y: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cda2z; else goto cda2A;
       cda2z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cda2A: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVXS_info" {
     sat_scVXS_info:
         const sat_scVXS_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1024;
 },
 sat_scVY4_entry() //  [R1]
         { []
         }
     {offset
       cda2J: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cda2K; else goto cda2L;
       cda2K: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cda2L: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVY4_info" {
     sat_scVY4_info:
         const sat_scVY4_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1024;
 },
 sat_scVYe_entry() //  [R1]
         { []
         }
     {offset
       cda3e: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cda3f; else goto cda3g;
       cda3f: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cda3g: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_scVY9_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVYe_info" {
     sat_scVYe_info:
         const sat_scVYe_entry;
         const 8589934593;
         const 4294967311;
         const ScWiZ_srt+1024;
 },
 sat_scVYc_entry() //  [R1]
         { []
         }
     {offset
       cda3l: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cda3m; else goto cda3n;
       cda3m: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cda3n: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVYc_info" {
     sat_scVYc_info:
         const sat_scVYc_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1024;
 },
 sat_scVYf_entry() //  [R1]
         { []
         }
     {offset
       cda3t: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cda3u; else goto cda3v;
       cda3u: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cda3v: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVYf_info" {
     sat_scVYf_info:
         const sat_scVYf_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1024;
 },
 go_up_scVY9_entry() //  [R1, R2]
         { []
         }
     {offset
       cda3z: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cda3D; else goto cda3C;
       cda3D: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cda3C: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto cda3x; else goto cda3y;
       cda3x: // global
           _scVY7::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_scVYe_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _scVY7::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_scVYc_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cda3y: // global
           I64[Hp - 80] = sat_scVYf_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _cda3F::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _cda3F::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_scVY9_info" {
     go_up_scVY9_info:
         const go_up_scVY9_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const ScWiZ_srt+1024;
 },
 sat_scVYg_entry() //  [R1]
         { []
         }
     {offset
       cda3G: // global
           _scVYg::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cda3H; else goto cda3I;
       cda3I: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cda3K; else goto cda3J;
       cda3K: // global
           HpAlloc = 24;
           goto cda3H;
       cda3H: // global
           R1 = _scVYg::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cda3J: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVYg::P64;
           _scVWS::I64 = I64[_scVYg::P64 + 24];
           _scVY7::I64 = _scVWS::I64 - I64[_scVYg::P64 + 16];
           I64[Hp - 16] = go_up_scVY9_info;
           I64[Hp - 8] = _scVY7::I64;
           I64[Hp] = 2 - _scVY7::I64;
           R2 = _scVWS::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_scVY9_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVYg_info" {
     sat_scVYg_info:
         const sat_scVYg_entry;
         const 8589934592;
         const 4294967316;
         const ScWiZ_srt+1024;
 },
 sat_scVY6_entry() //  [R1]
         { []
         }
     {offset
       cda3P: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cda3Q; else goto cda3R;
       cda3Q: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cda3R: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVY6_info" {
     sat_scVY6_info:
         const sat_scVY6_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1024;
 },
 sat_scVYi_entry() //  [R1]
         { []
         }
     {offset
       cda40: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cda41; else goto cda42;
       cda41: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cda42: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVYi_info" {
     sat_scVYi_info:
         const sat_scVYi_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1024;
 },
 sat_scVYt_entry() //  [R1]
         { []
         }
     {offset
       cda4z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cda4A; else goto cda4B;
       cda4A: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cda4B: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_scVYo_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVYt_info" {
     sat_scVYt_info:
         const sat_scVYt_entry;
         const 8589934593;
         const 4294967311;
         const ScWiZ_srt+1024;
 },
 sat_scVYr_entry() //  [R1]
         { []
         }
     {offset
       cda4G: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cda4H; else goto cda4I;
       cda4H: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cda4I: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVYr_info" {
     sat_scVYr_info:
         const sat_scVYr_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1024;
 },
 sat_scVYu_entry() //  [R1]
         { []
         }
     {offset
       cda4O: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cda4P; else goto cda4Q;
       cda4P: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cda4Q: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVYu_info" {
     sat_scVYu_info:
         const sat_scVYu_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1024;
 },
 go_dn_scVYo_entry() //  [R1, R2]
         { []
         }
     {offset
       cda4U: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cda4Y; else goto cda4X;
       cda4Y: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cda4X: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto cda4S; else goto cda4T;
       cda4S: // global
           _scVYm::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_scVYt_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _scVYm::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_scVYr_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cda4T: // global
           I64[Hp - 80] = sat_scVYu_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _cda50::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _cda50::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_scVYo_info" {
     go_dn_scVYo_info:
         const go_dn_scVYo_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const ScWiZ_srt+1024;
 },
 sat_scVYv_entry() //  [R1]
         { []
         }
     {offset
       cda51: // global
           _scVYv::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cda52; else goto cda53;
       cda53: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cda55; else goto cda54;
       cda55: // global
           HpAlloc = 24;
           goto cda52;
       cda52: // global
           R1 = _scVYv::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cda54: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVYv::P64;
           _scVWS::I64 = I64[_scVYv::P64 + 24];
           _scVYm::I64 = _scVWS::I64 - I64[_scVYv::P64 + 16];
           I64[Hp - 16] = go_dn_scVYo_info;
           I64[Hp - 8] = _scVYm::I64;
           I64[Hp] = 4 - _scVYm::I64;
           R2 = _scVWS::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_scVYo_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVYv_info" {
     sat_scVYv_info:
         const sat_scVYv_entry;
         const 8589934592;
         const 4294967316;
         const ScWiZ_srt+1024;
 },
 sat_scVYl_entry() //  [R1]
         { []
         }
     {offset
       cda5a: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cda5b; else goto cda5c;
       cda5b: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cda5c: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVYl_info" {
     sat_scVYl_info:
         const sat_scVYl_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1024;
 },
 sat_scVYx_entry() //  [R1]
         { []
         }
     {offset
       cda5l: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cda5m; else goto cda5n;
       cda5m: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cda5n: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVYx_info" {
     sat_scVYx_info:
         const sat_scVYx_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1024;
 },
 sat_scVYH_entry() //  [R1]
         { []
         }
     {offset
       cda5Q: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cda5R; else goto cda5S;
       cda5R: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cda5S: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_scVYC_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVYH_info" {
     sat_scVYH_info:
         const sat_scVYH_entry;
         const 8589934593;
         const 4294967311;
         const ScWiZ_srt+1024;
 },
 sat_scVYF_entry() //  [R1]
         { []
         }
     {offset
       cda5X: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cda5Y; else goto cda5Z;
       cda5Y: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cda5Z: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVYF_info" {
     sat_scVYF_info:
         const sat_scVYF_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1024;
 },
 sat_scVYI_entry() //  [R1]
         { []
         }
     {offset
       cda65: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cda66; else goto cda67;
       cda66: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cda67: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVYI_info" {
     sat_scVYI_info:
         const sat_scVYI_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1024;
 },
 go_up_scVYC_entry() //  [R1, R2]
         { []
         }
     {offset
       cda6b: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cda6f; else goto cda6e;
       cda6f: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cda6e: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto cda69; else goto cda6a;
       cda69: // global
           _scVYA::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_scVYH_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _scVYA::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_scVYF_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cda6a: // global
           I64[Hp - 80] = sat_scVYI_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _cda6h::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _cda6h::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_scVYC_info" {
     go_up_scVYC_info:
         const go_up_scVYC_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const ScWiZ_srt+1024;
 },
 sat_scVYJ_entry() //  [R1]
         { []
         }
     {offset
       cda6i: // global
           _scVYJ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cda6j; else goto cda6k;
       cda6k: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cda6m; else goto cda6l;
       cda6m: // global
           HpAlloc = 24;
           goto cda6j;
       cda6j: // global
           R1 = _scVYJ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cda6l: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVYJ::P64;
           _scVWS::I64 = I64[_scVYJ::P64 + 24];
           _scVYA::I64 = _scVWS::I64 - I64[_scVYJ::P64 + 16];
           I64[Hp - 16] = go_up_scVYC_info;
           I64[Hp - 8] = _scVYA::I64;
           I64[Hp] = 4 - _scVYA::I64;
           R2 = _scVWS::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_scVYC_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVYJ_info" {
     sat_scVYJ_info:
         const sat_scVYJ_entry;
         const 8589934592;
         const 4294967316;
         const ScWiZ_srt+1024;
 },
 sat_scVYz_entry() //  [R1]
         { []
         }
     {offset
       cda6r: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cda6s; else goto cda6t;
       cda6s: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cda6t: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVYz_info" {
     sat_scVYz_info:
         const sat_scVYz_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1024;
 },
 sat_scVYL_entry() //  [R1]
         { []
         }
     {offset
       cda6C: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cda6D; else goto cda6E;
       cda6D: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cda6E: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVYL_info" {
     sat_scVYL_info:
         const sat_scVYL_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1024;
 },
 sat_scVYW_entry() //  [R1]
         { []
         }
     {offset
       cda7b: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cda7c; else goto cda7d;
       cda7c: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cda7d: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_scVYR_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVYW_info" {
     sat_scVYW_info:
         const sat_scVYW_entry;
         const 8589934593;
         const 4294967311;
         const ScWiZ_srt+1024;
 },
 sat_scVYU_entry() //  [R1]
         { []
         }
     {offset
       cda7i: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cda7j; else goto cda7k;
       cda7j: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cda7k: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVYU_info" {
     sat_scVYU_info:
         const sat_scVYU_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1024;
 },
 sat_scVYX_entry() //  [R1]
         { []
         }
     {offset
       cda7q: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cda7r; else goto cda7s;
       cda7r: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cda7s: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVYX_info" {
     sat_scVYX_info:
         const sat_scVYX_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1024;
 },
 go_dn_scVYR_entry() //  [R1, R2]
         { []
         }
     {offset
       cda7w: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cda7A; else goto cda7z;
       cda7A: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cda7z: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto cda7u; else goto cda7v;
       cda7u: // global
           _scVYP::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_scVYW_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _scVYP::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_scVYU_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cda7v: // global
           I64[Hp - 80] = sat_scVYX_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _cda7C::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _cda7C::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_scVYR_info" {
     go_dn_scVYR_info:
         const go_dn_scVYR_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const ScWiZ_srt+1024;
 },
 sat_scVYY_entry() //  [R1]
         { []
         }
     {offset
       cda7D: // global
           _scVYY::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cda7E; else goto cda7F;
       cda7F: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cda7H; else goto cda7G;
       cda7H: // global
           HpAlloc = 24;
           goto cda7E;
       cda7E: // global
           R1 = _scVYY::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cda7G: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVYY::P64;
           _scVWS::I64 = I64[_scVYY::P64 + 24];
           _scVYP::I64 = _scVWS::I64 - I64[_scVYY::P64 + 16];
           I64[Hp - 16] = go_dn_scVYR_info;
           I64[Hp - 8] = _scVYP::I64;
           I64[Hp] = 5 - _scVYP::I64;
           R2 = _scVWS::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_scVYR_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVYY_info" {
     sat_scVYY_info:
         const sat_scVYY_entry;
         const 8589934592;
         const 4294967316;
         const ScWiZ_srt+1024;
 },
 sat_scVYO_entry() //  [R1]
         { []
         }
     {offset
       cda7M: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cda7N; else goto cda7O;
       cda7N: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cda7O: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVYO_info" {
     sat_scVYO_info:
         const sat_scVYO_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1024;
 },
 sat_scVZ0_entry() //  [R1]
         { []
         }
     {offset
       cda7X: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cda7Y; else goto cda7Z;
       cda7Y: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cda7Z: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVZ0_info" {
     sat_scVZ0_info:
         const sat_scVZ0_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1024;
 },
 sat_scVZa_entry() //  [R1]
         { []
         }
     {offset
       cda8s: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cda8t; else goto cda8u;
       cda8t: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cda8u: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_scVZ5_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVZa_info" {
     sat_scVZa_info:
         const sat_scVZa_entry;
         const 8589934593;
         const 4294967311;
         const ScWiZ_srt+1024;
 },
 sat_scVZ8_entry() //  [R1]
         { []
         }
     {offset
       cda8z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cda8A; else goto cda8B;
       cda8A: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cda8B: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVZ8_info" {
     sat_scVZ8_info:
         const sat_scVZ8_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1024;
 },
 sat_scVZb_entry() //  [R1]
         { []
         }
     {offset
       cda8H: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cda8I; else goto cda8J;
       cda8I: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cda8J: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVZb_info" {
     sat_scVZb_info:
         const sat_scVZb_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1024;
 },
 go_up_scVZ5_entry() //  [R1, R2]
         { []
         }
     {offset
       cda8N: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cda8R; else goto cda8Q;
       cda8R: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cda8Q: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto cda8L; else goto cda8M;
       cda8L: // global
           _scVZ3::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_scVZa_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _scVZ3::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_scVZ8_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cda8M: // global
           I64[Hp - 80] = sat_scVZb_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _cda8T::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _cda8T::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_scVZ5_info" {
     go_up_scVZ5_info:
         const go_up_scVZ5_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const ScWiZ_srt+1024;
 },
 sat_scVZc_entry() //  [R1]
         { []
         }
     {offset
       cda8U: // global
           _scVZc::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cda8V; else goto cda8W;
       cda8W: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cda8Y; else goto cda8X;
       cda8Y: // global
           HpAlloc = 24;
           goto cda8V;
       cda8V: // global
           R1 = _scVZc::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cda8X: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVZc::P64;
           _scVWS::I64 = I64[_scVZc::P64 + 24];
           _scVZ3::I64 = _scVWS::I64 - I64[_scVZc::P64 + 16];
           I64[Hp - 16] = go_up_scVZ5_info;
           I64[Hp - 8] = _scVZ3::I64;
           I64[Hp] = 5 - _scVZ3::I64;
           R2 = _scVWS::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_scVZ5_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVZc_info" {
     sat_scVZc_info:
         const sat_scVZc_entry;
         const 8589934592;
         const 4294967316;
         const ScWiZ_srt+1024;
 },
 sat_scVZ2_entry() //  [R1]
         { []
         }
     {offset
       cda93: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cda94; else goto cda95;
       cda94: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cda95: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVZ2_info" {
     sat_scVZ2_info:
         const sat_scVZ2_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1024;
 },
 sat_scVZe_entry() //  [R1]
         { []
         }
     {offset
       cda9e: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cda9f; else goto cda9g;
       cda9f: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cda9g: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVZe_info" {
     sat_scVZe_info:
         const sat_scVZe_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1024;
 },
 sat_scVZp_entry() //  [R1]
         { []
         }
     {offset
       cda9N: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cda9O; else goto cda9P;
       cda9O: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cda9P: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_scVZk_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVZp_info" {
     sat_scVZp_info:
         const sat_scVZp_entry;
         const 8589934593;
         const 4294967311;
         const ScWiZ_srt+1024;
 },
 sat_scVZn_entry() //  [R1]
         { []
         }
     {offset
       cda9U: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cda9V; else goto cda9W;
       cda9V: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cda9W: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVZn_info" {
     sat_scVZn_info:
         const sat_scVZn_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1024;
 },
 sat_scVZq_entry() //  [R1]
         { []
         }
     {offset
       cdaa2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdaa3; else goto cdaa4;
       cdaa3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdaa4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVZq_info" {
     sat_scVZq_info:
         const sat_scVZq_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1024;
 },
 go_dn_scVZk_entry() //  [R1, R2]
         { []
         }
     {offset
       cdaa8: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdaac; else goto cdaab;
       cdaac: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdaab: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto cdaa6; else goto cdaa7;
       cdaa6: // global
           _scVZi::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_scVZp_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _scVZi::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_scVZn_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdaa7: // global
           I64[Hp - 80] = sat_scVZq_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _cdaae::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _cdaae::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_scVZk_info" {
     go_dn_scVZk_info:
         const go_dn_scVZk_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const ScWiZ_srt+1024;
 },
 sat_scVZr_entry() //  [R1]
         { []
         }
     {offset
       cdaaf: // global
           _scVZr::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdaag; else goto cdaah;
       cdaah: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdaaj; else goto cdaai;
       cdaaj: // global
           HpAlloc = 24;
           goto cdaag;
       cdaag: // global
           R1 = _scVZr::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdaai: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVZr::P64;
           _scVWS::I64 = I64[_scVZr::P64 + 24];
           _scVZi::I64 = _scVWS::I64 - I64[_scVZr::P64 + 16];
           I64[Hp - 16] = go_dn_scVZk_info;
           I64[Hp - 8] = _scVZi::I64;
           I64[Hp] = 6 - _scVZi::I64;
           R2 = _scVWS::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_scVZk_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVZr_info" {
     sat_scVZr_info:
         const sat_scVZr_entry;
         const 8589934592;
         const 4294967316;
         const ScWiZ_srt+1024;
 },
 sat_scVZh_entry() //  [R1]
         { []
         }
     {offset
       cdaao: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdaap; else goto cdaaq;
       cdaap: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdaaq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVZh_info" {
     sat_scVZh_info:
         const sat_scVZh_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1024;
 },
 sat_scVZt_entry() //  [R1]
         { []
         }
     {offset
       cdaaz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdaaA; else goto cdaaB;
       cdaaA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdaaB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVZt_info" {
     sat_scVZt_info:
         const sat_scVZt_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1024;
 },
 sat_scVZD_entry() //  [R1]
         { []
         }
     {offset
       cdab4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdab5; else goto cdab6;
       cdab5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdab6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_scVZy_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVZD_info" {
     sat_scVZD_info:
         const sat_scVZD_entry;
         const 8589934593;
         const 4294967311;
         const ScWiZ_srt+1024;
 },
 sat_scVZB_entry() //  [R1]
         { []
         }
     {offset
       cdabb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdabc; else goto cdabd;
       cdabc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdabd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVZB_info" {
     sat_scVZB_info:
         const sat_scVZB_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1024;
 },
 sat_scVZE_entry() //  [R1]
         { []
         }
     {offset
       cdabj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdabk; else goto cdabl;
       cdabk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdabl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVZE_info" {
     sat_scVZE_info:
         const sat_scVZE_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1024;
 },
 go_up_scVZy_entry() //  [R1, R2]
         { []
         }
     {offset
       cdabp: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdabt; else goto cdabs;
       cdabt: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdabs: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto cdabn; else goto cdabo;
       cdabn: // global
           _scVZw::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_scVZD_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _scVZw::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_scVZB_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdabo: // global
           I64[Hp - 80] = sat_scVZE_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _cdabv::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _cdabv::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_scVZy_info" {
     go_up_scVZy_info:
         const go_up_scVZy_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const ScWiZ_srt+1024;
 },
 sat_scVZF_entry() //  [R1]
         { []
         }
     {offset
       cdabw: // global
           _scVZF::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdabx; else goto cdaby;
       cdaby: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdabA; else goto cdabz;
       cdabA: // global
           HpAlloc = 24;
           goto cdabx;
       cdabx: // global
           R1 = _scVZF::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdabz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVZF::P64;
           _scVWS::I64 = I64[_scVZF::P64 + 24];
           _scVZw::I64 = _scVWS::I64 - I64[_scVZF::P64 + 16];
           I64[Hp - 16] = go_up_scVZy_info;
           I64[Hp - 8] = _scVZw::I64;
           I64[Hp] = 6 - _scVZw::I64;
           R2 = _scVWS::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_scVZy_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVZF_info" {
     sat_scVZF_info:
         const sat_scVZF_entry;
         const 8589934592;
         const 4294967316;
         const ScWiZ_srt+1024;
 },
 sat_scVZv_entry() //  [R1]
         { []
         }
     {offset
       cdabF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdabG; else goto cdabH;
       cdabG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdabH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVZv_info" {
     sat_scVZv_info:
         const sat_scVZv_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1024;
 },
 sat_scVZH_entry() //  [R1]
         { []
         }
     {offset
       cdabQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdabR; else goto cdabS;
       cdabR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdabS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVZH_info" {
     sat_scVZH_info:
         const sat_scVZH_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1024;
 },
 sat_scVZS_entry() //  [R1]
         { []
         }
     {offset
       cdacp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdacq; else goto cdacr;
       cdacq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdacr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_scVZN_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVZS_info" {
     sat_scVZS_info:
         const sat_scVZS_entry;
         const 8589934593;
         const 4294967311;
         const ScWiZ_srt+1024;
 },
 sat_scVZQ_entry() //  [R1]
         { []
         }
     {offset
       cdacw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdacx; else goto cdacy;
       cdacx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdacy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVZQ_info" {
     sat_scVZQ_info:
         const sat_scVZQ_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1024;
 },
 sat_scVZT_entry() //  [R1]
         { []
         }
     {offset
       cdacE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdacF; else goto cdacG;
       cdacF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdacG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVZT_info" {
     sat_scVZT_info:
         const sat_scVZT_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1024;
 },
 go_dn_scVZN_entry() //  [R1, R2]
         { []
         }
     {offset
       cdacK: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdacO; else goto cdacN;
       cdacO: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdacN: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto cdacI; else goto cdacJ;
       cdacI: // global
           _scVZL::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_scVZS_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _scVZL::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_scVZQ_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdacJ: // global
           I64[Hp - 80] = sat_scVZT_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _cdacQ::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _cdacQ::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_scVZN_info" {
     go_dn_scVZN_info:
         const go_dn_scVZN_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const ScWiZ_srt+1024;
 },
 sat_scVZU_entry() //  [R1]
         { []
         }
     {offset
       cdacR: // global
           _scVZU::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdacS; else goto cdacT;
       cdacT: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdacV; else goto cdacU;
       cdacV: // global
           HpAlloc = 24;
           goto cdacS;
       cdacS: // global
           R1 = _scVZU::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdacU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scVZU::P64;
           _scVWS::I64 = I64[_scVZU::P64 + 24];
           _scVZL::I64 = _scVWS::I64 - I64[_scVZU::P64 + 16];
           I64[Hp - 16] = go_dn_scVZN_info;
           I64[Hp - 8] = _scVZL::I64;
           I64[Hp] = 7 - _scVZL::I64;
           R2 = _scVWS::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_scVZN_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVZU_info" {
     sat_scVZU_info:
         const sat_scVZU_entry;
         const 8589934592;
         const 4294967316;
         const ScWiZ_srt+1024;
 },
 sat_scVZK_entry() //  [R1]
         { []
         }
     {offset
       cdad0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdad1; else goto cdad2;
       cdad1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdad2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVZK_info" {
     sat_scVZK_info:
         const sat_scVZK_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1024;
 },
 sat_scVZW_entry() //  [R1]
         { []
         }
     {offset
       cdadb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdadc; else goto cdadd;
       cdadc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdadd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVZW_info" {
     sat_scVZW_info:
         const sat_scVZW_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1024;
 },
 sat_scW06_entry() //  [R1]
         { []
         }
     {offset
       cdadG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdadH; else goto cdadI;
       cdadH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdadI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_scW01_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW06_info" {
     sat_scW06_info:
         const sat_scW06_entry;
         const 8589934593;
         const 4294967311;
         const ScWiZ_srt+1024;
 },
 sat_scW04_entry() //  [R1]
         { []
         }
     {offset
       cdadN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdadO; else goto cdadP;
       cdadO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdadP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW04_info" {
     sat_scW04_info:
         const sat_scW04_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1024;
 },
 sat_scW07_entry() //  [R1]
         { []
         }
     {offset
       cdadV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdadW; else goto cdadX;
       cdadW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdadX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW07_info" {
     sat_scW07_info:
         const sat_scW07_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1024;
 },
 go_up_scW01_entry() //  [R1, R2]
         { []
         }
     {offset
       cdae1: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdae5; else goto cdae4;
       cdae5: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdae4: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto cdadZ; else goto cdae0;
       cdadZ: // global
           _scVZZ::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_scW06_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _scVZZ::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_scW04_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdae0: // global
           I64[Hp - 80] = sat_scW07_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _cdae7::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _cdae7::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_scW01_info" {
     go_up_scW01_info:
         const go_up_scW01_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const ScWiZ_srt+1024;
 },
 sat_scW08_entry() //  [R1]
         { []
         }
     {offset
       cdae8: // global
           _scW08::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdae9; else goto cdaea;
       cdaea: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdaec; else goto cdaeb;
       cdaec: // global
           HpAlloc = 24;
           goto cdae9;
       cdae9: // global
           R1 = _scW08::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdaeb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scW08::P64;
           _scVWS::I64 = I64[_scW08::P64 + 24];
           _scVZZ::I64 = _scVWS::I64 - I64[_scW08::P64 + 16];
           I64[Hp - 16] = go_up_scW01_info;
           I64[Hp - 8] = _scVZZ::I64;
           I64[Hp] = 7 - _scVZZ::I64;
           R2 = _scVWS::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_scW01_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW08_info" {
     sat_scW08_info:
         const sat_scW08_entry;
         const 8589934592;
         const 4294967316;
         const ScWiZ_srt+1024;
 },
 sat_scVZY_entry() //  [R1]
         { []
         }
     {offset
       cdaeh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdaei; else goto cdaej;
       cdaei: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdaej: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scVZY_info" {
     sat_scVZY_info:
         const sat_scVZY_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1024;
 },
 sat_scW0a_entry() //  [R1]
         { []
         }
     {offset
       cdaes: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdaet; else goto cdaeu;
       cdaet: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdaeu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW0a_info" {
     sat_scW0a_info:
         const sat_scW0a_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1024;
 },
 sat_scW0l_entry() //  [R1]
         { []
         }
     {offset
       cdaf1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdaf2; else goto cdaf3;
       cdaf2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdaf3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_scW0g_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW0l_info" {
     sat_scW0l_info:
         const sat_scW0l_entry;
         const 8589934593;
         const 4294967311;
         const ScWiZ_srt+1024;
 },
 sat_scW0j_entry() //  [R1]
         { []
         }
     {offset
       cdaf8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdaf9; else goto cdafa;
       cdaf9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdafa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW0j_info" {
     sat_scW0j_info:
         const sat_scW0j_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1024;
 },
 sat_scW0m_entry() //  [R1]
         { []
         }
     {offset
       cdafg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdafh; else goto cdafi;
       cdafh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdafi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW0m_info" {
     sat_scW0m_info:
         const sat_scW0m_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1024;
 },
 go_dn_scW0g_entry() //  [R1, R2]
         { []
         }
     {offset
       cdafm: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdafq; else goto cdafp;
       cdafq: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdafp: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto cdafk; else goto cdafl;
       cdafk: // global
           _scW0e::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_scW0l_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _scW0e::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_scW0j_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdafl: // global
           I64[Hp - 80] = sat_scW0m_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _cdafs::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _cdafs::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_scW0g_info" {
     go_dn_scW0g_info:
         const go_dn_scW0g_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const ScWiZ_srt+1024;
 },
 sat_scW0n_entry() //  [R1]
         { []
         }
     {offset
       cdaft: // global
           _scW0n::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdafu; else goto cdafv;
       cdafv: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdafx; else goto cdafw;
       cdafx: // global
           HpAlloc = 24;
           goto cdafu;
       cdafu: // global
           R1 = _scW0n::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdafw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scW0n::P64;
           _scVWS::I64 = I64[_scW0n::P64 + 24];
           _scW0e::I64 = _scVWS::I64 - I64[_scW0n::P64 + 16];
           I64[Hp - 16] = go_dn_scW0g_info;
           I64[Hp - 8] = _scW0e::I64;
           I64[Hp] = 8 - _scW0e::I64;
           R2 = _scVWS::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_scW0g_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW0n_info" {
     sat_scW0n_info:
         const sat_scW0n_entry;
         const 8589934592;
         const 4294967316;
         const ScWiZ_srt+1024;
 },
 sat_scW0d_entry() //  [R1]
         { []
         }
     {offset
       cdafC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdafD; else goto cdafE;
       cdafD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdafE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW0d_info" {
     sat_scW0d_info:
         const sat_scW0d_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1024;
 },
 sat_scW0p_entry() //  [R1]
         { []
         }
     {offset
       cdafN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdafO; else goto cdafP;
       cdafO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdafP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW0p_info" {
     sat_scW0p_info:
         const sat_scW0p_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1024;
 },
 sat_scW0z_entry() //  [R1]
         { []
         }
     {offset
       cdagi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdagj; else goto cdagk;
       cdagj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdagk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_scW0u_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW0z_info" {
     sat_scW0z_info:
         const sat_scW0z_entry;
         const 8589934593;
         const 4294967311;
         const ScWiZ_srt+1024;
 },
 sat_scW0x_entry() //  [R1]
         { []
         }
     {offset
       cdagp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdagq; else goto cdagr;
       cdagq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdagr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW0x_info" {
     sat_scW0x_info:
         const sat_scW0x_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1024;
 },
 sat_scW0A_entry() //  [R1]
         { []
         }
     {offset
       cdagx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdagy; else goto cdagz;
       cdagy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdagz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW0A_info" {
     sat_scW0A_info:
         const sat_scW0A_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1024;
 },
 go_up_scW0u_entry() //  [R1, R2]
         { []
         }
     {offset
       cdagD: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdagH; else goto cdagG;
       cdagH: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdagG: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto cdagB; else goto cdagC;
       cdagB: // global
           _scW0s::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_scW0z_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _scW0s::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_scW0x_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdagC: // global
           I64[Hp - 80] = sat_scW0A_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _cdagJ::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _cdagJ::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_scW0u_info" {
     go_up_scW0u_info:
         const go_up_scW0u_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const ScWiZ_srt+1024;
 },
 sat_scW0B_entry() //  [R1]
         { []
         }
     {offset
       cdagK: // global
           _scW0B::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdagL; else goto cdagM;
       cdagM: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdagO; else goto cdagN;
       cdagO: // global
           HpAlloc = 24;
           goto cdagL;
       cdagL: // global
           R1 = _scW0B::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdagN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scW0B::P64;
           _scVWS::I64 = I64[_scW0B::P64 + 24];
           _scW0s::I64 = _scVWS::I64 - I64[_scW0B::P64 + 16];
           I64[Hp - 16] = go_up_scW0u_info;
           I64[Hp - 8] = _scW0s::I64;
           I64[Hp] = 8 - _scW0s::I64;
           R2 = _scVWS::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_scW0u_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW0B_info" {
     sat_scW0B_info:
         const sat_scW0B_entry;
         const 8589934592;
         const 4294967316;
         const ScWiZ_srt+1024;
 },
 sat_scW0r_entry() //  [R1]
         { []
         }
     {offset
       cdagT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdagU; else goto cdagV;
       cdagU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdagV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW0r_info" {
     sat_scW0r_info:
         const sat_scW0r_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1024;
 },
 sat_scW0D_entry() //  [R1]
         { []
         }
     {offset
       cdah4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdah5; else goto cdah6;
       cdah5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdah6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW0D_info" {
     sat_scW0D_info:
         const sat_scW0D_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1024;
 },
 GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFromThenTo_entry() //  [R2,
                                                                 R3, R4]
         { []
         }
     {offset
       cdahk: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdahl; else goto cdahm;
       cdahl: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFromThenTo_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdahm: // global
           I64[Sp - 24] = block_cdah7_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udalp; else goto cdah8;
       udalp: // global
           call _cdah7(R1) args: 0, res: 0, upd: 0;
       cdah8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFromThenTo_info" {
     GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFromThenTo_info:
         const GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFromThenTo_entry;
         const 0;
         const 36028801313931278;
         const 12884901911;
         const ScWiZ_srt+1024;
 },
 _cdah7() //  [R1]
         { []
         }
     {offset
       cdah7: // global
           _scVWN::P64 = P64[Sp + 8];
           switch [0 .. 7] (%MO_UU_Conv_W32_W64(I32[I64[R1 - 1] + 20])) {
               case 0 : goto cdahb;
               case 1 : goto cdahc;
               case 2 : goto cdahd;
               case 3 : goto cdahe;
               case 4 : goto cdahf;
               case 5 : goto cdahg;
               case 6 : goto cdahh;
               case 7 : goto cdahi;
           }
       cdahi: // global
           _scVWQ::I64 = 8;
           goto scVWP;
       cdahh: // global
           _scVWQ::I64 = 7;
           goto scVWP;
       cdahg: // global
           _scVWQ::I64 = 6;
           goto scVWP;
       cdahf: // global
           _scVWQ::I64 = 5;
           goto scVWP;
       cdahe: // global
           _scVWQ::I64 = 4;
           goto scVWP;
       cdahd: // global
           _scVWQ::I64 = 2;
           goto scVWP;
       cdahc: // global
           _scVWQ::I64 = 1;
           goto scVWP;
       cdahb: // global
           _scVWQ::I64 = 0;
           goto scVWP;
       scVWP: // global
           I64[Sp] = block_cdahn_info;
           R1 = _scVWN::P64;
           I64[Sp + 8] = _scVWQ::I64;
           if (R1 & 7 != 0) goto udalo; else goto cdakp;
       udalo: // global
           call _cdahn(R1) args: 0, res: 0, upd: 0;
       cdakp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdah7_info" {
     block_cdah7_info:
         const _cdah7;
         const 2;
         const 4294967326;
         const ScWiZ_srt+1024;
 },
 _cdahn() //  [R1]
         { []
         }
     {offset
       cdahn: // global
           _scVWO::P64 = P64[Sp + 16];
           switch [0 .. 7] (%MO_UU_Conv_W32_W64(I32[I64[R1 - 1] + 20])) {
               case 0 : goto cdakv;
               case 1 : goto cdakz;
               case 2 : goto cdakD;
               case 3 : goto cdakH;
               case 4 : goto cdakL;
               case 5 : goto cdakP;
               case 6 : goto cdakT;
               case 7 : goto cdakX;
           }
       cdakX: // global
           _scVWS::I64 = 8;
           goto scVWR;
       cdakT: // global
           _scVWS::I64 = 7;
           goto scVWR;
       cdakP: // global
           _scVWS::I64 = 6;
           goto scVWR;
       cdakL: // global
           _scVWS::I64 = 5;
           goto scVWR;
       cdakH: // global
           _scVWS::I64 = 4;
           goto scVWR;
       cdakD: // global
           _scVWS::I64 = 2;
           goto scVWR;
       cdakz: // global
           _scVWS::I64 = 1;
           goto scVWR;
       cdakv: // global
           _scVWS::I64 = 0;
           goto scVWR;
       scVWR: // global
           I64[Sp] = block_cd9Wa_info;
           R1 = _scVWO::P64;
           I64[Sp + 16] = _scVWS::I64;
           if (R1 & 7 != 0) goto udalq; else goto cd9Wb;
       udalq: // global
           call _cd9Wa(R1) args: 0, res: 0, upd: 0;
       cd9Wb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdahn_info" {
     block_cdahn_info:
         const _cdahn;
         const 66;
         const 4294967326;
         const ScWiZ_srt+1024;
 },
 _cd9Wa() //  [R1]
         { []
         }
     {offset
       cd9Wa: // global
           _scVWQ::I64 = I64[Sp + 8];
           _scVWS::I64 = I64[Sp + 16];
           switch [0 .. 7] (%MO_UU_Conv_W32_W64(I32[I64[R1 - 1] + 20])) {
               case 0 : goto cdahr;
               case 1 : goto cdahO;
               case 2 : goto cdaib;
               case 3 : goto cdaiy;
               case 4 : goto cdaiV;
               case 5 : goto cdaji;
               case 6 : goto cdajF;
               case 7 : goto cdak2;
           }
       cdak2: // global
           Hp = Hp + 80;
           _scVWT::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cdak5; else goto cdak4;
       cdak4: // global
           if (%MO_S_Lt_W64(_scVWS::I64,
                            _scVWQ::I64)) goto cdakf; else goto cdako;
       cdakf: // global
           if (%MO_S_Le_W64(8, _scVWS::I64)) goto cdak8; else goto cdakd;
       cdak8: // global
           I64[Hp - 72] = sat_scW0n_info;
           I64[Hp - 56] = _scVWQ::I64;
           I64[Hp - 48] = _scVWS::I64;
           I64[Hp - 40] = sat_scW0d_info;
           I64[Hp - 24] = _scVWQ::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdakd: // global
           if (%MO_S_Gt_W64(8, _scVWQ::I64)) goto cdakm; else goto cdakb;
       cdakb: // global
           I64[Hp - 72] = sat_scW0p_info;
           I64[Hp - 56] = _scVWQ::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _cdak9::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _cdak9::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdako: // global
           if (%MO_S_Ge_W64(8, _scVWS::I64)) goto cdaki; else goto cdakn;
       cdaki: // global
           I64[Hp - 72] = sat_scW0B_info;
           I64[Hp - 56] = _scVWQ::I64;
           I64[Hp - 48] = _scVWS::I64;
           I64[Hp - 40] = sat_scW0r_info;
           I64[Hp - 24] = _scVWQ::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdakn: // global
           if (%MO_S_Lt_W64(8, _scVWQ::I64)) goto cdakm; else goto cdakl;
       cdakl: // global
           I64[Hp - 72] = sat_scW0D_info;
           I64[Hp - 56] = _scVWQ::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _cdakj::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _cdakj::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdajF: // global
           Hp = Hp + 80;
           _scVWT::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cdak5; else goto cdajH;
       cdajH: // global
           if (%MO_S_Lt_W64(_scVWS::I64,
                            _scVWQ::I64)) goto cdajS; else goto cdak1;
       cdajS: // global
           if (%MO_S_Le_W64(7, _scVWS::I64)) goto cdajL; else goto cdajQ;
       cdajL: // global
           I64[Hp - 72] = sat_scVZU_info;
           I64[Hp - 56] = _scVWQ::I64;
           I64[Hp - 48] = _scVWS::I64;
           I64[Hp - 40] = sat_scVZK_info;
           I64[Hp - 24] = _scVWQ::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdajQ: // global
           if (%MO_S_Gt_W64(7, _scVWQ::I64)) goto cdakm; else goto cdajO;
       cdajO: // global
           I64[Hp - 72] = sat_scVZW_info;
           I64[Hp - 56] = _scVWQ::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _cdajM::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _cdajM::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdak1: // global
           if (%MO_S_Ge_W64(7, _scVWS::I64)) goto cdajV; else goto cdak0;
       cdajV: // global
           I64[Hp - 72] = sat_scW08_info;
           I64[Hp - 56] = _scVWQ::I64;
           I64[Hp - 48] = _scVWS::I64;
           I64[Hp - 40] = sat_scVZY_info;
           I64[Hp - 24] = _scVWQ::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdak0: // global
           if (%MO_S_Lt_W64(7, _scVWQ::I64)) goto cdakm; else goto cdajY;
       cdajY: // global
           I64[Hp - 72] = sat_scW0a_info;
           I64[Hp - 56] = _scVWQ::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _cdajW::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _cdajW::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdaji: // global
           Hp = Hp + 80;
           _scVWT::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cdak5; else goto cdajk;
       cdajk: // global
           if (%MO_S_Lt_W64(_scVWS::I64,
                            _scVWQ::I64)) goto cdajv; else goto cdajE;
       cdajv: // global
           if (%MO_S_Le_W64(6, _scVWS::I64)) goto cdajo; else goto cdajt;
       cdajo: // global
           I64[Hp - 72] = sat_scVZr_info;
           I64[Hp - 56] = _scVWQ::I64;
           I64[Hp - 48] = _scVWS::I64;
           I64[Hp - 40] = sat_scVZh_info;
           I64[Hp - 24] = _scVWQ::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdajt: // global
           if (%MO_S_Gt_W64(6, _scVWQ::I64)) goto cdakm; else goto cdajr;
       cdajr: // global
           I64[Hp - 72] = sat_scVZt_info;
           I64[Hp - 56] = _scVWQ::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _cdajp::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _cdajp::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdajE: // global
           if (%MO_S_Ge_W64(6, _scVWS::I64)) goto cdajy; else goto cdajD;
       cdajy: // global
           I64[Hp - 72] = sat_scVZF_info;
           I64[Hp - 56] = _scVWQ::I64;
           I64[Hp - 48] = _scVWS::I64;
           I64[Hp - 40] = sat_scVZv_info;
           I64[Hp - 24] = _scVWQ::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdajD: // global
           if (%MO_S_Lt_W64(6, _scVWQ::I64)) goto cdakm; else goto cdajB;
       cdajB: // global
           I64[Hp - 72] = sat_scVZH_info;
           I64[Hp - 56] = _scVWQ::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _cdajz::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _cdajz::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdaiV: // global
           Hp = Hp + 80;
           _scVWT::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cdak5; else goto cdaiX;
       cdaiX: // global
           if (%MO_S_Lt_W64(_scVWS::I64,
                            _scVWQ::I64)) goto cdaj8; else goto cdajh;
       cdaj8: // global
           if (%MO_S_Le_W64(5, _scVWS::I64)) goto cdaj1; else goto cdaj6;
       cdaj1: // global
           I64[Hp - 72] = sat_scVYY_info;
           I64[Hp - 56] = _scVWQ::I64;
           I64[Hp - 48] = _scVWS::I64;
           I64[Hp - 40] = sat_scVYO_info;
           I64[Hp - 24] = _scVWQ::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdaj6: // global
           if (%MO_S_Gt_W64(5, _scVWQ::I64)) goto cdakm; else goto cdaj4;
       cdaj4: // global
           I64[Hp - 72] = sat_scVZ0_info;
           I64[Hp - 56] = _scVWQ::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _cdaj2::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _cdaj2::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdajh: // global
           if (%MO_S_Ge_W64(5, _scVWS::I64)) goto cdajb; else goto cdajg;
       cdajb: // global
           I64[Hp - 72] = sat_scVZc_info;
           I64[Hp - 56] = _scVWQ::I64;
           I64[Hp - 48] = _scVWS::I64;
           I64[Hp - 40] = sat_scVZ2_info;
           I64[Hp - 24] = _scVWQ::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdajg: // global
           if (%MO_S_Lt_W64(5, _scVWQ::I64)) goto cdakm; else goto cdaje;
       cdaje: // global
           I64[Hp - 72] = sat_scVZe_info;
           I64[Hp - 56] = _scVWQ::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _cdajc::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _cdajc::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdaiy: // global
           Hp = Hp + 80;
           _scVWT::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cdak5; else goto cdaiA;
       cdaiA: // global
           if (%MO_S_Lt_W64(_scVWS::I64,
                            _scVWQ::I64)) goto cdaiL; else goto cdaiU;
       cdaiL: // global
           if (%MO_S_Le_W64(4, _scVWS::I64)) goto cdaiE; else goto cdaiJ;
       cdaiE: // global
           I64[Hp - 72] = sat_scVYv_info;
           I64[Hp - 56] = _scVWQ::I64;
           I64[Hp - 48] = _scVWS::I64;
           I64[Hp - 40] = sat_scVYl_info;
           I64[Hp - 24] = _scVWQ::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdaiJ: // global
           if (%MO_S_Gt_W64(4, _scVWQ::I64)) goto cdakm; else goto cdaiH;
       cdaiH: // global
           I64[Hp - 72] = sat_scVYx_info;
           I64[Hp - 56] = _scVWQ::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _cdaiF::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _cdaiF::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdaiU: // global
           if (%MO_S_Ge_W64(4, _scVWS::I64)) goto cdaiO; else goto cdaiT;
       cdaiO: // global
           I64[Hp - 72] = sat_scVYJ_info;
           I64[Hp - 56] = _scVWQ::I64;
           I64[Hp - 48] = _scVWS::I64;
           I64[Hp - 40] = sat_scVYz_info;
           I64[Hp - 24] = _scVWQ::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdaiT: // global
           if (%MO_S_Lt_W64(4, _scVWQ::I64)) goto cdakm; else goto cdaiR;
       cdaiR: // global
           I64[Hp - 72] = sat_scVYL_info;
           I64[Hp - 56] = _scVWQ::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _cdaiP::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _cdaiP::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdaib: // global
           Hp = Hp + 80;
           _scVWT::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cdak5; else goto cdaid;
       cdaid: // global
           if (%MO_S_Lt_W64(_scVWS::I64,
                            _scVWQ::I64)) goto cdaio; else goto cdaix;
       cdaio: // global
           if (%MO_S_Le_W64(2, _scVWS::I64)) goto cdaih; else goto cdaim;
       cdaih: // global
           I64[Hp - 72] = sat_scVY2_info;
           I64[Hp - 56] = _scVWQ::I64;
           I64[Hp - 48] = _scVWS::I64;
           I64[Hp - 40] = sat_scVXS_info;
           I64[Hp - 24] = _scVWQ::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdaim: // global
           if (%MO_S_Gt_W64(2, _scVWQ::I64)) goto cdakm; else goto cdaik;
       cdaik: // global
           I64[Hp - 72] = sat_scVY4_info;
           I64[Hp - 56] = _scVWQ::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _cdaii::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _cdaii::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdaix: // global
           if (%MO_S_Ge_W64(2, _scVWS::I64)) goto cdair; else goto cdaiw;
       cdair: // global
           I64[Hp - 72] = sat_scVYg_info;
           I64[Hp - 56] = _scVWQ::I64;
           I64[Hp - 48] = _scVWS::I64;
           I64[Hp - 40] = sat_scVY6_info;
           I64[Hp - 24] = _scVWQ::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdaiw: // global
           if (%MO_S_Lt_W64(2, _scVWQ::I64)) goto cdakm; else goto cdaiu;
       cdaiu: // global
           I64[Hp - 72] = sat_scVYi_info;
           I64[Hp - 56] = _scVWQ::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _cdais::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _cdais::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdahO: // global
           Hp = Hp + 80;
           _scVWT::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cdak5; else goto cdahQ;
       cdahQ: // global
           if (%MO_S_Lt_W64(_scVWS::I64,
                            _scVWQ::I64)) goto cdai1; else goto cdaia;
       cdai1: // global
           if (%MO_S_Le_W64(1, _scVWS::I64)) goto cdahU; else goto cdahZ;
       cdahU: // global
           I64[Hp - 72] = sat_scVXz_info;
           I64[Hp - 56] = _scVWQ::I64;
           I64[Hp - 48] = _scVWS::I64;
           I64[Hp - 40] = sat_scVXp_info;
           I64[Hp - 24] = _scVWQ::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdahZ: // global
           if (%MO_S_Gt_W64(1, _scVWQ::I64)) goto cdakm; else goto cdahX;
       cdahX: // global
           I64[Hp - 72] = sat_scVXB_info;
           I64[Hp - 56] = _scVWQ::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _cdahV::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _cdahV::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdaia: // global
           if (%MO_S_Ge_W64(1, _scVWS::I64)) goto cdai4; else goto cdai9;
       cdai4: // global
           I64[Hp - 72] = sat_scVXN_info;
           I64[Hp - 56] = _scVWQ::I64;
           I64[Hp - 48] = _scVWS::I64;
           I64[Hp - 40] = sat_scVXD_info;
           I64[Hp - 24] = _scVWQ::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdai9: // global
           if (%MO_S_Lt_W64(1, _scVWQ::I64)) goto cdakm; else goto cdai7;
       cdai7: // global
           I64[Hp - 72] = sat_scVXP_info;
           I64[Hp - 56] = _scVWQ::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _cdai5::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _cdai5::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdahr: // global
           Hp = Hp + 80;
           _scVWT::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cdak5; else goto cdaht;
       cdak5: // global
           HpAlloc = 80;
           R1 = _scVWT::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdaht: // global
           if (%MO_S_Lt_W64(_scVWS::I64,
                            _scVWQ::I64)) goto cdahE; else goto cdahN;
       cdahE: // global
           if (%MO_S_Le_W64(0, _scVWS::I64)) goto cdahx; else goto cdahC;
       cdahx: // global
           I64[Hp - 72] = sat_scVX6_info;
           I64[Hp - 56] = _scVWQ::I64;
           I64[Hp - 48] = _scVWS::I64;
           I64[Hp - 40] = sat_scVWW_info;
           I64[Hp - 24] = _scVWQ::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdahC: // global
           if (%MO_S_Gt_W64(0, _scVWQ::I64)) goto cdakm; else goto cdahA;
       cdahA: // global
           I64[Hp - 72] = sat_scVX8_info;
           I64[Hp - 56] = _scVWQ::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _cdahy::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _cdahy::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdahN: // global
           if (%MO_S_Ge_W64(0, _scVWS::I64)) goto cdahH; else goto cdahM;
       cdahH: // global
           I64[Hp - 72] = sat_scVXk_info;
           I64[Hp - 56] = _scVWQ::I64;
           I64[Hp - 48] = _scVWS::I64;
           I64[Hp - 40] = sat_scVXa_info;
           I64[Hp - 24] = _scVWQ::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdahM: // global
           if (%MO_S_Lt_W64(0, _scVWQ::I64)) goto cdakm; else goto cdahK;
       cdakm: // global
           Hp = Hp - 80;
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdahK: // global
           I64[Hp - 72] = sat_scVXm_info;
           I64[Hp - 56] = _scVWQ::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _cdahI::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _cdahI::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cd9Wa_info" {
     block_cd9Wa_info:
         const _cd9Wa;
         const 194;
         const 4294967326;
         const ScWiZ_srt+1024;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:59.684404927 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoHeapProfile_closure" {
     GHC.RTS.Flags.$fEnumDoHeapProfile_closure:
         const GHC.Enum.C:Enum_con_info;
         const GHC.RTS.Flags.$fEnumDoHeapProfile_$csucc_closure+1;
         const GHC.RTS.Flags.$fEnumDoHeapProfile_$cpred_closure+1;
         const GHC.RTS.Flags.$fEnumDoHeapProfile_$ctoEnum_closure+1;
         const GHC.RTS.Flags.$fEnumDoHeapProfile_$cfromEnum_closure+1;
         const GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFrom_closure+1;
         const GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFromThen_closure+2;
         const GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFromTo_closure+2;
         const GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFromThenTo_closure+3;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:59.686928199 UTC

[section ""data" . lvl98_rcV8q_closure" {
     lvl98_rcV8q_closure:
         const lvl98_rcV8q_info;
         const 0;
         const 0;
         const 0;
 },
 lvl98_rcV8q_entry() //  [R1]
         { []
         }
     {offset
       cdawP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdawQ; else goto cdawR;
       cdawQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdawR: // global
           (_cdawM::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdawM::I64 == 0) goto cdawO; else goto cdawN;
       cdawO: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdawN: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdawM::I64;
           R2 = 5;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl98_rcV8q_info" {
     lvl98_rcV8q_info:
         const lvl98_rcV8q_entry;
         const 0;
         const 4294967317;
         const ScWiZ_srt+1216;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:59.692274658 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoCostCentres_$csucc_closure" {
     GHC.RTS.Flags.$fEnumDoCostCentres_$csucc_closure:
         const GHC.RTS.Flags.$fEnumDoCostCentres_$csucc_info;
         const 0;
 },
 GHC.RTS.Flags.$fEnumDoCostCentres_$csucc_entry() //  [R2]
         { []
         }
     {offset
       cdaxd: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdaxe; else goto cdaxf;
       cdaxe: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoCostCentres_$csucc_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdaxf: // global
           I64[Sp - 8] = block_cdax3_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udaxy; else goto cdax4;
       udaxy: // global
           call _cdax3(R1) args: 0, res: 0, upd: 0;
       cdax4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoCostCentres_$csucc_info" {
     GHC.RTS.Flags.$fEnumDoCostCentres_$csucc_info:
         const GHC.RTS.Flags.$fEnumDoCostCentres_$csucc_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const ScWiZ_srt+1224;
 },
 _cdax3() //  [R1]
         { []
         }
     {offset
       cdax3: // global
           _cdaxc::P64 = R1 & 7;
           if (_cdaxc::P64 < 4) goto udaxv; else goto udaxx;
       udaxv: // global
           if (_cdaxc::P64 < 3) goto udaxw; else goto cdax9;
       udaxw: // global
           if (_cdaxc::P64 < 2) goto cdax7; else goto cdax8;
       cdax7: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdax8: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdax9: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       udaxx: // global
           if (_cdaxc::P64 < 5) goto cdaxa; else goto cdaxb;
       cdaxa: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdaxb: // global
           R1 = lvl98_rcV8q_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdax3_info" {
     block_cdax3_info:
         const _cdax3;
         const 0;
         const 4294967326;
         const ScWiZ_srt+1232;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:59.699578875 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoCostCentres_go4_closure" {
     GHC.RTS.Flags.$fEnumDoCostCentres_go4_closure:
         const GHC.RTS.Flags.$fEnumDoCostCentres_go4_info;
         const 0;
 },
 sat_scW0N_entry() //  [R1]
         { []
         }
     {offset
       cday0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cday1; else goto cday2;
       cday1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cday2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scW0L::I64 = I64[R1 + 16];
           if (_scW0L::I64 != 0) goto cdaxY; else goto cdaxZ;
       cdaxY: // global
           R2 = _scW0L::I64 + 1;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumDoCostCentres_go4_entry(R2) args: 24, res: 0, upd: 24;
       cdaxZ: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW0N_info" {
     sat_scW0N_info:
         const sat_scW0N_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1240;
 },
 sat_scW0K_entry() //  [R1]
         { []
         }
     {offset
       cdayh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdayi; else goto cdayj;
       cdayi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdayj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scW0J::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scW0J::I64, 3)) goto udayk; else goto udayn;
       udayk: // global
           if (%MO_S_Lt_W64(_scW0J::I64, 1)) goto udayl; else goto udaym;
       udayl: // global
           if (%MO_S_Lt_W64(_scW0J::I64, 0)) goto cdayb; else goto cdayc;
       cdayc: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udaym: // global
           if (%MO_S_Lt_W64(_scW0J::I64, 2)) goto cdayd; else goto cdaye;
       cdayd: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdaye: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udayn: // global
           if (%MO_S_Ge_W64(_scW0J::I64, 5)) goto cdayb; else goto udayo;
       cdayb: // global
           R2 = _scW0J::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udayo: // global
           if (%MO_S_Lt_W64(_scW0J::I64, 4)) goto cdayf; else goto cdayg;
       cdayf: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdayg: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW0K_info" {
     sat_scW0K_info:
         const sat_scW0K_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1216;
 },
 GHC.RTS.Flags.$fEnumDoCostCentres_go4_entry() //  [R2]
         { []
         }
     {offset
       cdayq: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdayu; else goto cdayt;
       cdayu: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoCostCentres_go4_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdayt: // global
           I64[Hp - 64] = sat_scW0N_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_scW0K_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoCostCentres_go4_info" {
     GHC.RTS.Flags.$fEnumDoCostCentres_go4_info:
         const GHC.RTS.Flags.$fEnumDoCostCentres_go4_entry;
         const 0;
         const 38654705678;
         const 4294967300;
         const ScWiZ_srt+1216;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:59.709787574 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoCostCentres_go3_closure" {
     GHC.RTS.Flags.$fEnumDoCostCentres_go3_closure:
         const GHC.RTS.Flags.$fEnumDoCostCentres_go3_info;
         const 0;
 },
 sat_scW0T_entry() //  [R1]
         { []
         }
     {offset
       cdaz2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdaz3; else goto cdaz4;
       cdaz3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdaz4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scW0R::I64 = I64[R1 + 16];
           if (_scW0R::I64 != 1) goto cdaz0; else goto cdaz1;
       cdaz0: // global
           R2 = _scW0R::I64 + 1;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumDoCostCentres_go3_entry(R2) args: 24, res: 0, upd: 24;
       cdaz1: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW0T_info" {
     sat_scW0T_info:
         const sat_scW0T_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1248;
 },
 sat_scW0Q_entry() //  [R1]
         { []
         }
     {offset
       cdazj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdazk; else goto cdazl;
       cdazk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdazl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scW0P::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scW0P::I64, 3)) goto udazm; else goto udazp;
       udazm: // global
           if (%MO_S_Lt_W64(_scW0P::I64, 1)) goto udazn; else goto udazo;
       udazn: // global
           if (%MO_S_Lt_W64(_scW0P::I64, 0)) goto cdazd; else goto cdaze;
       cdaze: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udazo: // global
           if (%MO_S_Lt_W64(_scW0P::I64, 2)) goto cdazf; else goto cdazg;
       cdazf: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdazg: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udazp: // global
           if (%MO_S_Ge_W64(_scW0P::I64, 5)) goto cdazd; else goto udazq;
       cdazd: // global
           R2 = _scW0P::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udazq: // global
           if (%MO_S_Lt_W64(_scW0P::I64, 4)) goto cdazh; else goto cdazi;
       cdazh: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdazi: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW0Q_info" {
     sat_scW0Q_info:
         const sat_scW0Q_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1216;
 },
 GHC.RTS.Flags.$fEnumDoCostCentres_go3_entry() //  [R2]
         { []
         }
     {offset
       cdazs: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdazw; else goto cdazv;
       cdazw: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoCostCentres_go3_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdazv: // global
           I64[Hp - 64] = sat_scW0T_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_scW0Q_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoCostCentres_go3_info" {
     GHC.RTS.Flags.$fEnumDoCostCentres_go3_info:
         const GHC.RTS.Flags.$fEnumDoCostCentres_go3_entry;
         const 0;
         const 73014444046;
         const 4294967300;
         const ScWiZ_srt+1216;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:59.719044795 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoCostCentres_go2_closure" {
     GHC.RTS.Flags.$fEnumDoCostCentres_go2_closure:
         const GHC.RTS.Flags.$fEnumDoCostCentres_go2_info;
         const 0;
 },
 sat_scW0Z_entry() //  [R1]
         { []
         }
     {offset
       cdaA4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdaA5; else goto cdaA6;
       cdaA5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdaA6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scW0X::I64 = I64[R1 + 16];
           if (_scW0X::I64 != 2) goto cdaA2; else goto cdaA3;
       cdaA2: // global
           R2 = _scW0X::I64 + 1;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumDoCostCentres_go2_entry(R2) args: 24, res: 0, upd: 24;
       cdaA3: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW0Z_info" {
     sat_scW0Z_info:
         const sat_scW0Z_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1256;
 },
 sat_scW0W_entry() //  [R1]
         { []
         }
     {offset
       cdaAl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdaAm; else goto cdaAn;
       cdaAm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdaAn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scW0V::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scW0V::I64, 3)) goto udaAo; else goto udaAr;
       udaAo: // global
           if (%MO_S_Lt_W64(_scW0V::I64, 1)) goto udaAp; else goto udaAq;
       udaAp: // global
           if (%MO_S_Lt_W64(_scW0V::I64, 0)) goto cdaAf; else goto cdaAg;
       cdaAg: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udaAq: // global
           if (%MO_S_Lt_W64(_scW0V::I64, 2)) goto cdaAh; else goto cdaAi;
       cdaAh: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdaAi: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udaAr: // global
           if (%MO_S_Ge_W64(_scW0V::I64, 5)) goto cdaAf; else goto udaAs;
       cdaAf: // global
           R2 = _scW0V::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udaAs: // global
           if (%MO_S_Lt_W64(_scW0V::I64, 4)) goto cdaAj; else goto cdaAk;
       cdaAj: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdaAk: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW0W_info" {
     sat_scW0W_info:
         const sat_scW0W_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1216;
 },
 GHC.RTS.Flags.$fEnumDoCostCentres_go2_entry() //  [R2]
         { []
         }
     {offset
       cdaAu: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdaAy; else goto cdaAx;
       cdaAy: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoCostCentres_go2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdaAx: // global
           I64[Hp - 64] = sat_scW0Z_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_scW0W_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoCostCentres_go2_info" {
     GHC.RTS.Flags.$fEnumDoCostCentres_go2_info:
         const GHC.RTS.Flags.$fEnumDoCostCentres_go2_entry;
         const 0;
         const 141733920782;
         const 4294967300;
         const ScWiZ_srt+1216;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:59.729057963 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoCostCentres_go1_closure" {
     GHC.RTS.Flags.$fEnumDoCostCentres_go1_closure:
         const GHC.RTS.Flags.$fEnumDoCostCentres_go1_info;
         const 0;
 },
 sat_scW15_entry() //  [R1]
         { []
         }
     {offset
       cdaB6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdaB7; else goto cdaB8;
       cdaB7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdaB8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scW13::I64 = I64[R1 + 16];
           if (_scW13::I64 != 3) goto cdaB4; else goto cdaB5;
       cdaB4: // global
           R2 = _scW13::I64 + 1;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumDoCostCentres_go1_entry(R2) args: 24, res: 0, upd: 24;
       cdaB5: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW15_info" {
     sat_scW15_info:
         const sat_scW15_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1264;
 },
 sat_scW12_entry() //  [R1]
         { []
         }
     {offset
       cdaBn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdaBo; else goto cdaBp;
       cdaBo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdaBp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scW11::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scW11::I64, 3)) goto udaBq; else goto udaBt;
       udaBq: // global
           if (%MO_S_Lt_W64(_scW11::I64, 1)) goto udaBr; else goto udaBs;
       udaBr: // global
           if (%MO_S_Lt_W64(_scW11::I64, 0)) goto cdaBh; else goto cdaBi;
       cdaBi: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udaBs: // global
           if (%MO_S_Lt_W64(_scW11::I64, 2)) goto cdaBj; else goto cdaBk;
       cdaBj: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdaBk: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udaBt: // global
           if (%MO_S_Ge_W64(_scW11::I64, 5)) goto cdaBh; else goto udaBu;
       cdaBh: // global
           R2 = _scW11::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udaBu: // global
           if (%MO_S_Lt_W64(_scW11::I64, 4)) goto cdaBl; else goto cdaBm;
       cdaBl: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdaBm: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW12_info" {
     sat_scW12_info:
         const sat_scW12_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1216;
 },
 GHC.RTS.Flags.$fEnumDoCostCentres_go1_entry() //  [R2]
         { []
         }
     {offset
       cdaBw: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdaBA; else goto cdaBz;
       cdaBA: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoCostCentres_go1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdaBz: // global
           I64[Hp - 64] = sat_scW15_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_scW12_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoCostCentres_go1_info" {
     GHC.RTS.Flags.$fEnumDoCostCentres_go1_info:
         const GHC.RTS.Flags.$fEnumDoCostCentres_go1_entry;
         const 0;
         const 279172874254;
         const 4294967300;
         const ScWiZ_srt+1216;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:59.738766694 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoCostCentres_go_closure" {
     GHC.RTS.Flags.$fEnumDoCostCentres_go_closure:
         const GHC.RTS.Flags.$fEnumDoCostCentres_go_info;
         const 0;
 },
 sat_scW1b_entry() //  [R1]
         { []
         }
     {offset
       cdaC8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdaC9; else goto cdaCa;
       cdaC9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdaCa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scW19::I64 = I64[R1 + 16];
           if (_scW19::I64 != 4) goto cdaC6; else goto cdaC7;
       cdaC6: // global
           R2 = _scW19::I64 + 1;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumDoCostCentres_go_entry(R2) args: 24, res: 0, upd: 24;
       cdaC7: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW1b_info" {
     sat_scW1b_info:
         const sat_scW1b_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1272;
 },
 sat_scW18_entry() //  [R1]
         { []
         }
     {offset
       cdaCp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdaCq; else goto cdaCr;
       cdaCq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdaCr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scW17::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scW17::I64, 3)) goto udaCs; else goto udaCv;
       udaCs: // global
           if (%MO_S_Lt_W64(_scW17::I64, 1)) goto udaCt; else goto udaCu;
       udaCt: // global
           if (%MO_S_Lt_W64(_scW17::I64, 0)) goto cdaCj; else goto cdaCk;
       cdaCk: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udaCu: // global
           if (%MO_S_Lt_W64(_scW17::I64, 2)) goto cdaCl; else goto cdaCm;
       cdaCl: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdaCm: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udaCv: // global
           if (%MO_S_Ge_W64(_scW17::I64, 5)) goto cdaCj; else goto udaCw;
       cdaCj: // global
           R2 = _scW17::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udaCw: // global
           if (%MO_S_Lt_W64(_scW17::I64, 4)) goto cdaCn; else goto cdaCo;
       cdaCn: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdaCo: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW18_info" {
     sat_scW18_info:
         const sat_scW18_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1216;
 },
 GHC.RTS.Flags.$fEnumDoCostCentres_go_entry() //  [R2]
         { []
         }
     {offset
       cdaCy: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdaCC; else goto cdaCB;
       cdaCC: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoCostCentres_go_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdaCB: // global
           I64[Hp - 64] = sat_scW1b_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_scW18_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoCostCentres_go_info" {
     GHC.RTS.Flags.$fEnumDoCostCentres_go_info:
         const GHC.RTS.Flags.$fEnumDoCostCentres_go_entry;
         const 0;
         const 554050781198;
         const 4294967300;
         const ScWiZ_srt+1216;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:59.748905981 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFromTo_closure" {
     GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFromTo_closure:
         const GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFromTo_info;
         const 0;
 },
 GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFromTo_entry() //  [R2, R3]
         { []
         }
     {offset
       cdaDe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdaDf; else goto cdaDg;
       cdaDf: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFromTo_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdaDg: // global
           I64[Sp - 16] = block_cdaD4_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udaEv; else goto cdaD5;
       udaEv: // global
           call _cdaD4(R1) args: 0, res: 0, upd: 0;
       cdaD5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFromTo_info" {
     GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFromTo_info:
         const GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFromTo_entry;
         const 0;
         const 270582939662;
         const 8589934607;
         const ScWiZ_srt+1240;
 },
 _cdaD4() //  [R1]
         { []
         }
     {offset
       cdaD4: // global
           _scW1d::P64 = P64[Sp + 8];
           _cdaDd::P64 = R1 & 7;
           if (_cdaDd::P64 < 4) goto udaEo; else goto udaEq;
       udaEo: // global
           if (_cdaDd::P64 < 3) goto udaEp; else goto cdaDa;
       udaEp: // global
           if (_cdaDd::P64 < 2) goto cdaD8; else goto cdaD9;
       cdaD8: // global
           _scW1f::I64 = 0;
           goto scW1e;
       cdaD9: // global
           _scW1f::I64 = 1;
           goto scW1e;
       cdaDa: // global
           _scW1f::I64 = 2;
           goto scW1e;
       udaEq: // global
           if (_cdaDd::P64 < 5) goto cdaDb; else goto cdaDc;
       cdaDb: // global
           _scW1f::I64 = 3;
           goto scW1e;
       cdaDc: // global
           _scW1f::I64 = 4;
           goto scW1e;
       scW1e: // global
           I64[Sp] = block_cdaDk_info;
           R1 = _scW1d::P64;
           I64[Sp + 8] = _scW1f::I64;
           if (R1 & 7 != 0) goto udaEu; else goto cdaDm;
       udaEu: // global
           call _cdaDk(R1) args: 0, res: 0, upd: 0;
       cdaDm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdaD4_info" {
     block_cdaD4_info:
         const _cdaD4;
         const 1;
         const 133143986206;
         const ScWiZ_srt+1240;
 },
 _cdaDk() //  [R1]
         { []
         }
     {offset
       cdaDk: // global
           _scW1f::I64 = I64[Sp + 8];
           _cdaEn::P64 = R1 & 7;
           if (_cdaEn::P64 < 4) goto udaEr; else goto udaEt;
       udaEr: // global
           if (_cdaEn::P64 < 3) goto udaEs; else goto cdaDP;
       udaEs: // global
           if (_cdaEn::P64 < 2) goto cdaDx; else goto cdaDG;
       cdaDx: // global
           if (%MO_S_Gt_W64(_scW1f::I64, 0)) goto cdaE6; else goto cdaDu;
       cdaDu: // global
           R2 = _scW1f::I64;
           Sp = Sp + 16;
           call GHC.RTS.Flags.$fEnumDoCostCentres_go4_entry(R2) args: 8, res: 0, upd: 8;
       cdaDG: // global
           if (%MO_S_Gt_W64(_scW1f::I64, 1)) goto cdaE6; else goto cdaDE;
       cdaDE: // global
           R2 = _scW1f::I64;
           Sp = Sp + 16;
           call GHC.RTS.Flags.$fEnumDoCostCentres_go3_entry(R2) args: 8, res: 0, upd: 8;
       cdaDP: // global
           if (%MO_S_Gt_W64(_scW1f::I64, 2)) goto cdaE6; else goto cdaDN;
       cdaDN: // global
           R2 = _scW1f::I64;
           Sp = Sp + 16;
           call GHC.RTS.Flags.$fEnumDoCostCentres_go2_entry(R2) args: 8, res: 0, upd: 8;
       udaEt: // global
           if (_cdaEn::P64 < 5) goto cdaDY; else goto cdaE7;
       cdaDY: // global
           if (%MO_S_Gt_W64(_scW1f::I64, 3)) goto cdaE6; else goto cdaDW;
       cdaDW: // global
           R2 = _scW1f::I64;
           Sp = Sp + 16;
           call GHC.RTS.Flags.$fEnumDoCostCentres_go1_entry(R2) args: 8, res: 0, upd: 8;
       cdaE7: // global
           if (%MO_S_Gt_W64(_scW1f::I64, 4)) goto cdaE6; else goto cdaE5;
       cdaE6: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdaE5: // global
           R2 = _scW1f::I64;
           Sp = Sp + 16;
           call GHC.RTS.Flags.$fEnumDoCostCentres_go_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdaDk_info" {
     block_cdaDk_info:
         const _cdaDk;
         const 65;
         const 133143986206;
         const ScWiZ_srt+1240;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:59.760088532 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFromThen_closure" {
     GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFromThen_closure:
         const GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFromThen_info;
         const 0;
 },
 GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFromThen_entry() //  [R2,
                                                               R3]
         { []
         }
     {offset
       cdaF2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdaF3; else goto cdaF4;
       cdaF3: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFromThen_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdaF4: // global
           I64[Sp - 16] = block_cdaES_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udaGj; else goto cdaET;
       udaGj: // global
           call _cdaES(R1) args: 0, res: 0, upd: 0;
       cdaET: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFromThen_info" {
     GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFromThen_info:
         const GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFromThen_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const ScWiZ_srt+1288;
 },
 _cdaES() //  [R1]
         { []
         }
     {offset
       cdaES: // global
           _scW1o::P64 = P64[Sp + 8];
           _cdaF1::P64 = R1 & 7;
           if (_cdaF1::P64 < 4) goto udaGc; else goto udaGe;
       udaGc: // global
           if (_cdaF1::P64 < 3) goto udaGd; else goto cdaEY;
       udaGd: // global
           if (_cdaF1::P64 < 2) goto cdaEW; else goto cdaEX;
       cdaEW: // global
           _scW1q::I64 = 0;
           goto scW1p;
       cdaEX: // global
           _scW1q::I64 = 1;
           goto scW1p;
       cdaEY: // global
           _scW1q::I64 = 2;
           goto scW1p;
       udaGe: // global
           if (_cdaF1::P64 < 5) goto cdaEZ; else goto cdaF0;
       cdaEZ: // global
           _scW1q::I64 = 3;
           goto scW1p;
       cdaF0: // global
           _scW1q::I64 = 4;
           goto scW1p;
       scW1p: // global
           I64[Sp] = block_cdaF8_info;
           R1 = _scW1o::P64;
           I64[Sp + 8] = _scW1q::I64;
           if (R1 & 7 != 0) goto udaGi; else goto cdaFa;
       udaGi: // global
           call _cdaF8(R1) args: 0, res: 0, upd: 0;
       cdaFa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdaES_info" {
     block_cdaES_info:
         const _cdaES;
         const 1;
         const 4294967326;
         const ScWiZ_srt+1296;
 },
 _cdaF8() //  [R1]
         { []
         }
     {offset
       cdaF8: // global
           _scW1q::I64 = I64[Sp + 8];
           _cdaGb::P64 = R1 & 7;
           if (_cdaGb::P64 < 4) goto udaGf; else goto udaGh;
       udaGf: // global
           if (_cdaGb::P64 < 3) goto udaGg; else goto cdaFz;
       udaGg: // global
           if (_cdaGb::P64 < 2) goto cdaFh; else goto cdaFq;
       cdaFh: // global
           I64[Sp + 8] = block_cdaFe_info;
           R3 = 0;
           R2 = _scW1q::I64;
           Sp = Sp + 8;
           call GHC.Enum.efdInt_entry(R3, R2) args: 8, res: 8, upd: 8;
       cdaFq: // global
           I64[Sp + 8] = block_cdaFo_info;
           R3 = 1;
           R2 = _scW1q::I64;
           Sp = Sp + 8;
           call GHC.Enum.efdInt_entry(R3, R2) args: 8, res: 8, upd: 8;
       cdaFz: // global
           I64[Sp + 8] = block_cdaFx_info;
           R3 = 2;
           R2 = _scW1q::I64;
           Sp = Sp + 8;
           call GHC.Enum.efdInt_entry(R3, R2) args: 8, res: 8, upd: 8;
       udaGh: // global
           if (_cdaGb::P64 < 5) goto cdaFI; else goto cdaFR;
       cdaFI: // global
           I64[Sp + 8] = block_cdaFG_info;
           R3 = 3;
           R2 = _scW1q::I64;
           Sp = Sp + 8;
           call GHC.Enum.efdInt_entry(R3, R2) args: 8, res: 8, upd: 8;
       cdaFR: // global
           I64[Sp + 8] = block_cdaFP_info;
           R3 = 4;
           R2 = _scW1q::I64;
           Sp = Sp + 8;
           call GHC.Enum.efdInt_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdaF8_info" {
     block_cdaF8_info:
         const _cdaF8;
         const 65;
         const 4294967326;
         const ScWiZ_srt+1296;
 },
 _cdaFe() //  [R1]
         { []
         }
     {offset
       cdaFe: // global
           R3 = R1;
           R2 = GHC.RTS.Flags.$fEnumDoCostCentres_$ctoEnum_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdaFe_info" {
     block_cdaFe_info:
         const _cdaFe;
         const 0;
         const 4294967326;
         const ScWiZ_srt+1296;
 },
 _cdaFo() //  [R1]
         { []
         }
     {offset
       cdaFo: // global
           R3 = R1;
           R2 = GHC.RTS.Flags.$fEnumDoCostCentres_$ctoEnum_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdaFo_info" {
     block_cdaFo_info:
         const _cdaFo;
         const 0;
         const 4294967326;
         const ScWiZ_srt+1296;
 },
 _cdaFx() //  [R1]
         { []
         }
     {offset
       cdaFx: // global
           R3 = R1;
           R2 = GHC.RTS.Flags.$fEnumDoCostCentres_$ctoEnum_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdaFx_info" {
     block_cdaFx_info:
         const _cdaFx;
         const 0;
         const 4294967326;
         const ScWiZ_srt+1296;
 },
 _cdaFG() //  [R1]
         { []
         }
     {offset
       cdaFG: // global
           R3 = R1;
           R2 = GHC.RTS.Flags.$fEnumDoCostCentres_$ctoEnum_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdaFG_info" {
     block_cdaFG_info:
         const _cdaFG;
         const 0;
         const 4294967326;
         const ScWiZ_srt+1296;
 },
 _cdaFP() //  [R1]
         { []
         }
     {offset
       cdaFP: // global
           R3 = R1;
           R2 = GHC.RTS.Flags.$fEnumDoCostCentres_$ctoEnum_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdaFP_info" {
     block_cdaFP_info:
         const _cdaFP;
         const 0;
         const 4294967326;
         const ScWiZ_srt+1296;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:59.776352859 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoCostCentres_go5_closure" {
     GHC.RTS.Flags.$fEnumDoCostCentres_go5_closure:
         const GHC.RTS.Flags.$fEnumDoCostCentres_go5_info;
         const 0;
 },
 sat_scW1D_entry() //  [R1]
         { []
         }
     {offset
       cdaH0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdaH1; else goto cdaH2;
       cdaH1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdaH2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scW1B::I64 = I64[R1 + 16];
           if (_scW1B::I64 != 9223372036854775807) goto cdaGY; else goto cdaGZ;
       cdaGY: // global
           R2 = _scW1B::I64 + 1;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumDoCostCentres_go5_entry(R2) args: 24, res: 0, upd: 24;
       cdaGZ: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW1D_info" {
     sat_scW1D_info:
         const sat_scW1D_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1304;
 },
 sat_scW1A_entry() //  [R1]
         { []
         }
     {offset
       cdaHh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdaHi; else goto cdaHj;
       cdaHi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdaHj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scW1z::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scW1z::I64, 3)) goto udaHk; else goto udaHn;
       udaHk: // global
           if (%MO_S_Lt_W64(_scW1z::I64, 1)) goto udaHl; else goto udaHm;
       udaHl: // global
           if (%MO_S_Lt_W64(_scW1z::I64, 0)) goto cdaHb; else goto cdaHc;
       cdaHc: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udaHm: // global
           if (%MO_S_Lt_W64(_scW1z::I64, 2)) goto cdaHd; else goto cdaHe;
       cdaHd: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdaHe: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udaHn: // global
           if (%MO_S_Ge_W64(_scW1z::I64, 5)) goto cdaHb; else goto udaHo;
       cdaHb: // global
           R2 = _scW1z::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udaHo: // global
           if (%MO_S_Lt_W64(_scW1z::I64, 4)) goto cdaHf; else goto cdaHg;
       cdaHf: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdaHg: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW1A_info" {
     sat_scW1A_info:
         const sat_scW1A_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1216;
 },
 GHC.RTS.Flags.$fEnumDoCostCentres_go5_entry() //  [R2]
         { []
         }
     {offset
       cdaHq: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdaHu; else goto cdaHt;
       cdaHu: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoCostCentres_go5_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdaHt: // global
           I64[Hp - 64] = sat_scW1D_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_scW1A_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoCostCentres_go5_info" {
     GHC.RTS.Flags.$fEnumDoCostCentres_go5_info:
         const GHC.RTS.Flags.$fEnumDoCostCentres_go5_entry;
         const 0;
         const 8800387989518;
         const 4294967300;
         const ScWiZ_srt+1216;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:59.784669937 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoCostCentres5_closure" {
     GHC.RTS.Flags.$fEnumDoCostCentres5_closure:
         const GHC.RTS.Flags.$fEnumDoCostCentres5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fEnumDoCostCentres5_entry() //  [R1]
         { []
         }
     {offset
       cdaHX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdaHY; else goto cdaHZ;
       cdaHY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdaHZ: // global
           (_cdaHU::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdaHU::I64 == 0) goto cdaHW; else goto cdaHV;
       cdaHW: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdaHV: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdaHU::I64;
           R2 = 0;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumDoCostCentres_go5_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoCostCentres5_info" {
     GHC.RTS.Flags.$fEnumDoCostCentres5_info:
         const GHC.RTS.Flags.$fEnumDoCostCentres5_entry;
         const 0;
         const 4294967317;
         const ScWiZ_srt+1304;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:59.78886666 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoCostCentres4_closure" {
     GHC.RTS.Flags.$fEnumDoCostCentres4_closure:
         const GHC.RTS.Flags.$fEnumDoCostCentres4_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fEnumDoCostCentres4_entry() //  [R1]
         { []
         }
     {offset
       cdaId: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdaIe; else goto cdaIf;
       cdaIe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdaIf: // global
           (_cdaIa::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdaIa::I64 == 0) goto cdaIc; else goto cdaIb;
       cdaIc: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdaIb: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdaIa::I64;
           R2 = 1;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumDoCostCentres_go5_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoCostCentres4_info" {
     GHC.RTS.Flags.$fEnumDoCostCentres4_info:
         const GHC.RTS.Flags.$fEnumDoCostCentres4_entry;
         const 0;
         const 4294967317;
         const ScWiZ_srt+1304;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:59.793378963 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoCostCentres3_closure" {
     GHC.RTS.Flags.$fEnumDoCostCentres3_closure:
         const GHC.RTS.Flags.$fEnumDoCostCentres3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fEnumDoCostCentres3_entry() //  [R1]
         { []
         }
     {offset
       cdaIt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdaIu; else goto cdaIv;
       cdaIu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdaIv: // global
           (_cdaIq::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdaIq::I64 == 0) goto cdaIs; else goto cdaIr;
       cdaIs: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdaIr: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdaIq::I64;
           R2 = 2;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumDoCostCentres_go5_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoCostCentres3_info" {
     GHC.RTS.Flags.$fEnumDoCostCentres3_info:
         const GHC.RTS.Flags.$fEnumDoCostCentres3_entry;
         const 0;
         const 4294967317;
         const ScWiZ_srt+1304;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:59.797470772 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoCostCentres2_closure" {
     GHC.RTS.Flags.$fEnumDoCostCentres2_closure:
         const GHC.RTS.Flags.$fEnumDoCostCentres2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fEnumDoCostCentres2_entry() //  [R1]
         { []
         }
     {offset
       cdaIJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdaIK; else goto cdaIL;
       cdaIK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdaIL: // global
           (_cdaIG::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdaIG::I64 == 0) goto cdaII; else goto cdaIH;
       cdaII: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdaIH: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdaIG::I64;
           R2 = 3;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumDoCostCentres_go5_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoCostCentres2_info" {
     GHC.RTS.Flags.$fEnumDoCostCentres2_info:
         const GHC.RTS.Flags.$fEnumDoCostCentres2_entry;
         const 0;
         const 4294967317;
         const ScWiZ_srt+1304;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:59.801714704 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoCostCentres1_closure" {
     GHC.RTS.Flags.$fEnumDoCostCentres1_closure:
         const GHC.RTS.Flags.$fEnumDoCostCentres1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fEnumDoCostCentres1_entry() //  [R1]
         { []
         }
     {offset
       cdaIZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdaJ0; else goto cdaJ1;
       cdaJ0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdaJ1: // global
           (_cdaIW::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdaIW::I64 == 0) goto cdaIY; else goto cdaIX;
       cdaIY: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdaIX: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdaIW::I64;
           R2 = 4;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumDoCostCentres_go5_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoCostCentres1_info" {
     GHC.RTS.Flags.$fEnumDoCostCentres1_info:
         const GHC.RTS.Flags.$fEnumDoCostCentres1_entry;
         const 0;
         const 4294967317;
         const ScWiZ_srt+1304;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:59.806310807 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFrom_closure" {
     GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFrom_closure:
         const GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFrom_info;
         const 0;
 },
 GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFrom_entry() //  [R2]
         { []
         }
     {offset
       cdaJn: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdaJo; else goto cdaJp;
       cdaJo: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFrom_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdaJp: // global
           I64[Sp - 8] = block_cdaJd_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udaJI; else goto cdaJe;
       udaJI: // global
           call _cdaJd(R1) args: 0, res: 0, upd: 0;
       cdaJe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFrom_info" {
     GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFrom_info:
         const GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFrom_entry;
         const 0;
         const 270582939662;
         const 4294967301;
         const ScWiZ_srt+1312;
 },
 _cdaJd() //  [R1]
         { []
         }
     {offset
       cdaJd: // global
           _cdaJm::P64 = R1 & 7;
           if (_cdaJm::P64 < 4) goto udaJF; else goto udaJH;
       udaJF: // global
           if (_cdaJm::P64 < 3) goto udaJG; else goto cdaJj;
       udaJG: // global
           if (_cdaJm::P64 < 2) goto cdaJh; else goto cdaJi;
       cdaJh: // global
           R1 = GHC.RTS.Flags.$fEnumDoCostCentres5_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cdaJi: // global
           R1 = GHC.RTS.Flags.$fEnumDoCostCentres4_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cdaJj: // global
           R1 = GHC.RTS.Flags.$fEnumDoCostCentres3_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       udaJH: // global
           if (_cdaJm::P64 < 5) goto cdaJk; else goto cdaJl;
       cdaJk: // global
           R1 = GHC.RTS.Flags.$fEnumDoCostCentres2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cdaJl: // global
           R1 = GHC.RTS.Flags.$fEnumDoCostCentres1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdaJd_info" {
     block_cdaJd_info:
         const _cdaJd;
         const 0;
         const 133143986206;
         const ScWiZ_srt+1320;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:59.81218304 UTC

[section ""data" . lvl99_rcV8r_closure" {
     lvl99_rcV8r_closure:
         const lvl99_rcV8r_info;
         const 0;
         const 0;
         const 0;
 },
 lvl99_rcV8r_entry() //  [R1]
         { []
         }
     {offset
       cdaK4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdaK5; else goto cdaK6;
       cdaK5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdaK6: // global
           (_cdaK1::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdaK1::I64 == 0) goto cdaK3; else goto cdaK2;
       cdaK3: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdaK2: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdaK1::I64;
           R2 = (-1);
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl99_rcV8r_info" {
     lvl99_rcV8r_info:
         const lvl99_rcV8r_entry;
         const 0;
         const 4294967317;
         const ScWiZ_srt+1216;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:59.817062423 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoCostCentres_$cpred_closure" {
     GHC.RTS.Flags.$fEnumDoCostCentres_$cpred_closure:
         const GHC.RTS.Flags.$fEnumDoCostCentres_$cpred_info;
         const 0;
 },
 GHC.RTS.Flags.$fEnumDoCostCentres_$cpred_entry() //  [R2]
         { []
         }
     {offset
       cdaKs: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdaKt; else goto cdaKu;
       cdaKt: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoCostCentres_$cpred_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdaKu: // global
           I64[Sp - 8] = block_cdaKi_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udaKN; else goto cdaKj;
       udaKN: // global
           call _cdaKi(R1) args: 0, res: 0, upd: 0;
       cdaKj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoCostCentres_$cpred_info" {
     GHC.RTS.Flags.$fEnumDoCostCentres_$cpred_info:
         const GHC.RTS.Flags.$fEnumDoCostCentres_$cpred_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const ScWiZ_srt+1360;
 },
 _cdaKi() //  [R1]
         { []
         }
     {offset
       cdaKi: // global
           _cdaKr::P64 = R1 & 7;
           if (_cdaKr::P64 < 4) goto udaKK; else goto udaKM;
       udaKK: // global
           if (_cdaKr::P64 < 3) goto udaKL; else goto cdaKo;
       udaKL: // global
           if (_cdaKr::P64 < 2) goto cdaKm; else goto cdaKn;
       cdaKm: // global
           R1 = lvl99_rcV8r_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cdaKn: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdaKo: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       udaKM: // global
           if (_cdaKr::P64 < 5) goto cdaKp; else goto cdaKq;
       cdaKp: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdaKq: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdaKi_info" {
     block_cdaKi_info:
         const _cdaKi;
         const 0;
         const 4294967326;
         const ScWiZ_srt+1368;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:59.883783577 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFromThenTo_closure" {
     GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFromThenTo_closure:
         const GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFromThenTo_info;
         const 0;
 },
 sat_scW22_entry() //  [R1]
         { []
         }
     {offset
       cdaLQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdaLR; else goto cdaLS;
       cdaLR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdaLS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_scW1W_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW22_info" {
     sat_scW22_info:
         const sat_scW22_entry;
         const 8589934593;
         const 4294967311;
         const ScWiZ_srt+1216;
 },
 sat_scW20_entry() //  [R1]
         { []
         }
     {offset
       cdaM5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdaM6; else goto cdaM7;
       cdaM6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdaM7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scW1Z::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scW1Z::I64, 3)) goto udaM8; else goto udaMb;
       udaM8: // global
           if (%MO_S_Lt_W64(_scW1Z::I64, 1)) goto udaM9; else goto udaMa;
       udaM9: // global
           if (%MO_S_Lt_W64(_scW1Z::I64, 0)) goto cdaLZ; else goto cdaM0;
       cdaM0: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udaMa: // global
           if (%MO_S_Lt_W64(_scW1Z::I64, 2)) goto cdaM1; else goto cdaM2;
       cdaM1: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdaM2: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udaMb: // global
           if (%MO_S_Ge_W64(_scW1Z::I64, 5)) goto cdaLZ; else goto udaMc;
       cdaLZ: // global
           R2 = _scW1Z::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udaMc: // global
           if (%MO_S_Lt_W64(_scW1Z::I64, 4)) goto cdaM3; else goto cdaM4;
       cdaM3: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdaM4: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW20_info" {
     sat_scW20_info:
         const sat_scW20_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1216;
 },
 sat_scW24_entry() //  [R1]
         { []
         }
     {offset
       cdaMq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdaMr; else goto cdaMs;
       cdaMr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdaMs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scW23::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scW23::I64, 3)) goto udaMt; else goto udaMw;
       udaMt: // global
           if (%MO_S_Lt_W64(_scW23::I64, 1)) goto udaMu; else goto udaMv;
       udaMu: // global
           if (%MO_S_Lt_W64(_scW23::I64, 0)) goto cdaMk; else goto cdaMl;
       cdaMl: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udaMv: // global
           if (%MO_S_Lt_W64(_scW23::I64, 2)) goto cdaMm; else goto cdaMn;
       cdaMm: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdaMn: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udaMw: // global
           if (%MO_S_Ge_W64(_scW23::I64, 5)) goto cdaMk; else goto udaMx;
       cdaMk: // global
           R2 = _scW23::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udaMx: // global
           if (%MO_S_Lt_W64(_scW23::I64, 4)) goto cdaMo; else goto cdaMp;
       cdaMo: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdaMp: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW24_info" {
     sat_scW24_info:
         const sat_scW24_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1216;
 },
 go_dn_scW1W_entry() //  [R1, R2]
         { []
         }
     {offset
       cdaMB: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdaMF; else goto cdaME;
       cdaMF: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdaME: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto cdaMz; else goto cdaMA;
       cdaMz: // global
           _scW1U::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_scW22_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _scW1U::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_scW20_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdaMA: // global
           I64[Hp - 80] = sat_scW24_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _cdaMH::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _cdaMH::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_scW1W_info" {
     go_dn_scW1W_info:
         const go_dn_scW1W_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const ScWiZ_srt+1216;
 },
 sat_scW25_entry() //  [R1]
         { []
         }
     {offset
       cdaMI: // global
           _scW25::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdaMJ; else goto cdaMK;
       cdaMK: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdaMM; else goto cdaML;
       cdaMM: // global
           HpAlloc = 24;
           goto cdaMJ;
       cdaMJ: // global
           R1 = _scW25::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdaML: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scW25::P64;
           _scW1O::I64 = I64[_scW25::P64 + 24];
           _scW1U::I64 = _scW1O::I64 - I64[_scW25::P64 + 16];
           I64[Hp - 16] = go_dn_scW1W_info;
           I64[Hp - 8] = _scW1U::I64;
           I64[Hp] = 0 - _scW1U::I64;
           R2 = _scW1O::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_scW1W_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW25_info" {
     sat_scW25_info:
         const sat_scW25_entry;
         const 8589934592;
         const 4294967316;
         const ScWiZ_srt+1216;
 },
 sat_scW1T_entry() //  [R1]
         { []
         }
     {offset
       cdaMZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdaN0; else goto cdaN1;
       cdaN0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdaN1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scW1S::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scW1S::I64, 3)) goto udaN2; else goto udaN5;
       udaN2: // global
           if (%MO_S_Lt_W64(_scW1S::I64, 1)) goto udaN3; else goto udaN4;
       udaN3: // global
           if (%MO_S_Lt_W64(_scW1S::I64, 0)) goto cdaMT; else goto cdaMU;
       cdaMU: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udaN4: // global
           if (%MO_S_Lt_W64(_scW1S::I64, 2)) goto cdaMV; else goto cdaMW;
       cdaMV: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdaMW: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udaN5: // global
           if (%MO_S_Ge_W64(_scW1S::I64, 5)) goto cdaMT; else goto udaN6;
       cdaMT: // global
           R2 = _scW1S::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udaN6: // global
           if (%MO_S_Lt_W64(_scW1S::I64, 4)) goto cdaMX; else goto cdaMY;
       cdaMX: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdaMY: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW1T_info" {
     sat_scW1T_info:
         const sat_scW1T_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1216;
 },
 sat_scW28_entry() //  [R1]
         { []
         }
     {offset
       cdaNn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdaNo; else goto cdaNp;
       cdaNo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdaNp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scW27::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scW27::I64, 3)) goto udaNq; else goto udaNt;
       udaNq: // global
           if (%MO_S_Lt_W64(_scW27::I64, 1)) goto udaNr; else goto udaNs;
       udaNr: // global
           if (%MO_S_Lt_W64(_scW27::I64, 0)) goto cdaNh; else goto cdaNi;
       cdaNi: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udaNs: // global
           if (%MO_S_Lt_W64(_scW27::I64, 2)) goto cdaNj; else goto cdaNk;
       cdaNj: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdaNk: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udaNt: // global
           if (%MO_S_Ge_W64(_scW27::I64, 5)) goto cdaNh; else goto udaNu;
       cdaNh: // global
           R2 = _scW27::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udaNu: // global
           if (%MO_S_Lt_W64(_scW27::I64, 4)) goto cdaNl; else goto cdaNm;
       cdaNl: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdaNm: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW28_info" {
     sat_scW28_info:
         const sat_scW28_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1216;
 },
 sat_scW2k_entry() //  [R1]
         { []
         }
     {offset
       cdaNX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdaNY; else goto cdaNZ;
       cdaNY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdaNZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_scW2e_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW2k_info" {
     sat_scW2k_info:
         const sat_scW2k_entry;
         const 8589934593;
         const 4294967311;
         const ScWiZ_srt+1216;
 },
 sat_scW2i_entry() //  [R1]
         { []
         }
     {offset
       cdaOc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdaOd; else goto cdaOe;
       cdaOd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdaOe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scW2h::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scW2h::I64, 3)) goto udaOf; else goto udaOi;
       udaOf: // global
           if (%MO_S_Lt_W64(_scW2h::I64, 1)) goto udaOg; else goto udaOh;
       udaOg: // global
           if (%MO_S_Lt_W64(_scW2h::I64, 0)) goto cdaO6; else goto cdaO7;
       cdaO7: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udaOh: // global
           if (%MO_S_Lt_W64(_scW2h::I64, 2)) goto cdaO8; else goto cdaO9;
       cdaO8: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdaO9: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udaOi: // global
           if (%MO_S_Ge_W64(_scW2h::I64, 5)) goto cdaO6; else goto udaOj;
       cdaO6: // global
           R2 = _scW2h::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udaOj: // global
           if (%MO_S_Lt_W64(_scW2h::I64, 4)) goto cdaOa; else goto cdaOb;
       cdaOa: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdaOb: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW2i_info" {
     sat_scW2i_info:
         const sat_scW2i_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1216;
 },
 sat_scW2m_entry() //  [R1]
         { []
         }
     {offset
       cdaOx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdaOy; else goto cdaOz;
       cdaOy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdaOz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scW2l::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scW2l::I64, 3)) goto udaOA; else goto udaOD;
       udaOA: // global
           if (%MO_S_Lt_W64(_scW2l::I64, 1)) goto udaOB; else goto udaOC;
       udaOB: // global
           if (%MO_S_Lt_W64(_scW2l::I64, 0)) goto cdaOr; else goto cdaOs;
       cdaOs: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udaOC: // global
           if (%MO_S_Lt_W64(_scW2l::I64, 2)) goto cdaOt; else goto cdaOu;
       cdaOt: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdaOu: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udaOD: // global
           if (%MO_S_Ge_W64(_scW2l::I64, 5)) goto cdaOr; else goto udaOE;
       cdaOr: // global
           R2 = _scW2l::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udaOE: // global
           if (%MO_S_Lt_W64(_scW2l::I64, 4)) goto cdaOv; else goto cdaOw;
       cdaOv: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdaOw: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW2m_info" {
     sat_scW2m_info:
         const sat_scW2m_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1216;
 },
 go_up_scW2e_entry() //  [R1, R2]
         { []
         }
     {offset
       cdaOI: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdaOM; else goto cdaOL;
       cdaOM: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdaOL: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto cdaOG; else goto cdaOH;
       cdaOG: // global
           _scW2c::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_scW2k_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _scW2c::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_scW2i_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdaOH: // global
           I64[Hp - 80] = sat_scW2m_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _cdaOO::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _cdaOO::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_scW2e_info" {
     go_up_scW2e_info:
         const go_up_scW2e_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const ScWiZ_srt+1216;
 },
 sat_scW2n_entry() //  [R1]
         { []
         }
     {offset
       cdaOP: // global
           _scW2n::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdaOQ; else goto cdaOR;
       cdaOR: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdaOT; else goto cdaOS;
       cdaOT: // global
           HpAlloc = 24;
           goto cdaOQ;
       cdaOQ: // global
           R1 = _scW2n::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdaOS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scW2n::P64;
           _scW1O::I64 = I64[_scW2n::P64 + 24];
           _scW2c::I64 = _scW1O::I64 - I64[_scW2n::P64 + 16];
           I64[Hp - 16] = go_up_scW2e_info;
           I64[Hp - 8] = _scW2c::I64;
           I64[Hp] = 0 - _scW2c::I64;
           R2 = _scW1O::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_scW2e_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW2n_info" {
     sat_scW2n_info:
         const sat_scW2n_entry;
         const 8589934592;
         const 4294967316;
         const ScWiZ_srt+1216;
 },
 sat_scW2b_entry() //  [R1]
         { []
         }
     {offset
       cdaP6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdaP7; else goto cdaP8;
       cdaP7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdaP8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scW2a::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scW2a::I64, 3)) goto udaP9; else goto udaPc;
       udaP9: // global
           if (%MO_S_Lt_W64(_scW2a::I64, 1)) goto udaPa; else goto udaPb;
       udaPa: // global
           if (%MO_S_Lt_W64(_scW2a::I64, 0)) goto cdaP0; else goto cdaP1;
       cdaP1: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udaPb: // global
           if (%MO_S_Lt_W64(_scW2a::I64, 2)) goto cdaP2; else goto cdaP3;
       cdaP2: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdaP3: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udaPc: // global
           if (%MO_S_Ge_W64(_scW2a::I64, 5)) goto cdaP0; else goto udaPd;
       cdaP0: // global
           R2 = _scW2a::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udaPd: // global
           if (%MO_S_Lt_W64(_scW2a::I64, 4)) goto cdaP4; else goto cdaP5;
       cdaP4: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdaP5: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW2b_info" {
     sat_scW2b_info:
         const sat_scW2b_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1216;
 },
 sat_scW2q_entry() //  [R1]
         { []
         }
     {offset
       cdaPu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdaPv; else goto cdaPw;
       cdaPv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdaPw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scW2p::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scW2p::I64, 3)) goto udaPx; else goto udaPA;
       udaPx: // global
           if (%MO_S_Lt_W64(_scW2p::I64, 1)) goto udaPy; else goto udaPz;
       udaPy: // global
           if (%MO_S_Lt_W64(_scW2p::I64, 0)) goto cdaPo; else goto cdaPp;
       cdaPp: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udaPz: // global
           if (%MO_S_Lt_W64(_scW2p::I64, 2)) goto cdaPq; else goto cdaPr;
       cdaPq: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdaPr: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udaPA: // global
           if (%MO_S_Ge_W64(_scW2p::I64, 5)) goto cdaPo; else goto udaPB;
       cdaPo: // global
           R2 = _scW2p::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udaPB: // global
           if (%MO_S_Lt_W64(_scW2p::I64, 4)) goto cdaPs; else goto cdaPt;
       cdaPs: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdaPt: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW2q_info" {
     sat_scW2q_info:
         const sat_scW2q_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1216;
 },
 sat_scW2D_entry() //  [R1]
         { []
         }
     {offset
       cdaQ8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdaQ9; else goto cdaQa;
       cdaQ9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdaQa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_scW2x_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW2D_info" {
     sat_scW2D_info:
         const sat_scW2D_entry;
         const 8589934593;
         const 4294967311;
         const ScWiZ_srt+1216;
 },
 sat_scW2B_entry() //  [R1]
         { []
         }
     {offset
       cdaQn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdaQo; else goto cdaQp;
       cdaQo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdaQp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scW2A::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scW2A::I64, 3)) goto udaQq; else goto udaQt;
       udaQq: // global
           if (%MO_S_Lt_W64(_scW2A::I64, 1)) goto udaQr; else goto udaQs;
       udaQr: // global
           if (%MO_S_Lt_W64(_scW2A::I64, 0)) goto cdaQh; else goto cdaQi;
       cdaQi: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udaQs: // global
           if (%MO_S_Lt_W64(_scW2A::I64, 2)) goto cdaQj; else goto cdaQk;
       cdaQj: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdaQk: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udaQt: // global
           if (%MO_S_Ge_W64(_scW2A::I64, 5)) goto cdaQh; else goto udaQu;
       cdaQh: // global
           R2 = _scW2A::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udaQu: // global
           if (%MO_S_Lt_W64(_scW2A::I64, 4)) goto cdaQl; else goto cdaQm;
       cdaQl: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdaQm: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW2B_info" {
     sat_scW2B_info:
         const sat_scW2B_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1216;
 },
 sat_scW2F_entry() //  [R1]
         { []
         }
     {offset
       cdaQI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdaQJ; else goto cdaQK;
       cdaQJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdaQK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scW2E::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scW2E::I64, 3)) goto udaQL; else goto udaQO;
       udaQL: // global
           if (%MO_S_Lt_W64(_scW2E::I64, 1)) goto udaQM; else goto udaQN;
       udaQM: // global
           if (%MO_S_Lt_W64(_scW2E::I64, 0)) goto cdaQC; else goto cdaQD;
       cdaQD: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udaQN: // global
           if (%MO_S_Lt_W64(_scW2E::I64, 2)) goto cdaQE; else goto cdaQF;
       cdaQE: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdaQF: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udaQO: // global
           if (%MO_S_Ge_W64(_scW2E::I64, 5)) goto cdaQC; else goto udaQP;
       cdaQC: // global
           R2 = _scW2E::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udaQP: // global
           if (%MO_S_Lt_W64(_scW2E::I64, 4)) goto cdaQG; else goto cdaQH;
       cdaQG: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdaQH: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW2F_info" {
     sat_scW2F_info:
         const sat_scW2F_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1216;
 },
 go_dn_scW2x_entry() //  [R1, R2]
         { []
         }
     {offset
       cdaQT: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdaQX; else goto cdaQW;
       cdaQX: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdaQW: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto cdaQR; else goto cdaQS;
       cdaQR: // global
           _scW2v::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_scW2D_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _scW2v::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_scW2B_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdaQS: // global
           I64[Hp - 80] = sat_scW2F_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _cdaQZ::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _cdaQZ::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_scW2x_info" {
     go_dn_scW2x_info:
         const go_dn_scW2x_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const ScWiZ_srt+1216;
 },
 sat_scW2G_entry() //  [R1]
         { []
         }
     {offset
       cdaR0: // global
           _scW2G::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdaR1; else goto cdaR2;
       cdaR2: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdaR4; else goto cdaR3;
       cdaR4: // global
           HpAlloc = 24;
           goto cdaR1;
       cdaR1: // global
           R1 = _scW2G::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdaR3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scW2G::P64;
           _scW1O::I64 = I64[_scW2G::P64 + 24];
           _scW2v::I64 = _scW1O::I64 - I64[_scW2G::P64 + 16];
           I64[Hp - 16] = go_dn_scW2x_info;
           I64[Hp - 8] = _scW2v::I64;
           I64[Hp] = 1 - _scW2v::I64;
           R2 = _scW1O::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_scW2x_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW2G_info" {
     sat_scW2G_info:
         const sat_scW2G_entry;
         const 8589934592;
         const 4294967316;
         const ScWiZ_srt+1216;
 },
 sat_scW2u_entry() //  [R1]
         { []
         }
     {offset
       cdaRh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdaRi; else goto cdaRj;
       cdaRi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdaRj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scW2t::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scW2t::I64, 3)) goto udaRk; else goto udaRn;
       udaRk: // global
           if (%MO_S_Lt_W64(_scW2t::I64, 1)) goto udaRl; else goto udaRm;
       udaRl: // global
           if (%MO_S_Lt_W64(_scW2t::I64, 0)) goto cdaRb; else goto cdaRc;
       cdaRc: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udaRm: // global
           if (%MO_S_Lt_W64(_scW2t::I64, 2)) goto cdaRd; else goto cdaRe;
       cdaRd: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdaRe: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udaRn: // global
           if (%MO_S_Ge_W64(_scW2t::I64, 5)) goto cdaRb; else goto udaRo;
       cdaRb: // global
           R2 = _scW2t::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udaRo: // global
           if (%MO_S_Lt_W64(_scW2t::I64, 4)) goto cdaRf; else goto cdaRg;
       cdaRf: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdaRg: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW2u_info" {
     sat_scW2u_info:
         const sat_scW2u_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1216;
 },
 sat_scW2J_entry() //  [R1]
         { []
         }
     {offset
       cdaRF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdaRG; else goto cdaRH;
       cdaRG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdaRH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scW2I::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scW2I::I64, 3)) goto udaRI; else goto udaRL;
       udaRI: // global
           if (%MO_S_Lt_W64(_scW2I::I64, 1)) goto udaRJ; else goto udaRK;
       udaRJ: // global
           if (%MO_S_Lt_W64(_scW2I::I64, 0)) goto cdaRz; else goto cdaRA;
       cdaRA: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udaRK: // global
           if (%MO_S_Lt_W64(_scW2I::I64, 2)) goto cdaRB; else goto cdaRC;
       cdaRB: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdaRC: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udaRL: // global
           if (%MO_S_Ge_W64(_scW2I::I64, 5)) goto cdaRz; else goto udaRM;
       cdaRz: // global
           R2 = _scW2I::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udaRM: // global
           if (%MO_S_Lt_W64(_scW2I::I64, 4)) goto cdaRD; else goto cdaRE;
       cdaRD: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdaRE: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW2J_info" {
     sat_scW2J_info:
         const sat_scW2J_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1216;
 },
 sat_scW2V_entry() //  [R1]
         { []
         }
     {offset
       cdaSf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdaSg; else goto cdaSh;
       cdaSg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdaSh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_scW2P_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW2V_info" {
     sat_scW2V_info:
         const sat_scW2V_entry;
         const 8589934593;
         const 4294967311;
         const ScWiZ_srt+1216;
 },
 sat_scW2T_entry() //  [R1]
         { []
         }
     {offset
       cdaSu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdaSv; else goto cdaSw;
       cdaSv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdaSw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scW2S::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scW2S::I64, 3)) goto udaSx; else goto udaSA;
       udaSx: // global
           if (%MO_S_Lt_W64(_scW2S::I64, 1)) goto udaSy; else goto udaSz;
       udaSy: // global
           if (%MO_S_Lt_W64(_scW2S::I64, 0)) goto cdaSo; else goto cdaSp;
       cdaSp: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udaSz: // global
           if (%MO_S_Lt_W64(_scW2S::I64, 2)) goto cdaSq; else goto cdaSr;
       cdaSq: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdaSr: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udaSA: // global
           if (%MO_S_Ge_W64(_scW2S::I64, 5)) goto cdaSo; else goto udaSB;
       cdaSo: // global
           R2 = _scW2S::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udaSB: // global
           if (%MO_S_Lt_W64(_scW2S::I64, 4)) goto cdaSs; else goto cdaSt;
       cdaSs: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdaSt: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW2T_info" {
     sat_scW2T_info:
         const sat_scW2T_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1216;
 },
 sat_scW2X_entry() //  [R1]
         { []
         }
     {offset
       cdaSP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdaSQ; else goto cdaSR;
       cdaSQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdaSR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scW2W::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scW2W::I64, 3)) goto udaSS; else goto udaSV;
       udaSS: // global
           if (%MO_S_Lt_W64(_scW2W::I64, 1)) goto udaST; else goto udaSU;
       udaST: // global
           if (%MO_S_Lt_W64(_scW2W::I64, 0)) goto cdaSJ; else goto cdaSK;
       cdaSK: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udaSU: // global
           if (%MO_S_Lt_W64(_scW2W::I64, 2)) goto cdaSL; else goto cdaSM;
       cdaSL: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdaSM: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udaSV: // global
           if (%MO_S_Ge_W64(_scW2W::I64, 5)) goto cdaSJ; else goto udaSW;
       cdaSJ: // global
           R2 = _scW2W::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udaSW: // global
           if (%MO_S_Lt_W64(_scW2W::I64, 4)) goto cdaSN; else goto cdaSO;
       cdaSN: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdaSO: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW2X_info" {
     sat_scW2X_info:
         const sat_scW2X_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1216;
 },
 go_up_scW2P_entry() //  [R1, R2]
         { []
         }
     {offset
       cdaT0: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdaT4; else goto cdaT3;
       cdaT4: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdaT3: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto cdaSY; else goto cdaSZ;
       cdaSY: // global
           _scW2N::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_scW2V_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _scW2N::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_scW2T_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdaSZ: // global
           I64[Hp - 80] = sat_scW2X_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _cdaT6::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _cdaT6::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_scW2P_info" {
     go_up_scW2P_info:
         const go_up_scW2P_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const ScWiZ_srt+1216;
 },
 sat_scW2Y_entry() //  [R1]
         { []
         }
     {offset
       cdaT7: // global
           _scW2Y::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdaT8; else goto cdaT9;
       cdaT9: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdaTb; else goto cdaTa;
       cdaTb: // global
           HpAlloc = 24;
           goto cdaT8;
       cdaT8: // global
           R1 = _scW2Y::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdaTa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scW2Y::P64;
           _scW1O::I64 = I64[_scW2Y::P64 + 24];
           _scW2N::I64 = _scW1O::I64 - I64[_scW2Y::P64 + 16];
           I64[Hp - 16] = go_up_scW2P_info;
           I64[Hp - 8] = _scW2N::I64;
           I64[Hp] = 1 - _scW2N::I64;
           R2 = _scW1O::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_scW2P_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW2Y_info" {
     sat_scW2Y_info:
         const sat_scW2Y_entry;
         const 8589934592;
         const 4294967316;
         const ScWiZ_srt+1216;
 },
 sat_scW2M_entry() //  [R1]
         { []
         }
     {offset
       cdaTo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdaTp; else goto cdaTq;
       cdaTp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdaTq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scW2L::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scW2L::I64, 3)) goto udaTr; else goto udaTu;
       udaTr: // global
           if (%MO_S_Lt_W64(_scW2L::I64, 1)) goto udaTs; else goto udaTt;
       udaTs: // global
           if (%MO_S_Lt_W64(_scW2L::I64, 0)) goto cdaTi; else goto cdaTj;
       cdaTj: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udaTt: // global
           if (%MO_S_Lt_W64(_scW2L::I64, 2)) goto cdaTk; else goto cdaTl;
       cdaTk: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdaTl: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udaTu: // global
           if (%MO_S_Ge_W64(_scW2L::I64, 5)) goto cdaTi; else goto udaTv;
       cdaTi: // global
           R2 = _scW2L::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udaTv: // global
           if (%MO_S_Lt_W64(_scW2L::I64, 4)) goto cdaTm; else goto cdaTn;
       cdaTm: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdaTn: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW2M_info" {
     sat_scW2M_info:
         const sat_scW2M_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1216;
 },
 sat_scW31_entry() //  [R1]
         { []
         }
     {offset
       cdaTM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdaTN; else goto cdaTO;
       cdaTN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdaTO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scW30::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scW30::I64, 3)) goto udaTP; else goto udaTS;
       udaTP: // global
           if (%MO_S_Lt_W64(_scW30::I64, 1)) goto udaTQ; else goto udaTR;
       udaTQ: // global
           if (%MO_S_Lt_W64(_scW30::I64, 0)) goto cdaTG; else goto cdaTH;
       cdaTH: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udaTR: // global
           if (%MO_S_Lt_W64(_scW30::I64, 2)) goto cdaTI; else goto cdaTJ;
       cdaTI: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdaTJ: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udaTS: // global
           if (%MO_S_Ge_W64(_scW30::I64, 5)) goto cdaTG; else goto udaTT;
       cdaTG: // global
           R2 = _scW30::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udaTT: // global
           if (%MO_S_Lt_W64(_scW30::I64, 4)) goto cdaTK; else goto cdaTL;
       cdaTK: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdaTL: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW31_info" {
     sat_scW31_info:
         const sat_scW31_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1216;
 },
 sat_scW3e_entry() //  [R1]
         { []
         }
     {offset
       cdaUq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdaUr; else goto cdaUs;
       cdaUr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdaUs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_scW38_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW3e_info" {
     sat_scW3e_info:
         const sat_scW3e_entry;
         const 8589934593;
         const 4294967311;
         const ScWiZ_srt+1216;
 },
 sat_scW3c_entry() //  [R1]
         { []
         }
     {offset
       cdaUF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdaUG; else goto cdaUH;
       cdaUG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdaUH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scW3b::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scW3b::I64, 3)) goto udaUI; else goto udaUL;
       udaUI: // global
           if (%MO_S_Lt_W64(_scW3b::I64, 1)) goto udaUJ; else goto udaUK;
       udaUJ: // global
           if (%MO_S_Lt_W64(_scW3b::I64, 0)) goto cdaUz; else goto cdaUA;
       cdaUA: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udaUK: // global
           if (%MO_S_Lt_W64(_scW3b::I64, 2)) goto cdaUB; else goto cdaUC;
       cdaUB: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdaUC: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udaUL: // global
           if (%MO_S_Ge_W64(_scW3b::I64, 5)) goto cdaUz; else goto udaUM;
       cdaUz: // global
           R2 = _scW3b::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udaUM: // global
           if (%MO_S_Lt_W64(_scW3b::I64, 4)) goto cdaUD; else goto cdaUE;
       cdaUD: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdaUE: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW3c_info" {
     sat_scW3c_info:
         const sat_scW3c_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1216;
 },
 sat_scW3g_entry() //  [R1]
         { []
         }
     {offset
       cdaV0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdaV1; else goto cdaV2;
       cdaV1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdaV2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scW3f::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scW3f::I64, 3)) goto udaV3; else goto udaV6;
       udaV3: // global
           if (%MO_S_Lt_W64(_scW3f::I64, 1)) goto udaV4; else goto udaV5;
       udaV4: // global
           if (%MO_S_Lt_W64(_scW3f::I64, 0)) goto cdaUU; else goto cdaUV;
       cdaUV: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udaV5: // global
           if (%MO_S_Lt_W64(_scW3f::I64, 2)) goto cdaUW; else goto cdaUX;
       cdaUW: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdaUX: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udaV6: // global
           if (%MO_S_Ge_W64(_scW3f::I64, 5)) goto cdaUU; else goto udaV7;
       cdaUU: // global
           R2 = _scW3f::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udaV7: // global
           if (%MO_S_Lt_W64(_scW3f::I64, 4)) goto cdaUY; else goto cdaUZ;
       cdaUY: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdaUZ: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW3g_info" {
     sat_scW3g_info:
         const sat_scW3g_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1216;
 },
 go_dn_scW38_entry() //  [R1, R2]
         { []
         }
     {offset
       cdaVb: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdaVf; else goto cdaVe;
       cdaVf: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdaVe: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto cdaV9; else goto cdaVa;
       cdaV9: // global
           _scW36::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_scW3e_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _scW36::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_scW3c_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdaVa: // global
           I64[Hp - 80] = sat_scW3g_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _cdaVh::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _cdaVh::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_scW38_info" {
     go_dn_scW38_info:
         const go_dn_scW38_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const ScWiZ_srt+1216;
 },
 sat_scW3h_entry() //  [R1]
         { []
         }
     {offset
       cdaVi: // global
           _scW3h::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdaVj; else goto cdaVk;
       cdaVk: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdaVm; else goto cdaVl;
       cdaVm: // global
           HpAlloc = 24;
           goto cdaVj;
       cdaVj: // global
           R1 = _scW3h::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdaVl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scW3h::P64;
           _scW1O::I64 = I64[_scW3h::P64 + 24];
           _scW36::I64 = _scW1O::I64 - I64[_scW3h::P64 + 16];
           I64[Hp - 16] = go_dn_scW38_info;
           I64[Hp - 8] = _scW36::I64;
           I64[Hp] = 2 - _scW36::I64;
           R2 = _scW1O::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_scW38_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW3h_info" {
     sat_scW3h_info:
         const sat_scW3h_entry;
         const 8589934592;
         const 4294967316;
         const ScWiZ_srt+1216;
 },
 sat_scW35_entry() //  [R1]
         { []
         }
     {offset
       cdaVz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdaVA; else goto cdaVB;
       cdaVA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdaVB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scW34::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scW34::I64, 3)) goto udaVC; else goto udaVF;
       udaVC: // global
           if (%MO_S_Lt_W64(_scW34::I64, 1)) goto udaVD; else goto udaVE;
       udaVD: // global
           if (%MO_S_Lt_W64(_scW34::I64, 0)) goto cdaVt; else goto cdaVu;
       cdaVu: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udaVE: // global
           if (%MO_S_Lt_W64(_scW34::I64, 2)) goto cdaVv; else goto cdaVw;
       cdaVv: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdaVw: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udaVF: // global
           if (%MO_S_Ge_W64(_scW34::I64, 5)) goto cdaVt; else goto udaVG;
       cdaVt: // global
           R2 = _scW34::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udaVG: // global
           if (%MO_S_Lt_W64(_scW34::I64, 4)) goto cdaVx; else goto cdaVy;
       cdaVx: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdaVy: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW35_info" {
     sat_scW35_info:
         const sat_scW35_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1216;
 },
 sat_scW3k_entry() //  [R1]
         { []
         }
     {offset
       cdaVX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdaVY; else goto cdaVZ;
       cdaVY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdaVZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scW3j::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scW3j::I64, 3)) goto udaW0; else goto udaW3;
       udaW0: // global
           if (%MO_S_Lt_W64(_scW3j::I64, 1)) goto udaW1; else goto udaW2;
       udaW1: // global
           if (%MO_S_Lt_W64(_scW3j::I64, 0)) goto cdaVR; else goto cdaVS;
       cdaVS: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udaW2: // global
           if (%MO_S_Lt_W64(_scW3j::I64, 2)) goto cdaVT; else goto cdaVU;
       cdaVT: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdaVU: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udaW3: // global
           if (%MO_S_Ge_W64(_scW3j::I64, 5)) goto cdaVR; else goto udaW4;
       cdaVR: // global
           R2 = _scW3j::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udaW4: // global
           if (%MO_S_Lt_W64(_scW3j::I64, 4)) goto cdaVV; else goto cdaVW;
       cdaVV: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdaVW: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW3k_info" {
     sat_scW3k_info:
         const sat_scW3k_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1216;
 },
 sat_scW3w_entry() //  [R1]
         { []
         }
     {offset
       cdaWx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdaWy; else goto cdaWz;
       cdaWy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdaWz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_scW3q_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW3w_info" {
     sat_scW3w_info:
         const sat_scW3w_entry;
         const 8589934593;
         const 4294967311;
         const ScWiZ_srt+1216;
 },
 sat_scW3u_entry() //  [R1]
         { []
         }
     {offset
       cdaWM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdaWN; else goto cdaWO;
       cdaWN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdaWO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scW3t::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scW3t::I64, 3)) goto udaWP; else goto udaWS;
       udaWP: // global
           if (%MO_S_Lt_W64(_scW3t::I64, 1)) goto udaWQ; else goto udaWR;
       udaWQ: // global
           if (%MO_S_Lt_W64(_scW3t::I64, 0)) goto cdaWG; else goto cdaWH;
       cdaWH: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udaWR: // global
           if (%MO_S_Lt_W64(_scW3t::I64, 2)) goto cdaWI; else goto cdaWJ;
       cdaWI: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdaWJ: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udaWS: // global
           if (%MO_S_Ge_W64(_scW3t::I64, 5)) goto cdaWG; else goto udaWT;
       cdaWG: // global
           R2 = _scW3t::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udaWT: // global
           if (%MO_S_Lt_W64(_scW3t::I64, 4)) goto cdaWK; else goto cdaWL;
       cdaWK: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdaWL: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW3u_info" {
     sat_scW3u_info:
         const sat_scW3u_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1216;
 },
 sat_scW3y_entry() //  [R1]
         { []
         }
     {offset
       cdaX7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdaX8; else goto cdaX9;
       cdaX8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdaX9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scW3x::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scW3x::I64, 3)) goto udaXa; else goto udaXd;
       udaXa: // global
           if (%MO_S_Lt_W64(_scW3x::I64, 1)) goto udaXb; else goto udaXc;
       udaXb: // global
           if (%MO_S_Lt_W64(_scW3x::I64, 0)) goto cdaX1; else goto cdaX2;
       cdaX2: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udaXc: // global
           if (%MO_S_Lt_W64(_scW3x::I64, 2)) goto cdaX3; else goto cdaX4;
       cdaX3: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdaX4: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udaXd: // global
           if (%MO_S_Ge_W64(_scW3x::I64, 5)) goto cdaX1; else goto udaXe;
       cdaX1: // global
           R2 = _scW3x::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udaXe: // global
           if (%MO_S_Lt_W64(_scW3x::I64, 4)) goto cdaX5; else goto cdaX6;
       cdaX5: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdaX6: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW3y_info" {
     sat_scW3y_info:
         const sat_scW3y_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1216;
 },
 go_up_scW3q_entry() //  [R1, R2]
         { []
         }
     {offset
       cdaXi: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdaXm; else goto cdaXl;
       cdaXm: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdaXl: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto cdaXg; else goto cdaXh;
       cdaXg: // global
           _scW3o::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_scW3w_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _scW3o::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_scW3u_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdaXh: // global
           I64[Hp - 80] = sat_scW3y_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _cdaXo::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _cdaXo::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_scW3q_info" {
     go_up_scW3q_info:
         const go_up_scW3q_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const ScWiZ_srt+1216;
 },
 sat_scW3z_entry() //  [R1]
         { []
         }
     {offset
       cdaXp: // global
           _scW3z::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdaXq; else goto cdaXr;
       cdaXr: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdaXt; else goto cdaXs;
       cdaXt: // global
           HpAlloc = 24;
           goto cdaXq;
       cdaXq: // global
           R1 = _scW3z::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdaXs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scW3z::P64;
           _scW1O::I64 = I64[_scW3z::P64 + 24];
           _scW3o::I64 = _scW1O::I64 - I64[_scW3z::P64 + 16];
           I64[Hp - 16] = go_up_scW3q_info;
           I64[Hp - 8] = _scW3o::I64;
           I64[Hp] = 2 - _scW3o::I64;
           R2 = _scW1O::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_scW3q_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW3z_info" {
     sat_scW3z_info:
         const sat_scW3z_entry;
         const 8589934592;
         const 4294967316;
         const ScWiZ_srt+1216;
 },
 sat_scW3n_entry() //  [R1]
         { []
         }
     {offset
       cdaXG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdaXH; else goto cdaXI;
       cdaXH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdaXI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scW3m::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scW3m::I64, 3)) goto udaXJ; else goto udaXM;
       udaXJ: // global
           if (%MO_S_Lt_W64(_scW3m::I64, 1)) goto udaXK; else goto udaXL;
       udaXK: // global
           if (%MO_S_Lt_W64(_scW3m::I64, 0)) goto cdaXA; else goto cdaXB;
       cdaXB: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udaXL: // global
           if (%MO_S_Lt_W64(_scW3m::I64, 2)) goto cdaXC; else goto cdaXD;
       cdaXC: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdaXD: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udaXM: // global
           if (%MO_S_Ge_W64(_scW3m::I64, 5)) goto cdaXA; else goto udaXN;
       cdaXA: // global
           R2 = _scW3m::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udaXN: // global
           if (%MO_S_Lt_W64(_scW3m::I64, 4)) goto cdaXE; else goto cdaXF;
       cdaXE: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdaXF: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW3n_info" {
     sat_scW3n_info:
         const sat_scW3n_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1216;
 },
 sat_scW3C_entry() //  [R1]
         { []
         }
     {offset
       cdaY4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdaY5; else goto cdaY6;
       cdaY5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdaY6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scW3B::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scW3B::I64, 3)) goto udaY7; else goto udaYa;
       udaY7: // global
           if (%MO_S_Lt_W64(_scW3B::I64, 1)) goto udaY8; else goto udaY9;
       udaY8: // global
           if (%MO_S_Lt_W64(_scW3B::I64, 0)) goto cdaXY; else goto cdaXZ;
       cdaXZ: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udaY9: // global
           if (%MO_S_Lt_W64(_scW3B::I64, 2)) goto cdaY0; else goto cdaY1;
       cdaY0: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdaY1: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udaYa: // global
           if (%MO_S_Ge_W64(_scW3B::I64, 5)) goto cdaXY; else goto udaYb;
       cdaXY: // global
           R2 = _scW3B::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udaYb: // global
           if (%MO_S_Lt_W64(_scW3B::I64, 4)) goto cdaY2; else goto cdaY3;
       cdaY2: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdaY3: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW3C_info" {
     sat_scW3C_info:
         const sat_scW3C_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1216;
 },
 sat_scW3P_entry() //  [R1]
         { []
         }
     {offset
       cdaYI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdaYJ; else goto cdaYK;
       cdaYJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdaYK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_scW3J_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW3P_info" {
     sat_scW3P_info:
         const sat_scW3P_entry;
         const 8589934593;
         const 4294967311;
         const ScWiZ_srt+1216;
 },
 sat_scW3N_entry() //  [R1]
         { []
         }
     {offset
       cdaYX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdaYY; else goto cdaYZ;
       cdaYY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdaYZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scW3M::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scW3M::I64, 3)) goto udaZ0; else goto udaZ3;
       udaZ0: // global
           if (%MO_S_Lt_W64(_scW3M::I64, 1)) goto udaZ1; else goto udaZ2;
       udaZ1: // global
           if (%MO_S_Lt_W64(_scW3M::I64, 0)) goto cdaYR; else goto cdaYS;
       cdaYS: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udaZ2: // global
           if (%MO_S_Lt_W64(_scW3M::I64, 2)) goto cdaYT; else goto cdaYU;
       cdaYT: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdaYU: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udaZ3: // global
           if (%MO_S_Ge_W64(_scW3M::I64, 5)) goto cdaYR; else goto udaZ4;
       cdaYR: // global
           R2 = _scW3M::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udaZ4: // global
           if (%MO_S_Lt_W64(_scW3M::I64, 4)) goto cdaYV; else goto cdaYW;
       cdaYV: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdaYW: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW3N_info" {
     sat_scW3N_info:
         const sat_scW3N_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1216;
 },
 sat_scW3R_entry() //  [R1]
         { []
         }
     {offset
       cdaZi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdaZj; else goto cdaZk;
       cdaZj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdaZk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scW3Q::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scW3Q::I64, 3)) goto udaZl; else goto udaZo;
       udaZl: // global
           if (%MO_S_Lt_W64(_scW3Q::I64, 1)) goto udaZm; else goto udaZn;
       udaZm: // global
           if (%MO_S_Lt_W64(_scW3Q::I64, 0)) goto cdaZc; else goto cdaZd;
       cdaZd: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udaZn: // global
           if (%MO_S_Lt_W64(_scW3Q::I64, 2)) goto cdaZe; else goto cdaZf;
       cdaZe: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdaZf: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udaZo: // global
           if (%MO_S_Ge_W64(_scW3Q::I64, 5)) goto cdaZc; else goto udaZp;
       cdaZc: // global
           R2 = _scW3Q::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udaZp: // global
           if (%MO_S_Lt_W64(_scW3Q::I64, 4)) goto cdaZg; else goto cdaZh;
       cdaZg: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdaZh: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW3R_info" {
     sat_scW3R_info:
         const sat_scW3R_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1216;
 },
 go_dn_scW3J_entry() //  [R1, R2]
         { []
         }
     {offset
       cdaZt: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdaZx; else goto cdaZw;
       cdaZx: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdaZw: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto cdaZr; else goto cdaZs;
       cdaZr: // global
           _scW3H::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_scW3P_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _scW3H::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_scW3N_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdaZs: // global
           I64[Hp - 80] = sat_scW3R_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _cdaZz::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _cdaZz::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_scW3J_info" {
     go_dn_scW3J_info:
         const go_dn_scW3J_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const ScWiZ_srt+1216;
 },
 sat_scW3S_entry() //  [R1]
         { []
         }
     {offset
       cdaZA: // global
           _scW3S::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdaZB; else goto cdaZC;
       cdaZC: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdaZE; else goto cdaZD;
       cdaZE: // global
           HpAlloc = 24;
           goto cdaZB;
       cdaZB: // global
           R1 = _scW3S::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdaZD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scW3S::P64;
           _scW1O::I64 = I64[_scW3S::P64 + 24];
           _scW3H::I64 = _scW1O::I64 - I64[_scW3S::P64 + 16];
           I64[Hp - 16] = go_dn_scW3J_info;
           I64[Hp - 8] = _scW3H::I64;
           I64[Hp] = 3 - _scW3H::I64;
           R2 = _scW1O::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_scW3J_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW3S_info" {
     sat_scW3S_info:
         const sat_scW3S_entry;
         const 8589934592;
         const 4294967316;
         const ScWiZ_srt+1216;
 },
 sat_scW3G_entry() //  [R1]
         { []
         }
     {offset
       cdaZR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdaZS; else goto cdaZT;
       cdaZS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdaZT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scW3F::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scW3F::I64, 3)) goto udaZU; else goto udaZX;
       udaZU: // global
           if (%MO_S_Lt_W64(_scW3F::I64, 1)) goto udaZV; else goto udaZW;
       udaZV: // global
           if (%MO_S_Lt_W64(_scW3F::I64, 0)) goto cdaZL; else goto cdaZM;
       cdaZM: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udaZW: // global
           if (%MO_S_Lt_W64(_scW3F::I64, 2)) goto cdaZN; else goto cdaZO;
       cdaZN: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdaZO: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udaZX: // global
           if (%MO_S_Ge_W64(_scW3F::I64, 5)) goto cdaZL; else goto udaZY;
       cdaZL: // global
           R2 = _scW3F::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udaZY: // global
           if (%MO_S_Lt_W64(_scW3F::I64, 4)) goto cdaZP; else goto cdaZQ;
       cdaZP: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdaZQ: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW3G_info" {
     sat_scW3G_info:
         const sat_scW3G_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1216;
 },
 sat_scW3V_entry() //  [R1]
         { []
         }
     {offset
       cdb0f: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdb0g; else goto cdb0h;
       cdb0g: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdb0h: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scW3U::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scW3U::I64, 3)) goto udb0i; else goto udb0l;
       udb0i: // global
           if (%MO_S_Lt_W64(_scW3U::I64, 1)) goto udb0j; else goto udb0k;
       udb0j: // global
           if (%MO_S_Lt_W64(_scW3U::I64, 0)) goto cdb09; else goto cdb0a;
       cdb0a: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udb0k: // global
           if (%MO_S_Lt_W64(_scW3U::I64, 2)) goto cdb0b; else goto cdb0c;
       cdb0b: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdb0c: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udb0l: // global
           if (%MO_S_Ge_W64(_scW3U::I64, 5)) goto cdb09; else goto udb0m;
       cdb09: // global
           R2 = _scW3U::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udb0m: // global
           if (%MO_S_Lt_W64(_scW3U::I64, 4)) goto cdb0d; else goto cdb0e;
       cdb0d: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdb0e: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW3V_info" {
     sat_scW3V_info:
         const sat_scW3V_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1216;
 },
 sat_scW47_entry() //  [R1]
         { []
         }
     {offset
       cdb0P: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdb0Q; else goto cdb0R;
       cdb0Q: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdb0R: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_scW41_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW47_info" {
     sat_scW47_info:
         const sat_scW47_entry;
         const 8589934593;
         const 4294967311;
         const ScWiZ_srt+1216;
 },
 sat_scW45_entry() //  [R1]
         { []
         }
     {offset
       cdb14: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdb15; else goto cdb16;
       cdb15: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdb16: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scW44::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scW44::I64, 3)) goto udb17; else goto udb1a;
       udb17: // global
           if (%MO_S_Lt_W64(_scW44::I64, 1)) goto udb18; else goto udb19;
       udb18: // global
           if (%MO_S_Lt_W64(_scW44::I64, 0)) goto cdb0Y; else goto cdb0Z;
       cdb0Z: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udb19: // global
           if (%MO_S_Lt_W64(_scW44::I64, 2)) goto cdb10; else goto cdb11;
       cdb10: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdb11: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udb1a: // global
           if (%MO_S_Ge_W64(_scW44::I64, 5)) goto cdb0Y; else goto udb1b;
       cdb0Y: // global
           R2 = _scW44::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udb1b: // global
           if (%MO_S_Lt_W64(_scW44::I64, 4)) goto cdb12; else goto cdb13;
       cdb12: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdb13: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW45_info" {
     sat_scW45_info:
         const sat_scW45_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1216;
 },
 sat_scW49_entry() //  [R1]
         { []
         }
     {offset
       cdb1p: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdb1q; else goto cdb1r;
       cdb1q: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdb1r: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scW48::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scW48::I64, 3)) goto udb1s; else goto udb1v;
       udb1s: // global
           if (%MO_S_Lt_W64(_scW48::I64, 1)) goto udb1t; else goto udb1u;
       udb1t: // global
           if (%MO_S_Lt_W64(_scW48::I64, 0)) goto cdb1j; else goto cdb1k;
       cdb1k: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udb1u: // global
           if (%MO_S_Lt_W64(_scW48::I64, 2)) goto cdb1l; else goto cdb1m;
       cdb1l: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdb1m: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udb1v: // global
           if (%MO_S_Ge_W64(_scW48::I64, 5)) goto cdb1j; else goto udb1w;
       cdb1j: // global
           R2 = _scW48::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udb1w: // global
           if (%MO_S_Lt_W64(_scW48::I64, 4)) goto cdb1n; else goto cdb1o;
       cdb1n: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdb1o: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW49_info" {
     sat_scW49_info:
         const sat_scW49_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1216;
 },
 go_up_scW41_entry() //  [R1, R2]
         { []
         }
     {offset
       cdb1A: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdb1E; else goto cdb1D;
       cdb1E: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdb1D: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto cdb1y; else goto cdb1z;
       cdb1y: // global
           _scW3Z::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_scW47_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _scW3Z::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_scW45_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdb1z: // global
           I64[Hp - 80] = sat_scW49_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _cdb1G::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _cdb1G::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_scW41_info" {
     go_up_scW41_info:
         const go_up_scW41_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const ScWiZ_srt+1216;
 },
 sat_scW4a_entry() //  [R1]
         { []
         }
     {offset
       cdb1H: // global
           _scW4a::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdb1I; else goto cdb1J;
       cdb1J: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdb1L; else goto cdb1K;
       cdb1L: // global
           HpAlloc = 24;
           goto cdb1I;
       cdb1I: // global
           R1 = _scW4a::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdb1K: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scW4a::P64;
           _scW1O::I64 = I64[_scW4a::P64 + 24];
           _scW3Z::I64 = _scW1O::I64 - I64[_scW4a::P64 + 16];
           I64[Hp - 16] = go_up_scW41_info;
           I64[Hp - 8] = _scW3Z::I64;
           I64[Hp] = 3 - _scW3Z::I64;
           R2 = _scW1O::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_scW41_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW4a_info" {
     sat_scW4a_info:
         const sat_scW4a_entry;
         const 8589934592;
         const 4294967316;
         const ScWiZ_srt+1216;
 },
 sat_scW3Y_entry() //  [R1]
         { []
         }
     {offset
       cdb1Y: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdb1Z; else goto cdb20;
       cdb1Z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdb20: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scW3X::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scW3X::I64, 3)) goto udb21; else goto udb24;
       udb21: // global
           if (%MO_S_Lt_W64(_scW3X::I64, 1)) goto udb22; else goto udb23;
       udb22: // global
           if (%MO_S_Lt_W64(_scW3X::I64, 0)) goto cdb1S; else goto cdb1T;
       cdb1T: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udb23: // global
           if (%MO_S_Lt_W64(_scW3X::I64, 2)) goto cdb1U; else goto cdb1V;
       cdb1U: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdb1V: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udb24: // global
           if (%MO_S_Ge_W64(_scW3X::I64, 5)) goto cdb1S; else goto udb25;
       cdb1S: // global
           R2 = _scW3X::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udb25: // global
           if (%MO_S_Lt_W64(_scW3X::I64, 4)) goto cdb1W; else goto cdb1X;
       cdb1W: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdb1X: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW3Y_info" {
     sat_scW3Y_info:
         const sat_scW3Y_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1216;
 },
 sat_scW4d_entry() //  [R1]
         { []
         }
     {offset
       cdb2m: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdb2n; else goto cdb2o;
       cdb2n: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdb2o: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scW4c::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scW4c::I64, 3)) goto udb2p; else goto udb2s;
       udb2p: // global
           if (%MO_S_Lt_W64(_scW4c::I64, 1)) goto udb2q; else goto udb2r;
       udb2q: // global
           if (%MO_S_Lt_W64(_scW4c::I64, 0)) goto cdb2g; else goto cdb2h;
       cdb2h: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udb2r: // global
           if (%MO_S_Lt_W64(_scW4c::I64, 2)) goto cdb2i; else goto cdb2j;
       cdb2i: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdb2j: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udb2s: // global
           if (%MO_S_Ge_W64(_scW4c::I64, 5)) goto cdb2g; else goto udb2t;
       cdb2g: // global
           R2 = _scW4c::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udb2t: // global
           if (%MO_S_Lt_W64(_scW4c::I64, 4)) goto cdb2k; else goto cdb2l;
       cdb2k: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdb2l: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW4d_info" {
     sat_scW4d_info:
         const sat_scW4d_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1216;
 },
 sat_scW4q_entry() //  [R1]
         { []
         }
     {offset
       cdb30: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdb31; else goto cdb32;
       cdb31: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdb32: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_scW4k_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW4q_info" {
     sat_scW4q_info:
         const sat_scW4q_entry;
         const 8589934593;
         const 4294967311;
         const ScWiZ_srt+1216;
 },
 sat_scW4o_entry() //  [R1]
         { []
         }
     {offset
       cdb3f: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdb3g; else goto cdb3h;
       cdb3g: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdb3h: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scW4n::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scW4n::I64, 3)) goto udb3i; else goto udb3l;
       udb3i: // global
           if (%MO_S_Lt_W64(_scW4n::I64, 1)) goto udb3j; else goto udb3k;
       udb3j: // global
           if (%MO_S_Lt_W64(_scW4n::I64, 0)) goto cdb39; else goto cdb3a;
       cdb3a: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udb3k: // global
           if (%MO_S_Lt_W64(_scW4n::I64, 2)) goto cdb3b; else goto cdb3c;
       cdb3b: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdb3c: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udb3l: // global
           if (%MO_S_Ge_W64(_scW4n::I64, 5)) goto cdb39; else goto udb3m;
       cdb39: // global
           R2 = _scW4n::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udb3m: // global
           if (%MO_S_Lt_W64(_scW4n::I64, 4)) goto cdb3d; else goto cdb3e;
       cdb3d: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdb3e: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW4o_info" {
     sat_scW4o_info:
         const sat_scW4o_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1216;
 },
 sat_scW4s_entry() //  [R1]
         { []
         }
     {offset
       cdb3A: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdb3B; else goto cdb3C;
       cdb3B: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdb3C: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scW4r::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scW4r::I64, 3)) goto udb3D; else goto udb3G;
       udb3D: // global
           if (%MO_S_Lt_W64(_scW4r::I64, 1)) goto udb3E; else goto udb3F;
       udb3E: // global
           if (%MO_S_Lt_W64(_scW4r::I64, 0)) goto cdb3u; else goto cdb3v;
       cdb3v: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udb3F: // global
           if (%MO_S_Lt_W64(_scW4r::I64, 2)) goto cdb3w; else goto cdb3x;
       cdb3w: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdb3x: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udb3G: // global
           if (%MO_S_Ge_W64(_scW4r::I64, 5)) goto cdb3u; else goto udb3H;
       cdb3u: // global
           R2 = _scW4r::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udb3H: // global
           if (%MO_S_Lt_W64(_scW4r::I64, 4)) goto cdb3y; else goto cdb3z;
       cdb3y: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdb3z: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW4s_info" {
     sat_scW4s_info:
         const sat_scW4s_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1216;
 },
 go_dn_scW4k_entry() //  [R1, R2]
         { []
         }
     {offset
       cdb3L: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdb3P; else goto cdb3O;
       cdb3P: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdb3O: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto cdb3J; else goto cdb3K;
       cdb3J: // global
           _scW4i::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_scW4q_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _scW4i::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_scW4o_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdb3K: // global
           I64[Hp - 80] = sat_scW4s_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _cdb3R::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _cdb3R::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_scW4k_info" {
     go_dn_scW4k_info:
         const go_dn_scW4k_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const ScWiZ_srt+1216;
 },
 sat_scW4t_entry() //  [R1]
         { []
         }
     {offset
       cdb3S: // global
           _scW4t::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdb3T; else goto cdb3U;
       cdb3U: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdb3W; else goto cdb3V;
       cdb3W: // global
           HpAlloc = 24;
           goto cdb3T;
       cdb3T: // global
           R1 = _scW4t::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdb3V: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scW4t::P64;
           _scW1O::I64 = I64[_scW4t::P64 + 24];
           _scW4i::I64 = _scW1O::I64 - I64[_scW4t::P64 + 16];
           I64[Hp - 16] = go_dn_scW4k_info;
           I64[Hp - 8] = _scW4i::I64;
           I64[Hp] = 4 - _scW4i::I64;
           R2 = _scW1O::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_scW4k_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW4t_info" {
     sat_scW4t_info:
         const sat_scW4t_entry;
         const 8589934592;
         const 4294967316;
         const ScWiZ_srt+1216;
 },
 sat_scW4h_entry() //  [R1]
         { []
         }
     {offset
       cdb49: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdb4a; else goto cdb4b;
       cdb4a: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdb4b: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scW4g::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scW4g::I64, 3)) goto udb4c; else goto udb4f;
       udb4c: // global
           if (%MO_S_Lt_W64(_scW4g::I64, 1)) goto udb4d; else goto udb4e;
       udb4d: // global
           if (%MO_S_Lt_W64(_scW4g::I64, 0)) goto cdb43; else goto cdb44;
       cdb44: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udb4e: // global
           if (%MO_S_Lt_W64(_scW4g::I64, 2)) goto cdb45; else goto cdb46;
       cdb45: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdb46: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udb4f: // global
           if (%MO_S_Ge_W64(_scW4g::I64, 5)) goto cdb43; else goto udb4g;
       cdb43: // global
           R2 = _scW4g::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udb4g: // global
           if (%MO_S_Lt_W64(_scW4g::I64, 4)) goto cdb47; else goto cdb48;
       cdb47: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdb48: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW4h_info" {
     sat_scW4h_info:
         const sat_scW4h_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1216;
 },
 sat_scW4w_entry() //  [R1]
         { []
         }
     {offset
       cdb4x: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdb4y; else goto cdb4z;
       cdb4y: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdb4z: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scW4v::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scW4v::I64, 3)) goto udb4A; else goto udb4D;
       udb4A: // global
           if (%MO_S_Lt_W64(_scW4v::I64, 1)) goto udb4B; else goto udb4C;
       udb4B: // global
           if (%MO_S_Lt_W64(_scW4v::I64, 0)) goto cdb4r; else goto cdb4s;
       cdb4s: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udb4C: // global
           if (%MO_S_Lt_W64(_scW4v::I64, 2)) goto cdb4t; else goto cdb4u;
       cdb4t: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdb4u: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udb4D: // global
           if (%MO_S_Ge_W64(_scW4v::I64, 5)) goto cdb4r; else goto udb4E;
       cdb4r: // global
           R2 = _scW4v::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udb4E: // global
           if (%MO_S_Lt_W64(_scW4v::I64, 4)) goto cdb4v; else goto cdb4w;
       cdb4v: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdb4w: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW4w_info" {
     sat_scW4w_info:
         const sat_scW4w_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1216;
 },
 sat_scW4I_entry() //  [R1]
         { []
         }
     {offset
       cdb57: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdb58; else goto cdb59;
       cdb58: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdb59: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_scW4C_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW4I_info" {
     sat_scW4I_info:
         const sat_scW4I_entry;
         const 8589934593;
         const 4294967311;
         const ScWiZ_srt+1216;
 },
 sat_scW4G_entry() //  [R1]
         { []
         }
     {offset
       cdb5m: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdb5n; else goto cdb5o;
       cdb5n: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdb5o: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scW4F::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scW4F::I64, 3)) goto udb5p; else goto udb5s;
       udb5p: // global
           if (%MO_S_Lt_W64(_scW4F::I64, 1)) goto udb5q; else goto udb5r;
       udb5q: // global
           if (%MO_S_Lt_W64(_scW4F::I64, 0)) goto cdb5g; else goto cdb5h;
       cdb5h: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udb5r: // global
           if (%MO_S_Lt_W64(_scW4F::I64, 2)) goto cdb5i; else goto cdb5j;
       cdb5i: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdb5j: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udb5s: // global
           if (%MO_S_Ge_W64(_scW4F::I64, 5)) goto cdb5g; else goto udb5t;
       cdb5g: // global
           R2 = _scW4F::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udb5t: // global
           if (%MO_S_Lt_W64(_scW4F::I64, 4)) goto cdb5k; else goto cdb5l;
       cdb5k: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdb5l: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW4G_info" {
     sat_scW4G_info:
         const sat_scW4G_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1216;
 },
 sat_scW4K_entry() //  [R1]
         { []
         }
     {offset
       cdb5H: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdb5I; else goto cdb5J;
       cdb5I: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdb5J: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scW4J::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scW4J::I64, 3)) goto udb5K; else goto udb5N;
       udb5K: // global
           if (%MO_S_Lt_W64(_scW4J::I64, 1)) goto udb5L; else goto udb5M;
       udb5L: // global
           if (%MO_S_Lt_W64(_scW4J::I64, 0)) goto cdb5B; else goto cdb5C;
       cdb5C: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udb5M: // global
           if (%MO_S_Lt_W64(_scW4J::I64, 2)) goto cdb5D; else goto cdb5E;
       cdb5D: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdb5E: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udb5N: // global
           if (%MO_S_Ge_W64(_scW4J::I64, 5)) goto cdb5B; else goto udb5O;
       cdb5B: // global
           R2 = _scW4J::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udb5O: // global
           if (%MO_S_Lt_W64(_scW4J::I64, 4)) goto cdb5F; else goto cdb5G;
       cdb5F: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdb5G: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW4K_info" {
     sat_scW4K_info:
         const sat_scW4K_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1216;
 },
 go_up_scW4C_entry() //  [R1, R2]
         { []
         }
     {offset
       cdb5S: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdb5W; else goto cdb5V;
       cdb5W: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdb5V: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto cdb5Q; else goto cdb5R;
       cdb5Q: // global
           _scW4A::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_scW4I_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _scW4A::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_scW4G_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdb5R: // global
           I64[Hp - 80] = sat_scW4K_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _cdb5Y::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _cdb5Y::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_scW4C_info" {
     go_up_scW4C_info:
         const go_up_scW4C_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const ScWiZ_srt+1216;
 },
 sat_scW4L_entry() //  [R1]
         { []
         }
     {offset
       cdb5Z: // global
           _scW4L::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdb60; else goto cdb61;
       cdb61: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdb63; else goto cdb62;
       cdb63: // global
           HpAlloc = 24;
           goto cdb60;
       cdb60: // global
           R1 = _scW4L::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdb62: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scW4L::P64;
           _scW1O::I64 = I64[_scW4L::P64 + 24];
           _scW4A::I64 = _scW1O::I64 - I64[_scW4L::P64 + 16];
           I64[Hp - 16] = go_up_scW4C_info;
           I64[Hp - 8] = _scW4A::I64;
           I64[Hp] = 4 - _scW4A::I64;
           R2 = _scW1O::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_scW4C_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW4L_info" {
     sat_scW4L_info:
         const sat_scW4L_entry;
         const 8589934592;
         const 4294967316;
         const ScWiZ_srt+1216;
 },
 sat_scW4z_entry() //  [R1]
         { []
         }
     {offset
       cdb6g: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdb6h; else goto cdb6i;
       cdb6h: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdb6i: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scW4y::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scW4y::I64, 3)) goto udb6j; else goto udb6m;
       udb6j: // global
           if (%MO_S_Lt_W64(_scW4y::I64, 1)) goto udb6k; else goto udb6l;
       udb6k: // global
           if (%MO_S_Lt_W64(_scW4y::I64, 0)) goto cdb6a; else goto cdb6b;
       cdb6b: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udb6l: // global
           if (%MO_S_Lt_W64(_scW4y::I64, 2)) goto cdb6c; else goto cdb6d;
       cdb6c: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdb6d: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udb6m: // global
           if (%MO_S_Ge_W64(_scW4y::I64, 5)) goto cdb6a; else goto udb6n;
       cdb6a: // global
           R2 = _scW4y::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udb6n: // global
           if (%MO_S_Lt_W64(_scW4y::I64, 4)) goto cdb6e; else goto cdb6f;
       cdb6e: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdb6f: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW4z_info" {
     sat_scW4z_info:
         const sat_scW4z_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1216;
 },
 sat_scW4O_entry() //  [R1]
         { []
         }
     {offset
       cdb6E: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdb6F; else goto cdb6G;
       cdb6F: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdb6G: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scW4N::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scW4N::I64, 3)) goto udb6H; else goto udb6K;
       udb6H: // global
           if (%MO_S_Lt_W64(_scW4N::I64, 1)) goto udb6I; else goto udb6J;
       udb6I: // global
           if (%MO_S_Lt_W64(_scW4N::I64, 0)) goto cdb6y; else goto cdb6z;
       cdb6z: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udb6J: // global
           if (%MO_S_Lt_W64(_scW4N::I64, 2)) goto cdb6A; else goto cdb6B;
       cdb6A: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdb6B: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udb6K: // global
           if (%MO_S_Ge_W64(_scW4N::I64, 5)) goto cdb6y; else goto udb6L;
       cdb6y: // global
           R2 = _scW4N::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udb6L: // global
           if (%MO_S_Lt_W64(_scW4N::I64, 4)) goto cdb6C; else goto cdb6D;
       cdb6C: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdb6D: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW4O_info" {
     sat_scW4O_info:
         const sat_scW4O_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1216;
 },
 GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFromThenTo_entry() //  [R2,
                                                                 R3, R4]
         { []
         }
     {offset
       cdb6W: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdb6X; else goto cdb6Y;
       cdb6X: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFromThenTo_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdb6Y: // global
           I64[Sp - 24] = block_cdb6M_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udb9I; else goto cdb6N;
       udb9I: // global
           call _cdb6M(R1) args: 0, res: 0, upd: 0;
       cdb6N: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFromThenTo_info" {
     GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFromThenTo_info:
         const GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFromThenTo_entry;
         const 0;
         const 4503603922337806;
         const 12884901911;
         const ScWiZ_srt+1216;
 },
 _cdb6M() //  [R1]
         { []
         }
     {offset
       cdb6M: // global
           _scW1J::P64 = P64[Sp + 8];
           _cdb6V::P64 = R1 & 7;
           if (_cdb6V::P64 < 4) goto udb9B; else goto udb9D;
       udb9B: // global
           if (_cdb6V::P64 < 3) goto udb9C; else goto cdb6S;
       udb9C: // global
           if (_cdb6V::P64 < 2) goto cdb6Q; else goto cdb6R;
       cdb6Q: // global
           _scW1M::I64 = 0;
           goto scW1L;
       cdb6R: // global
           _scW1M::I64 = 1;
           goto scW1L;
       cdb6S: // global
           _scW1M::I64 = 2;
           goto scW1L;
       udb9D: // global
           if (_cdb6V::P64 < 5) goto cdb6T; else goto cdb6U;
       cdb6T: // global
           _scW1M::I64 = 3;
           goto scW1L;
       cdb6U: // global
           _scW1M::I64 = 4;
           goto scW1L;
       scW1L: // global
           I64[Sp] = block_cdb6Z_info;
           R1 = _scW1J::P64;
           I64[Sp + 8] = _scW1M::I64;
           if (R1 & 7 != 0) goto udb9H; else goto cdb8U;
       udb9H: // global
           call _cdb6Z(R1) args: 0, res: 0, upd: 0;
       cdb8U: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdb6M_info" {
     block_cdb6M_info:
         const _cdb6M;
         const 2;
         const 4294967326;
         const ScWiZ_srt+1216;
 },
 _cdb6Z() //  [R1]
         { []
         }
     {offset
       cdb6Z: // global
           _scW1K::P64 = P64[Sp + 16];
           _cdb9w::P64 = R1 & 7;
           if (_cdb9w::P64 < 4) goto udb9E; else goto udb9G;
       udb9E: // global
           if (_cdb9w::P64 < 3) goto udb9F; else goto cdb98;
       udb9F: // global
           if (_cdb9w::P64 < 2) goto cdb90; else goto cdb94;
       cdb90: // global
           _scW1O::I64 = 0;
           goto scW1N;
       cdb94: // global
           _scW1O::I64 = 1;
           goto scW1N;
       cdb98: // global
           _scW1O::I64 = 2;
           goto scW1N;
       udb9G: // global
           if (_cdb9w::P64 < 5) goto cdb9c; else goto cdb9g;
       cdb9c: // global
           _scW1O::I64 = 3;
           goto scW1N;
       cdb9g: // global
           _scW1O::I64 = 4;
           goto scW1N;
       scW1N: // global
           I64[Sp] = block_cdaLh_info;
           R1 = _scW1K::P64;
           I64[Sp + 16] = _scW1O::I64;
           if (R1 & 7 != 0) goto udb9J; else goto cdaLi;
       udb9J: // global
           call _cdaLh(R1) args: 0, res: 0, upd: 0;
       cdaLi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdb6Z_info" {
     block_cdb6Z_info:
         const _cdb6Z;
         const 66;
         const 4294967326;
         const ScWiZ_srt+1216;
 },
 _cdaLh() //  [R1]
         { []
         }
     {offset
       cdaLh: // global
           _scW1M::I64 = I64[Sp + 8];
           _scW1O::I64 = I64[Sp + 16];
           _cdb9x::P64 = R1 & 7;
           if (_cdb9x::P64 < 4) goto udb9y; else goto udb9A;
       udb9y: // global
           if (_cdb9x::P64 < 3) goto udb9z; else goto cdb7N;
       udb9z: // global
           if (_cdb9x::P64 < 2) goto cdb73; else goto cdb7q;
       cdb73: // global
           Hp = Hp + 80;
           _scW1P::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cdb8A; else goto cdb75;
       cdb75: // global
           if (%MO_S_Lt_W64(_scW1O::I64,
                            _scW1M::I64)) goto cdb7g; else goto cdb7p;
       cdb7g: // global
           if (%MO_S_Le_W64(0, _scW1O::I64)) goto cdb79; else goto cdb7e;
       cdb79: // global
           I64[Hp - 72] = sat_scW25_info;
           I64[Hp - 56] = _scW1M::I64;
           I64[Hp - 48] = _scW1O::I64;
           I64[Hp - 40] = sat_scW1T_info;
           I64[Hp - 24] = _scW1M::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdb7e: // global
           if (%MO_S_Gt_W64(0, _scW1M::I64)) goto cdb8R; else goto cdb7c;
       cdb7c: // global
           I64[Hp - 72] = sat_scW28_info;
           I64[Hp - 56] = _scW1M::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _cdb7a::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _cdb7a::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdb7p: // global
           if (%MO_S_Ge_W64(0, _scW1O::I64)) goto cdb7j; else goto cdb7o;
       cdb7j: // global
           I64[Hp - 72] = sat_scW2n_info;
           I64[Hp - 56] = _scW1M::I64;
           I64[Hp - 48] = _scW1O::I64;
           I64[Hp - 40] = sat_scW2b_info;
           I64[Hp - 24] = _scW1M::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdb7o: // global
           if (%MO_S_Lt_W64(0, _scW1M::I64)) goto cdb8R; else goto cdb7m;
       cdb7m: // global
           I64[Hp - 72] = sat_scW2q_info;
           I64[Hp - 56] = _scW1M::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _cdb7k::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _cdb7k::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdb7q: // global
           Hp = Hp + 80;
           _scW1P::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cdb8A; else goto cdb7s;
       cdb7s: // global
           if (%MO_S_Lt_W64(_scW1O::I64,
                            _scW1M::I64)) goto cdb7D; else goto cdb7M;
       cdb7D: // global
           if (%MO_S_Le_W64(1, _scW1O::I64)) goto cdb7w; else goto cdb7B;
       cdb7w: // global
           I64[Hp - 72] = sat_scW2G_info;
           I64[Hp - 56] = _scW1M::I64;
           I64[Hp - 48] = _scW1O::I64;
           I64[Hp - 40] = sat_scW2u_info;
           I64[Hp - 24] = _scW1M::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdb7B: // global
           if (%MO_S_Gt_W64(1, _scW1M::I64)) goto cdb8R; else goto cdb7z;
       cdb7z: // global
           I64[Hp - 72] = sat_scW2J_info;
           I64[Hp - 56] = _scW1M::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _cdb7x::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _cdb7x::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdb7M: // global
           if (%MO_S_Ge_W64(1, _scW1O::I64)) goto cdb7G; else goto cdb7L;
       cdb7G: // global
           I64[Hp - 72] = sat_scW2Y_info;
           I64[Hp - 56] = _scW1M::I64;
           I64[Hp - 48] = _scW1O::I64;
           I64[Hp - 40] = sat_scW2M_info;
           I64[Hp - 24] = _scW1M::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdb7L: // global
           if (%MO_S_Lt_W64(1, _scW1M::I64)) goto cdb8R; else goto cdb7J;
       cdb7J: // global
           I64[Hp - 72] = sat_scW31_info;
           I64[Hp - 56] = _scW1M::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _cdb7H::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _cdb7H::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdb7N: // global
           Hp = Hp + 80;
           _scW1P::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cdb8A; else goto cdb7P;
       cdb7P: // global
           if (%MO_S_Lt_W64(_scW1O::I64,
                            _scW1M::I64)) goto cdb80; else goto cdb89;
       cdb80: // global
           if (%MO_S_Le_W64(2, _scW1O::I64)) goto cdb7T; else goto cdb7Y;
       cdb7T: // global
           I64[Hp - 72] = sat_scW3h_info;
           I64[Hp - 56] = _scW1M::I64;
           I64[Hp - 48] = _scW1O::I64;
           I64[Hp - 40] = sat_scW35_info;
           I64[Hp - 24] = _scW1M::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdb7Y: // global
           if (%MO_S_Gt_W64(2, _scW1M::I64)) goto cdb8R; else goto cdb7W;
       cdb7W: // global
           I64[Hp - 72] = sat_scW3k_info;
           I64[Hp - 56] = _scW1M::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _cdb7U::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _cdb7U::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdb89: // global
           if (%MO_S_Ge_W64(2, _scW1O::I64)) goto cdb83; else goto cdb88;
       cdb83: // global
           I64[Hp - 72] = sat_scW3z_info;
           I64[Hp - 56] = _scW1M::I64;
           I64[Hp - 48] = _scW1O::I64;
           I64[Hp - 40] = sat_scW3n_info;
           I64[Hp - 24] = _scW1M::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdb88: // global
           if (%MO_S_Lt_W64(2, _scW1M::I64)) goto cdb8R; else goto cdb86;
       cdb86: // global
           I64[Hp - 72] = sat_scW3C_info;
           I64[Hp - 56] = _scW1M::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _cdb84::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _cdb84::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       udb9A: // global
           if (_cdb9x::P64 < 5) goto cdb8a; else goto cdb8x;
       cdb8a: // global
           Hp = Hp + 80;
           _scW1P::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cdb8A; else goto cdb8c;
       cdb8c: // global
           if (%MO_S_Lt_W64(_scW1O::I64,
                            _scW1M::I64)) goto cdb8n; else goto cdb8w;
       cdb8n: // global
           if (%MO_S_Le_W64(3, _scW1O::I64)) goto cdb8g; else goto cdb8l;
       cdb8g: // global
           I64[Hp - 72] = sat_scW3S_info;
           I64[Hp - 56] = _scW1M::I64;
           I64[Hp - 48] = _scW1O::I64;
           I64[Hp - 40] = sat_scW3G_info;
           I64[Hp - 24] = _scW1M::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdb8l: // global
           if (%MO_S_Gt_W64(3, _scW1M::I64)) goto cdb8R; else goto cdb8j;
       cdb8j: // global
           I64[Hp - 72] = sat_scW3V_info;
           I64[Hp - 56] = _scW1M::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _cdb8h::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _cdb8h::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdb8w: // global
           if (%MO_S_Ge_W64(3, _scW1O::I64)) goto cdb8q; else goto cdb8v;
       cdb8q: // global
           I64[Hp - 72] = sat_scW4a_info;
           I64[Hp - 56] = _scW1M::I64;
           I64[Hp - 48] = _scW1O::I64;
           I64[Hp - 40] = sat_scW3Y_info;
           I64[Hp - 24] = _scW1M::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdb8v: // global
           if (%MO_S_Lt_W64(3, _scW1M::I64)) goto cdb8R; else goto cdb8t;
       cdb8t: // global
           I64[Hp - 72] = sat_scW4d_info;
           I64[Hp - 56] = _scW1M::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _cdb8r::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _cdb8r::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdb8x: // global
           Hp = Hp + 80;
           _scW1P::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cdb8A; else goto cdb8z;
       cdb8A: // global
           HpAlloc = 80;
           R1 = _scW1P::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdb8z: // global
           if (%MO_S_Lt_W64(_scW1O::I64,
                            _scW1M::I64)) goto cdb8K; else goto cdb8T;
       cdb8K: // global
           if (%MO_S_Le_W64(4, _scW1O::I64)) goto cdb8D; else goto cdb8I;
       cdb8D: // global
           I64[Hp - 72] = sat_scW4t_info;
           I64[Hp - 56] = _scW1M::I64;
           I64[Hp - 48] = _scW1O::I64;
           I64[Hp - 40] = sat_scW4h_info;
           I64[Hp - 24] = _scW1M::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdb8I: // global
           if (%MO_S_Gt_W64(4, _scW1M::I64)) goto cdb8R; else goto cdb8G;
       cdb8G: // global
           I64[Hp - 72] = sat_scW4w_info;
           I64[Hp - 56] = _scW1M::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _cdb8E::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _cdb8E::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdb8T: // global
           if (%MO_S_Ge_W64(4, _scW1O::I64)) goto cdb8N; else goto cdb8S;
       cdb8N: // global
           I64[Hp - 72] = sat_scW4L_info;
           I64[Hp - 56] = _scW1M::I64;
           I64[Hp - 48] = _scW1O::I64;
           I64[Hp - 40] = sat_scW4z_info;
           I64[Hp - 24] = _scW1M::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdb8S: // global
           if (%MO_S_Lt_W64(4, _scW1M::I64)) goto cdb8R; else goto cdb8Q;
       cdb8R: // global
           Hp = Hp - 80;
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdb8Q: // global
           I64[Hp - 72] = sat_scW4O_info;
           I64[Hp - 56] = _scW1M::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _cdb8O::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _cdb8O::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdaLh_info" {
     block_cdaLh_info:
         const _cdaLh;
         const 194;
         const 4294967326;
         const ScWiZ_srt+1216;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.051217615 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoCostCentres_closure" {
     GHC.RTS.Flags.$fEnumDoCostCentres_closure:
         const GHC.Enum.C:Enum_con_info;
         const GHC.RTS.Flags.$fEnumDoCostCentres_$csucc_closure+1;
         const GHC.RTS.Flags.$fEnumDoCostCentres_$cpred_closure+1;
         const GHC.RTS.Flags.$fEnumDoCostCentres_$ctoEnum_closure+1;
         const GHC.RTS.Flags.$fEnumDoCostCentres_$cfromEnum_closure+1;
         const GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFrom_closure+1;
         const GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFromThen_closure+2;
         const GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFromTo_closure+2;
         const GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFromThenTo_closure+3;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.053575373 UTC

[section ""data" . lvl100_rcV8s_closure" {
     lvl100_rcV8s_closure:
         const lvl100_rcV8s_info;
         const 0;
         const 0;
         const 0;
 },
 lvl100_rcV8s_entry() //  [R1]
         { []
         }
     {offset
       cdbkc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdbkd; else goto cdbke;
       cdbkd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdbke: // global
           (_cdbk9::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdbk9::I64 == 0) goto cdbkb; else goto cdbka;
       cdbkb: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdbka: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdbk9::I64;
           R2 = 3;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl100_rcV8s_info" {
     lvl100_rcV8s_info:
         const lvl100_rcV8s_entry;
         const 0;
         const 4294967317;
         const ScWiZ_srt+1384;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.05789632 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoTrace_$csucc_closure" {
     GHC.RTS.Flags.$fEnumDoTrace_$csucc_closure:
         const GHC.RTS.Flags.$fEnumDoTrace_$csucc_info;
         const 0;
 },
 GHC.RTS.Flags.$fEnumDoTrace_$csucc_entry() //  [R2]
         { []
         }
     {offset
       cdbky: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdbkz; else goto cdbkA;
       cdbkz: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoTrace_$csucc_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdbkA: // global
           I64[Sp - 8] = block_cdbkq_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udbkL; else goto cdbkr;
       udbkL: // global
           call _cdbkq(R1) args: 0, res: 0, upd: 0;
       cdbkr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoTrace_$csucc_info" {
     GHC.RTS.Flags.$fEnumDoTrace_$csucc_info:
         const GHC.RTS.Flags.$fEnumDoTrace_$csucc_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const ScWiZ_srt+1392;
 },
 _cdbkq() //  [R1]
         { []
         }
     {offset
       cdbkq: // global
           _cdbkx::P64 = R1 & 7;
           if (_cdbkx::P64 < 3) goto udbkK; else goto cdbkw;
       udbkK: // global
           if (_cdbkx::P64 < 2) goto cdbku; else goto cdbkv;
       cdbku: // global
           R1 = GHC.RTS.Flags.TraceEventLog_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdbkv: // global
           R1 = GHC.RTS.Flags.TraceStderr_closure+3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdbkw: // global
           R1 = lvl100_rcV8s_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdbkq_info" {
     block_cdbkq_info:
         const _cdbkq;
         const 0;
         const 4294967326;
         const ScWiZ_srt+1400;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.064524934 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoTrace_go2_closure" {
     GHC.RTS.Flags.$fEnumDoTrace_go2_closure:
         const GHC.RTS.Flags.$fEnumDoTrace_go2_info;
         const 0;
 },
 sat_scW4Y_entry() //  [R1]
         { []
         }
     {offset
       cdblb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdblc; else goto cdbld;
       cdblc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdbld: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scW4W::I64 = I64[R1 + 16];
           if (_scW4W::I64 != 0) goto cdbl9; else goto cdbla;
       cdbl9: // global
           R2 = _scW4W::I64 + 1;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumDoTrace_go2_entry(R2) args: 24, res: 0, upd: 24;
       cdbla: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW4Y_info" {
     sat_scW4Y_info:
         const sat_scW4Y_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1408;
 },
 sat_scW4V_entry() //  [R1]
         { []
         }
     {offset
       cdblq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdblr; else goto cdbls;
       cdblr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdbls: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scW4U::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scW4U::I64, 2)) goto udblt; else goto udblv;
       udblt: // global
           if (%MO_S_Lt_W64(_scW4U::I64, 1)) goto udblu; else goto cdblo;
       udblu: // global
           if (%MO_S_Lt_W64(_scW4U::I64, 0)) goto cdblm; else goto cdbln;
       cdbln: // global
           R1 = GHC.RTS.Flags.TraceNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdblo: // global
           R1 = GHC.RTS.Flags.TraceEventLog_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udblv: // global
           if (%MO_S_Ge_W64(_scW4U::I64, 3)) goto cdblm; else goto cdblp;
       cdblm: // global
           R2 = _scW4U::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl2_entry(R2) args: 24, res: 0, upd: 24;
       cdblp: // global
           R1 = GHC.RTS.Flags.TraceStderr_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW4V_info" {
     sat_scW4V_info:
         const sat_scW4V_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1384;
 },
 GHC.RTS.Flags.$fEnumDoTrace_go2_entry() //  [R2]
         { []
         }
     {offset
       cdblx: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdblB; else goto cdblA;
       cdblB: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoTrace_go2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdblA: // global
           I64[Hp - 64] = sat_scW4Y_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_scW4V_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoTrace_go2_info" {
     GHC.RTS.Flags.$fEnumDoTrace_go2_info:
         const GHC.RTS.Flags.$fEnumDoTrace_go2_entry;
         const 0;
         const 38654705678;
         const 4294967300;
         const ScWiZ_srt+1384;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.074276328 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoTrace_go1_closure" {
     GHC.RTS.Flags.$fEnumDoTrace_go1_closure:
         const GHC.RTS.Flags.$fEnumDoTrace_go1_info;
         const 0;
 },
 sat_scW54_entry() //  [R1]
         { []
         }
     {offset
       cdbm7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdbm8; else goto cdbm9;
       cdbm8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdbm9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scW52::I64 = I64[R1 + 16];
           if (_scW52::I64 != 1) goto cdbm5; else goto cdbm6;
       cdbm5: // global
           R2 = _scW52::I64 + 1;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumDoTrace_go1_entry(R2) args: 24, res: 0, upd: 24;
       cdbm6: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW54_info" {
     sat_scW54_info:
         const sat_scW54_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1416;
 },
 sat_scW51_entry() //  [R1]
         { []
         }
     {offset
       cdbmm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdbmn; else goto cdbmo;
       cdbmn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdbmo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scW50::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scW50::I64, 2)) goto udbmp; else goto udbmr;
       udbmp: // global
           if (%MO_S_Lt_W64(_scW50::I64, 1)) goto udbmq; else goto cdbmk;
       udbmq: // global
           if (%MO_S_Lt_W64(_scW50::I64, 0)) goto cdbmi; else goto cdbmj;
       cdbmj: // global
           R1 = GHC.RTS.Flags.TraceNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdbmk: // global
           R1 = GHC.RTS.Flags.TraceEventLog_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udbmr: // global
           if (%MO_S_Ge_W64(_scW50::I64, 3)) goto cdbmi; else goto cdbml;
       cdbmi: // global
           R2 = _scW50::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl2_entry(R2) args: 24, res: 0, upd: 24;
       cdbml: // global
           R1 = GHC.RTS.Flags.TraceStderr_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW51_info" {
     sat_scW51_info:
         const sat_scW51_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1384;
 },
 GHC.RTS.Flags.$fEnumDoTrace_go1_entry() //  [R2]
         { []
         }
     {offset
       cdbmt: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdbmx; else goto cdbmw;
       cdbmx: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoTrace_go1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdbmw: // global
           I64[Hp - 64] = sat_scW54_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_scW51_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoTrace_go1_info" {
     GHC.RTS.Flags.$fEnumDoTrace_go1_info:
         const GHC.RTS.Flags.$fEnumDoTrace_go1_entry;
         const 0;
         const 73014444046;
         const 4294967300;
         const ScWiZ_srt+1384;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.083385783 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoTrace_go_closure" {
     GHC.RTS.Flags.$fEnumDoTrace_go_closure:
         const GHC.RTS.Flags.$fEnumDoTrace_go_info;
         const 0;
 },
 sat_scW5a_entry() //  [R1]
         { []
         }
     {offset
       cdbn3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdbn4; else goto cdbn5;
       cdbn4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdbn5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scW58::I64 = I64[R1 + 16];
           if (_scW58::I64 != 2) goto cdbn1; else goto cdbn2;
       cdbn1: // global
           R2 = _scW58::I64 + 1;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumDoTrace_go_entry(R2) args: 24, res: 0, upd: 24;
       cdbn2: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW5a_info" {
     sat_scW5a_info:
         const sat_scW5a_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1424;
 },
 sat_scW57_entry() //  [R1]
         { []
         }
     {offset
       cdbni: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdbnj; else goto cdbnk;
       cdbnj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdbnk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scW56::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scW56::I64, 2)) goto udbnl; else goto udbnn;
       udbnl: // global
           if (%MO_S_Lt_W64(_scW56::I64, 1)) goto udbnm; else goto cdbng;
       udbnm: // global
           if (%MO_S_Lt_W64(_scW56::I64, 0)) goto cdbne; else goto cdbnf;
       cdbnf: // global
           R1 = GHC.RTS.Flags.TraceNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdbng: // global
           R1 = GHC.RTS.Flags.TraceEventLog_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udbnn: // global
           if (%MO_S_Ge_W64(_scW56::I64, 3)) goto cdbne; else goto cdbnh;
       cdbne: // global
           R2 = _scW56::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl2_entry(R2) args: 24, res: 0, upd: 24;
       cdbnh: // global
           R1 = GHC.RTS.Flags.TraceStderr_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW57_info" {
     sat_scW57_info:
         const sat_scW57_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1384;
 },
 GHC.RTS.Flags.$fEnumDoTrace_go_entry() //  [R2]
         { []
         }
     {offset
       cdbnp: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdbnt; else goto cdbns;
       cdbnt: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoTrace_go_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdbns: // global
           I64[Hp - 64] = sat_scW5a_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_scW57_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoTrace_go_info" {
     GHC.RTS.Flags.$fEnumDoTrace_go_info:
         const GHC.RTS.Flags.$fEnumDoTrace_go_entry;
         const 0;
         const 141733920782;
         const 4294967300;
         const ScWiZ_srt+1384;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.092517025 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoTrace_$cenumFromTo_closure" {
     GHC.RTS.Flags.$fEnumDoTrace_$cenumFromTo_closure:
         const GHC.RTS.Flags.$fEnumDoTrace_$cenumFromTo_info;
         const 0;
 },
 GHC.RTS.Flags.$fEnumDoTrace_$cenumFromTo_entry() //  [R2, R3]
         { []
         }
     {offset
       cdbo1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdbo2; else goto cdbo3;
       cdbo2: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoTrace_$cenumFromTo_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdbo3: // global
           I64[Sp - 16] = block_cdbnT_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udboQ; else goto cdbnU;
       udboQ: // global
           call _cdbnT(R1) args: 0, res: 0, upd: 0;
       cdbnU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoTrace_$cenumFromTo_info" {
     GHC.RTS.Flags.$fEnumDoTrace_$cenumFromTo_info:
         const GHC.RTS.Flags.$fEnumDoTrace_$cenumFromTo_entry;
         const 0;
         const 64424509454;
         const 8589934607;
         const ScWiZ_srt+1408;
 },
 _cdbnT() //  [R1]
         { []
         }
     {offset
       cdbnT: // global
           _scW5c::P64 = P64[Sp + 8];
           _cdbo0::P64 = R1 & 7;
           if (_cdbo0::P64 < 3) goto udboN; else goto cdbnZ;
       udboN: // global
           if (_cdbo0::P64 < 2) goto cdbnX; else goto cdbnY;
       cdbnX: // global
           _scW5e::I64 = 0;
           goto scW5d;
       cdbnY: // global
           _scW5e::I64 = 1;
           goto scW5d;
       cdbnZ: // global
           _scW5e::I64 = 2;
           goto scW5d;
       scW5d: // global
           I64[Sp] = block_cdbo7_info;
           R1 = _scW5c::P64;
           I64[Sp + 8] = _scW5e::I64;
           if (R1 & 7 != 0) goto udboP; else goto cdbo9;
       udboP: // global
           call _cdbo7(R1) args: 0, res: 0, upd: 0;
       cdbo9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdbnT_info" {
     block_cdbnT_info:
         const _cdbnT;
         const 1;
         const 30064771102;
         const ScWiZ_srt+1408;
 },
 _cdbo7() //  [R1]
         { []
         }
     {offset
       cdbo7: // global
           _scW5e::I64 = I64[Sp + 8];
           _cdboM::P64 = R1 & 7;
           if (_cdboM::P64 < 3) goto udboO; else goto cdboC;
       udboO: // global
           if (_cdboM::P64 < 2) goto cdbok; else goto cdbot;
       cdbok: // global
           if (%MO_S_Gt_W64(_scW5e::I64, 0)) goto cdboB; else goto cdboh;
       cdboh: // global
           R2 = _scW5e::I64;
           Sp = Sp + 16;
           call GHC.RTS.Flags.$fEnumDoTrace_go2_entry(R2) args: 8, res: 0, upd: 8;
       cdbot: // global
           if (%MO_S_Gt_W64(_scW5e::I64, 1)) goto cdboB; else goto cdbor;
       cdbor: // global
           R2 = _scW5e::I64;
           Sp = Sp + 16;
           call GHC.RTS.Flags.$fEnumDoTrace_go1_entry(R2) args: 8, res: 0, upd: 8;
       cdboC: // global
           if (%MO_S_Gt_W64(_scW5e::I64, 2)) goto cdboB; else goto cdboA;
       cdboB: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdboA: // global
           R2 = _scW5e::I64;
           Sp = Sp + 16;
           call GHC.RTS.Flags.$fEnumDoTrace_go_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdbo7_info" {
     block_cdbo7_info:
         const _cdbo7;
         const 65;
         const 30064771102;
         const ScWiZ_srt+1408;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.101333422 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoTrace_$cenumFromThen_closure" {
     GHC.RTS.Flags.$fEnumDoTrace_$cenumFromThen_closure:
         const GHC.RTS.Flags.$fEnumDoTrace_$cenumFromThen_info;
         const 0;
 },
 GHC.RTS.Flags.$fEnumDoTrace_$cenumFromThen_entry() //  [R2, R3]
         { []
         }
     {offset
       cdbpl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdbpm; else goto cdbpn;
       cdbpm: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoTrace_$cenumFromThen_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdbpn: // global
           I64[Sp - 16] = block_cdbpd_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udbqa; else goto cdbpe;
       udbqa: // global
           call _cdbpd(R1) args: 0, res: 0, upd: 0;
       cdbpe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoTrace_$cenumFromThen_info" {
     GHC.RTS.Flags.$fEnumDoTrace_$cenumFromThen_info:
         const GHC.RTS.Flags.$fEnumDoTrace_$cenumFromThen_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const ScWiZ_srt+1440;
 },
 _cdbpd() //  [R1]
         { []
         }
     {offset
       cdbpd: // global
           _scW5l::P64 = P64[Sp + 8];
           _cdbpk::P64 = R1 & 7;
           if (_cdbpk::P64 < 3) goto udbq7; else goto cdbpj;
       udbq7: // global
           if (_cdbpk::P64 < 2) goto cdbph; else goto cdbpi;
       cdbph: // global
           _scW5n::I64 = 0;
           goto scW5m;
       cdbpi: // global
           _scW5n::I64 = 1;
           goto scW5m;
       cdbpj: // global
           _scW5n::I64 = 2;
           goto scW5m;
       scW5m: // global
           I64[Sp] = block_cdbpr_info;
           R1 = _scW5l::P64;
           I64[Sp + 8] = _scW5n::I64;
           if (R1 & 7 != 0) goto udbq9; else goto cdbpt;
       udbq9: // global
           call _cdbpr(R1) args: 0, res: 0, upd: 0;
       cdbpt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdbpd_info" {
     block_cdbpd_info:
         const _cdbpd;
         const 1;
         const 4294967326;
         const ScWiZ_srt+1448;
 },
 _cdbpr() //  [R1]
         { []
         }
     {offset
       cdbpr: // global
           _scW5n::I64 = I64[Sp + 8];
           _cdbq6::P64 = R1 & 7;
           if (_cdbq6::P64 < 3) goto udbq8; else goto cdbpS;
       udbq8: // global
           if (_cdbq6::P64 < 2) goto cdbpA; else goto cdbpJ;
       cdbpA: // global
           I64[Sp + 8] = block_cdbpx_info;
           R3 = 0;
           R2 = _scW5n::I64;
           Sp = Sp + 8;
           call GHC.Enum.efdInt_entry(R3, R2) args: 8, res: 8, upd: 8;
       cdbpJ: // global
           I64[Sp + 8] = block_cdbpH_info;
           R3 = 1;
           R2 = _scW5n::I64;
           Sp = Sp + 8;
           call GHC.Enum.efdInt_entry(R3, R2) args: 8, res: 8, upd: 8;
       cdbpS: // global
           I64[Sp + 8] = block_cdbpQ_info;
           R3 = 2;
           R2 = _scW5n::I64;
           Sp = Sp + 8;
           call GHC.Enum.efdInt_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdbpr_info" {
     block_cdbpr_info:
         const _cdbpr;
         const 65;
         const 4294967326;
         const ScWiZ_srt+1448;
 },
 _cdbpx() //  [R1]
         { []
         }
     {offset
       cdbpx: // global
           R3 = R1;
           R2 = GHC.RTS.Flags.$fEnumDoTrace_$ctoEnum_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdbpx_info" {
     block_cdbpx_info:
         const _cdbpx;
         const 0;
         const 4294967326;
         const ScWiZ_srt+1448;
 },
 _cdbpH() //  [R1]
         { []
         }
     {offset
       cdbpH: // global
           R3 = R1;
           R2 = GHC.RTS.Flags.$fEnumDoTrace_$ctoEnum_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdbpH_info" {
     block_cdbpH_info:
         const _cdbpH;
         const 0;
         const 4294967326;
         const ScWiZ_srt+1448;
 },
 _cdbpQ() //  [R1]
         { []
         }
     {offset
       cdbpQ: // global
           R3 = R1;
           R2 = GHC.RTS.Flags.$fEnumDoTrace_$ctoEnum_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdbpQ_info" {
     block_cdbpQ_info:
         const _cdbpQ;
         const 0;
         const 4294967326;
         const ScWiZ_srt+1448;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.114740236 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoTrace_go3_closure" {
     GHC.RTS.Flags.$fEnumDoTrace_go3_closure:
         const GHC.RTS.Flags.$fEnumDoTrace_go3_info;
         const 0;
 },
 sat_scW5y_entry() //  [R1]
         { []
         }
     {offset
       cdbqL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdbqM; else goto cdbqN;
       cdbqM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdbqN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scW5w::I64 = I64[R1 + 16];
           if (_scW5w::I64 != 9223372036854775807) goto cdbqJ; else goto cdbqK;
       cdbqJ: // global
           R2 = _scW5w::I64 + 1;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumDoTrace_go3_entry(R2) args: 24, res: 0, upd: 24;
       cdbqK: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW5y_info" {
     sat_scW5y_info:
         const sat_scW5y_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1456;
 },
 sat_scW5v_entry() //  [R1]
         { []
         }
     {offset
       cdbr0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdbr1; else goto cdbr2;
       cdbr1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdbr2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scW5u::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scW5u::I64, 2)) goto udbr3; else goto udbr5;
       udbr3: // global
           if (%MO_S_Lt_W64(_scW5u::I64, 1)) goto udbr4; else goto cdbqY;
       udbr4: // global
           if (%MO_S_Lt_W64(_scW5u::I64, 0)) goto cdbqW; else goto cdbqX;
       cdbqX: // global
           R1 = GHC.RTS.Flags.TraceNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdbqY: // global
           R1 = GHC.RTS.Flags.TraceEventLog_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udbr5: // global
           if (%MO_S_Ge_W64(_scW5u::I64, 3)) goto cdbqW; else goto cdbqZ;
       cdbqW: // global
           R2 = _scW5u::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl2_entry(R2) args: 24, res: 0, upd: 24;
       cdbqZ: // global
           R1 = GHC.RTS.Flags.TraceStderr_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW5v_info" {
     sat_scW5v_info:
         const sat_scW5v_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1384;
 },
 GHC.RTS.Flags.$fEnumDoTrace_go3_entry() //  [R2]
         { []
         }
     {offset
       cdbr7: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdbrb; else goto cdbra;
       cdbrb: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoTrace_go3_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdbra: // global
           I64[Hp - 64] = sat_scW5y_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_scW5v_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoTrace_go3_info" {
     GHC.RTS.Flags.$fEnumDoTrace_go3_info:
         const GHC.RTS.Flags.$fEnumDoTrace_go3_entry;
         const 0;
         const 2203318222862;
         const 4294967300;
         const ScWiZ_srt+1384;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.122300891 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoTrace4_closure" {
     GHC.RTS.Flags.$fEnumDoTrace4_closure:
         const GHC.RTS.Flags.$fEnumDoTrace4_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fEnumDoTrace4_entry() //  [R1]
         { []
         }
     {offset
       cdbrC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdbrD; else goto cdbrE;
       cdbrD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdbrE: // global
           (_cdbrz::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdbrz::I64 == 0) goto cdbrB; else goto cdbrA;
       cdbrB: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdbrA: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdbrz::I64;
           R2 = 0;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumDoTrace_go3_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoTrace4_info" {
     GHC.RTS.Flags.$fEnumDoTrace4_info:
         const GHC.RTS.Flags.$fEnumDoTrace4_entry;
         const 0;
         const 4294967317;
         const ScWiZ_srt+1456;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.126175033 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoTrace3_closure" {
     GHC.RTS.Flags.$fEnumDoTrace3_closure:
         const GHC.RTS.Flags.$fEnumDoTrace3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fEnumDoTrace3_entry() //  [R1]
         { []
         }
     {offset
       cdbrS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdbrT; else goto cdbrU;
       cdbrT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdbrU: // global
           (_cdbrP::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdbrP::I64 == 0) goto cdbrR; else goto cdbrQ;
       cdbrR: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdbrQ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdbrP::I64;
           R2 = 1;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumDoTrace_go3_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoTrace3_info" {
     GHC.RTS.Flags.$fEnumDoTrace3_info:
         const GHC.RTS.Flags.$fEnumDoTrace3_entry;
         const 0;
         const 4294967317;
         const ScWiZ_srt+1456;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.130373612 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoTrace2_closure" {
     GHC.RTS.Flags.$fEnumDoTrace2_closure:
         const GHC.RTS.Flags.$fEnumDoTrace2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fEnumDoTrace2_entry() //  [R1]
         { []
         }
     {offset
       cdbs8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdbs9; else goto cdbsa;
       cdbs9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdbsa: // global
           (_cdbs5::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdbs5::I64 == 0) goto cdbs7; else goto cdbs6;
       cdbs7: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdbs6: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdbs5::I64;
           R2 = 2;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumDoTrace_go3_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoTrace2_info" {
     GHC.RTS.Flags.$fEnumDoTrace2_info:
         const GHC.RTS.Flags.$fEnumDoTrace2_entry;
         const 0;
         const 4294967317;
         const ScWiZ_srt+1456;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.134670293 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoTrace_$cenumFrom_closure" {
     GHC.RTS.Flags.$fEnumDoTrace_$cenumFrom_closure:
         const GHC.RTS.Flags.$fEnumDoTrace_$cenumFrom_info;
         const 0;
 },
 GHC.RTS.Flags.$fEnumDoTrace_$cenumFrom_entry() //  [R2]
         { []
         }
     {offset
       cdbsu: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdbsv; else goto cdbsw;
       cdbsv: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoTrace_$cenumFrom_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdbsw: // global
           I64[Sp - 8] = block_cdbsm_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udbsH; else goto cdbsn;
       udbsH: // global
           call _cdbsm(R1) args: 0, res: 0, upd: 0;
       cdbsn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoTrace_$cenumFrom_info" {
     GHC.RTS.Flags.$fEnumDoTrace_$cenumFrom_info:
         const GHC.RTS.Flags.$fEnumDoTrace_$cenumFrom_entry;
         const 0;
         const 64424509454;
         const 4294967301;
         const ScWiZ_srt+1464;
 },
 _cdbsm() //  [R1]
         { []
         }
     {offset
       cdbsm: // global
           _cdbst::P64 = R1 & 7;
           if (_cdbst::P64 < 3) goto udbsG; else goto cdbss;
       udbsG: // global
           if (_cdbst::P64 < 2) goto cdbsq; else goto cdbsr;
       cdbsq: // global
           R1 = GHC.RTS.Flags.$fEnumDoTrace4_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cdbsr: // global
           R1 = GHC.RTS.Flags.$fEnumDoTrace3_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cdbss: // global
           R1 = GHC.RTS.Flags.$fEnumDoTrace2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdbsm_info" {
     block_cdbsm_info:
         const _cdbsm;
         const 0;
         const 30064771102;
         const ScWiZ_srt+1472;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.140156397 UTC

[section ""data" . lvl101_rcV8t_closure" {
     lvl101_rcV8t_closure:
         const lvl101_rcV8t_info;
         const 0;
         const 0;
         const 0;
 },
 lvl101_rcV8t_entry() //  [R1]
         { []
         }
     {offset
       cdbt1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdbt2; else goto cdbt3;
       cdbt2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdbt3: // global
           (_cdbsY::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdbsY::I64 == 0) goto cdbt0; else goto cdbsZ;
       cdbt0: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdbsZ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdbsY::I64;
           R2 = (-1);
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl101_rcV8t_info" {
     lvl101_rcV8t_info:
         const lvl101_rcV8t_entry;
         const 0;
         const 4294967317;
         const ScWiZ_srt+1384;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.144370968 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoTrace_$cpred_closure" {
     GHC.RTS.Flags.$fEnumDoTrace_$cpred_closure:
         const GHC.RTS.Flags.$fEnumDoTrace_$cpred_info;
         const 0;
 },
 GHC.RTS.Flags.$fEnumDoTrace_$cpred_entry() //  [R2]
         { []
         }
     {offset
       cdbtn: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdbto; else goto cdbtp;
       cdbto: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoTrace_$cpred_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdbtp: // global
           I64[Sp - 8] = block_cdbtf_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udbtA; else goto cdbtg;
       udbtA: // global
           call _cdbtf(R1) args: 0, res: 0, upd: 0;
       cdbtg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoTrace_$cpred_info" {
     GHC.RTS.Flags.$fEnumDoTrace_$cpred_info:
         const GHC.RTS.Flags.$fEnumDoTrace_$cpred_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const ScWiZ_srt+1496;
 },
 _cdbtf() //  [R1]
         { []
         }
     {offset
       cdbtf: // global
           _cdbtm::P64 = R1 & 7;
           if (_cdbtm::P64 < 3) goto udbtz; else goto cdbtl;
       udbtz: // global
           if (_cdbtm::P64 < 2) goto cdbtj; else goto cdbtk;
       cdbtj: // global
           R1 = lvl101_rcV8t_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cdbtk: // global
           R1 = GHC.RTS.Flags.TraceNone_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdbtl: // global
           R1 = GHC.RTS.Flags.TraceEventLog_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdbtf_info" {
     block_cdbtf_info:
         const _cdbtf;
         const 0;
         const 4294967326;
         const ScWiZ_srt+1504;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.182731235 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoTrace_$cenumFromThenTo_closure" {
     GHC.RTS.Flags.$fEnumDoTrace_$cenumFromThenTo_closure:
         const GHC.RTS.Flags.$fEnumDoTrace_$cenumFromThenTo_info;
         const 0;
 },
 sat_scW5X_entry() //  [R1]
         { []
         }
     {offset
       cdbuB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdbuC; else goto cdbuD;
       cdbuC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdbuD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_scW5R_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW5X_info" {
     sat_scW5X_info:
         const sat_scW5X_entry;
         const 8589934593;
         const 4294967311;
         const ScWiZ_srt+1384;
 },
 sat_scW5V_entry() //  [R1]
         { []
         }
     {offset
       cdbuO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdbuP; else goto cdbuQ;
       cdbuP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdbuQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scW5U::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scW5U::I64, 2)) goto udbuR; else goto udbuT;
       udbuR: // global
           if (%MO_S_Lt_W64(_scW5U::I64, 1)) goto udbuS; else goto cdbuM;
       udbuS: // global
           if (%MO_S_Lt_W64(_scW5U::I64, 0)) goto cdbuK; else goto cdbuL;
       cdbuL: // global
           R1 = GHC.RTS.Flags.TraceNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdbuM: // global
           R1 = GHC.RTS.Flags.TraceEventLog_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udbuT: // global
           if (%MO_S_Ge_W64(_scW5U::I64, 3)) goto cdbuK; else goto cdbuN;
       cdbuK: // global
           R2 = _scW5U::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl2_entry(R2) args: 24, res: 0, upd: 24;
       cdbuN: // global
           R1 = GHC.RTS.Flags.TraceStderr_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW5V_info" {
     sat_scW5V_info:
         const sat_scW5V_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1384;
 },
 sat_scW5Z_entry() //  [R1]
         { []
         }
     {offset
       cdbv5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdbv6; else goto cdbv7;
       cdbv6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdbv7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scW5Y::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scW5Y::I64, 2)) goto udbv8; else goto udbva;
       udbv8: // global
           if (%MO_S_Lt_W64(_scW5Y::I64, 1)) goto udbv9; else goto cdbv3;
       udbv9: // global
           if (%MO_S_Lt_W64(_scW5Y::I64, 0)) goto cdbv1; else goto cdbv2;
       cdbv2: // global
           R1 = GHC.RTS.Flags.TraceNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdbv3: // global
           R1 = GHC.RTS.Flags.TraceEventLog_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udbva: // global
           if (%MO_S_Ge_W64(_scW5Y::I64, 3)) goto cdbv1; else goto cdbv4;
       cdbv1: // global
           R2 = _scW5Y::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl2_entry(R2) args: 24, res: 0, upd: 24;
       cdbv4: // global
           R1 = GHC.RTS.Flags.TraceStderr_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW5Z_info" {
     sat_scW5Z_info:
         const sat_scW5Z_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1384;
 },
 go_dn_scW5R_entry() //  [R1, R2]
         { []
         }
     {offset
       cdbve: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdbvi; else goto cdbvh;
       cdbvi: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdbvh: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto cdbvc; else goto cdbvd;
       cdbvc: // global
           _scW5P::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_scW5X_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _scW5P::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_scW5V_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdbvd: // global
           I64[Hp - 80] = sat_scW5Z_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _cdbvk::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _cdbvk::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_scW5R_info" {
     go_dn_scW5R_info:
         const go_dn_scW5R_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const ScWiZ_srt+1384;
 },
 sat_scW60_entry() //  [R1]
         { []
         }
     {offset
       cdbvl: // global
           _scW60::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdbvm; else goto cdbvn;
       cdbvn: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdbvp; else goto cdbvo;
       cdbvp: // global
           HpAlloc = 24;
           goto cdbvm;
       cdbvm: // global
           R1 = _scW60::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdbvo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scW60::P64;
           _scW5J::I64 = I64[_scW60::P64 + 24];
           _scW5P::I64 = _scW5J::I64 - I64[_scW60::P64 + 16];
           I64[Hp - 16] = go_dn_scW5R_info;
           I64[Hp - 8] = _scW5P::I64;
           I64[Hp] = 0 - _scW5P::I64;
           R2 = _scW5J::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_scW5R_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW60_info" {
     sat_scW60_info:
         const sat_scW60_entry;
         const 8589934592;
         const 4294967316;
         const ScWiZ_srt+1384;
 },
 sat_scW5O_entry() //  [R1]
         { []
         }
     {offset
       cdbvA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdbvB; else goto cdbvC;
       cdbvB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdbvC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scW5N::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scW5N::I64, 2)) goto udbvD; else goto udbvF;
       udbvD: // global
           if (%MO_S_Lt_W64(_scW5N::I64, 1)) goto udbvE; else goto cdbvy;
       udbvE: // global
           if (%MO_S_Lt_W64(_scW5N::I64, 0)) goto cdbvw; else goto cdbvx;
       cdbvx: // global
           R1 = GHC.RTS.Flags.TraceNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdbvy: // global
           R1 = GHC.RTS.Flags.TraceEventLog_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udbvF: // global
           if (%MO_S_Ge_W64(_scW5N::I64, 3)) goto cdbvw; else goto cdbvz;
       cdbvw: // global
           R2 = _scW5N::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl2_entry(R2) args: 24, res: 0, upd: 24;
       cdbvz: // global
           R1 = GHC.RTS.Flags.TraceStderr_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW5O_info" {
     sat_scW5O_info:
         const sat_scW5O_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1384;
 },
 sat_scW63_entry() //  [R1]
         { []
         }
     {offset
       cdbvU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdbvV; else goto cdbvW;
       cdbvV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdbvW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scW62::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scW62::I64, 2)) goto udbvX; else goto udbvZ;
       udbvX: // global
           if (%MO_S_Lt_W64(_scW62::I64, 1)) goto udbvY; else goto cdbvS;
       udbvY: // global
           if (%MO_S_Lt_W64(_scW62::I64, 0)) goto cdbvQ; else goto cdbvR;
       cdbvR: // global
           R1 = GHC.RTS.Flags.TraceNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdbvS: // global
           R1 = GHC.RTS.Flags.TraceEventLog_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udbvZ: // global
           if (%MO_S_Ge_W64(_scW62::I64, 3)) goto cdbvQ; else goto cdbvT;
       cdbvQ: // global
           R2 = _scW62::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl2_entry(R2) args: 24, res: 0, upd: 24;
       cdbvT: // global
           R1 = GHC.RTS.Flags.TraceStderr_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW63_info" {
     sat_scW63_info:
         const sat_scW63_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1384;
 },
 sat_scW6f_entry() //  [R1]
         { []
         }
     {offset
       cdbws: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdbwt; else goto cdbwu;
       cdbwt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdbwu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_scW69_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW6f_info" {
     sat_scW6f_info:
         const sat_scW6f_entry;
         const 8589934593;
         const 4294967311;
         const ScWiZ_srt+1384;
 },
 sat_scW6d_entry() //  [R1]
         { []
         }
     {offset
       cdbwF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdbwG; else goto cdbwH;
       cdbwG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdbwH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scW6c::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scW6c::I64, 2)) goto udbwI; else goto udbwK;
       udbwI: // global
           if (%MO_S_Lt_W64(_scW6c::I64, 1)) goto udbwJ; else goto cdbwD;
       udbwJ: // global
           if (%MO_S_Lt_W64(_scW6c::I64, 0)) goto cdbwB; else goto cdbwC;
       cdbwC: // global
           R1 = GHC.RTS.Flags.TraceNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdbwD: // global
           R1 = GHC.RTS.Flags.TraceEventLog_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udbwK: // global
           if (%MO_S_Ge_W64(_scW6c::I64, 3)) goto cdbwB; else goto cdbwE;
       cdbwB: // global
           R2 = _scW6c::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl2_entry(R2) args: 24, res: 0, upd: 24;
       cdbwE: // global
           R1 = GHC.RTS.Flags.TraceStderr_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW6d_info" {
     sat_scW6d_info:
         const sat_scW6d_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1384;
 },
 sat_scW6h_entry() //  [R1]
         { []
         }
     {offset
       cdbwW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdbwX; else goto cdbwY;
       cdbwX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdbwY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scW6g::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scW6g::I64, 2)) goto udbwZ; else goto udbx1;
       udbwZ: // global
           if (%MO_S_Lt_W64(_scW6g::I64, 1)) goto udbx0; else goto cdbwU;
       udbx0: // global
           if (%MO_S_Lt_W64(_scW6g::I64, 0)) goto cdbwS; else goto cdbwT;
       cdbwT: // global
           R1 = GHC.RTS.Flags.TraceNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdbwU: // global
           R1 = GHC.RTS.Flags.TraceEventLog_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udbx1: // global
           if (%MO_S_Ge_W64(_scW6g::I64, 3)) goto cdbwS; else goto cdbwV;
       cdbwS: // global
           R2 = _scW6g::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl2_entry(R2) args: 24, res: 0, upd: 24;
       cdbwV: // global
           R1 = GHC.RTS.Flags.TraceStderr_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW6h_info" {
     sat_scW6h_info:
         const sat_scW6h_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1384;
 },
 go_up_scW69_entry() //  [R1, R2]
         { []
         }
     {offset
       cdbx5: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdbx9; else goto cdbx8;
       cdbx9: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdbx8: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto cdbx3; else goto cdbx4;
       cdbx3: // global
           _scW67::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_scW6f_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _scW67::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_scW6d_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdbx4: // global
           I64[Hp - 80] = sat_scW6h_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _cdbxb::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _cdbxb::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_scW69_info" {
     go_up_scW69_info:
         const go_up_scW69_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const ScWiZ_srt+1384;
 },
 sat_scW6i_entry() //  [R1]
         { []
         }
     {offset
       cdbxc: // global
           _scW6i::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdbxd; else goto cdbxe;
       cdbxe: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdbxg; else goto cdbxf;
       cdbxg: // global
           HpAlloc = 24;
           goto cdbxd;
       cdbxd: // global
           R1 = _scW6i::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdbxf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scW6i::P64;
           _scW5J::I64 = I64[_scW6i::P64 + 24];
           _scW67::I64 = _scW5J::I64 - I64[_scW6i::P64 + 16];
           I64[Hp - 16] = go_up_scW69_info;
           I64[Hp - 8] = _scW67::I64;
           I64[Hp] = 0 - _scW67::I64;
           R2 = _scW5J::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_scW69_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW6i_info" {
     sat_scW6i_info:
         const sat_scW6i_entry;
         const 8589934592;
         const 4294967316;
         const ScWiZ_srt+1384;
 },
 sat_scW66_entry() //  [R1]
         { []
         }
     {offset
       cdbxr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdbxs; else goto cdbxt;
       cdbxs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdbxt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scW65::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scW65::I64, 2)) goto udbxu; else goto udbxw;
       udbxu: // global
           if (%MO_S_Lt_W64(_scW65::I64, 1)) goto udbxv; else goto cdbxp;
       udbxv: // global
           if (%MO_S_Lt_W64(_scW65::I64, 0)) goto cdbxn; else goto cdbxo;
       cdbxo: // global
           R1 = GHC.RTS.Flags.TraceNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdbxp: // global
           R1 = GHC.RTS.Flags.TraceEventLog_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udbxw: // global
           if (%MO_S_Ge_W64(_scW65::I64, 3)) goto cdbxn; else goto cdbxq;
       cdbxn: // global
           R2 = _scW65::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl2_entry(R2) args: 24, res: 0, upd: 24;
       cdbxq: // global
           R1 = GHC.RTS.Flags.TraceStderr_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW66_info" {
     sat_scW66_info:
         const sat_scW66_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1384;
 },
 sat_scW6l_entry() //  [R1]
         { []
         }
     {offset
       cdbxL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdbxM; else goto cdbxN;
       cdbxM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdbxN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scW6k::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scW6k::I64, 2)) goto udbxO; else goto udbxQ;
       udbxO: // global
           if (%MO_S_Lt_W64(_scW6k::I64, 1)) goto udbxP; else goto cdbxJ;
       udbxP: // global
           if (%MO_S_Lt_W64(_scW6k::I64, 0)) goto cdbxH; else goto cdbxI;
       cdbxI: // global
           R1 = GHC.RTS.Flags.TraceNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdbxJ: // global
           R1 = GHC.RTS.Flags.TraceEventLog_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udbxQ: // global
           if (%MO_S_Ge_W64(_scW6k::I64, 3)) goto cdbxH; else goto cdbxK;
       cdbxH: // global
           R2 = _scW6k::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl2_entry(R2) args: 24, res: 0, upd: 24;
       cdbxK: // global
           R1 = GHC.RTS.Flags.TraceStderr_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW6l_info" {
     sat_scW6l_info:
         const sat_scW6l_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1384;
 },
 sat_scW6y_entry() //  [R1]
         { []
         }
     {offset
       cdbyn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdbyo; else goto cdbyp;
       cdbyo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdbyp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_scW6s_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW6y_info" {
     sat_scW6y_info:
         const sat_scW6y_entry;
         const 8589934593;
         const 4294967311;
         const ScWiZ_srt+1384;
 },
 sat_scW6w_entry() //  [R1]
         { []
         }
     {offset
       cdbyA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdbyB; else goto cdbyC;
       cdbyB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdbyC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scW6v::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scW6v::I64, 2)) goto udbyD; else goto udbyF;
       udbyD: // global
           if (%MO_S_Lt_W64(_scW6v::I64, 1)) goto udbyE; else goto cdbyy;
       udbyE: // global
           if (%MO_S_Lt_W64(_scW6v::I64, 0)) goto cdbyw; else goto cdbyx;
       cdbyx: // global
           R1 = GHC.RTS.Flags.TraceNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdbyy: // global
           R1 = GHC.RTS.Flags.TraceEventLog_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udbyF: // global
           if (%MO_S_Ge_W64(_scW6v::I64, 3)) goto cdbyw; else goto cdbyz;
       cdbyw: // global
           R2 = _scW6v::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl2_entry(R2) args: 24, res: 0, upd: 24;
       cdbyz: // global
           R1 = GHC.RTS.Flags.TraceStderr_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW6w_info" {
     sat_scW6w_info:
         const sat_scW6w_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1384;
 },
 sat_scW6A_entry() //  [R1]
         { []
         }
     {offset
       cdbyR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdbyS; else goto cdbyT;
       cdbyS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdbyT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scW6z::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scW6z::I64, 2)) goto udbyU; else goto udbyW;
       udbyU: // global
           if (%MO_S_Lt_W64(_scW6z::I64, 1)) goto udbyV; else goto cdbyP;
       udbyV: // global
           if (%MO_S_Lt_W64(_scW6z::I64, 0)) goto cdbyN; else goto cdbyO;
       cdbyO: // global
           R1 = GHC.RTS.Flags.TraceNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdbyP: // global
           R1 = GHC.RTS.Flags.TraceEventLog_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udbyW: // global
           if (%MO_S_Ge_W64(_scW6z::I64, 3)) goto cdbyN; else goto cdbyQ;
       cdbyN: // global
           R2 = _scW6z::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl2_entry(R2) args: 24, res: 0, upd: 24;
       cdbyQ: // global
           R1 = GHC.RTS.Flags.TraceStderr_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW6A_info" {
     sat_scW6A_info:
         const sat_scW6A_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1384;
 },
 go_dn_scW6s_entry() //  [R1, R2]
         { []
         }
     {offset
       cdbz0: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdbz4; else goto cdbz3;
       cdbz4: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdbz3: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto cdbyY; else goto cdbyZ;
       cdbyY: // global
           _scW6q::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_scW6y_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _scW6q::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_scW6w_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdbyZ: // global
           I64[Hp - 80] = sat_scW6A_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _cdbz6::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _cdbz6::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_scW6s_info" {
     go_dn_scW6s_info:
         const go_dn_scW6s_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const ScWiZ_srt+1384;
 },
 sat_scW6B_entry() //  [R1]
         { []
         }
     {offset
       cdbz7: // global
           _scW6B::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdbz8; else goto cdbz9;
       cdbz9: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdbzb; else goto cdbza;
       cdbzb: // global
           HpAlloc = 24;
           goto cdbz8;
       cdbz8: // global
           R1 = _scW6B::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdbza: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scW6B::P64;
           _scW5J::I64 = I64[_scW6B::P64 + 24];
           _scW6q::I64 = _scW5J::I64 - I64[_scW6B::P64 + 16];
           I64[Hp - 16] = go_dn_scW6s_info;
           I64[Hp - 8] = _scW6q::I64;
           I64[Hp] = 1 - _scW6q::I64;
           R2 = _scW5J::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_scW6s_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW6B_info" {
     sat_scW6B_info:
         const sat_scW6B_entry;
         const 8589934592;
         const 4294967316;
         const ScWiZ_srt+1384;
 },
 sat_scW6p_entry() //  [R1]
         { []
         }
     {offset
       cdbzm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdbzn; else goto cdbzo;
       cdbzn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdbzo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scW6o::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scW6o::I64, 2)) goto udbzp; else goto udbzr;
       udbzp: // global
           if (%MO_S_Lt_W64(_scW6o::I64, 1)) goto udbzq; else goto cdbzk;
       udbzq: // global
           if (%MO_S_Lt_W64(_scW6o::I64, 0)) goto cdbzi; else goto cdbzj;
       cdbzj: // global
           R1 = GHC.RTS.Flags.TraceNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdbzk: // global
           R1 = GHC.RTS.Flags.TraceEventLog_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udbzr: // global
           if (%MO_S_Ge_W64(_scW6o::I64, 3)) goto cdbzi; else goto cdbzl;
       cdbzi: // global
           R2 = _scW6o::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl2_entry(R2) args: 24, res: 0, upd: 24;
       cdbzl: // global
           R1 = GHC.RTS.Flags.TraceStderr_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW6p_info" {
     sat_scW6p_info:
         const sat_scW6p_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1384;
 },
 sat_scW6E_entry() //  [R1]
         { []
         }
     {offset
       cdbzG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdbzH; else goto cdbzI;
       cdbzH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdbzI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scW6D::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scW6D::I64, 2)) goto udbzJ; else goto udbzL;
       udbzJ: // global
           if (%MO_S_Lt_W64(_scW6D::I64, 1)) goto udbzK; else goto cdbzE;
       udbzK: // global
           if (%MO_S_Lt_W64(_scW6D::I64, 0)) goto cdbzC; else goto cdbzD;
       cdbzD: // global
           R1 = GHC.RTS.Flags.TraceNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdbzE: // global
           R1 = GHC.RTS.Flags.TraceEventLog_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udbzL: // global
           if (%MO_S_Ge_W64(_scW6D::I64, 3)) goto cdbzC; else goto cdbzF;
       cdbzC: // global
           R2 = _scW6D::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl2_entry(R2) args: 24, res: 0, upd: 24;
       cdbzF: // global
           R1 = GHC.RTS.Flags.TraceStderr_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW6E_info" {
     sat_scW6E_info:
         const sat_scW6E_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1384;
 },
 sat_scW6Q_entry() //  [R1]
         { []
         }
     {offset
       cdbAe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdbAf; else goto cdbAg;
       cdbAf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdbAg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_scW6K_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW6Q_info" {
     sat_scW6Q_info:
         const sat_scW6Q_entry;
         const 8589934593;
         const 4294967311;
         const ScWiZ_srt+1384;
 },
 sat_scW6O_entry() //  [R1]
         { []
         }
     {offset
       cdbAr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdbAs; else goto cdbAt;
       cdbAs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdbAt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scW6N::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scW6N::I64, 2)) goto udbAu; else goto udbAw;
       udbAu: // global
           if (%MO_S_Lt_W64(_scW6N::I64, 1)) goto udbAv; else goto cdbAp;
       udbAv: // global
           if (%MO_S_Lt_W64(_scW6N::I64, 0)) goto cdbAn; else goto cdbAo;
       cdbAo: // global
           R1 = GHC.RTS.Flags.TraceNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdbAp: // global
           R1 = GHC.RTS.Flags.TraceEventLog_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udbAw: // global
           if (%MO_S_Ge_W64(_scW6N::I64, 3)) goto cdbAn; else goto cdbAq;
       cdbAn: // global
           R2 = _scW6N::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl2_entry(R2) args: 24, res: 0, upd: 24;
       cdbAq: // global
           R1 = GHC.RTS.Flags.TraceStderr_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW6O_info" {
     sat_scW6O_info:
         const sat_scW6O_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1384;
 },
 sat_scW6S_entry() //  [R1]
         { []
         }
     {offset
       cdbAI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdbAJ; else goto cdbAK;
       cdbAJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdbAK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scW6R::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scW6R::I64, 2)) goto udbAL; else goto udbAN;
       udbAL: // global
           if (%MO_S_Lt_W64(_scW6R::I64, 1)) goto udbAM; else goto cdbAG;
       udbAM: // global
           if (%MO_S_Lt_W64(_scW6R::I64, 0)) goto cdbAE; else goto cdbAF;
       cdbAF: // global
           R1 = GHC.RTS.Flags.TraceNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdbAG: // global
           R1 = GHC.RTS.Flags.TraceEventLog_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udbAN: // global
           if (%MO_S_Ge_W64(_scW6R::I64, 3)) goto cdbAE; else goto cdbAH;
       cdbAE: // global
           R2 = _scW6R::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl2_entry(R2) args: 24, res: 0, upd: 24;
       cdbAH: // global
           R1 = GHC.RTS.Flags.TraceStderr_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW6S_info" {
     sat_scW6S_info:
         const sat_scW6S_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1384;
 },
 go_up_scW6K_entry() //  [R1, R2]
         { []
         }
     {offset
       cdbAR: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdbAV; else goto cdbAU;
       cdbAV: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdbAU: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto cdbAP; else goto cdbAQ;
       cdbAP: // global
           _scW6I::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_scW6Q_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _scW6I::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_scW6O_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdbAQ: // global
           I64[Hp - 80] = sat_scW6S_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _cdbAX::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _cdbAX::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_scW6K_info" {
     go_up_scW6K_info:
         const go_up_scW6K_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const ScWiZ_srt+1384;
 },
 sat_scW6T_entry() //  [R1]
         { []
         }
     {offset
       cdbAY: // global
           _scW6T::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdbAZ; else goto cdbB0;
       cdbB0: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdbB2; else goto cdbB1;
       cdbB2: // global
           HpAlloc = 24;
           goto cdbAZ;
       cdbAZ: // global
           R1 = _scW6T::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdbB1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scW6T::P64;
           _scW5J::I64 = I64[_scW6T::P64 + 24];
           _scW6I::I64 = _scW5J::I64 - I64[_scW6T::P64 + 16];
           I64[Hp - 16] = go_up_scW6K_info;
           I64[Hp - 8] = _scW6I::I64;
           I64[Hp] = 1 - _scW6I::I64;
           R2 = _scW5J::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_scW6K_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW6T_info" {
     sat_scW6T_info:
         const sat_scW6T_entry;
         const 8589934592;
         const 4294967316;
         const ScWiZ_srt+1384;
 },
 sat_scW6H_entry() //  [R1]
         { []
         }
     {offset
       cdbBd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdbBe; else goto cdbBf;
       cdbBe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdbBf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scW6G::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scW6G::I64, 2)) goto udbBg; else goto udbBi;
       udbBg: // global
           if (%MO_S_Lt_W64(_scW6G::I64, 1)) goto udbBh; else goto cdbBb;
       udbBh: // global
           if (%MO_S_Lt_W64(_scW6G::I64, 0)) goto cdbB9; else goto cdbBa;
       cdbBa: // global
           R1 = GHC.RTS.Flags.TraceNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdbBb: // global
           R1 = GHC.RTS.Flags.TraceEventLog_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udbBi: // global
           if (%MO_S_Ge_W64(_scW6G::I64, 3)) goto cdbB9; else goto cdbBc;
       cdbB9: // global
           R2 = _scW6G::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl2_entry(R2) args: 24, res: 0, upd: 24;
       cdbBc: // global
           R1 = GHC.RTS.Flags.TraceStderr_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW6H_info" {
     sat_scW6H_info:
         const sat_scW6H_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1384;
 },
 sat_scW6W_entry() //  [R1]
         { []
         }
     {offset
       cdbBx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdbBy; else goto cdbBz;
       cdbBy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdbBz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scW6V::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scW6V::I64, 2)) goto udbBA; else goto udbBC;
       udbBA: // global
           if (%MO_S_Lt_W64(_scW6V::I64, 1)) goto udbBB; else goto cdbBv;
       udbBB: // global
           if (%MO_S_Lt_W64(_scW6V::I64, 0)) goto cdbBt; else goto cdbBu;
       cdbBu: // global
           R1 = GHC.RTS.Flags.TraceNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdbBv: // global
           R1 = GHC.RTS.Flags.TraceEventLog_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udbBC: // global
           if (%MO_S_Ge_W64(_scW6V::I64, 3)) goto cdbBt; else goto cdbBw;
       cdbBt: // global
           R2 = _scW6V::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl2_entry(R2) args: 24, res: 0, upd: 24;
       cdbBw: // global
           R1 = GHC.RTS.Flags.TraceStderr_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW6W_info" {
     sat_scW6W_info:
         const sat_scW6W_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1384;
 },
 sat_scW79_entry() //  [R1]
         { []
         }
     {offset
       cdbC9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdbCa; else goto cdbCb;
       cdbCa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdbCb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_scW73_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW79_info" {
     sat_scW79_info:
         const sat_scW79_entry;
         const 8589934593;
         const 4294967311;
         const ScWiZ_srt+1384;
 },
 sat_scW77_entry() //  [R1]
         { []
         }
     {offset
       cdbCm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdbCn; else goto cdbCo;
       cdbCn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdbCo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scW76::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scW76::I64, 2)) goto udbCp; else goto udbCr;
       udbCp: // global
           if (%MO_S_Lt_W64(_scW76::I64, 1)) goto udbCq; else goto cdbCk;
       udbCq: // global
           if (%MO_S_Lt_W64(_scW76::I64, 0)) goto cdbCi; else goto cdbCj;
       cdbCj: // global
           R1 = GHC.RTS.Flags.TraceNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdbCk: // global
           R1 = GHC.RTS.Flags.TraceEventLog_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udbCr: // global
           if (%MO_S_Ge_W64(_scW76::I64, 3)) goto cdbCi; else goto cdbCl;
       cdbCi: // global
           R2 = _scW76::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl2_entry(R2) args: 24, res: 0, upd: 24;
       cdbCl: // global
           R1 = GHC.RTS.Flags.TraceStderr_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW77_info" {
     sat_scW77_info:
         const sat_scW77_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1384;
 },
 sat_scW7b_entry() //  [R1]
         { []
         }
     {offset
       cdbCD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdbCE; else goto cdbCF;
       cdbCE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdbCF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scW7a::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scW7a::I64, 2)) goto udbCG; else goto udbCI;
       udbCG: // global
           if (%MO_S_Lt_W64(_scW7a::I64, 1)) goto udbCH; else goto cdbCB;
       udbCH: // global
           if (%MO_S_Lt_W64(_scW7a::I64, 0)) goto cdbCz; else goto cdbCA;
       cdbCA: // global
           R1 = GHC.RTS.Flags.TraceNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdbCB: // global
           R1 = GHC.RTS.Flags.TraceEventLog_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udbCI: // global
           if (%MO_S_Ge_W64(_scW7a::I64, 3)) goto cdbCz; else goto cdbCC;
       cdbCz: // global
           R2 = _scW7a::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl2_entry(R2) args: 24, res: 0, upd: 24;
       cdbCC: // global
           R1 = GHC.RTS.Flags.TraceStderr_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW7b_info" {
     sat_scW7b_info:
         const sat_scW7b_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1384;
 },
 go_dn_scW73_entry() //  [R1, R2]
         { []
         }
     {offset
       cdbCM: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdbCQ; else goto cdbCP;
       cdbCQ: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdbCP: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto cdbCK; else goto cdbCL;
       cdbCK: // global
           _scW71::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_scW79_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _scW71::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_scW77_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdbCL: // global
           I64[Hp - 80] = sat_scW7b_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _cdbCS::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _cdbCS::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_scW73_info" {
     go_dn_scW73_info:
         const go_dn_scW73_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const ScWiZ_srt+1384;
 },
 sat_scW7c_entry() //  [R1]
         { []
         }
     {offset
       cdbCT: // global
           _scW7c::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdbCU; else goto cdbCV;
       cdbCV: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdbCX; else goto cdbCW;
       cdbCX: // global
           HpAlloc = 24;
           goto cdbCU;
       cdbCU: // global
           R1 = _scW7c::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdbCW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scW7c::P64;
           _scW5J::I64 = I64[_scW7c::P64 + 24];
           _scW71::I64 = _scW5J::I64 - I64[_scW7c::P64 + 16];
           I64[Hp - 16] = go_dn_scW73_info;
           I64[Hp - 8] = _scW71::I64;
           I64[Hp] = 2 - _scW71::I64;
           R2 = _scW5J::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_scW73_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW7c_info" {
     sat_scW7c_info:
         const sat_scW7c_entry;
         const 8589934592;
         const 4294967316;
         const ScWiZ_srt+1384;
 },
 sat_scW70_entry() //  [R1]
         { []
         }
     {offset
       cdbD8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdbD9; else goto cdbDa;
       cdbD9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdbDa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scW6Z::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scW6Z::I64, 2)) goto udbDb; else goto udbDd;
       udbDb: // global
           if (%MO_S_Lt_W64(_scW6Z::I64, 1)) goto udbDc; else goto cdbD6;
       udbDc: // global
           if (%MO_S_Lt_W64(_scW6Z::I64, 0)) goto cdbD4; else goto cdbD5;
       cdbD5: // global
           R1 = GHC.RTS.Flags.TraceNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdbD6: // global
           R1 = GHC.RTS.Flags.TraceEventLog_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udbDd: // global
           if (%MO_S_Ge_W64(_scW6Z::I64, 3)) goto cdbD4; else goto cdbD7;
       cdbD4: // global
           R2 = _scW6Z::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl2_entry(R2) args: 24, res: 0, upd: 24;
       cdbD7: // global
           R1 = GHC.RTS.Flags.TraceStderr_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW70_info" {
     sat_scW70_info:
         const sat_scW70_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1384;
 },
 sat_scW7f_entry() //  [R1]
         { []
         }
     {offset
       cdbDs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdbDt; else goto cdbDu;
       cdbDt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdbDu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scW7e::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scW7e::I64, 2)) goto udbDv; else goto udbDx;
       udbDv: // global
           if (%MO_S_Lt_W64(_scW7e::I64, 1)) goto udbDw; else goto cdbDq;
       udbDw: // global
           if (%MO_S_Lt_W64(_scW7e::I64, 0)) goto cdbDo; else goto cdbDp;
       cdbDp: // global
           R1 = GHC.RTS.Flags.TraceNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdbDq: // global
           R1 = GHC.RTS.Flags.TraceEventLog_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udbDx: // global
           if (%MO_S_Ge_W64(_scW7e::I64, 3)) goto cdbDo; else goto cdbDr;
       cdbDo: // global
           R2 = _scW7e::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl2_entry(R2) args: 24, res: 0, upd: 24;
       cdbDr: // global
           R1 = GHC.RTS.Flags.TraceStderr_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW7f_info" {
     sat_scW7f_info:
         const sat_scW7f_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1384;
 },
 sat_scW7r_entry() //  [R1]
         { []
         }
     {offset
       cdbE0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdbE1; else goto cdbE2;
       cdbE1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdbE2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_scW7l_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW7r_info" {
     sat_scW7r_info:
         const sat_scW7r_entry;
         const 8589934593;
         const 4294967311;
         const ScWiZ_srt+1384;
 },
 sat_scW7p_entry() //  [R1]
         { []
         }
     {offset
       cdbEd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdbEe; else goto cdbEf;
       cdbEe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdbEf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scW7o::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scW7o::I64, 2)) goto udbEg; else goto udbEi;
       udbEg: // global
           if (%MO_S_Lt_W64(_scW7o::I64, 1)) goto udbEh; else goto cdbEb;
       udbEh: // global
           if (%MO_S_Lt_W64(_scW7o::I64, 0)) goto cdbE9; else goto cdbEa;
       cdbEa: // global
           R1 = GHC.RTS.Flags.TraceNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdbEb: // global
           R1 = GHC.RTS.Flags.TraceEventLog_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udbEi: // global
           if (%MO_S_Ge_W64(_scW7o::I64, 3)) goto cdbE9; else goto cdbEc;
       cdbE9: // global
           R2 = _scW7o::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl2_entry(R2) args: 24, res: 0, upd: 24;
       cdbEc: // global
           R1 = GHC.RTS.Flags.TraceStderr_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW7p_info" {
     sat_scW7p_info:
         const sat_scW7p_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1384;
 },
 sat_scW7t_entry() //  [R1]
         { []
         }
     {offset
       cdbEu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdbEv; else goto cdbEw;
       cdbEv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdbEw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scW7s::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scW7s::I64, 2)) goto udbEx; else goto udbEz;
       udbEx: // global
           if (%MO_S_Lt_W64(_scW7s::I64, 1)) goto udbEy; else goto cdbEs;
       udbEy: // global
           if (%MO_S_Lt_W64(_scW7s::I64, 0)) goto cdbEq; else goto cdbEr;
       cdbEr: // global
           R1 = GHC.RTS.Flags.TraceNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdbEs: // global
           R1 = GHC.RTS.Flags.TraceEventLog_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udbEz: // global
           if (%MO_S_Ge_W64(_scW7s::I64, 3)) goto cdbEq; else goto cdbEt;
       cdbEq: // global
           R2 = _scW7s::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl2_entry(R2) args: 24, res: 0, upd: 24;
       cdbEt: // global
           R1 = GHC.RTS.Flags.TraceStderr_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW7t_info" {
     sat_scW7t_info:
         const sat_scW7t_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1384;
 },
 go_up_scW7l_entry() //  [R1, R2]
         { []
         }
     {offset
       cdbED: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdbEH; else goto cdbEG;
       cdbEH: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdbEG: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto cdbEB; else goto cdbEC;
       cdbEB: // global
           _scW7j::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_scW7r_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _scW7j::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_scW7p_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdbEC: // global
           I64[Hp - 80] = sat_scW7t_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _cdbEJ::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _cdbEJ::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_scW7l_info" {
     go_up_scW7l_info:
         const go_up_scW7l_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const ScWiZ_srt+1384;
 },
 sat_scW7u_entry() //  [R1]
         { []
         }
     {offset
       cdbEK: // global
           _scW7u::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdbEL; else goto cdbEM;
       cdbEM: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdbEO; else goto cdbEN;
       cdbEO: // global
           HpAlloc = 24;
           goto cdbEL;
       cdbEL: // global
           R1 = _scW7u::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdbEN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scW7u::P64;
           _scW5J::I64 = I64[_scW7u::P64 + 24];
           _scW7j::I64 = _scW5J::I64 - I64[_scW7u::P64 + 16];
           I64[Hp - 16] = go_up_scW7l_info;
           I64[Hp - 8] = _scW7j::I64;
           I64[Hp] = 2 - _scW7j::I64;
           R2 = _scW5J::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_scW7l_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW7u_info" {
     sat_scW7u_info:
         const sat_scW7u_entry;
         const 8589934592;
         const 4294967316;
         const ScWiZ_srt+1384;
 },
 sat_scW7i_entry() //  [R1]
         { []
         }
     {offset
       cdbEZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdbF0; else goto cdbF1;
       cdbF0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdbF1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scW7h::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scW7h::I64, 2)) goto udbF2; else goto udbF4;
       udbF2: // global
           if (%MO_S_Lt_W64(_scW7h::I64, 1)) goto udbF3; else goto cdbEX;
       udbF3: // global
           if (%MO_S_Lt_W64(_scW7h::I64, 0)) goto cdbEV; else goto cdbEW;
       cdbEW: // global
           R1 = GHC.RTS.Flags.TraceNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdbEX: // global
           R1 = GHC.RTS.Flags.TraceEventLog_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udbF4: // global
           if (%MO_S_Ge_W64(_scW7h::I64, 3)) goto cdbEV; else goto cdbEY;
       cdbEV: // global
           R2 = _scW7h::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl2_entry(R2) args: 24, res: 0, upd: 24;
       cdbEY: // global
           R1 = GHC.RTS.Flags.TraceStderr_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW7i_info" {
     sat_scW7i_info:
         const sat_scW7i_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1384;
 },
 sat_scW7x_entry() //  [R1]
         { []
         }
     {offset
       cdbFj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdbFk; else goto cdbFl;
       cdbFk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdbFl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scW7w::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scW7w::I64, 2)) goto udbFm; else goto udbFo;
       udbFm: // global
           if (%MO_S_Lt_W64(_scW7w::I64, 1)) goto udbFn; else goto cdbFh;
       udbFn: // global
           if (%MO_S_Lt_W64(_scW7w::I64, 0)) goto cdbFf; else goto cdbFg;
       cdbFg: // global
           R1 = GHC.RTS.Flags.TraceNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdbFh: // global
           R1 = GHC.RTS.Flags.TraceEventLog_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udbFo: // global
           if (%MO_S_Ge_W64(_scW7w::I64, 3)) goto cdbFf; else goto cdbFi;
       cdbFf: // global
           R2 = _scW7w::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl2_entry(R2) args: 24, res: 0, upd: 24;
       cdbFi: // global
           R1 = GHC.RTS.Flags.TraceStderr_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW7x_info" {
     sat_scW7x_info:
         const sat_scW7x_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1384;
 },
 GHC.RTS.Flags.$fEnumDoTrace_$cenumFromThenTo_entry() //  [R2, R3,
                                                           R4]
         { []
         }
     {offset
       cdbFx: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdbFy; else goto cdbFz;
       cdbFy: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoTrace_$cenumFromThenTo_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdbFz: // global
           I64[Sp - 24] = block_cdbFp_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udbHf; else goto cdbFq;
       udbHf: // global
           call _cdbFp(R1) args: 0, res: 0, upd: 0;
       cdbFq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoTrace_$cenumFromThenTo_info" {
     GHC.RTS.Flags.$fEnumDoTrace_$cenumFromThenTo_info:
         const GHC.RTS.Flags.$fEnumDoTrace_$cenumFromThenTo_entry;
         const 0;
         const 281479271677966;
         const 12884901911;
         const ScWiZ_srt+1384;
 },
 _cdbFp() //  [R1]
         { []
         }
     {offset
       cdbFp: // global
           _scW5E::P64 = P64[Sp + 8];
           _cdbFw::P64 = R1 & 7;
           if (_cdbFw::P64 < 3) goto udbHc; else goto cdbFv;
       udbHc: // global
           if (_cdbFw::P64 < 2) goto cdbFt; else goto cdbFu;
       cdbFt: // global
           _scW5H::I64 = 0;
           goto scW5G;
       cdbFu: // global
           _scW5H::I64 = 1;
           goto scW5G;
       cdbFv: // global
           _scW5H::I64 = 2;
           goto scW5G;
       scW5G: // global
           I64[Sp] = block_cdbFA_info;
           R1 = _scW5E::P64;
           I64[Sp + 8] = _scW5H::I64;
           if (R1 & 7 != 0) goto udbHe; else goto cdbGL;
       udbHe: // global
           call _cdbFA(R1) args: 0, res: 0, upd: 0;
       cdbGL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdbFp_info" {
     block_cdbFp_info:
         const _cdbFp;
         const 2;
         const 4294967326;
         const ScWiZ_srt+1384;
 },
 _cdbFA() //  [R1]
         { []
         }
     {offset
       cdbFA: // global
           _scW5F::P64 = P64[Sp + 16];
           _cdbH9::P64 = R1 & 7;
           if (_cdbH9::P64 < 3) goto udbHd; else goto cdbGZ;
       udbHd: // global
           if (_cdbH9::P64 < 2) goto cdbGR; else goto cdbGV;
       cdbGR: // global
           _scW5J::I64 = 0;
           goto scW5I;
       cdbGV: // global
           _scW5J::I64 = 1;
           goto scW5I;
       cdbGZ: // global
           _scW5J::I64 = 2;
           goto scW5I;
       scW5I: // global
           I64[Sp] = block_cdbu2_info;
           R1 = _scW5F::P64;
           I64[Sp + 16] = _scW5J::I64;
           if (R1 & 7 != 0) goto udbHg; else goto cdbu3;
       udbHg: // global
           call _cdbu2(R1) args: 0, res: 0, upd: 0;
       cdbu3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdbFA_info" {
     block_cdbFA_info:
         const _cdbFA;
         const 66;
         const 4294967326;
         const ScWiZ_srt+1384;
 },
 _cdbu2() //  [R1]
         { []
         }
     {offset
       cdbu2: // global
           _scW5H::I64 = I64[Sp + 8];
           _scW5J::I64 = I64[Sp + 16];
           _cdbHa::P64 = R1 & 7;
           if (_cdbHa::P64 < 3) goto udbHb; else goto cdbGo;
       udbHb: // global
           if (_cdbHa::P64 < 2) goto cdbFE; else goto cdbG1;
       cdbFE: // global
           Hp = Hp + 80;
           _scW5K::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cdbGr; else goto cdbFG;
       cdbFG: // global
           if (%MO_S_Lt_W64(_scW5J::I64,
                            _scW5H::I64)) goto cdbFR; else goto cdbG0;
       cdbFR: // global
           if (%MO_S_Le_W64(0, _scW5J::I64)) goto cdbFK; else goto cdbFP;
       cdbFK: // global
           I64[Hp - 72] = sat_scW60_info;
           I64[Hp - 56] = _scW5H::I64;
           I64[Hp - 48] = _scW5J::I64;
           I64[Hp - 40] = sat_scW5O_info;
           I64[Hp - 24] = _scW5H::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdbFP: // global
           if (%MO_S_Gt_W64(0, _scW5H::I64)) goto cdbGI; else goto cdbFN;
       cdbFN: // global
           I64[Hp - 72] = sat_scW63_info;
           I64[Hp - 56] = _scW5H::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _cdbFL::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _cdbFL::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdbG0: // global
           if (%MO_S_Ge_W64(0, _scW5J::I64)) goto cdbFU; else goto cdbFZ;
       cdbFU: // global
           I64[Hp - 72] = sat_scW6i_info;
           I64[Hp - 56] = _scW5H::I64;
           I64[Hp - 48] = _scW5J::I64;
           I64[Hp - 40] = sat_scW66_info;
           I64[Hp - 24] = _scW5H::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdbFZ: // global
           if (%MO_S_Lt_W64(0, _scW5H::I64)) goto cdbGI; else goto cdbFX;
       cdbFX: // global
           I64[Hp - 72] = sat_scW6l_info;
           I64[Hp - 56] = _scW5H::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _cdbFV::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _cdbFV::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdbG1: // global
           Hp = Hp + 80;
           _scW5K::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cdbGr; else goto cdbG3;
       cdbG3: // global
           if (%MO_S_Lt_W64(_scW5J::I64,
                            _scW5H::I64)) goto cdbGe; else goto cdbGn;
       cdbGe: // global
           if (%MO_S_Le_W64(1, _scW5J::I64)) goto cdbG7; else goto cdbGc;
       cdbG7: // global
           I64[Hp - 72] = sat_scW6B_info;
           I64[Hp - 56] = _scW5H::I64;
           I64[Hp - 48] = _scW5J::I64;
           I64[Hp - 40] = sat_scW6p_info;
           I64[Hp - 24] = _scW5H::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdbGc: // global
           if (%MO_S_Gt_W64(1, _scW5H::I64)) goto cdbGI; else goto cdbGa;
       cdbGa: // global
           I64[Hp - 72] = sat_scW6E_info;
           I64[Hp - 56] = _scW5H::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _cdbG8::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _cdbG8::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdbGn: // global
           if (%MO_S_Ge_W64(1, _scW5J::I64)) goto cdbGh; else goto cdbGm;
       cdbGh: // global
           I64[Hp - 72] = sat_scW6T_info;
           I64[Hp - 56] = _scW5H::I64;
           I64[Hp - 48] = _scW5J::I64;
           I64[Hp - 40] = sat_scW6H_info;
           I64[Hp - 24] = _scW5H::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdbGm: // global
           if (%MO_S_Lt_W64(1, _scW5H::I64)) goto cdbGI; else goto cdbGk;
       cdbGk: // global
           I64[Hp - 72] = sat_scW6W_info;
           I64[Hp - 56] = _scW5H::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _cdbGi::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _cdbGi::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdbGo: // global
           Hp = Hp + 80;
           _scW5K::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cdbGr; else goto cdbGq;
       cdbGr: // global
           HpAlloc = 80;
           R1 = _scW5K::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdbGq: // global
           if (%MO_S_Lt_W64(_scW5J::I64,
                            _scW5H::I64)) goto cdbGB; else goto cdbGK;
       cdbGB: // global
           if (%MO_S_Le_W64(2, _scW5J::I64)) goto cdbGu; else goto cdbGz;
       cdbGu: // global
           I64[Hp - 72] = sat_scW7c_info;
           I64[Hp - 56] = _scW5H::I64;
           I64[Hp - 48] = _scW5J::I64;
           I64[Hp - 40] = sat_scW70_info;
           I64[Hp - 24] = _scW5H::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdbGz: // global
           if (%MO_S_Gt_W64(2, _scW5H::I64)) goto cdbGI; else goto cdbGx;
       cdbGx: // global
           I64[Hp - 72] = sat_scW7f_info;
           I64[Hp - 56] = _scW5H::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _cdbGv::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _cdbGv::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdbGK: // global
           if (%MO_S_Ge_W64(2, _scW5J::I64)) goto cdbGE; else goto cdbGJ;
       cdbGE: // global
           I64[Hp - 72] = sat_scW7u_info;
           I64[Hp - 56] = _scW5H::I64;
           I64[Hp - 48] = _scW5J::I64;
           I64[Hp - 40] = sat_scW7i_info;
           I64[Hp - 24] = _scW5H::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdbGJ: // global
           if (%MO_S_Lt_W64(2, _scW5H::I64)) goto cdbGI; else goto cdbGH;
       cdbGI: // global
           Hp = Hp - 80;
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdbGH: // global
           I64[Hp - 72] = sat_scW7x_info;
           I64[Hp - 56] = _scW5H::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _cdbGF::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _cdbGF::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdbu2_info" {
     block_cdbu2_info:
         const _cdbu2;
         const 194;
         const 4294967326;
         const ScWiZ_srt+1384;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.280451243 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoTrace_closure" {
     GHC.RTS.Flags.$fEnumDoTrace_closure:
         const GHC.Enum.C:Enum_con_info;
         const GHC.RTS.Flags.$fEnumDoTrace_$csucc_closure+1;
         const GHC.RTS.Flags.$fEnumDoTrace_$cpred_closure+1;
         const GHC.RTS.Flags.$fEnumDoTrace_$ctoEnum_closure+1;
         const GHC.RTS.Flags.$fEnumDoTrace_$cfromEnum_closure+1;
         const GHC.RTS.Flags.$fEnumDoTrace_$cenumFrom_closure+1;
         const GHC.RTS.Flags.$fEnumDoTrace_$cenumFromThen_closure+2;
         const GHC.RTS.Flags.$fEnumDoTrace_$cenumFromTo_closure+2;
         const GHC.RTS.Flags.$fEnumDoTrace_$cenumFromThenTo_closure+3;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.286667808 UTC

[section ""data" . GHC.RTS.Flags.getRTSFlags2_closure" {
     GHC.RTS.Flags.getRTSFlags2_closure:
         const GHC.RTS.Flags.getRTSFlags2_info;
         const 0;
 },
 sat_scW8g_entry() //  [R1]
         { []
         }
     {offset
       cdbNo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdbNp; else goto cdbNq;
       cdbNp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdbNq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto cdbNn; else goto cdbNm;
       cdbNn: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdbNm: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW8g_info" {
     sat_scW8g_info:
         const sat_scW8g_entry;
         const 4294967296;
         const 17;
 },
 sat_scW8e_entry() //  [R1]
         { []
         }
     {offset
       cdbNz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdbNA; else goto cdbNB;
       cdbNA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdbNB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto cdbNy; else goto cdbNx;
       cdbNy: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdbNx: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW8e_info" {
     sat_scW8e_info:
         const sat_scW8e_entry;
         const 4294967296;
         const 17;
 },
 sat_scW8c_entry() //  [R1]
         { []
         }
     {offset
       cdbNK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdbNL; else goto cdbNM;
       cdbNL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdbNM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto cdbNJ; else goto cdbNI;
       cdbNJ: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdbNI: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW8c_info" {
     sat_scW8c_info:
         const sat_scW8c_entry;
         const 4294967296;
         const 17;
 },
 sat_scW8a_entry() //  [R1]
         { []
         }
     {offset
       cdbNV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdbNW; else goto cdbNX;
       cdbNW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdbNX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto cdbNU; else goto cdbNT;
       cdbNU: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdbNT: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW8a_info" {
     sat_scW8a_info:
         const sat_scW8a_entry;
         const 4294967296;
         const 17;
 },
 sat_scW88_entry() //  [R1]
         { []
         }
     {offset
       cdbO6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdbO7; else goto cdbO8;
       cdbO7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdbO8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto cdbO5; else goto cdbO4;
       cdbO5: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdbO4: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW88_info" {
     sat_scW88_info:
         const sat_scW88_entry;
         const 4294967296;
         const 17;
 },
 sat_scW86_entry() //  [R1]
         { []
         }
     {offset
       cdbOh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdbOi; else goto cdbOj;
       cdbOi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdbOj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto cdbOg; else goto cdbOf;
       cdbOg: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdbOf: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW86_info" {
     sat_scW86_info:
         const sat_scW86_entry;
         const 4294967296;
         const 17;
 },
 sat_scW84_entry() //  [R1]
         { []
         }
     {offset
       cdbOu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdbOv; else goto cdbOw;
       cdbOv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdbOw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scW83::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scW83::I64, 2)) goto udbOx; else goto udbOz;
       udbOx: // global
           if (%MO_S_Lt_W64(_scW83::I64, 1)) goto udbOy; else goto cdbOs;
       udbOy: // global
           if (%MO_S_Lt_W64(_scW83::I64, 0)) goto cdbOq; else goto cdbOr;
       cdbOr: // global
           R1 = GHC.RTS.Flags.TraceNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdbOs: // global
           R1 = GHC.RTS.Flags.TraceEventLog_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udbOz: // global
           if (%MO_S_Ge_W64(_scW83::I64, 3)) goto cdbOq; else goto cdbOt;
       cdbOq: // global
           R2 = _scW83::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl2_entry(R2) args: 24, res: 0, upd: 24;
       cdbOt: // global
           R1 = GHC.RTS.Flags.TraceStderr_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW84_info" {
     sat_scW84_info:
         const sat_scW84_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1384;
 },
 GHC.RTS.Flags.getRTSFlags2_entry() //  []
         { []
         }
     {offset
       cdbOA: // global
           Hp = Hp + 232;
           if (Hp > HpLim) (likely: False) goto cdbOF; else goto cdbOE;
       cdbOF: // global
           HpAlloc = 232;
           R1 = GHC.RTS.Flags.getRTSFlags2_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdbOE: // global
           _scW7E::I64 = %MO_SS_Conv_W32_W64(I32[RtsFlags+336]);
           _scW7I::I64 = %MO_UU_Conv_W8_W64(I8[RtsFlags+340]);
           _scW7M::I64 = %MO_UU_Conv_W8_W64(I8[RtsFlags+341]);
           _scW7Q::I64 = %MO_UU_Conv_W8_W64(I8[RtsFlags+342]);
           _scW7U::I64 = %MO_UU_Conv_W8_W64(I8[RtsFlags+343]);
           _scW7Y::I64 = %MO_UU_Conv_W8_W64(I8[RtsFlags+344]);
           _scW82::I64 = %MO_UU_Conv_W8_W64(I8[RtsFlags+345]);
           I64[Hp - 224] = sat_scW8g_info;
           I64[Hp - 208] = _scW82::I64;
           I64[Hp - 200] = sat_scW8e_info;
           I64[Hp - 184] = _scW7Y::I64;
           I64[Hp - 176] = sat_scW8c_info;
           I64[Hp - 160] = _scW7U::I64;
           I64[Hp - 152] = sat_scW8a_info;
           I64[Hp - 136] = _scW7Q::I64;
           I64[Hp - 128] = sat_scW88_info;
           I64[Hp - 112] = _scW7M::I64;
           I64[Hp - 104] = sat_scW86_info;
           I64[Hp - 88] = _scW7I::I64;
           I64[Hp - 80] = sat_scW84_info;
           I64[Hp - 64] = _scW7E::I64;
           I64[Hp - 56] = GHC.RTS.Flags.TraceFlags_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = Hp - 104;
           P64[Hp - 32] = Hp - 128;
           P64[Hp - 24] = Hp - 152;
           P64[Hp - 16] = Hp - 176;
           P64[Hp - 8] = Hp - 200;
           P64[Hp] = Hp - 224;
           R1 = Hp - 55;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.getRTSFlags2_info" {
     GHC.RTS.Flags.getRTSFlags2_info:
         const GHC.RTS.Flags.getRTSFlags2_entry;
         const 0;
         const 562954248388622;
         const 4294967299;
         const ScWiZ_srt+1384;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.302982094 UTC

[section ""data" . GHC.RTS.Flags.getTraceFlags_closure" {
     GHC.RTS.Flags.getTraceFlags_closure:
         const GHC.RTS.Flags.getTraceFlags_info;
         const 0;
 },
 GHC.RTS.Flags.getTraceFlags_entry() //  []
         { []
         }
     {offset
       cdbPD: // global
           call GHC.RTS.Flags.getRTSFlags2_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.getTraceFlags_info" {
     GHC.RTS.Flags.getTraceFlags_info:
         const GHC.RTS.Flags.getTraceFlags_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const ScWiZ_srt+1520;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.307928769 UTC

[section ""data" . GHC.RTS.Flags.getCCFlags1_closure" {
     GHC.RTS.Flags.getCCFlags1_closure:
         const GHC.RTS.Flags.getCCFlags1_info;
         const 0;
 },
 sat_scW8v_entry() //  [R1]
         { []
         }
     {offset
       cdbQ9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdbQa; else goto cdbQF;
       cdbQa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdbQF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scW8u::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scW8u::I64, 3)) goto udbQG; else goto udbQJ;
       udbQG: // global
           if (%MO_S_Lt_W64(_scW8u::I64, 1)) goto udbQH; else goto udbQI;
       udbQH: // global
           if (%MO_S_Lt_W64(_scW8u::I64, 0)) goto cdbQ3; else goto cdbQ4;
       cdbQ4: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udbQI: // global
           if (%MO_S_Lt_W64(_scW8u::I64, 2)) goto cdbQ5; else goto cdbQ6;
       cdbQ5: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdbQ6: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udbQJ: // global
           if (%MO_S_Ge_W64(_scW8u::I64, 5)) goto cdbQ3; else goto udbQK;
       cdbQ3: // global
           R2 = _scW8u::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udbQK: // global
           if (%MO_S_Lt_W64(_scW8u::I64, 4)) goto cdbQ7; else goto cdbQ8;
       cdbQ7: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdbQ8: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW8v_info" {
     sat_scW8v_info:
         const sat_scW8v_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1528;
 },
 GHC.RTS.Flags.getCCFlags1_entry() //  []
         { []
         }
     {offset
       cdbQL: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdbQQ; else goto cdbQP;
       cdbQQ: // global
           HpAlloc = 88;
           R1 = GHC.RTS.Flags.getCCFlags1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdbQP: // global
           _scW8l::I64 = %MO_UU_Conv_W32_W64(I32[RtsFlags]);
           _scW8p::I64 = I64[RtsFlags+4];
           _scW8t::I64 = I64[RtsFlags+8];
           I64[Hp - 80] = GHC.Types.I#_con_info;
           I64[Hp - 72] = _scW8t::I64;
           I64[Hp - 64] = GHC.Types.I#_con_info;
           I64[Hp - 56] = _scW8p::I64;
           I64[Hp - 48] = sat_scW8v_info;
           I64[Hp - 32] = _scW8l::I64;
           I64[Hp - 24] = GHC.RTS.Flags.CCFlags_con_info;
           P64[Hp - 16] = Hp - 48;
           P64[Hp - 8] = Hp - 63;
           P64[Hp] = Hp - 79;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.getCCFlags1_info" {
     GHC.RTS.Flags.getCCFlags1_info:
         const GHC.RTS.Flags.getCCFlags1_entry;
         const 0;
         const 12884901902;
         const 4294967299;
         const ScWiZ_srt+1528;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.314577684 UTC

[section ""data" . GHC.RTS.Flags.getCCFlags_closure" {
     GHC.RTS.Flags.getCCFlags_closure:
         const GHC.RTS.Flags.getCCFlags_info;
         const 0;
 },
 GHC.RTS.Flags.getCCFlags_entry() //  []
         { []
         }
     {offset
       cdbRc: // global
           call GHC.RTS.Flags.getCCFlags1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.getCCFlags_info" {
     GHC.RTS.Flags.getCCFlags_info:
         const GHC.RTS.Flags.getCCFlags_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const ScWiZ_srt+1536;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.325139435 UTC

[section ""data" . GHC.RTS.Flags.getDebugFlags1_closure" {
     GHC.RTS.Flags.getDebugFlags1_closure:
         const GHC.RTS.Flags.getDebugFlags1_info;
 },
 sat_scWa1_entry() //  [R1]
         { []
         }
     {offset
       cdbSe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdbSf; else goto cdbSg;
       cdbSf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdbSg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto cdbSd; else goto cdbSc;
       cdbSd: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdbSc: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scWa1_info" {
     sat_scWa1_info:
         const sat_scWa1_entry;
         const 4294967296;
         const 17;
 },
 sat_scW9Z_entry() //  [R1]
         { []
         }
     {offset
       cdbSp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdbSq; else goto cdbSr;
       cdbSq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdbSr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto cdbSo; else goto cdbSn;
       cdbSo: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdbSn: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW9Z_info" {
     sat_scW9Z_info:
         const sat_scW9Z_entry;
         const 4294967296;
         const 17;
 },
 sat_scW9X_entry() //  [R1]
         { []
         }
     {offset
       cdbSA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdbSB; else goto cdbSC;
       cdbSB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdbSC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto cdbSz; else goto cdbSy;
       cdbSz: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdbSy: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW9X_info" {
     sat_scW9X_info:
         const sat_scW9X_entry;
         const 4294967296;
         const 17;
 },
 sat_scW9V_entry() //  [R1]
         { []
         }
     {offset
       cdbSL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdbSM; else goto cdbSN;
       cdbSM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdbSN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto cdbSK; else goto cdbSJ;
       cdbSK: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdbSJ: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW9V_info" {
     sat_scW9V_info:
         const sat_scW9V_entry;
         const 4294967296;
         const 17;
 },
 sat_scW9T_entry() //  [R1]
         { []
         }
     {offset
       cdbSW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdbSX; else goto cdbSY;
       cdbSX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdbSY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto cdbSV; else goto cdbSU;
       cdbSV: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdbSU: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW9T_info" {
     sat_scW9T_info:
         const sat_scW9T_entry;
         const 4294967296;
         const 17;
 },
 sat_scW9R_entry() //  [R1]
         { []
         }
     {offset
       cdbT7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdbT8; else goto cdbT9;
       cdbT8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdbT9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto cdbT6; else goto cdbT5;
       cdbT6: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdbT5: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW9R_info" {
     sat_scW9R_info:
         const sat_scW9R_entry;
         const 4294967296;
         const 17;
 },
 sat_scW9P_entry() //  [R1]
         { []
         }
     {offset
       cdbTi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdbTj; else goto cdbTk;
       cdbTj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdbTk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto cdbTh; else goto cdbTg;
       cdbTh: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdbTg: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW9P_info" {
     sat_scW9P_info:
         const sat_scW9P_entry;
         const 4294967296;
         const 17;
 },
 sat_scW9N_entry() //  [R1]
         { []
         }
     {offset
       cdbTt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdbTu; else goto cdbTv;
       cdbTu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdbTv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto cdbTs; else goto cdbTr;
       cdbTs: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdbTr: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW9N_info" {
     sat_scW9N_info:
         const sat_scW9N_entry;
         const 4294967296;
         const 17;
 },
 sat_scW9L_entry() //  [R1]
         { []
         }
     {offset
       cdbTE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdbTF; else goto cdbTG;
       cdbTF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdbTG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto cdbTD; else goto cdbTC;
       cdbTD: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdbTC: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW9L_info" {
     sat_scW9L_info:
         const sat_scW9L_entry;
         const 4294967296;
         const 17;
 },
 sat_scW9J_entry() //  [R1]
         { []
         }
     {offset
       cdbTP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdbTQ; else goto cdbTR;
       cdbTQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdbTR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto cdbTO; else goto cdbTN;
       cdbTO: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdbTN: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW9J_info" {
     sat_scW9J_info:
         const sat_scW9J_entry;
         const 4294967296;
         const 17;
 },
 sat_scW9H_entry() //  [R1]
         { []
         }
     {offset
       cdbU0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdbU1; else goto cdbU2;
       cdbU1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdbU2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto cdbTZ; else goto cdbTY;
       cdbTZ: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdbTY: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW9H_info" {
     sat_scW9H_info:
         const sat_scW9H_entry;
         const 4294967296;
         const 17;
 },
 sat_scW9F_entry() //  [R1]
         { []
         }
     {offset
       cdbUb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdbUc; else goto cdbUd;
       cdbUc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdbUd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto cdbUa; else goto cdbU9;
       cdbUa: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdbU9: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW9F_info" {
     sat_scW9F_info:
         const sat_scW9F_entry;
         const 4294967296;
         const 17;
 },
 sat_scW9D_entry() //  [R1]
         { []
         }
     {offset
       cdbUm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdbUn; else goto cdbUo;
       cdbUn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdbUo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto cdbUl; else goto cdbUk;
       cdbUl: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdbUk: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW9D_info" {
     sat_scW9D_info:
         const sat_scW9D_entry;
         const 4294967296;
         const 17;
 },
 sat_scW9B_entry() //  [R1]
         { []
         }
     {offset
       cdbUx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdbUy; else goto cdbUz;
       cdbUy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdbUz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto cdbUw; else goto cdbUv;
       cdbUw: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdbUv: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW9B_info" {
     sat_scW9B_info:
         const sat_scW9B_entry;
         const 4294967296;
         const 17;
 },
 sat_scW9z_entry() //  [R1]
         { []
         }
     {offset
       cdbUI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdbUJ; else goto cdbUK;
       cdbUJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdbUK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto cdbUH; else goto cdbUG;
       cdbUH: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdbUG: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scW9z_info" {
     sat_scW9z_info:
         const sat_scW9z_entry;
         const 4294967296;
         const 17;
 },
 GHC.RTS.Flags.getDebugFlags1_entry() //  []
         { []
         }
     {offset
       cdbUL: // global
           Hp = Hp + 488;
           if (Hp > HpLim) (likely: False) goto cdbUQ; else goto cdbUP;
       cdbUQ: // global
           HpAlloc = 488;
           R1 = GHC.RTS.Flags.getDebugFlags1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdbUP: // global
           _scW8D::I64 = %MO_UU_Conv_W8_W64(I8[RtsFlags+200]);
           _scW8H::I64 = %MO_UU_Conv_W8_W64(I8[RtsFlags+201]);
           _scW8L::I64 = %MO_UU_Conv_W8_W64(I8[RtsFlags+202]);
           _scW8P::I64 = %MO_UU_Conv_W8_W64(I8[RtsFlags+203]);
           _scW8T::I64 = %MO_UU_Conv_W8_W64(I8[RtsFlags+204]);
           _scW8X::I64 = %MO_UU_Conv_W8_W64(I8[RtsFlags+205]);
           _scW91::I64 = %MO_UU_Conv_W8_W64(I8[RtsFlags+206]);
           _scW95::I64 = %MO_UU_Conv_W8_W64(I8[RtsFlags+207]);
           _scW99::I64 = %MO_UU_Conv_W8_W64(I8[RtsFlags+208]);
           _scW9d::I64 = %MO_UU_Conv_W8_W64(I8[RtsFlags+209]);
           _scW9h::I64 = %MO_UU_Conv_W8_W64(I8[RtsFlags+210]);
           _scW9l::I64 = %MO_UU_Conv_W8_W64(I8[RtsFlags+211]);
           _scW9p::I64 = %MO_UU_Conv_W8_W64(I8[RtsFlags+212]);
           _scW9t::I64 = %MO_UU_Conv_W8_W64(I8[RtsFlags+213]);
           _scW9x::I64 = %MO_UU_Conv_W8_W64(I8[RtsFlags+214]);
           I64[Hp - 480] = sat_scWa1_info;
           I64[Hp - 464] = _scW9x::I64;
           I64[Hp - 456] = sat_scW9Z_info;
           I64[Hp - 440] = _scW9t::I64;
           I64[Hp - 432] = sat_scW9X_info;
           I64[Hp - 416] = _scW9p::I64;
           I64[Hp - 408] = sat_scW9V_info;
           I64[Hp - 392] = _scW9l::I64;
           I64[Hp - 384] = sat_scW9T_info;
           I64[Hp - 368] = _scW9h::I64;
           I64[Hp - 360] = sat_scW9R_info;
           I64[Hp - 344] = _scW9d::I64;
           I64[Hp - 336] = sat_scW9P_info;
           I64[Hp - 320] = _scW99::I64;
           I64[Hp - 312] = sat_scW9N_info;
           I64[Hp - 296] = _scW95::I64;
           I64[Hp - 288] = sat_scW9L_info;
           I64[Hp - 272] = _scW91::I64;
           I64[Hp - 264] = sat_scW9J_info;
           I64[Hp - 248] = _scW8X::I64;
           I64[Hp - 240] = sat_scW9H_info;
           I64[Hp - 224] = _scW8T::I64;
           I64[Hp - 216] = sat_scW9F_info;
           I64[Hp - 200] = _scW8P::I64;
           I64[Hp - 192] = sat_scW9D_info;
           I64[Hp - 176] = _scW8L::I64;
           I64[Hp - 168] = sat_scW9B_info;
           I64[Hp - 152] = _scW8H::I64;
           I64[Hp - 144] = sat_scW9z_info;
           I64[Hp - 128] = _scW8D::I64;
           I64[Hp - 120] = GHC.RTS.Flags.DebugFlags_con_info;
           P64[Hp - 112] = Hp - 144;
           P64[Hp - 104] = Hp - 168;
           P64[Hp - 96] = Hp - 192;
           P64[Hp - 88] = Hp - 216;
           P64[Hp - 80] = Hp - 240;
           P64[Hp - 72] = Hp - 264;
           P64[Hp - 64] = Hp - 288;
           P64[Hp - 56] = Hp - 312;
           P64[Hp - 48] = Hp - 336;
           P64[Hp - 40] = Hp - 360;
           P64[Hp - 32] = Hp - 384;
           P64[Hp - 24] = Hp - 408;
           P64[Hp - 16] = Hp - 432;
           P64[Hp - 8] = Hp - 456;
           P64[Hp] = Hp - 480;
           R1 = Hp - 119;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.getDebugFlags1_info" {
     GHC.RTS.Flags.getDebugFlags1_info:
         const GHC.RTS.Flags.getDebugFlags1_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.356371624 UTC

[section ""data" . GHC.RTS.Flags.getDebugFlags_closure" {
     GHC.RTS.Flags.getDebugFlags_closure:
         const GHC.RTS.Flags.getDebugFlags_info;
 },
 GHC.RTS.Flags.getDebugFlags_entry() //  []
         { []
         }
     {offset
       cdbWH: // global
           call GHC.RTS.Flags.getDebugFlags1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.getDebugFlags_info" {
     GHC.RTS.Flags.getDebugFlags_info:
         const GHC.RTS.Flags.getDebugFlags_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.36236612 UTC

[section ""data" . GHC.RTS.Flags.getMiscFlags1_closure" {
     GHC.RTS.Flags.getMiscFlags1_closure:
         const GHC.RTS.Flags.getMiscFlags1_info;
 },
 sat_scWaG_entry() //  [R1]
         { []
         }
     {offset
       cdbXm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdbXn; else goto cdbXo;
       cdbXn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdbXo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto cdbXl; else goto cdbXk;
       cdbXl: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdbXk: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scWaG_info" {
     sat_scWaG_info:
         const sat_scWaG_entry;
         const 4294967296;
         const 17;
 },
 sat_scWaE_entry() //  [R1]
         { []
         }
     {offset
       cdbXx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdbXy; else goto cdbXz;
       cdbXy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdbXz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto cdbXw; else goto cdbXv;
       cdbXw: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdbXv: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scWaE_info" {
     sat_scWaE_info:
         const sat_scWaE_entry;
         const 4294967296;
         const 17;
 },
 sat_scWaC_entry() //  [R1]
         { []
         }
     {offset
       cdbXI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdbXJ; else goto cdbXK;
       cdbXJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdbXK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto cdbXH; else goto cdbXG;
       cdbXH: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdbXG: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scWaC_info" {
     sat_scWaC_info:
         const sat_scWaC_entry;
         const 4294967296;
         const 17;
 },
 sat_scWaA_entry() //  [R1]
         { []
         }
     {offset
       cdbXT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdbXU; else goto cdbXV;
       cdbXU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdbXV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto cdbXS; else goto cdbXR;
       cdbXS: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdbXR: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scWaA_info" {
     sat_scWaA_info:
         const sat_scWaA_entry;
         const 4294967296;
         const 17;
 },
 sat_scWay_entry() //  [R1]
         { []
         }
     {offset
       cdbY4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdbY5; else goto cdbY6;
       cdbY5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdbY6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto cdbY3; else goto cdbY2;
       cdbY3: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdbY2: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scWay_info" {
     sat_scWay_info:
         const sat_scWay_entry;
         const 4294967296;
         const 17;
 },
 GHC.RTS.Flags.getMiscFlags1_entry() //  []
         { []
         }
     {offset
       cdbY7: // global
           Hp = Hp + 216;
           if (Hp > HpLim) (likely: False) goto cdbYd; else goto cdbYc;
       cdbYd: // global
           HpAlloc = 216;
           R1 = GHC.RTS.Flags.getMiscFlags1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdbYc: // global
           _scWa7::I64 = I64[RtsFlags+176];
           _scWab::I64 = %MO_UU_Conv_W8_W64(I8[RtsFlags+184]);
           _scWaf::I64 = %MO_UU_Conv_W8_W64(I8[RtsFlags+185]);
           _scWaj::I64 = %MO_UU_Conv_W8_W64(I8[RtsFlags+186]);
           _scWan::I64 = %MO_UU_Conv_W8_W64(I8[RtsFlags+187]);
           _scWar::I64 = %MO_UU_Conv_W8_W64(I8[RtsFlags+188]);
           _scWav::I64 = I64[RtsFlags+192];
           I64[Hp - 208] = GHC.Types.W#_con_info;
           I64[Hp - 200] = _scWav::I64;
           I64[Hp - 192] = sat_scWaG_info;
           I64[Hp - 176] = _scWar::I64;
           I64[Hp - 168] = sat_scWaE_info;
           I64[Hp - 152] = _scWan::I64;
           I64[Hp - 144] = sat_scWaC_info;
           I64[Hp - 128] = _scWaj::I64;
           I64[Hp - 120] = sat_scWaA_info;
           I64[Hp - 104] = _scWaf::I64;
           I64[Hp - 96] = sat_scWay_info;
           I64[Hp - 80] = _scWab::I64;
           I64[Hp - 72] = GHC.Word.W64#_con_info;
           I64[Hp - 64] = _scWa7::I64;
           I64[Hp - 56] = GHC.RTS.Flags.MiscFlags_con_info;
           P64[Hp - 48] = Hp - 71;
           P64[Hp - 40] = Hp - 96;
           P64[Hp - 32] = Hp - 120;
           P64[Hp - 24] = Hp - 144;
           P64[Hp - 16] = Hp - 168;
           P64[Hp - 8] = Hp - 192;
           P64[Hp] = Hp - 207;
           R1 = Hp - 55;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.getMiscFlags1_info" {
     GHC.RTS.Flags.getMiscFlags1_info:
         const GHC.RTS.Flags.getMiscFlags1_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.375311822 UTC

[section ""data" . GHC.RTS.Flags.getMiscFlags_closure" {
     GHC.RTS.Flags.getMiscFlags_closure:
         const GHC.RTS.Flags.getMiscFlags_info;
 },
 GHC.RTS.Flags.getMiscFlags_entry() //  []
         { []
         }
     {offset
       cdbYY: // global
           call GHC.RTS.Flags.getMiscFlags1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.getMiscFlags_info" {
     GHC.RTS.Flags.getMiscFlags_info:
         const GHC.RTS.Flags.getMiscFlags_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.378878646 UTC

[section ""data" . GHC.RTS.Flags.getConcFlags1_closure" {
     GHC.RTS.Flags.getConcFlags1_closure:
         const GHC.RTS.Flags.getConcFlags1_info;
 },
 GHC.RTS.Flags.getConcFlags1_entry() //  []
         { []
         }
     {offset
       cdbZb: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdbZm; else goto cdbZl;
       cdbZm: // global
           HpAlloc = 56;
           R1 = GHC.RTS.Flags.getConcFlags1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdbZl: // global
           _scWaN::I64 = I64[RtsFlags+160];
           _scWaR::I64 = I64[RtsFlags+168];
           I64[Hp - 48] = GHC.Types.I#_con_info;
           I64[Hp - 40] = _scWaR::I64;
           I64[Hp - 32] = GHC.Word.W64#_con_info;
           I64[Hp - 24] = _scWaN::I64;
           I64[Hp - 16] = GHC.RTS.Flags.ConcFlags_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.getConcFlags1_info" {
     GHC.RTS.Flags.getConcFlags1_info:
         const GHC.RTS.Flags.getConcFlags1_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.384493653 UTC

[section ""data" . GHC.RTS.Flags.getConcFlags_closure" {
     GHC.RTS.Flags.getConcFlags_closure:
         const GHC.RTS.Flags.getConcFlags_info;
 },
 GHC.RTS.Flags.getConcFlags_entry() //  []
         { []
         }
     {offset
       cdbZy: // global
           call GHC.RTS.Flags.getConcFlags1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.getConcFlags_info" {
     GHC.RTS.Flags.getConcFlags_info:
         const GHC.RTS.Flags.getConcFlags_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.39251563 UTC

[section ""data" . GHC.RTS.Flags.getParFlags1_closure" {
     GHC.RTS.Flags.getParFlags1_closure:
         const GHC.RTS.Flags.getParFlags1_info;
 },
 sat_scWbN_entry() //  [R1]
         { []
         }
     {offset
       cdc0l: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdc0m; else goto cdc0n;
       cdc0m: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdc0n: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto cdc0k; else goto cdc0j;
       cdc0k: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdc0j: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scWbN_info" {
     sat_scWbN_info:
         const sat_scWbN_entry;
         const 4294967296;
         const 17;
 },
 sat_scWbI_entry() //  [R1]
         { []
         }
     {offset
       cdc0z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdc0A; else goto cdc0B;
       cdc0A: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdc0B: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto cdc0y; else goto cdc0x;
       cdc0y: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdc0x: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scWbI_info" {
     sat_scWbI_info:
         const sat_scWbI_entry;
         const 4294967296;
         const 17;
 },
 sat_scWbF_entry() //  [R1]
         { []
         }
     {offset
       cdc0L: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdc0M; else goto cdc0N;
       cdc0M: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdc0N: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto cdc0K; else goto cdc0J;
       cdc0K: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdc0J: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scWbF_info" {
     sat_scWbF_info:
         const sat_scWbF_entry;
         const 4294967296;
         const 17;
 },
 sat_scWbC_entry() //  [R1]
         { []
         }
     {offset
       cdc0X: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdc0Y; else goto cdc0Z;
       cdc0Y: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdc0Z: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto cdc0W; else goto cdc0V;
       cdc0W: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdc0V: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scWbC_info" {
     sat_scWbC_info:
         const sat_scWbC_entry;
         const 4294967296;
         const 17;
 },
 GHC.RTS.Flags.getParFlags1_entry() //  []
         { []
         }
     {offset
       cdc10: // global
           Hp = Hp + 280;
           if (Hp > HpLim) (likely: False) goto cdc16; else goto cdc15;
       cdc16: // global
           HpAlloc = 280;
           R1 = GHC.RTS.Flags.getParFlags1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdc15: // global
           _scWaZ::I64 = %MO_UU_Conv_W32_W64(I32[RtsFlags+368]);
           _scWb3::I64 = %MO_UU_Conv_W8_W64(I8[RtsFlags+372]);
           _scWb7::I64 = %MO_UU_Conv_W32_W64(I32[RtsFlags+376]);
           _scWbb::I64 = %MO_UU_Conv_W8_W64(I8[RtsFlags+380]);
           _scWbf::I64 = %MO_UU_Conv_W32_W64(I32[RtsFlags+384]);
           _scWbj::I64 = %MO_UU_Conv_W8_W64(I8[RtsFlags+388]);
           _scWbn::I64 = %MO_UU_Conv_W32_W64(I32[RtsFlags+392]);
           _scWbr::I64 = %MO_UU_Conv_W32_W64(I32[RtsFlags+396]);
           _scWbv::I64 = %MO_UU_Conv_W32_W64(I32[RtsFlags+400]);
           _scWbz::I64 = %MO_UU_Conv_W8_W64(I8[RtsFlags+404]);
           I64[Hp - 272] = sat_scWbN_info;
           I64[Hp - 256] = _scWbz::I64;
           I64[Hp - 248] = GHC.Word.W32#_con_info;
           I64[Hp - 240] = _scWbv::I64;
           I64[Hp - 232] = GHC.Word.W32#_con_info;
           I64[Hp - 224] = _scWbr::I64;
           I64[Hp - 216] = GHC.Word.W32#_con_info;
           I64[Hp - 208] = _scWbn::I64;
           I64[Hp - 200] = sat_scWbI_info;
           I64[Hp - 184] = _scWbj::I64;
           I64[Hp - 176] = GHC.Word.W32#_con_info;
           I64[Hp - 168] = _scWbf::I64;
           I64[Hp - 160] = sat_scWbF_info;
           I64[Hp - 144] = _scWbb::I64;
           I64[Hp - 136] = GHC.Word.W32#_con_info;
           I64[Hp - 128] = _scWb7::I64;
           I64[Hp - 120] = sat_scWbC_info;
           I64[Hp - 104] = _scWb3::I64;
           I64[Hp - 96] = GHC.Word.W32#_con_info;
           I64[Hp - 88] = _scWaZ::I64;
           I64[Hp - 80] = GHC.RTS.Flags.ParFlags_con_info;
           P64[Hp - 72] = Hp - 95;
           P64[Hp - 64] = Hp - 120;
           P64[Hp - 56] = Hp - 135;
           P64[Hp - 48] = Hp - 160;
           P64[Hp - 40] = Hp - 175;
           P64[Hp - 32] = Hp - 200;
           P64[Hp - 24] = Hp - 215;
           P64[Hp - 16] = Hp - 231;
           P64[Hp - 8] = Hp - 247;
           P64[Hp] = Hp - 272;
           R1 = Hp - 79;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.getParFlags1_info" {
     GHC.RTS.Flags.getParFlags1_info:
         const GHC.RTS.Flags.getParFlags1_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.406021864 UTC

[section ""data" . GHC.RTS.Flags.getParFlags_closure" {
     GHC.RTS.Flags.getParFlags_closure:
         const GHC.RTS.Flags.getParFlags_info;
 },
 GHC.RTS.Flags.getParFlags_entry() //  []
         { []
         }
     {offset
       cdc1O: // global
           call GHC.RTS.Flags.getParFlags1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.getParFlags_info" {
     GHC.RTS.Flags.getParFlags_info:
         const GHC.RTS.Flags.getParFlags_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.418673593 UTC

[section ""data" . GHC.RTS.Flags.getProfFlags1_closure" {
     GHC.RTS.Flags.getProfFlags1_closure:
         const GHC.RTS.Flags.getProfFlags1_info;
         const 0;
 },
 sat_scWdb_entry() //  [R1]
         { []
         }
     {offset
       cdc3o: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdc3p; else goto cdc3q;
       cdc3p: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdc3q: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto cdc3n; else goto cdc3m;
       cdc3n: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdc3m: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scWdb_info" {
     sat_scWdb_info:
         const sat_scWdb_entry;
         const 4294967296;
         const 17;
 },
 sat_scWd9_entry() //  [R1]
         { []
         }
     {offset
       cdc3z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdc3A; else goto cdc3B;
       cdc3A: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdc3B: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto cdc3y; else goto cdc3x;
       cdc3y: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdc3x: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scWd9_info" {
     sat_scWd9_info:
         const sat_scWd9_entry;
         const 4294967296;
         const 17;
 },
 sat_scWd5_entry() //  [R1]
         { []
         }
     {offset
       cdc3I: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdc3J; else goto cdc3K;
       cdc3J: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdc3K: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scWd5_info" {
     sat_scWd5_info:
         const sat_scWd5_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1544;
 },
 GHC.RTS.Flags.getProfFlags1_entry() //  []
         { []
         }
     {offset
       cdc3L: // global
           if ((Sp + -120) < SpLim) (likely: False) goto cdc3M; else goto cdc3N;
       cdc3M: // global
           R1 = GHC.RTS.Flags.getProfFlags1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdc3N: // global
           _scWbT::I64 = I64[RtsFlags+248];
           _scWbX::I64 = I64[RtsFlags+256];
           _scWc1::I64 = I64[RtsFlags+264];
           _scWc5::I64 = %MO_UU_Conv_W8_W64(I8[RtsFlags+268]);
           _scWc9::I64 = %MO_UU_Conv_W8_W64(I8[RtsFlags+269]);
           _scWcd::I64 = I64[RtsFlags+272];
           _scWch::I64 = I64[RtsFlags+276];
           _scWcl::I64 = I64[RtsFlags+280];
           if (_scWcl::I64 == 0) goto cdc5x; else goto cdc5r;
       cdc5x: // global
           I64[Sp - 72] = RtsFlags+248;
           I64[Sp - 64] = _scWbT::I64;
           I64[Sp - 56] = _scWbX::I64;
           I64[Sp - 48] = _scWc1::I64;
           I64[Sp - 40] = _scWc5::I64;
           I64[Sp - 32] = _scWc9::I64;
           I64[Sp - 24] = _scWcd::I64;
           I64[Sp - 16] = _scWch::I64;
           P64[Sp - 8] = GHC.Base.Nothing_closure+1;
           Sp = Sp - 72;
           call _scWcm() args: 0, res: 0, upd: 0;
       cdc5r: // global
           I64[Sp - 80] = block_cdc5n_info;
           R1 = GHC.IO.Encoding.getForeignEncoding_closure;
           I64[Sp - 72] = RtsFlags+248;
           I64[Sp - 64] = _scWbT::I64;
           I64[Sp - 56] = _scWbX::I64;
           I64[Sp - 48] = _scWc1::I64;
           I64[Sp - 40] = _scWc5::I64;
           I64[Sp - 32] = _scWc9::I64;
           I64[Sp - 24] = _scWcd::I64;
           I64[Sp - 16] = _scWch::I64;
           I64[Sp - 8] = _scWcl::I64;
           Sp = Sp - 80;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.getProfFlags1_info" {
     GHC.RTS.Flags.getProfFlags1_info:
         const GHC.RTS.Flags.getProfFlags1_entry;
         const 0;
         const 64424509454;
         const 4294967299;
         const ScWiZ_srt+1544;
 },
 _cdc5n() //  [R1]
         { []
         }
     {offset
       cdc5n: // global
           I64[Sp] = block_cdc5p_info;
           R3 = I64[Sp + 72];
           R2 = R1;
           call GHC.Foreign.$wpeekCString_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdc5n_info" {
     block_cdc5n_info:
         const _cdc5n;
         const 32713;
         const 30064771102;
         const ScWiZ_srt+1544;
 },
 _cdc5p() //  [R1]
         { []
         }
     {offset
       cdc5p: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdc5w; else goto cdc5v;
       cdc5w: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdc5v: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = R1;
           P64[Sp + 72] = Hp - 6;
           Sp = Sp + 8;
           call _scWcm() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cdc5p_info" {
     block_cdc5p_info:
         const _cdc5p;
         const 32713;
         const 30064771102;
         const ScWiZ_srt+1544;
 },
 _scWcm() //  []
         { []
         }
     {offset
       scWcm: // global
           _scWcs::I64 = I64[I64[Sp] + 40];
           if (_scWcs::I64 == 0) goto cdc5j; else goto cdc5d;
       cdc5j: // global
           P64[Sp - 8] = GHC.Base.Nothing_closure+1;
           Sp = Sp - 8;
           call _scWct() args: 0, res: 0, upd: 0;
       cdc5d: // global
           I64[Sp - 16] = block_cdc59_info;
           R1 = GHC.IO.Encoding.getForeignEncoding_closure;
           I64[Sp - 8] = _scWcs::I64;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdc59() //  [R1]
         { []
         }
     {offset
       cdc59: // global
           _scWcs::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_cdc5b_info;
           R3 = _scWcs::I64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Foreign.$wpeekCString_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdc59_info" {
     block_cdc59_info:
         const _cdc59;
         const 32714;
         const 30064771102;
         const ScWiZ_srt+1544;
 },
 _cdc5b() //  [R1]
         { []
         }
     {offset
       cdc5b: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdc5i; else goto cdc5h;
       cdc5i: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdc5h: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = R1;
           P64[Sp] = Hp - 6;
           call _scWct() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cdc5b_info" {
     block_cdc5b_info:
         const _cdc5b;
         const 16329;
         const 30064771102;
         const ScWiZ_srt+1544;
 },
 _scWct() //  []
         { []
         }
     {offset
       scWct: // global
           _scWcz::I64 = I64[I64[Sp + 8] + 48];
           if (_scWcz::I64 == 0) goto cdc55; else goto cdc4Z;
       cdc55: // global
           P64[Sp - 8] = GHC.Base.Nothing_closure+1;
           Sp = Sp - 8;
           call _scWcA() args: 0, res: 0, upd: 0;
       cdc4Z: // global
           I64[Sp - 16] = block_cdc4V_info;
           R1 = GHC.IO.Encoding.getForeignEncoding_closure;
           I64[Sp - 8] = _scWcz::I64;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdc4V() //  [R1]
         { []
         }
     {offset
       cdc4V: // global
           _scWcz::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_cdc4X_info;
           R3 = _scWcz::I64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Foreign.$wpeekCString_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdc4V_info" {
     block_cdc4V_info:
         const _cdc4V;
         const 65355;
         const 30064771102;
         const ScWiZ_srt+1544;
 },
 _cdc4X() //  [R1]
         { []
         }
     {offset
       cdc4X: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdc54; else goto cdc53;
       cdc54: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdc53: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = R1;
           P64[Sp] = Hp - 6;
           call _scWcA() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cdc4X_info" {
     block_cdc4X_info:
         const _cdc4X;
         const 32650;
         const 30064771102;
         const ScWiZ_srt+1544;
 },
 _scWcA() //  []
         { []
         }
     {offset
       scWcA: // global
           _scWcG::I64 = I64[I64[Sp + 16] + 56];
           if (_scWcG::I64 == 0) goto cdc4R; else goto cdc4L;
       cdc4R: // global
           P64[Sp - 8] = GHC.Base.Nothing_closure+1;
           Sp = Sp - 8;
           call _scWcH() args: 0, res: 0, upd: 0;
       cdc4L: // global
           I64[Sp - 16] = block_cdc4H_info;
           R1 = GHC.IO.Encoding.getForeignEncoding_closure;
           I64[Sp - 8] = _scWcG::I64;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdc4H() //  [R1]
         { []
         }
     {offset
       cdc4H: // global
           _scWcG::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_cdc4J_info;
           R3 = _scWcG::I64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Foreign.$wpeekCString_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdc4H_info" {
     block_cdc4H_info:
         const _cdc4H;
         const 130636;
         const 30064771102;
         const ScWiZ_srt+1544;
 },
 _cdc4J() //  [R1]
         { []
         }
     {offset
       cdc4J: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdc4Q; else goto cdc4P;
       cdc4Q: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdc4P: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = R1;
           P64[Sp] = Hp - 6;
           call _scWcH() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cdc4J_info" {
     block_cdc4J_info:
         const _cdc4J;
         const 65291;
         const 30064771102;
         const ScWiZ_srt+1544;
 },
 _scWcH() //  []
         { []
         }
     {offset
       scWcH: // global
           _scWcN::I64 = I64[I64[Sp + 24] + 64];
           if (_scWcN::I64 == 0) goto cdc4D; else goto cdc4x;
       cdc4D: // global
           P64[Sp - 8] = GHC.Base.Nothing_closure+1;
           Sp = Sp - 8;
           call _scWcO() args: 0, res: 0, upd: 0;
       cdc4x: // global
           I64[Sp - 16] = block_cdc4t_info;
           R1 = GHC.IO.Encoding.getForeignEncoding_closure;
           I64[Sp - 8] = _scWcN::I64;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdc4t() //  [R1]
         { []
         }
     {offset
       cdc4t: // global
           _scWcN::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_cdc4v_info;
           R3 = _scWcN::I64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Foreign.$wpeekCString_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdc4t_info" {
     block_cdc4t_info:
         const _cdc4t;
         const 261197;
         const 30064771102;
         const ScWiZ_srt+1544;
 },
 _cdc4v() //  [R1]
         { []
         }
     {offset
       cdc4v: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdc4C; else goto cdc4B;
       cdc4C: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdc4B: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = R1;
           P64[Sp] = Hp - 6;
           call _scWcO() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cdc4v_info" {
     block_cdc4v_info:
         const _cdc4v;
         const 130572;
         const 30064771102;
         const ScWiZ_srt+1544;
 },
 _scWcO() //  []
         { []
         }
     {offset
       scWcO: // global
           _scWcU::I64 = I64[I64[Sp + 32] + 72];
           if (_scWcU::I64 == 0) goto cdc4p; else goto cdc4j;
       cdc4p: // global
           P64[Sp - 8] = GHC.Base.Nothing_closure+1;
           Sp = Sp - 8;
           call _scWcV() args: 0, res: 0, upd: 0;
       cdc4j: // global
           I64[Sp - 16] = block_cdc4f_info;
           R1 = GHC.IO.Encoding.getForeignEncoding_closure;
           I64[Sp - 8] = _scWcU::I64;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdc4f() //  [R1]
         { []
         }
     {offset
       cdc4f: // global
           _scWcU::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_cdc4h_info;
           R3 = _scWcU::I64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Foreign.$wpeekCString_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdc4f_info" {
     block_cdc4f_info:
         const _cdc4f;
         const 522318;
         const 30064771102;
         const ScWiZ_srt+1544;
 },
 _cdc4h() //  [R1]
         { []
         }
     {offset
       cdc4h: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdc4o; else goto cdc4n;
       cdc4o: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdc4n: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = R1;
           P64[Sp] = Hp - 6;
           call _scWcV() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cdc4h_info" {
     block_cdc4h_info:
         const _cdc4h;
         const 261133;
         const 30064771102;
         const ScWiZ_srt+1544;
 },
 _scWcV() //  []
         { []
         }
     {offset
       scWcV: // global
           _scWd1::I64 = I64[I64[Sp + 40] + 80];
           if (_scWd1::I64 == 0) goto cdc4b; else goto cdc45;
       cdc4b: // global
           P64[Sp + 40] = GHC.Base.Nothing_closure+1;
           call _cdc3c() args: 0, res: 0, upd: 0;
       cdc45: // global
           I64[Sp - 8] = block_cdc41_info;
           R1 = GHC.IO.Encoding.getForeignEncoding_closure;
           I64[Sp + 40] = _scWd1::I64;
           Sp = Sp - 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdc41() //  [R1]
         { []
         }
     {offset
       cdc41: // global
           I64[Sp] = block_cdc43_info;
           R3 = I64[Sp + 48];
           R2 = R1;
           call GHC.Foreign.$wpeekCString_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdc41_info" {
     block_cdc41_info:
         const _cdc41;
         const 522254;
         const 21474836510;
         const ScWiZ_srt+1544;
 },
 _cdc43() //  [R1]
         { []
         }
     {offset
       cdc43: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdc4a; else goto cdc49;
       cdc4a: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdc49: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = R1;
           P64[Sp + 48] = Hp - 6;
           Sp = Sp + 8;
           call _cdc3c() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cdc43_info" {
     block_cdc43_info:
         const _cdc43;
         const 522254;
         const 4294967326;
         const ScWiZ_srt+1544;
 },
 _cdc3c() //  []
         { []
         }
     {offset
       cdc3c: // global
           Hp = Hp + 256;
           _scWd4::P64 = P64[Sp + 40];
           if (Hp > HpLim) (likely: False) goto cdc3X; else goto cdc3W;
       cdc3X: // global
           HpAlloc = 256;
           I64[Sp - 8] = block_cdc3b_info;
           R1 = _scWd4::P64;
           Sp = Sp - 8;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdc3W: // global
           I64[Hp - 248] = GHC.Types.W#_con_info;
           I64[Hp - 240] = I64[Sp + 96];
           I64[Hp - 232] = GHC.Types.W#_con_info;
           I64[Hp - 224] = I64[Sp + 88];
           I64[Hp - 216] = sat_scWdb_info;
           I64[Hp - 200] = I64[Sp + 80];
           I64[Hp - 192] = sat_scWd9_info;
           I64[Hp - 176] = I64[Sp + 72];
           I64[Hp - 168] = GHC.Types.W#_con_info;
           I64[Hp - 160] = I64[Sp + 64];
           I64[Hp - 152] = GHC.Word.W64#_con_info;
           I64[Hp - 144] = I64[Sp + 56];
           I64[Hp - 136] = sat_scWd5_info;
           I64[Hp - 120] = I64[Sp + 48];
           I64[Hp - 112] = GHC.RTS.Flags.ProfFlags_con_info;
           P64[Hp - 104] = Hp - 136;
           P64[Hp - 96] = Hp - 151;
           P64[Hp - 88] = Hp - 167;
           P64[Hp - 80] = Hp - 192;
           P64[Hp - 72] = Hp - 216;
           P64[Hp - 64] = Hp - 231;
           P64[Hp - 56] = Hp - 247;
           P64[Hp - 48] = P64[Sp + 104];
           P64[Hp - 40] = P64[Sp + 32];
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp];
           P64[Hp] = _scWd4::P64;
           R1 = Hp - 111;
           Sp = Sp + 112;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cdc3b() //  [R1]
         { []
         }
     {offset
       cdc3b: // global
           P64[Sp + 48] = R1;
           Sp = Sp + 8;
           call _cdc3c() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cdc3b_info" {
     block_cdc3b_info:
         const _cdc3b;
         const 522254;
         const 4294967326;
         const ScWiZ_srt+1544;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.458028936 UTC

[section ""data" . GHC.RTS.Flags.getProfFlags_closure" {
     GHC.RTS.Flags.getProfFlags_closure:
         const GHC.RTS.Flags.getProfFlags_info;
         const 0;
 },
 GHC.RTS.Flags.getProfFlags_entry() //  []
         { []
         }
     {offset
       cdc83: // global
           call GHC.RTS.Flags.getProfFlags1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.getProfFlags_info" {
     GHC.RTS.Flags.getProfFlags_info:
         const GHC.RTS.Flags.getProfFlags_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const ScWiZ_srt+1568;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.467955881 UTC

[section ""data" . GHC.RTS.Flags.getGCFlags5_closure" {
     GHC.RTS.Flags.getGCFlags5_closure:
         const GHC.RTS.Flags.getGCFlags5_info;
         const 0;
 },
 sat_scWgn_entry() //  [R1]
         { []
         }
     {offset
       cdc9D: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdc9E; else goto cdc9F;
       cdc9E: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdc9F: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto cdc9C; else goto cdc9B;
       cdc9C: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdc9B: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scWgn_info" {
     sat_scWgn_info:
         const sat_scWgn_entry;
         const 4294967296;
         const 17;
 },
 sat_scWgj_entry() //  [R1]
         { []
         }
     {offset
       cdc9Q: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdc9R; else goto cdc9S;
       cdc9R: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdc9S: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto cdc9P; else goto cdc9O;
       cdc9P: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdc9O: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scWgj_info" {
     sat_scWgj_info:
         const sat_scWgj_entry;
         const 4294967296;
         const 17;
 },
 sat_scWgg_entry() //  [R1]
         { []
         }
     {offset
       cdca2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdca3; else goto cdca4;
       cdca3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdca4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto cdca1; else goto cdca0;
       cdca1: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdca0: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scWgg_info" {
     sat_scWgg_info:
         const sat_scWgg_entry;
         const 4294967296;
         const 17;
 },
 sat_scWge_entry() //  [R1]
         { []
         }
     {offset
       cdcad: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdcae; else goto cdcaf;
       cdcae: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdcaf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto cdcac; else goto cdcab;
       cdcac: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdcab: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scWge_info" {
     sat_scWge_info:
         const sat_scWge_entry;
         const 4294967296;
         const 17;
 },
 sat_scWgb_entry() //  [R1]
         { []
         }
     {offset
       cdcap: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdcaq; else goto cdcar;
       cdcaq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdcar: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto cdcao; else goto cdcan;
       cdcao: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdcan: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scWgb_info" {
     sat_scWgb_info:
         const sat_scWgb_entry;
         const 4294967296;
         const 17;
 },
 sat_scWg9_entry() //  [R1]
         { []
         }
     {offset
       cdcaA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdcaB; else goto cdcaC;
       cdcaB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdcaC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto cdcaz; else goto cdcay;
       cdcaz: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdcay: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scWg9_info" {
     sat_scWg9_info:
         const sat_scWg9_entry;
         const 4294967296;
         const 17;
 },
 sat_scWg4_entry() //  [R1]
         { []
         }
     {offset
       cdcaO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdcaP; else goto cdcaQ;
       cdcaP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdcaQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto cdcaN; else goto cdcaM;
       cdcaN: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdcaM: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scWg4_info" {
     sat_scWg4_info:
         const sat_scWg4_entry;
         const 4294967296;
         const 17;
 },
 sat_scWfS_entry() //  [R1]
         { []
         }
     {offset
       cdcbe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdcbf; else goto cdcbK;
       cdcbf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdcbK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scWfR::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scWfR::I64, 3)) goto udcbL; else goto udcbO;
       udcbL: // global
           if (%MO_S_Lt_W64(_scWfR::I64, 1)) goto udcbM; else goto udcbN;
       udcbM: // global
           if (%MO_S_Lt_W64(_scWfR::I64, 0)) goto cdcb8; else goto cdcb9;
       cdcb9: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udcbN: // global
           if (%MO_S_Lt_W64(_scWfR::I64, 2)) goto cdcba; else goto cdcbb;
       cdcba: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdcbb: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udcbO: // global
           if (%MO_S_Ge_W64(_scWfR::I64, 5)) goto cdcb8; else goto udcbP;
       cdcb8: // global
           R2 = _scWfR::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       udcbP: // global
           if (%MO_S_Lt_W64(_scWfR::I64, 4)) goto cdcbc; else goto cdcbd;
       cdcbc: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdcbd: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scWfS_info" {
     sat_scWfS_info:
         const sat_scWfS_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1576;
 },
 GHC.RTS.Flags.getGCFlags5_entry() //  [R2]
         { []
         }
     {offset
       cdcbQ: // global
           Hp = Hp + 704;
           if (Hp > HpLim) (likely: False) goto cdcbV; else goto cdcbU;
       cdcbV: // global
           HpAlloc = 704;
           R2 = R2;
           R1 = GHC.RTS.Flags.getGCFlags5_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdcbU: // global
           _scWee::I64 = %MO_UU_Conv_W32_W64(I32[RtsFlags+8]);
           _scWei::I64 = %MO_UU_Conv_W32_W64(I32[RtsFlags+12]);
           _scWem::I64 = %MO_UU_Conv_W32_W64(I32[RtsFlags+16]);
           _scWeq::I64 = %MO_UU_Conv_W32_W64(I32[RtsFlags+20]);
           _scWeu::I64 = %MO_UU_Conv_W32_W64(I32[RtsFlags+24]);
           _scWey::I64 = %MO_UU_Conv_W32_W64(I32[RtsFlags+28]);
           _scWeC::I64 = %MO_UU_Conv_W32_W64(I32[RtsFlags+32]);
           _scWeG::I64 = %MO_UU_Conv_W32_W64(I32[RtsFlags+36]);
           _scWeK::I64 = %MO_UU_Conv_W32_W64(I32[RtsFlags+40]);
           _scWeO::I64 = %MO_UU_Conv_W32_W64(I32[RtsFlags+44]);
           _scWeS::I64 = %MO_UU_Conv_W32_W64(I32[RtsFlags+48]);
           _scWeW::I64 = %MO_UU_Conv_W8_W64(I8[RtsFlags+52]);
           _scWf0::F64 = F64[RtsFlags+56];
           _scWf4::F64 = F64[RtsFlags+64];
           _scWf8::I64 = %MO_UU_Conv_W32_W64(I32[RtsFlags+72]);
           _scWfc::I64 = %MO_UU_Conv_W8_W64(I8[RtsFlags+76]);
           _scWfg::I64 = %MO_UU_Conv_W8_W64(I8[RtsFlags+77]);
           _scWfk::F64 = F64[RtsFlags+80];
           _scWfo::I64 = %MO_UU_Conv_W8_W64(I8[RtsFlags+88]);
           _scWfs::I64 = %MO_UU_Conv_W8_W64(I8[RtsFlags+89]);
           _scWfw::I64 = I64[RtsFlags+96];
           _scWfA::I64 = %MO_UU_Conv_W8_W64(I8[RtsFlags+104]);
           _scWfE::I64 = I64[RtsFlags+120];
           _scWfI::I64 = I64[RtsFlags+128];
           _scWfM::I64 = %MO_UU_Conv_W8_W64(I8[RtsFlags+144]);
           _scWfQ::I64 = I64[RtsFlags+152];
           I64[Hp - 696] = GHC.Types.W#_con_info;
           I64[Hp - 688] = _scWfQ::I64;
           I64[Hp - 680] = sat_scWgn_info;
           I64[Hp - 664] = _scWfM::I64;
           I64[Hp - 656] = GHC.Types.W#_con_info;
           I64[Hp - 648] = _scWfI::I64;
           I64[Hp - 640] = GHC.Types.W#_con_info;
           I64[Hp - 632] = _scWfE::I64;
           I64[Hp - 624] = sat_scWgj_info;
           I64[Hp - 608] = _scWfA::I64;
           I64[Hp - 600] = GHC.Word.W64#_con_info;
           I64[Hp - 592] = _scWfw::I64;
           I64[Hp - 584] = sat_scWgg_info;
           I64[Hp - 568] = _scWfs::I64;
           I64[Hp - 560] = sat_scWge_info;
           I64[Hp - 544] = _scWfo::I64;
           I64[Hp - 536] = GHC.Types.D#_con_info;
           F64[Hp - 528] = _scWfk::F64;
           I64[Hp - 520] = sat_scWgb_info;
           I64[Hp - 504] = _scWfg::I64;
           I64[Hp - 496] = sat_scWg9_info;
           I64[Hp - 480] = _scWfc::I64;
           I64[Hp - 472] = GHC.Word.W32#_con_info;
           I64[Hp - 464] = _scWf8::I64;
           I64[Hp - 456] = GHC.Types.D#_con_info;
           F64[Hp - 448] = _scWf4::F64;
           I64[Hp - 440] = GHC.Types.D#_con_info;
           F64[Hp - 432] = _scWf0::F64;
           I64[Hp - 424] = sat_scWg4_info;
           I64[Hp - 408] = _scWeW::I64;
           I64[Hp - 400] = GHC.Word.W32#_con_info;
           I64[Hp - 392] = _scWeS::I64;
           I64[Hp - 384] = GHC.Word.W32#_con_info;
           I64[Hp - 376] = _scWeO::I64;
           I64[Hp - 368] = GHC.Word.W32#_con_info;
           I64[Hp - 360] = _scWeK::I64;
           I64[Hp - 352] = GHC.Word.W32#_con_info;
           I64[Hp - 344] = _scWeG::I64;
           I64[Hp - 336] = GHC.Word.W32#_con_info;
           I64[Hp - 328] = _scWeC::I64;
           I64[Hp - 320] = GHC.Word.W32#_con_info;
           I64[Hp - 312] = _scWey::I64;
           I64[Hp - 304] = GHC.Word.W32#_con_info;
           I64[Hp - 296] = _scWeu::I64;
           I64[Hp - 288] = GHC.Word.W32#_con_info;
           I64[Hp - 280] = _scWeq::I64;
           I64[Hp - 272] = GHC.Word.W32#_con_info;
           I64[Hp - 264] = _scWem::I64;
           I64[Hp - 256] = GHC.Word.W32#_con_info;
           I64[Hp - 248] = _scWei::I64;
           I64[Hp - 240] = sat_scWfS_info;
           I64[Hp - 224] = _scWee::I64;
           I64[Hp - 216] = GHC.RTS.Flags.GCFlags_con_info;
           P64[Hp - 208] = R2;
           P64[Hp - 200] = Hp - 240;
           P64[Hp - 192] = Hp - 255;
           P64[Hp - 184] = Hp - 271;
           P64[Hp - 176] = Hp - 287;
           P64[Hp - 168] = Hp - 303;
           P64[Hp - 160] = Hp - 319;
           P64[Hp - 152] = Hp - 335;
           P64[Hp - 144] = Hp - 351;
           P64[Hp - 136] = Hp - 367;
           P64[Hp - 128] = Hp - 383;
           P64[Hp - 120] = Hp - 399;
           P64[Hp - 112] = Hp - 424;
           P64[Hp - 104] = Hp - 439;
           P64[Hp - 96] = Hp - 455;
           P64[Hp - 88] = Hp - 471;
           P64[Hp - 80] = Hp - 496;
           P64[Hp - 72] = Hp - 520;
           P64[Hp - 64] = Hp - 535;
           P64[Hp - 56] = Hp - 560;
           P64[Hp - 48] = Hp - 584;
           P64[Hp - 40] = Hp - 599;
           P64[Hp - 32] = Hp - 624;
           P64[Hp - 24] = Hp - 639;
           P64[Hp - 16] = Hp - 655;
           P64[Hp - 8] = Hp - 680;
           P64[Hp] = Hp - 695;
           R1 = Hp - 215;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.getGCFlags5_info" {
     GHC.RTS.Flags.getGCFlags5_info:
         const GHC.RTS.Flags.getGCFlags5_entry;
         const 0;
         const 12884901902;
         const 8589934597;
         const ScWiZ_srt+1576;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.488830164 UTC

[section ""cstring" . GHC.RTS.Flags.getGCFlags4_bytes" {
     GHC.RTS.Flags.getGCFlags4_bytes:
         I8[] [60,102,105,108,101,112,97,116,104,62]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.491190283 UTC

[section ""data" . GHC.RTS.Flags.getGCFlags3_closure" {
     GHC.RTS.Flags.getGCFlags3_closure:
         const GHC.RTS.Flags.getGCFlags3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.getGCFlags3_entry() //  [R1]
         { []
         }
     {offset
       cdcdn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdcdo; else goto cdcdp;
       cdcdo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdcdp: // global
           (_cdcdk::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdcdk::I64 == 0) goto cdcdm; else goto cdcdl;
       cdcdm: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdcdl: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdcdk::I64;
           R2 = GHC.RTS.Flags.getGCFlags4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.getGCFlags3_info" {
     GHC.RTS.Flags.getGCFlags3_info:
         const GHC.RTS.Flags.getGCFlags3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.494627196 UTC

[section ""data" . GHC.RTS.Flags.getGCFlags2_closure" {
     GHC.RTS.Flags.getGCFlags2_closure:
         const GHC.Base.Just_con_info;
         const GHC.RTS.Flags.getGCFlags3_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.496749908 UTC

[section ""data" . GHC.RTS.Flags.getGCFlags1_closure" {
     GHC.RTS.Flags.getGCFlags1_closure:
         const GHC.RTS.Flags.getGCFlags1_info;
         const 0;
 },
 GHC.RTS.Flags.getGCFlags1_entry() //  []
         { []
         }
     {offset
       cdcdH: // global
           if (I64[RtsFlags] == 0) goto cdcdG; else goto cdcdF;
       cdcdG: // global
           R2 = GHC.Base.Nothing_closure+1;
           call GHC.RTS.Flags.getGCFlags5_entry(R2) args: 8, res: 0, upd: 8;
       cdcdF: // global
           R2 = GHC.RTS.Flags.getGCFlags2_closure+2;
           call GHC.RTS.Flags.getGCFlags5_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.getGCFlags1_info" {
     GHC.RTS.Flags.getGCFlags1_info:
         const GHC.RTS.Flags.getGCFlags1_entry;
         const 0;
         const 12884901902;
         const 4294967299;
         const ScWiZ_srt+1584;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.500033496 UTC

[section ""data" . GHC.RTS.Flags.getGCFlags_closure" {
     GHC.RTS.Flags.getGCFlags_closure:
         const GHC.RTS.Flags.getGCFlags_info;
         const 0;
 },
 GHC.RTS.Flags.getGCFlags_entry() //  []
         { []
         }
     {offset
       cdcdS: // global
           call GHC.RTS.Flags.getGCFlags1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.getGCFlags_info" {
     GHC.RTS.Flags.getGCFlags_info:
         const GHC.RTS.Flags.getGCFlags_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const ScWiZ_srt+1600;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.504492866 UTC

[section ""data" . GHC.RTS.Flags.getTickyFlags1_closure" {
     GHC.RTS.Flags.getTickyFlags1_closure:
         const GHC.RTS.Flags.getTickyFlags1_info;
         const 0;
 },
 sat_scWgG_entry() //  [R1]
         { []
         }
     {offset
       cdcek: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdcel; else goto cdcem;
       cdcel: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdcem: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto cdcej; else goto cdcei;
       cdcej: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdcei: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scWgG_info" {
     sat_scWgG_info:
         const sat_scWgG_entry;
         const 4294967296;
         const 17;
 },
 sat_scWgJ_entry() //  [R1]
         { []
         }
     {offset
       cdcew: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdcex; else goto cdcey;
       cdcex: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdcey: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto cdcev; else goto cdceu;
       cdcev: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdceu: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scWgJ_info" {
     sat_scWgJ_info:
         const sat_scWgJ_entry;
         const 4294967296;
         const 17;
 },
 GHC.RTS.Flags.getTickyFlags1_entry() //  []
         { []
         }
     {offset
       cdcez: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdceD; else goto cdceC;
       cdceD: // global
           HpAlloc = 48;
           R1 = GHC.RTS.Flags.getTickyFlags1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdceC: // global
           _scWgz::I64 = %MO_UU_Conv_W8_W64(I8[RtsFlags+352]);
           if (I64[RtsFlags+360] == 0) goto cdceI; else goto cdceG;
       cdceI: // global
           I64[Hp - 40] = sat_scWgJ_info;
           I64[Hp - 24] = _scWgz::I64;
           I64[Hp - 16] = GHC.RTS.Flags.TickyFlags_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = GHC.Base.Nothing_closure+1;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdceG: // global
           I64[Hp - 40] = sat_scWgG_info;
           I64[Hp - 24] = _scWgz::I64;
           I64[Hp - 16] = GHC.RTS.Flags.TickyFlags_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = GHC.RTS.Flags.getGCFlags2_closure+2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.getTickyFlags1_info" {
     GHC.RTS.Flags.getTickyFlags1_info:
         const GHC.RTS.Flags.getTickyFlags1_entry;
         const 0;
         const 21474836494;
         const 4294967299;
         const ScWiZ_srt+1592;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.512065413 UTC

[section ""data" . GHC.RTS.Flags.getTickyFlags_closure" {
     GHC.RTS.Flags.getTickyFlags_closure:
         const GHC.RTS.Flags.getTickyFlags_info;
         const 0;
 },
 GHC.RTS.Flags.getTickyFlags_entry() //  []
         { []
         }
     {offset
       cdcf7: // global
           call GHC.RTS.Flags.getTickyFlags1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.getTickyFlags_info" {
     GHC.RTS.Flags.getTickyFlags_info:
         const GHC.RTS.Flags.getTickyFlags_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const ScWiZ_srt+1608;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.520491618 UTC

[section ""data" . GHC.RTS.Flags.getRTSFlags1_closure" {
     GHC.RTS.Flags.getRTSFlags1_closure:
         const GHC.RTS.Flags.getRTSFlags1_info;
         const 0;
 },
 sat_scWhF_entry() //  [R1]
         { []
         }
     {offset
       cdcg9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdcga; else goto cdcgF;
       cdcga: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdcgF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scWhE::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_scWhE::I64, 3)) goto udcgG; else goto udcgJ;
       udcgG: // global
           if (%MO_S_Lt_W64(_scWhE::I64, 1)) goto udcgH; else goto udcgI;
       udcgH: // global
           if (%MO_S_Lt_W64(_scWhE::I64, 0)) goto cdcg3; else goto cdcg4;
       cdcg4: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udcgI: // global
           if (%MO_S_Lt_W64(_scWhE::I64, 2)) goto cdcg5; else goto cdcg6;
       cdcg5: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdcg6: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udcgJ: // global
           if (%MO_S_Ge_W64(_scWhE::I64, 5)) goto cdcg3; else goto udcgK;
       cdcg3: // global
           R2 = _scWhE::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udcgK: // global
           if (%MO_S_Lt_W64(_scWhE::I64, 4)) goto cdcg7; else goto cdcg8;
       cdcg7: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdcg8: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scWhF_info" {
     sat_scWhF_info:
         const sat_scWhF_entry;
         const 4294967296;
         const 4294967313;
         const ScWiZ_srt+1528;
 },
 sat_scWhM_entry() //  [R1]
         { []
         }
     {offset
       cdcgW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdcgX; else goto cdcgY;
       cdcgX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdcgY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto cdcgV; else goto cdcgU;
       cdcgV: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdcgU: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scWhM_info" {
     sat_scWhM_info:
         const sat_scWhM_entry;
         const 4294967296;
         const 17;
 },
 sat_scWhP_entry() //  [R1]
         { []
         }
     {offset
       cdch8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdch9; else goto cdcha;
       cdch9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdcha: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto cdch7; else goto cdch6;
       cdch7: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdch6: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scWhP_info" {
     sat_scWhP_info:
         const sat_scWhP_entry;
         const 4294967296;
         const 17;
 },
 GHC.RTS.Flags.getRTSFlags1_entry() //  []
         { []
         }
     {offset
       cdchg: // global
           if ((Sp + -96) < SpLim) (likely: False) goto cdchh; else goto cdchi;
       cdchh: // global
           R1 = GHC.RTS.Flags.getRTSFlags1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdchi: // global
           if (I64[RtsFlags] == 0) goto cdchf; else goto cdche;
       cdchf: // global
           I64[Sp - 8] = block_cdchH_info;
           R2 = GHC.Base.Nothing_closure+1;
           Sp = Sp - 8;
           call GHC.RTS.Flags.getGCFlags5_entry(R2) args: 8, res: 8, upd: 8;
       cdche: // global
           I64[Sp - 8] = block_cdchD_info;
           R2 = GHC.RTS.Flags.getGCFlags2_closure+2;
           Sp = Sp - 8;
           call GHC.RTS.Flags.getGCFlags5_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.getRTSFlags1_info" {
     GHC.RTS.Flags.getRTSFlags1_info:
         const GHC.RTS.Flags.getRTSFlags1_entry;
         const 0;
         const 21178483736590;
         const 4294967299;
         const ScWiZ_srt+1520;
 },
 _cdchH() //  [R1]
         { []
         }
     {offset
       cdchH: // global
           P64[Sp] = R1;
           call _scWgP() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cdchH_info" {
     block_cdchH_info:
         const _cdchH;
         const 0;
         const 2486786064414;
         const ScWiZ_srt+1520;
 },
 _cdchD() //  [R1]
         { []
         }
     {offset
       cdchD: // global
           P64[Sp] = R1;
           call _scWgP() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cdchD_info" {
     block_cdchD_info:
         const _cdchD;
         const 0;
         const 2486786064414;
         const ScWiZ_srt+1520;
 },
 _scWgP() //  []
         { []
         }
     {offset
       scWgP: // global
           _scWgV::I64 = I64[RtsFlags+160];
           _scWgZ::I64 = I64[RtsFlags+168];
           I64[Sp - 24] = block_cdcft_info;
           I64[Sp - 16] = _scWgV::I64;
           I64[Sp - 8] = _scWgZ::I64;
           Sp = Sp - 24;
           call GHC.RTS.Flags.getMiscFlags1_entry() args: 8, res: 8, upd: 8;
     }
 },
 _cdcft() //  [R1]
         { []
         }
     {offset
       cdcft: // global
           I64[Sp - 8] = block_cdcfv_info;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.RTS.Flags.getDebugFlags1_entry() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdcft_info" {
     block_cdcft_info:
         const _cdcft;
         const 195;
         const 2486786064414;
         const ScWiZ_srt+1520;
 },
 _cdcfv() //  [R1]
         { []
         }
     {offset
       cdcfv: // global
           _scWh8::I64 = %MO_UU_Conv_W32_W64(I32[RtsFlags]);
           _scWhc::I64 = I64[RtsFlags+4];
           _scWhg::I64 = I64[RtsFlags+8];
           I64[Sp - 32] = block_cdcfD_info;
           I64[Sp - 24] = _scWh8::I64;
           I64[Sp - 16] = _scWhc::I64;
           I64[Sp - 8] = _scWhg::I64;
           P64[Sp] = R1;
           Sp = Sp - 32;
           call GHC.RTS.Flags.getProfFlags1_entry() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdcfv_info" {
     block_cdcfv_info:
         const _cdcfv;
         const 388;
         const 2486786064414;
         const ScWiZ_srt+1520;
 },
 _cdcfD() //  [R1]
         { []
         }
     {offset
       cdcfD: // global
           I64[Sp - 8] = block_cdcfF_info;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.RTS.Flags.getRTSFlags2_entry() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdcfD_info" {
     block_cdcfD_info:
         const _cdcfD;
         const 6600;
         const 2211908157470;
         const ScWiZ_srt+1520;
 },
 _cdcfF() //  [R1]
         { []
         }
     {offset
       cdcfF: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdchp; else goto cdcho;
       cdchp: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdcho: // global
           _scWhq::I64 = %MO_UU_Conv_W8_W64(I8[RtsFlags+352]);
           if (I64[RtsFlags+360] == 0) goto cdchB; else goto cdchA;
       cdchB: // global
           I64[Hp - 40] = sat_scWhP_info;
           I64[Hp - 24] = _scWhq::I64;
           I64[Hp - 16] = GHC.RTS.Flags.TickyFlags_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = GHC.Base.Nothing_closure+1;
           _scWhm::P64 = R1;
           _scWhx::P64 = Hp - 15;
           goto scWhv;
       cdchA: // global
           I64[Hp - 40] = sat_scWhM_info;
           I64[Hp - 24] = _scWhq::I64;
           I64[Hp - 16] = GHC.RTS.Flags.TickyFlags_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = GHC.RTS.Flags.getGCFlags2_closure+2;
           _scWhm::P64 = R1;
           _scWhx::P64 = Hp - 15;
           goto scWhv;
       scWhv: // global
           I64[Sp - 16] = block_cdcfS_info;
           P64[Sp - 8] = _scWhx::P64;
           P64[Sp] = _scWhm::P64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.getParFlags1_entry() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdcfF_info" {
     block_cdcfF_info:
         const _cdcfF;
         const 13193;
         const 1103806595102;
         const ScWiZ_srt+1528;
 },
 _cdcfS() //  [R1]
         { []
         }
     {offset
       cdcfS: // global
           Hp = Hp + 224;
           if (Hp > HpLim) (likely: False) goto cdchy; else goto cdchx;
       cdchy: // global
           HpAlloc = 224;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdchx: // global
           I64[Hp - 216] = GHC.Types.I#_con_info;
           I64[Hp - 208] = I64[Sp + 48];
           I64[Hp - 200] = GHC.Types.I#_con_info;
           I64[Hp - 192] = I64[Sp + 40];
           I64[Hp - 184] = sat_scWhF_info;
           I64[Hp - 168] = I64[Sp + 32];
           I64[Hp - 160] = GHC.RTS.Flags.CCFlags_con_info;
           P64[Hp - 152] = Hp - 184;
           P64[Hp - 144] = Hp - 199;
           P64[Hp - 136] = Hp - 215;
           I64[Hp - 128] = GHC.Types.I#_con_info;
           I64[Hp - 120] = I64[Sp + 80];
           I64[Hp - 112] = GHC.Word.W64#_con_info;
           I64[Hp - 104] = I64[Sp + 72];
           I64[Hp - 96] = GHC.RTS.Flags.ConcFlags_con_info;
           P64[Hp - 88] = Hp - 111;
           P64[Hp - 80] = Hp - 127;
           I64[Hp - 72] = GHC.RTS.Flags.RTSFlags_con_info;
           P64[Hp - 64] = P64[Sp + 88];
           P64[Hp - 56] = Hp - 95;
           P64[Hp - 48] = P64[Sp + 64];
           P64[Hp - 40] = P64[Sp + 56];
           P64[Hp - 32] = Hp - 159;
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 71;
           Sp = Sp + 96;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdcfS_info" {
     block_cdcfS_info:
         const _cdcfS;
         const 52747;
         const 4294967326;
         const ScWiZ_srt+1528;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.542554589 UTC

[section ""data" . GHC.RTS.Flags.getRTSFlags_closure" {
     GHC.RTS.Flags.getRTSFlags_closure:
         const GHC.RTS.Flags.getRTSFlags_info;
         const 0;
 },
 GHC.RTS.Flags.getRTSFlags_entry() //  []
         { []
         }
     {offset
       cdcj2: // global
           call GHC.RTS.Flags.getRTSFlags1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.getRTSFlags_info" {
     GHC.RTS.Flags.getRTSFlags_info:
         const GHC.RTS.Flags.getRTSFlags_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const ScWiZ_srt+1616;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.546789615 UTC

[section ""data" . GHC.RTS.Flags.RTSFlags_closure" {
     GHC.RTS.Flags.RTSFlags_closure:
         const GHC.RTS.Flags.RTSFlags_info;
 },
 GHC.RTS.Flags.RTSFlags_slow() //  [R1]
         { []
         }
     {offset
       cdcja: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.RTS.Flags.RTSFlags_entry(R6,
                                             R5,
                                             R4,
                                             R3,
                                             R2,
                                             R1) args: 40, res: 0, upd: 8;
     }
 },
 GHC.RTS.Flags.RTSFlags_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cdcjf: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cdcjj; else goto cdcji;
       cdcjj: // global
           HpAlloc = 80;
           R1 = GHC.RTS.Flags.RTSFlags_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 80, res: 0, upd: 8;
       cdcji: // global
           I64[Hp - 72] = GHC.RTS.Flags.RTSFlags_con_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R3;
           P64[Hp - 48] = R4;
           P64[Hp - 40] = R5;
           P64[Hp - 32] = R6;
           P64[Hp - 24] = P64[Sp];
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 24];
           R1 = Hp - 71;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.RTSFlags_info" {
     GHC.RTS.Flags.RTSFlags_info:
         const GHC.RTS.Flags.RTSFlags_entry;
         const 0;
         const 14;
         const 38654705664;
         const 0;
         const 9;
         const GHC.RTS.Flags.RTSFlags_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.552173233 UTC

[section ""data" . GHC.RTS.Flags.ParFlags_closure" {
     GHC.RTS.Flags.ParFlags_closure:
         const GHC.RTS.Flags.ParFlags_info;
 },
 GHC.RTS.Flags.ParFlags_slow() //  [R1]
         { []
         }
     {offset
       cdcjw: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.RTS.Flags.ParFlags_entry(R6,
                                             R5,
                                             R4,
                                             R3,
                                             R2,
                                             R1) args: 48, res: 0, upd: 8;
     }
 },
 GHC.RTS.Flags.ParFlags_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cdcjB: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdcjF; else goto cdcjE;
       cdcjF: // global
           HpAlloc = 88;
           R1 = GHC.RTS.Flags.ParFlags_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 88, res: 0, upd: 8;
       cdcjE: // global
           I64[Hp - 80] = GHC.RTS.Flags.ParFlags_con_info;
           P64[Hp - 72] = R2;
           P64[Hp - 64] = R3;
           P64[Hp - 56] = R4;
           P64[Hp - 48] = R5;
           P64[Hp - 40] = R6;
           P64[Hp - 32] = P64[Sp];
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = P64[Sp + 32];
           R1 = Hp - 79;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.ParFlags_info" {
     GHC.RTS.Flags.ParFlags_info:
         const GHC.RTS.Flags.ParFlags_entry;
         const 0;
         const 14;
         const 42949672960;
         const 0;
         const 10;
         const GHC.RTS.Flags.ParFlags_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.557031352 UTC

[section ""data" . GHC.RTS.Flags.TickyFlags_closure" {
     GHC.RTS.Flags.TickyFlags_closure:
         const GHC.RTS.Flags.TickyFlags_info;
 },
 GHC.RTS.Flags.TickyFlags_entry() //  [R2, R3]
         { []
         }
     {offset
       cdcjX: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdck1; else goto cdck0;
       cdck1: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = GHC.RTS.Flags.TickyFlags_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdck0: // global
           I64[Hp - 16] = GHC.RTS.Flags.TickyFlags_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.TickyFlags_info" {
     GHC.RTS.Flags.TickyFlags_info:
         const GHC.RTS.Flags.TickyFlags_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.5612301 UTC

[section ""data" . GHC.RTS.Flags.TraceFlags_closure" {
     GHC.RTS.Flags.TraceFlags_closure:
         const GHC.RTS.Flags.TraceFlags_info;
 },
 GHC.RTS.Flags.TraceFlags_slow() //  [R1]
         { []
         }
     {offset
       cdck8: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.RTS.Flags.TraceFlags_entry(R6,
                                               R5,
                                               R4,
                                               R3,
                                               R2,
                                               R1) args: 24, res: 0, upd: 8;
     }
 },
 GHC.RTS.Flags.TraceFlags_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cdckd: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdckh; else goto cdckg;
       cdckh: // global
           HpAlloc = 64;
           R1 = GHC.RTS.Flags.TraceFlags_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       cdckg: // global
           I64[Hp - 56] = GHC.RTS.Flags.TraceFlags_con_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R5;
           P64[Hp - 16] = R6;
           P64[Hp - 8] = P64[Sp];
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 55;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.TraceFlags_info" {
     GHC.RTS.Flags.TraceFlags_info:
         const GHC.RTS.Flags.TraceFlags_entry;
         const 0;
         const 14;
         const 30064771072;
         const 0;
         const 7;
         const GHC.RTS.Flags.TraceFlags_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.566967266 UTC

[section ""data" . GHC.RTS.Flags.TraceNone_closure" {
     GHC.RTS.Flags.TraceNone_closure:
         const GHC.RTS.Flags.TraceNone_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.568582476 UTC

[section ""data" . GHC.RTS.Flags.TraceEventLog_closure" {
     GHC.RTS.Flags.TraceEventLog_closure:
         const GHC.RTS.Flags.TraceEventLog_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.570199807 UTC

[section ""data" . GHC.RTS.Flags.TraceStderr_closure" {
     GHC.RTS.Flags.TraceStderr_closure:
         const GHC.RTS.Flags.TraceStderr_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.573038994 UTC

[section ""data" . GHC.RTS.Flags.ProfFlags_closure" {
     GHC.RTS.Flags.ProfFlags_closure:
         const GHC.RTS.Flags.ProfFlags_info;
 },
 GHC.RTS.Flags.ProfFlags_slow() //  [R1]
         { []
         }
     {offset
       cdckv: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.RTS.Flags.ProfFlags_entry(R6,
                                              R5,
                                              R4,
                                              R3,
                                              R2,
                                              R1) args: 80, res: 0, upd: 8;
     }
 },
 GHC.RTS.Flags.ProfFlags_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cdckA: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto cdckE; else goto cdckD;
       cdckE: // global
           HpAlloc = 120;
           R1 = GHC.RTS.Flags.ProfFlags_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 120, res: 0, upd: 8;
       cdckD: // global
           I64[Hp - 112] = GHC.RTS.Flags.ProfFlags_con_info;
           P64[Hp - 104] = R2;
           P64[Hp - 96] = R3;
           P64[Hp - 88] = R4;
           P64[Hp - 80] = R5;
           P64[Hp - 72] = R6;
           P64[Hp - 64] = P64[Sp];
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = P64[Sp + 16];
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = P64[Sp + 40];
           P64[Hp - 16] = P64[Sp + 48];
           P64[Hp - 8] = P64[Sp + 56];
           P64[Hp] = P64[Sp + 64];
           R1 = Hp - 111;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.ProfFlags_info" {
     GHC.RTS.Flags.ProfFlags_info:
         const GHC.RTS.Flags.ProfFlags_entry;
         const 0;
         const 14;
         const 60129542144;
         const 0;
         const 14;
         const GHC.RTS.Flags.ProfFlags_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.577949615 UTC

[section ""data" . GHC.RTS.Flags.NoHeapProfiling_closure" {
     GHC.RTS.Flags.NoHeapProfiling_closure:
         const GHC.RTS.Flags.NoHeapProfiling_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.579645059 UTC

[section ""data" . GHC.RTS.Flags.HeapByCCS_closure" {
     GHC.RTS.Flags.HeapByCCS_closure:
         const GHC.RTS.Flags.HeapByCCS_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.581289933 UTC

[section ""data" . GHC.RTS.Flags.HeapByMod_closure" {
     GHC.RTS.Flags.HeapByMod_closure:
         const GHC.RTS.Flags.HeapByMod_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.582903512 UTC

[section ""data" . GHC.RTS.Flags.HeapByDescr_closure" {
     GHC.RTS.Flags.HeapByDescr_closure:
         const GHC.RTS.Flags.HeapByDescr_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.584532109 UTC

[section ""data" . GHC.RTS.Flags.HeapByType_closure" {
     GHC.RTS.Flags.HeapByType_closure:
         const GHC.RTS.Flags.HeapByType_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.586267232 UTC

[section ""data" . GHC.RTS.Flags.HeapByRetainer_closure" {
     GHC.RTS.Flags.HeapByRetainer_closure:
         const GHC.RTS.Flags.HeapByRetainer_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.58789992 UTC

[section ""data" . GHC.RTS.Flags.HeapByLDV_closure" {
     GHC.RTS.Flags.HeapByLDV_closure:
         const GHC.RTS.Flags.HeapByLDV_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.58991862 UTC

[section ""data" . GHC.RTS.Flags.HeapByClosureType_closure" {
     GHC.RTS.Flags.HeapByClosureType_closure:
         const GHC.RTS.Flags.HeapByClosureType_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.592904979 UTC

[section ""data" . GHC.RTS.Flags.CCFlags_closure" {
     GHC.RTS.Flags.CCFlags_closure:
         const GHC.RTS.Flags.CCFlags_info;
 },
 GHC.RTS.Flags.CCFlags_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdcl8: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdclc; else goto cdclb;
       cdclc: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.RTS.Flags.CCFlags_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdclb: // global
           I64[Hp - 24] = GHC.RTS.Flags.CCFlags_con_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.CCFlags_info" {
     GHC.RTS.Flags.CCFlags_info:
         const GHC.RTS.Flags.CCFlags_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.596294731 UTC

[section ""data" . GHC.RTS.Flags.CostCentresNone_closure" {
     GHC.RTS.Flags.CostCentresNone_closure:
         const GHC.RTS.Flags.CostCentresNone_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.598008739 UTC

[section ""data" . GHC.RTS.Flags.CostCentresSummary_closure" {
     GHC.RTS.Flags.CostCentresSummary_closure:
         const GHC.RTS.Flags.CostCentresSummary_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.599590195 UTC

[section ""data" . GHC.RTS.Flags.CostCentresVerbose_closure" {
     GHC.RTS.Flags.CostCentresVerbose_closure:
         const GHC.RTS.Flags.CostCentresVerbose_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.601197709 UTC

[section ""data" . GHC.RTS.Flags.CostCentresAll_closure" {
     GHC.RTS.Flags.CostCentresAll_closure:
         const GHC.RTS.Flags.CostCentresAll_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.603341654 UTC

[section ""data" . GHC.RTS.Flags.CostCentresJSON_closure" {
     GHC.RTS.Flags.CostCentresJSON_closure:
         const GHC.RTS.Flags.CostCentresJSON_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.606400805 UTC

[section ""data" . GHC.RTS.Flags.DebugFlags_closure" {
     GHC.RTS.Flags.DebugFlags_closure:
         const GHC.RTS.Flags.DebugFlags_info;
 },
 GHC.RTS.Flags.DebugFlags_slow() //  [R1]
         { []
         }
     {offset
       cdclo: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.RTS.Flags.DebugFlags_entry(R6,
                                               R5,
                                               R4,
                                               R3,
                                               R2,
                                               R1) args: 88, res: 0, upd: 8;
     }
 },
 GHC.RTS.Flags.DebugFlags_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cdclt: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto cdclx; else goto cdclw;
       cdclx: // global
           HpAlloc = 128;
           R1 = GHC.RTS.Flags.DebugFlags_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 128, res: 0, upd: 8;
       cdclw: // global
           I64[Hp - 120] = GHC.RTS.Flags.DebugFlags_con_info;
           P64[Hp - 112] = R2;
           P64[Hp - 104] = R3;
           P64[Hp - 96] = R4;
           P64[Hp - 88] = R5;
           P64[Hp - 80] = R6;
           P64[Hp - 72] = P64[Sp];
           P64[Hp - 64] = P64[Sp + 8];
           P64[Hp - 56] = P64[Sp + 16];
           P64[Hp - 48] = P64[Sp + 24];
           P64[Hp - 40] = P64[Sp + 32];
           P64[Hp - 32] = P64[Sp + 40];
           P64[Hp - 24] = P64[Sp + 48];
           P64[Hp - 16] = P64[Sp + 56];
           P64[Hp - 8] = P64[Sp + 64];
           P64[Hp] = P64[Sp + 72];
           R1 = Hp - 119;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.DebugFlags_info" {
     GHC.RTS.Flags.DebugFlags_info:
         const GHC.RTS.Flags.DebugFlags_entry;
         const 0;
         const 14;
         const 64424509440;
         const 0;
         const 15;
         const GHC.RTS.Flags.DebugFlags_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.612191694 UTC

[section ""data" . GHC.RTS.Flags.MiscFlags_closure" {
     GHC.RTS.Flags.MiscFlags_closure:
         const GHC.RTS.Flags.MiscFlags_info;
 },
 GHC.RTS.Flags.MiscFlags_slow() //  [R1]
         { []
         }
     {offset
       cdclQ: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.RTS.Flags.MiscFlags_entry(R6,
                                              R5,
                                              R4,
                                              R3,
                                              R2,
                                              R1) args: 24, res: 0, upd: 8;
     }
 },
 GHC.RTS.Flags.MiscFlags_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cdclV: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdclZ; else goto cdclY;
       cdclZ: // global
           HpAlloc = 64;
           R1 = GHC.RTS.Flags.MiscFlags_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       cdclY: // global
           I64[Hp - 56] = GHC.RTS.Flags.MiscFlags_con_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R5;
           P64[Hp - 16] = R6;
           P64[Hp - 8] = P64[Sp];
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 55;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.MiscFlags_info" {
     GHC.RTS.Flags.MiscFlags_info:
         const GHC.RTS.Flags.MiscFlags_entry;
         const 0;
         const 14;
         const 30064771072;
         const 0;
         const 7;
         const GHC.RTS.Flags.MiscFlags_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.61705526 UTC

[section ""data" . GHC.RTS.Flags.ConcFlags_closure" {
     GHC.RTS.Flags.ConcFlags_closure:
         const GHC.RTS.Flags.ConcFlags_info;
 },
 GHC.RTS.Flags.ConcFlags_entry() //  [R2, R3]
         { []
         }
     {offset
       cdcme: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdcmi; else goto cdcmh;
       cdcmi: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = GHC.RTS.Flags.ConcFlags_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdcmh: // global
           I64[Hp - 16] = GHC.RTS.Flags.ConcFlags_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.ConcFlags_info" {
     GHC.RTS.Flags.ConcFlags_info:
         const GHC.RTS.Flags.ConcFlags_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.622338351 UTC

[section ""data" . GHC.RTS.Flags.GCFlags_closure" {
     GHC.RTS.Flags.GCFlags_closure:
         const GHC.RTS.Flags.GCFlags_info;
 },
 GHC.RTS.Flags.GCFlags_slow() //  [R1]
         { []
         }
     {offset
       cdcmp: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.RTS.Flags.GCFlags_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2,
                                            R1) args: 184, res: 0, upd: 8;
     }
 },
 GHC.RTS.Flags.GCFlags_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cdcmu: // global
           Hp = Hp + 224;
           if (Hp > HpLim) (likely: False) goto cdcmy; else goto cdcmx;
       cdcmy: // global
           HpAlloc = 224;
           R1 = GHC.RTS.Flags.GCFlags_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 224, res: 0, upd: 8;
       cdcmx: // global
           I64[Hp - 216] = GHC.RTS.Flags.GCFlags_con_info;
           P64[Hp - 208] = R2;
           P64[Hp - 200] = R3;
           P64[Hp - 192] = R4;
           P64[Hp - 184] = R5;
           P64[Hp - 176] = R6;
           P64[Hp - 168] = P64[Sp];
           P64[Hp - 160] = P64[Sp + 8];
           P64[Hp - 152] = P64[Sp + 16];
           P64[Hp - 144] = P64[Sp + 24];
           P64[Hp - 136] = P64[Sp + 32];
           P64[Hp - 128] = P64[Sp + 40];
           P64[Hp - 120] = P64[Sp + 48];
           P64[Hp - 112] = P64[Sp + 56];
           P64[Hp - 104] = P64[Sp + 64];
           P64[Hp - 96] = P64[Sp + 72];
           P64[Hp - 88] = P64[Sp + 80];
           P64[Hp - 80] = P64[Sp + 88];
           P64[Hp - 72] = P64[Sp + 96];
           P64[Hp - 64] = P64[Sp + 104];
           P64[Hp - 56] = P64[Sp + 112];
           P64[Hp - 48] = P64[Sp + 120];
           P64[Hp - 40] = P64[Sp + 128];
           P64[Hp - 32] = P64[Sp + 136];
           P64[Hp - 24] = P64[Sp + 144];
           P64[Hp - 16] = P64[Sp + 152];
           P64[Hp - 8] = P64[Sp + 160];
           P64[Hp] = P64[Sp + 168];
           R1 = Hp - 215;
           Sp = Sp + 176;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.GCFlags_info" {
     GHC.RTS.Flags.GCFlags_info:
         const GHC.RTS.Flags.GCFlags_entry;
         const 0;
         const 14;
         const 115964116992;
         const 0;
         const 27;
         const GHC.RTS.Flags.GCFlags_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.627928418 UTC

[section ""data" . GHC.RTS.Flags.NoGCStats_closure" {
     GHC.RTS.Flags.NoGCStats_closure:
         const GHC.RTS.Flags.NoGCStats_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.629638593 UTC

[section ""data" . GHC.RTS.Flags.CollectGCStats_closure" {
     GHC.RTS.Flags.CollectGCStats_closure:
         const GHC.RTS.Flags.CollectGCStats_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.631214867 UTC

[section ""data" . GHC.RTS.Flags.OneLineGCStats_closure" {
     GHC.RTS.Flags.OneLineGCStats_closure:
         const GHC.RTS.Flags.OneLineGCStats_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.632856252 UTC

[section ""data" . GHC.RTS.Flags.SummaryGCStats_closure" {
     GHC.RTS.Flags.SummaryGCStats_closure:
         const GHC.RTS.Flags.SummaryGCStats_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.634585097 UTC

[section ""data" . GHC.RTS.Flags.VerboseGCStats_closure" {
     GHC.RTS.Flags.VerboseGCStats_closure:
         const GHC.RTS.Flags.VerboseGCStats_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.636534431 UTC

[section ""cstring" . id5pz_str" {
     id5pz_str:
         I8[] [98,97,115,101,58,71,72,67,46,82,84,83,46,70,108,97,103,115,46,82,84,83,70,108,97,103,115]
 },
 GHC.RTS.Flags.RTSFlags_con_entry() //  [R1]
         { []
         }
     {offset
       cdcn7: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.RTSFlags_con_info" {
     GHC.RTS.Flags.RTSFlags_con_info:
         const GHC.RTS.Flags.RTSFlags_con_entry;
         const 9;
         const 1;
         const id5pz_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.639660038 UTC

[section ""cstring" . id5pB_str" {
     id5pB_str:
         I8[] [98,97,115,101,58,71,72,67,46,82,84,83,46,70,108,97,103,115,46,80,97,114,70,108,97,103,115]
 },
 GHC.RTS.Flags.ParFlags_con_entry() //  [R1]
         { []
         }
     {offset
       cdcnd: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.ParFlags_con_info" {
     GHC.RTS.Flags.ParFlags_con_info:
         const GHC.RTS.Flags.ParFlags_con_entry;
         const 10;
         const 1;
         const id5pB_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.643458259 UTC

[section ""cstring" . id5pD_str" {
     id5pD_str:
         I8[] [98,97,115,101,58,71,72,67,46,82,84,83,46,70,108,97,103,115,46,84,105,99,107,121,70,108,97,103,115]
 },
 GHC.RTS.Flags.TickyFlags_con_entry() //  [R1]
         { []
         }
     {offset
       cdcnj: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.TickyFlags_con_info" {
     GHC.RTS.Flags.TickyFlags_con_info:
         const GHC.RTS.Flags.TickyFlags_con_entry;
         const 2;
         const 4;
         const id5pD_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.646617182 UTC

[section ""cstring" . id5pF_str" {
     id5pF_str:
         I8[] [98,97,115,101,58,71,72,67,46,82,84,83,46,70,108,97,103,115,46,84,114,97,99,101,70,108,97,103,115]
 },
 GHC.RTS.Flags.TraceFlags_con_entry() //  [R1]
         { []
         }
     {offset
       cdcnp: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.TraceFlags_con_info" {
     GHC.RTS.Flags.TraceFlags_con_info:
         const GHC.RTS.Flags.TraceFlags_con_entry;
         const 7;
         const 1;
         const id5pF_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.649559479 UTC

[section ""relreadonly" . GHC.RTS.Flags.DoTrace_closure_tbl" {
     GHC.RTS.Flags.DoTrace_closure_tbl:
         const GHC.RTS.Flags.TraceNone_closure+1;
         const GHC.RTS.Flags.TraceEventLog_closure+2;
         const GHC.RTS.Flags.TraceStderr_closure+3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.651395438 UTC

[section ""cstring" . id5pH_str" {
     id5pH_str:
         I8[] [98,97,115,101,58,71,72,67,46,82,84,83,46,70,108,97,103,115,46,84,114,97,99,101,78,111,110,101]
 },
 GHC.RTS.Flags.TraceNone_con_entry() //  [R1]
         { []
         }
     {offset
       cdcnw: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.TraceNone_con_info" {
     GHC.RTS.Flags.TraceNone_con_info:
         const GHC.RTS.Flags.TraceNone_con_entry;
         const 4294967296;
         const 3;
         const id5pH_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.655647334 UTC

[section ""cstring" . id5pJ_str" {
     id5pJ_str:
         I8[] [98,97,115,101,58,71,72,67,46,82,84,83,46,70,108,97,103,115,46,84,114,97,99,101,69,118,101,110,116,76,111,103]
 },
 GHC.RTS.Flags.TraceEventLog_con_entry() //  [R1]
         { []
         }
     {offset
       cdcnC: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.TraceEventLog_con_info" {
     GHC.RTS.Flags.TraceEventLog_con_info:
         const GHC.RTS.Flags.TraceEventLog_con_entry;
         const 4294967296;
         const 4294967299;
         const id5pJ_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.658761003 UTC

[section ""cstring" . id5pL_str" {
     id5pL_str:
         I8[] [98,97,115,101,58,71,72,67,46,82,84,83,46,70,108,97,103,115,46,84,114,97,99,101,83,116,100,101,114,114]
 },
 GHC.RTS.Flags.TraceStderr_con_entry() //  [R1]
         { []
         }
     {offset
       cdcnI: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.TraceStderr_con_info" {
     GHC.RTS.Flags.TraceStderr_con_info:
         const GHC.RTS.Flags.TraceStderr_con_entry;
         const 4294967296;
         const 8589934595;
         const id5pL_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.661912181 UTC

[section ""cstring" . id5pN_str" {
     id5pN_str:
         I8[] [98,97,115,101,58,71,72,67,46,82,84,83,46,70,108,97,103,115,46,80,114,111,102,70,108,97,103,115]
 },
 GHC.RTS.Flags.ProfFlags_con_entry() //  [R1]
         { []
         }
     {offset
       cdcnO: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.ProfFlags_con_info" {
     GHC.RTS.Flags.ProfFlags_con_info:
         const GHC.RTS.Flags.ProfFlags_con_entry;
         const 14;
         const 1;
         const id5pN_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.664838472 UTC

[section ""relreadonly" . GHC.RTS.Flags.DoHeapProfile_closure_tbl" {
     GHC.RTS.Flags.DoHeapProfile_closure_tbl:
         const GHC.RTS.Flags.NoHeapProfiling_closure+1;
         const GHC.RTS.Flags.HeapByCCS_closure+1;
         const GHC.RTS.Flags.HeapByMod_closure+1;
         const GHC.RTS.Flags.HeapByDescr_closure+1;
         const GHC.RTS.Flags.HeapByType_closure+1;
         const GHC.RTS.Flags.HeapByRetainer_closure+1;
         const GHC.RTS.Flags.HeapByLDV_closure+1;
         const GHC.RTS.Flags.HeapByClosureType_closure+1;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.666695102 UTC

[section ""cstring" . id5pP_str" {
     id5pP_str:
         I8[] [98,97,115,101,58,71,72,67,46,82,84,83,46,70,108,97,103,115,46,78,111,72,101,97,112,80,114,111,102,105,108,105,110,103]
 },
 GHC.RTS.Flags.NoHeapProfiling_con_entry() //  [R1]
         { []
         }
     {offset
       cdcnV: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.NoHeapProfiling_con_info" {
     GHC.RTS.Flags.NoHeapProfiling_con_info:
         const GHC.RTS.Flags.NoHeapProfiling_con_entry;
         const 4294967296;
         const 3;
         const id5pP_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.670106311 UTC

[section ""cstring" . id5pR_str" {
     id5pR_str:
         I8[] [98,97,115,101,58,71,72,67,46,82,84,83,46,70,108,97,103,115,46,72,101,97,112,66,121,67,67,83]
 },
 GHC.RTS.Flags.HeapByCCS_con_entry() //  [R1]
         { []
         }
     {offset
       cdco1: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.HeapByCCS_con_info" {
     GHC.RTS.Flags.HeapByCCS_con_info:
         const GHC.RTS.Flags.HeapByCCS_con_entry;
         const 4294967296;
         const 4294967299;
         const id5pR_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.67310508 UTC

[section ""cstring" . id5pT_str" {
     id5pT_str:
         I8[] [98,97,115,101,58,71,72,67,46,82,84,83,46,70,108,97,103,115,46,72,101,97,112,66,121,77,111,100]
 },
 GHC.RTS.Flags.HeapByMod_con_entry() //  [R1]
         { []
         }
     {offset
       cdco7: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.HeapByMod_con_info" {
     GHC.RTS.Flags.HeapByMod_con_info:
         const GHC.RTS.Flags.HeapByMod_con_entry;
         const 4294967296;
         const 8589934595;
         const id5pT_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.67611528 UTC

[section ""cstring" . id5pV_str" {
     id5pV_str:
         I8[] [98,97,115,101,58,71,72,67,46,82,84,83,46,70,108,97,103,115,46,72,101,97,112,66,121,68,101,115,99,114]
 },
 GHC.RTS.Flags.HeapByDescr_con_entry() //  [R1]
         { []
         }
     {offset
       cdcod: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.HeapByDescr_con_info" {
     GHC.RTS.Flags.HeapByDescr_con_info:
         const GHC.RTS.Flags.HeapByDescr_con_entry;
         const 4294967296;
         const 12884901891;
         const id5pV_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.679170077 UTC

[section ""cstring" . id5pX_str" {
     id5pX_str:
         I8[] [98,97,115,101,58,71,72,67,46,82,84,83,46,70,108,97,103,115,46,72,101,97,112,66,121,84,121,112,101]
 },
 GHC.RTS.Flags.HeapByType_con_entry() //  [R1]
         { []
         }
     {offset
       cdcoj: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.HeapByType_con_info" {
     GHC.RTS.Flags.HeapByType_con_info:
         const GHC.RTS.Flags.HeapByType_con_entry;
         const 4294967296;
         const 17179869187;
         const id5pX_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.682819507 UTC

[section ""cstring" . id5pZ_str" {
     id5pZ_str:
         I8[] [98,97,115,101,58,71,72,67,46,82,84,83,46,70,108,97,103,115,46,72,101,97,112,66,121,82,101,116,97,105,110,101,114]
 },
 GHC.RTS.Flags.HeapByRetainer_con_entry() //  [R1]
         { []
         }
     {offset
       cdcop: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.HeapByRetainer_con_info" {
     GHC.RTS.Flags.HeapByRetainer_con_info:
         const GHC.RTS.Flags.HeapByRetainer_con_entry;
         const 4294967296;
         const 21474836483;
         const id5pZ_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.68605387 UTC

[section ""cstring" . id5q1_str" {
     id5q1_str:
         I8[] [98,97,115,101,58,71,72,67,46,82,84,83,46,70,108,97,103,115,46,72,101,97,112,66,121,76,68,86]
 },
 GHC.RTS.Flags.HeapByLDV_con_entry() //  [R1]
         { []
         }
     {offset
       cdcov: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.HeapByLDV_con_info" {
     GHC.RTS.Flags.HeapByLDV_con_info:
         const GHC.RTS.Flags.HeapByLDV_con_entry;
         const 4294967296;
         const 25769803779;
         const id5q1_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.689127734 UTC

[section ""cstring" . id5q3_str" {
     id5q3_str:
         I8[] [98,97,115,101,58,71,72,67,46,82,84,83,46,70,108,97,103,115,46,72,101,97,112,66,121,67,108,111,115,117,114,101,84,121,112,101]
 },
 GHC.RTS.Flags.HeapByClosureType_con_entry() //  [R1]
         { []
         }
     {offset
       cdcoB: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.HeapByClosureType_con_info" {
     GHC.RTS.Flags.HeapByClosureType_con_info:
         const GHC.RTS.Flags.HeapByClosureType_con_entry;
         const 4294967296;
         const 30064771075;
         const id5q3_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.692242194 UTC

[section ""cstring" . id5q5_str" {
     id5q5_str:
         I8[] [98,97,115,101,58,71,72,67,46,82,84,83,46,70,108,97,103,115,46,67,67,70,108,97,103,115]
 },
 GHC.RTS.Flags.CCFlags_con_entry() //  [R1]
         { []
         }
     {offset
       cdcoH: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.CCFlags_con_info" {
     GHC.RTS.Flags.CCFlags_con_info:
         const GHC.RTS.Flags.CCFlags_con_entry;
         const 3;
         const 1;
         const id5q5_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.69526516 UTC

[section ""relreadonly" . GHC.RTS.Flags.DoCostCentres_closure_tbl" {
     GHC.RTS.Flags.DoCostCentres_closure_tbl:
         const GHC.RTS.Flags.CostCentresNone_closure+1;
         const GHC.RTS.Flags.CostCentresSummary_closure+2;
         const GHC.RTS.Flags.CostCentresVerbose_closure+3;
         const GHC.RTS.Flags.CostCentresAll_closure+4;
         const GHC.RTS.Flags.CostCentresJSON_closure+5;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.697151104 UTC

[section ""cstring" . id5q7_str" {
     id5q7_str:
         I8[] [98,97,115,101,58,71,72,67,46,82,84,83,46,70,108,97,103,115,46,67,111,115,116,67,101,110,116,114,101,115,78,111,110,101]
 },
 GHC.RTS.Flags.CostCentresNone_con_entry() //  [R1]
         { []
         }
     {offset
       cdcoO: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.CostCentresNone_con_info" {
     GHC.RTS.Flags.CostCentresNone_con_info:
         const GHC.RTS.Flags.CostCentresNone_con_entry;
         const 4294967296;
         const 3;
         const id5q7_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.70091927 UTC

[section ""cstring" . id5q9_str" {
     id5q9_str:
         I8[] [98,97,115,101,58,71,72,67,46,82,84,83,46,70,108,97,103,115,46,67,111,115,116,67,101,110,116,114,101,115,83,117,109,109,97,114,121]
 },
 GHC.RTS.Flags.CostCentresSummary_con_entry() //  [R1]
         { []
         }
     {offset
       cdcoU: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.CostCentresSummary_con_info" {
     GHC.RTS.Flags.CostCentresSummary_con_info:
         const GHC.RTS.Flags.CostCentresSummary_con_entry;
         const 4294967296;
         const 4294967299;
         const id5q9_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.704089695 UTC

[section ""cstring" . id5qb_str" {
     id5qb_str:
         I8[] [98,97,115,101,58,71,72,67,46,82,84,83,46,70,108,97,103,115,46,67,111,115,116,67,101,110,116,114,101,115,86,101,114,98,111,115,101]
 },
 GHC.RTS.Flags.CostCentresVerbose_con_entry() //  [R1]
         { []
         }
     {offset
       cdcp0: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.CostCentresVerbose_con_info" {
     GHC.RTS.Flags.CostCentresVerbose_con_info:
         const GHC.RTS.Flags.CostCentresVerbose_con_entry;
         const 4294967296;
         const 8589934595;
         const id5qb_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.707174636 UTC

[section ""cstring" . id5qd_str" {
     id5qd_str:
         I8[] [98,97,115,101,58,71,72,67,46,82,84,83,46,70,108,97,103,115,46,67,111,115,116,67,101,110,116,114,101,115,65,108,108]
 },
 GHC.RTS.Flags.CostCentresAll_con_entry() //  [R1]
         { []
         }
     {offset
       cdcp6: // global
           R1 = R1 + 4;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.CostCentresAll_con_info" {
     GHC.RTS.Flags.CostCentresAll_con_info:
         const GHC.RTS.Flags.CostCentresAll_con_entry;
         const 4294967296;
         const 12884901891;
         const id5qd_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.711379748 UTC

[section ""cstring" . id5qf_str" {
     id5qf_str:
         I8[] [98,97,115,101,58,71,72,67,46,82,84,83,46,70,108,97,103,115,46,67,111,115,116,67,101,110,116,114,101,115,74,83,79,78]
 },
 GHC.RTS.Flags.CostCentresJSON_con_entry() //  [R1]
         { []
         }
     {offset
       cdcpc: // global
           R1 = R1 + 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.CostCentresJSON_con_info" {
     GHC.RTS.Flags.CostCentresJSON_con_info:
         const GHC.RTS.Flags.CostCentresJSON_con_entry;
         const 4294967296;
         const 17179869187;
         const id5qf_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.714540337 UTC

[section ""cstring" . id5qh_str" {
     id5qh_str:
         I8[] [98,97,115,101,58,71,72,67,46,82,84,83,46,70,108,97,103,115,46,68,101,98,117,103,70,108,97,103,115]
 },
 GHC.RTS.Flags.DebugFlags_con_entry() //  [R1]
         { []
         }
     {offset
       cdcpi: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.DebugFlags_con_info" {
     GHC.RTS.Flags.DebugFlags_con_info:
         const GHC.RTS.Flags.DebugFlags_con_entry;
         const 15;
         const 1;
         const id5qh_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.717682061 UTC

[section ""cstring" . id5qj_str" {
     id5qj_str:
         I8[] [98,97,115,101,58,71,72,67,46,82,84,83,46,70,108,97,103,115,46,77,105,115,99,70,108,97,103,115]
 },
 GHC.RTS.Flags.MiscFlags_con_entry() //  [R1]
         { []
         }
     {offset
       cdcpo: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.MiscFlags_con_info" {
     GHC.RTS.Flags.MiscFlags_con_info:
         const GHC.RTS.Flags.MiscFlags_con_entry;
         const 7;
         const 1;
         const id5qj_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.720876273 UTC

[section ""cstring" . id5ql_str" {
     id5ql_str:
         I8[] [98,97,115,101,58,71,72,67,46,82,84,83,46,70,108,97,103,115,46,67,111,110,99,70,108,97,103,115]
 },
 GHC.RTS.Flags.ConcFlags_con_entry() //  [R1]
         { []
         }
     {offset
       cdcpu: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.ConcFlags_con_info" {
     GHC.RTS.Flags.ConcFlags_con_info:
         const GHC.RTS.Flags.ConcFlags_con_entry;
         const 2;
         const 4;
         const id5ql_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.724357926 UTC

[section ""cstring" . id5qn_str" {
     id5qn_str:
         I8[] [98,97,115,101,58,71,72,67,46,82,84,83,46,70,108,97,103,115,46,71,67,70,108,97,103,115]
 },
 GHC.RTS.Flags.GCFlags_con_entry() //  [R1]
         { []
         }
     {offset
       cdcpA: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.GCFlags_con_info" {
     GHC.RTS.Flags.GCFlags_con_info:
         const GHC.RTS.Flags.GCFlags_con_entry;
         const 27;
         const 1;
         const id5qn_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.727361251 UTC

[section ""relreadonly" . GHC.RTS.Flags.GiveGCStats_closure_tbl" {
     GHC.RTS.Flags.GiveGCStats_closure_tbl:
         const GHC.RTS.Flags.NoGCStats_closure+1;
         const GHC.RTS.Flags.CollectGCStats_closure+2;
         const GHC.RTS.Flags.OneLineGCStats_closure+3;
         const GHC.RTS.Flags.SummaryGCStats_closure+4;
         const GHC.RTS.Flags.VerboseGCStats_closure+5;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.729268401 UTC

[section ""cstring" . id5qp_str" {
     id5qp_str:
         I8[] [98,97,115,101,58,71,72,67,46,82,84,83,46,70,108,97,103,115,46,78,111,71,67,83,116,97,116,115]
 },
 GHC.RTS.Flags.NoGCStats_con_entry() //  [R1]
         { []
         }
     {offset
       cdcpH: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.NoGCStats_con_info" {
     GHC.RTS.Flags.NoGCStats_con_info:
         const GHC.RTS.Flags.NoGCStats_con_entry;
         const 4294967296;
         const 3;
         const id5qp_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.732319571 UTC

[section ""cstring" . id5qr_str" {
     id5qr_str:
         I8[] [98,97,115,101,58,71,72,67,46,82,84,83,46,70,108,97,103,115,46,67,111,108,108,101,99,116,71,67,83,116,97,116,115]
 },
 GHC.RTS.Flags.CollectGCStats_con_entry() //  [R1]
         { []
         }
     {offset
       cdcpN: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.CollectGCStats_con_info" {
     GHC.RTS.Flags.CollectGCStats_con_info:
         const GHC.RTS.Flags.CollectGCStats_con_entry;
         const 4294967296;
         const 4294967299;
         const id5qr_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.735587745 UTC

[section ""cstring" . id5qt_str" {
     id5qt_str:
         I8[] [98,97,115,101,58,71,72,67,46,82,84,83,46,70,108,97,103,115,46,79,110,101,76,105,110,101,71,67,83,116,97,116,115]
 },
 GHC.RTS.Flags.OneLineGCStats_con_entry() //  [R1]
         { []
         }
     {offset
       cdcpT: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.OneLineGCStats_con_info" {
     GHC.RTS.Flags.OneLineGCStats_con_info:
         const GHC.RTS.Flags.OneLineGCStats_con_entry;
         const 4294967296;
         const 8589934595;
         const id5qt_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.739660137 UTC

[section ""cstring" . id5qv_str" {
     id5qv_str:
         I8[] [98,97,115,101,58,71,72,67,46,82,84,83,46,70,108,97,103,115,46,83,117,109,109,97,114,121,71,67,83,116,97,116,115]
 },
 GHC.RTS.Flags.SummaryGCStats_con_entry() //  [R1]
         { []
         }
     {offset
       cdcpZ: // global
           R1 = R1 + 4;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.SummaryGCStats_con_info" {
     GHC.RTS.Flags.SummaryGCStats_con_info:
         const GHC.RTS.Flags.SummaryGCStats_con_entry;
         const 4294967296;
         const 12884901891;
         const id5qv_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.742810238 UTC

[section ""cstring" . id5qx_str" {
     id5qx_str:
         I8[] [98,97,115,101,58,71,72,67,46,82,84,83,46,70,108,97,103,115,46,86,101,114,98,111,115,101,71,67,83,116,97,116,115]
 },
 GHC.RTS.Flags.VerboseGCStats_con_entry() //  [R1]
         { []
         }
     {offset
       cdcq5: // global
           R1 = R1 + 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.VerboseGCStats_con_info" {
     GHC.RTS.Flags.VerboseGCStats_con_info:
         const GHC.RTS.Flags.VerboseGCStats_con_entry;
         const 4294967296;
         const 17179869187;
         const id5qx_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:00.746896957 UTC

[section ""relreadonly" . ScWiZ_srt" {
     ScWiZ_srt:
         const GHC.Err.errorWithoutStackTrace_closure;
         const GHC.RTS.Flags.$wlvl3_closure;
         const GHC.RTS.Flags.$fEnumGiveGCStats6_closure;
         const GHC.RTS.Flags.$fEnumGiveGCStats_$ctoEnum_closure;
         const GHC.RTS.Flags.$w$ctoEnum2_closure;
         const GHC.RTS.Flags.$wlvl_closure;
         const GHC.RTS.Flags.$fEnumDoCostCentres11_closure;
         const GHC.RTS.Flags.$fEnumDoCostCentres_$ctoEnum_closure;
         const GHC.RTS.Flags.$w$ctoEnum_closure;
         const GHC.RTS.Flags.$wlvl1_closure;
         const GHC.RTS.Flags.$fEnumDoHeapProfile_$ctoEnum_closure;
         const GHC.RTS.Flags.$w$ctoEnum1_closure;
         const GHC.RTS.Flags.$wlvl2_closure;
         const GHC.RTS.Flags.$fEnumDoTrace1_closure;
         const GHC.RTS.Flags.$fEnumDoTrace_$ctoEnum_closure;
         const g_rcV52_closure;
         const GHC.Show.$fShowBool2_closure;
         const GHC.Show.$fShowBool4_closure;
         const GHC.Show.showCommaSpace1_closure;
         const GHC.RTS.Flags.$fShowParFlags_$cshowsPrec_closure;
         const GHC.RTS.Flags.$fShowParFlags1_closure;
         const GHC.Show.$fShowMaybe_$cshowsPrec_closure;
         const GHC.Show.$fShow[]_$s$fShow[]1_closure;
         const GHC.RTS.Flags.$fShowTickyFlags4_closure;
         const GHC.RTS.Flags.$w$cshowsPrec8_closure;
         const GHC.RTS.Flags.$fShowTickyFlags_$cshowsPrec_closure;
         const GHC.RTS.Flags.$fShowTickyFlags_$cshow_closure;
         const GHC.RTS.Flags.$fShowTickyFlags1_closure;
         const GHC.RTS.Flags.$w$cshowsPrec4_closure;
         const GHC.RTS.Flags.$fShowDoTrace1_closure;
         const GHC.RTS.Flags.$fShowDoTrace3_closure;
         const GHC.RTS.Flags.$fShowDoTrace5_closure;
         const GHC.RTS.Flags.$fShowDoTrace_$cshow_closure;
         const f1_rcV5f_closure;
         const GHC.RTS.Flags.$w$cshowsPrec9_closure;
         const GHC.RTS.Flags.$fShowTraceFlags_$cshowsPrec_closure;
         const GHC.RTS.Flags.$fShowTraceFlags_$cshow_closure;
         const GHC.RTS.Flags.$fShowTraceFlags1_closure;
         const GHC.RTS.Flags.$w$cshowsPrec3_closure;
         const GHC.RTS.Flags.$fShowDoHeapProfile1_closure;
         const GHC.RTS.Flags.$fShowDoHeapProfile3_closure;
         const GHC.RTS.Flags.$fShowDoHeapProfile5_closure;
         const GHC.RTS.Flags.$fShowDoHeapProfile7_closure;
         const GHC.RTS.Flags.$fShowDoHeapProfile9_closure;
         const GHC.RTS.Flags.$fShowDoHeapProfile11_closure;
         const GHC.RTS.Flags.$fShowDoHeapProfile13_closure;
         const GHC.RTS.Flags.$fShowDoHeapProfile15_closure;
         const GHC.RTS.Flags.$fShowDoHeapProfile_$cshow_closure;
         const GHC.Show.$w$cshowsPrec4_closure;
         const f3_rcV5o_closure;
         const GHC.RTS.Flags.$fShowProfFlags_$cshowsPrec_closure;
         const GHC.RTS.Flags.$fShowProfFlags_$cshow_closure;
         const GHC.RTS.Flags.$fShowProfFlags1_closure;
         const GHC.RTS.Flags.$w$cshowsPrec1_closure;
         const GHC.RTS.Flags.$fShowCCFlags5_closure;
         const GHC.RTS.Flags.$fShowCCFlags7_closure;
         const GHC.RTS.Flags.$fShowCCFlags9_closure;
         const GHC.RTS.Flags.$fShowCCFlags11_closure;
         const GHC.RTS.Flags.$fShowCCFlags13_closure;
         const GHC.RTS.Flags.$fShowDoCostCentres_$cshow_closure;
         const GHC.Show.showCommaSpace1_closure;
         const GHC.RTS.Flags.$w$cshowsPrec_closure;
         const GHC.RTS.Flags.$fShowCCFlags_$cshowsPrec_closure;
         const GHC.RTS.Flags.$fShowCCFlags17_closure;
         const GHC.RTS.Flags.$w$cshow_closure;
         const GHC.RTS.Flags.$fShowCCFlags_$cshow_closure;
         const GHC.RTS.Flags.$fShowCCFlags1_closure;
         const g_rcV52_closure;
         const GHC.Show.$fShowBool4_closure;
         const GHC.Show.$fShowBool2_closure;
         const f5_rcV5E_closure;
         const GHC.RTS.Flags.$fShowDebugFlags_$cshowsPrec_closure;
         const GHC.RTS.Flags.$fShowDebugFlags1_closure;
         const GHC.RTS.Flags.$w$cshowsPrec6_closure;
         const GHC.RTS.Flags.$fShowMiscFlags_$cshowsPrec_closure;
         const GHC.RTS.Flags.$fShowMiscFlags_$cshow_closure;
         const GHC.RTS.Flags.$fShowMiscFlags1_closure;
         const GHC.RTS.Flags.$w$cshowsPrec2_closure;
         const GHC.RTS.Flags.$fShowConcFlags_$cshowsPrec_closure;
         const GHC.RTS.Flags.$fShowConcFlags_$cshow_closure;
         const GHC.RTS.Flags.$fShowConcFlags1_closure;
         const GHC.RTS.Flags.$w$cshowsPrec5_closure;
         const GHC.RTS.Flags.$fShowGiveGCStats1_closure;
         const GHC.RTS.Flags.$fShowGiveGCStats3_closure;
         const GHC.RTS.Flags.$fShowGiveGCStats5_closure;
         const GHC.RTS.Flags.$fShowGiveGCStats7_closure;
         const GHC.RTS.Flags.$fShowGiveGCStats9_closure;
         const GHC.RTS.Flags.$fShowGiveGCStats_$cshow_closure;
         const GHC.Show.$fShow[]_$s$fShow[]1_closure;
         const GHC.Show.$fShowMaybe_$cshowsPrec_closure;
         const GHC.Float.$fShowDouble2_closure;
         const f7_rcV63_closure;
         const GHC.RTS.Flags.$fShowGCFlags_$cshowsPrec_closure;
         const GHC.RTS.Flags.$fShowGCFlags_$cshow_closure;
         const GHC.RTS.Flags.$fShowGCFlags1_closure;
         const GHC.RTS.Flags.$fShowProfFlags_$cshowsPrec_closure;
         const GHC.RTS.Flags.$w$cshowsPrec8_closure;
         const GHC.RTS.Flags.$fShowParFlags_$cshowsPrec_closure;
         const GHC.RTS.Flags.$w$cshowsPrec7_closure;
         const GHC.RTS.Flags.$fShowRTSFlags_$cshowsPrec_closure;
         const GHC.RTS.Flags.$fShowRTSFlags_$cshow_closure;
         const GHC.RTS.Flags.$fShowRTSFlags1_closure;
         const GHC.RTS.Flags.$wlvl3_closure;
         const GHC.RTS.Flags.$fEnumGiveGCStats_$csucc_closure;
         const lvl96_rcV8o_closure;
         const GHC.RTS.Flags.$fEnumGiveGCStats_go4_closure;
         const GHC.RTS.Flags.$fEnumGiveGCStats_go3_closure;
         const GHC.RTS.Flags.$fEnumGiveGCStats_go2_closure;
         const GHC.RTS.Flags.$fEnumGiveGCStats_go1_closure;
         const GHC.RTS.Flags.$fEnumGiveGCStats_go_closure;
         const GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFromTo_closure;
         const GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFromThen_closure;
         const GHC.RTS.Flags.$fEnumGiveGCStats_$ctoEnum_closure;
         const GHC.RTS.Flags.$fEnumGiveGCStats_go5_closure;
         const GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFrom_closure;
         const GHC.RTS.Flags.$fEnumGiveGCStats1_closure;
         const GHC.RTS.Flags.$fEnumGiveGCStats2_closure;
         const GHC.RTS.Flags.$fEnumGiveGCStats3_closure;
         const GHC.RTS.Flags.$fEnumGiveGCStats4_closure;
         const GHC.RTS.Flags.$fEnumGiveGCStats5_closure;
         const GHC.RTS.Flags.$fEnumGiveGCStats_$cpred_closure;
         const lvl97_rcV8p_closure;
         const GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFromThenTo_closure;
         const GHC.RTS.Flags.$wlvl1_closure;
         const GHC.RTS.Flags.$fEnumDoHeapProfile13_closure;
         const GHC.RTS.Flags.$fEnumDoHeapProfile_$csucc_closure;
         const GHC.RTS.Flags.$fEnumDoHeapProfile15_closure;
         const GHC.RTS.Flags.$fEnumDoHeapProfile_go7_closure;
         const GHC.RTS.Flags.$w$ctoEnum1_closure;
         const GHC.RTS.Flags.$fEnumDoHeapProfile_go6_closure;
         const GHC.RTS.Flags.$fEnumDoHeapProfile_go5_closure;
         const GHC.RTS.Flags.$fEnumDoHeapProfile_go4_closure;
         const GHC.RTS.Flags.$fEnumDoHeapProfile_go3_closure;
         const GHC.RTS.Flags.$fEnumDoHeapProfile_go2_closure;
         const GHC.RTS.Flags.$fEnumDoHeapProfile_go1_closure;
         const GHC.RTS.Flags.$fEnumDoHeapProfile_go_closure;
         const GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFromTo_closure;
         const GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFromThen_closure;
         const GHC.RTS.Flags.$fEnumDoHeapProfile_$ctoEnum_closure;
         const GHC.RTS.Flags.$fEnumDoHeapProfile_go8_closure;
         const GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFrom_closure;
         const GHC.RTS.Flags.$fEnumDoHeapProfile1_closure;
         const GHC.RTS.Flags.$fEnumDoHeapProfile2_closure;
         const GHC.RTS.Flags.$fEnumDoHeapProfile3_closure;
         const GHC.RTS.Flags.$fEnumDoHeapProfile4_closure;
         const GHC.RTS.Flags.$fEnumDoHeapProfile5_closure;
         const GHC.RTS.Flags.$fEnumDoHeapProfile6_closure;
         const GHC.RTS.Flags.$fEnumDoHeapProfile7_closure;
         const GHC.RTS.Flags.$fEnumDoHeapProfile8_closure;
         const GHC.RTS.Flags.$fEnumDoHeapProfile_$cpred_closure;
         const GHC.RTS.Flags.$fEnumDoHeapProfile14_closure;
         const GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFromThenTo_closure;
         const GHC.RTS.Flags.$wlvl_closure;
         const GHC.RTS.Flags.$fEnumDoCostCentres_$csucc_closure;
         const lvl98_rcV8q_closure;
         const GHC.RTS.Flags.$fEnumDoCostCentres_go4_closure;
         const GHC.RTS.Flags.$fEnumDoCostCentres_go3_closure;
         const GHC.RTS.Flags.$fEnumDoCostCentres_go2_closure;
         const GHC.RTS.Flags.$fEnumDoCostCentres_go1_closure;
         const GHC.RTS.Flags.$fEnumDoCostCentres_go_closure;
         const GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFromTo_closure;
         const GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFromThen_closure;
         const GHC.RTS.Flags.$fEnumDoCostCentres_$ctoEnum_closure;
         const GHC.RTS.Flags.$fEnumDoCostCentres_go5_closure;
         const GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFrom_closure;
         const GHC.RTS.Flags.$fEnumDoCostCentres1_closure;
         const GHC.RTS.Flags.$fEnumDoCostCentres2_closure;
         const GHC.RTS.Flags.$fEnumDoCostCentres3_closure;
         const GHC.RTS.Flags.$fEnumDoCostCentres4_closure;
         const GHC.RTS.Flags.$fEnumDoCostCentres5_closure;
         const GHC.RTS.Flags.$fEnumDoCostCentres_$cpred_closure;
         const lvl99_rcV8r_closure;
         const GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFromThenTo_closure;
         const GHC.RTS.Flags.$wlvl2_closure;
         const GHC.RTS.Flags.$fEnumDoTrace_$csucc_closure;
         const lvl100_rcV8s_closure;
         const GHC.RTS.Flags.$fEnumDoTrace_go2_closure;
         const GHC.RTS.Flags.$fEnumDoTrace_go1_closure;
         const GHC.RTS.Flags.$fEnumDoTrace_go_closure;
         const GHC.RTS.Flags.$fEnumDoTrace_$cenumFromTo_closure;
         const GHC.RTS.Flags.$fEnumDoTrace_$cenumFromThen_closure;
         const GHC.RTS.Flags.$fEnumDoTrace_$ctoEnum_closure;
         const GHC.RTS.Flags.$fEnumDoTrace_go3_closure;
         const GHC.RTS.Flags.$fEnumDoTrace_$cenumFrom_closure;
         const GHC.RTS.Flags.$fEnumDoTrace2_closure;
         const GHC.RTS.Flags.$fEnumDoTrace3_closure;
         const GHC.RTS.Flags.$fEnumDoTrace4_closure;
         const GHC.RTS.Flags.$fEnumDoTrace_$cpred_closure;
         const lvl101_rcV8t_closure;
         const GHC.RTS.Flags.$fEnumDoTrace_$cenumFromThenTo_closure;
         const GHC.RTS.Flags.getRTSFlags2_closure;
         const GHC.RTS.Flags.$wlvl_closure;
         const GHC.RTS.Flags.getCCFlags1_closure;
         const GHC.RTS.Flags.$w$ctoEnum1_closure;
         const GHC.IO.Encoding.getForeignEncoding_closure;
         const GHC.Foreign.$wpeekCString_closure;
         const GHC.RTS.Flags.getProfFlags1_closure;
         const GHC.RTS.Flags.$wlvl3_closure;
         const GHC.RTS.Flags.getGCFlags5_closure;
         const GHC.RTS.Flags.getGCFlags2_closure;
         const GHC.RTS.Flags.getGCFlags1_closure;
         const GHC.RTS.Flags.getTickyFlags1_closure;
         const GHC.RTS.Flags.getRTSFlags1_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.26219661 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:08:26.263397643 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoCostCentres10_closure" {
     GHC.RTS.Flags.$fEnumDoCostCentres10_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.265140494 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoCostCentres9_closure" {
     GHC.RTS.Flags.$fEnumDoCostCentres9_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.266943362 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoCostCentres8_closure" {
     GHC.RTS.Flags.$fEnumDoCostCentres8_closure:
         const GHC.Types.I#_con_info;
         const 2;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.268702114 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoCostCentres7_closure" {
     GHC.RTS.Flags.$fEnumDoCostCentres7_closure:
         const GHC.Types.I#_con_info;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.270539208 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoCostCentres6_closure" {
     GHC.RTS.Flags.$fEnumDoCostCentres6_closure:
         const GHC.Types.I#_con_info;
         const 4;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.273652339 UTC

[section ""data" . GHC.RTS.Flags.$fEnumGiveGCStats_$cfromEnum_closure" {
     GHC.RTS.Flags.$fEnumGiveGCStats_$cfromEnum_closure:
         const GHC.RTS.Flags.$fEnumGiveGCStats_$cfromEnum_info;
 },
 GHC.RTS.Flags.$fEnumGiveGCStats_$cfromEnum_entry() //  [R2]
         { []
         }
     {offset
       cddzY: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cddzZ; else goto cddA0;
       cddzZ: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumGiveGCStats_$cfromEnum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cddA0: // global
           I64[Sp - 8] = block_cddzO_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uddAj; else goto cddzP;
       uddAj: // global
           call _cddzO(R1) args: 0, res: 0, upd: 0;
       cddzP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumGiveGCStats_$cfromEnum_info" {
     GHC.RTS.Flags.$fEnumGiveGCStats_$cfromEnum_info:
         const GHC.RTS.Flags.$fEnumGiveGCStats_$cfromEnum_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cddzO() //  [R1]
         { []
         }
     {offset
       cddzO: // global
           _cddzX::P64 = R1 & 7;
           if (_cddzX::P64 < 4) goto uddAg; else goto uddAi;
       uddAg: // global
           if (_cddzX::P64 < 3) goto uddAh; else goto cddzU;
       uddAh: // global
           if (_cddzX::P64 < 2) goto cddzS; else goto cddzT;
       cddzS: // global
           R1 = GHC.RTS.Flags.$fEnumDoCostCentres10_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cddzT: // global
           R1 = GHC.RTS.Flags.$fEnumDoCostCentres9_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cddzU: // global
           R1 = GHC.RTS.Flags.$fEnumDoCostCentres8_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       uddAi: // global
           if (_cddzX::P64 < 5) goto cddzV; else goto cddzW;
       cddzV: // global
           R1 = GHC.RTS.Flags.$fEnumDoCostCentres7_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cddzW: // global
           R1 = GHC.RTS.Flags.$fEnumDoCostCentres6_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cddzO_info" {
     block_cddzO_info:
         const _cddzO;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.279533839 UTC

[section ""cstring" . lvl_rcV4Y_bytes" {
     lvl_rcV4Y_bytes:
         I8[] [105,110,118,97,108,105,100,32,101,110,117,109,32,102,111,114,32,71,105,118,101,71,67,83,116,97,116,115,58,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.283248569 UTC

[section ""data" . GHC.RTS.Flags.$wlvl3_closure" {
     GHC.RTS.Flags.$wlvl3_closure:
         const GHC.RTS.Flags.$wlvl3_info;
         const 0;
 },
 sat_sdcqi_entry() //  [R1]
         { []
         }
     {offset
       cddAM: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cddAN; else goto cddAO;
       cddAN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cddAO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cddAJ_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 16];
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcqi_info" {
     sat_sdcqi_info:
         const sat_sdcqi_entry;
         const 4294967296;
         const 17;
 },
 _cddAJ() //  [R1, R2]
         { []
         }
     {offset
       cddAJ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cddAR; else goto cddAQ;
       cddAR: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cddAQ: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cddAJ_info" {
     block_cddAJ_info:
         const _cddAJ;
         const 0;
         const 30;
 },
 GHC.RTS.Flags.$wlvl3_entry() //  [R2]
         { []
         }
     {offset
       cddAU: // global
           _sdcqe::I64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto cddAV; else goto cddAW;
       cddAW: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cddAY; else goto cddAX;
       cddAY: // global
           HpAlloc = 24;
           goto cddAV;
       cddAV: // global
           R2 = _sdcqe::I64;
           R1 = GHC.RTS.Flags.$wlvl3_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cddAX: // global
           I64[Hp - 16] = sat_sdcqi_info;
           I64[Hp] = _sdcqe::I64;
           I64[Sp - 8] = block_cddAS_info;
           R3 = Hp - 16;
           R2 = lvl_rcV4Y_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$wlvl3_info" {
     GHC.RTS.Flags.$wlvl3_info:
         const GHC.RTS.Flags.$wlvl3_entry;
         const 0;
         const 12884901902;
         const 4294967300;
         const SddB2_srt;
 },
 _cddAS() //  [R1]
         { []
         }
     {offset
       cddAS: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cddAS_info" {
     block_cddAS_info:
         const _cddAS;
         const 0;
         const 4294967326;
         const SddB2_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.297292819 UTC

[section ""data" . GHC.RTS.Flags.$fEnumGiveGCStats6_closure" {
     GHC.RTS.Flags.$fEnumGiveGCStats6_closure:
         const GHC.RTS.Flags.$fEnumGiveGCStats6_info;
         const 0;
 },
 GHC.RTS.Flags.$fEnumGiveGCStats6_entry() //  [R2]
         { []
         }
     {offset
       cddBw: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cddBx; else goto cddBy;
       cddBx: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumGiveGCStats6_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cddBy: // global
           I64[Sp - 8] = block_cddBt_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uddBC; else goto cddBu;
       uddBC: // global
           call _cddBt(R1) args: 0, res: 0, upd: 0;
       cddBu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumGiveGCStats6_info" {
     GHC.RTS.Flags.$fEnumGiveGCStats6_info:
         const GHC.RTS.Flags.$fEnumGiveGCStats6_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SddB2_srt+8;
 },
 _cddBt() //  [R1]
         { []
         }
     {offset
       cddBt: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cddBt_info" {
     block_cddBt_info:
         const _cddBt;
         const 0;
         const 4294967326;
         const SddB2_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.303263578 UTC

[section ""data" . GHC.RTS.Flags.$w$ctoEnum2_closure" {
     GHC.RTS.Flags.$w$ctoEnum2_closure:
         const GHC.RTS.Flags.$w$ctoEnum2_info;
         const 0;
 },
 GHC.RTS.Flags.$w$ctoEnum2_entry() //  [R2]
         { []
         }
     {offset
       cddBZ: // global
           if (%MO_S_Lt_W64(R2, 3)) goto uddC2; else goto uddC5;
       uddC2: // global
           if (%MO_S_Lt_W64(R2, 1)) goto uddC3; else goto uddC4;
       uddC3: // global
           _sdcqo::I64 = R2;
           if (%MO_S_Lt_W64(R2, 0)) goto cddBT; else goto cddBU;
       cddBU: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       uddC4: // global
           if (%MO_S_Lt_W64(R2, 2)) goto cddBV; else goto cddBW;
       cddBV: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cddBW: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       uddC5: // global
           _sdcqo::I64 = R2;
           if (%MO_S_Ge_W64(R2, 5)) goto cddBT; else goto uddC6;
       cddBT: // global
           R2 = _sdcqo::I64;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 8, res: 0, upd: 8;
       uddC6: // global
           if (%MO_S_Lt_W64(_sdcqo::I64, 4)) goto cddBX; else goto cddBY;
       cddBX: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cddBY: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$w$ctoEnum2_info" {
     GHC.RTS.Flags.$w$ctoEnum2_info:
         const GHC.RTS.Flags.$w$ctoEnum2_entry;
         const 0;
         const 4294967310;
         const 4294967300;
         const SddB2_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.307997822 UTC

[section ""data" . GHC.RTS.Flags.$fEnumGiveGCStats_$ctoEnum_closure" {
     GHC.RTS.Flags.$fEnumGiveGCStats_$ctoEnum_closure:
         const GHC.RTS.Flags.$fEnumGiveGCStats_$ctoEnum_info;
         const 0;
 },
 GHC.RTS.Flags.$fEnumGiveGCStats_$ctoEnum_entry() //  [R2]
         { []
         }
     {offset
       cddCn: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cddCo; else goto cddCp;
       cddCo: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumGiveGCStats_$ctoEnum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cddCp: // global
           I64[Sp - 8] = block_cddCk_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uddCt; else goto cddCl;
       uddCt: // global
           call _cddCk(R1) args: 0, res: 0, upd: 0;
       cddCl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumGiveGCStats_$ctoEnum_info" {
     GHC.RTS.Flags.$fEnumGiveGCStats_$ctoEnum_info:
         const GHC.RTS.Flags.$fEnumGiveGCStats_$ctoEnum_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SddB2_srt+24;
 },
 _cddCk() //  [R1]
         { []
         }
     {offset
       cddCk: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.RTS.Flags.$w$ctoEnum2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cddCk_info" {
     block_cddCk_info:
         const _cddCk;
         const 0;
         const 4294967326;
         const SddB2_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.314401148 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoCostCentres_$cfromEnum_closure" {
     GHC.RTS.Flags.$fEnumDoCostCentres_$cfromEnum_closure:
         const GHC.RTS.Flags.$fEnumDoCostCentres_$cfromEnum_info;
 },
 GHC.RTS.Flags.$fEnumDoCostCentres_$cfromEnum_entry() //  [R2]
         { []
         }
     {offset
       cddCS: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cddCT; else goto cddCU;
       cddCT: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoCostCentres_$cfromEnum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cddCU: // global
           I64[Sp - 8] = block_cddCI_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uddDd; else goto cddCJ;
       uddDd: // global
           call _cddCI(R1) args: 0, res: 0, upd: 0;
       cddCJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoCostCentres_$cfromEnum_info" {
     GHC.RTS.Flags.$fEnumDoCostCentres_$cfromEnum_info:
         const GHC.RTS.Flags.$fEnumDoCostCentres_$cfromEnum_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cddCI() //  [R1]
         { []
         }
     {offset
       cddCI: // global
           _cddCR::P64 = R1 & 7;
           if (_cddCR::P64 < 4) goto uddDa; else goto uddDc;
       uddDa: // global
           if (_cddCR::P64 < 3) goto uddDb; else goto cddCO;
       uddDb: // global
           if (_cddCR::P64 < 2) goto cddCM; else goto cddCN;
       cddCM: // global
           R1 = GHC.RTS.Flags.$fEnumDoCostCentres10_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cddCN: // global
           R1 = GHC.RTS.Flags.$fEnumDoCostCentres9_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cddCO: // global
           R1 = GHC.RTS.Flags.$fEnumDoCostCentres8_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       uddDc: // global
           if (_cddCR::P64 < 5) goto cddCP; else goto cddCQ;
       cddCP: // global
           R1 = GHC.RTS.Flags.$fEnumDoCostCentres7_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cddCQ: // global
           R1 = GHC.RTS.Flags.$fEnumDoCostCentres6_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cddCI_info" {
     block_cddCI_info:
         const _cddCI;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.319919174 UTC

[section ""cstring" . lvl1_rcV4Z_bytes" {
     lvl1_rcV4Z_bytes:
         I8[] [105,110,118,97,108,105,100,32,101,110,117,109,32,102,111,114,32,68,111,67,111,115,116,67,101,110,116,114,101,115,58,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.323684317 UTC

[section ""data" . GHC.RTS.Flags.$wlvl_closure" {
     GHC.RTS.Flags.$wlvl_closure:
         const GHC.RTS.Flags.$wlvl_info;
         const 0;
 },
 sat_sdcqy_entry() //  [R1]
         { []
         }
     {offset
       cddDG: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cddDH; else goto cddDI;
       cddDH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cddDI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cddDD_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 16];
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcqy_info" {
     sat_sdcqy_info:
         const sat_sdcqy_entry;
         const 4294967296;
         const 17;
 },
 _cddDD() //  [R1, R2]
         { []
         }
     {offset
       cddDD: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cddDL; else goto cddDK;
       cddDL: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cddDK: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cddDD_info" {
     block_cddDD_info:
         const _cddDD;
         const 0;
         const 30;
 },
 GHC.RTS.Flags.$wlvl_entry() //  [R2]
         { []
         }
     {offset
       cddDO: // global
           _sdcqu::I64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto cddDP; else goto cddDQ;
       cddDQ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cddDS; else goto cddDR;
       cddDS: // global
           HpAlloc = 24;
           goto cddDP;
       cddDP: // global
           R2 = _sdcqu::I64;
           R1 = GHC.RTS.Flags.$wlvl_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cddDR: // global
           I64[Hp - 16] = sat_sdcqy_info;
           I64[Hp] = _sdcqu::I64;
           I64[Sp - 8] = block_cddDM_info;
           R3 = Hp - 16;
           R2 = lvl1_rcV4Z_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$wlvl_info" {
     GHC.RTS.Flags.$wlvl_info:
         const GHC.RTS.Flags.$wlvl_entry;
         const 0;
         const 141733920782;
         const 4294967300;
         const SddB2_srt;
 },
 _cddDM() //  [R1]
         { []
         }
     {offset
       cddDM: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cddDM_info" {
     block_cddDM_info:
         const _cddDM;
         const 0;
         const 4294967326;
         const SddB2_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.333026095 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoCostCentres11_closure" {
     GHC.RTS.Flags.$fEnumDoCostCentres11_closure:
         const GHC.RTS.Flags.$fEnumDoCostCentres11_info;
         const 0;
 },
 GHC.RTS.Flags.$fEnumDoCostCentres11_entry() //  [R2]
         { []
         }
     {offset
       cddEp: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cddEq; else goto cddEr;
       cddEq: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoCostCentres11_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cddEr: // global
           I64[Sp - 8] = block_cddEm_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uddEv; else goto cddEn;
       uddEv: // global
           call _cddEm(R1) args: 0, res: 0, upd: 0;
       cddEn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoCostCentres11_info" {
     GHC.RTS.Flags.$fEnumDoCostCentres11_info:
         const GHC.RTS.Flags.$fEnumDoCostCentres11_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SddB2_srt+40;
 },
 _cddEm() //  [R1]
         { []
         }
     {offset
       cddEm: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cddEm_info" {
     block_cddEm_info:
         const _cddEm;
         const 0;
         const 4294967326;
         const SddB2_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.339453802 UTC

[section ""data" . GHC.RTS.Flags.$w$ctoEnum_closure" {
     GHC.RTS.Flags.$w$ctoEnum_closure:
         const GHC.RTS.Flags.$w$ctoEnum_info;
         const 0;
 },
 GHC.RTS.Flags.$w$ctoEnum_entry() //  [R2]
         { []
         }
     {offset
       cddES: // global
           if (%MO_S_Lt_W64(R2, 3)) goto uddEV; else goto uddEY;
       uddEV: // global
           if (%MO_S_Lt_W64(R2, 1)) goto uddEW; else goto uddEX;
       uddEW: // global
           _sdcqE::I64 = R2;
           if (%MO_S_Lt_W64(R2, 0)) goto cddEM; else goto cddEN;
       cddEN: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       uddEX: // global
           if (%MO_S_Lt_W64(R2, 2)) goto cddEO; else goto cddEP;
       cddEO: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cddEP: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       uddEY: // global
           _sdcqE::I64 = R2;
           if (%MO_S_Ge_W64(R2, 5)) goto cddEM; else goto uddEZ;
       cddEM: // global
           R2 = _sdcqE::I64;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
       uddEZ: // global
           if (%MO_S_Lt_W64(_sdcqE::I64, 4)) goto cddEQ; else goto cddER;
       cddEQ: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cddER: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$w$ctoEnum_info" {
     GHC.RTS.Flags.$w$ctoEnum_info:
         const GHC.RTS.Flags.$w$ctoEnum_entry;
         const 0;
         const 4294967310;
         const 4294967300;
         const SddB2_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.344558173 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoCostCentres_$ctoEnum_closure" {
     GHC.RTS.Flags.$fEnumDoCostCentres_$ctoEnum_closure:
         const GHC.RTS.Flags.$fEnumDoCostCentres_$ctoEnum_info;
         const 0;
 },
 GHC.RTS.Flags.$fEnumDoCostCentres_$ctoEnum_entry() //  [R2]
         { []
         }
     {offset
       cddFg: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cddFh; else goto cddFi;
       cddFh: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoCostCentres_$ctoEnum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cddFi: // global
           I64[Sp - 8] = block_cddFd_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uddFm; else goto cddFe;
       uddFm: // global
           call _cddFd(R1) args: 0, res: 0, upd: 0;
       cddFe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoCostCentres_$ctoEnum_info" {
     GHC.RTS.Flags.$fEnumDoCostCentres_$ctoEnum_info:
         const GHC.RTS.Flags.$fEnumDoCostCentres_$ctoEnum_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SddB2_srt+56;
 },
 _cddFd() //  [R1]
         { []
         }
     {offset
       cddFd: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.RTS.Flags.$w$ctoEnum_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cddFd_info" {
     block_cddFd_info:
         const _cddFd;
         const 0;
         const 4294967326;
         const SddB2_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.349626878 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoHeapProfile12_closure" {
     GHC.RTS.Flags.$fEnumDoHeapProfile12_closure:
         const GHC.Types.I#_con_info;
         const 5;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.351394395 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoHeapProfile11_closure" {
     GHC.RTS.Flags.$fEnumDoHeapProfile11_closure:
         const GHC.Types.I#_con_info;
         const 6;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.353170569 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoHeapProfile10_closure" {
     GHC.RTS.Flags.$fEnumDoHeapProfile10_closure:
         const GHC.Types.I#_con_info;
         const 7;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.355461285 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoHeapProfile9_closure" {
     GHC.RTS.Flags.$fEnumDoHeapProfile9_closure:
         const GHC.Types.I#_con_info;
         const 8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.358767812 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoHeapProfile_$cfromEnum_closure" {
     GHC.RTS.Flags.$fEnumDoHeapProfile_$cfromEnum_closure:
         const GHC.RTS.Flags.$fEnumDoHeapProfile_$cfromEnum_info;
 },
 GHC.RTS.Flags.$fEnumDoHeapProfile_$cfromEnum_entry() //  [R2]
         { []
         }
     {offset
       cddFS: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cddFT; else goto cddFU;
       cddFT: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoHeapProfile_$cfromEnum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cddFU: // global
           I64[Sp - 8] = block_cddFF_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uddGj; else goto cddFG;
       uddGj: // global
           call _cddFF(R1) args: 0, res: 0, upd: 0;
       cddFG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoHeapProfile_$cfromEnum_info" {
     GHC.RTS.Flags.$fEnumDoHeapProfile_$cfromEnum_info:
         const GHC.RTS.Flags.$fEnumDoHeapProfile_$cfromEnum_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cddFF() //  [R1]
         { []
         }
     {offset
       cddFF: // global
           switch [0 .. 7] (%MO_UU_Conv_W32_W64(I32[I64[R1 - 1] + 20])) {
               case 0 : goto cddFJ;
               case 1 : goto cddFK;
               case 2 : goto cddFL;
               case 3 : goto cddFM;
               case 4 : goto cddFN;
               case 5 : goto cddFO;
               case 6 : goto cddFP;
               case 7 : goto cddFQ;
           }
       cddFQ: // global
           R1 = GHC.RTS.Flags.$fEnumDoHeapProfile9_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cddFP: // global
           R1 = GHC.RTS.Flags.$fEnumDoHeapProfile10_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cddFO: // global
           R1 = GHC.RTS.Flags.$fEnumDoHeapProfile11_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cddFN: // global
           R1 = GHC.RTS.Flags.$fEnumDoHeapProfile12_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cddFM: // global
           R1 = GHC.RTS.Flags.$fEnumDoCostCentres6_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cddFL: // global
           R1 = GHC.RTS.Flags.$fEnumDoCostCentres8_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cddFK: // global
           R1 = GHC.RTS.Flags.$fEnumDoCostCentres9_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cddFJ: // global
           R1 = GHC.RTS.Flags.$fEnumDoCostCentres10_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cddFF_info" {
     block_cddFF_info:
         const _cddFF;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.364797634 UTC

[section ""cstring" . lvl2_rcV50_bytes" {
     lvl2_rcV50_bytes:
         I8[] [105,110,118,97,108,105,100,32,101,110,117,109,32,102,111,114,32,68,111,72,101,97,112,80,114,111,102,105,108,101,58,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.368369189 UTC

[section ""data" . GHC.RTS.Flags.$wlvl1_closure" {
     GHC.RTS.Flags.$wlvl1_closure:
         const GHC.RTS.Flags.$wlvl1_info;
         const 0;
 },
 sat_sdcqO_entry() //  [R1]
         { []
         }
     {offset
       cddGT: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cddGU; else goto cddGV;
       cddGU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cddGV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cddGQ_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 16];
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcqO_info" {
     sat_sdcqO_info:
         const sat_sdcqO_entry;
         const 4294967296;
         const 17;
 },
 _cddGQ() //  [R1, R2]
         { []
         }
     {offset
       cddGQ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cddGY; else goto cddGX;
       cddGY: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cddGX: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cddGQ_info" {
     block_cddGQ_info:
         const _cddGQ;
         const 0;
         const 30;
 },
 GHC.RTS.Flags.$wlvl1_entry() //  [R2]
         { []
         }
     {offset
       cddH1: // global
           _sdcqK::I64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto cddH2; else goto cddH3;
       cddH3: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cddH5; else goto cddH4;
       cddH5: // global
           HpAlloc = 24;
           goto cddH2;
       cddH2: // global
           R2 = _sdcqK::I64;
           R1 = GHC.RTS.Flags.$wlvl1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cddH4: // global
           I64[Hp - 16] = sat_sdcqO_info;
           I64[Hp] = _sdcqK::I64;
           I64[Sp - 8] = block_cddGZ_info;
           R3 = Hp - 16;
           R2 = lvl2_rcV50_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$wlvl1_info" {
     GHC.RTS.Flags.$wlvl1_info:
         const GHC.RTS.Flags.$wlvl1_entry;
         const 0;
         const 2203318222862;
         const 4294967300;
         const SddB2_srt;
 },
 _cddGZ() //  [R1]
         { []
         }
     {offset
       cddGZ: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cddGZ_info" {
     block_cddGZ_info:
         const _cddGZ;
         const 0;
         const 4294967326;
         const SddB2_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.378769481 UTC

[section ""data" . GHC.RTS.Flags.$w$ctoEnum1_closure" {
     GHC.RTS.Flags.$w$ctoEnum1_closure:
         const GHC.RTS.Flags.$w$ctoEnum1_info;
         const 0;
 },
 GHC.RTS.Flags.$w$ctoEnum1_entry() //  [R2]
         { []
         }
     {offset
       cddHK: // global
           _sdcqR::I64 = R2;
           if (%MO_S_Ge_W64(R2, 9)) goto cddHB; else goto uddHN;
       uddHN: // global
           if (%MO_S_Lt_W64(_sdcqR::I64, 0)) goto cddHB; else goto uddHO;
       uddHO: // global
           switch [0 .. 8] _sdcqR::I64 {
               case 0 : goto cddHC;
               case 1 : goto cddHD;
               case 2 : goto cddHE;
               case 4 : goto cddHF;
               case 5 : goto cddHG;
               case 6 : goto cddHH;
               case 7 : goto cddHI;
               case 8 : goto cddHJ;
               default: {goto cddHB;}
           }
       cddHJ: // global
           R1 = GHC.RTS.Flags.HeapByClosureType_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cddHI: // global
           R1 = GHC.RTS.Flags.HeapByLDV_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cddHH: // global
           R1 = GHC.RTS.Flags.HeapByRetainer_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cddHG: // global
           R1 = GHC.RTS.Flags.HeapByType_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cddHF: // global
           R1 = GHC.RTS.Flags.HeapByDescr_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cddHE: // global
           R1 = GHC.RTS.Flags.HeapByMod_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cddHD: // global
           R1 = GHC.RTS.Flags.HeapByCCS_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cddHC: // global
           R1 = GHC.RTS.Flags.NoHeapProfiling_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cddHB: // global
           R2 = _sdcqR::I64;
           call GHC.RTS.Flags.$wlvl1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$w$ctoEnum1_info" {
     GHC.RTS.Flags.$w$ctoEnum1_info:
         const GHC.RTS.Flags.$w$ctoEnum1_entry;
         const 0;
         const 4294967310;
         const 4294967300;
         const SddB2_srt+72;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.384321874 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoHeapProfile_$ctoEnum_closure" {
     GHC.RTS.Flags.$fEnumDoHeapProfile_$ctoEnum_closure:
         const GHC.RTS.Flags.$fEnumDoHeapProfile_$ctoEnum_info;
         const 0;
 },
 GHC.RTS.Flags.$fEnumDoHeapProfile_$ctoEnum_entry() //  [R2]
         { []
         }
     {offset
       cddIb: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cddIc; else goto cddId;
       cddIc: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoHeapProfile_$ctoEnum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cddId: // global
           I64[Sp - 8] = block_cddI8_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uddIh; else goto cddI9;
       uddIh: // global
           call _cddI8(R1) args: 0, res: 0, upd: 0;
       cddI9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoHeapProfile_$ctoEnum_info" {
     GHC.RTS.Flags.$fEnumDoHeapProfile_$ctoEnum_info:
         const GHC.RTS.Flags.$fEnumDoHeapProfile_$ctoEnum_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SddB2_srt+80;
 },
 _cddI8() //  [R1]
         { []
         }
     {offset
       cddI8: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cddI8_info" {
     block_cddI8_info:
         const _cddI8;
         const 0;
         const 4294967326;
         const SddB2_srt+88;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.390527769 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoTrace_$cfromEnum_closure" {
     GHC.RTS.Flags.$fEnumDoTrace_$cfromEnum_closure:
         const GHC.RTS.Flags.$fEnumDoTrace_$cfromEnum_info;
 },
 GHC.RTS.Flags.$fEnumDoTrace_$cfromEnum_entry() //  [R2]
         { []
         }
     {offset
       cddIE: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cddIF; else goto cddIG;
       cddIF: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoTrace_$cfromEnum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cddIG: // global
           I64[Sp - 8] = block_cddIw_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uddIR; else goto cddIx;
       uddIR: // global
           call _cddIw(R1) args: 0, res: 0, upd: 0;
       cddIx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoTrace_$cfromEnum_info" {
     GHC.RTS.Flags.$fEnumDoTrace_$cfromEnum_info:
         const GHC.RTS.Flags.$fEnumDoTrace_$cfromEnum_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cddIw() //  [R1]
         { []
         }
     {offset
       cddIw: // global
           _cddID::P64 = R1 & 7;
           if (_cddID::P64 < 3) goto uddIQ; else goto cddIC;
       uddIQ: // global
           if (_cddID::P64 < 2) goto cddIA; else goto cddIB;
       cddIA: // global
           R1 = GHC.RTS.Flags.$fEnumDoCostCentres10_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cddIB: // global
           R1 = GHC.RTS.Flags.$fEnumDoCostCentres9_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cddIC: // global
           R1 = GHC.RTS.Flags.$fEnumDoCostCentres8_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cddIw_info" {
     block_cddIw_info:
         const _cddIw;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.396418868 UTC

[section ""cstring" . lvl3_rcV51_bytes" {
     lvl3_rcV51_bytes:
         I8[] [105,110,118,97,108,105,100,32,101,110,117,109,32,102,111,114,32,68,111,84,114,97,99,101,58,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.400163472 UTC

[section ""data" . GHC.RTS.Flags.$wlvl2_closure" {
     GHC.RTS.Flags.$wlvl2_closure:
         const GHC.RTS.Flags.$wlvl2_info;
         const 0;
 },
 sat_sdcr1_entry() //  [R1]
         { []
         }
     {offset
       cddJi: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cddJj; else goto cddJk;
       cddJj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cddJk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cddJf_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 16];
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcr1_info" {
     sat_sdcr1_info:
         const sat_sdcr1_entry;
         const 4294967296;
         const 17;
 },
 _cddJf() //  [R1, R2]
         { []
         }
     {offset
       cddJf: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cddJn; else goto cddJm;
       cddJn: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cddJm: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cddJf_info" {
     block_cddJf_info:
         const _cddJf;
         const 0;
         const 30;
 },
 GHC.RTS.Flags.$wlvl2_entry() //  [R2]
         { []
         }
     {offset
       cddJq: // global
           _sdcqX::I64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto cddJr; else goto cddJs;
       cddJs: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cddJu; else goto cddJt;
       cddJu: // global
           HpAlloc = 24;
           goto cddJr;
       cddJr: // global
           R2 = _sdcqX::I64;
           R1 = GHC.RTS.Flags.$wlvl2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cddJt: // global
           I64[Hp - 16] = sat_sdcr1_info;
           I64[Hp] = _sdcqX::I64;
           I64[Sp - 8] = block_cddJo_info;
           R3 = Hp - 16;
           R2 = lvl3_rcV51_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$wlvl2_info" {
     GHC.RTS.Flags.$wlvl2_info:
         const GHC.RTS.Flags.$wlvl2_entry;
         const 0;
         const 17596481011726;
         const 4294967300;
         const SddB2_srt;
 },
 _cddJo() //  [R1]
         { []
         }
     {offset
       cddJo: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cddJo_info" {
     block_cddJo_info:
         const _cddJo;
         const 0;
         const 4294967326;
         const SddB2_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.41036358 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoTrace1_closure" {
     GHC.RTS.Flags.$fEnumDoTrace1_closure:
         const GHC.RTS.Flags.$fEnumDoTrace1_info;
         const 0;
 },
 GHC.RTS.Flags.$fEnumDoTrace1_entry() //  [R2]
         { []
         }
     {offset
       cddK1: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cddK2; else goto cddK3;
       cddK2: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoTrace1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cddK3: // global
           I64[Sp - 8] = block_cddJY_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uddK7; else goto cddJZ;
       uddK7: // global
           call _cddJY(R1) args: 0, res: 0, upd: 0;
       cddJZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoTrace1_info" {
     GHC.RTS.Flags.$fEnumDoTrace1_info:
         const GHC.RTS.Flags.$fEnumDoTrace1_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SddB2_srt+96;
 },
 _cddJY() //  [R1]
         { []
         }
     {offset
       cddJY: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.RTS.Flags.$wlvl2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cddJY_info" {
     block_cddJY_info:
         const _cddJY;
         const 0;
         const 4294967326;
         const SddB2_srt+96;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.417470565 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoTrace_$ctoEnum_closure" {
     GHC.RTS.Flags.$fEnumDoTrace_$ctoEnum_closure:
         const GHC.RTS.Flags.$fEnumDoTrace_$ctoEnum_info;
         const 0;
 },
 GHC.RTS.Flags.$fEnumDoTrace_$ctoEnum_entry() //  [R2]
         { []
         }
     {offset
       cddKp: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cddKq; else goto cddKr;
       cddKq: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoTrace_$ctoEnum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cddKr: // global
           I64[Sp - 8] = block_cddKm_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uddKE; else goto cddKn;
       uddKE: // global
           call _cddKm(R1) args: 0, res: 0, upd: 0;
       cddKn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoTrace_$ctoEnum_info" {
     GHC.RTS.Flags.$fEnumDoTrace_$ctoEnum_info:
         const GHC.RTS.Flags.$fEnumDoTrace_$ctoEnum_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const SddB2_srt+96;
 },
 _cddKm() //  [R1]
         { []
         }
     {offset
       cddKm: // global
           _sdcr9::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_sdcr9::I64, 2)) goto uddKB; else goto uddKD;
       uddKB: // global
           if (%MO_S_Lt_W64(_sdcr9::I64, 1)) goto uddKC; else goto cddKz;
       uddKC: // global
           if (%MO_S_Lt_W64(_sdcr9::I64, 0)) goto cddKx; else goto cddKy;
       cddKy: // global
           R1 = GHC.RTS.Flags.TraceNone_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cddKz: // global
           R1 = GHC.RTS.Flags.TraceEventLog_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       uddKD: // global
           if (%MO_S_Ge_W64(_sdcr9::I64, 3)) goto cddKx; else goto cddKA;
       cddKx: // global
           R2 = _sdcr9::I64;
           Sp = Sp + 8;
           call GHC.RTS.Flags.$wlvl2_entry(R2) args: 8, res: 0, upd: 8;
       cddKA: // global
           R1 = GHC.RTS.Flags.TraceStderr_closure+3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cddKm_info" {
     block_cddKm_info:
         const _cddKm;
         const 0;
         const 4294967326;
         const SddB2_srt+96;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.423420051 UTC

[section ""cstring" . GHC.RTS.Flags.$fShowCCFlags2_bytes" {
     GHC.RTS.Flags.$fShowCCFlags2_bytes:
         I8[] [125]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.425767434 UTC

[section ""data" . g_rcV52_closure" {
     g_rcV52_closure:
         const g_rcV52_info;
         const 0;
         const 0;
         const 0;
 },
 g_rcV52_entry() //  [R1]
         { []
         }
     {offset
       cddKZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cddL0; else goto cddL1;
       cddL0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cddL1: // global
           (_cddKW::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cddKW::I64 == 0) goto cddKY; else goto cddKX;
       cddKY: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cddKX: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cddKW::I64;
           R2 = GHC.RTS.Flags.$fShowCCFlags2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . g_rcV52_info" {
     g_rcV52_info:
         const g_rcV52_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.429284638 UTC

[section ""cstring" . lvl4_rcV53_bytes" {
     lvl4_rcV53_bytes:
         I8[] [80,97,114,70,108,97,103,115,32,123]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.430945205 UTC

[section ""cstring" . lvl5_rcV54_bytes" {
     lvl5_rcV54_bytes:
         I8[] [110,67,97,112,97,98,105,108,105,116,105,101,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.432643902 UTC

[section ""cstring" . lvl6_rcV55_bytes" {
     lvl6_rcV55_bytes:
         I8[] [109,105,103,114,97,116,101,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.434408981 UTC

[section ""cstring" . lvl7_rcV56_bytes" {
     lvl7_rcV56_bytes:
         I8[] [109,97,120,76,111,99,97,108,83,112,97,114,107,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.436234695 UTC

[section ""cstring" . lvl8_rcV57_bytes" {
     lvl8_rcV57_bytes:
         I8[] [112,97,114,71,99,69,110,97,98,108,101,100,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.4383743 UTC

[section ""cstring" . lvl9_rcV58_bytes" {
     lvl9_rcV58_bytes:
         I8[] [112,97,114,71,99,71,101,110,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.442281082 UTC

[section ""cstring" . lvl10_rcV59_bytes" {
     lvl10_rcV59_bytes:
         I8[] [112,97,114,71,99,76,111,97,100,66,97,108,97,110,99,105,110,103,69,110,97,98,108,101,100,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.445103411 UTC

[section ""cstring" . lvl11_rcV5a_bytes" {
     lvl11_rcV5a_bytes:
         I8[] [112,97,114,71,99,76,111,97,100,66,97,108,97,110,99,105,110,103,71,101,110,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.449193727 UTC

[section ""cstring" . lvl12_rcV5b_bytes" {
     lvl12_rcV5b_bytes:
         I8[] [112,97,114,71,99,78,111,83,121,110,99,87,105,116,104,73,100,108,101,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.452044428 UTC

[section ""cstring" . lvl13_rcV5c_bytes" {
     lvl13_rcV5c_bytes:
         I8[] [112,97,114,71,99,84,104,114,101,97,100,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.454034453 UTC

[section ""cstring" . lvl14_rcV5d_bytes" {
     lvl14_rcV5d_bytes:
         I8[] [115,101,116,65,102,102,105,110,105,116,121,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.488311339 UTC

[section ""data" . GHC.RTS.Flags.$fShowParFlags_$cshowsPrec_closure" {
     GHC.RTS.Flags.$fShowParFlags_$cshowsPrec_closure:
         const GHC.RTS.Flags.$fShowParFlags_$cshowsPrec_info;
         const 0;
 },
 sat_sdcrO_entry() //  [R1]
         { []
         }
     {offset
       cddO9: // global
           R3 = P64[R1 + 16];
           R2 = g_rcV52_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcrO_info" {
     sat_sdcrO_info:
         const sat_sdcrO_entry;
         const 1;
         const 4294967312;
         const SddB2_srt+120;
 },
 sat_sdcrP_entry() //  [R1]
         { []
         }
     {offset
       cddOi: // global
           R3 = P64[R1 + 16];
           R2 = g_rcV52_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcrP_info" {
     sat_sdcrP_info:
         const sat_sdcrP_entry;
         const 1;
         const 4294967312;
         const SddB2_srt+120;
 },
 sat_sdcrQ_entry() //  [R1]
         { []
         }
     {offset
       cddOp: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cddOq; else goto cddOr;
       cddOq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cddOr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cddO0_info;
           _sdcrr::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _sdcrr::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uddOy; else goto cddO1;
       uddOy: // global
           call _cddO0(R1) args: 0, res: 0, upd: 0;
       cddO1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcrQ_info" {
     sat_sdcrQ_info:
         const sat_sdcrQ_entry;
         const 2;
         const 30064771090;
         const SddB2_srt+120;
 },
 _cddO0() //  [R1]
         { []
         }
     {offset
       cddO0: // global
           _sdcrr::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cddOm; else goto cddOn;
       cddOm: // global
           Hp = Hp + 24;
           _sdcrN::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cddOx; else goto cddOt;
       cddOt: // global
           I64[Hp - 16] = sat_sdcrO_info;
           P64[Hp] = _sdcrr::P64;
           R3 = Hp - 16;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cddOn: // global
           Hp = Hp + 24;
           _sdcrN::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cddOx; else goto cddOw;
       cddOx: // global
           HpAlloc = 24;
           R1 = _sdcrN::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cddOw: // global
           I64[Hp - 16] = sat_sdcrP_info;
           P64[Hp] = _sdcrr::P64;
           R3 = Hp - 16;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cddO0_info" {
     block_cddO0_info:
         const _cddO0;
         const 1;
         const 30064771102;
         const SddB2_srt+120;
 },
 sat_sdcrR_entry() //  [R1]
         { []
         }
     {offset
       cddOz: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cddOD; else goto cddOC;
       cddOD: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cddOC: // global
           _sdcrn::P64 = P64[R1 + 16];
           _sdcrr::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_sdcrQ_info;
           P64[Hp - 8] = _sdcrn::P64;
           P64[Hp] = _sdcrr::P64;
           R3 = Hp - 24;
           R2 = lvl14_rcV5d_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcrR_info" {
     sat_sdcrR_info:
         const sat_sdcrR_entry;
         const 2;
         const 30064771090;
         const SddB2_srt+120;
 },
 sat_sdcrS_entry() //  [R1]
         { []
         }
     {offset
       cddOE: // global
           _sdcrS::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cddOF; else goto cddOG;
       cddOG: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cddOI; else goto cddOH;
       cddOI: // global
           HpAlloc = 32;
           goto cddOF;
       cddOF: // global
           R1 = _sdcrS::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cddOH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcrS::P64;
           _sdcrn::P64 = P64[_sdcrS::P64 + 16];
           _sdcrr::P64 = P64[_sdcrS::P64 + 24];
           I64[Hp - 24] = sat_sdcrR_info;
           P64[Hp - 8] = _sdcrn::P64;
           P64[Hp] = _sdcrr::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcrS_info" {
     sat_sdcrS_info:
         const sat_sdcrS_entry;
         const 2;
         const 64424509458;
         const SddB2_srt+120;
 },
 sat_sdcrW_entry() //  [R1]
         { []
         }
     {offset
       cddOJ: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cddOQ; else goto cddOR;
       cddOQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cddOR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cddNJ_info;
           _sdcrn::P64 = P64[R1 + 24];
           _sdcrr::P64 = P64[R1 + 32];
           R1 = P64[R1 + 16];
           P64[Sp - 32] = _sdcrn::P64;
           P64[Sp - 24] = _sdcrr::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto uddOY; else goto cddNK;
       uddOY: // global
           call _cddNJ(R1) args: 0, res: 0, upd: 0;
       cddNK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcrW_info" {
     sat_sdcrW_info:
         const sat_sdcrW_entry;
         const 3;
         const 64424509455;
         const SddB2_srt+120;
 },
 _cddNJ() //  [R1]
         { []
         }
     {offset
       cddNJ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cddOU; else goto cddOT;
       cddOU: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cddOT: // global
           _sdcrL::I64 = I64[R1 + 7];
           I64[Hp - 24] = sat_sdcrS_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_cddON_info;
           R3 = Hp - 24;
           R2 = _sdcrL::I64;
           Sp = Sp + 16;
           call GHC.Show.$witos_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cddNJ_info" {
     block_cddNJ_info:
         const _cddNJ;
         const 2;
         const 64424509470;
         const SddB2_srt+120;
 },
 _cddON() //  [R1, R2]
         { []
         }
     {offset
       cddON: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cddOX; else goto cddOW;
       cddOX: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cddOW: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cddON_info" {
     block_cddON_info:
         const _cddON;
         const 0;
         const 30;
 },
 sat_sdcrX_entry() //  [R1]
         { []
         }
     {offset
       cddOZ: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cddP3; else goto cddP2;
       cddP3: // global
           HpAlloc = 40;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cddP2: // global
           _sdcrm::P64 = P64[R1 + 16];
           _sdcrn::P64 = P64[R1 + 24];
           _sdcrr::P64 = P64[R1 + 32];
           I64[Hp - 32] = sat_sdcrW_info;
           P64[Hp - 16] = _sdcrm::P64;
           P64[Hp - 8] = _sdcrn::P64;
           P64[Hp] = _sdcrr::P64;
           R3 = Hp - 32;
           R2 = lvl13_rcV5c_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcrX_info" {
     sat_sdcrX_info:
         const sat_sdcrX_entry;
         const 3;
         const 64424509455;
         const SddB2_srt+120;
 },
 sat_sdcrY_entry() //  [R1]
         { []
         }
     {offset
       cddP4: // global
           _sdcrY::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cddP5; else goto cddP6;
       cddP6: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cddP8; else goto cddP7;
       cddP8: // global
           HpAlloc = 40;
           goto cddP5;
       cddP5: // global
           R1 = _sdcrY::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cddP7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcrY::P64;
           _sdcrm::P64 = P64[_sdcrY::P64 + 16];
           _sdcrn::P64 = P64[_sdcrY::P64 + 24];
           _sdcrr::P64 = P64[_sdcrY::P64 + 32];
           I64[Hp - 32] = sat_sdcrX_info;
           P64[Hp - 16] = _sdcrm::P64;
           P64[Hp - 8] = _sdcrn::P64;
           P64[Hp] = _sdcrr::P64;
           R3 = Hp - 32;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcrY_info" {
     sat_sdcrY_info:
         const sat_sdcrY_entry;
         const 3;
         const 64424509455;
         const SddB2_srt+120;
 },
 sat_sdcs2_entry() //  [R1]
         { []
         }
     {offset
       cddP9: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cddPg; else goto cddPh;
       cddPg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cddPh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_cddNs_info;
           _sdcrm::P64 = P64[R1 + 24];
           _sdcrn::P64 = P64[R1 + 32];
           _sdcrr::P64 = P64[R1 + 40];
           R1 = P64[R1 + 16];
           P64[Sp - 40] = _sdcrm::P64;
           P64[Sp - 32] = _sdcrn::P64;
           P64[Sp - 24] = _sdcrr::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto uddPo; else goto cddNt;
       uddPo: // global
           call _cddNs(R1) args: 0, res: 0, upd: 0;
       cddNt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcs2_info" {
     sat_sdcs2_info:
         const sat_sdcs2_entry;
         const 4;
         const 64424509455;
         const SddB2_srt+120;
 },
 _cddNs() //  [R1]
         { []
         }
     {offset
       cddNs: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cddPk; else goto cddPj;
       cddPk: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cddPj: // global
           _sdcrI::I64 = I64[R1 + 7];
           I64[Hp - 32] = sat_sdcrY_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 24];
           I64[Sp + 24] = block_cddPd_info;
           R3 = Hp - 32;
           R2 = _sdcrI::I64;
           Sp = Sp + 24;
           call GHC.Show.$witos_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cddNs_info" {
     block_cddNs_info:
         const _cddNs;
         const 3;
         const 64424509470;
         const SddB2_srt+120;
 },
 _cddPd() //  [R1, R2]
         { []
         }
     {offset
       cddPd: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cddPn; else goto cddPm;
       cddPn: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cddPm: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cddPd_info" {
     block_cddPd_info:
         const _cddPd;
         const 0;
         const 30;
 },
 sat_sdcs3_entry() //  [R1]
         { []
         }
     {offset
       cddPp: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cddPt; else goto cddPs;
       cddPt: // global
           HpAlloc = 48;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cddPs: // global
           _sdcrl::P64 = P64[R1 + 16];
           _sdcrm::P64 = P64[R1 + 24];
           _sdcrn::P64 = P64[R1 + 32];
           _sdcrr::P64 = P64[R1 + 40];
           I64[Hp - 40] = sat_sdcs2_info;
           P64[Hp - 24] = _sdcrl::P64;
           P64[Hp - 16] = _sdcrm::P64;
           P64[Hp - 8] = _sdcrn::P64;
           P64[Hp] = _sdcrr::P64;
           R3 = Hp - 40;
           R2 = lvl12_rcV5b_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcs3_info" {
     sat_sdcs3_info:
         const sat_sdcs3_entry;
         const 4;
         const 64424509455;
         const SddB2_srt+120;
 },
 sat_sdcs4_entry() //  [R1]
         { []
         }
     {offset
       cddPu: // global
           _sdcs4::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cddPv; else goto cddPw;
       cddPw: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cddPy; else goto cddPx;
       cddPy: // global
           HpAlloc = 48;
           goto cddPv;
       cddPv: // global
           R1 = _sdcs4::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cddPx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcs4::P64;
           _sdcrl::P64 = P64[_sdcs4::P64 + 16];
           _sdcrm::P64 = P64[_sdcs4::P64 + 24];
           _sdcrn::P64 = P64[_sdcs4::P64 + 32];
           _sdcrr::P64 = P64[_sdcs4::P64 + 40];
           I64[Hp - 40] = sat_sdcs3_info;
           P64[Hp - 24] = _sdcrl::P64;
           P64[Hp - 16] = _sdcrm::P64;
           P64[Hp - 8] = _sdcrn::P64;
           P64[Hp] = _sdcrr::P64;
           R3 = Hp - 40;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcs4_info" {
     sat_sdcs4_info:
         const sat_sdcs4_entry;
         const 4;
         const 64424509455;
         const SddB2_srt+120;
 },
 sat_sdcs8_entry() //  [R1]
         { []
         }
     {offset
       cddPz: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cddPG; else goto cddPH;
       cddPG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cddPH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 56] = block_cddNb_info;
           _sdcrl::P64 = P64[R1 + 24];
           _sdcrm::P64 = P64[R1 + 32];
           _sdcrn::P64 = P64[R1 + 40];
           _sdcrr::P64 = P64[R1 + 48];
           R1 = P64[R1 + 16];
           P64[Sp - 48] = _sdcrl::P64;
           P64[Sp - 40] = _sdcrm::P64;
           P64[Sp - 32] = _sdcrn::P64;
           P64[Sp - 24] = _sdcrr::P64;
           Sp = Sp - 56;
           if (R1 & 7 != 0) goto uddPO; else goto cddNc;
       uddPO: // global
           call _cddNb(R1) args: 0, res: 0, upd: 0;
       cddNc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcs8_info" {
     sat_sdcs8_info:
         const sat_sdcs8_entry;
         const 5;
         const 64424509455;
         const SddB2_srt+120;
 },
 _cddNb() //  [R1]
         { []
         }
     {offset
       cddNb: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cddPK; else goto cddPJ;
       cddPK: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cddPJ: // global
           _sdcrF::I64 = I64[R1 + 7];
           I64[Hp - 40] = sat_sdcs4_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = P64[Sp + 32];
           I64[Sp + 32] = block_cddPD_info;
           R3 = Hp - 40;
           R2 = _sdcrF::I64;
           Sp = Sp + 32;
           call GHC.Show.$witos_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cddNb_info" {
     block_cddNb_info:
         const _cddNb;
         const 4;
         const 64424509470;
         const SddB2_srt+120;
 },
 _cddPD() //  [R1, R2]
         { []
         }
     {offset
       cddPD: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cddPN; else goto cddPM;
       cddPN: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cddPM: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cddPD_info" {
     block_cddPD_info:
         const _cddPD;
         const 0;
         const 30;
 },
 sat_sdcs9_entry() //  [R1]
         { []
         }
     {offset
       cddPP: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cddPT; else goto cddPS;
       cddPT: // global
           HpAlloc = 56;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cddPS: // global
           _sdcrk::P64 = P64[R1 + 16];
           _sdcrl::P64 = P64[R1 + 24];
           _sdcrm::P64 = P64[R1 + 32];
           _sdcrn::P64 = P64[R1 + 40];
           _sdcrr::P64 = P64[R1 + 48];
           I64[Hp - 48] = sat_sdcs8_info;
           P64[Hp - 32] = _sdcrk::P64;
           P64[Hp - 24] = _sdcrl::P64;
           P64[Hp - 16] = _sdcrm::P64;
           P64[Hp - 8] = _sdcrn::P64;
           P64[Hp] = _sdcrr::P64;
           R3 = Hp - 48;
           R2 = lvl11_rcV5a_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcs9_info" {
     sat_sdcs9_info:
         const sat_sdcs9_entry;
         const 5;
         const 64424509455;
         const SddB2_srt+120;
 },
 eta3_sdcrD_entry() //  [R1]
         { []
         }
     {offset
       cddPU: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cddPY; else goto cddPX;
       cddPY: // global
           HpAlloc = 56;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cddPX: // global
           _sdcrk::P64 = P64[R1 + 16];
           _sdcrl::P64 = P64[R1 + 24];
           _sdcrm::P64 = P64[R1 + 32];
           _sdcrn::P64 = P64[R1 + 40];
           _sdcrr::P64 = P64[R1 + 48];
           I64[Hp - 48] = sat_sdcs9_info;
           P64[Hp - 32] = _sdcrk::P64;
           P64[Hp - 24] = _sdcrl::P64;
           P64[Hp - 16] = _sdcrm::P64;
           P64[Hp - 8] = _sdcrn::P64;
           P64[Hp] = _sdcrr::P64;
           R3 = Hp - 48;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . eta3_sdcrD_info" {
     eta3_sdcrD_info:
         const eta3_sdcrD_entry;
         const 5;
         const 64424509455;
         const SddB2_srt+120;
 },
 sat_sdcsb_entry() //  [R1]
         { []
         }
     {offset
       cddQ6: // global
           _sdcsb::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cddQ7; else goto cddQ8;
       cddQ8: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cddQa; else goto cddQ9;
       cddQa: // global
           HpAlloc = 56;
           goto cddQ7;
       cddQ7: // global
           R1 = _sdcsb::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cddQ9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcsb::P64;
           _sdcrj::P64 = P64[_sdcsb::P64 + 16];
           _sdcrk::P64 = P64[_sdcsb::P64 + 24];
           _sdcrl::P64 = P64[_sdcsb::P64 + 32];
           _sdcrm::P64 = P64[_sdcsb::P64 + 40];
           _sdcrn::P64 = P64[_sdcsb::P64 + 48];
           _sdcrr::P64 = P64[_sdcsb::P64 + 56];
           I64[Hp - 48] = eta3_sdcrD_info;
           P64[Hp - 32] = _sdcrk::P64;
           P64[Hp - 24] = _sdcrl::P64;
           P64[Hp - 16] = _sdcrm::P64;
           P64[Hp - 8] = _sdcrn::P64;
           P64[Hp] = _sdcrr::P64;
           I64[Sp - 32] = block_cddPZ_info;
           R1 = _sdcrj::P64;
           P64[Sp - 24] = Hp - 48;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uddQh; else goto cddQ0;
       uddQh: // global
           call _cddPZ(R1) args: 0, res: 0, upd: 0;
       cddQ0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcsb_info" {
     sat_sdcsb_info:
         const sat_sdcsb_entry;
         const 6;
         const 64424509455;
         const SddB2_srt+120;
 },
 _cddPZ() //  [R1]
         { []
         }
     {offset
       cddPZ: // global
           _cddMZ::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cddQ3; else goto cddQ4;
       cddQ3: // global
           R3 = _cddMZ::P64;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cddQ4: // global
           R3 = _cddMZ::P64;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cddPZ_info" {
     block_cddPZ_info:
         const _cddPZ;
         const 1;
         const 12884901918;
         const SddB2_srt+128;
 },
 sat_sdcsc_entry() //  [R1]
         { []
         }
     {offset
       cddQi: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cddQm; else goto cddQl;
       cddQm: // global
           HpAlloc = 64;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cddQl: // global
           _sdcrj::P64 = P64[R1 + 16];
           _sdcrk::P64 = P64[R1 + 24];
           _sdcrl::P64 = P64[R1 + 32];
           _sdcrm::P64 = P64[R1 + 40];
           _sdcrn::P64 = P64[R1 + 48];
           _sdcrr::P64 = P64[R1 + 56];
           I64[Hp - 56] = sat_sdcsb_info;
           P64[Hp - 40] = _sdcrj::P64;
           P64[Hp - 32] = _sdcrk::P64;
           P64[Hp - 24] = _sdcrl::P64;
           P64[Hp - 16] = _sdcrm::P64;
           P64[Hp - 8] = _sdcrn::P64;
           P64[Hp] = _sdcrr::P64;
           R3 = Hp - 56;
           R2 = lvl10_rcV59_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcsc_info" {
     sat_sdcsc_info:
         const sat_sdcsc_entry;
         const 6;
         const 64424509455;
         const SddB2_srt+120;
 },
 sat_sdcsd_entry() //  [R1]
         { []
         }
     {offset
       cddQn: // global
           _sdcsd::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cddQo; else goto cddQp;
       cddQp: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cddQr; else goto cddQq;
       cddQr: // global
           HpAlloc = 64;
           goto cddQo;
       cddQo: // global
           R1 = _sdcsd::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cddQq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcsd::P64;
           _sdcrj::P64 = P64[_sdcsd::P64 + 16];
           _sdcrk::P64 = P64[_sdcsd::P64 + 24];
           _sdcrl::P64 = P64[_sdcsd::P64 + 32];
           _sdcrm::P64 = P64[_sdcsd::P64 + 40];
           _sdcrn::P64 = P64[_sdcsd::P64 + 48];
           _sdcrr::P64 = P64[_sdcsd::P64 + 56];
           I64[Hp - 56] = sat_sdcsc_info;
           P64[Hp - 40] = _sdcrj::P64;
           P64[Hp - 32] = _sdcrk::P64;
           P64[Hp - 24] = _sdcrl::P64;
           P64[Hp - 16] = _sdcrm::P64;
           P64[Hp - 8] = _sdcrn::P64;
           P64[Hp] = _sdcrr::P64;
           R3 = Hp - 56;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcsd_info" {
     sat_sdcsd_info:
         const sat_sdcsd_entry;
         const 6;
         const 64424509455;
         const SddB2_srt+120;
 },
 sat_sdcsh_entry() //  [R1]
         { []
         }
     {offset
       cddQs: // global
           if ((Sp + -72) < SpLim) (likely: False) goto cddQz; else goto cddQA;
       cddQz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cddQA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 72] = block_cddMI_info;
           _sdcrj::P64 = P64[R1 + 24];
           _sdcrk::P64 = P64[R1 + 32];
           _sdcrl::P64 = P64[R1 + 40];
           _sdcrm::P64 = P64[R1 + 48];
           _sdcrn::P64 = P64[R1 + 56];
           _sdcrr::P64 = P64[R1 + 64];
           R1 = P64[R1 + 16];
           P64[Sp - 64] = _sdcrj::P64;
           P64[Sp - 56] = _sdcrk::P64;
           P64[Sp - 48] = _sdcrl::P64;
           P64[Sp - 40] = _sdcrm::P64;
           P64[Sp - 32] = _sdcrn::P64;
           P64[Sp - 24] = _sdcrr::P64;
           Sp = Sp - 72;
           if (R1 & 7 != 0) goto uddQH; else goto cddMJ;
       uddQH: // global
           call _cddMI(R1) args: 0, res: 0, upd: 0;
       cddMJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcsh_info" {
     sat_sdcsh_info:
         const sat_sdcsh_entry;
         const 7;
         const 64424509455;
         const SddB2_srt+120;
 },
 _cddMI() //  [R1]
         { []
         }
     {offset
       cddMI: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cddQD; else goto cddQC;
       cddQD: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cddQC: // global
           _sdcrB::I64 = I64[R1 + 7];
           I64[Hp - 56] = sat_sdcsd_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = P64[Sp + 48];
           I64[Sp + 48] = block_cddQw_info;
           R3 = Hp - 56;
           R2 = _sdcrB::I64;
           Sp = Sp + 48;
           call GHC.Show.$witos_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cddMI_info" {
     block_cddMI_info:
         const _cddMI;
         const 6;
         const 64424509470;
         const SddB2_srt+120;
 },
 _cddQw() //  [R1, R2]
         { []
         }
     {offset
       cddQw: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cddQG; else goto cddQF;
       cddQG: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cddQF: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cddQw_info" {
     block_cddQw_info:
         const _cddQw;
         const 0;
         const 30;
 },
 sat_sdcsi_entry() //  [R1]
         { []
         }
     {offset
       cddQI: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cddQM; else goto cddQL;
       cddQM: // global
           HpAlloc = 72;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cddQL: // global
           _sdcri::P64 = P64[R1 + 16];
           _sdcrj::P64 = P64[R1 + 24];
           _sdcrk::P64 = P64[R1 + 32];
           _sdcrl::P64 = P64[R1 + 40];
           _sdcrm::P64 = P64[R1 + 48];
           _sdcrn::P64 = P64[R1 + 56];
           _sdcrr::P64 = P64[R1 + 64];
           I64[Hp - 64] = sat_sdcsh_info;
           P64[Hp - 48] = _sdcri::P64;
           P64[Hp - 40] = _sdcrj::P64;
           P64[Hp - 32] = _sdcrk::P64;
           P64[Hp - 24] = _sdcrl::P64;
           P64[Hp - 16] = _sdcrm::P64;
           P64[Hp - 8] = _sdcrn::P64;
           P64[Hp] = _sdcrr::P64;
           R3 = Hp - 64;
           R2 = lvl9_rcV58_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcsi_info" {
     sat_sdcsi_info:
         const sat_sdcsi_entry;
         const 7;
         const 64424509455;
         const SddB2_srt+120;
 },
 eta2_sdcrz_entry() //  [R1]
         { []
         }
     {offset
       cddQN: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cddQR; else goto cddQQ;
       cddQR: // global
           HpAlloc = 72;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cddQQ: // global
           _sdcri::P64 = P64[R1 + 16];
           _sdcrj::P64 = P64[R1 + 24];
           _sdcrk::P64 = P64[R1 + 32];
           _sdcrl::P64 = P64[R1 + 40];
           _sdcrm::P64 = P64[R1 + 48];
           _sdcrn::P64 = P64[R1 + 56];
           _sdcrr::P64 = P64[R1 + 64];
           I64[Hp - 64] = sat_sdcsi_info;
           P64[Hp - 48] = _sdcri::P64;
           P64[Hp - 40] = _sdcrj::P64;
           P64[Hp - 32] = _sdcrk::P64;
           P64[Hp - 24] = _sdcrl::P64;
           P64[Hp - 16] = _sdcrm::P64;
           P64[Hp - 8] = _sdcrn::P64;
           P64[Hp] = _sdcrr::P64;
           R3 = Hp - 64;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . eta2_sdcrz_info" {
     eta2_sdcrz_info:
         const eta2_sdcrz_entry;
         const 7;
         const 64424509455;
         const SddB2_srt+120;
 },
 sat_sdcsk_entry() //  [R1]
         { []
         }
     {offset
       cddQZ: // global
           _sdcsk::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cddR0; else goto cddR1;
       cddR1: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cddR3; else goto cddR2;
       cddR3: // global
           HpAlloc = 72;
           goto cddR0;
       cddR0: // global
           R1 = _sdcsk::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cddR2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcsk::P64;
           _sdcrh::P64 = P64[_sdcsk::P64 + 16];
           _sdcri::P64 = P64[_sdcsk::P64 + 24];
           _sdcrj::P64 = P64[_sdcsk::P64 + 32];
           _sdcrk::P64 = P64[_sdcsk::P64 + 40];
           _sdcrl::P64 = P64[_sdcsk::P64 + 48];
           _sdcrm::P64 = P64[_sdcsk::P64 + 56];
           _sdcrn::P64 = P64[_sdcsk::P64 + 64];
           _sdcrr::P64 = P64[_sdcsk::P64 + 72];
           I64[Hp - 64] = eta2_sdcrz_info;
           P64[Hp - 48] = _sdcri::P64;
           P64[Hp - 40] = _sdcrj::P64;
           P64[Hp - 32] = _sdcrk::P64;
           P64[Hp - 24] = _sdcrl::P64;
           P64[Hp - 16] = _sdcrm::P64;
           P64[Hp - 8] = _sdcrn::P64;
           P64[Hp] = _sdcrr::P64;
           I64[Sp - 32] = block_cddQS_info;
           R1 = _sdcrh::P64;
           P64[Sp - 24] = Hp - 64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uddRa; else goto cddQT;
       uddRa: // global
           call _cddQS(R1) args: 0, res: 0, upd: 0;
       cddQT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcsk_info" {
     sat_sdcsk_info:
         const sat_sdcsk_entry;
         const 8;
         const 64424509455;
         const SddB2_srt+120;
 },
 _cddQS() //  [R1]
         { []
         }
     {offset
       cddQS: // global
           _cddMw::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cddQW; else goto cddQX;
       cddQW: // global
           R3 = _cddMw::P64;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cddQX: // global
           R3 = _cddMw::P64;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cddQS_info" {
     block_cddQS_info:
         const _cddQS;
         const 1;
         const 12884901918;
         const SddB2_srt+128;
 },
 sat_sdcsl_entry() //  [R1]
         { []
         }
     {offset
       cddRb: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cddRf; else goto cddRe;
       cddRf: // global
           HpAlloc = 80;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cddRe: // global
           _sdcrh::P64 = P64[R1 + 16];
           _sdcri::P64 = P64[R1 + 24];
           _sdcrj::P64 = P64[R1 + 32];
           _sdcrk::P64 = P64[R1 + 40];
           _sdcrl::P64 = P64[R1 + 48];
           _sdcrm::P64 = P64[R1 + 56];
           _sdcrn::P64 = P64[R1 + 64];
           _sdcrr::P64 = P64[R1 + 72];
           I64[Hp - 72] = sat_sdcsk_info;
           P64[Hp - 56] = _sdcrh::P64;
           P64[Hp - 48] = _sdcri::P64;
           P64[Hp - 40] = _sdcrj::P64;
           P64[Hp - 32] = _sdcrk::P64;
           P64[Hp - 24] = _sdcrl::P64;
           P64[Hp - 16] = _sdcrm::P64;
           P64[Hp - 8] = _sdcrn::P64;
           P64[Hp] = _sdcrr::P64;
           R3 = Hp - 72;
           R2 = lvl8_rcV57_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcsl_info" {
     sat_sdcsl_info:
         const sat_sdcsl_entry;
         const 8;
         const 64424509455;
         const SddB2_srt+120;
 },
 sat_sdcsm_entry() //  [R1]
         { []
         }
     {offset
       cddRg: // global
           _sdcsm::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cddRh; else goto cddRi;
       cddRi: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cddRk; else goto cddRj;
       cddRk: // global
           HpAlloc = 80;
           goto cddRh;
       cddRh: // global
           R1 = _sdcsm::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cddRj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcsm::P64;
           _sdcrh::P64 = P64[_sdcsm::P64 + 16];
           _sdcri::P64 = P64[_sdcsm::P64 + 24];
           _sdcrj::P64 = P64[_sdcsm::P64 + 32];
           _sdcrk::P64 = P64[_sdcsm::P64 + 40];
           _sdcrl::P64 = P64[_sdcsm::P64 + 48];
           _sdcrm::P64 = P64[_sdcsm::P64 + 56];
           _sdcrn::P64 = P64[_sdcsm::P64 + 64];
           _sdcrr::P64 = P64[_sdcsm::P64 + 72];
           I64[Hp - 72] = sat_sdcsl_info;
           P64[Hp - 56] = _sdcrh::P64;
           P64[Hp - 48] = _sdcri::P64;
           P64[Hp - 40] = _sdcrj::P64;
           P64[Hp - 32] = _sdcrk::P64;
           P64[Hp - 24] = _sdcrl::P64;
           P64[Hp - 16] = _sdcrm::P64;
           P64[Hp - 8] = _sdcrn::P64;
           P64[Hp] = _sdcrr::P64;
           R3 = Hp - 72;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcsm_info" {
     sat_sdcsm_info:
         const sat_sdcsm_entry;
         const 8;
         const 64424509455;
         const SddB2_srt+120;
 },
 sat_sdcsq_entry() //  [R1]
         { []
         }
     {offset
       cddRl: // global
           if ((Sp + -88) < SpLim) (likely: False) goto cddRs; else goto cddRt;
       cddRs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cddRt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 88] = block_cddMf_info;
           _sdcrh::P64 = P64[R1 + 24];
           _sdcri::P64 = P64[R1 + 32];
           _sdcrj::P64 = P64[R1 + 40];
           _sdcrk::P64 = P64[R1 + 48];
           _sdcrl::P64 = P64[R1 + 56];
           _sdcrm::P64 = P64[R1 + 64];
           _sdcrn::P64 = P64[R1 + 72];
           _sdcrr::P64 = P64[R1 + 80];
           R1 = P64[R1 + 16];
           P64[Sp - 80] = _sdcrh::P64;
           P64[Sp - 72] = _sdcri::P64;
           P64[Sp - 64] = _sdcrj::P64;
           P64[Sp - 56] = _sdcrk::P64;
           P64[Sp - 48] = _sdcrl::P64;
           P64[Sp - 40] = _sdcrm::P64;
           P64[Sp - 32] = _sdcrn::P64;
           P64[Sp - 24] = _sdcrr::P64;
           Sp = Sp - 88;
           if (R1 & 7 != 0) goto uddRA; else goto cddMg;
       uddRA: // global
           call _cddMf(R1) args: 0, res: 0, upd: 0;
       cddMg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcsq_info" {
     sat_sdcsq_info:
         const sat_sdcsq_entry;
         const 9;
         const 64424509455;
         const SddB2_srt+120;
 },
 _cddMf() //  [R1]
         { []
         }
     {offset
       cddMf: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cddRw; else goto cddRv;
       cddRw: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cddRv: // global
           _sdcrx::I64 = I64[R1 + 7];
           I64[Hp - 72] = sat_sdcsm_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = P64[Sp + 16];
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = P64[Sp + 40];
           P64[Hp - 16] = P64[Sp + 48];
           P64[Hp - 8] = P64[Sp + 56];
           P64[Hp] = P64[Sp + 64];
           I64[Sp + 64] = block_cddRp_info;
           R3 = Hp - 72;
           R2 = _sdcrx::I64;
           Sp = Sp + 64;
           call GHC.Show.$witos_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cddMf_info" {
     block_cddMf_info:
         const _cddMf;
         const 8;
         const 64424509470;
         const SddB2_srt+120;
 },
 _cddRp() //  [R1, R2]
         { []
         }
     {offset
       cddRp: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cddRz; else goto cddRy;
       cddRz: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cddRy: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cddRp_info" {
     block_cddRp_info:
         const _cddRp;
         const 0;
         const 30;
 },
 sat_sdcsr_entry() //  [R1]
         { []
         }
     {offset
       cddRB: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cddRF; else goto cddRE;
       cddRF: // global
           HpAlloc = 88;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cddRE: // global
           _sdcrg::P64 = P64[R1 + 16];
           _sdcrh::P64 = P64[R1 + 24];
           _sdcri::P64 = P64[R1 + 32];
           _sdcrj::P64 = P64[R1 + 40];
           _sdcrk::P64 = P64[R1 + 48];
           _sdcrl::P64 = P64[R1 + 56];
           _sdcrm::P64 = P64[R1 + 64];
           _sdcrn::P64 = P64[R1 + 72];
           _sdcrr::P64 = P64[R1 + 80];
           I64[Hp - 80] = sat_sdcsq_info;
           P64[Hp - 64] = _sdcrg::P64;
           P64[Hp - 56] = _sdcrh::P64;
           P64[Hp - 48] = _sdcri::P64;
           P64[Hp - 40] = _sdcrj::P64;
           P64[Hp - 32] = _sdcrk::P64;
           P64[Hp - 24] = _sdcrl::P64;
           P64[Hp - 16] = _sdcrm::P64;
           P64[Hp - 8] = _sdcrn::P64;
           P64[Hp] = _sdcrr::P64;
           R3 = Hp - 80;
           R2 = lvl7_rcV56_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcsr_info" {
     sat_sdcsr_info:
         const sat_sdcsr_entry;
         const 9;
         const 64424509455;
         const SddB2_srt+120;
 },
 eta1_sdcrv_entry() //  [R1]
         { []
         }
     {offset
       cddRG: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cddRK; else goto cddRJ;
       cddRK: // global
           HpAlloc = 88;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cddRJ: // global
           _sdcrg::P64 = P64[R1 + 16];
           _sdcrh::P64 = P64[R1 + 24];
           _sdcri::P64 = P64[R1 + 32];
           _sdcrj::P64 = P64[R1 + 40];
           _sdcrk::P64 = P64[R1 + 48];
           _sdcrl::P64 = P64[R1 + 56];
           _sdcrm::P64 = P64[R1 + 64];
           _sdcrn::P64 = P64[R1 + 72];
           _sdcrr::P64 = P64[R1 + 80];
           I64[Hp - 80] = sat_sdcsr_info;
           P64[Hp - 64] = _sdcrg::P64;
           P64[Hp - 56] = _sdcrh::P64;
           P64[Hp - 48] = _sdcri::P64;
           P64[Hp - 40] = _sdcrj::P64;
           P64[Hp - 32] = _sdcrk::P64;
           P64[Hp - 24] = _sdcrl::P64;
           P64[Hp - 16] = _sdcrm::P64;
           P64[Hp - 8] = _sdcrn::P64;
           P64[Hp] = _sdcrr::P64;
           R3 = Hp - 80;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . eta1_sdcrv_info" {
     eta1_sdcrv_info:
         const eta1_sdcrv_entry;
         const 9;
         const 64424509455;
         const SddB2_srt+120;
 },
 sat_sdcst_entry() //  [R1]
         { []
         }
     {offset
       cddRS: // global
           _sdcst::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cddRT; else goto cddRU;
       cddRU: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cddRW; else goto cddRV;
       cddRW: // global
           HpAlloc = 88;
           goto cddRT;
       cddRT: // global
           R1 = _sdcst::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cddRV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcst::P64;
           _sdcrf::P64 = P64[_sdcst::P64 + 16];
           _sdcrg::P64 = P64[_sdcst::P64 + 24];
           _sdcrh::P64 = P64[_sdcst::P64 + 32];
           _sdcri::P64 = P64[_sdcst::P64 + 40];
           _sdcrj::P64 = P64[_sdcst::P64 + 48];
           _sdcrk::P64 = P64[_sdcst::P64 + 56];
           _sdcrl::P64 = P64[_sdcst::P64 + 64];
           _sdcrm::P64 = P64[_sdcst::P64 + 72];
           _sdcrn::P64 = P64[_sdcst::P64 + 80];
           _sdcrr::P64 = P64[_sdcst::P64 + 88];
           I64[Hp - 80] = eta1_sdcrv_info;
           P64[Hp - 64] = _sdcrg::P64;
           P64[Hp - 56] = _sdcrh::P64;
           P64[Hp - 48] = _sdcri::P64;
           P64[Hp - 40] = _sdcrj::P64;
           P64[Hp - 32] = _sdcrk::P64;
           P64[Hp - 24] = _sdcrl::P64;
           P64[Hp - 16] = _sdcrm::P64;
           P64[Hp - 8] = _sdcrn::P64;
           P64[Hp] = _sdcrr::P64;
           I64[Sp - 32] = block_cddRL_info;
           R1 = _sdcrf::P64;
           P64[Sp - 24] = Hp - 80;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uddS3; else goto cddRM;
       uddS3: // global
           call _cddRL(R1) args: 0, res: 0, upd: 0;
       cddRM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcst_info" {
     sat_sdcst_info:
         const sat_sdcst_entry;
         const 10;
         const 64424509455;
         const SddB2_srt+120;
 },
 _cddRL() //  [R1]
         { []
         }
     {offset
       cddRL: // global
           _cddM3::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cddRP; else goto cddRQ;
       cddRP: // global
           R3 = _cddM3::P64;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cddRQ: // global
           R3 = _cddM3::P64;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cddRL_info" {
     block_cddRL_info:
         const _cddRL;
         const 1;
         const 12884901918;
         const SddB2_srt+128;
 },
 sat_sdcsu_entry() //  [R1]
         { []
         }
     {offset
       cddS4: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cddS8; else goto cddS7;
       cddS8: // global
           HpAlloc = 96;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cddS7: // global
           _sdcrf::P64 = P64[R1 + 16];
           _sdcrg::P64 = P64[R1 + 24];
           _sdcrh::P64 = P64[R1 + 32];
           _sdcri::P64 = P64[R1 + 40];
           _sdcrj::P64 = P64[R1 + 48];
           _sdcrk::P64 = P64[R1 + 56];
           _sdcrl::P64 = P64[R1 + 64];
           _sdcrm::P64 = P64[R1 + 72];
           _sdcrn::P64 = P64[R1 + 80];
           _sdcrr::P64 = P64[R1 + 88];
           I64[Hp - 88] = sat_sdcst_info;
           P64[Hp - 72] = _sdcrf::P64;
           P64[Hp - 64] = _sdcrg::P64;
           P64[Hp - 56] = _sdcrh::P64;
           P64[Hp - 48] = _sdcri::P64;
           P64[Hp - 40] = _sdcrj::P64;
           P64[Hp - 32] = _sdcrk::P64;
           P64[Hp - 24] = _sdcrl::P64;
           P64[Hp - 16] = _sdcrm::P64;
           P64[Hp - 8] = _sdcrn::P64;
           P64[Hp] = _sdcrr::P64;
           R3 = Hp - 88;
           R2 = lvl6_rcV55_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcsu_info" {
     sat_sdcsu_info:
         const sat_sdcsu_entry;
         const 10;
         const 64424509455;
         const SddB2_srt+120;
 },
 sat_sdcsv_entry() //  [R1]
         { []
         }
     {offset
       cddS9: // global
           _sdcsv::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cddSa; else goto cddSb;
       cddSb: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cddSd; else goto cddSc;
       cddSd: // global
           HpAlloc = 96;
           goto cddSa;
       cddSa: // global
           R1 = _sdcsv::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cddSc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcsv::P64;
           _sdcrf::P64 = P64[_sdcsv::P64 + 16];
           _sdcrg::P64 = P64[_sdcsv::P64 + 24];
           _sdcrh::P64 = P64[_sdcsv::P64 + 32];
           _sdcri::P64 = P64[_sdcsv::P64 + 40];
           _sdcrj::P64 = P64[_sdcsv::P64 + 48];
           _sdcrk::P64 = P64[_sdcsv::P64 + 56];
           _sdcrl::P64 = P64[_sdcsv::P64 + 64];
           _sdcrm::P64 = P64[_sdcsv::P64 + 72];
           _sdcrn::P64 = P64[_sdcsv::P64 + 80];
           _sdcrr::P64 = P64[_sdcsv::P64 + 88];
           I64[Hp - 88] = sat_sdcsu_info;
           P64[Hp - 72] = _sdcrf::P64;
           P64[Hp - 64] = _sdcrg::P64;
           P64[Hp - 56] = _sdcrh::P64;
           P64[Hp - 48] = _sdcri::P64;
           P64[Hp - 40] = _sdcrj::P64;
           P64[Hp - 32] = _sdcrk::P64;
           P64[Hp - 24] = _sdcrl::P64;
           P64[Hp - 16] = _sdcrm::P64;
           P64[Hp - 8] = _sdcrn::P64;
           P64[Hp] = _sdcrr::P64;
           R3 = Hp - 88;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcsv_info" {
     sat_sdcsv_info:
         const sat_sdcsv_entry;
         const 10;
         const 64424509455;
         const SddB2_srt+120;
 },
 sat_sdcsz_entry() //  [R1]
         { []
         }
     {offset
       cddSe: // global
           if ((Sp + -104) < SpLim) (likely: False) goto cddSl; else goto cddSm;
       cddSl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cddSm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 104] = block_cddLM_info;
           _sdcrf::P64 = P64[R1 + 24];
           _sdcrg::P64 = P64[R1 + 32];
           _sdcrh::P64 = P64[R1 + 40];
           _sdcri::P64 = P64[R1 + 48];
           _sdcrj::P64 = P64[R1 + 56];
           _sdcrk::P64 = P64[R1 + 64];
           _sdcrl::P64 = P64[R1 + 72];
           _sdcrm::P64 = P64[R1 + 80];
           _sdcrn::P64 = P64[R1 + 88];
           _sdcrr::P64 = P64[R1 + 96];
           R1 = P64[R1 + 16];
           P64[Sp - 96] = _sdcrf::P64;
           P64[Sp - 88] = _sdcrg::P64;
           P64[Sp - 80] = _sdcrh::P64;
           P64[Sp - 72] = _sdcri::P64;
           P64[Sp - 64] = _sdcrj::P64;
           P64[Sp - 56] = _sdcrk::P64;
           P64[Sp - 48] = _sdcrl::P64;
           P64[Sp - 40] = _sdcrm::P64;
           P64[Sp - 32] = _sdcrn::P64;
           P64[Sp - 24] = _sdcrr::P64;
           Sp = Sp - 104;
           if (R1 & 7 != 0) goto uddSt; else goto cddLN;
       uddSt: // global
           call _cddLM(R1) args: 0, res: 0, upd: 0;
       cddLN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcsz_info" {
     sat_sdcsz_info:
         const sat_sdcsz_entry;
         const 11;
         const 64424509455;
         const SddB2_srt+120;
 },
 _cddLM() //  [R1]
         { []
         }
     {offset
       cddLM: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cddSp; else goto cddSo;
       cddSp: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cddSo: // global
           _sdcrt::I64 = I64[R1 + 7];
           I64[Hp - 88] = sat_sdcsv_info;
           P64[Hp - 72] = P64[Sp + 8];
           P64[Hp - 64] = P64[Sp + 16];
           P64[Hp - 56] = P64[Sp + 24];
           P64[Hp - 48] = P64[Sp + 32];
           P64[Hp - 40] = P64[Sp + 40];
           P64[Hp - 32] = P64[Sp + 48];
           P64[Hp - 24] = P64[Sp + 56];
           P64[Hp - 16] = P64[Sp + 64];
           P64[Hp - 8] = P64[Sp + 72];
           P64[Hp] = P64[Sp + 80];
           I64[Sp + 80] = block_cddSi_info;
           R3 = Hp - 88;
           R2 = _sdcrt::I64;
           Sp = Sp + 80;
           call GHC.Show.$witos_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cddLM_info" {
     block_cddLM_info:
         const _cddLM;
         const 10;
         const 64424509470;
         const SddB2_srt+120;
 },
 _cddSi() //  [R1, R2]
         { []
         }
     {offset
       cddSi: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cddSs; else goto cddSr;
       cddSs: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cddSr: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cddSi_info" {
     block_cddSi_info:
         const _cddSi;
         const 0;
         const 30;
 },
 sat_sdcsA_entry() //  [R1]
         { []
         }
     {offset
       cddSu: // global
           _sdcsA::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cddSv; else goto cddSw;
       cddSw: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cddSy; else goto cddSx;
       cddSy: // global
           HpAlloc = 104;
           goto cddSv;
       cddSv: // global
           R1 = _sdcsA::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cddSx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcsA::P64;
           _sdcre::P64 = P64[_sdcsA::P64 + 16];
           _sdcrf::P64 = P64[_sdcsA::P64 + 24];
           _sdcrg::P64 = P64[_sdcsA::P64 + 32];
           _sdcrh::P64 = P64[_sdcsA::P64 + 40];
           _sdcri::P64 = P64[_sdcsA::P64 + 48];
           _sdcrj::P64 = P64[_sdcsA::P64 + 56];
           _sdcrk::P64 = P64[_sdcsA::P64 + 64];
           _sdcrl::P64 = P64[_sdcsA::P64 + 72];
           _sdcrm::P64 = P64[_sdcsA::P64 + 80];
           _sdcrn::P64 = P64[_sdcsA::P64 + 88];
           _sdcrr::P64 = P64[_sdcsA::P64 + 96];
           I64[Hp - 96] = sat_sdcsz_info;
           P64[Hp - 80] = _sdcre::P64;
           P64[Hp - 72] = _sdcrf::P64;
           P64[Hp - 64] = _sdcrg::P64;
           P64[Hp - 56] = _sdcrh::P64;
           P64[Hp - 48] = _sdcri::P64;
           P64[Hp - 40] = _sdcrj::P64;
           P64[Hp - 32] = _sdcrk::P64;
           P64[Hp - 24] = _sdcrl::P64;
           P64[Hp - 16] = _sdcrm::P64;
           P64[Hp - 8] = _sdcrn::P64;
           P64[Hp] = _sdcrr::P64;
           R3 = Hp - 96;
           R2 = lvl5_rcV54_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcsA_info" {
     sat_sdcsA_info:
         const sat_sdcsA_entry;
         const 11;
         const 64424509455;
         const SddB2_srt+120;
 },
 p_sdcrq_entry() //  [R1, R2]
         { []
         }
     {offset
       cddSz: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cddSD; else goto cddSC;
       cddSD: // global
           HpAlloc = 104;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cddSC: // global
           _sdcre::P64 = P64[R1 + 7];
           _sdcrf::P64 = P64[R1 + 15];
           _sdcrg::P64 = P64[R1 + 23];
           _sdcrh::P64 = P64[R1 + 31];
           _sdcri::P64 = P64[R1 + 39];
           _sdcrj::P64 = P64[R1 + 47];
           _sdcrk::P64 = P64[R1 + 55];
           _sdcrl::P64 = P64[R1 + 63];
           _sdcrm::P64 = P64[R1 + 71];
           _sdcrn::P64 = P64[R1 + 79];
           I64[Hp - 96] = sat_sdcsA_info;
           P64[Hp - 80] = _sdcre::P64;
           P64[Hp - 72] = _sdcrf::P64;
           P64[Hp - 64] = _sdcrg::P64;
           P64[Hp - 56] = _sdcrh::P64;
           P64[Hp - 48] = _sdcri::P64;
           P64[Hp - 40] = _sdcrj::P64;
           P64[Hp - 32] = _sdcrk::P64;
           P64[Hp - 24] = _sdcrl::P64;
           P64[Hp - 16] = _sdcrm::P64;
           P64[Hp - 8] = _sdcrn::P64;
           P64[Hp] = R2;
           R3 = Hp - 96;
           R2 = lvl4_rcV53_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . p_sdcrq_info" {
     p_sdcrq_info:
         const p_sdcrq_entry;
         const 10;
         const 64424509448;
         const 4294967301;
         const SddB2_srt+120;
 },
 sat_sdcsD_entry() //  [R1]
         { []
         }
     {offset
       cddSN: // global
           _sdcsD::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cddSO; else goto cddSP;
       cddSP: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cddSR; else goto cddSQ;
       cddSR: // global
           HpAlloc = 24;
           goto cddSO;
       cddSO: // global
           R1 = _sdcsD::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cddSQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcsD::P64;
           _sdcrc::P64 = P64[_sdcsD::P64 + 16];
           _sdcrq::P64 = P64[_sdcsD::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _sdcrc::P64;
           R2 = Hp - 14;
           R1 = _sdcrq::P64;
           Sp = Sp - 16;
           call p_sdcrq_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcsD_info" {
     sat_sdcsD_info:
         const sat_sdcsD_entry;
         const 2;
         const 64424509458;
         const SddB2_srt+120;
 },
 GHC.RTS.Flags.$fShowParFlags_$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cddSS: // global
           if ((Sp + -96) < SpLim) (likely: False) goto cddST; else goto cddSU;
       cddST: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fShowParFlags_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cddSU: // global
           I64[Sp - 24] = block_cddLp_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uddT4; else goto cddLq;
       uddT4: // global
           call _cddLp(R1) args: 0, res: 0, upd: 0;
       cddLq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowParFlags_$cshowsPrec_info" {
     GHC.RTS.Flags.$fShowParFlags_$cshowsPrec_info:
         const GHC.RTS.Flags.$fShowParFlags_$cshowsPrec_entry;
         const 0;
         const 133143986190;
         const 12884901911;
         const SddB2_srt+120;
 },
 _cddLp() //  [R1]
         { []
         }
     {offset
       cddLp: // global
           I64[Sp - 72] = block_cddLu_info;
           _sdcre::P64 = P64[R1 + 7];
           _sdcrf::P64 = P64[R1 + 15];
           _sdcrg::P64 = P64[R1 + 23];
           _sdcrh::P64 = P64[R1 + 31];
           _sdcri::P64 = P64[R1 + 39];
           _sdcrj::P64 = P64[R1 + 47];
           _sdcrk::P64 = P64[R1 + 55];
           _sdcrl::P64 = P64[R1 + 63];
           _sdcrm::P64 = P64[R1 + 71];
           _sdcrn::P64 = P64[R1 + 79];
           R1 = P64[Sp + 8];
           P64[Sp - 64] = _sdcrg::P64;
           P64[Sp - 56] = _sdcrh::P64;
           P64[Sp - 48] = _sdcri::P64;
           P64[Sp - 40] = _sdcrj::P64;
           P64[Sp - 32] = _sdcrk::P64;
           P64[Sp - 24] = _sdcrl::P64;
           P64[Sp - 16] = _sdcrm::P64;
           P64[Sp - 8] = _sdcrn::P64;
           P64[Sp] = _sdcrf::P64;
           P64[Sp + 8] = _sdcre::P64;
           Sp = Sp - 72;
           if (R1 & 7 != 0) goto uddT3; else goto cddLv;
       uddT3: // global
           call _cddLu(R1) args: 0, res: 0, upd: 0;
       cddLv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cddLp_info" {
     block_cddLp_info:
         const _cddLp;
         const 2;
         const 64424509470;
         const SddB2_srt+120;
 },
 _cddLu() //  [R1]
         { []
         }
     {offset
       cddLu: // global
           Hp = Hp + 144;
           if (Hp > HpLim) (likely: False) goto cddSY; else goto cddSX;
       cddSY: // global
           HpAlloc = 144;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cddSX: // global
           _sdcrp::I64 = I64[R1 + 7];
           I64[Hp - 136] = p_sdcrq_info;
           P64[Hp - 128] = P64[Sp + 80];
           P64[Hp - 120] = P64[Sp + 72];
           P64[Hp - 112] = P64[Sp + 8];
           P64[Hp - 104] = P64[Sp + 16];
           P64[Hp - 96] = P64[Sp + 24];
           P64[Hp - 88] = P64[Sp + 32];
           P64[Hp - 80] = P64[Sp + 40];
           P64[Hp - 72] = P64[Sp + 48];
           P64[Hp - 64] = P64[Sp + 56];
           P64[Hp - 56] = P64[Sp + 64];
           _sdcrc::P64 = P64[Sp + 88];
           _cddLz::P64 = Hp - 135;
           if (%MO_S_Lt_W64(_sdcrp::I64, 11)) goto cddT0; else goto cddT2;
       cddT0: // global
           Hp = Hp - 56;
           R2 = _sdcrc::P64;
           R1 = _cddLz::P64;
           Sp = Sp + 96;
           call p_sdcrq_entry(R2, R1) args: 8, res: 0, upd: 8;
       cddT2: // global
           I64[Hp - 48] = sat_sdcsD_info;
           P64[Hp - 32] = _sdcrc::P64;
           P64[Hp - 24] = _cddLz::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 96;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cddLu_info" {
     block_cddLu_info:
         const _cddLu;
         const 11;
         const 64424509470;
         const SddB2_srt+120;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.596430383 UTC

[section ""data" . GHC.RTS.Flags.$fShowParFlags_$cshow_closure" {
     GHC.RTS.Flags.$fShowParFlags_$cshow_closure:
         const GHC.RTS.Flags.$fShowParFlags_$cshow_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowParFlags_$cshow_entry() //  [R2]
         { []
         }
     {offset
       cddYs: // global
           R4 = GHC.Types.[]_closure+1;
           R3 = R2;
           R2 = GHC.RTS.Flags.$fEnumDoCostCentres10_closure+1;
           call GHC.RTS.Flags.$fShowParFlags_$cshowsPrec_entry(R4,
                                                               R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowParFlags_$cshow_info" {
     GHC.RTS.Flags.$fShowParFlags_$cshow_info:
         const GHC.RTS.Flags.$fShowParFlags_$cshow_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SddB2_srt+152;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.600402392 UTC

[section ""data" . GHC.RTS.Flags.$fShowParFlags1_closure" {
     GHC.RTS.Flags.$fShowParFlags1_closure:
         const GHC.RTS.Flags.$fShowParFlags1_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowParFlags1_entry() //  [R2, R3]
         { []
         }
     {offset
       cddYE: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.RTS.Flags.$fEnumDoCostCentres10_closure+1;
           call GHC.RTS.Flags.$fShowParFlags_$cshowsPrec_entry(R4,
                                                               R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowParFlags1_info" {
     GHC.RTS.Flags.$fShowParFlags1_info:
         const GHC.RTS.Flags.$fShowParFlags1_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const SddB2_srt+152;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.604018985 UTC

[section ""data" . GHC.RTS.Flags.$fShowParFlags_$cshowList_closure" {
     GHC.RTS.Flags.$fShowParFlags_$cshowList_closure:
         const GHC.RTS.Flags.$fShowParFlags_$cshowList_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowParFlags_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       cddYP: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.RTS.Flags.$fShowParFlags1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowParFlags_$cshowList_info" {
     GHC.RTS.Flags.$fShowParFlags_$cshowList_info:
         const GHC.RTS.Flags.$fShowParFlags_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const SddB2_srt+160;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.607217239 UTC

[section ""data" . GHC.RTS.Flags.$fShowParFlags_closure" {
     GHC.RTS.Flags.$fShowParFlags_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.RTS.Flags.$fShowParFlags_$cshowsPrec_closure+3;
         const GHC.RTS.Flags.$fShowParFlags_$cshow_closure+1;
         const GHC.RTS.Flags.$fShowParFlags_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.608981282 UTC

[section ""cstring" . GHC.RTS.Flags.$fShowTickyFlags5_bytes" {
     GHC.RTS.Flags.$fShowTickyFlags5_bytes:
         I8[] [84,105,99,107,121,70,108,97,103,115,32,123]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.612138452 UTC

[section ""data" . GHC.RTS.Flags.$fShowTickyFlags4_closure" {
     GHC.RTS.Flags.$fShowTickyFlags4_closure:
         const GHC.RTS.Flags.$fShowTickyFlags4_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fShowTickyFlags4_entry() //  [R1]
         { []
         }
     {offset
       cddZ4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cddZ5; else goto cddZ6;
       cddZ5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cddZ6: // global
           (_cddZ1::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cddZ1::I64 == 0) goto cddZ3; else goto cddZ2;
       cddZ3: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cddZ2: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cddZ1::I64;
           R2 = GHC.RTS.Flags.$fShowTickyFlags5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowTickyFlags4_info" {
     GHC.RTS.Flags.$fShowTickyFlags4_info:
         const GHC.RTS.Flags.$fShowTickyFlags4_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.61570629 UTC

[section ""cstring" . GHC.RTS.Flags.$fShowTickyFlags3_bytes" {
     GHC.RTS.Flags.$fShowTickyFlags3_bytes:
         I8[] [115,104,111,119,84,105,99,107,121,83,116,97,116,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.617814779 UTC

[section ""cstring" . GHC.RTS.Flags.$fShowTickyFlags2_bytes" {
     GHC.RTS.Flags.$fShowTickyFlags2_bytes:
         I8[] [116,105,99,107,121,70,105,108,101,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.633224619 UTC

[section ""data" . GHC.RTS.Flags.$w$cshowsPrec8_closure" {
     GHC.RTS.Flags.$w$cshowsPrec8_closure:
         const GHC.RTS.Flags.$w$cshowsPrec8_info;
         const 0;
 },
 f8_sdcsK_entry() //  [R1]
         { []
         }
     {offset
       cddZp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cddZq; else goto cddZr;
       cddZq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cddZr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 16];
           R3 = GHC.RTS.Flags.$fEnumDoCostCentres10_closure+1;
           R2 = GHC.Show.$fShow[]_$s$fShow[]1_closure;
           Sp = Sp - 16;
           call GHC.Show.$fShowMaybe_$cshowsPrec_entry(R4,
                                                       R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f8_sdcsK_info" {
     f8_sdcsK_info:
         const f8_sdcsK_entry;
         const 1;
         const 12884901904;
         const SddB2_srt+168;
 },
 sat_sdcsO_entry() //  [R1]
         { []
         }
     {offset
       cde03: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cde04; else goto cde05;
       cde04: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cde05: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.RTS.Flags.$fShowCCFlags2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcsO_info" {
     sat_sdcsO_info:
         const sat_sdcsO_entry;
         const 1;
         const 16;
 },
 sat_sdcsP_entry() //  [R1]
         { []
         }
     {offset
       cde06: // global
           _sdcsP::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cde07; else goto cde08;
       cde08: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cde0a; else goto cde09;
       cde0a: // global
           HpAlloc = 24;
           goto cde07;
       cde07: // global
           R1 = _sdcsP::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cde09: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcsP::P64;
           _sdcsK::P64 = P64[_sdcsP::P64 + 16];
           _sdcsM::P64 = P64[_sdcsP::P64 + 24];
           I64[Hp - 16] = sat_sdcsO_info;
           P64[Hp] = _sdcsM::P64;
           R2 = Hp - 16;
           R1 = _sdcsK::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcsP_info" {
     sat_sdcsP_info:
         const sat_sdcsP_entry;
         const 2;
         const 18;
 },
 sat_sdcsQ_entry() //  [R1]
         { []
         }
     {offset
       cde0b: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cde0f; else goto cde0e;
       cde0f: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cde0e: // global
           _sdcsK::P64 = P64[R1 + 16];
           _sdcsM::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_sdcsP_info;
           P64[Hp - 8] = _sdcsK::P64;
           P64[Hp] = _sdcsM::P64;
           R3 = Hp - 24;
           R2 = GHC.RTS.Flags.$fShowTickyFlags2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcsQ_info" {
     sat_sdcsQ_info:
         const sat_sdcsQ_entry;
         const 2;
         const 18;
 },
 sat_sdcsR_entry() //  [R1]
         { []
         }
     {offset
       cde0g: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cde0k; else goto cde0j;
       cde0k: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cde0j: // global
           _sdcsK::P64 = P64[R1 + 16];
           _sdcsM::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_sdcsQ_info;
           P64[Hp - 8] = _sdcsK::P64;
           P64[Hp] = _sdcsM::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcsR_info" {
     sat_sdcsR_info:
         const sat_sdcsR_entry;
         const 2;
         const 4294967314;
         const SddB2_srt+144;
 },
 sat_sdcsS_entry() //  [R1]
         { []
         }
     {offset
       cde0D: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cde0E; else goto cde0F;
       cde0E: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cde0F: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.RTS.Flags.$fShowCCFlags2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcsS_info" {
     sat_sdcsS_info:
         const sat_sdcsS_entry;
         const 1;
         const 16;
 },
 sat_sdcsT_entry() //  [R1]
         { []
         }
     {offset
       cde0G: // global
           _sdcsT::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cde0H; else goto cde0I;
       cde0I: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cde0K; else goto cde0J;
       cde0K: // global
           HpAlloc = 24;
           goto cde0H;
       cde0H: // global
           R1 = _sdcsT::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cde0J: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcsT::P64;
           _sdcsK::P64 = P64[_sdcsT::P64 + 16];
           _sdcsM::P64 = P64[_sdcsT::P64 + 24];
           I64[Hp - 16] = sat_sdcsS_info;
           P64[Hp] = _sdcsM::P64;
           R2 = Hp - 16;
           R1 = _sdcsK::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcsT_info" {
     sat_sdcsT_info:
         const sat_sdcsT_entry;
         const 2;
         const 18;
 },
 sat_sdcsU_entry() //  [R1]
         { []
         }
     {offset
       cde0L: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cde0P; else goto cde0O;
       cde0P: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cde0O: // global
           _sdcsK::P64 = P64[R1 + 16];
           _sdcsM::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_sdcsT_info;
           P64[Hp - 8] = _sdcsK::P64;
           P64[Hp] = _sdcsM::P64;
           R3 = Hp - 24;
           R2 = GHC.RTS.Flags.$fShowTickyFlags2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcsU_info" {
     sat_sdcsU_info:
         const sat_sdcsU_entry;
         const 2;
         const 18;
 },
 sat_sdcsV_entry() //  [R1]
         { []
         }
     {offset
       cde0Q: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cde0U; else goto cde0T;
       cde0U: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cde0T: // global
           _sdcsK::P64 = P64[R1 + 16];
           _sdcsM::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_sdcsU_info;
           P64[Hp - 8] = _sdcsK::P64;
           P64[Hp] = _sdcsM::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcsV_info" {
     sat_sdcsV_info:
         const sat_sdcsV_entry;
         const 2;
         const 4294967314;
         const SddB2_srt+144;
 },
 sat_sdcsW_entry() //  [R1]
         { []
         }
     {offset
       cde0Z: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cde10; else goto cde11;
       cde10: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cde11: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cddZI_info;
           _sdcsK::P64 = P64[R1 + 24];
           _sdcsM::P64 = P64[R1 + 32];
           R1 = P64[R1 + 16];
           P64[Sp - 32] = _sdcsK::P64;
           P64[Sp - 24] = _sdcsM::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ude18; else goto cddZJ;
       ude18: // global
           call _cddZI(R1) args: 0, res: 0, upd: 0;
       cddZJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcsW_info" {
     sat_sdcsW_info:
         const sat_sdcsW_entry;
         const 3;
         const 30064771087;
         const SddB2_srt+128;
 },
 _cddZI() //  [R1]
         { []
         }
     {offset
       cddZI: // global
           _sdcsK::P64 = P64[Sp + 8];
           _sdcsM::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto cde0W; else goto cde0X;
       cde0W: // global
           Hp = Hp + 32;
           _sdcsN::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cde17; else goto cde13;
       cde13: // global
           I64[Hp - 24] = sat_sdcsR_info;
           P64[Hp - 8] = _sdcsK::P64;
           P64[Hp] = _sdcsM::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cde0X: // global
           Hp = Hp + 32;
           _sdcsN::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cde17; else goto cde16;
       cde17: // global
           HpAlloc = 32;
           R1 = _sdcsN::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cde16: // global
           I64[Hp - 24] = sat_sdcsV_info;
           P64[Hp - 8] = _sdcsK::P64;
           P64[Hp] = _sdcsM::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cddZI_info" {
     block_cddZI_info:
         const _cddZI;
         const 2;
         const 30064771102;
         const SddB2_srt+128;
 },
 sat_sdcsX_entry() //  [R1]
         { []
         }
     {offset
       cde19: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cde1d; else goto cde1c;
       cde1d: // global
           HpAlloc = 40;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cde1c: // global
           _sdcsI::P64 = P64[R1 + 16];
           _sdcsK::P64 = P64[R1 + 24];
           _sdcsM::P64 = P64[R1 + 32];
           I64[Hp - 32] = sat_sdcsW_info;
           P64[Hp - 16] = _sdcsI::P64;
           P64[Hp - 8] = _sdcsK::P64;
           P64[Hp] = _sdcsM::P64;
           R3 = Hp - 32;
           R2 = GHC.RTS.Flags.$fShowTickyFlags3_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcsX_info" {
     sat_sdcsX_info:
         const sat_sdcsX_entry;
         const 3;
         const 30064771087;
         const SddB2_srt+128;
 },
 sat_sdcsY_entry() //  [R1, R2]
         { []
         }
     {offset
       cde1e: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cde1i; else goto cde1h;
       cde1i: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cde1h: // global
           _sdcsI::P64 = P64[R1 + 7];
           _sdcsK::P64 = P64[R1 + 15];
           I64[Hp - 32] = sat_sdcsX_info;
           P64[Hp - 16] = _sdcsI::P64;
           P64[Hp - 8] = _sdcsK::P64;
           P64[Hp] = R2;
           R3 = Hp - 32;
           R2 = GHC.RTS.Flags.$fShowTickyFlags4_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcsY_info" {
     sat_sdcsY_info:
         const sat_sdcsY_entry;
         const 2;
         const 579820584971;
         const 4294967301;
         const SddB2_srt+128;
 },
 sat_sdct2_entry() //  [R1]
         { []
         }
     {offset
       cde1X: // global
           _sdct2::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cde1Y; else goto cde1Z;
       cde1Z: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cde21; else goto cde20;
       cde21: // global
           HpAlloc = 24;
           goto cde1Y;
       cde1Y: // global
           R1 = _sdct2::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cde20: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdct2::P64;
           _sdcsZ::P64 = P64[_sdct2::P64 + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _sdcsZ::P64;
           R3 = Hp - 14;
           R2 = GHC.RTS.Flags.$fShowCCFlags2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdct2_info" {
     sat_sdct2_info:
         const sat_sdct2_entry;
         const 1;
         const 16;
 },
 sat_sdct3_entry() //  [R1]
         { []
         }
     {offset
       cde22: // global
           _sdct3::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cde23; else goto cde24;
       cde24: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cde26; else goto cde25;
       cde26: // global
           HpAlloc = 24;
           goto cde23;
       cde23: // global
           R1 = _sdct3::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cde25: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdct3::P64;
           _sdcsK::P64 = P64[_sdct3::P64 + 16];
           _sdcsZ::P64 = P64[_sdct3::P64 + 24];
           I64[Hp - 16] = sat_sdct2_info;
           P64[Hp] = _sdcsZ::P64;
           R2 = Hp - 16;
           R1 = _sdcsK::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdct3_info" {
     sat_sdct3_info:
         const sat_sdct3_entry;
         const 2;
         const 18;
 },
 sat_sdct4_entry() //  [R1]
         { []
         }
     {offset
       cde27: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cde2b; else goto cde2a;
       cde2b: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cde2a: // global
           _sdcsK::P64 = P64[R1 + 16];
           _sdcsZ::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_sdct3_info;
           P64[Hp - 8] = _sdcsK::P64;
           P64[Hp] = _sdcsZ::P64;
           R3 = Hp - 24;
           R2 = GHC.RTS.Flags.$fShowTickyFlags2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdct4_info" {
     sat_sdct4_info:
         const sat_sdct4_entry;
         const 2;
         const 18;
 },
 sat_sdct5_entry() //  [R1]
         { []
         }
     {offset
       cde2c: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cde2g; else goto cde2f;
       cde2g: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cde2f: // global
           _sdcsK::P64 = P64[R1 + 16];
           _sdcsZ::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_sdct4_info;
           P64[Hp - 8] = _sdcsK::P64;
           P64[Hp] = _sdcsZ::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdct5_info" {
     sat_sdct5_info:
         const sat_sdct5_entry;
         const 2;
         const 4294967314;
         const SddB2_srt+144;
 },
 sat_sdct7_entry() //  [R1]
         { []
         }
     {offset
       cde2A: // global
           _sdct7::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cde2B; else goto cde2C;
       cde2C: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cde2E; else goto cde2D;
       cde2E: // global
           HpAlloc = 24;
           goto cde2B;
       cde2B: // global
           R1 = _sdct7::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cde2D: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdct7::P64;
           _sdcsZ::P64 = P64[_sdct7::P64 + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _sdcsZ::P64;
           R3 = Hp - 14;
           R2 = GHC.RTS.Flags.$fShowCCFlags2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdct7_info" {
     sat_sdct7_info:
         const sat_sdct7_entry;
         const 1;
         const 16;
 },
 sat_sdct8_entry() //  [R1]
         { []
         }
     {offset
       cde2F: // global
           _sdct8::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cde2G; else goto cde2H;
       cde2H: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cde2J; else goto cde2I;
       cde2J: // global
           HpAlloc = 24;
           goto cde2G;
       cde2G: // global
           R1 = _sdct8::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cde2I: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdct8::P64;
           _sdcsK::P64 = P64[_sdct8::P64 + 16];
           _sdcsZ::P64 = P64[_sdct8::P64 + 24];
           I64[Hp - 16] = sat_sdct7_info;
           P64[Hp] = _sdcsZ::P64;
           R2 = Hp - 16;
           R1 = _sdcsK::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdct8_info" {
     sat_sdct8_info:
         const sat_sdct8_entry;
         const 2;
         const 18;
 },
 sat_sdct9_entry() //  [R1]
         { []
         }
     {offset
       cde2K: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cde2O; else goto cde2N;
       cde2O: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cde2N: // global
           _sdcsK::P64 = P64[R1 + 16];
           _sdcsZ::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_sdct8_info;
           P64[Hp - 8] = _sdcsK::P64;
           P64[Hp] = _sdcsZ::P64;
           R3 = Hp - 24;
           R2 = GHC.RTS.Flags.$fShowTickyFlags2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdct9_info" {
     sat_sdct9_info:
         const sat_sdct9_entry;
         const 2;
         const 18;
 },
 sat_sdcta_entry() //  [R1]
         { []
         }
     {offset
       cde2P: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cde2T; else goto cde2S;
       cde2T: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cde2S: // global
           _sdcsK::P64 = P64[R1 + 16];
           _sdcsZ::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_sdct9_info;
           P64[Hp - 8] = _sdcsK::P64;
           P64[Hp] = _sdcsZ::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcta_info" {
     sat_sdcta_info:
         const sat_sdcta_entry;
         const 2;
         const 4294967314;
         const SddB2_srt+144;
 },
 sat_sdctb_entry() //  [R1]
         { []
         }
     {offset
       cde2Y: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cde2Z; else goto cde30;
       cde2Z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cde30: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cde1B_info;
           _sdcsK::P64 = P64[R1 + 24];
           _sdcsZ::P64 = P64[R1 + 32];
           R1 = P64[R1 + 16];
           P64[Sp - 32] = _sdcsK::P64;
           P64[Sp - 24] = _sdcsZ::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ude37; else goto cde1C;
       ude37: // global
           call _cde1B(R1) args: 0, res: 0, upd: 0;
       cde1C: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdctb_info" {
     sat_sdctb_info:
         const sat_sdctb_entry;
         const 3;
         const 30064771087;
         const SddB2_srt+128;
 },
 _cde1B() //  [R1]
         { []
         }
     {offset
       cde1B: // global
           _sdcsK::P64 = P64[Sp + 8];
           _sdcsZ::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto cde2V; else goto cde2W;
       cde2V: // global
           Hp = Hp + 32;
           _sdct0::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cde36; else goto cde32;
       cde32: // global
           I64[Hp - 24] = sat_sdct5_info;
           P64[Hp - 8] = _sdcsK::P64;
           P64[Hp] = _sdcsZ::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cde2W: // global
           Hp = Hp + 32;
           _sdct0::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cde36; else goto cde35;
       cde36: // global
           HpAlloc = 32;
           R1 = _sdct0::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cde35: // global
           I64[Hp - 24] = sat_sdcta_info;
           P64[Hp - 8] = _sdcsK::P64;
           P64[Hp] = _sdcsZ::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cde1B_info" {
     block_cde1B_info:
         const _cde1B;
         const 2;
         const 30064771102;
         const SddB2_srt+128;
 },
 sat_sdctc_entry() //  [R1]
         { []
         }
     {offset
       cde38: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cde3c; else goto cde3b;
       cde3c: // global
           HpAlloc = 40;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cde3b: // global
           _sdcsI::P64 = P64[R1 + 16];
           _sdcsK::P64 = P64[R1 + 24];
           _sdcsZ::P64 = P64[R1 + 32];
           I64[Hp - 32] = sat_sdctb_info;
           P64[Hp - 16] = _sdcsI::P64;
           P64[Hp - 8] = _sdcsK::P64;
           P64[Hp] = _sdcsZ::P64;
           R3 = Hp - 32;
           R2 = GHC.RTS.Flags.$fShowTickyFlags3_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdctc_info" {
     sat_sdctc_info:
         const sat_sdctc_entry;
         const 3;
         const 30064771087;
         const SddB2_srt+128;
 },
 sat_sdctd_entry() //  [R1]
         { []
         }
     {offset
       cde3d: // global
           _sdctd::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cde3e; else goto cde3f;
       cde3f: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cde3h; else goto cde3g;
       cde3h: // global
           HpAlloc = 40;
           goto cde3e;
       cde3e: // global
           R1 = _sdctd::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cde3g: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdctd::P64;
           _sdcsI::P64 = P64[_sdctd::P64 + 16];
           _sdcsK::P64 = P64[_sdctd::P64 + 24];
           _sdcsZ::P64 = P64[_sdctd::P64 + 32];
           I64[Hp - 32] = sat_sdctc_info;
           P64[Hp - 16] = _sdcsI::P64;
           P64[Hp - 8] = _sdcsK::P64;
           P64[Hp] = _sdcsZ::P64;
           R3 = Hp - 32;
           R2 = GHC.RTS.Flags.$fShowTickyFlags4_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdctd_info" {
     sat_sdctd_info:
         const sat_sdctd_entry;
         const 3;
         const 579820584975;
         const SddB2_srt+128;
 },
 sat_sdcte_entry() //  [R1, R2]
         { []
         }
     {offset
       cde3j: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cde3n; else goto cde3m;
       cde3n: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cde3m: // global
           _sdcsI::P64 = P64[R1 + 7];
           _sdcsK::P64 = P64[R1 + 15];
           I64[Hp - 56] = sat_sdctd_info;
           P64[Hp - 40] = _sdcsI::P64;
           P64[Hp - 32] = _sdcsK::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcte_info" {
     sat_sdcte_info:
         const sat_sdcte_entry;
         const 2;
         const 579820584971;
         const 4294967301;
         const SddB2_srt+128;
 },
 GHC.RTS.Flags.$w$cshowsPrec8_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cde3r: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cde3v; else goto cde3u;
       cde3v: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.RTS.Flags.$w$cshowsPrec8_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cde3u: // global
           I64[Hp - 40] = f8_sdcsK_info;
           P64[Hp - 24] = R4;
           _cddZl::P64 = Hp - 40;
           if (%MO_S_Lt_W64(R2, 11)) goto cde3p; else goto cde3q;
       cde3p: // global
           I64[Hp - 16] = sat_sdcsY_info;
           P64[Hp - 8] = R3;
           P64[Hp] = _cddZl::P64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cde3q: // global
           I64[Hp - 16] = sat_sdcte_info;
           P64[Hp - 8] = R3;
           P64[Hp] = _cddZl::P64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$w$cshowsPrec8_info" {
     GHC.RTS.Flags.$w$cshowsPrec8_info:
         const GHC.RTS.Flags.$w$cshowsPrec8_entry;
         const 0;
         const 2091649073166;
         const 12884901907;
         const SddB2_srt+128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.687749862 UTC

[section ""data" . GHC.RTS.Flags.$fShowTickyFlags_$cshowsPrec_closure" {
     GHC.RTS.Flags.$fShowTickyFlags_$cshowsPrec_closure:
         const GHC.RTS.Flags.$fShowTickyFlags_$cshowsPrec_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowTickyFlags_$cshowsPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       cde61: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cde65; else goto cde66;
       cde65: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fShowTickyFlags_$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cde66: // global
           I64[Sp - 16] = block_cde5Y_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ude6e; else goto cde5Z;
       ude6e: // global
           call _cde5Y(R1) args: 0, res: 0, upd: 0;
       cde5Z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowTickyFlags_$cshowsPrec_info" {
     GHC.RTS.Flags.$fShowTickyFlags_$cshowsPrec_info:
         const GHC.RTS.Flags.$fShowTickyFlags_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SddB2_srt+192;
 },
 _cde5Y() //  [R1]
         { []
         }
     {offset
       cde5Y: // global
           I64[Sp] = block_cde64_info;
           _sdcti::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _sdcti::I64;
           if (R1 & 7 != 0) goto ude6d; else goto cde68;
       ude6d: // global
           call _cde64(R1) args: 0, res: 0, upd: 0;
       cde68: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cde5Y_info" {
     block_cde5Y_info:
         const _cde5Y;
         const 1;
         const 4294967326;
         const SddB2_srt+192;
 },
 _cde64() //  [R1]
         { []
         }
     {offset
       cde64: // global
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = I64[Sp + 8];
           Sp = Sp + 16;
           call GHC.RTS.Flags.$w$cshowsPrec8_entry(R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cde64_info" {
     block_cde64_info:
         const _cde64;
         const 65;
         const 4294967326;
         const SddB2_srt+192;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.696225078 UTC

[section ""data" . GHC.RTS.Flags.$fShowTickyFlags_$cshow_closure" {
     GHC.RTS.Flags.$fShowTickyFlags_$cshow_closure:
         const GHC.RTS.Flags.$fShowTickyFlags_$cshow_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowTickyFlags_$cshow_entry() //  [R2]
         { []
         }
     {offset
       cde6B: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cde6C; else goto cde6D;
       cde6C: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.$fShowTickyFlags_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cde6D: // global
           I64[Sp - 8] = block_cde6y_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ude6H; else goto cde6z;
       ude6H: // global
           call _cde6y(R1) args: 0, res: 0, upd: 0;
       cde6z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowTickyFlags_$cshow_info" {
     GHC.RTS.Flags.$fShowTickyFlags_$cshow_info:
         const GHC.RTS.Flags.$fShowTickyFlags_$cshow_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const SddB2_srt+192;
 },
 _cde6y() //  [R1]
         { []
         }
     {offset
       cde6y: // global
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = 0;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = GHC.Types.[]_closure+1;
           Sp = Sp - 8;
           call GHC.RTS.Flags.$w$cshowsPrec8_entry(R4,
                                                   R3,
                                                   R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cde6y_info" {
     block_cde6y_info:
         const _cde6y;
         const 0;
         const 4294967326;
         const SddB2_srt+192;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.702473325 UTC

[section ""data" . GHC.RTS.Flags.$fShowTickyFlags1_closure" {
     GHC.RTS.Flags.$fShowTickyFlags1_closure:
         const GHC.RTS.Flags.$fShowTickyFlags1_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowTickyFlags1_entry() //  [R2]
         { []
         }
     {offset
       cde72: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cde73; else goto cde74;
       cde73: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.$fShowTickyFlags1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cde74: // global
           I64[Sp - 8] = block_cde6Z_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ude78; else goto cde70;
       ude78: // global
           call _cde6Z(R1) args: 0, res: 0, upd: 0;
       cde70: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowTickyFlags1_info" {
     GHC.RTS.Flags.$fShowTickyFlags1_info:
         const GHC.RTS.Flags.$fShowTickyFlags1_entry;
         const 0;
         const 38654705678;
         const 4294967301;
         const SddB2_srt+192;
 },
 _cde6Z() //  [R1]
         { []
         }
     {offset
       cde6Z: // global
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = 0;
           Sp = Sp + 8;
           call GHC.RTS.Flags.$w$cshowsPrec8_entry(R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cde6Z_info" {
     block_cde6Z_info:
         const _cde6Z;
         const 0;
         const 4294967326;
         const SddB2_srt+192;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.707969368 UTC

[section ""data" . GHC.RTS.Flags.$fShowTickyFlags_$cshowList_closure" {
     GHC.RTS.Flags.$fShowTickyFlags_$cshowList_closure:
         const GHC.RTS.Flags.$fShowTickyFlags_$cshowList_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowTickyFlags_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       cde7n: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.RTS.Flags.$fShowTickyFlags1_closure+1;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowTickyFlags_$cshowList_info" {
     GHC.RTS.Flags.$fShowTickyFlags_$cshowList_info:
         const GHC.RTS.Flags.$fShowTickyFlags_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const SddB2_srt+216;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.711338683 UTC

[section ""data" . GHC.RTS.Flags.$fShowTickyFlags_closure" {
     GHC.RTS.Flags.$fShowTickyFlags_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.RTS.Flags.$fShowTickyFlags_$cshowsPrec_closure+2;
         const GHC.RTS.Flags.$fShowTickyFlags_$cshow_closure+1;
         const GHC.RTS.Flags.$fShowTickyFlags_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.713099057 UTC

[section ""cstring" . GHC.RTS.Flags.$fShowDoTrace6_bytes" {
     GHC.RTS.Flags.$fShowDoTrace6_bytes:
         I8[] [84,114,97,99,101,78,111,110,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.715698191 UTC

[section ""data" . GHC.RTS.Flags.$fShowDoTrace5_closure" {
     GHC.RTS.Flags.$fShowDoTrace5_closure:
         const GHC.RTS.Flags.$fShowDoTrace5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fShowDoTrace5_entry() //  [R1]
         { []
         }
     {offset
       cde7C: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cde7D; else goto cde7E;
       cde7D: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cde7E: // global
           (_cde7z::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cde7z::I64 == 0) goto cde7B; else goto cde7A;
       cde7B: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cde7A: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cde7z::I64;
           R2 = GHC.RTS.Flags.$fShowDoTrace6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowDoTrace5_info" {
     GHC.RTS.Flags.$fShowDoTrace5_info:
         const GHC.RTS.Flags.$fShowDoTrace5_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.719681174 UTC

[section ""cstring" . GHC.RTS.Flags.$fShowDoTrace4_bytes" {
     GHC.RTS.Flags.$fShowDoTrace4_bytes:
         I8[] [84,114,97,99,101,69,118,101,110,116,76,111,103]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.722331077 UTC

[section ""data" . GHC.RTS.Flags.$fShowDoTrace3_closure" {
     GHC.RTS.Flags.$fShowDoTrace3_closure:
         const GHC.RTS.Flags.$fShowDoTrace3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fShowDoTrace3_entry() //  [R1]
         { []
         }
     {offset
       cde7U: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cde7V; else goto cde7W;
       cde7V: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cde7W: // global
           (_cde7R::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cde7R::I64 == 0) goto cde7T; else goto cde7S;
       cde7T: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cde7S: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cde7R::I64;
           R2 = GHC.RTS.Flags.$fShowDoTrace4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowDoTrace3_info" {
     GHC.RTS.Flags.$fShowDoTrace3_info:
         const GHC.RTS.Flags.$fShowDoTrace3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.728567188 UTC

[section ""cstring" . GHC.RTS.Flags.$fShowDoTrace2_bytes" {
     GHC.RTS.Flags.$fShowDoTrace2_bytes:
         I8[] [84,114,97,99,101,83,116,100,101,114,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.731128446 UTC

[section ""data" . GHC.RTS.Flags.$fShowDoTrace1_closure" {
     GHC.RTS.Flags.$fShowDoTrace1_closure:
         const GHC.RTS.Flags.$fShowDoTrace1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fShowDoTrace1_entry() //  [R1]
         { []
         }
     {offset
       cde8c: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cde8d; else goto cde8e;
       cde8d: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cde8e: // global
           (_cde89::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cde89::I64 == 0) goto cde8b; else goto cde8a;
       cde8b: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cde8a: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cde89::I64;
           R2 = GHC.RTS.Flags.$fShowDoTrace2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowDoTrace1_info" {
     GHC.RTS.Flags.$fShowDoTrace1_info:
         const GHC.RTS.Flags.$fShowDoTrace1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.736328292 UTC

[section ""data" . GHC.RTS.Flags.$w$cshowsPrec4_closure" {
     GHC.RTS.Flags.$w$cshowsPrec4_closure:
         const GHC.RTS.Flags.$w$cshowsPrec4_info;
         const 0;
 },
 GHC.RTS.Flags.$w$cshowsPrec4_entry() //  [R2, R3]
         { []
         }
     {offset
       cde8z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cde8A; else goto cde8B;
       cde8A: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.RTS.Flags.$w$cshowsPrec4_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cde8B: // global
           I64[Sp - 16] = block_cde8r_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ude8M; else goto cde8s;
       ude8M: // global
           call _cde8r(R1) args: 0, res: 0, upd: 0;
       cde8s: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$w$cshowsPrec4_info" {
     GHC.RTS.Flags.$w$cshowsPrec4_info:
         const GHC.RTS.Flags.$w$cshowsPrec4_entry;
         const 0;
         const 64424509454;
         const 8589934607;
         const SddB2_srt+224;
 },
 _cde8r() //  [R1]
         { []
         }
     {offset
       cde8r: // global
           _sdctx::P64 = P64[Sp + 8];
           _cde8y::P64 = R1 & 7;
           if (_cde8y::P64 < 3) goto ude8L; else goto cde8x;
       ude8L: // global
           if (_cde8y::P64 < 2) goto cde8v; else goto cde8w;
       cde8v: // global
           R3 = _sdctx::P64;
           R2 = GHC.RTS.Flags.$fShowDoTrace5_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cde8w: // global
           R3 = _sdctx::P64;
           R2 = GHC.RTS.Flags.$fShowDoTrace3_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cde8x: // global
           R3 = _sdctx::P64;
           R2 = GHC.RTS.Flags.$fShowDoTrace1_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cde8r_info" {
     block_cde8r_info:
         const _cde8r;
         const 1;
         const 30064771102;
         const SddB2_srt+232;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.742607806 UTC

[section ""data" . GHC.RTS.Flags.$fShowDoTrace_$cshowsPrec_closure" {
     GHC.RTS.Flags.$fShowDoTrace_$cshowsPrec_closure:
         const GHC.RTS.Flags.$fShowDoTrace_$cshowsPrec_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowDoTrace_$cshowsPrec_entry() //  [R3, R4]
         { []
         }
     {offset
       cde92: // global
           _sdctA::P64 = R3;
           R3 = R4;
           R2 = _sdctA::P64;
           call GHC.RTS.Flags.$w$cshowsPrec4_entry(R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowDoTrace_$cshowsPrec_info" {
     GHC.RTS.Flags.$fShowDoTrace_$cshowsPrec_info:
         const GHC.RTS.Flags.$fShowDoTrace_$cshowsPrec_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const SddB2_srt+224;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.746964604 UTC

[section ""data" . GHC.RTS.Flags.$fShowDoTrace_$cshow_closure" {
     GHC.RTS.Flags.$fShowDoTrace_$cshow_closure:
         const GHC.RTS.Flags.$fShowDoTrace_$cshow_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowDoTrace_$cshow_entry() //  [R2]
         { []
         }
     {offset
       cde9l: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cde9m; else goto cde9n;
       cde9m: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.$fShowDoTrace_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cde9n: // global
           I64[Sp - 8] = block_cde9d_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ude9y; else goto cde9e;
       ude9y: // global
           call _cde9d(R1) args: 0, res: 0, upd: 0;
       cde9e: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowDoTrace_$cshow_info" {
     GHC.RTS.Flags.$fShowDoTrace_$cshow_info:
         const GHC.RTS.Flags.$fShowDoTrace_$cshow_entry;
         const 0;
         const 64424509454;
         const 4294967301;
         const SddB2_srt+232;
 },
 _cde9d() //  [R1]
         { []
         }
     {offset
       cde9d: // global
           _cde9k::P64 = R1 & 7;
           if (_cde9k::P64 < 3) goto ude9x; else goto cde9j;
       ude9x: // global
           if (_cde9k::P64 < 2) goto cde9h; else goto cde9i;
       cde9h: // global
           R1 = GHC.RTS.Flags.$fShowDoTrace5_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cde9i: // global
           R1 = GHC.RTS.Flags.$fShowDoTrace3_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cde9j: // global
           R1 = GHC.RTS.Flags.$fShowDoTrace1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cde9d_info" {
     block_cde9d_info:
         const _cde9d;
         const 0;
         const 30064771102;
         const SddB2_srt+232;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.753018459 UTC

[section ""data" . GHC.RTS.Flags.$fShowDoTrace_$cshowList_closure" {
     GHC.RTS.Flags.$fShowDoTrace_$cshowList_closure:
         const GHC.RTS.Flags.$fShowDoTrace_$cshowList_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowDoTrace_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       cde9R: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.RTS.Flags.$w$cshowsPrec4_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowDoTrace_$cshowList_info" {
     GHC.RTS.Flags.$fShowDoTrace_$cshowList_info:
         const GHC.RTS.Flags.$fShowDoTrace_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const SddB2_srt+224;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.756569089 UTC

[section ""data" . GHC.RTS.Flags.$fShowDoTrace_closure" {
     GHC.RTS.Flags.$fShowDoTrace_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.RTS.Flags.$fShowDoTrace_$cshowsPrec_closure+3;
         const GHC.RTS.Flags.$fShowDoTrace_$cshow_closure+1;
         const GHC.RTS.Flags.$fShowDoTrace_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.758549937 UTC

[section ""cstring" . f_rcV5e_bytes" {
     f_rcV5e_bytes:
         I8[] [84,114,97,99,101,70,108,97,103,115,32,123]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.761004741 UTC

[section ""data" . f1_rcV5f_closure" {
     f1_rcV5f_closure:
         const f1_rcV5f_info;
         const 0;
         const 0;
         const 0;
 },
 f1_rcV5f_entry() //  [R1]
         { []
         }
     {offset
       cdea6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdea7; else goto cdea8;
       cdea7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdea8: // global
           (_cdea3::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdea3::I64 == 0) goto cdea5; else goto cdea4;
       cdea5: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdea4: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdea3::I64;
           R2 = f_rcV5e_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f1_rcV5f_info" {
     f1_rcV5f_info:
         const f1_rcV5f_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.765972281 UTC

[section ""cstring" . lvl15_rcV5g_bytes" {
     lvl15_rcV5g_bytes:
         I8[] [116,114,97,99,105,110,103,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.767683107 UTC

[section ""cstring" . lvl16_rcV5h_bytes" {
     lvl16_rcV5h_bytes:
         I8[] [116,105,109,101,115,116,97,109,112,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.769415063 UTC

[section ""cstring" . lvl17_rcV5i_bytes" {
     lvl17_rcV5i_bytes:
         I8[] [116,114,97,99,101,83,99,104,101,100,117,108,101,114,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.771114565 UTC

[section ""cstring" . lvl18_rcV5j_bytes" {
     lvl18_rcV5j_bytes:
         I8[] [116,114,97,99,101,71,99,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.772884836 UTC

[section ""cstring" . lvl19_rcV5k_bytes" {
     lvl19_rcV5k_bytes:
         I8[] [115,112,97,114,107,115,83,97,109,112,108,101,100,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.774650123 UTC

[section ""cstring" . lvl20_rcV5l_bytes" {
     lvl20_rcV5l_bytes:
         I8[] [115,112,97,114,107,115,70,117,108,108,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.776321643 UTC

[section ""cstring" . lvl21_rcV5m_bytes" {
     lvl21_rcV5m_bytes:
         I8[] [117,115,101,114,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.80815348 UTC

[section ""data" . GHC.RTS.Flags.$w$cshowsPrec9_closure" {
     GHC.RTS.Flags.$w$cshowsPrec9_closure:
         const GHC.RTS.Flags.$w$cshowsPrec9_info;
         const 0;
 },
 GHC.RTS.Flags.$w$cshowsPrec9_slow() //  [R1]
         { []
         }
     {offset
       cdeap: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.RTS.Flags.$w$cshowsPrec9_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2,
                                                   R1) args: 40, res: 0, upd: 8;
     }
 },
 sat_sdctY_entry() //  [R1]
         { []
         }
     {offset
       cdec5: // global
           R3 = P64[R1 + 16];
           R2 = g_rcV52_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdctY_info" {
     sat_sdctY_info:
         const sat_sdctY_entry;
         const 1;
         const 4294967312;
         const SddB2_srt+120;
 },
 sat_sdctZ_entry() //  [R1]
         { []
         }
     {offset
       cdece: // global
           R3 = P64[R1 + 16];
           R2 = g_rcV52_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdctZ_info" {
     sat_sdctZ_info:
         const sat_sdctZ_entry;
         const 1;
         const 4294967312;
         const SddB2_srt+120;
 },
 sat_sdcu0_entry() //  [R1]
         { []
         }
     {offset
       cdecl: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdecm; else goto cdecn;
       cdecm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdecn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cdebW_info;
           _sdctQ::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _sdctQ::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udecu; else goto cdebX;
       udecu: // global
           call _cdebW(R1) args: 0, res: 0, upd: 0;
       cdebX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcu0_info" {
     sat_sdcu0_info:
         const sat_sdcu0_entry;
         const 2;
         const 30064771090;
         const SddB2_srt+120;
 },
 _cdebW() //  [R1]
         { []
         }
     {offset
       cdebW: // global
           _sdctQ::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cdeci; else goto cdecj;
       cdeci: // global
           Hp = Hp + 24;
           _sdctX::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cdect; else goto cdecp;
       cdecp: // global
           I64[Hp - 16] = sat_sdctY_info;
           P64[Hp] = _sdctQ::P64;
           R3 = Hp - 16;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cdecj: // global
           Hp = Hp + 24;
           _sdctX::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cdect; else goto cdecs;
       cdect: // global
           HpAlloc = 24;
           R1 = _sdctX::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdecs: // global
           I64[Hp - 16] = sat_sdctZ_info;
           P64[Hp] = _sdctQ::P64;
           R3 = Hp - 16;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdebW_info" {
     block_cdebW_info:
         const _cdebW;
         const 1;
         const 30064771102;
         const SddB2_srt+120;
 },
 sat_sdcu1_entry() //  [R1]
         { []
         }
     {offset
       cdecv: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdecz; else goto cdecy;
       cdecz: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdecy: // global
           _sdctN::P64 = P64[R1 + 16];
           _sdctQ::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_sdcu0_info;
           P64[Hp - 8] = _sdctN::P64;
           P64[Hp] = _sdctQ::P64;
           R3 = Hp - 24;
           R2 = lvl21_rcV5m_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcu1_info" {
     sat_sdcu1_info:
         const sat_sdcu1_entry;
         const 2;
         const 30064771090;
         const SddB2_srt+120;
 },
 sat_sdcu2_entry() //  [R1]
         { []
         }
     {offset
       cdecA: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdecE; else goto cdecD;
       cdecE: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdecD: // global
           _sdctN::P64 = P64[R1 + 16];
           _sdctQ::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_sdcu1_info;
           P64[Hp - 8] = _sdctN::P64;
           P64[Hp] = _sdctQ::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcu2_info" {
     sat_sdcu2_info:
         const sat_sdcu2_entry;
         const 2;
         const 64424509458;
         const SddB2_srt+120;
 },
 sat_sdcu4_entry() //  [R1]
         { []
         }
     {offset
       cded2: // global
           R3 = P64[R1 + 16];
           R2 = g_rcV52_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcu4_info" {
     sat_sdcu4_info:
         const sat_sdcu4_entry;
         const 1;
         const 4294967312;
         const SddB2_srt+120;
 },
 sat_sdcu5_entry() //  [R1]
         { []
         }
     {offset
       cdedb: // global
           R3 = P64[R1 + 16];
           R2 = g_rcV52_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcu5_info" {
     sat_sdcu5_info:
         const sat_sdcu5_entry;
         const 1;
         const 4294967312;
         const SddB2_srt+120;
 },
 sat_sdcu6_entry() //  [R1]
         { []
         }
     {offset
       cdedi: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdedj; else goto cdedk;
       cdedj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdedk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cdecT_info;
           _sdctQ::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _sdctQ::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udedr; else goto cdecU;
       udedr: // global
           call _cdecT(R1) args: 0, res: 0, upd: 0;
       cdecU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcu6_info" {
     sat_sdcu6_info:
         const sat_sdcu6_entry;
         const 2;
         const 30064771090;
         const SddB2_srt+120;
 },
 _cdecT() //  [R1]
         { []
         }
     {offset
       cdecT: // global
           _sdctQ::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cdedf; else goto cdedg;
       cdedf: // global
           Hp = Hp + 24;
           _sdcu3::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cdedq; else goto cdedm;
       cdedm: // global
           I64[Hp - 16] = sat_sdcu4_info;
           P64[Hp] = _sdctQ::P64;
           R3 = Hp - 16;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cdedg: // global
           Hp = Hp + 24;
           _sdcu3::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cdedq; else goto cdedp;
       cdedq: // global
           HpAlloc = 24;
           R1 = _sdcu3::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdedp: // global
           I64[Hp - 16] = sat_sdcu5_info;
           P64[Hp] = _sdctQ::P64;
           R3 = Hp - 16;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdecT_info" {
     block_cdecT_info:
         const _cdecT;
         const 1;
         const 30064771102;
         const SddB2_srt+120;
 },
 sat_sdcu7_entry() //  [R1]
         { []
         }
     {offset
       cdeds: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdedw; else goto cdedv;
       cdedw: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdedv: // global
           _sdctN::P64 = P64[R1 + 16];
           _sdctQ::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_sdcu6_info;
           P64[Hp - 8] = _sdctN::P64;
           P64[Hp] = _sdctQ::P64;
           R3 = Hp - 24;
           R2 = lvl21_rcV5m_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcu7_info" {
     sat_sdcu7_info:
         const sat_sdcu7_entry;
         const 2;
         const 30064771090;
         const SddB2_srt+120;
 },
 sat_sdcu8_entry() //  [R1]
         { []
         }
     {offset
       cdedx: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdedB; else goto cdedA;
       cdedB: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdedA: // global
           _sdctN::P64 = P64[R1 + 16];
           _sdctQ::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_sdcu7_info;
           P64[Hp - 8] = _sdctN::P64;
           P64[Hp] = _sdctQ::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcu8_info" {
     sat_sdcu8_info:
         const sat_sdcu8_entry;
         const 2;
         const 64424509458;
         const SddB2_srt+120;
 },
 sat_sdcu9_entry() //  [R1]
         { []
         }
     {offset
       cdedG: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdedH; else goto cdedI;
       cdedH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdedI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cdebF_info;
           _sdctN::P64 = P64[R1 + 24];
           _sdctQ::P64 = P64[R1 + 32];
           R1 = P64[R1 + 16];
           P64[Sp - 32] = _sdctN::P64;
           P64[Sp - 24] = _sdctQ::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto udedP; else goto cdebG;
       udedP: // global
           call _cdebF(R1) args: 0, res: 0, upd: 0;
       cdebG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcu9_info" {
     sat_sdcu9_info:
         const sat_sdcu9_entry;
         const 3;
         const 64424509455;
         const SddB2_srt+120;
 },
 _cdebF() //  [R1]
         { []
         }
     {offset
       cdebF: // global
           _sdctN::P64 = P64[Sp + 8];
           _sdctQ::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto cdedD; else goto cdedE;
       cdedD: // global
           Hp = Hp + 32;
           _sdctW::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cdedO; else goto cdedK;
       cdedK: // global
           I64[Hp - 24] = sat_sdcu2_info;
           P64[Hp - 8] = _sdctN::P64;
           P64[Hp] = _sdctQ::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cdedE: // global
           Hp = Hp + 32;
           _sdctW::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cdedO; else goto cdedN;
       cdedO: // global
           HpAlloc = 32;
           R1 = _sdctW::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdedN: // global
           I64[Hp - 24] = sat_sdcu8_info;
           P64[Hp - 8] = _sdctN::P64;
           P64[Hp] = _sdctQ::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdebF_info" {
     block_cdebF_info:
         const _cdebF;
         const 2;
         const 64424509470;
         const SddB2_srt+120;
 },
 sat_sdcua_entry() //  [R1]
         { []
         }
     {offset
       cdedQ: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdedU; else goto cdedT;
       cdedU: // global
           HpAlloc = 40;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdedT: // global
           _sdctM::P64 = P64[R1 + 16];
           _sdctN::P64 = P64[R1 + 24];
           _sdctQ::P64 = P64[R1 + 32];
           I64[Hp - 32] = sat_sdcu9_info;
           P64[Hp - 16] = _sdctM::P64;
           P64[Hp - 8] = _sdctN::P64;
           P64[Hp] = _sdctQ::P64;
           R3 = Hp - 32;
           R2 = lvl20_rcV5l_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcua_info" {
     sat_sdcua_info:
         const sat_sdcua_entry;
         const 3;
         const 64424509455;
         const SddB2_srt+120;
 },
 sat_sdcub_entry() //  [R1]
         { []
         }
     {offset
       cdedV: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdedZ; else goto cdedY;
       cdedZ: // global
           HpAlloc = 40;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdedY: // global
           _sdctM::P64 = P64[R1 + 16];
           _sdctN::P64 = P64[R1 + 24];
           _sdctQ::P64 = P64[R1 + 32];
           I64[Hp - 32] = sat_sdcua_info;
           P64[Hp - 16] = _sdctM::P64;
           P64[Hp - 8] = _sdctN::P64;
           P64[Hp] = _sdctQ::P64;
           R3 = Hp - 32;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcub_info" {
     sat_sdcub_info:
         const sat_sdcub_entry;
         const 3;
         const 64424509455;
         const SddB2_srt+120;
 },
 sat_sdcue_entry() //  [R1]
         { []
         }
     {offset
       cdeeE: // global
           R3 = P64[R1 + 16];
           R2 = g_rcV52_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcue_info" {
     sat_sdcue_info:
         const sat_sdcue_entry;
         const 1;
         const 4294967312;
         const SddB2_srt+120;
 },
 sat_sdcuf_entry() //  [R1]
         { []
         }
     {offset
       cdeeN: // global
           R3 = P64[R1 + 16];
           R2 = g_rcV52_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcuf_info" {
     sat_sdcuf_info:
         const sat_sdcuf_entry;
         const 1;
         const 4294967312;
         const SddB2_srt+120;
 },
 sat_sdcug_entry() //  [R1]
         { []
         }
     {offset
       cdeeU: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdeeV; else goto cdeeW;
       cdeeV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdeeW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cdeev_info;
           _sdctQ::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _sdctQ::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udef3; else goto cdeew;
       udef3: // global
           call _cdeev(R1) args: 0, res: 0, upd: 0;
       cdeew: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcug_info" {
     sat_sdcug_info:
         const sat_sdcug_entry;
         const 2;
         const 30064771090;
         const SddB2_srt+120;
 },
 _cdeev() //  [R1]
         { []
         }
     {offset
       cdeev: // global
           _sdctQ::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cdeeR; else goto cdeeS;
       cdeeR: // global
           Hp = Hp + 24;
           _sdcud::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cdef2; else goto cdeeY;
       cdeeY: // global
           I64[Hp - 16] = sat_sdcue_info;
           P64[Hp] = _sdctQ::P64;
           R3 = Hp - 16;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cdeeS: // global
           Hp = Hp + 24;
           _sdcud::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cdef2; else goto cdef1;
       cdef2: // global
           HpAlloc = 24;
           R1 = _sdcud::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdef1: // global
           I64[Hp - 16] = sat_sdcuf_info;
           P64[Hp] = _sdctQ::P64;
           R3 = Hp - 16;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdeev_info" {
     block_cdeev_info:
         const _cdeev;
         const 1;
         const 30064771102;
         const SddB2_srt+120;
 },
 sat_sdcuh_entry() //  [R1]
         { []
         }
     {offset
       cdef4: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdef8; else goto cdef7;
       cdef8: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdef7: // global
           _sdctN::P64 = P64[R1 + 16];
           _sdctQ::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_sdcug_info;
           P64[Hp - 8] = _sdctN::P64;
           P64[Hp] = _sdctQ::P64;
           R3 = Hp - 24;
           R2 = lvl21_rcV5m_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcuh_info" {
     sat_sdcuh_info:
         const sat_sdcuh_entry;
         const 2;
         const 30064771090;
         const SddB2_srt+120;
 },
 sat_sdcui_entry() //  [R1]
         { []
         }
     {offset
       cdef9: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdefd; else goto cdefc;
       cdefd: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdefc: // global
           _sdctN::P64 = P64[R1 + 16];
           _sdctQ::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_sdcuh_info;
           P64[Hp - 8] = _sdctN::P64;
           P64[Hp] = _sdctQ::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcui_info" {
     sat_sdcui_info:
         const sat_sdcui_entry;
         const 2;
         const 64424509458;
         const SddB2_srt+120;
 },
 sat_sdcuk_entry() //  [R1]
         { []
         }
     {offset
       cdefB: // global
           R3 = P64[R1 + 16];
           R2 = g_rcV52_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcuk_info" {
     sat_sdcuk_info:
         const sat_sdcuk_entry;
         const 1;
         const 4294967312;
         const SddB2_srt+120;
 },
 sat_sdcul_entry() //  [R1]
         { []
         }
     {offset
       cdefK: // global
           R3 = P64[R1 + 16];
           R2 = g_rcV52_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcul_info" {
     sat_sdcul_info:
         const sat_sdcul_entry;
         const 1;
         const 4294967312;
         const SddB2_srt+120;
 },
 sat_sdcum_entry() //  [R1]
         { []
         }
     {offset
       cdefR: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdefS; else goto cdefT;
       cdefS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdefT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cdefs_info;
           _sdctQ::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _sdctQ::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udeg0; else goto cdeft;
       udeg0: // global
           call _cdefs(R1) args: 0, res: 0, upd: 0;
       cdeft: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcum_info" {
     sat_sdcum_info:
         const sat_sdcum_entry;
         const 2;
         const 30064771090;
         const SddB2_srt+120;
 },
 _cdefs() //  [R1]
         { []
         }
     {offset
       cdefs: // global
           _sdctQ::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cdefO; else goto cdefP;
       cdefO: // global
           Hp = Hp + 24;
           _sdcuj::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cdefZ; else goto cdefV;
       cdefV: // global
           I64[Hp - 16] = sat_sdcuk_info;
           P64[Hp] = _sdctQ::P64;
           R3 = Hp - 16;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cdefP: // global
           Hp = Hp + 24;
           _sdcuj::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cdefZ; else goto cdefY;
       cdefZ: // global
           HpAlloc = 24;
           R1 = _sdcuj::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdefY: // global
           I64[Hp - 16] = sat_sdcul_info;
           P64[Hp] = _sdctQ::P64;
           R3 = Hp - 16;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdefs_info" {
     block_cdefs_info:
         const _cdefs;
         const 1;
         const 30064771102;
         const SddB2_srt+120;
 },
 sat_sdcun_entry() //  [R1]
         { []
         }
     {offset
       cdeg1: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdeg5; else goto cdeg4;
       cdeg5: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdeg4: // global
           _sdctN::P64 = P64[R1 + 16];
           _sdctQ::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_sdcum_info;
           P64[Hp - 8] = _sdctN::P64;
           P64[Hp] = _sdctQ::P64;
           R3 = Hp - 24;
           R2 = lvl21_rcV5m_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcun_info" {
     sat_sdcun_info:
         const sat_sdcun_entry;
         const 2;
         const 30064771090;
         const SddB2_srt+120;
 },
 sat_sdcuo_entry() //  [R1]
         { []
         }
     {offset
       cdeg6: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdega; else goto cdeg9;
       cdega: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdeg9: // global
           _sdctN::P64 = P64[R1 + 16];
           _sdctQ::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_sdcun_info;
           P64[Hp - 8] = _sdctN::P64;
           P64[Hp] = _sdctQ::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcuo_info" {
     sat_sdcuo_info:
         const sat_sdcuo_entry;
         const 2;
         const 64424509458;
         const SddB2_srt+120;
 },
 sat_sdcup_entry() //  [R1]
         { []
         }
     {offset
       cdegf: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdegg; else goto cdegh;
       cdegg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdegh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cdeee_info;
           _sdctN::P64 = P64[R1 + 24];
           _sdctQ::P64 = P64[R1 + 32];
           R1 = P64[R1 + 16];
           P64[Sp - 32] = _sdctN::P64;
           P64[Sp - 24] = _sdctQ::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto udego; else goto cdeef;
       udego: // global
           call _cdeee(R1) args: 0, res: 0, upd: 0;
       cdeef: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcup_info" {
     sat_sdcup_info:
         const sat_sdcup_entry;
         const 3;
         const 64424509455;
         const SddB2_srt+120;
 },
 _cdeee() //  [R1]
         { []
         }
     {offset
       cdeee: // global
           _sdctN::P64 = P64[Sp + 8];
           _sdctQ::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto cdegc; else goto cdegd;
       cdegc: // global
           Hp = Hp + 32;
           _sdcuc::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cdegn; else goto cdegj;
       cdegj: // global
           I64[Hp - 24] = sat_sdcui_info;
           P64[Hp - 8] = _sdctN::P64;
           P64[Hp] = _sdctQ::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cdegd: // global
           Hp = Hp + 32;
           _sdcuc::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cdegn; else goto cdegm;
       cdegn: // global
           HpAlloc = 32;
           R1 = _sdcuc::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdegm: // global
           I64[Hp - 24] = sat_sdcuo_info;
           P64[Hp - 8] = _sdctN::P64;
           P64[Hp] = _sdctQ::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdeee_info" {
     block_cdeee_info:
         const _cdeee;
         const 2;
         const 64424509470;
         const SddB2_srt+120;
 },
 sat_sdcuq_entry() //  [R1]
         { []
         }
     {offset
       cdegp: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdegt; else goto cdegs;
       cdegt: // global
           HpAlloc = 40;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdegs: // global
           _sdctM::P64 = P64[R1 + 16];
           _sdctN::P64 = P64[R1 + 24];
           _sdctQ::P64 = P64[R1 + 32];
           I64[Hp - 32] = sat_sdcup_info;
           P64[Hp - 16] = _sdctM::P64;
           P64[Hp - 8] = _sdctN::P64;
           P64[Hp] = _sdctQ::P64;
           R3 = Hp - 32;
           R2 = lvl20_rcV5l_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcuq_info" {
     sat_sdcuq_info:
         const sat_sdcuq_entry;
         const 3;
         const 64424509455;
         const SddB2_srt+120;
 },
 sat_sdcur_entry() //  [R1]
         { []
         }
     {offset
       cdegu: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdegy; else goto cdegx;
       cdegy: // global
           HpAlloc = 40;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdegx: // global
           _sdctM::P64 = P64[R1 + 16];
           _sdctN::P64 = P64[R1 + 24];
           _sdctQ::P64 = P64[R1 + 32];
           I64[Hp - 32] = sat_sdcuq_info;
           P64[Hp - 16] = _sdctM::P64;
           P64[Hp - 8] = _sdctN::P64;
           P64[Hp] = _sdctQ::P64;
           R3 = Hp - 32;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcur_info" {
     sat_sdcur_info:
         const sat_sdcur_entry;
         const 3;
         const 64424509455;
         const SddB2_srt+120;
 },
 sat_sdcus_entry() //  [R1]
         { []
         }
     {offset
       cdegD: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cdegE; else goto cdegF;
       cdegE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdegF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_cdebo_info;
           _sdctM::P64 = P64[R1 + 24];
           _sdctN::P64 = P64[R1 + 32];
           _sdctQ::P64 = P64[R1 + 40];
           R1 = P64[R1 + 16];
           P64[Sp - 40] = _sdctM::P64;
           P64[Sp - 32] = _sdctN::P64;
           P64[Sp - 24] = _sdctQ::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto udegM; else goto cdebp;
       udegM: // global
           call _cdebo(R1) args: 0, res: 0, upd: 0;
       cdebp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcus_info" {
     sat_sdcus_info:
         const sat_sdcus_entry;
         const 4;
         const 64424509455;
         const SddB2_srt+120;
 },
 _cdebo() //  [R1]
         { []
         }
     {offset
       cdebo: // global
           _sdctM::P64 = P64[Sp + 8];
           _sdctN::P64 = P64[Sp + 16];
           _sdctQ::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto cdegA; else goto cdegB;
       cdegA: // global
           Hp = Hp + 40;
           _sdctV::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cdegL; else goto cdegH;
       cdegH: // global
           I64[Hp - 32] = sat_sdcub_info;
           P64[Hp - 16] = _sdctM::P64;
           P64[Hp - 8] = _sdctN::P64;
           P64[Hp] = _sdctQ::P64;
           R3 = Hp - 32;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 32;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cdegB: // global
           Hp = Hp + 40;
           _sdctV::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cdegL; else goto cdegK;
       cdegL: // global
           HpAlloc = 40;
           R1 = _sdctV::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdegK: // global
           I64[Hp - 32] = sat_sdcur_info;
           P64[Hp - 16] = _sdctM::P64;
           P64[Hp - 8] = _sdctN::P64;
           P64[Hp] = _sdctQ::P64;
           R3 = Hp - 32;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 32;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdebo_info" {
     block_cdebo_info:
         const _cdebo;
         const 3;
         const 64424509470;
         const SddB2_srt+120;
 },
 sat_sdcut_entry() //  [R1]
         { []
         }
     {offset
       cdegN: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdegR; else goto cdegQ;
       cdegR: // global
           HpAlloc = 48;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdegQ: // global
           _sdctL::P64 = P64[R1 + 16];
           _sdctM::P64 = P64[R1 + 24];
           _sdctN::P64 = P64[R1 + 32];
           _sdctQ::P64 = P64[R1 + 40];
           I64[Hp - 40] = sat_sdcus_info;
           P64[Hp - 24] = _sdctL::P64;
           P64[Hp - 16] = _sdctM::P64;
           P64[Hp - 8] = _sdctN::P64;
           P64[Hp] = _sdctQ::P64;
           R3 = Hp - 40;
           R2 = lvl19_rcV5k_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcut_info" {
     sat_sdcut_info:
         const sat_sdcut_entry;
         const 4;
         const 64424509455;
         const SddB2_srt+120;
 },
 eta3_sdctU_entry() //  [R1]
         { []
         }
     {offset
       cdegS: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdegW; else goto cdegV;
       cdegW: // global
           HpAlloc = 48;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdegV: // global
           _sdctL::P64 = P64[R1 + 16];
           _sdctM::P64 = P64[R1 + 24];
           _sdctN::P64 = P64[R1 + 32];
           _sdctQ::P64 = P64[R1 + 40];
           I64[Hp - 40] = sat_sdcut_info;
           P64[Hp - 24] = _sdctL::P64;
           P64[Hp - 16] = _sdctM::P64;
           P64[Hp - 8] = _sdctN::P64;
           P64[Hp] = _sdctQ::P64;
           R3 = Hp - 40;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . eta3_sdctU_info" {
     eta3_sdctU_info:
         const eta3_sdctU_entry;
         const 4;
         const 64424509455;
         const SddB2_srt+120;
 },
 sat_sdcuv_entry() //  [R1]
         { []
         }
     {offset
       cdeh4: // global
           _sdcuv::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cdeh5; else goto cdeh6;
       cdeh6: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdeh8; else goto cdeh7;
       cdeh8: // global
           HpAlloc = 48;
           goto cdeh5;
       cdeh5: // global
           R1 = _sdcuv::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdeh7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcuv::P64;
           _sdctK::P64 = P64[_sdcuv::P64 + 16];
           _sdctL::P64 = P64[_sdcuv::P64 + 24];
           _sdctM::P64 = P64[_sdcuv::P64 + 32];
           _sdctN::P64 = P64[_sdcuv::P64 + 40];
           _sdctQ::P64 = P64[_sdcuv::P64 + 48];
           I64[Hp - 40] = eta3_sdctU_info;
           P64[Hp - 24] = _sdctL::P64;
           P64[Hp - 16] = _sdctM::P64;
           P64[Hp - 8] = _sdctN::P64;
           P64[Hp] = _sdctQ::P64;
           I64[Sp - 32] = block_cdegX_info;
           R1 = _sdctK::P64;
           P64[Sp - 24] = Hp - 40;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udehf; else goto cdegY;
       udehf: // global
           call _cdegX(R1) args: 0, res: 0, upd: 0;
       cdegY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcuv_info" {
     sat_sdcuv_info:
         const sat_sdcuv_entry;
         const 5;
         const 64424509455;
         const SddB2_srt+120;
 },
 _cdegX() //  [R1]
         { []
         }
     {offset
       cdegX: // global
           _cdebc::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cdeh1; else goto cdeh2;
       cdeh1: // global
           R3 = _cdebc::P64;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cdeh2: // global
           R3 = _cdebc::P64;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdegX_info" {
     block_cdegX_info:
         const _cdegX;
         const 1;
         const 12884901918;
         const SddB2_srt+128;
 },
 sat_sdcuw_entry() //  [R1]
         { []
         }
     {offset
       cdehg: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdehk; else goto cdehj;
       cdehk: // global
           HpAlloc = 56;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdehj: // global
           _sdctK::P64 = P64[R1 + 16];
           _sdctL::P64 = P64[R1 + 24];
           _sdctM::P64 = P64[R1 + 32];
           _sdctN::P64 = P64[R1 + 40];
           _sdctQ::P64 = P64[R1 + 48];
           I64[Hp - 48] = sat_sdcuv_info;
           P64[Hp - 32] = _sdctK::P64;
           P64[Hp - 24] = _sdctL::P64;
           P64[Hp - 16] = _sdctM::P64;
           P64[Hp - 8] = _sdctN::P64;
           P64[Hp] = _sdctQ::P64;
           R3 = Hp - 48;
           R2 = lvl18_rcV5j_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcuw_info" {
     sat_sdcuw_info:
         const sat_sdcuw_entry;
         const 5;
         const 64424509455;
         const SddB2_srt+120;
 },
 eta2_sdctT_entry() //  [R1]
         { []
         }
     {offset
       cdehl: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdehp; else goto cdeho;
       cdehp: // global
           HpAlloc = 56;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdeho: // global
           _sdctK::P64 = P64[R1 + 16];
           _sdctL::P64 = P64[R1 + 24];
           _sdctM::P64 = P64[R1 + 32];
           _sdctN::P64 = P64[R1 + 40];
           _sdctQ::P64 = P64[R1 + 48];
           I64[Hp - 48] = sat_sdcuw_info;
           P64[Hp - 32] = _sdctK::P64;
           P64[Hp - 24] = _sdctL::P64;
           P64[Hp - 16] = _sdctM::P64;
           P64[Hp - 8] = _sdctN::P64;
           P64[Hp] = _sdctQ::P64;
           R3 = Hp - 48;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . eta2_sdctT_info" {
     eta2_sdctT_info:
         const eta2_sdctT_entry;
         const 5;
         const 64424509455;
         const SddB2_srt+120;
 },
 sat_sdcuy_entry() //  [R1]
         { []
         }
     {offset
       cdehx: // global
           _sdcuy::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cdehy; else goto cdehz;
       cdehz: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdehB; else goto cdehA;
       cdehB: // global
           HpAlloc = 56;
           goto cdehy;
       cdehy: // global
           R1 = _sdcuy::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdehA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcuy::P64;
           _sdctJ::P64 = P64[_sdcuy::P64 + 16];
           _sdctK::P64 = P64[_sdcuy::P64 + 24];
           _sdctL::P64 = P64[_sdcuy::P64 + 32];
           _sdctM::P64 = P64[_sdcuy::P64 + 40];
           _sdctN::P64 = P64[_sdcuy::P64 + 48];
           _sdctQ::P64 = P64[_sdcuy::P64 + 56];
           I64[Hp - 48] = eta2_sdctT_info;
           P64[Hp - 32] = _sdctK::P64;
           P64[Hp - 24] = _sdctL::P64;
           P64[Hp - 16] = _sdctM::P64;
           P64[Hp - 8] = _sdctN::P64;
           P64[Hp] = _sdctQ::P64;
           I64[Sp - 32] = block_cdehq_info;
           R1 = _sdctJ::P64;
           P64[Sp - 24] = Hp - 48;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udehI; else goto cdehr;
       udehI: // global
           call _cdehq(R1) args: 0, res: 0, upd: 0;
       cdehr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcuy_info" {
     sat_sdcuy_info:
         const sat_sdcuy_entry;
         const 6;
         const 64424509455;
         const SddB2_srt+120;
 },
 _cdehq() //  [R1]
         { []
         }
     {offset
       cdehq: // global
           _cdeb0::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cdehu; else goto cdehv;
       cdehu: // global
           R3 = _cdeb0::P64;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cdehv: // global
           R3 = _cdeb0::P64;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdehq_info" {
     block_cdehq_info:
         const _cdehq;
         const 1;
         const 12884901918;
         const SddB2_srt+128;
 },
 sat_sdcuz_entry() //  [R1]
         { []
         }
     {offset
       cdehJ: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdehN; else goto cdehM;
       cdehN: // global
           HpAlloc = 64;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdehM: // global
           _sdctJ::P64 = P64[R1 + 16];
           _sdctK::P64 = P64[R1 + 24];
           _sdctL::P64 = P64[R1 + 32];
           _sdctM::P64 = P64[R1 + 40];
           _sdctN::P64 = P64[R1 + 48];
           _sdctQ::P64 = P64[R1 + 56];
           I64[Hp - 56] = sat_sdcuy_info;
           P64[Hp - 40] = _sdctJ::P64;
           P64[Hp - 32] = _sdctK::P64;
           P64[Hp - 24] = _sdctL::P64;
           P64[Hp - 16] = _sdctM::P64;
           P64[Hp - 8] = _sdctN::P64;
           P64[Hp] = _sdctQ::P64;
           R3 = Hp - 56;
           R2 = lvl17_rcV5i_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcuz_info" {
     sat_sdcuz_info:
         const sat_sdcuz_entry;
         const 6;
         const 64424509455;
         const SddB2_srt+120;
 },
 eta1_sdctS_entry() //  [R1]
         { []
         }
     {offset
       cdehO: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdehS; else goto cdehR;
       cdehS: // global
           HpAlloc = 64;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdehR: // global
           _sdctJ::P64 = P64[R1 + 16];
           _sdctK::P64 = P64[R1 + 24];
           _sdctL::P64 = P64[R1 + 32];
           _sdctM::P64 = P64[R1 + 40];
           _sdctN::P64 = P64[R1 + 48];
           _sdctQ::P64 = P64[R1 + 56];
           I64[Hp - 56] = sat_sdcuz_info;
           P64[Hp - 40] = _sdctJ::P64;
           P64[Hp - 32] = _sdctK::P64;
           P64[Hp - 24] = _sdctL::P64;
           P64[Hp - 16] = _sdctM::P64;
           P64[Hp - 8] = _sdctN::P64;
           P64[Hp] = _sdctQ::P64;
           R3 = Hp - 56;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . eta1_sdctS_info" {
     eta1_sdctS_info:
         const eta1_sdctS_entry;
         const 6;
         const 64424509455;
         const SddB2_srt+120;
 },
 sat_sdcuB_entry() //  [R1]
         { []
         }
     {offset
       cdei0: // global
           _sdcuB::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cdei1; else goto cdei2;
       cdei2: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdei4; else goto cdei3;
       cdei4: // global
           HpAlloc = 64;
           goto cdei1;
       cdei1: // global
           R1 = _sdcuB::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdei3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcuB::P64;
           _sdctI::P64 = P64[_sdcuB::P64 + 16];
           _sdctJ::P64 = P64[_sdcuB::P64 + 24];
           _sdctK::P64 = P64[_sdcuB::P64 + 32];
           _sdctL::P64 = P64[_sdcuB::P64 + 40];
           _sdctM::P64 = P64[_sdcuB::P64 + 48];
           _sdctN::P64 = P64[_sdcuB::P64 + 56];
           _sdctQ::P64 = P64[_sdcuB::P64 + 64];
           I64[Hp - 56] = eta1_sdctS_info;
           P64[Hp - 40] = _sdctJ::P64;
           P64[Hp - 32] = _sdctK::P64;
           P64[Hp - 24] = _sdctL::P64;
           P64[Hp - 16] = _sdctM::P64;
           P64[Hp - 8] = _sdctN::P64;
           P64[Hp] = _sdctQ::P64;
           I64[Sp - 32] = block_cdehT_info;
           R1 = _sdctI::P64;
           P64[Sp - 24] = Hp - 56;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udeib; else goto cdehU;
       udeib: // global
           call _cdehT(R1) args: 0, res: 0, upd: 0;
       cdehU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcuB_info" {
     sat_sdcuB_info:
         const sat_sdcuB_entry;
         const 7;
         const 64424509455;
         const SddB2_srt+120;
 },
 _cdehT() //  [R1]
         { []
         }
     {offset
       cdehT: // global
           _cdeaO::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cdehX; else goto cdehY;
       cdehX: // global
           R3 = _cdeaO::P64;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cdehY: // global
           R3 = _cdeaO::P64;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdehT_info" {
     block_cdehT_info:
         const _cdehT;
         const 1;
         const 12884901918;
         const SddB2_srt+128;
 },
 sat_sdcuC_entry() //  [R1]
         { []
         }
     {offset
       cdeic: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdeig; else goto cdeif;
       cdeig: // global
           HpAlloc = 72;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdeif: // global
           _sdctI::P64 = P64[R1 + 16];
           _sdctJ::P64 = P64[R1 + 24];
           _sdctK::P64 = P64[R1 + 32];
           _sdctL::P64 = P64[R1 + 40];
           _sdctM::P64 = P64[R1 + 48];
           _sdctN::P64 = P64[R1 + 56];
           _sdctQ::P64 = P64[R1 + 64];
           I64[Hp - 64] = sat_sdcuB_info;
           P64[Hp - 48] = _sdctI::P64;
           P64[Hp - 40] = _sdctJ::P64;
           P64[Hp - 32] = _sdctK::P64;
           P64[Hp - 24] = _sdctL::P64;
           P64[Hp - 16] = _sdctM::P64;
           P64[Hp - 8] = _sdctN::P64;
           P64[Hp] = _sdctQ::P64;
           R3 = Hp - 64;
           R2 = lvl16_rcV5h_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcuC_info" {
     sat_sdcuC_info:
         const sat_sdcuC_entry;
         const 7;
         const 64424509455;
         const SddB2_srt+120;
 },
 eta_sdctR_entry() //  [R1]
         { []
         }
     {offset
       cdeih: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdeil; else goto cdeik;
       cdeil: // global
           HpAlloc = 72;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdeik: // global
           _sdctI::P64 = P64[R1 + 16];
           _sdctJ::P64 = P64[R1 + 24];
           _sdctK::P64 = P64[R1 + 32];
           _sdctL::P64 = P64[R1 + 40];
           _sdctM::P64 = P64[R1 + 48];
           _sdctN::P64 = P64[R1 + 56];
           _sdctQ::P64 = P64[R1 + 64];
           I64[Hp - 64] = sat_sdcuC_info;
           P64[Hp - 48] = _sdctI::P64;
           P64[Hp - 40] = _sdctJ::P64;
           P64[Hp - 32] = _sdctK::P64;
           P64[Hp - 24] = _sdctL::P64;
           P64[Hp - 16] = _sdctM::P64;
           P64[Hp - 8] = _sdctN::P64;
           P64[Hp] = _sdctQ::P64;
           R3 = Hp - 64;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . eta_sdctR_info" {
     eta_sdctR_info:
         const eta_sdctR_entry;
         const 7;
         const 64424509455;
         const SddB2_srt+120;
 },
 sat_sdcuE_entry() //  [R1]
         { []
         }
     {offset
       cdeiu: // global
           _sdcuE::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cdeiv; else goto cdeiw;
       cdeiw: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdeiy; else goto cdeix;
       cdeiy: // global
           HpAlloc = 72;
           goto cdeiv;
       cdeiv: // global
           R1 = _sdcuE::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdeix: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcuE::P64;
           _sdctH::P64 = P64[_sdcuE::P64 + 16];
           _sdctI::P64 = P64[_sdcuE::P64 + 24];
           _sdctJ::P64 = P64[_sdcuE::P64 + 32];
           _sdctK::P64 = P64[_sdcuE::P64 + 40];
           _sdctL::P64 = P64[_sdcuE::P64 + 48];
           _sdctM::P64 = P64[_sdcuE::P64 + 56];
           _sdctN::P64 = P64[_sdcuE::P64 + 64];
           _sdctQ::P64 = P64[_sdcuE::P64 + 72];
           I64[Hp - 64] = eta_sdctR_info;
           P64[Hp - 48] = _sdctI::P64;
           P64[Hp - 40] = _sdctJ::P64;
           P64[Hp - 32] = _sdctK::P64;
           P64[Hp - 24] = _sdctL::P64;
           P64[Hp - 16] = _sdctM::P64;
           P64[Hp - 8] = _sdctN::P64;
           P64[Hp] = _sdctQ::P64;
           I64[Sp - 32] = block_cdeim_info;
           R1 = _sdctH::P64;
           P64[Sp - 24] = Hp - 64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udeiJ; else goto cdein;
       udeiJ: // global
           call _cdeim(R1) args: 0, res: 0, upd: 0;
       cdein: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcuE_info" {
     sat_sdcuE_info:
         const sat_sdcuE_entry;
         const 8;
         const 492645633753103;
         const SddB2_srt+120;
 },
 _cdeim() //  [R1]
         { []
         }
     {offset
       cdeim: // global
           _cdeaC::P64 = P64[Sp + 8];
           _cdeit::P64 = R1 & 7;
           if (_cdeit::P64 < 3) goto udeiI; else goto cdeis;
       udeiI: // global
           if (_cdeit::P64 < 2) goto cdeiq; else goto cdeir;
       cdeiq: // global
           R3 = _cdeaC::P64;
           R2 = GHC.RTS.Flags.$fShowDoTrace5_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cdeir: // global
           R3 = _cdeaC::P64;
           R2 = GHC.RTS.Flags.$fShowDoTrace3_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cdeis: // global
           R3 = _cdeaC::P64;
           R2 = GHC.RTS.Flags.$fShowDoTrace1_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdeim_info" {
     block_cdeim_info:
         const _cdeim;
         const 1;
         const 30064771102;
         const SddB2_srt+232;
 },
 g1_sdctP_entry() //  [R1, R2]
         { []
         }
     {offset
       cdeiK: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cdeiO; else goto cdeiN;
       cdeiO: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdeiN: // global
           _sdctH::P64 = P64[R1 + 7];
           _sdctI::P64 = P64[R1 + 15];
           _sdctJ::P64 = P64[R1 + 23];
           _sdctK::P64 = P64[R1 + 31];
           _sdctL::P64 = P64[R1 + 39];
           _sdctM::P64 = P64[R1 + 47];
           _sdctN::P64 = P64[R1 + 55];
           I64[Hp - 72] = sat_sdcuE_info;
           P64[Hp - 56] = _sdctH::P64;
           P64[Hp - 48] = _sdctI::P64;
           P64[Hp - 40] = _sdctJ::P64;
           P64[Hp - 32] = _sdctK::P64;
           P64[Hp - 24] = _sdctL::P64;
           P64[Hp - 16] = _sdctM::P64;
           P64[Hp - 8] = _sdctN::P64;
           P64[Hp] = R2;
           R3 = Hp - 72;
           R2 = lvl15_rcV5g_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . g1_sdctP_info" {
     g1_sdctP_info:
         const g1_sdctP_entry;
         const 7;
         const 492645633753096;
         const 4294967301;
         const SddB2_srt+120;
 },
 sat_sdcuG_entry() //  [R1]
         { []
         }
     {offset
       cdeiW: // global
           R2 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           call g1_sdctP_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcuG_info" {
     sat_sdcuG_info:
         const sat_sdcuG_entry;
         const 2;
         const 492645633753106;
         const SddB2_srt+120;
 },
 sat_sdcuI_entry() //  [R1]
         { []
         }
     {offset
       cdej9: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdejd; else goto cdejc;
       cdejd: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdejc: // global
           _sdctO::P64 = P64[R1 + 16];
           _sdctP::P64 = P64[R1 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _sdctO::P64;
           R2 = Hp - 14;
           R1 = _sdctP::P64;
           call g1_sdctP_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcuI_info" {
     sat_sdcuI_info:
         const sat_sdcuI_entry;
         const 2;
         const 492645633753106;
         const SddB2_srt+120;
 },
 sat_sdcuJ_entry() //  [R1]
         { []
         }
     {offset
       cdeje: // global
           _sdcuJ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdejf; else goto cdejg;
       cdejg: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdeji; else goto cdejh;
       cdeji: // global
           HpAlloc = 32;
           goto cdejf;
       cdejf: // global
           R1 = _sdcuJ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdejh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcuJ::P64;
           _sdctO::P64 = P64[_sdcuJ::P64 + 16];
           _sdctP::P64 = P64[_sdcuJ::P64 + 24];
           I64[Hp - 24] = sat_sdcuI_info;
           P64[Hp - 8] = _sdctO::P64;
           P64[Hp] = _sdctP::P64;
           R3 = Hp - 24;
           R2 = f1_rcV5f_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcuJ_info" {
     sat_sdcuJ_info:
         const sat_sdcuJ_entry;
         const 2;
         const 1618545540595730;
         const SddB2_srt+120;
 },
 GHC.RTS.Flags.$w$cshowsPrec9_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cdejm: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto cdejq; else goto cdejp;
       cdejq: // global
           HpAlloc = 120;
           R1 = GHC.RTS.Flags.$w$cshowsPrec9_closure;
           I64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 80, res: 0, upd: 8;
       cdejp: // global
           I64[Hp - 112] = g1_sdctP_info;
           P64[Hp - 104] = R3;
           P64[Hp - 96] = R4;
           P64[Hp - 88] = R5;
           P64[Hp - 80] = R6;
           P64[Hp - 72] = P64[Sp];
           P64[Hp - 64] = P64[Sp + 8];
           P64[Hp - 56] = P64[Sp + 16];
           _sdctO::P64 = P64[Sp + 24];
           _cdeat::P64 = Hp - 111;
           if (%MO_S_Lt_W64(R2, 11)) goto cdejk; else goto cdejl;
       cdejk: // global
           I64[Hp - 48] = sat_sdcuG_info;
           P64[Hp - 32] = _sdctO::P64;
           P64[Hp - 24] = _cdeat::P64;
           _cdeiS::P64 = Hp - 48;
           Hp = Hp - 24;
           R3 = _cdeiS::P64;
           R2 = f1_rcV5f_closure;
           Sp = Sp + 32;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cdejl: // global
           I64[Hp - 48] = sat_sdcuJ_info;
           P64[Hp - 32] = _sdctO::P64;
           P64[Hp - 24] = _cdeat::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$w$cshowsPrec9_info" {
     GHC.RTS.Flags.$w$cshowsPrec9_info:
         const GHC.RTS.Flags.$w$cshowsPrec9_entry;
         const 0;
         const 3870345354280974;
         const 38654705664;
         const SddB2_srt+120;
         const 73;
         const GHC.RTS.Flags.$w$cshowsPrec9_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.926735295 UTC

[section ""data" . GHC.RTS.Flags.$fShowTraceFlags_$cshowsPrec_closure" {
     GHC.RTS.Flags.$fShowTraceFlags_$cshowsPrec_closure:
         const GHC.RTS.Flags.$fShowTraceFlags_$cshowsPrec_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowTraceFlags_$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdeog: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdeok; else goto cdeol;
       cdeok: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fShowTraceFlags_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdeol: // global
           I64[Sp - 24] = block_cdeod_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udeot; else goto cdeoe;
       udeot: // global
           call _cdeod(R1) args: 0, res: 0, upd: 0;
       cdeoe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowTraceFlags_$cshowsPrec_info" {
     GHC.RTS.Flags.$fShowTraceFlags_$cshowsPrec_info:
         const GHC.RTS.Flags.$fShowTraceFlags_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const SddB2_srt+272;
 },
 _cdeod() //  [R1]
         { []
         }
     {offset
       cdeod: // global
           I64[Sp] = block_cdeoj_info;
           _sdcuO::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _sdcuO::I64;
           if (R1 & 7 != 0) goto udeos; else goto cdeon;
       udeos: // global
           call _cdeoj(R1) args: 0, res: 0, upd: 0;
       cdeon: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdeod_info" {
     block_cdeod_info:
         const _cdeod;
         const 2;
         const 4294967326;
         const SddB2_srt+272;
 },
 _cdeoj() //  [R1]
         { []
         }
     {offset
       cdeoj: // global
           R6 = P64[R1 + 31];
           R5 = P64[R1 + 23];
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = I64[Sp + 8];
           P64[Sp - 8] = P64[R1 + 39];
           P64[Sp] = P64[R1 + 47];
           P64[Sp + 8] = P64[R1 + 55];
           Sp = Sp - 8;
           call GHC.RTS.Flags.$w$cshowsPrec9_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdeoj_info" {
     block_cdeoj_info:
         const _cdeoj;
         const 66;
         const 4294967326;
         const SddB2_srt+272;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.937934059 UTC

[section ""data" . GHC.RTS.Flags.$fShowTraceFlags_$cshow_closure" {
     GHC.RTS.Flags.$fShowTraceFlags_$cshow_closure:
         const GHC.RTS.Flags.$fShowTraceFlags_$cshow_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowTraceFlags_$cshow_entry() //  [R2]
         { []
         }
     {offset
       cdeoT: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdeoU; else goto cdeoV;
       cdeoU: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.$fShowTraceFlags_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdeoV: // global
           I64[Sp - 8] = block_cdeoQ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udeoZ; else goto cdeoR;
       udeoZ: // global
           call _cdeoQ(R1) args: 0, res: 0, upd: 0;
       cdeoR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowTraceFlags_$cshow_info" {
     GHC.RTS.Flags.$fShowTraceFlags_$cshow_info:
         const GHC.RTS.Flags.$fShowTraceFlags_$cshow_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const SddB2_srt+272;
 },
 _cdeoQ() //  [R1]
         { []
         }
     {offset
       cdeoQ: // global
           R6 = P64[R1 + 31];
           R5 = P64[R1 + 23];
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = 0;
           P64[Sp - 24] = P64[R1 + 39];
           P64[Sp - 16] = P64[R1 + 47];
           P64[Sp - 8] = P64[R1 + 55];
           P64[Sp] = GHC.Types.[]_closure+1;
           Sp = Sp - 24;
           call GHC.RTS.Flags.$w$cshowsPrec9_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdeoQ_info" {
     block_cdeoQ_info:
         const _cdeoQ;
         const 0;
         const 4294967326;
         const SddB2_srt+272;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.949061273 UTC

[section ""data" . GHC.RTS.Flags.$fShowTraceFlags1_closure" {
     GHC.RTS.Flags.$fShowTraceFlags1_closure:
         const GHC.RTS.Flags.$fShowTraceFlags1_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowTraceFlags1_entry() //  [R2, R3]
         { []
         }
     {offset
       cdepm: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdepn; else goto cdepo;
       cdepn: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fShowTraceFlags1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdepo: // global
           I64[Sp - 16] = block_cdepj_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udeps; else goto cdepk;
       udeps: // global
           call _cdepj(R1) args: 0, res: 0, upd: 0;
       cdepk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowTraceFlags1_info" {
     GHC.RTS.Flags.$fShowTraceFlags1_info:
         const GHC.RTS.Flags.$fShowTraceFlags1_entry;
         const 0;
         const 38654705678;
         const 8589934607;
         const SddB2_srt+272;
 },
 _cdepj() //  [R1]
         { []
         }
     {offset
       cdepj: // global
           R6 = P64[R1 + 31];
           R5 = P64[R1 + 23];
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = 0;
           P64[Sp - 16] = P64[R1 + 39];
           P64[Sp - 8] = P64[R1 + 47];
           P64[Sp] = P64[R1 + 55];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$cshowsPrec9_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdepj_info" {
     block_cdepj_info:
         const _cdepj;
         const 1;
         const 4294967326;
         const SddB2_srt+272;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.95817316 UTC

[section ""data" . GHC.RTS.Flags.$fShowTraceFlags_$cshowList_closure" {
     GHC.RTS.Flags.$fShowTraceFlags_$cshowList_closure:
         const GHC.RTS.Flags.$fShowTraceFlags_$cshowList_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowTraceFlags_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       cdepK: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.RTS.Flags.$fShowTraceFlags1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowTraceFlags_$cshowList_info" {
     GHC.RTS.Flags.$fShowTraceFlags_$cshowList_info:
         const GHC.RTS.Flags.$fShowTraceFlags_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const SddB2_srt+296;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.963242272 UTC

[section ""data" . GHC.RTS.Flags.$fShowTraceFlags_closure" {
     GHC.RTS.Flags.$fShowTraceFlags_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.RTS.Flags.$fShowTraceFlags_$cshowsPrec_closure+3;
         const GHC.RTS.Flags.$fShowTraceFlags_$cshow_closure+1;
         const GHC.RTS.Flags.$fShowTraceFlags_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.965904083 UTC

[section ""cstring" . GHC.RTS.Flags.$fShowDoHeapProfile16_bytes" {
     GHC.RTS.Flags.$fShowDoHeapProfile16_bytes:
         I8[] [78,111,72,101,97,112,80,114,111,102,105,108,105,110,103]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.969973459 UTC

[section ""data" . GHC.RTS.Flags.$fShowDoHeapProfile15_closure" {
     GHC.RTS.Flags.$fShowDoHeapProfile15_closure:
         const GHC.RTS.Flags.$fShowDoHeapProfile15_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fShowDoHeapProfile15_entry() //  [R1]
         { []
         }
     {offset
       cdepZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdeq0; else goto cdeq1;
       cdeq0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdeq1: // global
           (_cdepW::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdepW::I64 == 0) goto cdepY; else goto cdepX;
       cdepY: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdepX: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdepW::I64;
           R2 = GHC.RTS.Flags.$fShowDoHeapProfile16_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowDoHeapProfile15_info" {
     GHC.RTS.Flags.$fShowDoHeapProfile15_info:
         const GHC.RTS.Flags.$fShowDoHeapProfile15_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.975992201 UTC

[section ""cstring" . GHC.RTS.Flags.$fShowDoHeapProfile14_bytes" {
     GHC.RTS.Flags.$fShowDoHeapProfile14_bytes:
         I8[] [72,101,97,112,66,121,67,67,83]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.979801176 UTC

[section ""data" . GHC.RTS.Flags.$fShowDoHeapProfile13_closure" {
     GHC.RTS.Flags.$fShowDoHeapProfile13_closure:
         const GHC.RTS.Flags.$fShowDoHeapProfile13_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fShowDoHeapProfile13_entry() //  [R1]
         { []
         }
     {offset
       cdeqh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdeqi; else goto cdeqj;
       cdeqi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdeqj: // global
           (_cdeqe::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdeqe::I64 == 0) goto cdeqg; else goto cdeqf;
       cdeqg: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdeqf: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdeqe::I64;
           R2 = GHC.RTS.Flags.$fShowDoHeapProfile14_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowDoHeapProfile13_info" {
     GHC.RTS.Flags.$fShowDoHeapProfile13_info:
         const GHC.RTS.Flags.$fShowDoHeapProfile13_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.985874871 UTC

[section ""cstring" . GHC.RTS.Flags.$fShowDoHeapProfile12_bytes" {
     GHC.RTS.Flags.$fShowDoHeapProfile12_bytes:
         I8[] [72,101,97,112,66,121,77,111,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.988418357 UTC

[section ""data" . GHC.RTS.Flags.$fShowDoHeapProfile11_closure" {
     GHC.RTS.Flags.$fShowDoHeapProfile11_closure:
         const GHC.RTS.Flags.$fShowDoHeapProfile11_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fShowDoHeapProfile11_entry() //  [R1]
         { []
         }
     {offset
       cdeqz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdeqA; else goto cdeqB;
       cdeqA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdeqB: // global
           (_cdeqw::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdeqw::I64 == 0) goto cdeqy; else goto cdeqx;
       cdeqy: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdeqx: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdeqw::I64;
           R2 = GHC.RTS.Flags.$fShowDoHeapProfile12_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowDoHeapProfile11_info" {
     GHC.RTS.Flags.$fShowDoHeapProfile11_info:
         const GHC.RTS.Flags.$fShowDoHeapProfile11_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.99290948 UTC

[section ""cstring" . GHC.RTS.Flags.$fShowDoHeapProfile10_bytes" {
     GHC.RTS.Flags.$fShowDoHeapProfile10_bytes:
         I8[] [72,101,97,112,66,121,68,101,115,99,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.995369335 UTC

[section ""data" . GHC.RTS.Flags.$fShowDoHeapProfile9_closure" {
     GHC.RTS.Flags.$fShowDoHeapProfile9_closure:
         const GHC.RTS.Flags.$fShowDoHeapProfile9_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fShowDoHeapProfile9_entry() //  [R1]
         { []
         }
     {offset
       cdeqR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdeqS; else goto cdeqT;
       cdeqS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdeqT: // global
           (_cdeqO::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdeqO::I64 == 0) goto cdeqQ; else goto cdeqP;
       cdeqQ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdeqP: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdeqO::I64;
           R2 = GHC.RTS.Flags.$fShowDoHeapProfile10_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowDoHeapProfile9_info" {
     GHC.RTS.Flags.$fShowDoHeapProfile9_info:
         const GHC.RTS.Flags.$fShowDoHeapProfile9_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:26.999146168 UTC

[section ""cstring" . GHC.RTS.Flags.$fShowDoHeapProfile8_bytes" {
     GHC.RTS.Flags.$fShowDoHeapProfile8_bytes:
         I8[] [72,101,97,112,66,121,84,121,112,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.001684962 UTC

[section ""data" . GHC.RTS.Flags.$fShowDoHeapProfile7_closure" {
     GHC.RTS.Flags.$fShowDoHeapProfile7_closure:
         const GHC.RTS.Flags.$fShowDoHeapProfile7_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fShowDoHeapProfile7_entry() //  [R1]
         { []
         }
     {offset
       cder9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdera; else goto cderb;
       cdera: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cderb: // global
           (_cder6::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cder6::I64 == 0) goto cder8; else goto cder7;
       cder8: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cder7: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cder6::I64;
           R2 = GHC.RTS.Flags.$fShowDoHeapProfile8_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowDoHeapProfile7_info" {
     GHC.RTS.Flags.$fShowDoHeapProfile7_info:
         const GHC.RTS.Flags.$fShowDoHeapProfile7_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.005415361 UTC

[section ""cstring" . GHC.RTS.Flags.$fShowDoHeapProfile6_bytes" {
     GHC.RTS.Flags.$fShowDoHeapProfile6_bytes:
         I8[] [72,101,97,112,66,121,82,101,116,97,105,110,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.007797852 UTC

[section ""data" . GHC.RTS.Flags.$fShowDoHeapProfile5_closure" {
     GHC.RTS.Flags.$fShowDoHeapProfile5_closure:
         const GHC.RTS.Flags.$fShowDoHeapProfile5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fShowDoHeapProfile5_entry() //  [R1]
         { []
         }
     {offset
       cderr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cders; else goto cdert;
       cders: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdert: // global
           (_cdero::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdero::I64 == 0) goto cderq; else goto cderp;
       cderq: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cderp: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdero::I64;
           R2 = GHC.RTS.Flags.$fShowDoHeapProfile6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowDoHeapProfile5_info" {
     GHC.RTS.Flags.$fShowDoHeapProfile5_info:
         const GHC.RTS.Flags.$fShowDoHeapProfile5_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.011544813 UTC

[section ""cstring" . GHC.RTS.Flags.$fShowDoHeapProfile4_bytes" {
     GHC.RTS.Flags.$fShowDoHeapProfile4_bytes:
         I8[] [72,101,97,112,66,121,76,68,86]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.014065925 UTC

[section ""data" . GHC.RTS.Flags.$fShowDoHeapProfile3_closure" {
     GHC.RTS.Flags.$fShowDoHeapProfile3_closure:
         const GHC.RTS.Flags.$fShowDoHeapProfile3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fShowDoHeapProfile3_entry() //  [R1]
         { []
         }
     {offset
       cderJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cderK; else goto cderL;
       cderK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cderL: // global
           (_cderG::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cderG::I64 == 0) goto cderI; else goto cderH;
       cderI: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cderH: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cderG::I64;
           R2 = GHC.RTS.Flags.$fShowDoHeapProfile4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowDoHeapProfile3_info" {
     GHC.RTS.Flags.$fShowDoHeapProfile3_info:
         const GHC.RTS.Flags.$fShowDoHeapProfile3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.017870938 UTC

[section ""cstring" . GHC.RTS.Flags.$fShowDoHeapProfile2_bytes" {
     GHC.RTS.Flags.$fShowDoHeapProfile2_bytes:
         I8[] [72,101,97,112,66,121,67,108,111,115,117,114,101,84,121,112,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.020345137 UTC

[section ""data" . GHC.RTS.Flags.$fShowDoHeapProfile1_closure" {
     GHC.RTS.Flags.$fShowDoHeapProfile1_closure:
         const GHC.RTS.Flags.$fShowDoHeapProfile1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fShowDoHeapProfile1_entry() //  [R1]
         { []
         }
     {offset
       cdes1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdes2; else goto cdes3;
       cdes2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdes3: // global
           (_cderY::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cderY::I64 == 0) goto cdes0; else goto cderZ;
       cdes0: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cderZ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cderY::I64;
           R2 = GHC.RTS.Flags.$fShowDoHeapProfile2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowDoHeapProfile1_info" {
     GHC.RTS.Flags.$fShowDoHeapProfile1_info:
         const GHC.RTS.Flags.$fShowDoHeapProfile1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.026152413 UTC

[section ""data" . GHC.RTS.Flags.$w$cshowsPrec3_closure" {
     GHC.RTS.Flags.$w$cshowsPrec3_closure:
         const GHC.RTS.Flags.$w$cshowsPrec3_info;
         const 0;
 },
 GHC.RTS.Flags.$w$cshowsPrec3_entry() //  [R2, R3]
         { []
         }
     {offset
       cdest: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdesu; else goto cdesv;
       cdesu: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.RTS.Flags.$w$cshowsPrec3_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdesv: // global
           I64[Sp - 16] = block_cdesg_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udesU; else goto cdesh;
       udesU: // global
           call _cdesg(R1) args: 0, res: 0, upd: 0;
       cdesh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$w$cshowsPrec3_info" {
     GHC.RTS.Flags.$w$cshowsPrec3_info:
         const GHC.RTS.Flags.$w$cshowsPrec3_entry;
         const 0;
         const 2194728288270;
         const 8589934607;
         const SddB2_srt+304;
 },
 _cdesg() //  [R1]
         { []
         }
     {offset
       cdesg: // global
           _sdcvj::P64 = P64[Sp + 8];
           switch [0 .. 7] (%MO_UU_Conv_W32_W64(I32[I64[R1 - 1] + 20])) {
               case 0 : goto cdesk;
               case 1 : goto cdesl;
               case 2 : goto cdesm;
               case 3 : goto cdesn;
               case 4 : goto cdeso;
               case 5 : goto cdesp;
               case 6 : goto cdesq;
               case 7 : goto cdesr;
           }
       cdesr: // global
           R3 = _sdcvj::P64;
           R2 = GHC.RTS.Flags.$fShowDoHeapProfile1_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cdesq: // global
           R3 = _sdcvj::P64;
           R2 = GHC.RTS.Flags.$fShowDoHeapProfile3_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cdesp: // global
           R3 = _sdcvj::P64;
           R2 = GHC.RTS.Flags.$fShowDoHeapProfile5_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cdeso: // global
           R3 = _sdcvj::P64;
           R2 = GHC.RTS.Flags.$fShowDoHeapProfile7_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cdesn: // global
           R3 = _sdcvj::P64;
           R2 = GHC.RTS.Flags.$fShowDoHeapProfile9_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cdesm: // global
           R3 = _sdcvj::P64;
           R2 = GHC.RTS.Flags.$fShowDoHeapProfile11_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cdesl: // global
           R3 = _sdcvj::P64;
           R2 = GHC.RTS.Flags.$fShowDoHeapProfile13_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cdesk: // global
           R3 = _sdcvj::P64;
           R2 = GHC.RTS.Flags.$fShowDoHeapProfile15_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdesg_info" {
     block_cdesg_info:
         const _cdesg;
         const 1;
         const 1095216660510;
         const SddB2_srt+312;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.033912929 UTC

[section ""data" . GHC.RTS.Flags.$fShowDoHeapProfile_$cshowsPrec_closure" {
     GHC.RTS.Flags.$fShowDoHeapProfile_$cshowsPrec_closure:
         const GHC.RTS.Flags.$fShowDoHeapProfile_$cshowsPrec_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowDoHeapProfile_$cshowsPrec_entry() //  [R3, R4]
         { []
         }
     {offset
       cdete: // global
           _sdcvm::P64 = R3;
           R3 = R4;
           R2 = _sdcvm::P64;
           call GHC.RTS.Flags.$w$cshowsPrec3_entry(R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowDoHeapProfile_$cshowsPrec_info" {
     GHC.RTS.Flags.$fShowDoHeapProfile_$cshowsPrec_info:
         const GHC.RTS.Flags.$fShowDoHeapProfile_$cshowsPrec_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const SddB2_srt+304;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.040735754 UTC

[section ""data" . GHC.RTS.Flags.$fShowDoHeapProfile_$cshow_closure" {
     GHC.RTS.Flags.$fShowDoHeapProfile_$cshow_closure:
         const GHC.RTS.Flags.$fShowDoHeapProfile_$cshow_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowDoHeapProfile_$cshow_entry() //  [R2]
         { []
         }
     {offset
       cdetC: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdetD; else goto cdetE;
       cdetD: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.$fShowDoHeapProfile_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdetE: // global
           I64[Sp - 8] = block_cdetp_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udeu3; else goto cdetq;
       udeu3: // global
           call _cdetp(R1) args: 0, res: 0, upd: 0;
       cdetq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowDoHeapProfile_$cshow_info" {
     GHC.RTS.Flags.$fShowDoHeapProfile_$cshow_info:
         const GHC.RTS.Flags.$fShowDoHeapProfile_$cshow_entry;
         const 0;
         const 2194728288270;
         const 4294967301;
         const SddB2_srt+312;
 },
 _cdetp() //  [R1]
         { []
         }
     {offset
       cdetp: // global
           switch [0 .. 7] (%MO_UU_Conv_W32_W64(I32[I64[R1 - 1] + 20])) {
               case 0 : goto cdett;
               case 1 : goto cdetu;
               case 2 : goto cdetv;
               case 3 : goto cdetw;
               case 4 : goto cdetx;
               case 5 : goto cdety;
               case 6 : goto cdetz;
               case 7 : goto cdetA;
           }
       cdetA: // global
           R1 = GHC.RTS.Flags.$fShowDoHeapProfile1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cdetz: // global
           R1 = GHC.RTS.Flags.$fShowDoHeapProfile3_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cdety: // global
           R1 = GHC.RTS.Flags.$fShowDoHeapProfile5_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cdetx: // global
           R1 = GHC.RTS.Flags.$fShowDoHeapProfile7_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cdetw: // global
           R1 = GHC.RTS.Flags.$fShowDoHeapProfile9_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cdetv: // global
           R1 = GHC.RTS.Flags.$fShowDoHeapProfile11_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cdetu: // global
           R1 = GHC.RTS.Flags.$fShowDoHeapProfile13_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cdett: // global
           R1 = GHC.RTS.Flags.$fShowDoHeapProfile15_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdetp_info" {
     block_cdetp_info:
         const _cdetp;
         const 0;
         const 1095216660510;
         const SddB2_srt+312;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.050087016 UTC

[section ""data" . GHC.RTS.Flags.$fShowDoHeapProfile_$cshowList_closure" {
     GHC.RTS.Flags.$fShowDoHeapProfile_$cshowList_closure:
         const GHC.RTS.Flags.$fShowDoHeapProfile_$cshowList_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowDoHeapProfile_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       cdeuv: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.RTS.Flags.$w$cshowsPrec3_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowDoHeapProfile_$cshowList_info" {
     GHC.RTS.Flags.$fShowDoHeapProfile_$cshowList_info:
         const GHC.RTS.Flags.$fShowDoHeapProfile_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const SddB2_srt+304;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.055184366 UTC

[section ""data" . GHC.RTS.Flags.$fShowDoHeapProfile_closure" {
     GHC.RTS.Flags.$fShowDoHeapProfile_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.RTS.Flags.$fShowDoHeapProfile_$cshowsPrec_closure+3;
         const GHC.RTS.Flags.$fShowDoHeapProfile_$cshow_closure+1;
         const GHC.RTS.Flags.$fShowDoHeapProfile_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.057683802 UTC

[section ""cstring" . f2_rcV5n_bytes" {
     f2_rcV5n_bytes:
         I8[] [80,114,111,102,70,108,97,103,115,32,123]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.061063247 UTC

[section ""data" . f3_rcV5o_closure" {
     f3_rcV5o_closure:
         const f3_rcV5o_info;
         const 0;
         const 0;
         const 0;
 },
 f3_rcV5o_entry() //  [R1]
         { []
         }
     {offset
       cdeuK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdeuL; else goto cdeuM;
       cdeuL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdeuM: // global
           (_cdeuH::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdeuH::I64 == 0) goto cdeuJ; else goto cdeuI;
       cdeuJ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdeuI: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdeuH::I64;
           R2 = f2_rcV5n_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f3_rcV5o_info" {
     f3_rcV5o_info:
         const f3_rcV5o_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.06653793 UTC

[section ""cstring" . lvl22_rcV5p_bytes" {
     lvl22_rcV5p_bytes:
         I8[] [115,104,111,119,67,67,83,79,110,69,120,99,101,112,116,105,111,110,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.069031144 UTC

[section ""cstring" . lvl23_rcV5q_bytes" {
     lvl23_rcV5q_bytes:
         I8[] [109,97,120,82,101,116,97,105,110,101,114,83,101,116,83,105,122,101,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.071577667 UTC

[section ""cstring" . lvl24_rcV5r_bytes" {
     lvl24_rcV5r_bytes:
         I8[] [99,99,115,76,101,110,103,116,104,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.074752635 UTC

[section ""cstring" . lvl25_rcV5s_bytes" {
     lvl25_rcV5s_bytes:
         I8[] [109,111,100,83,101,108,101,99,116,111,114,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.077121381 UTC

[section ""cstring" . lvl26_rcV5t_bytes" {
     lvl26_rcV5t_bytes:
         I8[] [100,101,115,99,114,83,101,108,101,99,116,111,114,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.079710373 UTC

[section ""cstring" . lvl27_rcV5u_bytes" {
     lvl27_rcV5u_bytes:
         I8[] [116,121,112,101,83,101,108,101,99,116,111,114,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.082835637 UTC

[section ""cstring" . lvl28_rcV5v_bytes" {
     lvl28_rcV5v_bytes:
         I8[] [99,99,83,101,108,101,99,116,111,114,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.085149417 UTC

[section ""cstring" . lvl29_rcV5w_bytes" {
     lvl29_rcV5w_bytes:
         I8[] [99,99,115,83,101,108,101,99,116,111,114,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.086936315 UTC

[section ""cstring" . lvl30_rcV5x_bytes" {
     lvl30_rcV5x_bytes:
         I8[] [114,101,116,97,105,110,101,114,83,101,108,101,99,116,111,114,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.088580153 UTC

[section ""cstring" . lvl31_rcV5y_bytes" {
     lvl31_rcV5y_bytes:
         I8[] [98,105,111,83,101,108,101,99,116,111,114,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.090317912 UTC

[section ""cstring" . lvl32_rcV5z_bytes" {
     lvl32_rcV5z_bytes:
         I8[] [100,111,72,101,97,112,80,114,111,102,105,108,101,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.091943646 UTC

[section ""cstring" . lvl33_rcV5A_bytes" {
     lvl33_rcV5A_bytes:
         I8[] [104,101,97,112,80,114,111,102,105,108,101,73,110,116,101,114,118,97,108,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.093660704 UTC

[section ""cstring" . lvl34_rcV5B_bytes" {
     lvl34_rcV5B_bytes:
         I8[] [104,101,97,112,80,114,111,102,105,108,101,73,110,116,101,114,118,97,108,84,105,99,107,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.09540116 UTC

[section ""cstring" . lvl35_rcV5C_bytes" {
     lvl35_rcV5C_bytes:
         I8[] [105,110,99,108,117,100,101,84,83,79,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.140876959 UTC

[section ""data" . GHC.RTS.Flags.$fShowProfFlags_$cshowsPrec_closure" {
     GHC.RTS.Flags.$fShowProfFlags_$cshowsPrec_closure:
         const GHC.RTS.Flags.$fShowProfFlags_$cshowsPrec_info;
         const 0;
 },
 w1_sdcvL_entry() //  [R1]
         { []
         }
     {offset
       cdevu: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdevv; else goto cdevw;
       cdevv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdevw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cdevr_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udevI; else goto cdevs;
       udevI: // global
           call _cdevr(R1) args: 0, res: 0, upd: 0;
       cdevs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . w1_sdcvL_info" {
     w1_sdcvL_info:
         const w1_sdcvL_entry;
         const 1;
         const 16;
 },
 _cdevr() //  [R1]
         { []
         }
     {offset
       cdevr: // global
           _sdcvN::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_sdcvN::I64, 0)) goto cdevG; else goto cdevH;
       cdevG: // global
           R2 = _sdcvN::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.wordToInteger_entry(R2) args: 24, res: 0, upd: 24;
       cdevH: // global
           R2 = _sdcvN::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdevr_info" {
     block_cdevr_info:
         const _cdevr;
         const 0;
         const 30;
 },
 f8_sdcvQ_entry() //  [R1]
         { []
         }
     {offset
       cdevN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdevO; else goto cdevP;
       cdevO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdevP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 16];
           R3 = GHC.RTS.Flags.$fEnumDoCostCentres10_closure+1;
           R2 = GHC.Show.$fShow[]_$s$fShow[]1_closure;
           Sp = Sp - 16;
           call GHC.Show.$fShowMaybe_$cshowsPrec_entry(R4,
                                                       R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f8_sdcvQ_info" {
     f8_sdcvQ_info:
         const f8_sdcvQ_entry;
         const 1;
         const 12884901904;
         const SddB2_srt+168;
 },
 f9_sdcvR_entry() //  [R1]
         { []
         }
     {offset
       cdevU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdevV; else goto cdevW;
       cdevV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdevW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 16];
           R3 = GHC.RTS.Flags.$fEnumDoCostCentres10_closure+1;
           R2 = GHC.Show.$fShow[]_$s$fShow[]1_closure;
           Sp = Sp - 16;
           call GHC.Show.$fShowMaybe_$cshowsPrec_entry(R4,
                                                       R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f9_sdcvR_info" {
     f9_sdcvR_info:
         const f9_sdcvR_entry;
         const 1;
         const 12884901904;
         const SddB2_srt+168;
 },
 f10_sdcvS_entry() //  [R1]
         { []
         }
     {offset
       cdew1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdew2; else goto cdew3;
       cdew2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdew3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 16];
           R3 = GHC.RTS.Flags.$fEnumDoCostCentres10_closure+1;
           R2 = GHC.Show.$fShow[]_$s$fShow[]1_closure;
           Sp = Sp - 16;
           call GHC.Show.$fShowMaybe_$cshowsPrec_entry(R4,
                                                       R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f10_sdcvS_info" {
     f10_sdcvS_info:
         const f10_sdcvS_entry;
         const 1;
         const 12884901904;
         const SddB2_srt+168;
 },
 f11_sdcvT_entry() //  [R1]
         { []
         }
     {offset
       cdew8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdew9; else goto cdewa;
       cdew9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdewa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 16];
           R3 = GHC.RTS.Flags.$fEnumDoCostCentres10_closure+1;
           R2 = GHC.Show.$fShow[]_$s$fShow[]1_closure;
           Sp = Sp - 16;
           call GHC.Show.$fShowMaybe_$cshowsPrec_entry(R4,
                                                       R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f11_sdcvT_info" {
     f11_sdcvT_info:
         const f11_sdcvT_entry;
         const 1;
         const 12884901904;
         const SddB2_srt+168;
 },
 f12_sdcvU_entry() //  [R1]
         { []
         }
     {offset
       cdewf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdewg; else goto cdewh;
       cdewg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdewh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 16];
           R3 = GHC.RTS.Flags.$fEnumDoCostCentres10_closure+1;
           R2 = GHC.Show.$fShow[]_$s$fShow[]1_closure;
           Sp = Sp - 16;
           call GHC.Show.$fShowMaybe_$cshowsPrec_entry(R4,
                                                       R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f12_sdcvU_info" {
     f12_sdcvU_info:
         const f12_sdcvU_entry;
         const 1;
         const 12884901904;
         const SddB2_srt+168;
 },
 f13_sdcvV_entry() //  [R1]
         { []
         }
     {offset
       cdewm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdewn; else goto cdewo;
       cdewn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdewo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 16];
           R3 = GHC.RTS.Flags.$fEnumDoCostCentres10_closure+1;
           R2 = GHC.Show.$fShow[]_$s$fShow[]1_closure;
           Sp = Sp - 16;
           call GHC.Show.$fShowMaybe_$cshowsPrec_entry(R4,
                                                       R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f13_sdcvV_info" {
     f13_sdcvV_info:
         const f13_sdcvV_entry;
         const 1;
         const 12884901904;
         const SddB2_srt+168;
 },
 f14_sdcvW_entry() //  [R1]
         { []
         }
     {offset
       cdewt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdewu; else goto cdewv;
       cdewu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdewv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 16];
           R3 = GHC.RTS.Flags.$fEnumDoCostCentres10_closure+1;
           R2 = GHC.Show.$fShow[]_$s$fShow[]1_closure;
           Sp = Sp - 16;
           call GHC.Show.$fShowMaybe_$cshowsPrec_entry(R4,
                                                       R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f14_sdcvW_info" {
     f14_sdcvW_info:
         const f14_sdcvW_entry;
         const 1;
         const 12884901904;
         const SddB2_srt+168;
 },
 sat_sdcw3_entry() //  [R1]
         { []
         }
     {offset
       cdeyv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdeyw; else goto cdeyx;
       cdeyw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdeyx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.RTS.Flags.$fShowCCFlags2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcw3_info" {
     sat_sdcw3_info:
         const sat_sdcw3_entry;
         const 1;
         const 16;
 },
 sat_sdcw4_entry() //  [R1]
         { []
         }
     {offset
       cdeyy: // global
           _sdcw4::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdeyz; else goto cdeyA;
       cdeyA: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdeyC; else goto cdeyB;
       cdeyC: // global
           HpAlloc = 24;
           goto cdeyz;
       cdeyz: // global
           R1 = _sdcw4::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdeyB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcw4::P64;
           _sdcvW::P64 = P64[_sdcw4::P64 + 16];
           _sdcvY::P64 = P64[_sdcw4::P64 + 24];
           I64[Hp - 16] = sat_sdcw3_info;
           P64[Hp] = _sdcvY::P64;
           R2 = Hp - 16;
           R1 = _sdcvW::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcw4_info" {
     sat_sdcw4_info:
         const sat_sdcw4_entry;
         const 2;
         const 18;
 },
 sat_sdcw5_entry() //  [R1]
         { []
         }
     {offset
       cdeyD: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdeyH; else goto cdeyG;
       cdeyH: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdeyG: // global
           _sdcvW::P64 = P64[R1 + 16];
           _sdcvY::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_sdcw4_info;
           P64[Hp - 8] = _sdcvW::P64;
           P64[Hp] = _sdcvY::P64;
           R3 = Hp - 24;
           R2 = lvl31_rcV5y_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcw5_info" {
     sat_sdcw5_info:
         const sat_sdcw5_entry;
         const 2;
         const 18;
 },
 sat_sdcw6_entry() //  [R1]
         { []
         }
     {offset
       cdeyI: // global
           _sdcw6::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdeyJ; else goto cdeyK;
       cdeyK: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdeyM; else goto cdeyL;
       cdeyM: // global
           HpAlloc = 32;
           goto cdeyJ;
       cdeyJ: // global
           R1 = _sdcw6::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdeyL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcw6::P64;
           _sdcvW::P64 = P64[_sdcw6::P64 + 16];
           _sdcvY::P64 = P64[_sdcw6::P64 + 24];
           I64[Hp - 24] = sat_sdcw5_info;
           P64[Hp - 8] = _sdcvW::P64;
           P64[Hp] = _sdcvY::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcw6_info" {
     sat_sdcw6_info:
         const sat_sdcw6_entry;
         const 2;
         const 4294967314;
         const SddB2_srt+144;
 },
 sat_sdcw7_entry() //  [R1]
         { []
         }
     {offset
       cdeyN: // global
           _sdcw7::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdeyO; else goto cdeyP;
       cdeyP: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdeyR; else goto cdeyQ;
       cdeyR: // global
           HpAlloc = 32;
           goto cdeyO;
       cdeyO: // global
           R1 = _sdcw7::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdeyQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcw7::P64;
           _sdcvV::P64 = P64[_sdcw7::P64 + 16];
           _sdcvW::P64 = P64[_sdcw7::P64 + 24];
           _sdcvY::P64 = P64[_sdcw7::P64 + 32];
           I64[Hp - 24] = sat_sdcw6_info;
           P64[Hp - 8] = _sdcvW::P64;
           P64[Hp] = _sdcvY::P64;
           R2 = Hp - 24;
           R1 = _sdcvV::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcw7_info" {
     sat_sdcw7_info:
         const sat_sdcw7_entry;
         const 3;
         const 4294967311;
         const SddB2_srt+144;
 },
 sat_sdcw8_entry() //  [R1]
         { []
         }
     {offset
       cdeyS: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdeyW; else goto cdeyV;
       cdeyW: // global
           HpAlloc = 40;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdeyV: // global
           _sdcvV::P64 = P64[R1 + 16];
           _sdcvW::P64 = P64[R1 + 24];
           _sdcvY::P64 = P64[R1 + 32];
           I64[Hp - 32] = sat_sdcw7_info;
           P64[Hp - 16] = _sdcvV::P64;
           P64[Hp - 8] = _sdcvW::P64;
           P64[Hp] = _sdcvY::P64;
           R3 = Hp - 32;
           R2 = lvl30_rcV5x_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcw8_info" {
     sat_sdcw8_info:
         const sat_sdcw8_entry;
         const 3;
         const 4294967311;
         const SddB2_srt+144;
 },
 sat_sdcw9_entry() //  [R1]
         { []
         }
     {offset
       cdeyX: // global
           _sdcw9::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdeyY; else goto cdeyZ;
       cdeyZ: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdez1; else goto cdez0;
       cdez1: // global
           HpAlloc = 40;
           goto cdeyY;
       cdeyY: // global
           R1 = _sdcw9::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdez0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcw9::P64;
           _sdcvV::P64 = P64[_sdcw9::P64 + 16];
           _sdcvW::P64 = P64[_sdcw9::P64 + 24];
           _sdcvY::P64 = P64[_sdcw9::P64 + 32];
           I64[Hp - 32] = sat_sdcw8_info;
           P64[Hp - 16] = _sdcvV::P64;
           P64[Hp - 8] = _sdcvW::P64;
           P64[Hp] = _sdcvY::P64;
           R3 = Hp - 32;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcw9_info" {
     sat_sdcw9_info:
         const sat_sdcw9_entry;
         const 3;
         const 4294967311;
         const SddB2_srt+144;
 },
 sat_sdcwa_entry() //  [R1]
         { []
         }
     {offset
       cdez2: // global
           _sdcwa::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdez3; else goto cdez4;
       cdez4: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdez6; else goto cdez5;
       cdez6: // global
           HpAlloc = 40;
           goto cdez3;
       cdez3: // global
           R1 = _sdcwa::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdez5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcwa::P64;
           _sdcvU::P64 = P64[_sdcwa::P64 + 16];
           _sdcvV::P64 = P64[_sdcwa::P64 + 24];
           _sdcvW::P64 = P64[_sdcwa::P64 + 32];
           _sdcvY::P64 = P64[_sdcwa::P64 + 40];
           I64[Hp - 32] = sat_sdcw9_info;
           P64[Hp - 16] = _sdcvV::P64;
           P64[Hp - 8] = _sdcvW::P64;
           P64[Hp] = _sdcvY::P64;
           R2 = Hp - 32;
           R1 = _sdcvU::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcwa_info" {
     sat_sdcwa_info:
         const sat_sdcwa_entry;
         const 4;
         const 4294967311;
         const SddB2_srt+144;
 },
 sat_sdcwb_entry() //  [R1]
         { []
         }
     {offset
       cdez7: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdezb; else goto cdeza;
       cdezb: // global
           HpAlloc = 48;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdeza: // global
           _sdcvU::P64 = P64[R1 + 16];
           _sdcvV::P64 = P64[R1 + 24];
           _sdcvW::P64 = P64[R1 + 32];
           _sdcvY::P64 = P64[R1 + 40];
           I64[Hp - 40] = sat_sdcwa_info;
           P64[Hp - 24] = _sdcvU::P64;
           P64[Hp - 16] = _sdcvV::P64;
           P64[Hp - 8] = _sdcvW::P64;
           P64[Hp] = _sdcvY::P64;
           R3 = Hp - 40;
           R2 = lvl29_rcV5w_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcwb_info" {
     sat_sdcwb_info:
         const sat_sdcwb_entry;
         const 4;
         const 4294967311;
         const SddB2_srt+144;
 },
 sat_sdcwc_entry() //  [R1]
         { []
         }
     {offset
       cdezc: // global
           _sdcwc::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdezd; else goto cdeze;
       cdeze: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdezg; else goto cdezf;
       cdezg: // global
           HpAlloc = 48;
           goto cdezd;
       cdezd: // global
           R1 = _sdcwc::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdezf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcwc::P64;
           _sdcvU::P64 = P64[_sdcwc::P64 + 16];
           _sdcvV::P64 = P64[_sdcwc::P64 + 24];
           _sdcvW::P64 = P64[_sdcwc::P64 + 32];
           _sdcvY::P64 = P64[_sdcwc::P64 + 40];
           I64[Hp - 40] = sat_sdcwb_info;
           P64[Hp - 24] = _sdcvU::P64;
           P64[Hp - 16] = _sdcvV::P64;
           P64[Hp - 8] = _sdcvW::P64;
           P64[Hp] = _sdcvY::P64;
           R3 = Hp - 40;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcwc_info" {
     sat_sdcwc_info:
         const sat_sdcwc_entry;
         const 4;
         const 4294967311;
         const SddB2_srt+144;
 },
 sat_sdcwd_entry() //  [R1]
         { []
         }
     {offset
       cdezh: // global
           _sdcwd::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdezi; else goto cdezj;
       cdezj: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdezl; else goto cdezk;
       cdezl: // global
           HpAlloc = 48;
           goto cdezi;
       cdezi: // global
           R1 = _sdcwd::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdezk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcwd::P64;
           _sdcvT::P64 = P64[_sdcwd::P64 + 16];
           _sdcvU::P64 = P64[_sdcwd::P64 + 24];
           _sdcvV::P64 = P64[_sdcwd::P64 + 32];
           _sdcvW::P64 = P64[_sdcwd::P64 + 40];
           _sdcvY::P64 = P64[_sdcwd::P64 + 48];
           I64[Hp - 40] = sat_sdcwc_info;
           P64[Hp - 24] = _sdcvU::P64;
           P64[Hp - 16] = _sdcvV::P64;
           P64[Hp - 8] = _sdcvW::P64;
           P64[Hp] = _sdcvY::P64;
           R2 = Hp - 40;
           R1 = _sdcvT::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcwd_info" {
     sat_sdcwd_info:
         const sat_sdcwd_entry;
         const 5;
         const 4294967311;
         const SddB2_srt+144;
 },
 sat_sdcwe_entry() //  [R1]
         { []
         }
     {offset
       cdezm: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdezq; else goto cdezp;
       cdezq: // global
           HpAlloc = 56;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdezp: // global
           _sdcvT::P64 = P64[R1 + 16];
           _sdcvU::P64 = P64[R1 + 24];
           _sdcvV::P64 = P64[R1 + 32];
           _sdcvW::P64 = P64[R1 + 40];
           _sdcvY::P64 = P64[R1 + 48];
           I64[Hp - 48] = sat_sdcwd_info;
           P64[Hp - 32] = _sdcvT::P64;
           P64[Hp - 24] = _sdcvU::P64;
           P64[Hp - 16] = _sdcvV::P64;
           P64[Hp - 8] = _sdcvW::P64;
           P64[Hp] = _sdcvY::P64;
           R3 = Hp - 48;
           R2 = lvl28_rcV5v_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcwe_info" {
     sat_sdcwe_info:
         const sat_sdcwe_entry;
         const 5;
         const 4294967311;
         const SddB2_srt+144;
 },
 sat_sdcwf_entry() //  [R1]
         { []
         }
     {offset
       cdezr: // global
           _sdcwf::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdezs; else goto cdezt;
       cdezt: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdezv; else goto cdezu;
       cdezv: // global
           HpAlloc = 56;
           goto cdezs;
       cdezs: // global
           R1 = _sdcwf::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdezu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcwf::P64;
           _sdcvT::P64 = P64[_sdcwf::P64 + 16];
           _sdcvU::P64 = P64[_sdcwf::P64 + 24];
           _sdcvV::P64 = P64[_sdcwf::P64 + 32];
           _sdcvW::P64 = P64[_sdcwf::P64 + 40];
           _sdcvY::P64 = P64[_sdcwf::P64 + 48];
           I64[Hp - 48] = sat_sdcwe_info;
           P64[Hp - 32] = _sdcvT::P64;
           P64[Hp - 24] = _sdcvU::P64;
           P64[Hp - 16] = _sdcvV::P64;
           P64[Hp - 8] = _sdcvW::P64;
           P64[Hp] = _sdcvY::P64;
           R3 = Hp - 48;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcwf_info" {
     sat_sdcwf_info:
         const sat_sdcwf_entry;
         const 5;
         const 4294967311;
         const SddB2_srt+144;
 },
 sat_sdcwg_entry() //  [R1]
         { []
         }
     {offset
       cdezw: // global
           _sdcwg::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdezx; else goto cdezy;
       cdezy: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdezA; else goto cdezz;
       cdezA: // global
           HpAlloc = 56;
           goto cdezx;
       cdezx: // global
           R1 = _sdcwg::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdezz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcwg::P64;
           _sdcvS::P64 = P64[_sdcwg::P64 + 16];
           _sdcvT::P64 = P64[_sdcwg::P64 + 24];
           _sdcvU::P64 = P64[_sdcwg::P64 + 32];
           _sdcvV::P64 = P64[_sdcwg::P64 + 40];
           _sdcvW::P64 = P64[_sdcwg::P64 + 48];
           _sdcvY::P64 = P64[_sdcwg::P64 + 56];
           I64[Hp - 48] = sat_sdcwf_info;
           P64[Hp - 32] = _sdcvT::P64;
           P64[Hp - 24] = _sdcvU::P64;
           P64[Hp - 16] = _sdcvV::P64;
           P64[Hp - 8] = _sdcvW::P64;
           P64[Hp] = _sdcvY::P64;
           R2 = Hp - 48;
           R1 = _sdcvS::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcwg_info" {
     sat_sdcwg_info:
         const sat_sdcwg_entry;
         const 6;
         const 4294967311;
         const SddB2_srt+144;
 },
 sat_sdcwh_entry() //  [R1]
         { []
         }
     {offset
       cdezB: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdezF; else goto cdezE;
       cdezF: // global
           HpAlloc = 64;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdezE: // global
           _sdcvS::P64 = P64[R1 + 16];
           _sdcvT::P64 = P64[R1 + 24];
           _sdcvU::P64 = P64[R1 + 32];
           _sdcvV::P64 = P64[R1 + 40];
           _sdcvW::P64 = P64[R1 + 48];
           _sdcvY::P64 = P64[R1 + 56];
           I64[Hp - 56] = sat_sdcwg_info;
           P64[Hp - 40] = _sdcvS::P64;
           P64[Hp - 32] = _sdcvT::P64;
           P64[Hp - 24] = _sdcvU::P64;
           P64[Hp - 16] = _sdcvV::P64;
           P64[Hp - 8] = _sdcvW::P64;
           P64[Hp] = _sdcvY::P64;
           R3 = Hp - 56;
           R2 = lvl27_rcV5u_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcwh_info" {
     sat_sdcwh_info:
         const sat_sdcwh_entry;
         const 6;
         const 4294967311;
         const SddB2_srt+144;
 },
 sat_sdcwi_entry() //  [R1]
         { []
         }
     {offset
       cdezG: // global
           _sdcwi::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdezH; else goto cdezI;
       cdezI: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdezK; else goto cdezJ;
       cdezK: // global
           HpAlloc = 64;
           goto cdezH;
       cdezH: // global
           R1 = _sdcwi::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdezJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcwi::P64;
           _sdcvS::P64 = P64[_sdcwi::P64 + 16];
           _sdcvT::P64 = P64[_sdcwi::P64 + 24];
           _sdcvU::P64 = P64[_sdcwi::P64 + 32];
           _sdcvV::P64 = P64[_sdcwi::P64 + 40];
           _sdcvW::P64 = P64[_sdcwi::P64 + 48];
           _sdcvY::P64 = P64[_sdcwi::P64 + 56];
           I64[Hp - 56] = sat_sdcwh_info;
           P64[Hp - 40] = _sdcvS::P64;
           P64[Hp - 32] = _sdcvT::P64;
           P64[Hp - 24] = _sdcvU::P64;
           P64[Hp - 16] = _sdcvV::P64;
           P64[Hp - 8] = _sdcvW::P64;
           P64[Hp] = _sdcvY::P64;
           R3 = Hp - 56;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcwi_info" {
     sat_sdcwi_info:
         const sat_sdcwi_entry;
         const 6;
         const 4294967311;
         const SddB2_srt+144;
 },
 sat_sdcwj_entry() //  [R1]
         { []
         }
     {offset
       cdezL: // global
           _sdcwj::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdezM; else goto cdezN;
       cdezN: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdezP; else goto cdezO;
       cdezP: // global
           HpAlloc = 64;
           goto cdezM;
       cdezM: // global
           R1 = _sdcwj::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdezO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcwj::P64;
           _sdcvR::P64 = P64[_sdcwj::P64 + 16];
           _sdcvS::P64 = P64[_sdcwj::P64 + 24];
           _sdcvT::P64 = P64[_sdcwj::P64 + 32];
           _sdcvU::P64 = P64[_sdcwj::P64 + 40];
           _sdcvV::P64 = P64[_sdcwj::P64 + 48];
           _sdcvW::P64 = P64[_sdcwj::P64 + 56];
           _sdcvY::P64 = P64[_sdcwj::P64 + 64];
           I64[Hp - 56] = sat_sdcwi_info;
           P64[Hp - 40] = _sdcvS::P64;
           P64[Hp - 32] = _sdcvT::P64;
           P64[Hp - 24] = _sdcvU::P64;
           P64[Hp - 16] = _sdcvV::P64;
           P64[Hp - 8] = _sdcvW::P64;
           P64[Hp] = _sdcvY::P64;
           R2 = Hp - 56;
           R1 = _sdcvR::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcwj_info" {
     sat_sdcwj_info:
         const sat_sdcwj_entry;
         const 7;
         const 4294967311;
         const SddB2_srt+144;
 },
 sat_sdcwk_entry() //  [R1]
         { []
         }
     {offset
       cdezQ: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdezU; else goto cdezT;
       cdezU: // global
           HpAlloc = 72;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdezT: // global
           _sdcvR::P64 = P64[R1 + 16];
           _sdcvS::P64 = P64[R1 + 24];
           _sdcvT::P64 = P64[R1 + 32];
           _sdcvU::P64 = P64[R1 + 40];
           _sdcvV::P64 = P64[R1 + 48];
           _sdcvW::P64 = P64[R1 + 56];
           _sdcvY::P64 = P64[R1 + 64];
           I64[Hp - 64] = sat_sdcwj_info;
           P64[Hp - 48] = _sdcvR::P64;
           P64[Hp - 40] = _sdcvS::P64;
           P64[Hp - 32] = _sdcvT::P64;
           P64[Hp - 24] = _sdcvU::P64;
           P64[Hp - 16] = _sdcvV::P64;
           P64[Hp - 8] = _sdcvW::P64;
           P64[Hp] = _sdcvY::P64;
           R3 = Hp - 64;
           R2 = lvl26_rcV5t_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcwk_info" {
     sat_sdcwk_info:
         const sat_sdcwk_entry;
         const 7;
         const 4294967311;
         const SddB2_srt+144;
 },
 sat_sdcwl_entry() //  [R1]
         { []
         }
     {offset
       cdezV: // global
           _sdcwl::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdezW; else goto cdezX;
       cdezX: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdezZ; else goto cdezY;
       cdezZ: // global
           HpAlloc = 72;
           goto cdezW;
       cdezW: // global
           R1 = _sdcwl::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdezY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcwl::P64;
           _sdcvR::P64 = P64[_sdcwl::P64 + 16];
           _sdcvS::P64 = P64[_sdcwl::P64 + 24];
           _sdcvT::P64 = P64[_sdcwl::P64 + 32];
           _sdcvU::P64 = P64[_sdcwl::P64 + 40];
           _sdcvV::P64 = P64[_sdcwl::P64 + 48];
           _sdcvW::P64 = P64[_sdcwl::P64 + 56];
           _sdcvY::P64 = P64[_sdcwl::P64 + 64];
           I64[Hp - 64] = sat_sdcwk_info;
           P64[Hp - 48] = _sdcvR::P64;
           P64[Hp - 40] = _sdcvS::P64;
           P64[Hp - 32] = _sdcvT::P64;
           P64[Hp - 24] = _sdcvU::P64;
           P64[Hp - 16] = _sdcvV::P64;
           P64[Hp - 8] = _sdcvW::P64;
           P64[Hp] = _sdcvY::P64;
           R3 = Hp - 64;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcwl_info" {
     sat_sdcwl_info:
         const sat_sdcwl_entry;
         const 7;
         const 4294967311;
         const SddB2_srt+144;
 },
 sat_sdcwm_entry() //  [R1]
         { []
         }
     {offset
       cdeA0: // global
           _sdcwm::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdeA1; else goto cdeA2;
       cdeA2: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdeA4; else goto cdeA3;
       cdeA4: // global
           HpAlloc = 72;
           goto cdeA1;
       cdeA1: // global
           R1 = _sdcwm::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdeA3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcwm::P64;
           _sdcvQ::P64 = P64[_sdcwm::P64 + 16];
           _sdcvR::P64 = P64[_sdcwm::P64 + 24];
           _sdcvS::P64 = P64[_sdcwm::P64 + 32];
           _sdcvT::P64 = P64[_sdcwm::P64 + 40];
           _sdcvU::P64 = P64[_sdcwm::P64 + 48];
           _sdcvV::P64 = P64[_sdcwm::P64 + 56];
           _sdcvW::P64 = P64[_sdcwm::P64 + 64];
           _sdcvY::P64 = P64[_sdcwm::P64 + 72];
           I64[Hp - 64] = sat_sdcwl_info;
           P64[Hp - 48] = _sdcvR::P64;
           P64[Hp - 40] = _sdcvS::P64;
           P64[Hp - 32] = _sdcvT::P64;
           P64[Hp - 24] = _sdcvU::P64;
           P64[Hp - 16] = _sdcvV::P64;
           P64[Hp - 8] = _sdcvW::P64;
           P64[Hp] = _sdcvY::P64;
           R2 = Hp - 64;
           R1 = _sdcvQ::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcwm_info" {
     sat_sdcwm_info:
         const sat_sdcwm_entry;
         const 8;
         const 4294967311;
         const SddB2_srt+144;
 },
 sat_sdcwn_entry() //  [R1]
         { []
         }
     {offset
       cdeA5: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cdeA9; else goto cdeA8;
       cdeA9: // global
           HpAlloc = 80;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdeA8: // global
           _sdcvQ::P64 = P64[R1 + 16];
           _sdcvR::P64 = P64[R1 + 24];
           _sdcvS::P64 = P64[R1 + 32];
           _sdcvT::P64 = P64[R1 + 40];
           _sdcvU::P64 = P64[R1 + 48];
           _sdcvV::P64 = P64[R1 + 56];
           _sdcvW::P64 = P64[R1 + 64];
           _sdcvY::P64 = P64[R1 + 72];
           I64[Hp - 72] = sat_sdcwm_info;
           P64[Hp - 56] = _sdcvQ::P64;
           P64[Hp - 48] = _sdcvR::P64;
           P64[Hp - 40] = _sdcvS::P64;
           P64[Hp - 32] = _sdcvT::P64;
           P64[Hp - 24] = _sdcvU::P64;
           P64[Hp - 16] = _sdcvV::P64;
           P64[Hp - 8] = _sdcvW::P64;
           P64[Hp] = _sdcvY::P64;
           R3 = Hp - 72;
           R2 = lvl25_rcV5s_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcwn_info" {
     sat_sdcwn_info:
         const sat_sdcwn_entry;
         const 8;
         const 4294967311;
         const SddB2_srt+144;
 },
 sat_sdcwo_entry() //  [R1]
         { []
         }
     {offset
       cdeAa: // global
           _sdcwo::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdeAb; else goto cdeAc;
       cdeAc: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cdeAe; else goto cdeAd;
       cdeAe: // global
           HpAlloc = 80;
           goto cdeAb;
       cdeAb: // global
           R1 = _sdcwo::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdeAd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcwo::P64;
           _sdcvQ::P64 = P64[_sdcwo::P64 + 16];
           _sdcvR::P64 = P64[_sdcwo::P64 + 24];
           _sdcvS::P64 = P64[_sdcwo::P64 + 32];
           _sdcvT::P64 = P64[_sdcwo::P64 + 40];
           _sdcvU::P64 = P64[_sdcwo::P64 + 48];
           _sdcvV::P64 = P64[_sdcwo::P64 + 56];
           _sdcvW::P64 = P64[_sdcwo::P64 + 64];
           _sdcvY::P64 = P64[_sdcwo::P64 + 72];
           I64[Hp - 72] = sat_sdcwn_info;
           P64[Hp - 56] = _sdcvQ::P64;
           P64[Hp - 48] = _sdcvR::P64;
           P64[Hp - 40] = _sdcvS::P64;
           P64[Hp - 32] = _sdcvT::P64;
           P64[Hp - 24] = _sdcvU::P64;
           P64[Hp - 16] = _sdcvV::P64;
           P64[Hp - 8] = _sdcvW::P64;
           P64[Hp] = _sdcvY::P64;
           R3 = Hp - 72;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcwo_info" {
     sat_sdcwo_info:
         const sat_sdcwo_entry;
         const 8;
         const 4294967311;
         const SddB2_srt+144;
 },
 sat_sdcws_entry() //  [R1]
         { []
         }
     {offset
       cdeAf: // global
           if ((Sp + -88) < SpLim) (likely: False) goto cdeAj; else goto cdeAk;
       cdeAj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdeAk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 88] = block_cdex0_info;
           _sdcvQ::P64 = P64[R1 + 24];
           _sdcvR::P64 = P64[R1 + 32];
           _sdcvS::P64 = P64[R1 + 40];
           _sdcvT::P64 = P64[R1 + 48];
           _sdcvU::P64 = P64[R1 + 56];
           _sdcvV::P64 = P64[R1 + 64];
           _sdcvW::P64 = P64[R1 + 72];
           _sdcvY::P64 = P64[R1 + 80];
           R1 = P64[R1 + 16];
           P64[Sp - 80] = _sdcvQ::P64;
           P64[Sp - 72] = _sdcvR::P64;
           P64[Sp - 64] = _sdcvS::P64;
           P64[Sp - 56] = _sdcvT::P64;
           P64[Sp - 48] = _sdcvU::P64;
           P64[Sp - 40] = _sdcvV::P64;
           P64[Sp - 32] = _sdcvW::P64;
           P64[Sp - 24] = _sdcvY::P64;
           Sp = Sp - 88;
           if (R1 & 7 != 0) goto udeAr; else goto cdex1;
       udeAr: // global
           call _cdex0(R1) args: 0, res: 0, upd: 0;
       cdex1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcws_info" {
     sat_sdcws_info:
         const sat_sdcws_entry;
         const 9;
         const 4294967311;
         const SddB2_srt+144;
 },
 _cdex0() //  [R1]
         { []
         }
     {offset
       cdex0: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cdeAn; else goto cdeAm;
       cdeAn: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdeAm: // global
           _sdcw2::I64 = I64[R1 + 7];
           I64[Hp - 72] = sat_sdcwo_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = P64[Sp + 16];
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = P64[Sp + 40];
           P64[Hp - 16] = P64[Sp + 48];
           P64[Hp - 8] = P64[Sp + 56];
           P64[Hp] = P64[Sp + 64];
           I64[Sp + 64] = block_cdeAg_info;
           R3 = Hp - 72;
           R2 = _sdcw2::I64;
           Sp = Sp + 64;
           call GHC.Show.$wshowWord_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cdex0_info" {
     block_cdex0_info:
         const _cdex0;
         const 8;
         const 4294967326;
         const SddB2_srt+144;
 },
 _cdeAg() //  [R1, R2]
         { []
         }
     {offset
       cdeAg: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdeAq; else goto cdeAp;
       cdeAq: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cdeAp: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdeAg_info" {
     block_cdeAg_info:
         const _cdeAg;
         const 0;
         const 30;
 },
 sat_sdcwt_entry() //  [R1]
         { []
         }
     {offset
       cdeAs: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdeAw; else goto cdeAv;
       cdeAw: // global
           HpAlloc = 88;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdeAv: // global
           _sdcvB::P64 = P64[R1 + 16];
           _sdcvQ::P64 = P64[R1 + 24];
           _sdcvR::P64 = P64[R1 + 32];
           _sdcvS::P64 = P64[R1 + 40];
           _sdcvT::P64 = P64[R1 + 48];
           _sdcvU::P64 = P64[R1 + 56];
           _sdcvV::P64 = P64[R1 + 64];
           _sdcvW::P64 = P64[R1 + 72];
           _sdcvY::P64 = P64[R1 + 80];
           I64[Hp - 80] = sat_sdcws_info;
           P64[Hp - 64] = _sdcvB::P64;
           P64[Hp - 56] = _sdcvQ::P64;
           P64[Hp - 48] = _sdcvR::P64;
           P64[Hp - 40] = _sdcvS::P64;
           P64[Hp - 32] = _sdcvT::P64;
           P64[Hp - 24] = _sdcvU::P64;
           P64[Hp - 16] = _sdcvV::P64;
           P64[Hp - 8] = _sdcvW::P64;
           P64[Hp] = _sdcvY::P64;
           R3 = Hp - 80;
           R2 = lvl24_rcV5r_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcwt_info" {
     sat_sdcwt_info:
         const sat_sdcwt_entry;
         const 9;
         const 4294967311;
         const SddB2_srt+144;
 },
 sat_sdcwu_entry() //  [R1]
         { []
         }
     {offset
       cdeAx: // global
           _sdcwu::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdeAy; else goto cdeAz;
       cdeAz: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdeAB; else goto cdeAA;
       cdeAB: // global
           HpAlloc = 88;
           goto cdeAy;
       cdeAy: // global
           R1 = _sdcwu::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdeAA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcwu::P64;
           _sdcvB::P64 = P64[_sdcwu::P64 + 16];
           _sdcvQ::P64 = P64[_sdcwu::P64 + 24];
           _sdcvR::P64 = P64[_sdcwu::P64 + 32];
           _sdcvS::P64 = P64[_sdcwu::P64 + 40];
           _sdcvT::P64 = P64[_sdcwu::P64 + 48];
           _sdcvU::P64 = P64[_sdcwu::P64 + 56];
           _sdcvV::P64 = P64[_sdcwu::P64 + 64];
           _sdcvW::P64 = P64[_sdcwu::P64 + 72];
           _sdcvY::P64 = P64[_sdcwu::P64 + 80];
           I64[Hp - 80] = sat_sdcwt_info;
           P64[Hp - 64] = _sdcvB::P64;
           P64[Hp - 56] = _sdcvQ::P64;
           P64[Hp - 48] = _sdcvR::P64;
           P64[Hp - 40] = _sdcvS::P64;
           P64[Hp - 32] = _sdcvT::P64;
           P64[Hp - 24] = _sdcvU::P64;
           P64[Hp - 16] = _sdcvV::P64;
           P64[Hp - 8] = _sdcvW::P64;
           P64[Hp] = _sdcvY::P64;
           R3 = Hp - 80;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcwu_info" {
     sat_sdcwu_info:
         const sat_sdcwu_entry;
         const 9;
         const 4294967311;
         const SddB2_srt+144;
 },
 sat_sdcwy_entry() //  [R1]
         { []
         }
     {offset
       cdeAC: // global
           if ((Sp + -96) < SpLim) (likely: False) goto cdeAG; else goto cdeAH;
       cdeAG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdeAH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 96] = block_cdewJ_info;
           _sdcvB::P64 = P64[R1 + 24];
           _sdcvQ::P64 = P64[R1 + 32];
           _sdcvR::P64 = P64[R1 + 40];
           _sdcvS::P64 = P64[R1 + 48];
           _sdcvT::P64 = P64[R1 + 56];
           _sdcvU::P64 = P64[R1 + 64];
           _sdcvV::P64 = P64[R1 + 72];
           _sdcvW::P64 = P64[R1 + 80];
           _sdcvY::P64 = P64[R1 + 88];
           R1 = P64[R1 + 16];
           P64[Sp - 88] = _sdcvB::P64;
           P64[Sp - 80] = _sdcvQ::P64;
           P64[Sp - 72] = _sdcvR::P64;
           P64[Sp - 64] = _sdcvS::P64;
           P64[Sp - 56] = _sdcvT::P64;
           P64[Sp - 48] = _sdcvU::P64;
           P64[Sp - 40] = _sdcvV::P64;
           P64[Sp - 32] = _sdcvW::P64;
           P64[Sp - 24] = _sdcvY::P64;
           Sp = Sp - 96;
           if (R1 & 7 != 0) goto udeAO; else goto cdewK;
       udeAO: // global
           call _cdewJ(R1) args: 0, res: 0, upd: 0;
       cdewK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcwy_info" {
     sat_sdcwy_info:
         const sat_sdcwy_entry;
         const 10;
         const 4294967311;
         const SddB2_srt+144;
 },
 _cdewJ() //  [R1]
         { []
         }
     {offset
       cdewJ: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdeAK; else goto cdeAJ;
       cdeAK: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdeAJ: // global
           _sdcw0::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_sdcwu_info;
           P64[Hp - 64] = P64[Sp + 8];
           P64[Hp - 56] = P64[Sp + 16];
           P64[Hp - 48] = P64[Sp + 24];
           P64[Hp - 40] = P64[Sp + 32];
           P64[Hp - 32] = P64[Sp + 40];
           P64[Hp - 24] = P64[Sp + 48];
           P64[Hp - 16] = P64[Sp + 56];
           P64[Hp - 8] = P64[Sp + 64];
           P64[Hp] = P64[Sp + 72];
           I64[Sp + 72] = block_cdeAD_info;
           R3 = Hp - 80;
           R2 = _sdcw0::I64;
           Sp = Sp + 72;
           call GHC.Show.$wshowWord_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cdewJ_info" {
     block_cdewJ_info:
         const _cdewJ;
         const 9;
         const 4294967326;
         const SddB2_srt+144;
 },
 _cdeAD() //  [R1, R2]
         { []
         }
     {offset
       cdeAD: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdeAN; else goto cdeAM;
       cdeAN: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cdeAM: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdeAD_info" {
     block_cdeAD_info:
         const _cdeAD;
         const 0;
         const 30;
 },
 sat_sdcwz_entry() //  [R1]
         { []
         }
     {offset
       cdeAP: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cdeAT; else goto cdeAS;
       cdeAT: // global
           HpAlloc = 96;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdeAS: // global
           _sdcvA::P64 = P64[R1 + 16];
           _sdcvB::P64 = P64[R1 + 24];
           _sdcvQ::P64 = P64[R1 + 32];
           _sdcvR::P64 = P64[R1 + 40];
           _sdcvS::P64 = P64[R1 + 48];
           _sdcvT::P64 = P64[R1 + 56];
           _sdcvU::P64 = P64[R1 + 64];
           _sdcvV::P64 = P64[R1 + 72];
           _sdcvW::P64 = P64[R1 + 80];
           _sdcvY::P64 = P64[R1 + 88];
           I64[Hp - 88] = sat_sdcwy_info;
           P64[Hp - 72] = _sdcvA::P64;
           P64[Hp - 64] = _sdcvB::P64;
           P64[Hp - 56] = _sdcvQ::P64;
           P64[Hp - 48] = _sdcvR::P64;
           P64[Hp - 40] = _sdcvS::P64;
           P64[Hp - 32] = _sdcvT::P64;
           P64[Hp - 24] = _sdcvU::P64;
           P64[Hp - 16] = _sdcvV::P64;
           P64[Hp - 8] = _sdcvW::P64;
           P64[Hp] = _sdcvY::P64;
           R3 = Hp - 88;
           R2 = lvl23_rcV5q_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcwz_info" {
     sat_sdcwz_info:
         const sat_sdcwz_entry;
         const 10;
         const 4294967311;
         const SddB2_srt+144;
 },
 g1_sdcvX_entry() //  [R1, R2]
         { []
         }
     {offset
       cdeAU: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cdeAY; else goto cdeAX;
       cdeAY: // global
           HpAlloc = 96;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdeAX: // global
           _sdcvA::P64 = P64[R1 + 7];
           _sdcvB::P64 = P64[R1 + 15];
           _sdcvQ::P64 = P64[R1 + 23];
           _sdcvR::P64 = P64[R1 + 31];
           _sdcvS::P64 = P64[R1 + 39];
           _sdcvT::P64 = P64[R1 + 47];
           _sdcvU::P64 = P64[R1 + 55];
           _sdcvV::P64 = P64[R1 + 63];
           _sdcvW::P64 = P64[R1 + 71];
           I64[Hp - 88] = sat_sdcwz_info;
           P64[Hp - 72] = _sdcvA::P64;
           P64[Hp - 64] = _sdcvB::P64;
           P64[Hp - 56] = _sdcvQ::P64;
           P64[Hp - 48] = _sdcvR::P64;
           P64[Hp - 40] = _sdcvS::P64;
           P64[Hp - 32] = _sdcvT::P64;
           P64[Hp - 24] = _sdcvU::P64;
           P64[Hp - 16] = _sdcvV::P64;
           P64[Hp - 8] = _sdcvW::P64;
           P64[Hp] = R2;
           R3 = Hp - 88;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . g1_sdcvX_info" {
     g1_sdcvX_info:
         const g1_sdcvX_entry;
         const 9;
         const 4294967304;
         const 4294967301;
         const SddB2_srt+144;
 },
 sat_sdcwG_entry() //  [R1]
         { []
         }
     {offset
       cdeCd: // global
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           call g1_sdcvX_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcwG_info" {
     sat_sdcwG_info:
         const sat_sdcwG_entry;
         const 2;
         const 4294967314;
         const SddB2_srt+144;
 },
 sat_sdcwH_entry() //  [R1]
         { []
         }
     {offset
       cdeCm: // global
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           call g1_sdcvX_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcwH_info" {
     sat_sdcwH_info:
         const sat_sdcwH_entry;
         const 2;
         const 4294967314;
         const SddB2_srt+144;
 },
 sat_sdcwI_entry() //  [R1]
         { []
         }
     {offset
       cdeCt: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdeCu; else goto cdeCv;
       cdeCu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdeCv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cdeC4_info;
           _sdcvX::P64 = P64[R1 + 24];
           _sdcwB::P64 = P64[R1 + 32];
           R1 = P64[R1 + 16];
           P64[Sp - 32] = _sdcvX::P64;
           P64[Sp - 24] = _sdcwB::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto udeCC; else goto cdeC5;
       udeCC: // global
           call _cdeC4(R1) args: 0, res: 0, upd: 0;
       cdeC5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcwI_info" {
     sat_sdcwI_info:
         const sat_sdcwI_entry;
         const 3;
         const 30064771087;
         const SddB2_srt+128;
 },
 _cdeC4() //  [R1]
         { []
         }
     {offset
       cdeC4: // global
           _sdcvX::P64 = P64[Sp + 8];
           _sdcwB::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto cdeCq; else goto cdeCr;
       cdeCq: // global
           Hp = Hp + 32;
           _sdcwF::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cdeCB; else goto cdeCx;
       cdeCx: // global
           I64[Hp - 24] = sat_sdcwG_info;
           P64[Hp - 8] = _sdcvX::P64;
           P64[Hp] = _sdcwB::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cdeCr: // global
           Hp = Hp + 32;
           _sdcwF::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cdeCB; else goto cdeCA;
       cdeCB: // global
           HpAlloc = 32;
           R1 = _sdcwF::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdeCA: // global
           I64[Hp - 24] = sat_sdcwH_info;
           P64[Hp - 8] = _sdcvX::P64;
           P64[Hp] = _sdcwB::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdeC4_info" {
     block_cdeC4_info:
         const _cdeC4;
         const 2;
         const 30064771102;
         const SddB2_srt+128;
 },
 sat_sdcwJ_entry() //  [R1]
         { []
         }
     {offset
       cdeCD: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdeCH; else goto cdeCG;
       cdeCH: // global
           HpAlloc = 40;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdeCG: // global
           _sdcvz::P64 = P64[R1 + 16];
           _sdcvX::P64 = P64[R1 + 24];
           _sdcwB::P64 = P64[R1 + 32];
           I64[Hp - 32] = sat_sdcwI_info;
           P64[Hp - 16] = _sdcvz::P64;
           P64[Hp - 8] = _sdcvX::P64;
           P64[Hp] = _sdcwB::P64;
           R3 = Hp - 32;
           R2 = lvl22_rcV5p_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcwJ_info" {
     sat_sdcwJ_info:
         const sat_sdcwJ_entry;
         const 3;
         const 30064771087;
         const SddB2_srt+128;
 },
 sat_sdcwK_entry() //  [R1]
         { []
         }
     {offset
       cdeCI: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdeCM; else goto cdeCL;
       cdeCM: // global
           HpAlloc = 40;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdeCL: // global
           _sdcvz::P64 = P64[R1 + 16];
           _sdcvX::P64 = P64[R1 + 24];
           _sdcwB::P64 = P64[R1 + 32];
           I64[Hp - 32] = sat_sdcwJ_info;
           P64[Hp - 16] = _sdcvz::P64;
           P64[Hp - 8] = _sdcvX::P64;
           P64[Hp] = _sdcwB::P64;
           R3 = Hp - 32;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcwK_info" {
     sat_sdcwK_info:
         const sat_sdcwK_entry;
         const 3;
         const 30064771087;
         const SddB2_srt+128;
 },
 sat_sdcwM_entry() //  [R1]
         { []
         }
     {offset
       cdeDa: // global
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           call g1_sdcvX_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcwM_info" {
     sat_sdcwM_info:
         const sat_sdcwM_entry;
         const 2;
         const 4294967314;
         const SddB2_srt+144;
 },
 sat_sdcwN_entry() //  [R1]
         { []
         }
     {offset
       cdeDj: // global
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           call g1_sdcvX_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcwN_info" {
     sat_sdcwN_info:
         const sat_sdcwN_entry;
         const 2;
         const 4294967314;
         const SddB2_srt+144;
 },
 sat_sdcwO_entry() //  [R1]
         { []
         }
     {offset
       cdeDq: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdeDr; else goto cdeDs;
       cdeDr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdeDs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cdeD1_info;
           _sdcvX::P64 = P64[R1 + 24];
           _sdcwB::P64 = P64[R1 + 32];
           R1 = P64[R1 + 16];
           P64[Sp - 32] = _sdcvX::P64;
           P64[Sp - 24] = _sdcwB::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto udeDz; else goto cdeD2;
       udeDz: // global
           call _cdeD1(R1) args: 0, res: 0, upd: 0;
       cdeD2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcwO_info" {
     sat_sdcwO_info:
         const sat_sdcwO_entry;
         const 3;
         const 30064771087;
         const SddB2_srt+128;
 },
 _cdeD1() //  [R1]
         { []
         }
     {offset
       cdeD1: // global
           _sdcvX::P64 = P64[Sp + 8];
           _sdcwB::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto cdeDn; else goto cdeDo;
       cdeDn: // global
           Hp = Hp + 32;
           _sdcwL::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cdeDy; else goto cdeDu;
       cdeDu: // global
           I64[Hp - 24] = sat_sdcwM_info;
           P64[Hp - 8] = _sdcvX::P64;
           P64[Hp] = _sdcwB::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cdeDo: // global
           Hp = Hp + 32;
           _sdcwL::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cdeDy; else goto cdeDx;
       cdeDy: // global
           HpAlloc = 32;
           R1 = _sdcwL::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdeDx: // global
           I64[Hp - 24] = sat_sdcwN_info;
           P64[Hp - 8] = _sdcvX::P64;
           P64[Hp] = _sdcwB::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdeD1_info" {
     block_cdeD1_info:
         const _cdeD1;
         const 2;
         const 30064771102;
         const SddB2_srt+128;
 },
 sat_sdcwP_entry() //  [R1]
         { []
         }
     {offset
       cdeDA: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdeDE; else goto cdeDD;
       cdeDE: // global
           HpAlloc = 40;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdeDD: // global
           _sdcvz::P64 = P64[R1 + 16];
           _sdcvX::P64 = P64[R1 + 24];
           _sdcwB::P64 = P64[R1 + 32];
           I64[Hp - 32] = sat_sdcwO_info;
           P64[Hp - 16] = _sdcvz::P64;
           P64[Hp - 8] = _sdcvX::P64;
           P64[Hp] = _sdcwB::P64;
           R3 = Hp - 32;
           R2 = lvl22_rcV5p_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcwP_info" {
     sat_sdcwP_info:
         const sat_sdcwP_entry;
         const 3;
         const 30064771087;
         const SddB2_srt+128;
 },
 sat_sdcwQ_entry() //  [R1]
         { []
         }
     {offset
       cdeDF: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdeDJ; else goto cdeDI;
       cdeDJ: // global
           HpAlloc = 40;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdeDI: // global
           _sdcvz::P64 = P64[R1 + 16];
           _sdcvX::P64 = P64[R1 + 24];
           _sdcwB::P64 = P64[R1 + 32];
           I64[Hp - 32] = sat_sdcwP_info;
           P64[Hp - 16] = _sdcvz::P64;
           P64[Hp - 8] = _sdcvX::P64;
           P64[Hp] = _sdcwB::P64;
           R3 = Hp - 32;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcwQ_info" {
     sat_sdcwQ_info:
         const sat_sdcwQ_entry;
         const 3;
         const 30064771087;
         const SddB2_srt+128;
 },
 sat_sdcwR_entry() //  [R1]
         { []
         }
     {offset
       cdeDO: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cdeDP; else goto cdeDQ;
       cdeDP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdeDQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_cdeBN_info;
           _sdcvz::P64 = P64[R1 + 24];
           _sdcvX::P64 = P64[R1 + 32];
           _sdcwB::P64 = P64[R1 + 40];
           R1 = P64[R1 + 16];
           P64[Sp - 40] = _sdcvz::P64;
           P64[Sp - 32] = _sdcvX::P64;
           P64[Sp - 24] = _sdcwB::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto udeDX; else goto cdeBO;
       udeDX: // global
           call _cdeBN(R1) args: 0, res: 0, upd: 0;
       cdeBO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcwR_info" {
     sat_sdcwR_info:
         const sat_sdcwR_entry;
         const 4;
         const 30064771087;
         const SddB2_srt+128;
 },
 _cdeBN() //  [R1]
         { []
         }
     {offset
       cdeBN: // global
           _sdcvz::P64 = P64[Sp + 8];
           _sdcvX::P64 = P64[Sp + 16];
           _sdcwB::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto cdeDL; else goto cdeDM;
       cdeDL: // global
           Hp = Hp + 40;
           _sdcwE::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cdeDW; else goto cdeDS;
       cdeDS: // global
           I64[Hp - 32] = sat_sdcwK_info;
           P64[Hp - 16] = _sdcvz::P64;
           P64[Hp - 8] = _sdcvX::P64;
           P64[Hp] = _sdcwB::P64;
           R3 = Hp - 32;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 32;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cdeDM: // global
           Hp = Hp + 40;
           _sdcwE::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cdeDW; else goto cdeDV;
       cdeDW: // global
           HpAlloc = 40;
           R1 = _sdcwE::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdeDV: // global
           I64[Hp - 32] = sat_sdcwQ_info;
           P64[Hp - 16] = _sdcvz::P64;
           P64[Hp - 8] = _sdcvX::P64;
           P64[Hp] = _sdcwB::P64;
           R3 = Hp - 32;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 32;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdeBN_info" {
     block_cdeBN_info:
         const _cdeBN;
         const 3;
         const 30064771102;
         const SddB2_srt+128;
 },
 sat_sdcwS_entry() //  [R1]
         { []
         }
     {offset
       cdeDY: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdeE2; else goto cdeE1;
       cdeE2: // global
           HpAlloc = 48;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdeE1: // global
           _sdcvy::P64 = P64[R1 + 16];
           _sdcvz::P64 = P64[R1 + 24];
           _sdcvX::P64 = P64[R1 + 32];
           _sdcwB::P64 = P64[R1 + 40];
           I64[Hp - 40] = sat_sdcwR_info;
           P64[Hp - 24] = _sdcvy::P64;
           P64[Hp - 16] = _sdcvz::P64;
           P64[Hp - 8] = _sdcvX::P64;
           P64[Hp] = _sdcwB::P64;
           R3 = Hp - 40;
           R2 = lvl35_rcV5C_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcwS_info" {
     sat_sdcwS_info:
         const sat_sdcwS_entry;
         const 4;
         const 30064771087;
         const SddB2_srt+128;
 },
 sat_sdcwT_entry() //  [R1]
         { []
         }
     {offset
       cdeE3: // global
           _sdcwT::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdeE4; else goto cdeE5;
       cdeE5: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdeE7; else goto cdeE6;
       cdeE7: // global
           HpAlloc = 48;
           goto cdeE4;
       cdeE4: // global
           R1 = _sdcwT::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdeE6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcwT::P64;
           _sdcvy::P64 = P64[_sdcwT::P64 + 16];
           _sdcvz::P64 = P64[_sdcwT::P64 + 24];
           _sdcvX::P64 = P64[_sdcwT::P64 + 32];
           _sdcwB::P64 = P64[_sdcwT::P64 + 40];
           I64[Hp - 40] = sat_sdcwS_info;
           P64[Hp - 24] = _sdcvy::P64;
           P64[Hp - 16] = _sdcvz::P64;
           P64[Hp - 8] = _sdcvX::P64;
           P64[Hp] = _sdcwB::P64;
           R3 = Hp - 40;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcwT_info" {
     sat_sdcwT_info:
         const sat_sdcwT_entry;
         const 4;
         const 30064771087;
         const SddB2_srt+128;
 },
 sat_sdcwX_entry() //  [R1]
         { []
         }
     {offset
       cdeE8: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cdeEc; else goto cdeEd;
       cdeEc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdeEd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 56] = block_cdeBw_info;
           _sdcvy::P64 = P64[R1 + 24];
           _sdcvz::P64 = P64[R1 + 32];
           _sdcvX::P64 = P64[R1 + 40];
           _sdcwB::P64 = P64[R1 + 48];
           R1 = P64[R1 + 16];
           P64[Sp - 48] = _sdcvy::P64;
           P64[Sp - 40] = _sdcvz::P64;
           P64[Sp - 32] = _sdcvX::P64;
           P64[Sp - 24] = _sdcwB::P64;
           Sp = Sp - 56;
           if (R1 & 7 != 0) goto udeEk; else goto cdeBx;
       udeEk: // global
           call _cdeBw(R1) args: 0, res: 0, upd: 0;
       cdeBx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcwX_info" {
     sat_sdcwX_info:
         const sat_sdcwX_entry;
         const 5;
         const 30064771087;
         const SddB2_srt+128;
 },
 _cdeBw() //  [R1]
         { []
         }
     {offset
       cdeBw: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdeEg; else goto cdeEf;
       cdeEg: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdeEf: // global
           _sdcwD::I64 = I64[R1 + 7];
           I64[Hp - 40] = sat_sdcwT_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = P64[Sp + 32];
           I64[Sp + 32] = block_cdeE9_info;
           R3 = Hp - 40;
           R2 = _sdcwD::I64;
           Sp = Sp + 32;
           call GHC.Show.$wshowWord_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cdeBw_info" {
     block_cdeBw_info:
         const _cdeBw;
         const 4;
         const 30064771102;
         const SddB2_srt+128;
 },
 _cdeE9() //  [R1, R2]
         { []
         }
     {offset
       cdeE9: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdeEj; else goto cdeEi;
       cdeEj: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cdeEi: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdeE9_info" {
     block_cdeE9_info:
         const _cdeE9;
         const 0;
         const 30;
 },
 sat_sdcwY_entry() //  [R1]
         { []
         }
     {offset
       cdeEl: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdeEp; else goto cdeEo;
       cdeEp: // global
           HpAlloc = 56;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdeEo: // global
           _sdcvx::P64 = P64[R1 + 16];
           _sdcvy::P64 = P64[R1 + 24];
           _sdcvz::P64 = P64[R1 + 32];
           _sdcvX::P64 = P64[R1 + 40];
           _sdcwB::P64 = P64[R1 + 48];
           I64[Hp - 48] = sat_sdcwX_info;
           P64[Hp - 32] = _sdcvx::P64;
           P64[Hp - 24] = _sdcvy::P64;
           P64[Hp - 16] = _sdcvz::P64;
           P64[Hp - 8] = _sdcvX::P64;
           P64[Hp] = _sdcwB::P64;
           R3 = Hp - 48;
           R2 = lvl34_rcV5B_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcwY_info" {
     sat_sdcwY_info:
         const sat_sdcwY_entry;
         const 5;
         const 30064771087;
         const SddB2_srt+128;
 },
 sat_sdcwZ_entry() //  [R1]
         { []
         }
     {offset
       cdeEq: // global
           _sdcwZ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdeEr; else goto cdeEs;
       cdeEs: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdeEu; else goto cdeEt;
       cdeEu: // global
           HpAlloc = 56;
           goto cdeEr;
       cdeEr: // global
           R1 = _sdcwZ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdeEt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcwZ::P64;
           _sdcvx::P64 = P64[_sdcwZ::P64 + 16];
           _sdcvy::P64 = P64[_sdcwZ::P64 + 24];
           _sdcvz::P64 = P64[_sdcwZ::P64 + 32];
           _sdcvX::P64 = P64[_sdcwZ::P64 + 40];
           _sdcwB::P64 = P64[_sdcwZ::P64 + 48];
           I64[Hp - 48] = sat_sdcwY_info;
           P64[Hp - 32] = _sdcvx::P64;
           P64[Hp - 24] = _sdcvy::P64;
           P64[Hp - 16] = _sdcvz::P64;
           P64[Hp - 8] = _sdcvX::P64;
           P64[Hp] = _sdcwB::P64;
           R3 = Hp - 48;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcwZ_info" {
     sat_sdcwZ_info:
         const sat_sdcwZ_entry;
         const 5;
         const 30064771087;
         const SddB2_srt+128;
 },
 section ""relreadonly" . udeG1_srtd" {
     udeG1_srtd:
         const SddB2_srt+128;
         const 33;
         const 4294967303;
 },
 sat_sdcx3_entry() //  [R1]
         { []
         }
     {offset
       cdeEy: // global
           _sdcx3::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cdeEz; else goto cdeEA;
       cdeEA: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdeEC; else goto cdeEB;
       cdeEC: // global
           HpAlloc = 56;
           goto cdeEz;
       cdeEz: // global
           R1 = _sdcx3::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdeEB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcx3::P64;
           _sdcvx::P64 = P64[_sdcx3::P64 + 16];
           _sdcvy::P64 = P64[_sdcx3::P64 + 24];
           _sdcvz::P64 = P64[_sdcx3::P64 + 32];
           _sdcvL::P64 = P64[_sdcx3::P64 + 40];
           _sdcvX::P64 = P64[_sdcx3::P64 + 48];
           _sdcwB::P64 = P64[_sdcx3::P64 + 56];
           I64[Hp - 48] = sat_sdcwZ_info;
           P64[Hp - 32] = _sdcvx::P64;
           P64[Hp - 24] = _sdcvy::P64;
           P64[Hp - 16] = _sdcvz::P64;
           P64[Hp - 8] = _sdcvX::P64;
           P64[Hp] = _sdcwB::P64;
           I64[Sp - 24] = block_cdeEv_info;
           R4 = Hp - 48;
           R3 = _sdcvL::P64;
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcx3_info" {
     sat_sdcx3_info:
         const sat_sdcx3_entry;
         const 6;
         const 18446744069414584335;
         const udeG1_srtd;
 },
 _cdeEv() //  [R1, R2]
         { []
         }
     {offset
       cdeEv: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdeEF; else goto cdeEE;
       cdeEF: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cdeEE: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdeEv_info" {
     block_cdeEv_info:
         const _cdeEv;
         const 0;
         const 30;
 },
 section ""relreadonly" . udeG2_srtd" {
     udeG2_srtd:
         const SddB2_srt+128;
         const 33;
         const 4294967303;
 },
 sat_sdcx4_entry() //  [R1]
         { []
         }
     {offset
       cdeEG: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdeEK; else goto cdeEJ;
       cdeEK: // global
           HpAlloc = 64;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdeEJ: // global
           _sdcvx::P64 = P64[R1 + 16];
           _sdcvy::P64 = P64[R1 + 24];
           _sdcvz::P64 = P64[R1 + 32];
           _sdcvL::P64 = P64[R1 + 40];
           _sdcvX::P64 = P64[R1 + 48];
           _sdcwB::P64 = P64[R1 + 56];
           I64[Hp - 56] = sat_sdcx3_info;
           P64[Hp - 40] = _sdcvx::P64;
           P64[Hp - 32] = _sdcvy::P64;
           P64[Hp - 24] = _sdcvz::P64;
           P64[Hp - 16] = _sdcvL::P64;
           P64[Hp - 8] = _sdcvX::P64;
           P64[Hp] = _sdcwB::P64;
           R3 = Hp - 56;
           R2 = lvl33_rcV5A_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcx4_info" {
     sat_sdcx4_info:
         const sat_sdcx4_entry;
         const 6;
         const 18446744069414584335;
         const udeG2_srtd;
 },
 section ""relreadonly" . udeG3_srtd" {
     udeG3_srtd:
         const SddB2_srt+128;
         const 33;
         const 4294967303;
 },
 sat_sdcx5_entry() //  [R1]
         { []
         }
     {offset
       cdeEL: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdeEP; else goto cdeEO;
       cdeEP: // global
           HpAlloc = 64;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdeEO: // global
           _sdcvx::P64 = P64[R1 + 16];
           _sdcvy::P64 = P64[R1 + 24];
           _sdcvz::P64 = P64[R1 + 32];
           _sdcvL::P64 = P64[R1 + 40];
           _sdcvX::P64 = P64[R1 + 48];
           _sdcwB::P64 = P64[R1 + 56];
           I64[Hp - 56] = sat_sdcx4_info;
           P64[Hp - 40] = _sdcvx::P64;
           P64[Hp - 32] = _sdcvy::P64;
           P64[Hp - 24] = _sdcvz::P64;
           P64[Hp - 16] = _sdcvL::P64;
           P64[Hp - 8] = _sdcvX::P64;
           P64[Hp] = _sdcwB::P64;
           R3 = Hp - 56;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcx5_info" {
     sat_sdcx5_info:
         const sat_sdcx5_entry;
         const 6;
         const 18446744069414584335;
         const udeG3_srtd;
 },
 section ""relreadonly" . udeG4_srtd" {
     udeG4_srtd:
         const SddB2_srt+128;
         const 33;
         const 4299161607;
 },
 sat_sdcx6_entry() //  [R1]
         { []
         }
     {offset
       cdeEQ: // global
           _sdcx6::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdeER; else goto cdeES;
       cdeES: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdeEU; else goto cdeET;
       cdeEU: // global
           HpAlloc = 64;
           goto cdeER;
       cdeER: // global
           R1 = _sdcx6::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdeET: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcx6::P64;
           _sdcvv::P64 = P64[_sdcx6::P64 + 16];
           _sdcvx::P64 = P64[_sdcx6::P64 + 24];
           _sdcvy::P64 = P64[_sdcx6::P64 + 32];
           _sdcvz::P64 = P64[_sdcx6::P64 + 40];
           _sdcvL::P64 = P64[_sdcx6::P64 + 48];
           _sdcvX::P64 = P64[_sdcx6::P64 + 56];
           _sdcwB::P64 = P64[_sdcx6::P64 + 64];
           I64[Hp - 56] = sat_sdcx5_info;
           P64[Hp - 40] = _sdcvx::P64;
           P64[Hp - 32] = _sdcvy::P64;
           P64[Hp - 24] = _sdcvz::P64;
           P64[Hp - 16] = _sdcvL::P64;
           P64[Hp - 8] = _sdcvX::P64;
           P64[Hp] = _sdcwB::P64;
           R3 = Hp - 56;
           R2 = _sdcvv::P64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$cshowsPrec3_entry(R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcx6_info" {
     sat_sdcx6_info:
         const sat_sdcx6_entry;
         const 7;
         const 18446744069414584335;
         const udeG4_srtd;
 },
 section ""relreadonly" . udeG5_srtd" {
     udeG5_srtd:
         const SddB2_srt+128;
         const 33;
         const 4299161607;
 },
 g2_sdcwA_entry() //  [R1, R2]
         { []
         }
     {offset
       cdeEV: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdeEZ; else goto cdeEY;
       cdeEZ: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdeEY: // global
           _sdcvv::P64 = P64[R1 + 7];
           _sdcvx::P64 = P64[R1 + 15];
           _sdcvy::P64 = P64[R1 + 23];
           _sdcvz::P64 = P64[R1 + 31];
           _sdcvL::P64 = P64[R1 + 39];
           _sdcvX::P64 = P64[R1 + 47];
           I64[Hp - 64] = sat_sdcx6_info;
           P64[Hp - 48] = _sdcvv::P64;
           P64[Hp - 40] = _sdcvx::P64;
           P64[Hp - 32] = _sdcvy::P64;
           P64[Hp - 24] = _sdcvz::P64;
           P64[Hp - 16] = _sdcvL::P64;
           P64[Hp - 8] = _sdcvX::P64;
           P64[Hp] = R2;
           R3 = Hp - 64;
           R2 = lvl32_rcV5z_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . g2_sdcwA_info" {
     g2_sdcwA_info:
         const g2_sdcwA_entry;
         const 6;
         const 18446744069414584328;
         const 4294967301;
         const udeG5_srtd;
 },
 section ""relreadonly" . udeG6_srtd" {
     udeG6_srtd:
         const SddB2_srt+128;
         const 33;
         const 4299161607;
 },
 sat_sdcx9_entry() //  [R1]
         { []
         }
     {offset
       cdeFc: // global
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           call g2_sdcwA_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcx9_info" {
     sat_sdcx9_info:
         const sat_sdcx9_entry;
         const 2;
         const 18446744069414584338;
         const udeG6_srtd;
 },
 section ""relreadonly" . udeG7_srtd" {
     udeG7_srtd:
         const SddB2_srt+128;
         const 34;
         const 12889096199;
 },
 sat_sdcxa_entry() //  [R1, R2]
         { []
         }
     {offset
       cdeFf: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdeFj; else goto cdeFi;
       cdeFj: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdeFi: // global
           _sdcwA::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_sdcx9_info;
           P64[Hp - 8] = _sdcwA::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = f3_rcV5o_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcxa_info" {
     sat_sdcxa_info:
         const sat_sdcxa_entry;
         const 1;
         const 18446744069414584329;
         const 4294967301;
         const udeG7_srtd;
 },
 section ""relreadonly" . udeG8_srtd" {
     udeG8_srtd:
         const SddB2_srt+128;
         const 33;
         const 4299161607;
 },
 sat_sdcxd_entry() //  [R1]
         { []
         }
     {offset
       cdeFz: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdeFD; else goto cdeFC;
       cdeFD: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdeFC: // global
           _sdcwA::P64 = P64[R1 + 16];
           _sdcxb::P64 = P64[R1 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _sdcxb::P64;
           R2 = Hp - 14;
           R1 = _sdcwA::P64;
           call g2_sdcwA_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcxd_info" {
     sat_sdcxd_info:
         const sat_sdcxd_entry;
         const 2;
         const 18446744069414584338;
         const udeG8_srtd;
 },
 section ""relreadonly" . udeG9_srtd" {
     udeG9_srtd:
         const SddB2_srt+128;
         const 34;
         const 12889096199;
 },
 sat_sdcxe_entry() //  [R1]
         { []
         }
     {offset
       cdeFE: // global
           _sdcxe::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdeFF; else goto cdeFG;
       cdeFG: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdeFI; else goto cdeFH;
       cdeFI: // global
           HpAlloc = 32;
           goto cdeFF;
       cdeFF: // global
           R1 = _sdcxe::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdeFH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcxe::P64;
           _sdcwA::P64 = P64[_sdcxe::P64 + 16];
           _sdcxb::P64 = P64[_sdcxe::P64 + 24];
           I64[Hp - 24] = sat_sdcxd_info;
           P64[Hp - 8] = _sdcwA::P64;
           P64[Hp] = _sdcxb::P64;
           R3 = Hp - 24;
           R2 = f3_rcV5o_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcxe_info" {
     sat_sdcxe_info:
         const sat_sdcxe_entry;
         const 2;
         const 18446744069414584338;
         const udeG9_srtd;
 },
 section ""relreadonly" . udeGa_srtd" {
     udeGa_srtd:
         const SddB2_srt+128;
         const 34;
         const 12889096199;
 },
 sat_sdcxf_entry() //  [R1, R2]
         { []
         }
     {offset
       cdeFK: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdeFO; else goto cdeFN;
       cdeFO: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdeFN: // global
           _sdcwA::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_sdcxe_info;
           P64[Hp - 32] = _sdcwA::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcxf_info" {
     sat_sdcxf_info:
         const sat_sdcxf_entry;
         const 1;
         const 18446744069414584329;
         const 4294967301;
         const udeGa_srtd;
 },
 section ""relreadonly" . udeGb_srtd" {
     udeGb_srtd:
         const SddB2_srt+128;
         const 35;
         const 30068965479;
 },
 GHC.RTS.Flags.$fShowProfFlags_$cshowsPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       cdeFP: // global
           if ((Sp + -120) < SpLim) (likely: False) goto cdeFQ; else goto cdeFR;
       cdeFQ: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fShowProfFlags_$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdeFR: // global
           I64[Sp - 16] = block_cdevd_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udeG0; else goto cdeve;
       udeG0: // global
           call _cdevd(R1) args: 0, res: 0, upd: 0;
       cdeve: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowProfFlags_$cshowsPrec_info" {
     GHC.RTS.Flags.$fShowProfFlags_$cshowsPrec_info:
         const GHC.RTS.Flags.$fShowProfFlags_$cshowsPrec_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const udeGb_srtd;
 },
 section ""relreadonly" . udeGc_srtd" {
     udeGc_srtd:
         const SddB2_srt+128;
         const 34;
         const 12889096295;
 },
 _cdevd() //  [R1]
         { []
         }
     {offset
       cdevd: // global
           I64[Sp - 104] = block_cdevi_info;
           _sdcvv::P64 = P64[R1 + 7];
           _sdcvw::P64 = P64[R1 + 15];
           _sdcvx::P64 = P64[R1 + 23];
           _sdcvy::P64 = P64[R1 + 31];
           _sdcvz::P64 = P64[R1 + 39];
           _sdcvA::P64 = P64[R1 + 47];
           _sdcvB::P64 = P64[R1 + 55];
           _sdcvC::P64 = P64[R1 + 63];
           _sdcvD::P64 = P64[R1 + 71];
           _sdcvE::P64 = P64[R1 + 79];
           _sdcvF::P64 = P64[R1 + 87];
           _sdcvG::P64 = P64[R1 + 95];
           _sdcvH::P64 = P64[R1 + 103];
           _sdcvI::P64 = P64[R1 + 111];
           R1 = P64[Sp + 8];
           P64[Sp - 96] = _sdcvx::P64;
           P64[Sp - 88] = _sdcvy::P64;
           P64[Sp - 80] = _sdcvz::P64;
           P64[Sp - 72] = _sdcvA::P64;
           P64[Sp - 64] = _sdcvB::P64;
           P64[Sp - 56] = _sdcvC::P64;
           P64[Sp - 48] = _sdcvD::P64;
           P64[Sp - 40] = _sdcvE::P64;
           P64[Sp - 32] = _sdcvF::P64;
           P64[Sp - 24] = _sdcvG::P64;
           P64[Sp - 16] = _sdcvH::P64;
           P64[Sp - 8] = _sdcvI::P64;
           P64[Sp] = _sdcvw::P64;
           P64[Sp + 8] = _sdcvv::P64;
           Sp = Sp - 104;
           if (R1 & 7 != 0) goto udeFZ; else goto cdevj;
       udeFZ: // global
           call _cdevi(R1) args: 0, res: 0, upd: 0;
       cdevj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdevd_info" {
     block_cdevd_info:
         const _cdevd;
         const 1;
         const 18446744069414584350;
         const udeGc_srtd;
 },
 section ""relreadonly" . udeGd_srtd" {
     udeGd_srtd:
         const SddB2_srt+128;
         const 34;
         const 12889096295;
 },
 _cdevi() //  [R1]
         { []
         }
     {offset
       cdevi: // global
           Hp = Hp + 344;
           if (Hp > HpLim) (likely: False) goto cdeFV; else goto cdeFU;
       cdeFV: // global
           HpAlloc = 344;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdeFU: // global
           _sdcvK::I64 = I64[R1 + 7];
           I64[Hp - 336] = w1_sdcvL_info;
           P64[Hp - 320] = P64[Sp + 104];
           I64[Hp - 312] = f8_sdcvQ_info;
           P64[Hp - 296] = P64[Sp + 48];
           I64[Hp - 288] = f9_sdcvR_info;
           P64[Hp - 272] = P64[Sp + 56];
           I64[Hp - 264] = f10_sdcvS_info;
           P64[Hp - 248] = P64[Sp + 64];
           I64[Hp - 240] = f11_sdcvT_info;
           P64[Hp - 224] = P64[Sp + 72];
           I64[Hp - 216] = f12_sdcvU_info;
           P64[Hp - 200] = P64[Sp + 80];
           I64[Hp - 192] = f13_sdcvV_info;
           P64[Hp - 176] = P64[Sp + 88];
           I64[Hp - 168] = f14_sdcvW_info;
           P64[Hp - 152] = P64[Sp + 96];
           I64[Hp - 144] = g1_sdcvX_info;
           P64[Hp - 136] = P64[Sp + 32];
           P64[Hp - 128] = P64[Sp + 40];
           P64[Hp - 120] = Hp - 312;
           P64[Hp - 112] = Hp - 288;
           P64[Hp - 104] = Hp - 264;
           P64[Hp - 96] = Hp - 240;
           P64[Hp - 88] = Hp - 216;
           P64[Hp - 80] = Hp - 192;
           P64[Hp - 72] = Hp - 168;
           I64[Hp - 64] = g2_sdcwA_info;
           P64[Hp - 56] = P64[Sp + 112];
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = Hp - 336;
           P64[Hp - 16] = Hp - 143;
           _cdeAZ::P64 = Hp - 63;
           if (%MO_S_Lt_W64(_sdcvK::I64, 11)) goto cdeFX; else goto cdeFY;
       cdeFX: // global
           I64[Hp - 8] = sat_sdcxa_info;
           P64[Hp] = _cdeAZ::P64;
           R1 = Hp - 7;
           Sp = Sp + 120;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdeFY: // global
           I64[Hp - 8] = sat_sdcxf_info;
           P64[Hp] = _cdeAZ::P64;
           R1 = Hp - 7;
           Sp = Sp + 120;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdevi_info" {
     block_cdevi_info:
         const _cdevi;
         const 14;
         const 18446744069414584350;
         const udeGd_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.303449803 UTC

[section ""data" . GHC.RTS.Flags.$fShowProfFlags_$cshow_closure" {
     GHC.RTS.Flags.$fShowProfFlags_$cshow_closure:
         const GHC.RTS.Flags.$fShowProfFlags_$cshow_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowProfFlags_$cshow_entry() //  [R2]
         { []
         }
     {offset
       cdeNL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdeNM; else goto cdeNN;
       cdeNM: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.$fShowProfFlags_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdeNN: // global
           R3 = R2;
           R2 = GHC.RTS.Flags.$fEnumDoCostCentres10_closure+1;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = GHC.Types.[]_closure+1;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fShowProfFlags_$cshowsPrec_entry(R3,
                                                                R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowProfFlags_$cshow_info" {
     GHC.RTS.Flags.$fShowProfFlags_$cshow_info:
         const GHC.RTS.Flags.$fShowProfFlags_$cshow_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SddB2_srt+400;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.307717641 UTC

[section ""data" . GHC.RTS.Flags.$fShowProfFlags1_closure" {
     GHC.RTS.Flags.$fShowProfFlags1_closure:
         const GHC.RTS.Flags.$fShowProfFlags1_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowProfFlags1_entry() //  [R2]
         { []
         }
     {offset
       cdeO0: // global
           R3 = R2;
           R2 = GHC.RTS.Flags.$fEnumDoCostCentres10_closure+1;
           call GHC.RTS.Flags.$fShowProfFlags_$cshowsPrec_entry(R3,
                                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowProfFlags1_info" {
     GHC.RTS.Flags.$fShowProfFlags1_info:
         const GHC.RTS.Flags.$fShowProfFlags1_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SddB2_srt+400;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.31112709 UTC

[section ""data" . GHC.RTS.Flags.$fShowProfFlags_$cshowList_closure" {
     GHC.RTS.Flags.$fShowProfFlags_$cshowList_closure:
         const GHC.RTS.Flags.$fShowProfFlags_$cshowList_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowProfFlags_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       cdeOb: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.RTS.Flags.$fShowProfFlags1_closure+1;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowProfFlags_$cshowList_info" {
     GHC.RTS.Flags.$fShowProfFlags_$cshowList_info:
         const GHC.RTS.Flags.$fShowProfFlags_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const SddB2_srt+416;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.314263851 UTC

[section ""data" . GHC.RTS.Flags.$fShowProfFlags_closure" {
     GHC.RTS.Flags.$fShowProfFlags_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.RTS.Flags.$fShowProfFlags_$cshowsPrec_closure+2;
         const GHC.RTS.Flags.$fShowProfFlags_$cshow_closure+1;
         const GHC.RTS.Flags.$fShowProfFlags_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.315999489 UTC

[section ""cstring" . GHC.RTS.Flags.$fShowCCFlags14_bytes" {
     GHC.RTS.Flags.$fShowCCFlags14_bytes:
         I8[] [67,111,115,116,67,101,110,116,114,101,115,78,111,110,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.318311674 UTC

[section ""data" . GHC.RTS.Flags.$fShowCCFlags13_closure" {
     GHC.RTS.Flags.$fShowCCFlags13_closure:
         const GHC.RTS.Flags.$fShowCCFlags13_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fShowCCFlags13_entry() //  [R1]
         { []
         }
     {offset
       cdeOq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdeOr; else goto cdeOs;
       cdeOr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdeOs: // global
           (_cdeOn::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdeOn::I64 == 0) goto cdeOp; else goto cdeOo;
       cdeOp: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdeOo: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdeOn::I64;
           R2 = GHC.RTS.Flags.$fShowCCFlags14_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowCCFlags13_info" {
     GHC.RTS.Flags.$fShowCCFlags13_info:
         const GHC.RTS.Flags.$fShowCCFlags13_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.321838788 UTC

[section ""cstring" . GHC.RTS.Flags.$fShowCCFlags12_bytes" {
     GHC.RTS.Flags.$fShowCCFlags12_bytes:
         I8[] [67,111,115,116,67,101,110,116,114,101,115,83,117,109,109,97,114,121]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.324033512 UTC

[section ""data" . GHC.RTS.Flags.$fShowCCFlags11_closure" {
     GHC.RTS.Flags.$fShowCCFlags11_closure:
         const GHC.RTS.Flags.$fShowCCFlags11_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fShowCCFlags11_entry() //  [R1]
         { []
         }
     {offset
       cdeOI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdeOJ; else goto cdeOK;
       cdeOJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdeOK: // global
           (_cdeOF::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdeOF::I64 == 0) goto cdeOH; else goto cdeOG;
       cdeOH: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdeOG: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdeOF::I64;
           R2 = GHC.RTS.Flags.$fShowCCFlags12_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowCCFlags11_info" {
     GHC.RTS.Flags.$fShowCCFlags11_info:
         const GHC.RTS.Flags.$fShowCCFlags11_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.32762742 UTC

[section ""cstring" . GHC.RTS.Flags.$fShowCCFlags10_bytes" {
     GHC.RTS.Flags.$fShowCCFlags10_bytes:
         I8[] [67,111,115,116,67,101,110,116,114,101,115,86,101,114,98,111,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.330488869 UTC

[section ""data" . GHC.RTS.Flags.$fShowCCFlags9_closure" {
     GHC.RTS.Flags.$fShowCCFlags9_closure:
         const GHC.RTS.Flags.$fShowCCFlags9_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fShowCCFlags9_entry() //  [R1]
         { []
         }
     {offset
       cdeP0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdeP1; else goto cdeP2;
       cdeP1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdeP2: // global
           (_cdeOX::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdeOX::I64 == 0) goto cdeOZ; else goto cdeOY;
       cdeOZ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdeOY: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdeOX::I64;
           R2 = GHC.RTS.Flags.$fShowCCFlags10_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowCCFlags9_info" {
     GHC.RTS.Flags.$fShowCCFlags9_info:
         const GHC.RTS.Flags.$fShowCCFlags9_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.334109785 UTC

[section ""cstring" . GHC.RTS.Flags.$fShowCCFlags8_bytes" {
     GHC.RTS.Flags.$fShowCCFlags8_bytes:
         I8[] [67,111,115,116,67,101,110,116,114,101,115,65,108,108]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.336319006 UTC

[section ""data" . GHC.RTS.Flags.$fShowCCFlags7_closure" {
     GHC.RTS.Flags.$fShowCCFlags7_closure:
         const GHC.RTS.Flags.$fShowCCFlags7_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fShowCCFlags7_entry() //  [R1]
         { []
         }
     {offset
       cdePi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdePj; else goto cdePk;
       cdePj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdePk: // global
           (_cdePf::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdePf::I64 == 0) goto cdePh; else goto cdePg;
       cdePh: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdePg: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdePf::I64;
           R2 = GHC.RTS.Flags.$fShowCCFlags8_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowCCFlags7_info" {
     GHC.RTS.Flags.$fShowCCFlags7_info:
         const GHC.RTS.Flags.$fShowCCFlags7_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.341322043 UTC

[section ""cstring" . GHC.RTS.Flags.$fShowCCFlags6_bytes" {
     GHC.RTS.Flags.$fShowCCFlags6_bytes:
         I8[] [67,111,115,116,67,101,110,116,114,101,115,74,83,79,78]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.343610618 UTC

[section ""data" . GHC.RTS.Flags.$fShowCCFlags5_closure" {
     GHC.RTS.Flags.$fShowCCFlags5_closure:
         const GHC.RTS.Flags.$fShowCCFlags5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fShowCCFlags5_entry() //  [R1]
         { []
         }
     {offset
       cdePA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdePB; else goto cdePC;
       cdePB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdePC: // global
           (_cdePx::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdePx::I64 == 0) goto cdePz; else goto cdePy;
       cdePz: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdePy: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdePx::I64;
           R2 = GHC.RTS.Flags.$fShowCCFlags6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowCCFlags5_info" {
     GHC.RTS.Flags.$fShowCCFlags5_info:
         const GHC.RTS.Flags.$fShowCCFlags5_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.348486587 UTC

[section ""data" . GHC.RTS.Flags.$w$cshowsPrec1_closure" {
     GHC.RTS.Flags.$w$cshowsPrec1_closure:
         const GHC.RTS.Flags.$w$cshowsPrec1_info;
         const 0;
 },
 GHC.RTS.Flags.$w$cshowsPrec1_entry() //  [R2, R3]
         { []
         }
     {offset
       cdePZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdeQ0; else goto cdeQ1;
       cdeQ0: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.RTS.Flags.$w$cshowsPrec1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdeQ1: // global
           I64[Sp - 16] = block_cdePP_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udeQk; else goto cdePQ;
       udeQk: // global
           call _cdePP(R1) args: 0, res: 0, upd: 0;
       cdePQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$w$cshowsPrec1_info" {
     GHC.RTS.Flags.$w$cshowsPrec1_info:
         const GHC.RTS.Flags.$w$cshowsPrec1_entry;
         const 0;
         const 270582939662;
         const 8589934607;
         const SddB2_srt+424;
 },
 _cdePP() //  [R1]
         { []
         }
     {offset
       cdePP: // global
           _sdcxk::P64 = P64[Sp + 8];
           _cdePY::P64 = R1 & 7;
           if (_cdePY::P64 < 4) goto udeQh; else goto udeQj;
       udeQh: // global
           if (_cdePY::P64 < 3) goto udeQi; else goto cdePV;
       udeQi: // global
           if (_cdePY::P64 < 2) goto cdePT; else goto cdePU;
       cdePT: // global
           R3 = _sdcxk::P64;
           R2 = GHC.RTS.Flags.$fShowCCFlags13_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cdePU: // global
           R3 = _sdcxk::P64;
           R2 = GHC.RTS.Flags.$fShowCCFlags11_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cdePV: // global
           R3 = _sdcxk::P64;
           R2 = GHC.RTS.Flags.$fShowCCFlags9_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       udeQj: // global
           if (_cdePY::P64 < 5) goto cdePW; else goto cdePX;
       cdePW: // global
           R3 = _sdcxk::P64;
           R2 = GHC.RTS.Flags.$fShowCCFlags7_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cdePX: // global
           R3 = _sdcxk::P64;
           R2 = GHC.RTS.Flags.$fShowCCFlags5_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdePP_info" {
     block_cdePP_info:
         const _cdePP;
         const 1;
         const 133143986206;
         const SddB2_srt+432;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.354472636 UTC

[section ""data" . GHC.RTS.Flags.$fShowDoCostCentres_$cshowsPrec_closure" {
     GHC.RTS.Flags.$fShowDoCostCentres_$cshowsPrec_closure:
         const GHC.RTS.Flags.$fShowDoCostCentres_$cshowsPrec_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowDoCostCentres_$cshowsPrec_entry() //  [R3, R4]
         { []
         }
     {offset
       cdeQA: // global
           _sdcxn::P64 = R3;
           R3 = R4;
           R2 = _sdcxn::P64;
           call GHC.RTS.Flags.$w$cshowsPrec1_entry(R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowDoCostCentres_$cshowsPrec_info" {
     GHC.RTS.Flags.$fShowDoCostCentres_$cshowsPrec_info:
         const GHC.RTS.Flags.$fShowDoCostCentres_$cshowsPrec_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const SddB2_srt+424;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.359073451 UTC

[section ""data" . GHC.RTS.Flags.$fShowDoCostCentres_$cshow_closure" {
     GHC.RTS.Flags.$fShowDoCostCentres_$cshow_closure:
         const GHC.RTS.Flags.$fShowDoCostCentres_$cshow_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowDoCostCentres_$cshow_entry() //  [R2]
         { []
         }
     {offset
       cdeQV: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdeQW; else goto cdeQX;
       cdeQW: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.$fShowDoCostCentres_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdeQX: // global
           I64[Sp - 8] = block_cdeQL_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udeRg; else goto cdeQM;
       udeRg: // global
           call _cdeQL(R1) args: 0, res: 0, upd: 0;
       cdeQM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowDoCostCentres_$cshow_info" {
     GHC.RTS.Flags.$fShowDoCostCentres_$cshow_info:
         const GHC.RTS.Flags.$fShowDoCostCentres_$cshow_entry;
         const 0;
         const 270582939662;
         const 4294967301;
         const SddB2_srt+432;
 },
 _cdeQL() //  [R1]
         { []
         }
     {offset
       cdeQL: // global
           _cdeQU::P64 = R1 & 7;
           if (_cdeQU::P64 < 4) goto udeRd; else goto udeRf;
       udeRd: // global
           if (_cdeQU::P64 < 3) goto udeRe; else goto cdeQR;
       udeRe: // global
           if (_cdeQU::P64 < 2) goto cdeQP; else goto cdeQQ;
       cdeQP: // global
           R1 = GHC.RTS.Flags.$fShowCCFlags13_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cdeQQ: // global
           R1 = GHC.RTS.Flags.$fShowCCFlags11_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cdeQR: // global
           R1 = GHC.RTS.Flags.$fShowCCFlags9_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       udeRf: // global
           if (_cdeQU::P64 < 5) goto cdeQS; else goto cdeQT;
       cdeQS: // global
           R1 = GHC.RTS.Flags.$fShowCCFlags7_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cdeQT: // global
           R1 = GHC.RTS.Flags.$fShowCCFlags5_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdeQL_info" {
     block_cdeQL_info:
         const _cdeQL;
         const 0;
         const 133143986206;
         const SddB2_srt+432;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.364892469 UTC

[section ""data" . GHC.RTS.Flags.$fShowDoCostCentres_$cshowList_closure" {
     GHC.RTS.Flags.$fShowDoCostCentres_$cshowList_closure:
         const GHC.RTS.Flags.$fShowDoCostCentres_$cshowList_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowDoCostCentres_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       cdeRB: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.RTS.Flags.$w$cshowsPrec1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowDoCostCentres_$cshowList_info" {
     GHC.RTS.Flags.$fShowDoCostCentres_$cshowList_info:
         const GHC.RTS.Flags.$fShowDoCostCentres_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const SddB2_srt+424;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.368280772 UTC

[section ""data" . GHC.RTS.Flags.$fShowDoCostCentres_closure" {
     GHC.RTS.Flags.$fShowDoCostCentres_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.RTS.Flags.$fShowDoCostCentres_$cshowsPrec_closure+3;
         const GHC.RTS.Flags.$fShowDoCostCentres_$cshow_closure+1;
         const GHC.RTS.Flags.$fShowDoCostCentres_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.370021877 UTC

[section ""cstring" . GHC.RTS.Flags.$fShowCCFlags16_bytes" {
     GHC.RTS.Flags.$fShowCCFlags16_bytes:
         I8[] [67,67,70,108,97,103,115,32,123]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.371719697 UTC

[section ""cstring" . GHC.RTS.Flags.$fShowCCFlags15_bytes" {
     GHC.RTS.Flags.$fShowCCFlags15_bytes:
         I8[] [100,111,67,111,115,116,67,101,110,116,114,101,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.374087501 UTC

[section ""cstring" . GHC.RTS.Flags.$fShowCCFlags4_bytes" {
     GHC.RTS.Flags.$fShowCCFlags4_bytes:
         I8[] [112,114,111,102,105,108,101,114,84,105,99,107,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.375801123 UTC

[section ""cstring" . GHC.RTS.Flags.$fShowCCFlags3_bytes" {
     GHC.RTS.Flags.$fShowCCFlags3_bytes:
         I8[] [109,115,101,99,115,80,101,114,84,105,99,107,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.386264215 UTC

[section ""data" . GHC.RTS.Flags.$w$cshowsPrec_closure" {
     GHC.RTS.Flags.$w$cshowsPrec_closure:
         const GHC.RTS.Flags.$w$cshowsPrec_info;
         const 0;
 },
 GHC.RTS.Flags.$w$cshowsPrec_slow() //  [R1]
         { []
         }
     {offset
       cdeRO: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.RTS.Flags.$w$cshowsPrec_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2,
                                                  R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_sdcxE_entry() //  [R1]
         { []
         }
     {offset
       cdeSH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdeSI; else goto cdeSJ;
       cdeSI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdeSJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.RTS.Flags.$fShowCCFlags2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcxE_info" {
     sat_sdcxE_info:
         const sat_sdcxE_entry;
         const 1;
         const 16;
 },
 sat_sdcxI_entry() //  [R1]
         { []
         }
     {offset
       cdeSK: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdeSO; else goto cdeSP;
       cdeSO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdeSP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cdeSy_info;
           _sdcxz::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _sdcxz::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udeSW; else goto cdeSz;
       udeSW: // global
           call _cdeSy(R1) args: 0, res: 0, upd: 0;
       cdeSz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcxI_info" {
     sat_sdcxI_info:
         const sat_sdcxI_entry;
         const 2;
         const 18;
 },
 _cdeSy() //  [R1]
         { []
         }
     {offset
       cdeSy: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdeSS; else goto cdeSR;
       cdeSS: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdeSR: // global
           _sdcxD::I64 = I64[R1 + 7];
           I64[Hp - 16] = sat_sdcxE_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_cdeSL_info;
           R4 = Hp - 16;
           R3 = _sdcxD::I64;
           R2 = 0;
           Sp = Sp + 8;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cdeSy_info" {
     block_cdeSy_info:
         const _cdeSy;
         const 1;
         const 30;
 },
 _cdeSL() //  [R1, R2]
         { []
         }
     {offset
       cdeSL: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdeSV; else goto cdeSU;
       cdeSV: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cdeSU: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdeSL_info" {
     block_cdeSL_info:
         const _cdeSL;
         const 0;
         const 30;
 },
 sat_sdcxJ_entry() //  [R1]
         { []
         }
     {offset
       cdeSX: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdeT1; else goto cdeT0;
       cdeT1: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdeT0: // global
           _sdcxw::P64 = P64[R1 + 16];
           _sdcxz::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_sdcxI_info;
           P64[Hp - 8] = _sdcxw::P64;
           P64[Hp] = _sdcxz::P64;
           R3 = Hp - 24;
           R2 = GHC.RTS.Flags.$fShowCCFlags3_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcxJ_info" {
     sat_sdcxJ_info:
         const sat_sdcxJ_entry;
         const 2;
         const 18;
 },
 sat_sdcxK_entry() //  [R1]
         { []
         }
     {offset
       cdeT2: // global
           _sdcxK::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdeT3; else goto cdeT4;
       cdeT4: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdeT6; else goto cdeT5;
       cdeT6: // global
           HpAlloc = 32;
           goto cdeT3;
       cdeT3: // global
           R1 = _sdcxK::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdeT5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcxK::P64;
           _sdcxw::P64 = P64[_sdcxK::P64 + 16];
           _sdcxz::P64 = P64[_sdcxK::P64 + 24];
           I64[Hp - 24] = sat_sdcxJ_info;
           P64[Hp - 8] = _sdcxw::P64;
           P64[Hp] = _sdcxz::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcxK_info" {
     sat_sdcxK_info:
         const sat_sdcxK_entry;
         const 2;
         const 4294967314;
         const SddB2_srt+480;
 },
 sat_sdcxO_entry() //  [R1]
         { []
         }
     {offset
       cdeT7: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdeTb; else goto cdeTc;
       cdeTb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdeTc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cdeSh_info;
           _sdcxw::P64 = P64[R1 + 24];
           _sdcxz::P64 = P64[R1 + 32];
           R1 = P64[R1 + 16];
           P64[Sp - 32] = _sdcxw::P64;
           P64[Sp - 24] = _sdcxz::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto udeTj; else goto cdeSi;
       udeTj: // global
           call _cdeSh(R1) args: 0, res: 0, upd: 0;
       cdeSi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcxO_info" {
     sat_sdcxO_info:
         const sat_sdcxO_entry;
         const 3;
         const 4294967311;
         const SddB2_srt+480;
 },
 _cdeSh() //  [R1]
         { []
         }
     {offset
       cdeSh: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdeTf; else goto cdeTe;
       cdeTf: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdeTe: // global
           _sdcxB::I64 = I64[R1 + 7];
           I64[Hp - 24] = sat_sdcxK_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_cdeT8_info;
           R4 = Hp - 24;
           R3 = _sdcxB::I64;
           R2 = 0;
           Sp = Sp + 16;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cdeSh_info" {
     block_cdeSh_info:
         const _cdeSh;
         const 2;
         const 4294967326;
         const SddB2_srt+480;
 },
 _cdeT8() //  [R1, R2]
         { []
         }
     {offset
       cdeT8: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdeTi; else goto cdeTh;
       cdeTi: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cdeTh: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdeT8_info" {
     block_cdeT8_info:
         const _cdeT8;
         const 0;
         const 30;
 },
 sat_sdcxP_entry() //  [R1]
         { []
         }
     {offset
       cdeTk: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdeTo; else goto cdeTn;
       cdeTo: // global
           HpAlloc = 40;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdeTn: // global
           _sdcxv::P64 = P64[R1 + 16];
           _sdcxw::P64 = P64[R1 + 24];
           _sdcxz::P64 = P64[R1 + 32];
           I64[Hp - 32] = sat_sdcxO_info;
           P64[Hp - 16] = _sdcxv::P64;
           P64[Hp - 8] = _sdcxw::P64;
           P64[Hp] = _sdcxz::P64;
           R3 = Hp - 32;
           R2 = GHC.RTS.Flags.$fShowCCFlags4_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcxP_info" {
     sat_sdcxP_info:
         const sat_sdcxP_entry;
         const 3;
         const 4294967311;
         const SddB2_srt+480;
 },
 sat_sdcxQ_entry() //  [R1]
         { []
         }
     {offset
       cdeTp: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdeTt; else goto cdeTs;
       cdeTt: // global
           HpAlloc = 40;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdeTs: // global
           _sdcxv::P64 = P64[R1 + 16];
           _sdcxw::P64 = P64[R1 + 24];
           _sdcxz::P64 = P64[R1 + 32];
           I64[Hp - 32] = sat_sdcxP_info;
           P64[Hp - 16] = _sdcxv::P64;
           P64[Hp - 8] = _sdcxw::P64;
           P64[Hp] = _sdcxz::P64;
           R3 = Hp - 32;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcxQ_info" {
     sat_sdcxQ_info:
         const sat_sdcxQ_entry;
         const 3;
         const 4294967311;
         const SddB2_srt+480;
 },
 sat_sdcxR_entry() //  [R1]
         { []
         }
     {offset
       cdeTu: // global
           _sdcxR::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdeTv; else goto cdeTw;
       cdeTw: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdeTy; else goto cdeTx;
       cdeTy: // global
           HpAlloc = 40;
           goto cdeTv;
       cdeTv: // global
           R1 = _sdcxR::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdeTx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcxR::P64;
           _sdcxu::P64 = P64[_sdcxR::P64 + 16];
           _sdcxv::P64 = P64[_sdcxR::P64 + 24];
           _sdcxw::P64 = P64[_sdcxR::P64 + 32];
           _sdcxz::P64 = P64[_sdcxR::P64 + 40];
           I64[Hp - 32] = sat_sdcxQ_info;
           P64[Hp - 16] = _sdcxv::P64;
           P64[Hp - 8] = _sdcxw::P64;
           P64[Hp] = _sdcxz::P64;
           R3 = Hp - 32;
           R2 = _sdcxu::P64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$cshowsPrec1_entry(R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcxR_info" {
     sat_sdcxR_info:
         const sat_sdcxR_entry;
         const 4;
         const 554050781199;
         const SddB2_srt+424;
 },
 sat_sdcxS_entry() //  [R1]
         { []
         }
     {offset
       cdeTz: // global
           _sdcxS::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdeTA; else goto cdeTB;
       cdeTB: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdeTD; else goto cdeTC;
       cdeTD: // global
           HpAlloc = 48;
           goto cdeTA;
       cdeTA: // global
           R1 = _sdcxS::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdeTC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcxS::P64;
           _sdcxu::P64 = P64[_sdcxS::P64 + 16];
           _sdcxv::P64 = P64[_sdcxS::P64 + 24];
           _sdcxw::P64 = P64[_sdcxS::P64 + 32];
           _sdcxz::P64 = P64[_sdcxS::P64 + 40];
           I64[Hp - 40] = sat_sdcxR_info;
           P64[Hp - 24] = _sdcxu::P64;
           P64[Hp - 16] = _sdcxv::P64;
           P64[Hp - 8] = _sdcxw::P64;
           P64[Hp] = _sdcxz::P64;
           R3 = Hp - 40;
           R2 = GHC.RTS.Flags.$fShowCCFlags15_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcxS_info" {
     sat_sdcxS_info:
         const sat_sdcxS_entry;
         const 4;
         const 554050781199;
         const SddB2_srt+424;
 },
 p_sdcxy_entry() //  [R1, R2]
         { []
         }
     {offset
       cdeTE: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdeTI; else goto cdeTH;
       cdeTI: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdeTH: // global
           _sdcxu::P64 = P64[R1 + 7];
           _sdcxv::P64 = P64[R1 + 15];
           _sdcxw::P64 = P64[R1 + 23];
           I64[Hp - 40] = sat_sdcxS_info;
           P64[Hp - 24] = _sdcxu::P64;
           P64[Hp - 16] = _sdcxv::P64;
           P64[Hp - 8] = _sdcxw::P64;
           P64[Hp] = R2;
           R3 = Hp - 40;
           R2 = GHC.RTS.Flags.$fShowCCFlags16_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . p_sdcxy_info" {
     p_sdcxy_info:
         const p_sdcxy_entry;
         const 3;
         const 554050781192;
         const 4294967301;
         const SddB2_srt+424;
 },
 sat_sdcxV_entry() //  [R1]
         { []
         }
     {offset
       cdeTS: // global
           _sdcxV::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdeTT; else goto cdeTU;
       cdeTU: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdeTW; else goto cdeTV;
       cdeTW: // global
           HpAlloc = 24;
           goto cdeTT;
       cdeTT: // global
           R1 = _sdcxV::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdeTV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcxV::P64;
           _sdcxx::P64 = P64[_sdcxV::P64 + 16];
           _sdcxy::P64 = P64[_sdcxV::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _sdcxx::P64;
           R2 = Hp - 14;
           R1 = _sdcxy::P64;
           Sp = Sp - 16;
           call p_sdcxy_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcxV_info" {
     sat_sdcxV_info:
         const sat_sdcxV_entry;
         const 2;
         const 554050781202;
         const SddB2_srt+424;
 },
 GHC.RTS.Flags.$w$cshowsPrec_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cdeU0: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdeU4; else goto cdeU3;
       cdeU4: // global
           HpAlloc = 88;
           R1 = GHC.RTS.Flags.$w$cshowsPrec_closure;
           I64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 48, res: 0, upd: 8;
       cdeU3: // global
           I64[Hp - 80] = p_sdcxy_info;
           P64[Hp - 72] = R3;
           P64[Hp - 64] = R4;
           P64[Hp - 56] = R5;
           _cdeRS::P64 = Hp - 79;
           if (%MO_S_Lt_W64(R2, 11)) goto cdeTY; else goto cdeTZ;
       cdeTY: // global
           Hp = Hp - 56;
           R2 = R6;
           R1 = _cdeRS::P64;
           call p_sdcxy_entry(R2, R1) args: 8, res: 0, upd: 8;
       cdeTZ: // global
           I64[Hp - 48] = sat_sdcxV_info;
           P64[Hp - 32] = R6;
           P64[Hp - 24] = _cdeRS::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$w$cshowsPrec_info" {
     GHC.RTS.Flags.$w$cshowsPrec_info:
         const GHC.RTS.Flags.$w$cshowsPrec_entry;
         const 0;
         const 1653562408974;
         const 21474836480;
         const SddB2_srt+424;
         const 69;
         const GHC.RTS.Flags.$w$cshowsPrec_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.420720581 UTC

[section ""data" . GHC.RTS.Flags.$fShowCCFlags_$cshowsPrec_closure" {
     GHC.RTS.Flags.$fShowCCFlags_$cshowsPrec_closure:
         const GHC.RTS.Flags.$fShowCCFlags_$cshowsPrec_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowCCFlags_$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdeVK: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdeVO; else goto cdeVP;
       cdeVO: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fShowCCFlags_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdeVP: // global
           I64[Sp - 24] = block_cdeVH_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udeVX; else goto cdeVI;
       udeVX: // global
           call _cdeVH(R1) args: 0, res: 0, upd: 0;
       cdeVI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowCCFlags_$cshowsPrec_info" {
     GHC.RTS.Flags.$fShowCCFlags_$cshowsPrec_info:
         const GHC.RTS.Flags.$fShowCCFlags_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const SddB2_srt+488;
 },
 _cdeVH() //  [R1]
         { []
         }
     {offset
       cdeVH: // global
           I64[Sp] = block_cdeVN_info;
           _sdcy0::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _sdcy0::I64;
           if (R1 & 7 != 0) goto udeVW; else goto cdeVR;
       udeVW: // global
           call _cdeVN(R1) args: 0, res: 0, upd: 0;
       cdeVR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdeVH_info" {
     block_cdeVH_info:
         const _cdeVH;
         const 2;
         const 4294967326;
         const SddB2_srt+488;
 },
 _cdeVN() //  [R1]
         { []
         }
     {offset
       cdeVN: // global
           R6 = P64[Sp + 16];
           R5 = P64[R1 + 23];
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = I64[Sp + 8];
           Sp = Sp + 24;
           call GHC.RTS.Flags.$w$cshowsPrec_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdeVN_info" {
     block_cdeVN_info:
         const _cdeVN;
         const 66;
         const 4294967326;
         const SddB2_srt+488;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.427852415 UTC

[section ""data" . GHC.RTS.Flags.$fShowCCFlags17_closure" {
     GHC.RTS.Flags.$fShowCCFlags17_closure:
         const GHC.RTS.Flags.$fShowCCFlags17_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fShowCCFlags17_entry() //  [R1]
         { []
         }
     {offset
       cdeWj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdeWk; else goto cdeWl;
       cdeWk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdeWl: // global
           (_cdeWg::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdeWg::I64 == 0) goto cdeWi; else goto cdeWh;
       cdeWi: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdeWh: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdeWg::I64;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.RTS.Flags.$fShowCCFlags2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowCCFlags17_info" {
     GHC.RTS.Flags.$fShowCCFlags17_info:
         const GHC.RTS.Flags.$fShowCCFlags17_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.437182511 UTC

[section ""data" . GHC.RTS.Flags.$w$cshow_closure" {
     GHC.RTS.Flags.$w$cshow_closure:
         const GHC.RTS.Flags.$w$cshow_info;
         const 0;
 },
 sat_sdcyf_entry() //  [R1]
         { []
         }
     {offset
       cdeXd: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdeXj; else goto cdeXk;
       cdeXj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdeXk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cdeXa_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udeXp; else goto cdeXb;
       udeXp: // global
           call _cdeXa(R1) args: 0, res: 0, upd: 0;
       cdeXb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcyf_info" {
     sat_sdcyf_info:
         const sat_sdcyf_entry;
         const 1;
         const 4294967312;
         const SddB2_srt+504;
 },
 _cdeXa() //  [R1]
         { []
         }
     {offset
       cdeXa: // global
           I64[Sp] = block_cdeXg_info;
           R4 = GHC.RTS.Flags.$fShowCCFlags17_closure;
           R3 = I64[R1 + 7];
           R2 = 0;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cdeXa_info" {
     block_cdeXa_info:
         const _cdeXa;
         const 0;
         const 4294967326;
         const SddB2_srt+504;
 },
 _cdeXg() //  [R1, R2]
         { []
         }
     {offset
       cdeXg: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdeXo; else goto cdeXn;
       cdeXo: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cdeXn: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdeXg_info" {
     block_cdeXg_info:
         const _cdeXg;
         const 0;
         const 30;
 },
 sat_sdcyg_entry() //  [R1]
         { []
         }
     {offset
       cdeXq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdeXu; else goto cdeXt;
       cdeXu: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdeXt: // global
           _sdcy7::P64 = P64[R1 + 16];
           I64[Hp - 16] = sat_sdcyf_info;
           P64[Hp] = _sdcy7::P64;
           R3 = Hp - 16;
           R2 = GHC.RTS.Flags.$fShowCCFlags3_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcyg_info" {
     sat_sdcyg_info:
         const sat_sdcyg_entry;
         const 1;
         const 4294967312;
         const SddB2_srt+504;
 },
 sat_sdcyh_entry() //  [R1]
         { []
         }
     {offset
       cdeXv: // global
           _sdcyh::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdeXw; else goto cdeXx;
       cdeXx: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdeXz; else goto cdeXy;
       cdeXz: // global
           HpAlloc = 24;
           goto cdeXw;
       cdeXw: // global
           R1 = _sdcyh::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdeXy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcyh::P64;
           _sdcy7::P64 = P64[_sdcyh::P64 + 16];
           I64[Hp - 16] = sat_sdcyg_info;
           P64[Hp] = _sdcy7::P64;
           R3 = Hp - 16;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcyh_info" {
     sat_sdcyh_info:
         const sat_sdcyh_entry;
         const 1;
         const 38654705680;
         const SddB2_srt+480;
 },
 sat_sdcyl_entry() //  [R1]
         { []
         }
     {offset
       cdeXA: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdeXE; else goto cdeXF;
       cdeXE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdeXF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cdeWT_info;
           _sdcy7::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _sdcy7::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udeXM; else goto cdeWU;
       udeXM: // global
           call _cdeWT(R1) args: 0, res: 0, upd: 0;
       cdeWU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcyl_info" {
     sat_sdcyl_info:
         const sat_sdcyl_entry;
         const 2;
         const 38654705682;
         const SddB2_srt+480;
 },
 _cdeWT() //  [R1]
         { []
         }
     {offset
       cdeWT: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdeXI; else goto cdeXH;
       cdeXI: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdeXH: // global
           _sdcy9::I64 = I64[R1 + 7];
           I64[Hp - 16] = sat_sdcyh_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_cdeXB_info;
           R4 = Hp - 16;
           R3 = _sdcy9::I64;
           R2 = 0;
           Sp = Sp + 8;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cdeWT_info" {
     block_cdeWT_info:
         const _cdeWT;
         const 1;
         const 38654705694;
         const SddB2_srt+480;
 },
 _cdeXB() //  [R1, R2]
         { []
         }
     {offset
       cdeXB: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdeXL; else goto cdeXK;
       cdeXL: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cdeXK: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdeXB_info" {
     block_cdeXB_info:
         const _cdeXB;
         const 0;
         const 30;
 },
 sat_sdcym_entry() //  [R1]
         { []
         }
     {offset
       cdeXN: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdeXR; else goto cdeXQ;
       cdeXR: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdeXQ: // global
           _sdcy6::P64 = P64[R1 + 16];
           _sdcy7::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_sdcyl_info;
           P64[Hp - 8] = _sdcy6::P64;
           P64[Hp] = _sdcy7::P64;
           R3 = Hp - 24;
           R2 = GHC.RTS.Flags.$fShowCCFlags4_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcym_info" {
     sat_sdcym_info:
         const sat_sdcym_entry;
         const 2;
         const 38654705682;
         const SddB2_srt+480;
 },
 sat_sdcyn_entry() //  [R1]
         { []
         }
     {offset
       cdeXS: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdeXW; else goto cdeXV;
       cdeXW: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdeXV: // global
           _sdcy6::P64 = P64[R1 + 16];
           _sdcy7::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_sdcym_info;
           P64[Hp - 8] = _sdcy6::P64;
           P64[Hp] = _sdcy7::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcyn_info" {
     sat_sdcyn_info:
         const sat_sdcyn_entry;
         const 2;
         const 38654705682;
         const SddB2_srt+480;
 },
 sat_sdcyo_entry() //  [R1]
         { []
         }
     {offset
       cdeXX: // global
           _sdcyo::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdeXY; else goto cdeXZ;
       cdeXZ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdeY1; else goto cdeY0;
       cdeY1: // global
           HpAlloc = 32;
           goto cdeXY;
       cdeXY: // global
           R1 = _sdcyo::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdeY0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcyo::P64;
           _sdcy5::P64 = P64[_sdcyo::P64 + 16];
           _sdcy6::P64 = P64[_sdcyo::P64 + 24];
           _sdcy7::P64 = P64[_sdcyo::P64 + 32];
           I64[Hp - 24] = sat_sdcyn_info;
           P64[Hp - 8] = _sdcy6::P64;
           P64[Hp] = _sdcy7::P64;
           R3 = Hp - 24;
           R2 = _sdcy5::P64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$cshowsPrec1_entry(R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcyo_info" {
     sat_sdcyo_info:
         const sat_sdcyo_entry;
         const 3;
         const 4952097292303;
         const SddB2_srt+424;
 },
 sat_sdcyp_entry() //  [R1]
         { []
         }
     {offset
       cdeY2: // global
           _sdcyp::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdeY3; else goto cdeY4;
       cdeY4: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdeY6; else goto cdeY5;
       cdeY6: // global
           HpAlloc = 40;
           goto cdeY3;
       cdeY3: // global
           R1 = _sdcyp::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdeY5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcyp::P64;
           _sdcy5::P64 = P64[_sdcyp::P64 + 16];
           _sdcy6::P64 = P64[_sdcyp::P64 + 24];
           _sdcy7::P64 = P64[_sdcyp::P64 + 32];
           I64[Hp - 32] = sat_sdcyo_info;
           P64[Hp - 16] = _sdcy5::P64;
           P64[Hp - 8] = _sdcy6::P64;
           P64[Hp] = _sdcy7::P64;
           R3 = Hp - 32;
           R2 = GHC.RTS.Flags.$fShowCCFlags15_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcyp_info" {
     sat_sdcyp_info:
         const sat_sdcyp_entry;
         const 3;
         const 4952097292303;
         const SddB2_srt+424;
 },
 GHC.RTS.Flags.$w$cshow_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdeY7: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdeYb; else goto cdeYa;
       cdeYb: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.RTS.Flags.$w$cshow_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdeYa: // global
           I64[Hp - 32] = sat_sdcyp_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R3 = Hp - 32;
           R2 = GHC.RTS.Flags.$fShowCCFlags16_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$w$cshow_info" {
     GHC.RTS.Flags.$w$cshow_info:
         const GHC.RTS.Flags.$w$cshow_entry;
         const 0;
         const 13748190314510;
         const 12884901911;
         const SddB2_srt+424;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.464067855 UTC

[section ""data" . GHC.RTS.Flags.$fShowCCFlags_$cshow_closure" {
     GHC.RTS.Flags.$fShowCCFlags_$cshow_closure:
         const GHC.RTS.Flags.$fShowCCFlags_$cshow_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowCCFlags_$cshow_entry() //  [R2]
         { []
         }
     {offset
       cdeZq: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdeZr; else goto cdeZs;
       cdeZr: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.$fShowCCFlags_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdeZs: // global
           I64[Sp - 8] = block_cdeZn_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udeZw; else goto cdeZo;
       udeZw: // global
           call _cdeZn(R1) args: 0, res: 0, upd: 0;
       cdeZo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowCCFlags_$cshow_info" {
     GHC.RTS.Flags.$fShowCCFlags_$cshow_info:
         const GHC.RTS.Flags.$fShowCCFlags_$cshow_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SddB2_srt+512;
 },
 _cdeZn() //  [R1]
         { []
         }
     {offset
       cdeZn: // global
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.RTS.Flags.$w$cshow_entry(R4,
                                             R3,
                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdeZn_info" {
     block_cdeZn_info:
         const _cdeZn;
         const 0;
         const 4294967326;
         const SddB2_srt+512;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.470187641 UTC

[section ""data" . GHC.RTS.Flags.$fShowCCFlags1_closure" {
     GHC.RTS.Flags.$fShowCCFlags1_closure:
         const GHC.RTS.Flags.$fShowCCFlags1_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowCCFlags1_entry() //  [R2, R3]
         { []
         }
     {offset
       cdeZO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdeZP; else goto cdeZQ;
       cdeZP: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fShowCCFlags1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdeZQ: // global
           I64[Sp - 16] = block_cdeZL_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udeZU; else goto cdeZM;
       udeZU: // global
           call _cdeZL(R1) args: 0, res: 0, upd: 0;
       cdeZM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowCCFlags1_info" {
     GHC.RTS.Flags.$fShowCCFlags1_info:
         const GHC.RTS.Flags.$fShowCCFlags1_entry;
         const 0;
         const 141733920782;
         const 8589934607;
         const SddB2_srt+488;
 },
 _cdeZL() //  [R1]
         { []
         }
     {offset
       cdeZL: // global
           R6 = P64[Sp + 8];
           R5 = P64[R1 + 23];
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = 0;
           Sp = Sp + 16;
           call GHC.RTS.Flags.$w$cshowsPrec_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdeZL_info" {
     block_cdeZL_info:
         const _cdeZL;
         const 1;
         const 4294967326;
         const SddB2_srt+488;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.475480296 UTC

[section ""data" . GHC.RTS.Flags.$fShowCCFlags_$cshowList_closure" {
     GHC.RTS.Flags.$fShowCCFlags_$cshowList_closure:
         const GHC.RTS.Flags.$fShowCCFlags_$cshowList_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowCCFlags_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       cdf09: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.RTS.Flags.$fShowCCFlags1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowCCFlags_$cshowList_info" {
     GHC.RTS.Flags.$fShowCCFlags_$cshowList_info:
         const GHC.RTS.Flags.$fShowCCFlags_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const SddB2_srt+528;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.478770373 UTC

[section ""data" . GHC.RTS.Flags.$fShowCCFlags_closure" {
     GHC.RTS.Flags.$fShowCCFlags_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.RTS.Flags.$fShowCCFlags_$cshowsPrec_closure+3;
         const GHC.RTS.Flags.$fShowCCFlags_$cshow_closure+1;
         const GHC.RTS.Flags.$fShowCCFlags_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.480519931 UTC

[section ""cstring" . f4_rcV5D_bytes" {
     f4_rcV5D_bytes:
         I8[] [68,101,98,117,103,70,108,97,103,115,32,123]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.482880152 UTC

[section ""data" . f5_rcV5E_closure" {
     f5_rcV5E_closure:
         const f5_rcV5E_info;
         const 0;
         const 0;
         const 0;
 },
 f5_rcV5E_entry() //  [R1]
         { []
         }
     {offset
       cdf0o: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdf0p; else goto cdf0q;
       cdf0p: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdf0q: // global
           (_cdf0l::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdf0l::I64 == 0) goto cdf0n; else goto cdf0m;
       cdf0n: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdf0m: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdf0l::I64;
           R2 = f4_rcV5D_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f5_rcV5E_info" {
     f5_rcV5E_info:
         const f5_rcV5E_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.486666968 UTC

[section ""cstring" . lvl36_rcV5F_bytes" {
     lvl36_rcV5F_bytes:
         I8[] [115,99,104,101,100,117,108,101,114,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.488319672 UTC

[section ""cstring" . lvl37_rcV5G_bytes" {
     lvl37_rcV5G_bytes:
         I8[] [105,110,116,101,114,112,114,101,116,101,114,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.489971536 UTC

[section ""cstring" . lvl38_rcV5H_bytes" {
     lvl38_rcV5H_bytes:
         I8[] [119,101,97,107,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.49223138 UTC

[section ""cstring" . lvl39_rcV5I_bytes" {
     lvl39_rcV5I_bytes:
         I8[] [103,99,99,97,102,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.494004097 UTC

[section ""cstring" . lvl40_rcV5J_bytes" {
     lvl40_rcV5J_bytes:
         I8[] [103,99,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.495662706 UTC

[section ""cstring" . lvl41_rcV5K_bytes" {
     lvl41_rcV5K_bytes:
         I8[] [98,108,111,99,107,95,97,108,108,111,99,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.497268785 UTC

[section ""cstring" . lvl42_rcV5L_bytes" {
     lvl42_rcV5L_bytes:
         I8[] [115,97,110,105,116,121,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.498898121 UTC

[section ""cstring" . lvl43_rcV5M_bytes" {
     lvl43_rcV5M_bytes:
         I8[] [115,116,97,98,108,101,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.500406435 UTC

[section ""cstring" . lvl44_rcV5N_bytes" {
     lvl44_rcV5N_bytes:
         I8[] [112,114,111,102,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.50201485 UTC

[section ""cstring" . lvl45_rcV5O_bytes" {
     lvl45_rcV5O_bytes:
         I8[] [108,105,110,107,101,114,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.503664848 UTC

[section ""cstring" . lvl46_rcV5P_bytes" {
     lvl46_rcV5P_bytes:
         I8[] [97,112,112,108,121,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.50531404 UTC

[section ""cstring" . lvl47_rcV5Q_bytes" {
     lvl47_rcV5Q_bytes:
         I8[] [115,116,109,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.506937536 UTC

[section ""cstring" . lvl48_rcV5R_bytes" {
     lvl48_rcV5R_bytes:
         I8[] [115,113,117,101,101,122,101,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.50848975 UTC

[section ""cstring" . lvl49_rcV5S_bytes" {
     lvl49_rcV5S_bytes:
         I8[] [104,112,99,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.510546734 UTC

[section ""cstring" . lvl50_rcV5T_bytes" {
     lvl50_rcV5T_bytes:
         I8[] [115,112,97,114,107,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.565471937 UTC

[section ""data" . GHC.RTS.Flags.$fShowDebugFlags_$cshowsPrec_closure" {
     GHC.RTS.Flags.$fShowDebugFlags_$cshowsPrec_closure:
         const GHC.RTS.Flags.$fShowDebugFlags_$cshowsPrec_info;
         const 0;
 },
 sat_sdczf_entry() //  [R1]
         { []
         }
     {offset
       cdf4c: // global
           R3 = P64[R1 + 16];
           R2 = g_rcV52_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdczf_info" {
     sat_sdczf_info:
         const sat_sdczf_entry;
         const 1;
         const 4294967312;
         const SddB2_srt+536;
 },
 sat_sdczg_entry() //  [R1]
         { []
         }
     {offset
       cdf4l: // global
           R3 = P64[R1 + 16];
           R2 = g_rcV52_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdczg_info" {
     sat_sdczg_info:
         const sat_sdczg_entry;
         const 1;
         const 4294967312;
         const SddB2_srt+536;
 },
 section ""relreadonly" . udffi_srtd" {
     udffi_srtd:
         const SddB2_srt+128;
         const 52;
         const 2251799813685251;
 },
 sat_sdczh_entry() //  [R1]
         { []
         }
     {offset
       cdf4s: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdf4t; else goto cdf4u;
       cdf4t: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdf4u: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cdf43_info;
           _sdcyZ::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _sdcyZ::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udf4B; else goto cdf44;
       udf4B: // global
           call _cdf43(R1) args: 0, res: 0, upd: 0;
       cdf44: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdczh_info" {
     sat_sdczh_info:
         const sat_sdczh_entry;
         const 2;
         const 18446744069414584338;
         const udffi_srtd;
 },
 section ""relreadonly" . udffj_srtd" {
     udffj_srtd:
         const SddB2_srt+128;
         const 52;
         const 2251799813685251;
 },
 _cdf43() //  [R1]
         { []
         }
     {offset
       cdf43: // global
           _sdcyZ::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cdf4p; else goto cdf4q;
       cdf4p: // global
           Hp = Hp + 24;
           _sdcze::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cdf4A; else goto cdf4w;
       cdf4w: // global
           I64[Hp - 16] = sat_sdczf_info;
           P64[Hp] = _sdcyZ::P64;
           R3 = Hp - 16;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cdf4q: // global
           Hp = Hp + 24;
           _sdcze::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cdf4A; else goto cdf4z;
       cdf4A: // global
           HpAlloc = 24;
           R1 = _sdcze::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdf4z: // global
           I64[Hp - 16] = sat_sdczg_info;
           P64[Hp] = _sdcyZ::P64;
           R3 = Hp - 16;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdf43_info" {
     block_cdf43_info:
         const _cdf43;
         const 1;
         const 18446744069414584350;
         const udffj_srtd;
 },
 section ""relreadonly" . udffk_srtd" {
     udffk_srtd:
         const SddB2_srt+128;
         const 52;
         const 2251799813685251;
 },
 sat_sdczi_entry() //  [R1]
         { []
         }
     {offset
       cdf4C: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdf4G; else goto cdf4F;
       cdf4G: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdf4F: // global
           _sdcyV::P64 = P64[R1 + 16];
           _sdcyZ::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_sdczh_info;
           P64[Hp - 8] = _sdcyV::P64;
           P64[Hp] = _sdcyZ::P64;
           R3 = Hp - 24;
           R2 = lvl50_rcV5T_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdczi_info" {
     sat_sdczi_info:
         const sat_sdczi_entry;
         const 2;
         const 18446744069414584338;
         const udffk_srtd;
 },
 section ""relreadonly" . udffl_srtd" {
     udffl_srtd:
         const SddB2_srt+128;
         const 52;
         const 2269391999729667;
 },
 sat_sdczj_entry() //  [R1]
         { []
         }
     {offset
       cdf4H: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdf4L; else goto cdf4K;
       cdf4L: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdf4K: // global
           _sdcyV::P64 = P64[R1 + 16];
           _sdcyZ::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_sdczi_info;
           P64[Hp - 8] = _sdcyV::P64;
           P64[Hp] = _sdcyZ::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdczj_info" {
     sat_sdczj_info:
         const sat_sdczj_entry;
         const 2;
         const 18446744069414584338;
         const udffl_srtd;
 },
 sat_sdczl_entry() //  [R1]
         { []
         }
     {offset
       cdf59: // global
           R3 = P64[R1 + 16];
           R2 = g_rcV52_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdczl_info" {
     sat_sdczl_info:
         const sat_sdczl_entry;
         const 1;
         const 4294967312;
         const SddB2_srt+536;
 },
 sat_sdczm_entry() //  [R1]
         { []
         }
     {offset
       cdf5i: // global
           R3 = P64[R1 + 16];
           R2 = g_rcV52_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdczm_info" {
     sat_sdczm_info:
         const sat_sdczm_entry;
         const 1;
         const 4294967312;
         const SddB2_srt+536;
 },
 section ""relreadonly" . udffm_srtd" {
     udffm_srtd:
         const SddB2_srt+128;
         const 52;
         const 2251799813685251;
 },
 sat_sdczn_entry() //  [R1]
         { []
         }
     {offset
       cdf5p: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdf5q; else goto cdf5r;
       cdf5q: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdf5r: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cdf50_info;
           _sdcyZ::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _sdcyZ::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udf5y; else goto cdf51;
       udf5y: // global
           call _cdf50(R1) args: 0, res: 0, upd: 0;
       cdf51: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdczn_info" {
     sat_sdczn_info:
         const sat_sdczn_entry;
         const 2;
         const 18446744069414584338;
         const udffm_srtd;
 },
 section ""relreadonly" . udffn_srtd" {
     udffn_srtd:
         const SddB2_srt+128;
         const 52;
         const 2251799813685251;
 },
 _cdf50() //  [R1]
         { []
         }
     {offset
       cdf50: // global
           _sdcyZ::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cdf5m; else goto cdf5n;
       cdf5m: // global
           Hp = Hp + 24;
           _sdczk::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cdf5x; else goto cdf5t;
       cdf5t: // global
           I64[Hp - 16] = sat_sdczl_info;
           P64[Hp] = _sdcyZ::P64;
           R3 = Hp - 16;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cdf5n: // global
           Hp = Hp + 24;
           _sdczk::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cdf5x; else goto cdf5w;
       cdf5x: // global
           HpAlloc = 24;
           R1 = _sdczk::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdf5w: // global
           I64[Hp - 16] = sat_sdczm_info;
           P64[Hp] = _sdcyZ::P64;
           R3 = Hp - 16;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdf50_info" {
     block_cdf50_info:
         const _cdf50;
         const 1;
         const 18446744069414584350;
         const udffn_srtd;
 },
 section ""relreadonly" . udffo_srtd" {
     udffo_srtd:
         const SddB2_srt+128;
         const 52;
         const 2251799813685251;
 },
 sat_sdczo_entry() //  [R1]
         { []
         }
     {offset
       cdf5z: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdf5D; else goto cdf5C;
       cdf5D: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdf5C: // global
           _sdcyV::P64 = P64[R1 + 16];
           _sdcyZ::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_sdczn_info;
           P64[Hp - 8] = _sdcyV::P64;
           P64[Hp] = _sdcyZ::P64;
           R3 = Hp - 24;
           R2 = lvl50_rcV5T_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdczo_info" {
     sat_sdczo_info:
         const sat_sdczo_entry;
         const 2;
         const 18446744069414584338;
         const udffo_srtd;
 },
 section ""relreadonly" . udffp_srtd" {
     udffp_srtd:
         const SddB2_srt+128;
         const 52;
         const 2269391999729667;
 },
 sat_sdczp_entry() //  [R1]
         { []
         }
     {offset
       cdf5E: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdf5I; else goto cdf5H;
       cdf5I: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdf5H: // global
           _sdcyV::P64 = P64[R1 + 16];
           _sdcyZ::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_sdczo_info;
           P64[Hp - 8] = _sdcyV::P64;
           P64[Hp] = _sdcyZ::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdczp_info" {
     sat_sdczp_info:
         const sat_sdczp_entry;
         const 2;
         const 18446744069414584338;
         const udffp_srtd;
 },
 section ""relreadonly" . udffq_srtd" {
     udffq_srtd:
         const SddB2_srt+128;
         const 52;
         const 2269391999729667;
 },
 sat_sdczq_entry() //  [R1]
         { []
         }
     {offset
       cdf5N: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdf5O; else goto cdf5P;
       cdf5O: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdf5P: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cdf3M_info;
           _sdcyV::P64 = P64[R1 + 24];
           _sdcyZ::P64 = P64[R1 + 32];
           R1 = P64[R1 + 16];
           P64[Sp - 32] = _sdcyV::P64;
           P64[Sp - 24] = _sdcyZ::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto udf5W; else goto cdf3N;
       udf5W: // global
           call _cdf3M(R1) args: 0, res: 0, upd: 0;
       cdf3N: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdczq_info" {
     sat_sdczq_info:
         const sat_sdczq_entry;
         const 3;
         const 18446744069414584335;
         const udffq_srtd;
 },
 section ""relreadonly" . udffr_srtd" {
     udffr_srtd:
         const SddB2_srt+128;
         const 52;
         const 2269391999729667;
 },
 _cdf3M() //  [R1]
         { []
         }
     {offset
       cdf3M: // global
           _sdcyV::P64 = P64[Sp + 8];
           _sdcyZ::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto cdf5K; else goto cdf5L;
       cdf5K: // global
           Hp = Hp + 32;
           _sdczd::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cdf5V; else goto cdf5R;
       cdf5R: // global
           I64[Hp - 24] = sat_sdczj_info;
           P64[Hp - 8] = _sdcyV::P64;
           P64[Hp] = _sdcyZ::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cdf5L: // global
           Hp = Hp + 32;
           _sdczd::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cdf5V; else goto cdf5U;
       cdf5V: // global
           HpAlloc = 32;
           R1 = _sdczd::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdf5U: // global
           I64[Hp - 24] = sat_sdczp_info;
           P64[Hp - 8] = _sdcyV::P64;
           P64[Hp] = _sdcyZ::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdf3M_info" {
     block_cdf3M_info:
         const _cdf3M;
         const 2;
         const 18446744069414584350;
         const udffr_srtd;
 },
 section ""relreadonly" . udffs_srtd" {
     udffs_srtd:
         const SddB2_srt+128;
         const 52;
         const 2269391999729667;
 },
 sat_sdczr_entry() //  [R1]
         { []
         }
     {offset
       cdf5X: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdf61; else goto cdf60;
       cdf61: // global
           HpAlloc = 40;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdf60: // global
           _sdcyU::P64 = P64[R1 + 16];
           _sdcyV::P64 = P64[R1 + 24];
           _sdcyZ::P64 = P64[R1 + 32];
           I64[Hp - 32] = sat_sdczq_info;
           P64[Hp - 16] = _sdcyU::P64;
           P64[Hp - 8] = _sdcyV::P64;
           P64[Hp] = _sdcyZ::P64;
           R3 = Hp - 32;
           R2 = lvl49_rcV5S_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdczr_info" {
     sat_sdczr_info:
         const sat_sdczr_entry;
         const 3;
         const 18446744069414584335;
         const udffs_srtd;
 },
 section ""relreadonly" . udfft_srtd" {
     udfft_srtd:
         const SddB2_srt+128;
         const 52;
         const 2269391999729667;
 },
 sat_sdczs_entry() //  [R1]
         { []
         }
     {offset
       cdf62: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdf66; else goto cdf65;
       cdf66: // global
           HpAlloc = 40;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdf65: // global
           _sdcyU::P64 = P64[R1 + 16];
           _sdcyV::P64 = P64[R1 + 24];
           _sdcyZ::P64 = P64[R1 + 32];
           I64[Hp - 32] = sat_sdczr_info;
           P64[Hp - 16] = _sdcyU::P64;
           P64[Hp - 8] = _sdcyV::P64;
           P64[Hp] = _sdcyZ::P64;
           R3 = Hp - 32;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdczs_info" {
     sat_sdczs_info:
         const sat_sdczs_entry;
         const 3;
         const 18446744069414584335;
         const udfft_srtd;
 },
 sat_sdczv_entry() //  [R1]
         { []
         }
     {offset
       cdf6L: // global
           R3 = P64[R1 + 16];
           R2 = g_rcV52_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdczv_info" {
     sat_sdczv_info:
         const sat_sdczv_entry;
         const 1;
         const 4294967312;
         const SddB2_srt+536;
 },
 sat_sdczw_entry() //  [R1]
         { []
         }
     {offset
       cdf6U: // global
           R3 = P64[R1 + 16];
           R2 = g_rcV52_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdczw_info" {
     sat_sdczw_info:
         const sat_sdczw_entry;
         const 1;
         const 4294967312;
         const SddB2_srt+536;
 },
 section ""relreadonly" . udffu_srtd" {
     udffu_srtd:
         const SddB2_srt+128;
         const 52;
         const 2251799813685251;
 },
 sat_sdczx_entry() //  [R1]
         { []
         }
     {offset
       cdf71: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdf72; else goto cdf73;
       cdf72: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdf73: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cdf6C_info;
           _sdcyZ::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _sdcyZ::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udf7a; else goto cdf6D;
       udf7a: // global
           call _cdf6C(R1) args: 0, res: 0, upd: 0;
       cdf6D: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdczx_info" {
     sat_sdczx_info:
         const sat_sdczx_entry;
         const 2;
         const 18446744069414584338;
         const udffu_srtd;
 },
 section ""relreadonly" . udffv_srtd" {
     udffv_srtd:
         const SddB2_srt+128;
         const 52;
         const 2251799813685251;
 },
 _cdf6C() //  [R1]
         { []
         }
     {offset
       cdf6C: // global
           _sdcyZ::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cdf6Y; else goto cdf6Z;
       cdf6Y: // global
           Hp = Hp + 24;
           _sdczu::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cdf79; else goto cdf75;
       cdf75: // global
           I64[Hp - 16] = sat_sdczv_info;
           P64[Hp] = _sdcyZ::P64;
           R3 = Hp - 16;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cdf6Z: // global
           Hp = Hp + 24;
           _sdczu::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cdf79; else goto cdf78;
       cdf79: // global
           HpAlloc = 24;
           R1 = _sdczu::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdf78: // global
           I64[Hp - 16] = sat_sdczw_info;
           P64[Hp] = _sdcyZ::P64;
           R3 = Hp - 16;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdf6C_info" {
     block_cdf6C_info:
         const _cdf6C;
         const 1;
         const 18446744069414584350;
         const udffv_srtd;
 },
 section ""relreadonly" . udffw_srtd" {
     udffw_srtd:
         const SddB2_srt+128;
         const 52;
         const 2251799813685251;
 },
 sat_sdczy_entry() //  [R1]
         { []
         }
     {offset
       cdf7b: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdf7f; else goto cdf7e;
       cdf7f: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdf7e: // global
           _sdcyV::P64 = P64[R1 + 16];
           _sdcyZ::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_sdczx_info;
           P64[Hp - 8] = _sdcyV::P64;
           P64[Hp] = _sdcyZ::P64;
           R3 = Hp - 24;
           R2 = lvl50_rcV5T_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdczy_info" {
     sat_sdczy_info:
         const sat_sdczy_entry;
         const 2;
         const 18446744069414584338;
         const udffw_srtd;
 },
 section ""relreadonly" . udffx_srtd" {
     udffx_srtd:
         const SddB2_srt+128;
         const 52;
         const 2269391999729667;
 },
 sat_sdczz_entry() //  [R1]
         { []
         }
     {offset
       cdf7g: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdf7k; else goto cdf7j;
       cdf7k: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdf7j: // global
           _sdcyV::P64 = P64[R1 + 16];
           _sdcyZ::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_sdczy_info;
           P64[Hp - 8] = _sdcyV::P64;
           P64[Hp] = _sdcyZ::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdczz_info" {
     sat_sdczz_info:
         const sat_sdczz_entry;
         const 2;
         const 18446744069414584338;
         const udffx_srtd;
 },
 sat_sdczB_entry() //  [R1]
         { []
         }
     {offset
       cdf7I: // global
           R3 = P64[R1 + 16];
           R2 = g_rcV52_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdczB_info" {
     sat_sdczB_info:
         const sat_sdczB_entry;
         const 1;
         const 4294967312;
         const SddB2_srt+536;
 },
 sat_sdczC_entry() //  [R1]
         { []
         }
     {offset
       cdf7R: // global
           R3 = P64[R1 + 16];
           R2 = g_rcV52_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdczC_info" {
     sat_sdczC_info:
         const sat_sdczC_entry;
         const 1;
         const 4294967312;
         const SddB2_srt+536;
 },
 section ""relreadonly" . udffy_srtd" {
     udffy_srtd:
         const SddB2_srt+128;
         const 52;
         const 2251799813685251;
 },
 sat_sdczD_entry() //  [R1]
         { []
         }
     {offset
       cdf7Y: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdf7Z; else goto cdf80;
       cdf7Z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdf80: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cdf7z_info;
           _sdcyZ::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _sdcyZ::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udf87; else goto cdf7A;
       udf87: // global
           call _cdf7z(R1) args: 0, res: 0, upd: 0;
       cdf7A: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdczD_info" {
     sat_sdczD_info:
         const sat_sdczD_entry;
         const 2;
         const 18446744069414584338;
         const udffy_srtd;
 },
 section ""relreadonly" . udffz_srtd" {
     udffz_srtd:
         const SddB2_srt+128;
         const 52;
         const 2251799813685251;
 },
 _cdf7z() //  [R1]
         { []
         }
     {offset
       cdf7z: // global
           _sdcyZ::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cdf7V; else goto cdf7W;
       cdf7V: // global
           Hp = Hp + 24;
           _sdczA::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cdf86; else goto cdf82;
       cdf82: // global
           I64[Hp - 16] = sat_sdczB_info;
           P64[Hp] = _sdcyZ::P64;
           R3 = Hp - 16;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cdf7W: // global
           Hp = Hp + 24;
           _sdczA::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cdf86; else goto cdf85;
       cdf86: // global
           HpAlloc = 24;
           R1 = _sdczA::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdf85: // global
           I64[Hp - 16] = sat_sdczC_info;
           P64[Hp] = _sdcyZ::P64;
           R3 = Hp - 16;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdf7z_info" {
     block_cdf7z_info:
         const _cdf7z;
         const 1;
         const 18446744069414584350;
         const udffz_srtd;
 },
 section ""relreadonly" . udffA_srtd" {
     udffA_srtd:
         const SddB2_srt+128;
         const 52;
         const 2251799813685251;
 },
 sat_sdczE_entry() //  [R1]
         { []
         }
     {offset
       cdf88: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdf8c; else goto cdf8b;
       cdf8c: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdf8b: // global
           _sdcyV::P64 = P64[R1 + 16];
           _sdcyZ::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_sdczD_info;
           P64[Hp - 8] = _sdcyV::P64;
           P64[Hp] = _sdcyZ::P64;
           R3 = Hp - 24;
           R2 = lvl50_rcV5T_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdczE_info" {
     sat_sdczE_info:
         const sat_sdczE_entry;
         const 2;
         const 18446744069414584338;
         const udffA_srtd;
 },
 section ""relreadonly" . udffB_srtd" {
     udffB_srtd:
         const SddB2_srt+128;
         const 52;
         const 2269391999729667;
 },
 sat_sdczF_entry() //  [R1]
         { []
         }
     {offset
       cdf8d: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdf8h; else goto cdf8g;
       cdf8h: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdf8g: // global
           _sdcyV::P64 = P64[R1 + 16];
           _sdcyZ::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_sdczE_info;
           P64[Hp - 8] = _sdcyV::P64;
           P64[Hp] = _sdcyZ::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdczF_info" {
     sat_sdczF_info:
         const sat_sdczF_entry;
         const 2;
         const 18446744069414584338;
         const udffB_srtd;
 },
 section ""relreadonly" . udffC_srtd" {
     udffC_srtd:
         const SddB2_srt+128;
         const 52;
         const 2269391999729667;
 },
 sat_sdczG_entry() //  [R1]
         { []
         }
     {offset
       cdf8m: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdf8n; else goto cdf8o;
       cdf8n: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdf8o: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cdf6l_info;
           _sdcyV::P64 = P64[R1 + 24];
           _sdcyZ::P64 = P64[R1 + 32];
           R1 = P64[R1 + 16];
           P64[Sp - 32] = _sdcyV::P64;
           P64[Sp - 24] = _sdcyZ::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto udf8v; else goto cdf6m;
       udf8v: // global
           call _cdf6l(R1) args: 0, res: 0, upd: 0;
       cdf6m: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdczG_info" {
     sat_sdczG_info:
         const sat_sdczG_entry;
         const 3;
         const 18446744069414584335;
         const udffC_srtd;
 },
 section ""relreadonly" . udffD_srtd" {
     udffD_srtd:
         const SddB2_srt+128;
         const 52;
         const 2269391999729667;
 },
 _cdf6l() //  [R1]
         { []
         }
     {offset
       cdf6l: // global
           _sdcyV::P64 = P64[Sp + 8];
           _sdcyZ::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto cdf8j; else goto cdf8k;
       cdf8j: // global
           Hp = Hp + 32;
           _sdczt::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cdf8u; else goto cdf8q;
       cdf8q: // global
           I64[Hp - 24] = sat_sdczz_info;
           P64[Hp - 8] = _sdcyV::P64;
           P64[Hp] = _sdcyZ::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cdf8k: // global
           Hp = Hp + 32;
           _sdczt::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cdf8u; else goto cdf8t;
       cdf8u: // global
           HpAlloc = 32;
           R1 = _sdczt::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdf8t: // global
           I64[Hp - 24] = sat_sdczF_info;
           P64[Hp - 8] = _sdcyV::P64;
           P64[Hp] = _sdcyZ::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdf6l_info" {
     block_cdf6l_info:
         const _cdf6l;
         const 2;
         const 18446744069414584350;
         const udffD_srtd;
 },
 section ""relreadonly" . udffE_srtd" {
     udffE_srtd:
         const SddB2_srt+128;
         const 52;
         const 2269391999729667;
 },
 sat_sdczH_entry() //  [R1]
         { []
         }
     {offset
       cdf8w: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdf8A; else goto cdf8z;
       cdf8A: // global
           HpAlloc = 40;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdf8z: // global
           _sdcyU::P64 = P64[R1 + 16];
           _sdcyV::P64 = P64[R1 + 24];
           _sdcyZ::P64 = P64[R1 + 32];
           I64[Hp - 32] = sat_sdczG_info;
           P64[Hp - 16] = _sdcyU::P64;
           P64[Hp - 8] = _sdcyV::P64;
           P64[Hp] = _sdcyZ::P64;
           R3 = Hp - 32;
           R2 = lvl49_rcV5S_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdczH_info" {
     sat_sdczH_info:
         const sat_sdczH_entry;
         const 3;
         const 18446744069414584335;
         const udffE_srtd;
 },
 section ""relreadonly" . udffF_srtd" {
     udffF_srtd:
         const SddB2_srt+128;
         const 52;
         const 2269391999729667;
 },
 sat_sdczI_entry() //  [R1]
         { []
         }
     {offset
       cdf8B: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdf8F; else goto cdf8E;
       cdf8F: // global
           HpAlloc = 40;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdf8E: // global
           _sdcyU::P64 = P64[R1 + 16];
           _sdcyV::P64 = P64[R1 + 24];
           _sdcyZ::P64 = P64[R1 + 32];
           I64[Hp - 32] = sat_sdczH_info;
           P64[Hp - 16] = _sdcyU::P64;
           P64[Hp - 8] = _sdcyV::P64;
           P64[Hp] = _sdcyZ::P64;
           R3 = Hp - 32;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdczI_info" {
     sat_sdczI_info:
         const sat_sdczI_entry;
         const 3;
         const 18446744069414584335;
         const udffF_srtd;
 },
 section ""relreadonly" . udffG_srtd" {
     udffG_srtd:
         const SddB2_srt+128;
         const 52;
         const 2269391999729667;
 },
 sat_sdczJ_entry() //  [R1]
         { []
         }
     {offset
       cdf8K: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cdf8L; else goto cdf8M;
       cdf8L: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdf8M: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_cdf3v_info;
           _sdcyU::P64 = P64[R1 + 24];
           _sdcyV::P64 = P64[R1 + 32];
           _sdcyZ::P64 = P64[R1 + 40];
           R1 = P64[R1 + 16];
           P64[Sp - 40] = _sdcyU::P64;
           P64[Sp - 32] = _sdcyV::P64;
           P64[Sp - 24] = _sdcyZ::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto udf8T; else goto cdf3w;
       udf8T: // global
           call _cdf3v(R1) args: 0, res: 0, upd: 0;
       cdf3w: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdczJ_info" {
     sat_sdczJ_info:
         const sat_sdczJ_entry;
         const 4;
         const 18446744069414584335;
         const udffG_srtd;
 },
 section ""relreadonly" . udffH_srtd" {
     udffH_srtd:
         const SddB2_srt+128;
         const 52;
         const 2269391999729667;
 },
 _cdf3v() //  [R1]
         { []
         }
     {offset
       cdf3v: // global
           _sdcyU::P64 = P64[Sp + 8];
           _sdcyV::P64 = P64[Sp + 16];
           _sdcyZ::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto cdf8H; else goto cdf8I;
       cdf8H: // global
           Hp = Hp + 40;
           _sdczc::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cdf8S; else goto cdf8O;
       cdf8O: // global
           I64[Hp - 32] = sat_sdczs_info;
           P64[Hp - 16] = _sdcyU::P64;
           P64[Hp - 8] = _sdcyV::P64;
           P64[Hp] = _sdcyZ::P64;
           R3 = Hp - 32;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 32;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cdf8I: // global
           Hp = Hp + 40;
           _sdczc::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cdf8S; else goto cdf8R;
       cdf8S: // global
           HpAlloc = 40;
           R1 = _sdczc::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdf8R: // global
           I64[Hp - 32] = sat_sdczI_info;
           P64[Hp - 16] = _sdcyU::P64;
           P64[Hp - 8] = _sdcyV::P64;
           P64[Hp] = _sdcyZ::P64;
           R3 = Hp - 32;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 32;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdf3v_info" {
     block_cdf3v_info:
         const _cdf3v;
         const 3;
         const 18446744069414584350;
         const udffH_srtd;
 },
 section ""relreadonly" . udffI_srtd" {
     udffI_srtd:
         const SddB2_srt+128;
         const 52;
         const 2269391999729667;
 },
 sat_sdczK_entry() //  [R1]
         { []
         }
     {offset
       cdf8U: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdf8Y; else goto cdf8X;
       cdf8Y: // global
           HpAlloc = 48;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdf8X: // global
           _sdcyT::P64 = P64[R1 + 16];
           _sdcyU::P64 = P64[R1 + 24];
           _sdcyV::P64 = P64[R1 + 32];
           _sdcyZ::P64 = P64[R1 + 40];
           I64[Hp - 40] = sat_sdczJ_info;
           P64[Hp - 24] = _sdcyT::P64;
           P64[Hp - 16] = _sdcyU::P64;
           P64[Hp - 8] = _sdcyV::P64;
           P64[Hp] = _sdcyZ::P64;
           R3 = Hp - 40;
           R2 = lvl48_rcV5R_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdczK_info" {
     sat_sdczK_info:
         const sat_sdczK_entry;
         const 4;
         const 18446744069414584335;
         const udffI_srtd;
 },
 section ""relreadonly" . udffJ_srtd" {
     udffJ_srtd:
         const SddB2_srt+128;
         const 52;
         const 2269391999729667;
 },
 eta12_sdczb_entry() //  [R1]
         { []
         }
     {offset
       cdf8Z: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdf93; else goto cdf92;
       cdf93: // global
           HpAlloc = 48;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdf92: // global
           _sdcyT::P64 = P64[R1 + 16];
           _sdcyU::P64 = P64[R1 + 24];
           _sdcyV::P64 = P64[R1 + 32];
           _sdcyZ::P64 = P64[R1 + 40];
           I64[Hp - 40] = sat_sdczK_info;
           P64[Hp - 24] = _sdcyT::P64;
           P64[Hp - 16] = _sdcyU::P64;
           P64[Hp - 8] = _sdcyV::P64;
           P64[Hp] = _sdcyZ::P64;
           R3 = Hp - 40;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . eta12_sdczb_info" {
     eta12_sdczb_info:
         const eta12_sdczb_entry;
         const 4;
         const 18446744069414584335;
         const udffJ_srtd;
 },
 section ""relreadonly" . udffK_srtd" {
     udffK_srtd:
         const SddB2_srt+128;
         const 52;
         const 2269391999729667;
 },
 sat_sdczM_entry() //  [R1]
         { []
         }
     {offset
       cdf9b: // global
           _sdczM::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cdf9c; else goto cdf9d;
       cdf9d: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdf9f; else goto cdf9e;
       cdf9f: // global
           HpAlloc = 48;
           goto cdf9c;
       cdf9c: // global
           R1 = _sdczM::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdf9e: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdczM::P64;
           _sdcyS::P64 = P64[_sdczM::P64 + 16];
           _sdcyT::P64 = P64[_sdczM::P64 + 24];
           _sdcyU::P64 = P64[_sdczM::P64 + 32];
           _sdcyV::P64 = P64[_sdczM::P64 + 40];
           _sdcyZ::P64 = P64[_sdczM::P64 + 48];
           I64[Hp - 40] = eta12_sdczb_info;
           P64[Hp - 24] = _sdcyT::P64;
           P64[Hp - 16] = _sdcyU::P64;
           P64[Hp - 8] = _sdcyV::P64;
           P64[Hp] = _sdcyZ::P64;
           I64[Sp - 32] = block_cdf94_info;
           R1 = _sdcyS::P64;
           P64[Sp - 24] = Hp - 40;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udf9m; else goto cdf95;
       udf9m: // global
           call _cdf94(R1) args: 0, res: 0, upd: 0;
       cdf95: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdczM_info" {
     sat_sdczM_info:
         const sat_sdczM_entry;
         const 5;
         const 18446744069414584335;
         const udffK_srtd;
 },
 _cdf94() //  [R1]
         { []
         }
     {offset
       cdf94: // global
           _cdf3j::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cdf98; else goto cdf99;
       cdf98: // global
           R3 = _cdf3j::P64;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cdf99: // global
           R3 = _cdf3j::P64;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdf94_info" {
     block_cdf94_info:
         const _cdf94;
         const 1;
         const 12884901918;
         const SddB2_srt+544;
 },
 sat_sdczN_entry() //  [R1]
         { []
         }
     {offset
       cdf9n: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdf9r; else goto cdf9q;
       cdf9r: // global
           HpAlloc = 56;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdf9q: // global
           _sdcyS::P64 = P64[R1 + 16];
           _sdcyT::P64 = P64[R1 + 24];
           _sdcyU::P64 = P64[R1 + 32];
           _sdcyV::P64 = P64[R1 + 40];
           _sdcyZ::P64 = P64[R1 + 48];
           I64[Hp - 48] = sat_sdczM_info;
           P64[Hp - 32] = _sdcyS::P64;
           P64[Hp - 24] = _sdcyT::P64;
           P64[Hp - 16] = _sdcyU::P64;
           P64[Hp - 8] = _sdcyV::P64;
           P64[Hp] = _sdcyZ::P64;
           R3 = Hp - 48;
           R2 = lvl47_rcV5Q_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdczN_info" {
     sat_sdczN_info:
         const sat_sdczN_entry;
         const 5;
         const 3852585664527;
         const SddB2_srt+480;
 },
 eta11_sdcza_entry() //  [R1]
         { []
         }
     {offset
       cdf9s: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdf9w; else goto cdf9v;
       cdf9w: // global
           HpAlloc = 56;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdf9v: // global
           _sdcyS::P64 = P64[R1 + 16];
           _sdcyT::P64 = P64[R1 + 24];
           _sdcyU::P64 = P64[R1 + 32];
           _sdcyV::P64 = P64[R1 + 40];
           _sdcyZ::P64 = P64[R1 + 48];
           I64[Hp - 48] = sat_sdczN_info;
           P64[Hp - 32] = _sdcyS::P64;
           P64[Hp - 24] = _sdcyT::P64;
           P64[Hp - 16] = _sdcyU::P64;
           P64[Hp - 8] = _sdcyV::P64;
           P64[Hp] = _sdcyZ::P64;
           R3 = Hp - 48;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . eta11_sdcza_info" {
     eta11_sdcza_info:
         const eta11_sdcza_entry;
         const 5;
         const 3852585664527;
         const SddB2_srt+480;
 },
 sat_sdczP_entry() //  [R1]
         { []
         }
     {offset
       cdf9E: // global
           _sdczP::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cdf9F; else goto cdf9G;
       cdf9G: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdf9I; else goto cdf9H;
       cdf9I: // global
           HpAlloc = 56;
           goto cdf9F;
       cdf9F: // global
           R1 = _sdczP::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdf9H: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdczP::P64;
           _sdcyR::P64 = P64[_sdczP::P64 + 16];
           _sdcyS::P64 = P64[_sdczP::P64 + 24];
           _sdcyT::P64 = P64[_sdczP::P64 + 32];
           _sdcyU::P64 = P64[_sdczP::P64 + 40];
           _sdcyV::P64 = P64[_sdczP::P64 + 48];
           _sdcyZ::P64 = P64[_sdczP::P64 + 56];
           I64[Hp - 48] = eta11_sdcza_info;
           P64[Hp - 32] = _sdcyS::P64;
           P64[Hp - 24] = _sdcyT::P64;
           P64[Hp - 16] = _sdcyU::P64;
           P64[Hp - 8] = _sdcyV::P64;
           P64[Hp] = _sdcyZ::P64;
           I64[Sp - 32] = block_cdf9x_info;
           R1 = _sdcyR::P64;
           P64[Sp - 24] = Hp - 48;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udf9P; else goto cdf9y;
       udf9P: // global
           call _cdf9x(R1) args: 0, res: 0, upd: 0;
       cdf9y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdczP_info" {
     sat_sdczP_info:
         const sat_sdczP_entry;
         const 6;
         const 3852585664527;
         const SddB2_srt+480;
 },
 _cdf9x() //  [R1]
         { []
         }
     {offset
       cdf9x: // global
           _cdf37::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cdf9B; else goto cdf9C;
       cdf9B: // global
           R3 = _cdf37::P64;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cdf9C: // global
           R3 = _cdf37::P64;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdf9x_info" {
     block_cdf9x_info:
         const _cdf9x;
         const 1;
         const 12884901918;
         const SddB2_srt+544;
 },
 sat_sdczQ_entry() //  [R1]
         { []
         }
     {offset
       cdf9Q: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdf9U; else goto cdf9T;
       cdf9U: // global
           HpAlloc = 64;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdf9T: // global
           _sdcyR::P64 = P64[R1 + 16];
           _sdcyS::P64 = P64[R1 + 24];
           _sdcyT::P64 = P64[R1 + 32];
           _sdcyU::P64 = P64[R1 + 40];
           _sdcyV::P64 = P64[R1 + 48];
           _sdcyZ::P64 = P64[R1 + 56];
           I64[Hp - 56] = sat_sdczP_info;
           P64[Hp - 40] = _sdcyR::P64;
           P64[Hp - 32] = _sdcyS::P64;
           P64[Hp - 24] = _sdcyT::P64;
           P64[Hp - 16] = _sdcyU::P64;
           P64[Hp - 8] = _sdcyV::P64;
           P64[Hp] = _sdcyZ::P64;
           R3 = Hp - 56;
           R2 = lvl46_rcV5P_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdczQ_info" {
     sat_sdczQ_info:
         const sat_sdczQ_entry;
         const 6;
         const 3852585664527;
         const SddB2_srt+480;
 },
 eta10_sdcz9_entry() //  [R1]
         { []
         }
     {offset
       cdf9V: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdf9Z; else goto cdf9Y;
       cdf9Z: // global
           HpAlloc = 64;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdf9Y: // global
           _sdcyR::P64 = P64[R1 + 16];
           _sdcyS::P64 = P64[R1 + 24];
           _sdcyT::P64 = P64[R1 + 32];
           _sdcyU::P64 = P64[R1 + 40];
           _sdcyV::P64 = P64[R1 + 48];
           _sdcyZ::P64 = P64[R1 + 56];
           I64[Hp - 56] = sat_sdczQ_info;
           P64[Hp - 40] = _sdcyR::P64;
           P64[Hp - 32] = _sdcyS::P64;
           P64[Hp - 24] = _sdcyT::P64;
           P64[Hp - 16] = _sdcyU::P64;
           P64[Hp - 8] = _sdcyV::P64;
           P64[Hp] = _sdcyZ::P64;
           R3 = Hp - 56;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . eta10_sdcz9_info" {
     eta10_sdcz9_info:
         const eta10_sdcz9_entry;
         const 6;
         const 3852585664527;
         const SddB2_srt+480;
 },
 sat_sdczS_entry() //  [R1]
         { []
         }
     {offset
       cdfa7: // global
           _sdczS::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cdfa8; else goto cdfa9;
       cdfa9: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdfab; else goto cdfaa;
       cdfab: // global
           HpAlloc = 64;
           goto cdfa8;
       cdfa8: // global
           R1 = _sdczS::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfaa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdczS::P64;
           _sdcyQ::P64 = P64[_sdczS::P64 + 16];
           _sdcyR::P64 = P64[_sdczS::P64 + 24];
           _sdcyS::P64 = P64[_sdczS::P64 + 32];
           _sdcyT::P64 = P64[_sdczS::P64 + 40];
           _sdcyU::P64 = P64[_sdczS::P64 + 48];
           _sdcyV::P64 = P64[_sdczS::P64 + 56];
           _sdcyZ::P64 = P64[_sdczS::P64 + 64];
           I64[Hp - 56] = eta10_sdcz9_info;
           P64[Hp - 40] = _sdcyR::P64;
           P64[Hp - 32] = _sdcyS::P64;
           P64[Hp - 24] = _sdcyT::P64;
           P64[Hp - 16] = _sdcyU::P64;
           P64[Hp - 8] = _sdcyV::P64;
           P64[Hp] = _sdcyZ::P64;
           I64[Sp - 32] = block_cdfa0_info;
           R1 = _sdcyQ::P64;
           P64[Sp - 24] = Hp - 56;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udfai; else goto cdfa1;
       udfai: // global
           call _cdfa0(R1) args: 0, res: 0, upd: 0;
       cdfa1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdczS_info" {
     sat_sdczS_info:
         const sat_sdczS_entry;
         const 7;
         const 3852585664527;
         const SddB2_srt+480;
 },
 _cdfa0() //  [R1]
         { []
         }
     {offset
       cdfa0: // global
           _cdf2V::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cdfa4; else goto cdfa5;
       cdfa4: // global
           R3 = _cdf2V::P64;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cdfa5: // global
           R3 = _cdf2V::P64;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdfa0_info" {
     block_cdfa0_info:
         const _cdfa0;
         const 1;
         const 12884901918;
         const SddB2_srt+544;
 },
 sat_sdczT_entry() //  [R1]
         { []
         }
     {offset
       cdfaj: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdfan; else goto cdfam;
       cdfan: // global
           HpAlloc = 72;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfam: // global
           _sdcyQ::P64 = P64[R1 + 16];
           _sdcyR::P64 = P64[R1 + 24];
           _sdcyS::P64 = P64[R1 + 32];
           _sdcyT::P64 = P64[R1 + 40];
           _sdcyU::P64 = P64[R1 + 48];
           _sdcyV::P64 = P64[R1 + 56];
           _sdcyZ::P64 = P64[R1 + 64];
           I64[Hp - 64] = sat_sdczS_info;
           P64[Hp - 48] = _sdcyQ::P64;
           P64[Hp - 40] = _sdcyR::P64;
           P64[Hp - 32] = _sdcyS::P64;
           P64[Hp - 24] = _sdcyT::P64;
           P64[Hp - 16] = _sdcyU::P64;
           P64[Hp - 8] = _sdcyV::P64;
           P64[Hp] = _sdcyZ::P64;
           R3 = Hp - 64;
           R2 = lvl45_rcV5O_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdczT_info" {
     sat_sdczT_info:
         const sat_sdczT_entry;
         const 7;
         const 3852585664527;
         const SddB2_srt+480;
 },
 eta9_sdcz8_entry() //  [R1]
         { []
         }
     {offset
       cdfao: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdfas; else goto cdfar;
       cdfas: // global
           HpAlloc = 72;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfar: // global
           _sdcyQ::P64 = P64[R1 + 16];
           _sdcyR::P64 = P64[R1 + 24];
           _sdcyS::P64 = P64[R1 + 32];
           _sdcyT::P64 = P64[R1 + 40];
           _sdcyU::P64 = P64[R1 + 48];
           _sdcyV::P64 = P64[R1 + 56];
           _sdcyZ::P64 = P64[R1 + 64];
           I64[Hp - 64] = sat_sdczT_info;
           P64[Hp - 48] = _sdcyQ::P64;
           P64[Hp - 40] = _sdcyR::P64;
           P64[Hp - 32] = _sdcyS::P64;
           P64[Hp - 24] = _sdcyT::P64;
           P64[Hp - 16] = _sdcyU::P64;
           P64[Hp - 8] = _sdcyV::P64;
           P64[Hp] = _sdcyZ::P64;
           R3 = Hp - 64;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . eta9_sdcz8_info" {
     eta9_sdcz8_info:
         const eta9_sdcz8_entry;
         const 7;
         const 3852585664527;
         const SddB2_srt+480;
 },
 sat_sdczV_entry() //  [R1]
         { []
         }
     {offset
       cdfaA: // global
           _sdczV::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cdfaB; else goto cdfaC;
       cdfaC: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdfaE; else goto cdfaD;
       cdfaE: // global
           HpAlloc = 72;
           goto cdfaB;
       cdfaB: // global
           R1 = _sdczV::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfaD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdczV::P64;
           _sdcyP::P64 = P64[_sdczV::P64 + 16];
           _sdcyQ::P64 = P64[_sdczV::P64 + 24];
           _sdcyR::P64 = P64[_sdczV::P64 + 32];
           _sdcyS::P64 = P64[_sdczV::P64 + 40];
           _sdcyT::P64 = P64[_sdczV::P64 + 48];
           _sdcyU::P64 = P64[_sdczV::P64 + 56];
           _sdcyV::P64 = P64[_sdczV::P64 + 64];
           _sdcyZ::P64 = P64[_sdczV::P64 + 72];
           I64[Hp - 64] = eta9_sdcz8_info;
           P64[Hp - 48] = _sdcyQ::P64;
           P64[Hp - 40] = _sdcyR::P64;
           P64[Hp - 32] = _sdcyS::P64;
           P64[Hp - 24] = _sdcyT::P64;
           P64[Hp - 16] = _sdcyU::P64;
           P64[Hp - 8] = _sdcyV::P64;
           P64[Hp] = _sdcyZ::P64;
           I64[Sp - 32] = block_cdfat_info;
           R1 = _sdcyP::P64;
           P64[Sp - 24] = Hp - 64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udfaL; else goto cdfau;
       udfaL: // global
           call _cdfat(R1) args: 0, res: 0, upd: 0;
       cdfau: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdczV_info" {
     sat_sdczV_info:
         const sat_sdczV_entry;
         const 8;
         const 3852585664527;
         const SddB2_srt+480;
 },
 _cdfat() //  [R1]
         { []
         }
     {offset
       cdfat: // global
           _cdf2J::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cdfax; else goto cdfay;
       cdfax: // global
           R3 = _cdf2J::P64;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cdfay: // global
           R3 = _cdf2J::P64;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdfat_info" {
     block_cdfat_info:
         const _cdfat;
         const 1;
         const 12884901918;
         const SddB2_srt+544;
 },
 sat_sdczW_entry() //  [R1]
         { []
         }
     {offset
       cdfaM: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cdfaQ; else goto cdfaP;
       cdfaQ: // global
           HpAlloc = 80;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfaP: // global
           _sdcyP::P64 = P64[R1 + 16];
           _sdcyQ::P64 = P64[R1 + 24];
           _sdcyR::P64 = P64[R1 + 32];
           _sdcyS::P64 = P64[R1 + 40];
           _sdcyT::P64 = P64[R1 + 48];
           _sdcyU::P64 = P64[R1 + 56];
           _sdcyV::P64 = P64[R1 + 64];
           _sdcyZ::P64 = P64[R1 + 72];
           I64[Hp - 72] = sat_sdczV_info;
           P64[Hp - 56] = _sdcyP::P64;
           P64[Hp - 48] = _sdcyQ::P64;
           P64[Hp - 40] = _sdcyR::P64;
           P64[Hp - 32] = _sdcyS::P64;
           P64[Hp - 24] = _sdcyT::P64;
           P64[Hp - 16] = _sdcyU::P64;
           P64[Hp - 8] = _sdcyV::P64;
           P64[Hp] = _sdcyZ::P64;
           R3 = Hp - 72;
           R2 = lvl44_rcV5N_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdczW_info" {
     sat_sdczW_info:
         const sat_sdczW_entry;
         const 8;
         const 3852585664527;
         const SddB2_srt+480;
 },
 eta8_sdcz7_entry() //  [R1]
         { []
         }
     {offset
       cdfaR: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cdfaV; else goto cdfaU;
       cdfaV: // global
           HpAlloc = 80;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfaU: // global
           _sdcyP::P64 = P64[R1 + 16];
           _sdcyQ::P64 = P64[R1 + 24];
           _sdcyR::P64 = P64[R1 + 32];
           _sdcyS::P64 = P64[R1 + 40];
           _sdcyT::P64 = P64[R1 + 48];
           _sdcyU::P64 = P64[R1 + 56];
           _sdcyV::P64 = P64[R1 + 64];
           _sdcyZ::P64 = P64[R1 + 72];
           I64[Hp - 72] = sat_sdczW_info;
           P64[Hp - 56] = _sdcyP::P64;
           P64[Hp - 48] = _sdcyQ::P64;
           P64[Hp - 40] = _sdcyR::P64;
           P64[Hp - 32] = _sdcyS::P64;
           P64[Hp - 24] = _sdcyT::P64;
           P64[Hp - 16] = _sdcyU::P64;
           P64[Hp - 8] = _sdcyV::P64;
           P64[Hp] = _sdcyZ::P64;
           R3 = Hp - 72;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . eta8_sdcz7_info" {
     eta8_sdcz7_info:
         const eta8_sdcz7_entry;
         const 8;
         const 3852585664527;
         const SddB2_srt+480;
 },
 sat_sdczY_entry() //  [R1]
         { []
         }
     {offset
       cdfb3: // global
           _sdczY::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cdfb4; else goto cdfb5;
       cdfb5: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cdfb7; else goto cdfb6;
       cdfb7: // global
           HpAlloc = 80;
           goto cdfb4;
       cdfb4: // global
           R1 = _sdczY::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfb6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdczY::P64;
           _sdcyO::P64 = P64[_sdczY::P64 + 16];
           _sdcyP::P64 = P64[_sdczY::P64 + 24];
           _sdcyQ::P64 = P64[_sdczY::P64 + 32];
           _sdcyR::P64 = P64[_sdczY::P64 + 40];
           _sdcyS::P64 = P64[_sdczY::P64 + 48];
           _sdcyT::P64 = P64[_sdczY::P64 + 56];
           _sdcyU::P64 = P64[_sdczY::P64 + 64];
           _sdcyV::P64 = P64[_sdczY::P64 + 72];
           _sdcyZ::P64 = P64[_sdczY::P64 + 80];
           I64[Hp - 72] = eta8_sdcz7_info;
           P64[Hp - 56] = _sdcyP::P64;
           P64[Hp - 48] = _sdcyQ::P64;
           P64[Hp - 40] = _sdcyR::P64;
           P64[Hp - 32] = _sdcyS::P64;
           P64[Hp - 24] = _sdcyT::P64;
           P64[Hp - 16] = _sdcyU::P64;
           P64[Hp - 8] = _sdcyV::P64;
           P64[Hp] = _sdcyZ::P64;
           I64[Sp - 32] = block_cdfaW_info;
           R1 = _sdcyO::P64;
           P64[Sp - 24] = Hp - 72;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udfbe; else goto cdfaX;
       udfbe: // global
           call _cdfaW(R1) args: 0, res: 0, upd: 0;
       cdfaX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdczY_info" {
     sat_sdczY_info:
         const sat_sdczY_entry;
         const 9;
         const 3852585664527;
         const SddB2_srt+480;
 },
 _cdfaW() //  [R1]
         { []
         }
     {offset
       cdfaW: // global
           _cdf2x::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cdfb0; else goto cdfb1;
       cdfb0: // global
           R3 = _cdf2x::P64;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cdfb1: // global
           R3 = _cdf2x::P64;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdfaW_info" {
     block_cdfaW_info:
         const _cdfaW;
         const 1;
         const 12884901918;
         const SddB2_srt+544;
 },
 sat_sdczZ_entry() //  [R1]
         { []
         }
     {offset
       cdfbf: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdfbj; else goto cdfbi;
       cdfbj: // global
           HpAlloc = 88;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfbi: // global
           _sdcyO::P64 = P64[R1 + 16];
           _sdcyP::P64 = P64[R1 + 24];
           _sdcyQ::P64 = P64[R1 + 32];
           _sdcyR::P64 = P64[R1 + 40];
           _sdcyS::P64 = P64[R1 + 48];
           _sdcyT::P64 = P64[R1 + 56];
           _sdcyU::P64 = P64[R1 + 64];
           _sdcyV::P64 = P64[R1 + 72];
           _sdcyZ::P64 = P64[R1 + 80];
           I64[Hp - 80] = sat_sdczY_info;
           P64[Hp - 64] = _sdcyO::P64;
           P64[Hp - 56] = _sdcyP::P64;
           P64[Hp - 48] = _sdcyQ::P64;
           P64[Hp - 40] = _sdcyR::P64;
           P64[Hp - 32] = _sdcyS::P64;
           P64[Hp - 24] = _sdcyT::P64;
           P64[Hp - 16] = _sdcyU::P64;
           P64[Hp - 8] = _sdcyV::P64;
           P64[Hp] = _sdcyZ::P64;
           R3 = Hp - 80;
           R2 = lvl43_rcV5M_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdczZ_info" {
     sat_sdczZ_info:
         const sat_sdczZ_entry;
         const 9;
         const 3852585664527;
         const SddB2_srt+480;
 },
 eta7_sdcz6_entry() //  [R1]
         { []
         }
     {offset
       cdfbk: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdfbo; else goto cdfbn;
       cdfbo: // global
           HpAlloc = 88;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfbn: // global
           _sdcyO::P64 = P64[R1 + 16];
           _sdcyP::P64 = P64[R1 + 24];
           _sdcyQ::P64 = P64[R1 + 32];
           _sdcyR::P64 = P64[R1 + 40];
           _sdcyS::P64 = P64[R1 + 48];
           _sdcyT::P64 = P64[R1 + 56];
           _sdcyU::P64 = P64[R1 + 64];
           _sdcyV::P64 = P64[R1 + 72];
           _sdcyZ::P64 = P64[R1 + 80];
           I64[Hp - 80] = sat_sdczZ_info;
           P64[Hp - 64] = _sdcyO::P64;
           P64[Hp - 56] = _sdcyP::P64;
           P64[Hp - 48] = _sdcyQ::P64;
           P64[Hp - 40] = _sdcyR::P64;
           P64[Hp - 32] = _sdcyS::P64;
           P64[Hp - 24] = _sdcyT::P64;
           P64[Hp - 16] = _sdcyU::P64;
           P64[Hp - 8] = _sdcyV::P64;
           P64[Hp] = _sdcyZ::P64;
           R3 = Hp - 80;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . eta7_sdcz6_info" {
     eta7_sdcz6_info:
         const eta7_sdcz6_entry;
         const 9;
         const 3852585664527;
         const SddB2_srt+480;
 },
 sat_sdcA1_entry() //  [R1]
         { []
         }
     {offset
       cdfbw: // global
           _sdcA1::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cdfbx; else goto cdfby;
       cdfby: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdfbA; else goto cdfbz;
       cdfbA: // global
           HpAlloc = 88;
           goto cdfbx;
       cdfbx: // global
           R1 = _sdcA1::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfbz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcA1::P64;
           _sdcyN::P64 = P64[_sdcA1::P64 + 16];
           _sdcyO::P64 = P64[_sdcA1::P64 + 24];
           _sdcyP::P64 = P64[_sdcA1::P64 + 32];
           _sdcyQ::P64 = P64[_sdcA1::P64 + 40];
           _sdcyR::P64 = P64[_sdcA1::P64 + 48];
           _sdcyS::P64 = P64[_sdcA1::P64 + 56];
           _sdcyT::P64 = P64[_sdcA1::P64 + 64];
           _sdcyU::P64 = P64[_sdcA1::P64 + 72];
           _sdcyV::P64 = P64[_sdcA1::P64 + 80];
           _sdcyZ::P64 = P64[_sdcA1::P64 + 88];
           I64[Hp - 80] = eta7_sdcz6_info;
           P64[Hp - 64] = _sdcyO::P64;
           P64[Hp - 56] = _sdcyP::P64;
           P64[Hp - 48] = _sdcyQ::P64;
           P64[Hp - 40] = _sdcyR::P64;
           P64[Hp - 32] = _sdcyS::P64;
           P64[Hp - 24] = _sdcyT::P64;
           P64[Hp - 16] = _sdcyU::P64;
           P64[Hp - 8] = _sdcyV::P64;
           P64[Hp] = _sdcyZ::P64;
           I64[Sp - 32] = block_cdfbp_info;
           R1 = _sdcyN::P64;
           P64[Sp - 24] = Hp - 80;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udfbH; else goto cdfbq;
       udfbH: // global
           call _cdfbp(R1) args: 0, res: 0, upd: 0;
       cdfbq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcA1_info" {
     sat_sdcA1_info:
         const sat_sdcA1_entry;
         const 10;
         const 3852585664527;
         const SddB2_srt+480;
 },
 _cdfbp() //  [R1]
         { []
         }
     {offset
       cdfbp: // global
           _cdf2l::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cdfbt; else goto cdfbu;
       cdfbt: // global
           R3 = _cdf2l::P64;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cdfbu: // global
           R3 = _cdf2l::P64;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdfbp_info" {
     block_cdfbp_info:
         const _cdfbp;
         const 1;
         const 12884901918;
         const SddB2_srt+544;
 },
 sat_sdcA2_entry() //  [R1]
         { []
         }
     {offset
       cdfbI: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cdfbM; else goto cdfbL;
       cdfbM: // global
           HpAlloc = 96;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfbL: // global
           _sdcyN::P64 = P64[R1 + 16];
           _sdcyO::P64 = P64[R1 + 24];
           _sdcyP::P64 = P64[R1 + 32];
           _sdcyQ::P64 = P64[R1 + 40];
           _sdcyR::P64 = P64[R1 + 48];
           _sdcyS::P64 = P64[R1 + 56];
           _sdcyT::P64 = P64[R1 + 64];
           _sdcyU::P64 = P64[R1 + 72];
           _sdcyV::P64 = P64[R1 + 80];
           _sdcyZ::P64 = P64[R1 + 88];
           I64[Hp - 88] = sat_sdcA1_info;
           P64[Hp - 72] = _sdcyN::P64;
           P64[Hp - 64] = _sdcyO::P64;
           P64[Hp - 56] = _sdcyP::P64;
           P64[Hp - 48] = _sdcyQ::P64;
           P64[Hp - 40] = _sdcyR::P64;
           P64[Hp - 32] = _sdcyS::P64;
           P64[Hp - 24] = _sdcyT::P64;
           P64[Hp - 16] = _sdcyU::P64;
           P64[Hp - 8] = _sdcyV::P64;
           P64[Hp] = _sdcyZ::P64;
           R3 = Hp - 88;
           R2 = lvl42_rcV5L_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcA2_info" {
     sat_sdcA2_info:
         const sat_sdcA2_entry;
         const 10;
         const 3852585664527;
         const SddB2_srt+480;
 },
 eta6_sdcz5_entry() //  [R1]
         { []
         }
     {offset
       cdfbN: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cdfbR; else goto cdfbQ;
       cdfbR: // global
           HpAlloc = 96;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfbQ: // global
           _sdcyN::P64 = P64[R1 + 16];
           _sdcyO::P64 = P64[R1 + 24];
           _sdcyP::P64 = P64[R1 + 32];
           _sdcyQ::P64 = P64[R1 + 40];
           _sdcyR::P64 = P64[R1 + 48];
           _sdcyS::P64 = P64[R1 + 56];
           _sdcyT::P64 = P64[R1 + 64];
           _sdcyU::P64 = P64[R1 + 72];
           _sdcyV::P64 = P64[R1 + 80];
           _sdcyZ::P64 = P64[R1 + 88];
           I64[Hp - 88] = sat_sdcA2_info;
           P64[Hp - 72] = _sdcyN::P64;
           P64[Hp - 64] = _sdcyO::P64;
           P64[Hp - 56] = _sdcyP::P64;
           P64[Hp - 48] = _sdcyQ::P64;
           P64[Hp - 40] = _sdcyR::P64;
           P64[Hp - 32] = _sdcyS::P64;
           P64[Hp - 24] = _sdcyT::P64;
           P64[Hp - 16] = _sdcyU::P64;
           P64[Hp - 8] = _sdcyV::P64;
           P64[Hp] = _sdcyZ::P64;
           R3 = Hp - 88;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . eta6_sdcz5_info" {
     eta6_sdcz5_info:
         const eta6_sdcz5_entry;
         const 10;
         const 3852585664527;
         const SddB2_srt+480;
 },
 sat_sdcA4_entry() //  [R1]
         { []
         }
     {offset
       cdfbZ: // global
           _sdcA4::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cdfc0; else goto cdfc1;
       cdfc1: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cdfc3; else goto cdfc2;
       cdfc3: // global
           HpAlloc = 96;
           goto cdfc0;
       cdfc0: // global
           R1 = _sdcA4::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfc2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcA4::P64;
           _sdcyM::P64 = P64[_sdcA4::P64 + 16];
           _sdcyN::P64 = P64[_sdcA4::P64 + 24];
           _sdcyO::P64 = P64[_sdcA4::P64 + 32];
           _sdcyP::P64 = P64[_sdcA4::P64 + 40];
           _sdcyQ::P64 = P64[_sdcA4::P64 + 48];
           _sdcyR::P64 = P64[_sdcA4::P64 + 56];
           _sdcyS::P64 = P64[_sdcA4::P64 + 64];
           _sdcyT::P64 = P64[_sdcA4::P64 + 72];
           _sdcyU::P64 = P64[_sdcA4::P64 + 80];
           _sdcyV::P64 = P64[_sdcA4::P64 + 88];
           _sdcyZ::P64 = P64[_sdcA4::P64 + 96];
           I64[Hp - 88] = eta6_sdcz5_info;
           P64[Hp - 72] = _sdcyN::P64;
           P64[Hp - 64] = _sdcyO::P64;
           P64[Hp - 56] = _sdcyP::P64;
           P64[Hp - 48] = _sdcyQ::P64;
           P64[Hp - 40] = _sdcyR::P64;
           P64[Hp - 32] = _sdcyS::P64;
           P64[Hp - 24] = _sdcyT::P64;
           P64[Hp - 16] = _sdcyU::P64;
           P64[Hp - 8] = _sdcyV::P64;
           P64[Hp] = _sdcyZ::P64;
           I64[Sp - 32] = block_cdfbS_info;
           R1 = _sdcyM::P64;
           P64[Sp - 24] = Hp - 88;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udfca; else goto cdfbT;
       udfca: // global
           call _cdfbS(R1) args: 0, res: 0, upd: 0;
       cdfbT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcA4_info" {
     sat_sdcA4_info:
         const sat_sdcA4_entry;
         const 11;
         const 3852585664527;
         const SddB2_srt+480;
 },
 _cdfbS() //  [R1]
         { []
         }
     {offset
       cdfbS: // global
           _cdf29::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cdfbW; else goto cdfbX;
       cdfbW: // global
           R3 = _cdf29::P64;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cdfbX: // global
           R3 = _cdf29::P64;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdfbS_info" {
     block_cdfbS_info:
         const _cdfbS;
         const 1;
         const 12884901918;
         const SddB2_srt+544;
 },
 sat_sdcA5_entry() //  [R1]
         { []
         }
     {offset
       cdfcb: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cdfcf; else goto cdfce;
       cdfcf: // global
           HpAlloc = 104;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfce: // global
           _sdcyM::P64 = P64[R1 + 16];
           _sdcyN::P64 = P64[R1 + 24];
           _sdcyO::P64 = P64[R1 + 32];
           _sdcyP::P64 = P64[R1 + 40];
           _sdcyQ::P64 = P64[R1 + 48];
           _sdcyR::P64 = P64[R1 + 56];
           _sdcyS::P64 = P64[R1 + 64];
           _sdcyT::P64 = P64[R1 + 72];
           _sdcyU::P64 = P64[R1 + 80];
           _sdcyV::P64 = P64[R1 + 88];
           _sdcyZ::P64 = P64[R1 + 96];
           I64[Hp - 96] = sat_sdcA4_info;
           P64[Hp - 80] = _sdcyM::P64;
           P64[Hp - 72] = _sdcyN::P64;
           P64[Hp - 64] = _sdcyO::P64;
           P64[Hp - 56] = _sdcyP::P64;
           P64[Hp - 48] = _sdcyQ::P64;
           P64[Hp - 40] = _sdcyR::P64;
           P64[Hp - 32] = _sdcyS::P64;
           P64[Hp - 24] = _sdcyT::P64;
           P64[Hp - 16] = _sdcyU::P64;
           P64[Hp - 8] = _sdcyV::P64;
           P64[Hp] = _sdcyZ::P64;
           R3 = Hp - 96;
           R2 = lvl41_rcV5K_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcA5_info" {
     sat_sdcA5_info:
         const sat_sdcA5_entry;
         const 11;
         const 3852585664527;
         const SddB2_srt+480;
 },
 eta5_sdcz4_entry() //  [R1]
         { []
         }
     {offset
       cdfcg: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cdfck; else goto cdfcj;
       cdfck: // global
           HpAlloc = 104;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfcj: // global
           _sdcyM::P64 = P64[R1 + 16];
           _sdcyN::P64 = P64[R1 + 24];
           _sdcyO::P64 = P64[R1 + 32];
           _sdcyP::P64 = P64[R1 + 40];
           _sdcyQ::P64 = P64[R1 + 48];
           _sdcyR::P64 = P64[R1 + 56];
           _sdcyS::P64 = P64[R1 + 64];
           _sdcyT::P64 = P64[R1 + 72];
           _sdcyU::P64 = P64[R1 + 80];
           _sdcyV::P64 = P64[R1 + 88];
           _sdcyZ::P64 = P64[R1 + 96];
           I64[Hp - 96] = sat_sdcA5_info;
           P64[Hp - 80] = _sdcyM::P64;
           P64[Hp - 72] = _sdcyN::P64;
           P64[Hp - 64] = _sdcyO::P64;
           P64[Hp - 56] = _sdcyP::P64;
           P64[Hp - 48] = _sdcyQ::P64;
           P64[Hp - 40] = _sdcyR::P64;
           P64[Hp - 32] = _sdcyS::P64;
           P64[Hp - 24] = _sdcyT::P64;
           P64[Hp - 16] = _sdcyU::P64;
           P64[Hp - 8] = _sdcyV::P64;
           P64[Hp] = _sdcyZ::P64;
           R3 = Hp - 96;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . eta5_sdcz4_info" {
     eta5_sdcz4_info:
         const eta5_sdcz4_entry;
         const 11;
         const 3852585664527;
         const SddB2_srt+480;
 },
 sat_sdcA7_entry() //  [R1]
         { []
         }
     {offset
       cdfcs: // global
           _sdcA7::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cdfct; else goto cdfcu;
       cdfcu: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cdfcw; else goto cdfcv;
       cdfcw: // global
           HpAlloc = 104;
           goto cdfct;
       cdfct: // global
           R1 = _sdcA7::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfcv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcA7::P64;
           _sdcyL::P64 = P64[_sdcA7::P64 + 16];
           _sdcyM::P64 = P64[_sdcA7::P64 + 24];
           _sdcyN::P64 = P64[_sdcA7::P64 + 32];
           _sdcyO::P64 = P64[_sdcA7::P64 + 40];
           _sdcyP::P64 = P64[_sdcA7::P64 + 48];
           _sdcyQ::P64 = P64[_sdcA7::P64 + 56];
           _sdcyR::P64 = P64[_sdcA7::P64 + 64];
           _sdcyS::P64 = P64[_sdcA7::P64 + 72];
           _sdcyT::P64 = P64[_sdcA7::P64 + 80];
           _sdcyU::P64 = P64[_sdcA7::P64 + 88];
           _sdcyV::P64 = P64[_sdcA7::P64 + 96];
           _sdcyZ::P64 = P64[_sdcA7::P64 + 104];
           I64[Hp - 96] = eta5_sdcz4_info;
           P64[Hp - 80] = _sdcyM::P64;
           P64[Hp - 72] = _sdcyN::P64;
           P64[Hp - 64] = _sdcyO::P64;
           P64[Hp - 56] = _sdcyP::P64;
           P64[Hp - 48] = _sdcyQ::P64;
           P64[Hp - 40] = _sdcyR::P64;
           P64[Hp - 32] = _sdcyS::P64;
           P64[Hp - 24] = _sdcyT::P64;
           P64[Hp - 16] = _sdcyU::P64;
           P64[Hp - 8] = _sdcyV::P64;
           P64[Hp] = _sdcyZ::P64;
           I64[Sp - 32] = block_cdfcl_info;
           R1 = _sdcyL::P64;
           P64[Sp - 24] = Hp - 96;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udfcD; else goto cdfcm;
       udfcD: // global
           call _cdfcl(R1) args: 0, res: 0, upd: 0;
       cdfcm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcA7_info" {
     sat_sdcA7_info:
         const sat_sdcA7_entry;
         const 12;
         const 3852585664527;
         const SddB2_srt+480;
 },
 _cdfcl() //  [R1]
         { []
         }
     {offset
       cdfcl: // global
           _cdf1X::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cdfcp; else goto cdfcq;
       cdfcp: // global
           R3 = _cdf1X::P64;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cdfcq: // global
           R3 = _cdf1X::P64;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdfcl_info" {
     block_cdfcl_info:
         const _cdfcl;
         const 1;
         const 12884901918;
         const SddB2_srt+544;
 },
 sat_sdcA8_entry() //  [R1]
         { []
         }
     {offset
       cdfcE: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto cdfcI; else goto cdfcH;
       cdfcI: // global
           HpAlloc = 112;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfcH: // global
           _sdcyL::P64 = P64[R1 + 16];
           _sdcyM::P64 = P64[R1 + 24];
           _sdcyN::P64 = P64[R1 + 32];
           _sdcyO::P64 = P64[R1 + 40];
           _sdcyP::P64 = P64[R1 + 48];
           _sdcyQ::P64 = P64[R1 + 56];
           _sdcyR::P64 = P64[R1 + 64];
           _sdcyS::P64 = P64[R1 + 72];
           _sdcyT::P64 = P64[R1 + 80];
           _sdcyU::P64 = P64[R1 + 88];
           _sdcyV::P64 = P64[R1 + 96];
           _sdcyZ::P64 = P64[R1 + 104];
           I64[Hp - 104] = sat_sdcA7_info;
           P64[Hp - 88] = _sdcyL::P64;
           P64[Hp - 80] = _sdcyM::P64;
           P64[Hp - 72] = _sdcyN::P64;
           P64[Hp - 64] = _sdcyO::P64;
           P64[Hp - 56] = _sdcyP::P64;
           P64[Hp - 48] = _sdcyQ::P64;
           P64[Hp - 40] = _sdcyR::P64;
           P64[Hp - 32] = _sdcyS::P64;
           P64[Hp - 24] = _sdcyT::P64;
           P64[Hp - 16] = _sdcyU::P64;
           P64[Hp - 8] = _sdcyV::P64;
           P64[Hp] = _sdcyZ::P64;
           R3 = Hp - 104;
           R2 = lvl40_rcV5J_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcA8_info" {
     sat_sdcA8_info:
         const sat_sdcA8_entry;
         const 12;
         const 3852585664527;
         const SddB2_srt+480;
 },
 eta4_sdcz3_entry() //  [R1]
         { []
         }
     {offset
       cdfcJ: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto cdfcN; else goto cdfcM;
       cdfcN: // global
           HpAlloc = 112;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfcM: // global
           _sdcyL::P64 = P64[R1 + 16];
           _sdcyM::P64 = P64[R1 + 24];
           _sdcyN::P64 = P64[R1 + 32];
           _sdcyO::P64 = P64[R1 + 40];
           _sdcyP::P64 = P64[R1 + 48];
           _sdcyQ::P64 = P64[R1 + 56];
           _sdcyR::P64 = P64[R1 + 64];
           _sdcyS::P64 = P64[R1 + 72];
           _sdcyT::P64 = P64[R1 + 80];
           _sdcyU::P64 = P64[R1 + 88];
           _sdcyV::P64 = P64[R1 + 96];
           _sdcyZ::P64 = P64[R1 + 104];
           I64[Hp - 104] = sat_sdcA8_info;
           P64[Hp - 88] = _sdcyL::P64;
           P64[Hp - 80] = _sdcyM::P64;
           P64[Hp - 72] = _sdcyN::P64;
           P64[Hp - 64] = _sdcyO::P64;
           P64[Hp - 56] = _sdcyP::P64;
           P64[Hp - 48] = _sdcyQ::P64;
           P64[Hp - 40] = _sdcyR::P64;
           P64[Hp - 32] = _sdcyS::P64;
           P64[Hp - 24] = _sdcyT::P64;
           P64[Hp - 16] = _sdcyU::P64;
           P64[Hp - 8] = _sdcyV::P64;
           P64[Hp] = _sdcyZ::P64;
           R3 = Hp - 104;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . eta4_sdcz3_info" {
     eta4_sdcz3_info:
         const eta4_sdcz3_entry;
         const 12;
         const 3852585664527;
         const SddB2_srt+480;
 },
 sat_sdcAa_entry() //  [R1]
         { []
         }
     {offset
       cdfcV: // global
           _sdcAa::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cdfcW; else goto cdfcX;
       cdfcX: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto cdfcZ; else goto cdfcY;
       cdfcZ: // global
           HpAlloc = 112;
           goto cdfcW;
       cdfcW: // global
           R1 = _sdcAa::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfcY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcAa::P64;
           _sdcyK::P64 = P64[_sdcAa::P64 + 16];
           _sdcyL::P64 = P64[_sdcAa::P64 + 24];
           _sdcyM::P64 = P64[_sdcAa::P64 + 32];
           _sdcyN::P64 = P64[_sdcAa::P64 + 40];
           _sdcyO::P64 = P64[_sdcAa::P64 + 48];
           _sdcyP::P64 = P64[_sdcAa::P64 + 56];
           _sdcyQ::P64 = P64[_sdcAa::P64 + 64];
           _sdcyR::P64 = P64[_sdcAa::P64 + 72];
           _sdcyS::P64 = P64[_sdcAa::P64 + 80];
           _sdcyT::P64 = P64[_sdcAa::P64 + 88];
           _sdcyU::P64 = P64[_sdcAa::P64 + 96];
           _sdcyV::P64 = P64[_sdcAa::P64 + 104];
           _sdcyZ::P64 = P64[_sdcAa::P64 + 112];
           I64[Hp - 104] = eta4_sdcz3_info;
           P64[Hp - 88] = _sdcyL::P64;
           P64[Hp - 80] = _sdcyM::P64;
           P64[Hp - 72] = _sdcyN::P64;
           P64[Hp - 64] = _sdcyO::P64;
           P64[Hp - 56] = _sdcyP::P64;
           P64[Hp - 48] = _sdcyQ::P64;
           P64[Hp - 40] = _sdcyR::P64;
           P64[Hp - 32] = _sdcyS::P64;
           P64[Hp - 24] = _sdcyT::P64;
           P64[Hp - 16] = _sdcyU::P64;
           P64[Hp - 8] = _sdcyV::P64;
           P64[Hp] = _sdcyZ::P64;
           I64[Sp - 32] = block_cdfcO_info;
           R1 = _sdcyK::P64;
           P64[Sp - 24] = Hp - 104;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udfd6; else goto cdfcP;
       udfd6: // global
           call _cdfcO(R1) args: 0, res: 0, upd: 0;
       cdfcP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcAa_info" {
     sat_sdcAa_info:
         const sat_sdcAa_entry;
         const 13;
         const 3852585664527;
         const SddB2_srt+480;
 },
 _cdfcO() //  [R1]
         { []
         }
     {offset
       cdfcO: // global
           _cdf1L::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cdfcS; else goto cdfcT;
       cdfcS: // global
           R3 = _cdf1L::P64;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cdfcT: // global
           R3 = _cdf1L::P64;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdfcO_info" {
     block_cdfcO_info:
         const _cdfcO;
         const 1;
         const 12884901918;
         const SddB2_srt+544;
 },
 sat_sdcAb_entry() //  [R1]
         { []
         }
     {offset
       cdfd7: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto cdfdb; else goto cdfda;
       cdfdb: // global
           HpAlloc = 120;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfda: // global
           _sdcyK::P64 = P64[R1 + 16];
           _sdcyL::P64 = P64[R1 + 24];
           _sdcyM::P64 = P64[R1 + 32];
           _sdcyN::P64 = P64[R1 + 40];
           _sdcyO::P64 = P64[R1 + 48];
           _sdcyP::P64 = P64[R1 + 56];
           _sdcyQ::P64 = P64[R1 + 64];
           _sdcyR::P64 = P64[R1 + 72];
           _sdcyS::P64 = P64[R1 + 80];
           _sdcyT::P64 = P64[R1 + 88];
           _sdcyU::P64 = P64[R1 + 96];
           _sdcyV::P64 = P64[R1 + 104];
           _sdcyZ::P64 = P64[R1 + 112];
           I64[Hp - 112] = sat_sdcAa_info;
           P64[Hp - 96] = _sdcyK::P64;
           P64[Hp - 88] = _sdcyL::P64;
           P64[Hp - 80] = _sdcyM::P64;
           P64[Hp - 72] = _sdcyN::P64;
           P64[Hp - 64] = _sdcyO::P64;
           P64[Hp - 56] = _sdcyP::P64;
           P64[Hp - 48] = _sdcyQ::P64;
           P64[Hp - 40] = _sdcyR::P64;
           P64[Hp - 32] = _sdcyS::P64;
           P64[Hp - 24] = _sdcyT::P64;
           P64[Hp - 16] = _sdcyU::P64;
           P64[Hp - 8] = _sdcyV::P64;
           P64[Hp] = _sdcyZ::P64;
           R3 = Hp - 112;
           R2 = lvl39_rcV5I_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcAb_info" {
     sat_sdcAb_info:
         const sat_sdcAb_entry;
         const 13;
         const 3852585664527;
         const SddB2_srt+480;
 },
 eta3_sdcz2_entry() //  [R1]
         { []
         }
     {offset
       cdfdc: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto cdfdg; else goto cdfdf;
       cdfdg: // global
           HpAlloc = 120;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfdf: // global
           _sdcyK::P64 = P64[R1 + 16];
           _sdcyL::P64 = P64[R1 + 24];
           _sdcyM::P64 = P64[R1 + 32];
           _sdcyN::P64 = P64[R1 + 40];
           _sdcyO::P64 = P64[R1 + 48];
           _sdcyP::P64 = P64[R1 + 56];
           _sdcyQ::P64 = P64[R1 + 64];
           _sdcyR::P64 = P64[R1 + 72];
           _sdcyS::P64 = P64[R1 + 80];
           _sdcyT::P64 = P64[R1 + 88];
           _sdcyU::P64 = P64[R1 + 96];
           _sdcyV::P64 = P64[R1 + 104];
           _sdcyZ::P64 = P64[R1 + 112];
           I64[Hp - 112] = sat_sdcAb_info;
           P64[Hp - 96] = _sdcyK::P64;
           P64[Hp - 88] = _sdcyL::P64;
           P64[Hp - 80] = _sdcyM::P64;
           P64[Hp - 72] = _sdcyN::P64;
           P64[Hp - 64] = _sdcyO::P64;
           P64[Hp - 56] = _sdcyP::P64;
           P64[Hp - 48] = _sdcyQ::P64;
           P64[Hp - 40] = _sdcyR::P64;
           P64[Hp - 32] = _sdcyS::P64;
           P64[Hp - 24] = _sdcyT::P64;
           P64[Hp - 16] = _sdcyU::P64;
           P64[Hp - 8] = _sdcyV::P64;
           P64[Hp] = _sdcyZ::P64;
           R3 = Hp - 112;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . eta3_sdcz2_info" {
     eta3_sdcz2_info:
         const eta3_sdcz2_entry;
         const 13;
         const 3852585664527;
         const SddB2_srt+480;
 },
 sat_sdcAd_entry() //  [R1]
         { []
         }
     {offset
       cdfdo: // global
           _sdcAd::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cdfdp; else goto cdfdq;
       cdfdq: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto cdfds; else goto cdfdr;
       cdfds: // global
           HpAlloc = 120;
           goto cdfdp;
       cdfdp: // global
           R1 = _sdcAd::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfdr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcAd::P64;
           _sdcyJ::P64 = P64[_sdcAd::P64 + 16];
           _sdcyK::P64 = P64[_sdcAd::P64 + 24];
           _sdcyL::P64 = P64[_sdcAd::P64 + 32];
           _sdcyM::P64 = P64[_sdcAd::P64 + 40];
           _sdcyN::P64 = P64[_sdcAd::P64 + 48];
           _sdcyO::P64 = P64[_sdcAd::P64 + 56];
           _sdcyP::P64 = P64[_sdcAd::P64 + 64];
           _sdcyQ::P64 = P64[_sdcAd::P64 + 72];
           _sdcyR::P64 = P64[_sdcAd::P64 + 80];
           _sdcyS::P64 = P64[_sdcAd::P64 + 88];
           _sdcyT::P64 = P64[_sdcAd::P64 + 96];
           _sdcyU::P64 = P64[_sdcAd::P64 + 104];
           _sdcyV::P64 = P64[_sdcAd::P64 + 112];
           _sdcyZ::P64 = P64[_sdcAd::P64 + 120];
           I64[Hp - 112] = eta3_sdcz2_info;
           P64[Hp - 96] = _sdcyK::P64;
           P64[Hp - 88] = _sdcyL::P64;
           P64[Hp - 80] = _sdcyM::P64;
           P64[Hp - 72] = _sdcyN::P64;
           P64[Hp - 64] = _sdcyO::P64;
           P64[Hp - 56] = _sdcyP::P64;
           P64[Hp - 48] = _sdcyQ::P64;
           P64[Hp - 40] = _sdcyR::P64;
           P64[Hp - 32] = _sdcyS::P64;
           P64[Hp - 24] = _sdcyT::P64;
           P64[Hp - 16] = _sdcyU::P64;
           P64[Hp - 8] = _sdcyV::P64;
           P64[Hp] = _sdcyZ::P64;
           I64[Sp - 32] = block_cdfdh_info;
           R1 = _sdcyJ::P64;
           P64[Sp - 24] = Hp - 112;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udfdz; else goto cdfdi;
       udfdz: // global
           call _cdfdh(R1) args: 0, res: 0, upd: 0;
       cdfdi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcAd_info" {
     sat_sdcAd_info:
         const sat_sdcAd_entry;
         const 14;
         const 3852585664527;
         const SddB2_srt+480;
 },
 _cdfdh() //  [R1]
         { []
         }
     {offset
       cdfdh: // global
           _cdf1z::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cdfdl; else goto cdfdm;
       cdfdl: // global
           R3 = _cdf1z::P64;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cdfdm: // global
           R3 = _cdf1z::P64;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdfdh_info" {
     block_cdfdh_info:
         const _cdfdh;
         const 1;
         const 12884901918;
         const SddB2_srt+544;
 },
 sat_sdcAe_entry() //  [R1]
         { []
         }
     {offset
       cdfdA: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto cdfdE; else goto cdfdD;
       cdfdE: // global
           HpAlloc = 128;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfdD: // global
           _sdcyJ::P64 = P64[R1 + 16];
           _sdcyK::P64 = P64[R1 + 24];
           _sdcyL::P64 = P64[R1 + 32];
           _sdcyM::P64 = P64[R1 + 40];
           _sdcyN::P64 = P64[R1 + 48];
           _sdcyO::P64 = P64[R1 + 56];
           _sdcyP::P64 = P64[R1 + 64];
           _sdcyQ::P64 = P64[R1 + 72];
           _sdcyR::P64 = P64[R1 + 80];
           _sdcyS::P64 = P64[R1 + 88];
           _sdcyT::P64 = P64[R1 + 96];
           _sdcyU::P64 = P64[R1 + 104];
           _sdcyV::P64 = P64[R1 + 112];
           _sdcyZ::P64 = P64[R1 + 120];
           I64[Hp - 120] = sat_sdcAd_info;
           P64[Hp - 104] = _sdcyJ::P64;
           P64[Hp - 96] = _sdcyK::P64;
           P64[Hp - 88] = _sdcyL::P64;
           P64[Hp - 80] = _sdcyM::P64;
           P64[Hp - 72] = _sdcyN::P64;
           P64[Hp - 64] = _sdcyO::P64;
           P64[Hp - 56] = _sdcyP::P64;
           P64[Hp - 48] = _sdcyQ::P64;
           P64[Hp - 40] = _sdcyR::P64;
           P64[Hp - 32] = _sdcyS::P64;
           P64[Hp - 24] = _sdcyT::P64;
           P64[Hp - 16] = _sdcyU::P64;
           P64[Hp - 8] = _sdcyV::P64;
           P64[Hp] = _sdcyZ::P64;
           R3 = Hp - 120;
           R2 = lvl38_rcV5H_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcAe_info" {
     sat_sdcAe_info:
         const sat_sdcAe_entry;
         const 14;
         const 3852585664527;
         const SddB2_srt+480;
 },
 eta2_sdcz1_entry() //  [R1]
         { []
         }
     {offset
       cdfdF: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto cdfdJ; else goto cdfdI;
       cdfdJ: // global
           HpAlloc = 128;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfdI: // global
           _sdcyJ::P64 = P64[R1 + 16];
           _sdcyK::P64 = P64[R1 + 24];
           _sdcyL::P64 = P64[R1 + 32];
           _sdcyM::P64 = P64[R1 + 40];
           _sdcyN::P64 = P64[R1 + 48];
           _sdcyO::P64 = P64[R1 + 56];
           _sdcyP::P64 = P64[R1 + 64];
           _sdcyQ::P64 = P64[R1 + 72];
           _sdcyR::P64 = P64[R1 + 80];
           _sdcyS::P64 = P64[R1 + 88];
           _sdcyT::P64 = P64[R1 + 96];
           _sdcyU::P64 = P64[R1 + 104];
           _sdcyV::P64 = P64[R1 + 112];
           _sdcyZ::P64 = P64[R1 + 120];
           I64[Hp - 120] = sat_sdcAe_info;
           P64[Hp - 104] = _sdcyJ::P64;
           P64[Hp - 96] = _sdcyK::P64;
           P64[Hp - 88] = _sdcyL::P64;
           P64[Hp - 80] = _sdcyM::P64;
           P64[Hp - 72] = _sdcyN::P64;
           P64[Hp - 64] = _sdcyO::P64;
           P64[Hp - 56] = _sdcyP::P64;
           P64[Hp - 48] = _sdcyQ::P64;
           P64[Hp - 40] = _sdcyR::P64;
           P64[Hp - 32] = _sdcyS::P64;
           P64[Hp - 24] = _sdcyT::P64;
           P64[Hp - 16] = _sdcyU::P64;
           P64[Hp - 8] = _sdcyV::P64;
           P64[Hp] = _sdcyZ::P64;
           R3 = Hp - 120;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . eta2_sdcz1_info" {
     eta2_sdcz1_info:
         const eta2_sdcz1_entry;
         const 14;
         const 3852585664527;
         const SddB2_srt+480;
 },
 sat_sdcAg_entry() //  [R1]
         { []
         }
     {offset
       cdfdR: // global
           _sdcAg::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cdfdS; else goto cdfdT;
       cdfdT: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto cdfdV; else goto cdfdU;
       cdfdV: // global
           HpAlloc = 128;
           goto cdfdS;
       cdfdS: // global
           R1 = _sdcAg::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfdU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcAg::P64;
           _sdcyI::P64 = P64[_sdcAg::P64 + 16];
           _sdcyJ::P64 = P64[_sdcAg::P64 + 24];
           _sdcyK::P64 = P64[_sdcAg::P64 + 32];
           _sdcyL::P64 = P64[_sdcAg::P64 + 40];
           _sdcyM::P64 = P64[_sdcAg::P64 + 48];
           _sdcyN::P64 = P64[_sdcAg::P64 + 56];
           _sdcyO::P64 = P64[_sdcAg::P64 + 64];
           _sdcyP::P64 = P64[_sdcAg::P64 + 72];
           _sdcyQ::P64 = P64[_sdcAg::P64 + 80];
           _sdcyR::P64 = P64[_sdcAg::P64 + 88];
           _sdcyS::P64 = P64[_sdcAg::P64 + 96];
           _sdcyT::P64 = P64[_sdcAg::P64 + 104];
           _sdcyU::P64 = P64[_sdcAg::P64 + 112];
           _sdcyV::P64 = P64[_sdcAg::P64 + 120];
           _sdcyZ::P64 = P64[_sdcAg::P64 + 128];
           I64[Hp - 120] = eta2_sdcz1_info;
           P64[Hp - 104] = _sdcyJ::P64;
           P64[Hp - 96] = _sdcyK::P64;
           P64[Hp - 88] = _sdcyL::P64;
           P64[Hp - 80] = _sdcyM::P64;
           P64[Hp - 72] = _sdcyN::P64;
           P64[Hp - 64] = _sdcyO::P64;
           P64[Hp - 56] = _sdcyP::P64;
           P64[Hp - 48] = _sdcyQ::P64;
           P64[Hp - 40] = _sdcyR::P64;
           P64[Hp - 32] = _sdcyS::P64;
           P64[Hp - 24] = _sdcyT::P64;
           P64[Hp - 16] = _sdcyU::P64;
           P64[Hp - 8] = _sdcyV::P64;
           P64[Hp] = _sdcyZ::P64;
           I64[Sp - 32] = block_cdfdK_info;
           R1 = _sdcyI::P64;
           P64[Sp - 24] = Hp - 120;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udfe2; else goto cdfdL;
       udfe2: // global
           call _cdfdK(R1) args: 0, res: 0, upd: 0;
       cdfdL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcAg_info" {
     sat_sdcAg_info:
         const sat_sdcAg_entry;
         const 15;
         const 3852585664527;
         const SddB2_srt+480;
 },
 _cdfdK() //  [R1]
         { []
         }
     {offset
       cdfdK: // global
           _cdf1n::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cdfdO; else goto cdfdP;
       cdfdO: // global
           R3 = _cdf1n::P64;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cdfdP: // global
           R3 = _cdf1n::P64;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdfdK_info" {
     block_cdfdK_info:
         const _cdfdK;
         const 1;
         const 12884901918;
         const SddB2_srt+544;
 },
 sat_sdcAh_entry() //  [R1]
         { []
         }
     {offset
       cdfe3: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto cdfe7; else goto cdfe6;
       cdfe7: // global
           HpAlloc = 136;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfe6: // global
           _sdcyI::P64 = P64[R1 + 16];
           _sdcyJ::P64 = P64[R1 + 24];
           _sdcyK::P64 = P64[R1 + 32];
           _sdcyL::P64 = P64[R1 + 40];
           _sdcyM::P64 = P64[R1 + 48];
           _sdcyN::P64 = P64[R1 + 56];
           _sdcyO::P64 = P64[R1 + 64];
           _sdcyP::P64 = P64[R1 + 72];
           _sdcyQ::P64 = P64[R1 + 80];
           _sdcyR::P64 = P64[R1 + 88];
           _sdcyS::P64 = P64[R1 + 96];
           _sdcyT::P64 = P64[R1 + 104];
           _sdcyU::P64 = P64[R1 + 112];
           _sdcyV::P64 = P64[R1 + 120];
           _sdcyZ::P64 = P64[R1 + 128];
           I64[Hp - 128] = sat_sdcAg_info;
           P64[Hp - 112] = _sdcyI::P64;
           P64[Hp - 104] = _sdcyJ::P64;
           P64[Hp - 96] = _sdcyK::P64;
           P64[Hp - 88] = _sdcyL::P64;
           P64[Hp - 80] = _sdcyM::P64;
           P64[Hp - 72] = _sdcyN::P64;
           P64[Hp - 64] = _sdcyO::P64;
           P64[Hp - 56] = _sdcyP::P64;
           P64[Hp - 48] = _sdcyQ::P64;
           P64[Hp - 40] = _sdcyR::P64;
           P64[Hp - 32] = _sdcyS::P64;
           P64[Hp - 24] = _sdcyT::P64;
           P64[Hp - 16] = _sdcyU::P64;
           P64[Hp - 8] = _sdcyV::P64;
           P64[Hp] = _sdcyZ::P64;
           R3 = Hp - 128;
           R2 = lvl37_rcV5G_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcAh_info" {
     sat_sdcAh_info:
         const sat_sdcAh_entry;
         const 15;
         const 3852585664527;
         const SddB2_srt+480;
 },
 eta1_sdcz0_entry() //  [R1]
         { []
         }
     {offset
       cdfe8: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto cdfec; else goto cdfeb;
       cdfec: // global
           HpAlloc = 136;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfeb: // global
           _sdcyI::P64 = P64[R1 + 16];
           _sdcyJ::P64 = P64[R1 + 24];
           _sdcyK::P64 = P64[R1 + 32];
           _sdcyL::P64 = P64[R1 + 40];
           _sdcyM::P64 = P64[R1 + 48];
           _sdcyN::P64 = P64[R1 + 56];
           _sdcyO::P64 = P64[R1 + 64];
           _sdcyP::P64 = P64[R1 + 72];
           _sdcyQ::P64 = P64[R1 + 80];
           _sdcyR::P64 = P64[R1 + 88];
           _sdcyS::P64 = P64[R1 + 96];
           _sdcyT::P64 = P64[R1 + 104];
           _sdcyU::P64 = P64[R1 + 112];
           _sdcyV::P64 = P64[R1 + 120];
           _sdcyZ::P64 = P64[R1 + 128];
           I64[Hp - 128] = sat_sdcAh_info;
           P64[Hp - 112] = _sdcyI::P64;
           P64[Hp - 104] = _sdcyJ::P64;
           P64[Hp - 96] = _sdcyK::P64;
           P64[Hp - 88] = _sdcyL::P64;
           P64[Hp - 80] = _sdcyM::P64;
           P64[Hp - 72] = _sdcyN::P64;
           P64[Hp - 64] = _sdcyO::P64;
           P64[Hp - 56] = _sdcyP::P64;
           P64[Hp - 48] = _sdcyQ::P64;
           P64[Hp - 40] = _sdcyR::P64;
           P64[Hp - 32] = _sdcyS::P64;
           P64[Hp - 24] = _sdcyT::P64;
           P64[Hp - 16] = _sdcyU::P64;
           P64[Hp - 8] = _sdcyV::P64;
           P64[Hp] = _sdcyZ::P64;
           R3 = Hp - 128;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . eta1_sdcz0_info" {
     eta1_sdcz0_info:
         const eta1_sdcz0_entry;
         const 15;
         const 3852585664527;
         const SddB2_srt+480;
 },
 sat_sdcAj_entry() //  [R1]
         { []
         }
     {offset
       cdfek: // global
           _sdcAj::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cdfel; else goto cdfem;
       cdfem: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto cdfeo; else goto cdfen;
       cdfeo: // global
           HpAlloc = 136;
           goto cdfel;
       cdfel: // global
           R1 = _sdcAj::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfen: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcAj::P64;
           _sdcyH::P64 = P64[_sdcAj::P64 + 16];
           _sdcyI::P64 = P64[_sdcAj::P64 + 24];
           _sdcyJ::P64 = P64[_sdcAj::P64 + 32];
           _sdcyK::P64 = P64[_sdcAj::P64 + 40];
           _sdcyL::P64 = P64[_sdcAj::P64 + 48];
           _sdcyM::P64 = P64[_sdcAj::P64 + 56];
           _sdcyN::P64 = P64[_sdcAj::P64 + 64];
           _sdcyO::P64 = P64[_sdcAj::P64 + 72];
           _sdcyP::P64 = P64[_sdcAj::P64 + 80];
           _sdcyQ::P64 = P64[_sdcAj::P64 + 88];
           _sdcyR::P64 = P64[_sdcAj::P64 + 96];
           _sdcyS::P64 = P64[_sdcAj::P64 + 104];
           _sdcyT::P64 = P64[_sdcAj::P64 + 112];
           _sdcyU::P64 = P64[_sdcAj::P64 + 120];
           _sdcyV::P64 = P64[_sdcAj::P64 + 128];
           _sdcyZ::P64 = P64[_sdcAj::P64 + 136];
           I64[Hp - 128] = eta1_sdcz0_info;
           P64[Hp - 112] = _sdcyI::P64;
           P64[Hp - 104] = _sdcyJ::P64;
           P64[Hp - 96] = _sdcyK::P64;
           P64[Hp - 88] = _sdcyL::P64;
           P64[Hp - 80] = _sdcyM::P64;
           P64[Hp - 72] = _sdcyN::P64;
           P64[Hp - 64] = _sdcyO::P64;
           P64[Hp - 56] = _sdcyP::P64;
           P64[Hp - 48] = _sdcyQ::P64;
           P64[Hp - 40] = _sdcyR::P64;
           P64[Hp - 32] = _sdcyS::P64;
           P64[Hp - 24] = _sdcyT::P64;
           P64[Hp - 16] = _sdcyU::P64;
           P64[Hp - 8] = _sdcyV::P64;
           P64[Hp] = _sdcyZ::P64;
           I64[Sp - 32] = block_cdfed_info;
           R1 = _sdcyH::P64;
           P64[Sp - 24] = Hp - 128;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udfev; else goto cdfee;
       udfev: // global
           call _cdfed(R1) args: 0, res: 0, upd: 0;
       cdfee: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcAj_info" {
     sat_sdcAj_info:
         const sat_sdcAj_entry;
         const 16;
         const 3852585664527;
         const SddB2_srt+480;
 },
 _cdfed() //  [R1]
         { []
         }
     {offset
       cdfed: // global
           _cdf1b::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cdfeh; else goto cdfei;
       cdfeh: // global
           R3 = _cdf1b::P64;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cdfei: // global
           R3 = _cdf1b::P64;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdfed_info" {
     block_cdfed_info:
         const _cdfed;
         const 1;
         const 12884901918;
         const SddB2_srt+544;
 },
 g1_sdcyY_entry() //  [R1, R2]
         { []
         }
     {offset
       cdfew: // global
           Hp = Hp + 144;
           if (Hp > HpLim) (likely: False) goto cdfeA; else goto cdfez;
       cdfeA: // global
           HpAlloc = 144;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdfez: // global
           _sdcyH::P64 = P64[R1 + 7];
           _sdcyI::P64 = P64[R1 + 15];
           _sdcyJ::P64 = P64[R1 + 23];
           _sdcyK::P64 = P64[R1 + 31];
           _sdcyL::P64 = P64[R1 + 39];
           _sdcyM::P64 = P64[R1 + 47];
           _sdcyN::P64 = P64[R1 + 55];
           _sdcyO::P64 = P64[R1 + 63];
           _sdcyP::P64 = P64[R1 + 71];
           _sdcyQ::P64 = P64[R1 + 79];
           _sdcyR::P64 = P64[R1 + 87];
           _sdcyS::P64 = P64[R1 + 95];
           _sdcyT::P64 = P64[R1 + 103];
           _sdcyU::P64 = P64[R1 + 111];
           _sdcyV::P64 = P64[R1 + 119];
           I64[Hp - 136] = sat_sdcAj_info;
           P64[Hp - 120] = _sdcyH::P64;
           P64[Hp - 112] = _sdcyI::P64;
           P64[Hp - 104] = _sdcyJ::P64;
           P64[Hp - 96] = _sdcyK::P64;
           P64[Hp - 88] = _sdcyL::P64;
           P64[Hp - 80] = _sdcyM::P64;
           P64[Hp - 72] = _sdcyN::P64;
           P64[Hp - 64] = _sdcyO::P64;
           P64[Hp - 56] = _sdcyP::P64;
           P64[Hp - 48] = _sdcyQ::P64;
           P64[Hp - 40] = _sdcyR::P64;
           P64[Hp - 32] = _sdcyS::P64;
           P64[Hp - 24] = _sdcyT::P64;
           P64[Hp - 16] = _sdcyU::P64;
           P64[Hp - 8] = _sdcyV::P64;
           P64[Hp] = R2;
           R3 = Hp - 136;
           R2 = lvl36_rcV5F_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . g1_sdcyY_info" {
     g1_sdcyY_info:
         const g1_sdcyY_entry;
         const 15;
         const 3852585664520;
         const 4294967301;
         const SddB2_srt+480;
 },
 sat_sdcAl_entry() //  [R1]
         { []
         }
     {offset
       cdfeI: // global
           R2 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           call g1_sdcyY_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcAl_info" {
     sat_sdcAl_info:
         const sat_sdcAl_entry;
         const 2;
         const 3852585664530;
         const SddB2_srt+480;
 },
 sat_sdcAn_entry() //  [R1]
         { []
         }
     {offset
       cdfeV: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdfeZ; else goto cdfeY;
       cdfeZ: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfeY: // global
           _sdcyF::P64 = P64[R1 + 16];
           _sdcyY::P64 = P64[R1 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _sdcyF::P64;
           R2 = Hp - 14;
           R1 = _sdcyY::P64;
           call g1_sdcyY_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcAn_info" {
     sat_sdcAn_info:
         const sat_sdcAn_entry;
         const 2;
         const 3852585664530;
         const SddB2_srt+480;
 },
 sat_sdcAo_entry() //  [R1]
         { []
         }
     {offset
       cdff0: // global
           _sdcAo::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdff1; else goto cdff2;
       cdff2: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdff4; else goto cdff3;
       cdff4: // global
           HpAlloc = 32;
           goto cdff1;
       cdff1: // global
           R1 = _sdcAo::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdff3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcAo::P64;
           _sdcyF::P64 = P64[_sdcAo::P64 + 16];
           _sdcyY::P64 = P64[_sdcAo::P64 + 24];
           I64[Hp - 24] = sat_sdcAn_info;
           P64[Hp - 8] = _sdcyF::P64;
           P64[Hp] = _sdcyY::P64;
           R3 = Hp - 24;
           R2 = f5_rcV5E_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcAo_info" {
     sat_sdcAo_info:
         const sat_sdcAo_entry;
         const 2;
         const 8250632175634;
         const SddB2_srt+480;
 },
 GHC.RTS.Flags.$fShowDebugFlags_$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdff5: // global
           if ((Sp + -136) < SpLim) (likely: False) goto cdff6; else goto cdff7;
       cdff6: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fShowDebugFlags_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdff7: // global
           I64[Sp - 24] = block_cdf0S_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udffh; else goto cdf0T;
       udffh: // global
           call _cdf0S(R1) args: 0, res: 0, upd: 0;
       cdf0T: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowDebugFlags_$cshowsPrec_info" {
     GHC.RTS.Flags.$fShowDebugFlags_$cshowsPrec_info:
         const GHC.RTS.Flags.$fShowDebugFlags_$cshowsPrec_entry;
         const 0;
         const 17046725197838;
         const 12884901911;
         const SddB2_srt+480;
 },
 _cdf0S() //  [R1]
         { []
         }
     {offset
       cdf0S: // global
           I64[Sp - 112] = block_cdf0X_info;
           _sdcyH::P64 = P64[R1 + 7];
           _sdcyI::P64 = P64[R1 + 15];
           _sdcyJ::P64 = P64[R1 + 23];
           _sdcyK::P64 = P64[R1 + 31];
           _sdcyL::P64 = P64[R1 + 39];
           _sdcyM::P64 = P64[R1 + 47];
           _sdcyN::P64 = P64[R1 + 55];
           _sdcyO::P64 = P64[R1 + 63];
           _sdcyP::P64 = P64[R1 + 71];
           _sdcyQ::P64 = P64[R1 + 79];
           _sdcyR::P64 = P64[R1 + 87];
           _sdcyS::P64 = P64[R1 + 95];
           _sdcyT::P64 = P64[R1 + 103];
           _sdcyU::P64 = P64[R1 + 111];
           _sdcyV::P64 = P64[R1 + 119];
           R1 = P64[Sp + 8];
           P64[Sp - 104] = _sdcyJ::P64;
           P64[Sp - 96] = _sdcyK::P64;
           P64[Sp - 88] = _sdcyL::P64;
           P64[Sp - 80] = _sdcyM::P64;
           P64[Sp - 72] = _sdcyN::P64;
           P64[Sp - 64] = _sdcyO::P64;
           P64[Sp - 56] = _sdcyP::P64;
           P64[Sp - 48] = _sdcyQ::P64;
           P64[Sp - 40] = _sdcyR::P64;
           P64[Sp - 32] = _sdcyS::P64;
           P64[Sp - 24] = _sdcyT::P64;
           P64[Sp - 16] = _sdcyU::P64;
           P64[Sp - 8] = _sdcyV::P64;
           P64[Sp] = _sdcyI::P64;
           P64[Sp + 8] = _sdcyH::P64;
           Sp = Sp - 112;
           if (R1 & 7 != 0) goto udffg; else goto cdf0Y;
       udffg: // global
           call _cdf0X(R1) args: 0, res: 0, upd: 0;
       cdf0Y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdf0S_info" {
     block_cdf0S_info:
         const _cdf0S;
         const 2;
         const 8250632175646;
         const SddB2_srt+480;
 },
 _cdf0X() //  [R1]
         { []
         }
     {offset
       cdf0X: // global
           Hp = Hp + 184;
           if (Hp > HpLim) (likely: False) goto cdffb; else goto cdffa;
       cdffb: // global
           HpAlloc = 184;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdffa: // global
           _sdcyX::I64 = I64[R1 + 7];
           I64[Hp - 176] = g1_sdcyY_info;
           P64[Hp - 168] = P64[Sp + 120];
           P64[Hp - 160] = P64[Sp + 112];
           P64[Hp - 152] = P64[Sp + 8];
           P64[Hp - 144] = P64[Sp + 16];
           P64[Hp - 136] = P64[Sp + 24];
           P64[Hp - 128] = P64[Sp + 32];
           P64[Hp - 120] = P64[Sp + 40];
           P64[Hp - 112] = P64[Sp + 48];
           P64[Hp - 104] = P64[Sp + 56];
           P64[Hp - 96] = P64[Sp + 64];
           P64[Hp - 88] = P64[Sp + 72];
           P64[Hp - 80] = P64[Sp + 80];
           P64[Hp - 72] = P64[Sp + 88];
           P64[Hp - 64] = P64[Sp + 96];
           P64[Hp - 56] = P64[Sp + 104];
           _sdcyF::P64 = P64[Sp + 128];
           _cdf12::P64 = Hp - 175;
           if (%MO_S_Lt_W64(_sdcyX::I64, 11)) goto cdffd; else goto cdfff;
       cdffd: // global
           I64[Hp - 48] = sat_sdcAl_info;
           P64[Hp - 32] = _sdcyF::P64;
           P64[Hp - 24] = _cdf12::P64;
           _cdfeE::P64 = Hp - 48;
           Hp = Hp - 24;
           R3 = _cdfeE::P64;
           R2 = f5_rcV5E_closure;
           Sp = Sp + 136;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cdfff: // global
           I64[Hp - 48] = sat_sdcAo_info;
           P64[Hp - 32] = _sdcyF::P64;
           P64[Hp - 24] = _cdf12::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 136;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdf0X_info" {
     block_cdf0X_info:
         const _cdf0X;
         const 16;
         const 8250632175646;
         const SddB2_srt+480;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.762835788 UTC

[section ""data" . GHC.RTS.Flags.$fShowDebugFlags_$cshow_closure" {
     GHC.RTS.Flags.$fShowDebugFlags_$cshow_closure:
         const GHC.RTS.Flags.$fShowDebugFlags_$cshow_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowDebugFlags_$cshow_entry() //  [R2]
         { []
         }
     {offset
       cdfob: // global
           R4 = GHC.Types.[]_closure+1;
           R3 = R2;
           R2 = GHC.RTS.Flags.$fEnumDoCostCentres10_closure+1;
           call GHC.RTS.Flags.$fShowDebugFlags_$cshowsPrec_entry(R4,
                                                                 R3,
                                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowDebugFlags_$cshow_info" {
     GHC.RTS.Flags.$fShowDebugFlags_$cshow_info:
         const GHC.RTS.Flags.$fShowDebugFlags_$cshow_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SddB2_srt+568;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.766400472 UTC

[section ""data" . GHC.RTS.Flags.$fShowDebugFlags1_closure" {
     GHC.RTS.Flags.$fShowDebugFlags1_closure:
         const GHC.RTS.Flags.$fShowDebugFlags1_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowDebugFlags1_entry() //  [R2, R3]
         { []
         }
     {offset
       cdfon: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.RTS.Flags.$fEnumDoCostCentres10_closure+1;
           call GHC.RTS.Flags.$fShowDebugFlags_$cshowsPrec_entry(R4,
                                                                 R3,
                                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowDebugFlags1_info" {
     GHC.RTS.Flags.$fShowDebugFlags1_info:
         const GHC.RTS.Flags.$fShowDebugFlags1_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const SddB2_srt+568;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.770002378 UTC

[section ""data" . GHC.RTS.Flags.$fShowDebugFlags_$cshowList_closure" {
     GHC.RTS.Flags.$fShowDebugFlags_$cshowList_closure:
         const GHC.RTS.Flags.$fShowDebugFlags_$cshowList_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowDebugFlags_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       cdfoy: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.RTS.Flags.$fShowDebugFlags1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowDebugFlags_$cshowList_info" {
     GHC.RTS.Flags.$fShowDebugFlags_$cshowList_info:
         const GHC.RTS.Flags.$fShowDebugFlags_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const SddB2_srt+576;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.773298654 UTC

[section ""data" . GHC.RTS.Flags.$fShowDebugFlags_closure" {
     GHC.RTS.Flags.$fShowDebugFlags_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.RTS.Flags.$fShowDebugFlags_$cshowsPrec_closure+3;
         const GHC.RTS.Flags.$fShowDebugFlags_$cshow_closure+1;
         const GHC.RTS.Flags.$fShowDebugFlags_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.775001049 UTC

[section ""cstring" . lvl51_rcV5U_bytes" {
     lvl51_rcV5U_bytes:
         I8[] [77,105,115,99,70,108,97,103,115,32,123]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.776700824 UTC

[section ""cstring" . lvl52_rcV5V_bytes" {
     lvl52_rcV5V_bytes:
         I8[] [116,105,99,107,73,110,116,101,114,118,97,108,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.778710332 UTC

[section ""cstring" . lvl53_rcV5W_bytes" {
     lvl53_rcV5W_bytes:
         I8[] [105,110,115,116,97,108,108,83,105,103,110,97,108,72,97,110,100,108,101,114,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.780994428 UTC

[section ""cstring" . lvl54_rcV5X_bytes" {
     lvl54_rcV5X_bytes:
         I8[] [105,110,115,116,97,108,108,83,69,72,72,97,110,100,108,101,114,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.782716928 UTC

[section ""cstring" . lvl55_rcV5Y_bytes" {
     lvl55_rcV5Y_bytes:
         I8[] [103,101,110,101,114,97,116,101,67,114,97,115,104,68,117,109,112,70,105,108,101,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.784350273 UTC

[section ""cstring" . lvl56_rcV5Z_bytes" {
     lvl56_rcV5Z_bytes:
         I8[] [103,101,110,101,114,97,116,101,83,116,97,99,107,84,114,97,99,101,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.786028472 UTC

[section ""cstring" . lvl57_rcV60_bytes" {
     lvl57_rcV60_bytes:
         I8[] [109,97,99,104,105,110,101,82,101,97,100,97,98,108,101,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.787753857 UTC

[section ""cstring" . lvl58_rcV61_bytes" {
     lvl58_rcV61_bytes:
         I8[] [108,105,110,107,101,114,77,101,109,66,97,115,101,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.811087414 UTC

[section ""data" . GHC.RTS.Flags.$w$cshowsPrec6_closure" {
     GHC.RTS.Flags.$w$cshowsPrec6_closure:
         const GHC.RTS.Flags.$w$cshowsPrec6_info;
         const 0;
 },
 GHC.RTS.Flags.$w$cshowsPrec6_slow() //  [R1]
         { []
         }
     {offset
       cdfoP: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.RTS.Flags.$w$cshowsPrec6_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2,
                                                   R1) args: 32, res: 0, upd: 8;
     }
 },
 w1_sdcAA_entry() //  [R1]
         { []
         }
     {offset
       cdfp0: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdfp1; else goto cdfp2;
       cdfp1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfp2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cdfoX_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udfpe; else goto cdfoY;
       udfpe: // global
           call _cdfoX(R1) args: 0, res: 0, upd: 0;
       cdfoY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . w1_sdcAA_info" {
     w1_sdcAA_info:
         const w1_sdcAA_entry;
         const 1;
         const 16;
 },
 _cdfoX() //  [R1]
         { []
         }
     {offset
       cdfoX: // global
           _sdcAC::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_sdcAC::I64, 0)) goto cdfpc; else goto cdfpd;
       cdfpc: // global
           R2 = _sdcAC::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.wordToInteger_entry(R2) args: 24, res: 0, upd: 24;
       cdfpd: // global
           R2 = _sdcAC::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdfoX_info" {
     block_cdfoX_info:
         const _cdfoX;
         const 0;
         const 30;
 },
 sat_sdcAO_entry() //  [R1]
         { []
         }
     {offset
       cdfqQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdfqR; else goto cdfqS;
       cdfqR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfqS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.RTS.Flags.$fShowCCFlags2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcAO_info" {
     sat_sdcAO_info:
         const sat_sdcAO_entry;
         const 1;
         const 16;
 },
 sat_sdcAS_entry() //  [R1]
         { []
         }
     {offset
       cdfqT: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdfqX; else goto cdfqY;
       cdfqX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfqY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cdfqH_info;
           _sdcAG::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _sdcAG::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udfr5; else goto cdfqI;
       udfr5: // global
           call _cdfqH(R1) args: 0, res: 0, upd: 0;
       cdfqI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcAS_info" {
     sat_sdcAS_info:
         const sat_sdcAS_entry;
         const 2;
         const 18;
 },
 _cdfqH() //  [R1]
         { []
         }
     {offset
       cdfqH: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdfr1; else goto cdfr0;
       cdfr1: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdfr0: // global
           _sdcAN::I64 = I64[R1 + 7];
           I64[Hp - 16] = sat_sdcAO_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_cdfqU_info;
           R3 = Hp - 16;
           R2 = _sdcAN::I64;
           Sp = Sp + 8;
           call GHC.Show.$wshowWord_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cdfqH_info" {
     block_cdfqH_info:
         const _cdfqH;
         const 1;
         const 30;
 },
 _cdfqU() //  [R1, R2]
         { []
         }
     {offset
       cdfqU: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdfr4; else goto cdfr3;
       cdfr4: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cdfr3: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdfqU_info" {
     block_cdfqU_info:
         const _cdfqU;
         const 0;
         const 30;
 },
 sat_sdcAT_entry() //  [R1]
         { []
         }
     {offset
       cdfr6: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdfra; else goto cdfr9;
       cdfra: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfr9: // global
           _sdcAz::P64 = P64[R1 + 16];
           _sdcAG::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_sdcAS_info;
           P64[Hp - 8] = _sdcAz::P64;
           P64[Hp] = _sdcAG::P64;
           R3 = Hp - 24;
           R2 = lvl58_rcV61_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcAT_info" {
     sat_sdcAT_info:
         const sat_sdcAT_entry;
         const 2;
         const 18;
 },
 sat_sdcAU_entry() //  [R1]
         { []
         }
     {offset
       cdfrb: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdfrf; else goto cdfre;
       cdfrf: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfre: // global
           _sdcAz::P64 = P64[R1 + 16];
           _sdcAG::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_sdcAT_info;
           P64[Hp - 8] = _sdcAz::P64;
           P64[Hp] = _sdcAG::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcAU_info" {
     sat_sdcAU_info:
         const sat_sdcAU_entry;
         const 2;
         const 4294967314;
         const SddB2_srt+480;
 },
 sat_sdcAX_entry() //  [R1]
         { []
         }
     {offset
       cdfrD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdfrE; else goto cdfrF;
       cdfrE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfrF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.RTS.Flags.$fShowCCFlags2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcAX_info" {
     sat_sdcAX_info:
         const sat_sdcAX_entry;
         const 1;
         const 16;
 },
 sat_sdcB1_entry() //  [R1]
         { []
         }
     {offset
       cdfrG: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdfrK; else goto cdfrL;
       cdfrK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfrL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cdfru_info;
           _sdcAG::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _sdcAG::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udfrS; else goto cdfrv;
       udfrS: // global
           call _cdfru(R1) args: 0, res: 0, upd: 0;
       cdfrv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcB1_info" {
     sat_sdcB1_info:
         const sat_sdcB1_entry;
         const 2;
         const 18;
 },
 _cdfru() //  [R1]
         { []
         }
     {offset
       cdfru: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdfrO; else goto cdfrN;
       cdfrO: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdfrN: // global
           _sdcAW::I64 = I64[R1 + 7];
           I64[Hp - 16] = sat_sdcAX_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_cdfrH_info;
           R3 = Hp - 16;
           R2 = _sdcAW::I64;
           Sp = Sp + 8;
           call GHC.Show.$wshowWord_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cdfru_info" {
     block_cdfru_info:
         const _cdfru;
         const 1;
         const 30;
 },
 _cdfrH() //  [R1, R2]
         { []
         }
     {offset
       cdfrH: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdfrR; else goto cdfrQ;
       cdfrR: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cdfrQ: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdfrH_info" {
     block_cdfrH_info:
         const _cdfrH;
         const 0;
         const 30;
 },
 sat_sdcB2_entry() //  [R1]
         { []
         }
     {offset
       cdfrT: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdfrX; else goto cdfrW;
       cdfrX: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfrW: // global
           _sdcAz::P64 = P64[R1 + 16];
           _sdcAG::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_sdcB1_info;
           P64[Hp - 8] = _sdcAz::P64;
           P64[Hp] = _sdcAG::P64;
           R3 = Hp - 24;
           R2 = lvl58_rcV61_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcB2_info" {
     sat_sdcB2_info:
         const sat_sdcB2_entry;
         const 2;
         const 18;
 },
 sat_sdcB3_entry() //  [R1]
         { []
         }
     {offset
       cdfrY: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdfs2; else goto cdfs1;
       cdfs2: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfs1: // global
           _sdcAz::P64 = P64[R1 + 16];
           _sdcAG::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_sdcB2_info;
           P64[Hp - 8] = _sdcAz::P64;
           P64[Hp] = _sdcAG::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcB3_info" {
     sat_sdcB3_info:
         const sat_sdcB3_entry;
         const 2;
         const 4294967314;
         const SddB2_srt+480;
 },
 sat_sdcB4_entry() //  [R1]
         { []
         }
     {offset
       cdfs7: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdfs8; else goto cdfs9;
       cdfs8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfs9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cdfqq_info;
           _sdcAz::P64 = P64[R1 + 24];
           _sdcAG::P64 = P64[R1 + 32];
           R1 = P64[R1 + 16];
           P64[Sp - 32] = _sdcAz::P64;
           P64[Sp - 24] = _sdcAG::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto udfsg; else goto cdfqr;
       udfsg: // global
           call _cdfqq(R1) args: 0, res: 0, upd: 0;
       cdfqr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcB4_info" {
     sat_sdcB4_info:
         const sat_sdcB4_entry;
         const 3;
         const 3302829850639;
         const SddB2_srt+480;
 },
 _cdfqq() //  [R1]
         { []
         }
     {offset
       cdfqq: // global
           _sdcAz::P64 = P64[Sp + 8];
           _sdcAG::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto cdfs4; else goto cdfs5;
       cdfs4: // global
           Hp = Hp + 32;
           _sdcAL::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cdfsf; else goto cdfsb;
       cdfsb: // global
           I64[Hp - 24] = sat_sdcAU_info;
           P64[Hp - 8] = _sdcAz::P64;
           P64[Hp] = _sdcAG::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cdfs5: // global
           Hp = Hp + 32;
           _sdcAL::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cdfsf; else goto cdfse;
       cdfsf: // global
           HpAlloc = 32;
           R1 = _sdcAL::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdfse: // global
           I64[Hp - 24] = sat_sdcB3_info;
           P64[Hp - 8] = _sdcAz::P64;
           P64[Hp] = _sdcAG::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdfqq_info" {
     block_cdfqq_info:
         const _cdfqq;
         const 2;
         const 3302829850654;
         const SddB2_srt+480;
 },
 sat_sdcB5_entry() //  [R1]
         { []
         }
     {offset
       cdfsh: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdfsl; else goto cdfsk;
       cdfsl: // global
           HpAlloc = 40;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfsk: // global
           _sdcAy::P64 = P64[R1 + 16];
           _sdcAz::P64 = P64[R1 + 24];
           _sdcAG::P64 = P64[R1 + 32];
           I64[Hp - 32] = sat_sdcB4_info;
           P64[Hp - 16] = _sdcAy::P64;
           P64[Hp - 8] = _sdcAz::P64;
           P64[Hp] = _sdcAG::P64;
           R3 = Hp - 32;
           R2 = lvl57_rcV60_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcB5_info" {
     sat_sdcB5_info:
         const sat_sdcB5_entry;
         const 3;
         const 3302829850639;
         const SddB2_srt+480;
 },
 eta3_sdcAK_entry() //  [R1]
         { []
         }
     {offset
       cdfsm: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdfsq; else goto cdfsp;
       cdfsq: // global
           HpAlloc = 40;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfsp: // global
           _sdcAy::P64 = P64[R1 + 16];
           _sdcAz::P64 = P64[R1 + 24];
           _sdcAG::P64 = P64[R1 + 32];
           I64[Hp - 32] = sat_sdcB5_info;
           P64[Hp - 16] = _sdcAy::P64;
           P64[Hp - 8] = _sdcAz::P64;
           P64[Hp] = _sdcAG::P64;
           R3 = Hp - 32;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . eta3_sdcAK_info" {
     eta3_sdcAK_info:
         const eta3_sdcAK_entry;
         const 3;
         const 3302829850639;
         const SddB2_srt+480;
 },
 sat_sdcB7_entry() //  [R1]
         { []
         }
     {offset
       cdfsy: // global
           _sdcB7::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cdfsz; else goto cdfsA;
       cdfsA: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdfsC; else goto cdfsB;
       cdfsC: // global
           HpAlloc = 40;
           goto cdfsz;
       cdfsz: // global
           R1 = _sdcB7::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfsB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcB7::P64;
           _sdcAx::P64 = P64[_sdcB7::P64 + 16];
           _sdcAy::P64 = P64[_sdcB7::P64 + 24];
           _sdcAz::P64 = P64[_sdcB7::P64 + 32];
           _sdcAG::P64 = P64[_sdcB7::P64 + 40];
           I64[Hp - 32] = eta3_sdcAK_info;
           P64[Hp - 16] = _sdcAy::P64;
           P64[Hp - 8] = _sdcAz::P64;
           P64[Hp] = _sdcAG::P64;
           I64[Sp - 32] = block_cdfsr_info;
           R1 = _sdcAx::P64;
           P64[Sp - 24] = Hp - 32;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udfsJ; else goto cdfss;
       udfsJ: // global
           call _cdfsr(R1) args: 0, res: 0, upd: 0;
       cdfss: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcB7_info" {
     sat_sdcB7_info:
         const sat_sdcB7_entry;
         const 4;
         const 3302829850639;
         const SddB2_srt+480;
 },
 _cdfsr() //  [R1]
         { []
         }
     {offset
       cdfsr: // global
           _cdfqe::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cdfsv; else goto cdfsw;
       cdfsv: // global
           R3 = _cdfqe::P64;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cdfsw: // global
           R3 = _cdfqe::P64;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdfsr_info" {
     block_cdfsr_info:
         const _cdfsr;
         const 1;
         const 12884901918;
         const SddB2_srt+544;
 },
 sat_sdcB8_entry() //  [R1]
         { []
         }
     {offset
       cdfsK: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdfsO; else goto cdfsN;
       cdfsO: // global
           HpAlloc = 48;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfsN: // global
           _sdcAx::P64 = P64[R1 + 16];
           _sdcAy::P64 = P64[R1 + 24];
           _sdcAz::P64 = P64[R1 + 32];
           _sdcAG::P64 = P64[R1 + 40];
           I64[Hp - 40] = sat_sdcB7_info;
           P64[Hp - 24] = _sdcAx::P64;
           P64[Hp - 16] = _sdcAy::P64;
           P64[Hp - 8] = _sdcAz::P64;
           P64[Hp] = _sdcAG::P64;
           R3 = Hp - 40;
           R2 = lvl56_rcV5Z_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcB8_info" {
     sat_sdcB8_info:
         const sat_sdcB8_entry;
         const 4;
         const 3302829850639;
         const SddB2_srt+480;
 },
 eta2_sdcAJ_entry() //  [R1]
         { []
         }
     {offset
       cdfsP: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdfsT; else goto cdfsS;
       cdfsT: // global
           HpAlloc = 48;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfsS: // global
           _sdcAx::P64 = P64[R1 + 16];
           _sdcAy::P64 = P64[R1 + 24];
           _sdcAz::P64 = P64[R1 + 32];
           _sdcAG::P64 = P64[R1 + 40];
           I64[Hp - 40] = sat_sdcB8_info;
           P64[Hp - 24] = _sdcAx::P64;
           P64[Hp - 16] = _sdcAy::P64;
           P64[Hp - 8] = _sdcAz::P64;
           P64[Hp] = _sdcAG::P64;
           R3 = Hp - 40;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . eta2_sdcAJ_info" {
     eta2_sdcAJ_info:
         const eta2_sdcAJ_entry;
         const 4;
         const 3302829850639;
         const SddB2_srt+480;
 },
 sat_sdcBa_entry() //  [R1]
         { []
         }
     {offset
       cdft1: // global
           _sdcBa::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cdft2; else goto cdft3;
       cdft3: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdft5; else goto cdft4;
       cdft5: // global
           HpAlloc = 48;
           goto cdft2;
       cdft2: // global
           R1 = _sdcBa::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdft4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcBa::P64;
           _sdcAw::P64 = P64[_sdcBa::P64 + 16];
           _sdcAx::P64 = P64[_sdcBa::P64 + 24];
           _sdcAy::P64 = P64[_sdcBa::P64 + 32];
           _sdcAz::P64 = P64[_sdcBa::P64 + 40];
           _sdcAG::P64 = P64[_sdcBa::P64 + 48];
           I64[Hp - 40] = eta2_sdcAJ_info;
           P64[Hp - 24] = _sdcAx::P64;
           P64[Hp - 16] = _sdcAy::P64;
           P64[Hp - 8] = _sdcAz::P64;
           P64[Hp] = _sdcAG::P64;
           I64[Sp - 32] = block_cdfsU_info;
           R1 = _sdcAw::P64;
           P64[Sp - 24] = Hp - 40;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udftc; else goto cdfsV;
       udftc: // global
           call _cdfsU(R1) args: 0, res: 0, upd: 0;
       cdfsV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcBa_info" {
     sat_sdcBa_info:
         const sat_sdcBa_entry;
         const 5;
         const 3302829850639;
         const SddB2_srt+480;
 },
 _cdfsU() //  [R1]
         { []
         }
     {offset
       cdfsU: // global
           _cdfq2::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cdfsY; else goto cdfsZ;
       cdfsY: // global
           R3 = _cdfq2::P64;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cdfsZ: // global
           R3 = _cdfq2::P64;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdfsU_info" {
     block_cdfsU_info:
         const _cdfsU;
         const 1;
         const 12884901918;
         const SddB2_srt+544;
 },
 sat_sdcBb_entry() //  [R1]
         { []
         }
     {offset
       cdftd: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdfth; else goto cdftg;
       cdfth: // global
           HpAlloc = 56;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdftg: // global
           _sdcAw::P64 = P64[R1 + 16];
           _sdcAx::P64 = P64[R1 + 24];
           _sdcAy::P64 = P64[R1 + 32];
           _sdcAz::P64 = P64[R1 + 40];
           _sdcAG::P64 = P64[R1 + 48];
           I64[Hp - 48] = sat_sdcBa_info;
           P64[Hp - 32] = _sdcAw::P64;
           P64[Hp - 24] = _sdcAx::P64;
           P64[Hp - 16] = _sdcAy::P64;
           P64[Hp - 8] = _sdcAz::P64;
           P64[Hp] = _sdcAG::P64;
           R3 = Hp - 48;
           R2 = lvl55_rcV5Y_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcBb_info" {
     sat_sdcBb_info:
         const sat_sdcBb_entry;
         const 5;
         const 3302829850639;
         const SddB2_srt+480;
 },
 eta1_sdcAI_entry() //  [R1]
         { []
         }
     {offset
       cdfti: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdftm; else goto cdftl;
       cdftm: // global
           HpAlloc = 56;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdftl: // global
           _sdcAw::P64 = P64[R1 + 16];
           _sdcAx::P64 = P64[R1 + 24];
           _sdcAy::P64 = P64[R1 + 32];
           _sdcAz::P64 = P64[R1 + 40];
           _sdcAG::P64 = P64[R1 + 48];
           I64[Hp - 48] = sat_sdcBb_info;
           P64[Hp - 32] = _sdcAw::P64;
           P64[Hp - 24] = _sdcAx::P64;
           P64[Hp - 16] = _sdcAy::P64;
           P64[Hp - 8] = _sdcAz::P64;
           P64[Hp] = _sdcAG::P64;
           R3 = Hp - 48;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . eta1_sdcAI_info" {
     eta1_sdcAI_info:
         const eta1_sdcAI_entry;
         const 5;
         const 3302829850639;
         const SddB2_srt+480;
 },
 sat_sdcBd_entry() //  [R1]
         { []
         }
     {offset
       cdftu: // global
           _sdcBd::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cdftv; else goto cdftw;
       cdftw: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdfty; else goto cdftx;
       cdfty: // global
           HpAlloc = 56;
           goto cdftv;
       cdftv: // global
           R1 = _sdcBd::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdftx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcBd::P64;
           _sdcAv::P64 = P64[_sdcBd::P64 + 16];
           _sdcAw::P64 = P64[_sdcBd::P64 + 24];
           _sdcAx::P64 = P64[_sdcBd::P64 + 32];
           _sdcAy::P64 = P64[_sdcBd::P64 + 40];
           _sdcAz::P64 = P64[_sdcBd::P64 + 48];
           _sdcAG::P64 = P64[_sdcBd::P64 + 56];
           I64[Hp - 48] = eta1_sdcAI_info;
           P64[Hp - 32] = _sdcAw::P64;
           P64[Hp - 24] = _sdcAx::P64;
           P64[Hp - 16] = _sdcAy::P64;
           P64[Hp - 8] = _sdcAz::P64;
           P64[Hp] = _sdcAG::P64;
           I64[Sp - 32] = block_cdftn_info;
           R1 = _sdcAv::P64;
           P64[Sp - 24] = Hp - 48;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udftF; else goto cdfto;
       udftF: // global
           call _cdftn(R1) args: 0, res: 0, upd: 0;
       cdfto: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcBd_info" {
     sat_sdcBd_info:
         const sat_sdcBd_entry;
         const 6;
         const 3302829850639;
         const SddB2_srt+480;
 },
 _cdftn() //  [R1]
         { []
         }
     {offset
       cdftn: // global
           _cdfpQ::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cdftr; else goto cdfts;
       cdftr: // global
           R3 = _cdfpQ::P64;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cdfts: // global
           R3 = _cdfpQ::P64;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdftn_info" {
     block_cdftn_info:
         const _cdftn;
         const 1;
         const 12884901918;
         const SddB2_srt+544;
 },
 sat_sdcBe_entry() //  [R1]
         { []
         }
     {offset
       cdftG: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdftK; else goto cdftJ;
       cdftK: // global
           HpAlloc = 64;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdftJ: // global
           _sdcAv::P64 = P64[R1 + 16];
           _sdcAw::P64 = P64[R1 + 24];
           _sdcAx::P64 = P64[R1 + 32];
           _sdcAy::P64 = P64[R1 + 40];
           _sdcAz::P64 = P64[R1 + 48];
           _sdcAG::P64 = P64[R1 + 56];
           I64[Hp - 56] = sat_sdcBd_info;
           P64[Hp - 40] = _sdcAv::P64;
           P64[Hp - 32] = _sdcAw::P64;
           P64[Hp - 24] = _sdcAx::P64;
           P64[Hp - 16] = _sdcAy::P64;
           P64[Hp - 8] = _sdcAz::P64;
           P64[Hp] = _sdcAG::P64;
           R3 = Hp - 56;
           R2 = lvl54_rcV5X_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcBe_info" {
     sat_sdcBe_info:
         const sat_sdcBe_entry;
         const 6;
         const 3302829850639;
         const SddB2_srt+480;
 },
 eta_sdcAH_entry() //  [R1]
         { []
         }
     {offset
       cdftL: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdftP; else goto cdftO;
       cdftP: // global
           HpAlloc = 64;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdftO: // global
           _sdcAv::P64 = P64[R1 + 16];
           _sdcAw::P64 = P64[R1 + 24];
           _sdcAx::P64 = P64[R1 + 32];
           _sdcAy::P64 = P64[R1 + 40];
           _sdcAz::P64 = P64[R1 + 48];
           _sdcAG::P64 = P64[R1 + 56];
           I64[Hp - 56] = sat_sdcBe_info;
           P64[Hp - 40] = _sdcAv::P64;
           P64[Hp - 32] = _sdcAw::P64;
           P64[Hp - 24] = _sdcAx::P64;
           P64[Hp - 16] = _sdcAy::P64;
           P64[Hp - 8] = _sdcAz::P64;
           P64[Hp] = _sdcAG::P64;
           R3 = Hp - 56;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . eta_sdcAH_info" {
     eta_sdcAH_info:
         const eta_sdcAH_entry;
         const 6;
         const 3302829850639;
         const SddB2_srt+480;
 },
 sat_sdcBg_entry() //  [R1]
         { []
         }
     {offset
       cdftX: // global
           _sdcBg::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cdftY; else goto cdftZ;
       cdftZ: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdfu1; else goto cdfu0;
       cdfu1: // global
           HpAlloc = 64;
           goto cdftY;
       cdftY: // global
           R1 = _sdcBg::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfu0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcBg::P64;
           _sdcAu::P64 = P64[_sdcBg::P64 + 16];
           _sdcAv::P64 = P64[_sdcBg::P64 + 24];
           _sdcAw::P64 = P64[_sdcBg::P64 + 32];
           _sdcAx::P64 = P64[_sdcBg::P64 + 40];
           _sdcAy::P64 = P64[_sdcBg::P64 + 48];
           _sdcAz::P64 = P64[_sdcBg::P64 + 56];
           _sdcAG::P64 = P64[_sdcBg::P64 + 64];
           I64[Hp - 56] = eta_sdcAH_info;
           P64[Hp - 40] = _sdcAv::P64;
           P64[Hp - 32] = _sdcAw::P64;
           P64[Hp - 24] = _sdcAx::P64;
           P64[Hp - 16] = _sdcAy::P64;
           P64[Hp - 8] = _sdcAz::P64;
           P64[Hp] = _sdcAG::P64;
           I64[Sp - 32] = block_cdftQ_info;
           R1 = _sdcAu::P64;
           P64[Sp - 24] = Hp - 56;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udfu8; else goto cdftR;
       udfu8: // global
           call _cdftQ(R1) args: 0, res: 0, upd: 0;
       cdftR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcBg_info" {
     sat_sdcBg_info:
         const sat_sdcBg_entry;
         const 7;
         const 3302829850639;
         const SddB2_srt+480;
 },
 _cdftQ() //  [R1]
         { []
         }
     {offset
       cdftQ: // global
           _cdfpE::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cdftU; else goto cdftV;
       cdftU: // global
           R3 = _cdfpE::P64;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cdftV: // global
           R3 = _cdfpE::P64;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdftQ_info" {
     block_cdftQ_info:
         const _cdftQ;
         const 1;
         const 12884901918;
         const SddB2_srt+544;
 },
 sat_sdcBh_entry() //  [R1]
         { []
         }
     {offset
       cdfu9: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdfud; else goto cdfuc;
       cdfud: // global
           HpAlloc = 72;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfuc: // global
           _sdcAu::P64 = P64[R1 + 16];
           _sdcAv::P64 = P64[R1 + 24];
           _sdcAw::P64 = P64[R1 + 32];
           _sdcAx::P64 = P64[R1 + 40];
           _sdcAy::P64 = P64[R1 + 48];
           _sdcAz::P64 = P64[R1 + 56];
           _sdcAG::P64 = P64[R1 + 64];
           I64[Hp - 64] = sat_sdcBg_info;
           P64[Hp - 48] = _sdcAu::P64;
           P64[Hp - 40] = _sdcAv::P64;
           P64[Hp - 32] = _sdcAw::P64;
           P64[Hp - 24] = _sdcAx::P64;
           P64[Hp - 16] = _sdcAy::P64;
           P64[Hp - 8] = _sdcAz::P64;
           P64[Hp] = _sdcAG::P64;
           R3 = Hp - 64;
           R2 = lvl53_rcV5W_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcBh_info" {
     sat_sdcBh_info:
         const sat_sdcBh_entry;
         const 7;
         const 3302829850639;
         const SddB2_srt+480;
 },
 sat_sdcBi_entry() //  [R1]
         { []
         }
     {offset
       cdfue: // global
           _sdcBi::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdfuf; else goto cdfug;
       cdfug: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdfui; else goto cdfuh;
       cdfui: // global
           HpAlloc = 72;
           goto cdfuf;
       cdfuf: // global
           R1 = _sdcBi::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfuh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcBi::P64;
           _sdcAu::P64 = P64[_sdcBi::P64 + 16];
           _sdcAv::P64 = P64[_sdcBi::P64 + 24];
           _sdcAw::P64 = P64[_sdcBi::P64 + 32];
           _sdcAx::P64 = P64[_sdcBi::P64 + 40];
           _sdcAy::P64 = P64[_sdcBi::P64 + 48];
           _sdcAz::P64 = P64[_sdcBi::P64 + 56];
           _sdcAG::P64 = P64[_sdcBi::P64 + 64];
           I64[Hp - 64] = sat_sdcBh_info;
           P64[Hp - 48] = _sdcAu::P64;
           P64[Hp - 40] = _sdcAv::P64;
           P64[Hp - 32] = _sdcAw::P64;
           P64[Hp - 24] = _sdcAx::P64;
           P64[Hp - 16] = _sdcAy::P64;
           P64[Hp - 8] = _sdcAz::P64;
           P64[Hp] = _sdcAG::P64;
           R3 = Hp - 64;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcBi_info" {
     sat_sdcBi_info:
         const sat_sdcBi_entry;
         const 7;
         const 3302829850639;
         const SddB2_srt+480;
 },
 sat_sdcBm_entry() //  [R1]
         { []
         }
     {offset
       cdfum: // global
           _sdcBm::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cdfun; else goto cdfuo;
       cdfuo: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdfuq; else goto cdfup;
       cdfuq: // global
           HpAlloc = 72;
           goto cdfun;
       cdfun: // global
           R1 = _sdcBm::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfup: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcBm::P64;
           _sdcAu::P64 = P64[_sdcBm::P64 + 16];
           _sdcAv::P64 = P64[_sdcBm::P64 + 24];
           _sdcAw::P64 = P64[_sdcBm::P64 + 32];
           _sdcAx::P64 = P64[_sdcBm::P64 + 40];
           _sdcAy::P64 = P64[_sdcBm::P64 + 48];
           _sdcAz::P64 = P64[_sdcBm::P64 + 56];
           _sdcAA::P64 = P64[_sdcBm::P64 + 64];
           _sdcAG::P64 = P64[_sdcBm::P64 + 72];
           I64[Hp - 64] = sat_sdcBi_info;
           P64[Hp - 48] = _sdcAu::P64;
           P64[Hp - 40] = _sdcAv::P64;
           P64[Hp - 32] = _sdcAw::P64;
           P64[Hp - 24] = _sdcAx::P64;
           P64[Hp - 16] = _sdcAy::P64;
           P64[Hp - 8] = _sdcAz::P64;
           P64[Hp] = _sdcAG::P64;
           I64[Sp - 24] = block_cdfuj_info;
           R4 = Hp - 64;
           R3 = _sdcAA::P64;
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcBm_info" {
     sat_sdcBm_info:
         const sat_sdcBm_entry;
         const 8;
         const 13528395363123215;
         const SddB2_srt+384;
 },
 _cdfuj() //  [R1, R2]
         { []
         }
     {offset
       cdfuj: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdfut; else goto cdfus;
       cdfut: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cdfus: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdfuj_info" {
     block_cdfuj_info:
         const _cdfuj;
         const 0;
         const 30;
 },
 sat_sdcBn_entry() //  [R1]
         { []
         }
     {offset
       cdfuu: // global
           _sdcBn::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdfuv; else goto cdfuw;
       cdfuw: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cdfuy; else goto cdfux;
       cdfuy: // global
           HpAlloc = 80;
           goto cdfuv;
       cdfuv: // global
           R1 = _sdcBn::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfux: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcBn::P64;
           _sdcAu::P64 = P64[_sdcBn::P64 + 16];
           _sdcAv::P64 = P64[_sdcBn::P64 + 24];
           _sdcAw::P64 = P64[_sdcBn::P64 + 32];
           _sdcAx::P64 = P64[_sdcBn::P64 + 40];
           _sdcAy::P64 = P64[_sdcBn::P64 + 48];
           _sdcAz::P64 = P64[_sdcBn::P64 + 56];
           _sdcAA::P64 = P64[_sdcBn::P64 + 64];
           _sdcAG::P64 = P64[_sdcBn::P64 + 72];
           I64[Hp - 72] = sat_sdcBm_info;
           P64[Hp - 56] = _sdcAu::P64;
           P64[Hp - 48] = _sdcAv::P64;
           P64[Hp - 40] = _sdcAw::P64;
           P64[Hp - 32] = _sdcAx::P64;
           P64[Hp - 24] = _sdcAy::P64;
           P64[Hp - 16] = _sdcAz::P64;
           P64[Hp - 8] = _sdcAA::P64;
           P64[Hp] = _sdcAG::P64;
           R3 = Hp - 72;
           R2 = lvl52_rcV5V_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcBn_info" {
     sat_sdcBn_info:
         const sat_sdcBn_entry;
         const 8;
         const 13528395363123215;
         const SddB2_srt+384;
 },
 p_sdcAF_entry() //  [R1, R2]
         { []
         }
     {offset
       cdfuz: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cdfuD; else goto cdfuC;
       cdfuD: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdfuC: // global
           _sdcAu::P64 = P64[R1 + 7];
           _sdcAv::P64 = P64[R1 + 15];
           _sdcAw::P64 = P64[R1 + 23];
           _sdcAx::P64 = P64[R1 + 31];
           _sdcAy::P64 = P64[R1 + 39];
           _sdcAz::P64 = P64[R1 + 47];
           _sdcAA::P64 = P64[R1 + 55];
           I64[Hp - 72] = sat_sdcBn_info;
           P64[Hp - 56] = _sdcAu::P64;
           P64[Hp - 48] = _sdcAv::P64;
           P64[Hp - 40] = _sdcAw::P64;
           P64[Hp - 32] = _sdcAx::P64;
           P64[Hp - 24] = _sdcAy::P64;
           P64[Hp - 16] = _sdcAz::P64;
           P64[Hp - 8] = _sdcAA::P64;
           P64[Hp] = R2;
           R3 = Hp - 72;
           R2 = lvl51_rcV5U_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . p_sdcAF_info" {
     p_sdcAF_info:
         const p_sdcAF_entry;
         const 7;
         const 13528395363123208;
         const 4294967301;
         const SddB2_srt+384;
 },
 sat_sdcBr_entry() //  [R1]
         { []
         }
     {offset
       cdfuS: // global
           _sdcBr::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdfuT; else goto cdfuU;
       cdfuU: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdfuW; else goto cdfuV;
       cdfuW: // global
           HpAlloc = 24;
           goto cdfuT;
       cdfuT: // global
           R1 = _sdcBr::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfuV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcBr::P64;
           _sdcAF::P64 = P64[_sdcBr::P64 + 16];
           _sdcBp::P64 = P64[_sdcBr::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _sdcBp::P64;
           R2 = Hp - 14;
           R1 = _sdcAF::P64;
           Sp = Sp - 16;
           call p_sdcAF_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcBr_info" {
     sat_sdcBr_info:
         const sat_sdcBr_entry;
         const 2;
         const 13528395363123218;
         const SddB2_srt+384;
 },
 sat_sdcBs_entry() //  [R1, R2]
         { []
         }
     {offset
       cdfuY: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdfv2; else goto cdfv1;
       cdfv2: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdfv1: // global
           _sdcAF::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_sdcBr_info;
           P64[Hp - 32] = _sdcAF::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcBs_info" {
     sat_sdcBs_info:
         const sat_sdcBs_entry;
         const 1;
         const 13528395363123209;
         const 4294967301;
         const SddB2_srt+384;
 },
 GHC.RTS.Flags.$w$cshowsPrec6_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cdfv6: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cdfva; else goto cdfv9;
       cdfva: // global
           HpAlloc = 104;
           R1 = GHC.RTS.Flags.$w$cshowsPrec6_closure;
           I64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 72, res: 0, upd: 8;
       cdfv9: // global
           I64[Hp - 96] = w1_sdcAA_info;
           P64[Hp - 80] = R3;
           I64[Hp - 72] = p_sdcAF_info;
           P64[Hp - 64] = R4;
           P64[Hp - 56] = R5;
           P64[Hp - 48] = R6;
           P64[Hp - 40] = P64[Sp];
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = Hp - 96;
           _cdfpf::P64 = Hp - 71;
           if (%MO_S_Lt_W64(R2, 11)) goto cdfv4; else goto cdfv5;
       cdfv4: // global
           Hp = Hp - 16;
           R1 = _cdfpf::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdfv5: // global
           I64[Hp - 8] = sat_sdcBs_info;
           P64[Hp] = _cdfpf::P64;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$w$cshowsPrec6_info" {
     GHC.RTS.Flags.$w$cshowsPrec6_info:
         const GHC.RTS.Flags.$w$cshowsPrec6_entry;
         const 0;
         const 157643583438979086;
         const 34359738368;
         const SddB2_srt+384;
         const 72;
         const GHC.RTS.Flags.$w$cshowsPrec6_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.89439766 UTC

[section ""data" . GHC.RTS.Flags.$fShowMiscFlags_$cshowsPrec_closure" {
     GHC.RTS.Flags.$fShowMiscFlags_$cshowsPrec_closure:
         const GHC.RTS.Flags.$fShowMiscFlags_$cshowsPrec_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowMiscFlags_$cshowsPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       cdfz6: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdfza; else goto cdfzb;
       cdfza: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fShowMiscFlags_$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdfzb: // global
           I64[Sp - 16] = block_cdfz3_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udfzj; else goto cdfz4;
       udfzj: // global
           call _cdfz3(R1) args: 0, res: 0, upd: 0;
       cdfz4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowMiscFlags_$cshowsPrec_info" {
     GHC.RTS.Flags.$fShowMiscFlags_$cshowsPrec_info:
         const GHC.RTS.Flags.$fShowMiscFlags_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SddB2_srt+584;
 },
 _cdfz3() //  [R1]
         { []
         }
     {offset
       cdfz3: // global
           I64[Sp] = block_cdfz9_info;
           _sdcBw::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _sdcBw::I64;
           if (R1 & 7 != 0) goto udfzi; else goto cdfzd;
       udfzi: // global
           call _cdfz9(R1) args: 0, res: 0, upd: 0;
       cdfzd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdfz3_info" {
     block_cdfz3_info:
         const _cdfz3;
         const 1;
         const 4294967326;
         const SddB2_srt+584;
 },
 _cdfz9() //  [R1]
         { []
         }
     {offset
       cdfz9: // global
           R6 = P64[R1 + 31];
           R5 = P64[R1 + 23];
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = I64[Sp + 8];
           P64[Sp - 8] = P64[R1 + 39];
           P64[Sp] = P64[R1 + 47];
           P64[Sp + 8] = P64[R1 + 55];
           Sp = Sp - 8;
           call GHC.RTS.Flags.$w$cshowsPrec6_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdfz9_info" {
     block_cdfz9_info:
         const _cdfz9;
         const 65;
         const 4294967326;
         const SddB2_srt+584;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.902146128 UTC

[section ""data" . GHC.RTS.Flags.$fShowMiscFlags_$cshow_closure" {
     GHC.RTS.Flags.$fShowMiscFlags_$cshow_closure:
         const GHC.RTS.Flags.$fShowMiscFlags_$cshow_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowMiscFlags_$cshow_entry() //  [R2]
         { []
         }
     {offset
       cdfzJ: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdfzK; else goto cdfzL;
       cdfzK: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.$fShowMiscFlags_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdfzL: // global
           I64[Sp - 8] = block_cdfzG_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udfzP; else goto cdfzH;
       udfzP: // global
           call _cdfzG(R1) args: 0, res: 0, upd: 0;
       cdfzH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowMiscFlags_$cshow_info" {
     GHC.RTS.Flags.$fShowMiscFlags_$cshow_info:
         const GHC.RTS.Flags.$fShowMiscFlags_$cshow_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const SddB2_srt+584;
 },
 _cdfzG() //  [R1]
         { []
         }
     {offset
       cdfzG: // global
           R6 = P64[R1 + 31];
           R5 = P64[R1 + 23];
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = 0;
           P64[Sp - 32] = P64[R1 + 39];
           P64[Sp - 24] = P64[R1 + 47];
           P64[Sp - 16] = P64[R1 + 55];
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = GHC.Types.[]_closure+1;
           Sp = Sp - 32;
           call GHC.RTS.Flags.$w$cshowsPrec6_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdfzG_info" {
     block_cdfzG_info:
         const _cdfzG;
         const 0;
         const 4294967326;
         const SddB2_srt+584;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.908099114 UTC

[section ""data" . GHC.RTS.Flags.$fShowMiscFlags1_closure" {
     GHC.RTS.Flags.$fShowMiscFlags1_closure:
         const GHC.RTS.Flags.$fShowMiscFlags1_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowMiscFlags1_entry() //  [R2]
         { []
         }
     {offset
       cdfAd: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdfAe; else goto cdfAf;
       cdfAe: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.$fShowMiscFlags1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdfAf: // global
           I64[Sp - 8] = block_cdfAa_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udfAj; else goto cdfAb;
       udfAj: // global
           call _cdfAa(R1) args: 0, res: 0, upd: 0;
       cdfAb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowMiscFlags1_info" {
     GHC.RTS.Flags.$fShowMiscFlags1_info:
         const GHC.RTS.Flags.$fShowMiscFlags1_entry;
         const 0;
         const 38654705678;
         const 4294967301;
         const SddB2_srt+584;
 },
 _cdfAa() //  [R1]
         { []
         }
     {offset
       cdfAa: // global
           R6 = P64[R1 + 31];
           R5 = P64[R1 + 23];
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = 0;
           P64[Sp - 16] = P64[R1 + 39];
           P64[Sp - 8] = P64[R1 + 47];
           P64[Sp] = P64[R1 + 55];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$cshowsPrec6_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdfAa_info" {
     block_cdfAa_info:
         const _cdfAa;
         const 0;
         const 4294967326;
         const SddB2_srt+584;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.913514691 UTC

[section ""data" . GHC.RTS.Flags.$fShowMiscFlags_$cshowList_closure" {
     GHC.RTS.Flags.$fShowMiscFlags_$cshowList_closure:
         const GHC.RTS.Flags.$fShowMiscFlags_$cshowList_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowMiscFlags_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       cdfAB: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.RTS.Flags.$fShowMiscFlags1_closure+1;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowMiscFlags_$cshowList_info" {
     GHC.RTS.Flags.$fShowMiscFlags_$cshowList_info:
         const GHC.RTS.Flags.$fShowMiscFlags_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const SddB2_srt+608;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.916748267 UTC

[section ""data" . GHC.RTS.Flags.$fShowMiscFlags_closure" {
     GHC.RTS.Flags.$fShowMiscFlags_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.RTS.Flags.$fShowMiscFlags_$cshowsPrec_closure+2;
         const GHC.RTS.Flags.$fShowMiscFlags_$cshow_closure+1;
         const GHC.RTS.Flags.$fShowMiscFlags_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.918552992 UTC

[section ""cstring" . GHC.RTS.Flags.$fShowConcFlags4_bytes" {
     GHC.RTS.Flags.$fShowConcFlags4_bytes:
         I8[] [67,111,110,99,70,108,97,103,115,32,123]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.920321108 UTC

[section ""cstring" . GHC.RTS.Flags.$fShowConcFlags3_bytes" {
     GHC.RTS.Flags.$fShowConcFlags3_bytes:
         I8[] [99,116,120,116,83,119,105,116,99,104,84,105,109,101,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.922505184 UTC

[section ""cstring" . GHC.RTS.Flags.$fShowConcFlags2_bytes" {
     GHC.RTS.Flags.$fShowConcFlags2_bytes:
         I8[] [99,116,120,116,83,119,105,116,99,104,84,105,99,107,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.931468595 UTC

[section ""data" . GHC.RTS.Flags.$w$cshowsPrec2_closure" {
     GHC.RTS.Flags.$w$cshowsPrec2_closure:
         const GHC.RTS.Flags.$w$cshowsPrec2_info;
         const 0;
 },
 w1_sdcC2_entry() //  [R1]
         { []
         }
     {offset
       cdfAX: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdfAY; else goto cdfAZ;
       cdfAY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfAZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cdfAU_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udfBb; else goto cdfAV;
       udfBb: // global
           call _cdfAU(R1) args: 0, res: 0, upd: 0;
       cdfAV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . w1_sdcC2_info" {
     w1_sdcC2_info:
         const w1_sdcC2_entry;
         const 1;
         const 16;
 },
 _cdfAU() //  [R1]
         { []
         }
     {offset
       cdfAU: // global
           _sdcC4::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_sdcC4::I64, 0)) goto cdfB9; else goto cdfBa;
       cdfB9: // global
           R2 = _sdcC4::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.wordToInteger_entry(R2) args: 24, res: 0, upd: 24;
       cdfBa: // global
           R2 = _sdcC4::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdfAU_info" {
     block_cdfAU_info:
         const _cdfAU;
         const 0;
         const 30;
 },
 sat_sdcCb_entry() //  [R1]
         { []
         }
     {offset
       cdfBK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdfBL; else goto cdfBM;
       cdfBL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfBM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.RTS.Flags.$fShowCCFlags2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcCb_info" {
     sat_sdcCb_info:
         const sat_sdcCb_entry;
         const 1;
         const 16;
 },
 sat_sdcCf_entry() //  [R1]
         { []
         }
     {offset
       cdfBN: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdfBR; else goto cdfBS;
       cdfBR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfBS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cdfBB_info;
           _sdcC8::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _sdcC8::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udfBZ; else goto cdfBC;
       udfBZ: // global
           call _cdfBB(R1) args: 0, res: 0, upd: 0;
       cdfBC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcCf_info" {
     sat_sdcCf_info:
         const sat_sdcCf_entry;
         const 2;
         const 18;
 },
 _cdfBB() //  [R1]
         { []
         }
     {offset
       cdfBB: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdfBV; else goto cdfBU;
       cdfBV: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdfBU: // global
           _sdcCa::I64 = I64[R1 + 7];
           I64[Hp - 16] = sat_sdcCb_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_cdfBO_info;
           R4 = Hp - 16;
           R3 = _sdcCa::I64;
           R2 = 0;
           Sp = Sp + 8;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cdfBB_info" {
     block_cdfBB_info:
         const _cdfBB;
         const 1;
         const 30;
 },
 _cdfBO() //  [R1, R2]
         { []
         }
     {offset
       cdfBO: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdfBY; else goto cdfBX;
       cdfBY: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cdfBX: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdfBO_info" {
     block_cdfBO_info:
         const _cdfBO;
         const 0;
         const 30;
 },
 sat_sdcCg_entry() //  [R1]
         { []
         }
     {offset
       cdfC0: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdfC4; else goto cdfC3;
       cdfC4: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfC3: // global
           _sdcC1::P64 = P64[R1 + 16];
           _sdcC8::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_sdcCf_info;
           P64[Hp - 8] = _sdcC1::P64;
           P64[Hp] = _sdcC8::P64;
           R3 = Hp - 24;
           R2 = GHC.RTS.Flags.$fShowConcFlags2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcCg_info" {
     sat_sdcCg_info:
         const sat_sdcCg_entry;
         const 2;
         const 18;
 },
 sat_sdcCh_entry() //  [R1]
         { []
         }
     {offset
       cdfC5: // global
           _sdcCh::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdfC6; else goto cdfC7;
       cdfC7: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdfC9; else goto cdfC8;
       cdfC9: // global
           HpAlloc = 32;
           goto cdfC6;
       cdfC6: // global
           R1 = _sdcCh::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfC8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcCh::P64;
           _sdcC1::P64 = P64[_sdcCh::P64 + 16];
           _sdcC8::P64 = P64[_sdcCh::P64 + 24];
           I64[Hp - 24] = sat_sdcCg_info;
           P64[Hp - 8] = _sdcC1::P64;
           P64[Hp] = _sdcC8::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcCh_info" {
     sat_sdcCh_info:
         const sat_sdcCh_entry;
         const 2;
         const 4294967314;
         const SddB2_srt+480;
 },
 sat_sdcCl_entry() //  [R1]
         { []
         }
     {offset
       cdfCd: // global
           _sdcCl::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cdfCe; else goto cdfCf;
       cdfCf: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdfCh; else goto cdfCg;
       cdfCh: // global
           HpAlloc = 32;
           goto cdfCe;
       cdfCe: // global
           R1 = _sdcCl::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfCg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcCl::P64;
           _sdcC1::P64 = P64[_sdcCl::P64 + 16];
           _sdcC2::P64 = P64[_sdcCl::P64 + 24];
           _sdcC8::P64 = P64[_sdcCl::P64 + 32];
           I64[Hp - 24] = sat_sdcCh_info;
           P64[Hp - 8] = _sdcC1::P64;
           P64[Hp] = _sdcC8::P64;
           I64[Sp - 24] = block_cdfCa_info;
           R4 = Hp - 24;
           R3 = _sdcC2::P64;
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcCl_info" {
     sat_sdcCl_info:
         const sat_sdcCl_entry;
         const 3;
         const 17596481011727;
         const SddB2_srt+384;
 },
 _cdfCa() //  [R1, R2]
         { []
         }
     {offset
       cdfCa: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdfCk; else goto cdfCj;
       cdfCk: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cdfCj: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdfCa_info" {
     block_cdfCa_info:
         const _cdfCa;
         const 0;
         const 30;
 },
 sat_sdcCm_entry() //  [R1]
         { []
         }
     {offset
       cdfCl: // global
           _sdcCm::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdfCm; else goto cdfCn;
       cdfCn: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdfCp; else goto cdfCo;
       cdfCp: // global
           HpAlloc = 40;
           goto cdfCm;
       cdfCm: // global
           R1 = _sdcCm::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfCo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcCm::P64;
           _sdcC1::P64 = P64[_sdcCm::P64 + 16];
           _sdcC2::P64 = P64[_sdcCm::P64 + 24];
           _sdcC8::P64 = P64[_sdcCm::P64 + 32];
           I64[Hp - 32] = sat_sdcCl_info;
           P64[Hp - 16] = _sdcC1::P64;
           P64[Hp - 8] = _sdcC2::P64;
           P64[Hp] = _sdcC8::P64;
           R3 = Hp - 32;
           R2 = GHC.RTS.Flags.$fShowConcFlags3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcCm_info" {
     sat_sdcCm_info:
         const sat_sdcCm_entry;
         const 3;
         const 17596481011727;
         const SddB2_srt+384;
 },
 p_sdcC7_entry() //  [R1, R2]
         { []
         }
     {offset
       cdfCq: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdfCu; else goto cdfCt;
       cdfCu: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdfCt: // global
           _sdcC1::P64 = P64[R1 + 7];
           _sdcC2::P64 = P64[R1 + 15];
           I64[Hp - 32] = sat_sdcCm_info;
           P64[Hp - 16] = _sdcC1::P64;
           P64[Hp - 8] = _sdcC2::P64;
           P64[Hp] = R2;
           R3 = Hp - 32;
           R2 = GHC.RTS.Flags.$fShowConcFlags4_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . p_sdcC7_info" {
     p_sdcC7_info:
         const p_sdcC7_entry;
         const 2;
         const 17596481011723;
         const 4294967301;
         const SddB2_srt+384;
 },
 sat_sdcCq_entry() //  [R1]
         { []
         }
     {offset
       cdfCJ: // global
           _sdcCq::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdfCK; else goto cdfCL;
       cdfCL: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdfCN; else goto cdfCM;
       cdfCN: // global
           HpAlloc = 24;
           goto cdfCK;
       cdfCK: // global
           R1 = _sdcCq::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfCM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcCq::P64;
           _sdcC7::P64 = P64[_sdcCq::P64 + 16];
           _sdcCo::P64 = P64[_sdcCq::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _sdcCo::P64;
           R2 = Hp - 14;
           R1 = _sdcC7::P64;
           Sp = Sp - 16;
           call p_sdcC7_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcCq_info" {
     sat_sdcCq_info:
         const sat_sdcCq_entry;
         const 2;
         const 17596481011730;
         const SddB2_srt+384;
 },
 sat_sdcCr_entry() //  [R1, R2]
         { []
         }
     {offset
       cdfCP: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdfCT; else goto cdfCS;
       cdfCT: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdfCS: // global
           _sdcC7::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_sdcCq_info;
           P64[Hp - 32] = _sdcC7::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcCr_info" {
     sat_sdcCr_info:
         const sat_sdcCr_entry;
         const 1;
         const 17596481011721;
         const 4294967301;
         const SddB2_srt+384;
 },
 GHC.RTS.Flags.$w$cshowsPrec2_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdfCX: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdfD1; else goto cdfD0;
       cdfD1: // global
           HpAlloc = 64;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.RTS.Flags.$w$cshowsPrec2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdfD0: // global
           I64[Hp - 56] = w1_sdcC2_info;
           P64[Hp - 40] = R3;
           I64[Hp - 32] = p_sdcC7_info;
           P64[Hp - 24] = R4;
           P64[Hp - 16] = Hp - 56;
           _cdfBc::P64 = Hp - 31;
           if (%MO_S_Lt_W64(R2, 11)) goto cdfCV; else goto cdfCW;
       cdfCV: // global
           Hp = Hp - 16;
           R1 = _cdfBc::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdfCW: // global
           I64[Hp - 8] = sat_sdcCr_info;
           P64[Hp] = _cdfBc::P64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$w$cshowsPrec2_info" {
     GHC.RTS.Flags.$w$cshowsPrec2_info:
         const GHC.RTS.Flags.$w$cshowsPrec2_entry;
         const 0;
         const 2305860605694705678;
         const 12884901907;
         const SddB2_srt+384;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.964611289 UTC

[section ""data" . GHC.RTS.Flags.$fShowConcFlags_$cshowsPrec_closure" {
     GHC.RTS.Flags.$fShowConcFlags_$cshowsPrec_closure:
         const GHC.RTS.Flags.$fShowConcFlags_$cshowsPrec_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowConcFlags_$cshowsPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       cdfEB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdfEF; else goto cdfEG;
       cdfEF: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fShowConcFlags_$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdfEG: // global
           I64[Sp - 16] = block_cdfEy_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udfEO; else goto cdfEz;
       udfEO: // global
           call _cdfEy(R1) args: 0, res: 0, upd: 0;
       cdfEz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowConcFlags_$cshowsPrec_info" {
     GHC.RTS.Flags.$fShowConcFlags_$cshowsPrec_info:
         const GHC.RTS.Flags.$fShowConcFlags_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SddB2_srt+616;
 },
 _cdfEy() //  [R1]
         { []
         }
     {offset
       cdfEy: // global
           I64[Sp] = block_cdfEE_info;
           _sdcCv::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _sdcCv::I64;
           if (R1 & 7 != 0) goto udfEN; else goto cdfEI;
       udfEN: // global
           call _cdfEE(R1) args: 0, res: 0, upd: 0;
       cdfEI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdfEy_info" {
     block_cdfEy_info:
         const _cdfEy;
         const 1;
         const 4294967326;
         const SddB2_srt+616;
 },
 _cdfEE() //  [R1]
         { []
         }
     {offset
       cdfEE: // global
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = I64[Sp + 8];
           Sp = Sp + 16;
           call GHC.RTS.Flags.$w$cshowsPrec2_entry(R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdfEE_info" {
     block_cdfEE_info:
         const _cdfEE;
         const 65;
         const 4294967326;
         const SddB2_srt+616;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.972875855 UTC

[section ""data" . GHC.RTS.Flags.$fShowConcFlags_$cshow_closure" {
     GHC.RTS.Flags.$fShowConcFlags_$cshow_closure:
         const GHC.RTS.Flags.$fShowConcFlags_$cshow_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowConcFlags_$cshow_entry() //  [R2]
         { []
         }
     {offset
       cdfFb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdfFc; else goto cdfFd;
       cdfFc: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.$fShowConcFlags_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdfFd: // global
           I64[Sp - 8] = block_cdfF8_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udfFh; else goto cdfF9;
       udfFh: // global
           call _cdfF8(R1) args: 0, res: 0, upd: 0;
       cdfF9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowConcFlags_$cshow_info" {
     GHC.RTS.Flags.$fShowConcFlags_$cshow_info:
         const GHC.RTS.Flags.$fShowConcFlags_$cshow_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const SddB2_srt+616;
 },
 _cdfF8() //  [R1]
         { []
         }
     {offset
       cdfF8: // global
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = 0;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = GHC.Types.[]_closure+1;
           Sp = Sp - 8;
           call GHC.RTS.Flags.$w$cshowsPrec2_entry(R4,
                                                   R3,
                                                   R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdfF8_info" {
     block_cdfF8_info:
         const _cdfF8;
         const 0;
         const 4294967326;
         const SddB2_srt+616;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.980223243 UTC

[section ""data" . GHC.RTS.Flags.$fShowConcFlags1_closure" {
     GHC.RTS.Flags.$fShowConcFlags1_closure:
         const GHC.RTS.Flags.$fShowConcFlags1_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowConcFlags1_entry() //  [R2]
         { []
         }
     {offset
       cdfFC: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdfFD; else goto cdfFE;
       cdfFD: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.$fShowConcFlags1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdfFE: // global
           I64[Sp - 8] = block_cdfFz_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udfFI; else goto cdfFA;
       udfFI: // global
           call _cdfFz(R1) args: 0, res: 0, upd: 0;
       cdfFA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowConcFlags1_info" {
     GHC.RTS.Flags.$fShowConcFlags1_info:
         const GHC.RTS.Flags.$fShowConcFlags1_entry;
         const 0;
         const 38654705678;
         const 4294967301;
         const SddB2_srt+616;
 },
 _cdfFz() //  [R1]
         { []
         }
     {offset
       cdfFz: // global
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = 0;
           Sp = Sp + 8;
           call GHC.RTS.Flags.$w$cshowsPrec2_entry(R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdfFz_info" {
     block_cdfFz_info:
         const _cdfFz;
         const 0;
         const 4294967326;
         const SddB2_srt+616;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.985675197 UTC

[section ""data" . GHC.RTS.Flags.$fShowConcFlags_$cshowList_closure" {
     GHC.RTS.Flags.$fShowConcFlags_$cshowList_closure:
         const GHC.RTS.Flags.$fShowConcFlags_$cshowList_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowConcFlags_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       cdfFX: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.RTS.Flags.$fShowConcFlags1_closure+1;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowConcFlags_$cshowList_info" {
     GHC.RTS.Flags.$fShowConcFlags_$cshowList_info:
         const GHC.RTS.Flags.$fShowConcFlags_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const SddB2_srt+640;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.989066928 UTC

[section ""data" . GHC.RTS.Flags.$fShowConcFlags_closure" {
     GHC.RTS.Flags.$fShowConcFlags_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.RTS.Flags.$fShowConcFlags_$cshowsPrec_closure+2;
         const GHC.RTS.Flags.$fShowConcFlags_$cshow_closure+1;
         const GHC.RTS.Flags.$fShowConcFlags_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.99120238 UTC

[section ""cstring" . GHC.RTS.Flags.$fShowGiveGCStats10_bytes" {
     GHC.RTS.Flags.$fShowGiveGCStats10_bytes:
         I8[] [78,111,71,67,83,116,97,116,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.993633477 UTC

[section ""data" . GHC.RTS.Flags.$fShowGiveGCStats9_closure" {
     GHC.RTS.Flags.$fShowGiveGCStats9_closure:
         const GHC.RTS.Flags.$fShowGiveGCStats9_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fShowGiveGCStats9_entry() //  [R1]
         { []
         }
     {offset
       cdfGc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdfGd; else goto cdfGe;
       cdfGd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfGe: // global
           (_cdfG9::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdfG9::I64 == 0) goto cdfGb; else goto cdfGa;
       cdfGb: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdfGa: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdfG9::I64;
           R2 = GHC.RTS.Flags.$fShowGiveGCStats10_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowGiveGCStats9_info" {
     GHC.RTS.Flags.$fShowGiveGCStats9_info:
         const GHC.RTS.Flags.$fShowGiveGCStats9_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.997629354 UTC

[section ""cstring" . GHC.RTS.Flags.$fShowGiveGCStats8_bytes" {
     GHC.RTS.Flags.$fShowGiveGCStats8_bytes:
         I8[] [67,111,108,108,101,99,116,71,67,83,116,97,116,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:27.999984755 UTC

[section ""data" . GHC.RTS.Flags.$fShowGiveGCStats7_closure" {
     GHC.RTS.Flags.$fShowGiveGCStats7_closure:
         const GHC.RTS.Flags.$fShowGiveGCStats7_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fShowGiveGCStats7_entry() //  [R1]
         { []
         }
     {offset
       cdfGu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdfGv; else goto cdfGw;
       cdfGv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfGw: // global
           (_cdfGr::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdfGr::I64 == 0) goto cdfGt; else goto cdfGs;
       cdfGt: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdfGs: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdfGr::I64;
           R2 = GHC.RTS.Flags.$fShowGiveGCStats8_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowGiveGCStats7_info" {
     GHC.RTS.Flags.$fShowGiveGCStats7_info:
         const GHC.RTS.Flags.$fShowGiveGCStats7_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.003933876 UTC

[section ""cstring" . GHC.RTS.Flags.$fShowGiveGCStats6_bytes" {
     GHC.RTS.Flags.$fShowGiveGCStats6_bytes:
         I8[] [79,110,101,76,105,110,101,71,67,83,116,97,116,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.006339067 UTC

[section ""data" . GHC.RTS.Flags.$fShowGiveGCStats5_closure" {
     GHC.RTS.Flags.$fShowGiveGCStats5_closure:
         const GHC.RTS.Flags.$fShowGiveGCStats5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fShowGiveGCStats5_entry() //  [R1]
         { []
         }
     {offset
       cdfGM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdfGN; else goto cdfGO;
       cdfGN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfGO: // global
           (_cdfGJ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdfGJ::I64 == 0) goto cdfGL; else goto cdfGK;
       cdfGL: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdfGK: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdfGJ::I64;
           R2 = GHC.RTS.Flags.$fShowGiveGCStats6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowGiveGCStats5_info" {
     GHC.RTS.Flags.$fShowGiveGCStats5_info:
         const GHC.RTS.Flags.$fShowGiveGCStats5_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.010925702 UTC

[section ""cstring" . GHC.RTS.Flags.$fShowGiveGCStats4_bytes" {
     GHC.RTS.Flags.$fShowGiveGCStats4_bytes:
         I8[] [83,117,109,109,97,114,121,71,67,83,116,97,116,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.013219364 UTC

[section ""data" . GHC.RTS.Flags.$fShowGiveGCStats3_closure" {
     GHC.RTS.Flags.$fShowGiveGCStats3_closure:
         const GHC.RTS.Flags.$fShowGiveGCStats3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fShowGiveGCStats3_entry() //  [R1]
         { []
         }
     {offset
       cdfH4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdfH5; else goto cdfH6;
       cdfH5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfH6: // global
           (_cdfH1::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdfH1::I64 == 0) goto cdfH3; else goto cdfH2;
       cdfH3: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdfH2: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdfH1::I64;
           R2 = GHC.RTS.Flags.$fShowGiveGCStats4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowGiveGCStats3_info" {
     GHC.RTS.Flags.$fShowGiveGCStats3_info:
         const GHC.RTS.Flags.$fShowGiveGCStats3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.016975969 UTC

[section ""cstring" . GHC.RTS.Flags.$fShowGiveGCStats2_bytes" {
     GHC.RTS.Flags.$fShowGiveGCStats2_bytes:
         I8[] [86,101,114,98,111,115,101,71,67,83,116,97,116,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.019353785 UTC

[section ""data" . GHC.RTS.Flags.$fShowGiveGCStats1_closure" {
     GHC.RTS.Flags.$fShowGiveGCStats1_closure:
         const GHC.RTS.Flags.$fShowGiveGCStats1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fShowGiveGCStats1_entry() //  [R1]
         { []
         }
     {offset
       cdfHm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdfHn; else goto cdfHo;
       cdfHn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfHo: // global
           (_cdfHj::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdfHj::I64 == 0) goto cdfHl; else goto cdfHk;
       cdfHl: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdfHk: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdfHj::I64;
           R2 = GHC.RTS.Flags.$fShowGiveGCStats2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowGiveGCStats1_info" {
     GHC.RTS.Flags.$fShowGiveGCStats1_info:
         const GHC.RTS.Flags.$fShowGiveGCStats1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.024881112 UTC

[section ""data" . GHC.RTS.Flags.$w$cshowsPrec5_closure" {
     GHC.RTS.Flags.$w$cshowsPrec5_closure:
         const GHC.RTS.Flags.$w$cshowsPrec5_info;
         const 0;
 },
 GHC.RTS.Flags.$w$cshowsPrec5_entry() //  [R2, R3]
         { []
         }
     {offset
       cdfHL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdfHM; else goto cdfHN;
       cdfHM: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.RTS.Flags.$w$cshowsPrec5_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdfHN: // global
           I64[Sp - 16] = block_cdfHB_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udfI6; else goto cdfHC;
       udfI6: // global
           call _cdfHB(R1) args: 0, res: 0, upd: 0;
       cdfHC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$w$cshowsPrec5_info" {
     GHC.RTS.Flags.$w$cshowsPrec5_info:
         const GHC.RTS.Flags.$w$cshowsPrec5_entry;
         const 0;
         const 270582939662;
         const 8589934607;
         const SddB2_srt+648;
 },
 _cdfHB() //  [R1]
         { []
         }
     {offset
       cdfHB: // global
           _sdcCK::P64 = P64[Sp + 8];
           _cdfHK::P64 = R1 & 7;
           if (_cdfHK::P64 < 4) goto udfI3; else goto udfI5;
       udfI3: // global
           if (_cdfHK::P64 < 3) goto udfI4; else goto cdfHH;
       udfI4: // global
           if (_cdfHK::P64 < 2) goto cdfHF; else goto cdfHG;
       cdfHF: // global
           R3 = _sdcCK::P64;
           R2 = GHC.RTS.Flags.$fShowGiveGCStats9_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cdfHG: // global
           R3 = _sdcCK::P64;
           R2 = GHC.RTS.Flags.$fShowGiveGCStats7_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cdfHH: // global
           R3 = _sdcCK::P64;
           R2 = GHC.RTS.Flags.$fShowGiveGCStats5_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       udfI5: // global
           if (_cdfHK::P64 < 5) goto cdfHI; else goto cdfHJ;
       cdfHI: // global
           R3 = _sdcCK::P64;
           R2 = GHC.RTS.Flags.$fShowGiveGCStats3_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cdfHJ: // global
           R3 = _sdcCK::P64;
           R2 = GHC.RTS.Flags.$fShowGiveGCStats1_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdfHB_info" {
     block_cdfHB_info:
         const _cdfHB;
         const 1;
         const 133143986206;
         const SddB2_srt+656;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.030832102 UTC

[section ""data" . GHC.RTS.Flags.$fShowGiveGCStats_$cshowsPrec_closure" {
     GHC.RTS.Flags.$fShowGiveGCStats_$cshowsPrec_closure:
         const GHC.RTS.Flags.$fShowGiveGCStats_$cshowsPrec_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowGiveGCStats_$cshowsPrec_entry() //  [R3, R4]
         { []
         }
     {offset
       cdfIm: // global
           _sdcCN::P64 = R3;
           R3 = R4;
           R2 = _sdcCN::P64;
           call GHC.RTS.Flags.$w$cshowsPrec5_entry(R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowGiveGCStats_$cshowsPrec_info" {
     GHC.RTS.Flags.$fShowGiveGCStats_$cshowsPrec_info:
         const GHC.RTS.Flags.$fShowGiveGCStats_$cshowsPrec_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const SddB2_srt+648;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.035245948 UTC

[section ""data" . GHC.RTS.Flags.$fShowGiveGCStats_$cshow_closure" {
     GHC.RTS.Flags.$fShowGiveGCStats_$cshow_closure:
         const GHC.RTS.Flags.$fShowGiveGCStats_$cshow_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowGiveGCStats_$cshow_entry() //  [R2]
         { []
         }
     {offset
       cdfIH: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdfII; else goto cdfIJ;
       cdfII: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.$fShowGiveGCStats_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdfIJ: // global
           I64[Sp - 8] = block_cdfIx_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udfJ2; else goto cdfIy;
       udfJ2: // global
           call _cdfIx(R1) args: 0, res: 0, upd: 0;
       cdfIy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowGiveGCStats_$cshow_info" {
     GHC.RTS.Flags.$fShowGiveGCStats_$cshow_info:
         const GHC.RTS.Flags.$fShowGiveGCStats_$cshow_entry;
         const 0;
         const 270582939662;
         const 4294967301;
         const SddB2_srt+656;
 },
 _cdfIx() //  [R1]
         { []
         }
     {offset
       cdfIx: // global
           _cdfIG::P64 = R1 & 7;
           if (_cdfIG::P64 < 4) goto udfIZ; else goto udfJ1;
       udfIZ: // global
           if (_cdfIG::P64 < 3) goto udfJ0; else goto cdfID;
       udfJ0: // global
           if (_cdfIG::P64 < 2) goto cdfIB; else goto cdfIC;
       cdfIB: // global
           R1 = GHC.RTS.Flags.$fShowGiveGCStats9_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cdfIC: // global
           R1 = GHC.RTS.Flags.$fShowGiveGCStats7_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cdfID: // global
           R1 = GHC.RTS.Flags.$fShowGiveGCStats5_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       udfJ1: // global
           if (_cdfIG::P64 < 5) goto cdfIE; else goto cdfIF;
       cdfIE: // global
           R1 = GHC.RTS.Flags.$fShowGiveGCStats3_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cdfIF: // global
           R1 = GHC.RTS.Flags.$fShowGiveGCStats1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdfIx_info" {
     block_cdfIx_info:
         const _cdfIx;
         const 0;
         const 133143986206;
         const SddB2_srt+656;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.041172499 UTC

[section ""data" . GHC.RTS.Flags.$fShowGiveGCStats_$cshowList_closure" {
     GHC.RTS.Flags.$fShowGiveGCStats_$cshowList_closure:
         const GHC.RTS.Flags.$fShowGiveGCStats_$cshowList_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowGiveGCStats_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       cdfJn: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.RTS.Flags.$w$cshowsPrec5_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowGiveGCStats_$cshowList_info" {
     GHC.RTS.Flags.$fShowGiveGCStats_$cshowList_info:
         const GHC.RTS.Flags.$fShowGiveGCStats_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const SddB2_srt+648;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.044526324 UTC

[section ""data" . GHC.RTS.Flags.$fShowGiveGCStats_closure" {
     GHC.RTS.Flags.$fShowGiveGCStats_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.RTS.Flags.$fShowGiveGCStats_$cshowsPrec_closure+3;
         const GHC.RTS.Flags.$fShowGiveGCStats_$cshow_closure+1;
         const GHC.RTS.Flags.$fShowGiveGCStats_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.046983634 UTC

[section ""cstring" . f6_rcV62_bytes" {
     f6_rcV62_bytes:
         I8[] [71,67,70,108,97,103,115,32,123]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.049683852 UTC

[section ""data" . f7_rcV63_closure" {
     f7_rcV63_closure:
         const f7_rcV63_info;
         const 0;
         const 0;
         const 0;
 },
 f7_rcV63_entry() //  [R1]
         { []
         }
     {offset
       cdfJC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdfJD; else goto cdfJE;
       cdfJD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfJE: // global
           (_cdfJz::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdfJz::I64 == 0) goto cdfJB; else goto cdfJA;
       cdfJB: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdfJA: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdfJz::I64;
           R2 = f6_rcV62_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f7_rcV63_info" {
     f7_rcV63_info:
         const f7_rcV63_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.053109053 UTC

[section ""cstring" . lvl59_rcV64_bytes" {
     lvl59_rcV64_bytes:
         I8[] [115,116,97,116,115,70,105,108,101,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.054761397 UTC

[section ""cstring" . lvl60_rcV65_bytes" {
     lvl60_rcV65_bytes:
         I8[] [103,105,118,101,83,116,97,116,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.056374156 UTC

[section ""cstring" . lvl61_rcV66_bytes" {
     lvl61_rcV66_bytes:
         I8[] [109,97,120,83,116,107,83,105,122,101,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.058054494 UTC

[section ""cstring" . lvl62_rcV67_bytes" {
     lvl62_rcV67_bytes:
         I8[] [105,110,105,116,105,97,108,83,116,107,83,105,122,101,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.059734184 UTC

[section ""cstring" . lvl63_rcV68_bytes" {
     lvl63_rcV68_bytes:
         I8[] [115,116,107,67,104,117,110,107,83,105,122,101,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.061724997 UTC

[section ""cstring" . lvl64_rcV69_bytes" {
     lvl64_rcV69_bytes:
         I8[] [115,116,107,67,104,117,110,107,66,117,102,102,101,114,83,105,122,101,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.063343019 UTC

[section ""cstring" . lvl65_rcV6a_bytes" {
     lvl65_rcV6a_bytes:
         I8[] [109,97,120,72,101,97,112,83,105,122,101,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.065025115 UTC

[section ""cstring" . lvl66_rcV6b_bytes" {
     lvl66_rcV6b_bytes:
         I8[] [109,105,110,65,108,108,111,99,65,114,101,97,83,105,122,101,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.06674757 UTC

[section ""cstring" . lvl67_rcV6c_bytes" {
     lvl67_rcV6c_bytes:
         I8[] [108,97,114,103,101,65,108,108,111,99,76,105,109,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.068411016 UTC

[section ""cstring" . lvl68_rcV6d_bytes" {
     lvl68_rcV6d_bytes:
         I8[] [110,117,114,115,101,114,121,67,104,117,110,107,83,105,122,101,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.070120889 UTC

[section ""cstring" . lvl69_rcV6e_bytes" {
     lvl69_rcV6e_bytes:
         I8[] [109,105,110,79,108,100,71,101,110,83,105,122,101,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.072354304 UTC

[section ""cstring" . lvl70_rcV6f_bytes" {
     lvl70_rcV6f_bytes:
         I8[] [104,101,97,112,83,105,122,101,83,117,103,103,101,115,116,105,111,110,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.074412134 UTC

[section ""cstring" . lvl71_rcV6g_bytes" {
     lvl71_rcV6g_bytes:
         I8[] [104,101,97,112,83,105,122,101,83,117,103,103,101,115,116,105,111,110,65,117,116,111,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.076019977 UTC

[section ""cstring" . lvl72_rcV6h_bytes" {
     lvl72_rcV6h_bytes:
         I8[] [111,108,100,71,101,110,70,97,99,116,111,114,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.077588058 UTC

[section ""cstring" . lvl73_rcV6i_bytes" {
     lvl73_rcV6i_bytes:
         I8[] [112,99,70,114,101,101,72,101,97,112,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.079209928 UTC

[section ""cstring" . lvl74_rcV6j_bytes" {
     lvl74_rcV6j_bytes:
         I8[] [103,101,110,101,114,97,116,105,111,110,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.08080203 UTC

[section ""cstring" . lvl75_rcV6k_bytes" {
     lvl75_rcV6k_bytes:
         I8[] [115,113,117,101,101,122,101,85,112,100,70,114,97,109,101,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.082434258 UTC

[section ""cstring" . lvl76_rcV6l_bytes" {
     lvl76_rcV6l_bytes:
         I8[] [99,111,109,112,97,99,116,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.084072699 UTC

[section ""cstring" . lvl77_rcV6m_bytes" {
     lvl77_rcV6m_bytes:
         I8[] [99,111,109,112,97,99,116,84,104,114,101,115,104,111,108,100,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.08621897 UTC

[section ""cstring" . lvl78_rcV6n_bytes" {
     lvl78_rcV6n_bytes:
         I8[] [115,119,101,101,112,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.087859396 UTC

[section ""cstring" . lvl79_rcV6o_bytes" {
     lvl79_rcV6o_bytes:
         I8[] [114,105,110,103,66,101,108,108,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.08954277 UTC

[section ""cstring" . lvl80_rcV6p_bytes" {
     lvl80_rcV6p_bytes:
         I8[] [105,100,108,101,71,67,68,101,108,97,121,84,105,109,101,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.091256773 UTC

[section ""cstring" . lvl81_rcV6q_bytes" {
     lvl81_rcV6q_bytes:
         I8[] [100,111,73,100,108,101,71,67,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.092910546 UTC

[section ""cstring" . lvl82_rcV6r_bytes" {
     lvl82_rcV6r_bytes:
         I8[] [104,101,97,112,66,97,115,101,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.094619841 UTC

[section ""cstring" . lvl83_rcV6s_bytes" {
     lvl83_rcV6s_bytes:
         I8[] [97,108,108,111,99,76,105,109,105,116,71,114,97,99,101,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.096863508 UTC

[section ""cstring" . lvl84_rcV6t_bytes" {
     lvl84_rcV6t_bytes:
         I8[] [110,117,109,97,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.099084706 UTC

[section ""cstring" . lvl85_rcV6u_bytes" {
     lvl85_rcV6u_bytes:
         I8[] [110,117,109,97,77,97,115,107,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.215952174 UTC

[section ""data" . GHC.RTS.Flags.$fShowGCFlags_$cshowsPrec_closure" {
     GHC.RTS.Flags.$fShowGCFlags_$cshowsPrec_closure:
         const GHC.RTS.Flags.$fShowGCFlags_$cshowsPrec_info;
         const 0;
 },
 f8_sdcDp_entry() //  [R1]
         { []
         }
     {offset
       cdfKw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdfKx; else goto cdfKy;
       cdfKx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfKy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 16];
           R3 = GHC.RTS.Flags.$fEnumDoCostCentres10_closure+1;
           R2 = GHC.Show.$fShow[]_$s$fShow[]1_closure;
           Sp = Sp - 16;
           call GHC.Show.$fShowMaybe_$cshowsPrec_entry(R4,
                                                       R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f8_sdcDp_info" {
     f8_sdcDp_info:
         const f8_sdcDp_entry;
         const 1;
         const 12884901904;
         const SddB2_srt+704;
 },
 f9_sdcDq_entry() //  [R1]
         { []
         }
     {offset
       cdfKG: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdfKH; else goto cdfKI;
       cdfKH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfKI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cdfKD_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udfKM; else goto cdfKE;
       udfKM: // global
           call _cdfKD(R1) args: 0, res: 0, upd: 0;
       cdfKE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . f9_sdcDq_info" {
     f9_sdcDq_info:
         const f9_sdcDq_entry;
         const 1;
         const 4294967312;
         const SddB2_srt+720;
 },
 _cdfKD() //  [R1]
         { []
         }
     {offset
       cdfKD: // global
           D1 = F64[R1 + 7];
           R3 = GHC.RTS.Flags.$fEnumDoCostCentres10_closure+1;
           R2 = GHC.Float.$fShowDouble2_closure+1;
           Sp = Sp + 8;
           call GHC.Float.$w$sshowSignedFloat_entry(D1,
                                                    R3,
                                                    R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdfKD_info" {
     block_cdfKD_info:
         const _cdfKD;
         const 0;
         const 4294967326;
         const SddB2_srt+720;
 },
 f10_sdcDt_entry() //  [R1]
         { []
         }
     {offset
       cdfKU: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdfKV; else goto cdfKW;
       cdfKV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfKW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cdfKR_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udfL0; else goto cdfKS;
       udfL0: // global
           call _cdfKR(R1) args: 0, res: 0, upd: 0;
       cdfKS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . f10_sdcDt_info" {
     f10_sdcDt_info:
         const f10_sdcDt_entry;
         const 1;
         const 4294967312;
         const SddB2_srt+720;
 },
 _cdfKR() //  [R1]
         { []
         }
     {offset
       cdfKR: // global
           D1 = F64[R1 + 7];
           R3 = GHC.RTS.Flags.$fEnumDoCostCentres10_closure+1;
           R2 = GHC.Float.$fShowDouble2_closure+1;
           Sp = Sp + 8;
           call GHC.Float.$w$sshowSignedFloat_entry(D1,
                                                    R3,
                                                    R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdfKR_info" {
     block_cdfKR_info:
         const _cdfKR;
         const 0;
         const 4294967326;
         const SddB2_srt+720;
 },
 f11_sdcDw_entry() //  [R1]
         { []
         }
     {offset
       cdfL8: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdfL9; else goto cdfLa;
       cdfL9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfLa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cdfL5_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udfLe; else goto cdfL6;
       udfLe: // global
           call _cdfL5(R1) args: 0, res: 0, upd: 0;
       cdfL6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . f11_sdcDw_info" {
     f11_sdcDw_info:
         const f11_sdcDw_entry;
         const 1;
         const 4294967312;
         const SddB2_srt+720;
 },
 _cdfL5() //  [R1]
         { []
         }
     {offset
       cdfL5: // global
           D1 = F64[R1 + 7];
           R3 = GHC.RTS.Flags.$fEnumDoCostCentres10_closure+1;
           R2 = GHC.Float.$fShowDouble2_closure+1;
           Sp = Sp + 8;
           call GHC.Float.$w$sshowSignedFloat_entry(D1,
                                                    R3,
                                                    R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdfL5_info" {
     block_cdfL5_info:
         const _cdfL5;
         const 0;
         const 4294967326;
         const SddB2_srt+720;
 },
 w1_sdcDz_entry() //  [R1]
         { []
         }
     {offset
       cdfLm: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdfLn; else goto cdfLo;
       cdfLn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfLo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cdfLj_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udfLA; else goto cdfLk;
       udfLA: // global
           call _cdfLj(R1) args: 0, res: 0, upd: 0;
       cdfLk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . w1_sdcDz_info" {
     w1_sdcDz_info:
         const w1_sdcDz_entry;
         const 1;
         const 16;
 },
 _cdfLj() //  [R1]
         { []
         }
     {offset
       cdfLj: // global
           _sdcDB::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_sdcDB::I64, 0)) goto cdfLy; else goto cdfLz;
       cdfLy: // global
           R2 = _sdcDB::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.wordToInteger_entry(R2) args: 24, res: 0, upd: 24;
       cdfLz: // global
           R2 = _sdcDB::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdfLj_info" {
     block_cdfLj_info:
         const _cdfLj;
         const 0;
         const 30;
 },
 sat_sdcEq_entry() //  [R1]
         { []
         }
     {offset
       cdfS3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdfS4; else goto cdfS5;
       cdfS4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfS5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.RTS.Flags.$fShowCCFlags2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcEq_info" {
     sat_sdcEq_info:
         const sat_sdcEq_entry;
         const 1;
         const 16;
 },
 sat_sdcEu_entry() //  [R1]
         { []
         }
     {offset
       cdfS6: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdfSa; else goto cdfSb;
       cdfSa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfSb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cdfRU_info;
           _sdcDF::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _sdcDF::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udfSi; else goto cdfRV;
       udfSi: // global
           call _cdfRU(R1) args: 0, res: 0, upd: 0;
       cdfRV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcEu_info" {
     sat_sdcEu_info:
         const sat_sdcEu_entry;
         const 2;
         const 18;
 },
 _cdfRU() //  [R1]
         { []
         }
     {offset
       cdfRU: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdfSe; else goto cdfSd;
       cdfSe: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdfSd: // global
           _sdcEp::I64 = I64[R1 + 7];
           I64[Hp - 16] = sat_sdcEq_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_cdfS7_info;
           R3 = Hp - 16;
           R2 = _sdcEp::I64;
           Sp = Sp + 8;
           call GHC.Show.$wshowWord_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cdfRU_info" {
     block_cdfRU_info:
         const _cdfRU;
         const 1;
         const 30;
 },
 _cdfS7() //  [R1, R2]
         { []
         }
     {offset
       cdfS7: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdfSh; else goto cdfSg;
       cdfSh: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cdfSg: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdfS7_info" {
     block_cdfS7_info:
         const _cdfS7;
         const 0;
         const 30;
 },
 sat_sdcEv_entry() //  [R1]
         { []
         }
     {offset
       cdfSj: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdfSn; else goto cdfSm;
       cdfSn: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfSm: // global
           _sdcDm::P64 = P64[R1 + 16];
           _sdcDF::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_sdcEu_info;
           P64[Hp - 8] = _sdcDm::P64;
           P64[Hp] = _sdcDF::P64;
           R3 = Hp - 24;
           R2 = lvl85_rcV6u_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcEv_info" {
     sat_sdcEv_info:
         const sat_sdcEv_entry;
         const 2;
         const 18;
 },
 sat_sdcEw_entry() //  [R1]
         { []
         }
     {offset
       cdfSo: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdfSs; else goto cdfSr;
       cdfSs: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfSr: // global
           _sdcDm::P64 = P64[R1 + 16];
           _sdcDF::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_sdcEv_info;
           P64[Hp - 8] = _sdcDm::P64;
           P64[Hp] = _sdcDF::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcEw_info" {
     sat_sdcEw_info:
         const sat_sdcEw_entry;
         const 2;
         const 4294967314;
         const SddB2_srt+480;
 },
 sat_sdcEz_entry() //  [R1]
         { []
         }
     {offset
       cdfSQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdfSR; else goto cdfSS;
       cdfSR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfSS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.RTS.Flags.$fShowCCFlags2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcEz_info" {
     sat_sdcEz_info:
         const sat_sdcEz_entry;
         const 1;
         const 16;
 },
 sat_sdcED_entry() //  [R1]
         { []
         }
     {offset
       cdfST: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdfSX; else goto cdfSY;
       cdfSX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfSY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cdfSH_info;
           _sdcDF::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _sdcDF::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udfT5; else goto cdfSI;
       udfT5: // global
           call _cdfSH(R1) args: 0, res: 0, upd: 0;
       cdfSI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcED_info" {
     sat_sdcED_info:
         const sat_sdcED_entry;
         const 2;
         const 18;
 },
 _cdfSH() //  [R1]
         { []
         }
     {offset
       cdfSH: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdfT1; else goto cdfT0;
       cdfT1: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdfT0: // global
           _sdcEy::I64 = I64[R1 + 7];
           I64[Hp - 16] = sat_sdcEz_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_cdfSU_info;
           R3 = Hp - 16;
           R2 = _sdcEy::I64;
           Sp = Sp + 8;
           call GHC.Show.$wshowWord_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cdfSH_info" {
     block_cdfSH_info:
         const _cdfSH;
         const 1;
         const 30;
 },
 _cdfSU() //  [R1, R2]
         { []
         }
     {offset
       cdfSU: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdfT4; else goto cdfT3;
       cdfT4: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cdfT3: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdfSU_info" {
     block_cdfSU_info:
         const _cdfSU;
         const 0;
         const 30;
 },
 sat_sdcEE_entry() //  [R1]
         { []
         }
     {offset
       cdfT6: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdfTa; else goto cdfT9;
       cdfTa: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfT9: // global
           _sdcDm::P64 = P64[R1 + 16];
           _sdcDF::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_sdcED_info;
           P64[Hp - 8] = _sdcDm::P64;
           P64[Hp] = _sdcDF::P64;
           R3 = Hp - 24;
           R2 = lvl85_rcV6u_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcEE_info" {
     sat_sdcEE_info:
         const sat_sdcEE_entry;
         const 2;
         const 18;
 },
 sat_sdcEF_entry() //  [R1]
         { []
         }
     {offset
       cdfTb: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdfTf; else goto cdfTe;
       cdfTf: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfTe: // global
           _sdcDm::P64 = P64[R1 + 16];
           _sdcDF::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_sdcEE_info;
           P64[Hp - 8] = _sdcDm::P64;
           P64[Hp] = _sdcDF::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcEF_info" {
     sat_sdcEF_info:
         const sat_sdcEF_entry;
         const 2;
         const 4294967314;
         const SddB2_srt+480;
 },
 sat_sdcEG_entry() //  [R1]
         { []
         }
     {offset
       cdfTk: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdfTl; else goto cdfTm;
       cdfTl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfTm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cdfRD_info;
           _sdcDm::P64 = P64[R1 + 24];
           _sdcDF::P64 = P64[R1 + 32];
           R1 = P64[R1 + 16];
           P64[Sp - 32] = _sdcDm::P64;
           P64[Sp - 24] = _sdcDF::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto udfTt; else goto cdfRE;
       udfTt: // global
           call _cdfRD(R1) args: 0, res: 0, upd: 0;
       cdfRE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcEG_info" {
     sat_sdcEG_info:
         const sat_sdcEG_entry;
         const 3;
         const 3302829850639;
         const SddB2_srt+480;
 },
 _cdfRD() //  [R1]
         { []
         }
     {offset
       cdfRD: // global
           _sdcDm::P64 = P64[Sp + 8];
           _sdcDF::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto cdfTh; else goto cdfTi;
       cdfTh: // global
           Hp = Hp + 32;
           _sdcEn::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cdfTs; else goto cdfTo;
       cdfTo: // global
           I64[Hp - 24] = sat_sdcEw_info;
           P64[Hp - 8] = _sdcDm::P64;
           P64[Hp] = _sdcDF::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cdfTi: // global
           Hp = Hp + 32;
           _sdcEn::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cdfTs; else goto cdfTr;
       cdfTs: // global
           HpAlloc = 32;
           R1 = _sdcEn::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdfTr: // global
           I64[Hp - 24] = sat_sdcEF_info;
           P64[Hp - 8] = _sdcDm::P64;
           P64[Hp] = _sdcDF::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdfRD_info" {
     block_cdfRD_info:
         const _cdfRD;
         const 2;
         const 3302829850654;
         const SddB2_srt+480;
 },
 sat_sdcEH_entry() //  [R1]
         { []
         }
     {offset
       cdfTu: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdfTy; else goto cdfTx;
       cdfTy: // global
           HpAlloc = 40;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfTx: // global
           _sdcDl::P64 = P64[R1 + 16];
           _sdcDm::P64 = P64[R1 + 24];
           _sdcDF::P64 = P64[R1 + 32];
           I64[Hp - 32] = sat_sdcEG_info;
           P64[Hp - 16] = _sdcDl::P64;
           P64[Hp - 8] = _sdcDm::P64;
           P64[Hp] = _sdcDF::P64;
           R3 = Hp - 32;
           R2 = lvl84_rcV6t_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcEH_info" {
     sat_sdcEH_info:
         const sat_sdcEH_entry;
         const 3;
         const 3302829850639;
         const SddB2_srt+480;
 },
 sat_sdcEI_entry() //  [R1]
         { []
         }
     {offset
       cdfTz: // global
           _sdcEI::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdfTA; else goto cdfTB;
       cdfTB: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdfTD; else goto cdfTC;
       cdfTD: // global
           HpAlloc = 40;
           goto cdfTA;
       cdfTA: // global
           R1 = _sdcEI::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfTC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcEI::P64;
           _sdcDl::P64 = P64[_sdcEI::P64 + 16];
           _sdcDm::P64 = P64[_sdcEI::P64 + 24];
           _sdcDF::P64 = P64[_sdcEI::P64 + 32];
           I64[Hp - 32] = sat_sdcEH_info;
           P64[Hp - 16] = _sdcDl::P64;
           P64[Hp - 8] = _sdcDm::P64;
           P64[Hp] = _sdcDF::P64;
           R3 = Hp - 32;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcEI_info" {
     sat_sdcEI_info:
         const sat_sdcEI_entry;
         const 3;
         const 3302829850639;
         const SddB2_srt+480;
 },
 sat_sdcEM_entry() //  [R1]
         { []
         }
     {offset
       cdfTE: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cdfTI; else goto cdfTJ;
       cdfTI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfTJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_cdfRm_info;
           _sdcDl::P64 = P64[R1 + 24];
           _sdcDm::P64 = P64[R1 + 32];
           _sdcDF::P64 = P64[R1 + 40];
           R1 = P64[R1 + 16];
           P64[Sp - 40] = _sdcDl::P64;
           P64[Sp - 32] = _sdcDm::P64;
           P64[Sp - 24] = _sdcDF::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto udfTQ; else goto cdfRn;
       udfTQ: // global
           call _cdfRm(R1) args: 0, res: 0, upd: 0;
       cdfRn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcEM_info" {
     sat_sdcEM_info:
         const sat_sdcEM_entry;
         const 4;
         const 3302829850639;
         const SddB2_srt+480;
 },
 _cdfRm() //  [R1]
         { []
         }
     {offset
       cdfRm: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdfTM; else goto cdfTL;
       cdfTM: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdfTL: // global
           _sdcEm::I64 = I64[R1 + 7];
           I64[Hp - 32] = sat_sdcEI_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 24];
           I64[Sp + 24] = block_cdfTF_info;
           R3 = Hp - 32;
           R2 = _sdcEm::I64;
           Sp = Sp + 24;
           call GHC.Show.$wshowWord_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cdfRm_info" {
     block_cdfRm_info:
         const _cdfRm;
         const 3;
         const 3302829850654;
         const SddB2_srt+480;
 },
 _cdfTF() //  [R1, R2]
         { []
         }
     {offset
       cdfTF: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdfTP; else goto cdfTO;
       cdfTP: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cdfTO: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdfTF_info" {
     block_cdfTF_info:
         const _cdfTF;
         const 0;
         const 30;
 },
 sat_sdcEN_entry() //  [R1]
         { []
         }
     {offset
       cdfTR: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdfTV; else goto cdfTU;
       cdfTV: // global
           HpAlloc = 48;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfTU: // global
           _sdcDk::P64 = P64[R1 + 16];
           _sdcDl::P64 = P64[R1 + 24];
           _sdcDm::P64 = P64[R1 + 32];
           _sdcDF::P64 = P64[R1 + 40];
           I64[Hp - 40] = sat_sdcEM_info;
           P64[Hp - 24] = _sdcDk::P64;
           P64[Hp - 16] = _sdcDl::P64;
           P64[Hp - 8] = _sdcDm::P64;
           P64[Hp] = _sdcDF::P64;
           R3 = Hp - 40;
           R2 = lvl83_rcV6s_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcEN_info" {
     sat_sdcEN_info:
         const sat_sdcEN_entry;
         const 4;
         const 3302829850639;
         const SddB2_srt+480;
 },
 sat_sdcEO_entry() //  [R1]
         { []
         }
     {offset
       cdfTW: // global
           _sdcEO::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdfTX; else goto cdfTY;
       cdfTY: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdfU0; else goto cdfTZ;
       cdfU0: // global
           HpAlloc = 48;
           goto cdfTX;
       cdfTX: // global
           R1 = _sdcEO::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfTZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcEO::P64;
           _sdcDk::P64 = P64[_sdcEO::P64 + 16];
           _sdcDl::P64 = P64[_sdcEO::P64 + 24];
           _sdcDm::P64 = P64[_sdcEO::P64 + 32];
           _sdcDF::P64 = P64[_sdcEO::P64 + 40];
           I64[Hp - 40] = sat_sdcEN_info;
           P64[Hp - 24] = _sdcDk::P64;
           P64[Hp - 16] = _sdcDl::P64;
           P64[Hp - 8] = _sdcDm::P64;
           P64[Hp] = _sdcDF::P64;
           R3 = Hp - 40;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcEO_info" {
     sat_sdcEO_info:
         const sat_sdcEO_entry;
         const 4;
         const 3302829850639;
         const SddB2_srt+480;
 },
 sat_sdcES_entry() //  [R1]
         { []
         }
     {offset
       cdfU1: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cdfU5; else goto cdfU6;
       cdfU5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfU6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 56] = block_cdfR5_info;
           _sdcDk::P64 = P64[R1 + 24];
           _sdcDl::P64 = P64[R1 + 32];
           _sdcDm::P64 = P64[R1 + 40];
           _sdcDF::P64 = P64[R1 + 48];
           R1 = P64[R1 + 16];
           P64[Sp - 48] = _sdcDk::P64;
           P64[Sp - 40] = _sdcDl::P64;
           P64[Sp - 32] = _sdcDm::P64;
           P64[Sp - 24] = _sdcDF::P64;
           Sp = Sp - 56;
           if (R1 & 7 != 0) goto udfUd; else goto cdfR6;
       udfUd: // global
           call _cdfR5(R1) args: 0, res: 0, upd: 0;
       cdfR6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcES_info" {
     sat_sdcES_info:
         const sat_sdcES_entry;
         const 5;
         const 3302829850639;
         const SddB2_srt+480;
 },
 _cdfR5() //  [R1]
         { []
         }
     {offset
       cdfR5: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdfU9; else goto cdfU8;
       cdfU9: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdfU8: // global
           _sdcEk::I64 = I64[R1 + 7];
           I64[Hp - 40] = sat_sdcEO_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = P64[Sp + 32];
           I64[Sp + 32] = block_cdfU2_info;
           R3 = Hp - 40;
           R2 = _sdcEk::I64;
           Sp = Sp + 32;
           call GHC.Show.$wshowWord_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cdfR5_info" {
     block_cdfR5_info:
         const _cdfR5;
         const 4;
         const 3302829850654;
         const SddB2_srt+480;
 },
 _cdfU2() //  [R1, R2]
         { []
         }
     {offset
       cdfU2: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdfUc; else goto cdfUb;
       cdfUc: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cdfUb: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdfU2_info" {
     block_cdfU2_info:
         const _cdfU2;
         const 0;
         const 30;
 },
 sat_sdcET_entry() //  [R1]
         { []
         }
     {offset
       cdfUe: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdfUi; else goto cdfUh;
       cdfUi: // global
           HpAlloc = 56;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfUh: // global
           _sdcDj::P64 = P64[R1 + 16];
           _sdcDk::P64 = P64[R1 + 24];
           _sdcDl::P64 = P64[R1 + 32];
           _sdcDm::P64 = P64[R1 + 40];
           _sdcDF::P64 = P64[R1 + 48];
           I64[Hp - 48] = sat_sdcES_info;
           P64[Hp - 32] = _sdcDj::P64;
           P64[Hp - 24] = _sdcDk::P64;
           P64[Hp - 16] = _sdcDl::P64;
           P64[Hp - 8] = _sdcDm::P64;
           P64[Hp] = _sdcDF::P64;
           R3 = Hp - 48;
           R2 = lvl82_rcV6r_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcET_info" {
     sat_sdcET_info:
         const sat_sdcET_entry;
         const 5;
         const 3302829850639;
         const SddB2_srt+480;
 },
 eta5_sdcEi_entry() //  [R1]
         { []
         }
     {offset
       cdfUj: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdfUn; else goto cdfUm;
       cdfUn: // global
           HpAlloc = 56;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfUm: // global
           _sdcDj::P64 = P64[R1 + 16];
           _sdcDk::P64 = P64[R1 + 24];
           _sdcDl::P64 = P64[R1 + 32];
           _sdcDm::P64 = P64[R1 + 40];
           _sdcDF::P64 = P64[R1 + 48];
           I64[Hp - 48] = sat_sdcET_info;
           P64[Hp - 32] = _sdcDj::P64;
           P64[Hp - 24] = _sdcDk::P64;
           P64[Hp - 16] = _sdcDl::P64;
           P64[Hp - 8] = _sdcDm::P64;
           P64[Hp] = _sdcDF::P64;
           R3 = Hp - 48;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . eta5_sdcEi_info" {
     eta5_sdcEi_info:
         const eta5_sdcEi_entry;
         const 5;
         const 3302829850639;
         const SddB2_srt+480;
 },
 sat_sdcEV_entry() //  [R1]
         { []
         }
     {offset
       cdfUv: // global
           _sdcEV::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cdfUw; else goto cdfUx;
       cdfUx: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdfUz; else goto cdfUy;
       cdfUz: // global
           HpAlloc = 56;
           goto cdfUw;
       cdfUw: // global
           R1 = _sdcEV::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfUy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcEV::P64;
           _sdcDi::P64 = P64[_sdcEV::P64 + 16];
           _sdcDj::P64 = P64[_sdcEV::P64 + 24];
           _sdcDk::P64 = P64[_sdcEV::P64 + 32];
           _sdcDl::P64 = P64[_sdcEV::P64 + 40];
           _sdcDm::P64 = P64[_sdcEV::P64 + 48];
           _sdcDF::P64 = P64[_sdcEV::P64 + 56];
           I64[Hp - 48] = eta5_sdcEi_info;
           P64[Hp - 32] = _sdcDj::P64;
           P64[Hp - 24] = _sdcDk::P64;
           P64[Hp - 16] = _sdcDl::P64;
           P64[Hp - 8] = _sdcDm::P64;
           P64[Hp] = _sdcDF::P64;
           I64[Sp - 32] = block_cdfUo_info;
           R1 = _sdcDi::P64;
           P64[Sp - 24] = Hp - 48;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udfUG; else goto cdfUp;
       udfUG: // global
           call _cdfUo(R1) args: 0, res: 0, upd: 0;
       cdfUp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcEV_info" {
     sat_sdcEV_info:
         const sat_sdcEV_entry;
         const 6;
         const 3302829850639;
         const SddB2_srt+480;
 },
 _cdfUo() //  [R1]
         { []
         }
     {offset
       cdfUo: // global
           _cdfQT::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cdfUs; else goto cdfUt;
       cdfUs: // global
           R3 = _cdfQT::P64;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cdfUt: // global
           R3 = _cdfQT::P64;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdfUo_info" {
     block_cdfUo_info:
         const _cdfUo;
         const 1;
         const 12884901918;
         const SddB2_srt+544;
 },
 sat_sdcEW_entry() //  [R1]
         { []
         }
     {offset
       cdfUH: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdfUL; else goto cdfUK;
       cdfUL: // global
           HpAlloc = 64;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfUK: // global
           _sdcDi::P64 = P64[R1 + 16];
           _sdcDj::P64 = P64[R1 + 24];
           _sdcDk::P64 = P64[R1 + 32];
           _sdcDl::P64 = P64[R1 + 40];
           _sdcDm::P64 = P64[R1 + 48];
           _sdcDF::P64 = P64[R1 + 56];
           I64[Hp - 56] = sat_sdcEV_info;
           P64[Hp - 40] = _sdcDi::P64;
           P64[Hp - 32] = _sdcDj::P64;
           P64[Hp - 24] = _sdcDk::P64;
           P64[Hp - 16] = _sdcDl::P64;
           P64[Hp - 8] = _sdcDm::P64;
           P64[Hp] = _sdcDF::P64;
           R3 = Hp - 56;
           R2 = lvl81_rcV6q_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcEW_info" {
     sat_sdcEW_info:
         const sat_sdcEW_entry;
         const 6;
         const 3302829850639;
         const SddB2_srt+480;
 },
 sat_sdcEX_entry() //  [R1]
         { []
         }
     {offset
       cdfUM: // global
           _sdcEX::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdfUN; else goto cdfUO;
       cdfUO: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdfUQ; else goto cdfUP;
       cdfUQ: // global
           HpAlloc = 64;
           goto cdfUN;
       cdfUN: // global
           R1 = _sdcEX::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfUP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcEX::P64;
           _sdcDi::P64 = P64[_sdcEX::P64 + 16];
           _sdcDj::P64 = P64[_sdcEX::P64 + 24];
           _sdcDk::P64 = P64[_sdcEX::P64 + 32];
           _sdcDl::P64 = P64[_sdcEX::P64 + 40];
           _sdcDm::P64 = P64[_sdcEX::P64 + 48];
           _sdcDF::P64 = P64[_sdcEX::P64 + 56];
           I64[Hp - 56] = sat_sdcEW_info;
           P64[Hp - 40] = _sdcDi::P64;
           P64[Hp - 32] = _sdcDj::P64;
           P64[Hp - 24] = _sdcDk::P64;
           P64[Hp - 16] = _sdcDl::P64;
           P64[Hp - 8] = _sdcDm::P64;
           P64[Hp] = _sdcDF::P64;
           R3 = Hp - 56;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcEX_info" {
     sat_sdcEX_info:
         const sat_sdcEX_entry;
         const 6;
         const 3302829850639;
         const SddB2_srt+480;
 },
 sat_sdcF1_entry() //  [R1]
         { []
         }
     {offset
       cdfUU: // global
           _sdcF1::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cdfUV; else goto cdfUW;
       cdfUW: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdfUY; else goto cdfUX;
       cdfUY: // global
           HpAlloc = 64;
           goto cdfUV;
       cdfUV: // global
           R1 = _sdcF1::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfUX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcF1::P64;
           _sdcDi::P64 = P64[_sdcF1::P64 + 16];
           _sdcDj::P64 = P64[_sdcF1::P64 + 24];
           _sdcDk::P64 = P64[_sdcF1::P64 + 32];
           _sdcDl::P64 = P64[_sdcF1::P64 + 40];
           _sdcDm::P64 = P64[_sdcF1::P64 + 48];
           _sdcDz::P64 = P64[_sdcF1::P64 + 56];
           _sdcDF::P64 = P64[_sdcF1::P64 + 64];
           I64[Hp - 56] = sat_sdcEX_info;
           P64[Hp - 40] = _sdcDi::P64;
           P64[Hp - 32] = _sdcDj::P64;
           P64[Hp - 24] = _sdcDk::P64;
           P64[Hp - 16] = _sdcDl::P64;
           P64[Hp - 8] = _sdcDm::P64;
           P64[Hp] = _sdcDF::P64;
           I64[Sp - 24] = block_cdfUR_info;
           R4 = Hp - 56;
           R3 = _sdcDz::P64;
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcF1_info" {
     sat_sdcF1_info:
         const sat_sdcF1_entry;
         const 7;
         const 13528395363123215;
         const SddB2_srt+384;
 },
 _cdfUR() //  [R1, R2]
         { []
         }
     {offset
       cdfUR: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdfV1; else goto cdfV0;
       cdfV1: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cdfV0: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdfUR_info" {
     block_cdfUR_info:
         const _cdfUR;
         const 0;
         const 30;
 },
 sat_sdcF2_entry() //  [R1]
         { []
         }
     {offset
       cdfV2: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdfV6; else goto cdfV5;
       cdfV6: // global
           HpAlloc = 72;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfV5: // global
           _sdcDi::P64 = P64[R1 + 16];
           _sdcDj::P64 = P64[R1 + 24];
           _sdcDk::P64 = P64[R1 + 32];
           _sdcDl::P64 = P64[R1 + 40];
           _sdcDm::P64 = P64[R1 + 48];
           _sdcDz::P64 = P64[R1 + 56];
           _sdcDF::P64 = P64[R1 + 64];
           I64[Hp - 64] = sat_sdcF1_info;
           P64[Hp - 48] = _sdcDi::P64;
           P64[Hp - 40] = _sdcDj::P64;
           P64[Hp - 32] = _sdcDk::P64;
           P64[Hp - 24] = _sdcDl::P64;
           P64[Hp - 16] = _sdcDm::P64;
           P64[Hp - 8] = _sdcDz::P64;
           P64[Hp] = _sdcDF::P64;
           R3 = Hp - 64;
           R2 = lvl80_rcV6p_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcF2_info" {
     sat_sdcF2_info:
         const sat_sdcF2_entry;
         const 7;
         const 13528395363123215;
         const SddB2_srt+384;
 },
 eta4_sdcEh_entry() //  [R1]
         { []
         }
     {offset
       cdfV7: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdfVb; else goto cdfVa;
       cdfVb: // global
           HpAlloc = 72;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfVa: // global
           _sdcDi::P64 = P64[R1 + 16];
           _sdcDj::P64 = P64[R1 + 24];
           _sdcDk::P64 = P64[R1 + 32];
           _sdcDl::P64 = P64[R1 + 40];
           _sdcDm::P64 = P64[R1 + 48];
           _sdcDz::P64 = P64[R1 + 56];
           _sdcDF::P64 = P64[R1 + 64];
           I64[Hp - 64] = sat_sdcF2_info;
           P64[Hp - 48] = _sdcDi::P64;
           P64[Hp - 40] = _sdcDj::P64;
           P64[Hp - 32] = _sdcDk::P64;
           P64[Hp - 24] = _sdcDl::P64;
           P64[Hp - 16] = _sdcDm::P64;
           P64[Hp - 8] = _sdcDz::P64;
           P64[Hp] = _sdcDF::P64;
           R3 = Hp - 64;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . eta4_sdcEh_info" {
     eta4_sdcEh_info:
         const eta4_sdcEh_entry;
         const 7;
         const 13528395363123215;
         const SddB2_srt+384;
 },
 sat_sdcF4_entry() //  [R1]
         { []
         }
     {offset
       cdfVj: // global
           _sdcF4::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cdfVk; else goto cdfVl;
       cdfVl: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdfVn; else goto cdfVm;
       cdfVn: // global
           HpAlloc = 72;
           goto cdfVk;
       cdfVk: // global
           R1 = _sdcF4::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfVm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcF4::P64;
           _sdcDg::P64 = P64[_sdcF4::P64 + 16];
           _sdcDi::P64 = P64[_sdcF4::P64 + 24];
           _sdcDj::P64 = P64[_sdcF4::P64 + 32];
           _sdcDk::P64 = P64[_sdcF4::P64 + 40];
           _sdcDl::P64 = P64[_sdcF4::P64 + 48];
           _sdcDm::P64 = P64[_sdcF4::P64 + 56];
           _sdcDz::P64 = P64[_sdcF4::P64 + 64];
           _sdcDF::P64 = P64[_sdcF4::P64 + 72];
           I64[Hp - 64] = eta4_sdcEh_info;
           P64[Hp - 48] = _sdcDi::P64;
           P64[Hp - 40] = _sdcDj::P64;
           P64[Hp - 32] = _sdcDk::P64;
           P64[Hp - 24] = _sdcDl::P64;
           P64[Hp - 16] = _sdcDm::P64;
           P64[Hp - 8] = _sdcDz::P64;
           P64[Hp] = _sdcDF::P64;
           I64[Sp - 32] = block_cdfVc_info;
           R1 = _sdcDg::P64;
           P64[Sp - 24] = Hp - 64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udfVu; else goto cdfVd;
       udfVu: // global
           call _cdfVc(R1) args: 0, res: 0, upd: 0;
       cdfVd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcF4_info" {
     sat_sdcF4_info:
         const sat_sdcF4_entry;
         const 8;
         const 13528395363123215;
         const SddB2_srt+384;
 },
 _cdfVc() //  [R1]
         { []
         }
     {offset
       cdfVc: // global
           _cdfQv::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cdfVg; else goto cdfVh;
       cdfVg: // global
           R3 = _cdfQv::P64;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cdfVh: // global
           R3 = _cdfQv::P64;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdfVc_info" {
     block_cdfVc_info:
         const _cdfVc;
         const 1;
         const 12884901918;
         const SddB2_srt+544;
 },
 sat_sdcF5_entry() //  [R1]
         { []
         }
     {offset
       cdfVv: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cdfVz; else goto cdfVy;
       cdfVz: // global
           HpAlloc = 80;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfVy: // global
           _sdcDg::P64 = P64[R1 + 16];
           _sdcDi::P64 = P64[R1 + 24];
           _sdcDj::P64 = P64[R1 + 32];
           _sdcDk::P64 = P64[R1 + 40];
           _sdcDl::P64 = P64[R1 + 48];
           _sdcDm::P64 = P64[R1 + 56];
           _sdcDz::P64 = P64[R1 + 64];
           _sdcDF::P64 = P64[R1 + 72];
           I64[Hp - 72] = sat_sdcF4_info;
           P64[Hp - 56] = _sdcDg::P64;
           P64[Hp - 48] = _sdcDi::P64;
           P64[Hp - 40] = _sdcDj::P64;
           P64[Hp - 32] = _sdcDk::P64;
           P64[Hp - 24] = _sdcDl::P64;
           P64[Hp - 16] = _sdcDm::P64;
           P64[Hp - 8] = _sdcDz::P64;
           P64[Hp] = _sdcDF::P64;
           R3 = Hp - 72;
           R2 = lvl79_rcV6o_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcF5_info" {
     sat_sdcF5_info:
         const sat_sdcF5_entry;
         const 8;
         const 13528395363123215;
         const SddB2_srt+384;
 },
 eta3_sdcEg_entry() //  [R1]
         { []
         }
     {offset
       cdfVA: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cdfVE; else goto cdfVD;
       cdfVE: // global
           HpAlloc = 80;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfVD: // global
           _sdcDg::P64 = P64[R1 + 16];
           _sdcDi::P64 = P64[R1 + 24];
           _sdcDj::P64 = P64[R1 + 32];
           _sdcDk::P64 = P64[R1 + 40];
           _sdcDl::P64 = P64[R1 + 48];
           _sdcDm::P64 = P64[R1 + 56];
           _sdcDz::P64 = P64[R1 + 64];
           _sdcDF::P64 = P64[R1 + 72];
           I64[Hp - 72] = sat_sdcF5_info;
           P64[Hp - 56] = _sdcDg::P64;
           P64[Hp - 48] = _sdcDi::P64;
           P64[Hp - 40] = _sdcDj::P64;
           P64[Hp - 32] = _sdcDk::P64;
           P64[Hp - 24] = _sdcDl::P64;
           P64[Hp - 16] = _sdcDm::P64;
           P64[Hp - 8] = _sdcDz::P64;
           P64[Hp] = _sdcDF::P64;
           R3 = Hp - 72;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . eta3_sdcEg_info" {
     eta3_sdcEg_info:
         const eta3_sdcEg_entry;
         const 8;
         const 13528395363123215;
         const SddB2_srt+384;
 },
 sat_sdcF7_entry() //  [R1]
         { []
         }
     {offset
       cdfVM: // global
           _sdcF7::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cdfVN; else goto cdfVO;
       cdfVO: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cdfVQ; else goto cdfVP;
       cdfVQ: // global
           HpAlloc = 80;
           goto cdfVN;
       cdfVN: // global
           R1 = _sdcF7::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfVP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcF7::P64;
           _sdcDf::P64 = P64[_sdcF7::P64 + 16];
           _sdcDg::P64 = P64[_sdcF7::P64 + 24];
           _sdcDi::P64 = P64[_sdcF7::P64 + 32];
           _sdcDj::P64 = P64[_sdcF7::P64 + 40];
           _sdcDk::P64 = P64[_sdcF7::P64 + 48];
           _sdcDl::P64 = P64[_sdcF7::P64 + 56];
           _sdcDm::P64 = P64[_sdcF7::P64 + 64];
           _sdcDz::P64 = P64[_sdcF7::P64 + 72];
           _sdcDF::P64 = P64[_sdcF7::P64 + 80];
           I64[Hp - 72] = eta3_sdcEg_info;
           P64[Hp - 56] = _sdcDg::P64;
           P64[Hp - 48] = _sdcDi::P64;
           P64[Hp - 40] = _sdcDj::P64;
           P64[Hp - 32] = _sdcDk::P64;
           P64[Hp - 24] = _sdcDl::P64;
           P64[Hp - 16] = _sdcDm::P64;
           P64[Hp - 8] = _sdcDz::P64;
           P64[Hp] = _sdcDF::P64;
           I64[Sp - 32] = block_cdfVF_info;
           R1 = _sdcDf::P64;
           P64[Sp - 24] = Hp - 72;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udfVX; else goto cdfVG;
       udfVX: // global
           call _cdfVF(R1) args: 0, res: 0, upd: 0;
       cdfVG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcF7_info" {
     sat_sdcF7_info:
         const sat_sdcF7_entry;
         const 9;
         const 13528395363123215;
         const SddB2_srt+384;
 },
 _cdfVF() //  [R1]
         { []
         }
     {offset
       cdfVF: // global
           _cdfQj::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cdfVJ; else goto cdfVK;
       cdfVJ: // global
           R3 = _cdfQj::P64;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cdfVK: // global
           R3 = _cdfQj::P64;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdfVF_info" {
     block_cdfVF_info:
         const _cdfVF;
         const 1;
         const 12884901918;
         const SddB2_srt+544;
 },
 sat_sdcF8_entry() //  [R1]
         { []
         }
     {offset
       cdfVY: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdfW2; else goto cdfW1;
       cdfW2: // global
           HpAlloc = 88;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfW1: // global
           _sdcDf::P64 = P64[R1 + 16];
           _sdcDg::P64 = P64[R1 + 24];
           _sdcDi::P64 = P64[R1 + 32];
           _sdcDj::P64 = P64[R1 + 40];
           _sdcDk::P64 = P64[R1 + 48];
           _sdcDl::P64 = P64[R1 + 56];
           _sdcDm::P64 = P64[R1 + 64];
           _sdcDz::P64 = P64[R1 + 72];
           _sdcDF::P64 = P64[R1 + 80];
           I64[Hp - 80] = sat_sdcF7_info;
           P64[Hp - 64] = _sdcDf::P64;
           P64[Hp - 56] = _sdcDg::P64;
           P64[Hp - 48] = _sdcDi::P64;
           P64[Hp - 40] = _sdcDj::P64;
           P64[Hp - 32] = _sdcDk::P64;
           P64[Hp - 24] = _sdcDl::P64;
           P64[Hp - 16] = _sdcDm::P64;
           P64[Hp - 8] = _sdcDz::P64;
           P64[Hp] = _sdcDF::P64;
           R3 = Hp - 80;
           R2 = lvl78_rcV6n_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcF8_info" {
     sat_sdcF8_info:
         const sat_sdcF8_entry;
         const 9;
         const 13528395363123215;
         const SddB2_srt+384;
 },
 sat_sdcF9_entry() //  [R1]
         { []
         }
     {offset
       cdfW3: // global
           _sdcF9::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdfW4; else goto cdfW5;
       cdfW5: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdfW7; else goto cdfW6;
       cdfW7: // global
           HpAlloc = 88;
           goto cdfW4;
       cdfW4: // global
           R1 = _sdcF9::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfW6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcF9::P64;
           _sdcDf::P64 = P64[_sdcF9::P64 + 16];
           _sdcDg::P64 = P64[_sdcF9::P64 + 24];
           _sdcDi::P64 = P64[_sdcF9::P64 + 32];
           _sdcDj::P64 = P64[_sdcF9::P64 + 40];
           _sdcDk::P64 = P64[_sdcF9::P64 + 48];
           _sdcDl::P64 = P64[_sdcF9::P64 + 56];
           _sdcDm::P64 = P64[_sdcF9::P64 + 64];
           _sdcDz::P64 = P64[_sdcF9::P64 + 72];
           _sdcDF::P64 = P64[_sdcF9::P64 + 80];
           I64[Hp - 80] = sat_sdcF8_info;
           P64[Hp - 64] = _sdcDf::P64;
           P64[Hp - 56] = _sdcDg::P64;
           P64[Hp - 48] = _sdcDi::P64;
           P64[Hp - 40] = _sdcDj::P64;
           P64[Hp - 32] = _sdcDk::P64;
           P64[Hp - 24] = _sdcDl::P64;
           P64[Hp - 16] = _sdcDm::P64;
           P64[Hp - 8] = _sdcDz::P64;
           P64[Hp] = _sdcDF::P64;
           R3 = Hp - 80;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcF9_info" {
     sat_sdcF9_info:
         const sat_sdcF9_entry;
         const 9;
         const 13528395363123215;
         const SddB2_srt+384;
 },
 sat_sdcFa_entry() //  [R1]
         { []
         }
     {offset
       cdfW8: // global
           _sdcFa::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdfW9; else goto cdfWa;
       cdfWa: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdfWc; else goto cdfWb;
       cdfWc: // global
           HpAlloc = 88;
           goto cdfW9;
       cdfW9: // global
           R1 = _sdcFa::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfWb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcFa::P64;
           _sdcDf::P64 = P64[_sdcFa::P64 + 16];
           _sdcDg::P64 = P64[_sdcFa::P64 + 24];
           _sdcDi::P64 = P64[_sdcFa::P64 + 32];
           _sdcDj::P64 = P64[_sdcFa::P64 + 40];
           _sdcDk::P64 = P64[_sdcFa::P64 + 48];
           _sdcDl::P64 = P64[_sdcFa::P64 + 56];
           _sdcDm::P64 = P64[_sdcFa::P64 + 64];
           _sdcDw::P64 = P64[_sdcFa::P64 + 72];
           _sdcDz::P64 = P64[_sdcFa::P64 + 80];
           _sdcDF::P64 = P64[_sdcFa::P64 + 88];
           I64[Hp - 80] = sat_sdcF9_info;
           P64[Hp - 64] = _sdcDf::P64;
           P64[Hp - 56] = _sdcDg::P64;
           P64[Hp - 48] = _sdcDi::P64;
           P64[Hp - 40] = _sdcDj::P64;
           P64[Hp - 32] = _sdcDk::P64;
           P64[Hp - 24] = _sdcDl::P64;
           P64[Hp - 16] = _sdcDm::P64;
           P64[Hp - 8] = _sdcDz::P64;
           P64[Hp] = _sdcDF::P64;
           R2 = Hp - 80;
           R1 = _sdcDw::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcFa_info" {
     sat_sdcFa_info:
         const sat_sdcFa_entry;
         const 10;
         const 13528395363123215;
         const SddB2_srt+384;
 },
 sat_sdcFb_entry() //  [R1]
         { []
         }
     {offset
       cdfWd: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cdfWh; else goto cdfWg;
       cdfWh: // global
           HpAlloc = 96;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfWg: // global
           _sdcDf::P64 = P64[R1 + 16];
           _sdcDg::P64 = P64[R1 + 24];
           _sdcDi::P64 = P64[R1 + 32];
           _sdcDj::P64 = P64[R1 + 40];
           _sdcDk::P64 = P64[R1 + 48];
           _sdcDl::P64 = P64[R1 + 56];
           _sdcDm::P64 = P64[R1 + 64];
           _sdcDw::P64 = P64[R1 + 72];
           _sdcDz::P64 = P64[R1 + 80];
           _sdcDF::P64 = P64[R1 + 88];
           I64[Hp - 88] = sat_sdcFa_info;
           P64[Hp - 72] = _sdcDf::P64;
           P64[Hp - 64] = _sdcDg::P64;
           P64[Hp - 56] = _sdcDi::P64;
           P64[Hp - 48] = _sdcDj::P64;
           P64[Hp - 40] = _sdcDk::P64;
           P64[Hp - 32] = _sdcDl::P64;
           P64[Hp - 24] = _sdcDm::P64;
           P64[Hp - 16] = _sdcDw::P64;
           P64[Hp - 8] = _sdcDz::P64;
           P64[Hp] = _sdcDF::P64;
           R3 = Hp - 88;
           R2 = lvl77_rcV6m_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcFb_info" {
     sat_sdcFb_info:
         const sat_sdcFb_entry;
         const 10;
         const 13528395363123215;
         const SddB2_srt+384;
 },
 eta2_sdcEf_entry() //  [R1]
         { []
         }
     {offset
       cdfWi: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cdfWm; else goto cdfWl;
       cdfWm: // global
           HpAlloc = 96;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfWl: // global
           _sdcDf::P64 = P64[R1 + 16];
           _sdcDg::P64 = P64[R1 + 24];
           _sdcDi::P64 = P64[R1 + 32];
           _sdcDj::P64 = P64[R1 + 40];
           _sdcDk::P64 = P64[R1 + 48];
           _sdcDl::P64 = P64[R1 + 56];
           _sdcDm::P64 = P64[R1 + 64];
           _sdcDw::P64 = P64[R1 + 72];
           _sdcDz::P64 = P64[R1 + 80];
           _sdcDF::P64 = P64[R1 + 88];
           I64[Hp - 88] = sat_sdcFb_info;
           P64[Hp - 72] = _sdcDf::P64;
           P64[Hp - 64] = _sdcDg::P64;
           P64[Hp - 56] = _sdcDi::P64;
           P64[Hp - 48] = _sdcDj::P64;
           P64[Hp - 40] = _sdcDk::P64;
           P64[Hp - 32] = _sdcDl::P64;
           P64[Hp - 24] = _sdcDm::P64;
           P64[Hp - 16] = _sdcDw::P64;
           P64[Hp - 8] = _sdcDz::P64;
           P64[Hp] = _sdcDF::P64;
           R3 = Hp - 88;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . eta2_sdcEf_info" {
     eta2_sdcEf_info:
         const eta2_sdcEf_entry;
         const 10;
         const 13528395363123215;
         const SddB2_srt+384;
 },
 sat_sdcFd_entry() //  [R1]
         { []
         }
     {offset
       cdfWu: // global
           _sdcFd::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cdfWv; else goto cdfWw;
       cdfWw: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cdfWy; else goto cdfWx;
       cdfWy: // global
           HpAlloc = 96;
           goto cdfWv;
       cdfWv: // global
           R1 = _sdcFd::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfWx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcFd::P64;
           _sdcDd::P64 = P64[_sdcFd::P64 + 16];
           _sdcDf::P64 = P64[_sdcFd::P64 + 24];
           _sdcDg::P64 = P64[_sdcFd::P64 + 32];
           _sdcDi::P64 = P64[_sdcFd::P64 + 40];
           _sdcDj::P64 = P64[_sdcFd::P64 + 48];
           _sdcDk::P64 = P64[_sdcFd::P64 + 56];
           _sdcDl::P64 = P64[_sdcFd::P64 + 64];
           _sdcDm::P64 = P64[_sdcFd::P64 + 72];
           _sdcDw::P64 = P64[_sdcFd::P64 + 80];
           _sdcDz::P64 = P64[_sdcFd::P64 + 88];
           _sdcDF::P64 = P64[_sdcFd::P64 + 96];
           I64[Hp - 88] = eta2_sdcEf_info;
           P64[Hp - 72] = _sdcDf::P64;
           P64[Hp - 64] = _sdcDg::P64;
           P64[Hp - 56] = _sdcDi::P64;
           P64[Hp - 48] = _sdcDj::P64;
           P64[Hp - 40] = _sdcDk::P64;
           P64[Hp - 32] = _sdcDl::P64;
           P64[Hp - 24] = _sdcDm::P64;
           P64[Hp - 16] = _sdcDw::P64;
           P64[Hp - 8] = _sdcDz::P64;
           P64[Hp] = _sdcDF::P64;
           I64[Sp - 32] = block_cdfWn_info;
           R1 = _sdcDd::P64;
           P64[Sp - 24] = Hp - 88;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udfWF; else goto cdfWo;
       udfWF: // global
           call _cdfWn(R1) args: 0, res: 0, upd: 0;
       cdfWo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcFd_info" {
     sat_sdcFd_info:
         const sat_sdcFd_entry;
         const 11;
         const 13528395363123215;
         const SddB2_srt+384;
 },
 _cdfWn() //  [R1]
         { []
         }
     {offset
       cdfWn: // global
           _cdfPV::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cdfWr; else goto cdfWs;
       cdfWr: // global
           R3 = _cdfPV::P64;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cdfWs: // global
           R3 = _cdfPV::P64;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdfWn_info" {
     block_cdfWn_info:
         const _cdfWn;
         const 1;
         const 12884901918;
         const SddB2_srt+544;
 },
 sat_sdcFe_entry() //  [R1]
         { []
         }
     {offset
       cdfWG: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cdfWK; else goto cdfWJ;
       cdfWK: // global
           HpAlloc = 104;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfWJ: // global
           _sdcDd::P64 = P64[R1 + 16];
           _sdcDf::P64 = P64[R1 + 24];
           _sdcDg::P64 = P64[R1 + 32];
           _sdcDi::P64 = P64[R1 + 40];
           _sdcDj::P64 = P64[R1 + 48];
           _sdcDk::P64 = P64[R1 + 56];
           _sdcDl::P64 = P64[R1 + 64];
           _sdcDm::P64 = P64[R1 + 72];
           _sdcDw::P64 = P64[R1 + 80];
           _sdcDz::P64 = P64[R1 + 88];
           _sdcDF::P64 = P64[R1 + 96];
           I64[Hp - 96] = sat_sdcFd_info;
           P64[Hp - 80] = _sdcDd::P64;
           P64[Hp - 72] = _sdcDf::P64;
           P64[Hp - 64] = _sdcDg::P64;
           P64[Hp - 56] = _sdcDi::P64;
           P64[Hp - 48] = _sdcDj::P64;
           P64[Hp - 40] = _sdcDk::P64;
           P64[Hp - 32] = _sdcDl::P64;
           P64[Hp - 24] = _sdcDm::P64;
           P64[Hp - 16] = _sdcDw::P64;
           P64[Hp - 8] = _sdcDz::P64;
           P64[Hp] = _sdcDF::P64;
           R3 = Hp - 96;
           R2 = lvl76_rcV6l_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcFe_info" {
     sat_sdcFe_info:
         const sat_sdcFe_entry;
         const 11;
         const 13528395363123215;
         const SddB2_srt+384;
 },
 eta1_sdcEe_entry() //  [R1]
         { []
         }
     {offset
       cdfWL: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cdfWP; else goto cdfWO;
       cdfWP: // global
           HpAlloc = 104;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfWO: // global
           _sdcDd::P64 = P64[R1 + 16];
           _sdcDf::P64 = P64[R1 + 24];
           _sdcDg::P64 = P64[R1 + 32];
           _sdcDi::P64 = P64[R1 + 40];
           _sdcDj::P64 = P64[R1 + 48];
           _sdcDk::P64 = P64[R1 + 56];
           _sdcDl::P64 = P64[R1 + 64];
           _sdcDm::P64 = P64[R1 + 72];
           _sdcDw::P64 = P64[R1 + 80];
           _sdcDz::P64 = P64[R1 + 88];
           _sdcDF::P64 = P64[R1 + 96];
           I64[Hp - 96] = sat_sdcFe_info;
           P64[Hp - 80] = _sdcDd::P64;
           P64[Hp - 72] = _sdcDf::P64;
           P64[Hp - 64] = _sdcDg::P64;
           P64[Hp - 56] = _sdcDi::P64;
           P64[Hp - 48] = _sdcDj::P64;
           P64[Hp - 40] = _sdcDk::P64;
           P64[Hp - 32] = _sdcDl::P64;
           P64[Hp - 24] = _sdcDm::P64;
           P64[Hp - 16] = _sdcDw::P64;
           P64[Hp - 8] = _sdcDz::P64;
           P64[Hp] = _sdcDF::P64;
           R3 = Hp - 96;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . eta1_sdcEe_info" {
     eta1_sdcEe_info:
         const eta1_sdcEe_entry;
         const 11;
         const 13528395363123215;
         const SddB2_srt+384;
 },
 sat_sdcFg_entry() //  [R1]
         { []
         }
     {offset
       cdfWX: // global
           _sdcFg::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cdfWY; else goto cdfWZ;
       cdfWZ: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cdfX1; else goto cdfX0;
       cdfX1: // global
           HpAlloc = 104;
           goto cdfWY;
       cdfWY: // global
           R1 = _sdcFg::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfX0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcFg::P64;
           _sdcDc::P64 = P64[_sdcFg::P64 + 16];
           _sdcDd::P64 = P64[_sdcFg::P64 + 24];
           _sdcDf::P64 = P64[_sdcFg::P64 + 32];
           _sdcDg::P64 = P64[_sdcFg::P64 + 40];
           _sdcDi::P64 = P64[_sdcFg::P64 + 48];
           _sdcDj::P64 = P64[_sdcFg::P64 + 56];
           _sdcDk::P64 = P64[_sdcFg::P64 + 64];
           _sdcDl::P64 = P64[_sdcFg::P64 + 72];
           _sdcDm::P64 = P64[_sdcFg::P64 + 80];
           _sdcDw::P64 = P64[_sdcFg::P64 + 88];
           _sdcDz::P64 = P64[_sdcFg::P64 + 96];
           _sdcDF::P64 = P64[_sdcFg::P64 + 104];
           I64[Hp - 96] = eta1_sdcEe_info;
           P64[Hp - 80] = _sdcDd::P64;
           P64[Hp - 72] = _sdcDf::P64;
           P64[Hp - 64] = _sdcDg::P64;
           P64[Hp - 56] = _sdcDi::P64;
           P64[Hp - 48] = _sdcDj::P64;
           P64[Hp - 40] = _sdcDk::P64;
           P64[Hp - 32] = _sdcDl::P64;
           P64[Hp - 24] = _sdcDm::P64;
           P64[Hp - 16] = _sdcDw::P64;
           P64[Hp - 8] = _sdcDz::P64;
           P64[Hp] = _sdcDF::P64;
           I64[Sp - 32] = block_cdfWQ_info;
           R1 = _sdcDc::P64;
           P64[Sp - 24] = Hp - 96;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udfX8; else goto cdfWR;
       udfX8: // global
           call _cdfWQ(R1) args: 0, res: 0, upd: 0;
       cdfWR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcFg_info" {
     sat_sdcFg_info:
         const sat_sdcFg_entry;
         const 12;
         const 13528395363123215;
         const SddB2_srt+384;
 },
 _cdfWQ() //  [R1]
         { []
         }
     {offset
       cdfWQ: // global
           _cdfPJ::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cdfWU; else goto cdfWV;
       cdfWU: // global
           R3 = _cdfPJ::P64;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cdfWV: // global
           R3 = _cdfPJ::P64;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdfWQ_info" {
     block_cdfWQ_info:
         const _cdfWQ;
         const 1;
         const 12884901918;
         const SddB2_srt+544;
 },
 sat_sdcFh_entry() //  [R1]
         { []
         }
     {offset
       cdfX9: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto cdfXd; else goto cdfXc;
       cdfXd: // global
           HpAlloc = 112;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfXc: // global
           _sdcDc::P64 = P64[R1 + 16];
           _sdcDd::P64 = P64[R1 + 24];
           _sdcDf::P64 = P64[R1 + 32];
           _sdcDg::P64 = P64[R1 + 40];
           _sdcDi::P64 = P64[R1 + 48];
           _sdcDj::P64 = P64[R1 + 56];
           _sdcDk::P64 = P64[R1 + 64];
           _sdcDl::P64 = P64[R1 + 72];
           _sdcDm::P64 = P64[R1 + 80];
           _sdcDw::P64 = P64[R1 + 88];
           _sdcDz::P64 = P64[R1 + 96];
           _sdcDF::P64 = P64[R1 + 104];
           I64[Hp - 104] = sat_sdcFg_info;
           P64[Hp - 88] = _sdcDc::P64;
           P64[Hp - 80] = _sdcDd::P64;
           P64[Hp - 72] = _sdcDf::P64;
           P64[Hp - 64] = _sdcDg::P64;
           P64[Hp - 56] = _sdcDi::P64;
           P64[Hp - 48] = _sdcDj::P64;
           P64[Hp - 40] = _sdcDk::P64;
           P64[Hp - 32] = _sdcDl::P64;
           P64[Hp - 24] = _sdcDm::P64;
           P64[Hp - 16] = _sdcDw::P64;
           P64[Hp - 8] = _sdcDz::P64;
           P64[Hp] = _sdcDF::P64;
           R3 = Hp - 104;
           R2 = lvl75_rcV6k_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcFh_info" {
     sat_sdcFh_info:
         const sat_sdcFh_entry;
         const 12;
         const 13528395363123215;
         const SddB2_srt+384;
 },
 sat_sdcFi_entry() //  [R1]
         { []
         }
     {offset
       cdfXe: // global
           _sdcFi::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdfXf; else goto cdfXg;
       cdfXg: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto cdfXi; else goto cdfXh;
       cdfXi: // global
           HpAlloc = 112;
           goto cdfXf;
       cdfXf: // global
           R1 = _sdcFi::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfXh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcFi::P64;
           _sdcDc::P64 = P64[_sdcFi::P64 + 16];
           _sdcDd::P64 = P64[_sdcFi::P64 + 24];
           _sdcDf::P64 = P64[_sdcFi::P64 + 32];
           _sdcDg::P64 = P64[_sdcFi::P64 + 40];
           _sdcDi::P64 = P64[_sdcFi::P64 + 48];
           _sdcDj::P64 = P64[_sdcFi::P64 + 56];
           _sdcDk::P64 = P64[_sdcFi::P64 + 64];
           _sdcDl::P64 = P64[_sdcFi::P64 + 72];
           _sdcDm::P64 = P64[_sdcFi::P64 + 80];
           _sdcDw::P64 = P64[_sdcFi::P64 + 88];
           _sdcDz::P64 = P64[_sdcFi::P64 + 96];
           _sdcDF::P64 = P64[_sdcFi::P64 + 104];
           I64[Hp - 104] = sat_sdcFh_info;
           P64[Hp - 88] = _sdcDc::P64;
           P64[Hp - 80] = _sdcDd::P64;
           P64[Hp - 72] = _sdcDf::P64;
           P64[Hp - 64] = _sdcDg::P64;
           P64[Hp - 56] = _sdcDi::P64;
           P64[Hp - 48] = _sdcDj::P64;
           P64[Hp - 40] = _sdcDk::P64;
           P64[Hp - 32] = _sdcDl::P64;
           P64[Hp - 24] = _sdcDm::P64;
           P64[Hp - 16] = _sdcDw::P64;
           P64[Hp - 8] = _sdcDz::P64;
           P64[Hp] = _sdcDF::P64;
           R3 = Hp - 104;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcFi_info" {
     sat_sdcFi_info:
         const sat_sdcFi_entry;
         const 12;
         const 13528395363123215;
         const SddB2_srt+384;
 },
 sat_sdcFm_entry() //  [R1]
         { []
         }
     {offset
       cdfXj: // global
           if ((Sp + -120) < SpLim) (likely: False) goto cdfXq; else goto cdfXr;
       cdfXq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfXr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 120] = block_cdfPs_info;
           _sdcDc::P64 = P64[R1 + 24];
           _sdcDd::P64 = P64[R1 + 32];
           _sdcDf::P64 = P64[R1 + 40];
           _sdcDg::P64 = P64[R1 + 48];
           _sdcDi::P64 = P64[R1 + 56];
           _sdcDj::P64 = P64[R1 + 64];
           _sdcDk::P64 = P64[R1 + 72];
           _sdcDl::P64 = P64[R1 + 80];
           _sdcDm::P64 = P64[R1 + 88];
           _sdcDw::P64 = P64[R1 + 96];
           _sdcDz::P64 = P64[R1 + 104];
           _sdcDF::P64 = P64[R1 + 112];
           R1 = P64[R1 + 16];
           P64[Sp - 112] = _sdcDc::P64;
           P64[Sp - 104] = _sdcDd::P64;
           P64[Sp - 96] = _sdcDf::P64;
           P64[Sp - 88] = _sdcDg::P64;
           P64[Sp - 80] = _sdcDi::P64;
           P64[Sp - 72] = _sdcDj::P64;
           P64[Sp - 64] = _sdcDk::P64;
           P64[Sp - 56] = _sdcDl::P64;
           P64[Sp - 48] = _sdcDm::P64;
           P64[Sp - 40] = _sdcDw::P64;
           P64[Sp - 32] = _sdcDz::P64;
           P64[Sp - 24] = _sdcDF::P64;
           Sp = Sp - 120;
           if (R1 & 7 != 0) goto udfXy; else goto cdfPt;
       udfXy: // global
           call _cdfPs(R1) args: 0, res: 0, upd: 0;
       cdfPt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcFm_info" {
     sat_sdcFm_info:
         const sat_sdcFm_entry;
         const 13;
         const 13528395363123215;
         const SddB2_srt+384;
 },
 _cdfPs() //  [R1]
         { []
         }
     {offset
       cdfPs: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto cdfXu; else goto cdfXt;
       cdfXu: // global
           HpAlloc = 112;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdfXt: // global
           _sdcEc::I64 = I64[R1 + 7];
           I64[Hp - 104] = sat_sdcFi_info;
           P64[Hp - 88] = P64[Sp + 8];
           P64[Hp - 80] = P64[Sp + 16];
           P64[Hp - 72] = P64[Sp + 24];
           P64[Hp - 64] = P64[Sp + 32];
           P64[Hp - 56] = P64[Sp + 40];
           P64[Hp - 48] = P64[Sp + 48];
           P64[Hp - 40] = P64[Sp + 56];
           P64[Hp - 32] = P64[Sp + 64];
           P64[Hp - 24] = P64[Sp + 72];
           P64[Hp - 16] = P64[Sp + 80];
           P64[Hp - 8] = P64[Sp + 88];
           P64[Hp] = P64[Sp + 96];
           I64[Sp + 96] = block_cdfXn_info;
           R3 = Hp - 104;
           R2 = _sdcEc::I64;
           Sp = Sp + 96;
           call GHC.Show.$witos_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cdfPs_info" {
     block_cdfPs_info:
         const _cdfPs;
         const 12;
         const 13528395363123230;
         const SddB2_srt+384;
 },
 _cdfXn() //  [R1, R2]
         { []
         }
     {offset
       cdfXn: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdfXx; else goto cdfXw;
       cdfXx: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cdfXw: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdfXn_info" {
     block_cdfXn_info:
         const _cdfXn;
         const 0;
         const 30;
 },
 sat_sdcFn_entry() //  [R1]
         { []
         }
     {offset
       cdfXz: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto cdfXD; else goto cdfXC;
       cdfXD: // global
           HpAlloc = 120;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfXC: // global
           _sdcDb::P64 = P64[R1 + 16];
           _sdcDc::P64 = P64[R1 + 24];
           _sdcDd::P64 = P64[R1 + 32];
           _sdcDf::P64 = P64[R1 + 40];
           _sdcDg::P64 = P64[R1 + 48];
           _sdcDi::P64 = P64[R1 + 56];
           _sdcDj::P64 = P64[R1 + 64];
           _sdcDk::P64 = P64[R1 + 72];
           _sdcDl::P64 = P64[R1 + 80];
           _sdcDm::P64 = P64[R1 + 88];
           _sdcDw::P64 = P64[R1 + 96];
           _sdcDz::P64 = P64[R1 + 104];
           _sdcDF::P64 = P64[R1 + 112];
           I64[Hp - 112] = sat_sdcFm_info;
           P64[Hp - 96] = _sdcDb::P64;
           P64[Hp - 88] = _sdcDc::P64;
           P64[Hp - 80] = _sdcDd::P64;
           P64[Hp - 72] = _sdcDf::P64;
           P64[Hp - 64] = _sdcDg::P64;
           P64[Hp - 56] = _sdcDi::P64;
           P64[Hp - 48] = _sdcDj::P64;
           P64[Hp - 40] = _sdcDk::P64;
           P64[Hp - 32] = _sdcDl::P64;
           P64[Hp - 24] = _sdcDm::P64;
           P64[Hp - 16] = _sdcDw::P64;
           P64[Hp - 8] = _sdcDz::P64;
           P64[Hp] = _sdcDF::P64;
           R3 = Hp - 112;
           R2 = lvl74_rcV6j_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcFn_info" {
     sat_sdcFn_info:
         const sat_sdcFn_entry;
         const 13;
         const 13528395363123215;
         const SddB2_srt+384;
 },
 sat_sdcFo_entry() //  [R1]
         { []
         }
     {offset
       cdfXE: // global
           _sdcFo::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdfXF; else goto cdfXG;
       cdfXG: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto cdfXI; else goto cdfXH;
       cdfXI: // global
           HpAlloc = 120;
           goto cdfXF;
       cdfXF: // global
           R1 = _sdcFo::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfXH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcFo::P64;
           _sdcDb::P64 = P64[_sdcFo::P64 + 16];
           _sdcDc::P64 = P64[_sdcFo::P64 + 24];
           _sdcDd::P64 = P64[_sdcFo::P64 + 32];
           _sdcDf::P64 = P64[_sdcFo::P64 + 40];
           _sdcDg::P64 = P64[_sdcFo::P64 + 48];
           _sdcDi::P64 = P64[_sdcFo::P64 + 56];
           _sdcDj::P64 = P64[_sdcFo::P64 + 64];
           _sdcDk::P64 = P64[_sdcFo::P64 + 72];
           _sdcDl::P64 = P64[_sdcFo::P64 + 80];
           _sdcDm::P64 = P64[_sdcFo::P64 + 88];
           _sdcDw::P64 = P64[_sdcFo::P64 + 96];
           _sdcDz::P64 = P64[_sdcFo::P64 + 104];
           _sdcDF::P64 = P64[_sdcFo::P64 + 112];
           I64[Hp - 112] = sat_sdcFn_info;
           P64[Hp - 96] = _sdcDb::P64;
           P64[Hp - 88] = _sdcDc::P64;
           P64[Hp - 80] = _sdcDd::P64;
           P64[Hp - 72] = _sdcDf::P64;
           P64[Hp - 64] = _sdcDg::P64;
           P64[Hp - 56] = _sdcDi::P64;
           P64[Hp - 48] = _sdcDj::P64;
           P64[Hp - 40] = _sdcDk::P64;
           P64[Hp - 32] = _sdcDl::P64;
           P64[Hp - 24] = _sdcDm::P64;
           P64[Hp - 16] = _sdcDw::P64;
           P64[Hp - 8] = _sdcDz::P64;
           P64[Hp] = _sdcDF::P64;
           R3 = Hp - 112;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcFo_info" {
     sat_sdcFo_info:
         const sat_sdcFo_entry;
         const 13;
         const 13528395363123215;
         const SddB2_srt+384;
 },
 sat_sdcFp_entry() //  [R1]
         { []
         }
     {offset
       cdfXJ: // global
           _sdcFp::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdfXK; else goto cdfXL;
       cdfXL: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto cdfXN; else goto cdfXM;
       cdfXN: // global
           HpAlloc = 120;
           goto cdfXK;
       cdfXK: // global
           R1 = _sdcFp::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfXM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcFp::P64;
           _sdcDb::P64 = P64[_sdcFp::P64 + 16];
           _sdcDc::P64 = P64[_sdcFp::P64 + 24];
           _sdcDd::P64 = P64[_sdcFp::P64 + 32];
           _sdcDf::P64 = P64[_sdcFp::P64 + 40];
           _sdcDg::P64 = P64[_sdcFp::P64 + 48];
           _sdcDi::P64 = P64[_sdcFp::P64 + 56];
           _sdcDj::P64 = P64[_sdcFp::P64 + 64];
           _sdcDk::P64 = P64[_sdcFp::P64 + 72];
           _sdcDl::P64 = P64[_sdcFp::P64 + 80];
           _sdcDm::P64 = P64[_sdcFp::P64 + 88];
           _sdcDt::P64 = P64[_sdcFp::P64 + 96];
           _sdcDw::P64 = P64[_sdcFp::P64 + 104];
           _sdcDz::P64 = P64[_sdcFp::P64 + 112];
           _sdcDF::P64 = P64[_sdcFp::P64 + 120];
           I64[Hp - 112] = sat_sdcFo_info;
           P64[Hp - 96] = _sdcDb::P64;
           P64[Hp - 88] = _sdcDc::P64;
           P64[Hp - 80] = _sdcDd::P64;
           P64[Hp - 72] = _sdcDf::P64;
           P64[Hp - 64] = _sdcDg::P64;
           P64[Hp - 56] = _sdcDi::P64;
           P64[Hp - 48] = _sdcDj::P64;
           P64[Hp - 40] = _sdcDk::P64;
           P64[Hp - 32] = _sdcDl::P64;
           P64[Hp - 24] = _sdcDm::P64;
           P64[Hp - 16] = _sdcDw::P64;
           P64[Hp - 8] = _sdcDz::P64;
           P64[Hp] = _sdcDF::P64;
           R2 = Hp - 112;
           R1 = _sdcDt::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcFp_info" {
     sat_sdcFp_info:
         const sat_sdcFp_entry;
         const 14;
         const 13528395363123215;
         const SddB2_srt+384;
 },
 sat_sdcFq_entry() //  [R1]
         { []
         }
     {offset
       cdfXO: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto cdfXS; else goto cdfXR;
       cdfXS: // global
           HpAlloc = 128;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfXR: // global
           _sdcDb::P64 = P64[R1 + 16];
           _sdcDc::P64 = P64[R1 + 24];
           _sdcDd::P64 = P64[R1 + 32];
           _sdcDf::P64 = P64[R1 + 40];
           _sdcDg::P64 = P64[R1 + 48];
           _sdcDi::P64 = P64[R1 + 56];
           _sdcDj::P64 = P64[R1 + 64];
           _sdcDk::P64 = P64[R1 + 72];
           _sdcDl::P64 = P64[R1 + 80];
           _sdcDm::P64 = P64[R1 + 88];
           _sdcDt::P64 = P64[R1 + 96];
           _sdcDw::P64 = P64[R1 + 104];
           _sdcDz::P64 = P64[R1 + 112];
           _sdcDF::P64 = P64[R1 + 120];
           I64[Hp - 120] = sat_sdcFp_info;
           P64[Hp - 104] = _sdcDb::P64;
           P64[Hp - 96] = _sdcDc::P64;
           P64[Hp - 88] = _sdcDd::P64;
           P64[Hp - 80] = _sdcDf::P64;
           P64[Hp - 72] = _sdcDg::P64;
           P64[Hp - 64] = _sdcDi::P64;
           P64[Hp - 56] = _sdcDj::P64;
           P64[Hp - 48] = _sdcDk::P64;
           P64[Hp - 40] = _sdcDl::P64;
           P64[Hp - 32] = _sdcDm::P64;
           P64[Hp - 24] = _sdcDt::P64;
           P64[Hp - 16] = _sdcDw::P64;
           P64[Hp - 8] = _sdcDz::P64;
           P64[Hp] = _sdcDF::P64;
           R3 = Hp - 120;
           R2 = lvl73_rcV6i_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcFq_info" {
     sat_sdcFq_info:
         const sat_sdcFq_entry;
         const 14;
         const 13528395363123215;
         const SddB2_srt+384;
 },
 sat_sdcFr_entry() //  [R1]
         { []
         }
     {offset
       cdfXT: // global
           _sdcFr::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdfXU; else goto cdfXV;
       cdfXV: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto cdfXX; else goto cdfXW;
       cdfXX: // global
           HpAlloc = 128;
           goto cdfXU;
       cdfXU: // global
           R1 = _sdcFr::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfXW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcFr::P64;
           _sdcDb::P64 = P64[_sdcFr::P64 + 16];
           _sdcDc::P64 = P64[_sdcFr::P64 + 24];
           _sdcDd::P64 = P64[_sdcFr::P64 + 32];
           _sdcDf::P64 = P64[_sdcFr::P64 + 40];
           _sdcDg::P64 = P64[_sdcFr::P64 + 48];
           _sdcDi::P64 = P64[_sdcFr::P64 + 56];
           _sdcDj::P64 = P64[_sdcFr::P64 + 64];
           _sdcDk::P64 = P64[_sdcFr::P64 + 72];
           _sdcDl::P64 = P64[_sdcFr::P64 + 80];
           _sdcDm::P64 = P64[_sdcFr::P64 + 88];
           _sdcDt::P64 = P64[_sdcFr::P64 + 96];
           _sdcDw::P64 = P64[_sdcFr::P64 + 104];
           _sdcDz::P64 = P64[_sdcFr::P64 + 112];
           _sdcDF::P64 = P64[_sdcFr::P64 + 120];
           I64[Hp - 120] = sat_sdcFq_info;
           P64[Hp - 104] = _sdcDb::P64;
           P64[Hp - 96] = _sdcDc::P64;
           P64[Hp - 88] = _sdcDd::P64;
           P64[Hp - 80] = _sdcDf::P64;
           P64[Hp - 72] = _sdcDg::P64;
           P64[Hp - 64] = _sdcDi::P64;
           P64[Hp - 56] = _sdcDj::P64;
           P64[Hp - 48] = _sdcDk::P64;
           P64[Hp - 40] = _sdcDl::P64;
           P64[Hp - 32] = _sdcDm::P64;
           P64[Hp - 24] = _sdcDt::P64;
           P64[Hp - 16] = _sdcDw::P64;
           P64[Hp - 8] = _sdcDz::P64;
           P64[Hp] = _sdcDF::P64;
           R3 = Hp - 120;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcFr_info" {
     sat_sdcFr_info:
         const sat_sdcFr_entry;
         const 14;
         const 13528395363123215;
         const SddB2_srt+384;
 },
 sat_sdcFs_entry() //  [R1]
         { []
         }
     {offset
       cdfXY: // global
           _sdcFs::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdfXZ; else goto cdfY0;
       cdfY0: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto cdfY2; else goto cdfY1;
       cdfY2: // global
           HpAlloc = 128;
           goto cdfXZ;
       cdfXZ: // global
           R1 = _sdcFs::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfY1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcFs::P64;
           _sdcDb::P64 = P64[_sdcFs::P64 + 16];
           _sdcDc::P64 = P64[_sdcFs::P64 + 24];
           _sdcDd::P64 = P64[_sdcFs::P64 + 32];
           _sdcDf::P64 = P64[_sdcFs::P64 + 40];
           _sdcDg::P64 = P64[_sdcFs::P64 + 48];
           _sdcDi::P64 = P64[_sdcFs::P64 + 56];
           _sdcDj::P64 = P64[_sdcFs::P64 + 64];
           _sdcDk::P64 = P64[_sdcFs::P64 + 72];
           _sdcDl::P64 = P64[_sdcFs::P64 + 80];
           _sdcDm::P64 = P64[_sdcFs::P64 + 88];
           _sdcDq::P64 = P64[_sdcFs::P64 + 96];
           _sdcDt::P64 = P64[_sdcFs::P64 + 104];
           _sdcDw::P64 = P64[_sdcFs::P64 + 112];
           _sdcDz::P64 = P64[_sdcFs::P64 + 120];
           _sdcDF::P64 = P64[_sdcFs::P64 + 128];
           I64[Hp - 120] = sat_sdcFr_info;
           P64[Hp - 104] = _sdcDb::P64;
           P64[Hp - 96] = _sdcDc::P64;
           P64[Hp - 88] = _sdcDd::P64;
           P64[Hp - 80] = _sdcDf::P64;
           P64[Hp - 72] = _sdcDg::P64;
           P64[Hp - 64] = _sdcDi::P64;
           P64[Hp - 56] = _sdcDj::P64;
           P64[Hp - 48] = _sdcDk::P64;
           P64[Hp - 40] = _sdcDl::P64;
           P64[Hp - 32] = _sdcDm::P64;
           P64[Hp - 24] = _sdcDt::P64;
           P64[Hp - 16] = _sdcDw::P64;
           P64[Hp - 8] = _sdcDz::P64;
           P64[Hp] = _sdcDF::P64;
           R2 = Hp - 120;
           R1 = _sdcDq::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcFs_info" {
     sat_sdcFs_info:
         const sat_sdcFs_entry;
         const 15;
         const 13528395363123215;
         const SddB2_srt+384;
 },
 sat_sdcFt_entry() //  [R1]
         { []
         }
     {offset
       cdfY3: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto cdfY7; else goto cdfY6;
       cdfY7: // global
           HpAlloc = 136;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfY6: // global
           _sdcDb::P64 = P64[R1 + 16];
           _sdcDc::P64 = P64[R1 + 24];
           _sdcDd::P64 = P64[R1 + 32];
           _sdcDf::P64 = P64[R1 + 40];
           _sdcDg::P64 = P64[R1 + 48];
           _sdcDi::P64 = P64[R1 + 56];
           _sdcDj::P64 = P64[R1 + 64];
           _sdcDk::P64 = P64[R1 + 72];
           _sdcDl::P64 = P64[R1 + 80];
           _sdcDm::P64 = P64[R1 + 88];
           _sdcDq::P64 = P64[R1 + 96];
           _sdcDt::P64 = P64[R1 + 104];
           _sdcDw::P64 = P64[R1 + 112];
           _sdcDz::P64 = P64[R1 + 120];
           _sdcDF::P64 = P64[R1 + 128];
           I64[Hp - 128] = sat_sdcFs_info;
           P64[Hp - 112] = _sdcDb::P64;
           P64[Hp - 104] = _sdcDc::P64;
           P64[Hp - 96] = _sdcDd::P64;
           P64[Hp - 88] = _sdcDf::P64;
           P64[Hp - 80] = _sdcDg::P64;
           P64[Hp - 72] = _sdcDi::P64;
           P64[Hp - 64] = _sdcDj::P64;
           P64[Hp - 56] = _sdcDk::P64;
           P64[Hp - 48] = _sdcDl::P64;
           P64[Hp - 40] = _sdcDm::P64;
           P64[Hp - 32] = _sdcDq::P64;
           P64[Hp - 24] = _sdcDt::P64;
           P64[Hp - 16] = _sdcDw::P64;
           P64[Hp - 8] = _sdcDz::P64;
           P64[Hp] = _sdcDF::P64;
           R3 = Hp - 128;
           R2 = lvl72_rcV6h_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcFt_info" {
     sat_sdcFt_info:
         const sat_sdcFt_entry;
         const 15;
         const 13528395363123215;
         const SddB2_srt+384;
 },
 eta_sdcEa_entry() //  [R1]
         { []
         }
     {offset
       cdfY8: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto cdfYc; else goto cdfYb;
       cdfYc: // global
           HpAlloc = 136;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfYb: // global
           _sdcDb::P64 = P64[R1 + 16];
           _sdcDc::P64 = P64[R1 + 24];
           _sdcDd::P64 = P64[R1 + 32];
           _sdcDf::P64 = P64[R1 + 40];
           _sdcDg::P64 = P64[R1 + 48];
           _sdcDi::P64 = P64[R1 + 56];
           _sdcDj::P64 = P64[R1 + 64];
           _sdcDk::P64 = P64[R1 + 72];
           _sdcDl::P64 = P64[R1 + 80];
           _sdcDm::P64 = P64[R1 + 88];
           _sdcDq::P64 = P64[R1 + 96];
           _sdcDt::P64 = P64[R1 + 104];
           _sdcDw::P64 = P64[R1 + 112];
           _sdcDz::P64 = P64[R1 + 120];
           _sdcDF::P64 = P64[R1 + 128];
           I64[Hp - 128] = sat_sdcFt_info;
           P64[Hp - 112] = _sdcDb::P64;
           P64[Hp - 104] = _sdcDc::P64;
           P64[Hp - 96] = _sdcDd::P64;
           P64[Hp - 88] = _sdcDf::P64;
           P64[Hp - 80] = _sdcDg::P64;
           P64[Hp - 72] = _sdcDi::P64;
           P64[Hp - 64] = _sdcDj::P64;
           P64[Hp - 56] = _sdcDk::P64;
           P64[Hp - 48] = _sdcDl::P64;
           P64[Hp - 40] = _sdcDm::P64;
           P64[Hp - 32] = _sdcDq::P64;
           P64[Hp - 24] = _sdcDt::P64;
           P64[Hp - 16] = _sdcDw::P64;
           P64[Hp - 8] = _sdcDz::P64;
           P64[Hp] = _sdcDF::P64;
           R3 = Hp - 128;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . eta_sdcEa_info" {
     eta_sdcEa_info:
         const eta_sdcEa_entry;
         const 15;
         const 13528395363123215;
         const SddB2_srt+384;
 },
 sat_sdcFv_entry() //  [R1]
         { []
         }
     {offset
       cdfYk: // global
           _sdcFv::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cdfYl; else goto cdfYm;
       cdfYm: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto cdfYo; else goto cdfYn;
       cdfYo: // global
           HpAlloc = 136;
           goto cdfYl;
       cdfYl: // global
           R1 = _sdcFv::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfYn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcFv::P64;
           _sdcD8::P64 = P64[_sdcFv::P64 + 16];
           _sdcDb::P64 = P64[_sdcFv::P64 + 24];
           _sdcDc::P64 = P64[_sdcFv::P64 + 32];
           _sdcDd::P64 = P64[_sdcFv::P64 + 40];
           _sdcDf::P64 = P64[_sdcFv::P64 + 48];
           _sdcDg::P64 = P64[_sdcFv::P64 + 56];
           _sdcDi::P64 = P64[_sdcFv::P64 + 64];
           _sdcDj::P64 = P64[_sdcFv::P64 + 72];
           _sdcDk::P64 = P64[_sdcFv::P64 + 80];
           _sdcDl::P64 = P64[_sdcFv::P64 + 88];
           _sdcDm::P64 = P64[_sdcFv::P64 + 96];
           _sdcDq::P64 = P64[_sdcFv::P64 + 104];
           _sdcDt::P64 = P64[_sdcFv::P64 + 112];
           _sdcDw::P64 = P64[_sdcFv::P64 + 120];
           _sdcDz::P64 = P64[_sdcFv::P64 + 128];
           _sdcDF::P64 = P64[_sdcFv::P64 + 136];
           I64[Hp - 128] = eta_sdcEa_info;
           P64[Hp - 112] = _sdcDb::P64;
           P64[Hp - 104] = _sdcDc::P64;
           P64[Hp - 96] = _sdcDd::P64;
           P64[Hp - 88] = _sdcDf::P64;
           P64[Hp - 80] = _sdcDg::P64;
           P64[Hp - 72] = _sdcDi::P64;
           P64[Hp - 64] = _sdcDj::P64;
           P64[Hp - 56] = _sdcDk::P64;
           P64[Hp - 48] = _sdcDl::P64;
           P64[Hp - 40] = _sdcDm::P64;
           P64[Hp - 32] = _sdcDq::P64;
           P64[Hp - 24] = _sdcDt::P64;
           P64[Hp - 16] = _sdcDw::P64;
           P64[Hp - 8] = _sdcDz::P64;
           P64[Hp] = _sdcDF::P64;
           I64[Sp - 32] = block_cdfYd_info;
           R1 = _sdcD8::P64;
           P64[Sp - 24] = Hp - 128;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udfYv; else goto cdfYe;
       udfYv: // global
           call _cdfYd(R1) args: 0, res: 0, upd: 0;
       cdfYe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcFv_info" {
     sat_sdcFv_info:
         const sat_sdcFv_entry;
         const 16;
         const 13528395363123215;
         const SddB2_srt+384;
 },
 _cdfYd() //  [R1]
         { []
         }
     {offset
       cdfYd: // global
           _cdfOS::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cdfYh; else goto cdfYi;
       cdfYh: // global
           R3 = _cdfOS::P64;
           R2 = GHC.Show.$fShowBool4_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cdfYi: // global
           R3 = _cdfOS::P64;
           R2 = GHC.Show.$fShowBool2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdfYd_info" {
     block_cdfYd_info:
         const _cdfYd;
         const 1;
         const 12884901918;
         const SddB2_srt+544;
 },
 sat_sdcFw_entry() //  [R1]
         { []
         }
     {offset
       cdfYw: // global
           Hp = Hp + 144;
           if (Hp > HpLim) (likely: False) goto cdfYA; else goto cdfYz;
       cdfYA: // global
           HpAlloc = 144;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfYz: // global
           _sdcD8::P64 = P64[R1 + 16];
           _sdcDb::P64 = P64[R1 + 24];
           _sdcDc::P64 = P64[R1 + 32];
           _sdcDd::P64 = P64[R1 + 40];
           _sdcDf::P64 = P64[R1 + 48];
           _sdcDg::P64 = P64[R1 + 56];
           _sdcDi::P64 = P64[R1 + 64];
           _sdcDj::P64 = P64[R1 + 72];
           _sdcDk::P64 = P64[R1 + 80];
           _sdcDl::P64 = P64[R1 + 88];
           _sdcDm::P64 = P64[R1 + 96];
           _sdcDq::P64 = P64[R1 + 104];
           _sdcDt::P64 = P64[R1 + 112];
           _sdcDw::P64 = P64[R1 + 120];
           _sdcDz::P64 = P64[R1 + 128];
           _sdcDF::P64 = P64[R1 + 136];
           I64[Hp - 136] = sat_sdcFv_info;
           P64[Hp - 120] = _sdcD8::P64;
           P64[Hp - 112] = _sdcDb::P64;
           P64[Hp - 104] = _sdcDc::P64;
           P64[Hp - 96] = _sdcDd::P64;
           P64[Hp - 88] = _sdcDf::P64;
           P64[Hp - 80] = _sdcDg::P64;
           P64[Hp - 72] = _sdcDi::P64;
           P64[Hp - 64] = _sdcDj::P64;
           P64[Hp - 56] = _sdcDk::P64;
           P64[Hp - 48] = _sdcDl::P64;
           P64[Hp - 40] = _sdcDm::P64;
           P64[Hp - 32] = _sdcDq::P64;
           P64[Hp - 24] = _sdcDt::P64;
           P64[Hp - 16] = _sdcDw::P64;
           P64[Hp - 8] = _sdcDz::P64;
           P64[Hp] = _sdcDF::P64;
           R3 = Hp - 136;
           R2 = lvl71_rcV6g_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcFw_info" {
     sat_sdcFw_info:
         const sat_sdcFw_entry;
         const 16;
         const 13528395363123215;
         const SddB2_srt+384;
 },
 sat_sdcFx_entry() //  [R1]
         { []
         }
     {offset
       cdfYB: // global
           _sdcFx::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdfYC; else goto cdfYD;
       cdfYD: // global
           Hp = Hp + 144;
           if (Hp > HpLim) (likely: False) goto cdfYF; else goto cdfYE;
       cdfYF: // global
           HpAlloc = 144;
           goto cdfYC;
       cdfYC: // global
           R1 = _sdcFx::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfYE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcFx::P64;
           _sdcD8::P64 = P64[_sdcFx::P64 + 16];
           _sdcDb::P64 = P64[_sdcFx::P64 + 24];
           _sdcDc::P64 = P64[_sdcFx::P64 + 32];
           _sdcDd::P64 = P64[_sdcFx::P64 + 40];
           _sdcDf::P64 = P64[_sdcFx::P64 + 48];
           _sdcDg::P64 = P64[_sdcFx::P64 + 56];
           _sdcDi::P64 = P64[_sdcFx::P64 + 64];
           _sdcDj::P64 = P64[_sdcFx::P64 + 72];
           _sdcDk::P64 = P64[_sdcFx::P64 + 80];
           _sdcDl::P64 = P64[_sdcFx::P64 + 88];
           _sdcDm::P64 = P64[_sdcFx::P64 + 96];
           _sdcDq::P64 = P64[_sdcFx::P64 + 104];
           _sdcDt::P64 = P64[_sdcFx::P64 + 112];
           _sdcDw::P64 = P64[_sdcFx::P64 + 120];
           _sdcDz::P64 = P64[_sdcFx::P64 + 128];
           _sdcDF::P64 = P64[_sdcFx::P64 + 136];
           I64[Hp - 136] = sat_sdcFw_info;
           P64[Hp - 120] = _sdcD8::P64;
           P64[Hp - 112] = _sdcDb::P64;
           P64[Hp - 104] = _sdcDc::P64;
           P64[Hp - 96] = _sdcDd::P64;
           P64[Hp - 88] = _sdcDf::P64;
           P64[Hp - 80] = _sdcDg::P64;
           P64[Hp - 72] = _sdcDi::P64;
           P64[Hp - 64] = _sdcDj::P64;
           P64[Hp - 56] = _sdcDk::P64;
           P64[Hp - 48] = _sdcDl::P64;
           P64[Hp - 40] = _sdcDm::P64;
           P64[Hp - 32] = _sdcDq::P64;
           P64[Hp - 24] = _sdcDt::P64;
           P64[Hp - 16] = _sdcDw::P64;
           P64[Hp - 8] = _sdcDz::P64;
           P64[Hp] = _sdcDF::P64;
           R3 = Hp - 136;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcFx_info" {
     sat_sdcFx_info:
         const sat_sdcFx_entry;
         const 16;
         const 13528395363123215;
         const SddB2_srt+384;
 },
 sat_sdcFB_entry() //  [R1]
         { []
         }
     {offset
       cdfYG: // global
           if ((Sp + -152) < SpLim) (likely: False) goto cdfYN; else goto cdfYO;
       cdfYN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfYO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 152] = block_cdfOB_info;
           _sdcD8::P64 = P64[R1 + 24];
           _sdcDb::P64 = P64[R1 + 32];
           _sdcDc::P64 = P64[R1 + 40];
           _sdcDd::P64 = P64[R1 + 48];
           _sdcDf::P64 = P64[R1 + 56];
           _sdcDg::P64 = P64[R1 + 64];
           _sdcDi::P64 = P64[R1 + 72];
           _sdcDj::P64 = P64[R1 + 80];
           _sdcDk::P64 = P64[R1 + 88];
           _sdcDl::P64 = P64[R1 + 96];
           _sdcDm::P64 = P64[R1 + 104];
           _sdcDq::P64 = P64[R1 + 112];
           _sdcDt::P64 = P64[R1 + 120];
           _sdcDw::P64 = P64[R1 + 128];
           _sdcDz::P64 = P64[R1 + 136];
           _sdcDF::P64 = P64[R1 + 144];
           R1 = P64[R1 + 16];
           P64[Sp - 144] = _sdcD8::P64;
           P64[Sp - 136] = _sdcDb::P64;
           P64[Sp - 128] = _sdcDc::P64;
           P64[Sp - 120] = _sdcDd::P64;
           P64[Sp - 112] = _sdcDf::P64;
           P64[Sp - 104] = _sdcDg::P64;
           P64[Sp - 96] = _sdcDi::P64;
           P64[Sp - 88] = _sdcDj::P64;
           P64[Sp - 80] = _sdcDk::P64;
           P64[Sp - 72] = _sdcDl::P64;
           P64[Sp - 64] = _sdcDm::P64;
           P64[Sp - 56] = _sdcDq::P64;
           P64[Sp - 48] = _sdcDt::P64;
           P64[Sp - 40] = _sdcDw::P64;
           P64[Sp - 32] = _sdcDz::P64;
           P64[Sp - 24] = _sdcDF::P64;
           Sp = Sp - 152;
           if (R1 & 7 != 0) goto udfYV; else goto cdfOC;
       udfYV: // global
           call _cdfOB(R1) args: 0, res: 0, upd: 0;
       cdfOC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcFB_info" {
     sat_sdcFB_info:
         const sat_sdcFB_entry;
         const 17;
         const 13528395363123215;
         const SddB2_srt+384;
 },
 _cdfOB() //  [R1]
         { []
         }
     {offset
       cdfOB: // global
           Hp = Hp + 144;
           if (Hp > HpLim) (likely: False) goto cdfYR; else goto cdfYQ;
       cdfYR: // global
           HpAlloc = 144;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdfYQ: // global
           _sdcE8::I64 = I64[R1 + 7];
           I64[Hp - 136] = sat_sdcFx_info;
           P64[Hp - 120] = P64[Sp + 8];
           P64[Hp - 112] = P64[Sp + 16];
           P64[Hp - 104] = P64[Sp + 24];
           P64[Hp - 96] = P64[Sp + 32];
           P64[Hp - 88] = P64[Sp + 40];
           P64[Hp - 80] = P64[Sp + 48];
           P64[Hp - 72] = P64[Sp + 56];
           P64[Hp - 64] = P64[Sp + 64];
           P64[Hp - 56] = P64[Sp + 72];
           P64[Hp - 48] = P64[Sp + 80];
           P64[Hp - 40] = P64[Sp + 88];
           P64[Hp - 32] = P64[Sp + 96];
           P64[Hp - 24] = P64[Sp + 104];
           P64[Hp - 16] = P64[Sp + 112];
           P64[Hp - 8] = P64[Sp + 120];
           P64[Hp] = P64[Sp + 128];
           I64[Sp + 128] = block_cdfYK_info;
           R3 = Hp - 136;
           R2 = _sdcE8::I64;
           Sp = Sp + 128;
           call GHC.Show.$witos_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cdfOB_info" {
     block_cdfOB_info:
         const _cdfOB;
         const 16;
         const 13528395363123230;
         const SddB2_srt+384;
 },
 _cdfYK() //  [R1, R2]
         { []
         }
     {offset
       cdfYK: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdfYU; else goto cdfYT;
       cdfYU: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cdfYT: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdfYK_info" {
     block_cdfYK_info:
         const _cdfYK;
         const 0;
         const 30;
 },
 sat_sdcFC_entry() //  [R1]
         { []
         }
     {offset
       cdfYW: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto cdfZ0; else goto cdfYZ;
       cdfZ0: // global
           HpAlloc = 152;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfYZ: // global
           _sdcD7::P64 = P64[R1 + 16];
           _sdcD8::P64 = P64[R1 + 24];
           _sdcDb::P64 = P64[R1 + 32];
           _sdcDc::P64 = P64[R1 + 40];
           _sdcDd::P64 = P64[R1 + 48];
           _sdcDf::P64 = P64[R1 + 56];
           _sdcDg::P64 = P64[R1 + 64];
           _sdcDi::P64 = P64[R1 + 72];
           _sdcDj::P64 = P64[R1 + 80];
           _sdcDk::P64 = P64[R1 + 88];
           _sdcDl::P64 = P64[R1 + 96];
           _sdcDm::P64 = P64[R1 + 104];
           _sdcDq::P64 = P64[R1 + 112];
           _sdcDt::P64 = P64[R1 + 120];
           _sdcDw::P64 = P64[R1 + 128];
           _sdcDz::P64 = P64[R1 + 136];
           _sdcDF::P64 = P64[R1 + 144];
           I64[Hp - 144] = sat_sdcFB_info;
           P64[Hp - 128] = _sdcD7::P64;
           P64[Hp - 120] = _sdcD8::P64;
           P64[Hp - 112] = _sdcDb::P64;
           P64[Hp - 104] = _sdcDc::P64;
           P64[Hp - 96] = _sdcDd::P64;
           P64[Hp - 88] = _sdcDf::P64;
           P64[Hp - 80] = _sdcDg::P64;
           P64[Hp - 72] = _sdcDi::P64;
           P64[Hp - 64] = _sdcDj::P64;
           P64[Hp - 56] = _sdcDk::P64;
           P64[Hp - 48] = _sdcDl::P64;
           P64[Hp - 40] = _sdcDm::P64;
           P64[Hp - 32] = _sdcDq::P64;
           P64[Hp - 24] = _sdcDt::P64;
           P64[Hp - 16] = _sdcDw::P64;
           P64[Hp - 8] = _sdcDz::P64;
           P64[Hp] = _sdcDF::P64;
           R3 = Hp - 144;
           R2 = lvl70_rcV6f_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcFC_info" {
     sat_sdcFC_info:
         const sat_sdcFC_entry;
         const 17;
         const 13528395363123215;
         const SddB2_srt+384;
 },
 sat_sdcFD_entry() //  [R1]
         { []
         }
     {offset
       cdfZ1: // global
           _sdcFD::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdfZ2; else goto cdfZ3;
       cdfZ3: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto cdfZ5; else goto cdfZ4;
       cdfZ5: // global
           HpAlloc = 152;
           goto cdfZ2;
       cdfZ2: // global
           R1 = _sdcFD::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfZ4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcFD::P64;
           _sdcD7::P64 = P64[_sdcFD::P64 + 16];
           _sdcD8::P64 = P64[_sdcFD::P64 + 24];
           _sdcDb::P64 = P64[_sdcFD::P64 + 32];
           _sdcDc::P64 = P64[_sdcFD::P64 + 40];
           _sdcDd::P64 = P64[_sdcFD::P64 + 48];
           _sdcDf::P64 = P64[_sdcFD::P64 + 56];
           _sdcDg::P64 = P64[_sdcFD::P64 + 64];
           _sdcDi::P64 = P64[_sdcFD::P64 + 72];
           _sdcDj::P64 = P64[_sdcFD::P64 + 80];
           _sdcDk::P64 = P64[_sdcFD::P64 + 88];
           _sdcDl::P64 = P64[_sdcFD::P64 + 96];
           _sdcDm::P64 = P64[_sdcFD::P64 + 104];
           _sdcDq::P64 = P64[_sdcFD::P64 + 112];
           _sdcDt::P64 = P64[_sdcFD::P64 + 120];
           _sdcDw::P64 = P64[_sdcFD::P64 + 128];
           _sdcDz::P64 = P64[_sdcFD::P64 + 136];
           _sdcDF::P64 = P64[_sdcFD::P64 + 144];
           I64[Hp - 144] = sat_sdcFC_info;
           P64[Hp - 128] = _sdcD7::P64;
           P64[Hp - 120] = _sdcD8::P64;
           P64[Hp - 112] = _sdcDb::P64;
           P64[Hp - 104] = _sdcDc::P64;
           P64[Hp - 96] = _sdcDd::P64;
           P64[Hp - 88] = _sdcDf::P64;
           P64[Hp - 80] = _sdcDg::P64;
           P64[Hp - 72] = _sdcDi::P64;
           P64[Hp - 64] = _sdcDj::P64;
           P64[Hp - 56] = _sdcDk::P64;
           P64[Hp - 48] = _sdcDl::P64;
           P64[Hp - 40] = _sdcDm::P64;
           P64[Hp - 32] = _sdcDq::P64;
           P64[Hp - 24] = _sdcDt::P64;
           P64[Hp - 16] = _sdcDw::P64;
           P64[Hp - 8] = _sdcDz::P64;
           P64[Hp] = _sdcDF::P64;
           R3 = Hp - 144;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcFD_info" {
     sat_sdcFD_info:
         const sat_sdcFD_entry;
         const 17;
         const 13528395363123215;
         const SddB2_srt+384;
 },
 sat_sdcFH_entry() //  [R1]
         { []
         }
     {offset
       cdfZ6: // global
           if ((Sp + -160) < SpLim) (likely: False) goto cdfZd; else goto cdfZe;
       cdfZd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfZe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 160] = block_cdfOk_info;
           _sdcD7::P64 = P64[R1 + 24];
           _sdcD8::P64 = P64[R1 + 32];
           _sdcDb::P64 = P64[R1 + 40];
           _sdcDc::P64 = P64[R1 + 48];
           _sdcDd::P64 = P64[R1 + 56];
           _sdcDf::P64 = P64[R1 + 64];
           _sdcDg::P64 = P64[R1 + 72];
           _sdcDi::P64 = P64[R1 + 80];
           _sdcDj::P64 = P64[R1 + 88];
           _sdcDk::P64 = P64[R1 + 96];
           _sdcDl::P64 = P64[R1 + 104];
           _sdcDm::P64 = P64[R1 + 112];
           _sdcDq::P64 = P64[R1 + 120];
           _sdcDt::P64 = P64[R1 + 128];
           _sdcDw::P64 = P64[R1 + 136];
           _sdcDz::P64 = P64[R1 + 144];
           _sdcDF::P64 = P64[R1 + 152];
           R1 = P64[R1 + 16];
           P64[Sp - 152] = _sdcD7::P64;
           P64[Sp - 144] = _sdcD8::P64;
           P64[Sp - 136] = _sdcDb::P64;
           P64[Sp - 128] = _sdcDc::P64;
           P64[Sp - 120] = _sdcDd::P64;
           P64[Sp - 112] = _sdcDf::P64;
           P64[Sp - 104] = _sdcDg::P64;
           P64[Sp - 96] = _sdcDi::P64;
           P64[Sp - 88] = _sdcDj::P64;
           P64[Sp - 80] = _sdcDk::P64;
           P64[Sp - 72] = _sdcDl::P64;
           P64[Sp - 64] = _sdcDm::P64;
           P64[Sp - 56] = _sdcDq::P64;
           P64[Sp - 48] = _sdcDt::P64;
           P64[Sp - 40] = _sdcDw::P64;
           P64[Sp - 32] = _sdcDz::P64;
           P64[Sp - 24] = _sdcDF::P64;
           Sp = Sp - 160;
           if (R1 & 7 != 0) goto udfZl; else goto cdfOl;
       udfZl: // global
           call _cdfOk(R1) args: 0, res: 0, upd: 0;
       cdfOl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcFH_info" {
     sat_sdcFH_info:
         const sat_sdcFH_entry;
         const 18;
         const 13528395363123215;
         const SddB2_srt+384;
 },
 _cdfOk() //  [R1]
         { []
         }
     {offset
       cdfOk: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto cdfZh; else goto cdfZg;
       cdfZh: // global
           HpAlloc = 152;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdfZg: // global
           _sdcE5::I64 = I64[R1 + 7];
           I64[Hp - 144] = sat_sdcFD_info;
           P64[Hp - 128] = P64[Sp + 8];
           P64[Hp - 120] = P64[Sp + 16];
           P64[Hp - 112] = P64[Sp + 24];
           P64[Hp - 104] = P64[Sp + 32];
           P64[Hp - 96] = P64[Sp + 40];
           P64[Hp - 88] = P64[Sp + 48];
           P64[Hp - 80] = P64[Sp + 56];
           P64[Hp - 72] = P64[Sp + 64];
           P64[Hp - 64] = P64[Sp + 72];
           P64[Hp - 56] = P64[Sp + 80];
           P64[Hp - 48] = P64[Sp + 88];
           P64[Hp - 40] = P64[Sp + 96];
           P64[Hp - 32] = P64[Sp + 104];
           P64[Hp - 24] = P64[Sp + 112];
           P64[Hp - 16] = P64[Sp + 120];
           P64[Hp - 8] = P64[Sp + 128];
           P64[Hp] = P64[Sp + 136];
           I64[Sp + 136] = block_cdfZa_info;
           R3 = Hp - 144;
           R2 = _sdcE5::I64;
           Sp = Sp + 136;
           call GHC.Show.$witos_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cdfOk_info" {
     block_cdfOk_info:
         const _cdfOk;
         const 17;
         const 13528395363123230;
         const SddB2_srt+384;
 },
 _cdfZa() //  [R1, R2]
         { []
         }
     {offset
       cdfZa: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdfZk; else goto cdfZj;
       cdfZk: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cdfZj: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdfZa_info" {
     block_cdfZa_info:
         const _cdfZa;
         const 0;
         const 30;
 },
 sat_sdcFI_entry() //  [R1]
         { []
         }
     {offset
       cdfZm: // global
           Hp = Hp + 160;
           if (Hp > HpLim) (likely: False) goto cdfZq; else goto cdfZp;
       cdfZq: // global
           HpAlloc = 160;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfZp: // global
           _sdcD6::P64 = P64[R1 + 16];
           _sdcD7::P64 = P64[R1 + 24];
           _sdcD8::P64 = P64[R1 + 32];
           _sdcDb::P64 = P64[R1 + 40];
           _sdcDc::P64 = P64[R1 + 48];
           _sdcDd::P64 = P64[R1 + 56];
           _sdcDf::P64 = P64[R1 + 64];
           _sdcDg::P64 = P64[R1 + 72];
           _sdcDi::P64 = P64[R1 + 80];
           _sdcDj::P64 = P64[R1 + 88];
           _sdcDk::P64 = P64[R1 + 96];
           _sdcDl::P64 = P64[R1 + 104];
           _sdcDm::P64 = P64[R1 + 112];
           _sdcDq::P64 = P64[R1 + 120];
           _sdcDt::P64 = P64[R1 + 128];
           _sdcDw::P64 = P64[R1 + 136];
           _sdcDz::P64 = P64[R1 + 144];
           _sdcDF::P64 = P64[R1 + 152];
           I64[Hp - 152] = sat_sdcFH_info;
           P64[Hp - 136] = _sdcD6::P64;
           P64[Hp - 128] = _sdcD7::P64;
           P64[Hp - 120] = _sdcD8::P64;
           P64[Hp - 112] = _sdcDb::P64;
           P64[Hp - 104] = _sdcDc::P64;
           P64[Hp - 96] = _sdcDd::P64;
           P64[Hp - 88] = _sdcDf::P64;
           P64[Hp - 80] = _sdcDg::P64;
           P64[Hp - 72] = _sdcDi::P64;
           P64[Hp - 64] = _sdcDj::P64;
           P64[Hp - 56] = _sdcDk::P64;
           P64[Hp - 48] = _sdcDl::P64;
           P64[Hp - 40] = _sdcDm::P64;
           P64[Hp - 32] = _sdcDq::P64;
           P64[Hp - 24] = _sdcDt::P64;
           P64[Hp - 16] = _sdcDw::P64;
           P64[Hp - 8] = _sdcDz::P64;
           P64[Hp] = _sdcDF::P64;
           R3 = Hp - 152;
           R2 = lvl69_rcV6e_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcFI_info" {
     sat_sdcFI_info:
         const sat_sdcFI_entry;
         const 18;
         const 13528395363123215;
         const SddB2_srt+384;
 },
 sat_sdcFJ_entry() //  [R1]
         { []
         }
     {offset
       cdfZr: // global
           _sdcFJ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdfZs; else goto cdfZt;
       cdfZt: // global
           Hp = Hp + 160;
           if (Hp > HpLim) (likely: False) goto cdfZv; else goto cdfZu;
       cdfZv: // global
           HpAlloc = 160;
           goto cdfZs;
       cdfZs: // global
           R1 = _sdcFJ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfZu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcFJ::P64;
           _sdcD6::P64 = P64[_sdcFJ::P64 + 16];
           _sdcD7::P64 = P64[_sdcFJ::P64 + 24];
           _sdcD8::P64 = P64[_sdcFJ::P64 + 32];
           _sdcDb::P64 = P64[_sdcFJ::P64 + 40];
           _sdcDc::P64 = P64[_sdcFJ::P64 + 48];
           _sdcDd::P64 = P64[_sdcFJ::P64 + 56];
           _sdcDf::P64 = P64[_sdcFJ::P64 + 64];
           _sdcDg::P64 = P64[_sdcFJ::P64 + 72];
           _sdcDi::P64 = P64[_sdcFJ::P64 + 80];
           _sdcDj::P64 = P64[_sdcFJ::P64 + 88];
           _sdcDk::P64 = P64[_sdcFJ::P64 + 96];
           _sdcDl::P64 = P64[_sdcFJ::P64 + 104];
           _sdcDm::P64 = P64[_sdcFJ::P64 + 112];
           _sdcDq::P64 = P64[_sdcFJ::P64 + 120];
           _sdcDt::P64 = P64[_sdcFJ::P64 + 128];
           _sdcDw::P64 = P64[_sdcFJ::P64 + 136];
           _sdcDz::P64 = P64[_sdcFJ::P64 + 144];
           _sdcDF::P64 = P64[_sdcFJ::P64 + 152];
           I64[Hp - 152] = sat_sdcFI_info;
           P64[Hp - 136] = _sdcD6::P64;
           P64[Hp - 128] = _sdcD7::P64;
           P64[Hp - 120] = _sdcD8::P64;
           P64[Hp - 112] = _sdcDb::P64;
           P64[Hp - 104] = _sdcDc::P64;
           P64[Hp - 96] = _sdcDd::P64;
           P64[Hp - 88] = _sdcDf::P64;
           P64[Hp - 80] = _sdcDg::P64;
           P64[Hp - 72] = _sdcDi::P64;
           P64[Hp - 64] = _sdcDj::P64;
           P64[Hp - 56] = _sdcDk::P64;
           P64[Hp - 48] = _sdcDl::P64;
           P64[Hp - 40] = _sdcDm::P64;
           P64[Hp - 32] = _sdcDq::P64;
           P64[Hp - 24] = _sdcDt::P64;
           P64[Hp - 16] = _sdcDw::P64;
           P64[Hp - 8] = _sdcDz::P64;
           P64[Hp] = _sdcDF::P64;
           R3 = Hp - 152;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcFJ_info" {
     sat_sdcFJ_info:
         const sat_sdcFJ_entry;
         const 18;
         const 13528395363123215;
         const SddB2_srt+384;
 },
 sat_sdcFN_entry() //  [R1]
         { []
         }
     {offset
       cdfZw: // global
           if ((Sp + -168) < SpLim) (likely: False) goto cdfZD; else goto cdfZE;
       cdfZD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfZE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 168] = block_cdfO3_info;
           _sdcD6::P64 = P64[R1 + 24];
           _sdcD7::P64 = P64[R1 + 32];
           _sdcD8::P64 = P64[R1 + 40];
           _sdcDb::P64 = P64[R1 + 48];
           _sdcDc::P64 = P64[R1 + 56];
           _sdcDd::P64 = P64[R1 + 64];
           _sdcDf::P64 = P64[R1 + 72];
           _sdcDg::P64 = P64[R1 + 80];
           _sdcDi::P64 = P64[R1 + 88];
           _sdcDj::P64 = P64[R1 + 96];
           _sdcDk::P64 = P64[R1 + 104];
           _sdcDl::P64 = P64[R1 + 112];
           _sdcDm::P64 = P64[R1 + 120];
           _sdcDq::P64 = P64[R1 + 128];
           _sdcDt::P64 = P64[R1 + 136];
           _sdcDw::P64 = P64[R1 + 144];
           _sdcDz::P64 = P64[R1 + 152];
           _sdcDF::P64 = P64[R1 + 160];
           R1 = P64[R1 + 16];
           P64[Sp - 160] = _sdcD6::P64;
           P64[Sp - 152] = _sdcD7::P64;
           P64[Sp - 144] = _sdcD8::P64;
           P64[Sp - 136] = _sdcDb::P64;
           P64[Sp - 128] = _sdcDc::P64;
           P64[Sp - 120] = _sdcDd::P64;
           P64[Sp - 112] = _sdcDf::P64;
           P64[Sp - 104] = _sdcDg::P64;
           P64[Sp - 96] = _sdcDi::P64;
           P64[Sp - 88] = _sdcDj::P64;
           P64[Sp - 80] = _sdcDk::P64;
           P64[Sp - 72] = _sdcDl::P64;
           P64[Sp - 64] = _sdcDm::P64;
           P64[Sp - 56] = _sdcDq::P64;
           P64[Sp - 48] = _sdcDt::P64;
           P64[Sp - 40] = _sdcDw::P64;
           P64[Sp - 32] = _sdcDz::P64;
           P64[Sp - 24] = _sdcDF::P64;
           Sp = Sp - 168;
           if (R1 & 7 != 0) goto udfZL; else goto cdfO4;
       udfZL: // global
           call _cdfO3(R1) args: 0, res: 0, upd: 0;
       cdfO4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcFN_info" {
     sat_sdcFN_info:
         const sat_sdcFN_entry;
         const 19;
         const 13528395363123215;
         const SddB2_srt+384;
 },
 _cdfO3() //  [R1]
         { []
         }
     {offset
       cdfO3: // global
           Hp = Hp + 160;
           if (Hp > HpLim) (likely: False) goto cdfZH; else goto cdfZG;
       cdfZH: // global
           HpAlloc = 160;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdfZG: // global
           _sdcE2::I64 = I64[R1 + 7];
           I64[Hp - 152] = sat_sdcFJ_info;
           P64[Hp - 136] = P64[Sp + 8];
           P64[Hp - 128] = P64[Sp + 16];
           P64[Hp - 120] = P64[Sp + 24];
           P64[Hp - 112] = P64[Sp + 32];
           P64[Hp - 104] = P64[Sp + 40];
           P64[Hp - 96] = P64[Sp + 48];
           P64[Hp - 88] = P64[Sp + 56];
           P64[Hp - 80] = P64[Sp + 64];
           P64[Hp - 72] = P64[Sp + 72];
           P64[Hp - 64] = P64[Sp + 80];
           P64[Hp - 56] = P64[Sp + 88];
           P64[Hp - 48] = P64[Sp + 96];
           P64[Hp - 40] = P64[Sp + 104];
           P64[Hp - 32] = P64[Sp + 112];
           P64[Hp - 24] = P64[Sp + 120];
           P64[Hp - 16] = P64[Sp + 128];
           P64[Hp - 8] = P64[Sp + 136];
           P64[Hp] = P64[Sp + 144];
           I64[Sp + 144] = block_cdfZA_info;
           R3 = Hp - 152;
           R2 = _sdcE2::I64;
           Sp = Sp + 144;
           call GHC.Show.$witos_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cdfO3_info" {
     block_cdfO3_info:
         const _cdfO3;
         const 18;
         const 13528395363123230;
         const SddB2_srt+384;
 },
 _cdfZA() //  [R1, R2]
         { []
         }
     {offset
       cdfZA: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdfZK; else goto cdfZJ;
       cdfZK: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cdfZJ: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdfZA_info" {
     block_cdfZA_info:
         const _cdfZA;
         const 0;
         const 30;
 },
 sat_sdcFO_entry() //  [R1]
         { []
         }
     {offset
       cdfZM: // global
           Hp = Hp + 168;
           if (Hp > HpLim) (likely: False) goto cdfZQ; else goto cdfZP;
       cdfZQ: // global
           HpAlloc = 168;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfZP: // global
           _sdcD5::P64 = P64[R1 + 16];
           _sdcD6::P64 = P64[R1 + 24];
           _sdcD7::P64 = P64[R1 + 32];
           _sdcD8::P64 = P64[R1 + 40];
           _sdcDb::P64 = P64[R1 + 48];
           _sdcDc::P64 = P64[R1 + 56];
           _sdcDd::P64 = P64[R1 + 64];
           _sdcDf::P64 = P64[R1 + 72];
           _sdcDg::P64 = P64[R1 + 80];
           _sdcDi::P64 = P64[R1 + 88];
           _sdcDj::P64 = P64[R1 + 96];
           _sdcDk::P64 = P64[R1 + 104];
           _sdcDl::P64 = P64[R1 + 112];
           _sdcDm::P64 = P64[R1 + 120];
           _sdcDq::P64 = P64[R1 + 128];
           _sdcDt::P64 = P64[R1 + 136];
           _sdcDw::P64 = P64[R1 + 144];
           _sdcDz::P64 = P64[R1 + 152];
           _sdcDF::P64 = P64[R1 + 160];
           I64[Hp - 160] = sat_sdcFN_info;
           P64[Hp - 144] = _sdcD5::P64;
           P64[Hp - 136] = _sdcD6::P64;
           P64[Hp - 128] = _sdcD7::P64;
           P64[Hp - 120] = _sdcD8::P64;
           P64[Hp - 112] = _sdcDb::P64;
           P64[Hp - 104] = _sdcDc::P64;
           P64[Hp - 96] = _sdcDd::P64;
           P64[Hp - 88] = _sdcDf::P64;
           P64[Hp - 80] = _sdcDg::P64;
           P64[Hp - 72] = _sdcDi::P64;
           P64[Hp - 64] = _sdcDj::P64;
           P64[Hp - 56] = _sdcDk::P64;
           P64[Hp - 48] = _sdcDl::P64;
           P64[Hp - 40] = _sdcDm::P64;
           P64[Hp - 32] = _sdcDq::P64;
           P64[Hp - 24] = _sdcDt::P64;
           P64[Hp - 16] = _sdcDw::P64;
           P64[Hp - 8] = _sdcDz::P64;
           P64[Hp] = _sdcDF::P64;
           R3 = Hp - 160;
           R2 = lvl68_rcV6d_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcFO_info" {
     sat_sdcFO_info:
         const sat_sdcFO_entry;
         const 19;
         const 13528395363123215;
         const SddB2_srt+384;
 },
 sat_sdcFP_entry() //  [R1]
         { []
         }
     {offset
       cdfZR: // global
           _sdcFP::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdfZS; else goto cdfZT;
       cdfZT: // global
           Hp = Hp + 168;
           if (Hp > HpLim) (likely: False) goto cdfZV; else goto cdfZU;
       cdfZV: // global
           HpAlloc = 168;
           goto cdfZS;
       cdfZS: // global
           R1 = _sdcFP::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdfZU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcFP::P64;
           _sdcD5::P64 = P64[_sdcFP::P64 + 16];
           _sdcD6::P64 = P64[_sdcFP::P64 + 24];
           _sdcD7::P64 = P64[_sdcFP::P64 + 32];
           _sdcD8::P64 = P64[_sdcFP::P64 + 40];
           _sdcDb::P64 = P64[_sdcFP::P64 + 48];
           _sdcDc::P64 = P64[_sdcFP::P64 + 56];
           _sdcDd::P64 = P64[_sdcFP::P64 + 64];
           _sdcDf::P64 = P64[_sdcFP::P64 + 72];
           _sdcDg::P64 = P64[_sdcFP::P64 + 80];
           _sdcDi::P64 = P64[_sdcFP::P64 + 88];
           _sdcDj::P64 = P64[_sdcFP::P64 + 96];
           _sdcDk::P64 = P64[_sdcFP::P64 + 104];
           _sdcDl::P64 = P64[_sdcFP::P64 + 112];
           _sdcDm::P64 = P64[_sdcFP::P64 + 120];
           _sdcDq::P64 = P64[_sdcFP::P64 + 128];
           _sdcDt::P64 = P64[_sdcFP::P64 + 136];
           _sdcDw::P64 = P64[_sdcFP::P64 + 144];
           _sdcDz::P64 = P64[_sdcFP::P64 + 152];
           _sdcDF::P64 = P64[_sdcFP::P64 + 160];
           I64[Hp - 160] = sat_sdcFO_info;
           P64[Hp - 144] = _sdcD5::P64;
           P64[Hp - 136] = _sdcD6::P64;
           P64[Hp - 128] = _sdcD7::P64;
           P64[Hp - 120] = _sdcD8::P64;
           P64[Hp - 112] = _sdcDb::P64;
           P64[Hp - 104] = _sdcDc::P64;
           P64[Hp - 96] = _sdcDd::P64;
           P64[Hp - 88] = _sdcDf::P64;
           P64[Hp - 80] = _sdcDg::P64;
           P64[Hp - 72] = _sdcDi::P64;
           P64[Hp - 64] = _sdcDj::P64;
           P64[Hp - 56] = _sdcDk::P64;
           P64[Hp - 48] = _sdcDl::P64;
           P64[Hp - 40] = _sdcDm::P64;
           P64[Hp - 32] = _sdcDq::P64;
           P64[Hp - 24] = _sdcDt::P64;
           P64[Hp - 16] = _sdcDw::P64;
           P64[Hp - 8] = _sdcDz::P64;
           P64[Hp] = _sdcDF::P64;
           R3 = Hp - 160;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcFP_info" {
     sat_sdcFP_info:
         const sat_sdcFP_entry;
         const 19;
         const 13528395363123215;
         const SddB2_srt+384;
 },
 sat_sdcFT_entry() //  [R1]
         { []
         }
     {offset
       cdfZW: // global
           if ((Sp + -176) < SpLim) (likely: False) goto cdg03; else goto cdg04;
       cdg03: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdg04: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 176] = block_cdfNM_info;
           _sdcD5::P64 = P64[R1 + 24];
           _sdcD6::P64 = P64[R1 + 32];
           _sdcD7::P64 = P64[R1 + 40];
           _sdcD8::P64 = P64[R1 + 48];
           _sdcDb::P64 = P64[R1 + 56];
           _sdcDc::P64 = P64[R1 + 64];
           _sdcDd::P64 = P64[R1 + 72];
           _sdcDf::P64 = P64[R1 + 80];
           _sdcDg::P64 = P64[R1 + 88];
           _sdcDi::P64 = P64[R1 + 96];
           _sdcDj::P64 = P64[R1 + 104];
           _sdcDk::P64 = P64[R1 + 112];
           _sdcDl::P64 = P64[R1 + 120];
           _sdcDm::P64 = P64[R1 + 128];
           _sdcDq::P64 = P64[R1 + 136];
           _sdcDt::P64 = P64[R1 + 144];
           _sdcDw::P64 = P64[R1 + 152];
           _sdcDz::P64 = P64[R1 + 160];
           _sdcDF::P64 = P64[R1 + 168];
           R1 = P64[R1 + 16];
           P64[Sp - 168] = _sdcD5::P64;
           P64[Sp - 160] = _sdcD6::P64;
           P64[Sp - 152] = _sdcD7::P64;
           P64[Sp - 144] = _sdcD8::P64;
           P64[Sp - 136] = _sdcDb::P64;
           P64[Sp - 128] = _sdcDc::P64;
           P64[Sp - 120] = _sdcDd::P64;
           P64[Sp - 112] = _sdcDf::P64;
           P64[Sp - 104] = _sdcDg::P64;
           P64[Sp - 96] = _sdcDi::P64;
           P64[Sp - 88] = _sdcDj::P64;
           P64[Sp - 80] = _sdcDk::P64;
           P64[Sp - 72] = _sdcDl::P64;
           P64[Sp - 64] = _sdcDm::P64;
           P64[Sp - 56] = _sdcDq::P64;
           P64[Sp - 48] = _sdcDt::P64;
           P64[Sp - 40] = _sdcDw::P64;
           P64[Sp - 32] = _sdcDz::P64;
           P64[Sp - 24] = _sdcDF::P64;
           Sp = Sp - 176;
           if (R1 & 7 != 0) goto udg0b; else goto cdfNN;
       udg0b: // global
           call _cdfNM(R1) args: 0, res: 0, upd: 0;
       cdfNN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcFT_info" {
     sat_sdcFT_info:
         const sat_sdcFT_entry;
         const 20;
         const 13528395363123215;
         const SddB2_srt+384;
 },
 _cdfNM() //  [R1]
         { []
         }
     {offset
       cdfNM: // global
           Hp = Hp + 168;
           if (Hp > HpLim) (likely: False) goto cdg07; else goto cdg06;
       cdg07: // global
           HpAlloc = 168;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdg06: // global
           _sdcDZ::I64 = I64[R1 + 7];
           I64[Hp - 160] = sat_sdcFP_info;
           P64[Hp - 144] = P64[Sp + 8];
           P64[Hp - 136] = P64[Sp + 16];
           P64[Hp - 128] = P64[Sp + 24];
           P64[Hp - 120] = P64[Sp + 32];
           P64[Hp - 112] = P64[Sp + 40];
           P64[Hp - 104] = P64[Sp + 48];
           P64[Hp - 96] = P64[Sp + 56];
           P64[Hp - 88] = P64[Sp + 64];
           P64[Hp - 80] = P64[Sp + 72];
           P64[Hp - 72] = P64[Sp + 80];
           P64[Hp - 64] = P64[Sp + 88];
           P64[Hp - 56] = P64[Sp + 96];
           P64[Hp - 48] = P64[Sp + 104];
           P64[Hp - 40] = P64[Sp + 112];
           P64[Hp - 32] = P64[Sp + 120];
           P64[Hp - 24] = P64[Sp + 128];
           P64[Hp - 16] = P64[Sp + 136];
           P64[Hp - 8] = P64[Sp + 144];
           P64[Hp] = P64[Sp + 152];
           I64[Sp + 152] = block_cdg00_info;
           R3 = Hp - 160;
           R2 = _sdcDZ::I64;
           Sp = Sp + 152;
           call GHC.Show.$witos_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cdfNM_info" {
     block_cdfNM_info:
         const _cdfNM;
         const 19;
         const 13528395363123230;
         const SddB2_srt+384;
 },
 _cdg00() //  [R1, R2]
         { []
         }
     {offset
       cdg00: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdg0a; else goto cdg09;
       cdg0a: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cdg09: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdg00_info" {
     block_cdg00_info:
         const _cdg00;
         const 0;
         const 30;
 },
 sat_sdcFU_entry() //  [R1]
         { []
         }
     {offset
       cdg0c: // global
           Hp = Hp + 176;
           if (Hp > HpLim) (likely: False) goto cdg0g; else goto cdg0f;
       cdg0g: // global
           HpAlloc = 176;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdg0f: // global
           _sdcD4::P64 = P64[R1 + 16];
           _sdcD5::P64 = P64[R1 + 24];
           _sdcD6::P64 = P64[R1 + 32];
           _sdcD7::P64 = P64[R1 + 40];
           _sdcD8::P64 = P64[R1 + 48];
           _sdcDb::P64 = P64[R1 + 56];
           _sdcDc::P64 = P64[R1 + 64];
           _sdcDd::P64 = P64[R1 + 72];
           _sdcDf::P64 = P64[R1 + 80];
           _sdcDg::P64 = P64[R1 + 88];
           _sdcDi::P64 = P64[R1 + 96];
           _sdcDj::P64 = P64[R1 + 104];
           _sdcDk::P64 = P64[R1 + 112];
           _sdcDl::P64 = P64[R1 + 120];
           _sdcDm::P64 = P64[R1 + 128];
           _sdcDq::P64 = P64[R1 + 136];
           _sdcDt::P64 = P64[R1 + 144];
           _sdcDw::P64 = P64[R1 + 152];
           _sdcDz::P64 = P64[R1 + 160];
           _sdcDF::P64 = P64[R1 + 168];
           I64[Hp - 168] = sat_sdcFT_info;
           P64[Hp - 152] = _sdcD4::P64;
           P64[Hp - 144] = _sdcD5::P64;
           P64[Hp - 136] = _sdcD6::P64;
           P64[Hp - 128] = _sdcD7::P64;
           P64[Hp - 120] = _sdcD8::P64;
           P64[Hp - 112] = _sdcDb::P64;
           P64[Hp - 104] = _sdcDc::P64;
           P64[Hp - 96] = _sdcDd::P64;
           P64[Hp - 88] = _sdcDf::P64;
           P64[Hp - 80] = _sdcDg::P64;
           P64[Hp - 72] = _sdcDi::P64;
           P64[Hp - 64] = _sdcDj::P64;
           P64[Hp - 56] = _sdcDk::P64;
           P64[Hp - 48] = _sdcDl::P64;
           P64[Hp - 40] = _sdcDm::P64;
           P64[Hp - 32] = _sdcDq::P64;
           P64[Hp - 24] = _sdcDt::P64;
           P64[Hp - 16] = _sdcDw::P64;
           P64[Hp - 8] = _sdcDz::P64;
           P64[Hp] = _sdcDF::P64;
           R3 = Hp - 168;
           R2 = lvl67_rcV6c_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcFU_info" {
     sat_sdcFU_info:
         const sat_sdcFU_entry;
         const 20;
         const 13528395363123215;
         const SddB2_srt+384;
 },
 sat_sdcFV_entry() //  [R1]
         { []
         }
     {offset
       cdg0h: // global
           _sdcFV::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdg0i; else goto cdg0j;
       cdg0j: // global
           Hp = Hp + 176;
           if (Hp > HpLim) (likely: False) goto cdg0l; else goto cdg0k;
       cdg0l: // global
           HpAlloc = 176;
           goto cdg0i;
       cdg0i: // global
           R1 = _sdcFV::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdg0k: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcFV::P64;
           _sdcD4::P64 = P64[_sdcFV::P64 + 16];
           _sdcD5::P64 = P64[_sdcFV::P64 + 24];
           _sdcD6::P64 = P64[_sdcFV::P64 + 32];
           _sdcD7::P64 = P64[_sdcFV::P64 + 40];
           _sdcD8::P64 = P64[_sdcFV::P64 + 48];
           _sdcDb::P64 = P64[_sdcFV::P64 + 56];
           _sdcDc::P64 = P64[_sdcFV::P64 + 64];
           _sdcDd::P64 = P64[_sdcFV::P64 + 72];
           _sdcDf::P64 = P64[_sdcFV::P64 + 80];
           _sdcDg::P64 = P64[_sdcFV::P64 + 88];
           _sdcDi::P64 = P64[_sdcFV::P64 + 96];
           _sdcDj::P64 = P64[_sdcFV::P64 + 104];
           _sdcDk::P64 = P64[_sdcFV::P64 + 112];
           _sdcDl::P64 = P64[_sdcFV::P64 + 120];
           _sdcDm::P64 = P64[_sdcFV::P64 + 128];
           _sdcDq::P64 = P64[_sdcFV::P64 + 136];
           _sdcDt::P64 = P64[_sdcFV::P64 + 144];
           _sdcDw::P64 = P64[_sdcFV::P64 + 152];
           _sdcDz::P64 = P64[_sdcFV::P64 + 160];
           _sdcDF::P64 = P64[_sdcFV::P64 + 168];
           I64[Hp - 168] = sat_sdcFU_info;
           P64[Hp - 152] = _sdcD4::P64;
           P64[Hp - 144] = _sdcD5::P64;
           P64[Hp - 136] = _sdcD6::P64;
           P64[Hp - 128] = _sdcD7::P64;
           P64[Hp - 120] = _sdcD8::P64;
           P64[Hp - 112] = _sdcDb::P64;
           P64[Hp - 104] = _sdcDc::P64;
           P64[Hp - 96] = _sdcDd::P64;
           P64[Hp - 88] = _sdcDf::P64;
           P64[Hp - 80] = _sdcDg::P64;
           P64[Hp - 72] = _sdcDi::P64;
           P64[Hp - 64] = _sdcDj::P64;
           P64[Hp - 56] = _sdcDk::P64;
           P64[Hp - 48] = _sdcDl::P64;
           P64[Hp - 40] = _sdcDm::P64;
           P64[Hp - 32] = _sdcDq::P64;
           P64[Hp - 24] = _sdcDt::P64;
           P64[Hp - 16] = _sdcDw::P64;
           P64[Hp - 8] = _sdcDz::P64;
           P64[Hp] = _sdcDF::P64;
           R3 = Hp - 168;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcFV_info" {
     sat_sdcFV_info:
         const sat_sdcFV_entry;
         const 20;
         const 13528395363123215;
         const SddB2_srt+384;
 },
 sat_sdcFZ_entry() //  [R1]
         { []
         }
     {offset
       cdg0m: // global
           if ((Sp + -184) < SpLim) (likely: False) goto cdg0t; else goto cdg0u;
       cdg0t: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdg0u: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 184] = block_cdfNv_info;
           _sdcD4::P64 = P64[R1 + 24];
           _sdcD5::P64 = P64[R1 + 32];
           _sdcD6::P64 = P64[R1 + 40];
           _sdcD7::P64 = P64[R1 + 48];
           _sdcD8::P64 = P64[R1 + 56];
           _sdcDb::P64 = P64[R1 + 64];
           _sdcDc::P64 = P64[R1 + 72];
           _sdcDd::P64 = P64[R1 + 80];
           _sdcDf::P64 = P64[R1 + 88];
           _sdcDg::P64 = P64[R1 + 96];
           _sdcDi::P64 = P64[R1 + 104];
           _sdcDj::P64 = P64[R1 + 112];
           _sdcDk::P64 = P64[R1 + 120];
           _sdcDl::P64 = P64[R1 + 128];
           _sdcDm::P64 = P64[R1 + 136];
           _sdcDq::P64 = P64[R1 + 144];
           _sdcDt::P64 = P64[R1 + 152];
           _sdcDw::P64 = P64[R1 + 160];
           _sdcDz::P64 = P64[R1 + 168];
           _sdcDF::P64 = P64[R1 + 176];
           R1 = P64[R1 + 16];
           P64[Sp - 176] = _sdcD4::P64;
           P64[Sp - 168] = _sdcD5::P64;
           P64[Sp - 160] = _sdcD6::P64;
           P64[Sp - 152] = _sdcD7::P64;
           P64[Sp - 144] = _sdcD8::P64;
           P64[Sp - 136] = _sdcDb::P64;
           P64[Sp - 128] = _sdcDc::P64;
           P64[Sp - 120] = _sdcDd::P64;
           P64[Sp - 112] = _sdcDf::P64;
           P64[Sp - 104] = _sdcDg::P64;
           P64[Sp - 96] = _sdcDi::P64;
           P64[Sp - 88] = _sdcDj::P64;
           P64[Sp - 80] = _sdcDk::P64;
           P64[Sp - 72] = _sdcDl::P64;
           P64[Sp - 64] = _sdcDm::P64;
           P64[Sp - 56] = _sdcDq::P64;
           P64[Sp - 48] = _sdcDt::P64;
           P64[Sp - 40] = _sdcDw::P64;
           P64[Sp - 32] = _sdcDz::P64;
           P64[Sp - 24] = _sdcDF::P64;
           Sp = Sp - 184;
           if (R1 & 7 != 0) goto udg0B; else goto cdfNw;
       udg0B: // global
           call _cdfNv(R1) args: 0, res: 0, upd: 0;
       cdfNw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcFZ_info" {
     sat_sdcFZ_info:
         const sat_sdcFZ_entry;
         const 21;
         const 13528395363123215;
         const SddB2_srt+384;
 },
 _cdfNv() //  [R1]
         { []
         }
     {offset
       cdfNv: // global
           Hp = Hp + 176;
           if (Hp > HpLim) (likely: False) goto cdg0x; else goto cdg0w;
       cdg0x: // global
           HpAlloc = 176;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdg0w: // global
           _sdcDW::I64 = I64[R1 + 7];
           I64[Hp - 168] = sat_sdcFV_info;
           P64[Hp - 152] = P64[Sp + 8];
           P64[Hp - 144] = P64[Sp + 16];
           P64[Hp - 136] = P64[Sp + 24];
           P64[Hp - 128] = P64[Sp + 32];
           P64[Hp - 120] = P64[Sp + 40];
           P64[Hp - 112] = P64[Sp + 48];
           P64[Hp - 104] = P64[Sp + 56];
           P64[Hp - 96] = P64[Sp + 64];
           P64[Hp - 88] = P64[Sp + 72];
           P64[Hp - 80] = P64[Sp + 80];
           P64[Hp - 72] = P64[Sp + 88];
           P64[Hp - 64] = P64[Sp + 96];
           P64[Hp - 56] = P64[Sp + 104];
           P64[Hp - 48] = P64[Sp + 112];
           P64[Hp - 40] = P64[Sp + 120];
           P64[Hp - 32] = P64[Sp + 128];
           P64[Hp - 24] = P64[Sp + 136];
           P64[Hp - 16] = P64[Sp + 144];
           P64[Hp - 8] = P64[Sp + 152];
           P64[Hp] = P64[Sp + 160];
           I64[Sp + 160] = block_cdg0q_info;
           R3 = Hp - 168;
           R2 = _sdcDW::I64;
           Sp = Sp + 160;
           call GHC.Show.$witos_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cdfNv_info" {
     block_cdfNv_info:
         const _cdfNv;
         const 20;
         const 13528395363123230;
         const SddB2_srt+384;
 },
 _cdg0q() //  [R1, R2]
         { []
         }
     {offset
       cdg0q: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdg0A; else goto cdg0z;
       cdg0A: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cdg0z: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdg0q_info" {
     block_cdg0q_info:
         const _cdg0q;
         const 0;
         const 30;
 },
 sat_sdcG0_entry() //  [R1]
         { []
         }
     {offset
       cdg0C: // global
           Hp = Hp + 184;
           if (Hp > HpLim) (likely: False) goto cdg0G; else goto cdg0F;
       cdg0G: // global
           HpAlloc = 184;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdg0F: // global
           _sdcD3::P64 = P64[R1 + 16];
           _sdcD4::P64 = P64[R1 + 24];
           _sdcD5::P64 = P64[R1 + 32];
           _sdcD6::P64 = P64[R1 + 40];
           _sdcD7::P64 = P64[R1 + 48];
           _sdcD8::P64 = P64[R1 + 56];
           _sdcDb::P64 = P64[R1 + 64];
           _sdcDc::P64 = P64[R1 + 72];
           _sdcDd::P64 = P64[R1 + 80];
           _sdcDf::P64 = P64[R1 + 88];
           _sdcDg::P64 = P64[R1 + 96];
           _sdcDi::P64 = P64[R1 + 104];
           _sdcDj::P64 = P64[R1 + 112];
           _sdcDk::P64 = P64[R1 + 120];
           _sdcDl::P64 = P64[R1 + 128];
           _sdcDm::P64 = P64[R1 + 136];
           _sdcDq::P64 = P64[R1 + 144];
           _sdcDt::P64 = P64[R1 + 152];
           _sdcDw::P64 = P64[R1 + 160];
           _sdcDz::P64 = P64[R1 + 168];
           _sdcDF::P64 = P64[R1 + 176];
           I64[Hp - 176] = sat_sdcFZ_info;
           P64[Hp - 160] = _sdcD3::P64;
           P64[Hp - 152] = _sdcD4::P64;
           P64[Hp - 144] = _sdcD5::P64;
           P64[Hp - 136] = _sdcD6::P64;
           P64[Hp - 128] = _sdcD7::P64;
           P64[Hp - 120] = _sdcD8::P64;
           P64[Hp - 112] = _sdcDb::P64;
           P64[Hp - 104] = _sdcDc::P64;
           P64[Hp - 96] = _sdcDd::P64;
           P64[Hp - 88] = _sdcDf::P64;
           P64[Hp - 80] = _sdcDg::P64;
           P64[Hp - 72] = _sdcDi::P64;
           P64[Hp - 64] = _sdcDj::P64;
           P64[Hp - 56] = _sdcDk::P64;
           P64[Hp - 48] = _sdcDl::P64;
           P64[Hp - 40] = _sdcDm::P64;
           P64[Hp - 32] = _sdcDq::P64;
           P64[Hp - 24] = _sdcDt::P64;
           P64[Hp - 16] = _sdcDw::P64;
           P64[Hp - 8] = _sdcDz::P64;
           P64[Hp] = _sdcDF::P64;
           R3 = Hp - 176;
           R2 = lvl66_rcV6b_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcG0_info" {
     sat_sdcG0_info:
         const sat_sdcG0_entry;
         const 21;
         const 13528395363123215;
         const SddB2_srt+384;
 },
 sat_sdcG1_entry() //  [R1]
         { []
         }
     {offset
       cdg0H: // global
           _sdcG1::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdg0I; else goto cdg0J;
       cdg0J: // global
           Hp = Hp + 184;
           if (Hp > HpLim) (likely: False) goto cdg0L; else goto cdg0K;
       cdg0L: // global
           HpAlloc = 184;
           goto cdg0I;
       cdg0I: // global
           R1 = _sdcG1::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdg0K: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcG1::P64;
           _sdcD3::P64 = P64[_sdcG1::P64 + 16];
           _sdcD4::P64 = P64[_sdcG1::P64 + 24];
           _sdcD5::P64 = P64[_sdcG1::P64 + 32];
           _sdcD6::P64 = P64[_sdcG1::P64 + 40];
           _sdcD7::P64 = P64[_sdcG1::P64 + 48];
           _sdcD8::P64 = P64[_sdcG1::P64 + 56];
           _sdcDb::P64 = P64[_sdcG1::P64 + 64];
           _sdcDc::P64 = P64[_sdcG1::P64 + 72];
           _sdcDd::P64 = P64[_sdcG1::P64 + 80];
           _sdcDf::P64 = P64[_sdcG1::P64 + 88];
           _sdcDg::P64 = P64[_sdcG1::P64 + 96];
           _sdcDi::P64 = P64[_sdcG1::P64 + 104];
           _sdcDj::P64 = P64[_sdcG1::P64 + 112];
           _sdcDk::P64 = P64[_sdcG1::P64 + 120];
           _sdcDl::P64 = P64[_sdcG1::P64 + 128];
           _sdcDm::P64 = P64[_sdcG1::P64 + 136];
           _sdcDq::P64 = P64[_sdcG1::P64 + 144];
           _sdcDt::P64 = P64[_sdcG1::P64 + 152];
           _sdcDw::P64 = P64[_sdcG1::P64 + 160];
           _sdcDz::P64 = P64[_sdcG1::P64 + 168];
           _sdcDF::P64 = P64[_sdcG1::P64 + 176];
           I64[Hp - 176] = sat_sdcG0_info;
           P64[Hp - 160] = _sdcD3::P64;
           P64[Hp - 152] = _sdcD4::P64;
           P64[Hp - 144] = _sdcD5::P64;
           P64[Hp - 136] = _sdcD6::P64;
           P64[Hp - 128] = _sdcD7::P64;
           P64[Hp - 120] = _sdcD8::P64;
           P64[Hp - 112] = _sdcDb::P64;
           P64[Hp - 104] = _sdcDc::P64;
           P64[Hp - 96] = _sdcDd::P64;
           P64[Hp - 88] = _sdcDf::P64;
           P64[Hp - 80] = _sdcDg::P64;
           P64[Hp - 72] = _sdcDi::P64;
           P64[Hp - 64] = _sdcDj::P64;
           P64[Hp - 56] = _sdcDk::P64;
           P64[Hp - 48] = _sdcDl::P64;
           P64[Hp - 40] = _sdcDm::P64;
           P64[Hp - 32] = _sdcDq::P64;
           P64[Hp - 24] = _sdcDt::P64;
           P64[Hp - 16] = _sdcDw::P64;
           P64[Hp - 8] = _sdcDz::P64;
           P64[Hp] = _sdcDF::P64;
           R3 = Hp - 176;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcG1_info" {
     sat_sdcG1_info:
         const sat_sdcG1_entry;
         const 21;
         const 13528395363123215;
         const SddB2_srt+384;
 },
 sat_sdcG5_entry() //  [R1]
         { []
         }
     {offset
       cdg0M: // global
           if ((Sp + -192) < SpLim) (likely: False) goto cdg0T; else goto cdg0U;
       cdg0T: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdg0U: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 192] = block_cdfNe_info;
           _sdcD3::P64 = P64[R1 + 24];
           _sdcD4::P64 = P64[R1 + 32];
           _sdcD5::P64 = P64[R1 + 40];
           _sdcD6::P64 = P64[R1 + 48];
           _sdcD7::P64 = P64[R1 + 56];
           _sdcD8::P64 = P64[R1 + 64];
           _sdcDb::P64 = P64[R1 + 72];
           _sdcDc::P64 = P64[R1 + 80];
           _sdcDd::P64 = P64[R1 + 88];
           _sdcDf::P64 = P64[R1 + 96];
           _sdcDg::P64 = P64[R1 + 104];
           _sdcDi::P64 = P64[R1 + 112];
           _sdcDj::P64 = P64[R1 + 120];
           _sdcDk::P64 = P64[R1 + 128];
           _sdcDl::P64 = P64[R1 + 136];
           _sdcDm::P64 = P64[R1 + 144];
           _sdcDq::P64 = P64[R1 + 152];
           _sdcDt::P64 = P64[R1 + 160];
           _sdcDw::P64 = P64[R1 + 168];
           _sdcDz::P64 = P64[R1 + 176];
           _sdcDF::P64 = P64[R1 + 184];
           R1 = P64[R1 + 16];
           P64[Sp - 184] = _sdcD3::P64;
           P64[Sp - 176] = _sdcD4::P64;
           P64[Sp - 168] = _sdcD5::P64;
           P64[Sp - 160] = _sdcD6::P64;
           P64[Sp - 152] = _sdcD7::P64;
           P64[Sp - 144] = _sdcD8::P64;
           P64[Sp - 136] = _sdcDb::P64;
           P64[Sp - 128] = _sdcDc::P64;
           P64[Sp - 120] = _sdcDd::P64;
           P64[Sp - 112] = _sdcDf::P64;
           P64[Sp - 104] = _sdcDg::P64;
           P64[Sp - 96] = _sdcDi::P64;
           P64[Sp - 88] = _sdcDj::P64;
           P64[Sp - 80] = _sdcDk::P64;
           P64[Sp - 72] = _sdcDl::P64;
           P64[Sp - 64] = _sdcDm::P64;
           P64[Sp - 56] = _sdcDq::P64;
           P64[Sp - 48] = _sdcDt::P64;
           P64[Sp - 40] = _sdcDw::P64;
           P64[Sp - 32] = _sdcDz::P64;
           P64[Sp - 24] = _sdcDF::P64;
           Sp = Sp - 192;
           if (R1 & 7 != 0) goto udg11; else goto cdfNf;
       udg11: // global
           call _cdfNe(R1) args: 0, res: 0, upd: 0;
       cdfNf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcG5_info" {
     sat_sdcG5_info:
         const sat_sdcG5_entry;
         const 22;
         const 13528395363123215;
         const SddB2_srt+384;
 },
 _cdfNe() //  [R1]
         { []
         }
     {offset
       cdfNe: // global
           Hp = Hp + 184;
           if (Hp > HpLim) (likely: False) goto cdg0X; else goto cdg0W;
       cdg0X: // global
           HpAlloc = 184;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdg0W: // global
           _sdcDT::I64 = I64[R1 + 7];
           I64[Hp - 176] = sat_sdcG1_info;
           P64[Hp - 160] = P64[Sp + 8];
           P64[Hp - 152] = P64[Sp + 16];
           P64[Hp - 144] = P64[Sp + 24];
           P64[Hp - 136] = P64[Sp + 32];
           P64[Hp - 128] = P64[Sp + 40];
           P64[Hp - 120] = P64[Sp + 48];
           P64[Hp - 112] = P64[Sp + 56];
           P64[Hp - 104] = P64[Sp + 64];
           P64[Hp - 96] = P64[Sp + 72];
           P64[Hp - 88] = P64[Sp + 80];
           P64[Hp - 80] = P64[Sp + 88];
           P64[Hp - 72] = P64[Sp + 96];
           P64[Hp - 64] = P64[Sp + 104];
           P64[Hp - 56] = P64[Sp + 112];
           P64[Hp - 48] = P64[Sp + 120];
           P64[Hp - 40] = P64[Sp + 128];
           P64[Hp - 32] = P64[Sp + 136];
           P64[Hp - 24] = P64[Sp + 144];
           P64[Hp - 16] = P64[Sp + 152];
           P64[Hp - 8] = P64[Sp + 160];
           P64[Hp] = P64[Sp + 168];
           I64[Sp + 168] = block_cdg0Q_info;
           R3 = Hp - 176;
           R2 = _sdcDT::I64;
           Sp = Sp + 168;
           call GHC.Show.$witos_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cdfNe_info" {
     block_cdfNe_info:
         const _cdfNe;
         const 21;
         const 13528395363123230;
         const SddB2_srt+384;
 },
 _cdg0Q() //  [R1, R2]
         { []
         }
     {offset
       cdg0Q: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdg10; else goto cdg0Z;
       cdg10: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cdg0Z: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdg0Q_info" {
     block_cdg0Q_info:
         const _cdg0Q;
         const 0;
         const 30;
 },
 sat_sdcG6_entry() //  [R1]
         { []
         }
     {offset
       cdg12: // global
           Hp = Hp + 192;
           if (Hp > HpLim) (likely: False) goto cdg16; else goto cdg15;
       cdg16: // global
           HpAlloc = 192;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdg15: // global
           _sdcD2::P64 = P64[R1 + 16];
           _sdcD3::P64 = P64[R1 + 24];
           _sdcD4::P64 = P64[R1 + 32];
           _sdcD5::P64 = P64[R1 + 40];
           _sdcD6::P64 = P64[R1 + 48];
           _sdcD7::P64 = P64[R1 + 56];
           _sdcD8::P64 = P64[R1 + 64];
           _sdcDb::P64 = P64[R1 + 72];
           _sdcDc::P64 = P64[R1 + 80];
           _sdcDd::P64 = P64[R1 + 88];
           _sdcDf::P64 = P64[R1 + 96];
           _sdcDg::P64 = P64[R1 + 104];
           _sdcDi::P64 = P64[R1 + 112];
           _sdcDj::P64 = P64[R1 + 120];
           _sdcDk::P64 = P64[R1 + 128];
           _sdcDl::P64 = P64[R1 + 136];
           _sdcDm::P64 = P64[R1 + 144];
           _sdcDq::P64 = P64[R1 + 152];
           _sdcDt::P64 = P64[R1 + 160];
           _sdcDw::P64 = P64[R1 + 168];
           _sdcDz::P64 = P64[R1 + 176];
           _sdcDF::P64 = P64[R1 + 184];
           I64[Hp - 184] = sat_sdcG5_info;
           P64[Hp - 168] = _sdcD2::P64;
           P64[Hp - 160] = _sdcD3::P64;
           P64[Hp - 152] = _sdcD4::P64;
           P64[Hp - 144] = _sdcD5::P64;
           P64[Hp - 136] = _sdcD6::P64;
           P64[Hp - 128] = _sdcD7::P64;
           P64[Hp - 120] = _sdcD8::P64;
           P64[Hp - 112] = _sdcDb::P64;
           P64[Hp - 104] = _sdcDc::P64;
           P64[Hp - 96] = _sdcDd::P64;
           P64[Hp - 88] = _sdcDf::P64;
           P64[Hp - 80] = _sdcDg::P64;
           P64[Hp - 72] = _sdcDi::P64;
           P64[Hp - 64] = _sdcDj::P64;
           P64[Hp - 56] = _sdcDk::P64;
           P64[Hp - 48] = _sdcDl::P64;
           P64[Hp - 40] = _sdcDm::P64;
           P64[Hp - 32] = _sdcDq::P64;
           P64[Hp - 24] = _sdcDt::P64;
           P64[Hp - 16] = _sdcDw::P64;
           P64[Hp - 8] = _sdcDz::P64;
           P64[Hp] = _sdcDF::P64;
           R3 = Hp - 184;
           R2 = lvl65_rcV6a_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcG6_info" {
     sat_sdcG6_info:
         const sat_sdcG6_entry;
         const 22;
         const 13528395363123215;
         const SddB2_srt+384;
 },
 sat_sdcG7_entry() //  [R1]
         { []
         }
     {offset
       cdg17: // global
           _sdcG7::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdg18; else goto cdg19;
       cdg19: // global
           Hp = Hp + 192;
           if (Hp > HpLim) (likely: False) goto cdg1b; else goto cdg1a;
       cdg1b: // global
           HpAlloc = 192;
           goto cdg18;
       cdg18: // global
           R1 = _sdcG7::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdg1a: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcG7::P64;
           _sdcD2::P64 = P64[_sdcG7::P64 + 16];
           _sdcD3::P64 = P64[_sdcG7::P64 + 24];
           _sdcD4::P64 = P64[_sdcG7::P64 + 32];
           _sdcD5::P64 = P64[_sdcG7::P64 + 40];
           _sdcD6::P64 = P64[_sdcG7::P64 + 48];
           _sdcD7::P64 = P64[_sdcG7::P64 + 56];
           _sdcD8::P64 = P64[_sdcG7::P64 + 64];
           _sdcDb::P64 = P64[_sdcG7::P64 + 72];
           _sdcDc::P64 = P64[_sdcG7::P64 + 80];
           _sdcDd::P64 = P64[_sdcG7::P64 + 88];
           _sdcDf::P64 = P64[_sdcG7::P64 + 96];
           _sdcDg::P64 = P64[_sdcG7::P64 + 104];
           _sdcDi::P64 = P64[_sdcG7::P64 + 112];
           _sdcDj::P64 = P64[_sdcG7::P64 + 120];
           _sdcDk::P64 = P64[_sdcG7::P64 + 128];
           _sdcDl::P64 = P64[_sdcG7::P64 + 136];
           _sdcDm::P64 = P64[_sdcG7::P64 + 144];
           _sdcDq::P64 = P64[_sdcG7::P64 + 152];
           _sdcDt::P64 = P64[_sdcG7::P64 + 160];
           _sdcDw::P64 = P64[_sdcG7::P64 + 168];
           _sdcDz::P64 = P64[_sdcG7::P64 + 176];
           _sdcDF::P64 = P64[_sdcG7::P64 + 184];
           I64[Hp - 184] = sat_sdcG6_info;
           P64[Hp - 168] = _sdcD2::P64;
           P64[Hp - 160] = _sdcD3::P64;
           P64[Hp - 152] = _sdcD4::P64;
           P64[Hp - 144] = _sdcD5::P64;
           P64[Hp - 136] = _sdcD6::P64;
           P64[Hp - 128] = _sdcD7::P64;
           P64[Hp - 120] = _sdcD8::P64;
           P64[Hp - 112] = _sdcDb::P64;
           P64[Hp - 104] = _sdcDc::P64;
           P64[Hp - 96] = _sdcDd::P64;
           P64[Hp - 88] = _sdcDf::P64;
           P64[Hp - 80] = _sdcDg::P64;
           P64[Hp - 72] = _sdcDi::P64;
           P64[Hp - 64] = _sdcDj::P64;
           P64[Hp - 56] = _sdcDk::P64;
           P64[Hp - 48] = _sdcDl::P64;
           P64[Hp - 40] = _sdcDm::P64;
           P64[Hp - 32] = _sdcDq::P64;
           P64[Hp - 24] = _sdcDt::P64;
           P64[Hp - 16] = _sdcDw::P64;
           P64[Hp - 8] = _sdcDz::P64;
           P64[Hp] = _sdcDF::P64;
           R3 = Hp - 184;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcG7_info" {
     sat_sdcG7_info:
         const sat_sdcG7_entry;
         const 22;
         const 13528395363123215;
         const SddB2_srt+384;
 },
 sat_sdcGb_entry() //  [R1]
         { []
         }
     {offset
       cdg1c: // global
           if ((Sp + -200) < SpLim) (likely: False) goto cdg1j; else goto cdg1k;
       cdg1j: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdg1k: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 200] = block_cdfMX_info;
           _sdcD2::P64 = P64[R1 + 24];
           _sdcD3::P64 = P64[R1 + 32];
           _sdcD4::P64 = P64[R1 + 40];
           _sdcD5::P64 = P64[R1 + 48];
           _sdcD6::P64 = P64[R1 + 56];
           _sdcD7::P64 = P64[R1 + 64];
           _sdcD8::P64 = P64[R1 + 72];
           _sdcDb::P64 = P64[R1 + 80];
           _sdcDc::P64 = P64[R1 + 88];
           _sdcDd::P64 = P64[R1 + 96];
           _sdcDf::P64 = P64[R1 + 104];
           _sdcDg::P64 = P64[R1 + 112];
           _sdcDi::P64 = P64[R1 + 120];
           _sdcDj::P64 = P64[R1 + 128];
           _sdcDk::P64 = P64[R1 + 136];
           _sdcDl::P64 = P64[R1 + 144];
           _sdcDm::P64 = P64[R1 + 152];
           _sdcDq::P64 = P64[R1 + 160];
           _sdcDt::P64 = P64[R1 + 168];
           _sdcDw::P64 = P64[R1 + 176];
           _sdcDz::P64 = P64[R1 + 184];
           _sdcDF::P64 = P64[R1 + 192];
           R1 = P64[R1 + 16];
           P64[Sp - 192] = _sdcD2::P64;
           P64[Sp - 184] = _sdcD3::P64;
           P64[Sp - 176] = _sdcD4::P64;
           P64[Sp - 168] = _sdcD5::P64;
           P64[Sp - 160] = _sdcD6::P64;
           P64[Sp - 152] = _sdcD7::P64;
           P64[Sp - 144] = _sdcD8::P64;
           P64[Sp - 136] = _sdcDb::P64;
           P64[Sp - 128] = _sdcDc::P64;
           P64[Sp - 120] = _sdcDd::P64;
           P64[Sp - 112] = _sdcDf::P64;
           P64[Sp - 104] = _sdcDg::P64;
           P64[Sp - 96] = _sdcDi::P64;
           P64[Sp - 88] = _sdcDj::P64;
           P64[Sp - 80] = _sdcDk::P64;
           P64[Sp - 72] = _sdcDl::P64;
           P64[Sp - 64] = _sdcDm::P64;
           P64[Sp - 56] = _sdcDq::P64;
           P64[Sp - 48] = _sdcDt::P64;
           P64[Sp - 40] = _sdcDw::P64;
           P64[Sp - 32] = _sdcDz::P64;
           P64[Sp - 24] = _sdcDF::P64;
           Sp = Sp - 200;
           if (R1 & 7 != 0) goto udg1r; else goto cdfMY;
       udg1r: // global
           call _cdfMX(R1) args: 0, res: 0, upd: 0;
       cdfMY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcGb_info" {
     sat_sdcGb_info:
         const sat_sdcGb_entry;
         const 23;
         const 13528395363123215;
         const SddB2_srt+384;
 },
 _cdfMX() //  [R1]
         { []
         }
     {offset
       cdfMX: // global
           Hp = Hp + 192;
           if (Hp > HpLim) (likely: False) goto cdg1n; else goto cdg1m;
       cdg1n: // global
           HpAlloc = 192;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdg1m: // global
           _sdcDQ::I64 = I64[R1 + 7];
           I64[Hp - 184] = sat_sdcG7_info;
           P64[Hp - 168] = P64[Sp + 8];
           P64[Hp - 160] = P64[Sp + 16];
           P64[Hp - 152] = P64[Sp + 24];
           P64[Hp - 144] = P64[Sp + 32];
           P64[Hp - 136] = P64[Sp + 40];
           P64[Hp - 128] = P64[Sp + 48];
           P64[Hp - 120] = P64[Sp + 56];
           P64[Hp - 112] = P64[Sp + 64];
           P64[Hp - 104] = P64[Sp + 72];
           P64[Hp - 96] = P64[Sp + 80];
           P64[Hp - 88] = P64[Sp + 88];
           P64[Hp - 80] = P64[Sp + 96];
           P64[Hp - 72] = P64[Sp + 104];
           P64[Hp - 64] = P64[Sp + 112];
           P64[Hp - 56] = P64[Sp + 120];
           P64[Hp - 48] = P64[Sp + 128];
           P64[Hp - 40] = P64[Sp + 136];
           P64[Hp - 32] = P64[Sp + 144];
           P64[Hp - 24] = P64[Sp + 152];
           P64[Hp - 16] = P64[Sp + 160];
           P64[Hp - 8] = P64[Sp + 168];
           P64[Hp] = P64[Sp + 176];
           I64[Sp + 176] = block_cdg1g_info;
           R3 = Hp - 184;
           R2 = _sdcDQ::I64;
           Sp = Sp + 176;
           call GHC.Show.$witos_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cdfMX_info" {
     block_cdfMX_info:
         const _cdfMX;
         const 22;
         const 13528395363123230;
         const SddB2_srt+384;
 },
 _cdg1g() //  [R1, R2]
         { []
         }
     {offset
       cdg1g: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdg1q; else goto cdg1p;
       cdg1q: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cdg1p: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdg1g_info" {
     block_cdg1g_info:
         const _cdg1g;
         const 0;
         const 30;
 },
 sat_sdcGc_entry() //  [R1]
         { []
         }
     {offset
       cdg1s: // global
           Hp = Hp + 200;
           if (Hp > HpLim) (likely: False) goto cdg1w; else goto cdg1v;
       cdg1w: // global
           HpAlloc = 200;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdg1v: // global
           _sdcD1::P64 = P64[R1 + 16];
           _sdcD2::P64 = P64[R1 + 24];
           _sdcD3::P64 = P64[R1 + 32];
           _sdcD4::P64 = P64[R1 + 40];
           _sdcD5::P64 = P64[R1 + 48];
           _sdcD6::P64 = P64[R1 + 56];
           _sdcD7::P64 = P64[R1 + 64];
           _sdcD8::P64 = P64[R1 + 72];
           _sdcDb::P64 = P64[R1 + 80];
           _sdcDc::P64 = P64[R1 + 88];
           _sdcDd::P64 = P64[R1 + 96];
           _sdcDf::P64 = P64[R1 + 104];
           _sdcDg::P64 = P64[R1 + 112];
           _sdcDi::P64 = P64[R1 + 120];
           _sdcDj::P64 = P64[R1 + 128];
           _sdcDk::P64 = P64[R1 + 136];
           _sdcDl::P64 = P64[R1 + 144];
           _sdcDm::P64 = P64[R1 + 152];
           _sdcDq::P64 = P64[R1 + 160];
           _sdcDt::P64 = P64[R1 + 168];
           _sdcDw::P64 = P64[R1 + 176];
           _sdcDz::P64 = P64[R1 + 184];
           _sdcDF::P64 = P64[R1 + 192];
           I64[Hp - 192] = sat_sdcGb_info;
           P64[Hp - 176] = _sdcD1::P64;
           P64[Hp - 168] = _sdcD2::P64;
           P64[Hp - 160] = _sdcD3::P64;
           P64[Hp - 152] = _sdcD4::P64;
           P64[Hp - 144] = _sdcD5::P64;
           P64[Hp - 136] = _sdcD6::P64;
           P64[Hp - 128] = _sdcD7::P64;
           P64[Hp - 120] = _sdcD8::P64;
           P64[Hp - 112] = _sdcDb::P64;
           P64[Hp - 104] = _sdcDc::P64;
           P64[Hp - 96] = _sdcDd::P64;
           P64[Hp - 88] = _sdcDf::P64;
           P64[Hp - 80] = _sdcDg::P64;
           P64[Hp - 72] = _sdcDi::P64;
           P64[Hp - 64] = _sdcDj::P64;
           P64[Hp - 56] = _sdcDk::P64;
           P64[Hp - 48] = _sdcDl::P64;
           P64[Hp - 40] = _sdcDm::P64;
           P64[Hp - 32] = _sdcDq::P64;
           P64[Hp - 24] = _sdcDt::P64;
           P64[Hp - 16] = _sdcDw::P64;
           P64[Hp - 8] = _sdcDz::P64;
           P64[Hp] = _sdcDF::P64;
           R3 = Hp - 192;
           R2 = lvl64_rcV69_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcGc_info" {
     sat_sdcGc_info:
         const sat_sdcGc_entry;
         const 23;
         const 13528395363123215;
         const SddB2_srt+384;
 },
 sat_sdcGd_entry() //  [R1]
         { []
         }
     {offset
       cdg1x: // global
           _sdcGd::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdg1y; else goto cdg1z;
       cdg1z: // global
           Hp = Hp + 200;
           if (Hp > HpLim) (likely: False) goto cdg1B; else goto cdg1A;
       cdg1B: // global
           HpAlloc = 200;
           goto cdg1y;
       cdg1y: // global
           R1 = _sdcGd::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdg1A: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcGd::P64;
           _sdcD1::P64 = P64[_sdcGd::P64 + 16];
           _sdcD2::P64 = P64[_sdcGd::P64 + 24];
           _sdcD3::P64 = P64[_sdcGd::P64 + 32];
           _sdcD4::P64 = P64[_sdcGd::P64 + 40];
           _sdcD5::P64 = P64[_sdcGd::P64 + 48];
           _sdcD6::P64 = P64[_sdcGd::P64 + 56];
           _sdcD7::P64 = P64[_sdcGd::P64 + 64];
           _sdcD8::P64 = P64[_sdcGd::P64 + 72];
           _sdcDb::P64 = P64[_sdcGd::P64 + 80];
           _sdcDc::P64 = P64[_sdcGd::P64 + 88];
           _sdcDd::P64 = P64[_sdcGd::P64 + 96];
           _sdcDf::P64 = P64[_sdcGd::P64 + 104];
           _sdcDg::P64 = P64[_sdcGd::P64 + 112];
           _sdcDi::P64 = P64[_sdcGd::P64 + 120];
           _sdcDj::P64 = P64[_sdcGd::P64 + 128];
           _sdcDk::P64 = P64[_sdcGd::P64 + 136];
           _sdcDl::P64 = P64[_sdcGd::P64 + 144];
           _sdcDm::P64 = P64[_sdcGd::P64 + 152];
           _sdcDq::P64 = P64[_sdcGd::P64 + 160];
           _sdcDt::P64 = P64[_sdcGd::P64 + 168];
           _sdcDw::P64 = P64[_sdcGd::P64 + 176];
           _sdcDz::P64 = P64[_sdcGd::P64 + 184];
           _sdcDF::P64 = P64[_sdcGd::P64 + 192];
           I64[Hp - 192] = sat_sdcGc_info;
           P64[Hp - 176] = _sdcD1::P64;
           P64[Hp - 168] = _sdcD2::P64;
           P64[Hp - 160] = _sdcD3::P64;
           P64[Hp - 152] = _sdcD4::P64;
           P64[Hp - 144] = _sdcD5::P64;
           P64[Hp - 136] = _sdcD6::P64;
           P64[Hp - 128] = _sdcD7::P64;
           P64[Hp - 120] = _sdcD8::P64;
           P64[Hp - 112] = _sdcDb::P64;
           P64[Hp - 104] = _sdcDc::P64;
           P64[Hp - 96] = _sdcDd::P64;
           P64[Hp - 88] = _sdcDf::P64;
           P64[Hp - 80] = _sdcDg::P64;
           P64[Hp - 72] = _sdcDi::P64;
           P64[Hp - 64] = _sdcDj::P64;
           P64[Hp - 56] = _sdcDk::P64;
           P64[Hp - 48] = _sdcDl::P64;
           P64[Hp - 40] = _sdcDm::P64;
           P64[Hp - 32] = _sdcDq::P64;
           P64[Hp - 24] = _sdcDt::P64;
           P64[Hp - 16] = _sdcDw::P64;
           P64[Hp - 8] = _sdcDz::P64;
           P64[Hp] = _sdcDF::P64;
           R3 = Hp - 192;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcGd_info" {
     sat_sdcGd_info:
         const sat_sdcGd_entry;
         const 23;
         const 13528395363123215;
         const SddB2_srt+384;
 },
 sat_sdcGh_entry() //  [R1]
         { []
         }
     {offset
       cdg1C: // global
           if ((Sp + -208) < SpLim) (likely: False) goto cdg1J; else goto cdg1K;
       cdg1J: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdg1K: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 208] = block_cdfMG_info;
           _sdcD1::P64 = P64[R1 + 24];
           _sdcD2::P64 = P64[R1 + 32];
           _sdcD3::P64 = P64[R1 + 40];
           _sdcD4::P64 = P64[R1 + 48];
           _sdcD5::P64 = P64[R1 + 56];
           _sdcD6::P64 = P64[R1 + 64];
           _sdcD7::P64 = P64[R1 + 72];
           _sdcD8::P64 = P64[R1 + 80];
           _sdcDb::P64 = P64[R1 + 88];
           _sdcDc::P64 = P64[R1 + 96];
           _sdcDd::P64 = P64[R1 + 104];
           _sdcDf::P64 = P64[R1 + 112];
           _sdcDg::P64 = P64[R1 + 120];
           _sdcDi::P64 = P64[R1 + 128];
           _sdcDj::P64 = P64[R1 + 136];
           _sdcDk::P64 = P64[R1 + 144];
           _sdcDl::P64 = P64[R1 + 152];
           _sdcDm::P64 = P64[R1 + 160];
           _sdcDq::P64 = P64[R1 + 168];
           _sdcDt::P64 = P64[R1 + 176];
           _sdcDw::P64 = P64[R1 + 184];
           _sdcDz::P64 = P64[R1 + 192];
           _sdcDF::P64 = P64[R1 + 200];
           R1 = P64[R1 + 16];
           P64[Sp - 200] = _sdcD1::P64;
           P64[Sp - 192] = _sdcD2::P64;
           P64[Sp - 184] = _sdcD3::P64;
           P64[Sp - 176] = _sdcD4::P64;
           P64[Sp - 168] = _sdcD5::P64;
           P64[Sp - 160] = _sdcD6::P64;
           P64[Sp - 152] = _sdcD7::P64;
           P64[Sp - 144] = _sdcD8::P64;
           P64[Sp - 136] = _sdcDb::P64;
           P64[Sp - 128] = _sdcDc::P64;
           P64[Sp - 120] = _sdcDd::P64;
           P64[Sp - 112] = _sdcDf::P64;
           P64[Sp - 104] = _sdcDg::P64;
           P64[Sp - 96] = _sdcDi::P64;
           P64[Sp - 88] = _sdcDj::P64;
           P64[Sp - 80] = _sdcDk::P64;
           P64[Sp - 72] = _sdcDl::P64;
           P64[Sp - 64] = _sdcDm::P64;
           P64[Sp - 56] = _sdcDq::P64;
           P64[Sp - 48] = _sdcDt::P64;
           P64[Sp - 40] = _sdcDw::P64;
           P64[Sp - 32] = _sdcDz::P64;
           P64[Sp - 24] = _sdcDF::P64;
           Sp = Sp - 208;
           if (R1 & 7 != 0) goto udg1R; else goto cdfMH;
       udg1R: // global
           call _cdfMG(R1) args: 0, res: 0, upd: 0;
       cdfMH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcGh_info" {
     sat_sdcGh_info:
         const sat_sdcGh_entry;
         const 24;
         const 13528395363123215;
         const SddB2_srt+384;
 },
 _cdfMG() //  [R1]
         { []
         }
     {offset
       cdfMG: // global
           Hp = Hp + 200;
           if (Hp > HpLim) (likely: False) goto cdg1N; else goto cdg1M;
       cdg1N: // global
           HpAlloc = 200;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdg1M: // global
           _sdcDN::I64 = I64[R1 + 7];
           I64[Hp - 192] = sat_sdcGd_info;
           P64[Hp - 176] = P64[Sp + 8];
           P64[Hp - 168] = P64[Sp + 16];
           P64[Hp - 160] = P64[Sp + 24];
           P64[Hp - 152] = P64[Sp + 32];
           P64[Hp - 144] = P64[Sp + 40];
           P64[Hp - 136] = P64[Sp + 48];
           P64[Hp - 128] = P64[Sp + 56];
           P64[Hp - 120] = P64[Sp + 64];
           P64[Hp - 112] = P64[Sp + 72];
           P64[Hp - 104] = P64[Sp + 80];
           P64[Hp - 96] = P64[Sp + 88];
           P64[Hp - 88] = P64[Sp + 96];
           P64[Hp - 80] = P64[Sp + 104];
           P64[Hp - 72] = P64[Sp + 112];
           P64[Hp - 64] = P64[Sp + 120];
           P64[Hp - 56] = P64[Sp + 128];
           P64[Hp - 48] = P64[Sp + 136];
           P64[Hp - 40] = P64[Sp + 144];
           P64[Hp - 32] = P64[Sp + 152];
           P64[Hp - 24] = P64[Sp + 160];
           P64[Hp - 16] = P64[Sp + 168];
           P64[Hp - 8] = P64[Sp + 176];
           P64[Hp] = P64[Sp + 184];
           I64[Sp + 184] = block_cdg1G_info;
           R3 = Hp - 192;
           R2 = _sdcDN::I64;
           Sp = Sp + 184;
           call GHC.Show.$witos_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cdfMG_info" {
     block_cdfMG_info:
         const _cdfMG;
         const 23;
         const 13528395363123230;
         const SddB2_srt+384;
 },
 _cdg1G() //  [R1, R2]
         { []
         }
     {offset
       cdg1G: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdg1Q; else goto cdg1P;
       cdg1Q: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cdg1P: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdg1G_info" {
     block_cdg1G_info:
         const _cdg1G;
         const 0;
         const 30;
 },
 sat_sdcGi_entry() //  [R1]
         { []
         }
     {offset
       cdg1S: // global
           Hp = Hp + 208;
           if (Hp > HpLim) (likely: False) goto cdg1W; else goto cdg1V;
       cdg1W: // global
           HpAlloc = 208;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdg1V: // global
           _sdcD0::P64 = P64[R1 + 16];
           _sdcD1::P64 = P64[R1 + 24];
           _sdcD2::P64 = P64[R1 + 32];
           _sdcD3::P64 = P64[R1 + 40];
           _sdcD4::P64 = P64[R1 + 48];
           _sdcD5::P64 = P64[R1 + 56];
           _sdcD6::P64 = P64[R1 + 64];
           _sdcD7::P64 = P64[R1 + 72];
           _sdcD8::P64 = P64[R1 + 80];
           _sdcDb::P64 = P64[R1 + 88];
           _sdcDc::P64 = P64[R1 + 96];
           _sdcDd::P64 = P64[R1 + 104];
           _sdcDf::P64 = P64[R1 + 112];
           _sdcDg::P64 = P64[R1 + 120];
           _sdcDi::P64 = P64[R1 + 128];
           _sdcDj::P64 = P64[R1 + 136];
           _sdcDk::P64 = P64[R1 + 144];
           _sdcDl::P64 = P64[R1 + 152];
           _sdcDm::P64 = P64[R1 + 160];
           _sdcDq::P64 = P64[R1 + 168];
           _sdcDt::P64 = P64[R1 + 176];
           _sdcDw::P64 = P64[R1 + 184];
           _sdcDz::P64 = P64[R1 + 192];
           _sdcDF::P64 = P64[R1 + 200];
           I64[Hp - 200] = sat_sdcGh_info;
           P64[Hp - 184] = _sdcD0::P64;
           P64[Hp - 176] = _sdcD1::P64;
           P64[Hp - 168] = _sdcD2::P64;
           P64[Hp - 160] = _sdcD3::P64;
           P64[Hp - 152] = _sdcD4::P64;
           P64[Hp - 144] = _sdcD5::P64;
           P64[Hp - 136] = _sdcD6::P64;
           P64[Hp - 128] = _sdcD7::P64;
           P64[Hp - 120] = _sdcD8::P64;
           P64[Hp - 112] = _sdcDb::P64;
           P64[Hp - 104] = _sdcDc::P64;
           P64[Hp - 96] = _sdcDd::P64;
           P64[Hp - 88] = _sdcDf::P64;
           P64[Hp - 80] = _sdcDg::P64;
           P64[Hp - 72] = _sdcDi::P64;
           P64[Hp - 64] = _sdcDj::P64;
           P64[Hp - 56] = _sdcDk::P64;
           P64[Hp - 48] = _sdcDl::P64;
           P64[Hp - 40] = _sdcDm::P64;
           P64[Hp - 32] = _sdcDq::P64;
           P64[Hp - 24] = _sdcDt::P64;
           P64[Hp - 16] = _sdcDw::P64;
           P64[Hp - 8] = _sdcDz::P64;
           P64[Hp] = _sdcDF::P64;
           R3 = Hp - 200;
           R2 = lvl63_rcV68_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcGi_info" {
     sat_sdcGi_info:
         const sat_sdcGi_entry;
         const 24;
         const 13528395363123215;
         const SddB2_srt+384;
 },
 sat_sdcGj_entry() //  [R1]
         { []
         }
     {offset
       cdg1X: // global
           _sdcGj::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdg1Y; else goto cdg1Z;
       cdg1Z: // global
           Hp = Hp + 208;
           if (Hp > HpLim) (likely: False) goto cdg21; else goto cdg20;
       cdg21: // global
           HpAlloc = 208;
           goto cdg1Y;
       cdg1Y: // global
           R1 = _sdcGj::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdg20: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcGj::P64;
           _sdcD0::P64 = P64[_sdcGj::P64 + 16];
           _sdcD1::P64 = P64[_sdcGj::P64 + 24];
           _sdcD2::P64 = P64[_sdcGj::P64 + 32];
           _sdcD3::P64 = P64[_sdcGj::P64 + 40];
           _sdcD4::P64 = P64[_sdcGj::P64 + 48];
           _sdcD5::P64 = P64[_sdcGj::P64 + 56];
           _sdcD6::P64 = P64[_sdcGj::P64 + 64];
           _sdcD7::P64 = P64[_sdcGj::P64 + 72];
           _sdcD8::P64 = P64[_sdcGj::P64 + 80];
           _sdcDb::P64 = P64[_sdcGj::P64 + 88];
           _sdcDc::P64 = P64[_sdcGj::P64 + 96];
           _sdcDd::P64 = P64[_sdcGj::P64 + 104];
           _sdcDf::P64 = P64[_sdcGj::P64 + 112];
           _sdcDg::P64 = P64[_sdcGj::P64 + 120];
           _sdcDi::P64 = P64[_sdcGj::P64 + 128];
           _sdcDj::P64 = P64[_sdcGj::P64 + 136];
           _sdcDk::P64 = P64[_sdcGj::P64 + 144];
           _sdcDl::P64 = P64[_sdcGj::P64 + 152];
           _sdcDm::P64 = P64[_sdcGj::P64 + 160];
           _sdcDq::P64 = P64[_sdcGj::P64 + 168];
           _sdcDt::P64 = P64[_sdcGj::P64 + 176];
           _sdcDw::P64 = P64[_sdcGj::P64 + 184];
           _sdcDz::P64 = P64[_sdcGj::P64 + 192];
           _sdcDF::P64 = P64[_sdcGj::P64 + 200];
           I64[Hp - 200] = sat_sdcGi_info;
           P64[Hp - 184] = _sdcD0::P64;
           P64[Hp - 176] = _sdcD1::P64;
           P64[Hp - 168] = _sdcD2::P64;
           P64[Hp - 160] = _sdcD3::P64;
           P64[Hp - 152] = _sdcD4::P64;
           P64[Hp - 144] = _sdcD5::P64;
           P64[Hp - 136] = _sdcD6::P64;
           P64[Hp - 128] = _sdcD7::P64;
           P64[Hp - 120] = _sdcD8::P64;
           P64[Hp - 112] = _sdcDb::P64;
           P64[Hp - 104] = _sdcDc::P64;
           P64[Hp - 96] = _sdcDd::P64;
           P64[Hp - 88] = _sdcDf::P64;
           P64[Hp - 80] = _sdcDg::P64;
           P64[Hp - 72] = _sdcDi::P64;
           P64[Hp - 64] = _sdcDj::P64;
           P64[Hp - 56] = _sdcDk::P64;
           P64[Hp - 48] = _sdcDl::P64;
           P64[Hp - 40] = _sdcDm::P64;
           P64[Hp - 32] = _sdcDq::P64;
           P64[Hp - 24] = _sdcDt::P64;
           P64[Hp - 16] = _sdcDw::P64;
           P64[Hp - 8] = _sdcDz::P64;
           P64[Hp] = _sdcDF::P64;
           R3 = Hp - 200;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcGj_info" {
     sat_sdcGj_info:
         const sat_sdcGj_entry;
         const 24;
         const 13528395363123215;
         const SddB2_srt+384;
 },
 sat_sdcGn_entry() //  [R1]
         { []
         }
     {offset
       cdg22: // global
           if ((Sp + -216) < SpLim) (likely: False) goto cdg29; else goto cdg2a;
       cdg29: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdg2a: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 216] = block_cdfMp_info;
           _sdcD0::P64 = P64[R1 + 24];
           _sdcD1::P64 = P64[R1 + 32];
           _sdcD2::P64 = P64[R1 + 40];
           _sdcD3::P64 = P64[R1 + 48];
           _sdcD4::P64 = P64[R1 + 56];
           _sdcD5::P64 = P64[R1 + 64];
           _sdcD6::P64 = P64[R1 + 72];
           _sdcD7::P64 = P64[R1 + 80];
           _sdcD8::P64 = P64[R1 + 88];
           _sdcDb::P64 = P64[R1 + 96];
           _sdcDc::P64 = P64[R1 + 104];
           _sdcDd::P64 = P64[R1 + 112];
           _sdcDf::P64 = P64[R1 + 120];
           _sdcDg::P64 = P64[R1 + 128];
           _sdcDi::P64 = P64[R1 + 136];
           _sdcDj::P64 = P64[R1 + 144];
           _sdcDk::P64 = P64[R1 + 152];
           _sdcDl::P64 = P64[R1 + 160];
           _sdcDm::P64 = P64[R1 + 168];
           _sdcDq::P64 = P64[R1 + 176];
           _sdcDt::P64 = P64[R1 + 184];
           _sdcDw::P64 = P64[R1 + 192];
           _sdcDz::P64 = P64[R1 + 200];
           _sdcDF::P64 = P64[R1 + 208];
           R1 = P64[R1 + 16];
           P64[Sp - 208] = _sdcD0::P64;
           P64[Sp - 200] = _sdcD1::P64;
           P64[Sp - 192] = _sdcD2::P64;
           P64[Sp - 184] = _sdcD3::P64;
           P64[Sp - 176] = _sdcD4::P64;
           P64[Sp - 168] = _sdcD5::P64;
           P64[Sp - 160] = _sdcD6::P64;
           P64[Sp - 152] = _sdcD7::P64;
           P64[Sp - 144] = _sdcD8::P64;
           P64[Sp - 136] = _sdcDb::P64;
           P64[Sp - 128] = _sdcDc::P64;
           P64[Sp - 120] = _sdcDd::P64;
           P64[Sp - 112] = _sdcDf::P64;
           P64[Sp - 104] = _sdcDg::P64;
           P64[Sp - 96] = _sdcDi::P64;
           P64[Sp - 88] = _sdcDj::P64;
           P64[Sp - 80] = _sdcDk::P64;
           P64[Sp - 72] = _sdcDl::P64;
           P64[Sp - 64] = _sdcDm::P64;
           P64[Sp - 56] = _sdcDq::P64;
           P64[Sp - 48] = _sdcDt::P64;
           P64[Sp - 40] = _sdcDw::P64;
           P64[Sp - 32] = _sdcDz::P64;
           P64[Sp - 24] = _sdcDF::P64;
           Sp = Sp - 216;
           if (R1 & 7 != 0) goto udg2h; else goto cdfMq;
       udg2h: // global
           call _cdfMp(R1) args: 0, res: 0, upd: 0;
       cdfMq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcGn_info" {
     sat_sdcGn_info:
         const sat_sdcGn_entry;
         const 25;
         const 13528395363123215;
         const SddB2_srt+384;
 },
 _cdfMp() //  [R1]
         { []
         }
     {offset
       cdfMp: // global
           Hp = Hp + 208;
           if (Hp > HpLim) (likely: False) goto cdg2d; else goto cdg2c;
       cdg2d: // global
           HpAlloc = 208;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdg2c: // global
           _sdcDK::I64 = I64[R1 + 7];
           I64[Hp - 200] = sat_sdcGj_info;
           P64[Hp - 184] = P64[Sp + 8];
           P64[Hp - 176] = P64[Sp + 16];
           P64[Hp - 168] = P64[Sp + 24];
           P64[Hp - 160] = P64[Sp + 32];
           P64[Hp - 152] = P64[Sp + 40];
           P64[Hp - 144] = P64[Sp + 48];
           P64[Hp - 136] = P64[Sp + 56];
           P64[Hp - 128] = P64[Sp + 64];
           P64[Hp - 120] = P64[Sp + 72];
           P64[Hp - 112] = P64[Sp + 80];
           P64[Hp - 104] = P64[Sp + 88];
           P64[Hp - 96] = P64[Sp + 96];
           P64[Hp - 88] = P64[Sp + 104];
           P64[Hp - 80] = P64[Sp + 112];
           P64[Hp - 72] = P64[Sp + 120];
           P64[Hp - 64] = P64[Sp + 128];
           P64[Hp - 56] = P64[Sp + 136];
           P64[Hp - 48] = P64[Sp + 144];
           P64[Hp - 40] = P64[Sp + 152];
           P64[Hp - 32] = P64[Sp + 160];
           P64[Hp - 24] = P64[Sp + 168];
           P64[Hp - 16] = P64[Sp + 176];
           P64[Hp - 8] = P64[Sp + 184];
           P64[Hp] = P64[Sp + 192];
           I64[Sp + 192] = block_cdg26_info;
           R3 = Hp - 200;
           R2 = _sdcDK::I64;
           Sp = Sp + 192;
           call GHC.Show.$witos_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cdfMp_info" {
     block_cdfMp_info:
         const _cdfMp;
         const 24;
         const 13528395363123230;
         const SddB2_srt+384;
 },
 _cdg26() //  [R1, R2]
         { []
         }
     {offset
       cdg26: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdg2g; else goto cdg2f;
       cdg2g: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cdg2f: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdg26_info" {
     block_cdg26_info:
         const _cdg26;
         const 0;
         const 30;
 },
 sat_sdcGo_entry() //  [R1]
         { []
         }
     {offset
       cdg2i: // global
           Hp = Hp + 216;
           if (Hp > HpLim) (likely: False) goto cdg2m; else goto cdg2l;
       cdg2m: // global
           HpAlloc = 216;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdg2l: // global
           _sdcCZ::P64 = P64[R1 + 16];
           _sdcD0::P64 = P64[R1 + 24];
           _sdcD1::P64 = P64[R1 + 32];
           _sdcD2::P64 = P64[R1 + 40];
           _sdcD3::P64 = P64[R1 + 48];
           _sdcD4::P64 = P64[R1 + 56];
           _sdcD5::P64 = P64[R1 + 64];
           _sdcD6::P64 = P64[R1 + 72];
           _sdcD7::P64 = P64[R1 + 80];
           _sdcD8::P64 = P64[R1 + 88];
           _sdcDb::P64 = P64[R1 + 96];
           _sdcDc::P64 = P64[R1 + 104];
           _sdcDd::P64 = P64[R1 + 112];
           _sdcDf::P64 = P64[R1 + 120];
           _sdcDg::P64 = P64[R1 + 128];
           _sdcDi::P64 = P64[R1 + 136];
           _sdcDj::P64 = P64[R1 + 144];
           _sdcDk::P64 = P64[R1 + 152];
           _sdcDl::P64 = P64[R1 + 160];
           _sdcDm::P64 = P64[R1 + 168];
           _sdcDq::P64 = P64[R1 + 176];
           _sdcDt::P64 = P64[R1 + 184];
           _sdcDw::P64 = P64[R1 + 192];
           _sdcDz::P64 = P64[R1 + 200];
           _sdcDF::P64 = P64[R1 + 208];
           I64[Hp - 208] = sat_sdcGn_info;
           P64[Hp - 192] = _sdcCZ::P64;
           P64[Hp - 184] = _sdcD0::P64;
           P64[Hp - 176] = _sdcD1::P64;
           P64[Hp - 168] = _sdcD2::P64;
           P64[Hp - 160] = _sdcD3::P64;
           P64[Hp - 152] = _sdcD4::P64;
           P64[Hp - 144] = _sdcD5::P64;
           P64[Hp - 136] = _sdcD6::P64;
           P64[Hp - 128] = _sdcD7::P64;
           P64[Hp - 120] = _sdcD8::P64;
           P64[Hp - 112] = _sdcDb::P64;
           P64[Hp - 104] = _sdcDc::P64;
           P64[Hp - 96] = _sdcDd::P64;
           P64[Hp - 88] = _sdcDf::P64;
           P64[Hp - 80] = _sdcDg::P64;
           P64[Hp - 72] = _sdcDi::P64;
           P64[Hp - 64] = _sdcDj::P64;
           P64[Hp - 56] = _sdcDk::P64;
           P64[Hp - 48] = _sdcDl::P64;
           P64[Hp - 40] = _sdcDm::P64;
           P64[Hp - 32] = _sdcDq::P64;
           P64[Hp - 24] = _sdcDt::P64;
           P64[Hp - 16] = _sdcDw::P64;
           P64[Hp - 8] = _sdcDz::P64;
           P64[Hp] = _sdcDF::P64;
           R3 = Hp - 208;
           R2 = lvl62_rcV67_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcGo_info" {
     sat_sdcGo_info:
         const sat_sdcGo_entry;
         const 25;
         const 13528395363123215;
         const SddB2_srt+384;
 },
 sat_sdcGp_entry() //  [R1]
         { []
         }
     {offset
       cdg2n: // global
           _sdcGp::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdg2o; else goto cdg2p;
       cdg2p: // global
           Hp = Hp + 216;
           if (Hp > HpLim) (likely: False) goto cdg2r; else goto cdg2q;
       cdg2r: // global
           HpAlloc = 216;
           goto cdg2o;
       cdg2o: // global
           R1 = _sdcGp::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdg2q: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcGp::P64;
           _sdcCZ::P64 = P64[_sdcGp::P64 + 16];
           _sdcD0::P64 = P64[_sdcGp::P64 + 24];
           _sdcD1::P64 = P64[_sdcGp::P64 + 32];
           _sdcD2::P64 = P64[_sdcGp::P64 + 40];
           _sdcD3::P64 = P64[_sdcGp::P64 + 48];
           _sdcD4::P64 = P64[_sdcGp::P64 + 56];
           _sdcD5::P64 = P64[_sdcGp::P64 + 64];
           _sdcD6::P64 = P64[_sdcGp::P64 + 72];
           _sdcD7::P64 = P64[_sdcGp::P64 + 80];
           _sdcD8::P64 = P64[_sdcGp::P64 + 88];
           _sdcDb::P64 = P64[_sdcGp::P64 + 96];
           _sdcDc::P64 = P64[_sdcGp::P64 + 104];
           _sdcDd::P64 = P64[_sdcGp::P64 + 112];
           _sdcDf::P64 = P64[_sdcGp::P64 + 120];
           _sdcDg::P64 = P64[_sdcGp::P64 + 128];
           _sdcDi::P64 = P64[_sdcGp::P64 + 136];
           _sdcDj::P64 = P64[_sdcGp::P64 + 144];
           _sdcDk::P64 = P64[_sdcGp::P64 + 152];
           _sdcDl::P64 = P64[_sdcGp::P64 + 160];
           _sdcDm::P64 = P64[_sdcGp::P64 + 168];
           _sdcDq::P64 = P64[_sdcGp::P64 + 176];
           _sdcDt::P64 = P64[_sdcGp::P64 + 184];
           _sdcDw::P64 = P64[_sdcGp::P64 + 192];
           _sdcDz::P64 = P64[_sdcGp::P64 + 200];
           _sdcDF::P64 = P64[_sdcGp::P64 + 208];
           I64[Hp - 208] = sat_sdcGo_info;
           P64[Hp - 192] = _sdcCZ::P64;
           P64[Hp - 184] = _sdcD0::P64;
           P64[Hp - 176] = _sdcD1::P64;
           P64[Hp - 168] = _sdcD2::P64;
           P64[Hp - 160] = _sdcD3::P64;
           P64[Hp - 152] = _sdcD4::P64;
           P64[Hp - 144] = _sdcD5::P64;
           P64[Hp - 136] = _sdcD6::P64;
           P64[Hp - 128] = _sdcD7::P64;
           P64[Hp - 120] = _sdcD8::P64;
           P64[Hp - 112] = _sdcDb::P64;
           P64[Hp - 104] = _sdcDc::P64;
           P64[Hp - 96] = _sdcDd::P64;
           P64[Hp - 88] = _sdcDf::P64;
           P64[Hp - 80] = _sdcDg::P64;
           P64[Hp - 72] = _sdcDi::P64;
           P64[Hp - 64] = _sdcDj::P64;
           P64[Hp - 56] = _sdcDk::P64;
           P64[Hp - 48] = _sdcDl::P64;
           P64[Hp - 40] = _sdcDm::P64;
           P64[Hp - 32] = _sdcDq::P64;
           P64[Hp - 24] = _sdcDt::P64;
           P64[Hp - 16] = _sdcDw::P64;
           P64[Hp - 8] = _sdcDz::P64;
           P64[Hp] = _sdcDF::P64;
           R3 = Hp - 208;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcGp_info" {
     sat_sdcGp_info:
         const sat_sdcGp_entry;
         const 25;
         const 13528395363123215;
         const SddB2_srt+384;
 },
 sat_sdcGt_entry() //  [R1]
         { []
         }
     {offset
       cdg2s: // global
           if ((Sp + -224) < SpLim) (likely: False) goto cdg2z; else goto cdg2A;
       cdg2z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdg2A: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 224] = block_cdfM8_info;
           _sdcCZ::P64 = P64[R1 + 24];
           _sdcD0::P64 = P64[R1 + 32];
           _sdcD1::P64 = P64[R1 + 40];
           _sdcD2::P64 = P64[R1 + 48];
           _sdcD3::P64 = P64[R1 + 56];
           _sdcD4::P64 = P64[R1 + 64];
           _sdcD5::P64 = P64[R1 + 72];
           _sdcD6::P64 = P64[R1 + 80];
           _sdcD7::P64 = P64[R1 + 88];
           _sdcD8::P64 = P64[R1 + 96];
           _sdcDb::P64 = P64[R1 + 104];
           _sdcDc::P64 = P64[R1 + 112];
           _sdcDd::P64 = P64[R1 + 120];
           _sdcDf::P64 = P64[R1 + 128];
           _sdcDg::P64 = P64[R1 + 136];
           _sdcDi::P64 = P64[R1 + 144];
           _sdcDj::P64 = P64[R1 + 152];
           _sdcDk::P64 = P64[R1 + 160];
           _sdcDl::P64 = P64[R1 + 168];
           _sdcDm::P64 = P64[R1 + 176];
           _sdcDq::P64 = P64[R1 + 184];
           _sdcDt::P64 = P64[R1 + 192];
           _sdcDw::P64 = P64[R1 + 200];
           _sdcDz::P64 = P64[R1 + 208];
           _sdcDF::P64 = P64[R1 + 216];
           R1 = P64[R1 + 16];
           P64[Sp - 216] = _sdcCZ::P64;
           P64[Sp - 208] = _sdcD0::P64;
           P64[Sp - 200] = _sdcD1::P64;
           P64[Sp - 192] = _sdcD2::P64;
           P64[Sp - 184] = _sdcD3::P64;
           P64[Sp - 176] = _sdcD4::P64;
           P64[Sp - 168] = _sdcD5::P64;
           P64[Sp - 160] = _sdcD6::P64;
           P64[Sp - 152] = _sdcD7::P64;
           P64[Sp - 144] = _sdcD8::P64;
           P64[Sp - 136] = _sdcDb::P64;
           P64[Sp - 128] = _sdcDc::P64;
           P64[Sp - 120] = _sdcDd::P64;
           P64[Sp - 112] = _sdcDf::P64;
           P64[Sp - 104] = _sdcDg::P64;
           P64[Sp - 96] = _sdcDi::P64;
           P64[Sp - 88] = _sdcDj::P64;
           P64[Sp - 80] = _sdcDk::P64;
           P64[Sp - 72] = _sdcDl::P64;
           P64[Sp - 64] = _sdcDm::P64;
           P64[Sp - 56] = _sdcDq::P64;
           P64[Sp - 48] = _sdcDt::P64;
           P64[Sp - 40] = _sdcDw::P64;
           P64[Sp - 32] = _sdcDz::P64;
           P64[Sp - 24] = _sdcDF::P64;
           Sp = Sp - 224;
           if (R1 & 7 != 0) goto udg2H; else goto cdfM9;
       udg2H: // global
           call _cdfM8(R1) args: 0, res: 0, upd: 0;
       cdfM9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcGt_info" {
     sat_sdcGt_info:
         const sat_sdcGt_entry;
         const 26;
         const 13528395363123215;
         const SddB2_srt+384;
 },
 _cdfM8() //  [R1]
         { []
         }
     {offset
       cdfM8: // global
           Hp = Hp + 216;
           if (Hp > HpLim) (likely: False) goto cdg2D; else goto cdg2C;
       cdg2D: // global
           HpAlloc = 216;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdg2C: // global
           _sdcDH::I64 = I64[R1 + 7];
           I64[Hp - 208] = sat_sdcGp_info;
           P64[Hp - 192] = P64[Sp + 8];
           P64[Hp - 184] = P64[Sp + 16];
           P64[Hp - 176] = P64[Sp + 24];
           P64[Hp - 168] = P64[Sp + 32];
           P64[Hp - 160] = P64[Sp + 40];
           P64[Hp - 152] = P64[Sp + 48];
           P64[Hp - 144] = P64[Sp + 56];
           P64[Hp - 136] = P64[Sp + 64];
           P64[Hp - 128] = P64[Sp + 72];
           P64[Hp - 120] = P64[Sp + 80];
           P64[Hp - 112] = P64[Sp + 88];
           P64[Hp - 104] = P64[Sp + 96];
           P64[Hp - 96] = P64[Sp + 104];
           P64[Hp - 88] = P64[Sp + 112];
           P64[Hp - 80] = P64[Sp + 120];
           P64[Hp - 72] = P64[Sp + 128];
           P64[Hp - 64] = P64[Sp + 136];
           P64[Hp - 56] = P64[Sp + 144];
           P64[Hp - 48] = P64[Sp + 152];
           P64[Hp - 40] = P64[Sp + 160];
           P64[Hp - 32] = P64[Sp + 168];
           P64[Hp - 24] = P64[Sp + 176];
           P64[Hp - 16] = P64[Sp + 184];
           P64[Hp - 8] = P64[Sp + 192];
           P64[Hp] = P64[Sp + 200];
           I64[Sp + 200] = block_cdg2w_info;
           R3 = Hp - 208;
           R2 = _sdcDH::I64;
           Sp = Sp + 200;
           call GHC.Show.$witos_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cdfM8_info" {
     block_cdfM8_info:
         const _cdfM8;
         const 25;
         const 13528395363123230;
         const SddB2_srt+384;
 },
 _cdg2w() //  [R1, R2]
         { []
         }
     {offset
       cdg2w: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdg2G; else goto cdg2F;
       cdg2G: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cdg2F: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdg2w_info" {
     block_cdg2w_info:
         const _cdg2w;
         const 0;
         const 30;
 },
 sat_sdcGu_entry() //  [R1]
         { []
         }
     {offset
       cdg2I: // global
           Hp = Hp + 224;
           if (Hp > HpLim) (likely: False) goto cdg2M; else goto cdg2L;
       cdg2M: // global
           HpAlloc = 224;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdg2L: // global
           _sdcCY::P64 = P64[R1 + 16];
           _sdcCZ::P64 = P64[R1 + 24];
           _sdcD0::P64 = P64[R1 + 32];
           _sdcD1::P64 = P64[R1 + 40];
           _sdcD2::P64 = P64[R1 + 48];
           _sdcD3::P64 = P64[R1 + 56];
           _sdcD4::P64 = P64[R1 + 64];
           _sdcD5::P64 = P64[R1 + 72];
           _sdcD6::P64 = P64[R1 + 80];
           _sdcD7::P64 = P64[R1 + 88];
           _sdcD8::P64 = P64[R1 + 96];
           _sdcDb::P64 = P64[R1 + 104];
           _sdcDc::P64 = P64[R1 + 112];
           _sdcDd::P64 = P64[R1 + 120];
           _sdcDf::P64 = P64[R1 + 128];
           _sdcDg::P64 = P64[R1 + 136];
           _sdcDi::P64 = P64[R1 + 144];
           _sdcDj::P64 = P64[R1 + 152];
           _sdcDk::P64 = P64[R1 + 160];
           _sdcDl::P64 = P64[R1 + 168];
           _sdcDm::P64 = P64[R1 + 176];
           _sdcDq::P64 = P64[R1 + 184];
           _sdcDt::P64 = P64[R1 + 192];
           _sdcDw::P64 = P64[R1 + 200];
           _sdcDz::P64 = P64[R1 + 208];
           _sdcDF::P64 = P64[R1 + 216];
           I64[Hp - 216] = sat_sdcGt_info;
           P64[Hp - 200] = _sdcCY::P64;
           P64[Hp - 192] = _sdcCZ::P64;
           P64[Hp - 184] = _sdcD0::P64;
           P64[Hp - 176] = _sdcD1::P64;
           P64[Hp - 168] = _sdcD2::P64;
           P64[Hp - 160] = _sdcD3::P64;
           P64[Hp - 152] = _sdcD4::P64;
           P64[Hp - 144] = _sdcD5::P64;
           P64[Hp - 136] = _sdcD6::P64;
           P64[Hp - 128] = _sdcD7::P64;
           P64[Hp - 120] = _sdcD8::P64;
           P64[Hp - 112] = _sdcDb::P64;
           P64[Hp - 104] = _sdcDc::P64;
           P64[Hp - 96] = _sdcDd::P64;
           P64[Hp - 88] = _sdcDf::P64;
           P64[Hp - 80] = _sdcDg::P64;
           P64[Hp - 72] = _sdcDi::P64;
           P64[Hp - 64] = _sdcDj::P64;
           P64[Hp - 56] = _sdcDk::P64;
           P64[Hp - 48] = _sdcDl::P64;
           P64[Hp - 40] = _sdcDm::P64;
           P64[Hp - 32] = _sdcDq::P64;
           P64[Hp - 24] = _sdcDt::P64;
           P64[Hp - 16] = _sdcDw::P64;
           P64[Hp - 8] = _sdcDz::P64;
           P64[Hp] = _sdcDF::P64;
           R3 = Hp - 216;
           R2 = lvl61_rcV66_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcGu_info" {
     sat_sdcGu_info:
         const sat_sdcGu_entry;
         const 26;
         const 13528395363123215;
         const SddB2_srt+384;
 },
 sat_sdcGv_entry() //  [R1]
         { []
         }
     {offset
       cdg2N: // global
           Hp = Hp + 224;
           if (Hp > HpLim) (likely: False) goto cdg2R; else goto cdg2Q;
       cdg2R: // global
           HpAlloc = 224;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdg2Q: // global
           _sdcCY::P64 = P64[R1 + 16];
           _sdcCZ::P64 = P64[R1 + 24];
           _sdcD0::P64 = P64[R1 + 32];
           _sdcD1::P64 = P64[R1 + 40];
           _sdcD2::P64 = P64[R1 + 48];
           _sdcD3::P64 = P64[R1 + 56];
           _sdcD4::P64 = P64[R1 + 64];
           _sdcD5::P64 = P64[R1 + 72];
           _sdcD6::P64 = P64[R1 + 80];
           _sdcD7::P64 = P64[R1 + 88];
           _sdcD8::P64 = P64[R1 + 96];
           _sdcDb::P64 = P64[R1 + 104];
           _sdcDc::P64 = P64[R1 + 112];
           _sdcDd::P64 = P64[R1 + 120];
           _sdcDf::P64 = P64[R1 + 128];
           _sdcDg::P64 = P64[R1 + 136];
           _sdcDi::P64 = P64[R1 + 144];
           _sdcDj::P64 = P64[R1 + 152];
           _sdcDk::P64 = P64[R1 + 160];
           _sdcDl::P64 = P64[R1 + 168];
           _sdcDm::P64 = P64[R1 + 176];
           _sdcDq::P64 = P64[R1 + 184];
           _sdcDt::P64 = P64[R1 + 192];
           _sdcDw::P64 = P64[R1 + 200];
           _sdcDz::P64 = P64[R1 + 208];
           _sdcDF::P64 = P64[R1 + 216];
           I64[Hp - 216] = sat_sdcGu_info;
           P64[Hp - 200] = _sdcCY::P64;
           P64[Hp - 192] = _sdcCZ::P64;
           P64[Hp - 184] = _sdcD0::P64;
           P64[Hp - 176] = _sdcD1::P64;
           P64[Hp - 168] = _sdcD2::P64;
           P64[Hp - 160] = _sdcD3::P64;
           P64[Hp - 152] = _sdcD4::P64;
           P64[Hp - 144] = _sdcD5::P64;
           P64[Hp - 136] = _sdcD6::P64;
           P64[Hp - 128] = _sdcD7::P64;
           P64[Hp - 120] = _sdcD8::P64;
           P64[Hp - 112] = _sdcDb::P64;
           P64[Hp - 104] = _sdcDc::P64;
           P64[Hp - 96] = _sdcDd::P64;
           P64[Hp - 88] = _sdcDf::P64;
           P64[Hp - 80] = _sdcDg::P64;
           P64[Hp - 72] = _sdcDi::P64;
           P64[Hp - 64] = _sdcDj::P64;
           P64[Hp - 56] = _sdcDk::P64;
           P64[Hp - 48] = _sdcDl::P64;
           P64[Hp - 40] = _sdcDm::P64;
           P64[Hp - 32] = _sdcDq::P64;
           P64[Hp - 24] = _sdcDt::P64;
           P64[Hp - 16] = _sdcDw::P64;
           P64[Hp - 8] = _sdcDz::P64;
           P64[Hp] = _sdcDF::P64;
           R3 = Hp - 216;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcGv_info" {
     sat_sdcGv_info:
         const sat_sdcGv_entry;
         const 26;
         const 13528395363123215;
         const SddB2_srt+384;
 },
 section ""relreadonly" . udg4i_srtd" {
     udg4i_srtd:
         const SddB2_srt+384;
         const 34;
         const 8593084417;
 },
 sat_sdcGw_entry() //  [R1]
         { []
         }
     {offset
       cdg2S: // global
           _sdcGw::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdg2T; else goto cdg2U;
       cdg2U: // global
           Hp = Hp + 224;
           if (Hp > HpLim) (likely: False) goto cdg2W; else goto cdg2V;
       cdg2W: // global
           HpAlloc = 224;
           goto cdg2T;
       cdg2T: // global
           R1 = _sdcGw::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdg2V: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcGw::P64;
           _sdcCX::P64 = P64[_sdcGw::P64 + 16];
           _sdcCY::P64 = P64[_sdcGw::P64 + 24];
           _sdcCZ::P64 = P64[_sdcGw::P64 + 32];
           _sdcD0::P64 = P64[_sdcGw::P64 + 40];
           _sdcD1::P64 = P64[_sdcGw::P64 + 48];
           _sdcD2::P64 = P64[_sdcGw::P64 + 56];
           _sdcD3::P64 = P64[_sdcGw::P64 + 64];
           _sdcD4::P64 = P64[_sdcGw::P64 + 72];
           _sdcD5::P64 = P64[_sdcGw::P64 + 80];
           _sdcD6::P64 = P64[_sdcGw::P64 + 88];
           _sdcD7::P64 = P64[_sdcGw::P64 + 96];
           _sdcD8::P64 = P64[_sdcGw::P64 + 104];
           _sdcDb::P64 = P64[_sdcGw::P64 + 112];
           _sdcDc::P64 = P64[_sdcGw::P64 + 120];
           _sdcDd::P64 = P64[_sdcGw::P64 + 128];
           _sdcDf::P64 = P64[_sdcGw::P64 + 136];
           _sdcDg::P64 = P64[_sdcGw::P64 + 144];
           _sdcDi::P64 = P64[_sdcGw::P64 + 152];
           _sdcDj::P64 = P64[_sdcGw::P64 + 160];
           _sdcDk::P64 = P64[_sdcGw::P64 + 168];
           _sdcDl::P64 = P64[_sdcGw::P64 + 176];
           _sdcDm::P64 = P64[_sdcGw::P64 + 184];
           _sdcDq::P64 = P64[_sdcGw::P64 + 192];
           _sdcDt::P64 = P64[_sdcGw::P64 + 200];
           _sdcDw::P64 = P64[_sdcGw::P64 + 208];
           _sdcDz::P64 = P64[_sdcGw::P64 + 216];
           _sdcDF::P64 = P64[_sdcGw::P64 + 224];
           I64[Hp - 216] = sat_sdcGv_info;
           P64[Hp - 200] = _sdcCY::P64;
           P64[Hp - 192] = _sdcCZ::P64;
           P64[Hp - 184] = _sdcD0::P64;
           P64[Hp - 176] = _sdcD1::P64;
           P64[Hp - 168] = _sdcD2::P64;
           P64[Hp - 160] = _sdcD3::P64;
           P64[Hp - 152] = _sdcD4::P64;
           P64[Hp - 144] = _sdcD5::P64;
           P64[Hp - 136] = _sdcD6::P64;
           P64[Hp - 128] = _sdcD7::P64;
           P64[Hp - 120] = _sdcD8::P64;
           P64[Hp - 112] = _sdcDb::P64;
           P64[Hp - 104] = _sdcDc::P64;
           P64[Hp - 96] = _sdcDd::P64;
           P64[Hp - 88] = _sdcDf::P64;
           P64[Hp - 80] = _sdcDg::P64;
           P64[Hp - 72] = _sdcDi::P64;
           P64[Hp - 64] = _sdcDj::P64;
           P64[Hp - 56] = _sdcDk::P64;
           P64[Hp - 48] = _sdcDl::P64;
           P64[Hp - 40] = _sdcDm::P64;
           P64[Hp - 32] = _sdcDq::P64;
           P64[Hp - 24] = _sdcDt::P64;
           P64[Hp - 16] = _sdcDw::P64;
           P64[Hp - 8] = _sdcDz::P64;
           P64[Hp] = _sdcDF::P64;
           R3 = Hp - 216;
           R2 = _sdcCX::P64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$cshowsPrec5_entry(R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcGw_info" {
     sat_sdcGw_info:
         const sat_sdcGw_entry;
         const 27;
         const 18446744069414584335;
         const udg4i_srtd;
 },
 section ""relreadonly" . udg4j_srtd" {
     udg4j_srtd:
         const SddB2_srt+384;
         const 34;
         const 8593084417;
 },
 sat_sdcGx_entry() //  [R1]
         { []
         }
     {offset
       cdg2X: // global
           Hp = Hp + 232;
           if (Hp > HpLim) (likely: False) goto cdg31; else goto cdg30;
       cdg31: // global
           HpAlloc = 232;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdg30: // global
           _sdcCX::P64 = P64[R1 + 16];
           _sdcCY::P64 = P64[R1 + 24];
           _sdcCZ::P64 = P64[R1 + 32];
           _sdcD0::P64 = P64[R1 + 40];
           _sdcD1::P64 = P64[R1 + 48];
           _sdcD2::P64 = P64[R1 + 56];
           _sdcD3::P64 = P64[R1 + 64];
           _sdcD4::P64 = P64[R1 + 72];
           _sdcD5::P64 = P64[R1 + 80];
           _sdcD6::P64 = P64[R1 + 88];
           _sdcD7::P64 = P64[R1 + 96];
           _sdcD8::P64 = P64[R1 + 104];
           _sdcDb::P64 = P64[R1 + 112];
           _sdcDc::P64 = P64[R1 + 120];
           _sdcDd::P64 = P64[R1 + 128];
           _sdcDf::P64 = P64[R1 + 136];
           _sdcDg::P64 = P64[R1 + 144];
           _sdcDi::P64 = P64[R1 + 152];
           _sdcDj::P64 = P64[R1 + 160];
           _sdcDk::P64 = P64[R1 + 168];
           _sdcDl::P64 = P64[R1 + 176];
           _sdcDm::P64 = P64[R1 + 184];
           _sdcDq::P64 = P64[R1 + 192];
           _sdcDt::P64 = P64[R1 + 200];
           _sdcDw::P64 = P64[R1 + 208];
           _sdcDz::P64 = P64[R1 + 216];
           _sdcDF::P64 = P64[R1 + 224];
           I64[Hp - 224] = sat_sdcGw_info;
           P64[Hp - 208] = _sdcCX::P64;
           P64[Hp - 200] = _sdcCY::P64;
           P64[Hp - 192] = _sdcCZ::P64;
           P64[Hp - 184] = _sdcD0::P64;
           P64[Hp - 176] = _sdcD1::P64;
           P64[Hp - 168] = _sdcD2::P64;
           P64[Hp - 160] = _sdcD3::P64;
           P64[Hp - 152] = _sdcD4::P64;
           P64[Hp - 144] = _sdcD5::P64;
           P64[Hp - 136] = _sdcD6::P64;
           P64[Hp - 128] = _sdcD7::P64;
           P64[Hp - 120] = _sdcD8::P64;
           P64[Hp - 112] = _sdcDb::P64;
           P64[Hp - 104] = _sdcDc::P64;
           P64[Hp - 96] = _sdcDd::P64;
           P64[Hp - 88] = _sdcDf::P64;
           P64[Hp - 80] = _sdcDg::P64;
           P64[Hp - 72] = _sdcDi::P64;
           P64[Hp - 64] = _sdcDj::P64;
           P64[Hp - 56] = _sdcDk::P64;
           P64[Hp - 48] = _sdcDl::P64;
           P64[Hp - 40] = _sdcDm::P64;
           P64[Hp - 32] = _sdcDq::P64;
           P64[Hp - 24] = _sdcDt::P64;
           P64[Hp - 16] = _sdcDw::P64;
           P64[Hp - 8] = _sdcDz::P64;
           P64[Hp] = _sdcDF::P64;
           R3 = Hp - 224;
           R2 = lvl60_rcV65_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcGx_info" {
     sat_sdcGx_info:
         const sat_sdcGx_entry;
         const 27;
         const 18446744069414584335;
         const udg4j_srtd;
 },
 section ""relreadonly" . udg4k_srtd" {
     udg4k_srtd:
         const SddB2_srt+384;
         const 34;
         const 8593084417;
 },
 sat_sdcGy_entry() //  [R1]
         { []
         }
     {offset
       cdg32: // global
           _sdcGy::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdg33; else goto cdg34;
       cdg34: // global
           Hp = Hp + 232;
           if (Hp > HpLim) (likely: False) goto cdg36; else goto cdg35;
       cdg36: // global
           HpAlloc = 232;
           goto cdg33;
       cdg33: // global
           R1 = _sdcGy::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdg35: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcGy::P64;
           _sdcCX::P64 = P64[_sdcGy::P64 + 16];
           _sdcCY::P64 = P64[_sdcGy::P64 + 24];
           _sdcCZ::P64 = P64[_sdcGy::P64 + 32];
           _sdcD0::P64 = P64[_sdcGy::P64 + 40];
           _sdcD1::P64 = P64[_sdcGy::P64 + 48];
           _sdcD2::P64 = P64[_sdcGy::P64 + 56];
           _sdcD3::P64 = P64[_sdcGy::P64 + 64];
           _sdcD4::P64 = P64[_sdcGy::P64 + 72];
           _sdcD5::P64 = P64[_sdcGy::P64 + 80];
           _sdcD6::P64 = P64[_sdcGy::P64 + 88];
           _sdcD7::P64 = P64[_sdcGy::P64 + 96];
           _sdcD8::P64 = P64[_sdcGy::P64 + 104];
           _sdcDb::P64 = P64[_sdcGy::P64 + 112];
           _sdcDc::P64 = P64[_sdcGy::P64 + 120];
           _sdcDd::P64 = P64[_sdcGy::P64 + 128];
           _sdcDf::P64 = P64[_sdcGy::P64 + 136];
           _sdcDg::P64 = P64[_sdcGy::P64 + 144];
           _sdcDi::P64 = P64[_sdcGy::P64 + 152];
           _sdcDj::P64 = P64[_sdcGy::P64 + 160];
           _sdcDk::P64 = P64[_sdcGy::P64 + 168];
           _sdcDl::P64 = P64[_sdcGy::P64 + 176];
           _sdcDm::P64 = P64[_sdcGy::P64 + 184];
           _sdcDq::P64 = P64[_sdcGy::P64 + 192];
           _sdcDt::P64 = P64[_sdcGy::P64 + 200];
           _sdcDw::P64 = P64[_sdcGy::P64 + 208];
           _sdcDz::P64 = P64[_sdcGy::P64 + 216];
           _sdcDF::P64 = P64[_sdcGy::P64 + 224];
           I64[Hp - 224] = sat_sdcGx_info;
           P64[Hp - 208] = _sdcCX::P64;
           P64[Hp - 200] = _sdcCY::P64;
           P64[Hp - 192] = _sdcCZ::P64;
           P64[Hp - 184] = _sdcD0::P64;
           P64[Hp - 176] = _sdcD1::P64;
           P64[Hp - 168] = _sdcD2::P64;
           P64[Hp - 160] = _sdcD3::P64;
           P64[Hp - 152] = _sdcD4::P64;
           P64[Hp - 144] = _sdcD5::P64;
           P64[Hp - 136] = _sdcD6::P64;
           P64[Hp - 128] = _sdcD7::P64;
           P64[Hp - 120] = _sdcD8::P64;
           P64[Hp - 112] = _sdcDb::P64;
           P64[Hp - 104] = _sdcDc::P64;
           P64[Hp - 96] = _sdcDd::P64;
           P64[Hp - 88] = _sdcDf::P64;
           P64[Hp - 80] = _sdcDg::P64;
           P64[Hp - 72] = _sdcDi::P64;
           P64[Hp - 64] = _sdcDj::P64;
           P64[Hp - 56] = _sdcDk::P64;
           P64[Hp - 48] = _sdcDl::P64;
           P64[Hp - 40] = _sdcDm::P64;
           P64[Hp - 32] = _sdcDq::P64;
           P64[Hp - 24] = _sdcDt::P64;
           P64[Hp - 16] = _sdcDw::P64;
           P64[Hp - 8] = _sdcDz::P64;
           P64[Hp] = _sdcDF::P64;
           R3 = Hp - 224;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcGy_info" {
     sat_sdcGy_info:
         const sat_sdcGy_entry;
         const 27;
         const 18446744069414584335;
         const udg4k_srtd;
 },
 section ""relreadonly" . udg4l_srtd" {
     udg4l_srtd:
         const SddB2_srt+384;
         const 34;
         const 8593084417;
 },
 sat_sdcGz_entry() //  [R1]
         { []
         }
     {offset
       cdg37: // global
           _sdcGz::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdg38; else goto cdg39;
       cdg39: // global
           Hp = Hp + 232;
           if (Hp > HpLim) (likely: False) goto cdg3b; else goto cdg3a;
       cdg3b: // global
           HpAlloc = 232;
           goto cdg38;
       cdg38: // global
           R1 = _sdcGz::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdg3a: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcGz::P64;
           _sdcCX::P64 = P64[_sdcGz::P64 + 16];
           _sdcCY::P64 = P64[_sdcGz::P64 + 24];
           _sdcCZ::P64 = P64[_sdcGz::P64 + 32];
           _sdcD0::P64 = P64[_sdcGz::P64 + 40];
           _sdcD1::P64 = P64[_sdcGz::P64 + 48];
           _sdcD2::P64 = P64[_sdcGz::P64 + 56];
           _sdcD3::P64 = P64[_sdcGz::P64 + 64];
           _sdcD4::P64 = P64[_sdcGz::P64 + 72];
           _sdcD5::P64 = P64[_sdcGz::P64 + 80];
           _sdcD6::P64 = P64[_sdcGz::P64 + 88];
           _sdcD7::P64 = P64[_sdcGz::P64 + 96];
           _sdcD8::P64 = P64[_sdcGz::P64 + 104];
           _sdcDb::P64 = P64[_sdcGz::P64 + 112];
           _sdcDc::P64 = P64[_sdcGz::P64 + 120];
           _sdcDd::P64 = P64[_sdcGz::P64 + 128];
           _sdcDf::P64 = P64[_sdcGz::P64 + 136];
           _sdcDg::P64 = P64[_sdcGz::P64 + 144];
           _sdcDi::P64 = P64[_sdcGz::P64 + 152];
           _sdcDj::P64 = P64[_sdcGz::P64 + 160];
           _sdcDk::P64 = P64[_sdcGz::P64 + 168];
           _sdcDl::P64 = P64[_sdcGz::P64 + 176];
           _sdcDm::P64 = P64[_sdcGz::P64 + 184];
           _sdcDp::P64 = P64[_sdcGz::P64 + 192];
           _sdcDq::P64 = P64[_sdcGz::P64 + 200];
           _sdcDt::P64 = P64[_sdcGz::P64 + 208];
           _sdcDw::P64 = P64[_sdcGz::P64 + 216];
           _sdcDz::P64 = P64[_sdcGz::P64 + 224];
           _sdcDF::P64 = P64[_sdcGz::P64 + 232];
           I64[Hp - 224] = sat_sdcGy_info;
           P64[Hp - 208] = _sdcCX::P64;
           P64[Hp - 200] = _sdcCY::P64;
           P64[Hp - 192] = _sdcCZ::P64;
           P64[Hp - 184] = _sdcD0::P64;
           P64[Hp - 176] = _sdcD1::P64;
           P64[Hp - 168] = _sdcD2::P64;
           P64[Hp - 160] = _sdcD3::P64;
           P64[Hp - 152] = _sdcD4::P64;
           P64[Hp - 144] = _sdcD5::P64;
           P64[Hp - 136] = _sdcD6::P64;
           P64[Hp - 128] = _sdcD7::P64;
           P64[Hp - 120] = _sdcD8::P64;
           P64[Hp - 112] = _sdcDb::P64;
           P64[Hp - 104] = _sdcDc::P64;
           P64[Hp - 96] = _sdcDd::P64;
           P64[Hp - 88] = _sdcDf::P64;
           P64[Hp - 80] = _sdcDg::P64;
           P64[Hp - 72] = _sdcDi::P64;
           P64[Hp - 64] = _sdcDj::P64;
           P64[Hp - 56] = _sdcDk::P64;
           P64[Hp - 48] = _sdcDl::P64;
           P64[Hp - 40] = _sdcDm::P64;
           P64[Hp - 32] = _sdcDq::P64;
           P64[Hp - 24] = _sdcDt::P64;
           P64[Hp - 16] = _sdcDw::P64;
           P64[Hp - 8] = _sdcDz::P64;
           P64[Hp] = _sdcDF::P64;
           R2 = Hp - 224;
           R1 = _sdcDp::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcGz_info" {
     sat_sdcGz_info:
         const sat_sdcGz_entry;
         const 28;
         const 18446744069414584335;
         const udg4l_srtd;
 },
 section ""relreadonly" . udg4m_srtd" {
     udg4m_srtd:
         const SddB2_srt+384;
         const 34;
         const 8593084417;
 },
 g1_sdcDE_entry() //  [R1, R2]
         { []
         }
     {offset
       cdg3c: // global
           Hp = Hp + 240;
           if (Hp > HpLim) (likely: False) goto cdg3g; else goto cdg3f;
       cdg3g: // global
           HpAlloc = 240;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdg3f: // global
           _sdcCX::P64 = P64[R1 + 7];
           _sdcCY::P64 = P64[R1 + 15];
           _sdcCZ::P64 = P64[R1 + 23];
           _sdcD0::P64 = P64[R1 + 31];
           _sdcD1::P64 = P64[R1 + 39];
           _sdcD2::P64 = P64[R1 + 47];
           _sdcD3::P64 = P64[R1 + 55];
           _sdcD4::P64 = P64[R1 + 63];
           _sdcD5::P64 = P64[R1 + 71];
           _sdcD6::P64 = P64[R1 + 79];
           _sdcD7::P64 = P64[R1 + 87];
           _sdcD8::P64 = P64[R1 + 95];
           _sdcDb::P64 = P64[R1 + 103];
           _sdcDc::P64 = P64[R1 + 111];
           _sdcDd::P64 = P64[R1 + 119];
           _sdcDf::P64 = P64[R1 + 127];
           _sdcDg::P64 = P64[R1 + 135];
           _sdcDi::P64 = P64[R1 + 143];
           _sdcDj::P64 = P64[R1 + 151];
           _sdcDk::P64 = P64[R1 + 159];
           _sdcDl::P64 = P64[R1 + 167];
           _sdcDm::P64 = P64[R1 + 175];
           _sdcDp::P64 = P64[R1 + 183];
           _sdcDq::P64 = P64[R1 + 191];
           _sdcDt::P64 = P64[R1 + 199];
           _sdcDw::P64 = P64[R1 + 207];
           _sdcDz::P64 = P64[R1 + 215];
           I64[Hp - 232] = sat_sdcGz_info;
           P64[Hp - 216] = _sdcCX::P64;
           P64[Hp - 208] = _sdcCY::P64;
           P64[Hp - 200] = _sdcCZ::P64;
           P64[Hp - 192] = _sdcD0::P64;
           P64[Hp - 184] = _sdcD1::P64;
           P64[Hp - 176] = _sdcD2::P64;
           P64[Hp - 168] = _sdcD3::P64;
           P64[Hp - 160] = _sdcD4::P64;
           P64[Hp - 152] = _sdcD5::P64;
           P64[Hp - 144] = _sdcD6::P64;
           P64[Hp - 136] = _sdcD7::P64;
           P64[Hp - 128] = _sdcD8::P64;
           P64[Hp - 120] = _sdcDb::P64;
           P64[Hp - 112] = _sdcDc::P64;
           P64[Hp - 104] = _sdcDd::P64;
           P64[Hp - 96] = _sdcDf::P64;
           P64[Hp - 88] = _sdcDg::P64;
           P64[Hp - 80] = _sdcDi::P64;
           P64[Hp - 72] = _sdcDj::P64;
           P64[Hp - 64] = _sdcDk::P64;
           P64[Hp - 56] = _sdcDl::P64;
           P64[Hp - 48] = _sdcDm::P64;
           P64[Hp - 40] = _sdcDp::P64;
           P64[Hp - 32] = _sdcDq::P64;
           P64[Hp - 24] = _sdcDt::P64;
           P64[Hp - 16] = _sdcDw::P64;
           P64[Hp - 8] = _sdcDz::P64;
           P64[Hp] = R2;
           R3 = Hp - 232;
           R2 = lvl59_rcV64_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . g1_sdcDE_info" {
     g1_sdcDE_info:
         const g1_sdcDE_entry;
         const 27;
         const 18446744069414584328;
         const 4294967301;
         const udg4m_srtd;
 },
 section ""relreadonly" . udg4n_srtd" {
     udg4n_srtd:
         const SddB2_srt+384;
         const 34;
         const 8593084417;
 },
 sat_sdcGC_entry() //  [R1]
         { []
         }
     {offset
       cdg3t: // global
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           call g1_sdcDE_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcGC_info" {
     sat_sdcGC_info:
         const sat_sdcGC_entry;
         const 2;
         const 18446744069414584338;
         const udg4n_srtd;
 },
 section ""relreadonly" . udg4o_srtd" {
     udg4o_srtd:
         const SddB2_srt+384;
         const 44;
         const 8804686106625;
 },
 sat_sdcGD_entry() //  [R1, R2]
         { []
         }
     {offset
       cdg3w: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdg3A; else goto cdg3z;
       cdg3A: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdg3z: // global
           _sdcDE::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_sdcGC_info;
           P64[Hp - 8] = _sdcDE::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = f7_rcV63_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcGD_info" {
     sat_sdcGD_info:
         const sat_sdcGD_entry;
         const 1;
         const 18446744069414584329;
         const 4294967301;
         const udg4o_srtd;
 },
 section ""relreadonly" . udg4p_srtd" {
     udg4p_srtd:
         const SddB2_srt+384;
         const 34;
         const 8593084417;
 },
 sat_sdcGG_entry() //  [R1]
         { []
         }
     {offset
       cdg3Q: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdg3U; else goto cdg3T;
       cdg3U: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdg3T: // global
           _sdcDE::P64 = P64[R1 + 16];
           _sdcGE::P64 = P64[R1 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _sdcGE::P64;
           R2 = Hp - 14;
           R1 = _sdcDE::P64;
           call g1_sdcDE_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcGG_info" {
     sat_sdcGG_info:
         const sat_sdcGG_entry;
         const 2;
         const 18446744069414584338;
         const udg4p_srtd;
 },
 section ""relreadonly" . udg4q_srtd" {
     udg4q_srtd:
         const SddB2_srt+384;
         const 44;
         const 8804686106625;
 },
 sat_sdcGH_entry() //  [R1]
         { []
         }
     {offset
       cdg3V: // global
           _sdcGH::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdg3W; else goto cdg3X;
       cdg3X: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdg3Z; else goto cdg3Y;
       cdg3Z: // global
           HpAlloc = 32;
           goto cdg3W;
       cdg3W: // global
           R1 = _sdcGH::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdg3Y: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcGH::P64;
           _sdcDE::P64 = P64[_sdcGH::P64 + 16];
           _sdcGE::P64 = P64[_sdcGH::P64 + 24];
           I64[Hp - 24] = sat_sdcGG_info;
           P64[Hp - 8] = _sdcDE::P64;
           P64[Hp] = _sdcGE::P64;
           R3 = Hp - 24;
           R2 = f7_rcV63_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcGH_info" {
     sat_sdcGH_info:
         const sat_sdcGH_entry;
         const 2;
         const 18446744069414584338;
         const udg4q_srtd;
 },
 section ""relreadonly" . udg4r_srtd" {
     udg4r_srtd:
         const SddB2_srt+384;
         const 44;
         const 8804686106625;
 },
 sat_sdcGI_entry() //  [R1, R2]
         { []
         }
     {offset
       cdg41: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdg45; else goto cdg44;
       cdg45: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdg44: // global
           _sdcDE::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_sdcGH_info;
           P64[Hp - 32] = _sdcDE::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcGI_info" {
     sat_sdcGI_info:
         const sat_sdcGI_entry;
         const 1;
         const 18446744069414584329;
         const 4294967301;
         const udg4r_srtd;
 },
 section ""relreadonly" . udg4s_srtd" {
     udg4s_srtd:
         const SddB2_srt+384;
         const 45;
         const 34093453545473;
 },
 GHC.RTS.Flags.$fShowGCFlags_$cshowsPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       cdg46: // global
           if ((Sp + -224) < SpLim) (likely: False) goto cdg47; else goto cdg48;
       cdg47: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fShowGCFlags_$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdg48: // global
           I64[Sp - 16] = block_cdfKi_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udg4h; else goto cdfKj;
       udg4h: // global
           call _cdfKi(R1) args: 0, res: 0, upd: 0;
       cdfKj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowGCFlags_$cshowsPrec_info" {
     GHC.RTS.Flags.$fShowGCFlags_$cshowsPrec_info:
         const GHC.RTS.Flags.$fShowGCFlags_$cshowsPrec_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const udg4s_srtd;
 },
 section ""relreadonly" . udg4t_srtd" {
     udg4t_srtd:
         const SddB2_srt+384;
         const 44;
         const 16501267501057;
 },
 _cdfKi() //  [R1]
         { []
         }
     {offset
       cdfKi: // global
           I64[Sp - 208] = block_cdfKn_info;
           _sdcCW::P64 = P64[R1 + 7];
           _sdcCX::P64 = P64[R1 + 15];
           _sdcCY::P64 = P64[R1 + 23];
           _sdcCZ::P64 = P64[R1 + 31];
           _sdcD0::P64 = P64[R1 + 39];
           _sdcD1::P64 = P64[R1 + 47];
           _sdcD2::P64 = P64[R1 + 55];
           _sdcD3::P64 = P64[R1 + 63];
           _sdcD4::P64 = P64[R1 + 71];
           _sdcD5::P64 = P64[R1 + 79];
           _sdcD6::P64 = P64[R1 + 87];
           _sdcD7::P64 = P64[R1 + 95];
           _sdcD8::P64 = P64[R1 + 103];
           _sdcD9::P64 = P64[R1 + 111];
           _sdcDa::P64 = P64[R1 + 119];
           _sdcDb::P64 = P64[R1 + 127];
           _sdcDc::P64 = P64[R1 + 135];
           _sdcDd::P64 = P64[R1 + 143];
           _sdcDe::P64 = P64[R1 + 151];
           _sdcDf::P64 = P64[R1 + 159];
           _sdcDg::P64 = P64[R1 + 167];
           _sdcDh::P64 = P64[R1 + 175];
           _sdcDi::P64 = P64[R1 + 183];
           _sdcDj::P64 = P64[R1 + 191];
           _sdcDk::P64 = P64[R1 + 199];
           _sdcDl::P64 = P64[R1 + 207];
           _sdcDm::P64 = P64[R1 + 215];
           R1 = P64[Sp + 8];
           P64[Sp - 200] = _sdcCY::P64;
           P64[Sp - 192] = _sdcCZ::P64;
           P64[Sp - 184] = _sdcD0::P64;
           P64[Sp - 176] = _sdcD1::P64;
           P64[Sp - 168] = _sdcD2::P64;
           P64[Sp - 160] = _sdcD3::P64;
           P64[Sp - 152] = _sdcD4::P64;
           P64[Sp - 144] = _sdcD5::P64;
           P64[Sp - 136] = _sdcD6::P64;
           P64[Sp - 128] = _sdcD7::P64;
           P64[Sp - 120] = _sdcD8::P64;
           P64[Sp - 112] = _sdcD9::P64;
           P64[Sp - 104] = _sdcDa::P64;
           P64[Sp - 96] = _sdcDb::P64;
           P64[Sp - 88] = _sdcDc::P64;
           P64[Sp - 80] = _sdcDd::P64;
           P64[Sp - 72] = _sdcDe::P64;
           P64[Sp - 64] = _sdcDf::P64;
           P64[Sp - 56] = _sdcDg::P64;
           P64[Sp - 48] = _sdcDh::P64;
           P64[Sp - 40] = _sdcDi::P64;
           P64[Sp - 32] = _sdcDj::P64;
           P64[Sp - 24] = _sdcDk::P64;
           P64[Sp - 16] = _sdcDl::P64;
           P64[Sp - 8] = _sdcDm::P64;
           P64[Sp] = _sdcCX::P64;
           P64[Sp + 8] = _sdcCW::P64;
           Sp = Sp - 208;
           if (R1 & 7 != 0) goto udg4g; else goto cdfKo;
       udg4g: // global
           call _cdfKn(R1) args: 0, res: 0, upd: 0;
       cdfKo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdfKi_info" {
     block_cdfKi_info:
         const _cdfKi;
         const 1;
         const 18446744069414584350;
         const udg4t_srtd;
 },
 section ""relreadonly" . udg4u_srtd" {
     udg4u_srtd:
         const SddB2_srt+384;
         const 44;
         const 16501267501057;
 },
 _cdfKn() //  [R1]
         { []
         }
     {offset
       cdfKn: // global
           Hp = Hp + 360;
           if (Hp > HpLim) (likely: False) goto cdg4c; else goto cdg4b;
       cdg4c: // global
           HpAlloc = 360;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdg4b: // global
           _sdcDo::I64 = I64[R1 + 7];
           I64[Hp - 352] = f8_sdcDp_info;
           P64[Hp - 336] = P64[Sp + 216];
           I64[Hp - 328] = f9_sdcDq_info;
           P64[Hp - 312] = P64[Sp + 96];
           I64[Hp - 304] = f10_sdcDt_info;
           P64[Hp - 288] = P64[Sp + 104];
           I64[Hp - 280] = f11_sdcDw_info;
           P64[Hp - 264] = P64[Sp + 136];
           I64[Hp - 256] = w1_sdcDz_info;
           P64[Hp - 240] = P64[Sp + 160];
           I64[Hp - 232] = g1_sdcDE_info;
           P64[Hp - 224] = P64[Sp + 208];
           P64[Hp - 216] = P64[Sp + 8];
           P64[Hp - 208] = P64[Sp + 16];
           P64[Hp - 200] = P64[Sp + 24];
           P64[Hp - 192] = P64[Sp + 32];
           P64[Hp - 184] = P64[Sp + 40];
           P64[Hp - 176] = P64[Sp + 48];
           P64[Hp - 168] = P64[Sp + 56];
           P64[Hp - 160] = P64[Sp + 64];
           P64[Hp - 152] = P64[Sp + 72];
           P64[Hp - 144] = P64[Sp + 80];
           P64[Hp - 136] = P64[Sp + 88];
           P64[Hp - 128] = P64[Sp + 112];
           P64[Hp - 120] = P64[Sp + 120];
           P64[Hp - 112] = P64[Sp + 128];
           P64[Hp - 104] = P64[Sp + 144];
           P64[Hp - 96] = P64[Sp + 152];
           P64[Hp - 88] = P64[Sp + 168];
           P64[Hp - 80] = P64[Sp + 176];
           P64[Hp - 72] = P64[Sp + 184];
           P64[Hp - 64] = P64[Sp + 192];
           P64[Hp - 56] = P64[Sp + 200];
           P64[Hp - 48] = Hp - 352;
           P64[Hp - 40] = Hp - 328;
           P64[Hp - 32] = Hp - 304;
           P64[Hp - 24] = Hp - 280;
           P64[Hp - 16] = Hp - 256;
           _cdfLB::P64 = Hp - 231;
           if (%MO_S_Lt_W64(_sdcDo::I64, 11)) goto cdg4e; else goto cdg4f;
       cdg4e: // global
           I64[Hp - 8] = sat_sdcGD_info;
           P64[Hp] = _cdfLB::P64;
           R1 = Hp - 7;
           Sp = Sp + 224;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdg4f: // global
           I64[Hp - 8] = sat_sdcGI_info;
           P64[Hp] = _cdfLB::P64;
           R1 = Hp - 7;
           Sp = Sp + 224;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdfKn_info" {
     block_cdfKn_info:
         const _cdfKn;
         const 27;
         const 18446744069414584350;
         const udg4u_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.554087589 UTC

[section ""data" . GHC.RTS.Flags.$fShowGCFlags_$cshow_closure" {
     GHC.RTS.Flags.$fShowGCFlags_$cshow_closure:
         const GHC.RTS.Flags.$fShowGCFlags_$cshow_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowGCFlags_$cshow_entry() //  [R2]
         { []
         }
     {offset
       cdglc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdgld; else goto cdgle;
       cdgld: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.$fShowGCFlags_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdgle: // global
           R3 = R2;
           R2 = GHC.RTS.Flags.$fEnumDoCostCentres10_closure+1;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = GHC.Types.[]_closure+1;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fShowGCFlags_$cshowsPrec_entry(R3,
                                                              R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowGCFlags_$cshow_info" {
     GHC.RTS.Flags.$fShowGCFlags_$cshow_info:
         const GHC.RTS.Flags.$fShowGCFlags_$cshow_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SddB2_srt+736;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.557926435 UTC

[section ""data" . GHC.RTS.Flags.$fShowGCFlags1_closure" {
     GHC.RTS.Flags.$fShowGCFlags1_closure:
         const GHC.RTS.Flags.$fShowGCFlags1_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowGCFlags1_entry() //  [R2]
         { []
         }
     {offset
       cdglr: // global
           R3 = R2;
           R2 = GHC.RTS.Flags.$fEnumDoCostCentres10_closure+1;
           call GHC.RTS.Flags.$fShowGCFlags_$cshowsPrec_entry(R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowGCFlags1_info" {
     GHC.RTS.Flags.$fShowGCFlags1_info:
         const GHC.RTS.Flags.$fShowGCFlags1_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SddB2_srt+736;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.561882618 UTC

[section ""data" . GHC.RTS.Flags.$fShowGCFlags_$cshowList_closure" {
     GHC.RTS.Flags.$fShowGCFlags_$cshowList_closure:
         const GHC.RTS.Flags.$fShowGCFlags_$cshowList_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowGCFlags_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       cdglC: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.RTS.Flags.$fShowGCFlags1_closure+1;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowGCFlags_$cshowList_info" {
     GHC.RTS.Flags.$fShowGCFlags_$cshowList_info:
         const GHC.RTS.Flags.$fShowGCFlags_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const SddB2_srt+752;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.565171772 UTC

[section ""data" . GHC.RTS.Flags.$fShowGCFlags_closure" {
     GHC.RTS.Flags.$fShowGCFlags_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.RTS.Flags.$fShowGCFlags_$cshowsPrec_closure+2;
         const GHC.RTS.Flags.$fShowGCFlags_$cshow_closure+1;
         const GHC.RTS.Flags.$fShowGCFlags_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.566985063 UTC

[section ""cstring" . lvl86_rcV6v_bytes" {
     lvl86_rcV6v_bytes:
         I8[] [82,84,83,70,108,97,103,115,32,123]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.568700427 UTC

[section ""cstring" . lvl87_rcV6w_bytes" {
     lvl87_rcV6w_bytes:
         I8[] [103,99,70,108,97,103,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.571238075 UTC

[section ""cstring" . lvl88_rcV6x_bytes" {
     lvl88_rcV6x_bytes:
         I8[] [99,111,110,99,117,114,114,101,110,116,70,108,97,103,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.572785737 UTC

[section ""cstring" . lvl89_rcV6y_bytes" {
     lvl89_rcV6y_bytes:
         I8[] [109,105,115,99,70,108,97,103,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.5743491 UTC

[section ""cstring" . lvl90_rcV6z_bytes" {
     lvl90_rcV6z_bytes:
         I8[] [100,101,98,117,103,70,108,97,103,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.576011272 UTC

[section ""cstring" . lvl91_rcV6A_bytes" {
     lvl91_rcV6A_bytes:
         I8[] [99,111,115,116,67,101,110,116,114,101,70,108,97,103,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.577705862 UTC

[section ""cstring" . lvl92_rcV6B_bytes" {
     lvl92_rcV6B_bytes:
         I8[] [112,114,111,102,105,108,105,110,103,70,108,97,103,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.579393988 UTC

[section ""cstring" . lvl93_rcV6C_bytes" {
     lvl93_rcV6C_bytes:
         I8[] [116,114,97,99,101,70,108,97,103,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.581021436 UTC

[section ""cstring" . lvl94_rcV6D_bytes" {
     lvl94_rcV6D_bytes:
         I8[] [116,105,99,107,121,70,108,97,103,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.58291251 UTC

[section ""cstring" . lvl95_rcV6E_bytes" {
     lvl95_rcV6E_bytes:
         I8[] [112,97,114,70,108,97,103,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.60937466 UTC

[section ""data" . GHC.RTS.Flags.$w$cshowsPrec7_closure" {
     GHC.RTS.Flags.$w$cshowsPrec7_closure:
         const GHC.RTS.Flags.$w$cshowsPrec7_info;
         const 0;
 },
 GHC.RTS.Flags.$w$cshowsPrec7_slow() //  [R1]
         { []
         }
     {offset
       cdglV: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.RTS.Flags.$w$cshowsPrec7_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2,
                                                   R1) args: 48, res: 0, upd: 8;
     }
 },
 f8_sdcGW_entry() //  [R1]
         { []
         }
     {offset
       cdgm3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdgm4; else goto cdgm5;
       cdgm4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdgm5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.RTS.Flags.$fEnumDoCostCentres10_closure+1;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fShowGCFlags_$cshowsPrec_entry(R3,
                                                              R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f8_sdcGW_info" {
     f8_sdcGW_info:
         const f8_sdcGW_entry;
         const 1;
         const 4294967312;
         const SddB2_srt+736;
 },
 f9_sdcGX_entry() //  [R1]
         { []
         }
     {offset
       cdgmd: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdgme; else goto cdgmf;
       cdgme: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdgmf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cdgma_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udgmj; else goto cdgmb;
       udgmj: // global
           call _cdgma(R1) args: 0, res: 0, upd: 0;
       cdgmb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . f9_sdcGX_info" {
     f9_sdcGX_info:
         const f9_sdcGX_entry;
         const 1;
         const 4294967312;
         const SddB2_srt+616;
 },
 _cdgma() //  [R1]
         { []
         }
     {offset
       cdgma: // global
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = 0;
           Sp = Sp + 8;
           call GHC.RTS.Flags.$w$cshowsPrec2_entry(R4,
                                                   R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdgma_info" {
     block_cdgma_info:
         const _cdgma;
         const 0;
         const 4294967326;
         const SddB2_srt+616;
 },
 f10_sdcH1_entry() //  [R1]
         { []
         }
     {offset
       cdgmr: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdgms; else goto cdgmt;
       cdgms: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdgmt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cdgmo_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udgmx; else goto cdgmp;
       udgmx: // global
           call _cdgmo(R1) args: 0, res: 0, upd: 0;
       cdgmp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . f10_sdcH1_info" {
     f10_sdcH1_info:
         const f10_sdcH1_entry;
         const 1;
         const 4294967312;
         const SddB2_srt+584;
 },
 _cdgmo() //  [R1]
         { []
         }
     {offset
       cdgmo: // global
           R6 = P64[R1 + 31];
           R5 = P64[R1 + 23];
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = 0;
           P64[Sp - 16] = P64[R1 + 39];
           P64[Sp - 8] = P64[R1 + 47];
           P64[Sp] = P64[R1 + 55];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$cshowsPrec6_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdgmo_info" {
     block_cdgmo_info:
         const _cdgmo;
         const 0;
         const 4294967326;
         const SddB2_srt+584;
 },
 f11_sdcHa_entry() //  [R1]
         { []
         }
     {offset
       cdgmC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdgmD; else goto cdgmE;
       cdgmD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdgmE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.RTS.Flags.$fEnumDoCostCentres10_closure+1;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fShowProfFlags_$cshowsPrec_entry(R3,
                                                                R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f11_sdcHa_info" {
     f11_sdcHa_info:
         const f11_sdcHa_entry;
         const 1;
         const 4294967312;
         const SddB2_srt+760;
 },
 f12_sdcHb_entry() //  [R1]
         { []
         }
     {offset
       cdgmM: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdgmN; else goto cdgmO;
       cdgmN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdgmO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cdgmJ_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udgmS; else goto cdgmK;
       udgmS: // global
           call _cdgmJ(R1) args: 0, res: 0, upd: 0;
       cdgmK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . f12_sdcHb_info" {
     f12_sdcHb_info:
         const f12_sdcHb_entry;
         const 1;
         const 4294967312;
         const SddB2_srt+768;
 },
 _cdgmJ() //  [R1]
         { []
         }
     {offset
       cdgmJ: // global
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = 0;
           Sp = Sp + 8;
           call GHC.RTS.Flags.$w$cshowsPrec8_entry(R4,
                                                   R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdgmJ_info" {
     block_cdgmJ_info:
         const _cdgmJ;
         const 0;
         const 4294967326;
         const SddB2_srt+768;
 },
 sat_sdcHt_entry() //  [R1]
         { []
         }
     {offset
       cdgoS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdgoT; else goto cdgoU;
       cdgoT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdgoU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.RTS.Flags.$fShowCCFlags2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcHt_info" {
     sat_sdcHt_info:
         const sat_sdcHt_entry;
         const 1;
         const 16;
 },
 sat_sdcHu_entry() //  [R1]
         { []
         }
     {offset
       cdgoV: // global
           _sdcHu::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdgoW; else goto cdgoX;
       cdgoX: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdgoZ; else goto cdgoY;
       cdgoZ: // global
           HpAlloc = 24;
           goto cdgoW;
       cdgoW: // global
           R1 = _sdcHu::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdgoY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcHu::P64;
           _sdcGV::P64 = P64[_sdcHu::P64 + 16];
           _sdcHg::P64 = P64[_sdcHu::P64 + 24];
           I64[Hp - 16] = sat_sdcHt_info;
           P64[Hp] = _sdcHg::P64;
           R4 = Hp - 16;
           R3 = _sdcGV::P64;
           R2 = GHC.RTS.Flags.$fEnumDoCostCentres10_closure+1;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fShowParFlags_$cshowsPrec_entry(R4,
                                                               R3,
                                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcHu_info" {
     sat_sdcHu_info:
         const sat_sdcHu_entry;
         const 2;
         const 4294967314;
         const SddB2_srt+776;
 },
 sat_sdcHv_entry() //  [R1]
         { []
         }
     {offset
       cdgp0: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdgp4; else goto cdgp3;
       cdgp4: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdgp3: // global
           _sdcGV::P64 = P64[R1 + 16];
           _sdcHg::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_sdcHu_info;
           P64[Hp - 8] = _sdcGV::P64;
           P64[Hp] = _sdcHg::P64;
           R3 = Hp - 24;
           R2 = lvl95_rcV6E_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcHv_info" {
     sat_sdcHv_info:
         const sat_sdcHv_entry;
         const 2;
         const 4294967314;
         const SddB2_srt+776;
 },
 section ""relreadonly" . udgrH_srtd" {
     udgrH_srtd:
         const SddB2_srt+480;
         const 38;
         const 137438953473;
 },
 sat_sdcHw_entry() //  [R1]
         { []
         }
     {offset
       cdgp5: // global
           _sdcHw::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdgp6; else goto cdgp7;
       cdgp7: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdgp9; else goto cdgp8;
       cdgp9: // global
           HpAlloc = 32;
           goto cdgp6;
       cdgp6: // global
           R1 = _sdcHw::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdgp8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcHw::P64;
           _sdcGV::P64 = P64[_sdcHw::P64 + 16];
           _sdcHg::P64 = P64[_sdcHw::P64 + 24];
           I64[Hp - 24] = sat_sdcHv_info;
           P64[Hp - 8] = _sdcGV::P64;
           P64[Hp] = _sdcHg::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcHw_info" {
     sat_sdcHw_info:
         const sat_sdcHw_entry;
         const 2;
         const 18446744069414584338;
         const udgrH_srtd;
 },
 section ""relreadonly" . udgrI_srtd" {
     udgrI_srtd:
         const SddB2_srt+480;
         const 38;
         const 137438953473;
 },
 sat_sdcHx_entry() //  [R1]
         { []
         }
     {offset
       cdgpa: // global
           _sdcHx::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdgpb; else goto cdgpc;
       cdgpc: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdgpe; else goto cdgpd;
       cdgpe: // global
           HpAlloc = 32;
           goto cdgpb;
       cdgpb: // global
           R1 = _sdcHx::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdgpd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcHx::P64;
           _sdcGV::P64 = P64[_sdcHx::P64 + 16];
           _sdcHb::P64 = P64[_sdcHx::P64 + 24];
           _sdcHg::P64 = P64[_sdcHx::P64 + 32];
           I64[Hp - 24] = sat_sdcHw_info;
           P64[Hp - 8] = _sdcGV::P64;
           P64[Hp] = _sdcHg::P64;
           R2 = Hp - 24;
           R1 = _sdcHb::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcHx_info" {
     sat_sdcHx_info:
         const sat_sdcHx_entry;
         const 3;
         const 18446744069414584335;
         const udgrI_srtd;
 },
 section ""relreadonly" . udgrJ_srtd" {
     udgrJ_srtd:
         const SddB2_srt+480;
         const 38;
         const 137438953473;
 },
 sat_sdcHy_entry() //  [R1]
         { []
         }
     {offset
       cdgpf: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdgpj; else goto cdgpi;
       cdgpj: // global
           HpAlloc = 40;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdgpi: // global
           _sdcGV::P64 = P64[R1 + 16];
           _sdcHb::P64 = P64[R1 + 24];
           _sdcHg::P64 = P64[R1 + 32];
           I64[Hp - 32] = sat_sdcHx_info;
           P64[Hp - 16] = _sdcGV::P64;
           P64[Hp - 8] = _sdcHb::P64;
           P64[Hp] = _sdcHg::P64;
           R3 = Hp - 32;
           R2 = lvl94_rcV6D_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcHy_info" {
     sat_sdcHy_info:
         const sat_sdcHy_entry;
         const 3;
         const 18446744069414584335;
         const udgrJ_srtd;
 },
 section ""relreadonly" . udgrK_srtd" {
     udgrK_srtd:
         const SddB2_srt+480;
         const 38;
         const 137438953473;
 },
 sat_sdcHz_entry() //  [R1]
         { []
         }
     {offset
       cdgpk: // global
           _sdcHz::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdgpl; else goto cdgpm;
       cdgpm: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdgpo; else goto cdgpn;
       cdgpo: // global
           HpAlloc = 40;
           goto cdgpl;
       cdgpl: // global
           R1 = _sdcHz::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdgpn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcHz::P64;
           _sdcGV::P64 = P64[_sdcHz::P64 + 16];
           _sdcHb::P64 = P64[_sdcHz::P64 + 24];
           _sdcHg::P64 = P64[_sdcHz::P64 + 32];
           I64[Hp - 32] = sat_sdcHy_info;
           P64[Hp - 16] = _sdcGV::P64;
           P64[Hp - 8] = _sdcHb::P64;
           P64[Hp] = _sdcHg::P64;
           R3 = Hp - 32;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcHz_info" {
     sat_sdcHz_info:
         const sat_sdcHz_entry;
         const 3;
         const 18446744069414584335;
         const udgrK_srtd;
 },
 section ""relreadonly" . udgrL_srtd" {
     udgrL_srtd:
         const SddB2_srt+272;
         const 64;
         const 9223372036921884673;
 },
 sat_sdcHA_entry() //  [R1]
         { []
         }
     {offset
       cdgpp: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cdgpq; else goto cdgpr;
       cdgpq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdgpr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_cdgol_info;
           _sdcGV::P64 = P64[R1 + 24];
           _sdcHb::P64 = P64[R1 + 32];
           _sdcHg::P64 = P64[R1 + 40];
           R1 = P64[R1 + 16];
           P64[Sp - 40] = _sdcGV::P64;
           P64[Sp - 32] = _sdcHb::P64;
           P64[Sp - 24] = _sdcHg::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto udgpv; else goto cdgom;
       udgpv: // global
           call _cdgol(R1) args: 0, res: 0, upd: 0;
       cdgom: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcHA_info" {
     sat_sdcHA_info:
         const sat_sdcHA_entry;
         const 4;
         const 18446744069414584335;
         const udgrL_srtd;
 },
 section ""relreadonly" . udgrM_srtd" {
     udgrM_srtd:
         const SddB2_srt+272;
         const 64;
         const 9223372036921884673;
 },
 _cdgol() //  [R1]
         { []
         }
     {offset
       cdgol: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdgpu; else goto cdgpt;
       cdgpu: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdgpt: // global
           _sdcHm::P64 = P64[R1 + 7];
           _sdcHn::P64 = P64[R1 + 15];
           _sdcHo::P64 = P64[R1 + 23];
           _sdcHp::P64 = P64[R1 + 31];
           _sdcHq::P64 = P64[R1 + 39];
           _sdcHr::P64 = P64[R1 + 47];
           _sdcHs::P64 = P64[R1 + 55];
           I64[Hp - 32] = sat_sdcHz_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 24];
           R6 = _sdcHp::P64;
           R5 = _sdcHo::P64;
           R4 = _sdcHn::P64;
           R3 = _sdcHm::P64;
           R2 = 0;
           P64[Sp] = _sdcHq::P64;
           P64[Sp + 8] = _sdcHr::P64;
           P64[Sp + 16] = _sdcHs::P64;
           P64[Sp + 24] = Hp - 32;
           call GHC.RTS.Flags.$w$cshowsPrec9_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdgol_info" {
     block_cdgol_info:
         const _cdgol;
         const 3;
         const 18446744069414584350;
         const udgrM_srtd;
 },
 section ""relreadonly" . udgrN_srtd" {
     udgrN_srtd:
         const SddB2_srt+272;
         const 64;
         const 9223372036921884673;
 },
 sat_sdcHB_entry() //  [R1]
         { []
         }
     {offset
       cdgpw: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdgpA; else goto cdgpz;
       cdgpA: // global
           HpAlloc = 48;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdgpz: // global
           _sdcGT::P64 = P64[R1 + 16];
           _sdcGV::P64 = P64[R1 + 24];
           _sdcHb::P64 = P64[R1 + 32];
           _sdcHg::P64 = P64[R1 + 40];
           I64[Hp - 40] = sat_sdcHA_info;
           P64[Hp - 24] = _sdcGT::P64;
           P64[Hp - 16] = _sdcGV::P64;
           P64[Hp - 8] = _sdcHb::P64;
           P64[Hp] = _sdcHg::P64;
           R3 = Hp - 40;
           R2 = lvl93_rcV6C_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcHB_info" {
     sat_sdcHB_info:
         const sat_sdcHB_entry;
         const 4;
         const 18446744069414584335;
         const udgrN_srtd;
 },
 section ""relreadonly" . udgrO_srtd" {
     udgrO_srtd:
         const SddB2_srt+272;
         const 64;
         const 9223372036921884673;
 },
 sat_sdcHC_entry() //  [R1]
         { []
         }
     {offset
       cdgpB: // global
           _sdcHC::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdgpC; else goto cdgpD;
       cdgpD: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdgpF; else goto cdgpE;
       cdgpF: // global
           HpAlloc = 48;
           goto cdgpC;
       cdgpC: // global
           R1 = _sdcHC::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdgpE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcHC::P64;
           _sdcGT::P64 = P64[_sdcHC::P64 + 16];
           _sdcGV::P64 = P64[_sdcHC::P64 + 24];
           _sdcHb::P64 = P64[_sdcHC::P64 + 32];
           _sdcHg::P64 = P64[_sdcHC::P64 + 40];
           I64[Hp - 40] = sat_sdcHB_info;
           P64[Hp - 24] = _sdcGT::P64;
           P64[Hp - 16] = _sdcGV::P64;
           P64[Hp - 8] = _sdcHb::P64;
           P64[Hp] = _sdcHg::P64;
           R3 = Hp - 40;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcHC_info" {
     sat_sdcHC_info:
         const sat_sdcHC_entry;
         const 4;
         const 18446744069414584335;
         const udgrO_srtd;
 },
 section ""relreadonly" . udgrP_srtd" {
     udgrP_srtd:
         const SddB2_srt+272;
         const 64;
         const 9223372036921884673;
 },
 sat_sdcHD_entry() //  [R1]
         { []
         }
     {offset
       cdgpG: // global
           _sdcHD::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdgpH; else goto cdgpI;
       cdgpI: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdgpK; else goto cdgpJ;
       cdgpK: // global
           HpAlloc = 48;
           goto cdgpH;
       cdgpH: // global
           R1 = _sdcHD::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdgpJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcHD::P64;
           _sdcGT::P64 = P64[_sdcHD::P64 + 16];
           _sdcGV::P64 = P64[_sdcHD::P64 + 24];
           _sdcHa::P64 = P64[_sdcHD::P64 + 32];
           _sdcHb::P64 = P64[_sdcHD::P64 + 40];
           _sdcHg::P64 = P64[_sdcHD::P64 + 48];
           I64[Hp - 40] = sat_sdcHC_info;
           P64[Hp - 24] = _sdcGT::P64;
           P64[Hp - 16] = _sdcGV::P64;
           P64[Hp - 8] = _sdcHb::P64;
           P64[Hp] = _sdcHg::P64;
           R2 = Hp - 40;
           R1 = _sdcHa::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcHD_info" {
     sat_sdcHD_info:
         const sat_sdcHD_entry;
         const 5;
         const 18446744069414584335;
         const udgrP_srtd;
 },
 section ""relreadonly" . udgrQ_srtd" {
     udgrQ_srtd:
         const SddB2_srt+272;
         const 64;
         const 9223372036921884673;
 },
 sat_sdcHE_entry() //  [R1]
         { []
         }
     {offset
       cdgpL: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdgpP; else goto cdgpO;
       cdgpP: // global
           HpAlloc = 56;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdgpO: // global
           _sdcGT::P64 = P64[R1 + 16];
           _sdcGV::P64 = P64[R1 + 24];
           _sdcHa::P64 = P64[R1 + 32];
           _sdcHb::P64 = P64[R1 + 40];
           _sdcHg::P64 = P64[R1 + 48];
           I64[Hp - 48] = sat_sdcHD_info;
           P64[Hp - 32] = _sdcGT::P64;
           P64[Hp - 24] = _sdcGV::P64;
           P64[Hp - 16] = _sdcHa::P64;
           P64[Hp - 8] = _sdcHb::P64;
           P64[Hp] = _sdcHg::P64;
           R3 = Hp - 48;
           R2 = lvl92_rcV6B_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcHE_info" {
     sat_sdcHE_info:
         const sat_sdcHE_entry;
         const 5;
         const 18446744069414584335;
         const udgrQ_srtd;
 },
 section ""relreadonly" . udgrR_srtd" {
     udgrR_srtd:
         const SddB2_srt+272;
         const 64;
         const 9223372036921884673;
 },
 sat_sdcHF_entry() //  [R1]
         { []
         }
     {offset
       cdgpQ: // global
           _sdcHF::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdgpR; else goto cdgpS;
       cdgpS: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdgpU; else goto cdgpT;
       cdgpU: // global
           HpAlloc = 56;
           goto cdgpR;
       cdgpR: // global
           R1 = _sdcHF::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdgpT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcHF::P64;
           _sdcGT::P64 = P64[_sdcHF::P64 + 16];
           _sdcGV::P64 = P64[_sdcHF::P64 + 24];
           _sdcHa::P64 = P64[_sdcHF::P64 + 32];
           _sdcHb::P64 = P64[_sdcHF::P64 + 40];
           _sdcHg::P64 = P64[_sdcHF::P64 + 48];
           I64[Hp - 48] = sat_sdcHE_info;
           P64[Hp - 32] = _sdcGT::P64;
           P64[Hp - 24] = _sdcGV::P64;
           P64[Hp - 16] = _sdcHa::P64;
           P64[Hp - 8] = _sdcHb::P64;
           P64[Hp] = _sdcHg::P64;
           R3 = Hp - 48;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcHF_info" {
     sat_sdcHF_info:
         const sat_sdcHF_entry;
         const 5;
         const 18446744069414584335;
         const udgrR_srtd;
 },
 section ""relreadonly" . udgrS_srtd" {
     udgrS_srtd:
         const SddB2_srt+272;
         const 64;
         const 9223372037056102401;
 },
 sat_sdcHG_entry() //  [R1]
         { []
         }
     {offset
       cdgpV: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cdgpW; else goto cdgpX;
       cdgpW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdgpX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 64] = block_cdgnS_info;
           _sdcGT::P64 = P64[R1 + 24];
           _sdcGV::P64 = P64[R1 + 32];
           _sdcHa::P64 = P64[R1 + 40];
           _sdcHb::P64 = P64[R1 + 48];
           _sdcHg::P64 = P64[R1 + 56];
           R1 = P64[R1 + 16];
           P64[Sp - 56] = _sdcGT::P64;
           P64[Sp - 48] = _sdcGV::P64;
           P64[Sp - 40] = _sdcHa::P64;
           P64[Sp - 32] = _sdcHb::P64;
           P64[Sp - 24] = _sdcHg::P64;
           Sp = Sp - 64;
           if (R1 & 7 != 0) goto udgq1; else goto cdgnT;
       udgq1: // global
           call _cdgnS(R1) args: 0, res: 0, upd: 0;
       cdgnT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcHG_info" {
     sat_sdcHG_info:
         const sat_sdcHG_entry;
         const 6;
         const 18446744069414584335;
         const udgrS_srtd;
 },
 section ""relreadonly" . udgrT_srtd" {
     udgrT_srtd:
         const SddB2_srt+272;
         const 64;
         const 9223372037056102401;
 },
 _cdgnS() //  [R1]
         { []
         }
     {offset
       cdgnS: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdgq0; else goto cdgpZ;
       cdgq0: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdgpZ: // global
           _sdcHi::P64 = P64[R1 + 7];
           _sdcHj::P64 = P64[R1 + 15];
           _sdcHk::P64 = P64[R1 + 23];
           I64[Hp - 48] = sat_sdcHF_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = P64[Sp + 40];
           R6 = Hp - 48;
           R5 = _sdcHk::P64;
           R4 = _sdcHj::P64;
           R3 = _sdcHi::P64;
           R2 = 0;
           Sp = Sp + 48;
           call GHC.RTS.Flags.$w$cshowsPrec_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdgnS_info" {
     block_cdgnS_info:
         const _cdgnS;
         const 5;
         const 18446744069414584350;
         const udgrT_srtd;
 },
 section ""relreadonly" . udgrU_srtd" {
     udgrU_srtd:
         const SddB2_srt+272;
         const 64;
         const 9223372037056102401;
 },
 sat_sdcHH_entry() //  [R1]
         { []
         }
     {offset
       cdgq2: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdgq6; else goto cdgq5;
       cdgq6: // global
           HpAlloc = 64;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdgq5: // global
           _sdcGR::P64 = P64[R1 + 16];
           _sdcGT::P64 = P64[R1 + 24];
           _sdcGV::P64 = P64[R1 + 32];
           _sdcHa::P64 = P64[R1 + 40];
           _sdcHb::P64 = P64[R1 + 48];
           _sdcHg::P64 = P64[R1 + 56];
           I64[Hp - 56] = sat_sdcHG_info;
           P64[Hp - 40] = _sdcGR::P64;
           P64[Hp - 32] = _sdcGT::P64;
           P64[Hp - 24] = _sdcGV::P64;
           P64[Hp - 16] = _sdcHa::P64;
           P64[Hp - 8] = _sdcHb::P64;
           P64[Hp] = _sdcHg::P64;
           R3 = Hp - 56;
           R2 = lvl91_rcV6A_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcHH_info" {
     sat_sdcHH_info:
         const sat_sdcHH_entry;
         const 6;
         const 18446744069414584335;
         const udgrU_srtd;
 },
 section ""relreadonly" . udgrV_srtd" {
     udgrV_srtd:
         const SddB2_srt+272;
         const 64;
         const 9223372037056102401;
 },
 sat_sdcHI_entry() //  [R1]
         { []
         }
     {offset
       cdgq7: // global
           _sdcHI::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdgq8; else goto cdgq9;
       cdgq9: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdgqb; else goto cdgqa;
       cdgqb: // global
           HpAlloc = 64;
           goto cdgq8;
       cdgq8: // global
           R1 = _sdcHI::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdgqa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcHI::P64;
           _sdcGR::P64 = P64[_sdcHI::P64 + 16];
           _sdcGT::P64 = P64[_sdcHI::P64 + 24];
           _sdcGV::P64 = P64[_sdcHI::P64 + 32];
           _sdcHa::P64 = P64[_sdcHI::P64 + 40];
           _sdcHb::P64 = P64[_sdcHI::P64 + 48];
           _sdcHg::P64 = P64[_sdcHI::P64 + 56];
           I64[Hp - 56] = sat_sdcHH_info;
           P64[Hp - 40] = _sdcGR::P64;
           P64[Hp - 32] = _sdcGT::P64;
           P64[Hp - 24] = _sdcGV::P64;
           P64[Hp - 16] = _sdcHa::P64;
           P64[Hp - 8] = _sdcHb::P64;
           P64[Hp] = _sdcHg::P64;
           R3 = Hp - 56;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcHI_info" {
     sat_sdcHI_info:
         const sat_sdcHI_entry;
         const 6;
         const 18446744069414584335;
         const udgrV_srtd;
 },
 section ""relreadonly" . udgrW_srtd" {
     udgrW_srtd:
         const SddB2_srt+272;
         const 64;
         const 9223372174495055873;
 },
 sat_sdcHJ_entry() //  [R1]
         { []
         }
     {offset
       cdgqc: // global
           _sdcHJ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdgqd; else goto cdgqe;
       cdgqe: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdgqg; else goto cdgqf;
       cdgqg: // global
           HpAlloc = 64;
           goto cdgqd;
       cdgqd: // global
           R1 = _sdcHJ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdgqf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcHJ::P64;
           _sdcGQ::P64 = P64[_sdcHJ::P64 + 16];
           _sdcGR::P64 = P64[_sdcHJ::P64 + 24];
           _sdcGT::P64 = P64[_sdcHJ::P64 + 32];
           _sdcGV::P64 = P64[_sdcHJ::P64 + 40];
           _sdcHa::P64 = P64[_sdcHJ::P64 + 48];
           _sdcHb::P64 = P64[_sdcHJ::P64 + 56];
           _sdcHg::P64 = P64[_sdcHJ::P64 + 64];
           I64[Hp - 56] = sat_sdcHI_info;
           P64[Hp - 40] = _sdcGR::P64;
           P64[Hp - 32] = _sdcGT::P64;
           P64[Hp - 24] = _sdcGV::P64;
           P64[Hp - 16] = _sdcHa::P64;
           P64[Hp - 8] = _sdcHb::P64;
           P64[Hp] = _sdcHg::P64;
           R4 = Hp - 56;
           R3 = _sdcGQ::P64;
           R2 = GHC.RTS.Flags.$fEnumDoCostCentres10_closure+1;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fShowDebugFlags_$cshowsPrec_entry(R4,
                                                                 R3,
                                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcHJ_info" {
     sat_sdcHJ_info:
         const sat_sdcHJ_entry;
         const 7;
         const 18446744069414584335;
         const udgrW_srtd;
 },
 section ""relreadonly" . udgrX_srtd" {
     udgrX_srtd:
         const SddB2_srt+272;
         const 64;
         const 9223372174495055873;
 },
 sat_sdcHK_entry() //  [R1]
         { []
         }
     {offset
       cdgqh: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdgql; else goto cdgqk;
       cdgql: // global
           HpAlloc = 72;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdgqk: // global
           _sdcGQ::P64 = P64[R1 + 16];
           _sdcGR::P64 = P64[R1 + 24];
           _sdcGT::P64 = P64[R1 + 32];
           _sdcGV::P64 = P64[R1 + 40];
           _sdcHa::P64 = P64[R1 + 48];
           _sdcHb::P64 = P64[R1 + 56];
           _sdcHg::P64 = P64[R1 + 64];
           I64[Hp - 64] = sat_sdcHJ_info;
           P64[Hp - 48] = _sdcGQ::P64;
           P64[Hp - 40] = _sdcGR::P64;
           P64[Hp - 32] = _sdcGT::P64;
           P64[Hp - 24] = _sdcGV::P64;
           P64[Hp - 16] = _sdcHa::P64;
           P64[Hp - 8] = _sdcHb::P64;
           P64[Hp] = _sdcHg::P64;
           R3 = Hp - 64;
           R2 = lvl90_rcV6z_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcHK_info" {
     sat_sdcHK_info:
         const sat_sdcHK_entry;
         const 7;
         const 18446744069414584335;
         const udgrX_srtd;
 },
 section ""relreadonly" . udgrY_srtd" {
     udgrY_srtd:
         const SddB2_srt+272;
         const 64;
         const 9223372174495055873;
 },
 sat_sdcHL_entry() //  [R1]
         { []
         }
     {offset
       cdgqm: // global
           _sdcHL::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdgqn; else goto cdgqo;
       cdgqo: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdgqq; else goto cdgqp;
       cdgqq: // global
           HpAlloc = 72;
           goto cdgqn;
       cdgqn: // global
           R1 = _sdcHL::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdgqp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcHL::P64;
           _sdcGQ::P64 = P64[_sdcHL::P64 + 16];
           _sdcGR::P64 = P64[_sdcHL::P64 + 24];
           _sdcGT::P64 = P64[_sdcHL::P64 + 32];
           _sdcGV::P64 = P64[_sdcHL::P64 + 40];
           _sdcHa::P64 = P64[_sdcHL::P64 + 48];
           _sdcHb::P64 = P64[_sdcHL::P64 + 56];
           _sdcHg::P64 = P64[_sdcHL::P64 + 64];
           I64[Hp - 64] = sat_sdcHK_info;
           P64[Hp - 48] = _sdcGQ::P64;
           P64[Hp - 40] = _sdcGR::P64;
           P64[Hp - 32] = _sdcGT::P64;
           P64[Hp - 24] = _sdcGV::P64;
           P64[Hp - 16] = _sdcHa::P64;
           P64[Hp - 8] = _sdcHb::P64;
           P64[Hp] = _sdcHg::P64;
           R3 = Hp - 64;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcHL_info" {
     sat_sdcHL_info:
         const sat_sdcHL_entry;
         const 7;
         const 18446744069414584335;
         const udgrY_srtd;
 },
 section ""relreadonly" . udgrZ_srtd" {
     udgrZ_srtd:
         const SddB2_srt+272;
         const 64;
         const 9223372174495055873;
 },
 sat_sdcHM_entry() //  [R1]
         { []
         }
     {offset
       cdgqr: // global
           _sdcHM::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdgqs; else goto cdgqt;
       cdgqt: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdgqv; else goto cdgqu;
       cdgqv: // global
           HpAlloc = 72;
           goto cdgqs;
       cdgqs: // global
           R1 = _sdcHM::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdgqu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcHM::P64;
           _sdcGQ::P64 = P64[_sdcHM::P64 + 16];
           _sdcGR::P64 = P64[_sdcHM::P64 + 24];
           _sdcGT::P64 = P64[_sdcHM::P64 + 32];
           _sdcGV::P64 = P64[_sdcHM::P64 + 40];
           _sdcH1::P64 = P64[_sdcHM::P64 + 48];
           _sdcHa::P64 = P64[_sdcHM::P64 + 56];
           _sdcHb::P64 = P64[_sdcHM::P64 + 64];
           _sdcHg::P64 = P64[_sdcHM::P64 + 72];
           I64[Hp - 64] = sat_sdcHL_info;
           P64[Hp - 48] = _sdcGQ::P64;
           P64[Hp - 40] = _sdcGR::P64;
           P64[Hp - 32] = _sdcGT::P64;
           P64[Hp - 24] = _sdcGV::P64;
           P64[Hp - 16] = _sdcHa::P64;
           P64[Hp - 8] = _sdcHb::P64;
           P64[Hp] = _sdcHg::P64;
           R2 = Hp - 64;
           R1 = _sdcH1::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcHM_info" {
     sat_sdcHM_info:
         const sat_sdcHM_entry;
         const 8;
         const 18446744069414584335;
         const udgrZ_srtd;
 },
 section ""relreadonly" . udgs0_srtd" {
     udgs0_srtd:
         const SddB2_srt+272;
         const 64;
         const 9223372174495055873;
 },
 sat_sdcHN_entry() //  [R1]
         { []
         }
     {offset
       cdgqw: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cdgqA; else goto cdgqz;
       cdgqA: // global
           HpAlloc = 80;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdgqz: // global
           _sdcGQ::P64 = P64[R1 + 16];
           _sdcGR::P64 = P64[R1 + 24];
           _sdcGT::P64 = P64[R1 + 32];
           _sdcGV::P64 = P64[R1 + 40];
           _sdcH1::P64 = P64[R1 + 48];
           _sdcHa::P64 = P64[R1 + 56];
           _sdcHb::P64 = P64[R1 + 64];
           _sdcHg::P64 = P64[R1 + 72];
           I64[Hp - 72] = sat_sdcHM_info;
           P64[Hp - 56] = _sdcGQ::P64;
           P64[Hp - 48] = _sdcGR::P64;
           P64[Hp - 40] = _sdcGT::P64;
           P64[Hp - 32] = _sdcGV::P64;
           P64[Hp - 24] = _sdcH1::P64;
           P64[Hp - 16] = _sdcHa::P64;
           P64[Hp - 8] = _sdcHb::P64;
           P64[Hp] = _sdcHg::P64;
           R3 = Hp - 72;
           R2 = lvl89_rcV6y_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcHN_info" {
     sat_sdcHN_info:
         const sat_sdcHN_entry;
         const 8;
         const 18446744069414584335;
         const udgs0_srtd;
 },
 section ""relreadonly" . udgs1_srtd" {
     udgs1_srtd:
         const SddB2_srt+272;
         const 64;
         const 9223372174495055873;
 },
 sat_sdcHO_entry() //  [R1]
         { []
         }
     {offset
       cdgqB: // global
           _sdcHO::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdgqC; else goto cdgqD;
       cdgqD: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cdgqF; else goto cdgqE;
       cdgqF: // global
           HpAlloc = 80;
           goto cdgqC;
       cdgqC: // global
           R1 = _sdcHO::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdgqE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcHO::P64;
           _sdcGQ::P64 = P64[_sdcHO::P64 + 16];
           _sdcGR::P64 = P64[_sdcHO::P64 + 24];
           _sdcGT::P64 = P64[_sdcHO::P64 + 32];
           _sdcGV::P64 = P64[_sdcHO::P64 + 40];
           _sdcH1::P64 = P64[_sdcHO::P64 + 48];
           _sdcHa::P64 = P64[_sdcHO::P64 + 56];
           _sdcHb::P64 = P64[_sdcHO::P64 + 64];
           _sdcHg::P64 = P64[_sdcHO::P64 + 72];
           I64[Hp - 72] = sat_sdcHN_info;
           P64[Hp - 56] = _sdcGQ::P64;
           P64[Hp - 48] = _sdcGR::P64;
           P64[Hp - 40] = _sdcGT::P64;
           P64[Hp - 32] = _sdcGV::P64;
           P64[Hp - 24] = _sdcH1::P64;
           P64[Hp - 16] = _sdcHa::P64;
           P64[Hp - 8] = _sdcHb::P64;
           P64[Hp] = _sdcHg::P64;
           R3 = Hp - 72;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcHO_info" {
     sat_sdcHO_info:
         const sat_sdcHO_entry;
         const 8;
         const 18446744069414584335;
         const udgs1_srtd;
 },
 section ""relreadonly" . udgs2_srtd" {
     udgs2_srtd:
         const SddB2_srt+272;
         const 64;
         const 9223372174495055873;
 },
 sat_sdcHP_entry() //  [R1]
         { []
         }
     {offset
       cdgqG: // global
           _sdcHP::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdgqH; else goto cdgqI;
       cdgqI: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cdgqK; else goto cdgqJ;
       cdgqK: // global
           HpAlloc = 80;
           goto cdgqH;
       cdgqH: // global
           R1 = _sdcHP::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdgqJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcHP::P64;
           _sdcGQ::P64 = P64[_sdcHP::P64 + 16];
           _sdcGR::P64 = P64[_sdcHP::P64 + 24];
           _sdcGT::P64 = P64[_sdcHP::P64 + 32];
           _sdcGV::P64 = P64[_sdcHP::P64 + 40];
           _sdcGX::P64 = P64[_sdcHP::P64 + 48];
           _sdcH1::P64 = P64[_sdcHP::P64 + 56];
           _sdcHa::P64 = P64[_sdcHP::P64 + 64];
           _sdcHb::P64 = P64[_sdcHP::P64 + 72];
           _sdcHg::P64 = P64[_sdcHP::P64 + 80];
           I64[Hp - 72] = sat_sdcHO_info;
           P64[Hp - 56] = _sdcGQ::P64;
           P64[Hp - 48] = _sdcGR::P64;
           P64[Hp - 40] = _sdcGT::P64;
           P64[Hp - 32] = _sdcGV::P64;
           P64[Hp - 24] = _sdcH1::P64;
           P64[Hp - 16] = _sdcHa::P64;
           P64[Hp - 8] = _sdcHb::P64;
           P64[Hp] = _sdcHg::P64;
           R2 = Hp - 72;
           R1 = _sdcGX::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcHP_info" {
     sat_sdcHP_info:
         const sat_sdcHP_entry;
         const 9;
         const 18446744069414584335;
         const udgs2_srtd;
 },
 section ""relreadonly" . udgs3_srtd" {
     udgs3_srtd:
         const SddB2_srt+272;
         const 64;
         const 9223372174495055873;
 },
 sat_sdcHQ_entry() //  [R1]
         { []
         }
     {offset
       cdgqL: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdgqP; else goto cdgqO;
       cdgqP: // global
           HpAlloc = 88;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdgqO: // global
           _sdcGQ::P64 = P64[R1 + 16];
           _sdcGR::P64 = P64[R1 + 24];
           _sdcGT::P64 = P64[R1 + 32];
           _sdcGV::P64 = P64[R1 + 40];
           _sdcGX::P64 = P64[R1 + 48];
           _sdcH1::P64 = P64[R1 + 56];
           _sdcHa::P64 = P64[R1 + 64];
           _sdcHb::P64 = P64[R1 + 72];
           _sdcHg::P64 = P64[R1 + 80];
           I64[Hp - 80] = sat_sdcHP_info;
           P64[Hp - 64] = _sdcGQ::P64;
           P64[Hp - 56] = _sdcGR::P64;
           P64[Hp - 48] = _sdcGT::P64;
           P64[Hp - 40] = _sdcGV::P64;
           P64[Hp - 32] = _sdcGX::P64;
           P64[Hp - 24] = _sdcH1::P64;
           P64[Hp - 16] = _sdcHa::P64;
           P64[Hp - 8] = _sdcHb::P64;
           P64[Hp] = _sdcHg::P64;
           R3 = Hp - 80;
           R2 = lvl88_rcV6x_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcHQ_info" {
     sat_sdcHQ_info:
         const sat_sdcHQ_entry;
         const 9;
         const 18446744069414584335;
         const udgs3_srtd;
 },
 section ""relreadonly" . udgs4_srtd" {
     udgs4_srtd:
         const SddB2_srt+272;
         const 64;
         const 9223372174495055873;
 },
 sat_sdcHR_entry() //  [R1]
         { []
         }
     {offset
       cdgqQ: // global
           _sdcHR::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdgqR; else goto cdgqS;
       cdgqS: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdgqU; else goto cdgqT;
       cdgqU: // global
           HpAlloc = 88;
           goto cdgqR;
       cdgqR: // global
           R1 = _sdcHR::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdgqT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcHR::P64;
           _sdcGQ::P64 = P64[_sdcHR::P64 + 16];
           _sdcGR::P64 = P64[_sdcHR::P64 + 24];
           _sdcGT::P64 = P64[_sdcHR::P64 + 32];
           _sdcGV::P64 = P64[_sdcHR::P64 + 40];
           _sdcGX::P64 = P64[_sdcHR::P64 + 48];
           _sdcH1::P64 = P64[_sdcHR::P64 + 56];
           _sdcHa::P64 = P64[_sdcHR::P64 + 64];
           _sdcHb::P64 = P64[_sdcHR::P64 + 72];
           _sdcHg::P64 = P64[_sdcHR::P64 + 80];
           I64[Hp - 80] = sat_sdcHQ_info;
           P64[Hp - 64] = _sdcGQ::P64;
           P64[Hp - 56] = _sdcGR::P64;
           P64[Hp - 48] = _sdcGT::P64;
           P64[Hp - 40] = _sdcGV::P64;
           P64[Hp - 32] = _sdcGX::P64;
           P64[Hp - 24] = _sdcH1::P64;
           P64[Hp - 16] = _sdcHa::P64;
           P64[Hp - 8] = _sdcHb::P64;
           P64[Hp] = _sdcHg::P64;
           R3 = Hp - 80;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcHR_info" {
     sat_sdcHR_info:
         const sat_sdcHR_entry;
         const 9;
         const 18446744069414584335;
         const udgs4_srtd;
 },
 section ""relreadonly" . udgs5_srtd" {
     udgs5_srtd:
         const SddB2_srt+272;
         const 64;
         const 9223372174495055873;
 },
 sat_sdcHS_entry() //  [R1]
         { []
         }
     {offset
       cdgqV: // global
           _sdcHS::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdgqW; else goto cdgqX;
       cdgqX: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdgqZ; else goto cdgqY;
       cdgqZ: // global
           HpAlloc = 88;
           goto cdgqW;
       cdgqW: // global
           R1 = _sdcHS::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdgqY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcHS::P64;
           _sdcGQ::P64 = P64[_sdcHS::P64 + 16];
           _sdcGR::P64 = P64[_sdcHS::P64 + 24];
           _sdcGT::P64 = P64[_sdcHS::P64 + 32];
           _sdcGV::P64 = P64[_sdcHS::P64 + 40];
           _sdcGW::P64 = P64[_sdcHS::P64 + 48];
           _sdcGX::P64 = P64[_sdcHS::P64 + 56];
           _sdcH1::P64 = P64[_sdcHS::P64 + 64];
           _sdcHa::P64 = P64[_sdcHS::P64 + 72];
           _sdcHb::P64 = P64[_sdcHS::P64 + 80];
           _sdcHg::P64 = P64[_sdcHS::P64 + 88];
           I64[Hp - 80] = sat_sdcHR_info;
           P64[Hp - 64] = _sdcGQ::P64;
           P64[Hp - 56] = _sdcGR::P64;
           P64[Hp - 48] = _sdcGT::P64;
           P64[Hp - 40] = _sdcGV::P64;
           P64[Hp - 32] = _sdcGX::P64;
           P64[Hp - 24] = _sdcH1::P64;
           P64[Hp - 16] = _sdcHa::P64;
           P64[Hp - 8] = _sdcHb::P64;
           P64[Hp] = _sdcHg::P64;
           R2 = Hp - 80;
           R1 = _sdcGW::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcHS_info" {
     sat_sdcHS_info:
         const sat_sdcHS_entry;
         const 10;
         const 18446744069414584335;
         const udgs5_srtd;
 },
 section ""relreadonly" . udgs6_srtd" {
     udgs6_srtd:
         const SddB2_srt+272;
         const 64;
         const 9223372174495055873;
 },
 sat_sdcHT_entry() //  [R1]
         { []
         }
     {offset
       cdgr0: // global
           _sdcHT::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdgr1; else goto cdgr2;
       cdgr2: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cdgr4; else goto cdgr3;
       cdgr4: // global
           HpAlloc = 96;
           goto cdgr1;
       cdgr1: // global
           R1 = _sdcHT::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdgr3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcHT::P64;
           _sdcGQ::P64 = P64[_sdcHT::P64 + 16];
           _sdcGR::P64 = P64[_sdcHT::P64 + 24];
           _sdcGT::P64 = P64[_sdcHT::P64 + 32];
           _sdcGV::P64 = P64[_sdcHT::P64 + 40];
           _sdcGW::P64 = P64[_sdcHT::P64 + 48];
           _sdcGX::P64 = P64[_sdcHT::P64 + 56];
           _sdcH1::P64 = P64[_sdcHT::P64 + 64];
           _sdcHa::P64 = P64[_sdcHT::P64 + 72];
           _sdcHb::P64 = P64[_sdcHT::P64 + 80];
           _sdcHg::P64 = P64[_sdcHT::P64 + 88];
           I64[Hp - 88] = sat_sdcHS_info;
           P64[Hp - 72] = _sdcGQ::P64;
           P64[Hp - 64] = _sdcGR::P64;
           P64[Hp - 56] = _sdcGT::P64;
           P64[Hp - 48] = _sdcGV::P64;
           P64[Hp - 40] = _sdcGW::P64;
           P64[Hp - 32] = _sdcGX::P64;
           P64[Hp - 24] = _sdcH1::P64;
           P64[Hp - 16] = _sdcHa::P64;
           P64[Hp - 8] = _sdcHb::P64;
           P64[Hp] = _sdcHg::P64;
           R3 = Hp - 88;
           R2 = lvl87_rcV6w_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcHT_info" {
     sat_sdcHT_info:
         const sat_sdcHT_entry;
         const 10;
         const 18446744069414584335;
         const udgs6_srtd;
 },
 section ""relreadonly" . udgs7_srtd" {
     udgs7_srtd:
         const SddB2_srt+272;
         const 64;
         const 9223372174495055873;
 },
 p_sdcHf_entry() //  [R1, R2]
         { []
         }
     {offset
       cdgr5: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cdgr9; else goto cdgr8;
       cdgr9: // global
           HpAlloc = 96;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdgr8: // global
           _sdcGQ::P64 = P64[R1 + 7];
           _sdcGR::P64 = P64[R1 + 15];
           _sdcGT::P64 = P64[R1 + 23];
           _sdcGV::P64 = P64[R1 + 31];
           _sdcGW::P64 = P64[R1 + 39];
           _sdcGX::P64 = P64[R1 + 47];
           _sdcH1::P64 = P64[R1 + 55];
           _sdcHa::P64 = P64[R1 + 63];
           _sdcHb::P64 = P64[R1 + 71];
           I64[Hp - 88] = sat_sdcHT_info;
           P64[Hp - 72] = _sdcGQ::P64;
           P64[Hp - 64] = _sdcGR::P64;
           P64[Hp - 56] = _sdcGT::P64;
           P64[Hp - 48] = _sdcGV::P64;
           P64[Hp - 40] = _sdcGW::P64;
           P64[Hp - 32] = _sdcGX::P64;
           P64[Hp - 24] = _sdcH1::P64;
           P64[Hp - 16] = _sdcHa::P64;
           P64[Hp - 8] = _sdcHb::P64;
           P64[Hp] = R2;
           R3 = Hp - 88;
           R2 = lvl86_rcV6v_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . p_sdcHf_info" {
     p_sdcHf_info:
         const p_sdcHf_entry;
         const 9;
         const 18446744069414584328;
         const 4294967301;
         const udgs7_srtd;
 },
 section ""relreadonly" . udgs8_srtd" {
     udgs8_srtd:
         const SddB2_srt+272;
         const 64;
         const 9223372174495055873;
 },
 sat_sdcHX_entry() //  [R1]
         { []
         }
     {offset
       cdgro: // global
           _sdcHX::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdgrp; else goto cdgrq;
       cdgrq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdgrs; else goto cdgrr;
       cdgrs: // global
           HpAlloc = 24;
           goto cdgrp;
       cdgrp: // global
           R1 = _sdcHX::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdgrr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdcHX::P64;
           _sdcHf::P64 = P64[_sdcHX::P64 + 16];
           _sdcHV::P64 = P64[_sdcHX::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _sdcHV::P64;
           R2 = Hp - 14;
           R1 = _sdcHf::P64;
           Sp = Sp - 16;
           call p_sdcHf_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdcHX_info" {
     sat_sdcHX_info:
         const sat_sdcHX_entry;
         const 2;
         const 18446744069414584338;
         const udgs8_srtd;
 },
 section ""relreadonly" . udgs9_srtd" {
     udgs9_srtd:
         const SddB2_srt+272;
         const 64;
         const 9223372174495055873;
 },
 sat_sdcHY_entry() //  [R1, R2]
         { []
         }
     {offset
       cdgru: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdgry; else goto cdgrx;
       cdgry: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdgrx: // global
           _sdcHf::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_sdcHX_info;
           P64[Hp - 32] = _sdcHf::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdcHY_info" {
     sat_sdcHY_info:
         const sat_sdcHY_entry;
         const 1;
         const 18446744069414584329;
         const 4294967301;
         const udgs9_srtd;
 },
 section ""relreadonly" . udgsa_srtd" {
     udgsa_srtd:
         const SddB2_srt+272;
         const 65;
         const 16429140924136685569;
         const 1;
 },
 GHC.RTS.Flags.$w$cshowsPrec7_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cdgrC: // global
           Hp = Hp + 216;
           if (Hp > HpLim) (likely: False) goto cdgrG; else goto cdgrF;
       cdgrG: // global
           HpAlloc = 216;
           R1 = GHC.RTS.Flags.$w$cshowsPrec7_closure;
           I64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 88, res: 0, upd: 8;
       cdgrF: // global
           I64[Hp - 208] = f8_sdcGW_info;
           P64[Hp - 192] = R3;
           I64[Hp - 184] = f9_sdcGX_info;
           P64[Hp - 168] = R4;
           I64[Hp - 160] = f10_sdcH1_info;
           P64[Hp - 144] = R5;
           I64[Hp - 136] = f11_sdcHa_info;
           P64[Hp - 120] = P64[Sp + 8];
           I64[Hp - 112] = f12_sdcHb_info;
           P64[Hp - 96] = P64[Sp + 24];
           I64[Hp - 88] = p_sdcHf_info;
           P64[Hp - 80] = R6;
           P64[Hp - 72] = P64[Sp];
           P64[Hp - 64] = P64[Sp + 16];
           P64[Hp - 56] = P64[Sp + 32];
           P64[Hp - 48] = Hp - 208;
           P64[Hp - 40] = Hp - 184;
           P64[Hp - 32] = Hp - 160;
           P64[Hp - 24] = Hp - 136;
           P64[Hp - 16] = Hp - 112;
           _cdgmT::P64 = Hp - 87;
           if (%MO_S_Lt_W64(R2, 11)) goto cdgrA; else goto cdgrB;
       cdgrA: // global
           Hp = Hp - 16;
           R1 = _cdgmT::P64;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdgrB: // global
           I64[Hp - 8] = sat_sdcHY_info;
           P64[Hp] = _cdgmT::P64;
           R1 = Hp - 7;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$w$cshowsPrec7_info" {
     GHC.RTS.Flags.$w$cshowsPrec7_info:
         const GHC.RTS.Flags.$w$cshowsPrec7_entry;
         const 0;
         const 18446744069414584334;
         const 42949672960;
         const udgsa_srtd;
         const 74;
         const GHC.RTS.Flags.$w$cshowsPrec7_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.714013023 UTC

[section ""data" . GHC.RTS.Flags.$fShowRTSFlags_$cshowsPrec_closure" {
     GHC.RTS.Flags.$fShowRTSFlags_$cshowsPrec_closure:
         const GHC.RTS.Flags.$fShowRTSFlags_$cshowsPrec_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowRTSFlags_$cshowsPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       cdgwP: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdgwT; else goto cdgwU;
       cdgwT: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fShowRTSFlags_$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdgwU: // global
           I64[Sp - 16] = block_cdgwM_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udgx2; else goto cdgwN;
       udgx2: // global
           call _cdgwM(R1) args: 0, res: 0, upd: 0;
       cdgwN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowRTSFlags_$cshowsPrec_info" {
     GHC.RTS.Flags.$fShowRTSFlags_$cshowsPrec_info:
         const GHC.RTS.Flags.$fShowRTSFlags_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SddB2_srt+784;
 },
 _cdgwM() //  [R1]
         { []
         }
     {offset
       cdgwM: // global
           I64[Sp] = block_cdgwS_info;
           _sdcI2::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _sdcI2::I64;
           if (R1 & 7 != 0) goto udgx1; else goto cdgwW;
       udgx1: // global
           call _cdgwS(R1) args: 0, res: 0, upd: 0;
       cdgwW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdgwM_info" {
     block_cdgwM_info:
         const _cdgwM;
         const 1;
         const 4294967326;
         const SddB2_srt+784;
 },
 _cdgwS() //  [R1]
         { []
         }
     {offset
       cdgwS: // global
           R6 = P64[R1 + 31];
           R5 = P64[R1 + 23];
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = I64[Sp + 8];
           P64[Sp - 24] = P64[R1 + 39];
           P64[Sp - 16] = P64[R1 + 47];
           P64[Sp - 8] = P64[R1 + 55];
           P64[Sp] = P64[R1 + 63];
           P64[Sp + 8] = P64[R1 + 71];
           Sp = Sp - 24;
           call GHC.RTS.Flags.$w$cshowsPrec7_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdgwS_info" {
     block_cdgwS_info:
         const _cdgwS;
         const 65;
         const 4294967326;
         const SddB2_srt+784;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.722215011 UTC

[section ""data" . GHC.RTS.Flags.$fShowRTSFlags_$cshow_closure" {
     GHC.RTS.Flags.$fShowRTSFlags_$cshow_closure:
         const GHC.RTS.Flags.$fShowRTSFlags_$cshow_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowRTSFlags_$cshow_entry() //  [R2]
         { []
         }
     {offset
       cdgxu: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cdgxv; else goto cdgxw;
       cdgxv: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.$fShowRTSFlags_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdgxw: // global
           I64[Sp - 8] = block_cdgxr_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udgxA; else goto cdgxs;
       udgxA: // global
           call _cdgxr(R1) args: 0, res: 0, upd: 0;
       cdgxs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowRTSFlags_$cshow_info" {
     GHC.RTS.Flags.$fShowRTSFlags_$cshow_info:
         const GHC.RTS.Flags.$fShowRTSFlags_$cshow_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const SddB2_srt+784;
 },
 _cdgxr() //  [R1]
         { []
         }
     {offset
       cdgxr: // global
           R6 = P64[R1 + 31];
           R5 = P64[R1 + 23];
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = 0;
           P64[Sp - 48] = P64[R1 + 39];
           P64[Sp - 40] = P64[R1 + 47];
           P64[Sp - 32] = P64[R1 + 55];
           P64[Sp - 24] = P64[R1 + 63];
           P64[Sp - 16] = P64[R1 + 71];
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = GHC.Types.[]_closure+1;
           Sp = Sp - 48;
           call GHC.RTS.Flags.$w$cshowsPrec7_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 64, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdgxr_info" {
     block_cdgxr_info:
         const _cdgxr;
         const 0;
         const 4294967326;
         const SddB2_srt+784;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.728275831 UTC

[section ""data" . GHC.RTS.Flags.$fShowRTSFlags1_closure" {
     GHC.RTS.Flags.$fShowRTSFlags1_closure:
         const GHC.RTS.Flags.$fShowRTSFlags1_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowRTSFlags1_entry() //  [R2]
         { []
         }
     {offset
       cdgy0: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdgy1; else goto cdgy2;
       cdgy1: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.$fShowRTSFlags1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdgy2: // global
           I64[Sp - 8] = block_cdgxX_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udgy6; else goto cdgxY;
       udgy6: // global
           call _cdgxX(R1) args: 0, res: 0, upd: 0;
       cdgxY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowRTSFlags1_info" {
     GHC.RTS.Flags.$fShowRTSFlags1_info:
         const GHC.RTS.Flags.$fShowRTSFlags1_entry;
         const 0;
         const 38654705678;
         const 4294967301;
         const SddB2_srt+784;
 },
 _cdgxX() //  [R1]
         { []
         }
     {offset
       cdgxX: // global
           R6 = P64[R1 + 31];
           R5 = P64[R1 + 23];
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = 0;
           P64[Sp - 32] = P64[R1 + 39];
           P64[Sp - 24] = P64[R1 + 47];
           P64[Sp - 16] = P64[R1 + 55];
           P64[Sp - 8] = P64[R1 + 63];
           P64[Sp] = P64[R1 + 71];
           Sp = Sp - 32;
           call GHC.RTS.Flags.$w$cshowsPrec7_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdgxX_info" {
     block_cdgxX_info:
         const _cdgxX;
         const 0;
         const 4294967326;
         const SddB2_srt+784;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.734093993 UTC

[section ""data" . GHC.RTS.Flags.$fShowRTSFlags_$cshowList_closure" {
     GHC.RTS.Flags.$fShowRTSFlags_$cshowList_closure:
         const GHC.RTS.Flags.$fShowRTSFlags_$cshowList_info;
         const 0;
 },
 GHC.RTS.Flags.$fShowRTSFlags_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       cdgyq: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.RTS.Flags.$fShowRTSFlags1_closure+1;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fShowRTSFlags_$cshowList_info" {
     GHC.RTS.Flags.$fShowRTSFlags_$cshowList_info:
         const GHC.RTS.Flags.$fShowRTSFlags_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const SddB2_srt+808;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.737439713 UTC

[section ""data" . GHC.RTS.Flags.$fShowRTSFlags_closure" {
     GHC.RTS.Flags.$fShowRTSFlags_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.RTS.Flags.$fShowRTSFlags_$cshowsPrec_closure+2;
         const GHC.RTS.Flags.$fShowRTSFlags_$cshow_closure+1;
         const GHC.RTS.Flags.$fShowRTSFlags_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.739998623 UTC

[section ""data" . GHC.RTS.Flags.numaMask_closure" {
     GHC.RTS.Flags.numaMask_closure:
         const GHC.RTS.Flags.numaMask_info;
 },
 GHC.RTS.Flags.numaMask_entry() //  [R2]
         { []
         }
     {offset
       cdgyF: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdgyG; else goto cdgyH;
       cdgyG: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.numaMask_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdgyH: // global
           I64[Sp - 8] = block_cdgyC_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udgyL; else goto cdgyD;
       udgyL: // global
           call _cdgyC(R1) args: 0, res: 0, upd: 0;
       cdgyD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.numaMask_info" {
     GHC.RTS.Flags.numaMask_info:
         const GHC.RTS.Flags.numaMask_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdgyC() //  [R1]
         { []
         }
     {offset
       cdgyC: // global
           R1 = P64[R1 + 215] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdgyC_info" {
     block_cdgyC_info:
         const _cdgyC;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.745853954 UTC

[section ""data" . GHC.RTS.Flags.numa_closure" {
     GHC.RTS.Flags.numa_closure:
         const GHC.RTS.Flags.numa_info;
 },
 GHC.RTS.Flags.numa_entry() //  [R2]
         { []
         }
     {offset
       cdgz5: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdgz6; else goto cdgz7;
       cdgz6: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.numa_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdgz7: // global
           I64[Sp - 8] = block_cdgz2_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udgzb; else goto cdgz3;
       udgzb: // global
           call _cdgz2(R1) args: 0, res: 0, upd: 0;
       cdgz3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.numa_info" {
     GHC.RTS.Flags.numa_info:
         const GHC.RTS.Flags.numa_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdgz2() //  [R1]
         { []
         }
     {offset
       cdgz2: // global
           R1 = P64[R1 + 207] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdgz2_info" {
     block_cdgz2_info:
         const _cdgz2;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.751822462 UTC

[section ""data" . GHC.RTS.Flags.allocLimitGrace_closure" {
     GHC.RTS.Flags.allocLimitGrace_closure:
         const GHC.RTS.Flags.allocLimitGrace_info;
 },
 GHC.RTS.Flags.allocLimitGrace_entry() //  [R2]
         { []
         }
     {offset
       cdgzv: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdgzw; else goto cdgzx;
       cdgzw: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.allocLimitGrace_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdgzx: // global
           I64[Sp - 8] = block_cdgzs_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udgzB; else goto cdgzt;
       udgzB: // global
           call _cdgzs(R1) args: 0, res: 0, upd: 0;
       cdgzt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.allocLimitGrace_info" {
     GHC.RTS.Flags.allocLimitGrace_info:
         const GHC.RTS.Flags.allocLimitGrace_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdgzs() //  [R1]
         { []
         }
     {offset
       cdgzs: // global
           R1 = P64[R1 + 199] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdgzs_info" {
     block_cdgzs_info:
         const _cdgzs;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.757391994 UTC

[section ""data" . GHC.RTS.Flags.heapBase_closure" {
     GHC.RTS.Flags.heapBase_closure:
         const GHC.RTS.Flags.heapBase_info;
 },
 GHC.RTS.Flags.heapBase_entry() //  [R2]
         { []
         }
     {offset
       cdgzV: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdgzW; else goto cdgzX;
       cdgzW: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.heapBase_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdgzX: // global
           I64[Sp - 8] = block_cdgzS_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udgA1; else goto cdgzT;
       udgA1: // global
           call _cdgzS(R1) args: 0, res: 0, upd: 0;
       cdgzT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.heapBase_info" {
     GHC.RTS.Flags.heapBase_info:
         const GHC.RTS.Flags.heapBase_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdgzS() //  [R1]
         { []
         }
     {offset
       cdgzS: // global
           R1 = P64[R1 + 191] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdgzS_info" {
     block_cdgzS_info:
         const _cdgzS;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.762906585 UTC

[section ""data" . GHC.RTS.Flags.doIdleGC_closure" {
     GHC.RTS.Flags.doIdleGC_closure:
         const GHC.RTS.Flags.doIdleGC_info;
 },
 GHC.RTS.Flags.doIdleGC_entry() //  [R2]
         { []
         }
     {offset
       cdgAl: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdgAm; else goto cdgAn;
       cdgAm: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.doIdleGC_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdgAn: // global
           I64[Sp - 8] = block_cdgAi_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udgAr; else goto cdgAj;
       udgAr: // global
           call _cdgAi(R1) args: 0, res: 0, upd: 0;
       cdgAj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.doIdleGC_info" {
     GHC.RTS.Flags.doIdleGC_info:
         const GHC.RTS.Flags.doIdleGC_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdgAi() //  [R1]
         { []
         }
     {offset
       cdgAi: // global
           R1 = P64[R1 + 183] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdgAi_info" {
     block_cdgAi_info:
         const _cdgAi;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.768321616 UTC

[section ""data" . GHC.RTS.Flags.idleGCDelayTime_closure" {
     GHC.RTS.Flags.idleGCDelayTime_closure:
         const GHC.RTS.Flags.idleGCDelayTime_info;
 },
 GHC.RTS.Flags.idleGCDelayTime_entry() //  [R2]
         { []
         }
     {offset
       cdgAL: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdgAM; else goto cdgAN;
       cdgAM: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.idleGCDelayTime_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdgAN: // global
           I64[Sp - 8] = block_cdgAI_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udgAR; else goto cdgAJ;
       udgAR: // global
           call _cdgAI(R1) args: 0, res: 0, upd: 0;
       cdgAJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.idleGCDelayTime_info" {
     GHC.RTS.Flags.idleGCDelayTime_info:
         const GHC.RTS.Flags.idleGCDelayTime_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdgAI() //  [R1]
         { []
         }
     {offset
       cdgAI: // global
           R1 = P64[R1 + 175] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdgAI_info" {
     block_cdgAI_info:
         const _cdgAI;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.773782918 UTC

[section ""data" . GHC.RTS.Flags.ringBell_closure" {
     GHC.RTS.Flags.ringBell_closure:
         const GHC.RTS.Flags.ringBell_info;
 },
 GHC.RTS.Flags.ringBell_entry() //  [R2]
         { []
         }
     {offset
       cdgBb: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdgBc; else goto cdgBd;
       cdgBc: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.ringBell_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdgBd: // global
           I64[Sp - 8] = block_cdgB8_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udgBh; else goto cdgB9;
       udgBh: // global
           call _cdgB8(R1) args: 0, res: 0, upd: 0;
       cdgB9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.ringBell_info" {
     GHC.RTS.Flags.ringBell_info:
         const GHC.RTS.Flags.ringBell_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdgB8() //  [R1]
         { []
         }
     {offset
       cdgB8: // global
           R1 = P64[R1 + 167] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdgB8_info" {
     block_cdgB8_info:
         const _cdgB8;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.779578134 UTC

[section ""data" . GHC.RTS.Flags.sweep_closure" {
     GHC.RTS.Flags.sweep_closure:
         const GHC.RTS.Flags.sweep_info;
 },
 GHC.RTS.Flags.sweep_entry() //  [R2]
         { []
         }
     {offset
       cdgBB: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdgBC; else goto cdgBD;
       cdgBC: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.sweep_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdgBD: // global
           I64[Sp - 8] = block_cdgBy_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udgBH; else goto cdgBz;
       udgBH: // global
           call _cdgBy(R1) args: 0, res: 0, upd: 0;
       cdgBz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.sweep_info" {
     GHC.RTS.Flags.sweep_info:
         const GHC.RTS.Flags.sweep_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdgBy() //  [R1]
         { []
         }
     {offset
       cdgBy: // global
           R1 = P64[R1 + 159] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdgBy_info" {
     block_cdgBy_info:
         const _cdgBy;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.786054682 UTC

[section ""data" . GHC.RTS.Flags.compactThreshold_closure" {
     GHC.RTS.Flags.compactThreshold_closure:
         const GHC.RTS.Flags.compactThreshold_info;
 },
 GHC.RTS.Flags.compactThreshold_entry() //  [R2]
         { []
         }
     {offset
       cdgC1: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdgC2; else goto cdgC3;
       cdgC2: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.compactThreshold_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdgC3: // global
           I64[Sp - 8] = block_cdgBY_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udgC7; else goto cdgBZ;
       udgC7: // global
           call _cdgBY(R1) args: 0, res: 0, upd: 0;
       cdgBZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.compactThreshold_info" {
     GHC.RTS.Flags.compactThreshold_info:
         const GHC.RTS.Flags.compactThreshold_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdgBY() //  [R1]
         { []
         }
     {offset
       cdgBY: // global
           R1 = P64[R1 + 151] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdgBY_info" {
     block_cdgBY_info:
         const _cdgBY;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.791451299 UTC

[section ""data" . GHC.RTS.Flags.compact_closure" {
     GHC.RTS.Flags.compact_closure:
         const GHC.RTS.Flags.compact_info;
 },
 GHC.RTS.Flags.compact_entry() //  [R2]
         { []
         }
     {offset
       cdgCr: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdgCs; else goto cdgCt;
       cdgCs: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.compact_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdgCt: // global
           I64[Sp - 8] = block_cdgCo_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udgCx; else goto cdgCp;
       udgCx: // global
           call _cdgCo(R1) args: 0, res: 0, upd: 0;
       cdgCp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.compact_info" {
     GHC.RTS.Flags.compact_info:
         const GHC.RTS.Flags.compact_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdgCo() //  [R1]
         { []
         }
     {offset
       cdgCo: // global
           R1 = P64[R1 + 143] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdgCo_info" {
     block_cdgCo_info:
         const _cdgCo;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.796847548 UTC

[section ""data" . GHC.RTS.Flags.squeezeUpdFrames_closure" {
     GHC.RTS.Flags.squeezeUpdFrames_closure:
         const GHC.RTS.Flags.squeezeUpdFrames_info;
 },
 GHC.RTS.Flags.squeezeUpdFrames_entry() //  [R2]
         { []
         }
     {offset
       cdgCR: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdgCS; else goto cdgCT;
       cdgCS: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.squeezeUpdFrames_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdgCT: // global
           I64[Sp - 8] = block_cdgCO_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udgCX; else goto cdgCP;
       udgCX: // global
           call _cdgCO(R1) args: 0, res: 0, upd: 0;
       cdgCP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.squeezeUpdFrames_info" {
     GHC.RTS.Flags.squeezeUpdFrames_info:
         const GHC.RTS.Flags.squeezeUpdFrames_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdgCO() //  [R1]
         { []
         }
     {offset
       cdgCO: // global
           R1 = P64[R1 + 135] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdgCO_info" {
     block_cdgCO_info:
         const _cdgCO;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.802273748 UTC

[section ""data" . GHC.RTS.Flags.generations_closure" {
     GHC.RTS.Flags.generations_closure:
         const GHC.RTS.Flags.generations_info;
 },
 GHC.RTS.Flags.generations_entry() //  [R2]
         { []
         }
     {offset
       cdgDh: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdgDi; else goto cdgDj;
       cdgDi: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.generations_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdgDj: // global
           I64[Sp - 8] = block_cdgDe_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udgDn; else goto cdgDf;
       udgDn: // global
           call _cdgDe(R1) args: 0, res: 0, upd: 0;
       cdgDf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.generations_info" {
     GHC.RTS.Flags.generations_info:
         const GHC.RTS.Flags.generations_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdgDe() //  [R1]
         { []
         }
     {offset
       cdgDe: // global
           R1 = P64[R1 + 127] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdgDe_info" {
     block_cdgDe_info:
         const _cdgDe;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.807641767 UTC

[section ""data" . GHC.RTS.Flags.pcFreeHeap_closure" {
     GHC.RTS.Flags.pcFreeHeap_closure:
         const GHC.RTS.Flags.pcFreeHeap_info;
 },
 GHC.RTS.Flags.pcFreeHeap_entry() //  [R2]
         { []
         }
     {offset
       cdgDH: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdgDI; else goto cdgDJ;
       cdgDI: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.pcFreeHeap_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdgDJ: // global
           I64[Sp - 8] = block_cdgDE_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udgDN; else goto cdgDF;
       udgDN: // global
           call _cdgDE(R1) args: 0, res: 0, upd: 0;
       cdgDF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.pcFreeHeap_info" {
     GHC.RTS.Flags.pcFreeHeap_info:
         const GHC.RTS.Flags.pcFreeHeap_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdgDE() //  [R1]
         { []
         }
     {offset
       cdgDE: // global
           R1 = P64[R1 + 119] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdgDE_info" {
     block_cdgDE_info:
         const _cdgDE;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.813085426 UTC

[section ""data" . GHC.RTS.Flags.oldGenFactor_closure" {
     GHC.RTS.Flags.oldGenFactor_closure:
         const GHC.RTS.Flags.oldGenFactor_info;
 },
 GHC.RTS.Flags.oldGenFactor_entry() //  [R2]
         { []
         }
     {offset
       cdgE7: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdgE8; else goto cdgE9;
       cdgE8: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.oldGenFactor_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdgE9: // global
           I64[Sp - 8] = block_cdgE4_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udgEd; else goto cdgE5;
       udgEd: // global
           call _cdgE4(R1) args: 0, res: 0, upd: 0;
       cdgE5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.oldGenFactor_info" {
     GHC.RTS.Flags.oldGenFactor_info:
         const GHC.RTS.Flags.oldGenFactor_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdgE4() //  [R1]
         { []
         }
     {offset
       cdgE4: // global
           R1 = P64[R1 + 111] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdgE4_info" {
     block_cdgE4_info:
         const _cdgE4;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.818832785 UTC

[section ""data" . GHC.RTS.Flags.heapSizeSuggestionAuto_closure" {
     GHC.RTS.Flags.heapSizeSuggestionAuto_closure:
         const GHC.RTS.Flags.heapSizeSuggestionAuto_info;
 },
 GHC.RTS.Flags.heapSizeSuggestionAuto_entry() //  [R2]
         { []
         }
     {offset
       cdgEx: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdgEy; else goto cdgEz;
       cdgEy: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.heapSizeSuggestionAuto_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdgEz: // global
           I64[Sp - 8] = block_cdgEu_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udgED; else goto cdgEv;
       udgED: // global
           call _cdgEu(R1) args: 0, res: 0, upd: 0;
       cdgEv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.heapSizeSuggestionAuto_info" {
     GHC.RTS.Flags.heapSizeSuggestionAuto_info:
         const GHC.RTS.Flags.heapSizeSuggestionAuto_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdgEu() //  [R1]
         { []
         }
     {offset
       cdgEu: // global
           R1 = P64[R1 + 103] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdgEu_info" {
     block_cdgEu_info:
         const _cdgEu;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.824807832 UTC

[section ""data" . GHC.RTS.Flags.heapSizeSuggestion_closure" {
     GHC.RTS.Flags.heapSizeSuggestion_closure:
         const GHC.RTS.Flags.heapSizeSuggestion_info;
 },
 GHC.RTS.Flags.heapSizeSuggestion_entry() //  [R2]
         { []
         }
     {offset
       cdgEX: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdgEY; else goto cdgEZ;
       cdgEY: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.heapSizeSuggestion_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdgEZ: // global
           I64[Sp - 8] = block_cdgEU_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udgF3; else goto cdgEV;
       udgF3: // global
           call _cdgEU(R1) args: 0, res: 0, upd: 0;
       cdgEV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.heapSizeSuggestion_info" {
     GHC.RTS.Flags.heapSizeSuggestion_info:
         const GHC.RTS.Flags.heapSizeSuggestion_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdgEU() //  [R1]
         { []
         }
     {offset
       cdgEU: // global
           R1 = P64[R1 + 95] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdgEU_info" {
     block_cdgEU_info:
         const _cdgEU;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.830726216 UTC

[section ""data" . GHC.RTS.Flags.minOldGenSize_closure" {
     GHC.RTS.Flags.minOldGenSize_closure:
         const GHC.RTS.Flags.minOldGenSize_info;
 },
 GHC.RTS.Flags.minOldGenSize_entry() //  [R2]
         { []
         }
     {offset
       cdgFn: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdgFo; else goto cdgFp;
       cdgFo: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.minOldGenSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdgFp: // global
           I64[Sp - 8] = block_cdgFk_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udgFt; else goto cdgFl;
       udgFt: // global
           call _cdgFk(R1) args: 0, res: 0, upd: 0;
       cdgFl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.minOldGenSize_info" {
     GHC.RTS.Flags.minOldGenSize_info:
         const GHC.RTS.Flags.minOldGenSize_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdgFk() //  [R1]
         { []
         }
     {offset
       cdgFk: // global
           R1 = P64[R1 + 87] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdgFk_info" {
     block_cdgFk_info:
         const _cdgFk;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.835886825 UTC

[section ""data" . GHC.RTS.Flags.nurseryChunkSize_closure" {
     GHC.RTS.Flags.nurseryChunkSize_closure:
         const GHC.RTS.Flags.nurseryChunkSize_info;
 },
 GHC.RTS.Flags.nurseryChunkSize_entry() //  [R2]
         { []
         }
     {offset
       cdgFN: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdgFO; else goto cdgFP;
       cdgFO: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.nurseryChunkSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdgFP: // global
           I64[Sp - 8] = block_cdgFK_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udgFT; else goto cdgFL;
       udgFT: // global
           call _cdgFK(R1) args: 0, res: 0, upd: 0;
       cdgFL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.nurseryChunkSize_info" {
     GHC.RTS.Flags.nurseryChunkSize_info:
         const GHC.RTS.Flags.nurseryChunkSize_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdgFK() //  [R1]
         { []
         }
     {offset
       cdgFK: // global
           R1 = P64[R1 + 79] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdgFK_info" {
     block_cdgFK_info:
         const _cdgFK;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.841597081 UTC

[section ""data" . GHC.RTS.Flags.largeAllocLim_closure" {
     GHC.RTS.Flags.largeAllocLim_closure:
         const GHC.RTS.Flags.largeAllocLim_info;
 },
 GHC.RTS.Flags.largeAllocLim_entry() //  [R2]
         { []
         }
     {offset
       cdgGd: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdgGe; else goto cdgGf;
       cdgGe: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.largeAllocLim_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdgGf: // global
           I64[Sp - 8] = block_cdgGa_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udgGj; else goto cdgGb;
       udgGj: // global
           call _cdgGa(R1) args: 0, res: 0, upd: 0;
       cdgGb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.largeAllocLim_info" {
     GHC.RTS.Flags.largeAllocLim_info:
         const GHC.RTS.Flags.largeAllocLim_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdgGa() //  [R1]
         { []
         }
     {offset
       cdgGa: // global
           R1 = P64[R1 + 71] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdgGa_info" {
     block_cdgGa_info:
         const _cdgGa;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.847271301 UTC

[section ""data" . GHC.RTS.Flags.minAllocAreaSize_closure" {
     GHC.RTS.Flags.minAllocAreaSize_closure:
         const GHC.RTS.Flags.minAllocAreaSize_info;
 },
 GHC.RTS.Flags.minAllocAreaSize_entry() //  [R2]
         { []
         }
     {offset
       cdgGD: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdgGE; else goto cdgGF;
       cdgGE: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.minAllocAreaSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdgGF: // global
           I64[Sp - 8] = block_cdgGA_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udgGJ; else goto cdgGB;
       udgGJ: // global
           call _cdgGA(R1) args: 0, res: 0, upd: 0;
       cdgGB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.minAllocAreaSize_info" {
     GHC.RTS.Flags.minAllocAreaSize_info:
         const GHC.RTS.Flags.minAllocAreaSize_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdgGA() //  [R1]
         { []
         }
     {offset
       cdgGA: // global
           R1 = P64[R1 + 63] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdgGA_info" {
     block_cdgGA_info:
         const _cdgGA;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.852869424 UTC

[section ""data" . GHC.RTS.Flags.maxHeapSize_closure" {
     GHC.RTS.Flags.maxHeapSize_closure:
         const GHC.RTS.Flags.maxHeapSize_info;
 },
 GHC.RTS.Flags.maxHeapSize_entry() //  [R2]
         { []
         }
     {offset
       cdgH3: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdgH4; else goto cdgH5;
       cdgH4: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.maxHeapSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdgH5: // global
           I64[Sp - 8] = block_cdgH0_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udgH9; else goto cdgH1;
       udgH9: // global
           call _cdgH0(R1) args: 0, res: 0, upd: 0;
       cdgH1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.maxHeapSize_info" {
     GHC.RTS.Flags.maxHeapSize_info:
         const GHC.RTS.Flags.maxHeapSize_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdgH0() //  [R1]
         { []
         }
     {offset
       cdgH0: // global
           R1 = P64[R1 + 55] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdgH0_info" {
     block_cdgH0_info:
         const _cdgH0;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.859016257 UTC

[section ""data" . GHC.RTS.Flags.stkChunkBufferSize_closure" {
     GHC.RTS.Flags.stkChunkBufferSize_closure:
         const GHC.RTS.Flags.stkChunkBufferSize_info;
 },
 GHC.RTS.Flags.stkChunkBufferSize_entry() //  [R2]
         { []
         }
     {offset
       cdgHt: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdgHu; else goto cdgHv;
       cdgHu: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.stkChunkBufferSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdgHv: // global
           I64[Sp - 8] = block_cdgHq_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udgHz; else goto cdgHr;
       udgHz: // global
           call _cdgHq(R1) args: 0, res: 0, upd: 0;
       cdgHr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.stkChunkBufferSize_info" {
     GHC.RTS.Flags.stkChunkBufferSize_info:
         const GHC.RTS.Flags.stkChunkBufferSize_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdgHq() //  [R1]
         { []
         }
     {offset
       cdgHq: // global
           R1 = P64[R1 + 47] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdgHq_info" {
     block_cdgHq_info:
         const _cdgHq;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.864718843 UTC

[section ""data" . GHC.RTS.Flags.stkChunkSize_closure" {
     GHC.RTS.Flags.stkChunkSize_closure:
         const GHC.RTS.Flags.stkChunkSize_info;
 },
 GHC.RTS.Flags.stkChunkSize_entry() //  [R2]
         { []
         }
     {offset
       cdgHT: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdgHU; else goto cdgHV;
       cdgHU: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.stkChunkSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdgHV: // global
           I64[Sp - 8] = block_cdgHQ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udgHZ; else goto cdgHR;
       udgHZ: // global
           call _cdgHQ(R1) args: 0, res: 0, upd: 0;
       cdgHR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.stkChunkSize_info" {
     GHC.RTS.Flags.stkChunkSize_info:
         const GHC.RTS.Flags.stkChunkSize_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdgHQ() //  [R1]
         { []
         }
     {offset
       cdgHQ: // global
           R1 = P64[R1 + 39] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdgHQ_info" {
     block_cdgHQ_info:
         const _cdgHQ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.870210678 UTC

[section ""data" . GHC.RTS.Flags.initialStkSize_closure" {
     GHC.RTS.Flags.initialStkSize_closure:
         const GHC.RTS.Flags.initialStkSize_info;
 },
 GHC.RTS.Flags.initialStkSize_entry() //  [R2]
         { []
         }
     {offset
       cdgIj: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdgIk; else goto cdgIl;
       cdgIk: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.initialStkSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdgIl: // global
           I64[Sp - 8] = block_cdgIg_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udgIp; else goto cdgIh;
       udgIp: // global
           call _cdgIg(R1) args: 0, res: 0, upd: 0;
       cdgIh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.initialStkSize_info" {
     GHC.RTS.Flags.initialStkSize_info:
         const GHC.RTS.Flags.initialStkSize_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdgIg() //  [R1]
         { []
         }
     {offset
       cdgIg: // global
           R1 = P64[R1 + 31] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdgIg_info" {
     block_cdgIg_info:
         const _cdgIg;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.875664274 UTC

[section ""data" . GHC.RTS.Flags.maxStkSize_closure" {
     GHC.RTS.Flags.maxStkSize_closure:
         const GHC.RTS.Flags.maxStkSize_info;
 },
 GHC.RTS.Flags.maxStkSize_entry() //  [R2]
         { []
         }
     {offset
       cdgIJ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdgIK; else goto cdgIL;
       cdgIK: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.maxStkSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdgIL: // global
           I64[Sp - 8] = block_cdgIG_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udgIP; else goto cdgIH;
       udgIP: // global
           call _cdgIG(R1) args: 0, res: 0, upd: 0;
       cdgIH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.maxStkSize_info" {
     GHC.RTS.Flags.maxStkSize_info:
         const GHC.RTS.Flags.maxStkSize_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdgIG() //  [R1]
         { []
         }
     {offset
       cdgIG: // global
           R1 = P64[R1 + 23] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdgIG_info" {
     block_cdgIG_info:
         const _cdgIG;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.88103549 UTC

[section ""data" . GHC.RTS.Flags.giveStats_closure" {
     GHC.RTS.Flags.giveStats_closure:
         const GHC.RTS.Flags.giveStats_info;
 },
 GHC.RTS.Flags.giveStats_entry() //  [R2]
         { []
         }
     {offset
       cdgJ9: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdgJa; else goto cdgJb;
       cdgJa: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.giveStats_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdgJb: // global
           I64[Sp - 8] = block_cdgJ6_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udgJf; else goto cdgJ7;
       udgJf: // global
           call _cdgJ6(R1) args: 0, res: 0, upd: 0;
       cdgJ7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.giveStats_info" {
     GHC.RTS.Flags.giveStats_info:
         const GHC.RTS.Flags.giveStats_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdgJ6() //  [R1]
         { []
         }
     {offset
       cdgJ6: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdgJ6_info" {
     block_cdgJ6_info:
         const _cdgJ6;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.886915005 UTC

[section ""data" . GHC.RTS.Flags.statsFile_closure" {
     GHC.RTS.Flags.statsFile_closure:
         const GHC.RTS.Flags.statsFile_info;
 },
 GHC.RTS.Flags.statsFile_entry() //  [R2]
         { []
         }
     {offset
       cdgJz: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdgJA; else goto cdgJB;
       cdgJA: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.statsFile_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdgJB: // global
           I64[Sp - 8] = block_cdgJw_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udgJF; else goto cdgJx;
       udgJF: // global
           call _cdgJw(R1) args: 0, res: 0, upd: 0;
       cdgJx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.statsFile_info" {
     GHC.RTS.Flags.statsFile_info:
         const GHC.RTS.Flags.statsFile_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdgJw() //  [R1]
         { []
         }
     {offset
       cdgJw: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdgJw_info" {
     block_cdgJw_info:
         const _cdgJw;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.892722995 UTC

[section ""data" . GHC.RTS.Flags.ctxtSwitchTicks_closure" {
     GHC.RTS.Flags.ctxtSwitchTicks_closure:
         const GHC.RTS.Flags.ctxtSwitchTicks_info;
 },
 GHC.RTS.Flags.ctxtSwitchTicks_entry() //  [R2]
         { []
         }
     {offset
       cdgJZ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdgK0; else goto cdgK1;
       cdgK0: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.ctxtSwitchTicks_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdgK1: // global
           I64[Sp - 8] = block_cdgJW_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udgK5; else goto cdgJX;
       udgK5: // global
           call _cdgJW(R1) args: 0, res: 0, upd: 0;
       cdgJX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.ctxtSwitchTicks_info" {
     GHC.RTS.Flags.ctxtSwitchTicks_info:
         const GHC.RTS.Flags.ctxtSwitchTicks_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdgJW() //  [R1]
         { []
         }
     {offset
       cdgJW: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdgJW_info" {
     block_cdgJW_info:
         const _cdgJW;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.898512516 UTC

[section ""data" . GHC.RTS.Flags.ctxtSwitchTime_closure" {
     GHC.RTS.Flags.ctxtSwitchTime_closure:
         const GHC.RTS.Flags.ctxtSwitchTime_info;
 },
 GHC.RTS.Flags.ctxtSwitchTime_entry() //  [R2]
         { []
         }
     {offset
       cdgKp: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdgKq; else goto cdgKr;
       cdgKq: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.ctxtSwitchTime_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdgKr: // global
           I64[Sp - 8] = block_cdgKm_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udgKv; else goto cdgKn;
       udgKv: // global
           call _cdgKm(R1) args: 0, res: 0, upd: 0;
       cdgKn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.ctxtSwitchTime_info" {
     GHC.RTS.Flags.ctxtSwitchTime_info:
         const GHC.RTS.Flags.ctxtSwitchTime_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdgKm() //  [R1]
         { []
         }
     {offset
       cdgKm: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdgKm_info" {
     block_cdgKm_info:
         const _cdgKm;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.90383621 UTC

[section ""data" . GHC.RTS.Flags.linkerMemBase_closure" {
     GHC.RTS.Flags.linkerMemBase_closure:
         const GHC.RTS.Flags.linkerMemBase_info;
 },
 GHC.RTS.Flags.linkerMemBase_entry() //  [R2]
         { []
         }
     {offset
       cdgKP: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdgKQ; else goto cdgKR;
       cdgKQ: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.linkerMemBase_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdgKR: // global
           I64[Sp - 8] = block_cdgKM_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udgKV; else goto cdgKN;
       udgKV: // global
           call _cdgKM(R1) args: 0, res: 0, upd: 0;
       cdgKN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.linkerMemBase_info" {
     GHC.RTS.Flags.linkerMemBase_info:
         const GHC.RTS.Flags.linkerMemBase_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdgKM() //  [R1]
         { []
         }
     {offset
       cdgKM: // global
           R1 = P64[R1 + 55] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdgKM_info" {
     block_cdgKM_info:
         const _cdgKM;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.909232364 UTC

[section ""data" . GHC.RTS.Flags.machineReadable_closure" {
     GHC.RTS.Flags.machineReadable_closure:
         const GHC.RTS.Flags.machineReadable_info;
 },
 GHC.RTS.Flags.machineReadable_entry() //  [R2]
         { []
         }
     {offset
       cdgLf: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdgLg; else goto cdgLh;
       cdgLg: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.machineReadable_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdgLh: // global
           I64[Sp - 8] = block_cdgLc_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udgLl; else goto cdgLd;
       udgLl: // global
           call _cdgLc(R1) args: 0, res: 0, upd: 0;
       cdgLd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.machineReadable_info" {
     GHC.RTS.Flags.machineReadable_info:
         const GHC.RTS.Flags.machineReadable_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdgLc() //  [R1]
         { []
         }
     {offset
       cdgLc: // global
           R1 = P64[R1 + 47] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdgLc_info" {
     block_cdgLc_info:
         const _cdgLc;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.915024728 UTC

[section ""data" . GHC.RTS.Flags.generateStackTrace_closure" {
     GHC.RTS.Flags.generateStackTrace_closure:
         const GHC.RTS.Flags.generateStackTrace_info;
 },
 GHC.RTS.Flags.generateStackTrace_entry() //  [R2]
         { []
         }
     {offset
       cdgLF: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdgLG; else goto cdgLH;
       cdgLG: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.generateStackTrace_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdgLH: // global
           I64[Sp - 8] = block_cdgLC_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udgLL; else goto cdgLD;
       udgLL: // global
           call _cdgLC(R1) args: 0, res: 0, upd: 0;
       cdgLD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.generateStackTrace_info" {
     GHC.RTS.Flags.generateStackTrace_info:
         const GHC.RTS.Flags.generateStackTrace_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdgLC() //  [R1]
         { []
         }
     {offset
       cdgLC: // global
           R1 = P64[R1 + 39] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdgLC_info" {
     block_cdgLC_info:
         const _cdgLC;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.920575448 UTC

[section ""data" . GHC.RTS.Flags.generateCrashDumpFile_closure" {
     GHC.RTS.Flags.generateCrashDumpFile_closure:
         const GHC.RTS.Flags.generateCrashDumpFile_info;
 },
 GHC.RTS.Flags.generateCrashDumpFile_entry() //  [R2]
         { []
         }
     {offset
       cdgM5: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdgM6; else goto cdgM7;
       cdgM6: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.generateCrashDumpFile_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdgM7: // global
           I64[Sp - 8] = block_cdgM2_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udgMb; else goto cdgM3;
       udgMb: // global
           call _cdgM2(R1) args: 0, res: 0, upd: 0;
       cdgM3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.generateCrashDumpFile_info" {
     GHC.RTS.Flags.generateCrashDumpFile_info:
         const GHC.RTS.Flags.generateCrashDumpFile_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdgM2() //  [R1]
         { []
         }
     {offset
       cdgM2: // global
           R1 = P64[R1 + 31] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdgM2_info" {
     block_cdgM2_info:
         const _cdgM2;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.926826211 UTC

[section ""data" . GHC.RTS.Flags.installSEHHandlers_closure" {
     GHC.RTS.Flags.installSEHHandlers_closure:
         const GHC.RTS.Flags.installSEHHandlers_info;
 },
 GHC.RTS.Flags.installSEHHandlers_entry() //  [R2]
         { []
         }
     {offset
       cdgMv: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdgMw; else goto cdgMx;
       cdgMw: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.installSEHHandlers_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdgMx: // global
           I64[Sp - 8] = block_cdgMs_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udgMB; else goto cdgMt;
       udgMB: // global
           call _cdgMs(R1) args: 0, res: 0, upd: 0;
       cdgMt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.installSEHHandlers_info" {
     GHC.RTS.Flags.installSEHHandlers_info:
         const GHC.RTS.Flags.installSEHHandlers_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdgMs() //  [R1]
         { []
         }
     {offset
       cdgMs: // global
           R1 = P64[R1 + 23] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdgMs_info" {
     block_cdgMs_info:
         const _cdgMs;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.932152162 UTC

[section ""data" . GHC.RTS.Flags.installSignalHandlers_closure" {
     GHC.RTS.Flags.installSignalHandlers_closure:
         const GHC.RTS.Flags.installSignalHandlers_info;
 },
 GHC.RTS.Flags.installSignalHandlers_entry() //  [R2]
         { []
         }
     {offset
       cdgMV: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdgMW; else goto cdgMX;
       cdgMW: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.installSignalHandlers_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdgMX: // global
           I64[Sp - 8] = block_cdgMS_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udgN1; else goto cdgMT;
       udgN1: // global
           call _cdgMS(R1) args: 0, res: 0, upd: 0;
       cdgMT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.installSignalHandlers_info" {
     GHC.RTS.Flags.installSignalHandlers_info:
         const GHC.RTS.Flags.installSignalHandlers_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdgMS() //  [R1]
         { []
         }
     {offset
       cdgMS: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdgMS_info" {
     block_cdgMS_info:
         const _cdgMS;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.937831668 UTC

[section ""data" . GHC.RTS.Flags.tickInterval_closure" {
     GHC.RTS.Flags.tickInterval_closure:
         const GHC.RTS.Flags.tickInterval_info;
 },
 GHC.RTS.Flags.tickInterval_entry() //  [R2]
         { []
         }
     {offset
       cdgNl: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdgNm; else goto cdgNn;
       cdgNm: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.tickInterval_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdgNn: // global
           I64[Sp - 8] = block_cdgNi_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udgNr; else goto cdgNj;
       udgNr: // global
           call _cdgNi(R1) args: 0, res: 0, upd: 0;
       cdgNj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.tickInterval_info" {
     GHC.RTS.Flags.tickInterval_info:
         const GHC.RTS.Flags.tickInterval_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdgNi() //  [R1]
         { []
         }
     {offset
       cdgNi: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdgNi_info" {
     block_cdgNi_info:
         const _cdgNi;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.943254127 UTC

[section ""data" . GHC.RTS.Flags.sparks_closure" {
     GHC.RTS.Flags.sparks_closure:
         const GHC.RTS.Flags.sparks_info;
 },
 GHC.RTS.Flags.sparks_entry() //  [R2]
         { []
         }
     {offset
       cdgNL: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdgNM; else goto cdgNN;
       cdgNM: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.sparks_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdgNN: // global
           I64[Sp - 8] = block_cdgNI_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udgNR; else goto cdgNJ;
       udgNR: // global
           call _cdgNI(R1) args: 0, res: 0, upd: 0;
       cdgNJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.sparks_info" {
     GHC.RTS.Flags.sparks_info:
         const GHC.RTS.Flags.sparks_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdgNI() //  [R1]
         { []
         }
     {offset
       cdgNI: // global
           R1 = P64[R1 + 119] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdgNI_info" {
     block_cdgNI_info:
         const _cdgNI;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.949037027 UTC

[section ""data" . GHC.RTS.Flags.hpc_closure" {
     GHC.RTS.Flags.hpc_closure:
         const GHC.RTS.Flags.hpc_info;
 },
 GHC.RTS.Flags.hpc_entry() //  [R2]
         { []
         }
     {offset
       cdgOb: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdgOc; else goto cdgOd;
       cdgOc: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.hpc_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdgOd: // global
           I64[Sp - 8] = block_cdgO8_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udgOh; else goto cdgO9;
       udgOh: // global
           call _cdgO8(R1) args: 0, res: 0, upd: 0;
       cdgO9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.hpc_info" {
     GHC.RTS.Flags.hpc_info:
         const GHC.RTS.Flags.hpc_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdgO8() //  [R1]
         { []
         }
     {offset
       cdgO8: // global
           R1 = P64[R1 + 111] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdgO8_info" {
     block_cdgO8_info:
         const _cdgO8;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.954507076 UTC

[section ""data" . GHC.RTS.Flags.squeeze_closure" {
     GHC.RTS.Flags.squeeze_closure:
         const GHC.RTS.Flags.squeeze_info;
 },
 GHC.RTS.Flags.squeeze_entry() //  [R2]
         { []
         }
     {offset
       cdgOB: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdgOC; else goto cdgOD;
       cdgOC: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.squeeze_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdgOD: // global
           I64[Sp - 8] = block_cdgOy_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udgOH; else goto cdgOz;
       udgOH: // global
           call _cdgOy(R1) args: 0, res: 0, upd: 0;
       cdgOz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.squeeze_info" {
     GHC.RTS.Flags.squeeze_info:
         const GHC.RTS.Flags.squeeze_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdgOy() //  [R1]
         { []
         }
     {offset
       cdgOy: // global
           R1 = P64[R1 + 103] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdgOy_info" {
     block_cdgOy_info:
         const _cdgOy;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.960855392 UTC

[section ""data" . GHC.RTS.Flags.stm_closure" {
     GHC.RTS.Flags.stm_closure:
         const GHC.RTS.Flags.stm_info;
 },
 GHC.RTS.Flags.stm_entry() //  [R2]
         { []
         }
     {offset
       cdgP1: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdgP2; else goto cdgP3;
       cdgP2: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.stm_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdgP3: // global
           I64[Sp - 8] = block_cdgOY_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udgP7; else goto cdgOZ;
       udgP7: // global
           call _cdgOY(R1) args: 0, res: 0, upd: 0;
       cdgOZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.stm_info" {
     GHC.RTS.Flags.stm_info:
         const GHC.RTS.Flags.stm_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdgOY() //  [R1]
         { []
         }
     {offset
       cdgOY: // global
           R1 = P64[R1 + 95] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdgOY_info" {
     block_cdgOY_info:
         const _cdgOY;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.96617197 UTC

[section ""data" . GHC.RTS.Flags.apply_closure" {
     GHC.RTS.Flags.apply_closure:
         const GHC.RTS.Flags.apply_info;
 },
 GHC.RTS.Flags.apply_entry() //  [R2]
         { []
         }
     {offset
       cdgPr: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdgPs; else goto cdgPt;
       cdgPs: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.apply_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdgPt: // global
           I64[Sp - 8] = block_cdgPo_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udgPx; else goto cdgPp;
       udgPx: // global
           call _cdgPo(R1) args: 0, res: 0, upd: 0;
       cdgPp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.apply_info" {
     GHC.RTS.Flags.apply_info:
         const GHC.RTS.Flags.apply_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdgPo() //  [R1]
         { []
         }
     {offset
       cdgPo: // global
           R1 = P64[R1 + 87] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdgPo_info" {
     block_cdgPo_info:
         const _cdgPo;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.971771957 UTC

[section ""data" . GHC.RTS.Flags.linker_closure" {
     GHC.RTS.Flags.linker_closure:
         const GHC.RTS.Flags.linker_info;
 },
 GHC.RTS.Flags.linker_entry() //  [R2]
         { []
         }
     {offset
       cdgPR: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdgPS; else goto cdgPT;
       cdgPS: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.linker_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdgPT: // global
           I64[Sp - 8] = block_cdgPO_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udgPX; else goto cdgPP;
       udgPX: // global
           call _cdgPO(R1) args: 0, res: 0, upd: 0;
       cdgPP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.linker_info" {
     GHC.RTS.Flags.linker_info:
         const GHC.RTS.Flags.linker_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdgPO() //  [R1]
         { []
         }
     {offset
       cdgPO: // global
           R1 = P64[R1 + 79] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdgPO_info" {
     block_cdgPO_info:
         const _cdgPO;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.97708199 UTC

[section ""data" . GHC.RTS.Flags.prof_closure" {
     GHC.RTS.Flags.prof_closure:
         const GHC.RTS.Flags.prof_info;
 },
 GHC.RTS.Flags.prof_entry() //  [R2]
         { []
         }
     {offset
       cdgQh: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdgQi; else goto cdgQj;
       cdgQi: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.prof_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdgQj: // global
           I64[Sp - 8] = block_cdgQe_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udgQn; else goto cdgQf;
       udgQn: // global
           call _cdgQe(R1) args: 0, res: 0, upd: 0;
       cdgQf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.prof_info" {
     GHC.RTS.Flags.prof_info:
         const GHC.RTS.Flags.prof_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdgQe() //  [R1]
         { []
         }
     {offset
       cdgQe: // global
           R1 = P64[R1 + 71] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdgQe_info" {
     block_cdgQe_info:
         const _cdgQe;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.982538028 UTC

[section ""data" . GHC.RTS.Flags.stable_closure" {
     GHC.RTS.Flags.stable_closure:
         const GHC.RTS.Flags.stable_info;
 },
 GHC.RTS.Flags.stable_entry() //  [R2]
         { []
         }
     {offset
       cdgQH: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdgQI; else goto cdgQJ;
       cdgQI: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.stable_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdgQJ: // global
           I64[Sp - 8] = block_cdgQE_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udgQN; else goto cdgQF;
       udgQN: // global
           call _cdgQE(R1) args: 0, res: 0, upd: 0;
       cdgQF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.stable_info" {
     GHC.RTS.Flags.stable_info:
         const GHC.RTS.Flags.stable_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdgQE() //  [R1]
         { []
         }
     {offset
       cdgQE: // global
           R1 = P64[R1 + 63] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdgQE_info" {
     block_cdgQE_info:
         const _cdgQE;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.988154195 UTC

[section ""data" . GHC.RTS.Flags.sanity_closure" {
     GHC.RTS.Flags.sanity_closure:
         const GHC.RTS.Flags.sanity_info;
 },
 GHC.RTS.Flags.sanity_entry() //  [R2]
         { []
         }
     {offset
       cdgR7: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdgR8; else goto cdgR9;
       cdgR8: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.sanity_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdgR9: // global
           I64[Sp - 8] = block_cdgR4_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udgRd; else goto cdgR5;
       udgRd: // global
           call _cdgR4(R1) args: 0, res: 0, upd: 0;
       cdgR5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.sanity_info" {
     GHC.RTS.Flags.sanity_info:
         const GHC.RTS.Flags.sanity_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdgR4() //  [R1]
         { []
         }
     {offset
       cdgR4: // global
           R1 = P64[R1 + 55] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdgR4_info" {
     block_cdgR4_info:
         const _cdgR4;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.99420789 UTC

[section ""data" . GHC.RTS.Flags.block_alloc_closure" {
     GHC.RTS.Flags.block_alloc_closure:
         const GHC.RTS.Flags.block_alloc_info;
 },
 GHC.RTS.Flags.block_alloc_entry() //  [R2]
         { []
         }
     {offset
       cdgRx: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdgRy; else goto cdgRz;
       cdgRy: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.block_alloc_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdgRz: // global
           I64[Sp - 8] = block_cdgRu_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udgRD; else goto cdgRv;
       udgRD: // global
           call _cdgRu(R1) args: 0, res: 0, upd: 0;
       cdgRv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.block_alloc_info" {
     GHC.RTS.Flags.block_alloc_info:
         const GHC.RTS.Flags.block_alloc_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdgRu() //  [R1]
         { []
         }
     {offset
       cdgRu: // global
           R1 = P64[R1 + 47] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdgRu_info" {
     block_cdgRu_info:
         const _cdgRu;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:28.999798649 UTC

[section ""data" . GHC.RTS.Flags.gc_closure" {
     GHC.RTS.Flags.gc_closure:
         const GHC.RTS.Flags.gc_info;
 },
 GHC.RTS.Flags.gc_entry() //  [R2]
         { []
         }
     {offset
       cdgRX: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdgRY; else goto cdgRZ;
       cdgRY: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.gc_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdgRZ: // global
           I64[Sp - 8] = block_cdgRU_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udgS3; else goto cdgRV;
       udgS3: // global
           call _cdgRU(R1) args: 0, res: 0, upd: 0;
       cdgRV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.gc_info" {
     GHC.RTS.Flags.gc_info:
         const GHC.RTS.Flags.gc_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdgRU() //  [R1]
         { []
         }
     {offset
       cdgRU: // global
           R1 = P64[R1 + 39] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdgRU_info" {
     block_cdgRU_info:
         const _cdgRU;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.005025301 UTC

[section ""data" . GHC.RTS.Flags.gccafs_closure" {
     GHC.RTS.Flags.gccafs_closure:
         const GHC.RTS.Flags.gccafs_info;
 },
 GHC.RTS.Flags.gccafs_entry() //  [R2]
         { []
         }
     {offset
       cdgSn: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdgSo; else goto cdgSp;
       cdgSo: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.gccafs_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdgSp: // global
           I64[Sp - 8] = block_cdgSk_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udgSt; else goto cdgSl;
       udgSt: // global
           call _cdgSk(R1) args: 0, res: 0, upd: 0;
       cdgSl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.gccafs_info" {
     GHC.RTS.Flags.gccafs_info:
         const GHC.RTS.Flags.gccafs_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdgSk() //  [R1]
         { []
         }
     {offset
       cdgSk: // global
           R1 = P64[R1 + 31] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdgSk_info" {
     block_cdgSk_info:
         const _cdgSk;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.010258736 UTC

[section ""data" . GHC.RTS.Flags.weak_closure" {
     GHC.RTS.Flags.weak_closure:
         const GHC.RTS.Flags.weak_info;
 },
 GHC.RTS.Flags.weak_entry() //  [R2]
         { []
         }
     {offset
       cdgSN: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdgSO; else goto cdgSP;
       cdgSO: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.weak_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdgSP: // global
           I64[Sp - 8] = block_cdgSK_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udgST; else goto cdgSL;
       udgST: // global
           call _cdgSK(R1) args: 0, res: 0, upd: 0;
       cdgSL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.weak_info" {
     GHC.RTS.Flags.weak_info:
         const GHC.RTS.Flags.weak_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdgSK() //  [R1]
         { []
         }
     {offset
       cdgSK: // global
           R1 = P64[R1 + 23] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdgSK_info" {
     block_cdgSK_info:
         const _cdgSK;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.015894606 UTC

[section ""data" . GHC.RTS.Flags.interpreter_closure" {
     GHC.RTS.Flags.interpreter_closure:
         const GHC.RTS.Flags.interpreter_info;
 },
 GHC.RTS.Flags.interpreter_entry() //  [R2]
         { []
         }
     {offset
       cdgTd: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdgTe; else goto cdgTf;
       cdgTe: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.interpreter_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdgTf: // global
           I64[Sp - 8] = block_cdgTa_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udgTj; else goto cdgTb;
       udgTj: // global
           call _cdgTa(R1) args: 0, res: 0, upd: 0;
       cdgTb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.interpreter_info" {
     GHC.RTS.Flags.interpreter_info:
         const GHC.RTS.Flags.interpreter_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdgTa() //  [R1]
         { []
         }
     {offset
       cdgTa: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdgTa_info" {
     block_cdgTa_info:
         const _cdgTa;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.021270132 UTC

[section ""data" . GHC.RTS.Flags.scheduler_closure" {
     GHC.RTS.Flags.scheduler_closure:
         const GHC.RTS.Flags.scheduler_info;
 },
 GHC.RTS.Flags.scheduler_entry() //  [R2]
         { []
         }
     {offset
       cdgTD: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdgTE; else goto cdgTF;
       cdgTE: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.scheduler_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdgTF: // global
           I64[Sp - 8] = block_cdgTA_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udgTJ; else goto cdgTB;
       udgTJ: // global
           call _cdgTA(R1) args: 0, res: 0, upd: 0;
       cdgTB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.scheduler_info" {
     GHC.RTS.Flags.scheduler_info:
         const GHC.RTS.Flags.scheduler_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdgTA() //  [R1]
         { []
         }
     {offset
       cdgTA: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdgTA_info" {
     block_cdgTA_info:
         const _cdgTA;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.027176482 UTC

[section ""data" . GHC.RTS.Flags.msecsPerTick_closure" {
     GHC.RTS.Flags.msecsPerTick_closure:
         const GHC.RTS.Flags.msecsPerTick_info;
 },
 GHC.RTS.Flags.msecsPerTick_entry() //  [R2]
         { []
         }
     {offset
       cdgU3: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdgU4; else goto cdgU5;
       cdgU4: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.msecsPerTick_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdgU5: // global
           I64[Sp - 8] = block_cdgU0_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udgU9; else goto cdgU1;
       udgU9: // global
           call _cdgU0(R1) args: 0, res: 0, upd: 0;
       cdgU1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.msecsPerTick_info" {
     GHC.RTS.Flags.msecsPerTick_info:
         const GHC.RTS.Flags.msecsPerTick_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdgU0() //  [R1]
         { []
         }
     {offset
       cdgU0: // global
           R1 = P64[R1 + 23] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdgU0_info" {
     block_cdgU0_info:
         const _cdgU0;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.03275469 UTC

[section ""data" . GHC.RTS.Flags.profilerTicks_closure" {
     GHC.RTS.Flags.profilerTicks_closure:
         const GHC.RTS.Flags.profilerTicks_info;
 },
 GHC.RTS.Flags.profilerTicks_entry() //  [R2]
         { []
         }
     {offset
       cdgUt: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdgUu; else goto cdgUv;
       cdgUu: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.profilerTicks_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdgUv: // global
           I64[Sp - 8] = block_cdgUq_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udgUz; else goto cdgUr;
       udgUz: // global
           call _cdgUq(R1) args: 0, res: 0, upd: 0;
       cdgUr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.profilerTicks_info" {
     GHC.RTS.Flags.profilerTicks_info:
         const GHC.RTS.Flags.profilerTicks_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdgUq() //  [R1]
         { []
         }
     {offset
       cdgUq: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdgUq_info" {
     block_cdgUq_info:
         const _cdgUq;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.037941169 UTC

[section ""data" . GHC.RTS.Flags.doCostCentres_closure" {
     GHC.RTS.Flags.doCostCentres_closure:
         const GHC.RTS.Flags.doCostCentres_info;
 },
 GHC.RTS.Flags.doCostCentres_entry() //  [R2]
         { []
         }
     {offset
       cdgUT: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdgUU; else goto cdgUV;
       cdgUU: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.doCostCentres_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdgUV: // global
           I64[Sp - 8] = block_cdgUQ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udgUZ; else goto cdgUR;
       udgUZ: // global
           call _cdgUQ(R1) args: 0, res: 0, upd: 0;
       cdgUR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.doCostCentres_info" {
     GHC.RTS.Flags.doCostCentres_info:
         const GHC.RTS.Flags.doCostCentres_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdgUQ() //  [R1]
         { []
         }
     {offset
       cdgUQ: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdgUQ_info" {
     block_cdgUQ_info:
         const _cdgUQ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.043314925 UTC

[section ""data" . GHC.RTS.Flags.bioSelector_closure" {
     GHC.RTS.Flags.bioSelector_closure:
         const GHC.RTS.Flags.bioSelector_info;
 },
 GHC.RTS.Flags.bioSelector_entry() //  [R2]
         { []
         }
     {offset
       cdgVj: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdgVk; else goto cdgVl;
       cdgVk: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.bioSelector_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdgVl: // global
           I64[Sp - 8] = block_cdgVg_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udgVp; else goto cdgVh;
       udgVp: // global
           call _cdgVg(R1) args: 0, res: 0, upd: 0;
       cdgVh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.bioSelector_info" {
     GHC.RTS.Flags.bioSelector_info:
         const GHC.RTS.Flags.bioSelector_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdgVg() //  [R1]
         { []
         }
     {offset
       cdgVg: // global
           R1 = P64[R1 + 111] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdgVg_info" {
     block_cdgVg_info:
         const _cdgVg;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.04872839 UTC

[section ""data" . GHC.RTS.Flags.retainerSelector_closure" {
     GHC.RTS.Flags.retainerSelector_closure:
         const GHC.RTS.Flags.retainerSelector_info;
 },
 GHC.RTS.Flags.retainerSelector_entry() //  [R2]
         { []
         }
     {offset
       cdgVJ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdgVK; else goto cdgVL;
       cdgVK: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.retainerSelector_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdgVL: // global
           I64[Sp - 8] = block_cdgVG_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udgVP; else goto cdgVH;
       udgVP: // global
           call _cdgVG(R1) args: 0, res: 0, upd: 0;
       cdgVH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.retainerSelector_info" {
     GHC.RTS.Flags.retainerSelector_info:
         const GHC.RTS.Flags.retainerSelector_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdgVG() //  [R1]
         { []
         }
     {offset
       cdgVG: // global
           R1 = P64[R1 + 103] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdgVG_info" {
     block_cdgVG_info:
         const _cdgVG;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.05455411 UTC

[section ""data" . GHC.RTS.Flags.ccsSelector_closure" {
     GHC.RTS.Flags.ccsSelector_closure:
         const GHC.RTS.Flags.ccsSelector_info;
 },
 GHC.RTS.Flags.ccsSelector_entry() //  [R2]
         { []
         }
     {offset
       cdgW9: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdgWa; else goto cdgWb;
       cdgWa: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.ccsSelector_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdgWb: // global
           I64[Sp - 8] = block_cdgW6_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udgWf; else goto cdgW7;
       udgWf: // global
           call _cdgW6(R1) args: 0, res: 0, upd: 0;
       cdgW7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.ccsSelector_info" {
     GHC.RTS.Flags.ccsSelector_info:
         const GHC.RTS.Flags.ccsSelector_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdgW6() //  [R1]
         { []
         }
     {offset
       cdgW6: // global
           R1 = P64[R1 + 95] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdgW6_info" {
     block_cdgW6_info:
         const _cdgW6;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.060750633 UTC

[section ""data" . GHC.RTS.Flags.ccSelector_closure" {
     GHC.RTS.Flags.ccSelector_closure:
         const GHC.RTS.Flags.ccSelector_info;
 },
 GHC.RTS.Flags.ccSelector_entry() //  [R2]
         { []
         }
     {offset
       cdgWz: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdgWA; else goto cdgWB;
       cdgWA: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.ccSelector_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdgWB: // global
           I64[Sp - 8] = block_cdgWw_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udgWF; else goto cdgWx;
       udgWF: // global
           call _cdgWw(R1) args: 0, res: 0, upd: 0;
       cdgWx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.ccSelector_info" {
     GHC.RTS.Flags.ccSelector_info:
         const GHC.RTS.Flags.ccSelector_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdgWw() //  [R1]
         { []
         }
     {offset
       cdgWw: // global
           R1 = P64[R1 + 87] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdgWw_info" {
     block_cdgWw_info:
         const _cdgWw;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.066011487 UTC

[section ""data" . GHC.RTS.Flags.typeSelector_closure" {
     GHC.RTS.Flags.typeSelector_closure:
         const GHC.RTS.Flags.typeSelector_info;
 },
 GHC.RTS.Flags.typeSelector_entry() //  [R2]
         { []
         }
     {offset
       cdgWZ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdgX0; else goto cdgX1;
       cdgX0: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.typeSelector_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdgX1: // global
           I64[Sp - 8] = block_cdgWW_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udgX5; else goto cdgWX;
       udgX5: // global
           call _cdgWW(R1) args: 0, res: 0, upd: 0;
       cdgWX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.typeSelector_info" {
     GHC.RTS.Flags.typeSelector_info:
         const GHC.RTS.Flags.typeSelector_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdgWW() //  [R1]
         { []
         }
     {offset
       cdgWW: // global
           R1 = P64[R1 + 79] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdgWW_info" {
     block_cdgWW_info:
         const _cdgWW;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.071352357 UTC

[section ""data" . GHC.RTS.Flags.descrSelector_closure" {
     GHC.RTS.Flags.descrSelector_closure:
         const GHC.RTS.Flags.descrSelector_info;
 },
 GHC.RTS.Flags.descrSelector_entry() //  [R2]
         { []
         }
     {offset
       cdgXp: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdgXq; else goto cdgXr;
       cdgXq: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.descrSelector_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdgXr: // global
           I64[Sp - 8] = block_cdgXm_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udgXv; else goto cdgXn;
       udgXv: // global
           call _cdgXm(R1) args: 0, res: 0, upd: 0;
       cdgXn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.descrSelector_info" {
     GHC.RTS.Flags.descrSelector_info:
         const GHC.RTS.Flags.descrSelector_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdgXm() //  [R1]
         { []
         }
     {offset
       cdgXm: // global
           R1 = P64[R1 + 71] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdgXm_info" {
     block_cdgXm_info:
         const _cdgXm;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.077206872 UTC

[section ""data" . GHC.RTS.Flags.modSelector_closure" {
     GHC.RTS.Flags.modSelector_closure:
         const GHC.RTS.Flags.modSelector_info;
 },
 GHC.RTS.Flags.modSelector_entry() //  [R2]
         { []
         }
     {offset
       cdgXP: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdgXQ; else goto cdgXR;
       cdgXQ: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.modSelector_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdgXR: // global
           I64[Sp - 8] = block_cdgXM_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udgXV; else goto cdgXN;
       udgXV: // global
           call _cdgXM(R1) args: 0, res: 0, upd: 0;
       cdgXN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.modSelector_info" {
     GHC.RTS.Flags.modSelector_info:
         const GHC.RTS.Flags.modSelector_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdgXM() //  [R1]
         { []
         }
     {offset
       cdgXM: // global
           R1 = P64[R1 + 63] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdgXM_info" {
     block_cdgXM_info:
         const _cdgXM;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.082550156 UTC

[section ""data" . GHC.RTS.Flags.ccsLength_closure" {
     GHC.RTS.Flags.ccsLength_closure:
         const GHC.RTS.Flags.ccsLength_info;
 },
 GHC.RTS.Flags.ccsLength_entry() //  [R2]
         { []
         }
     {offset
       cdgYf: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdgYg; else goto cdgYh;
       cdgYg: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.ccsLength_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdgYh: // global
           I64[Sp - 8] = block_cdgYc_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udgYl; else goto cdgYd;
       udgYl: // global
           call _cdgYc(R1) args: 0, res: 0, upd: 0;
       cdgYd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.ccsLength_info" {
     GHC.RTS.Flags.ccsLength_info:
         const GHC.RTS.Flags.ccsLength_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdgYc() //  [R1]
         { []
         }
     {offset
       cdgYc: // global
           R1 = P64[R1 + 55] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdgYc_info" {
     block_cdgYc_info:
         const _cdgYc;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.088426818 UTC

[section ""data" . GHC.RTS.Flags.maxRetainerSetSize_closure" {
     GHC.RTS.Flags.maxRetainerSetSize_closure:
         const GHC.RTS.Flags.maxRetainerSetSize_info;
 },
 GHC.RTS.Flags.maxRetainerSetSize_entry() //  [R2]
         { []
         }
     {offset
       cdgYF: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdgYG; else goto cdgYH;
       cdgYG: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.maxRetainerSetSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdgYH: // global
           I64[Sp - 8] = block_cdgYC_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udgYL; else goto cdgYD;
       udgYL: // global
           call _cdgYC(R1) args: 0, res: 0, upd: 0;
       cdgYD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.maxRetainerSetSize_info" {
     GHC.RTS.Flags.maxRetainerSetSize_info:
         const GHC.RTS.Flags.maxRetainerSetSize_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdgYC() //  [R1]
         { []
         }
     {offset
       cdgYC: // global
           R1 = P64[R1 + 47] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdgYC_info" {
     block_cdgYC_info:
         const _cdgYC;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.094340618 UTC

[section ""data" . GHC.RTS.Flags.showCCSOnException_closure" {
     GHC.RTS.Flags.showCCSOnException_closure:
         const GHC.RTS.Flags.showCCSOnException_info;
 },
 GHC.RTS.Flags.showCCSOnException_entry() //  [R2]
         { []
         }
     {offset
       cdgZ5: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdgZ6; else goto cdgZ7;
       cdgZ6: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.showCCSOnException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdgZ7: // global
           I64[Sp - 8] = block_cdgZ2_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udgZb; else goto cdgZ3;
       udgZb: // global
           call _cdgZ2(R1) args: 0, res: 0, upd: 0;
       cdgZ3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.showCCSOnException_info" {
     GHC.RTS.Flags.showCCSOnException_info:
         const GHC.RTS.Flags.showCCSOnException_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdgZ2() //  [R1]
         { []
         }
     {offset
       cdgZ2: // global
           R1 = P64[R1 + 39] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdgZ2_info" {
     block_cdgZ2_info:
         const _cdgZ2;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.099617576 UTC

[section ""data" . GHC.RTS.Flags.includeTSOs_closure" {
     GHC.RTS.Flags.includeTSOs_closure:
         const GHC.RTS.Flags.includeTSOs_info;
 },
 GHC.RTS.Flags.includeTSOs_entry() //  [R2]
         { []
         }
     {offset
       cdgZv: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdgZw; else goto cdgZx;
       cdgZw: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.includeTSOs_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdgZx: // global
           I64[Sp - 8] = block_cdgZs_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udgZB; else goto cdgZt;
       udgZB: // global
           call _cdgZs(R1) args: 0, res: 0, upd: 0;
       cdgZt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.includeTSOs_info" {
     GHC.RTS.Flags.includeTSOs_info:
         const GHC.RTS.Flags.includeTSOs_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdgZs() //  [R1]
         { []
         }
     {offset
       cdgZs: // global
           R1 = P64[R1 + 31] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdgZs_info" {
     block_cdgZs_info:
         const _cdgZs;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.104846418 UTC

[section ""data" . GHC.RTS.Flags.heapProfileIntervalTicks_closure" {
     GHC.RTS.Flags.heapProfileIntervalTicks_closure:
         const GHC.RTS.Flags.heapProfileIntervalTicks_info;
 },
 GHC.RTS.Flags.heapProfileIntervalTicks_entry() //  [R2]
         { []
         }
     {offset
       cdgZV: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdgZW; else goto cdgZX;
       cdgZW: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.heapProfileIntervalTicks_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdgZX: // global
           I64[Sp - 8] = block_cdgZS_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udh01; else goto cdgZT;
       udh01: // global
           call _cdgZS(R1) args: 0, res: 0, upd: 0;
       cdgZT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.heapProfileIntervalTicks_info" {
     GHC.RTS.Flags.heapProfileIntervalTicks_info:
         const GHC.RTS.Flags.heapProfileIntervalTicks_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdgZS() //  [R1]
         { []
         }
     {offset
       cdgZS: // global
           R1 = P64[R1 + 23] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdgZS_info" {
     block_cdgZS_info:
         const _cdgZS;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.110457522 UTC

[section ""data" . GHC.RTS.Flags.heapProfileInterval_closure" {
     GHC.RTS.Flags.heapProfileInterval_closure:
         const GHC.RTS.Flags.heapProfileInterval_info;
 },
 GHC.RTS.Flags.heapProfileInterval_entry() //  [R2]
         { []
         }
     {offset
       cdh0l: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdh0m; else goto cdh0n;
       cdh0m: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.heapProfileInterval_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdh0n: // global
           I64[Sp - 8] = block_cdh0i_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udh0r; else goto cdh0j;
       udh0r: // global
           call _cdh0i(R1) args: 0, res: 0, upd: 0;
       cdh0j: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.heapProfileInterval_info" {
     GHC.RTS.Flags.heapProfileInterval_info:
         const GHC.RTS.Flags.heapProfileInterval_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdh0i() //  [R1]
         { []
         }
     {offset
       cdh0i: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdh0i_info" {
     block_cdh0i_info:
         const _cdh0i;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.11585049 UTC

[section ""data" . GHC.RTS.Flags.doHeapProfile_closure" {
     GHC.RTS.Flags.doHeapProfile_closure:
         const GHC.RTS.Flags.doHeapProfile_info;
 },
 GHC.RTS.Flags.doHeapProfile_entry() //  [R2]
         { []
         }
     {offset
       cdh0L: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdh0M; else goto cdh0N;
       cdh0M: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.doHeapProfile_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdh0N: // global
           I64[Sp - 8] = block_cdh0I_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udh0R; else goto cdh0J;
       udh0R: // global
           call _cdh0I(R1) args: 0, res: 0, upd: 0;
       cdh0J: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.doHeapProfile_info" {
     GHC.RTS.Flags.doHeapProfile_info:
         const GHC.RTS.Flags.doHeapProfile_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdh0I() //  [R1]
         { []
         }
     {offset
       cdh0I: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdh0I_info" {
     block_cdh0I_info:
         const _cdh0I;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.121823127 UTC

[section ""data" . GHC.RTS.Flags.user_closure" {
     GHC.RTS.Flags.user_closure:
         const GHC.RTS.Flags.user_info;
 },
 GHC.RTS.Flags.user_entry() //  [R2]
         { []
         }
     {offset
       cdh1b: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdh1c; else goto cdh1d;
       cdh1c: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.user_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdh1d: // global
           I64[Sp - 8] = block_cdh18_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udh1h; else goto cdh19;
       udh1h: // global
           call _cdh18(R1) args: 0, res: 0, upd: 0;
       cdh19: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.user_info" {
     GHC.RTS.Flags.user_info:
         const GHC.RTS.Flags.user_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdh18() //  [R1]
         { []
         }
     {offset
       cdh18: // global
           R1 = P64[R1 + 55] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdh18_info" {
     block_cdh18_info:
         const _cdh18;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.12777919 UTC

[section ""data" . GHC.RTS.Flags.sparksFull_closure" {
     GHC.RTS.Flags.sparksFull_closure:
         const GHC.RTS.Flags.sparksFull_info;
 },
 GHC.RTS.Flags.sparksFull_entry() //  [R2]
         { []
         }
     {offset
       cdh1B: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdh1C; else goto cdh1D;
       cdh1C: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.sparksFull_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdh1D: // global
           I64[Sp - 8] = block_cdh1y_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udh1H; else goto cdh1z;
       udh1H: // global
           call _cdh1y(R1) args: 0, res: 0, upd: 0;
       cdh1z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.sparksFull_info" {
     GHC.RTS.Flags.sparksFull_info:
         const GHC.RTS.Flags.sparksFull_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdh1y() //  [R1]
         { []
         }
     {offset
       cdh1y: // global
           R1 = P64[R1 + 47] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdh1y_info" {
     block_cdh1y_info:
         const _cdh1y;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.133164043 UTC

[section ""data" . GHC.RTS.Flags.sparksSampled_closure" {
     GHC.RTS.Flags.sparksSampled_closure:
         const GHC.RTS.Flags.sparksSampled_info;
 },
 GHC.RTS.Flags.sparksSampled_entry() //  [R2]
         { []
         }
     {offset
       cdh21: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdh22; else goto cdh23;
       cdh22: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.sparksSampled_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdh23: // global
           I64[Sp - 8] = block_cdh1Y_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udh27; else goto cdh1Z;
       udh27: // global
           call _cdh1Y(R1) args: 0, res: 0, upd: 0;
       cdh1Z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.sparksSampled_info" {
     GHC.RTS.Flags.sparksSampled_info:
         const GHC.RTS.Flags.sparksSampled_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdh1Y() //  [R1]
         { []
         }
     {offset
       cdh1Y: // global
           R1 = P64[R1 + 39] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdh1Y_info" {
     block_cdh1Y_info:
         const _cdh1Y;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.138736796 UTC

[section ""data" . GHC.RTS.Flags.traceGc_closure" {
     GHC.RTS.Flags.traceGc_closure:
         const GHC.RTS.Flags.traceGc_info;
 },
 GHC.RTS.Flags.traceGc_entry() //  [R2]
         { []
         }
     {offset
       cdh2r: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdh2s; else goto cdh2t;
       cdh2s: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.traceGc_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdh2t: // global
           I64[Sp - 8] = block_cdh2o_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udh2x; else goto cdh2p;
       udh2x: // global
           call _cdh2o(R1) args: 0, res: 0, upd: 0;
       cdh2p: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.traceGc_info" {
     GHC.RTS.Flags.traceGc_info:
         const GHC.RTS.Flags.traceGc_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdh2o() //  [R1]
         { []
         }
     {offset
       cdh2o: // global
           R1 = P64[R1 + 31] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdh2o_info" {
     block_cdh2o_info:
         const _cdh2o;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.143939823 UTC

[section ""data" . GHC.RTS.Flags.traceScheduler_closure" {
     GHC.RTS.Flags.traceScheduler_closure:
         const GHC.RTS.Flags.traceScheduler_info;
 },
 GHC.RTS.Flags.traceScheduler_entry() //  [R2]
         { []
         }
     {offset
       cdh2R: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdh2S; else goto cdh2T;
       cdh2S: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.traceScheduler_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdh2T: // global
           I64[Sp - 8] = block_cdh2O_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udh2X; else goto cdh2P;
       udh2X: // global
           call _cdh2O(R1) args: 0, res: 0, upd: 0;
       cdh2P: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.traceScheduler_info" {
     GHC.RTS.Flags.traceScheduler_info:
         const GHC.RTS.Flags.traceScheduler_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdh2O() //  [R1]
         { []
         }
     {offset
       cdh2O: // global
           R1 = P64[R1 + 23] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdh2O_info" {
     block_cdh2O_info:
         const _cdh2O;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.149657386 UTC

[section ""data" . GHC.RTS.Flags.timestamp_closure" {
     GHC.RTS.Flags.timestamp_closure:
         const GHC.RTS.Flags.timestamp_info;
 },
 GHC.RTS.Flags.timestamp_entry() //  [R2]
         { []
         }
     {offset
       cdh3h: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdh3i; else goto cdh3j;
       cdh3i: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.timestamp_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdh3j: // global
           I64[Sp - 8] = block_cdh3e_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udh3n; else goto cdh3f;
       udh3n: // global
           call _cdh3e(R1) args: 0, res: 0, upd: 0;
       cdh3f: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.timestamp_info" {
     GHC.RTS.Flags.timestamp_info:
         const GHC.RTS.Flags.timestamp_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdh3e() //  [R1]
         { []
         }
     {offset
       cdh3e: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdh3e_info" {
     block_cdh3e_info:
         const _cdh3e;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.155124489 UTC

[section ""data" . GHC.RTS.Flags.tracing_closure" {
     GHC.RTS.Flags.tracing_closure:
         const GHC.RTS.Flags.tracing_info;
 },
 GHC.RTS.Flags.tracing_entry() //  [R2]
         { []
         }
     {offset
       cdh3H: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdh3I; else goto cdh3J;
       cdh3I: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.tracing_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdh3J: // global
           I64[Sp - 8] = block_cdh3E_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udh3N; else goto cdh3F;
       udh3N: // global
           call _cdh3E(R1) args: 0, res: 0, upd: 0;
       cdh3F: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.tracing_info" {
     GHC.RTS.Flags.tracing_info:
         const GHC.RTS.Flags.tracing_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdh3E() //  [R1]
         { []
         }
     {offset
       cdh3E: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdh3E_info" {
     block_cdh3E_info:
         const _cdh3E;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.160776675 UTC

[section ""data" . GHC.RTS.Flags.tickyFile_closure" {
     GHC.RTS.Flags.tickyFile_closure:
         const GHC.RTS.Flags.tickyFile_info;
 },
 GHC.RTS.Flags.tickyFile_entry() //  [R2]
         { []
         }
     {offset
       cdh47: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdh48; else goto cdh49;
       cdh48: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.tickyFile_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdh49: // global
           I64[Sp - 8] = block_cdh44_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udh4d; else goto cdh45;
       udh4d: // global
           call _cdh44(R1) args: 0, res: 0, upd: 0;
       cdh45: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.tickyFile_info" {
     GHC.RTS.Flags.tickyFile_info:
         const GHC.RTS.Flags.tickyFile_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdh44() //  [R1]
         { []
         }
     {offset
       cdh44: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdh44_info" {
     block_cdh44_info:
         const _cdh44;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.166760412 UTC

[section ""data" . GHC.RTS.Flags.showTickyStats_closure" {
     GHC.RTS.Flags.showTickyStats_closure:
         const GHC.RTS.Flags.showTickyStats_info;
 },
 GHC.RTS.Flags.showTickyStats_entry() //  [R2]
         { []
         }
     {offset
       cdh4x: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdh4y; else goto cdh4z;
       cdh4y: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.showTickyStats_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdh4z: // global
           I64[Sp - 8] = block_cdh4u_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udh4D; else goto cdh4v;
       udh4D: // global
           call _cdh4u(R1) args: 0, res: 0, upd: 0;
       cdh4v: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.showTickyStats_info" {
     GHC.RTS.Flags.showTickyStats_info:
         const GHC.RTS.Flags.showTickyStats_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdh4u() //  [R1]
         { []
         }
     {offset
       cdh4u: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdh4u_info" {
     block_cdh4u_info:
         const _cdh4u;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.172055084 UTC

[section ""data" . GHC.RTS.Flags.setAffinity_closure" {
     GHC.RTS.Flags.setAffinity_closure:
         const GHC.RTS.Flags.setAffinity_info;
 },
 GHC.RTS.Flags.setAffinity_entry() //  [R2]
         { []
         }
     {offset
       cdh4X: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdh4Y; else goto cdh4Z;
       cdh4Y: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.setAffinity_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdh4Z: // global
           I64[Sp - 8] = block_cdh4U_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udh53; else goto cdh4V;
       udh53: // global
           call _cdh4U(R1) args: 0, res: 0, upd: 0;
       cdh4V: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.setAffinity_info" {
     GHC.RTS.Flags.setAffinity_info:
         const GHC.RTS.Flags.setAffinity_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdh4U() //  [R1]
         { []
         }
     {offset
       cdh4U: // global
           R1 = P64[R1 + 79] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdh4U_info" {
     block_cdh4U_info:
         const _cdh4U;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.17773591 UTC

[section ""data" . GHC.RTS.Flags.parGcThreads_closure" {
     GHC.RTS.Flags.parGcThreads_closure:
         const GHC.RTS.Flags.parGcThreads_info;
 },
 GHC.RTS.Flags.parGcThreads_entry() //  [R2]
         { []
         }
     {offset
       cdh5n: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdh5o; else goto cdh5p;
       cdh5o: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.parGcThreads_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdh5p: // global
           I64[Sp - 8] = block_cdh5k_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udh5t; else goto cdh5l;
       udh5t: // global
           call _cdh5k(R1) args: 0, res: 0, upd: 0;
       cdh5l: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.parGcThreads_info" {
     GHC.RTS.Flags.parGcThreads_info:
         const GHC.RTS.Flags.parGcThreads_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdh5k() //  [R1]
         { []
         }
     {offset
       cdh5k: // global
           R1 = P64[R1 + 71] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdh5k_info" {
     block_cdh5k_info:
         const _cdh5k;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.183212537 UTC

[section ""data" . GHC.RTS.Flags.parGcNoSyncWithIdle_closure" {
     GHC.RTS.Flags.parGcNoSyncWithIdle_closure:
         const GHC.RTS.Flags.parGcNoSyncWithIdle_info;
 },
 GHC.RTS.Flags.parGcNoSyncWithIdle_entry() //  [R2]
         { []
         }
     {offset
       cdh5N: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdh5O; else goto cdh5P;
       cdh5O: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.parGcNoSyncWithIdle_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdh5P: // global
           I64[Sp - 8] = block_cdh5K_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udh5T; else goto cdh5L;
       udh5T: // global
           call _cdh5K(R1) args: 0, res: 0, upd: 0;
       cdh5L: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.parGcNoSyncWithIdle_info" {
     GHC.RTS.Flags.parGcNoSyncWithIdle_info:
         const GHC.RTS.Flags.parGcNoSyncWithIdle_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdh5K() //  [R1]
         { []
         }
     {offset
       cdh5K: // global
           R1 = P64[R1 + 63] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdh5K_info" {
     block_cdh5K_info:
         const _cdh5K;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.188563874 UTC

[section ""data" . GHC.RTS.Flags.parGcLoadBalancingGen_closure" {
     GHC.RTS.Flags.parGcLoadBalancingGen_closure:
         const GHC.RTS.Flags.parGcLoadBalancingGen_info;
 },
 GHC.RTS.Flags.parGcLoadBalancingGen_entry() //  [R2]
         { []
         }
     {offset
       cdh6d: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdh6e; else goto cdh6f;
       cdh6e: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.parGcLoadBalancingGen_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdh6f: // global
           I64[Sp - 8] = block_cdh6a_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udh6j; else goto cdh6b;
       udh6j: // global
           call _cdh6a(R1) args: 0, res: 0, upd: 0;
       cdh6b: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.parGcLoadBalancingGen_info" {
     GHC.RTS.Flags.parGcLoadBalancingGen_info:
         const GHC.RTS.Flags.parGcLoadBalancingGen_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdh6a() //  [R1]
         { []
         }
     {offset
       cdh6a: // global
           R1 = P64[R1 + 55] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdh6a_info" {
     block_cdh6a_info:
         const _cdh6a;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.194169827 UTC

[section ""data" . GHC.RTS.Flags.parGcLoadBalancingEnabled_closure" {
     GHC.RTS.Flags.parGcLoadBalancingEnabled_closure:
         const GHC.RTS.Flags.parGcLoadBalancingEnabled_info;
 },
 GHC.RTS.Flags.parGcLoadBalancingEnabled_entry() //  [R2]
         { []
         }
     {offset
       cdh6D: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdh6E; else goto cdh6F;
       cdh6E: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.parGcLoadBalancingEnabled_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdh6F: // global
           I64[Sp - 8] = block_cdh6A_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udh6J; else goto cdh6B;
       udh6J: // global
           call _cdh6A(R1) args: 0, res: 0, upd: 0;
       cdh6B: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.parGcLoadBalancingEnabled_info" {
     GHC.RTS.Flags.parGcLoadBalancingEnabled_info:
         const GHC.RTS.Flags.parGcLoadBalancingEnabled_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdh6A() //  [R1]
         { []
         }
     {offset
       cdh6A: // global
           R1 = P64[R1 + 47] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdh6A_info" {
     block_cdh6A_info:
         const _cdh6A;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.200093163 UTC

[section ""data" . GHC.RTS.Flags.parGcGen_closure" {
     GHC.RTS.Flags.parGcGen_closure:
         const GHC.RTS.Flags.parGcGen_info;
 },
 GHC.RTS.Flags.parGcGen_entry() //  [R2]
         { []
         }
     {offset
       cdh73: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdh74; else goto cdh75;
       cdh74: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.parGcGen_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdh75: // global
           I64[Sp - 8] = block_cdh70_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udh79; else goto cdh71;
       udh79: // global
           call _cdh70(R1) args: 0, res: 0, upd: 0;
       cdh71: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.parGcGen_info" {
     GHC.RTS.Flags.parGcGen_info:
         const GHC.RTS.Flags.parGcGen_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdh70() //  [R1]
         { []
         }
     {offset
       cdh70: // global
           R1 = P64[R1 + 39] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdh70_info" {
     block_cdh70_info:
         const _cdh70;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.205918041 UTC

[section ""data" . GHC.RTS.Flags.parGcEnabled_closure" {
     GHC.RTS.Flags.parGcEnabled_closure:
         const GHC.RTS.Flags.parGcEnabled_info;
 },
 GHC.RTS.Flags.parGcEnabled_entry() //  [R2]
         { []
         }
     {offset
       cdh7t: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdh7u; else goto cdh7v;
       cdh7u: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.parGcEnabled_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdh7v: // global
           I64[Sp - 8] = block_cdh7q_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udh7z; else goto cdh7r;
       udh7z: // global
           call _cdh7q(R1) args: 0, res: 0, upd: 0;
       cdh7r: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.parGcEnabled_info" {
     GHC.RTS.Flags.parGcEnabled_info:
         const GHC.RTS.Flags.parGcEnabled_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdh7q() //  [R1]
         { []
         }
     {offset
       cdh7q: // global
           R1 = P64[R1 + 31] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdh7q_info" {
     block_cdh7q_info:
         const _cdh7q;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.211288067 UTC

[section ""data" . GHC.RTS.Flags.maxLocalSparks_closure" {
     GHC.RTS.Flags.maxLocalSparks_closure:
         const GHC.RTS.Flags.maxLocalSparks_info;
 },
 GHC.RTS.Flags.maxLocalSparks_entry() //  [R2]
         { []
         }
     {offset
       cdh7T: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdh7U; else goto cdh7V;
       cdh7U: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.maxLocalSparks_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdh7V: // global
           I64[Sp - 8] = block_cdh7Q_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udh7Z; else goto cdh7R;
       udh7Z: // global
           call _cdh7Q(R1) args: 0, res: 0, upd: 0;
       cdh7R: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.maxLocalSparks_info" {
     GHC.RTS.Flags.maxLocalSparks_info:
         const GHC.RTS.Flags.maxLocalSparks_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdh7Q() //  [R1]
         { []
         }
     {offset
       cdh7Q: // global
           R1 = P64[R1 + 23] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdh7Q_info" {
     block_cdh7Q_info:
         const _cdh7Q;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.216776503 UTC

[section ""data" . GHC.RTS.Flags.migrate_closure" {
     GHC.RTS.Flags.migrate_closure:
         const GHC.RTS.Flags.migrate_info;
 },
 GHC.RTS.Flags.migrate_entry() //  [R2]
         { []
         }
     {offset
       cdh8j: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdh8k; else goto cdh8l;
       cdh8k: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.migrate_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdh8l: // global
           I64[Sp - 8] = block_cdh8g_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udh8p; else goto cdh8h;
       udh8p: // global
           call _cdh8g(R1) args: 0, res: 0, upd: 0;
       cdh8h: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.migrate_info" {
     GHC.RTS.Flags.migrate_info:
         const GHC.RTS.Flags.migrate_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdh8g() //  [R1]
         { []
         }
     {offset
       cdh8g: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdh8g_info" {
     block_cdh8g_info:
         const _cdh8g;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.222629492 UTC

[section ""data" . GHC.RTS.Flags.nCapabilities_closure" {
     GHC.RTS.Flags.nCapabilities_closure:
         const GHC.RTS.Flags.nCapabilities_info;
 },
 GHC.RTS.Flags.nCapabilities_entry() //  [R2]
         { []
         }
     {offset
       cdh8J: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdh8K; else goto cdh8L;
       cdh8K: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.nCapabilities_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdh8L: // global
           I64[Sp - 8] = block_cdh8G_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udh8P; else goto cdh8H;
       udh8P: // global
           call _cdh8G(R1) args: 0, res: 0, upd: 0;
       cdh8H: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.nCapabilities_info" {
     GHC.RTS.Flags.nCapabilities_info:
         const GHC.RTS.Flags.nCapabilities_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdh8G() //  [R1]
         { []
         }
     {offset
       cdh8G: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdh8G_info" {
     block_cdh8G_info:
         const _cdh8G;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.228041538 UTC

[section ""data" . GHC.RTS.Flags.parFlags_closure" {
     GHC.RTS.Flags.parFlags_closure:
         const GHC.RTS.Flags.parFlags_info;
 },
 GHC.RTS.Flags.parFlags_entry() //  [R2]
         { []
         }
     {offset
       cdh99: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdh9a; else goto cdh9b;
       cdh9a: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.parFlags_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdh9b: // global
           I64[Sp - 8] = block_cdh96_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udh9f; else goto cdh97;
       udh9f: // global
           call _cdh96(R1) args: 0, res: 0, upd: 0;
       cdh97: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.parFlags_info" {
     GHC.RTS.Flags.parFlags_info:
         const GHC.RTS.Flags.parFlags_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdh96() //  [R1]
         { []
         }
     {offset
       cdh96: // global
           R1 = P64[R1 + 71] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdh96_info" {
     block_cdh96_info:
         const _cdh96;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.234342424 UTC

[section ""data" . GHC.RTS.Flags.tickyFlags_closure" {
     GHC.RTS.Flags.tickyFlags_closure:
         const GHC.RTS.Flags.tickyFlags_info;
 },
 GHC.RTS.Flags.tickyFlags_entry() //  [R2]
         { []
         }
     {offset
       cdh9z: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdh9A; else goto cdh9B;
       cdh9A: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.tickyFlags_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdh9B: // global
           I64[Sp - 8] = block_cdh9w_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udh9F; else goto cdh9x;
       udh9F: // global
           call _cdh9w(R1) args: 0, res: 0, upd: 0;
       cdh9x: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.tickyFlags_info" {
     GHC.RTS.Flags.tickyFlags_info:
         const GHC.RTS.Flags.tickyFlags_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdh9w() //  [R1]
         { []
         }
     {offset
       cdh9w: // global
           R1 = P64[R1 + 63] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdh9w_info" {
     block_cdh9w_info:
         const _cdh9w;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.23956557 UTC

[section ""data" . GHC.RTS.Flags.traceFlags_closure" {
     GHC.RTS.Flags.traceFlags_closure:
         const GHC.RTS.Flags.traceFlags_info;
 },
 GHC.RTS.Flags.traceFlags_entry() //  [R2]
         { []
         }
     {offset
       cdh9Z: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdha0; else goto cdha1;
       cdha0: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.traceFlags_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdha1: // global
           I64[Sp - 8] = block_cdh9W_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udha5; else goto cdh9X;
       udha5: // global
           call _cdh9W(R1) args: 0, res: 0, upd: 0;
       cdh9X: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.traceFlags_info" {
     GHC.RTS.Flags.traceFlags_info:
         const GHC.RTS.Flags.traceFlags_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdh9W() //  [R1]
         { []
         }
     {offset
       cdh9W: // global
           R1 = P64[R1 + 55] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdh9W_info" {
     block_cdh9W_info:
         const _cdh9W;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.244793612 UTC

[section ""data" . GHC.RTS.Flags.profilingFlags_closure" {
     GHC.RTS.Flags.profilingFlags_closure:
         const GHC.RTS.Flags.profilingFlags_info;
 },
 GHC.RTS.Flags.profilingFlags_entry() //  [R2]
         { []
         }
     {offset
       cdhap: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdhaq; else goto cdhar;
       cdhaq: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.profilingFlags_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdhar: // global
           I64[Sp - 8] = block_cdham_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udhav; else goto cdhan;
       udhav: // global
           call _cdham(R1) args: 0, res: 0, upd: 0;
       cdhan: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.profilingFlags_info" {
     GHC.RTS.Flags.profilingFlags_info:
         const GHC.RTS.Flags.profilingFlags_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdham() //  [R1]
         { []
         }
     {offset
       cdham: // global
           R1 = P64[R1 + 47] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdham_info" {
     block_cdham_info:
         const _cdham;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.250494847 UTC

[section ""data" . GHC.RTS.Flags.costCentreFlags_closure" {
     GHC.RTS.Flags.costCentreFlags_closure:
         const GHC.RTS.Flags.costCentreFlags_info;
 },
 GHC.RTS.Flags.costCentreFlags_entry() //  [R2]
         { []
         }
     {offset
       cdhaP: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdhaQ; else goto cdhaR;
       cdhaQ: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.costCentreFlags_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdhaR: // global
           I64[Sp - 8] = block_cdhaM_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udhaV; else goto cdhaN;
       udhaV: // global
           call _cdhaM(R1) args: 0, res: 0, upd: 0;
       cdhaN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.costCentreFlags_info" {
     GHC.RTS.Flags.costCentreFlags_info:
         const GHC.RTS.Flags.costCentreFlags_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdhaM() //  [R1]
         { []
         }
     {offset
       cdhaM: // global
           R1 = P64[R1 + 39] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdhaM_info" {
     block_cdhaM_info:
         const _cdhaM;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.255875241 UTC

[section ""data" . GHC.RTS.Flags.debugFlags_closure" {
     GHC.RTS.Flags.debugFlags_closure:
         const GHC.RTS.Flags.debugFlags_info;
 },
 GHC.RTS.Flags.debugFlags_entry() //  [R2]
         { []
         }
     {offset
       cdhbf: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdhbg; else goto cdhbh;
       cdhbg: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.debugFlags_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdhbh: // global
           I64[Sp - 8] = block_cdhbc_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udhbl; else goto cdhbd;
       udhbl: // global
           call _cdhbc(R1) args: 0, res: 0, upd: 0;
       cdhbd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.debugFlags_info" {
     GHC.RTS.Flags.debugFlags_info:
         const GHC.RTS.Flags.debugFlags_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdhbc() //  [R1]
         { []
         }
     {offset
       cdhbc: // global
           R1 = P64[R1 + 31] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdhbc_info" {
     block_cdhbc_info:
         const _cdhbc;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.261687215 UTC

[section ""data" . GHC.RTS.Flags.miscFlags_closure" {
     GHC.RTS.Flags.miscFlags_closure:
         const GHC.RTS.Flags.miscFlags_info;
 },
 GHC.RTS.Flags.miscFlags_entry() //  [R2]
         { []
         }
     {offset
       cdhbF: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdhbG; else goto cdhbH;
       cdhbG: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.miscFlags_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdhbH: // global
           I64[Sp - 8] = block_cdhbC_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udhbL; else goto cdhbD;
       udhbL: // global
           call _cdhbC(R1) args: 0, res: 0, upd: 0;
       cdhbD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.miscFlags_info" {
     GHC.RTS.Flags.miscFlags_info:
         const GHC.RTS.Flags.miscFlags_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdhbC() //  [R1]
         { []
         }
     {offset
       cdhbC: // global
           R1 = P64[R1 + 23] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdhbC_info" {
     block_cdhbC_info:
         const _cdhbC;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.267786276 UTC

[section ""data" . GHC.RTS.Flags.concurrentFlags_closure" {
     GHC.RTS.Flags.concurrentFlags_closure:
         const GHC.RTS.Flags.concurrentFlags_info;
 },
 GHC.RTS.Flags.concurrentFlags_entry() //  [R2]
         { []
         }
     {offset
       cdhc5: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdhc6; else goto cdhc7;
       cdhc6: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.concurrentFlags_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdhc7: // global
           I64[Sp - 8] = block_cdhc2_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udhcb; else goto cdhc3;
       udhcb: // global
           call _cdhc2(R1) args: 0, res: 0, upd: 0;
       cdhc3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.concurrentFlags_info" {
     GHC.RTS.Flags.concurrentFlags_info:
         const GHC.RTS.Flags.concurrentFlags_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdhc2() //  [R1]
         { []
         }
     {offset
       cdhc2: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdhc2_info" {
     block_cdhc2_info:
         const _cdhc2;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.273453668 UTC

[section ""data" . GHC.RTS.Flags.gcFlags_closure" {
     GHC.RTS.Flags.gcFlags_closure:
         const GHC.RTS.Flags.gcFlags_info;
 },
 GHC.RTS.Flags.gcFlags_entry() //  [R2]
         { []
         }
     {offset
       cdhcv: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdhcw; else goto cdhcx;
       cdhcw: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.gcFlags_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdhcx: // global
           I64[Sp - 8] = block_cdhcs_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udhcB; else goto cdhct;
       udhcB: // global
           call _cdhcs(R1) args: 0, res: 0, upd: 0;
       cdhct: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.gcFlags_info" {
     GHC.RTS.Flags.gcFlags_info:
         const GHC.RTS.Flags.gcFlags_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdhcs() //  [R1]
         { []
         }
     {offset
       cdhcs: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdhcs_info" {
     block_cdhcs_info:
         const _cdhcs;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.278215607 UTC

[section ""cstring" . GHC.RTS.Flags.$trModule4_bytes" {
     GHC.RTS.Flags.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.279964499 UTC

[section ""data" . GHC.RTS.Flags.$trModule3_closure" {
     GHC.RTS.Flags.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.281625246 UTC

[section ""cstring" . GHC.RTS.Flags.$trModule2_bytes" {
     GHC.RTS.Flags.$trModule2_bytes:
         I8[] [71,72,67,46,82,84,83,46,70,108,97,103,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.283342415 UTC

[section ""data" . GHC.RTS.Flags.$trModule1_closure" {
     GHC.RTS.Flags.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.285039776 UTC

[section ""data" . GHC.RTS.Flags.$trModule_closure" {
     GHC.RTS.Flags.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.RTS.Flags.$trModule3_closure+1;
         const GHC.RTS.Flags.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.286996467 UTC

[section ""data" . $krep_rcV6F_closure" {
     $krep_rcV6F_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcDouble_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.288715784 UTC

[section ""data" . $krep1_rcV6G_closure" {
     $krep1_rcV6G_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.290508577 UTC

[section ""data" . $krep2_rcV6H_closure" {
     $krep2_rcV6H_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcWord_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.292812139 UTC

[section ""data" . $krep3_rcV6I_closure" {
     $krep3_rcV6I_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Word.$tcWord64_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.2946994 UTC

[section ""data" . $krep4_rcV6J_closure" {
     $krep4_rcV6J_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcChar_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.296333937 UTC

[section ""data" . $krep5_rcV6K_closure" {
     $krep5_rcV6K_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcBool_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.298076993 UTC

[section ""data" . $krep6_rcV6L_closure" {
     $krep6_rcV6L_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Word.$tcWord32_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.29976957 UTC

[section ""data" . $krep7_rcV6M_closure" {
     $krep7_rcV6M_closure:
         const :_con_info;
         const $krep4_rcV6J_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.30140009 UTC

[section ""data" . $krep8_rcV6N_closure" {
     $krep8_rcV6N_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep7_rcV6M_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.303072896 UTC

[section ""data" . $krep9_rcV6O_closure" {
     $krep9_rcV6O_closure:
         const :_con_info;
         const $krep8_rcV6N_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.304735639 UTC

[section ""data" . $krep10_rcV6P_closure" {
     $krep10_rcV6P_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Base.$tcMaybe_closure;
         const $krep9_rcV6O_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.306985183 UTC

[section ""cstring" . GHC.RTS.Flags.$tcGiveGCStats2_bytes" {
     GHC.RTS.Flags.$tcGiveGCStats2_bytes:
         I8[] [71,105,118,101,71,67,83,116,97,116,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.308605101 UTC

[section ""data" . GHC.RTS.Flags.$tcGiveGCStats1_closure" {
     GHC.RTS.Flags.$tcGiveGCStats1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tcGiveGCStats2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.31034473 UTC

[section ""data" . GHC.RTS.Flags.$tcGiveGCStats_closure" {
     GHC.RTS.Flags.$tcGiveGCStats_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tcGiveGCStats1_closure+1;
         const GHC.Types.krep$*_closure;
         const 6610677523385408458;
         const 17305718893788490736;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.312158345 UTC

[section ""data" . GHC.RTS.Flags.$tc'CollectGCStats1_closure" {
     GHC.RTS.Flags.$tc'CollectGCStats1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.RTS.Flags.$tcGiveGCStats_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.313884566 UTC

[section ""cstring" . GHC.RTS.Flags.$tc'NoGCStats2_bytes" {
     GHC.RTS.Flags.$tc'NoGCStats2_bytes:
         I8[] [39,78,111,71,67,83,116,97,116,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.315611917 UTC

[section ""data" . GHC.RTS.Flags.$tc'NoGCStats1_closure" {
     GHC.RTS.Flags.$tc'NoGCStats1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tc'NoGCStats2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.317427622 UTC

[section ""data" . GHC.RTS.Flags.$tc'NoGCStats_closure" {
     GHC.RTS.Flags.$tc'NoGCStats_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tc'NoGCStats1_closure+1;
         const GHC.RTS.Flags.$tc'CollectGCStats1_closure+1;
         const 7933034681225600823;
         const 3740225576493790291;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.319825649 UTC

[section ""cstring" . GHC.RTS.Flags.$tc'CollectGCStats3_bytes" {
     GHC.RTS.Flags.$tc'CollectGCStats3_bytes:
         I8[] [39,67,111,108,108,101,99,116,71,67,83,116,97,116,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.321593121 UTC

[section ""data" . GHC.RTS.Flags.$tc'CollectGCStats2_closure" {
     GHC.RTS.Flags.$tc'CollectGCStats2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tc'CollectGCStats3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.323403512 UTC

[section ""data" . GHC.RTS.Flags.$tc'CollectGCStats_closure" {
     GHC.RTS.Flags.$tc'CollectGCStats_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tc'CollectGCStats2_closure+1;
         const GHC.RTS.Flags.$tc'CollectGCStats1_closure+1;
         const 3746479294690445129;
         const 11560471058246341246;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.325099769 UTC

[section ""cstring" . GHC.RTS.Flags.$tc'OneLineGCStats2_bytes" {
     GHC.RTS.Flags.$tc'OneLineGCStats2_bytes:
         I8[] [39,79,110,101,76,105,110,101,71,67,83,116,97,116,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.327428415 UTC

[section ""data" . GHC.RTS.Flags.$tc'OneLineGCStats1_closure" {
     GHC.RTS.Flags.$tc'OneLineGCStats1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tc'OneLineGCStats2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.329163632 UTC

[section ""data" . GHC.RTS.Flags.$tc'OneLineGCStats_closure" {
     GHC.RTS.Flags.$tc'OneLineGCStats_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tc'OneLineGCStats1_closure+1;
         const GHC.RTS.Flags.$tc'CollectGCStats1_closure+1;
         const 10050868986052397820;
         const 7762915732892167917;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.330877632 UTC

[section ""cstring" . GHC.RTS.Flags.$tc'SummaryGCStats2_bytes" {
     GHC.RTS.Flags.$tc'SummaryGCStats2_bytes:
         I8[] [39,83,117,109,109,97,114,121,71,67,83,116,97,116,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.332400984 UTC

[section ""data" . GHC.RTS.Flags.$tc'SummaryGCStats1_closure" {
     GHC.RTS.Flags.$tc'SummaryGCStats1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tc'SummaryGCStats2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.334517983 UTC

[section ""data" . GHC.RTS.Flags.$tc'SummaryGCStats_closure" {
     GHC.RTS.Flags.$tc'SummaryGCStats_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tc'SummaryGCStats1_closure+1;
         const GHC.RTS.Flags.$tc'CollectGCStats1_closure+1;
         const 903385594733568743;
         const 408941185149856254;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.336191585 UTC

[section ""cstring" . GHC.RTS.Flags.$tc'VerboseGCStats2_bytes" {
     GHC.RTS.Flags.$tc'VerboseGCStats2_bytes:
         I8[] [39,86,101,114,98,111,115,101,71,67,83,116,97,116,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.337939564 UTC

[section ""data" . GHC.RTS.Flags.$tc'VerboseGCStats1_closure" {
     GHC.RTS.Flags.$tc'VerboseGCStats1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tc'VerboseGCStats2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.339677851 UTC

[section ""data" . GHC.RTS.Flags.$tc'VerboseGCStats_closure" {
     GHC.RTS.Flags.$tc'VerboseGCStats_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tc'VerboseGCStats1_closure+1;
         const GHC.RTS.Flags.$tc'CollectGCStats1_closure+1;
         const 5306241424052285901;
         const 7221383768387793036;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.341423224 UTC

[section ""cstring" . GHC.RTS.Flags.$tcGCFlags2_bytes" {
     GHC.RTS.Flags.$tcGCFlags2_bytes:
         I8[] [71,67,70,108,97,103,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.343277807 UTC

[section ""data" . GHC.RTS.Flags.$tcGCFlags1_closure" {
     GHC.RTS.Flags.$tcGCFlags1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tcGCFlags2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.34601465 UTC

[section ""data" . GHC.RTS.Flags.$tcGCFlags_closure" {
     GHC.RTS.Flags.$tcGCFlags_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tcGCFlags1_closure+1;
         const GHC.Types.krep$*_closure;
         const 7972238777300781582;
         const 877769587847050685;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.347744404 UTC

[section ""data" . $krep11_rcV6Q_closure" {
     $krep11_rcV6Q_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.RTS.Flags.$tcGCFlags_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.349485264 UTC

[section ""data" . $krep12_rcV6R_closure" {
     $krep12_rcV6R_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_rcV6H_closure+1;
         const $krep11_rcV6Q_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.35121863 UTC

[section ""data" . $krep13_rcV6S_closure" {
     $krep13_rcV6S_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rcV6K_closure+1;
         const $krep12_rcV6R_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.352936394 UTC

[section ""data" . $krep14_rcV6T_closure" {
     $krep14_rcV6T_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_rcV6H_closure+1;
         const $krep13_rcV6S_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.354699884 UTC

[section ""data" . $krep15_rcV6U_closure" {
     $krep15_rcV6U_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_rcV6H_closure+1;
         const $krep14_rcV6T_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.356450199 UTC

[section ""data" . $krep16_rcV6V_closure" {
     $krep16_rcV6V_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rcV6K_closure+1;
         const $krep15_rcV6U_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.358201788 UTC

[section ""data" . $krep17_rcV6W_closure" {
     $krep17_rcV6W_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_rcV6I_closure+1;
         const $krep16_rcV6V_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.359956904 UTC

[section ""data" . $krep18_rcV6X_closure" {
     $krep18_rcV6X_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rcV6K_closure+1;
         const $krep17_rcV6W_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.362059976 UTC

[section ""data" . $krep19_rcV6Y_closure" {
     $krep19_rcV6Y_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rcV6K_closure+1;
         const $krep18_rcV6X_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.363739942 UTC

[section ""data" . $krep20_rcV6Z_closure" {
     $krep20_rcV6Z_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_rcV6F_closure+1;
         const $krep19_rcV6Y_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.365511246 UTC

[section ""data" . $krep21_rcV70_closure" {
     $krep21_rcV70_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rcV6K_closure+1;
         const $krep20_rcV6Z_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.367293346 UTC

[section ""data" . $krep22_rcV71_closure" {
     $krep22_rcV71_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rcV6K_closure+1;
         const $krep21_rcV70_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.369089843 UTC

[section ""data" . $krep23_rcV72_closure" {
     $krep23_rcV72_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_rcV6L_closure+1;
         const $krep22_rcV71_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.371496268 UTC

[section ""data" . $krep24_rcV73_closure" {
     $krep24_rcV73_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_rcV6F_closure+1;
         const $krep23_rcV72_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.373313323 UTC

[section ""data" . $krep25_rcV74_closure" {
     $krep25_rcV74_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_rcV6F_closure+1;
         const $krep24_rcV73_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.374998074 UTC

[section ""data" . $krep26_rcV75_closure" {
     $krep26_rcV75_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rcV6K_closure+1;
         const $krep25_rcV74_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.37672287 UTC

[section ""data" . $krep27_rcV76_closure" {
     $krep27_rcV76_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_rcV6L_closure+1;
         const $krep26_rcV75_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.378558996 UTC

[section ""data" . $krep28_rcV77_closure" {
     $krep28_rcV77_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_rcV6L_closure+1;
         const $krep27_rcV76_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.380283179 UTC

[section ""data" . $krep29_rcV78_closure" {
     $krep29_rcV78_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_rcV6L_closure+1;
         const $krep28_rcV77_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.382582444 UTC

[section ""data" . $krep30_rcV79_closure" {
     $krep30_rcV79_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_rcV6L_closure+1;
         const $krep29_rcV78_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.384314794 UTC

[section ""data" . $krep31_rcV7a_closure" {
     $krep31_rcV7a_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_rcV6L_closure+1;
         const $krep30_rcV79_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.386044784 UTC

[section ""data" . $krep32_rcV7b_closure" {
     $krep32_rcV7b_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_rcV6L_closure+1;
         const $krep31_rcV7a_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.387762355 UTC

[section ""data" . $krep33_rcV7c_closure" {
     $krep33_rcV7c_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_rcV6L_closure+1;
         const $krep32_rcV7b_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.389501802 UTC

[section ""data" . $krep34_rcV7d_closure" {
     $krep34_rcV7d_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_rcV6L_closure+1;
         const $krep33_rcV7c_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.391293045 UTC

[section ""data" . $krep35_rcV7e_closure" {
     $krep35_rcV7e_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_rcV6L_closure+1;
         const $krep34_rcV7d_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.392999591 UTC

[section ""data" . $krep36_rcV7f_closure" {
     $krep36_rcV7f_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_rcV6L_closure+1;
         const $krep35_rcV7e_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.395332393 UTC

[section ""data" . $krep37_rcV7g_closure" {
     $krep37_rcV7g_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.RTS.Flags.$tc'CollectGCStats1_closure+1;
         const $krep36_rcV7f_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.397590321 UTC

[section ""data" . GHC.RTS.Flags.$tc'GCFlags1_closure" {
     GHC.RTS.Flags.$tc'GCFlags1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_rcV6P_closure+1;
         const $krep37_rcV7g_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.399321081 UTC

[section ""cstring" . GHC.RTS.Flags.$tc'GCFlags3_bytes" {
     GHC.RTS.Flags.$tc'GCFlags3_bytes:
         I8[] [39,71,67,70,108,97,103,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.400980344 UTC

[section ""data" . GHC.RTS.Flags.$tc'GCFlags2_closure" {
     GHC.RTS.Flags.$tc'GCFlags2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tc'GCFlags3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.402746728 UTC

[section ""data" . GHC.RTS.Flags.$tc'GCFlags_closure" {
     GHC.RTS.Flags.$tc'GCFlags_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tc'GCFlags2_closure+1;
         const GHC.RTS.Flags.$tc'GCFlags1_closure+4;
         const 15077871255757076606;
         const 428936906040764902;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.404464943 UTC

[section ""cstring" . GHC.RTS.Flags.$tcConcFlags2_bytes" {
     GHC.RTS.Flags.$tcConcFlags2_bytes:
         I8[] [67,111,110,99,70,108,97,103,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.406511875 UTC

[section ""data" . GHC.RTS.Flags.$tcConcFlags1_closure" {
     GHC.RTS.Flags.$tcConcFlags1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tcConcFlags2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.408210964 UTC

[section ""data" . GHC.RTS.Flags.$tcConcFlags_closure" {
     GHC.RTS.Flags.$tcConcFlags_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tcConcFlags1_closure+1;
         const GHC.Types.krep$*_closure;
         const 8014663245729948380;
         const 13771385662434223247;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.410034363 UTC

[section ""data" . $krep38_rcV7h_closure" {
     $krep38_rcV7h_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.RTS.Flags.$tcConcFlags_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.411768498 UTC

[section ""data" . $krep39_rcV7i_closure" {
     $krep39_rcV7i_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_rcV6G_closure+1;
         const $krep38_rcV7h_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.413503096 UTC

[section ""data" . GHC.RTS.Flags.$tc'ConcFlags1_closure" {
     GHC.RTS.Flags.$tc'ConcFlags1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_rcV6I_closure+1;
         const $krep39_rcV7i_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.415150477 UTC

[section ""cstring" . GHC.RTS.Flags.$tc'ConcFlags3_bytes" {
     GHC.RTS.Flags.$tc'ConcFlags3_bytes:
         I8[] [39,67,111,110,99,70,108,97,103,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.416837693 UTC

[section ""data" . GHC.RTS.Flags.$tc'ConcFlags2_closure" {
     GHC.RTS.Flags.$tc'ConcFlags2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tc'ConcFlags3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.418978372 UTC

[section ""data" . GHC.RTS.Flags.$tc'ConcFlags_closure" {
     GHC.RTS.Flags.$tc'ConcFlags_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tc'ConcFlags2_closure+1;
         const GHC.RTS.Flags.$tc'ConcFlags1_closure+4;
         const 3887237771069755887;
         const 16720223823447457419;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.420836423 UTC

[section ""cstring" . GHC.RTS.Flags.$tcMiscFlags2_bytes" {
     GHC.RTS.Flags.$tcMiscFlags2_bytes:
         I8[] [77,105,115,99,70,108,97,103,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.422593736 UTC

[section ""data" . GHC.RTS.Flags.$tcMiscFlags1_closure" {
     GHC.RTS.Flags.$tcMiscFlags1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tcMiscFlags2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.424957939 UTC

[section ""data" . GHC.RTS.Flags.$tcMiscFlags_closure" {
     GHC.RTS.Flags.$tcMiscFlags_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tcMiscFlags1_closure+1;
         const GHC.Types.krep$*_closure;
         const 8345734398582159173;
         const 13018943964024104206;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.426860969 UTC

[section ""data" . $krep40_rcV7j_closure" {
     $krep40_rcV7j_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.RTS.Flags.$tcMiscFlags_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.428600822 UTC

[section ""data" . $krep41_rcV7k_closure" {
     $krep41_rcV7k_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_rcV6H_closure+1;
         const $krep40_rcV7j_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.430221901 UTC

[section ""data" . $krep42_rcV7l_closure" {
     $krep42_rcV7l_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rcV6K_closure+1;
         const $krep41_rcV7k_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.431929484 UTC

[section ""data" . $krep43_rcV7m_closure" {
     $krep43_rcV7m_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rcV6K_closure+1;
         const $krep42_rcV7l_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.43400175 UTC

[section ""data" . $krep44_rcV7n_closure" {
     $krep44_rcV7n_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rcV6K_closure+1;
         const $krep43_rcV7m_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.435645482 UTC

[section ""data" . $krep45_rcV7o_closure" {
     $krep45_rcV7o_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rcV6K_closure+1;
         const $krep44_rcV7n_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.437367787 UTC

[section ""data" . $krep46_rcV7p_closure" {
     $krep46_rcV7p_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rcV6K_closure+1;
         const $krep45_rcV7o_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.439005147 UTC

[section ""data" . GHC.RTS.Flags.$tc'MiscFlags1_closure" {
     GHC.RTS.Flags.$tc'MiscFlags1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_rcV6I_closure+1;
         const $krep46_rcV7p_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.440707399 UTC

[section ""cstring" . GHC.RTS.Flags.$tc'MiscFlags3_bytes" {
     GHC.RTS.Flags.$tc'MiscFlags3_bytes:
         I8[] [39,77,105,115,99,70,108,97,103,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.442440596 UTC

[section ""data" . GHC.RTS.Flags.$tc'MiscFlags2_closure" {
     GHC.RTS.Flags.$tc'MiscFlags2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tc'MiscFlags3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.44426362 UTC

[section ""data" . GHC.RTS.Flags.$tc'MiscFlags_closure" {
     GHC.RTS.Flags.$tc'MiscFlags_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tc'MiscFlags2_closure+1;
         const GHC.RTS.Flags.$tc'MiscFlags1_closure+4;
         const 8738274121432326663;
         const 17456949991610747249;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.446063747 UTC

[section ""cstring" . GHC.RTS.Flags.$tcDebugFlags2_bytes" {
     GHC.RTS.Flags.$tcDebugFlags2_bytes:
         I8[] [68,101,98,117,103,70,108,97,103,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.447814354 UTC

[section ""data" . GHC.RTS.Flags.$tcDebugFlags1_closure" {
     GHC.RTS.Flags.$tcDebugFlags1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tcDebugFlags2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.45019882 UTC

[section ""data" . GHC.RTS.Flags.$tcDebugFlags_closure" {
     GHC.RTS.Flags.$tcDebugFlags_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tcDebugFlags1_closure+1;
         const GHC.Types.krep$*_closure;
         const 6148836561850888235;
         const 4971417148613417489;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.451999371 UTC

[section ""data" . $krep47_rcV7q_closure" {
     $krep47_rcV7q_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.RTS.Flags.$tcDebugFlags_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.454176845 UTC

[section ""data" . $krep48_rcV7r_closure" {
     $krep48_rcV7r_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rcV6K_closure+1;
         const $krep47_rcV7q_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.455874226 UTC

[section ""data" . $krep49_rcV7s_closure" {
     $krep49_rcV7s_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rcV6K_closure+1;
         const $krep48_rcV7r_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.457587421 UTC

[section ""data" . $krep50_rcV7t_closure" {
     $krep50_rcV7t_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rcV6K_closure+1;
         const $krep49_rcV7s_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.459299992 UTC

[section ""data" . $krep51_rcV7u_closure" {
     $krep51_rcV7u_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rcV6K_closure+1;
         const $krep50_rcV7t_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.461053719 UTC

[section ""data" . $krep52_rcV7v_closure" {
     $krep52_rcV7v_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rcV6K_closure+1;
         const $krep51_rcV7u_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.462734182 UTC

[section ""data" . $krep53_rcV7w_closure" {
     $krep53_rcV7w_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rcV6K_closure+1;
         const $krep52_rcV7v_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.464405704 UTC

[section ""data" . $krep54_rcV7x_closure" {
     $krep54_rcV7x_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rcV6K_closure+1;
         const $krep53_rcV7w_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.466755143 UTC

[section ""data" . $krep55_rcV7y_closure" {
     $krep55_rcV7y_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rcV6K_closure+1;
         const $krep54_rcV7x_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.468511225 UTC

[section ""data" . $krep56_rcV7z_closure" {
     $krep56_rcV7z_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rcV6K_closure+1;
         const $krep55_rcV7y_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.470353664 UTC

[section ""data" . $krep57_rcV7A_closure" {
     $krep57_rcV7A_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rcV6K_closure+1;
         const $krep56_rcV7z_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.47208501 UTC

[section ""data" . $krep58_rcV7B_closure" {
     $krep58_rcV7B_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rcV6K_closure+1;
         const $krep57_rcV7A_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.473821637 UTC

[section ""data" . $krep59_rcV7C_closure" {
     $krep59_rcV7C_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rcV6K_closure+1;
         const $krep58_rcV7B_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.476070979 UTC

[section ""data" . $krep60_rcV7D_closure" {
     $krep60_rcV7D_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rcV6K_closure+1;
         const $krep59_rcV7C_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.478253695 UTC

[section ""data" . $krep61_rcV7E_closure" {
     $krep61_rcV7E_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rcV6K_closure+1;
         const $krep60_rcV7D_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.479892618 UTC

[section ""data" . GHC.RTS.Flags.$tc'DebugFlags1_closure" {
     GHC.RTS.Flags.$tc'DebugFlags1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rcV6K_closure+1;
         const $krep61_rcV7E_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.481607431 UTC

[section ""cstring" . GHC.RTS.Flags.$tc'DebugFlags3_bytes" {
     GHC.RTS.Flags.$tc'DebugFlags3_bytes:
         I8[] [39,68,101,98,117,103,70,108,97,103,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.483381091 UTC

[section ""data" . GHC.RTS.Flags.$tc'DebugFlags2_closure" {
     GHC.RTS.Flags.$tc'DebugFlags2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tc'DebugFlags3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.485109842 UTC

[section ""data" . GHC.RTS.Flags.$tc'DebugFlags_closure" {
     GHC.RTS.Flags.$tc'DebugFlags_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tc'DebugFlags2_closure+1;
         const GHC.RTS.Flags.$tc'DebugFlags1_closure+4;
         const 5797788004444129297;
         const 18307470711129601643;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.486847951 UTC

[section ""cstring" . GHC.RTS.Flags.$tcDoCostCentres2_bytes" {
     GHC.RTS.Flags.$tcDoCostCentres2_bytes:
         I8[] [68,111,67,111,115,116,67,101,110,116,114,101,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.488561022 UTC

[section ""data" . GHC.RTS.Flags.$tcDoCostCentres1_closure" {
     GHC.RTS.Flags.$tcDoCostCentres1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tcDoCostCentres2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.490607735 UTC

[section ""data" . GHC.RTS.Flags.$tcDoCostCentres_closure" {
     GHC.RTS.Flags.$tcDoCostCentres_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tcDoCostCentres1_closure+1;
         const GHC.Types.krep$*_closure;
         const 12247765477237709938;
         const 15987815848961641446;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.492363294 UTC

[section ""data" . GHC.RTS.Flags.$tc'CostCentresAll1_closure" {
     GHC.RTS.Flags.$tc'CostCentresAll1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.RTS.Flags.$tcDoCostCentres_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.494041351 UTC

[section ""cstring" . GHC.RTS.Flags.$tc'CostCentresNone2_bytes" {
     GHC.RTS.Flags.$tc'CostCentresNone2_bytes:
         I8[] [39,67,111,115,116,67,101,110,116,114,101,115,78,111,110,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.495704472 UTC

[section ""data" . GHC.RTS.Flags.$tc'CostCentresNone1_closure" {
     GHC.RTS.Flags.$tc'CostCentresNone1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tc'CostCentresNone2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.497462943 UTC

[section ""data" . GHC.RTS.Flags.$tc'CostCentresNone_closure" {
     GHC.RTS.Flags.$tc'CostCentresNone_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tc'CostCentresNone1_closure+1;
         const GHC.RTS.Flags.$tc'CostCentresAll1_closure+1;
         const 9941076719153329985;
         const 5975200043947881410;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.499216115 UTC

[section ""cstring" . GHC.RTS.Flags.$tc'CostCentresSummary2_bytes" {
     GHC.RTS.Flags.$tc'CostCentresSummary2_bytes:
         I8[] [39,67,111,115,116,67,101,110,116,114,101,115,83,117,109,109,97,114,121]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.501325586 UTC

[section ""data" . GHC.RTS.Flags.$tc'CostCentresSummary1_closure" {
     GHC.RTS.Flags.$tc'CostCentresSummary1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tc'CostCentresSummary2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.503123216 UTC

[section ""data" . GHC.RTS.Flags.$tc'CostCentresSummary_closure" {
     GHC.RTS.Flags.$tc'CostCentresSummary_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tc'CostCentresSummary1_closure+1;
         const GHC.RTS.Flags.$tc'CostCentresAll1_closure+1;
         const 7907150943011235483;
         const 8448171742954198172;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.504805246 UTC

[section ""cstring" . GHC.RTS.Flags.$tc'CostCentresVerbose2_bytes" {
     GHC.RTS.Flags.$tc'CostCentresVerbose2_bytes:
         I8[] [39,67,111,115,116,67,101,110,116,114,101,115,86,101,114,98,111,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.506515243 UTC

[section ""data" . GHC.RTS.Flags.$tc'CostCentresVerbose1_closure" {
     GHC.RTS.Flags.$tc'CostCentresVerbose1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tc'CostCentresVerbose2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.508269799 UTC

[section ""data" . GHC.RTS.Flags.$tc'CostCentresVerbose_closure" {
     GHC.RTS.Flags.$tc'CostCentresVerbose_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tc'CostCentresVerbose1_closure+1;
         const GHC.RTS.Flags.$tc'CostCentresAll1_closure+1;
         const 9824578800821523041;
         const 10307761995494160912;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.510428308 UTC

[section ""cstring" . GHC.RTS.Flags.$tc'CostCentresAll3_bytes" {
     GHC.RTS.Flags.$tc'CostCentresAll3_bytes:
         I8[] [39,67,111,115,116,67,101,110,116,114,101,115,65,108,108]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.512105216 UTC

[section ""data" . GHC.RTS.Flags.$tc'CostCentresAll2_closure" {
     GHC.RTS.Flags.$tc'CostCentresAll2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tc'CostCentresAll3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.513776956 UTC

[section ""data" . GHC.RTS.Flags.$tc'CostCentresAll_closure" {
     GHC.RTS.Flags.$tc'CostCentresAll_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tc'CostCentresAll2_closure+1;
         const GHC.RTS.Flags.$tc'CostCentresAll1_closure+1;
         const 17708860571824488665;
         const 3474022764015128952;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.515578693 UTC

[section ""cstring" . GHC.RTS.Flags.$tc'CostCentresJSON2_bytes" {
     GHC.RTS.Flags.$tc'CostCentresJSON2_bytes:
         I8[] [39,67,111,115,116,67,101,110,116,114,101,115,74,83,79,78]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.517219984 UTC

[section ""data" . GHC.RTS.Flags.$tc'CostCentresJSON1_closure" {
     GHC.RTS.Flags.$tc'CostCentresJSON1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tc'CostCentresJSON2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.519009472 UTC

[section ""data" . GHC.RTS.Flags.$tc'CostCentresJSON_closure" {
     GHC.RTS.Flags.$tc'CostCentresJSON_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tc'CostCentresJSON1_closure+1;
         const GHC.RTS.Flags.$tc'CostCentresAll1_closure+1;
         const 14898309595742757340;
         const 1701943173654928528;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.520824496 UTC

[section ""cstring" . GHC.RTS.Flags.$tcCCFlags2_bytes" {
     GHC.RTS.Flags.$tcCCFlags2_bytes:
         I8[] [67,67,70,108,97,103,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.522504381 UTC

[section ""data" . GHC.RTS.Flags.$tcCCFlags1_closure" {
     GHC.RTS.Flags.$tcCCFlags1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tcCCFlags2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.524270827 UTC

[section ""data" . GHC.RTS.Flags.$tcCCFlags_closure" {
     GHC.RTS.Flags.$tcCCFlags_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tcCCFlags1_closure+1;
         const GHC.Types.krep$*_closure;
         const 1712213186479039283;
         const 2219924391185601312;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.527222613 UTC

[section ""data" . $krep62_rcV7F_closure" {
     $krep62_rcV7F_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.RTS.Flags.$tcCCFlags_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.529022888 UTC

[section ""data" . $krep63_rcV7G_closure" {
     $krep63_rcV7G_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_rcV6G_closure+1;
         const $krep62_rcV7F_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.530755993 UTC

[section ""data" . $krep64_rcV7H_closure" {
     $krep64_rcV7H_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_rcV6G_closure+1;
         const $krep63_rcV7G_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.532513419 UTC

[section ""data" . GHC.RTS.Flags.$tc'CCFlags1_closure" {
     GHC.RTS.Flags.$tc'CCFlags1_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.RTS.Flags.$tc'CostCentresAll1_closure+1;
         const $krep64_rcV7H_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.534313879 UTC

[section ""cstring" . GHC.RTS.Flags.$tc'CCFlags3_bytes" {
     GHC.RTS.Flags.$tc'CCFlags3_bytes:
         I8[] [39,67,67,70,108,97,103,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.535965103 UTC

[section ""data" . GHC.RTS.Flags.$tc'CCFlags2_closure" {
     GHC.RTS.Flags.$tc'CCFlags2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tc'CCFlags3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.538264839 UTC

[section ""data" . GHC.RTS.Flags.$tc'CCFlags_closure" {
     GHC.RTS.Flags.$tc'CCFlags_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tc'CCFlags2_closure+1;
         const GHC.RTS.Flags.$tc'CCFlags1_closure+4;
         const 1463973452671583834;
         const 3241436776007668974;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.540034493 UTC

[section ""cstring" . GHC.RTS.Flags.$tcDoHeapProfile2_bytes" {
     GHC.RTS.Flags.$tcDoHeapProfile2_bytes:
         I8[] [68,111,72,101,97,112,80,114,111,102,105,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.541729913 UTC

[section ""data" . GHC.RTS.Flags.$tcDoHeapProfile1_closure" {
     GHC.RTS.Flags.$tcDoHeapProfile1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tcDoHeapProfile2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.543463853 UTC

[section ""data" . GHC.RTS.Flags.$tcDoHeapProfile_closure" {
     GHC.RTS.Flags.$tcDoHeapProfile_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tcDoHeapProfile1_closure+1;
         const GHC.Types.krep$*_closure;
         const 7452162420331529362;
         const 2264204561499252260;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.545351383 UTC

[section ""data" . GHC.RTS.Flags.$tc'HeapByCCS1_closure" {
     GHC.RTS.Flags.$tc'HeapByCCS1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.RTS.Flags.$tcDoHeapProfile_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.547146427 UTC

[section ""cstring" . GHC.RTS.Flags.$tc'NoHeapProfiling2_bytes" {
     GHC.RTS.Flags.$tc'NoHeapProfiling2_bytes:
         I8[] [39,78,111,72,101,97,112,80,114,111,102,105,108,105,110,103]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.548874252 UTC

[section ""data" . GHC.RTS.Flags.$tc'NoHeapProfiling1_closure" {
     GHC.RTS.Flags.$tc'NoHeapProfiling1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tc'NoHeapProfiling2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.551044021 UTC

[section ""data" . GHC.RTS.Flags.$tc'NoHeapProfiling_closure" {
     GHC.RTS.Flags.$tc'NoHeapProfiling_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tc'NoHeapProfiling1_closure+1;
         const GHC.RTS.Flags.$tc'HeapByCCS1_closure+1;
         const 15256181505853116399;
         const 12572078876854188631;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.552826264 UTC

[section ""cstring" . GHC.RTS.Flags.$tc'HeapByCCS3_bytes" {
     GHC.RTS.Flags.$tc'HeapByCCS3_bytes:
         I8[] [39,72,101,97,112,66,121,67,67,83]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.555166635 UTC

[section ""data" . GHC.RTS.Flags.$tc'HeapByCCS2_closure" {
     GHC.RTS.Flags.$tc'HeapByCCS2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tc'HeapByCCS3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.556963232 UTC

[section ""data" . GHC.RTS.Flags.$tc'HeapByCCS_closure" {
     GHC.RTS.Flags.$tc'HeapByCCS_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tc'HeapByCCS2_closure+1;
         const GHC.RTS.Flags.$tc'HeapByCCS1_closure+1;
         const 375182006286221967;
         const 1294461661035214646;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.558723223 UTC

[section ""cstring" . GHC.RTS.Flags.$tc'HeapByMod2_bytes" {
     GHC.RTS.Flags.$tc'HeapByMod2_bytes:
         I8[] [39,72,101,97,112,66,121,77,111,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.560410398 UTC

[section ""data" . GHC.RTS.Flags.$tc'HeapByMod1_closure" {
     GHC.RTS.Flags.$tc'HeapByMod1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tc'HeapByMod2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.562536275 UTC

[section ""data" . GHC.RTS.Flags.$tc'HeapByMod_closure" {
     GHC.RTS.Flags.$tc'HeapByMod_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tc'HeapByMod1_closure+1;
         const GHC.RTS.Flags.$tc'HeapByCCS1_closure+1;
         const 3073782159796995121;
         const 5048279594980811938;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.564275597 UTC

[section ""cstring" . GHC.RTS.Flags.$tc'HeapByDescr2_bytes" {
     GHC.RTS.Flags.$tc'HeapByDescr2_bytes:
         I8[] [39,72,101,97,112,66,121,68,101,115,99,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.566000542 UTC

[section ""data" . GHC.RTS.Flags.$tc'HeapByDescr1_closure" {
     GHC.RTS.Flags.$tc'HeapByDescr1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tc'HeapByDescr2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.567770604 UTC

[section ""data" . GHC.RTS.Flags.$tc'HeapByDescr_closure" {
     GHC.RTS.Flags.$tc'HeapByDescr_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tc'HeapByDescr1_closure+1;
         const GHC.RTS.Flags.$tc'HeapByCCS1_closure+1;
         const 14294268926604566514;
         const 3131270777588004653;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.569566482 UTC

[section ""cstring" . GHC.RTS.Flags.$tc'HeapByType2_bytes" {
     GHC.RTS.Flags.$tc'HeapByType2_bytes:
         I8[] [39,72,101,97,112,66,121,84,121,112,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.571252734 UTC

[section ""data" . GHC.RTS.Flags.$tc'HeapByType1_closure" {
     GHC.RTS.Flags.$tc'HeapByType1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tc'HeapByType2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.573033878 UTC

[section ""data" . GHC.RTS.Flags.$tc'HeapByType_closure" {
     GHC.RTS.Flags.$tc'HeapByType_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tc'HeapByType1_closure+1;
         const GHC.RTS.Flags.$tc'HeapByCCS1_closure+1;
         const 8520880302045566888;
         const 14673716970937392818;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.575161137 UTC

[section ""cstring" . GHC.RTS.Flags.$tc'HeapByRetainer2_bytes" {
     GHC.RTS.Flags.$tc'HeapByRetainer2_bytes:
         I8[] [39,72,101,97,112,66,121,82,101,116,97,105,110,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.576854093 UTC

[section ""data" . GHC.RTS.Flags.$tc'HeapByRetainer1_closure" {
     GHC.RTS.Flags.$tc'HeapByRetainer1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tc'HeapByRetainer2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.578648235 UTC

[section ""data" . GHC.RTS.Flags.$tc'HeapByRetainer_closure" {
     GHC.RTS.Flags.$tc'HeapByRetainer_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tc'HeapByRetainer1_closure+1;
         const GHC.RTS.Flags.$tc'HeapByCCS1_closure+1;
         const 61843641731792008;
         const 4241776275235002595;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.580983512 UTC

[section ""cstring" . GHC.RTS.Flags.$tc'HeapByLDV2_bytes" {
     GHC.RTS.Flags.$tc'HeapByLDV2_bytes:
         I8[] [39,72,101,97,112,66,121,76,68,86]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.582796592 UTC

[section ""data" . GHC.RTS.Flags.$tc'HeapByLDV1_closure" {
     GHC.RTS.Flags.$tc'HeapByLDV1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tc'HeapByLDV2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.58451569 UTC

[section ""data" . GHC.RTS.Flags.$tc'HeapByLDV_closure" {
     GHC.RTS.Flags.$tc'HeapByLDV_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tc'HeapByLDV1_closure+1;
         const GHC.RTS.Flags.$tc'HeapByCCS1_closure+1;
         const 7831191687879172657;
         const 1806202913880638899;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.586270323 UTC

[section ""cstring" . GHC.RTS.Flags.$tc'HeapByClosureType2_bytes" {
     GHC.RTS.Flags.$tc'HeapByClosureType2_bytes:
         I8[] [39,72,101,97,112,66,121,67,108,111,115,117,114,101,84,121,112,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.588001106 UTC

[section ""data" . GHC.RTS.Flags.$tc'HeapByClosureType1_closure" {
     GHC.RTS.Flags.$tc'HeapByClosureType1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tc'HeapByClosureType2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.590176472 UTC

[section ""data" . GHC.RTS.Flags.$tc'HeapByClosureType_closure" {
     GHC.RTS.Flags.$tc'HeapByClosureType_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tc'HeapByClosureType1_closure+1;
         const GHC.RTS.Flags.$tc'HeapByCCS1_closure+1;
         const 6110411975351435084;
         const 11148202771200845961;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.591819997 UTC

[section ""cstring" . GHC.RTS.Flags.$tcProfFlags2_bytes" {
     GHC.RTS.Flags.$tcProfFlags2_bytes:
         I8[] [80,114,111,102,70,108,97,103,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.593427617 UTC

[section ""data" . GHC.RTS.Flags.$tcProfFlags1_closure" {
     GHC.RTS.Flags.$tcProfFlags1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tcProfFlags2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.595260808 UTC

[section ""data" . GHC.RTS.Flags.$tcProfFlags_closure" {
     GHC.RTS.Flags.$tcProfFlags_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tcProfFlags1_closure+1;
         const GHC.Types.krep$*_closure;
         const 18303143489504836683;
         const 5771588416076717584;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.597047199 UTC

[section ""data" . $krep65_rcV7I_closure" {
     $krep65_rcV7I_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.RTS.Flags.$tcProfFlags_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.598845537 UTC

[section ""data" . $krep66_rcV7J_closure" {
     $krep66_rcV7J_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_rcV6P_closure+1;
         const $krep65_rcV7I_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.600509998 UTC

[section ""data" . $krep67_rcV7K_closure" {
     $krep67_rcV7K_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_rcV6P_closure+1;
         const $krep66_rcV7J_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.602284105 UTC

[section ""data" . $krep68_rcV7L_closure" {
     $krep68_rcV7L_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_rcV6P_closure+1;
         const $krep67_rcV7K_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.604072895 UTC

[section ""data" . $krep69_rcV7M_closure" {
     $krep69_rcV7M_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_rcV6P_closure+1;
         const $krep68_rcV7L_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.606816094 UTC

[section ""data" . $krep70_rcV7N_closure" {
     $krep70_rcV7N_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_rcV6P_closure+1;
         const $krep69_rcV7M_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.608614015 UTC

[section ""data" . $krep71_rcV7O_closure" {
     $krep71_rcV7O_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_rcV6P_closure+1;
         const $krep70_rcV7N_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.61033562 UTC

[section ""data" . $krep72_rcV7P_closure" {
     $krep72_rcV7P_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_rcV6P_closure+1;
         const $krep71_rcV7O_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.612028282 UTC

[section ""data" . $krep73_rcV7Q_closure" {
     $krep73_rcV7Q_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_rcV6H_closure+1;
         const $krep72_rcV7P_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.613789398 UTC

[section ""data" . $krep74_rcV7R_closure" {
     $krep74_rcV7R_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_rcV6H_closure+1;
         const $krep73_rcV7Q_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.615498205 UTC

[section ""data" . $krep75_rcV7S_closure" {
     $krep75_rcV7S_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rcV6K_closure+1;
         const $krep74_rcV7R_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.617214949 UTC

[section ""data" . $krep76_rcV7T_closure" {
     $krep76_rcV7T_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rcV6K_closure+1;
         const $krep75_rcV7S_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.619019798 UTC

[section ""data" . $krep77_rcV7U_closure" {
     $krep77_rcV7U_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_rcV6H_closure+1;
         const $krep76_rcV7T_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.620770289 UTC

[section ""data" . $krep78_rcV7V_closure" {
     $krep78_rcV7V_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_rcV6I_closure+1;
         const $krep77_rcV7U_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.623024162 UTC

[section ""data" . GHC.RTS.Flags.$tc'ProfFlags1_closure" {
     GHC.RTS.Flags.$tc'ProfFlags1_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.RTS.Flags.$tc'HeapByCCS1_closure+1;
         const $krep78_rcV7V_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.624761216 UTC

[section ""cstring" . GHC.RTS.Flags.$tc'ProfFlags3_bytes" {
     GHC.RTS.Flags.$tc'ProfFlags3_bytes:
         I8[] [39,80,114,111,102,70,108,97,103,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.626467969 UTC

[section ""data" . GHC.RTS.Flags.$tc'ProfFlags2_closure" {
     GHC.RTS.Flags.$tc'ProfFlags2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tc'ProfFlags3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.628407266 UTC

[section ""data" . GHC.RTS.Flags.$tc'ProfFlags_closure" {
     GHC.RTS.Flags.$tc'ProfFlags_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tc'ProfFlags2_closure+1;
         const GHC.RTS.Flags.$tc'ProfFlags1_closure+4;
         const 9752289794957121031;
         const 14994683249272336230;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.630189336 UTC

[section ""cstring" . GHC.RTS.Flags.$tcDoTrace2_bytes" {
     GHC.RTS.Flags.$tcDoTrace2_bytes:
         I8[] [68,111,84,114,97,99,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.632382977 UTC

[section ""data" . GHC.RTS.Flags.$tcDoTrace1_closure" {
     GHC.RTS.Flags.$tcDoTrace1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tcDoTrace2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.63430399 UTC

[section ""data" . GHC.RTS.Flags.$tcDoTrace_closure" {
     GHC.RTS.Flags.$tcDoTrace_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tcDoTrace1_closure+1;
         const GHC.Types.krep$*_closure;
         const 8168148363895152846;
         const 15356139801098904848;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.636090111 UTC

[section ""data" . GHC.RTS.Flags.$tc'TraceEventLog1_closure" {
     GHC.RTS.Flags.$tc'TraceEventLog1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.RTS.Flags.$tcDoTrace_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.638264432 UTC

[section ""cstring" . GHC.RTS.Flags.$tc'TraceNone2_bytes" {
     GHC.RTS.Flags.$tc'TraceNone2_bytes:
         I8[] [39,84,114,97,99,101,78,111,110,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.639908901 UTC

[section ""data" . GHC.RTS.Flags.$tc'TraceNone1_closure" {
     GHC.RTS.Flags.$tc'TraceNone1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tc'TraceNone2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.641712033 UTC

[section ""data" . GHC.RTS.Flags.$tc'TraceNone_closure" {
     GHC.RTS.Flags.$tc'TraceNone_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tc'TraceNone1_closure+1;
         const GHC.RTS.Flags.$tc'TraceEventLog1_closure+1;
         const 14634634304079691876;
         const 15533180491606473078;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.643507157 UTC

[section ""cstring" . GHC.RTS.Flags.$tc'TraceEventLog3_bytes" {
     GHC.RTS.Flags.$tc'TraceEventLog3_bytes:
         I8[] [39,84,114,97,99,101,69,118,101,110,116,76,111,103]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.645326538 UTC

[section ""data" . GHC.RTS.Flags.$tc'TraceEventLog2_closure" {
     GHC.RTS.Flags.$tc'TraceEventLog2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tc'TraceEventLog3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.647095727 UTC

[section ""data" . GHC.RTS.Flags.$tc'TraceEventLog_closure" {
     GHC.RTS.Flags.$tc'TraceEventLog_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tc'TraceEventLog2_closure+1;
         const GHC.RTS.Flags.$tc'TraceEventLog1_closure+1;
         const 7440420927604344223;
         const 10976987085514046969;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.648875696 UTC

[section ""cstring" . GHC.RTS.Flags.$tc'TraceStderr2_bytes" {
     GHC.RTS.Flags.$tc'TraceStderr2_bytes:
         I8[] [39,84,114,97,99,101,83,116,100,101,114,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.651053771 UTC

[section ""data" . GHC.RTS.Flags.$tc'TraceStderr1_closure" {
     GHC.RTS.Flags.$tc'TraceStderr1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tc'TraceStderr2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.652762601 UTC

[section ""data" . GHC.RTS.Flags.$tc'TraceStderr_closure" {
     GHC.RTS.Flags.$tc'TraceStderr_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tc'TraceStderr1_closure+1;
         const GHC.RTS.Flags.$tc'TraceEventLog1_closure+1;
         const 8388789781026742095;
         const 13828162497742776102;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.654593251 UTC

[section ""cstring" . GHC.RTS.Flags.$tcTraceFlags2_bytes" {
     GHC.RTS.Flags.$tcTraceFlags2_bytes:
         I8[] [84,114,97,99,101,70,108,97,103,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.656228498 UTC

[section ""data" . GHC.RTS.Flags.$tcTraceFlags1_closure" {
     GHC.RTS.Flags.$tcTraceFlags1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tcTraceFlags2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.658016039 UTC

[section ""data" . GHC.RTS.Flags.$tcTraceFlags_closure" {
     GHC.RTS.Flags.$tcTraceFlags_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tcTraceFlags1_closure+1;
         const GHC.Types.krep$*_closure;
         const 10588031724247337177;
         const 11094204731105652221;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.660403041 UTC

[section ""data" . $krep79_rcV7W_closure" {
     $krep79_rcV7W_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.RTS.Flags.$tcTraceFlags_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.662563341 UTC

[section ""data" . $krep80_rcV7X_closure" {
     $krep80_rcV7X_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rcV6K_closure+1;
         const $krep79_rcV7W_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.664247196 UTC

[section ""data" . $krep81_rcV7Y_closure" {
     $krep81_rcV7Y_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rcV6K_closure+1;
         const $krep80_rcV7X_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.666019545 UTC

[section ""data" . $krep82_rcV7Z_closure" {
     $krep82_rcV7Z_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rcV6K_closure+1;
         const $krep81_rcV7Y_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.6676915 UTC

[section ""data" . $krep83_rcV80_closure" {
     $krep83_rcV80_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rcV6K_closure+1;
         const $krep82_rcV7Z_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.669315474 UTC

[section ""data" . $krep84_rcV81_closure" {
     $krep84_rcV81_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rcV6K_closure+1;
         const $krep83_rcV80_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.670984734 UTC

[section ""data" . $krep85_rcV82_closure" {
     $krep85_rcV82_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rcV6K_closure+1;
         const $krep84_rcV81_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.672647148 UTC

[section ""data" . GHC.RTS.Flags.$tc'TraceFlags1_closure" {
     GHC.RTS.Flags.$tc'TraceFlags1_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.RTS.Flags.$tc'TraceEventLog1_closure+1;
         const $krep85_rcV82_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.674243516 UTC

[section ""cstring" . GHC.RTS.Flags.$tc'TraceFlags3_bytes" {
     GHC.RTS.Flags.$tc'TraceFlags3_bytes:
         I8[] [39,84,114,97,99,101,70,108,97,103,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.675879557 UTC

[section ""data" . GHC.RTS.Flags.$tc'TraceFlags2_closure" {
     GHC.RTS.Flags.$tc'TraceFlags2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tc'TraceFlags3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.677963622 UTC

[section ""data" . GHC.RTS.Flags.$tc'TraceFlags_closure" {
     GHC.RTS.Flags.$tc'TraceFlags_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tc'TraceFlags2_closure+1;
         const GHC.RTS.Flags.$tc'TraceFlags1_closure+4;
         const 10426638099741820496;
         const 9827927718155532703;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.67982429 UTC

[section ""cstring" . GHC.RTS.Flags.$tcTickyFlags2_bytes" {
     GHC.RTS.Flags.$tcTickyFlags2_bytes:
         I8[] [84,105,99,107,121,70,108,97,103,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.681578242 UTC

[section ""data" . GHC.RTS.Flags.$tcTickyFlags1_closure" {
     GHC.RTS.Flags.$tcTickyFlags1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tcTickyFlags2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.683384547 UTC

[section ""data" . GHC.RTS.Flags.$tcTickyFlags_closure" {
     GHC.RTS.Flags.$tcTickyFlags_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tcTickyFlags1_closure+1;
         const GHC.Types.krep$*_closure;
         const 3140770608719878061;
         const 4402696908558552646;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.685818762 UTC

[section ""data" . $krep86_rcV83_closure" {
     $krep86_rcV83_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.RTS.Flags.$tcTickyFlags_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.687525345 UTC

[section ""data" . $krep87_rcV84_closure" {
     $krep87_rcV84_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_rcV6P_closure+1;
         const $krep86_rcV83_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.689659727 UTC

[section ""data" . GHC.RTS.Flags.$tc'TickyFlags1_closure" {
     GHC.RTS.Flags.$tc'TickyFlags1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rcV6K_closure+1;
         const $krep87_rcV84_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.69133885 UTC

[section ""cstring" . GHC.RTS.Flags.$tc'TickyFlags3_bytes" {
     GHC.RTS.Flags.$tc'TickyFlags3_bytes:
         I8[] [39,84,105,99,107,121,70,108,97,103,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.693076434 UTC

[section ""data" . GHC.RTS.Flags.$tc'TickyFlags2_closure" {
     GHC.RTS.Flags.$tc'TickyFlags2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tc'TickyFlags3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.694853961 UTC

[section ""data" . GHC.RTS.Flags.$tc'TickyFlags_closure" {
     GHC.RTS.Flags.$tc'TickyFlags_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tc'TickyFlags2_closure+1;
         const GHC.RTS.Flags.$tc'TickyFlags1_closure+4;
         const 793201039098423274;
         const 12626117550845714720;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.696602884 UTC

[section ""cstring" . GHC.RTS.Flags.$tcParFlags2_bytes" {
     GHC.RTS.Flags.$tcParFlags2_bytes:
         I8[] [80,97,114,70,108,97,103,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.698281629 UTC

[section ""data" . GHC.RTS.Flags.$tcParFlags1_closure" {
     GHC.RTS.Flags.$tcParFlags1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tcParFlags2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.700051451 UTC

[section ""data" . GHC.RTS.Flags.$tcParFlags_closure" {
     GHC.RTS.Flags.$tcParFlags_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tcParFlags1_closure+1;
         const GHC.Types.krep$*_closure;
         const 17485272812108883877;
         const 6760473700794560465;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.701976626 UTC

[section ""data" . $krep88_rcV85_closure" {
     $krep88_rcV85_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.RTS.Flags.$tcParFlags_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.703781031 UTC

[section ""data" . $krep89_rcV86_closure" {
     $krep89_rcV86_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rcV6K_closure+1;
         const $krep88_rcV85_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.706019111 UTC

[section ""data" . $krep90_rcV87_closure" {
     $krep90_rcV87_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_rcV6L_closure+1;
         const $krep89_rcV86_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.707791884 UTC

[section ""data" . $krep91_rcV88_closure" {
     $krep91_rcV88_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_rcV6L_closure+1;
         const $krep90_rcV87_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.709479611 UTC

[section ""data" . $krep92_rcV89_closure" {
     $krep92_rcV89_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_rcV6L_closure+1;
         const $krep91_rcV88_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.71181665 UTC

[section ""data" . $krep93_rcV8a_closure" {
     $krep93_rcV8a_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rcV6K_closure+1;
         const $krep92_rcV89_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.713634701 UTC

[section ""data" . $krep94_rcV8b_closure" {
     $krep94_rcV8b_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_rcV6L_closure+1;
         const $krep93_rcV8a_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.715295595 UTC

[section ""data" . $krep95_rcV8c_closure" {
     $krep95_rcV8c_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rcV6K_closure+1;
         const $krep94_rcV8b_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.716991421 UTC

[section ""data" . $krep96_rcV8d_closure" {
     $krep96_rcV8d_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_rcV6L_closure+1;
         const $krep95_rcV8c_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.718810181 UTC

[section ""data" . $krep97_rcV8e_closure" {
     $krep97_rcV8e_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rcV6K_closure+1;
         const $krep96_rcV8d_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.720507887 UTC

[section ""data" . GHC.RTS.Flags.$tc'ParFlags1_closure" {
     GHC.RTS.Flags.$tc'ParFlags1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_rcV6L_closure+1;
         const $krep97_rcV8e_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.722316975 UTC

[section ""cstring" . GHC.RTS.Flags.$tc'ParFlags3_bytes" {
     GHC.RTS.Flags.$tc'ParFlags3_bytes:
         I8[] [39,80,97,114,70,108,97,103,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.724030384 UTC

[section ""data" . GHC.RTS.Flags.$tc'ParFlags2_closure" {
     GHC.RTS.Flags.$tc'ParFlags2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tc'ParFlags3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.726244703 UTC

[section ""data" . GHC.RTS.Flags.$tc'ParFlags_closure" {
     GHC.RTS.Flags.$tc'ParFlags_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tc'ParFlags2_closure+1;
         const GHC.RTS.Flags.$tc'ParFlags1_closure+4;
         const 18026295039373871109;
         const 526055960347961992;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.728040258 UTC

[section ""cstring" . GHC.RTS.Flags.$tcRTSFlags2_bytes" {
     GHC.RTS.Flags.$tcRTSFlags2_bytes:
         I8[] [82,84,83,70,108,97,103,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.729794002 UTC

[section ""data" . GHC.RTS.Flags.$tcRTSFlags1_closure" {
     GHC.RTS.Flags.$tcRTSFlags1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tcRTSFlags2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.731571998 UTC

[section ""data" . GHC.RTS.Flags.$tcRTSFlags_closure" {
     GHC.RTS.Flags.$tcRTSFlags_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tcRTSFlags1_closure+1;
         const GHC.Types.krep$*_closure;
         const 4919046205018020996;
         const 18187576420379731741;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.733743724 UTC

[section ""data" . $krep98_rcV8f_closure" {
     $krep98_rcV8f_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.RTS.Flags.$tcRTSFlags_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.735458847 UTC

[section ""data" . $krep99_rcV8g_closure" {
     $krep99_rcV8g_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep88_rcV85_closure+1;
         const $krep98_rcV8f_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.737814404 UTC

[section ""data" . $krep100_rcV8h_closure" {
     $krep100_rcV8h_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep86_rcV83_closure+1;
         const $krep99_rcV8g_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.739642638 UTC

[section ""data" . $krep101_rcV8i_closure" {
     $krep101_rcV8i_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep79_rcV7W_closure+1;
         const $krep100_rcV8h_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.741415874 UTC

[section ""data" . $krep102_rcV8j_closure" {
     $krep102_rcV8j_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep65_rcV7I_closure+1;
         const $krep101_rcV8i_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.743132912 UTC

[section ""data" . $krep103_rcV8k_closure" {
     $krep103_rcV8k_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep62_rcV7F_closure+1;
         const $krep102_rcV8j_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.744863989 UTC

[section ""data" . $krep104_rcV8l_closure" {
     $krep104_rcV8l_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep47_rcV7q_closure+1;
         const $krep103_rcV8k_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.746665953 UTC

[section ""data" . $krep105_rcV8m_closure" {
     $krep105_rcV8m_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep40_rcV7j_closure+1;
         const $krep104_rcV8l_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.748313235 UTC

[section ""data" . $krep106_rcV8n_closure" {
     $krep106_rcV8n_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep38_rcV7h_closure+1;
         const $krep105_rcV8m_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.750655211 UTC

[section ""data" . GHC.RTS.Flags.$tc'RTSFlags1_closure" {
     GHC.RTS.Flags.$tc'RTSFlags1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep11_rcV6Q_closure+1;
         const $krep106_rcV8n_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.752337614 UTC

[section ""cstring" . GHC.RTS.Flags.$tc'RTSFlags3_bytes" {
     GHC.RTS.Flags.$tc'RTSFlags3_bytes:
         I8[] [39,82,84,83,70,108,97,103,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.753981022 UTC

[section ""data" . GHC.RTS.Flags.$tc'RTSFlags2_closure" {
     GHC.RTS.Flags.$tc'RTSFlags2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.RTS.Flags.$tc'RTSFlags3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.755709876 UTC

[section ""data" . GHC.RTS.Flags.$tc'RTSFlags_closure" {
     GHC.RTS.Flags.$tc'RTSFlags_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.RTS.Flags.$trModule_closure+1;
         const GHC.RTS.Flags.$tc'RTSFlags2_closure+1;
         const GHC.RTS.Flags.$tc'RTSFlags1_closure+4;
         const 541346542500161105;
         const 7434587216372587438;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.758200504 UTC

[section ""data" . lvl96_rcV8o_closure" {
     lvl96_rcV8o_closure:
         const lvl96_rcV8o_info;
         const 0;
         const 0;
         const 0;
 },
 lvl96_rcV8o_entry() //  [R1]
         { []
         }
     {offset
       cdhh7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdhh8; else goto cdhh9;
       cdhh8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdhh9: // global
           (_cdhh4::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdhh4::I64 == 0) goto cdhh6; else goto cdhh5;
       cdhh6: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdhh5: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdhh4::I64;
           R2 = 5;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl96_rcV8o_info" {
     lvl96_rcV8o_info:
         const lvl96_rcV8o_entry;
         const 0;
         const 4294967317;
         const SddB2_srt+816;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.763015903 UTC

[section ""data" . GHC.RTS.Flags.$fEnumGiveGCStats_$csucc_closure" {
     GHC.RTS.Flags.$fEnumGiveGCStats_$csucc_closure:
         const GHC.RTS.Flags.$fEnumGiveGCStats_$csucc_info;
         const 0;
 },
 GHC.RTS.Flags.$fEnumGiveGCStats_$csucc_entry() //  [R2]
         { []
         }
     {offset
       cdhhw: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdhhx; else goto cdhhy;
       cdhhx: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumGiveGCStats_$csucc_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdhhy: // global
           I64[Sp - 8] = block_cdhhm_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udhhR; else goto cdhhn;
       udhhR: // global
           call _cdhhm(R1) args: 0, res: 0, upd: 0;
       cdhhn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumGiveGCStats_$csucc_info" {
     GHC.RTS.Flags.$fEnumGiveGCStats_$csucc_info:
         const GHC.RTS.Flags.$fEnumGiveGCStats_$csucc_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SddB2_srt+824;
 },
 _cdhhm() //  [R1]
         { []
         }
     {offset
       cdhhm: // global
           _cdhhv::P64 = R1 & 7;
           if (_cdhhv::P64 < 4) goto udhhO; else goto udhhQ;
       udhhO: // global
           if (_cdhhv::P64 < 3) goto udhhP; else goto cdhhs;
       udhhP: // global
           if (_cdhhv::P64 < 2) goto cdhhq; else goto cdhhr;
       cdhhq: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdhhr: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdhhs: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       udhhQ: // global
           if (_cdhhv::P64 < 5) goto cdhht; else goto cdhhu;
       cdhht: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdhhu: // global
           R1 = lvl96_rcV8o_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdhhm_info" {
     block_cdhhm_info:
         const _cdhhm;
         const 0;
         const 4294967326;
         const SddB2_srt+832;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.771533947 UTC

[section ""data" . GHC.RTS.Flags.$fEnumGiveGCStats_go4_closure" {
     GHC.RTS.Flags.$fEnumGiveGCStats_go4_closure:
         const GHC.RTS.Flags.$fEnumGiveGCStats_go4_info;
         const 0;
 },
 sat_sdd98_entry() //  [R1]
         { []
         }
     {offset
       cdhik: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdhil; else goto cdhim;
       cdhil: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdhim: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sdd96::I64 = I64[R1 + 16];
           if (_sdd96::I64 != 0) goto cdhii; else goto cdhij;
       cdhii: // global
           R2 = _sdd96::I64 + 1;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumGiveGCStats_go4_entry(R2) args: 24, res: 0, upd: 24;
       cdhij: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdd98_info" {
     sat_sdd98_info:
         const sat_sdd98_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+840;
 },
 sat_sdd95_entry() //  [R1]
         { []
         }
     {offset
       cdhiB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdhiC; else goto cdhiD;
       cdhiC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdhiD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sdd94::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sdd94::I64, 3)) goto udhiE; else goto udhiH;
       udhiE: // global
           if (%MO_S_Lt_W64(_sdd94::I64, 1)) goto udhiF; else goto udhiG;
       udhiF: // global
           if (%MO_S_Lt_W64(_sdd94::I64, 0)) goto cdhiv; else goto cdhiw;
       cdhiw: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhiG: // global
           if (%MO_S_Lt_W64(_sdd94::I64, 2)) goto cdhix; else goto cdhiy;
       cdhix: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhiy: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhiH: // global
           if (%MO_S_Ge_W64(_sdd94::I64, 5)) goto cdhiv; else goto udhiI;
       cdhiv: // global
           R2 = _sdd94::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       udhiI: // global
           if (%MO_S_Lt_W64(_sdd94::I64, 4)) goto cdhiz; else goto cdhiA;
       cdhiz: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhiA: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdd95_info" {
     sat_sdd95_info:
         const sat_sdd95_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+816;
 },
 GHC.RTS.Flags.$fEnumGiveGCStats_go4_entry() //  [R2]
         { []
         }
     {offset
       cdhiK: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdhiO; else goto cdhiN;
       cdhiO: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumGiveGCStats_go4_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdhiN: // global
           I64[Hp - 64] = sat_sdd98_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sdd95_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumGiveGCStats_go4_info" {
     GHC.RTS.Flags.$fEnumGiveGCStats_go4_info:
         const GHC.RTS.Flags.$fEnumGiveGCStats_go4_entry;
         const 0;
         const 38654705678;
         const 4294967300;
         const SddB2_srt+816;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.780898625 UTC

[section ""data" . GHC.RTS.Flags.$fEnumGiveGCStats_go3_closure" {
     GHC.RTS.Flags.$fEnumGiveGCStats_go3_closure:
         const GHC.RTS.Flags.$fEnumGiveGCStats_go3_info;
         const 0;
 },
 sat_sdd9e_entry() //  [R1]
         { []
         }
     {offset
       cdhjs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdhjt; else goto cdhju;
       cdhjt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdhju: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sdd9c::I64 = I64[R1 + 16];
           if (_sdd9c::I64 != 1) goto cdhjq; else goto cdhjr;
       cdhjq: // global
           R2 = _sdd9c::I64 + 1;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumGiveGCStats_go3_entry(R2) args: 24, res: 0, upd: 24;
       cdhjr: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdd9e_info" {
     sat_sdd9e_info:
         const sat_sdd9e_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+848;
 },
 sat_sdd9b_entry() //  [R1]
         { []
         }
     {offset
       cdhjJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdhjK; else goto cdhjL;
       cdhjK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdhjL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sdd9a::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sdd9a::I64, 3)) goto udhjM; else goto udhjP;
       udhjM: // global
           if (%MO_S_Lt_W64(_sdd9a::I64, 1)) goto udhjN; else goto udhjO;
       udhjN: // global
           if (%MO_S_Lt_W64(_sdd9a::I64, 0)) goto cdhjD; else goto cdhjE;
       cdhjE: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhjO: // global
           if (%MO_S_Lt_W64(_sdd9a::I64, 2)) goto cdhjF; else goto cdhjG;
       cdhjF: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhjG: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhjP: // global
           if (%MO_S_Ge_W64(_sdd9a::I64, 5)) goto cdhjD; else goto udhjQ;
       cdhjD: // global
           R2 = _sdd9a::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       udhjQ: // global
           if (%MO_S_Lt_W64(_sdd9a::I64, 4)) goto cdhjH; else goto cdhjI;
       cdhjH: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhjI: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdd9b_info" {
     sat_sdd9b_info:
         const sat_sdd9b_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+816;
 },
 GHC.RTS.Flags.$fEnumGiveGCStats_go3_entry() //  [R2]
         { []
         }
     {offset
       cdhjS: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdhjW; else goto cdhjV;
       cdhjW: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumGiveGCStats_go3_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdhjV: // global
           I64[Hp - 64] = sat_sdd9e_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sdd9b_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumGiveGCStats_go3_info" {
     GHC.RTS.Flags.$fEnumGiveGCStats_go3_info:
         const GHC.RTS.Flags.$fEnumGiveGCStats_go3_entry;
         const 0;
         const 73014444046;
         const 4294967300;
         const SddB2_srt+816;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.790929962 UTC

[section ""data" . GHC.RTS.Flags.$fEnumGiveGCStats_go2_closure" {
     GHC.RTS.Flags.$fEnumGiveGCStats_go2_closure:
         const GHC.RTS.Flags.$fEnumGiveGCStats_go2_info;
         const 0;
 },
 sat_sdd9k_entry() //  [R1]
         { []
         }
     {offset
       cdhkA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdhkB; else goto cdhkC;
       cdhkB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdhkC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sdd9i::I64 = I64[R1 + 16];
           if (_sdd9i::I64 != 2) goto cdhky; else goto cdhkz;
       cdhky: // global
           R2 = _sdd9i::I64 + 1;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumGiveGCStats_go2_entry(R2) args: 24, res: 0, upd: 24;
       cdhkz: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdd9k_info" {
     sat_sdd9k_info:
         const sat_sdd9k_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+856;
 },
 sat_sdd9h_entry() //  [R1]
         { []
         }
     {offset
       cdhkR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdhkS; else goto cdhkT;
       cdhkS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdhkT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sdd9g::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sdd9g::I64, 3)) goto udhkU; else goto udhkX;
       udhkU: // global
           if (%MO_S_Lt_W64(_sdd9g::I64, 1)) goto udhkV; else goto udhkW;
       udhkV: // global
           if (%MO_S_Lt_W64(_sdd9g::I64, 0)) goto cdhkL; else goto cdhkM;
       cdhkM: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhkW: // global
           if (%MO_S_Lt_W64(_sdd9g::I64, 2)) goto cdhkN; else goto cdhkO;
       cdhkN: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhkO: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhkX: // global
           if (%MO_S_Ge_W64(_sdd9g::I64, 5)) goto cdhkL; else goto udhkY;
       cdhkL: // global
           R2 = _sdd9g::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       udhkY: // global
           if (%MO_S_Lt_W64(_sdd9g::I64, 4)) goto cdhkP; else goto cdhkQ;
       cdhkP: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhkQ: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdd9h_info" {
     sat_sdd9h_info:
         const sat_sdd9h_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+816;
 },
 GHC.RTS.Flags.$fEnumGiveGCStats_go2_entry() //  [R2]
         { []
         }
     {offset
       cdhl0: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdhl4; else goto cdhl3;
       cdhl4: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumGiveGCStats_go2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdhl3: // global
           I64[Hp - 64] = sat_sdd9k_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sdd9h_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumGiveGCStats_go2_info" {
     GHC.RTS.Flags.$fEnumGiveGCStats_go2_info:
         const GHC.RTS.Flags.$fEnumGiveGCStats_go2_entry;
         const 0;
         const 141733920782;
         const 4294967300;
         const SddB2_srt+816;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.800687022 UTC

[section ""data" . GHC.RTS.Flags.$fEnumGiveGCStats_go1_closure" {
     GHC.RTS.Flags.$fEnumGiveGCStats_go1_closure:
         const GHC.RTS.Flags.$fEnumGiveGCStats_go1_info;
         const 0;
 },
 sat_sdd9q_entry() //  [R1]
         { []
         }
     {offset
       cdhlI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdhlJ; else goto cdhlK;
       cdhlJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdhlK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sdd9o::I64 = I64[R1 + 16];
           if (_sdd9o::I64 != 3) goto cdhlG; else goto cdhlH;
       cdhlG: // global
           R2 = _sdd9o::I64 + 1;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumGiveGCStats_go1_entry(R2) args: 24, res: 0, upd: 24;
       cdhlH: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdd9q_info" {
     sat_sdd9q_info:
         const sat_sdd9q_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+864;
 },
 sat_sdd9n_entry() //  [R1]
         { []
         }
     {offset
       cdhlZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdhm0; else goto cdhm1;
       cdhm0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdhm1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sdd9m::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sdd9m::I64, 3)) goto udhm2; else goto udhm5;
       udhm2: // global
           if (%MO_S_Lt_W64(_sdd9m::I64, 1)) goto udhm3; else goto udhm4;
       udhm3: // global
           if (%MO_S_Lt_W64(_sdd9m::I64, 0)) goto cdhlT; else goto cdhlU;
       cdhlU: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhm4: // global
           if (%MO_S_Lt_W64(_sdd9m::I64, 2)) goto cdhlV; else goto cdhlW;
       cdhlV: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhlW: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhm5: // global
           if (%MO_S_Ge_W64(_sdd9m::I64, 5)) goto cdhlT; else goto udhm6;
       cdhlT: // global
           R2 = _sdd9m::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       udhm6: // global
           if (%MO_S_Lt_W64(_sdd9m::I64, 4)) goto cdhlX; else goto cdhlY;
       cdhlX: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhlY: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdd9n_info" {
     sat_sdd9n_info:
         const sat_sdd9n_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+816;
 },
 GHC.RTS.Flags.$fEnumGiveGCStats_go1_entry() //  [R2]
         { []
         }
     {offset
       cdhm8: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdhmc; else goto cdhmb;
       cdhmc: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumGiveGCStats_go1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdhmb: // global
           I64[Hp - 64] = sat_sdd9q_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sdd9n_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumGiveGCStats_go1_info" {
     GHC.RTS.Flags.$fEnumGiveGCStats_go1_info:
         const GHC.RTS.Flags.$fEnumGiveGCStats_go1_entry;
         const 0;
         const 279172874254;
         const 4294967300;
         const SddB2_srt+816;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.811625975 UTC

[section ""data" . GHC.RTS.Flags.$fEnumGiveGCStats_go_closure" {
     GHC.RTS.Flags.$fEnumGiveGCStats_go_closure:
         const GHC.RTS.Flags.$fEnumGiveGCStats_go_info;
         const 0;
 },
 sat_sdd9w_entry() //  [R1]
         { []
         }
     {offset
       cdhmQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdhmR; else goto cdhmS;
       cdhmR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdhmS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sdd9u::I64 = I64[R1 + 16];
           if (_sdd9u::I64 != 4) goto cdhmO; else goto cdhmP;
       cdhmO: // global
           R2 = _sdd9u::I64 + 1;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumGiveGCStats_go_entry(R2) args: 24, res: 0, upd: 24;
       cdhmP: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdd9w_info" {
     sat_sdd9w_info:
         const sat_sdd9w_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+872;
 },
 sat_sdd9t_entry() //  [R1]
         { []
         }
     {offset
       cdhn7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdhn8; else goto cdhn9;
       cdhn8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdhn9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sdd9s::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sdd9s::I64, 3)) goto udhna; else goto udhnd;
       udhna: // global
           if (%MO_S_Lt_W64(_sdd9s::I64, 1)) goto udhnb; else goto udhnc;
       udhnb: // global
           if (%MO_S_Lt_W64(_sdd9s::I64, 0)) goto cdhn1; else goto cdhn2;
       cdhn2: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhnc: // global
           if (%MO_S_Lt_W64(_sdd9s::I64, 2)) goto cdhn3; else goto cdhn4;
       cdhn3: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhn4: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhnd: // global
           if (%MO_S_Ge_W64(_sdd9s::I64, 5)) goto cdhn1; else goto udhne;
       cdhn1: // global
           R2 = _sdd9s::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       udhne: // global
           if (%MO_S_Lt_W64(_sdd9s::I64, 4)) goto cdhn5; else goto cdhn6;
       cdhn5: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhn6: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdd9t_info" {
     sat_sdd9t_info:
         const sat_sdd9t_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+816;
 },
 GHC.RTS.Flags.$fEnumGiveGCStats_go_entry() //  [R2]
         { []
         }
     {offset
       cdhng: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdhnk; else goto cdhnj;
       cdhnk: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumGiveGCStats_go_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdhnj: // global
           I64[Hp - 64] = sat_sdd9w_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sdd9t_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumGiveGCStats_go_info" {
     GHC.RTS.Flags.$fEnumGiveGCStats_go_info:
         const GHC.RTS.Flags.$fEnumGiveGCStats_go_entry;
         const 0;
         const 554050781198;
         const 4294967300;
         const SddB2_srt+816;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.821819554 UTC

[section ""data" . GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFromTo_closure" {
     GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFromTo_closure:
         const GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFromTo_info;
         const 0;
 },
 GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFromTo_entry() //  [R2, R3]
         { []
         }
     {offset
       cdho2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdho3; else goto cdho4;
       cdho3: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFromTo_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdho4: // global
           I64[Sp - 16] = block_cdhnS_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udhpj; else goto cdhnT;
       udhpj: // global
           call _cdhnS(R1) args: 0, res: 0, upd: 0;
       cdhnT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFromTo_info" {
     GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFromTo_info:
         const GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFromTo_entry;
         const 0;
         const 270582939662;
         const 8589934607;
         const SddB2_srt+840;
 },
 _cdhnS() //  [R1]
         { []
         }
     {offset
       cdhnS: // global
           _sdd9y::P64 = P64[Sp + 8];
           _cdho1::P64 = R1 & 7;
           if (_cdho1::P64 < 4) goto udhpc; else goto udhpe;
       udhpc: // global
           if (_cdho1::P64 < 3) goto udhpd; else goto cdhnY;
       udhpd: // global
           if (_cdho1::P64 < 2) goto cdhnW; else goto cdhnX;
       cdhnW: // global
           _sdd9A::I64 = 0;
           goto sdd9z;
       cdhnX: // global
           _sdd9A::I64 = 1;
           goto sdd9z;
       cdhnY: // global
           _sdd9A::I64 = 2;
           goto sdd9z;
       udhpe: // global
           if (_cdho1::P64 < 5) goto cdhnZ; else goto cdho0;
       cdhnZ: // global
           _sdd9A::I64 = 3;
           goto sdd9z;
       cdho0: // global
           _sdd9A::I64 = 4;
           goto sdd9z;
       sdd9z: // global
           I64[Sp] = block_cdho8_info;
           R1 = _sdd9y::P64;
           I64[Sp + 8] = _sdd9A::I64;
           if (R1 & 7 != 0) goto udhpi; else goto cdhoa;
       udhpi: // global
           call _cdho8(R1) args: 0, res: 0, upd: 0;
       cdhoa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdhnS_info" {
     block_cdhnS_info:
         const _cdhnS;
         const 1;
         const 133143986206;
         const SddB2_srt+840;
 },
 _cdho8() //  [R1]
         { []
         }
     {offset
       cdho8: // global
           _sdd9A::I64 = I64[Sp + 8];
           _cdhpb::P64 = R1 & 7;
           if (_cdhpb::P64 < 4) goto udhpf; else goto udhph;
       udhpf: // global
           if (_cdhpb::P64 < 3) goto udhpg; else goto cdhoD;
       udhpg: // global
           if (_cdhpb::P64 < 2) goto cdhol; else goto cdhou;
       cdhol: // global
           if (%MO_S_Gt_W64(_sdd9A::I64, 0)) goto cdhoU; else goto cdhoi;
       cdhoi: // global
           R2 = _sdd9A::I64;
           Sp = Sp + 16;
           call GHC.RTS.Flags.$fEnumGiveGCStats_go4_entry(R2) args: 8, res: 0, upd: 8;
       cdhou: // global
           if (%MO_S_Gt_W64(_sdd9A::I64, 1)) goto cdhoU; else goto cdhos;
       cdhos: // global
           R2 = _sdd9A::I64;
           Sp = Sp + 16;
           call GHC.RTS.Flags.$fEnumGiveGCStats_go3_entry(R2) args: 8, res: 0, upd: 8;
       cdhoD: // global
           if (%MO_S_Gt_W64(_sdd9A::I64, 2)) goto cdhoU; else goto cdhoB;
       cdhoB: // global
           R2 = _sdd9A::I64;
           Sp = Sp + 16;
           call GHC.RTS.Flags.$fEnumGiveGCStats_go2_entry(R2) args: 8, res: 0, upd: 8;
       udhph: // global
           if (_cdhpb::P64 < 5) goto cdhoM; else goto cdhoV;
       cdhoM: // global
           if (%MO_S_Gt_W64(_sdd9A::I64, 3)) goto cdhoU; else goto cdhoK;
       cdhoK: // global
           R2 = _sdd9A::I64;
           Sp = Sp + 16;
           call GHC.RTS.Flags.$fEnumGiveGCStats_go1_entry(R2) args: 8, res: 0, upd: 8;
       cdhoV: // global
           if (%MO_S_Gt_W64(_sdd9A::I64, 4)) goto cdhoU; else goto cdhoT;
       cdhoU: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdhoT: // global
           R2 = _sdd9A::I64;
           Sp = Sp + 16;
           call GHC.RTS.Flags.$fEnumGiveGCStats_go_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdho8_info" {
     block_cdho8_info:
         const _cdho8;
         const 65;
         const 133143986206;
         const SddB2_srt+840;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.832205262 UTC

[section ""data" . GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFromThen_closure" {
     GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFromThen_closure:
         const GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFromThen_info;
         const 0;
 },
 GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFromThen_entry() //  [R2, R3]
         { []
         }
     {offset
       cdhpT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdhpU; else goto cdhpV;
       cdhpU: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFromThen_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdhpV: // global
           I64[Sp - 16] = block_cdhpJ_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udhra; else goto cdhpK;
       udhra: // global
           call _cdhpJ(R1) args: 0, res: 0, upd: 0;
       cdhpK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFromThen_info" {
     GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFromThen_info:
         const GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFromThen_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SddB2_srt+888;
 },
 _cdhpJ() //  [R1]
         { []
         }
     {offset
       cdhpJ: // global
           _sdd9J::P64 = P64[Sp + 8];
           _cdhpS::P64 = R1 & 7;
           if (_cdhpS::P64 < 4) goto udhr3; else goto udhr5;
       udhr3: // global
           if (_cdhpS::P64 < 3) goto udhr4; else goto cdhpP;
       udhr4: // global
           if (_cdhpS::P64 < 2) goto cdhpN; else goto cdhpO;
       cdhpN: // global
           _sdd9L::I64 = 0;
           goto sdd9K;
       cdhpO: // global
           _sdd9L::I64 = 1;
           goto sdd9K;
       cdhpP: // global
           _sdd9L::I64 = 2;
           goto sdd9K;
       udhr5: // global
           if (_cdhpS::P64 < 5) goto cdhpQ; else goto cdhpR;
       cdhpQ: // global
           _sdd9L::I64 = 3;
           goto sdd9K;
       cdhpR: // global
           _sdd9L::I64 = 4;
           goto sdd9K;
       sdd9K: // global
           I64[Sp] = block_cdhpZ_info;
           R1 = _sdd9J::P64;
           I64[Sp + 8] = _sdd9L::I64;
           if (R1 & 7 != 0) goto udhr9; else goto cdhq1;
       udhr9: // global
           call _cdhpZ(R1) args: 0, res: 0, upd: 0;
       cdhq1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdhpJ_info" {
     block_cdhpJ_info:
         const _cdhpJ;
         const 1;
         const 4294967326;
         const SddB2_srt+896;
 },
 _cdhpZ() //  [R1]
         { []
         }
     {offset
       cdhpZ: // global
           _sdd9L::I64 = I64[Sp + 8];
           _cdhr2::P64 = R1 & 7;
           if (_cdhr2::P64 < 4) goto udhr6; else goto udhr8;
       udhr6: // global
           if (_cdhr2::P64 < 3) goto udhr7; else goto cdhqq;
       udhr7: // global
           if (_cdhr2::P64 < 2) goto cdhq8; else goto cdhqh;
       cdhq8: // global
           I64[Sp + 8] = block_cdhq5_info;
           R3 = 0;
           R2 = _sdd9L::I64;
           Sp = Sp + 8;
           call GHC.Enum.efdInt_entry(R3, R2) args: 8, res: 8, upd: 8;
       cdhqh: // global
           I64[Sp + 8] = block_cdhqf_info;
           R3 = 1;
           R2 = _sdd9L::I64;
           Sp = Sp + 8;
           call GHC.Enum.efdInt_entry(R3, R2) args: 8, res: 8, upd: 8;
       cdhqq: // global
           I64[Sp + 8] = block_cdhqo_info;
           R3 = 2;
           R2 = _sdd9L::I64;
           Sp = Sp + 8;
           call GHC.Enum.efdInt_entry(R3, R2) args: 8, res: 8, upd: 8;
       udhr8: // global
           if (_cdhr2::P64 < 5) goto cdhqz; else goto cdhqI;
       cdhqz: // global
           I64[Sp + 8] = block_cdhqx_info;
           R3 = 3;
           R2 = _sdd9L::I64;
           Sp = Sp + 8;
           call GHC.Enum.efdInt_entry(R3, R2) args: 8, res: 8, upd: 8;
       cdhqI: // global
           I64[Sp + 8] = block_cdhqG_info;
           R3 = 4;
           R2 = _sdd9L::I64;
           Sp = Sp + 8;
           call GHC.Enum.efdInt_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdhpZ_info" {
     block_cdhpZ_info:
         const _cdhpZ;
         const 65;
         const 4294967326;
         const SddB2_srt+896;
 },
 _cdhq5() //  [R1]
         { []
         }
     {offset
       cdhq5: // global
           R3 = R1;
           R2 = GHC.RTS.Flags.$fEnumGiveGCStats_$ctoEnum_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdhq5_info" {
     block_cdhq5_info:
         const _cdhq5;
         const 0;
         const 4294967326;
         const SddB2_srt+896;
 },
 _cdhqf() //  [R1]
         { []
         }
     {offset
       cdhqf: // global
           R3 = R1;
           R2 = GHC.RTS.Flags.$fEnumGiveGCStats_$ctoEnum_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdhqf_info" {
     block_cdhqf_info:
         const _cdhqf;
         const 0;
         const 4294967326;
         const SddB2_srt+896;
 },
 _cdhqo() //  [R1]
         { []
         }
     {offset
       cdhqo: // global
           R3 = R1;
           R2 = GHC.RTS.Flags.$fEnumGiveGCStats_$ctoEnum_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdhqo_info" {
     block_cdhqo_info:
         const _cdhqo;
         const 0;
         const 4294967326;
         const SddB2_srt+896;
 },
 _cdhqx() //  [R1]
         { []
         }
     {offset
       cdhqx: // global
           R3 = R1;
           R2 = GHC.RTS.Flags.$fEnumGiveGCStats_$ctoEnum_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdhqx_info" {
     block_cdhqx_info:
         const _cdhqx;
         const 0;
         const 4294967326;
         const SddB2_srt+896;
 },
 _cdhqG() //  [R1]
         { []
         }
     {offset
       cdhqG: // global
           R3 = R1;
           R2 = GHC.RTS.Flags.$fEnumGiveGCStats_$ctoEnum_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdhqG_info" {
     block_cdhqG_info:
         const _cdhqG;
         const 0;
         const 4294967326;
         const SddB2_srt+896;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.850183404 UTC

[section ""data" . GHC.RTS.Flags.$fEnumGiveGCStats_go5_closure" {
     GHC.RTS.Flags.$fEnumGiveGCStats_go5_closure:
         const GHC.RTS.Flags.$fEnumGiveGCStats_go5_info;
         const 0;
 },
 sat_sdd9Y_entry() //  [R1]
         { []
         }
     {offset
       cdhrY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdhrZ; else goto cdhs0;
       cdhrZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdhs0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sdd9W::I64 = I64[R1 + 16];
           if (_sdd9W::I64 != 9223372036854775807) goto cdhrW; else goto cdhrX;
       cdhrW: // global
           R2 = _sdd9W::I64 + 1;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumGiveGCStats_go5_entry(R2) args: 24, res: 0, upd: 24;
       cdhrX: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdd9Y_info" {
     sat_sdd9Y_info:
         const sat_sdd9Y_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+904;
 },
 sat_sdd9V_entry() //  [R1]
         { []
         }
     {offset
       cdhsf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdhsg; else goto cdhsh;
       cdhsg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdhsh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sdd9U::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sdd9U::I64, 3)) goto udhsi; else goto udhsl;
       udhsi: // global
           if (%MO_S_Lt_W64(_sdd9U::I64, 1)) goto udhsj; else goto udhsk;
       udhsj: // global
           if (%MO_S_Lt_W64(_sdd9U::I64, 0)) goto cdhs9; else goto cdhsa;
       cdhsa: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhsk: // global
           if (%MO_S_Lt_W64(_sdd9U::I64, 2)) goto cdhsb; else goto cdhsc;
       cdhsb: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhsc: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhsl: // global
           if (%MO_S_Ge_W64(_sdd9U::I64, 5)) goto cdhs9; else goto udhsm;
       cdhs9: // global
           R2 = _sdd9U::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       udhsm: // global
           if (%MO_S_Lt_W64(_sdd9U::I64, 4)) goto cdhsd; else goto cdhse;
       cdhsd: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhse: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdd9V_info" {
     sat_sdd9V_info:
         const sat_sdd9V_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+816;
 },
 GHC.RTS.Flags.$fEnumGiveGCStats_go5_entry() //  [R2]
         { []
         }
     {offset
       cdhso: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdhss; else goto cdhsr;
       cdhss: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumGiveGCStats_go5_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdhsr: // global
           I64[Hp - 64] = sat_sdd9Y_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sdd9V_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumGiveGCStats_go5_info" {
     GHC.RTS.Flags.$fEnumGiveGCStats_go5_info:
         const GHC.RTS.Flags.$fEnumGiveGCStats_go5_entry;
         const 0;
         const 8800387989518;
         const 4294967300;
         const SddB2_srt+816;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.859108686 UTC

[section ""data" . GHC.RTS.Flags.$fEnumGiveGCStats5_closure" {
     GHC.RTS.Flags.$fEnumGiveGCStats5_closure:
         const GHC.RTS.Flags.$fEnumGiveGCStats5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fEnumGiveGCStats5_entry() //  [R1]
         { []
         }
     {offset
       cdht1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdht2; else goto cdht3;
       cdht2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdht3: // global
           (_cdhsY::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdhsY::I64 == 0) goto cdht0; else goto cdhsZ;
       cdht0: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdhsZ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdhsY::I64;
           R2 = 0;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumGiveGCStats_go5_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumGiveGCStats5_info" {
     GHC.RTS.Flags.$fEnumGiveGCStats5_info:
         const GHC.RTS.Flags.$fEnumGiveGCStats5_entry;
         const 0;
         const 4294967317;
         const SddB2_srt+904;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.863101091 UTC

[section ""data" . GHC.RTS.Flags.$fEnumGiveGCStats4_closure" {
     GHC.RTS.Flags.$fEnumGiveGCStats4_closure:
         const GHC.RTS.Flags.$fEnumGiveGCStats4_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fEnumGiveGCStats4_entry() //  [R1]
         { []
         }
     {offset
       cdhti: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdhtj; else goto cdhtk;
       cdhtj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdhtk: // global
           (_cdhtf::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdhtf::I64 == 0) goto cdhth; else goto cdhtg;
       cdhth: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdhtg: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdhtf::I64;
           R2 = 1;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumGiveGCStats_go5_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumGiveGCStats4_info" {
     GHC.RTS.Flags.$fEnumGiveGCStats4_info:
         const GHC.RTS.Flags.$fEnumGiveGCStats4_entry;
         const 0;
         const 4294967317;
         const SddB2_srt+904;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.867136021 UTC

[section ""data" . GHC.RTS.Flags.$fEnumGiveGCStats3_closure" {
     GHC.RTS.Flags.$fEnumGiveGCStats3_closure:
         const GHC.RTS.Flags.$fEnumGiveGCStats3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fEnumGiveGCStats3_entry() //  [R1]
         { []
         }
     {offset
       cdhtz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdhtA; else goto cdhtB;
       cdhtA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdhtB: // global
           (_cdhtw::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdhtw::I64 == 0) goto cdhty; else goto cdhtx;
       cdhty: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdhtx: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdhtw::I64;
           R2 = 2;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumGiveGCStats_go5_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumGiveGCStats3_info" {
     GHC.RTS.Flags.$fEnumGiveGCStats3_info:
         const GHC.RTS.Flags.$fEnumGiveGCStats3_entry;
         const 0;
         const 4294967317;
         const SddB2_srt+904;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.871546161 UTC

[section ""data" . GHC.RTS.Flags.$fEnumGiveGCStats2_closure" {
     GHC.RTS.Flags.$fEnumGiveGCStats2_closure:
         const GHC.RTS.Flags.$fEnumGiveGCStats2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fEnumGiveGCStats2_entry() //  [R1]
         { []
         }
     {offset
       cdhtQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdhtR; else goto cdhtS;
       cdhtR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdhtS: // global
           (_cdhtN::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdhtN::I64 == 0) goto cdhtP; else goto cdhtO;
       cdhtP: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdhtO: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdhtN::I64;
           R2 = 3;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumGiveGCStats_go5_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumGiveGCStats2_info" {
     GHC.RTS.Flags.$fEnumGiveGCStats2_info:
         const GHC.RTS.Flags.$fEnumGiveGCStats2_entry;
         const 0;
         const 4294967317;
         const SddB2_srt+904;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.875672301 UTC

[section ""data" . GHC.RTS.Flags.$fEnumGiveGCStats1_closure" {
     GHC.RTS.Flags.$fEnumGiveGCStats1_closure:
         const GHC.RTS.Flags.$fEnumGiveGCStats1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fEnumGiveGCStats1_entry() //  [R1]
         { []
         }
     {offset
       cdhu7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdhu8; else goto cdhu9;
       cdhu8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdhu9: // global
           (_cdhu4::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdhu4::I64 == 0) goto cdhu6; else goto cdhu5;
       cdhu6: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdhu5: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdhu4::I64;
           R2 = 4;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumGiveGCStats_go5_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumGiveGCStats1_info" {
     GHC.RTS.Flags.$fEnumGiveGCStats1_info:
         const GHC.RTS.Flags.$fEnumGiveGCStats1_entry;
         const 0;
         const 4294967317;
         const SddB2_srt+904;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.880389585 UTC

[section ""data" . GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFrom_closure" {
     GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFrom_closure:
         const GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFrom_info;
         const 0;
 },
 GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFrom_entry() //  [R2]
         { []
         }
     {offset
       cdhuw: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdhux; else goto cdhuy;
       cdhux: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFrom_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdhuy: // global
           I64[Sp - 8] = block_cdhum_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udhuR; else goto cdhun;
       udhuR: // global
           call _cdhum(R1) args: 0, res: 0, upd: 0;
       cdhun: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFrom_info" {
     GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFrom_info:
         const GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFrom_entry;
         const 0;
         const 270582939662;
         const 4294967301;
         const SddB2_srt+912;
 },
 _cdhum() //  [R1]
         { []
         }
     {offset
       cdhum: // global
           _cdhuv::P64 = R1 & 7;
           if (_cdhuv::P64 < 4) goto udhuO; else goto udhuQ;
       udhuO: // global
           if (_cdhuv::P64 < 3) goto udhuP; else goto cdhus;
       udhuP: // global
           if (_cdhuv::P64 < 2) goto cdhuq; else goto cdhur;
       cdhuq: // global
           R1 = GHC.RTS.Flags.$fEnumGiveGCStats5_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cdhur: // global
           R1 = GHC.RTS.Flags.$fEnumGiveGCStats4_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cdhus: // global
           R1 = GHC.RTS.Flags.$fEnumGiveGCStats3_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       udhuQ: // global
           if (_cdhuv::P64 < 5) goto cdhut; else goto cdhuu;
       cdhut: // global
           R1 = GHC.RTS.Flags.$fEnumGiveGCStats2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cdhuu: // global
           R1 = GHC.RTS.Flags.$fEnumGiveGCStats1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdhum_info" {
     block_cdhum_info:
         const _cdhum;
         const 0;
         const 133143986206;
         const SddB2_srt+920;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.886848258 UTC

[section ""data" . lvl97_rcV8p_closure" {
     lvl97_rcV8p_closure:
         const lvl97_rcV8p_info;
         const 0;
         const 0;
         const 0;
 },
 lvl97_rcV8p_entry() //  [R1]
         { []
         }
     {offset
       cdhve: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdhvf; else goto cdhvg;
       cdhvf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdhvg: // global
           (_cdhvb::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdhvb::I64 == 0) goto cdhvd; else goto cdhvc;
       cdhvd: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdhvc: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdhvb::I64;
           R2 = (-1);
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl97_rcV8p_info" {
     lvl97_rcV8p_info:
         const lvl97_rcV8p_entry;
         const 0;
         const 4294967317;
         const SddB2_srt+816;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.892131339 UTC

[section ""data" . GHC.RTS.Flags.$fEnumGiveGCStats_$cpred_closure" {
     GHC.RTS.Flags.$fEnumGiveGCStats_$cpred_closure:
         const GHC.RTS.Flags.$fEnumGiveGCStats_$cpred_info;
         const 0;
 },
 GHC.RTS.Flags.$fEnumGiveGCStats_$cpred_entry() //  [R2]
         { []
         }
     {offset
       cdhvD: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdhvE; else goto cdhvF;
       cdhvE: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumGiveGCStats_$cpred_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdhvF: // global
           I64[Sp - 8] = block_cdhvt_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udhvY; else goto cdhvu;
       udhvY: // global
           call _cdhvt(R1) args: 0, res: 0, upd: 0;
       cdhvu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumGiveGCStats_$cpred_info" {
     GHC.RTS.Flags.$fEnumGiveGCStats_$cpred_info:
         const GHC.RTS.Flags.$fEnumGiveGCStats_$cpred_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SddB2_srt+960;
 },
 _cdhvt() //  [R1]
         { []
         }
     {offset
       cdhvt: // global
           _cdhvC::P64 = R1 & 7;
           if (_cdhvC::P64 < 4) goto udhvV; else goto udhvX;
       udhvV: // global
           if (_cdhvC::P64 < 3) goto udhvW; else goto cdhvz;
       udhvW: // global
           if (_cdhvC::P64 < 2) goto cdhvx; else goto cdhvy;
       cdhvx: // global
           R1 = lvl97_rcV8p_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cdhvy: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdhvz: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       udhvX: // global
           if (_cdhvC::P64 < 5) goto cdhvA; else goto cdhvB;
       cdhvA: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdhvB: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdhvt_info" {
     block_cdhvt_info:
         const _cdhvt;
         const 0;
         const 4294967326;
         const SddB2_srt+968;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:29.971557139 UTC

[section ""data" . GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFromThenTo_closure" {
     GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFromThenTo_closure:
         const GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFromThenTo_info;
         const 0;
 },
 sat_sddan_entry() //  [R1]
         { []
         }
     {offset
       cdhx2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdhx3; else goto cdhx4;
       cdhx3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdhx4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_sddah_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddan_info" {
     sat_sddan_info:
         const sat_sddan_entry;
         const 8589934593;
         const 4294967311;
         const SddB2_srt+816;
 },
 sat_sddal_entry() //  [R1]
         { []
         }
     {offset
       cdhxh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdhxi; else goto cdhxj;
       cdhxi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdhxj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddak::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddak::I64, 3)) goto udhxk; else goto udhxn;
       udhxk: // global
           if (%MO_S_Lt_W64(_sddak::I64, 1)) goto udhxl; else goto udhxm;
       udhxl: // global
           if (%MO_S_Lt_W64(_sddak::I64, 0)) goto cdhxb; else goto cdhxc;
       cdhxc: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhxm: // global
           if (%MO_S_Lt_W64(_sddak::I64, 2)) goto cdhxd; else goto cdhxe;
       cdhxd: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhxe: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhxn: // global
           if (%MO_S_Ge_W64(_sddak::I64, 5)) goto cdhxb; else goto udhxo;
       cdhxb: // global
           R2 = _sddak::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       udhxo: // global
           if (%MO_S_Lt_W64(_sddak::I64, 4)) goto cdhxf; else goto cdhxg;
       cdhxf: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhxg: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddal_info" {
     sat_sddal_info:
         const sat_sddal_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+816;
 },
 sat_sddap_entry() //  [R1]
         { []
         }
     {offset
       cdhxC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdhxD; else goto cdhxE;
       cdhxD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdhxE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddao::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddao::I64, 3)) goto udhxF; else goto udhxI;
       udhxF: // global
           if (%MO_S_Lt_W64(_sddao::I64, 1)) goto udhxG; else goto udhxH;
       udhxG: // global
           if (%MO_S_Lt_W64(_sddao::I64, 0)) goto cdhxw; else goto cdhxx;
       cdhxx: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhxH: // global
           if (%MO_S_Lt_W64(_sddao::I64, 2)) goto cdhxy; else goto cdhxz;
       cdhxy: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhxz: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhxI: // global
           if (%MO_S_Ge_W64(_sddao::I64, 5)) goto cdhxw; else goto udhxJ;
       cdhxw: // global
           R2 = _sddao::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       udhxJ: // global
           if (%MO_S_Lt_W64(_sddao::I64, 4)) goto cdhxA; else goto cdhxB;
       cdhxA: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhxB: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddap_info" {
     sat_sddap_info:
         const sat_sddap_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+816;
 },
 go_dn_sddah_entry() //  [R1, R2]
         { []
         }
     {offset
       cdhxN: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdhxR; else goto cdhxQ;
       cdhxR: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdhxQ: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto cdhxL; else goto cdhxM;
       cdhxL: // global
           _sddaf::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_sddan_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _sddaf::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sddal_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdhxM: // global
           I64[Hp - 80] = sat_sddap_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _cdhxT::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _cdhxT::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_sddah_info" {
     go_dn_sddah_info:
         const go_dn_sddah_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const SddB2_srt+816;
 },
 sat_sddaq_entry() //  [R1]
         { []
         }
     {offset
       cdhxU: // global
           _sddaq::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdhxV; else goto cdhxW;
       cdhxW: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdhxY; else goto cdhxX;
       cdhxY: // global
           HpAlloc = 24;
           goto cdhxV;
       cdhxV: // global
           R1 = _sddaq::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdhxX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sddaq::P64;
           _sdda9::I64 = I64[_sddaq::P64 + 24];
           _sddaf::I64 = _sdda9::I64 - I64[_sddaq::P64 + 16];
           I64[Hp - 16] = go_dn_sddah_info;
           I64[Hp - 8] = _sddaf::I64;
           I64[Hp] = 0 - _sddaf::I64;
           R2 = _sdda9::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_sddah_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddaq_info" {
     sat_sddaq_info:
         const sat_sddaq_entry;
         const 8589934592;
         const 4294967316;
         const SddB2_srt+816;
 },
 sat_sddae_entry() //  [R1]
         { []
         }
     {offset
       cdhyb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdhyc; else goto cdhyd;
       cdhyc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdhyd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddad::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddad::I64, 3)) goto udhye; else goto udhyh;
       udhye: // global
           if (%MO_S_Lt_W64(_sddad::I64, 1)) goto udhyf; else goto udhyg;
       udhyf: // global
           if (%MO_S_Lt_W64(_sddad::I64, 0)) goto cdhy5; else goto cdhy6;
       cdhy6: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhyg: // global
           if (%MO_S_Lt_W64(_sddad::I64, 2)) goto cdhy7; else goto cdhy8;
       cdhy7: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhy8: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhyh: // global
           if (%MO_S_Ge_W64(_sddad::I64, 5)) goto cdhy5; else goto udhyi;
       cdhy5: // global
           R2 = _sddad::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       udhyi: // global
           if (%MO_S_Lt_W64(_sddad::I64, 4)) goto cdhy9; else goto cdhya;
       cdhy9: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhya: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddae_info" {
     sat_sddae_info:
         const sat_sddae_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+816;
 },
 sat_sddat_entry() //  [R1]
         { []
         }
     {offset
       cdhyz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdhyA; else goto cdhyB;
       cdhyA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdhyB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddas::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddas::I64, 3)) goto udhyC; else goto udhyF;
       udhyC: // global
           if (%MO_S_Lt_W64(_sddas::I64, 1)) goto udhyD; else goto udhyE;
       udhyD: // global
           if (%MO_S_Lt_W64(_sddas::I64, 0)) goto cdhyt; else goto cdhyu;
       cdhyu: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhyE: // global
           if (%MO_S_Lt_W64(_sddas::I64, 2)) goto cdhyv; else goto cdhyw;
       cdhyv: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhyw: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhyF: // global
           if (%MO_S_Ge_W64(_sddas::I64, 5)) goto cdhyt; else goto udhyG;
       cdhyt: // global
           R2 = _sddas::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       udhyG: // global
           if (%MO_S_Lt_W64(_sddas::I64, 4)) goto cdhyx; else goto cdhyy;
       cdhyx: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhyy: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddat_info" {
     sat_sddat_info:
         const sat_sddat_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+816;
 },
 sat_sddaF_entry() //  [R1]
         { []
         }
     {offset
       cdhz9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdhza; else goto cdhzb;
       cdhza: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdhzb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_sddaz_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddaF_info" {
     sat_sddaF_info:
         const sat_sddaF_entry;
         const 8589934593;
         const 4294967311;
         const SddB2_srt+816;
 },
 sat_sddaD_entry() //  [R1]
         { []
         }
     {offset
       cdhzo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdhzp; else goto cdhzq;
       cdhzp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdhzq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddaC::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddaC::I64, 3)) goto udhzr; else goto udhzu;
       udhzr: // global
           if (%MO_S_Lt_W64(_sddaC::I64, 1)) goto udhzs; else goto udhzt;
       udhzs: // global
           if (%MO_S_Lt_W64(_sddaC::I64, 0)) goto cdhzi; else goto cdhzj;
       cdhzj: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhzt: // global
           if (%MO_S_Lt_W64(_sddaC::I64, 2)) goto cdhzk; else goto cdhzl;
       cdhzk: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhzl: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhzu: // global
           if (%MO_S_Ge_W64(_sddaC::I64, 5)) goto cdhzi; else goto udhzv;
       cdhzi: // global
           R2 = _sddaC::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       udhzv: // global
           if (%MO_S_Lt_W64(_sddaC::I64, 4)) goto cdhzm; else goto cdhzn;
       cdhzm: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhzn: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddaD_info" {
     sat_sddaD_info:
         const sat_sddaD_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+816;
 },
 sat_sddaH_entry() //  [R1]
         { []
         }
     {offset
       cdhzJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdhzK; else goto cdhzL;
       cdhzK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdhzL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddaG::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddaG::I64, 3)) goto udhzM; else goto udhzP;
       udhzM: // global
           if (%MO_S_Lt_W64(_sddaG::I64, 1)) goto udhzN; else goto udhzO;
       udhzN: // global
           if (%MO_S_Lt_W64(_sddaG::I64, 0)) goto cdhzD; else goto cdhzE;
       cdhzE: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhzO: // global
           if (%MO_S_Lt_W64(_sddaG::I64, 2)) goto cdhzF; else goto cdhzG;
       cdhzF: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhzG: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhzP: // global
           if (%MO_S_Ge_W64(_sddaG::I64, 5)) goto cdhzD; else goto udhzQ;
       cdhzD: // global
           R2 = _sddaG::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       udhzQ: // global
           if (%MO_S_Lt_W64(_sddaG::I64, 4)) goto cdhzH; else goto cdhzI;
       cdhzH: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhzI: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddaH_info" {
     sat_sddaH_info:
         const sat_sddaH_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+816;
 },
 go_up_sddaz_entry() //  [R1, R2]
         { []
         }
     {offset
       cdhzU: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdhzY; else goto cdhzX;
       cdhzY: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdhzX: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto cdhzS; else goto cdhzT;
       cdhzS: // global
           _sddax::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_sddaF_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _sddax::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sddaD_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdhzT: // global
           I64[Hp - 80] = sat_sddaH_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _cdhA0::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _cdhA0::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_sddaz_info" {
     go_up_sddaz_info:
         const go_up_sddaz_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const SddB2_srt+816;
 },
 sat_sddaI_entry() //  [R1]
         { []
         }
     {offset
       cdhA1: // global
           _sddaI::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdhA2; else goto cdhA3;
       cdhA3: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdhA5; else goto cdhA4;
       cdhA5: // global
           HpAlloc = 24;
           goto cdhA2;
       cdhA2: // global
           R1 = _sddaI::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdhA4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sddaI::P64;
           _sdda9::I64 = I64[_sddaI::P64 + 24];
           _sddax::I64 = _sdda9::I64 - I64[_sddaI::P64 + 16];
           I64[Hp - 16] = go_up_sddaz_info;
           I64[Hp - 8] = _sddax::I64;
           I64[Hp] = 0 - _sddax::I64;
           R2 = _sdda9::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_sddaz_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddaI_info" {
     sat_sddaI_info:
         const sat_sddaI_entry;
         const 8589934592;
         const 4294967316;
         const SddB2_srt+816;
 },
 sat_sddaw_entry() //  [R1]
         { []
         }
     {offset
       cdhAi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdhAj; else goto cdhAk;
       cdhAj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdhAk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddav::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddav::I64, 3)) goto udhAl; else goto udhAo;
       udhAl: // global
           if (%MO_S_Lt_W64(_sddav::I64, 1)) goto udhAm; else goto udhAn;
       udhAm: // global
           if (%MO_S_Lt_W64(_sddav::I64, 0)) goto cdhAc; else goto cdhAd;
       cdhAd: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhAn: // global
           if (%MO_S_Lt_W64(_sddav::I64, 2)) goto cdhAe; else goto cdhAf;
       cdhAe: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhAf: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhAo: // global
           if (%MO_S_Ge_W64(_sddav::I64, 5)) goto cdhAc; else goto udhAp;
       cdhAc: // global
           R2 = _sddav::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       udhAp: // global
           if (%MO_S_Lt_W64(_sddav::I64, 4)) goto cdhAg; else goto cdhAh;
       cdhAg: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhAh: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddaw_info" {
     sat_sddaw_info:
         const sat_sddaw_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+816;
 },
 sat_sddaL_entry() //  [R1]
         { []
         }
     {offset
       cdhAG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdhAH; else goto cdhAI;
       cdhAH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdhAI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddaK::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddaK::I64, 3)) goto udhAJ; else goto udhAM;
       udhAJ: // global
           if (%MO_S_Lt_W64(_sddaK::I64, 1)) goto udhAK; else goto udhAL;
       udhAK: // global
           if (%MO_S_Lt_W64(_sddaK::I64, 0)) goto cdhAA; else goto cdhAB;
       cdhAB: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhAL: // global
           if (%MO_S_Lt_W64(_sddaK::I64, 2)) goto cdhAC; else goto cdhAD;
       cdhAC: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhAD: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhAM: // global
           if (%MO_S_Ge_W64(_sddaK::I64, 5)) goto cdhAA; else goto udhAN;
       cdhAA: // global
           R2 = _sddaK::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       udhAN: // global
           if (%MO_S_Lt_W64(_sddaK::I64, 4)) goto cdhAE; else goto cdhAF;
       cdhAE: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhAF: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddaL_info" {
     sat_sddaL_info:
         const sat_sddaL_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+816;
 },
 sat_sddaY_entry() //  [R1]
         { []
         }
     {offset
       cdhBk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdhBl; else goto cdhBm;
       cdhBl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdhBm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_sddaS_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddaY_info" {
     sat_sddaY_info:
         const sat_sddaY_entry;
         const 8589934593;
         const 4294967311;
         const SddB2_srt+816;
 },
 sat_sddaW_entry() //  [R1]
         { []
         }
     {offset
       cdhBz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdhBA; else goto cdhBB;
       cdhBA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdhBB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddaV::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddaV::I64, 3)) goto udhBC; else goto udhBF;
       udhBC: // global
           if (%MO_S_Lt_W64(_sddaV::I64, 1)) goto udhBD; else goto udhBE;
       udhBD: // global
           if (%MO_S_Lt_W64(_sddaV::I64, 0)) goto cdhBt; else goto cdhBu;
       cdhBu: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhBE: // global
           if (%MO_S_Lt_W64(_sddaV::I64, 2)) goto cdhBv; else goto cdhBw;
       cdhBv: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhBw: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhBF: // global
           if (%MO_S_Ge_W64(_sddaV::I64, 5)) goto cdhBt; else goto udhBG;
       cdhBt: // global
           R2 = _sddaV::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       udhBG: // global
           if (%MO_S_Lt_W64(_sddaV::I64, 4)) goto cdhBx; else goto cdhBy;
       cdhBx: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhBy: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddaW_info" {
     sat_sddaW_info:
         const sat_sddaW_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+816;
 },
 sat_sddb0_entry() //  [R1]
         { []
         }
     {offset
       cdhBU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdhBV; else goto cdhBW;
       cdhBV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdhBW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddaZ::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddaZ::I64, 3)) goto udhBX; else goto udhC0;
       udhBX: // global
           if (%MO_S_Lt_W64(_sddaZ::I64, 1)) goto udhBY; else goto udhBZ;
       udhBY: // global
           if (%MO_S_Lt_W64(_sddaZ::I64, 0)) goto cdhBO; else goto cdhBP;
       cdhBP: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhBZ: // global
           if (%MO_S_Lt_W64(_sddaZ::I64, 2)) goto cdhBQ; else goto cdhBR;
       cdhBQ: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhBR: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhC0: // global
           if (%MO_S_Ge_W64(_sddaZ::I64, 5)) goto cdhBO; else goto udhC1;
       cdhBO: // global
           R2 = _sddaZ::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       udhC1: // global
           if (%MO_S_Lt_W64(_sddaZ::I64, 4)) goto cdhBS; else goto cdhBT;
       cdhBS: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhBT: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddb0_info" {
     sat_sddb0_info:
         const sat_sddb0_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+816;
 },
 go_dn_sddaS_entry() //  [R1, R2]
         { []
         }
     {offset
       cdhC5: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdhC9; else goto cdhC8;
       cdhC9: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdhC8: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto cdhC3; else goto cdhC4;
       cdhC3: // global
           _sddaQ::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_sddaY_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _sddaQ::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sddaW_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdhC4: // global
           I64[Hp - 80] = sat_sddb0_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _cdhCb::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _cdhCb::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_sddaS_info" {
     go_dn_sddaS_info:
         const go_dn_sddaS_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const SddB2_srt+816;
 },
 sat_sddb1_entry() //  [R1]
         { []
         }
     {offset
       cdhCc: // global
           _sddb1::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdhCd; else goto cdhCe;
       cdhCe: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdhCg; else goto cdhCf;
       cdhCg: // global
           HpAlloc = 24;
           goto cdhCd;
       cdhCd: // global
           R1 = _sddb1::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdhCf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sddb1::P64;
           _sdda9::I64 = I64[_sddb1::P64 + 24];
           _sddaQ::I64 = _sdda9::I64 - I64[_sddb1::P64 + 16];
           I64[Hp - 16] = go_dn_sddaS_info;
           I64[Hp - 8] = _sddaQ::I64;
           I64[Hp] = 1 - _sddaQ::I64;
           R2 = _sdda9::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_sddaS_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddb1_info" {
     sat_sddb1_info:
         const sat_sddb1_entry;
         const 8589934592;
         const 4294967316;
         const SddB2_srt+816;
 },
 sat_sddaP_entry() //  [R1]
         { []
         }
     {offset
       cdhCt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdhCu; else goto cdhCv;
       cdhCu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdhCv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddaO::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddaO::I64, 3)) goto udhCw; else goto udhCz;
       udhCw: // global
           if (%MO_S_Lt_W64(_sddaO::I64, 1)) goto udhCx; else goto udhCy;
       udhCx: // global
           if (%MO_S_Lt_W64(_sddaO::I64, 0)) goto cdhCn; else goto cdhCo;
       cdhCo: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhCy: // global
           if (%MO_S_Lt_W64(_sddaO::I64, 2)) goto cdhCp; else goto cdhCq;
       cdhCp: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhCq: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhCz: // global
           if (%MO_S_Ge_W64(_sddaO::I64, 5)) goto cdhCn; else goto udhCA;
       cdhCn: // global
           R2 = _sddaO::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       udhCA: // global
           if (%MO_S_Lt_W64(_sddaO::I64, 4)) goto cdhCr; else goto cdhCs;
       cdhCr: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhCs: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddaP_info" {
     sat_sddaP_info:
         const sat_sddaP_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+816;
 },
 sat_sddb4_entry() //  [R1]
         { []
         }
     {offset
       cdhCR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdhCS; else goto cdhCT;
       cdhCS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdhCT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddb3::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddb3::I64, 3)) goto udhCU; else goto udhCX;
       udhCU: // global
           if (%MO_S_Lt_W64(_sddb3::I64, 1)) goto udhCV; else goto udhCW;
       udhCV: // global
           if (%MO_S_Lt_W64(_sddb3::I64, 0)) goto cdhCL; else goto cdhCM;
       cdhCM: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhCW: // global
           if (%MO_S_Lt_W64(_sddb3::I64, 2)) goto cdhCN; else goto cdhCO;
       cdhCN: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhCO: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhCX: // global
           if (%MO_S_Ge_W64(_sddb3::I64, 5)) goto cdhCL; else goto udhCY;
       cdhCL: // global
           R2 = _sddb3::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       udhCY: // global
           if (%MO_S_Lt_W64(_sddb3::I64, 4)) goto cdhCP; else goto cdhCQ;
       cdhCP: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhCQ: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddb4_info" {
     sat_sddb4_info:
         const sat_sddb4_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+816;
 },
 sat_sddbg_entry() //  [R1]
         { []
         }
     {offset
       cdhDr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdhDs; else goto cdhDt;
       cdhDs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdhDt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_sddba_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddbg_info" {
     sat_sddbg_info:
         const sat_sddbg_entry;
         const 8589934593;
         const 4294967311;
         const SddB2_srt+816;
 },
 sat_sddbe_entry() //  [R1]
         { []
         }
     {offset
       cdhDG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdhDH; else goto cdhDI;
       cdhDH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdhDI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddbd::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddbd::I64, 3)) goto udhDJ; else goto udhDM;
       udhDJ: // global
           if (%MO_S_Lt_W64(_sddbd::I64, 1)) goto udhDK; else goto udhDL;
       udhDK: // global
           if (%MO_S_Lt_W64(_sddbd::I64, 0)) goto cdhDA; else goto cdhDB;
       cdhDB: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhDL: // global
           if (%MO_S_Lt_W64(_sddbd::I64, 2)) goto cdhDC; else goto cdhDD;
       cdhDC: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhDD: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhDM: // global
           if (%MO_S_Ge_W64(_sddbd::I64, 5)) goto cdhDA; else goto udhDN;
       cdhDA: // global
           R2 = _sddbd::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       udhDN: // global
           if (%MO_S_Lt_W64(_sddbd::I64, 4)) goto cdhDE; else goto cdhDF;
       cdhDE: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhDF: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddbe_info" {
     sat_sddbe_info:
         const sat_sddbe_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+816;
 },
 sat_sddbi_entry() //  [R1]
         { []
         }
     {offset
       cdhE1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdhE2; else goto cdhE3;
       cdhE2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdhE3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddbh::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddbh::I64, 3)) goto udhE4; else goto udhE7;
       udhE4: // global
           if (%MO_S_Lt_W64(_sddbh::I64, 1)) goto udhE5; else goto udhE6;
       udhE5: // global
           if (%MO_S_Lt_W64(_sddbh::I64, 0)) goto cdhDV; else goto cdhDW;
       cdhDW: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhE6: // global
           if (%MO_S_Lt_W64(_sddbh::I64, 2)) goto cdhDX; else goto cdhDY;
       cdhDX: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhDY: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhE7: // global
           if (%MO_S_Ge_W64(_sddbh::I64, 5)) goto cdhDV; else goto udhE8;
       cdhDV: // global
           R2 = _sddbh::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       udhE8: // global
           if (%MO_S_Lt_W64(_sddbh::I64, 4)) goto cdhDZ; else goto cdhE0;
       cdhDZ: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhE0: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddbi_info" {
     sat_sddbi_info:
         const sat_sddbi_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+816;
 },
 go_up_sddba_entry() //  [R1, R2]
         { []
         }
     {offset
       cdhEc: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdhEg; else goto cdhEf;
       cdhEg: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdhEf: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto cdhEa; else goto cdhEb;
       cdhEa: // global
           _sddb8::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_sddbg_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _sddb8::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sddbe_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdhEb: // global
           I64[Hp - 80] = sat_sddbi_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _cdhEi::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _cdhEi::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_sddba_info" {
     go_up_sddba_info:
         const go_up_sddba_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const SddB2_srt+816;
 },
 sat_sddbj_entry() //  [R1]
         { []
         }
     {offset
       cdhEj: // global
           _sddbj::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdhEk; else goto cdhEl;
       cdhEl: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdhEn; else goto cdhEm;
       cdhEn: // global
           HpAlloc = 24;
           goto cdhEk;
       cdhEk: // global
           R1 = _sddbj::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdhEm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sddbj::P64;
           _sdda9::I64 = I64[_sddbj::P64 + 24];
           _sddb8::I64 = _sdda9::I64 - I64[_sddbj::P64 + 16];
           I64[Hp - 16] = go_up_sddba_info;
           I64[Hp - 8] = _sddb8::I64;
           I64[Hp] = 1 - _sddb8::I64;
           R2 = _sdda9::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_sddba_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddbj_info" {
     sat_sddbj_info:
         const sat_sddbj_entry;
         const 8589934592;
         const 4294967316;
         const SddB2_srt+816;
 },
 sat_sddb7_entry() //  [R1]
         { []
         }
     {offset
       cdhEA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdhEB; else goto cdhEC;
       cdhEB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdhEC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddb6::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddb6::I64, 3)) goto udhED; else goto udhEG;
       udhED: // global
           if (%MO_S_Lt_W64(_sddb6::I64, 1)) goto udhEE; else goto udhEF;
       udhEE: // global
           if (%MO_S_Lt_W64(_sddb6::I64, 0)) goto cdhEu; else goto cdhEv;
       cdhEv: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhEF: // global
           if (%MO_S_Lt_W64(_sddb6::I64, 2)) goto cdhEw; else goto cdhEx;
       cdhEw: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhEx: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhEG: // global
           if (%MO_S_Ge_W64(_sddb6::I64, 5)) goto cdhEu; else goto udhEH;
       cdhEu: // global
           R2 = _sddb6::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       udhEH: // global
           if (%MO_S_Lt_W64(_sddb6::I64, 4)) goto cdhEy; else goto cdhEz;
       cdhEy: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhEz: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddb7_info" {
     sat_sddb7_info:
         const sat_sddb7_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+816;
 },
 sat_sddbm_entry() //  [R1]
         { []
         }
     {offset
       cdhEY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdhEZ; else goto cdhF0;
       cdhEZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdhF0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddbl::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddbl::I64, 3)) goto udhF1; else goto udhF4;
       udhF1: // global
           if (%MO_S_Lt_W64(_sddbl::I64, 1)) goto udhF2; else goto udhF3;
       udhF2: // global
           if (%MO_S_Lt_W64(_sddbl::I64, 0)) goto cdhES; else goto cdhET;
       cdhET: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhF3: // global
           if (%MO_S_Lt_W64(_sddbl::I64, 2)) goto cdhEU; else goto cdhEV;
       cdhEU: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhEV: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhF4: // global
           if (%MO_S_Ge_W64(_sddbl::I64, 5)) goto cdhES; else goto udhF5;
       cdhES: // global
           R2 = _sddbl::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       udhF5: // global
           if (%MO_S_Lt_W64(_sddbl::I64, 4)) goto cdhEW; else goto cdhEX;
       cdhEW: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhEX: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddbm_info" {
     sat_sddbm_info:
         const sat_sddbm_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+816;
 },
 sat_sddbz_entry() //  [R1]
         { []
         }
     {offset
       cdhFC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdhFD; else goto cdhFE;
       cdhFD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdhFE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_sddbt_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddbz_info" {
     sat_sddbz_info:
         const sat_sddbz_entry;
         const 8589934593;
         const 4294967311;
         const SddB2_srt+816;
 },
 sat_sddbx_entry() //  [R1]
         { []
         }
     {offset
       cdhFR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdhFS; else goto cdhFT;
       cdhFS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdhFT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddbw::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddbw::I64, 3)) goto udhFU; else goto udhFX;
       udhFU: // global
           if (%MO_S_Lt_W64(_sddbw::I64, 1)) goto udhFV; else goto udhFW;
       udhFV: // global
           if (%MO_S_Lt_W64(_sddbw::I64, 0)) goto cdhFL; else goto cdhFM;
       cdhFM: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhFW: // global
           if (%MO_S_Lt_W64(_sddbw::I64, 2)) goto cdhFN; else goto cdhFO;
       cdhFN: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhFO: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhFX: // global
           if (%MO_S_Ge_W64(_sddbw::I64, 5)) goto cdhFL; else goto udhFY;
       cdhFL: // global
           R2 = _sddbw::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       udhFY: // global
           if (%MO_S_Lt_W64(_sddbw::I64, 4)) goto cdhFP; else goto cdhFQ;
       cdhFP: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhFQ: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddbx_info" {
     sat_sddbx_info:
         const sat_sddbx_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+816;
 },
 sat_sddbB_entry() //  [R1]
         { []
         }
     {offset
       cdhGc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdhGd; else goto cdhGe;
       cdhGd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdhGe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddbA::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddbA::I64, 3)) goto udhGf; else goto udhGi;
       udhGf: // global
           if (%MO_S_Lt_W64(_sddbA::I64, 1)) goto udhGg; else goto udhGh;
       udhGg: // global
           if (%MO_S_Lt_W64(_sddbA::I64, 0)) goto cdhG6; else goto cdhG7;
       cdhG7: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhGh: // global
           if (%MO_S_Lt_W64(_sddbA::I64, 2)) goto cdhG8; else goto cdhG9;
       cdhG8: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhG9: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhGi: // global
           if (%MO_S_Ge_W64(_sddbA::I64, 5)) goto cdhG6; else goto udhGj;
       cdhG6: // global
           R2 = _sddbA::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       udhGj: // global
           if (%MO_S_Lt_W64(_sddbA::I64, 4)) goto cdhGa; else goto cdhGb;
       cdhGa: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhGb: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddbB_info" {
     sat_sddbB_info:
         const sat_sddbB_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+816;
 },
 go_dn_sddbt_entry() //  [R1, R2]
         { []
         }
     {offset
       cdhGn: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdhGr; else goto cdhGq;
       cdhGr: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdhGq: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto cdhGl; else goto cdhGm;
       cdhGl: // global
           _sddbr::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_sddbz_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _sddbr::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sddbx_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdhGm: // global
           I64[Hp - 80] = sat_sddbB_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _cdhGt::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _cdhGt::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_sddbt_info" {
     go_dn_sddbt_info:
         const go_dn_sddbt_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const SddB2_srt+816;
 },
 sat_sddbC_entry() //  [R1]
         { []
         }
     {offset
       cdhGu: // global
           _sddbC::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdhGv; else goto cdhGw;
       cdhGw: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdhGy; else goto cdhGx;
       cdhGy: // global
           HpAlloc = 24;
           goto cdhGv;
       cdhGv: // global
           R1 = _sddbC::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdhGx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sddbC::P64;
           _sdda9::I64 = I64[_sddbC::P64 + 24];
           _sddbr::I64 = _sdda9::I64 - I64[_sddbC::P64 + 16];
           I64[Hp - 16] = go_dn_sddbt_info;
           I64[Hp - 8] = _sddbr::I64;
           I64[Hp] = 2 - _sddbr::I64;
           R2 = _sdda9::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_sddbt_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddbC_info" {
     sat_sddbC_info:
         const sat_sddbC_entry;
         const 8589934592;
         const 4294967316;
         const SddB2_srt+816;
 },
 sat_sddbq_entry() //  [R1]
         { []
         }
     {offset
       cdhGL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdhGM; else goto cdhGN;
       cdhGM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdhGN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddbp::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddbp::I64, 3)) goto udhGO; else goto udhGR;
       udhGO: // global
           if (%MO_S_Lt_W64(_sddbp::I64, 1)) goto udhGP; else goto udhGQ;
       udhGP: // global
           if (%MO_S_Lt_W64(_sddbp::I64, 0)) goto cdhGF; else goto cdhGG;
       cdhGG: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhGQ: // global
           if (%MO_S_Lt_W64(_sddbp::I64, 2)) goto cdhGH; else goto cdhGI;
       cdhGH: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhGI: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhGR: // global
           if (%MO_S_Ge_W64(_sddbp::I64, 5)) goto cdhGF; else goto udhGS;
       cdhGF: // global
           R2 = _sddbp::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       udhGS: // global
           if (%MO_S_Lt_W64(_sddbp::I64, 4)) goto cdhGJ; else goto cdhGK;
       cdhGJ: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhGK: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddbq_info" {
     sat_sddbq_info:
         const sat_sddbq_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+816;
 },
 sat_sddbF_entry() //  [R1]
         { []
         }
     {offset
       cdhH9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdhHa; else goto cdhHb;
       cdhHa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdhHb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddbE::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddbE::I64, 3)) goto udhHc; else goto udhHf;
       udhHc: // global
           if (%MO_S_Lt_W64(_sddbE::I64, 1)) goto udhHd; else goto udhHe;
       udhHd: // global
           if (%MO_S_Lt_W64(_sddbE::I64, 0)) goto cdhH3; else goto cdhH4;
       cdhH4: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhHe: // global
           if (%MO_S_Lt_W64(_sddbE::I64, 2)) goto cdhH5; else goto cdhH6;
       cdhH5: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhH6: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhHf: // global
           if (%MO_S_Ge_W64(_sddbE::I64, 5)) goto cdhH3; else goto udhHg;
       cdhH3: // global
           R2 = _sddbE::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       udhHg: // global
           if (%MO_S_Lt_W64(_sddbE::I64, 4)) goto cdhH7; else goto cdhH8;
       cdhH7: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhH8: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddbF_info" {
     sat_sddbF_info:
         const sat_sddbF_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+816;
 },
 sat_sddbR_entry() //  [R1]
         { []
         }
     {offset
       cdhHJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdhHK; else goto cdhHL;
       cdhHK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdhHL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_sddbL_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddbR_info" {
     sat_sddbR_info:
         const sat_sddbR_entry;
         const 8589934593;
         const 4294967311;
         const SddB2_srt+816;
 },
 sat_sddbP_entry() //  [R1]
         { []
         }
     {offset
       cdhHY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdhHZ; else goto cdhI0;
       cdhHZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdhI0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddbO::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddbO::I64, 3)) goto udhI1; else goto udhI4;
       udhI1: // global
           if (%MO_S_Lt_W64(_sddbO::I64, 1)) goto udhI2; else goto udhI3;
       udhI2: // global
           if (%MO_S_Lt_W64(_sddbO::I64, 0)) goto cdhHS; else goto cdhHT;
       cdhHT: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhI3: // global
           if (%MO_S_Lt_W64(_sddbO::I64, 2)) goto cdhHU; else goto cdhHV;
       cdhHU: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhHV: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhI4: // global
           if (%MO_S_Ge_W64(_sddbO::I64, 5)) goto cdhHS; else goto udhI5;
       cdhHS: // global
           R2 = _sddbO::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       udhI5: // global
           if (%MO_S_Lt_W64(_sddbO::I64, 4)) goto cdhHW; else goto cdhHX;
       cdhHW: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhHX: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddbP_info" {
     sat_sddbP_info:
         const sat_sddbP_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+816;
 },
 sat_sddbT_entry() //  [R1]
         { []
         }
     {offset
       cdhIj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdhIk; else goto cdhIl;
       cdhIk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdhIl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddbS::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddbS::I64, 3)) goto udhIm; else goto udhIp;
       udhIm: // global
           if (%MO_S_Lt_W64(_sddbS::I64, 1)) goto udhIn; else goto udhIo;
       udhIn: // global
           if (%MO_S_Lt_W64(_sddbS::I64, 0)) goto cdhId; else goto cdhIe;
       cdhIe: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhIo: // global
           if (%MO_S_Lt_W64(_sddbS::I64, 2)) goto cdhIf; else goto cdhIg;
       cdhIf: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhIg: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhIp: // global
           if (%MO_S_Ge_W64(_sddbS::I64, 5)) goto cdhId; else goto udhIq;
       cdhId: // global
           R2 = _sddbS::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       udhIq: // global
           if (%MO_S_Lt_W64(_sddbS::I64, 4)) goto cdhIh; else goto cdhIi;
       cdhIh: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhIi: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddbT_info" {
     sat_sddbT_info:
         const sat_sddbT_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+816;
 },
 go_up_sddbL_entry() //  [R1, R2]
         { []
         }
     {offset
       cdhIu: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdhIy; else goto cdhIx;
       cdhIy: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdhIx: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto cdhIs; else goto cdhIt;
       cdhIs: // global
           _sddbJ::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_sddbR_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _sddbJ::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sddbP_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdhIt: // global
           I64[Hp - 80] = sat_sddbT_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _cdhIA::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _cdhIA::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_sddbL_info" {
     go_up_sddbL_info:
         const go_up_sddbL_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const SddB2_srt+816;
 },
 sat_sddbU_entry() //  [R1]
         { []
         }
     {offset
       cdhIB: // global
           _sddbU::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdhIC; else goto cdhID;
       cdhID: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdhIF; else goto cdhIE;
       cdhIF: // global
           HpAlloc = 24;
           goto cdhIC;
       cdhIC: // global
           R1 = _sddbU::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdhIE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sddbU::P64;
           _sdda9::I64 = I64[_sddbU::P64 + 24];
           _sddbJ::I64 = _sdda9::I64 - I64[_sddbU::P64 + 16];
           I64[Hp - 16] = go_up_sddbL_info;
           I64[Hp - 8] = _sddbJ::I64;
           I64[Hp] = 2 - _sddbJ::I64;
           R2 = _sdda9::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_sddbL_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddbU_info" {
     sat_sddbU_info:
         const sat_sddbU_entry;
         const 8589934592;
         const 4294967316;
         const SddB2_srt+816;
 },
 sat_sddbI_entry() //  [R1]
         { []
         }
     {offset
       cdhIS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdhIT; else goto cdhIU;
       cdhIT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdhIU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddbH::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddbH::I64, 3)) goto udhIV; else goto udhIY;
       udhIV: // global
           if (%MO_S_Lt_W64(_sddbH::I64, 1)) goto udhIW; else goto udhIX;
       udhIW: // global
           if (%MO_S_Lt_W64(_sddbH::I64, 0)) goto cdhIM; else goto cdhIN;
       cdhIN: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhIX: // global
           if (%MO_S_Lt_W64(_sddbH::I64, 2)) goto cdhIO; else goto cdhIP;
       cdhIO: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhIP: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhIY: // global
           if (%MO_S_Ge_W64(_sddbH::I64, 5)) goto cdhIM; else goto udhIZ;
       cdhIM: // global
           R2 = _sddbH::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       udhIZ: // global
           if (%MO_S_Lt_W64(_sddbH::I64, 4)) goto cdhIQ; else goto cdhIR;
       cdhIQ: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhIR: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddbI_info" {
     sat_sddbI_info:
         const sat_sddbI_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+816;
 },
 sat_sddbX_entry() //  [R1]
         { []
         }
     {offset
       cdhJg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdhJh; else goto cdhJi;
       cdhJh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdhJi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddbW::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddbW::I64, 3)) goto udhJj; else goto udhJm;
       udhJj: // global
           if (%MO_S_Lt_W64(_sddbW::I64, 1)) goto udhJk; else goto udhJl;
       udhJk: // global
           if (%MO_S_Lt_W64(_sddbW::I64, 0)) goto cdhJa; else goto cdhJb;
       cdhJb: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhJl: // global
           if (%MO_S_Lt_W64(_sddbW::I64, 2)) goto cdhJc; else goto cdhJd;
       cdhJc: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhJd: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhJm: // global
           if (%MO_S_Ge_W64(_sddbW::I64, 5)) goto cdhJa; else goto udhJn;
       cdhJa: // global
           R2 = _sddbW::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       udhJn: // global
           if (%MO_S_Lt_W64(_sddbW::I64, 4)) goto cdhJe; else goto cdhJf;
       cdhJe: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhJf: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddbX_info" {
     sat_sddbX_info:
         const sat_sddbX_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+816;
 },
 sat_sddca_entry() //  [R1]
         { []
         }
     {offset
       cdhJU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdhJV; else goto cdhJW;
       cdhJV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdhJW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_sddc4_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddca_info" {
     sat_sddca_info:
         const sat_sddca_entry;
         const 8589934593;
         const 4294967311;
         const SddB2_srt+816;
 },
 sat_sddc8_entry() //  [R1]
         { []
         }
     {offset
       cdhK9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdhKa; else goto cdhKb;
       cdhKa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdhKb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddc7::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddc7::I64, 3)) goto udhKc; else goto udhKf;
       udhKc: // global
           if (%MO_S_Lt_W64(_sddc7::I64, 1)) goto udhKd; else goto udhKe;
       udhKd: // global
           if (%MO_S_Lt_W64(_sddc7::I64, 0)) goto cdhK3; else goto cdhK4;
       cdhK4: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhKe: // global
           if (%MO_S_Lt_W64(_sddc7::I64, 2)) goto cdhK5; else goto cdhK6;
       cdhK5: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhK6: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhKf: // global
           if (%MO_S_Ge_W64(_sddc7::I64, 5)) goto cdhK3; else goto udhKg;
       cdhK3: // global
           R2 = _sddc7::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       udhKg: // global
           if (%MO_S_Lt_W64(_sddc7::I64, 4)) goto cdhK7; else goto cdhK8;
       cdhK7: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhK8: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddc8_info" {
     sat_sddc8_info:
         const sat_sddc8_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+816;
 },
 sat_sddcc_entry() //  [R1]
         { []
         }
     {offset
       cdhKu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdhKv; else goto cdhKw;
       cdhKv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdhKw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddcb::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddcb::I64, 3)) goto udhKx; else goto udhKA;
       udhKx: // global
           if (%MO_S_Lt_W64(_sddcb::I64, 1)) goto udhKy; else goto udhKz;
       udhKy: // global
           if (%MO_S_Lt_W64(_sddcb::I64, 0)) goto cdhKo; else goto cdhKp;
       cdhKp: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhKz: // global
           if (%MO_S_Lt_W64(_sddcb::I64, 2)) goto cdhKq; else goto cdhKr;
       cdhKq: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhKr: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhKA: // global
           if (%MO_S_Ge_W64(_sddcb::I64, 5)) goto cdhKo; else goto udhKB;
       cdhKo: // global
           R2 = _sddcb::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       udhKB: // global
           if (%MO_S_Lt_W64(_sddcb::I64, 4)) goto cdhKs; else goto cdhKt;
       cdhKs: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhKt: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddcc_info" {
     sat_sddcc_info:
         const sat_sddcc_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+816;
 },
 go_dn_sddc4_entry() //  [R1, R2]
         { []
         }
     {offset
       cdhKF: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdhKJ; else goto cdhKI;
       cdhKJ: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdhKI: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto cdhKD; else goto cdhKE;
       cdhKD: // global
           _sddc2::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_sddca_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _sddc2::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sddc8_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdhKE: // global
           I64[Hp - 80] = sat_sddcc_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _cdhKL::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _cdhKL::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_sddc4_info" {
     go_dn_sddc4_info:
         const go_dn_sddc4_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const SddB2_srt+816;
 },
 sat_sddcd_entry() //  [R1]
         { []
         }
     {offset
       cdhKM: // global
           _sddcd::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdhKN; else goto cdhKO;
       cdhKO: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdhKQ; else goto cdhKP;
       cdhKQ: // global
           HpAlloc = 24;
           goto cdhKN;
       cdhKN: // global
           R1 = _sddcd::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdhKP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sddcd::P64;
           _sdda9::I64 = I64[_sddcd::P64 + 24];
           _sddc2::I64 = _sdda9::I64 - I64[_sddcd::P64 + 16];
           I64[Hp - 16] = go_dn_sddc4_info;
           I64[Hp - 8] = _sddc2::I64;
           I64[Hp] = 3 - _sddc2::I64;
           R2 = _sdda9::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_sddc4_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddcd_info" {
     sat_sddcd_info:
         const sat_sddcd_entry;
         const 8589934592;
         const 4294967316;
         const SddB2_srt+816;
 },
 sat_sddc1_entry() //  [R1]
         { []
         }
     {offset
       cdhL3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdhL4; else goto cdhL5;
       cdhL4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdhL5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddc0::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddc0::I64, 3)) goto udhL6; else goto udhL9;
       udhL6: // global
           if (%MO_S_Lt_W64(_sddc0::I64, 1)) goto udhL7; else goto udhL8;
       udhL7: // global
           if (%MO_S_Lt_W64(_sddc0::I64, 0)) goto cdhKX; else goto cdhKY;
       cdhKY: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhL8: // global
           if (%MO_S_Lt_W64(_sddc0::I64, 2)) goto cdhKZ; else goto cdhL0;
       cdhKZ: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhL0: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhL9: // global
           if (%MO_S_Ge_W64(_sddc0::I64, 5)) goto cdhKX; else goto udhLa;
       cdhKX: // global
           R2 = _sddc0::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       udhLa: // global
           if (%MO_S_Lt_W64(_sddc0::I64, 4)) goto cdhL1; else goto cdhL2;
       cdhL1: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhL2: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddc1_info" {
     sat_sddc1_info:
         const sat_sddc1_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+816;
 },
 sat_sddcg_entry() //  [R1]
         { []
         }
     {offset
       cdhLr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdhLs; else goto cdhLt;
       cdhLs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdhLt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddcf::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddcf::I64, 3)) goto udhLu; else goto udhLx;
       udhLu: // global
           if (%MO_S_Lt_W64(_sddcf::I64, 1)) goto udhLv; else goto udhLw;
       udhLv: // global
           if (%MO_S_Lt_W64(_sddcf::I64, 0)) goto cdhLl; else goto cdhLm;
       cdhLm: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhLw: // global
           if (%MO_S_Lt_W64(_sddcf::I64, 2)) goto cdhLn; else goto cdhLo;
       cdhLn: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhLo: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhLx: // global
           if (%MO_S_Ge_W64(_sddcf::I64, 5)) goto cdhLl; else goto udhLy;
       cdhLl: // global
           R2 = _sddcf::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       udhLy: // global
           if (%MO_S_Lt_W64(_sddcf::I64, 4)) goto cdhLp; else goto cdhLq;
       cdhLp: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhLq: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddcg_info" {
     sat_sddcg_info:
         const sat_sddcg_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+816;
 },
 sat_sddcs_entry() //  [R1]
         { []
         }
     {offset
       cdhM1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdhM2; else goto cdhM3;
       cdhM2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdhM3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_sddcm_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddcs_info" {
     sat_sddcs_info:
         const sat_sddcs_entry;
         const 8589934593;
         const 4294967311;
         const SddB2_srt+816;
 },
 sat_sddcq_entry() //  [R1]
         { []
         }
     {offset
       cdhMg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdhMh; else goto cdhMi;
       cdhMh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdhMi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddcp::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddcp::I64, 3)) goto udhMj; else goto udhMm;
       udhMj: // global
           if (%MO_S_Lt_W64(_sddcp::I64, 1)) goto udhMk; else goto udhMl;
       udhMk: // global
           if (%MO_S_Lt_W64(_sddcp::I64, 0)) goto cdhMa; else goto cdhMb;
       cdhMb: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhMl: // global
           if (%MO_S_Lt_W64(_sddcp::I64, 2)) goto cdhMc; else goto cdhMd;
       cdhMc: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhMd: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhMm: // global
           if (%MO_S_Ge_W64(_sddcp::I64, 5)) goto cdhMa; else goto udhMn;
       cdhMa: // global
           R2 = _sddcp::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       udhMn: // global
           if (%MO_S_Lt_W64(_sddcp::I64, 4)) goto cdhMe; else goto cdhMf;
       cdhMe: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhMf: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddcq_info" {
     sat_sddcq_info:
         const sat_sddcq_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+816;
 },
 sat_sddcu_entry() //  [R1]
         { []
         }
     {offset
       cdhMB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdhMC; else goto cdhMD;
       cdhMC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdhMD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddct::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddct::I64, 3)) goto udhME; else goto udhMH;
       udhME: // global
           if (%MO_S_Lt_W64(_sddct::I64, 1)) goto udhMF; else goto udhMG;
       udhMF: // global
           if (%MO_S_Lt_W64(_sddct::I64, 0)) goto cdhMv; else goto cdhMw;
       cdhMw: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhMG: // global
           if (%MO_S_Lt_W64(_sddct::I64, 2)) goto cdhMx; else goto cdhMy;
       cdhMx: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhMy: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhMH: // global
           if (%MO_S_Ge_W64(_sddct::I64, 5)) goto cdhMv; else goto udhMI;
       cdhMv: // global
           R2 = _sddct::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       udhMI: // global
           if (%MO_S_Lt_W64(_sddct::I64, 4)) goto cdhMz; else goto cdhMA;
       cdhMz: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhMA: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddcu_info" {
     sat_sddcu_info:
         const sat_sddcu_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+816;
 },
 go_up_sddcm_entry() //  [R1, R2]
         { []
         }
     {offset
       cdhMM: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdhMQ; else goto cdhMP;
       cdhMQ: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdhMP: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto cdhMK; else goto cdhML;
       cdhMK: // global
           _sddck::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_sddcs_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _sddck::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sddcq_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdhML: // global
           I64[Hp - 80] = sat_sddcu_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _cdhMS::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _cdhMS::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_sddcm_info" {
     go_up_sddcm_info:
         const go_up_sddcm_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const SddB2_srt+816;
 },
 sat_sddcv_entry() //  [R1]
         { []
         }
     {offset
       cdhMT: // global
           _sddcv::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdhMU; else goto cdhMV;
       cdhMV: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdhMX; else goto cdhMW;
       cdhMX: // global
           HpAlloc = 24;
           goto cdhMU;
       cdhMU: // global
           R1 = _sddcv::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdhMW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sddcv::P64;
           _sdda9::I64 = I64[_sddcv::P64 + 24];
           _sddck::I64 = _sdda9::I64 - I64[_sddcv::P64 + 16];
           I64[Hp - 16] = go_up_sddcm_info;
           I64[Hp - 8] = _sddck::I64;
           I64[Hp] = 3 - _sddck::I64;
           R2 = _sdda9::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_sddcm_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddcv_info" {
     sat_sddcv_info:
         const sat_sddcv_entry;
         const 8589934592;
         const 4294967316;
         const SddB2_srt+816;
 },
 sat_sddcj_entry() //  [R1]
         { []
         }
     {offset
       cdhNa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdhNb; else goto cdhNc;
       cdhNb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdhNc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddci::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddci::I64, 3)) goto udhNd; else goto udhNg;
       udhNd: // global
           if (%MO_S_Lt_W64(_sddci::I64, 1)) goto udhNe; else goto udhNf;
       udhNe: // global
           if (%MO_S_Lt_W64(_sddci::I64, 0)) goto cdhN4; else goto cdhN5;
       cdhN5: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhNf: // global
           if (%MO_S_Lt_W64(_sddci::I64, 2)) goto cdhN6; else goto cdhN7;
       cdhN6: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhN7: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhNg: // global
           if (%MO_S_Ge_W64(_sddci::I64, 5)) goto cdhN4; else goto udhNh;
       cdhN4: // global
           R2 = _sddci::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       udhNh: // global
           if (%MO_S_Lt_W64(_sddci::I64, 4)) goto cdhN8; else goto cdhN9;
       cdhN8: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhN9: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddcj_info" {
     sat_sddcj_info:
         const sat_sddcj_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+816;
 },
 sat_sddcy_entry() //  [R1]
         { []
         }
     {offset
       cdhNy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdhNz; else goto cdhNA;
       cdhNz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdhNA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddcx::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddcx::I64, 3)) goto udhNB; else goto udhNE;
       udhNB: // global
           if (%MO_S_Lt_W64(_sddcx::I64, 1)) goto udhNC; else goto udhND;
       udhNC: // global
           if (%MO_S_Lt_W64(_sddcx::I64, 0)) goto cdhNs; else goto cdhNt;
       cdhNt: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhND: // global
           if (%MO_S_Lt_W64(_sddcx::I64, 2)) goto cdhNu; else goto cdhNv;
       cdhNu: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhNv: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhNE: // global
           if (%MO_S_Ge_W64(_sddcx::I64, 5)) goto cdhNs; else goto udhNF;
       cdhNs: // global
           R2 = _sddcx::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       udhNF: // global
           if (%MO_S_Lt_W64(_sddcx::I64, 4)) goto cdhNw; else goto cdhNx;
       cdhNw: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhNx: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddcy_info" {
     sat_sddcy_info:
         const sat_sddcy_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+816;
 },
 sat_sddcL_entry() //  [R1]
         { []
         }
     {offset
       cdhOc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdhOd; else goto cdhOe;
       cdhOd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdhOe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_sddcF_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddcL_info" {
     sat_sddcL_info:
         const sat_sddcL_entry;
         const 8589934593;
         const 4294967311;
         const SddB2_srt+816;
 },
 sat_sddcJ_entry() //  [R1]
         { []
         }
     {offset
       cdhOr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdhOs; else goto cdhOt;
       cdhOs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdhOt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddcI::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddcI::I64, 3)) goto udhOu; else goto udhOx;
       udhOu: // global
           if (%MO_S_Lt_W64(_sddcI::I64, 1)) goto udhOv; else goto udhOw;
       udhOv: // global
           if (%MO_S_Lt_W64(_sddcI::I64, 0)) goto cdhOl; else goto cdhOm;
       cdhOm: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhOw: // global
           if (%MO_S_Lt_W64(_sddcI::I64, 2)) goto cdhOn; else goto cdhOo;
       cdhOn: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhOo: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhOx: // global
           if (%MO_S_Ge_W64(_sddcI::I64, 5)) goto cdhOl; else goto udhOy;
       cdhOl: // global
           R2 = _sddcI::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       udhOy: // global
           if (%MO_S_Lt_W64(_sddcI::I64, 4)) goto cdhOp; else goto cdhOq;
       cdhOp: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhOq: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddcJ_info" {
     sat_sddcJ_info:
         const sat_sddcJ_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+816;
 },
 sat_sddcN_entry() //  [R1]
         { []
         }
     {offset
       cdhOM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdhON; else goto cdhOO;
       cdhON: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdhOO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddcM::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddcM::I64, 3)) goto udhOP; else goto udhOS;
       udhOP: // global
           if (%MO_S_Lt_W64(_sddcM::I64, 1)) goto udhOQ; else goto udhOR;
       udhOQ: // global
           if (%MO_S_Lt_W64(_sddcM::I64, 0)) goto cdhOG; else goto cdhOH;
       cdhOH: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhOR: // global
           if (%MO_S_Lt_W64(_sddcM::I64, 2)) goto cdhOI; else goto cdhOJ;
       cdhOI: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhOJ: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhOS: // global
           if (%MO_S_Ge_W64(_sddcM::I64, 5)) goto cdhOG; else goto udhOT;
       cdhOG: // global
           R2 = _sddcM::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       udhOT: // global
           if (%MO_S_Lt_W64(_sddcM::I64, 4)) goto cdhOK; else goto cdhOL;
       cdhOK: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhOL: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddcN_info" {
     sat_sddcN_info:
         const sat_sddcN_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+816;
 },
 go_dn_sddcF_entry() //  [R1, R2]
         { []
         }
     {offset
       cdhOX: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdhP1; else goto cdhP0;
       cdhP1: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdhP0: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto cdhOV; else goto cdhOW;
       cdhOV: // global
           _sddcD::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_sddcL_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _sddcD::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sddcJ_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdhOW: // global
           I64[Hp - 80] = sat_sddcN_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _cdhP3::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _cdhP3::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_sddcF_info" {
     go_dn_sddcF_info:
         const go_dn_sddcF_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const SddB2_srt+816;
 },
 sat_sddcO_entry() //  [R1]
         { []
         }
     {offset
       cdhP4: // global
           _sddcO::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdhP5; else goto cdhP6;
       cdhP6: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdhP8; else goto cdhP7;
       cdhP8: // global
           HpAlloc = 24;
           goto cdhP5;
       cdhP5: // global
           R1 = _sddcO::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdhP7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sddcO::P64;
           _sdda9::I64 = I64[_sddcO::P64 + 24];
           _sddcD::I64 = _sdda9::I64 - I64[_sddcO::P64 + 16];
           I64[Hp - 16] = go_dn_sddcF_info;
           I64[Hp - 8] = _sddcD::I64;
           I64[Hp] = 4 - _sddcD::I64;
           R2 = _sdda9::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_sddcF_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddcO_info" {
     sat_sddcO_info:
         const sat_sddcO_entry;
         const 8589934592;
         const 4294967316;
         const SddB2_srt+816;
 },
 sat_sddcC_entry() //  [R1]
         { []
         }
     {offset
       cdhPl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdhPm; else goto cdhPn;
       cdhPm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdhPn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddcB::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddcB::I64, 3)) goto udhPo; else goto udhPr;
       udhPo: // global
           if (%MO_S_Lt_W64(_sddcB::I64, 1)) goto udhPp; else goto udhPq;
       udhPp: // global
           if (%MO_S_Lt_W64(_sddcB::I64, 0)) goto cdhPf; else goto cdhPg;
       cdhPg: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhPq: // global
           if (%MO_S_Lt_W64(_sddcB::I64, 2)) goto cdhPh; else goto cdhPi;
       cdhPh: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhPi: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhPr: // global
           if (%MO_S_Ge_W64(_sddcB::I64, 5)) goto cdhPf; else goto udhPs;
       cdhPf: // global
           R2 = _sddcB::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       udhPs: // global
           if (%MO_S_Lt_W64(_sddcB::I64, 4)) goto cdhPj; else goto cdhPk;
       cdhPj: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhPk: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddcC_info" {
     sat_sddcC_info:
         const sat_sddcC_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+816;
 },
 sat_sddcR_entry() //  [R1]
         { []
         }
     {offset
       cdhPJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdhPK; else goto cdhPL;
       cdhPK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdhPL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddcQ::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddcQ::I64, 3)) goto udhPM; else goto udhPP;
       udhPM: // global
           if (%MO_S_Lt_W64(_sddcQ::I64, 1)) goto udhPN; else goto udhPO;
       udhPN: // global
           if (%MO_S_Lt_W64(_sddcQ::I64, 0)) goto cdhPD; else goto cdhPE;
       cdhPE: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhPO: // global
           if (%MO_S_Lt_W64(_sddcQ::I64, 2)) goto cdhPF; else goto cdhPG;
       cdhPF: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhPG: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhPP: // global
           if (%MO_S_Ge_W64(_sddcQ::I64, 5)) goto cdhPD; else goto udhPQ;
       cdhPD: // global
           R2 = _sddcQ::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       udhPQ: // global
           if (%MO_S_Lt_W64(_sddcQ::I64, 4)) goto cdhPH; else goto cdhPI;
       cdhPH: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhPI: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddcR_info" {
     sat_sddcR_info:
         const sat_sddcR_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+816;
 },
 sat_sddd3_entry() //  [R1]
         { []
         }
     {offset
       cdhQj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdhQk; else goto cdhQl;
       cdhQk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdhQl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_sddcX_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddd3_info" {
     sat_sddd3_info:
         const sat_sddd3_entry;
         const 8589934593;
         const 4294967311;
         const SddB2_srt+816;
 },
 sat_sddd1_entry() //  [R1]
         { []
         }
     {offset
       cdhQy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdhQz; else goto cdhQA;
       cdhQz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdhQA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddd0::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddd0::I64, 3)) goto udhQB; else goto udhQE;
       udhQB: // global
           if (%MO_S_Lt_W64(_sddd0::I64, 1)) goto udhQC; else goto udhQD;
       udhQC: // global
           if (%MO_S_Lt_W64(_sddd0::I64, 0)) goto cdhQs; else goto cdhQt;
       cdhQt: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhQD: // global
           if (%MO_S_Lt_W64(_sddd0::I64, 2)) goto cdhQu; else goto cdhQv;
       cdhQu: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhQv: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhQE: // global
           if (%MO_S_Ge_W64(_sddd0::I64, 5)) goto cdhQs; else goto udhQF;
       cdhQs: // global
           R2 = _sddd0::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       udhQF: // global
           if (%MO_S_Lt_W64(_sddd0::I64, 4)) goto cdhQw; else goto cdhQx;
       cdhQw: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhQx: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddd1_info" {
     sat_sddd1_info:
         const sat_sddd1_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+816;
 },
 sat_sddd5_entry() //  [R1]
         { []
         }
     {offset
       cdhQT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdhQU; else goto cdhQV;
       cdhQU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdhQV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddd4::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddd4::I64, 3)) goto udhQW; else goto udhQZ;
       udhQW: // global
           if (%MO_S_Lt_W64(_sddd4::I64, 1)) goto udhQX; else goto udhQY;
       udhQX: // global
           if (%MO_S_Lt_W64(_sddd4::I64, 0)) goto cdhQN; else goto cdhQO;
       cdhQO: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhQY: // global
           if (%MO_S_Lt_W64(_sddd4::I64, 2)) goto cdhQP; else goto cdhQQ;
       cdhQP: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhQQ: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhQZ: // global
           if (%MO_S_Ge_W64(_sddd4::I64, 5)) goto cdhQN; else goto udhR0;
       cdhQN: // global
           R2 = _sddd4::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       udhR0: // global
           if (%MO_S_Lt_W64(_sddd4::I64, 4)) goto cdhQR; else goto cdhQS;
       cdhQR: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhQS: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddd5_info" {
     sat_sddd5_info:
         const sat_sddd5_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+816;
 },
 go_up_sddcX_entry() //  [R1, R2]
         { []
         }
     {offset
       cdhR4: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdhR8; else goto cdhR7;
       cdhR8: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdhR7: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto cdhR2; else goto cdhR3;
       cdhR2: // global
           _sddcV::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_sddd3_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _sddcV::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sddd1_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdhR3: // global
           I64[Hp - 80] = sat_sddd5_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _cdhRa::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _cdhRa::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_sddcX_info" {
     go_up_sddcX_info:
         const go_up_sddcX_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const SddB2_srt+816;
 },
 sat_sddd6_entry() //  [R1]
         { []
         }
     {offset
       cdhRb: // global
           _sddd6::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdhRc; else goto cdhRd;
       cdhRd: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdhRf; else goto cdhRe;
       cdhRf: // global
           HpAlloc = 24;
           goto cdhRc;
       cdhRc: // global
           R1 = _sddd6::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdhRe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sddd6::P64;
           _sdda9::I64 = I64[_sddd6::P64 + 24];
           _sddcV::I64 = _sdda9::I64 - I64[_sddd6::P64 + 16];
           I64[Hp - 16] = go_up_sddcX_info;
           I64[Hp - 8] = _sddcV::I64;
           I64[Hp] = 4 - _sddcV::I64;
           R2 = _sdda9::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_sddcX_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddd6_info" {
     sat_sddd6_info:
         const sat_sddd6_entry;
         const 8589934592;
         const 4294967316;
         const SddB2_srt+816;
 },
 sat_sddcU_entry() //  [R1]
         { []
         }
     {offset
       cdhRs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdhRt; else goto cdhRu;
       cdhRt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdhRu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddcT::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddcT::I64, 3)) goto udhRv; else goto udhRy;
       udhRv: // global
           if (%MO_S_Lt_W64(_sddcT::I64, 1)) goto udhRw; else goto udhRx;
       udhRw: // global
           if (%MO_S_Lt_W64(_sddcT::I64, 0)) goto cdhRm; else goto cdhRn;
       cdhRn: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhRx: // global
           if (%MO_S_Lt_W64(_sddcT::I64, 2)) goto cdhRo; else goto cdhRp;
       cdhRo: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhRp: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhRy: // global
           if (%MO_S_Ge_W64(_sddcT::I64, 5)) goto cdhRm; else goto udhRz;
       cdhRm: // global
           R2 = _sddcT::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       udhRz: // global
           if (%MO_S_Lt_W64(_sddcT::I64, 4)) goto cdhRq; else goto cdhRr;
       cdhRq: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhRr: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddcU_info" {
     sat_sddcU_info:
         const sat_sddcU_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+816;
 },
 sat_sddd9_entry() //  [R1]
         { []
         }
     {offset
       cdhRQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdhRR; else goto cdhRS;
       cdhRR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdhRS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddd8::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddd8::I64, 3)) goto udhRT; else goto udhRW;
       udhRT: // global
           if (%MO_S_Lt_W64(_sddd8::I64, 1)) goto udhRU; else goto udhRV;
       udhRU: // global
           if (%MO_S_Lt_W64(_sddd8::I64, 0)) goto cdhRK; else goto cdhRL;
       cdhRL: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhRV: // global
           if (%MO_S_Lt_W64(_sddd8::I64, 2)) goto cdhRM; else goto cdhRN;
       cdhRM: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhRN: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udhRW: // global
           if (%MO_S_Ge_W64(_sddd8::I64, 5)) goto cdhRK; else goto udhRX;
       cdhRK: // global
           R2 = _sddd8::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       udhRX: // global
           if (%MO_S_Lt_W64(_sddd8::I64, 4)) goto cdhRO; else goto cdhRP;
       cdhRO: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdhRP: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddd9_info" {
     sat_sddd9_info:
         const sat_sddd9_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+816;
 },
 GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFromThenTo_entry() //  [R2,
                                                               R3, R4]
         { []
         }
     {offset
       cdhS8: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdhS9; else goto cdhSa;
       cdhS9: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFromThenTo_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdhSa: // global
           I64[Sp - 24] = block_cdhRY_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udhUU; else goto cdhRZ;
       udhUU: // global
           call _cdhRY(R1) args: 0, res: 0, upd: 0;
       cdhRZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFromThenTo_info" {
     GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFromThenTo_info:
         const GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFromThenTo_entry;
         const 0;
         const 4503603922337806;
         const 12884901911;
         const SddB2_srt+816;
 },
 _cdhRY() //  [R1]
         { []
         }
     {offset
       cdhRY: // global
           _sdda4::P64 = P64[Sp + 8];
           _cdhS7::P64 = R1 & 7;
           if (_cdhS7::P64 < 4) goto udhUN; else goto udhUP;
       udhUN: // global
           if (_cdhS7::P64 < 3) goto udhUO; else goto cdhS4;
       udhUO: // global
           if (_cdhS7::P64 < 2) goto cdhS2; else goto cdhS3;
       cdhS2: // global
           _sdda7::I64 = 0;
           goto sdda6;
       cdhS3: // global
           _sdda7::I64 = 1;
           goto sdda6;
       cdhS4: // global
           _sdda7::I64 = 2;
           goto sdda6;
       udhUP: // global
           if (_cdhS7::P64 < 5) goto cdhS5; else goto cdhS6;
       cdhS5: // global
           _sdda7::I64 = 3;
           goto sdda6;
       cdhS6: // global
           _sdda7::I64 = 4;
           goto sdda6;
       sdda6: // global
           I64[Sp] = block_cdhSb_info;
           R1 = _sdda4::P64;
           I64[Sp + 8] = _sdda7::I64;
           if (R1 & 7 != 0) goto udhUT; else goto cdhU6;
       udhUT: // global
           call _cdhSb(R1) args: 0, res: 0, upd: 0;
       cdhU6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdhRY_info" {
     block_cdhRY_info:
         const _cdhRY;
         const 2;
         const 4294967326;
         const SddB2_srt+816;
 },
 _cdhSb() //  [R1]
         { []
         }
     {offset
       cdhSb: // global
           _sdda5::P64 = P64[Sp + 16];
           _cdhUI::P64 = R1 & 7;
           if (_cdhUI::P64 < 4) goto udhUQ; else goto udhUS;
       udhUQ: // global
           if (_cdhUI::P64 < 3) goto udhUR; else goto cdhUk;
       udhUR: // global
           if (_cdhUI::P64 < 2) goto cdhUc; else goto cdhUg;
       cdhUc: // global
           _sdda9::I64 = 0;
           goto sdda8;
       cdhUg: // global
           _sdda9::I64 = 1;
           goto sdda8;
       cdhUk: // global
           _sdda9::I64 = 2;
           goto sdda8;
       udhUS: // global
           if (_cdhUI::P64 < 5) goto cdhUo; else goto cdhUs;
       cdhUo: // global
           _sdda9::I64 = 3;
           goto sdda8;
       cdhUs: // global
           _sdda9::I64 = 4;
           goto sdda8;
       sdda8: // global
           I64[Sp] = block_cdhwt_info;
           R1 = _sdda5::P64;
           I64[Sp + 16] = _sdda9::I64;
           if (R1 & 7 != 0) goto udhUV; else goto cdhwu;
       udhUV: // global
           call _cdhwt(R1) args: 0, res: 0, upd: 0;
       cdhwu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdhSb_info" {
     block_cdhSb_info:
         const _cdhSb;
         const 66;
         const 4294967326;
         const SddB2_srt+816;
 },
 _cdhwt() //  [R1]
         { []
         }
     {offset
       cdhwt: // global
           _sdda7::I64 = I64[Sp + 8];
           _sdda9::I64 = I64[Sp + 16];
           _cdhUJ::P64 = R1 & 7;
           if (_cdhUJ::P64 < 4) goto udhUK; else goto udhUM;
       udhUK: // global
           if (_cdhUJ::P64 < 3) goto udhUL; else goto cdhSZ;
       udhUL: // global
           if (_cdhUJ::P64 < 2) goto cdhSf; else goto cdhSC;
       cdhSf: // global
           Hp = Hp + 80;
           _sddaa::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cdhTM; else goto cdhSh;
       cdhSh: // global
           if (%MO_S_Lt_W64(_sdda9::I64,
                            _sdda7::I64)) goto cdhSs; else goto cdhSB;
       cdhSs: // global
           if (%MO_S_Le_W64(0, _sdda9::I64)) goto cdhSl; else goto cdhSq;
       cdhSl: // global
           I64[Hp - 72] = sat_sddaq_info;
           I64[Hp - 56] = _sdda7::I64;
           I64[Hp - 48] = _sdda9::I64;
           I64[Hp - 40] = sat_sddae_info;
           I64[Hp - 24] = _sdda7::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdhSq: // global
           if (%MO_S_Gt_W64(0, _sdda7::I64)) goto cdhU3; else goto cdhSo;
       cdhSo: // global
           I64[Hp - 72] = sat_sddat_info;
           I64[Hp - 56] = _sdda7::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _cdhSm::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _cdhSm::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdhSB: // global
           if (%MO_S_Ge_W64(0, _sdda9::I64)) goto cdhSv; else goto cdhSA;
       cdhSv: // global
           I64[Hp - 72] = sat_sddaI_info;
           I64[Hp - 56] = _sdda7::I64;
           I64[Hp - 48] = _sdda9::I64;
           I64[Hp - 40] = sat_sddaw_info;
           I64[Hp - 24] = _sdda7::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdhSA: // global
           if (%MO_S_Lt_W64(0, _sdda7::I64)) goto cdhU3; else goto cdhSy;
       cdhSy: // global
           I64[Hp - 72] = sat_sddaL_info;
           I64[Hp - 56] = _sdda7::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _cdhSw::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _cdhSw::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdhSC: // global
           Hp = Hp + 80;
           _sddaa::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cdhTM; else goto cdhSE;
       cdhSE: // global
           if (%MO_S_Lt_W64(_sdda9::I64,
                            _sdda7::I64)) goto cdhSP; else goto cdhSY;
       cdhSP: // global
           if (%MO_S_Le_W64(1, _sdda9::I64)) goto cdhSI; else goto cdhSN;
       cdhSI: // global
           I64[Hp - 72] = sat_sddb1_info;
           I64[Hp - 56] = _sdda7::I64;
           I64[Hp - 48] = _sdda9::I64;
           I64[Hp - 40] = sat_sddaP_info;
           I64[Hp - 24] = _sdda7::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdhSN: // global
           if (%MO_S_Gt_W64(1, _sdda7::I64)) goto cdhU3; else goto cdhSL;
       cdhSL: // global
           I64[Hp - 72] = sat_sddb4_info;
           I64[Hp - 56] = _sdda7::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _cdhSJ::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _cdhSJ::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdhSY: // global
           if (%MO_S_Ge_W64(1, _sdda9::I64)) goto cdhSS; else goto cdhSX;
       cdhSS: // global
           I64[Hp - 72] = sat_sddbj_info;
           I64[Hp - 56] = _sdda7::I64;
           I64[Hp - 48] = _sdda9::I64;
           I64[Hp - 40] = sat_sddb7_info;
           I64[Hp - 24] = _sdda7::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdhSX: // global
           if (%MO_S_Lt_W64(1, _sdda7::I64)) goto cdhU3; else goto cdhSV;
       cdhSV: // global
           I64[Hp - 72] = sat_sddbm_info;
           I64[Hp - 56] = _sdda7::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _cdhST::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _cdhST::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdhSZ: // global
           Hp = Hp + 80;
           _sddaa::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cdhTM; else goto cdhT1;
       cdhT1: // global
           if (%MO_S_Lt_W64(_sdda9::I64,
                            _sdda7::I64)) goto cdhTc; else goto cdhTl;
       cdhTc: // global
           if (%MO_S_Le_W64(2, _sdda9::I64)) goto cdhT5; else goto cdhTa;
       cdhT5: // global
           I64[Hp - 72] = sat_sddbC_info;
           I64[Hp - 56] = _sdda7::I64;
           I64[Hp - 48] = _sdda9::I64;
           I64[Hp - 40] = sat_sddbq_info;
           I64[Hp - 24] = _sdda7::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdhTa: // global
           if (%MO_S_Gt_W64(2, _sdda7::I64)) goto cdhU3; else goto cdhT8;
       cdhT8: // global
           I64[Hp - 72] = sat_sddbF_info;
           I64[Hp - 56] = _sdda7::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _cdhT6::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _cdhT6::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdhTl: // global
           if (%MO_S_Ge_W64(2, _sdda9::I64)) goto cdhTf; else goto cdhTk;
       cdhTf: // global
           I64[Hp - 72] = sat_sddbU_info;
           I64[Hp - 56] = _sdda7::I64;
           I64[Hp - 48] = _sdda9::I64;
           I64[Hp - 40] = sat_sddbI_info;
           I64[Hp - 24] = _sdda7::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdhTk: // global
           if (%MO_S_Lt_W64(2, _sdda7::I64)) goto cdhU3; else goto cdhTi;
       cdhTi: // global
           I64[Hp - 72] = sat_sddbX_info;
           I64[Hp - 56] = _sdda7::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _cdhTg::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _cdhTg::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       udhUM: // global
           if (_cdhUJ::P64 < 5) goto cdhTm; else goto cdhTJ;
       cdhTm: // global
           Hp = Hp + 80;
           _sddaa::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cdhTM; else goto cdhTo;
       cdhTo: // global
           if (%MO_S_Lt_W64(_sdda9::I64,
                            _sdda7::I64)) goto cdhTz; else goto cdhTI;
       cdhTz: // global
           if (%MO_S_Le_W64(3, _sdda9::I64)) goto cdhTs; else goto cdhTx;
       cdhTs: // global
           I64[Hp - 72] = sat_sddcd_info;
           I64[Hp - 56] = _sdda7::I64;
           I64[Hp - 48] = _sdda9::I64;
           I64[Hp - 40] = sat_sddc1_info;
           I64[Hp - 24] = _sdda7::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdhTx: // global
           if (%MO_S_Gt_W64(3, _sdda7::I64)) goto cdhU3; else goto cdhTv;
       cdhTv: // global
           I64[Hp - 72] = sat_sddcg_info;
           I64[Hp - 56] = _sdda7::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _cdhTt::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _cdhTt::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdhTI: // global
           if (%MO_S_Ge_W64(3, _sdda9::I64)) goto cdhTC; else goto cdhTH;
       cdhTC: // global
           I64[Hp - 72] = sat_sddcv_info;
           I64[Hp - 56] = _sdda7::I64;
           I64[Hp - 48] = _sdda9::I64;
           I64[Hp - 40] = sat_sddcj_info;
           I64[Hp - 24] = _sdda7::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdhTH: // global
           if (%MO_S_Lt_W64(3, _sdda7::I64)) goto cdhU3; else goto cdhTF;
       cdhTF: // global
           I64[Hp - 72] = sat_sddcy_info;
           I64[Hp - 56] = _sdda7::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _cdhTD::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _cdhTD::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdhTJ: // global
           Hp = Hp + 80;
           _sddaa::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cdhTM; else goto cdhTL;
       cdhTM: // global
           HpAlloc = 80;
           R1 = _sddaa::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdhTL: // global
           if (%MO_S_Lt_W64(_sdda9::I64,
                            _sdda7::I64)) goto cdhTW; else goto cdhU5;
       cdhTW: // global
           if (%MO_S_Le_W64(4, _sdda9::I64)) goto cdhTP; else goto cdhTU;
       cdhTP: // global
           I64[Hp - 72] = sat_sddcO_info;
           I64[Hp - 56] = _sdda7::I64;
           I64[Hp - 48] = _sdda9::I64;
           I64[Hp - 40] = sat_sddcC_info;
           I64[Hp - 24] = _sdda7::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdhTU: // global
           if (%MO_S_Gt_W64(4, _sdda7::I64)) goto cdhU3; else goto cdhTS;
       cdhTS: // global
           I64[Hp - 72] = sat_sddcR_info;
           I64[Hp - 56] = _sdda7::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _cdhTQ::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _cdhTQ::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdhU5: // global
           if (%MO_S_Ge_W64(4, _sdda9::I64)) goto cdhTZ; else goto cdhU4;
       cdhTZ: // global
           I64[Hp - 72] = sat_sddd6_info;
           I64[Hp - 56] = _sdda7::I64;
           I64[Hp - 48] = _sdda9::I64;
           I64[Hp - 40] = sat_sddcU_info;
           I64[Hp - 24] = _sdda7::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdhU4: // global
           if (%MO_S_Lt_W64(4, _sdda7::I64)) goto cdhU3; else goto cdhU2;
       cdhU3: // global
           Hp = Hp - 80;
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdhU2: // global
           I64[Hp - 72] = sat_sddd9_info;
           I64[Hp - 56] = _sdda7::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _cdhU0::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _cdhU0::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdhwt_info" {
     block_cdhwt_info:
         const _cdhwt;
         const 194;
         const 4294967326;
         const SddB2_srt+816;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:30.16090707 UTC

[section ""data" . GHC.RTS.Flags.$fEnumGiveGCStats_closure" {
     GHC.RTS.Flags.$fEnumGiveGCStats_closure:
         const GHC.Enum.C:Enum_con_info;
         const GHC.RTS.Flags.$fEnumGiveGCStats_$csucc_closure+1;
         const GHC.RTS.Flags.$fEnumGiveGCStats_$cpred_closure+1;
         const GHC.RTS.Flags.$fEnumGiveGCStats_$ctoEnum_closure+1;
         const GHC.RTS.Flags.$fEnumGiveGCStats_$cfromEnum_closure+1;
         const GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFrom_closure+1;
         const GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFromThen_closure+2;
         const GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFromTo_closure+2;
         const GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFromThenTo_closure+3;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:30.163742659 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoHeapProfile13_closure" {
     GHC.RTS.Flags.$fEnumDoHeapProfile13_closure:
         const GHC.RTS.Flags.$fEnumDoHeapProfile13_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fEnumDoHeapProfile13_entry() //  [R1]
         { []
         }
     {offset
       cdi8Q: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdi8R; else goto cdi8S;
       cdi8R: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdi8S: // global
           (_cdi8N::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdi8N::I64 == 0) goto cdi8P; else goto cdi8O;
       cdi8P: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdi8O: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdi8N::I64;
           R2 = 3;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoHeapProfile13_info" {
     GHC.RTS.Flags.$fEnumDoHeapProfile13_info:
         const GHC.RTS.Flags.$fEnumDoHeapProfile13_entry;
         const 0;
         const 4294967317;
         const SddB2_srt+984;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:30.167712717 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoHeapProfile15_closure" {
     GHC.RTS.Flags.$fEnumDoHeapProfile15_closure:
         const GHC.RTS.Flags.$fEnumDoHeapProfile15_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fEnumDoHeapProfile15_entry() //  [R1]
         { []
         }
     {offset
       cdi97: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdi98; else goto cdi99;
       cdi98: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdi99: // global
           (_cdi94::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdi94::I64 == 0) goto cdi96; else goto cdi95;
       cdi96: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdi95: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdi94::I64;
           R2 = 9;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoHeapProfile15_info" {
     GHC.RTS.Flags.$fEnumDoHeapProfile15_info:
         const GHC.RTS.Flags.$fEnumDoHeapProfile15_entry;
         const 0;
         const 4294967317;
         const SddB2_srt+984;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:30.17252887 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoHeapProfile_$csucc_closure" {
     GHC.RTS.Flags.$fEnumDoHeapProfile_$csucc_closure:
         const GHC.RTS.Flags.$fEnumDoHeapProfile_$csucc_info;
         const 0;
 },
 GHC.RTS.Flags.$fEnumDoHeapProfile_$csucc_entry() //  [R2]
         { []
         }
     {offset
       cdi9z: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdi9A; else goto cdi9B;
       cdi9A: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoHeapProfile_$csucc_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdi9B: // global
           I64[Sp - 8] = block_cdi9m_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udia0; else goto cdi9n;
       udia0: // global
           call _cdi9m(R1) args: 0, res: 0, upd: 0;
       cdi9n: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoHeapProfile_$csucc_info" {
     GHC.RTS.Flags.$fEnumDoHeapProfile_$csucc_info:
         const GHC.RTS.Flags.$fEnumDoHeapProfile_$csucc_entry;
         const 0;
         const 30064771086;
         const 4294967301;
         const SddB2_srt+992;
 },
 _cdi9m() //  [R1]
         { []
         }
     {offset
       cdi9m: // global
           switch [0 .. 7] (%MO_UU_Conv_W32_W64(I32[I64[R1 - 1] + 20])) {
               case 0 : goto cdi9q;
               case 1 : goto cdi9r;
               case 2 : goto cdi9s;
               case 3 : goto cdi9t;
               case 4 : goto cdi9u;
               case 5 : goto cdi9v;
               case 6 : goto cdi9w;
               case 7 : goto cdi9x;
           }
       cdi9x: // global
           R1 = GHC.RTS.Flags.$fEnumDoHeapProfile15_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cdi9w: // global
           R1 = GHC.RTS.Flags.HeapByClosureType_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdi9v: // global
           R1 = GHC.RTS.Flags.HeapByLDV_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdi9u: // global
           R1 = GHC.RTS.Flags.HeapByRetainer_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdi9t: // global
           R1 = GHC.RTS.Flags.HeapByType_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdi9s: // global
           R1 = GHC.RTS.Flags.$fEnumDoHeapProfile13_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cdi9r: // global
           R1 = GHC.RTS.Flags.HeapByMod_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdi9q: // global
           R1 = GHC.RTS.Flags.HeapByCCS_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdi9m_info" {
     block_cdi9m_info:
         const _cdi9m;
         const 0;
         const 21474836510;
         const SddB2_srt+992;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:30.179948652 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoHeapProfile_go7_closure" {
     GHC.RTS.Flags.$fEnumDoHeapProfile_go7_closure:
         const GHC.RTS.Flags.$fEnumDoHeapProfile_go7_info;
         const 0;
 },
 sat_sdddi_entry() //  [R1]
         { []
         }
     {offset
       cdiaA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdiaB; else goto cdiaC;
       cdiaB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdiaC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sdddg::I64 = I64[R1 + 16];
           if (_sdddg::I64 != 0) goto cdiay; else goto cdiaz;
       cdiay: // global
           R2 = _sdddg::I64 + 1;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumDoHeapProfile_go7_entry(R2) args: 24, res: 0, upd: 24;
       cdiaz: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdddi_info" {
     sat_sdddi_info:
         const sat_sdddi_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1016;
 },
 sat_sdddf_entry() //  [R1]
         { []
         }
     {offset
       cdiaJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdiaK; else goto cdiaL;
       cdiaK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdiaL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdddf_info" {
     sat_sdddf_info:
         const sat_sdddf_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1024;
 },
 GHC.RTS.Flags.$fEnumDoHeapProfile_go7_entry() //  [R2]
         { []
         }
     {offset
       cdiaN: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdiaR; else goto cdiaQ;
       cdiaR: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoHeapProfile_go7_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdiaQ: // global
           I64[Hp - 64] = sat_sdddi_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sdddf_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoHeapProfile_go7_info" {
     GHC.RTS.Flags.$fEnumDoHeapProfile_go7_info:
         const GHC.RTS.Flags.$fEnumDoHeapProfile_go7_entry;
         const 0;
         const 12884901902;
         const 4294967300;
         const SddB2_srt+1016;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:30.188683986 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoHeapProfile_go6_closure" {
     GHC.RTS.Flags.$fEnumDoHeapProfile_go6_closure:
         const GHC.RTS.Flags.$fEnumDoHeapProfile_go6_info;
         const 0;
 },
 sat_sdddn_entry() //  [R1]
         { []
         }
     {offset
       cdibq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdibr; else goto cdibs;
       cdibr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdibs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sdddl::I64 = I64[R1 + 16];
           if (_sdddl::I64 != 1) goto cdibo; else goto cdibp;
       cdibo: // global
           R2 = _sdddl::I64 + 1;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumDoHeapProfile_go6_entry(R2) args: 24, res: 0, upd: 24;
       cdibp: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdddn_info" {
     sat_sdddn_info:
         const sat_sdddn_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1032;
 },
 sat_sdddk_entry() //  [R1]
         { []
         }
     {offset
       cdibz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdibA; else goto cdibB;
       cdibA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdibB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdddk_info" {
     sat_sdddk_info:
         const sat_sdddk_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1024;
 },
 GHC.RTS.Flags.$fEnumDoHeapProfile_go6_entry() //  [R2]
         { []
         }
     {offset
       cdibD: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdibH; else goto cdibG;
       cdibH: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoHeapProfile_go6_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdibG: // global
           I64[Hp - 64] = sat_sdddn_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sdddk_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoHeapProfile_go6_info" {
     GHC.RTS.Flags.$fEnumDoHeapProfile_go6_info:
         const GHC.RTS.Flags.$fEnumDoHeapProfile_go6_entry;
         const 0;
         const 12884901902;
         const 4294967300;
         const SddB2_srt+1024;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:30.198729345 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoHeapProfile_go5_closure" {
     GHC.RTS.Flags.$fEnumDoHeapProfile_go5_closure:
         const GHC.RTS.Flags.$fEnumDoHeapProfile_go5_info;
         const 0;
 },
 sat_sddds_entry() //  [R1]
         { []
         }
     {offset
       cdicg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdich; else goto cdici;
       cdich: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdici: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sdddq::I64 = I64[R1 + 16];
           if (_sdddq::I64 != 2) goto cdice; else goto cdicf;
       cdice: // global
           R2 = _sdddq::I64 + 1;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumDoHeapProfile_go5_entry(R2) args: 24, res: 0, upd: 24;
       cdicf: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddds_info" {
     sat_sddds_info:
         const sat_sddds_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1040;
 },
 sat_sdddp_entry() //  [R1]
         { []
         }
     {offset
       cdicp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdicq; else goto cdicr;
       cdicq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdicr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdddp_info" {
     sat_sdddp_info:
         const sat_sdddp_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1024;
 },
 GHC.RTS.Flags.$fEnumDoHeapProfile_go5_entry() //  [R2]
         { []
         }
     {offset
       cdict: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdicx; else goto cdicw;
       cdicx: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoHeapProfile_go5_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdicw: // global
           I64[Hp - 64] = sat_sddds_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sdddp_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoHeapProfile_go5_info" {
     GHC.RTS.Flags.$fEnumDoHeapProfile_go5_info:
         const GHC.RTS.Flags.$fEnumDoHeapProfile_go5_entry;
         const 0;
         const 21474836494;
         const 4294967300;
         const SddB2_srt+1024;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:30.206808557 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoHeapProfile_go4_closure" {
     GHC.RTS.Flags.$fEnumDoHeapProfile_go4_closure:
         const GHC.RTS.Flags.$fEnumDoHeapProfile_go4_info;
         const 0;
 },
 sat_sdddx_entry() //  [R1]
         { []
         }
     {offset
       cdid6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdid7; else goto cdid8;
       cdid7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdid8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sdddv::I64 = I64[R1 + 16];
           if (_sdddv::I64 != 4) goto cdid4; else goto cdid5;
       cdid4: // global
           R2 = _sdddv::I64 + 1;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumDoHeapProfile_go4_entry(R2) args: 24, res: 0, upd: 24;
       cdid5: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdddx_info" {
     sat_sdddx_info:
         const sat_sdddx_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1048;
 },
 sat_sdddu_entry() //  [R1]
         { []
         }
     {offset
       cdidf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdidg; else goto cdidh;
       cdidg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdidh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdddu_info" {
     sat_sdddu_info:
         const sat_sdddu_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1024;
 },
 GHC.RTS.Flags.$fEnumDoHeapProfile_go4_entry() //  [R2]
         { []
         }
     {offset
       cdidj: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdidn; else goto cdidm;
       cdidn: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoHeapProfile_go4_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdidm: // global
           I64[Hp - 64] = sat_sdddx_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sdddu_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoHeapProfile_go4_info" {
     GHC.RTS.Flags.$fEnumDoHeapProfile_go4_info:
         const GHC.RTS.Flags.$fEnumDoHeapProfile_go4_entry;
         const 0;
         const 38654705678;
         const 4294967300;
         const SddB2_srt+1024;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:30.21525495 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoHeapProfile_go3_closure" {
     GHC.RTS.Flags.$fEnumDoHeapProfile_go3_closure:
         const GHC.RTS.Flags.$fEnumDoHeapProfile_go3_info;
         const 0;
 },
 sat_sdddC_entry() //  [R1]
         { []
         }
     {offset
       cdidW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdidX; else goto cdidY;
       cdidX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdidY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sdddA::I64 = I64[R1 + 16];
           if (_sdddA::I64 != 5) goto cdidU; else goto cdidV;
       cdidU: // global
           R2 = _sdddA::I64 + 1;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumDoHeapProfile_go3_entry(R2) args: 24, res: 0, upd: 24;
       cdidV: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdddC_info" {
     sat_sdddC_info:
         const sat_sdddC_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1056;
 },
 sat_sdddz_entry() //  [R1]
         { []
         }
     {offset
       cdie5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdie6; else goto cdie7;
       cdie6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdie7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdddz_info" {
     sat_sdddz_info:
         const sat_sdddz_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1024;
 },
 GHC.RTS.Flags.$fEnumDoHeapProfile_go3_entry() //  [R2]
         { []
         }
     {offset
       cdie9: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdied; else goto cdiec;
       cdied: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoHeapProfile_go3_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdiec: // global
           I64[Hp - 64] = sat_sdddC_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sdddz_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoHeapProfile_go3_info" {
     GHC.RTS.Flags.$fEnumDoHeapProfile_go3_info:
         const GHC.RTS.Flags.$fEnumDoHeapProfile_go3_entry;
         const 0;
         const 73014444046;
         const 4294967300;
         const SddB2_srt+1024;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:30.223795288 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoHeapProfile_go2_closure" {
     GHC.RTS.Flags.$fEnumDoHeapProfile_go2_closure:
         const GHC.RTS.Flags.$fEnumDoHeapProfile_go2_info;
         const 0;
 },
 sat_sdddH_entry() //  [R1]
         { []
         }
     {offset
       cdieM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdieN; else goto cdieO;
       cdieN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdieO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sdddF::I64 = I64[R1 + 16];
           if (_sdddF::I64 != 6) goto cdieK; else goto cdieL;
       cdieK: // global
           R2 = _sdddF::I64 + 1;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumDoHeapProfile_go2_entry(R2) args: 24, res: 0, upd: 24;
       cdieL: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdddH_info" {
     sat_sdddH_info:
         const sat_sdddH_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1064;
 },
 sat_sdddE_entry() //  [R1]
         { []
         }
     {offset
       cdieV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdieW; else goto cdieX;
       cdieW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdieX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdddE_info" {
     sat_sdddE_info:
         const sat_sdddE_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1024;
 },
 GHC.RTS.Flags.$fEnumDoHeapProfile_go2_entry() //  [R2]
         { []
         }
     {offset
       cdieZ: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdif3; else goto cdif2;
       cdif3: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoHeapProfile_go2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdif2: // global
           I64[Hp - 64] = sat_sdddH_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sdddE_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoHeapProfile_go2_info" {
     GHC.RTS.Flags.$fEnumDoHeapProfile_go2_info:
         const GHC.RTS.Flags.$fEnumDoHeapProfile_go2_entry;
         const 0;
         const 141733920782;
         const 4294967300;
         const SddB2_srt+1024;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:30.232795581 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoHeapProfile_go1_closure" {
     GHC.RTS.Flags.$fEnumDoHeapProfile_go1_closure:
         const GHC.RTS.Flags.$fEnumDoHeapProfile_go1_info;
         const 0;
 },
 sat_sdddM_entry() //  [R1]
         { []
         }
     {offset
       cdifC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdifD; else goto cdifE;
       cdifD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdifE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sdddK::I64 = I64[R1 + 16];
           if (_sdddK::I64 != 7) goto cdifA; else goto cdifB;
       cdifA: // global
           R2 = _sdddK::I64 + 1;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumDoHeapProfile_go1_entry(R2) args: 24, res: 0, upd: 24;
       cdifB: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdddM_info" {
     sat_sdddM_info:
         const sat_sdddM_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1072;
 },
 sat_sdddJ_entry() //  [R1]
         { []
         }
     {offset
       cdifL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdifM; else goto cdifN;
       cdifM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdifN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdddJ_info" {
     sat_sdddJ_info:
         const sat_sdddJ_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1024;
 },
 GHC.RTS.Flags.$fEnumDoHeapProfile_go1_entry() //  [R2]
         { []
         }
     {offset
       cdifP: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdifT; else goto cdifS;
       cdifT: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoHeapProfile_go1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdifS: // global
           I64[Hp - 64] = sat_sdddM_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sdddJ_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoHeapProfile_go1_info" {
     GHC.RTS.Flags.$fEnumDoHeapProfile_go1_info:
         const GHC.RTS.Flags.$fEnumDoHeapProfile_go1_entry;
         const 0;
         const 279172874254;
         const 4294967300;
         const SddB2_srt+1024;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:30.241208706 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoHeapProfile_go_closure" {
     GHC.RTS.Flags.$fEnumDoHeapProfile_go_closure:
         const GHC.RTS.Flags.$fEnumDoHeapProfile_go_info;
         const 0;
 },
 sat_sdddR_entry() //  [R1]
         { []
         }
     {offset
       cdigs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdigt; else goto cdigu;
       cdigt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdigu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sdddP::I64 = I64[R1 + 16];
           if (_sdddP::I64 != 8) goto cdigq; else goto cdigr;
       cdigq: // global
           R2 = _sdddP::I64 + 1;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumDoHeapProfile_go_entry(R2) args: 24, res: 0, upd: 24;
       cdigr: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdddR_info" {
     sat_sdddR_info:
         const sat_sdddR_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1080;
 },
 sat_sdddO_entry() //  [R1]
         { []
         }
     {offset
       cdigB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdigC; else goto cdigD;
       cdigC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdigD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdddO_info" {
     sat_sdddO_info:
         const sat_sdddO_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1024;
 },
 GHC.RTS.Flags.$fEnumDoHeapProfile_go_entry() //  [R2]
         { []
         }
     {offset
       cdigF: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdigJ; else goto cdigI;
       cdigJ: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoHeapProfile_go_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdigI: // global
           I64[Hp - 64] = sat_sdddR_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sdddO_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoHeapProfile_go_info" {
     GHC.RTS.Flags.$fEnumDoHeapProfile_go_info:
         const GHC.RTS.Flags.$fEnumDoHeapProfile_go_entry;
         const 0;
         const 554050781198;
         const 4294967300;
         const SddB2_srt+1024;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:30.251028209 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFromTo_closure" {
     GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFromTo_closure:
         const GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFromTo_info;
         const 0;
 },
 GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFromTo_entry() //  [R2, R3]
         { []
         }
     {offset
       cdihp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdihq; else goto cdihr;
       cdihq: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFromTo_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdihr: // global
           I64[Sp - 16] = block_cdihc_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udija; else goto cdihd;
       udija: // global
           call _cdihc(R1) args: 0, res: 0, upd: 0;
       cdihd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFromTo_info" {
     GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFromTo_info:
         const GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFromTo_entry;
         const 0;
         const 4385161609230;
         const 8589934607;
         const SddB2_srt+1016;
 },
 _cdihc() //  [R1]
         { []
         }
     {offset
       cdihc: // global
           _sdddT::P64 = P64[Sp + 8];
           switch [0 .. 7] (%MO_UU_Conv_W32_W64(I32[I64[R1 - 1] + 20])) {
               case 0 : goto cdihg;
               case 1 : goto cdihh;
               case 2 : goto cdihi;
               case 3 : goto cdihj;
               case 4 : goto cdihk;
               case 5 : goto cdihl;
               case 6 : goto cdihm;
               case 7 : goto cdihn;
           }
       cdihn: // global
           _sdddV::I64 = 8;
           goto sdddU;
       cdihm: // global
           _sdddV::I64 = 7;
           goto sdddU;
       cdihl: // global
           _sdddV::I64 = 6;
           goto sdddU;
       cdihk: // global
           _sdddV::I64 = 5;
           goto sdddU;
       cdihj: // global
           _sdddV::I64 = 4;
           goto sdddU;
       cdihi: // global
           _sdddV::I64 = 2;
           goto sdddU;
       cdihh: // global
           _sdddV::I64 = 1;
           goto sdddU;
       cdihg: // global
           _sdddV::I64 = 0;
           goto sdddU;
       sdddU: // global
           I64[Sp] = block_cdihv_info;
           R1 = _sdddT::P64;
           I64[Sp + 8] = _sdddV::I64;
           if (R1 & 7 != 0) goto udij9; else goto cdihx;
       udij9: // global
           call _cdihv(R1) args: 0, res: 0, upd: 0;
       cdihx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdihc_info" {
     block_cdihc_info:
         const _cdihc;
         const 1;
         const 2186138353694;
         const SddB2_srt+1016;
 },
 _cdihv() //  [R1]
         { []
         }
     {offset
       cdihv: // global
           _sdddV::I64 = I64[Sp + 8];
           switch [0 .. 7] (%MO_UU_Conv_W32_W64(I32[I64[R1 - 1] + 20])) {
               case 0 : goto cdihI;
               case 1 : goto cdihR;
               case 2 : goto cdii0;
               case 3 : goto cdii9;
               case 4 : goto cdiii;
               case 5 : goto cdiir;
               case 6 : goto cdiiA;
               case 7 : goto cdiiJ;
           }
       cdiiJ: // global
           if (%MO_S_Gt_W64(_sdddV::I64, 8)) goto cdiiI; else goto cdiiH;
       cdiiH: // global
           R2 = _sdddV::I64;
           Sp = Sp + 16;
           call GHC.RTS.Flags.$fEnumDoHeapProfile_go_entry(R2) args: 8, res: 0, upd: 8;
       cdiiA: // global
           if (%MO_S_Gt_W64(_sdddV::I64, 7)) goto cdiiI; else goto cdiiy;
       cdiiy: // global
           R2 = _sdddV::I64;
           Sp = Sp + 16;
           call GHC.RTS.Flags.$fEnumDoHeapProfile_go1_entry(R2) args: 8, res: 0, upd: 8;
       cdiir: // global
           if (%MO_S_Gt_W64(_sdddV::I64, 6)) goto cdiiI; else goto cdiip;
       cdiip: // global
           R2 = _sdddV::I64;
           Sp = Sp + 16;
           call GHC.RTS.Flags.$fEnumDoHeapProfile_go2_entry(R2) args: 8, res: 0, upd: 8;
       cdiii: // global
           if (%MO_S_Gt_W64(_sdddV::I64, 5)) goto cdiiI; else goto cdiig;
       cdiig: // global
           R2 = _sdddV::I64;
           Sp = Sp + 16;
           call GHC.RTS.Flags.$fEnumDoHeapProfile_go3_entry(R2) args: 8, res: 0, upd: 8;
       cdii9: // global
           if (%MO_S_Gt_W64(_sdddV::I64, 4)) goto cdiiI; else goto cdii7;
       cdii7: // global
           R2 = _sdddV::I64;
           Sp = Sp + 16;
           call GHC.RTS.Flags.$fEnumDoHeapProfile_go4_entry(R2) args: 8, res: 0, upd: 8;
       cdii0: // global
           if (%MO_S_Gt_W64(_sdddV::I64, 2)) goto cdiiI; else goto cdihY;
       cdihY: // global
           R2 = _sdddV::I64;
           Sp = Sp + 16;
           call GHC.RTS.Flags.$fEnumDoHeapProfile_go5_entry(R2) args: 8, res: 0, upd: 8;
       cdihR: // global
           if (%MO_S_Gt_W64(_sdddV::I64, 1)) goto cdiiI; else goto cdihP;
       cdihP: // global
           R2 = _sdddV::I64;
           Sp = Sp + 16;
           call GHC.RTS.Flags.$fEnumDoHeapProfile_go6_entry(R2) args: 8, res: 0, upd: 8;
       cdihI: // global
           if (%MO_S_Gt_W64(_sdddV::I64, 0)) goto cdiiI; else goto cdihF;
       cdiiI: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdihF: // global
           R2 = _sdddV::I64;
           Sp = Sp + 16;
           call GHC.RTS.Flags.$fEnumDoHeapProfile_go7_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdihv_info" {
     block_cdihv_info:
         const _cdihv;
         const 65;
         const 2186138353694;
         const SddB2_srt+1016;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:30.263315017 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFromThen_closure" {
     GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFromThen_closure:
         const GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFromThen_info;
         const 0;
 },
 GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFromThen_entry() //  [R2,
                                                               R3]
         { []
         }
     {offset
       cdijV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdijW; else goto cdijX;
       cdijW: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFromThen_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdijX: // global
           I64[Sp - 16] = block_cdijI_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udilG; else goto cdijJ;
       udilG: // global
           call _cdijI(R1) args: 0, res: 0, upd: 0;
       cdijJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFromThen_info" {
     GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFromThen_info:
         const GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFromThen_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SddB2_srt+1096;
 },
 _cdijI() //  [R1]
         { []
         }
     {offset
       cdijI: // global
           _sdde7::P64 = P64[Sp + 8];
           switch [0 .. 7] (%MO_UU_Conv_W32_W64(I32[I64[R1 - 1] + 20])) {
               case 0 : goto cdijM;
               case 1 : goto cdijN;
               case 2 : goto cdijO;
               case 3 : goto cdijP;
               case 4 : goto cdijQ;
               case 5 : goto cdijR;
               case 6 : goto cdijS;
               case 7 : goto cdijT;
           }
       cdijT: // global
           _sdde9::I64 = 8;
           goto sdde8;
       cdijS: // global
           _sdde9::I64 = 7;
           goto sdde8;
       cdijR: // global
           _sdde9::I64 = 6;
           goto sdde8;
       cdijQ: // global
           _sdde9::I64 = 5;
           goto sdde8;
       cdijP: // global
           _sdde9::I64 = 4;
           goto sdde8;
       cdijO: // global
           _sdde9::I64 = 2;
           goto sdde8;
       cdijN: // global
           _sdde9::I64 = 1;
           goto sdde8;
       cdijM: // global
           _sdde9::I64 = 0;
           goto sdde8;
       sdde8: // global
           I64[Sp] = block_cdik1_info;
           R1 = _sdde7::P64;
           I64[Sp + 8] = _sdde9::I64;
           if (R1 & 7 != 0) goto udilF; else goto cdik3;
       udilF: // global
           call _cdik1(R1) args: 0, res: 0, upd: 0;
       cdik3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdijI_info" {
     block_cdijI_info:
         const _cdijI;
         const 1;
         const 4294967326;
         const SddB2_srt+1104;
 },
 _cdik1() //  [R1]
         { []
         }
     {offset
       cdik1: // global
           _sdde9::I64 = I64[Sp + 8];
           switch [0 .. 7] (%MO_UU_Conv_W32_W64(I32[I64[R1 - 1] + 20])) {
               case 0 : goto cdika;
               case 1 : goto cdikj;
               case 2 : goto cdiks;
               case 3 : goto cdikB;
               case 4 : goto cdikK;
               case 5 : goto cdikT;
               case 6 : goto cdil2;
               case 7 : goto cdilb;
           }
       cdilb: // global
           I64[Sp + 8] = block_cdil9_info;
           R3 = 8;
           R2 = _sdde9::I64;
           Sp = Sp + 8;
           call GHC.Enum.efdInt_entry(R3, R2) args: 8, res: 8, upd: 8;
       cdil2: // global
           I64[Sp + 8] = block_cdil0_info;
           R3 = 7;
           R2 = _sdde9::I64;
           Sp = Sp + 8;
           call GHC.Enum.efdInt_entry(R3, R2) args: 8, res: 8, upd: 8;
       cdikT: // global
           I64[Sp + 8] = block_cdikR_info;
           R3 = 6;
           R2 = _sdde9::I64;
           Sp = Sp + 8;
           call GHC.Enum.efdInt_entry(R3, R2) args: 8, res: 8, upd: 8;
       cdikK: // global
           I64[Sp + 8] = block_cdikI_info;
           R3 = 5;
           R2 = _sdde9::I64;
           Sp = Sp + 8;
           call GHC.Enum.efdInt_entry(R3, R2) args: 8, res: 8, upd: 8;
       cdikB: // global
           I64[Sp + 8] = block_cdikz_info;
           R3 = 4;
           R2 = _sdde9::I64;
           Sp = Sp + 8;
           call GHC.Enum.efdInt_entry(R3, R2) args: 8, res: 8, upd: 8;
       cdiks: // global
           I64[Sp + 8] = block_cdikq_info;
           R3 = 2;
           R2 = _sdde9::I64;
           Sp = Sp + 8;
           call GHC.Enum.efdInt_entry(R3, R2) args: 8, res: 8, upd: 8;
       cdikj: // global
           I64[Sp + 8] = block_cdikh_info;
           R3 = 1;
           R2 = _sdde9::I64;
           Sp = Sp + 8;
           call GHC.Enum.efdInt_entry(R3, R2) args: 8, res: 8, upd: 8;
       cdika: // global
           I64[Sp + 8] = block_cdik7_info;
           R3 = 0;
           R2 = _sdde9::I64;
           Sp = Sp + 8;
           call GHC.Enum.efdInt_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdik1_info" {
     block_cdik1_info:
         const _cdik1;
         const 65;
         const 4294967326;
         const SddB2_srt+1104;
 },
 _cdil9() //  [R1]
         { []
         }
     {offset
       cdil9: // global
           R3 = R1;
           R2 = GHC.RTS.Flags.$fEnumDoHeapProfile_$ctoEnum_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdil9_info" {
     block_cdil9_info:
         const _cdil9;
         const 0;
         const 4294967326;
         const SddB2_srt+1104;
 },
 _cdil0() //  [R1]
         { []
         }
     {offset
       cdil0: // global
           R3 = R1;
           R2 = GHC.RTS.Flags.$fEnumDoHeapProfile_$ctoEnum_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdil0_info" {
     block_cdil0_info:
         const _cdil0;
         const 0;
         const 4294967326;
         const SddB2_srt+1104;
 },
 _cdikR() //  [R1]
         { []
         }
     {offset
       cdikR: // global
           R3 = R1;
           R2 = GHC.RTS.Flags.$fEnumDoHeapProfile_$ctoEnum_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdikR_info" {
     block_cdikR_info:
         const _cdikR;
         const 0;
         const 4294967326;
         const SddB2_srt+1104;
 },
 _cdikI() //  [R1]
         { []
         }
     {offset
       cdikI: // global
           R3 = R1;
           R2 = GHC.RTS.Flags.$fEnumDoHeapProfile_$ctoEnum_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdikI_info" {
     block_cdikI_info:
         const _cdikI;
         const 0;
         const 4294967326;
         const SddB2_srt+1104;
 },
 _cdikz() //  [R1]
         { []
         }
     {offset
       cdikz: // global
           R3 = R1;
           R2 = GHC.RTS.Flags.$fEnumDoHeapProfile_$ctoEnum_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdikz_info" {
     block_cdikz_info:
         const _cdikz;
         const 0;
         const 4294967326;
         const SddB2_srt+1104;
 },
 _cdikq() //  [R1]
         { []
         }
     {offset
       cdikq: // global
           R3 = R1;
           R2 = GHC.RTS.Flags.$fEnumDoHeapProfile_$ctoEnum_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdikq_info" {
     block_cdikq_info:
         const _cdikq;
         const 0;
         const 4294967326;
         const SddB2_srt+1104;
 },
 _cdikh() //  [R1]
         { []
         }
     {offset
       cdikh: // global
           R3 = R1;
           R2 = GHC.RTS.Flags.$fEnumDoHeapProfile_$ctoEnum_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdikh_info" {
     block_cdikh_info:
         const _cdikh;
         const 0;
         const 4294967326;
         const SddB2_srt+1104;
 },
 _cdik7() //  [R1]
         { []
         }
     {offset
       cdik7: // global
           R3 = R1;
           R2 = GHC.RTS.Flags.$fEnumDoHeapProfile_$ctoEnum_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdik7_info" {
     block_cdik7_info:
         const _cdik7;
         const 0;
         const 4294967326;
         const SddB2_srt+1104;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:30.285867773 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoHeapProfile_go8_closure" {
     GHC.RTS.Flags.$fEnumDoHeapProfile_go8_closure:
         const GHC.RTS.Flags.$fEnumDoHeapProfile_go8_info;
         const 0;
 },
 sat_sddeo_entry() //  [R1]
         { []
         }
     {offset
       cdimO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdimP; else goto cdimQ;
       cdimP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdimQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddem::I64 = I64[R1 + 16];
           if (_sddem::I64 != 9223372036854775807) goto cdimM; else goto cdimN;
       cdimM: // global
           R2 = _sddem::I64 + 1;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumDoHeapProfile_go8_entry(R2) args: 24, res: 0, upd: 24;
       cdimN: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddeo_info" {
     sat_sddeo_info:
         const sat_sddeo_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1112;
 },
 sat_sddel_entry() //  [R1]
         { []
         }
     {offset
       cdimX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdimY; else goto cdimZ;
       cdimY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdimZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddel_info" {
     sat_sddel_info:
         const sat_sddel_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1024;
 },
 GHC.RTS.Flags.$fEnumDoHeapProfile_go8_entry() //  [R2]
         { []
         }
     {offset
       cdin1: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdin5; else goto cdin4;
       cdin5: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoHeapProfile_go8_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdin4: // global
           I64[Hp - 64] = sat_sddeo_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sddel_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoHeapProfile_go8_info" {
     GHC.RTS.Flags.$fEnumDoHeapProfile_go8_info:
         const GHC.RTS.Flags.$fEnumDoHeapProfile_go8_entry;
         const 0;
         const 8800387989518;
         const 4294967300;
         const SddB2_srt+1024;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:30.298153894 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoHeapProfile8_closure" {
     GHC.RTS.Flags.$fEnumDoHeapProfile8_closure:
         const GHC.RTS.Flags.$fEnumDoHeapProfile8_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fEnumDoHeapProfile8_entry() //  [R1]
         { []
         }
     {offset
       cdinz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdinA; else goto cdinB;
       cdinA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdinB: // global
           (_cdinw::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdinw::I64 == 0) goto cdiny; else goto cdinx;
       cdiny: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdinx: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdinw::I64;
           R2 = 0;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumDoHeapProfile_go8_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoHeapProfile8_info" {
     GHC.RTS.Flags.$fEnumDoHeapProfile8_info:
         const GHC.RTS.Flags.$fEnumDoHeapProfile8_entry;
         const 0;
         const 4294967317;
         const SddB2_srt+1112;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:30.302783351 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoHeapProfile7_closure" {
     GHC.RTS.Flags.$fEnumDoHeapProfile7_closure:
         const GHC.RTS.Flags.$fEnumDoHeapProfile7_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fEnumDoHeapProfile7_entry() //  [R1]
         { []
         }
     {offset
       cdinQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdinR; else goto cdinS;
       cdinR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdinS: // global
           (_cdinN::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdinN::I64 == 0) goto cdinP; else goto cdinO;
       cdinP: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdinO: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdinN::I64;
           R2 = 1;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumDoHeapProfile_go8_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoHeapProfile7_info" {
     GHC.RTS.Flags.$fEnumDoHeapProfile7_info:
         const GHC.RTS.Flags.$fEnumDoHeapProfile7_entry;
         const 0;
         const 4294967317;
         const SddB2_srt+1112;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:30.307401488 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoHeapProfile6_closure" {
     GHC.RTS.Flags.$fEnumDoHeapProfile6_closure:
         const GHC.RTS.Flags.$fEnumDoHeapProfile6_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fEnumDoHeapProfile6_entry() //  [R1]
         { []
         }
     {offset
       cdio7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdio8; else goto cdio9;
       cdio8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdio9: // global
           (_cdio4::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdio4::I64 == 0) goto cdio6; else goto cdio5;
       cdio6: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdio5: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdio4::I64;
           R2 = 2;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumDoHeapProfile_go8_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoHeapProfile6_info" {
     GHC.RTS.Flags.$fEnumDoHeapProfile6_info:
         const GHC.RTS.Flags.$fEnumDoHeapProfile6_entry;
         const 0;
         const 4294967317;
         const SddB2_srt+1112;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:30.312012591 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoHeapProfile5_closure" {
     GHC.RTS.Flags.$fEnumDoHeapProfile5_closure:
         const GHC.RTS.Flags.$fEnumDoHeapProfile5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fEnumDoHeapProfile5_entry() //  [R1]
         { []
         }
     {offset
       cdioo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdiop; else goto cdioq;
       cdiop: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdioq: // global
           (_cdiol::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdiol::I64 == 0) goto cdion; else goto cdiom;
       cdion: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdiom: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdiol::I64;
           R2 = 4;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumDoHeapProfile_go8_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoHeapProfile5_info" {
     GHC.RTS.Flags.$fEnumDoHeapProfile5_info:
         const GHC.RTS.Flags.$fEnumDoHeapProfile5_entry;
         const 0;
         const 4294967317;
         const SddB2_srt+1112;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:30.317637475 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoHeapProfile4_closure" {
     GHC.RTS.Flags.$fEnumDoHeapProfile4_closure:
         const GHC.RTS.Flags.$fEnumDoHeapProfile4_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fEnumDoHeapProfile4_entry() //  [R1]
         { []
         }
     {offset
       cdioF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdioG; else goto cdioH;
       cdioG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdioH: // global
           (_cdioC::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdioC::I64 == 0) goto cdioE; else goto cdioD;
       cdioE: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdioD: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdioC::I64;
           R2 = 5;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumDoHeapProfile_go8_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoHeapProfile4_info" {
     GHC.RTS.Flags.$fEnumDoHeapProfile4_info:
         const GHC.RTS.Flags.$fEnumDoHeapProfile4_entry;
         const 0;
         const 4294967317;
         const SddB2_srt+1112;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:30.322296477 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoHeapProfile3_closure" {
     GHC.RTS.Flags.$fEnumDoHeapProfile3_closure:
         const GHC.RTS.Flags.$fEnumDoHeapProfile3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fEnumDoHeapProfile3_entry() //  [R1]
         { []
         }
     {offset
       cdioW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdioX; else goto cdioY;
       cdioX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdioY: // global
           (_cdioT::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdioT::I64 == 0) goto cdioV; else goto cdioU;
       cdioV: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdioU: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdioT::I64;
           R2 = 6;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumDoHeapProfile_go8_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoHeapProfile3_info" {
     GHC.RTS.Flags.$fEnumDoHeapProfile3_info:
         const GHC.RTS.Flags.$fEnumDoHeapProfile3_entry;
         const 0;
         const 4294967317;
         const SddB2_srt+1112;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:30.326837324 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoHeapProfile2_closure" {
     GHC.RTS.Flags.$fEnumDoHeapProfile2_closure:
         const GHC.RTS.Flags.$fEnumDoHeapProfile2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fEnumDoHeapProfile2_entry() //  [R1]
         { []
         }
     {offset
       cdipd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdipe; else goto cdipf;
       cdipe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdipf: // global
           (_cdipa::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdipa::I64 == 0) goto cdipc; else goto cdipb;
       cdipc: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdipb: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdipa::I64;
           R2 = 7;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumDoHeapProfile_go8_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoHeapProfile2_info" {
     GHC.RTS.Flags.$fEnumDoHeapProfile2_info:
         const GHC.RTS.Flags.$fEnumDoHeapProfile2_entry;
         const 0;
         const 4294967317;
         const SddB2_srt+1112;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:30.331755897 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoHeapProfile1_closure" {
     GHC.RTS.Flags.$fEnumDoHeapProfile1_closure:
         const GHC.RTS.Flags.$fEnumDoHeapProfile1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fEnumDoHeapProfile1_entry() //  [R1]
         { []
         }
     {offset
       cdipu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdipv; else goto cdipw;
       cdipv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdipw: // global
           (_cdipr::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdipr::I64 == 0) goto cdipt; else goto cdips;
       cdipt: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdips: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdipr::I64;
           R2 = 8;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumDoHeapProfile_go8_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoHeapProfile1_info" {
     GHC.RTS.Flags.$fEnumDoHeapProfile1_info:
         const GHC.RTS.Flags.$fEnumDoHeapProfile1_entry;
         const 0;
         const 4294967317;
         const SddB2_srt+1112;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:30.336581793 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFrom_closure" {
     GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFrom_closure:
         const GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFrom_info;
         const 0;
 },
 GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFrom_entry() //  [R2]
         { []
         }
     {offset
       cdipW: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdipX; else goto cdipY;
       cdipX: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFrom_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdipY: // global
           I64[Sp - 8] = block_cdipJ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udiqn; else goto cdipK;
       udiqn: // global
           call _cdipJ(R1) args: 0, res: 0, upd: 0;
       cdipK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFrom_info" {
     GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFrom_info:
         const GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFrom_entry;
         const 0;
         const 2194728288270;
         const 4294967301;
         const SddB2_srt+1120;
 },
 _cdipJ() //  [R1]
         { []
         }
     {offset
       cdipJ: // global
           switch [0 .. 7] (%MO_UU_Conv_W32_W64(I32[I64[R1 - 1] + 20])) {
               case 0 : goto cdipN;
               case 1 : goto cdipO;
               case 2 : goto cdipP;
               case 3 : goto cdipQ;
               case 4 : goto cdipR;
               case 5 : goto cdipS;
               case 6 : goto cdipT;
               case 7 : goto cdipU;
           }
       cdipU: // global
           R1 = GHC.RTS.Flags.$fEnumDoHeapProfile1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cdipT: // global
           R1 = GHC.RTS.Flags.$fEnumDoHeapProfile2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cdipS: // global
           R1 = GHC.RTS.Flags.$fEnumDoHeapProfile3_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cdipR: // global
           R1 = GHC.RTS.Flags.$fEnumDoHeapProfile4_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cdipQ: // global
           R1 = GHC.RTS.Flags.$fEnumDoHeapProfile5_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cdipP: // global
           R1 = GHC.RTS.Flags.$fEnumDoHeapProfile6_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cdipO: // global
           R1 = GHC.RTS.Flags.$fEnumDoHeapProfile7_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cdipN: // global
           R1 = GHC.RTS.Flags.$fEnumDoHeapProfile8_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdipJ_info" {
     block_cdipJ_info:
         const _cdipJ;
         const 0;
         const 1095216660510;
         const SddB2_srt+1128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:30.34296974 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoHeapProfile14_closure" {
     GHC.RTS.Flags.$fEnumDoHeapProfile14_closure:
         const GHC.RTS.Flags.$fEnumDoHeapProfile14_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fEnumDoHeapProfile14_entry() //  [R1]
         { []
         }
     {offset
       cdiqR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdiqS; else goto cdiqT;
       cdiqS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdiqT: // global
           (_cdiqO::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdiqO::I64 == 0) goto cdiqQ; else goto cdiqP;
       cdiqQ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdiqP: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdiqO::I64;
           R2 = (-1);
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoHeapProfile14_info" {
     GHC.RTS.Flags.$fEnumDoHeapProfile14_info:
         const GHC.RTS.Flags.$fEnumDoHeapProfile14_entry;
         const 0;
         const 4294967317;
         const SddB2_srt+984;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:30.347782454 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoHeapProfile_$cpred_closure" {
     GHC.RTS.Flags.$fEnumDoHeapProfile_$cpred_closure:
         const GHC.RTS.Flags.$fEnumDoHeapProfile_$cpred_info;
         const 0;
 },
 GHC.RTS.Flags.$fEnumDoHeapProfile_$cpred_entry() //  [R2]
         { []
         }
     {offset
       cdirj: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdirk; else goto cdirl;
       cdirk: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoHeapProfile_$cpred_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdirl: // global
           I64[Sp - 8] = block_cdir6_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udirK; else goto cdir7;
       udirK: // global
           call _cdir6(R1) args: 0, res: 0, upd: 0;
       cdir7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoHeapProfile_$cpred_info" {
     GHC.RTS.Flags.$fEnumDoHeapProfile_$cpred_info:
         const GHC.RTS.Flags.$fEnumDoHeapProfile_$cpred_entry;
         const 0;
         const 432345568522534926;
         const 4294967301;
         const SddB2_srt+992;
 },
 _cdir6() //  [R1]
         { []
         }
     {offset
       cdir6: // global
           switch [0 .. 7] (%MO_UU_Conv_W32_W64(I32[I64[R1 - 1] + 20])) {
               case 0 : goto cdira;
               case 1 : goto cdirb;
               case 2 : goto cdirc;
               case 3 : goto cdird;
               case 4 : goto cdire;
               case 5 : goto cdirf;
               case 6 : goto cdirg;
               case 7 : goto cdirh;
           }
       cdirh: // global
           R1 = GHC.RTS.Flags.HeapByLDV_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdirg: // global
           R1 = GHC.RTS.Flags.HeapByRetainer_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdirf: // global
           R1 = GHC.RTS.Flags.HeapByType_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdire: // global
           R1 = GHC.RTS.Flags.HeapByDescr_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdird: // global
           R1 = GHC.RTS.Flags.$fEnumDoHeapProfile13_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cdirc: // global
           R1 = GHC.RTS.Flags.HeapByCCS_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdirb: // global
           R1 = GHC.RTS.Flags.NoHeapProfiling_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdira: // global
           R1 = GHC.RTS.Flags.$fEnumDoHeapProfile14_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdir6_info" {
     block_cdir6_info:
         const _cdir6;
         const 0;
         const 288230380446679070;
         const SddB2_srt+992;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:30.418974584 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFromThenTo_closure" {
     GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFromThenTo_closure:
         const GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFromThenTo_info;
         const 0;
 },
 sat_sddeL_entry() //  [R1]
         { []
         }
     {offset
       cdisV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdisW; else goto cdisX;
       cdisW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdisX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_sddeG_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddeL_info" {
     sat_sddeL_info:
         const sat_sddeL_entry;
         const 8589934593;
         const 4294967311;
         const SddB2_srt+1024;
 },
 sat_sddeJ_entry() //  [R1]
         { []
         }
     {offset
       cdit2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdit3; else goto cdit4;
       cdit3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdit4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddeJ_info" {
     sat_sddeJ_info:
         const sat_sddeJ_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1024;
 },
 sat_sddeM_entry() //  [R1]
         { []
         }
     {offset
       cdita: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cditb; else goto cditc;
       cditb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cditc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddeM_info" {
     sat_sddeM_info:
         const sat_sddeM_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1024;
 },
 go_dn_sddeG_entry() //  [R1, R2]
         { []
         }
     {offset
       cditg: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cditk; else goto cditj;
       cditk: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cditj: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto cdite; else goto cditf;
       cdite: // global
           _sddeE::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_sddeL_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _sddeE::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sddeJ_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cditf: // global
           I64[Hp - 80] = sat_sddeM_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _cditm::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _cditm::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_sddeG_info" {
     go_dn_sddeG_info:
         const go_dn_sddeG_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const SddB2_srt+1024;
 },
 sat_sddeN_entry() //  [R1]
         { []
         }
     {offset
       cditn: // global
           _sddeN::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdito; else goto cditp;
       cditp: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cditr; else goto cditq;
       cditr: // global
           HpAlloc = 24;
           goto cdito;
       cdito: // global
           R1 = _sddeN::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cditq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sddeN::P64;
           _sddez::I64 = I64[_sddeN::P64 + 24];
           _sddeE::I64 = _sddez::I64 - I64[_sddeN::P64 + 16];
           I64[Hp - 16] = go_dn_sddeG_info;
           I64[Hp - 8] = _sddeE::I64;
           I64[Hp] = 0 - _sddeE::I64;
           R2 = _sddez::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_sddeG_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddeN_info" {
     sat_sddeN_info:
         const sat_sddeN_entry;
         const 8589934592;
         const 4294967316;
         const SddB2_srt+1024;
 },
 sat_sddeD_entry() //  [R1]
         { []
         }
     {offset
       cditw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cditx; else goto cdity;
       cditx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdity: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddeD_info" {
     sat_sddeD_info:
         const sat_sddeD_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1024;
 },
 sat_sddeP_entry() //  [R1]
         { []
         }
     {offset
       cditH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cditI; else goto cditJ;
       cditI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cditJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddeP_info" {
     sat_sddeP_info:
         const sat_sddeP_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1024;
 },
 sat_sddeZ_entry() //  [R1]
         { []
         }
     {offset
       cdiuc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdiud; else goto cdiue;
       cdiud: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdiue: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_sddeU_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddeZ_info" {
     sat_sddeZ_info:
         const sat_sddeZ_entry;
         const 8589934593;
         const 4294967311;
         const SddB2_srt+1024;
 },
 sat_sddeX_entry() //  [R1]
         { []
         }
     {offset
       cdiuj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdiuk; else goto cdiul;
       cdiuk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdiul: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddeX_info" {
     sat_sddeX_info:
         const sat_sddeX_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1024;
 },
 sat_sddf0_entry() //  [R1]
         { []
         }
     {offset
       cdiur: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdius; else goto cdiut;
       cdius: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdiut: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddf0_info" {
     sat_sddf0_info:
         const sat_sddf0_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1024;
 },
 go_up_sddeU_entry() //  [R1, R2]
         { []
         }
     {offset
       cdiux: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdiuB; else goto cdiuA;
       cdiuB: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdiuA: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto cdiuv; else goto cdiuw;
       cdiuv: // global
           _sddeS::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_sddeZ_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _sddeS::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sddeX_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdiuw: // global
           I64[Hp - 80] = sat_sddf0_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _cdiuD::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _cdiuD::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_sddeU_info" {
     go_up_sddeU_info:
         const go_up_sddeU_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const SddB2_srt+1024;
 },
 sat_sddf1_entry() //  [R1]
         { []
         }
     {offset
       cdiuE: // global
           _sddf1::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdiuF; else goto cdiuG;
       cdiuG: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdiuI; else goto cdiuH;
       cdiuI: // global
           HpAlloc = 24;
           goto cdiuF;
       cdiuF: // global
           R1 = _sddf1::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdiuH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sddf1::P64;
           _sddez::I64 = I64[_sddf1::P64 + 24];
           _sddeS::I64 = _sddez::I64 - I64[_sddf1::P64 + 16];
           I64[Hp - 16] = go_up_sddeU_info;
           I64[Hp - 8] = _sddeS::I64;
           I64[Hp] = 0 - _sddeS::I64;
           R2 = _sddez::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_sddeU_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddf1_info" {
     sat_sddf1_info:
         const sat_sddf1_entry;
         const 8589934592;
         const 4294967316;
         const SddB2_srt+1024;
 },
 sat_sddeR_entry() //  [R1]
         { []
         }
     {offset
       cdiuN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdiuO; else goto cdiuP;
       cdiuO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdiuP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddeR_info" {
     sat_sddeR_info:
         const sat_sddeR_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1024;
 },
 sat_sddf3_entry() //  [R1]
         { []
         }
     {offset
       cdiuY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdiuZ; else goto cdiv0;
       cdiuZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdiv0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddf3_info" {
     sat_sddf3_info:
         const sat_sddf3_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1024;
 },
 sat_sddfe_entry() //  [R1]
         { []
         }
     {offset
       cdivx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdivy; else goto cdivz;
       cdivy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdivz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_sddf9_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddfe_info" {
     sat_sddfe_info:
         const sat_sddfe_entry;
         const 8589934593;
         const 4294967311;
         const SddB2_srt+1024;
 },
 sat_sddfc_entry() //  [R1]
         { []
         }
     {offset
       cdivE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdivF; else goto cdivG;
       cdivF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdivG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddfc_info" {
     sat_sddfc_info:
         const sat_sddfc_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1024;
 },
 sat_sddff_entry() //  [R1]
         { []
         }
     {offset
       cdivM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdivN; else goto cdivO;
       cdivN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdivO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddff_info" {
     sat_sddff_info:
         const sat_sddff_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1024;
 },
 go_dn_sddf9_entry() //  [R1, R2]
         { []
         }
     {offset
       cdivS: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdivW; else goto cdivV;
       cdivW: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdivV: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto cdivQ; else goto cdivR;
       cdivQ: // global
           _sddf7::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_sddfe_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _sddf7::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sddfc_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdivR: // global
           I64[Hp - 80] = sat_sddff_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _cdivY::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _cdivY::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_sddf9_info" {
     go_dn_sddf9_info:
         const go_dn_sddf9_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const SddB2_srt+1024;
 },
 sat_sddfg_entry() //  [R1]
         { []
         }
     {offset
       cdivZ: // global
           _sddfg::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdiw0; else goto cdiw1;
       cdiw1: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdiw3; else goto cdiw2;
       cdiw3: // global
           HpAlloc = 24;
           goto cdiw0;
       cdiw0: // global
           R1 = _sddfg::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdiw2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sddfg::P64;
           _sddez::I64 = I64[_sddfg::P64 + 24];
           _sddf7::I64 = _sddez::I64 - I64[_sddfg::P64 + 16];
           I64[Hp - 16] = go_dn_sddf9_info;
           I64[Hp - 8] = _sddf7::I64;
           I64[Hp] = 1 - _sddf7::I64;
           R2 = _sddez::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_sddf9_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddfg_info" {
     sat_sddfg_info:
         const sat_sddfg_entry;
         const 8589934592;
         const 4294967316;
         const SddB2_srt+1024;
 },
 sat_sddf6_entry() //  [R1]
         { []
         }
     {offset
       cdiw8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdiw9; else goto cdiwa;
       cdiw9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdiwa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddf6_info" {
     sat_sddf6_info:
         const sat_sddf6_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1024;
 },
 sat_sddfi_entry() //  [R1]
         { []
         }
     {offset
       cdiwj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdiwk; else goto cdiwl;
       cdiwk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdiwl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddfi_info" {
     sat_sddfi_info:
         const sat_sddfi_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1024;
 },
 sat_sddfs_entry() //  [R1]
         { []
         }
     {offset
       cdiwO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdiwP; else goto cdiwQ;
       cdiwP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdiwQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_sddfn_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddfs_info" {
     sat_sddfs_info:
         const sat_sddfs_entry;
         const 8589934593;
         const 4294967311;
         const SddB2_srt+1024;
 },
 sat_sddfq_entry() //  [R1]
         { []
         }
     {offset
       cdiwV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdiwW; else goto cdiwX;
       cdiwW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdiwX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddfq_info" {
     sat_sddfq_info:
         const sat_sddfq_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1024;
 },
 sat_sddft_entry() //  [R1]
         { []
         }
     {offset
       cdix3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdix4; else goto cdix5;
       cdix4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdix5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddft_info" {
     sat_sddft_info:
         const sat_sddft_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1024;
 },
 go_up_sddfn_entry() //  [R1, R2]
         { []
         }
     {offset
       cdix9: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdixd; else goto cdixc;
       cdixd: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdixc: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto cdix7; else goto cdix8;
       cdix7: // global
           _sddfl::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_sddfs_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _sddfl::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sddfq_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdix8: // global
           I64[Hp - 80] = sat_sddft_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _cdixf::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _cdixf::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_sddfn_info" {
     go_up_sddfn_info:
         const go_up_sddfn_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const SddB2_srt+1024;
 },
 sat_sddfu_entry() //  [R1]
         { []
         }
     {offset
       cdixg: // global
           _sddfu::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdixh; else goto cdixi;
       cdixi: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdixk; else goto cdixj;
       cdixk: // global
           HpAlloc = 24;
           goto cdixh;
       cdixh: // global
           R1 = _sddfu::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdixj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sddfu::P64;
           _sddez::I64 = I64[_sddfu::P64 + 24];
           _sddfl::I64 = _sddez::I64 - I64[_sddfu::P64 + 16];
           I64[Hp - 16] = go_up_sddfn_info;
           I64[Hp - 8] = _sddfl::I64;
           I64[Hp] = 1 - _sddfl::I64;
           R2 = _sddez::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_sddfn_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddfu_info" {
     sat_sddfu_info:
         const sat_sddfu_entry;
         const 8589934592;
         const 4294967316;
         const SddB2_srt+1024;
 },
 sat_sddfk_entry() //  [R1]
         { []
         }
     {offset
       cdixp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdixq; else goto cdixr;
       cdixq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdixr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddfk_info" {
     sat_sddfk_info:
         const sat_sddfk_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1024;
 },
 sat_sddfw_entry() //  [R1]
         { []
         }
     {offset
       cdixA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdixB; else goto cdixC;
       cdixB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdixC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddfw_info" {
     sat_sddfw_info:
         const sat_sddfw_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1024;
 },
 sat_sddfH_entry() //  [R1]
         { []
         }
     {offset
       cdiy9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdiya; else goto cdiyb;
       cdiya: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdiyb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_sddfC_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddfH_info" {
     sat_sddfH_info:
         const sat_sddfH_entry;
         const 8589934593;
         const 4294967311;
         const SddB2_srt+1024;
 },
 sat_sddfF_entry() //  [R1]
         { []
         }
     {offset
       cdiyg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdiyh; else goto cdiyi;
       cdiyh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdiyi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddfF_info" {
     sat_sddfF_info:
         const sat_sddfF_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1024;
 },
 sat_sddfI_entry() //  [R1]
         { []
         }
     {offset
       cdiyo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdiyp; else goto cdiyq;
       cdiyp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdiyq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddfI_info" {
     sat_sddfI_info:
         const sat_sddfI_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1024;
 },
 go_dn_sddfC_entry() //  [R1, R2]
         { []
         }
     {offset
       cdiyu: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdiyy; else goto cdiyx;
       cdiyy: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdiyx: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto cdiys; else goto cdiyt;
       cdiys: // global
           _sddfA::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_sddfH_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _sddfA::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sddfF_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdiyt: // global
           I64[Hp - 80] = sat_sddfI_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _cdiyA::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _cdiyA::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_sddfC_info" {
     go_dn_sddfC_info:
         const go_dn_sddfC_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const SddB2_srt+1024;
 },
 sat_sddfJ_entry() //  [R1]
         { []
         }
     {offset
       cdiyB: // global
           _sddfJ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdiyC; else goto cdiyD;
       cdiyD: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdiyF; else goto cdiyE;
       cdiyF: // global
           HpAlloc = 24;
           goto cdiyC;
       cdiyC: // global
           R1 = _sddfJ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdiyE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sddfJ::P64;
           _sddez::I64 = I64[_sddfJ::P64 + 24];
           _sddfA::I64 = _sddez::I64 - I64[_sddfJ::P64 + 16];
           I64[Hp - 16] = go_dn_sddfC_info;
           I64[Hp - 8] = _sddfA::I64;
           I64[Hp] = 2 - _sddfA::I64;
           R2 = _sddez::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_sddfC_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddfJ_info" {
     sat_sddfJ_info:
         const sat_sddfJ_entry;
         const 8589934592;
         const 4294967316;
         const SddB2_srt+1024;
 },
 sat_sddfz_entry() //  [R1]
         { []
         }
     {offset
       cdiyK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdiyL; else goto cdiyM;
       cdiyL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdiyM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddfz_info" {
     sat_sddfz_info:
         const sat_sddfz_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1024;
 },
 sat_sddfL_entry() //  [R1]
         { []
         }
     {offset
       cdiyV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdiyW; else goto cdiyX;
       cdiyW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdiyX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddfL_info" {
     sat_sddfL_info:
         const sat_sddfL_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1024;
 },
 sat_sddfV_entry() //  [R1]
         { []
         }
     {offset
       cdizq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdizr; else goto cdizs;
       cdizr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdizs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_sddfQ_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddfV_info" {
     sat_sddfV_info:
         const sat_sddfV_entry;
         const 8589934593;
         const 4294967311;
         const SddB2_srt+1024;
 },
 sat_sddfT_entry() //  [R1]
         { []
         }
     {offset
       cdizx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdizy; else goto cdizz;
       cdizy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdizz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddfT_info" {
     sat_sddfT_info:
         const sat_sddfT_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1024;
 },
 sat_sddfW_entry() //  [R1]
         { []
         }
     {offset
       cdizF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdizG; else goto cdizH;
       cdizG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdizH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddfW_info" {
     sat_sddfW_info:
         const sat_sddfW_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1024;
 },
 go_up_sddfQ_entry() //  [R1, R2]
         { []
         }
     {offset
       cdizL: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdizP; else goto cdizO;
       cdizP: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdizO: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto cdizJ; else goto cdizK;
       cdizJ: // global
           _sddfO::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_sddfV_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _sddfO::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sddfT_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdizK: // global
           I64[Hp - 80] = sat_sddfW_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _cdizR::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _cdizR::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_sddfQ_info" {
     go_up_sddfQ_info:
         const go_up_sddfQ_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const SddB2_srt+1024;
 },
 sat_sddfX_entry() //  [R1]
         { []
         }
     {offset
       cdizS: // global
           _sddfX::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdizT; else goto cdizU;
       cdizU: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdizW; else goto cdizV;
       cdizW: // global
           HpAlloc = 24;
           goto cdizT;
       cdizT: // global
           R1 = _sddfX::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdizV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sddfX::P64;
           _sddez::I64 = I64[_sddfX::P64 + 24];
           _sddfO::I64 = _sddez::I64 - I64[_sddfX::P64 + 16];
           I64[Hp - 16] = go_up_sddfQ_info;
           I64[Hp - 8] = _sddfO::I64;
           I64[Hp] = 2 - _sddfO::I64;
           R2 = _sddez::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_sddfQ_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddfX_info" {
     sat_sddfX_info:
         const sat_sddfX_entry;
         const 8589934592;
         const 4294967316;
         const SddB2_srt+1024;
 },
 sat_sddfN_entry() //  [R1]
         { []
         }
     {offset
       cdiA1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdiA2; else goto cdiA3;
       cdiA2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdiA3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddfN_info" {
     sat_sddfN_info:
         const sat_sddfN_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1024;
 },
 sat_sddfZ_entry() //  [R1]
         { []
         }
     {offset
       cdiAc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdiAd; else goto cdiAe;
       cdiAd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdiAe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddfZ_info" {
     sat_sddfZ_info:
         const sat_sddfZ_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1024;
 },
 sat_sddga_entry() //  [R1]
         { []
         }
     {offset
       cdiAL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdiAM; else goto cdiAN;
       cdiAM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdiAN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_sddg5_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddga_info" {
     sat_sddga_info:
         const sat_sddga_entry;
         const 8589934593;
         const 4294967311;
         const SddB2_srt+1024;
 },
 sat_sddg8_entry() //  [R1]
         { []
         }
     {offset
       cdiAS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdiAT; else goto cdiAU;
       cdiAT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdiAU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddg8_info" {
     sat_sddg8_info:
         const sat_sddg8_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1024;
 },
 sat_sddgb_entry() //  [R1]
         { []
         }
     {offset
       cdiB0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdiB1; else goto cdiB2;
       cdiB1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdiB2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddgb_info" {
     sat_sddgb_info:
         const sat_sddgb_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1024;
 },
 go_dn_sddg5_entry() //  [R1, R2]
         { []
         }
     {offset
       cdiB6: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdiBa; else goto cdiB9;
       cdiBa: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdiB9: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto cdiB4; else goto cdiB5;
       cdiB4: // global
           _sddg3::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_sddga_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _sddg3::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sddg8_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdiB5: // global
           I64[Hp - 80] = sat_sddgb_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _cdiBc::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _cdiBc::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_sddg5_info" {
     go_dn_sddg5_info:
         const go_dn_sddg5_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const SddB2_srt+1024;
 },
 sat_sddgc_entry() //  [R1]
         { []
         }
     {offset
       cdiBd: // global
           _sddgc::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdiBe; else goto cdiBf;
       cdiBf: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdiBh; else goto cdiBg;
       cdiBh: // global
           HpAlloc = 24;
           goto cdiBe;
       cdiBe: // global
           R1 = _sddgc::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdiBg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sddgc::P64;
           _sddez::I64 = I64[_sddgc::P64 + 24];
           _sddg3::I64 = _sddez::I64 - I64[_sddgc::P64 + 16];
           I64[Hp - 16] = go_dn_sddg5_info;
           I64[Hp - 8] = _sddg3::I64;
           I64[Hp] = 4 - _sddg3::I64;
           R2 = _sddez::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_sddg5_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddgc_info" {
     sat_sddgc_info:
         const sat_sddgc_entry;
         const 8589934592;
         const 4294967316;
         const SddB2_srt+1024;
 },
 sat_sddg2_entry() //  [R1]
         { []
         }
     {offset
       cdiBm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdiBn; else goto cdiBo;
       cdiBn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdiBo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddg2_info" {
     sat_sddg2_info:
         const sat_sddg2_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1024;
 },
 sat_sddge_entry() //  [R1]
         { []
         }
     {offset
       cdiBx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdiBy; else goto cdiBz;
       cdiBy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdiBz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddge_info" {
     sat_sddge_info:
         const sat_sddge_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1024;
 },
 sat_sddgo_entry() //  [R1]
         { []
         }
     {offset
       cdiC2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdiC3; else goto cdiC4;
       cdiC3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdiC4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_sddgj_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddgo_info" {
     sat_sddgo_info:
         const sat_sddgo_entry;
         const 8589934593;
         const 4294967311;
         const SddB2_srt+1024;
 },
 sat_sddgm_entry() //  [R1]
         { []
         }
     {offset
       cdiC9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdiCa; else goto cdiCb;
       cdiCa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdiCb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddgm_info" {
     sat_sddgm_info:
         const sat_sddgm_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1024;
 },
 sat_sddgp_entry() //  [R1]
         { []
         }
     {offset
       cdiCh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdiCi; else goto cdiCj;
       cdiCi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdiCj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddgp_info" {
     sat_sddgp_info:
         const sat_sddgp_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1024;
 },
 go_up_sddgj_entry() //  [R1, R2]
         { []
         }
     {offset
       cdiCn: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdiCr; else goto cdiCq;
       cdiCr: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdiCq: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto cdiCl; else goto cdiCm;
       cdiCl: // global
           _sddgh::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_sddgo_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _sddgh::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sddgm_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdiCm: // global
           I64[Hp - 80] = sat_sddgp_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _cdiCt::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _cdiCt::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_sddgj_info" {
     go_up_sddgj_info:
         const go_up_sddgj_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const SddB2_srt+1024;
 },
 sat_sddgq_entry() //  [R1]
         { []
         }
     {offset
       cdiCu: // global
           _sddgq::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdiCv; else goto cdiCw;
       cdiCw: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdiCy; else goto cdiCx;
       cdiCy: // global
           HpAlloc = 24;
           goto cdiCv;
       cdiCv: // global
           R1 = _sddgq::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdiCx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sddgq::P64;
           _sddez::I64 = I64[_sddgq::P64 + 24];
           _sddgh::I64 = _sddez::I64 - I64[_sddgq::P64 + 16];
           I64[Hp - 16] = go_up_sddgj_info;
           I64[Hp - 8] = _sddgh::I64;
           I64[Hp] = 4 - _sddgh::I64;
           R2 = _sddez::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_sddgj_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddgq_info" {
     sat_sddgq_info:
         const sat_sddgq_entry;
         const 8589934592;
         const 4294967316;
         const SddB2_srt+1024;
 },
 sat_sddgg_entry() //  [R1]
         { []
         }
     {offset
       cdiCD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdiCE; else goto cdiCF;
       cdiCE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdiCF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddgg_info" {
     sat_sddgg_info:
         const sat_sddgg_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1024;
 },
 sat_sddgs_entry() //  [R1]
         { []
         }
     {offset
       cdiCO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdiCP; else goto cdiCQ;
       cdiCP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdiCQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddgs_info" {
     sat_sddgs_info:
         const sat_sddgs_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1024;
 },
 sat_sddgD_entry() //  [R1]
         { []
         }
     {offset
       cdiDn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdiDo; else goto cdiDp;
       cdiDo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdiDp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_sddgy_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddgD_info" {
     sat_sddgD_info:
         const sat_sddgD_entry;
         const 8589934593;
         const 4294967311;
         const SddB2_srt+1024;
 },
 sat_sddgB_entry() //  [R1]
         { []
         }
     {offset
       cdiDu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdiDv; else goto cdiDw;
       cdiDv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdiDw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddgB_info" {
     sat_sddgB_info:
         const sat_sddgB_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1024;
 },
 sat_sddgE_entry() //  [R1]
         { []
         }
     {offset
       cdiDC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdiDD; else goto cdiDE;
       cdiDD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdiDE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddgE_info" {
     sat_sddgE_info:
         const sat_sddgE_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1024;
 },
 go_dn_sddgy_entry() //  [R1, R2]
         { []
         }
     {offset
       cdiDI: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdiDM; else goto cdiDL;
       cdiDM: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdiDL: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto cdiDG; else goto cdiDH;
       cdiDG: // global
           _sddgw::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_sddgD_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _sddgw::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sddgB_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdiDH: // global
           I64[Hp - 80] = sat_sddgE_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _cdiDO::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _cdiDO::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_sddgy_info" {
     go_dn_sddgy_info:
         const go_dn_sddgy_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const SddB2_srt+1024;
 },
 sat_sddgF_entry() //  [R1]
         { []
         }
     {offset
       cdiDP: // global
           _sddgF::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdiDQ; else goto cdiDR;
       cdiDR: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdiDT; else goto cdiDS;
       cdiDT: // global
           HpAlloc = 24;
           goto cdiDQ;
       cdiDQ: // global
           R1 = _sddgF::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdiDS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sddgF::P64;
           _sddez::I64 = I64[_sddgF::P64 + 24];
           _sddgw::I64 = _sddez::I64 - I64[_sddgF::P64 + 16];
           I64[Hp - 16] = go_dn_sddgy_info;
           I64[Hp - 8] = _sddgw::I64;
           I64[Hp] = 5 - _sddgw::I64;
           R2 = _sddez::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_sddgy_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddgF_info" {
     sat_sddgF_info:
         const sat_sddgF_entry;
         const 8589934592;
         const 4294967316;
         const SddB2_srt+1024;
 },
 sat_sddgv_entry() //  [R1]
         { []
         }
     {offset
       cdiDY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdiDZ; else goto cdiE0;
       cdiDZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdiE0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddgv_info" {
     sat_sddgv_info:
         const sat_sddgv_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1024;
 },
 sat_sddgH_entry() //  [R1]
         { []
         }
     {offset
       cdiE9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdiEa; else goto cdiEb;
       cdiEa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdiEb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddgH_info" {
     sat_sddgH_info:
         const sat_sddgH_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1024;
 },
 sat_sddgR_entry() //  [R1]
         { []
         }
     {offset
       cdiEE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdiEF; else goto cdiEG;
       cdiEF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdiEG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_sddgM_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddgR_info" {
     sat_sddgR_info:
         const sat_sddgR_entry;
         const 8589934593;
         const 4294967311;
         const SddB2_srt+1024;
 },
 sat_sddgP_entry() //  [R1]
         { []
         }
     {offset
       cdiEL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdiEM; else goto cdiEN;
       cdiEM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdiEN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddgP_info" {
     sat_sddgP_info:
         const sat_sddgP_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1024;
 },
 sat_sddgS_entry() //  [R1]
         { []
         }
     {offset
       cdiET: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdiEU; else goto cdiEV;
       cdiEU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdiEV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddgS_info" {
     sat_sddgS_info:
         const sat_sddgS_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1024;
 },
 go_up_sddgM_entry() //  [R1, R2]
         { []
         }
     {offset
       cdiEZ: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdiF3; else goto cdiF2;
       cdiF3: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdiF2: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto cdiEX; else goto cdiEY;
       cdiEX: // global
           _sddgK::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_sddgR_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _sddgK::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sddgP_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdiEY: // global
           I64[Hp - 80] = sat_sddgS_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _cdiF5::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _cdiF5::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_sddgM_info" {
     go_up_sddgM_info:
         const go_up_sddgM_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const SddB2_srt+1024;
 },
 sat_sddgT_entry() //  [R1]
         { []
         }
     {offset
       cdiF6: // global
           _sddgT::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdiF7; else goto cdiF8;
       cdiF8: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdiFa; else goto cdiF9;
       cdiFa: // global
           HpAlloc = 24;
           goto cdiF7;
       cdiF7: // global
           R1 = _sddgT::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdiF9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sddgT::P64;
           _sddez::I64 = I64[_sddgT::P64 + 24];
           _sddgK::I64 = _sddez::I64 - I64[_sddgT::P64 + 16];
           I64[Hp - 16] = go_up_sddgM_info;
           I64[Hp - 8] = _sddgK::I64;
           I64[Hp] = 5 - _sddgK::I64;
           R2 = _sddez::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_sddgM_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddgT_info" {
     sat_sddgT_info:
         const sat_sddgT_entry;
         const 8589934592;
         const 4294967316;
         const SddB2_srt+1024;
 },
 sat_sddgJ_entry() //  [R1]
         { []
         }
     {offset
       cdiFf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdiFg; else goto cdiFh;
       cdiFg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdiFh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddgJ_info" {
     sat_sddgJ_info:
         const sat_sddgJ_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1024;
 },
 sat_sddgV_entry() //  [R1]
         { []
         }
     {offset
       cdiFq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdiFr; else goto cdiFs;
       cdiFr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdiFs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddgV_info" {
     sat_sddgV_info:
         const sat_sddgV_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1024;
 },
 sat_sddh6_entry() //  [R1]
         { []
         }
     {offset
       cdiFZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdiG0; else goto cdiG1;
       cdiG0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdiG1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_sddh1_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddh6_info" {
     sat_sddh6_info:
         const sat_sddh6_entry;
         const 8589934593;
         const 4294967311;
         const SddB2_srt+1024;
 },
 sat_sddh4_entry() //  [R1]
         { []
         }
     {offset
       cdiG6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdiG7; else goto cdiG8;
       cdiG7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdiG8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddh4_info" {
     sat_sddh4_info:
         const sat_sddh4_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1024;
 },
 sat_sddh7_entry() //  [R1]
         { []
         }
     {offset
       cdiGe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdiGf; else goto cdiGg;
       cdiGf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdiGg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddh7_info" {
     sat_sddh7_info:
         const sat_sddh7_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1024;
 },
 go_dn_sddh1_entry() //  [R1, R2]
         { []
         }
     {offset
       cdiGk: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdiGo; else goto cdiGn;
       cdiGo: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdiGn: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto cdiGi; else goto cdiGj;
       cdiGi: // global
           _sddgZ::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_sddh6_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _sddgZ::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sddh4_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdiGj: // global
           I64[Hp - 80] = sat_sddh7_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _cdiGq::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _cdiGq::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_sddh1_info" {
     go_dn_sddh1_info:
         const go_dn_sddh1_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const SddB2_srt+1024;
 },
 sat_sddh8_entry() //  [R1]
         { []
         }
     {offset
       cdiGr: // global
           _sddh8::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdiGs; else goto cdiGt;
       cdiGt: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdiGv; else goto cdiGu;
       cdiGv: // global
           HpAlloc = 24;
           goto cdiGs;
       cdiGs: // global
           R1 = _sddh8::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdiGu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sddh8::P64;
           _sddez::I64 = I64[_sddh8::P64 + 24];
           _sddgZ::I64 = _sddez::I64 - I64[_sddh8::P64 + 16];
           I64[Hp - 16] = go_dn_sddh1_info;
           I64[Hp - 8] = _sddgZ::I64;
           I64[Hp] = 6 - _sddgZ::I64;
           R2 = _sddez::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_sddh1_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddh8_info" {
     sat_sddh8_info:
         const sat_sddh8_entry;
         const 8589934592;
         const 4294967316;
         const SddB2_srt+1024;
 },
 sat_sddgY_entry() //  [R1]
         { []
         }
     {offset
       cdiGA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdiGB; else goto cdiGC;
       cdiGB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdiGC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddgY_info" {
     sat_sddgY_info:
         const sat_sddgY_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1024;
 },
 sat_sddha_entry() //  [R1]
         { []
         }
     {offset
       cdiGL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdiGM; else goto cdiGN;
       cdiGM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdiGN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddha_info" {
     sat_sddha_info:
         const sat_sddha_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1024;
 },
 sat_sddhk_entry() //  [R1]
         { []
         }
     {offset
       cdiHg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdiHh; else goto cdiHi;
       cdiHh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdiHi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_sddhf_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddhk_info" {
     sat_sddhk_info:
         const sat_sddhk_entry;
         const 8589934593;
         const 4294967311;
         const SddB2_srt+1024;
 },
 sat_sddhi_entry() //  [R1]
         { []
         }
     {offset
       cdiHn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdiHo; else goto cdiHp;
       cdiHo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdiHp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddhi_info" {
     sat_sddhi_info:
         const sat_sddhi_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1024;
 },
 sat_sddhl_entry() //  [R1]
         { []
         }
     {offset
       cdiHv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdiHw; else goto cdiHx;
       cdiHw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdiHx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddhl_info" {
     sat_sddhl_info:
         const sat_sddhl_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1024;
 },
 go_up_sddhf_entry() //  [R1, R2]
         { []
         }
     {offset
       cdiHB: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdiHF; else goto cdiHE;
       cdiHF: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdiHE: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto cdiHz; else goto cdiHA;
       cdiHz: // global
           _sddhd::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_sddhk_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _sddhd::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sddhi_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdiHA: // global
           I64[Hp - 80] = sat_sddhl_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _cdiHH::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _cdiHH::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_sddhf_info" {
     go_up_sddhf_info:
         const go_up_sddhf_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const SddB2_srt+1024;
 },
 sat_sddhm_entry() //  [R1]
         { []
         }
     {offset
       cdiHI: // global
           _sddhm::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdiHJ; else goto cdiHK;
       cdiHK: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdiHM; else goto cdiHL;
       cdiHM: // global
           HpAlloc = 24;
           goto cdiHJ;
       cdiHJ: // global
           R1 = _sddhm::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdiHL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sddhm::P64;
           _sddez::I64 = I64[_sddhm::P64 + 24];
           _sddhd::I64 = _sddez::I64 - I64[_sddhm::P64 + 16];
           I64[Hp - 16] = go_up_sddhf_info;
           I64[Hp - 8] = _sddhd::I64;
           I64[Hp] = 6 - _sddhd::I64;
           R2 = _sddez::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_sddhf_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddhm_info" {
     sat_sddhm_info:
         const sat_sddhm_entry;
         const 8589934592;
         const 4294967316;
         const SddB2_srt+1024;
 },
 sat_sddhc_entry() //  [R1]
         { []
         }
     {offset
       cdiHR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdiHS; else goto cdiHT;
       cdiHS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdiHT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddhc_info" {
     sat_sddhc_info:
         const sat_sddhc_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1024;
 },
 sat_sddho_entry() //  [R1]
         { []
         }
     {offset
       cdiI2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdiI3; else goto cdiI4;
       cdiI3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdiI4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddho_info" {
     sat_sddho_info:
         const sat_sddho_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1024;
 },
 sat_sddhz_entry() //  [R1]
         { []
         }
     {offset
       cdiIB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdiIC; else goto cdiID;
       cdiIC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdiID: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_sddhu_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddhz_info" {
     sat_sddhz_info:
         const sat_sddhz_entry;
         const 8589934593;
         const 4294967311;
         const SddB2_srt+1024;
 },
 sat_sddhx_entry() //  [R1]
         { []
         }
     {offset
       cdiII: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdiIJ; else goto cdiIK;
       cdiIJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdiIK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddhx_info" {
     sat_sddhx_info:
         const sat_sddhx_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1024;
 },
 sat_sddhA_entry() //  [R1]
         { []
         }
     {offset
       cdiIQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdiIR; else goto cdiIS;
       cdiIR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdiIS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddhA_info" {
     sat_sddhA_info:
         const sat_sddhA_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1024;
 },
 go_dn_sddhu_entry() //  [R1, R2]
         { []
         }
     {offset
       cdiIW: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdiJ0; else goto cdiIZ;
       cdiJ0: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdiIZ: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto cdiIU; else goto cdiIV;
       cdiIU: // global
           _sddhs::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_sddhz_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _sddhs::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sddhx_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdiIV: // global
           I64[Hp - 80] = sat_sddhA_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _cdiJ2::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _cdiJ2::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_sddhu_info" {
     go_dn_sddhu_info:
         const go_dn_sddhu_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const SddB2_srt+1024;
 },
 sat_sddhB_entry() //  [R1]
         { []
         }
     {offset
       cdiJ3: // global
           _sddhB::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdiJ4; else goto cdiJ5;
       cdiJ5: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdiJ7; else goto cdiJ6;
       cdiJ7: // global
           HpAlloc = 24;
           goto cdiJ4;
       cdiJ4: // global
           R1 = _sddhB::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdiJ6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sddhB::P64;
           _sddez::I64 = I64[_sddhB::P64 + 24];
           _sddhs::I64 = _sddez::I64 - I64[_sddhB::P64 + 16];
           I64[Hp - 16] = go_dn_sddhu_info;
           I64[Hp - 8] = _sddhs::I64;
           I64[Hp] = 7 - _sddhs::I64;
           R2 = _sddez::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_sddhu_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddhB_info" {
     sat_sddhB_info:
         const sat_sddhB_entry;
         const 8589934592;
         const 4294967316;
         const SddB2_srt+1024;
 },
 sat_sddhr_entry() //  [R1]
         { []
         }
     {offset
       cdiJc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdiJd; else goto cdiJe;
       cdiJd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdiJe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddhr_info" {
     sat_sddhr_info:
         const sat_sddhr_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1024;
 },
 sat_sddhD_entry() //  [R1]
         { []
         }
     {offset
       cdiJn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdiJo; else goto cdiJp;
       cdiJo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdiJp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddhD_info" {
     sat_sddhD_info:
         const sat_sddhD_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1024;
 },
 sat_sddhN_entry() //  [R1]
         { []
         }
     {offset
       cdiJS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdiJT; else goto cdiJU;
       cdiJT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdiJU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_sddhI_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddhN_info" {
     sat_sddhN_info:
         const sat_sddhN_entry;
         const 8589934593;
         const 4294967311;
         const SddB2_srt+1024;
 },
 sat_sddhL_entry() //  [R1]
         { []
         }
     {offset
       cdiJZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdiK0; else goto cdiK1;
       cdiK0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdiK1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddhL_info" {
     sat_sddhL_info:
         const sat_sddhL_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1024;
 },
 sat_sddhO_entry() //  [R1]
         { []
         }
     {offset
       cdiK7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdiK8; else goto cdiK9;
       cdiK8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdiK9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddhO_info" {
     sat_sddhO_info:
         const sat_sddhO_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1024;
 },
 go_up_sddhI_entry() //  [R1, R2]
         { []
         }
     {offset
       cdiKd: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdiKh; else goto cdiKg;
       cdiKh: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdiKg: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto cdiKb; else goto cdiKc;
       cdiKb: // global
           _sddhG::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_sddhN_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _sddhG::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sddhL_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdiKc: // global
           I64[Hp - 80] = sat_sddhO_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _cdiKj::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _cdiKj::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_sddhI_info" {
     go_up_sddhI_info:
         const go_up_sddhI_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const SddB2_srt+1024;
 },
 sat_sddhP_entry() //  [R1]
         { []
         }
     {offset
       cdiKk: // global
           _sddhP::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdiKl; else goto cdiKm;
       cdiKm: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdiKo; else goto cdiKn;
       cdiKo: // global
           HpAlloc = 24;
           goto cdiKl;
       cdiKl: // global
           R1 = _sddhP::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdiKn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sddhP::P64;
           _sddez::I64 = I64[_sddhP::P64 + 24];
           _sddhG::I64 = _sddez::I64 - I64[_sddhP::P64 + 16];
           I64[Hp - 16] = go_up_sddhI_info;
           I64[Hp - 8] = _sddhG::I64;
           I64[Hp] = 7 - _sddhG::I64;
           R2 = _sddez::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_sddhI_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddhP_info" {
     sat_sddhP_info:
         const sat_sddhP_entry;
         const 8589934592;
         const 4294967316;
         const SddB2_srt+1024;
 },
 sat_sddhF_entry() //  [R1]
         { []
         }
     {offset
       cdiKt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdiKu; else goto cdiKv;
       cdiKu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdiKv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddhF_info" {
     sat_sddhF_info:
         const sat_sddhF_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1024;
 },
 sat_sddhR_entry() //  [R1]
         { []
         }
     {offset
       cdiKE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdiKF; else goto cdiKG;
       cdiKF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdiKG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddhR_info" {
     sat_sddhR_info:
         const sat_sddhR_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1024;
 },
 sat_sddi2_entry() //  [R1]
         { []
         }
     {offset
       cdiLd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdiLe; else goto cdiLf;
       cdiLe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdiLf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_sddhX_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddi2_info" {
     sat_sddi2_info:
         const sat_sddi2_entry;
         const 8589934593;
         const 4294967311;
         const SddB2_srt+1024;
 },
 sat_sddi0_entry() //  [R1]
         { []
         }
     {offset
       cdiLk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdiLl; else goto cdiLm;
       cdiLl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdiLm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddi0_info" {
     sat_sddi0_info:
         const sat_sddi0_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1024;
 },
 sat_sddi3_entry() //  [R1]
         { []
         }
     {offset
       cdiLs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdiLt; else goto cdiLu;
       cdiLt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdiLu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddi3_info" {
     sat_sddi3_info:
         const sat_sddi3_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1024;
 },
 go_dn_sddhX_entry() //  [R1, R2]
         { []
         }
     {offset
       cdiLy: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdiLC; else goto cdiLB;
       cdiLC: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdiLB: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto cdiLw; else goto cdiLx;
       cdiLw: // global
           _sddhV::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_sddi2_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _sddhV::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sddi0_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdiLx: // global
           I64[Hp - 80] = sat_sddi3_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _cdiLE::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _cdiLE::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_sddhX_info" {
     go_dn_sddhX_info:
         const go_dn_sddhX_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const SddB2_srt+1024;
 },
 sat_sddi4_entry() //  [R1]
         { []
         }
     {offset
       cdiLF: // global
           _sddi4::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdiLG; else goto cdiLH;
       cdiLH: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdiLJ; else goto cdiLI;
       cdiLJ: // global
           HpAlloc = 24;
           goto cdiLG;
       cdiLG: // global
           R1 = _sddi4::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdiLI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sddi4::P64;
           _sddez::I64 = I64[_sddi4::P64 + 24];
           _sddhV::I64 = _sddez::I64 - I64[_sddi4::P64 + 16];
           I64[Hp - 16] = go_dn_sddhX_info;
           I64[Hp - 8] = _sddhV::I64;
           I64[Hp] = 8 - _sddhV::I64;
           R2 = _sddez::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_sddhX_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddi4_info" {
     sat_sddi4_info:
         const sat_sddi4_entry;
         const 8589934592;
         const 4294967316;
         const SddB2_srt+1024;
 },
 sat_sddhU_entry() //  [R1]
         { []
         }
     {offset
       cdiLO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdiLP; else goto cdiLQ;
       cdiLP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdiLQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddhU_info" {
     sat_sddhU_info:
         const sat_sddhU_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1024;
 },
 sat_sddi6_entry() //  [R1]
         { []
         }
     {offset
       cdiLZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdiM0; else goto cdiM1;
       cdiM0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdiM1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddi6_info" {
     sat_sddi6_info:
         const sat_sddi6_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1024;
 },
 sat_sddig_entry() //  [R1]
         { []
         }
     {offset
       cdiMu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdiMv; else goto cdiMw;
       cdiMv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdiMw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_sddib_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddig_info" {
     sat_sddig_info:
         const sat_sddig_entry;
         const 8589934593;
         const 4294967311;
         const SddB2_srt+1024;
 },
 sat_sddie_entry() //  [R1]
         { []
         }
     {offset
       cdiMB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdiMC; else goto cdiMD;
       cdiMC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdiMD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddie_info" {
     sat_sddie_info:
         const sat_sddie_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1024;
 },
 sat_sddih_entry() //  [R1]
         { []
         }
     {offset
       cdiMJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdiMK; else goto cdiML;
       cdiMK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdiML: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddih_info" {
     sat_sddih_info:
         const sat_sddih_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1024;
 },
 go_up_sddib_entry() //  [R1, R2]
         { []
         }
     {offset
       cdiMP: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdiMT; else goto cdiMS;
       cdiMT: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdiMS: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto cdiMN; else goto cdiMO;
       cdiMN: // global
           _sddi9::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_sddig_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _sddi9::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sddie_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdiMO: // global
           I64[Hp - 80] = sat_sddih_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _cdiMV::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _cdiMV::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_sddib_info" {
     go_up_sddib_info:
         const go_up_sddib_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const SddB2_srt+1024;
 },
 sat_sddii_entry() //  [R1]
         { []
         }
     {offset
       cdiMW: // global
           _sddii::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdiMX; else goto cdiMY;
       cdiMY: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdiN0; else goto cdiMZ;
       cdiN0: // global
           HpAlloc = 24;
           goto cdiMX;
       cdiMX: // global
           R1 = _sddii::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdiMZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sddii::P64;
           _sddez::I64 = I64[_sddii::P64 + 24];
           _sddi9::I64 = _sddez::I64 - I64[_sddii::P64 + 16];
           I64[Hp - 16] = go_up_sddib_info;
           I64[Hp - 8] = _sddi9::I64;
           I64[Hp] = 8 - _sddi9::I64;
           R2 = _sddez::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_sddib_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddii_info" {
     sat_sddii_info:
         const sat_sddii_entry;
         const 8589934592;
         const 4294967316;
         const SddB2_srt+1024;
 },
 sat_sddi8_entry() //  [R1]
         { []
         }
     {offset
       cdiN5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdiN6; else goto cdiN7;
       cdiN6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdiN7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddi8_info" {
     sat_sddi8_info:
         const sat_sddi8_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1024;
 },
 sat_sddik_entry() //  [R1]
         { []
         }
     {offset
       cdiNg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdiNh; else goto cdiNi;
       cdiNh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdiNi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddik_info" {
     sat_sddik_info:
         const sat_sddik_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1024;
 },
 GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFromThenTo_entry() //  [R2,
                                                                 R3, R4]
         { []
         }
     {offset
       cdiNw: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdiNx; else goto cdiNy;
       cdiNx: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFromThenTo_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdiNy: // global
           I64[Sp - 24] = block_cdiNj_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udiRB; else goto cdiNk;
       udiRB: // global
           call _cdiNj(R1) args: 0, res: 0, upd: 0;
       cdiNk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFromThenTo_info" {
     GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFromThenTo_info:
         const GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFromThenTo_entry;
         const 0;
         const 36028801313931278;
         const 12884901911;
         const SddB2_srt+1024;
 },
 _cdiNj() //  [R1]
         { []
         }
     {offset
       cdiNj: // global
           _sddeu::P64 = P64[Sp + 8];
           switch [0 .. 7] (%MO_UU_Conv_W32_W64(I32[I64[R1 - 1] + 20])) {
               case 0 : goto cdiNn;
               case 1 : goto cdiNo;
               case 2 : goto cdiNp;
               case 3 : goto cdiNq;
               case 4 : goto cdiNr;
               case 5 : goto cdiNs;
               case 6 : goto cdiNt;
               case 7 : goto cdiNu;
           }
       cdiNu: // global
           _sddex::I64 = 8;
           goto sddew;
       cdiNt: // global
           _sddex::I64 = 7;
           goto sddew;
       cdiNs: // global
           _sddex::I64 = 6;
           goto sddew;
       cdiNr: // global
           _sddex::I64 = 5;
           goto sddew;
       cdiNq: // global
           _sddex::I64 = 4;
           goto sddew;
       cdiNp: // global
           _sddex::I64 = 2;
           goto sddew;
       cdiNo: // global
           _sddex::I64 = 1;
           goto sddew;
       cdiNn: // global
           _sddex::I64 = 0;
           goto sddew;
       sddew: // global
           I64[Sp] = block_cdiNz_info;
           R1 = _sddeu::P64;
           I64[Sp + 8] = _sddex::I64;
           if (R1 & 7 != 0) goto udiRA; else goto cdiQB;
       udiRA: // global
           call _cdiNz(R1) args: 0, res: 0, upd: 0;
       cdiQB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdiNj_info" {
     block_cdiNj_info:
         const _cdiNj;
         const 2;
         const 4294967326;
         const SddB2_srt+1024;
 },
 _cdiNz() //  [R1]
         { []
         }
     {offset
       cdiNz: // global
           _sddev::P64 = P64[Sp + 16];
           switch [0 .. 7] (%MO_UU_Conv_W32_W64(I32[I64[R1 - 1] + 20])) {
               case 0 : goto cdiQH;
               case 1 : goto cdiQL;
               case 2 : goto cdiQP;
               case 3 : goto cdiQT;
               case 4 : goto cdiQX;
               case 5 : goto cdiR1;
               case 6 : goto cdiR5;
               case 7 : goto cdiR9;
           }
       cdiR9: // global
           _sddez::I64 = 8;
           goto sddey;
       cdiR5: // global
           _sddez::I64 = 7;
           goto sddey;
       cdiR1: // global
           _sddez::I64 = 6;
           goto sddey;
       cdiQX: // global
           _sddez::I64 = 5;
           goto sddey;
       cdiQT: // global
           _sddez::I64 = 4;
           goto sddey;
       cdiQP: // global
           _sddez::I64 = 2;
           goto sddey;
       cdiQL: // global
           _sddez::I64 = 1;
           goto sddey;
       cdiQH: // global
           _sddez::I64 = 0;
           goto sddey;
       sddey: // global
           I64[Sp] = block_cdism_info;
           R1 = _sddev::P64;
           I64[Sp + 16] = _sddez::I64;
           if (R1 & 7 != 0) goto udiRC; else goto cdisn;
       udiRC: // global
           call _cdism(R1) args: 0, res: 0, upd: 0;
       cdisn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdiNz_info" {
     block_cdiNz_info:
         const _cdiNz;
         const 66;
         const 4294967326;
         const SddB2_srt+1024;
 },
 _cdism() //  [R1]
         { []
         }
     {offset
       cdism: // global
           _sddex::I64 = I64[Sp + 8];
           _sddez::I64 = I64[Sp + 16];
           switch [0 .. 7] (%MO_UU_Conv_W32_W64(I32[I64[R1 - 1] + 20])) {
               case 0 : goto cdiND;
               case 1 : goto cdiO0;
               case 2 : goto cdiOn;
               case 3 : goto cdiOK;
               case 4 : goto cdiP7;
               case 5 : goto cdiPu;
               case 6 : goto cdiPR;
               case 7 : goto cdiQe;
           }
       cdiQe: // global
           Hp = Hp + 80;
           _sddeA::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cdiQh; else goto cdiQg;
       cdiQg: // global
           if (%MO_S_Lt_W64(_sddez::I64,
                            _sddex::I64)) goto cdiQr; else goto cdiQA;
       cdiQr: // global
           if (%MO_S_Le_W64(8, _sddez::I64)) goto cdiQk; else goto cdiQp;
       cdiQk: // global
           I64[Hp - 72] = sat_sddi4_info;
           I64[Hp - 56] = _sddex::I64;
           I64[Hp - 48] = _sddez::I64;
           I64[Hp - 40] = sat_sddhU_info;
           I64[Hp - 24] = _sddex::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdiQp: // global
           if (%MO_S_Gt_W64(8, _sddex::I64)) goto cdiQy; else goto cdiQn;
       cdiQn: // global
           I64[Hp - 72] = sat_sddi6_info;
           I64[Hp - 56] = _sddex::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _cdiQl::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _cdiQl::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdiQA: // global
           if (%MO_S_Ge_W64(8, _sddez::I64)) goto cdiQu; else goto cdiQz;
       cdiQu: // global
           I64[Hp - 72] = sat_sddii_info;
           I64[Hp - 56] = _sddex::I64;
           I64[Hp - 48] = _sddez::I64;
           I64[Hp - 40] = sat_sddi8_info;
           I64[Hp - 24] = _sddex::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdiQz: // global
           if (%MO_S_Lt_W64(8, _sddex::I64)) goto cdiQy; else goto cdiQx;
       cdiQx: // global
           I64[Hp - 72] = sat_sddik_info;
           I64[Hp - 56] = _sddex::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _cdiQv::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _cdiQv::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdiPR: // global
           Hp = Hp + 80;
           _sddeA::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cdiQh; else goto cdiPT;
       cdiPT: // global
           if (%MO_S_Lt_W64(_sddez::I64,
                            _sddex::I64)) goto cdiQ4; else goto cdiQd;
       cdiQ4: // global
           if (%MO_S_Le_W64(7, _sddez::I64)) goto cdiPX; else goto cdiQ2;
       cdiPX: // global
           I64[Hp - 72] = sat_sddhB_info;
           I64[Hp - 56] = _sddex::I64;
           I64[Hp - 48] = _sddez::I64;
           I64[Hp - 40] = sat_sddhr_info;
           I64[Hp - 24] = _sddex::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdiQ2: // global
           if (%MO_S_Gt_W64(7, _sddex::I64)) goto cdiQy; else goto cdiQ0;
       cdiQ0: // global
           I64[Hp - 72] = sat_sddhD_info;
           I64[Hp - 56] = _sddex::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _cdiPY::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _cdiPY::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdiQd: // global
           if (%MO_S_Ge_W64(7, _sddez::I64)) goto cdiQ7; else goto cdiQc;
       cdiQ7: // global
           I64[Hp - 72] = sat_sddhP_info;
           I64[Hp - 56] = _sddex::I64;
           I64[Hp - 48] = _sddez::I64;
           I64[Hp - 40] = sat_sddhF_info;
           I64[Hp - 24] = _sddex::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdiQc: // global
           if (%MO_S_Lt_W64(7, _sddex::I64)) goto cdiQy; else goto cdiQa;
       cdiQa: // global
           I64[Hp - 72] = sat_sddhR_info;
           I64[Hp - 56] = _sddex::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _cdiQ8::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _cdiQ8::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdiPu: // global
           Hp = Hp + 80;
           _sddeA::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cdiQh; else goto cdiPw;
       cdiPw: // global
           if (%MO_S_Lt_W64(_sddez::I64,
                            _sddex::I64)) goto cdiPH; else goto cdiPQ;
       cdiPH: // global
           if (%MO_S_Le_W64(6, _sddez::I64)) goto cdiPA; else goto cdiPF;
       cdiPA: // global
           I64[Hp - 72] = sat_sddh8_info;
           I64[Hp - 56] = _sddex::I64;
           I64[Hp - 48] = _sddez::I64;
           I64[Hp - 40] = sat_sddgY_info;
           I64[Hp - 24] = _sddex::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdiPF: // global
           if (%MO_S_Gt_W64(6, _sddex::I64)) goto cdiQy; else goto cdiPD;
       cdiPD: // global
           I64[Hp - 72] = sat_sddha_info;
           I64[Hp - 56] = _sddex::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _cdiPB::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _cdiPB::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdiPQ: // global
           if (%MO_S_Ge_W64(6, _sddez::I64)) goto cdiPK; else goto cdiPP;
       cdiPK: // global
           I64[Hp - 72] = sat_sddhm_info;
           I64[Hp - 56] = _sddex::I64;
           I64[Hp - 48] = _sddez::I64;
           I64[Hp - 40] = sat_sddhc_info;
           I64[Hp - 24] = _sddex::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdiPP: // global
           if (%MO_S_Lt_W64(6, _sddex::I64)) goto cdiQy; else goto cdiPN;
       cdiPN: // global
           I64[Hp - 72] = sat_sddho_info;
           I64[Hp - 56] = _sddex::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _cdiPL::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _cdiPL::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdiP7: // global
           Hp = Hp + 80;
           _sddeA::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cdiQh; else goto cdiP9;
       cdiP9: // global
           if (%MO_S_Lt_W64(_sddez::I64,
                            _sddex::I64)) goto cdiPk; else goto cdiPt;
       cdiPk: // global
           if (%MO_S_Le_W64(5, _sddez::I64)) goto cdiPd; else goto cdiPi;
       cdiPd: // global
           I64[Hp - 72] = sat_sddgF_info;
           I64[Hp - 56] = _sddex::I64;
           I64[Hp - 48] = _sddez::I64;
           I64[Hp - 40] = sat_sddgv_info;
           I64[Hp - 24] = _sddex::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdiPi: // global
           if (%MO_S_Gt_W64(5, _sddex::I64)) goto cdiQy; else goto cdiPg;
       cdiPg: // global
           I64[Hp - 72] = sat_sddgH_info;
           I64[Hp - 56] = _sddex::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _cdiPe::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _cdiPe::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdiPt: // global
           if (%MO_S_Ge_W64(5, _sddez::I64)) goto cdiPn; else goto cdiPs;
       cdiPn: // global
           I64[Hp - 72] = sat_sddgT_info;
           I64[Hp - 56] = _sddex::I64;
           I64[Hp - 48] = _sddez::I64;
           I64[Hp - 40] = sat_sddgJ_info;
           I64[Hp - 24] = _sddex::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdiPs: // global
           if (%MO_S_Lt_W64(5, _sddex::I64)) goto cdiQy; else goto cdiPq;
       cdiPq: // global
           I64[Hp - 72] = sat_sddgV_info;
           I64[Hp - 56] = _sddex::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _cdiPo::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _cdiPo::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdiOK: // global
           Hp = Hp + 80;
           _sddeA::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cdiQh; else goto cdiOM;
       cdiOM: // global
           if (%MO_S_Lt_W64(_sddez::I64,
                            _sddex::I64)) goto cdiOX; else goto cdiP6;
       cdiOX: // global
           if (%MO_S_Le_W64(4, _sddez::I64)) goto cdiOQ; else goto cdiOV;
       cdiOQ: // global
           I64[Hp - 72] = sat_sddgc_info;
           I64[Hp - 56] = _sddex::I64;
           I64[Hp - 48] = _sddez::I64;
           I64[Hp - 40] = sat_sddg2_info;
           I64[Hp - 24] = _sddex::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdiOV: // global
           if (%MO_S_Gt_W64(4, _sddex::I64)) goto cdiQy; else goto cdiOT;
       cdiOT: // global
           I64[Hp - 72] = sat_sddge_info;
           I64[Hp - 56] = _sddex::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _cdiOR::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _cdiOR::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdiP6: // global
           if (%MO_S_Ge_W64(4, _sddez::I64)) goto cdiP0; else goto cdiP5;
       cdiP0: // global
           I64[Hp - 72] = sat_sddgq_info;
           I64[Hp - 56] = _sddex::I64;
           I64[Hp - 48] = _sddez::I64;
           I64[Hp - 40] = sat_sddgg_info;
           I64[Hp - 24] = _sddex::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdiP5: // global
           if (%MO_S_Lt_W64(4, _sddex::I64)) goto cdiQy; else goto cdiP3;
       cdiP3: // global
           I64[Hp - 72] = sat_sddgs_info;
           I64[Hp - 56] = _sddex::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _cdiP1::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _cdiP1::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdiOn: // global
           Hp = Hp + 80;
           _sddeA::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cdiQh; else goto cdiOp;
       cdiOp: // global
           if (%MO_S_Lt_W64(_sddez::I64,
                            _sddex::I64)) goto cdiOA; else goto cdiOJ;
       cdiOA: // global
           if (%MO_S_Le_W64(2, _sddez::I64)) goto cdiOt; else goto cdiOy;
       cdiOt: // global
           I64[Hp - 72] = sat_sddfJ_info;
           I64[Hp - 56] = _sddex::I64;
           I64[Hp - 48] = _sddez::I64;
           I64[Hp - 40] = sat_sddfz_info;
           I64[Hp - 24] = _sddex::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdiOy: // global
           if (%MO_S_Gt_W64(2, _sddex::I64)) goto cdiQy; else goto cdiOw;
       cdiOw: // global
           I64[Hp - 72] = sat_sddfL_info;
           I64[Hp - 56] = _sddex::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _cdiOu::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _cdiOu::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdiOJ: // global
           if (%MO_S_Ge_W64(2, _sddez::I64)) goto cdiOD; else goto cdiOI;
       cdiOD: // global
           I64[Hp - 72] = sat_sddfX_info;
           I64[Hp - 56] = _sddex::I64;
           I64[Hp - 48] = _sddez::I64;
           I64[Hp - 40] = sat_sddfN_info;
           I64[Hp - 24] = _sddex::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdiOI: // global
           if (%MO_S_Lt_W64(2, _sddex::I64)) goto cdiQy; else goto cdiOG;
       cdiOG: // global
           I64[Hp - 72] = sat_sddfZ_info;
           I64[Hp - 56] = _sddex::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _cdiOE::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _cdiOE::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdiO0: // global
           Hp = Hp + 80;
           _sddeA::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cdiQh; else goto cdiO2;
       cdiO2: // global
           if (%MO_S_Lt_W64(_sddez::I64,
                            _sddex::I64)) goto cdiOd; else goto cdiOm;
       cdiOd: // global
           if (%MO_S_Le_W64(1, _sddez::I64)) goto cdiO6; else goto cdiOb;
       cdiO6: // global
           I64[Hp - 72] = sat_sddfg_info;
           I64[Hp - 56] = _sddex::I64;
           I64[Hp - 48] = _sddez::I64;
           I64[Hp - 40] = sat_sddf6_info;
           I64[Hp - 24] = _sddex::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdiOb: // global
           if (%MO_S_Gt_W64(1, _sddex::I64)) goto cdiQy; else goto cdiO9;
       cdiO9: // global
           I64[Hp - 72] = sat_sddfi_info;
           I64[Hp - 56] = _sddex::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _cdiO7::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _cdiO7::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdiOm: // global
           if (%MO_S_Ge_W64(1, _sddez::I64)) goto cdiOg; else goto cdiOl;
       cdiOg: // global
           I64[Hp - 72] = sat_sddfu_info;
           I64[Hp - 56] = _sddex::I64;
           I64[Hp - 48] = _sddez::I64;
           I64[Hp - 40] = sat_sddfk_info;
           I64[Hp - 24] = _sddex::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdiOl: // global
           if (%MO_S_Lt_W64(1, _sddex::I64)) goto cdiQy; else goto cdiOj;
       cdiOj: // global
           I64[Hp - 72] = sat_sddfw_info;
           I64[Hp - 56] = _sddex::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _cdiOh::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _cdiOh::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdiND: // global
           Hp = Hp + 80;
           _sddeA::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cdiQh; else goto cdiNF;
       cdiQh: // global
           HpAlloc = 80;
           R1 = _sddeA::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdiNF: // global
           if (%MO_S_Lt_W64(_sddez::I64,
                            _sddex::I64)) goto cdiNQ; else goto cdiNZ;
       cdiNQ: // global
           if (%MO_S_Le_W64(0, _sddez::I64)) goto cdiNJ; else goto cdiNO;
       cdiNJ: // global
           I64[Hp - 72] = sat_sddeN_info;
           I64[Hp - 56] = _sddex::I64;
           I64[Hp - 48] = _sddez::I64;
           I64[Hp - 40] = sat_sddeD_info;
           I64[Hp - 24] = _sddex::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdiNO: // global
           if (%MO_S_Gt_W64(0, _sddex::I64)) goto cdiQy; else goto cdiNM;
       cdiNM: // global
           I64[Hp - 72] = sat_sddeP_info;
           I64[Hp - 56] = _sddex::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _cdiNK::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _cdiNK::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdiNZ: // global
           if (%MO_S_Ge_W64(0, _sddez::I64)) goto cdiNT; else goto cdiNY;
       cdiNT: // global
           I64[Hp - 72] = sat_sddf1_info;
           I64[Hp - 56] = _sddex::I64;
           I64[Hp - 48] = _sddez::I64;
           I64[Hp - 40] = sat_sddeR_info;
           I64[Hp - 24] = _sddex::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdiNY: // global
           if (%MO_S_Lt_W64(0, _sddex::I64)) goto cdiQy; else goto cdiNW;
       cdiQy: // global
           Hp = Hp - 80;
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdiNW: // global
           I64[Hp - 72] = sat_sddf3_info;
           I64[Hp - 56] = _sddex::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _cdiNU::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _cdiNU::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdism_info" {
     block_cdism_info:
         const _cdism;
         const 194;
         const 4294967326;
         const SddB2_srt+1024;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:30.650019986 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoHeapProfile_closure" {
     GHC.RTS.Flags.$fEnumDoHeapProfile_closure:
         const GHC.Enum.C:Enum_con_info;
         const GHC.RTS.Flags.$fEnumDoHeapProfile_$csucc_closure+1;
         const GHC.RTS.Flags.$fEnumDoHeapProfile_$cpred_closure+1;
         const GHC.RTS.Flags.$fEnumDoHeapProfile_$ctoEnum_closure+1;
         const GHC.RTS.Flags.$fEnumDoHeapProfile_$cfromEnum_closure+1;
         const GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFrom_closure+1;
         const GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFromThen_closure+2;
         const GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFromTo_closure+2;
         const GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFromThenTo_closure+3;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:30.652724705 UTC

[section ""data" . lvl98_rcV8q_closure" {
     lvl98_rcV8q_closure:
         const lvl98_rcV8q_info;
         const 0;
         const 0;
         const 0;
 },
 lvl98_rcV8q_entry() //  [R1]
         { []
         }
     {offset
       cdj8B: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdj8C; else goto cdj8D;
       cdj8C: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdj8D: // global
           (_cdj8y::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdj8y::I64 == 0) goto cdj8A; else goto cdj8z;
       cdj8A: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdj8z: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdj8y::I64;
           R2 = 5;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl98_rcV8q_info" {
     lvl98_rcV8q_info:
         const lvl98_rcV8q_entry;
         const 0;
         const 4294967317;
         const SddB2_srt+1216;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:30.658048627 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoCostCentres_$csucc_closure" {
     GHC.RTS.Flags.$fEnumDoCostCentres_$csucc_closure:
         const GHC.RTS.Flags.$fEnumDoCostCentres_$csucc_info;
         const 0;
 },
 GHC.RTS.Flags.$fEnumDoCostCentres_$csucc_entry() //  [R2]
         { []
         }
     {offset
       cdj90: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdj91; else goto cdj92;
       cdj91: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoCostCentres_$csucc_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdj92: // global
           I64[Sp - 8] = block_cdj8Q_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udj9l; else goto cdj8R;
       udj9l: // global
           call _cdj8Q(R1) args: 0, res: 0, upd: 0;
       cdj8R: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoCostCentres_$csucc_info" {
     GHC.RTS.Flags.$fEnumDoCostCentres_$csucc_info:
         const GHC.RTS.Flags.$fEnumDoCostCentres_$csucc_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SddB2_srt+1224;
 },
 _cdj8Q() //  [R1]
         { []
         }
     {offset
       cdj8Q: // global
           _cdj8Z::P64 = R1 & 7;
           if (_cdj8Z::P64 < 4) goto udj9i; else goto udj9k;
       udj9i: // global
           if (_cdj8Z::P64 < 3) goto udj9j; else goto cdj8W;
       udj9j: // global
           if (_cdj8Z::P64 < 2) goto cdj8U; else goto cdj8V;
       cdj8U: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdj8V: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdj8W: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       udj9k: // global
           if (_cdj8Z::P64 < 5) goto cdj8X; else goto cdj8Y;
       cdj8X: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdj8Y: // global
           R1 = lvl98_rcV8q_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdj8Q_info" {
     block_cdj8Q_info:
         const _cdj8Q;
         const 0;
         const 4294967326;
         const SddB2_srt+1232;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:30.667731594 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoCostCentres_go4_closure" {
     GHC.RTS.Flags.$fEnumDoCostCentres_go4_closure:
         const GHC.RTS.Flags.$fEnumDoCostCentres_go4_info;
         const 0;
 },
 sat_sddiu_entry() //  [R1]
         { []
         }
     {offset
       cdj9O: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdj9P; else goto cdj9Q;
       cdj9P: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdj9Q: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddis::I64 = I64[R1 + 16];
           if (_sddis::I64 != 0) goto cdj9M; else goto cdj9N;
       cdj9M: // global
           R2 = _sddis::I64 + 1;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumDoCostCentres_go4_entry(R2) args: 24, res: 0, upd: 24;
       cdj9N: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddiu_info" {
     sat_sddiu_info:
         const sat_sddiu_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1240;
 },
 sat_sddir_entry() //  [R1]
         { []
         }
     {offset
       cdja5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdja6; else goto cdja7;
       cdja6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdja7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddiq::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddiq::I64, 3)) goto udja8; else goto udjab;
       udja8: // global
           if (%MO_S_Lt_W64(_sddiq::I64, 1)) goto udja9; else goto udjaa;
       udja9: // global
           if (%MO_S_Lt_W64(_sddiq::I64, 0)) goto cdj9Z; else goto cdja0;
       cdja0: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjaa: // global
           if (%MO_S_Lt_W64(_sddiq::I64, 2)) goto cdja1; else goto cdja2;
       cdja1: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdja2: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjab: // global
           if (%MO_S_Ge_W64(_sddiq::I64, 5)) goto cdj9Z; else goto udjac;
       cdj9Z: // global
           R2 = _sddiq::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udjac: // global
           if (%MO_S_Lt_W64(_sddiq::I64, 4)) goto cdja3; else goto cdja4;
       cdja3: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdja4: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddir_info" {
     sat_sddir_info:
         const sat_sddir_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1216;
 },
 GHC.RTS.Flags.$fEnumDoCostCentres_go4_entry() //  [R2]
         { []
         }
     {offset
       cdjae: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdjai; else goto cdjah;
       cdjai: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoCostCentres_go4_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdjah: // global
           I64[Hp - 64] = sat_sddiu_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sddir_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoCostCentres_go4_info" {
     GHC.RTS.Flags.$fEnumDoCostCentres_go4_info:
         const GHC.RTS.Flags.$fEnumDoCostCentres_go4_entry;
         const 0;
         const 38654705678;
         const 4294967300;
         const SddB2_srt+1216;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:30.678366247 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoCostCentres_go3_closure" {
     GHC.RTS.Flags.$fEnumDoCostCentres_go3_closure:
         const GHC.RTS.Flags.$fEnumDoCostCentres_go3_info;
         const 0;
 },
 sat_sddiA_entry() //  [R1]
         { []
         }
     {offset
       cdjaW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdjaX; else goto cdjaY;
       cdjaX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdjaY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddiy::I64 = I64[R1 + 16];
           if (_sddiy::I64 != 1) goto cdjaU; else goto cdjaV;
       cdjaU: // global
           R2 = _sddiy::I64 + 1;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumDoCostCentres_go3_entry(R2) args: 24, res: 0, upd: 24;
       cdjaV: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddiA_info" {
     sat_sddiA_info:
         const sat_sddiA_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1248;
 },
 sat_sddix_entry() //  [R1]
         { []
         }
     {offset
       cdjbd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdjbe; else goto cdjbf;
       cdjbe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdjbf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddiw::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddiw::I64, 3)) goto udjbg; else goto udjbj;
       udjbg: // global
           if (%MO_S_Lt_W64(_sddiw::I64, 1)) goto udjbh; else goto udjbi;
       udjbh: // global
           if (%MO_S_Lt_W64(_sddiw::I64, 0)) goto cdjb7; else goto cdjb8;
       cdjb8: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjbi: // global
           if (%MO_S_Lt_W64(_sddiw::I64, 2)) goto cdjb9; else goto cdjba;
       cdjb9: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjba: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjbj: // global
           if (%MO_S_Ge_W64(_sddiw::I64, 5)) goto cdjb7; else goto udjbk;
       cdjb7: // global
           R2 = _sddiw::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udjbk: // global
           if (%MO_S_Lt_W64(_sddiw::I64, 4)) goto cdjbb; else goto cdjbc;
       cdjbb: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjbc: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddix_info" {
     sat_sddix_info:
         const sat_sddix_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1216;
 },
 GHC.RTS.Flags.$fEnumDoCostCentres_go3_entry() //  [R2]
         { []
         }
     {offset
       cdjbm: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdjbq; else goto cdjbp;
       cdjbq: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoCostCentres_go3_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdjbp: // global
           I64[Hp - 64] = sat_sddiA_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sddix_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoCostCentres_go3_info" {
     GHC.RTS.Flags.$fEnumDoCostCentres_go3_info:
         const GHC.RTS.Flags.$fEnumDoCostCentres_go3_entry;
         const 0;
         const 73014444046;
         const 4294967300;
         const SddB2_srt+1216;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:30.688931051 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoCostCentres_go2_closure" {
     GHC.RTS.Flags.$fEnumDoCostCentres_go2_closure:
         const GHC.RTS.Flags.$fEnumDoCostCentres_go2_info;
         const 0;
 },
 sat_sddiG_entry() //  [R1]
         { []
         }
     {offset
       cdjc4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdjc5; else goto cdjc6;
       cdjc5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdjc6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddiE::I64 = I64[R1 + 16];
           if (_sddiE::I64 != 2) goto cdjc2; else goto cdjc3;
       cdjc2: // global
           R2 = _sddiE::I64 + 1;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumDoCostCentres_go2_entry(R2) args: 24, res: 0, upd: 24;
       cdjc3: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddiG_info" {
     sat_sddiG_info:
         const sat_sddiG_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1256;
 },
 sat_sddiD_entry() //  [R1]
         { []
         }
     {offset
       cdjcl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdjcm; else goto cdjcn;
       cdjcm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdjcn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddiC::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddiC::I64, 3)) goto udjco; else goto udjcr;
       udjco: // global
           if (%MO_S_Lt_W64(_sddiC::I64, 1)) goto udjcp; else goto udjcq;
       udjcp: // global
           if (%MO_S_Lt_W64(_sddiC::I64, 0)) goto cdjcf; else goto cdjcg;
       cdjcg: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjcq: // global
           if (%MO_S_Lt_W64(_sddiC::I64, 2)) goto cdjch; else goto cdjci;
       cdjch: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjci: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjcr: // global
           if (%MO_S_Ge_W64(_sddiC::I64, 5)) goto cdjcf; else goto udjcs;
       cdjcf: // global
           R2 = _sddiC::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udjcs: // global
           if (%MO_S_Lt_W64(_sddiC::I64, 4)) goto cdjcj; else goto cdjck;
       cdjcj: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjck: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddiD_info" {
     sat_sddiD_info:
         const sat_sddiD_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1216;
 },
 GHC.RTS.Flags.$fEnumDoCostCentres_go2_entry() //  [R2]
         { []
         }
     {offset
       cdjcu: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdjcy; else goto cdjcx;
       cdjcy: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoCostCentres_go2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdjcx: // global
           I64[Hp - 64] = sat_sddiG_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sddiD_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoCostCentres_go2_info" {
     GHC.RTS.Flags.$fEnumDoCostCentres_go2_info:
         const GHC.RTS.Flags.$fEnumDoCostCentres_go2_entry;
         const 0;
         const 141733920782;
         const 4294967300;
         const SddB2_srt+1216;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:30.699899256 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoCostCentres_go1_closure" {
     GHC.RTS.Flags.$fEnumDoCostCentres_go1_closure:
         const GHC.RTS.Flags.$fEnumDoCostCentres_go1_info;
         const 0;
 },
 sat_sddiM_entry() //  [R1]
         { []
         }
     {offset
       cdjdc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdjdd; else goto cdjde;
       cdjdd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdjde: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddiK::I64 = I64[R1 + 16];
           if (_sddiK::I64 != 3) goto cdjda; else goto cdjdb;
       cdjda: // global
           R2 = _sddiK::I64 + 1;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumDoCostCentres_go1_entry(R2) args: 24, res: 0, upd: 24;
       cdjdb: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddiM_info" {
     sat_sddiM_info:
         const sat_sddiM_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1264;
 },
 sat_sddiJ_entry() //  [R1]
         { []
         }
     {offset
       cdjdt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdjdu; else goto cdjdv;
       cdjdu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdjdv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddiI::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddiI::I64, 3)) goto udjdw; else goto udjdz;
       udjdw: // global
           if (%MO_S_Lt_W64(_sddiI::I64, 1)) goto udjdx; else goto udjdy;
       udjdx: // global
           if (%MO_S_Lt_W64(_sddiI::I64, 0)) goto cdjdn; else goto cdjdo;
       cdjdo: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjdy: // global
           if (%MO_S_Lt_W64(_sddiI::I64, 2)) goto cdjdp; else goto cdjdq;
       cdjdp: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjdq: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjdz: // global
           if (%MO_S_Ge_W64(_sddiI::I64, 5)) goto cdjdn; else goto udjdA;
       cdjdn: // global
           R2 = _sddiI::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udjdA: // global
           if (%MO_S_Lt_W64(_sddiI::I64, 4)) goto cdjdr; else goto cdjds;
       cdjdr: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjds: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddiJ_info" {
     sat_sddiJ_info:
         const sat_sddiJ_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1216;
 },
 GHC.RTS.Flags.$fEnumDoCostCentres_go1_entry() //  [R2]
         { []
         }
     {offset
       cdjdC: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdjdG; else goto cdjdF;
       cdjdG: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoCostCentres_go1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdjdF: // global
           I64[Hp - 64] = sat_sddiM_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sddiJ_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoCostCentres_go1_info" {
     GHC.RTS.Flags.$fEnumDoCostCentres_go1_info:
         const GHC.RTS.Flags.$fEnumDoCostCentres_go1_entry;
         const 0;
         const 279172874254;
         const 4294967300;
         const SddB2_srt+1216;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:30.711296472 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoCostCentres_go_closure" {
     GHC.RTS.Flags.$fEnumDoCostCentres_go_closure:
         const GHC.RTS.Flags.$fEnumDoCostCentres_go_info;
         const 0;
 },
 sat_sddiS_entry() //  [R1]
         { []
         }
     {offset
       cdjek: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdjel; else goto cdjem;
       cdjel: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdjem: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddiQ::I64 = I64[R1 + 16];
           if (_sddiQ::I64 != 4) goto cdjei; else goto cdjej;
       cdjei: // global
           R2 = _sddiQ::I64 + 1;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumDoCostCentres_go_entry(R2) args: 24, res: 0, upd: 24;
       cdjej: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddiS_info" {
     sat_sddiS_info:
         const sat_sddiS_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1272;
 },
 sat_sddiP_entry() //  [R1]
         { []
         }
     {offset
       cdjeB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdjeC; else goto cdjeD;
       cdjeC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdjeD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddiO::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddiO::I64, 3)) goto udjeE; else goto udjeH;
       udjeE: // global
           if (%MO_S_Lt_W64(_sddiO::I64, 1)) goto udjeF; else goto udjeG;
       udjeF: // global
           if (%MO_S_Lt_W64(_sddiO::I64, 0)) goto cdjev; else goto cdjew;
       cdjew: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjeG: // global
           if (%MO_S_Lt_W64(_sddiO::I64, 2)) goto cdjex; else goto cdjey;
       cdjex: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjey: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjeH: // global
           if (%MO_S_Ge_W64(_sddiO::I64, 5)) goto cdjev; else goto udjeI;
       cdjev: // global
           R2 = _sddiO::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udjeI: // global
           if (%MO_S_Lt_W64(_sddiO::I64, 4)) goto cdjez; else goto cdjeA;
       cdjez: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjeA: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddiP_info" {
     sat_sddiP_info:
         const sat_sddiP_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1216;
 },
 GHC.RTS.Flags.$fEnumDoCostCentres_go_entry() //  [R2]
         { []
         }
     {offset
       cdjeK: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdjeO; else goto cdjeN;
       cdjeO: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoCostCentres_go_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdjeN: // global
           I64[Hp - 64] = sat_sddiS_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sddiP_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoCostCentres_go_info" {
     GHC.RTS.Flags.$fEnumDoCostCentres_go_info:
         const GHC.RTS.Flags.$fEnumDoCostCentres_go_entry;
         const 0;
         const 554050781198;
         const 4294967300;
         const SddB2_srt+1216;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:30.722440989 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFromTo_closure" {
     GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFromTo_closure:
         const GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFromTo_info;
         const 0;
 },
 GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFromTo_entry() //  [R2, R3]
         { []
         }
     {offset
       cdjfw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdjfx; else goto cdjfy;
       cdjfx: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFromTo_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdjfy: // global
           I64[Sp - 16] = block_cdjfm_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udjgN; else goto cdjfn;
       udjgN: // global
           call _cdjfm(R1) args: 0, res: 0, upd: 0;
       cdjfn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFromTo_info" {
     GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFromTo_info:
         const GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFromTo_entry;
         const 0;
         const 270582939662;
         const 8589934607;
         const SddB2_srt+1240;
 },
 _cdjfm() //  [R1]
         { []
         }
     {offset
       cdjfm: // global
           _sddiU::P64 = P64[Sp + 8];
           _cdjfv::P64 = R1 & 7;
           if (_cdjfv::P64 < 4) goto udjgG; else goto udjgI;
       udjgG: // global
           if (_cdjfv::P64 < 3) goto udjgH; else goto cdjfs;
       udjgH: // global
           if (_cdjfv::P64 < 2) goto cdjfq; else goto cdjfr;
       cdjfq: // global
           _sddiW::I64 = 0;
           goto sddiV;
       cdjfr: // global
           _sddiW::I64 = 1;
           goto sddiV;
       cdjfs: // global
           _sddiW::I64 = 2;
           goto sddiV;
       udjgI: // global
           if (_cdjfv::P64 < 5) goto cdjft; else goto cdjfu;
       cdjft: // global
           _sddiW::I64 = 3;
           goto sddiV;
       cdjfu: // global
           _sddiW::I64 = 4;
           goto sddiV;
       sddiV: // global
           I64[Sp] = block_cdjfC_info;
           R1 = _sddiU::P64;
           I64[Sp + 8] = _sddiW::I64;
           if (R1 & 7 != 0) goto udjgM; else goto cdjfE;
       udjgM: // global
           call _cdjfC(R1) args: 0, res: 0, upd: 0;
       cdjfE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdjfm_info" {
     block_cdjfm_info:
         const _cdjfm;
         const 1;
         const 133143986206;
         const SddB2_srt+1240;
 },
 _cdjfC() //  [R1]
         { []
         }
     {offset
       cdjfC: // global
           _sddiW::I64 = I64[Sp + 8];
           _cdjgF::P64 = R1 & 7;
           if (_cdjgF::P64 < 4) goto udjgJ; else goto udjgL;
       udjgJ: // global
           if (_cdjgF::P64 < 3) goto udjgK; else goto cdjg7;
       udjgK: // global
           if (_cdjgF::P64 < 2) goto cdjfP; else goto cdjfY;
       cdjfP: // global
           if (%MO_S_Gt_W64(_sddiW::I64, 0)) goto cdjgo; else goto cdjfM;
       cdjfM: // global
           R2 = _sddiW::I64;
           Sp = Sp + 16;
           call GHC.RTS.Flags.$fEnumDoCostCentres_go4_entry(R2) args: 8, res: 0, upd: 8;
       cdjfY: // global
           if (%MO_S_Gt_W64(_sddiW::I64, 1)) goto cdjgo; else goto cdjfW;
       cdjfW: // global
           R2 = _sddiW::I64;
           Sp = Sp + 16;
           call GHC.RTS.Flags.$fEnumDoCostCentres_go3_entry(R2) args: 8, res: 0, upd: 8;
       cdjg7: // global
           if (%MO_S_Gt_W64(_sddiW::I64, 2)) goto cdjgo; else goto cdjg5;
       cdjg5: // global
           R2 = _sddiW::I64;
           Sp = Sp + 16;
           call GHC.RTS.Flags.$fEnumDoCostCentres_go2_entry(R2) args: 8, res: 0, upd: 8;
       udjgL: // global
           if (_cdjgF::P64 < 5) goto cdjgg; else goto cdjgp;
       cdjgg: // global
           if (%MO_S_Gt_W64(_sddiW::I64, 3)) goto cdjgo; else goto cdjge;
       cdjge: // global
           R2 = _sddiW::I64;
           Sp = Sp + 16;
           call GHC.RTS.Flags.$fEnumDoCostCentres_go1_entry(R2) args: 8, res: 0, upd: 8;
       cdjgp: // global
           if (%MO_S_Gt_W64(_sddiW::I64, 4)) goto cdjgo; else goto cdjgn;
       cdjgo: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdjgn: // global
           R2 = _sddiW::I64;
           Sp = Sp + 16;
           call GHC.RTS.Flags.$fEnumDoCostCentres_go_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdjfC_info" {
     block_cdjfC_info:
         const _cdjfC;
         const 65;
         const 133143986206;
         const SddB2_srt+1240;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:30.733907624 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFromThen_closure" {
     GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFromThen_closure:
         const GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFromThen_info;
         const 0;
 },
 GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFromThen_entry() //  [R2,
                                                               R3]
         { []
         }
     {offset
       cdjhn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdjho; else goto cdjhp;
       cdjho: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFromThen_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdjhp: // global
           I64[Sp - 16] = block_cdjhd_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udjiE; else goto cdjhe;
       udjiE: // global
           call _cdjhd(R1) args: 0, res: 0, upd: 0;
       cdjhe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFromThen_info" {
     GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFromThen_info:
         const GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFromThen_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SddB2_srt+1288;
 },
 _cdjhd() //  [R1]
         { []
         }
     {offset
       cdjhd: // global
           _sddj5::P64 = P64[Sp + 8];
           _cdjhm::P64 = R1 & 7;
           if (_cdjhm::P64 < 4) goto udjix; else goto udjiz;
       udjix: // global
           if (_cdjhm::P64 < 3) goto udjiy; else goto cdjhj;
       udjiy: // global
           if (_cdjhm::P64 < 2) goto cdjhh; else goto cdjhi;
       cdjhh: // global
           _sddj7::I64 = 0;
           goto sddj6;
       cdjhi: // global
           _sddj7::I64 = 1;
           goto sddj6;
       cdjhj: // global
           _sddj7::I64 = 2;
           goto sddj6;
       udjiz: // global
           if (_cdjhm::P64 < 5) goto cdjhk; else goto cdjhl;
       cdjhk: // global
           _sddj7::I64 = 3;
           goto sddj6;
       cdjhl: // global
           _sddj7::I64 = 4;
           goto sddj6;
       sddj6: // global
           I64[Sp] = block_cdjht_info;
           R1 = _sddj5::P64;
           I64[Sp + 8] = _sddj7::I64;
           if (R1 & 7 != 0) goto udjiD; else goto cdjhv;
       udjiD: // global
           call _cdjht(R1) args: 0, res: 0, upd: 0;
       cdjhv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdjhd_info" {
     block_cdjhd_info:
         const _cdjhd;
         const 1;
         const 4294967326;
         const SddB2_srt+1296;
 },
 _cdjht() //  [R1]
         { []
         }
     {offset
       cdjht: // global
           _sddj7::I64 = I64[Sp + 8];
           _cdjiw::P64 = R1 & 7;
           if (_cdjiw::P64 < 4) goto udjiA; else goto udjiC;
       udjiA: // global
           if (_cdjiw::P64 < 3) goto udjiB; else goto cdjhU;
       udjiB: // global
           if (_cdjiw::P64 < 2) goto cdjhC; else goto cdjhL;
       cdjhC: // global
           I64[Sp + 8] = block_cdjhz_info;
           R3 = 0;
           R2 = _sddj7::I64;
           Sp = Sp + 8;
           call GHC.Enum.efdInt_entry(R3, R2) args: 8, res: 8, upd: 8;
       cdjhL: // global
           I64[Sp + 8] = block_cdjhJ_info;
           R3 = 1;
           R2 = _sddj7::I64;
           Sp = Sp + 8;
           call GHC.Enum.efdInt_entry(R3, R2) args: 8, res: 8, upd: 8;
       cdjhU: // global
           I64[Sp + 8] = block_cdjhS_info;
           R3 = 2;
           R2 = _sddj7::I64;
           Sp = Sp + 8;
           call GHC.Enum.efdInt_entry(R3, R2) args: 8, res: 8, upd: 8;
       udjiC: // global
           if (_cdjiw::P64 < 5) goto cdji3; else goto cdjic;
       cdji3: // global
           I64[Sp + 8] = block_cdji1_info;
           R3 = 3;
           R2 = _sddj7::I64;
           Sp = Sp + 8;
           call GHC.Enum.efdInt_entry(R3, R2) args: 8, res: 8, upd: 8;
       cdjic: // global
           I64[Sp + 8] = block_cdjia_info;
           R3 = 4;
           R2 = _sddj7::I64;
           Sp = Sp + 8;
           call GHC.Enum.efdInt_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdjht_info" {
     block_cdjht_info:
         const _cdjht;
         const 65;
         const 4294967326;
         const SddB2_srt+1296;
 },
 _cdjhz() //  [R1]
         { []
         }
     {offset
       cdjhz: // global
           R3 = R1;
           R2 = GHC.RTS.Flags.$fEnumDoCostCentres_$ctoEnum_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdjhz_info" {
     block_cdjhz_info:
         const _cdjhz;
         const 0;
         const 4294967326;
         const SddB2_srt+1296;
 },
 _cdjhJ() //  [R1]
         { []
         }
     {offset
       cdjhJ: // global
           R3 = R1;
           R2 = GHC.RTS.Flags.$fEnumDoCostCentres_$ctoEnum_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdjhJ_info" {
     block_cdjhJ_info:
         const _cdjhJ;
         const 0;
         const 4294967326;
         const SddB2_srt+1296;
 },
 _cdjhS() //  [R1]
         { []
         }
     {offset
       cdjhS: // global
           R3 = R1;
           R2 = GHC.RTS.Flags.$fEnumDoCostCentres_$ctoEnum_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdjhS_info" {
     block_cdjhS_info:
         const _cdjhS;
         const 0;
         const 4294967326;
         const SddB2_srt+1296;
 },
 _cdji1() //  [R1]
         { []
         }
     {offset
       cdji1: // global
           R3 = R1;
           R2 = GHC.RTS.Flags.$fEnumDoCostCentres_$ctoEnum_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdji1_info" {
     block_cdji1_info:
         const _cdji1;
         const 0;
         const 4294967326;
         const SddB2_srt+1296;
 },
 _cdjia() //  [R1]
         { []
         }
     {offset
       cdjia: // global
           R3 = R1;
           R2 = GHC.RTS.Flags.$fEnumDoCostCentres_$ctoEnum_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdjia_info" {
     block_cdjia_info:
         const _cdjia;
         const 0;
         const 4294967326;
         const SddB2_srt+1296;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:30.752009061 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoCostCentres_go5_closure" {
     GHC.RTS.Flags.$fEnumDoCostCentres_go5_closure:
         const GHC.RTS.Flags.$fEnumDoCostCentres_go5_info;
         const 0;
 },
 sat_sddjk_entry() //  [R1]
         { []
         }
     {offset
       cdjjs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdjjt; else goto cdjju;
       cdjjt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdjju: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddji::I64 = I64[R1 + 16];
           if (_sddji::I64 != 9223372036854775807) goto cdjjq; else goto cdjjr;
       cdjjq: // global
           R2 = _sddji::I64 + 1;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumDoCostCentres_go5_entry(R2) args: 24, res: 0, upd: 24;
       cdjjr: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddjk_info" {
     sat_sddjk_info:
         const sat_sddjk_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1304;
 },
 sat_sddjh_entry() //  [R1]
         { []
         }
     {offset
       cdjjJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdjjK; else goto cdjjL;
       cdjjK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdjjL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddjg::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddjg::I64, 3)) goto udjjM; else goto udjjP;
       udjjM: // global
           if (%MO_S_Lt_W64(_sddjg::I64, 1)) goto udjjN; else goto udjjO;
       udjjN: // global
           if (%MO_S_Lt_W64(_sddjg::I64, 0)) goto cdjjD; else goto cdjjE;
       cdjjE: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjjO: // global
           if (%MO_S_Lt_W64(_sddjg::I64, 2)) goto cdjjF; else goto cdjjG;
       cdjjF: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjjG: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjjP: // global
           if (%MO_S_Ge_W64(_sddjg::I64, 5)) goto cdjjD; else goto udjjQ;
       cdjjD: // global
           R2 = _sddjg::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udjjQ: // global
           if (%MO_S_Lt_W64(_sddjg::I64, 4)) goto cdjjH; else goto cdjjI;
       cdjjH: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjjI: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddjh_info" {
     sat_sddjh_info:
         const sat_sddjh_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1216;
 },
 GHC.RTS.Flags.$fEnumDoCostCentres_go5_entry() //  [R2]
         { []
         }
     {offset
       cdjjS: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdjjW; else goto cdjjV;
       cdjjW: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoCostCentres_go5_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdjjV: // global
           I64[Hp - 64] = sat_sddjk_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sddjh_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoCostCentres_go5_info" {
     GHC.RTS.Flags.$fEnumDoCostCentres_go5_info:
         const GHC.RTS.Flags.$fEnumDoCostCentres_go5_entry;
         const 0;
         const 8800387989518;
         const 4294967300;
         const SddB2_srt+1216;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:30.761433923 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoCostCentres5_closure" {
     GHC.RTS.Flags.$fEnumDoCostCentres5_closure:
         const GHC.RTS.Flags.$fEnumDoCostCentres5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fEnumDoCostCentres5_entry() //  [R1]
         { []
         }
     {offset
       cdjkv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdjkw; else goto cdjkx;
       cdjkw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdjkx: // global
           (_cdjks::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdjks::I64 == 0) goto cdjku; else goto cdjkt;
       cdjku: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdjkt: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdjks::I64;
           R2 = 0;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumDoCostCentres_go5_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoCostCentres5_info" {
     GHC.RTS.Flags.$fEnumDoCostCentres5_info:
         const GHC.RTS.Flags.$fEnumDoCostCentres5_entry;
         const 0;
         const 4294967317;
         const SddB2_srt+1304;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:30.765884067 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoCostCentres4_closure" {
     GHC.RTS.Flags.$fEnumDoCostCentres4_closure:
         const GHC.RTS.Flags.$fEnumDoCostCentres4_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fEnumDoCostCentres4_entry() //  [R1]
         { []
         }
     {offset
       cdjkM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdjkN; else goto cdjkO;
       cdjkN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdjkO: // global
           (_cdjkJ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdjkJ::I64 == 0) goto cdjkL; else goto cdjkK;
       cdjkL: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdjkK: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdjkJ::I64;
           R2 = 1;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumDoCostCentres_go5_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoCostCentres4_info" {
     GHC.RTS.Flags.$fEnumDoCostCentres4_info:
         const GHC.RTS.Flags.$fEnumDoCostCentres4_entry;
         const 0;
         const 4294967317;
         const SddB2_srt+1304;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:30.770035176 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoCostCentres3_closure" {
     GHC.RTS.Flags.$fEnumDoCostCentres3_closure:
         const GHC.RTS.Flags.$fEnumDoCostCentres3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fEnumDoCostCentres3_entry() //  [R1]
         { []
         }
     {offset
       cdjl3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdjl4; else goto cdjl5;
       cdjl4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdjl5: // global
           (_cdjl0::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdjl0::I64 == 0) goto cdjl2; else goto cdjl1;
       cdjl2: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdjl1: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdjl0::I64;
           R2 = 2;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumDoCostCentres_go5_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoCostCentres3_info" {
     GHC.RTS.Flags.$fEnumDoCostCentres3_info:
         const GHC.RTS.Flags.$fEnumDoCostCentres3_entry;
         const 0;
         const 4294967317;
         const SddB2_srt+1304;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:30.774674317 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoCostCentres2_closure" {
     GHC.RTS.Flags.$fEnumDoCostCentres2_closure:
         const GHC.RTS.Flags.$fEnumDoCostCentres2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fEnumDoCostCentres2_entry() //  [R1]
         { []
         }
     {offset
       cdjlk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdjll; else goto cdjlm;
       cdjll: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdjlm: // global
           (_cdjlh::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdjlh::I64 == 0) goto cdjlj; else goto cdjli;
       cdjlj: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdjli: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdjlh::I64;
           R2 = 3;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumDoCostCentres_go5_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoCostCentres2_info" {
     GHC.RTS.Flags.$fEnumDoCostCentres2_info:
         const GHC.RTS.Flags.$fEnumDoCostCentres2_entry;
         const 0;
         const 4294967317;
         const SddB2_srt+1304;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:30.778954029 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoCostCentres1_closure" {
     GHC.RTS.Flags.$fEnumDoCostCentres1_closure:
         const GHC.RTS.Flags.$fEnumDoCostCentres1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fEnumDoCostCentres1_entry() //  [R1]
         { []
         }
     {offset
       cdjlB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdjlC; else goto cdjlD;
       cdjlC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdjlD: // global
           (_cdjly::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdjly::I64 == 0) goto cdjlA; else goto cdjlz;
       cdjlA: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdjlz: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdjly::I64;
           R2 = 4;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumDoCostCentres_go5_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoCostCentres1_info" {
     GHC.RTS.Flags.$fEnumDoCostCentres1_info:
         const GHC.RTS.Flags.$fEnumDoCostCentres1_entry;
         const 0;
         const 4294967317;
         const SddB2_srt+1304;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:30.783819758 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFrom_closure" {
     GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFrom_closure:
         const GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFrom_info;
         const 0;
 },
 GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFrom_entry() //  [R2]
         { []
         }
     {offset
       cdjm0: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdjm1; else goto cdjm2;
       cdjm1: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFrom_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdjm2: // global
           I64[Sp - 8] = block_cdjlQ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udjml; else goto cdjlR;
       udjml: // global
           call _cdjlQ(R1) args: 0, res: 0, upd: 0;
       cdjlR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFrom_info" {
     GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFrom_info:
         const GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFrom_entry;
         const 0;
         const 270582939662;
         const 4294967301;
         const SddB2_srt+1312;
 },
 _cdjlQ() //  [R1]
         { []
         }
     {offset
       cdjlQ: // global
           _cdjlZ::P64 = R1 & 7;
           if (_cdjlZ::P64 < 4) goto udjmi; else goto udjmk;
       udjmi: // global
           if (_cdjlZ::P64 < 3) goto udjmj; else goto cdjlW;
       udjmj: // global
           if (_cdjlZ::P64 < 2) goto cdjlU; else goto cdjlV;
       cdjlU: // global
           R1 = GHC.RTS.Flags.$fEnumDoCostCentres5_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cdjlV: // global
           R1 = GHC.RTS.Flags.$fEnumDoCostCentres4_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cdjlW: // global
           R1 = GHC.RTS.Flags.$fEnumDoCostCentres3_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       udjmk: // global
           if (_cdjlZ::P64 < 5) goto cdjlX; else goto cdjlY;
       cdjlX: // global
           R1 = GHC.RTS.Flags.$fEnumDoCostCentres2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cdjlY: // global
           R1 = GHC.RTS.Flags.$fEnumDoCostCentres1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdjlQ_info" {
     block_cdjlQ_info:
         const _cdjlQ;
         const 0;
         const 133143986206;
         const SddB2_srt+1320;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:30.790222901 UTC

[section ""data" . lvl99_rcV8r_closure" {
     lvl99_rcV8r_closure:
         const lvl99_rcV8r_info;
         const 0;
         const 0;
         const 0;
 },
 lvl99_rcV8r_entry() //  [R1]
         { []
         }
     {offset
       cdjmI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdjmJ; else goto cdjmK;
       cdjmJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdjmK: // global
           (_cdjmF::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdjmF::I64 == 0) goto cdjmH; else goto cdjmG;
       cdjmH: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdjmG: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdjmF::I64;
           R2 = (-1);
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl99_rcV8r_info" {
     lvl99_rcV8r_info:
         const lvl99_rcV8r_entry;
         const 0;
         const 4294967317;
         const SddB2_srt+1216;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:30.796052361 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoCostCentres_$cpred_closure" {
     GHC.RTS.Flags.$fEnumDoCostCentres_$cpred_closure:
         const GHC.RTS.Flags.$fEnumDoCostCentres_$cpred_info;
         const 0;
 },
 GHC.RTS.Flags.$fEnumDoCostCentres_$cpred_entry() //  [R2]
         { []
         }
     {offset
       cdjn7: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdjn8; else goto cdjn9;
       cdjn8: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoCostCentres_$cpred_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdjn9: // global
           I64[Sp - 8] = block_cdjmX_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udjns; else goto cdjmY;
       udjns: // global
           call _cdjmX(R1) args: 0, res: 0, upd: 0;
       cdjmY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoCostCentres_$cpred_info" {
     GHC.RTS.Flags.$fEnumDoCostCentres_$cpred_info:
         const GHC.RTS.Flags.$fEnumDoCostCentres_$cpred_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SddB2_srt+1360;
 },
 _cdjmX() //  [R1]
         { []
         }
     {offset
       cdjmX: // global
           _cdjn6::P64 = R1 & 7;
           if (_cdjn6::P64 < 4) goto udjnp; else goto udjnr;
       udjnp: // global
           if (_cdjn6::P64 < 3) goto udjnq; else goto cdjn3;
       udjnq: // global
           if (_cdjn6::P64 < 2) goto cdjn1; else goto cdjn2;
       cdjn1: // global
           R1 = lvl99_rcV8r_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cdjn2: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdjn3: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       udjnr: // global
           if (_cdjn6::P64 < 5) goto cdjn4; else goto cdjn5;
       cdjn4: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdjn5: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdjmX_info" {
     block_cdjmX_info:
         const _cdjmX;
         const 0;
         const 4294967326;
         const SddB2_srt+1368;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:30.872823809 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFromThenTo_closure" {
     GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFromThenTo_closure:
         const GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFromThenTo_info;
         const 0;
 },
 sat_sddjJ_entry() //  [R1]
         { []
         }
     {offset
       cdjow: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdjox; else goto cdjoy;
       cdjox: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdjoy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_sddjD_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddjJ_info" {
     sat_sddjJ_info:
         const sat_sddjJ_entry;
         const 8589934593;
         const 4294967311;
         const SddB2_srt+1216;
 },
 sat_sddjH_entry() //  [R1]
         { []
         }
     {offset
       cdjoL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdjoM; else goto cdjoN;
       cdjoM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdjoN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddjG::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddjG::I64, 3)) goto udjoO; else goto udjoR;
       udjoO: // global
           if (%MO_S_Lt_W64(_sddjG::I64, 1)) goto udjoP; else goto udjoQ;
       udjoP: // global
           if (%MO_S_Lt_W64(_sddjG::I64, 0)) goto cdjoF; else goto cdjoG;
       cdjoG: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjoQ: // global
           if (%MO_S_Lt_W64(_sddjG::I64, 2)) goto cdjoH; else goto cdjoI;
       cdjoH: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjoI: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjoR: // global
           if (%MO_S_Ge_W64(_sddjG::I64, 5)) goto cdjoF; else goto udjoS;
       cdjoF: // global
           R2 = _sddjG::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udjoS: // global
           if (%MO_S_Lt_W64(_sddjG::I64, 4)) goto cdjoJ; else goto cdjoK;
       cdjoJ: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjoK: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddjH_info" {
     sat_sddjH_info:
         const sat_sddjH_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1216;
 },
 sat_sddjL_entry() //  [R1]
         { []
         }
     {offset
       cdjp6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdjp7; else goto cdjp8;
       cdjp7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdjp8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddjK::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddjK::I64, 3)) goto udjp9; else goto udjpc;
       udjp9: // global
           if (%MO_S_Lt_W64(_sddjK::I64, 1)) goto udjpa; else goto udjpb;
       udjpa: // global
           if (%MO_S_Lt_W64(_sddjK::I64, 0)) goto cdjp0; else goto cdjp1;
       cdjp1: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjpb: // global
           if (%MO_S_Lt_W64(_sddjK::I64, 2)) goto cdjp2; else goto cdjp3;
       cdjp2: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjp3: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjpc: // global
           if (%MO_S_Ge_W64(_sddjK::I64, 5)) goto cdjp0; else goto udjpd;
       cdjp0: // global
           R2 = _sddjK::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udjpd: // global
           if (%MO_S_Lt_W64(_sddjK::I64, 4)) goto cdjp4; else goto cdjp5;
       cdjp4: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjp5: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddjL_info" {
     sat_sddjL_info:
         const sat_sddjL_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1216;
 },
 go_dn_sddjD_entry() //  [R1, R2]
         { []
         }
     {offset
       cdjph: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdjpl; else goto cdjpk;
       cdjpl: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdjpk: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto cdjpf; else goto cdjpg;
       cdjpf: // global
           _sddjB::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_sddjJ_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _sddjB::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sddjH_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdjpg: // global
           I64[Hp - 80] = sat_sddjL_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _cdjpn::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _cdjpn::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_sddjD_info" {
     go_dn_sddjD_info:
         const go_dn_sddjD_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const SddB2_srt+1216;
 },
 sat_sddjM_entry() //  [R1]
         { []
         }
     {offset
       cdjpo: // global
           _sddjM::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdjpp; else goto cdjpq;
       cdjpq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdjps; else goto cdjpr;
       cdjps: // global
           HpAlloc = 24;
           goto cdjpp;
       cdjpp: // global
           R1 = _sddjM::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdjpr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sddjM::P64;
           _sddjv::I64 = I64[_sddjM::P64 + 24];
           _sddjB::I64 = _sddjv::I64 - I64[_sddjM::P64 + 16];
           I64[Hp - 16] = go_dn_sddjD_info;
           I64[Hp - 8] = _sddjB::I64;
           I64[Hp] = 0 - _sddjB::I64;
           R2 = _sddjv::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_sddjD_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddjM_info" {
     sat_sddjM_info:
         const sat_sddjM_entry;
         const 8589934592;
         const 4294967316;
         const SddB2_srt+1216;
 },
 sat_sddjA_entry() //  [R1]
         { []
         }
     {offset
       cdjpF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdjpG; else goto cdjpH;
       cdjpG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdjpH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddjz::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddjz::I64, 3)) goto udjpI; else goto udjpL;
       udjpI: // global
           if (%MO_S_Lt_W64(_sddjz::I64, 1)) goto udjpJ; else goto udjpK;
       udjpJ: // global
           if (%MO_S_Lt_W64(_sddjz::I64, 0)) goto cdjpz; else goto cdjpA;
       cdjpA: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjpK: // global
           if (%MO_S_Lt_W64(_sddjz::I64, 2)) goto cdjpB; else goto cdjpC;
       cdjpB: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjpC: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjpL: // global
           if (%MO_S_Ge_W64(_sddjz::I64, 5)) goto cdjpz; else goto udjpM;
       cdjpz: // global
           R2 = _sddjz::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udjpM: // global
           if (%MO_S_Lt_W64(_sddjz::I64, 4)) goto cdjpD; else goto cdjpE;
       cdjpD: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjpE: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddjA_info" {
     sat_sddjA_info:
         const sat_sddjA_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1216;
 },
 sat_sddjP_entry() //  [R1]
         { []
         }
     {offset
       cdjq3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdjq4; else goto cdjq5;
       cdjq4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdjq5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddjO::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddjO::I64, 3)) goto udjq6; else goto udjq9;
       udjq6: // global
           if (%MO_S_Lt_W64(_sddjO::I64, 1)) goto udjq7; else goto udjq8;
       udjq7: // global
           if (%MO_S_Lt_W64(_sddjO::I64, 0)) goto cdjpX; else goto cdjpY;
       cdjpY: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjq8: // global
           if (%MO_S_Lt_W64(_sddjO::I64, 2)) goto cdjpZ; else goto cdjq0;
       cdjpZ: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjq0: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjq9: // global
           if (%MO_S_Ge_W64(_sddjO::I64, 5)) goto cdjpX; else goto udjqa;
       cdjpX: // global
           R2 = _sddjO::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udjqa: // global
           if (%MO_S_Lt_W64(_sddjO::I64, 4)) goto cdjq1; else goto cdjq2;
       cdjq1: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjq2: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddjP_info" {
     sat_sddjP_info:
         const sat_sddjP_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1216;
 },
 sat_sddk1_entry() //  [R1]
         { []
         }
     {offset
       cdjqD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdjqE; else goto cdjqF;
       cdjqE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdjqF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_sddjV_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddk1_info" {
     sat_sddk1_info:
         const sat_sddk1_entry;
         const 8589934593;
         const 4294967311;
         const SddB2_srt+1216;
 },
 sat_sddjZ_entry() //  [R1]
         { []
         }
     {offset
       cdjqS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdjqT; else goto cdjqU;
       cdjqT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdjqU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddjY::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddjY::I64, 3)) goto udjqV; else goto udjqY;
       udjqV: // global
           if (%MO_S_Lt_W64(_sddjY::I64, 1)) goto udjqW; else goto udjqX;
       udjqW: // global
           if (%MO_S_Lt_W64(_sddjY::I64, 0)) goto cdjqM; else goto cdjqN;
       cdjqN: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjqX: // global
           if (%MO_S_Lt_W64(_sddjY::I64, 2)) goto cdjqO; else goto cdjqP;
       cdjqO: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjqP: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjqY: // global
           if (%MO_S_Ge_W64(_sddjY::I64, 5)) goto cdjqM; else goto udjqZ;
       cdjqM: // global
           R2 = _sddjY::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udjqZ: // global
           if (%MO_S_Lt_W64(_sddjY::I64, 4)) goto cdjqQ; else goto cdjqR;
       cdjqQ: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjqR: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddjZ_info" {
     sat_sddjZ_info:
         const sat_sddjZ_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1216;
 },
 sat_sddk3_entry() //  [R1]
         { []
         }
     {offset
       cdjrd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdjre; else goto cdjrf;
       cdjre: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdjrf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddk2::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddk2::I64, 3)) goto udjrg; else goto udjrj;
       udjrg: // global
           if (%MO_S_Lt_W64(_sddk2::I64, 1)) goto udjrh; else goto udjri;
       udjrh: // global
           if (%MO_S_Lt_W64(_sddk2::I64, 0)) goto cdjr7; else goto cdjr8;
       cdjr8: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjri: // global
           if (%MO_S_Lt_W64(_sddk2::I64, 2)) goto cdjr9; else goto cdjra;
       cdjr9: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjra: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjrj: // global
           if (%MO_S_Ge_W64(_sddk2::I64, 5)) goto cdjr7; else goto udjrk;
       cdjr7: // global
           R2 = _sddk2::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udjrk: // global
           if (%MO_S_Lt_W64(_sddk2::I64, 4)) goto cdjrb; else goto cdjrc;
       cdjrb: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjrc: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddk3_info" {
     sat_sddk3_info:
         const sat_sddk3_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1216;
 },
 go_up_sddjV_entry() //  [R1, R2]
         { []
         }
     {offset
       cdjro: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdjrs; else goto cdjrr;
       cdjrs: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdjrr: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto cdjrm; else goto cdjrn;
       cdjrm: // global
           _sddjT::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_sddk1_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _sddjT::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sddjZ_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdjrn: // global
           I64[Hp - 80] = sat_sddk3_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _cdjru::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _cdjru::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_sddjV_info" {
     go_up_sddjV_info:
         const go_up_sddjV_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const SddB2_srt+1216;
 },
 sat_sddk4_entry() //  [R1]
         { []
         }
     {offset
       cdjrv: // global
           _sddk4::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdjrw; else goto cdjrx;
       cdjrx: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdjrz; else goto cdjry;
       cdjrz: // global
           HpAlloc = 24;
           goto cdjrw;
       cdjrw: // global
           R1 = _sddk4::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdjry: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sddk4::P64;
           _sddjv::I64 = I64[_sddk4::P64 + 24];
           _sddjT::I64 = _sddjv::I64 - I64[_sddk4::P64 + 16];
           I64[Hp - 16] = go_up_sddjV_info;
           I64[Hp - 8] = _sddjT::I64;
           I64[Hp] = 0 - _sddjT::I64;
           R2 = _sddjv::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_sddjV_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddk4_info" {
     sat_sddk4_info:
         const sat_sddk4_entry;
         const 8589934592;
         const 4294967316;
         const SddB2_srt+1216;
 },
 sat_sddjS_entry() //  [R1]
         { []
         }
     {offset
       cdjrM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdjrN; else goto cdjrO;
       cdjrN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdjrO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddjR::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddjR::I64, 3)) goto udjrP; else goto udjrS;
       udjrP: // global
           if (%MO_S_Lt_W64(_sddjR::I64, 1)) goto udjrQ; else goto udjrR;
       udjrQ: // global
           if (%MO_S_Lt_W64(_sddjR::I64, 0)) goto cdjrG; else goto cdjrH;
       cdjrH: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjrR: // global
           if (%MO_S_Lt_W64(_sddjR::I64, 2)) goto cdjrI; else goto cdjrJ;
       cdjrI: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjrJ: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjrS: // global
           if (%MO_S_Ge_W64(_sddjR::I64, 5)) goto cdjrG; else goto udjrT;
       cdjrG: // global
           R2 = _sddjR::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udjrT: // global
           if (%MO_S_Lt_W64(_sddjR::I64, 4)) goto cdjrK; else goto cdjrL;
       cdjrK: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjrL: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddjS_info" {
     sat_sddjS_info:
         const sat_sddjS_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1216;
 },
 sat_sddk7_entry() //  [R1]
         { []
         }
     {offset
       cdjsa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdjsb; else goto cdjsc;
       cdjsb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdjsc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddk6::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddk6::I64, 3)) goto udjsd; else goto udjsg;
       udjsd: // global
           if (%MO_S_Lt_W64(_sddk6::I64, 1)) goto udjse; else goto udjsf;
       udjse: // global
           if (%MO_S_Lt_W64(_sddk6::I64, 0)) goto cdjs4; else goto cdjs5;
       cdjs5: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjsf: // global
           if (%MO_S_Lt_W64(_sddk6::I64, 2)) goto cdjs6; else goto cdjs7;
       cdjs6: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjs7: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjsg: // global
           if (%MO_S_Ge_W64(_sddk6::I64, 5)) goto cdjs4; else goto udjsh;
       cdjs4: // global
           R2 = _sddk6::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udjsh: // global
           if (%MO_S_Lt_W64(_sddk6::I64, 4)) goto cdjs8; else goto cdjs9;
       cdjs8: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjs9: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddk7_info" {
     sat_sddk7_info:
         const sat_sddk7_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1216;
 },
 sat_sddkk_entry() //  [R1]
         { []
         }
     {offset
       cdjsO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdjsP; else goto cdjsQ;
       cdjsP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdjsQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_sddke_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddkk_info" {
     sat_sddkk_info:
         const sat_sddkk_entry;
         const 8589934593;
         const 4294967311;
         const SddB2_srt+1216;
 },
 sat_sddki_entry() //  [R1]
         { []
         }
     {offset
       cdjt3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdjt4; else goto cdjt5;
       cdjt4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdjt5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddkh::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddkh::I64, 3)) goto udjt6; else goto udjt9;
       udjt6: // global
           if (%MO_S_Lt_W64(_sddkh::I64, 1)) goto udjt7; else goto udjt8;
       udjt7: // global
           if (%MO_S_Lt_W64(_sddkh::I64, 0)) goto cdjsX; else goto cdjsY;
       cdjsY: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjt8: // global
           if (%MO_S_Lt_W64(_sddkh::I64, 2)) goto cdjsZ; else goto cdjt0;
       cdjsZ: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjt0: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjt9: // global
           if (%MO_S_Ge_W64(_sddkh::I64, 5)) goto cdjsX; else goto udjta;
       cdjsX: // global
           R2 = _sddkh::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udjta: // global
           if (%MO_S_Lt_W64(_sddkh::I64, 4)) goto cdjt1; else goto cdjt2;
       cdjt1: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjt2: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddki_info" {
     sat_sddki_info:
         const sat_sddki_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1216;
 },
 sat_sddkm_entry() //  [R1]
         { []
         }
     {offset
       cdjto: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdjtp; else goto cdjtq;
       cdjtp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdjtq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddkl::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddkl::I64, 3)) goto udjtr; else goto udjtu;
       udjtr: // global
           if (%MO_S_Lt_W64(_sddkl::I64, 1)) goto udjts; else goto udjtt;
       udjts: // global
           if (%MO_S_Lt_W64(_sddkl::I64, 0)) goto cdjti; else goto cdjtj;
       cdjtj: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjtt: // global
           if (%MO_S_Lt_W64(_sddkl::I64, 2)) goto cdjtk; else goto cdjtl;
       cdjtk: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjtl: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjtu: // global
           if (%MO_S_Ge_W64(_sddkl::I64, 5)) goto cdjti; else goto udjtv;
       cdjti: // global
           R2 = _sddkl::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udjtv: // global
           if (%MO_S_Lt_W64(_sddkl::I64, 4)) goto cdjtm; else goto cdjtn;
       cdjtm: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjtn: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddkm_info" {
     sat_sddkm_info:
         const sat_sddkm_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1216;
 },
 go_dn_sddke_entry() //  [R1, R2]
         { []
         }
     {offset
       cdjtz: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdjtD; else goto cdjtC;
       cdjtD: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdjtC: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto cdjtx; else goto cdjty;
       cdjtx: // global
           _sddkc::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_sddkk_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _sddkc::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sddki_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdjty: // global
           I64[Hp - 80] = sat_sddkm_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _cdjtF::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _cdjtF::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_sddke_info" {
     go_dn_sddke_info:
         const go_dn_sddke_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const SddB2_srt+1216;
 },
 sat_sddkn_entry() //  [R1]
         { []
         }
     {offset
       cdjtG: // global
           _sddkn::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdjtH; else goto cdjtI;
       cdjtI: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdjtK; else goto cdjtJ;
       cdjtK: // global
           HpAlloc = 24;
           goto cdjtH;
       cdjtH: // global
           R1 = _sddkn::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdjtJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sddkn::P64;
           _sddjv::I64 = I64[_sddkn::P64 + 24];
           _sddkc::I64 = _sddjv::I64 - I64[_sddkn::P64 + 16];
           I64[Hp - 16] = go_dn_sddke_info;
           I64[Hp - 8] = _sddkc::I64;
           I64[Hp] = 1 - _sddkc::I64;
           R2 = _sddjv::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_sddke_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddkn_info" {
     sat_sddkn_info:
         const sat_sddkn_entry;
         const 8589934592;
         const 4294967316;
         const SddB2_srt+1216;
 },
 sat_sddkb_entry() //  [R1]
         { []
         }
     {offset
       cdjtX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdjtY; else goto cdjtZ;
       cdjtY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdjtZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddka::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddka::I64, 3)) goto udju0; else goto udju3;
       udju0: // global
           if (%MO_S_Lt_W64(_sddka::I64, 1)) goto udju1; else goto udju2;
       udju1: // global
           if (%MO_S_Lt_W64(_sddka::I64, 0)) goto cdjtR; else goto cdjtS;
       cdjtS: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udju2: // global
           if (%MO_S_Lt_W64(_sddka::I64, 2)) goto cdjtT; else goto cdjtU;
       cdjtT: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjtU: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udju3: // global
           if (%MO_S_Ge_W64(_sddka::I64, 5)) goto cdjtR; else goto udju4;
       cdjtR: // global
           R2 = _sddka::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udju4: // global
           if (%MO_S_Lt_W64(_sddka::I64, 4)) goto cdjtV; else goto cdjtW;
       cdjtV: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjtW: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddkb_info" {
     sat_sddkb_info:
         const sat_sddkb_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1216;
 },
 sat_sddkq_entry() //  [R1]
         { []
         }
     {offset
       cdjul: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdjum; else goto cdjun;
       cdjum: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdjun: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddkp::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddkp::I64, 3)) goto udjuo; else goto udjur;
       udjuo: // global
           if (%MO_S_Lt_W64(_sddkp::I64, 1)) goto udjup; else goto udjuq;
       udjup: // global
           if (%MO_S_Lt_W64(_sddkp::I64, 0)) goto cdjuf; else goto cdjug;
       cdjug: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjuq: // global
           if (%MO_S_Lt_W64(_sddkp::I64, 2)) goto cdjuh; else goto cdjui;
       cdjuh: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjui: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjur: // global
           if (%MO_S_Ge_W64(_sddkp::I64, 5)) goto cdjuf; else goto udjus;
       cdjuf: // global
           R2 = _sddkp::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udjus: // global
           if (%MO_S_Lt_W64(_sddkp::I64, 4)) goto cdjuj; else goto cdjuk;
       cdjuj: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjuk: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddkq_info" {
     sat_sddkq_info:
         const sat_sddkq_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1216;
 },
 sat_sddkC_entry() //  [R1]
         { []
         }
     {offset
       cdjuV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdjuW; else goto cdjuX;
       cdjuW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdjuX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_sddkw_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddkC_info" {
     sat_sddkC_info:
         const sat_sddkC_entry;
         const 8589934593;
         const 4294967311;
         const SddB2_srt+1216;
 },
 sat_sddkA_entry() //  [R1]
         { []
         }
     {offset
       cdjva: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdjvb; else goto cdjvc;
       cdjvb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdjvc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddkz::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddkz::I64, 3)) goto udjvd; else goto udjvg;
       udjvd: // global
           if (%MO_S_Lt_W64(_sddkz::I64, 1)) goto udjve; else goto udjvf;
       udjve: // global
           if (%MO_S_Lt_W64(_sddkz::I64, 0)) goto cdjv4; else goto cdjv5;
       cdjv5: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjvf: // global
           if (%MO_S_Lt_W64(_sddkz::I64, 2)) goto cdjv6; else goto cdjv7;
       cdjv6: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjv7: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjvg: // global
           if (%MO_S_Ge_W64(_sddkz::I64, 5)) goto cdjv4; else goto udjvh;
       cdjv4: // global
           R2 = _sddkz::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udjvh: // global
           if (%MO_S_Lt_W64(_sddkz::I64, 4)) goto cdjv8; else goto cdjv9;
       cdjv8: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjv9: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddkA_info" {
     sat_sddkA_info:
         const sat_sddkA_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1216;
 },
 sat_sddkE_entry() //  [R1]
         { []
         }
     {offset
       cdjvv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdjvw; else goto cdjvx;
       cdjvw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdjvx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddkD::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddkD::I64, 3)) goto udjvy; else goto udjvB;
       udjvy: // global
           if (%MO_S_Lt_W64(_sddkD::I64, 1)) goto udjvz; else goto udjvA;
       udjvz: // global
           if (%MO_S_Lt_W64(_sddkD::I64, 0)) goto cdjvp; else goto cdjvq;
       cdjvq: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjvA: // global
           if (%MO_S_Lt_W64(_sddkD::I64, 2)) goto cdjvr; else goto cdjvs;
       cdjvr: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjvs: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjvB: // global
           if (%MO_S_Ge_W64(_sddkD::I64, 5)) goto cdjvp; else goto udjvC;
       cdjvp: // global
           R2 = _sddkD::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udjvC: // global
           if (%MO_S_Lt_W64(_sddkD::I64, 4)) goto cdjvt; else goto cdjvu;
       cdjvt: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjvu: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddkE_info" {
     sat_sddkE_info:
         const sat_sddkE_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1216;
 },
 go_up_sddkw_entry() //  [R1, R2]
         { []
         }
     {offset
       cdjvG: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdjvK; else goto cdjvJ;
       cdjvK: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdjvJ: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto cdjvE; else goto cdjvF;
       cdjvE: // global
           _sddku::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_sddkC_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _sddku::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sddkA_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdjvF: // global
           I64[Hp - 80] = sat_sddkE_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _cdjvM::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _cdjvM::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_sddkw_info" {
     go_up_sddkw_info:
         const go_up_sddkw_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const SddB2_srt+1216;
 },
 sat_sddkF_entry() //  [R1]
         { []
         }
     {offset
       cdjvN: // global
           _sddkF::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdjvO; else goto cdjvP;
       cdjvP: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdjvR; else goto cdjvQ;
       cdjvR: // global
           HpAlloc = 24;
           goto cdjvO;
       cdjvO: // global
           R1 = _sddkF::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdjvQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sddkF::P64;
           _sddjv::I64 = I64[_sddkF::P64 + 24];
           _sddku::I64 = _sddjv::I64 - I64[_sddkF::P64 + 16];
           I64[Hp - 16] = go_up_sddkw_info;
           I64[Hp - 8] = _sddku::I64;
           I64[Hp] = 1 - _sddku::I64;
           R2 = _sddjv::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_sddkw_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddkF_info" {
     sat_sddkF_info:
         const sat_sddkF_entry;
         const 8589934592;
         const 4294967316;
         const SddB2_srt+1216;
 },
 sat_sddkt_entry() //  [R1]
         { []
         }
     {offset
       cdjw4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdjw5; else goto cdjw6;
       cdjw5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdjw6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddks::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddks::I64, 3)) goto udjw7; else goto udjwa;
       udjw7: // global
           if (%MO_S_Lt_W64(_sddks::I64, 1)) goto udjw8; else goto udjw9;
       udjw8: // global
           if (%MO_S_Lt_W64(_sddks::I64, 0)) goto cdjvY; else goto cdjvZ;
       cdjvZ: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjw9: // global
           if (%MO_S_Lt_W64(_sddks::I64, 2)) goto cdjw0; else goto cdjw1;
       cdjw0: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjw1: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjwa: // global
           if (%MO_S_Ge_W64(_sddks::I64, 5)) goto cdjvY; else goto udjwb;
       cdjvY: // global
           R2 = _sddks::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udjwb: // global
           if (%MO_S_Lt_W64(_sddks::I64, 4)) goto cdjw2; else goto cdjw3;
       cdjw2: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjw3: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddkt_info" {
     sat_sddkt_info:
         const sat_sddkt_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1216;
 },
 sat_sddkI_entry() //  [R1]
         { []
         }
     {offset
       cdjws: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdjwt; else goto cdjwu;
       cdjwt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdjwu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddkH::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddkH::I64, 3)) goto udjwv; else goto udjwy;
       udjwv: // global
           if (%MO_S_Lt_W64(_sddkH::I64, 1)) goto udjww; else goto udjwx;
       udjww: // global
           if (%MO_S_Lt_W64(_sddkH::I64, 0)) goto cdjwm; else goto cdjwn;
       cdjwn: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjwx: // global
           if (%MO_S_Lt_W64(_sddkH::I64, 2)) goto cdjwo; else goto cdjwp;
       cdjwo: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjwp: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjwy: // global
           if (%MO_S_Ge_W64(_sddkH::I64, 5)) goto cdjwm; else goto udjwz;
       cdjwm: // global
           R2 = _sddkH::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udjwz: // global
           if (%MO_S_Lt_W64(_sddkH::I64, 4)) goto cdjwq; else goto cdjwr;
       cdjwq: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjwr: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddkI_info" {
     sat_sddkI_info:
         const sat_sddkI_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1216;
 },
 sat_sddkV_entry() //  [R1]
         { []
         }
     {offset
       cdjx6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdjx7; else goto cdjx8;
       cdjx7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdjx8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_sddkP_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddkV_info" {
     sat_sddkV_info:
         const sat_sddkV_entry;
         const 8589934593;
         const 4294967311;
         const SddB2_srt+1216;
 },
 sat_sddkT_entry() //  [R1]
         { []
         }
     {offset
       cdjxl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdjxm; else goto cdjxn;
       cdjxm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdjxn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddkS::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddkS::I64, 3)) goto udjxo; else goto udjxr;
       udjxo: // global
           if (%MO_S_Lt_W64(_sddkS::I64, 1)) goto udjxp; else goto udjxq;
       udjxp: // global
           if (%MO_S_Lt_W64(_sddkS::I64, 0)) goto cdjxf; else goto cdjxg;
       cdjxg: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjxq: // global
           if (%MO_S_Lt_W64(_sddkS::I64, 2)) goto cdjxh; else goto cdjxi;
       cdjxh: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjxi: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjxr: // global
           if (%MO_S_Ge_W64(_sddkS::I64, 5)) goto cdjxf; else goto udjxs;
       cdjxf: // global
           R2 = _sddkS::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udjxs: // global
           if (%MO_S_Lt_W64(_sddkS::I64, 4)) goto cdjxj; else goto cdjxk;
       cdjxj: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjxk: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddkT_info" {
     sat_sddkT_info:
         const sat_sddkT_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1216;
 },
 sat_sddkX_entry() //  [R1]
         { []
         }
     {offset
       cdjxG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdjxH; else goto cdjxI;
       cdjxH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdjxI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddkW::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddkW::I64, 3)) goto udjxJ; else goto udjxM;
       udjxJ: // global
           if (%MO_S_Lt_W64(_sddkW::I64, 1)) goto udjxK; else goto udjxL;
       udjxK: // global
           if (%MO_S_Lt_W64(_sddkW::I64, 0)) goto cdjxA; else goto cdjxB;
       cdjxB: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjxL: // global
           if (%MO_S_Lt_W64(_sddkW::I64, 2)) goto cdjxC; else goto cdjxD;
       cdjxC: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjxD: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjxM: // global
           if (%MO_S_Ge_W64(_sddkW::I64, 5)) goto cdjxA; else goto udjxN;
       cdjxA: // global
           R2 = _sddkW::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udjxN: // global
           if (%MO_S_Lt_W64(_sddkW::I64, 4)) goto cdjxE; else goto cdjxF;
       cdjxE: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjxF: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddkX_info" {
     sat_sddkX_info:
         const sat_sddkX_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1216;
 },
 go_dn_sddkP_entry() //  [R1, R2]
         { []
         }
     {offset
       cdjxR: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdjxV; else goto cdjxU;
       cdjxV: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdjxU: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto cdjxP; else goto cdjxQ;
       cdjxP: // global
           _sddkN::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_sddkV_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _sddkN::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sddkT_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdjxQ: // global
           I64[Hp - 80] = sat_sddkX_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _cdjxX::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _cdjxX::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_sddkP_info" {
     go_dn_sddkP_info:
         const go_dn_sddkP_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const SddB2_srt+1216;
 },
 sat_sddkY_entry() //  [R1]
         { []
         }
     {offset
       cdjxY: // global
           _sddkY::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdjxZ; else goto cdjy0;
       cdjy0: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdjy2; else goto cdjy1;
       cdjy2: // global
           HpAlloc = 24;
           goto cdjxZ;
       cdjxZ: // global
           R1 = _sddkY::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdjy1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sddkY::P64;
           _sddjv::I64 = I64[_sddkY::P64 + 24];
           _sddkN::I64 = _sddjv::I64 - I64[_sddkY::P64 + 16];
           I64[Hp - 16] = go_dn_sddkP_info;
           I64[Hp - 8] = _sddkN::I64;
           I64[Hp] = 2 - _sddkN::I64;
           R2 = _sddjv::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_sddkP_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddkY_info" {
     sat_sddkY_info:
         const sat_sddkY_entry;
         const 8589934592;
         const 4294967316;
         const SddB2_srt+1216;
 },
 sat_sddkM_entry() //  [R1]
         { []
         }
     {offset
       cdjyf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdjyg; else goto cdjyh;
       cdjyg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdjyh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddkL::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddkL::I64, 3)) goto udjyi; else goto udjyl;
       udjyi: // global
           if (%MO_S_Lt_W64(_sddkL::I64, 1)) goto udjyj; else goto udjyk;
       udjyj: // global
           if (%MO_S_Lt_W64(_sddkL::I64, 0)) goto cdjy9; else goto cdjya;
       cdjya: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjyk: // global
           if (%MO_S_Lt_W64(_sddkL::I64, 2)) goto cdjyb; else goto cdjyc;
       cdjyb: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjyc: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjyl: // global
           if (%MO_S_Ge_W64(_sddkL::I64, 5)) goto cdjy9; else goto udjym;
       cdjy9: // global
           R2 = _sddkL::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udjym: // global
           if (%MO_S_Lt_W64(_sddkL::I64, 4)) goto cdjyd; else goto cdjye;
       cdjyd: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjye: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddkM_info" {
     sat_sddkM_info:
         const sat_sddkM_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1216;
 },
 sat_sddl1_entry() //  [R1]
         { []
         }
     {offset
       cdjyD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdjyE; else goto cdjyF;
       cdjyE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdjyF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddl0::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddl0::I64, 3)) goto udjyG; else goto udjyJ;
       udjyG: // global
           if (%MO_S_Lt_W64(_sddl0::I64, 1)) goto udjyH; else goto udjyI;
       udjyH: // global
           if (%MO_S_Lt_W64(_sddl0::I64, 0)) goto cdjyx; else goto cdjyy;
       cdjyy: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjyI: // global
           if (%MO_S_Lt_W64(_sddl0::I64, 2)) goto cdjyz; else goto cdjyA;
       cdjyz: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjyA: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjyJ: // global
           if (%MO_S_Ge_W64(_sddl0::I64, 5)) goto cdjyx; else goto udjyK;
       cdjyx: // global
           R2 = _sddl0::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udjyK: // global
           if (%MO_S_Lt_W64(_sddl0::I64, 4)) goto cdjyB; else goto cdjyC;
       cdjyB: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjyC: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddl1_info" {
     sat_sddl1_info:
         const sat_sddl1_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1216;
 },
 sat_sddld_entry() //  [R1]
         { []
         }
     {offset
       cdjzd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdjze; else goto cdjzf;
       cdjze: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdjzf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_sddl7_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddld_info" {
     sat_sddld_info:
         const sat_sddld_entry;
         const 8589934593;
         const 4294967311;
         const SddB2_srt+1216;
 },
 sat_sddlb_entry() //  [R1]
         { []
         }
     {offset
       cdjzs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdjzt; else goto cdjzu;
       cdjzt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdjzu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddla::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddla::I64, 3)) goto udjzv; else goto udjzy;
       udjzv: // global
           if (%MO_S_Lt_W64(_sddla::I64, 1)) goto udjzw; else goto udjzx;
       udjzw: // global
           if (%MO_S_Lt_W64(_sddla::I64, 0)) goto cdjzm; else goto cdjzn;
       cdjzn: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjzx: // global
           if (%MO_S_Lt_W64(_sddla::I64, 2)) goto cdjzo; else goto cdjzp;
       cdjzo: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjzp: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjzy: // global
           if (%MO_S_Ge_W64(_sddla::I64, 5)) goto cdjzm; else goto udjzz;
       cdjzm: // global
           R2 = _sddla::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udjzz: // global
           if (%MO_S_Lt_W64(_sddla::I64, 4)) goto cdjzq; else goto cdjzr;
       cdjzq: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjzr: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddlb_info" {
     sat_sddlb_info:
         const sat_sddlb_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1216;
 },
 sat_sddlf_entry() //  [R1]
         { []
         }
     {offset
       cdjzN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdjzO; else goto cdjzP;
       cdjzO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdjzP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddle::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddle::I64, 3)) goto udjzQ; else goto udjzT;
       udjzQ: // global
           if (%MO_S_Lt_W64(_sddle::I64, 1)) goto udjzR; else goto udjzS;
       udjzR: // global
           if (%MO_S_Lt_W64(_sddle::I64, 0)) goto cdjzH; else goto cdjzI;
       cdjzI: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjzS: // global
           if (%MO_S_Lt_W64(_sddle::I64, 2)) goto cdjzJ; else goto cdjzK;
       cdjzJ: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjzK: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjzT: // global
           if (%MO_S_Ge_W64(_sddle::I64, 5)) goto cdjzH; else goto udjzU;
       cdjzH: // global
           R2 = _sddle::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udjzU: // global
           if (%MO_S_Lt_W64(_sddle::I64, 4)) goto cdjzL; else goto cdjzM;
       cdjzL: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjzM: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddlf_info" {
     sat_sddlf_info:
         const sat_sddlf_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1216;
 },
 go_up_sddl7_entry() //  [R1, R2]
         { []
         }
     {offset
       cdjzY: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdjA2; else goto cdjA1;
       cdjA2: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdjA1: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto cdjzW; else goto cdjzX;
       cdjzW: // global
           _sddl5::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_sddld_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _sddl5::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sddlb_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdjzX: // global
           I64[Hp - 80] = sat_sddlf_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _cdjA4::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _cdjA4::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_sddl7_info" {
     go_up_sddl7_info:
         const go_up_sddl7_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const SddB2_srt+1216;
 },
 sat_sddlg_entry() //  [R1]
         { []
         }
     {offset
       cdjA5: // global
           _sddlg::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdjA6; else goto cdjA7;
       cdjA7: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdjA9; else goto cdjA8;
       cdjA9: // global
           HpAlloc = 24;
           goto cdjA6;
       cdjA6: // global
           R1 = _sddlg::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdjA8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sddlg::P64;
           _sddjv::I64 = I64[_sddlg::P64 + 24];
           _sddl5::I64 = _sddjv::I64 - I64[_sddlg::P64 + 16];
           I64[Hp - 16] = go_up_sddl7_info;
           I64[Hp - 8] = _sddl5::I64;
           I64[Hp] = 2 - _sddl5::I64;
           R2 = _sddjv::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_sddl7_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddlg_info" {
     sat_sddlg_info:
         const sat_sddlg_entry;
         const 8589934592;
         const 4294967316;
         const SddB2_srt+1216;
 },
 sat_sddl4_entry() //  [R1]
         { []
         }
     {offset
       cdjAm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdjAn; else goto cdjAo;
       cdjAn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdjAo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddl3::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddl3::I64, 3)) goto udjAp; else goto udjAs;
       udjAp: // global
           if (%MO_S_Lt_W64(_sddl3::I64, 1)) goto udjAq; else goto udjAr;
       udjAq: // global
           if (%MO_S_Lt_W64(_sddl3::I64, 0)) goto cdjAg; else goto cdjAh;
       cdjAh: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjAr: // global
           if (%MO_S_Lt_W64(_sddl3::I64, 2)) goto cdjAi; else goto cdjAj;
       cdjAi: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjAj: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjAs: // global
           if (%MO_S_Ge_W64(_sddl3::I64, 5)) goto cdjAg; else goto udjAt;
       cdjAg: // global
           R2 = _sddl3::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udjAt: // global
           if (%MO_S_Lt_W64(_sddl3::I64, 4)) goto cdjAk; else goto cdjAl;
       cdjAk: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjAl: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddl4_info" {
     sat_sddl4_info:
         const sat_sddl4_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1216;
 },
 sat_sddlj_entry() //  [R1]
         { []
         }
     {offset
       cdjAK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdjAL; else goto cdjAM;
       cdjAL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdjAM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddli::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddli::I64, 3)) goto udjAN; else goto udjAQ;
       udjAN: // global
           if (%MO_S_Lt_W64(_sddli::I64, 1)) goto udjAO; else goto udjAP;
       udjAO: // global
           if (%MO_S_Lt_W64(_sddli::I64, 0)) goto cdjAE; else goto cdjAF;
       cdjAF: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjAP: // global
           if (%MO_S_Lt_W64(_sddli::I64, 2)) goto cdjAG; else goto cdjAH;
       cdjAG: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjAH: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjAQ: // global
           if (%MO_S_Ge_W64(_sddli::I64, 5)) goto cdjAE; else goto udjAR;
       cdjAE: // global
           R2 = _sddli::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udjAR: // global
           if (%MO_S_Lt_W64(_sddli::I64, 4)) goto cdjAI; else goto cdjAJ;
       cdjAI: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjAJ: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddlj_info" {
     sat_sddlj_info:
         const sat_sddlj_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1216;
 },
 sat_sddlw_entry() //  [R1]
         { []
         }
     {offset
       cdjBo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdjBp; else goto cdjBq;
       cdjBp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdjBq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_sddlq_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddlw_info" {
     sat_sddlw_info:
         const sat_sddlw_entry;
         const 8589934593;
         const 4294967311;
         const SddB2_srt+1216;
 },
 sat_sddlu_entry() //  [R1]
         { []
         }
     {offset
       cdjBD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdjBE; else goto cdjBF;
       cdjBE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdjBF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddlt::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddlt::I64, 3)) goto udjBG; else goto udjBJ;
       udjBG: // global
           if (%MO_S_Lt_W64(_sddlt::I64, 1)) goto udjBH; else goto udjBI;
       udjBH: // global
           if (%MO_S_Lt_W64(_sddlt::I64, 0)) goto cdjBx; else goto cdjBy;
       cdjBy: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjBI: // global
           if (%MO_S_Lt_W64(_sddlt::I64, 2)) goto cdjBz; else goto cdjBA;
       cdjBz: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjBA: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjBJ: // global
           if (%MO_S_Ge_W64(_sddlt::I64, 5)) goto cdjBx; else goto udjBK;
       cdjBx: // global
           R2 = _sddlt::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udjBK: // global
           if (%MO_S_Lt_W64(_sddlt::I64, 4)) goto cdjBB; else goto cdjBC;
       cdjBB: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjBC: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddlu_info" {
     sat_sddlu_info:
         const sat_sddlu_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1216;
 },
 sat_sddly_entry() //  [R1]
         { []
         }
     {offset
       cdjBY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdjBZ; else goto cdjC0;
       cdjBZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdjC0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddlx::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddlx::I64, 3)) goto udjC1; else goto udjC4;
       udjC1: // global
           if (%MO_S_Lt_W64(_sddlx::I64, 1)) goto udjC2; else goto udjC3;
       udjC2: // global
           if (%MO_S_Lt_W64(_sddlx::I64, 0)) goto cdjBS; else goto cdjBT;
       cdjBT: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjC3: // global
           if (%MO_S_Lt_W64(_sddlx::I64, 2)) goto cdjBU; else goto cdjBV;
       cdjBU: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjBV: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjC4: // global
           if (%MO_S_Ge_W64(_sddlx::I64, 5)) goto cdjBS; else goto udjC5;
       cdjBS: // global
           R2 = _sddlx::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udjC5: // global
           if (%MO_S_Lt_W64(_sddlx::I64, 4)) goto cdjBW; else goto cdjBX;
       cdjBW: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjBX: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddly_info" {
     sat_sddly_info:
         const sat_sddly_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1216;
 },
 go_dn_sddlq_entry() //  [R1, R2]
         { []
         }
     {offset
       cdjC9: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdjCd; else goto cdjCc;
       cdjCd: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdjCc: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto cdjC7; else goto cdjC8;
       cdjC7: // global
           _sddlo::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_sddlw_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _sddlo::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sddlu_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdjC8: // global
           I64[Hp - 80] = sat_sddly_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _cdjCf::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _cdjCf::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_sddlq_info" {
     go_dn_sddlq_info:
         const go_dn_sddlq_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const SddB2_srt+1216;
 },
 sat_sddlz_entry() //  [R1]
         { []
         }
     {offset
       cdjCg: // global
           _sddlz::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdjCh; else goto cdjCi;
       cdjCi: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdjCk; else goto cdjCj;
       cdjCk: // global
           HpAlloc = 24;
           goto cdjCh;
       cdjCh: // global
           R1 = _sddlz::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdjCj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sddlz::P64;
           _sddjv::I64 = I64[_sddlz::P64 + 24];
           _sddlo::I64 = _sddjv::I64 - I64[_sddlz::P64 + 16];
           I64[Hp - 16] = go_dn_sddlq_info;
           I64[Hp - 8] = _sddlo::I64;
           I64[Hp] = 3 - _sddlo::I64;
           R2 = _sddjv::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_sddlq_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddlz_info" {
     sat_sddlz_info:
         const sat_sddlz_entry;
         const 8589934592;
         const 4294967316;
         const SddB2_srt+1216;
 },
 sat_sddln_entry() //  [R1]
         { []
         }
     {offset
       cdjCx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdjCy; else goto cdjCz;
       cdjCy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdjCz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddlm::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddlm::I64, 3)) goto udjCA; else goto udjCD;
       udjCA: // global
           if (%MO_S_Lt_W64(_sddlm::I64, 1)) goto udjCB; else goto udjCC;
       udjCB: // global
           if (%MO_S_Lt_W64(_sddlm::I64, 0)) goto cdjCr; else goto cdjCs;
       cdjCs: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjCC: // global
           if (%MO_S_Lt_W64(_sddlm::I64, 2)) goto cdjCt; else goto cdjCu;
       cdjCt: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjCu: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjCD: // global
           if (%MO_S_Ge_W64(_sddlm::I64, 5)) goto cdjCr; else goto udjCE;
       cdjCr: // global
           R2 = _sddlm::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udjCE: // global
           if (%MO_S_Lt_W64(_sddlm::I64, 4)) goto cdjCv; else goto cdjCw;
       cdjCv: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjCw: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddln_info" {
     sat_sddln_info:
         const sat_sddln_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1216;
 },
 sat_sddlC_entry() //  [R1]
         { []
         }
     {offset
       cdjCV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdjCW; else goto cdjCX;
       cdjCW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdjCX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddlB::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddlB::I64, 3)) goto udjCY; else goto udjD1;
       udjCY: // global
           if (%MO_S_Lt_W64(_sddlB::I64, 1)) goto udjCZ; else goto udjD0;
       udjCZ: // global
           if (%MO_S_Lt_W64(_sddlB::I64, 0)) goto cdjCP; else goto cdjCQ;
       cdjCQ: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjD0: // global
           if (%MO_S_Lt_W64(_sddlB::I64, 2)) goto cdjCR; else goto cdjCS;
       cdjCR: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjCS: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjD1: // global
           if (%MO_S_Ge_W64(_sddlB::I64, 5)) goto cdjCP; else goto udjD2;
       cdjCP: // global
           R2 = _sddlB::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udjD2: // global
           if (%MO_S_Lt_W64(_sddlB::I64, 4)) goto cdjCT; else goto cdjCU;
       cdjCT: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjCU: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddlC_info" {
     sat_sddlC_info:
         const sat_sddlC_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1216;
 },
 sat_sddlO_entry() //  [R1]
         { []
         }
     {offset
       cdjDv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdjDw; else goto cdjDx;
       cdjDw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdjDx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_sddlI_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddlO_info" {
     sat_sddlO_info:
         const sat_sddlO_entry;
         const 8589934593;
         const 4294967311;
         const SddB2_srt+1216;
 },
 sat_sddlM_entry() //  [R1]
         { []
         }
     {offset
       cdjDK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdjDL; else goto cdjDM;
       cdjDL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdjDM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddlL::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddlL::I64, 3)) goto udjDN; else goto udjDQ;
       udjDN: // global
           if (%MO_S_Lt_W64(_sddlL::I64, 1)) goto udjDO; else goto udjDP;
       udjDO: // global
           if (%MO_S_Lt_W64(_sddlL::I64, 0)) goto cdjDE; else goto cdjDF;
       cdjDF: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjDP: // global
           if (%MO_S_Lt_W64(_sddlL::I64, 2)) goto cdjDG; else goto cdjDH;
       cdjDG: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjDH: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjDQ: // global
           if (%MO_S_Ge_W64(_sddlL::I64, 5)) goto cdjDE; else goto udjDR;
       cdjDE: // global
           R2 = _sddlL::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udjDR: // global
           if (%MO_S_Lt_W64(_sddlL::I64, 4)) goto cdjDI; else goto cdjDJ;
       cdjDI: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjDJ: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddlM_info" {
     sat_sddlM_info:
         const sat_sddlM_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1216;
 },
 sat_sddlQ_entry() //  [R1]
         { []
         }
     {offset
       cdjE5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdjE6; else goto cdjE7;
       cdjE6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdjE7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddlP::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddlP::I64, 3)) goto udjE8; else goto udjEb;
       udjE8: // global
           if (%MO_S_Lt_W64(_sddlP::I64, 1)) goto udjE9; else goto udjEa;
       udjE9: // global
           if (%MO_S_Lt_W64(_sddlP::I64, 0)) goto cdjDZ; else goto cdjE0;
       cdjE0: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjEa: // global
           if (%MO_S_Lt_W64(_sddlP::I64, 2)) goto cdjE1; else goto cdjE2;
       cdjE1: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjE2: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjEb: // global
           if (%MO_S_Ge_W64(_sddlP::I64, 5)) goto cdjDZ; else goto udjEc;
       cdjDZ: // global
           R2 = _sddlP::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udjEc: // global
           if (%MO_S_Lt_W64(_sddlP::I64, 4)) goto cdjE3; else goto cdjE4;
       cdjE3: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjE4: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddlQ_info" {
     sat_sddlQ_info:
         const sat_sddlQ_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1216;
 },
 go_up_sddlI_entry() //  [R1, R2]
         { []
         }
     {offset
       cdjEg: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdjEk; else goto cdjEj;
       cdjEk: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdjEj: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto cdjEe; else goto cdjEf;
       cdjEe: // global
           _sddlG::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_sddlO_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _sddlG::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sddlM_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdjEf: // global
           I64[Hp - 80] = sat_sddlQ_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _cdjEm::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _cdjEm::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_sddlI_info" {
     go_up_sddlI_info:
         const go_up_sddlI_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const SddB2_srt+1216;
 },
 sat_sddlR_entry() //  [R1]
         { []
         }
     {offset
       cdjEn: // global
           _sddlR::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdjEo; else goto cdjEp;
       cdjEp: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdjEr; else goto cdjEq;
       cdjEr: // global
           HpAlloc = 24;
           goto cdjEo;
       cdjEo: // global
           R1 = _sddlR::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdjEq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sddlR::P64;
           _sddjv::I64 = I64[_sddlR::P64 + 24];
           _sddlG::I64 = _sddjv::I64 - I64[_sddlR::P64 + 16];
           I64[Hp - 16] = go_up_sddlI_info;
           I64[Hp - 8] = _sddlG::I64;
           I64[Hp] = 3 - _sddlG::I64;
           R2 = _sddjv::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_sddlI_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddlR_info" {
     sat_sddlR_info:
         const sat_sddlR_entry;
         const 8589934592;
         const 4294967316;
         const SddB2_srt+1216;
 },
 sat_sddlF_entry() //  [R1]
         { []
         }
     {offset
       cdjEE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdjEF; else goto cdjEG;
       cdjEF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdjEG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddlE::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddlE::I64, 3)) goto udjEH; else goto udjEK;
       udjEH: // global
           if (%MO_S_Lt_W64(_sddlE::I64, 1)) goto udjEI; else goto udjEJ;
       udjEI: // global
           if (%MO_S_Lt_W64(_sddlE::I64, 0)) goto cdjEy; else goto cdjEz;
       cdjEz: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjEJ: // global
           if (%MO_S_Lt_W64(_sddlE::I64, 2)) goto cdjEA; else goto cdjEB;
       cdjEA: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjEB: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjEK: // global
           if (%MO_S_Ge_W64(_sddlE::I64, 5)) goto cdjEy; else goto udjEL;
       cdjEy: // global
           R2 = _sddlE::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udjEL: // global
           if (%MO_S_Lt_W64(_sddlE::I64, 4)) goto cdjEC; else goto cdjED;
       cdjEC: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjED: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddlF_info" {
     sat_sddlF_info:
         const sat_sddlF_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1216;
 },
 sat_sddlU_entry() //  [R1]
         { []
         }
     {offset
       cdjF2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdjF3; else goto cdjF4;
       cdjF3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdjF4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddlT::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddlT::I64, 3)) goto udjF5; else goto udjF8;
       udjF5: // global
           if (%MO_S_Lt_W64(_sddlT::I64, 1)) goto udjF6; else goto udjF7;
       udjF6: // global
           if (%MO_S_Lt_W64(_sddlT::I64, 0)) goto cdjEW; else goto cdjEX;
       cdjEX: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjF7: // global
           if (%MO_S_Lt_W64(_sddlT::I64, 2)) goto cdjEY; else goto cdjEZ;
       cdjEY: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjEZ: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjF8: // global
           if (%MO_S_Ge_W64(_sddlT::I64, 5)) goto cdjEW; else goto udjF9;
       cdjEW: // global
           R2 = _sddlT::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udjF9: // global
           if (%MO_S_Lt_W64(_sddlT::I64, 4)) goto cdjF0; else goto cdjF1;
       cdjF0: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjF1: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddlU_info" {
     sat_sddlU_info:
         const sat_sddlU_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1216;
 },
 sat_sddm7_entry() //  [R1]
         { []
         }
     {offset
       cdjFG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdjFH; else goto cdjFI;
       cdjFH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdjFI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_sddm1_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddm7_info" {
     sat_sddm7_info:
         const sat_sddm7_entry;
         const 8589934593;
         const 4294967311;
         const SddB2_srt+1216;
 },
 sat_sddm5_entry() //  [R1]
         { []
         }
     {offset
       cdjFV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdjFW; else goto cdjFX;
       cdjFW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdjFX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddm4::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddm4::I64, 3)) goto udjFY; else goto udjG1;
       udjFY: // global
           if (%MO_S_Lt_W64(_sddm4::I64, 1)) goto udjFZ; else goto udjG0;
       udjFZ: // global
           if (%MO_S_Lt_W64(_sddm4::I64, 0)) goto cdjFP; else goto cdjFQ;
       cdjFQ: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjG0: // global
           if (%MO_S_Lt_W64(_sddm4::I64, 2)) goto cdjFR; else goto cdjFS;
       cdjFR: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjFS: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjG1: // global
           if (%MO_S_Ge_W64(_sddm4::I64, 5)) goto cdjFP; else goto udjG2;
       cdjFP: // global
           R2 = _sddm4::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udjG2: // global
           if (%MO_S_Lt_W64(_sddm4::I64, 4)) goto cdjFT; else goto cdjFU;
       cdjFT: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjFU: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddm5_info" {
     sat_sddm5_info:
         const sat_sddm5_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1216;
 },
 sat_sddm9_entry() //  [R1]
         { []
         }
     {offset
       cdjGg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdjGh; else goto cdjGi;
       cdjGh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdjGi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddm8::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddm8::I64, 3)) goto udjGj; else goto udjGm;
       udjGj: // global
           if (%MO_S_Lt_W64(_sddm8::I64, 1)) goto udjGk; else goto udjGl;
       udjGk: // global
           if (%MO_S_Lt_W64(_sddm8::I64, 0)) goto cdjGa; else goto cdjGb;
       cdjGb: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjGl: // global
           if (%MO_S_Lt_W64(_sddm8::I64, 2)) goto cdjGc; else goto cdjGd;
       cdjGc: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjGd: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjGm: // global
           if (%MO_S_Ge_W64(_sddm8::I64, 5)) goto cdjGa; else goto udjGn;
       cdjGa: // global
           R2 = _sddm8::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udjGn: // global
           if (%MO_S_Lt_W64(_sddm8::I64, 4)) goto cdjGe; else goto cdjGf;
       cdjGe: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjGf: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddm9_info" {
     sat_sddm9_info:
         const sat_sddm9_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1216;
 },
 go_dn_sddm1_entry() //  [R1, R2]
         { []
         }
     {offset
       cdjGr: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdjGv; else goto cdjGu;
       cdjGv: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdjGu: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto cdjGp; else goto cdjGq;
       cdjGp: // global
           _sddlZ::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_sddm7_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _sddlZ::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sddm5_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdjGq: // global
           I64[Hp - 80] = sat_sddm9_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _cdjGx::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _cdjGx::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_sddm1_info" {
     go_dn_sddm1_info:
         const go_dn_sddm1_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const SddB2_srt+1216;
 },
 sat_sddma_entry() //  [R1]
         { []
         }
     {offset
       cdjGy: // global
           _sddma::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdjGz; else goto cdjGA;
       cdjGA: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdjGC; else goto cdjGB;
       cdjGC: // global
           HpAlloc = 24;
           goto cdjGz;
       cdjGz: // global
           R1 = _sddma::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdjGB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sddma::P64;
           _sddjv::I64 = I64[_sddma::P64 + 24];
           _sddlZ::I64 = _sddjv::I64 - I64[_sddma::P64 + 16];
           I64[Hp - 16] = go_dn_sddm1_info;
           I64[Hp - 8] = _sddlZ::I64;
           I64[Hp] = 4 - _sddlZ::I64;
           R2 = _sddjv::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_sddm1_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddma_info" {
     sat_sddma_info:
         const sat_sddma_entry;
         const 8589934592;
         const 4294967316;
         const SddB2_srt+1216;
 },
 sat_sddlY_entry() //  [R1]
         { []
         }
     {offset
       cdjGP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdjGQ; else goto cdjGR;
       cdjGQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdjGR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddlX::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddlX::I64, 3)) goto udjGS; else goto udjGV;
       udjGS: // global
           if (%MO_S_Lt_W64(_sddlX::I64, 1)) goto udjGT; else goto udjGU;
       udjGT: // global
           if (%MO_S_Lt_W64(_sddlX::I64, 0)) goto cdjGJ; else goto cdjGK;
       cdjGK: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjGU: // global
           if (%MO_S_Lt_W64(_sddlX::I64, 2)) goto cdjGL; else goto cdjGM;
       cdjGL: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjGM: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjGV: // global
           if (%MO_S_Ge_W64(_sddlX::I64, 5)) goto cdjGJ; else goto udjGW;
       cdjGJ: // global
           R2 = _sddlX::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udjGW: // global
           if (%MO_S_Lt_W64(_sddlX::I64, 4)) goto cdjGN; else goto cdjGO;
       cdjGN: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjGO: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddlY_info" {
     sat_sddlY_info:
         const sat_sddlY_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1216;
 },
 sat_sddmd_entry() //  [R1]
         { []
         }
     {offset
       cdjHd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdjHe; else goto cdjHf;
       cdjHe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdjHf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddmc::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddmc::I64, 3)) goto udjHg; else goto udjHj;
       udjHg: // global
           if (%MO_S_Lt_W64(_sddmc::I64, 1)) goto udjHh; else goto udjHi;
       udjHh: // global
           if (%MO_S_Lt_W64(_sddmc::I64, 0)) goto cdjH7; else goto cdjH8;
       cdjH8: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjHi: // global
           if (%MO_S_Lt_W64(_sddmc::I64, 2)) goto cdjH9; else goto cdjHa;
       cdjH9: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjHa: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjHj: // global
           if (%MO_S_Ge_W64(_sddmc::I64, 5)) goto cdjH7; else goto udjHk;
       cdjH7: // global
           R2 = _sddmc::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udjHk: // global
           if (%MO_S_Lt_W64(_sddmc::I64, 4)) goto cdjHb; else goto cdjHc;
       cdjHb: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjHc: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddmd_info" {
     sat_sddmd_info:
         const sat_sddmd_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1216;
 },
 sat_sddmp_entry() //  [R1]
         { []
         }
     {offset
       cdjHN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdjHO; else goto cdjHP;
       cdjHO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdjHP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_sddmj_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddmp_info" {
     sat_sddmp_info:
         const sat_sddmp_entry;
         const 8589934593;
         const 4294967311;
         const SddB2_srt+1216;
 },
 sat_sddmn_entry() //  [R1]
         { []
         }
     {offset
       cdjI2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdjI3; else goto cdjI4;
       cdjI3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdjI4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddmm::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddmm::I64, 3)) goto udjI5; else goto udjI8;
       udjI5: // global
           if (%MO_S_Lt_W64(_sddmm::I64, 1)) goto udjI6; else goto udjI7;
       udjI6: // global
           if (%MO_S_Lt_W64(_sddmm::I64, 0)) goto cdjHW; else goto cdjHX;
       cdjHX: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjI7: // global
           if (%MO_S_Lt_W64(_sddmm::I64, 2)) goto cdjHY; else goto cdjHZ;
       cdjHY: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjHZ: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjI8: // global
           if (%MO_S_Ge_W64(_sddmm::I64, 5)) goto cdjHW; else goto udjI9;
       cdjHW: // global
           R2 = _sddmm::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udjI9: // global
           if (%MO_S_Lt_W64(_sddmm::I64, 4)) goto cdjI0; else goto cdjI1;
       cdjI0: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjI1: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddmn_info" {
     sat_sddmn_info:
         const sat_sddmn_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1216;
 },
 sat_sddmr_entry() //  [R1]
         { []
         }
     {offset
       cdjIn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdjIo; else goto cdjIp;
       cdjIo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdjIp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddmq::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddmq::I64, 3)) goto udjIq; else goto udjIt;
       udjIq: // global
           if (%MO_S_Lt_W64(_sddmq::I64, 1)) goto udjIr; else goto udjIs;
       udjIr: // global
           if (%MO_S_Lt_W64(_sddmq::I64, 0)) goto cdjIh; else goto cdjIi;
       cdjIi: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjIs: // global
           if (%MO_S_Lt_W64(_sddmq::I64, 2)) goto cdjIj; else goto cdjIk;
       cdjIj: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjIk: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjIt: // global
           if (%MO_S_Ge_W64(_sddmq::I64, 5)) goto cdjIh; else goto udjIu;
       cdjIh: // global
           R2 = _sddmq::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udjIu: // global
           if (%MO_S_Lt_W64(_sddmq::I64, 4)) goto cdjIl; else goto cdjIm;
       cdjIl: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjIm: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddmr_info" {
     sat_sddmr_info:
         const sat_sddmr_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1216;
 },
 go_up_sddmj_entry() //  [R1, R2]
         { []
         }
     {offset
       cdjIy: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdjIC; else goto cdjIB;
       cdjIC: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdjIB: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto cdjIw; else goto cdjIx;
       cdjIw: // global
           _sddmh::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_sddmp_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _sddmh::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sddmn_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdjIx: // global
           I64[Hp - 80] = sat_sddmr_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _cdjIE::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _cdjIE::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_sddmj_info" {
     go_up_sddmj_info:
         const go_up_sddmj_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const SddB2_srt+1216;
 },
 sat_sddms_entry() //  [R1]
         { []
         }
     {offset
       cdjIF: // global
           _sddms::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdjIG; else goto cdjIH;
       cdjIH: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdjIJ; else goto cdjII;
       cdjIJ: // global
           HpAlloc = 24;
           goto cdjIG;
       cdjIG: // global
           R1 = _sddms::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdjII: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sddms::P64;
           _sddjv::I64 = I64[_sddms::P64 + 24];
           _sddmh::I64 = _sddjv::I64 - I64[_sddms::P64 + 16];
           I64[Hp - 16] = go_up_sddmj_info;
           I64[Hp - 8] = _sddmh::I64;
           I64[Hp] = 4 - _sddmh::I64;
           R2 = _sddjv::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_sddmj_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddms_info" {
     sat_sddms_info:
         const sat_sddms_entry;
         const 8589934592;
         const 4294967316;
         const SddB2_srt+1216;
 },
 sat_sddmg_entry() //  [R1]
         { []
         }
     {offset
       cdjIW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdjIX; else goto cdjIY;
       cdjIX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdjIY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddmf::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddmf::I64, 3)) goto udjIZ; else goto udjJ2;
       udjIZ: // global
           if (%MO_S_Lt_W64(_sddmf::I64, 1)) goto udjJ0; else goto udjJ1;
       udjJ0: // global
           if (%MO_S_Lt_W64(_sddmf::I64, 0)) goto cdjIQ; else goto cdjIR;
       cdjIR: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjJ1: // global
           if (%MO_S_Lt_W64(_sddmf::I64, 2)) goto cdjIS; else goto cdjIT;
       cdjIS: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjIT: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjJ2: // global
           if (%MO_S_Ge_W64(_sddmf::I64, 5)) goto cdjIQ; else goto udjJ3;
       cdjIQ: // global
           R2 = _sddmf::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udjJ3: // global
           if (%MO_S_Lt_W64(_sddmf::I64, 4)) goto cdjIU; else goto cdjIV;
       cdjIU: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjIV: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddmg_info" {
     sat_sddmg_info:
         const sat_sddmg_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1216;
 },
 sat_sddmv_entry() //  [R1]
         { []
         }
     {offset
       cdjJk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdjJl; else goto cdjJm;
       cdjJl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdjJm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddmu::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddmu::I64, 3)) goto udjJn; else goto udjJq;
       udjJn: // global
           if (%MO_S_Lt_W64(_sddmu::I64, 1)) goto udjJo; else goto udjJp;
       udjJo: // global
           if (%MO_S_Lt_W64(_sddmu::I64, 0)) goto cdjJe; else goto cdjJf;
       cdjJf: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjJp: // global
           if (%MO_S_Lt_W64(_sddmu::I64, 2)) goto cdjJg; else goto cdjJh;
       cdjJg: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjJh: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udjJq: // global
           if (%MO_S_Ge_W64(_sddmu::I64, 5)) goto cdjJe; else goto udjJr;
       cdjJe: // global
           R2 = _sddmu::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udjJr: // global
           if (%MO_S_Lt_W64(_sddmu::I64, 4)) goto cdjJi; else goto cdjJj;
       cdjJi: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdjJj: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddmv_info" {
     sat_sddmv_info:
         const sat_sddmv_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1216;
 },
 GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFromThenTo_entry() //  [R2,
                                                                 R3, R4]
         { []
         }
     {offset
       cdjJC: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdjJD; else goto cdjJE;
       cdjJD: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFromThenTo_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdjJE: // global
           I64[Sp - 24] = block_cdjJs_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udjMo; else goto cdjJt;
       udjMo: // global
           call _cdjJs(R1) args: 0, res: 0, upd: 0;
       cdjJt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFromThenTo_info" {
     GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFromThenTo_info:
         const GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFromThenTo_entry;
         const 0;
         const 4503603922337806;
         const 12884901911;
         const SddB2_srt+1216;
 },
 _cdjJs() //  [R1]
         { []
         }
     {offset
       cdjJs: // global
           _sddjq::P64 = P64[Sp + 8];
           _cdjJB::P64 = R1 & 7;
           if (_cdjJB::P64 < 4) goto udjMh; else goto udjMj;
       udjMh: // global
           if (_cdjJB::P64 < 3) goto udjMi; else goto cdjJy;
       udjMi: // global
           if (_cdjJB::P64 < 2) goto cdjJw; else goto cdjJx;
       cdjJw: // global
           _sddjt::I64 = 0;
           goto sddjs;
       cdjJx: // global
           _sddjt::I64 = 1;
           goto sddjs;
       cdjJy: // global
           _sddjt::I64 = 2;
           goto sddjs;
       udjMj: // global
           if (_cdjJB::P64 < 5) goto cdjJz; else goto cdjJA;
       cdjJz: // global
           _sddjt::I64 = 3;
           goto sddjs;
       cdjJA: // global
           _sddjt::I64 = 4;
           goto sddjs;
       sddjs: // global
           I64[Sp] = block_cdjJF_info;
           R1 = _sddjq::P64;
           I64[Sp + 8] = _sddjt::I64;
           if (R1 & 7 != 0) goto udjMn; else goto cdjLA;
       udjMn: // global
           call _cdjJF(R1) args: 0, res: 0, upd: 0;
       cdjLA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdjJs_info" {
     block_cdjJs_info:
         const _cdjJs;
         const 2;
         const 4294967326;
         const SddB2_srt+1216;
 },
 _cdjJF() //  [R1]
         { []
         }
     {offset
       cdjJF: // global
           _sddjr::P64 = P64[Sp + 16];
           _cdjMc::P64 = R1 & 7;
           if (_cdjMc::P64 < 4) goto udjMk; else goto udjMm;
       udjMk: // global
           if (_cdjMc::P64 < 3) goto udjMl; else goto cdjLO;
       udjMl: // global
           if (_cdjMc::P64 < 2) goto cdjLG; else goto cdjLK;
       cdjLG: // global
           _sddjv::I64 = 0;
           goto sddju;
       cdjLK: // global
           _sddjv::I64 = 1;
           goto sddju;
       cdjLO: // global
           _sddjv::I64 = 2;
           goto sddju;
       udjMm: // global
           if (_cdjMc::P64 < 5) goto cdjLS; else goto cdjLW;
       cdjLS: // global
           _sddjv::I64 = 3;
           goto sddju;
       cdjLW: // global
           _sddjv::I64 = 4;
           goto sddju;
       sddju: // global
           I64[Sp] = block_cdjnX_info;
           R1 = _sddjr::P64;
           I64[Sp + 16] = _sddjv::I64;
           if (R1 & 7 != 0) goto udjMp; else goto cdjnY;
       udjMp: // global
           call _cdjnX(R1) args: 0, res: 0, upd: 0;
       cdjnY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdjJF_info" {
     block_cdjJF_info:
         const _cdjJF;
         const 66;
         const 4294967326;
         const SddB2_srt+1216;
 },
 _cdjnX() //  [R1]
         { []
         }
     {offset
       cdjnX: // global
           _sddjt::I64 = I64[Sp + 8];
           _sddjv::I64 = I64[Sp + 16];
           _cdjMd::P64 = R1 & 7;
           if (_cdjMd::P64 < 4) goto udjMe; else goto udjMg;
       udjMe: // global
           if (_cdjMd::P64 < 3) goto udjMf; else goto cdjKt;
       udjMf: // global
           if (_cdjMd::P64 < 2) goto cdjJJ; else goto cdjK6;
       cdjJJ: // global
           Hp = Hp + 80;
           _sddjw::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cdjLg; else goto cdjJL;
       cdjJL: // global
           if (%MO_S_Lt_W64(_sddjv::I64,
                            _sddjt::I64)) goto cdjJW; else goto cdjK5;
       cdjJW: // global
           if (%MO_S_Le_W64(0, _sddjv::I64)) goto cdjJP; else goto cdjJU;
       cdjJP: // global
           I64[Hp - 72] = sat_sddjM_info;
           I64[Hp - 56] = _sddjt::I64;
           I64[Hp - 48] = _sddjv::I64;
           I64[Hp - 40] = sat_sddjA_info;
           I64[Hp - 24] = _sddjt::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdjJU: // global
           if (%MO_S_Gt_W64(0, _sddjt::I64)) goto cdjLx; else goto cdjJS;
       cdjJS: // global
           I64[Hp - 72] = sat_sddjP_info;
           I64[Hp - 56] = _sddjt::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _cdjJQ::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _cdjJQ::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdjK5: // global
           if (%MO_S_Ge_W64(0, _sddjv::I64)) goto cdjJZ; else goto cdjK4;
       cdjJZ: // global
           I64[Hp - 72] = sat_sddk4_info;
           I64[Hp - 56] = _sddjt::I64;
           I64[Hp - 48] = _sddjv::I64;
           I64[Hp - 40] = sat_sddjS_info;
           I64[Hp - 24] = _sddjt::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdjK4: // global
           if (%MO_S_Lt_W64(0, _sddjt::I64)) goto cdjLx; else goto cdjK2;
       cdjK2: // global
           I64[Hp - 72] = sat_sddk7_info;
           I64[Hp - 56] = _sddjt::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _cdjK0::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _cdjK0::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdjK6: // global
           Hp = Hp + 80;
           _sddjw::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cdjLg; else goto cdjK8;
       cdjK8: // global
           if (%MO_S_Lt_W64(_sddjv::I64,
                            _sddjt::I64)) goto cdjKj; else goto cdjKs;
       cdjKj: // global
           if (%MO_S_Le_W64(1, _sddjv::I64)) goto cdjKc; else goto cdjKh;
       cdjKc: // global
           I64[Hp - 72] = sat_sddkn_info;
           I64[Hp - 56] = _sddjt::I64;
           I64[Hp - 48] = _sddjv::I64;
           I64[Hp - 40] = sat_sddkb_info;
           I64[Hp - 24] = _sddjt::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdjKh: // global
           if (%MO_S_Gt_W64(1, _sddjt::I64)) goto cdjLx; else goto cdjKf;
       cdjKf: // global
           I64[Hp - 72] = sat_sddkq_info;
           I64[Hp - 56] = _sddjt::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _cdjKd::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _cdjKd::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdjKs: // global
           if (%MO_S_Ge_W64(1, _sddjv::I64)) goto cdjKm; else goto cdjKr;
       cdjKm: // global
           I64[Hp - 72] = sat_sddkF_info;
           I64[Hp - 56] = _sddjt::I64;
           I64[Hp - 48] = _sddjv::I64;
           I64[Hp - 40] = sat_sddkt_info;
           I64[Hp - 24] = _sddjt::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdjKr: // global
           if (%MO_S_Lt_W64(1, _sddjt::I64)) goto cdjLx; else goto cdjKp;
       cdjKp: // global
           I64[Hp - 72] = sat_sddkI_info;
           I64[Hp - 56] = _sddjt::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _cdjKn::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _cdjKn::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdjKt: // global
           Hp = Hp + 80;
           _sddjw::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cdjLg; else goto cdjKv;
       cdjKv: // global
           if (%MO_S_Lt_W64(_sddjv::I64,
                            _sddjt::I64)) goto cdjKG; else goto cdjKP;
       cdjKG: // global
           if (%MO_S_Le_W64(2, _sddjv::I64)) goto cdjKz; else goto cdjKE;
       cdjKz: // global
           I64[Hp - 72] = sat_sddkY_info;
           I64[Hp - 56] = _sddjt::I64;
           I64[Hp - 48] = _sddjv::I64;
           I64[Hp - 40] = sat_sddkM_info;
           I64[Hp - 24] = _sddjt::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdjKE: // global
           if (%MO_S_Gt_W64(2, _sddjt::I64)) goto cdjLx; else goto cdjKC;
       cdjKC: // global
           I64[Hp - 72] = sat_sddl1_info;
           I64[Hp - 56] = _sddjt::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _cdjKA::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _cdjKA::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdjKP: // global
           if (%MO_S_Ge_W64(2, _sddjv::I64)) goto cdjKJ; else goto cdjKO;
       cdjKJ: // global
           I64[Hp - 72] = sat_sddlg_info;
           I64[Hp - 56] = _sddjt::I64;
           I64[Hp - 48] = _sddjv::I64;
           I64[Hp - 40] = sat_sddl4_info;
           I64[Hp - 24] = _sddjt::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdjKO: // global
           if (%MO_S_Lt_W64(2, _sddjt::I64)) goto cdjLx; else goto cdjKM;
       cdjKM: // global
           I64[Hp - 72] = sat_sddlj_info;
           I64[Hp - 56] = _sddjt::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _cdjKK::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _cdjKK::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       udjMg: // global
           if (_cdjMd::P64 < 5) goto cdjKQ; else goto cdjLd;
       cdjKQ: // global
           Hp = Hp + 80;
           _sddjw::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cdjLg; else goto cdjKS;
       cdjKS: // global
           if (%MO_S_Lt_W64(_sddjv::I64,
                            _sddjt::I64)) goto cdjL3; else goto cdjLc;
       cdjL3: // global
           if (%MO_S_Le_W64(3, _sddjv::I64)) goto cdjKW; else goto cdjL1;
       cdjKW: // global
           I64[Hp - 72] = sat_sddlz_info;
           I64[Hp - 56] = _sddjt::I64;
           I64[Hp - 48] = _sddjv::I64;
           I64[Hp - 40] = sat_sddln_info;
           I64[Hp - 24] = _sddjt::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdjL1: // global
           if (%MO_S_Gt_W64(3, _sddjt::I64)) goto cdjLx; else goto cdjKZ;
       cdjKZ: // global
           I64[Hp - 72] = sat_sddlC_info;
           I64[Hp - 56] = _sddjt::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _cdjKX::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _cdjKX::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdjLc: // global
           if (%MO_S_Ge_W64(3, _sddjv::I64)) goto cdjL6; else goto cdjLb;
       cdjL6: // global
           I64[Hp - 72] = sat_sddlR_info;
           I64[Hp - 56] = _sddjt::I64;
           I64[Hp - 48] = _sddjv::I64;
           I64[Hp - 40] = sat_sddlF_info;
           I64[Hp - 24] = _sddjt::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdjLb: // global
           if (%MO_S_Lt_W64(3, _sddjt::I64)) goto cdjLx; else goto cdjL9;
       cdjL9: // global
           I64[Hp - 72] = sat_sddlU_info;
           I64[Hp - 56] = _sddjt::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _cdjL7::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _cdjL7::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdjLd: // global
           Hp = Hp + 80;
           _sddjw::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cdjLg; else goto cdjLf;
       cdjLg: // global
           HpAlloc = 80;
           R1 = _sddjw::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdjLf: // global
           if (%MO_S_Lt_W64(_sddjv::I64,
                            _sddjt::I64)) goto cdjLq; else goto cdjLz;
       cdjLq: // global
           if (%MO_S_Le_W64(4, _sddjv::I64)) goto cdjLj; else goto cdjLo;
       cdjLj: // global
           I64[Hp - 72] = sat_sddma_info;
           I64[Hp - 56] = _sddjt::I64;
           I64[Hp - 48] = _sddjv::I64;
           I64[Hp - 40] = sat_sddlY_info;
           I64[Hp - 24] = _sddjt::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdjLo: // global
           if (%MO_S_Gt_W64(4, _sddjt::I64)) goto cdjLx; else goto cdjLm;
       cdjLm: // global
           I64[Hp - 72] = sat_sddmd_info;
           I64[Hp - 56] = _sddjt::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _cdjLk::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _cdjLk::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdjLz: // global
           if (%MO_S_Ge_W64(4, _sddjv::I64)) goto cdjLt; else goto cdjLy;
       cdjLt: // global
           I64[Hp - 72] = sat_sddms_info;
           I64[Hp - 56] = _sddjt::I64;
           I64[Hp - 48] = _sddjv::I64;
           I64[Hp - 40] = sat_sddmg_info;
           I64[Hp - 24] = _sddjt::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdjLy: // global
           if (%MO_S_Lt_W64(4, _sddjt::I64)) goto cdjLx; else goto cdjLw;
       cdjLx: // global
           Hp = Hp - 80;
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdjLw: // global
           I64[Hp - 72] = sat_sddmv_info;
           I64[Hp - 56] = _sddjt::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _cdjLu::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _cdjLu::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdjnX_info" {
     block_cdjnX_info:
         const _cdjnX;
         const 194;
         const 4294967326;
         const SddB2_srt+1216;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.074318638 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoCostCentres_closure" {
     GHC.RTS.Flags.$fEnumDoCostCentres_closure:
         const GHC.Enum.C:Enum_con_info;
         const GHC.RTS.Flags.$fEnumDoCostCentres_$csucc_closure+1;
         const GHC.RTS.Flags.$fEnumDoCostCentres_$cpred_closure+1;
         const GHC.RTS.Flags.$fEnumDoCostCentres_$ctoEnum_closure+1;
         const GHC.RTS.Flags.$fEnumDoCostCentres_$cfromEnum_closure+1;
         const GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFrom_closure+1;
         const GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFromThen_closure+2;
         const GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFromTo_closure+2;
         const GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFromThenTo_closure+3;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.07896414 UTC

[section ""data" . lvl100_rcV8s_closure" {
     lvl100_rcV8s_closure:
         const lvl100_rcV8s_info;
         const 0;
         const 0;
         const 0;
 },
 lvl100_rcV8s_entry() //  [R1]
         { []
         }
     {offset
       cdk0k: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdk0l; else goto cdk0m;
       cdk0l: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdk0m: // global
           (_cdk0h::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdk0h::I64 == 0) goto cdk0j; else goto cdk0i;
       cdk0j: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdk0i: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdk0h::I64;
           R2 = 3;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl100_rcV8s_info" {
     lvl100_rcV8s_info:
         const lvl100_rcV8s_entry;
         const 0;
         const 4294967317;
         const SddB2_srt+1384;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.086068734 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoTrace_$csucc_closure" {
     GHC.RTS.Flags.$fEnumDoTrace_$csucc_closure:
         const GHC.RTS.Flags.$fEnumDoTrace_$csucc_info;
         const 0;
 },
 GHC.RTS.Flags.$fEnumDoTrace_$csucc_entry() //  [R2]
         { []
         }
     {offset
       cdk0H: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdk0I; else goto cdk0J;
       cdk0I: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoTrace_$csucc_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdk0J: // global
           I64[Sp - 8] = block_cdk0z_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udk0U; else goto cdk0A;
       udk0U: // global
           call _cdk0z(R1) args: 0, res: 0, upd: 0;
       cdk0A: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoTrace_$csucc_info" {
     GHC.RTS.Flags.$fEnumDoTrace_$csucc_info:
         const GHC.RTS.Flags.$fEnumDoTrace_$csucc_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SddB2_srt+1392;
 },
 _cdk0z() //  [R1]
         { []
         }
     {offset
       cdk0z: // global
           _cdk0G::P64 = R1 & 7;
           if (_cdk0G::P64 < 3) goto udk0T; else goto cdk0F;
       udk0T: // global
           if (_cdk0G::P64 < 2) goto cdk0D; else goto cdk0E;
       cdk0D: // global
           R1 = GHC.RTS.Flags.TraceEventLog_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdk0E: // global
           R1 = GHC.RTS.Flags.TraceStderr_closure+3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdk0F: // global
           R1 = lvl100_rcV8s_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdk0z_info" {
     block_cdk0z_info:
         const _cdk0z;
         const 0;
         const 4294967326;
         const SddB2_srt+1400;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.095754576 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoTrace_go2_closure" {
     GHC.RTS.Flags.$fEnumDoTrace_go2_closure:
         const GHC.RTS.Flags.$fEnumDoTrace_go2_info;
         const 0;
 },
 sat_sddmF_entry() //  [R1]
         { []
         }
     {offset
       cdk1l: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdk1m; else goto cdk1n;
       cdk1m: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdk1n: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddmD::I64 = I64[R1 + 16];
           if (_sddmD::I64 != 0) goto cdk1j; else goto cdk1k;
       cdk1j: // global
           R2 = _sddmD::I64 + 1;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumDoTrace_go2_entry(R2) args: 24, res: 0, upd: 24;
       cdk1k: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddmF_info" {
     sat_sddmF_info:
         const sat_sddmF_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1408;
 },
 sat_sddmC_entry() //  [R1]
         { []
         }
     {offset
       cdk1A: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdk1B; else goto cdk1C;
       cdk1B: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdk1C: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddmB::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddmB::I64, 2)) goto udk1D; else goto udk1F;
       udk1D: // global
           if (%MO_S_Lt_W64(_sddmB::I64, 1)) goto udk1E; else goto cdk1y;
       udk1E: // global
           if (%MO_S_Lt_W64(_sddmB::I64, 0)) goto cdk1w; else goto cdk1x;
       cdk1x: // global
           R1 = GHC.RTS.Flags.TraceNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdk1y: // global
           R1 = GHC.RTS.Flags.TraceEventLog_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udk1F: // global
           if (%MO_S_Ge_W64(_sddmB::I64, 3)) goto cdk1w; else goto cdk1z;
       cdk1w: // global
           R2 = _sddmB::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl2_entry(R2) args: 24, res: 0, upd: 24;
       cdk1z: // global
           R1 = GHC.RTS.Flags.TraceStderr_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddmC_info" {
     sat_sddmC_info:
         const sat_sddmC_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1384;
 },
 GHC.RTS.Flags.$fEnumDoTrace_go2_entry() //  [R2]
         { []
         }
     {offset
       cdk1H: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdk1L; else goto cdk1K;
       cdk1L: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoTrace_go2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdk1K: // global
           I64[Hp - 64] = sat_sddmF_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sddmC_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoTrace_go2_info" {
     GHC.RTS.Flags.$fEnumDoTrace_go2_info:
         const GHC.RTS.Flags.$fEnumDoTrace_go2_entry;
         const 0;
         const 38654705678;
         const 4294967300;
         const SddB2_srt+1384;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.107543552 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoTrace_go1_closure" {
     GHC.RTS.Flags.$fEnumDoTrace_go1_closure:
         const GHC.RTS.Flags.$fEnumDoTrace_go1_info;
         const 0;
 },
 sat_sddmL_entry() //  [R1]
         { []
         }
     {offset
       cdk2n: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdk2o; else goto cdk2p;
       cdk2o: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdk2p: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddmJ::I64 = I64[R1 + 16];
           if (_sddmJ::I64 != 1) goto cdk2l; else goto cdk2m;
       cdk2l: // global
           R2 = _sddmJ::I64 + 1;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumDoTrace_go1_entry(R2) args: 24, res: 0, upd: 24;
       cdk2m: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddmL_info" {
     sat_sddmL_info:
         const sat_sddmL_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1416;
 },
 sat_sddmI_entry() //  [R1]
         { []
         }
     {offset
       cdk2C: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdk2D; else goto cdk2E;
       cdk2D: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdk2E: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddmH::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddmH::I64, 2)) goto udk2F; else goto udk2H;
       udk2F: // global
           if (%MO_S_Lt_W64(_sddmH::I64, 1)) goto udk2G; else goto cdk2A;
       udk2G: // global
           if (%MO_S_Lt_W64(_sddmH::I64, 0)) goto cdk2y; else goto cdk2z;
       cdk2z: // global
           R1 = GHC.RTS.Flags.TraceNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdk2A: // global
           R1 = GHC.RTS.Flags.TraceEventLog_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udk2H: // global
           if (%MO_S_Ge_W64(_sddmH::I64, 3)) goto cdk2y; else goto cdk2B;
       cdk2y: // global
           R2 = _sddmH::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl2_entry(R2) args: 24, res: 0, upd: 24;
       cdk2B: // global
           R1 = GHC.RTS.Flags.TraceStderr_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddmI_info" {
     sat_sddmI_info:
         const sat_sddmI_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1384;
 },
 GHC.RTS.Flags.$fEnumDoTrace_go1_entry() //  [R2]
         { []
         }
     {offset
       cdk2J: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdk2N; else goto cdk2M;
       cdk2N: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoTrace_go1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdk2M: // global
           I64[Hp - 64] = sat_sddmL_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sddmI_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoTrace_go1_info" {
     GHC.RTS.Flags.$fEnumDoTrace_go1_info:
         const GHC.RTS.Flags.$fEnumDoTrace_go1_entry;
         const 0;
         const 73014444046;
         const 4294967300;
         const SddB2_srt+1384;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.118569713 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoTrace_go_closure" {
     GHC.RTS.Flags.$fEnumDoTrace_go_closure:
         const GHC.RTS.Flags.$fEnumDoTrace_go_info;
         const 0;
 },
 sat_sddmR_entry() //  [R1]
         { []
         }
     {offset
       cdk3p: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdk3q; else goto cdk3r;
       cdk3q: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdk3r: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddmP::I64 = I64[R1 + 16];
           if (_sddmP::I64 != 2) goto cdk3n; else goto cdk3o;
       cdk3n: // global
           R2 = _sddmP::I64 + 1;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumDoTrace_go_entry(R2) args: 24, res: 0, upd: 24;
       cdk3o: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddmR_info" {
     sat_sddmR_info:
         const sat_sddmR_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1424;
 },
 sat_sddmO_entry() //  [R1]
         { []
         }
     {offset
       cdk3E: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdk3F; else goto cdk3G;
       cdk3F: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdk3G: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddmN::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddmN::I64, 2)) goto udk3H; else goto udk3J;
       udk3H: // global
           if (%MO_S_Lt_W64(_sddmN::I64, 1)) goto udk3I; else goto cdk3C;
       udk3I: // global
           if (%MO_S_Lt_W64(_sddmN::I64, 0)) goto cdk3A; else goto cdk3B;
       cdk3B: // global
           R1 = GHC.RTS.Flags.TraceNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdk3C: // global
           R1 = GHC.RTS.Flags.TraceEventLog_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udk3J: // global
           if (%MO_S_Ge_W64(_sddmN::I64, 3)) goto cdk3A; else goto cdk3D;
       cdk3A: // global
           R2 = _sddmN::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl2_entry(R2) args: 24, res: 0, upd: 24;
       cdk3D: // global
           R1 = GHC.RTS.Flags.TraceStderr_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddmO_info" {
     sat_sddmO_info:
         const sat_sddmO_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1384;
 },
 GHC.RTS.Flags.$fEnumDoTrace_go_entry() //  [R2]
         { []
         }
     {offset
       cdk3L: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdk3P; else goto cdk3O;
       cdk3P: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoTrace_go_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdk3O: // global
           I64[Hp - 64] = sat_sddmR_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sddmO_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoTrace_go_info" {
     GHC.RTS.Flags.$fEnumDoTrace_go_info:
         const GHC.RTS.Flags.$fEnumDoTrace_go_entry;
         const 0;
         const 141733920782;
         const 4294967300;
         const SddB2_srt+1384;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.12835028 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoTrace_$cenumFromTo_closure" {
     GHC.RTS.Flags.$fEnumDoTrace_$cenumFromTo_closure:
         const GHC.RTS.Flags.$fEnumDoTrace_$cenumFromTo_info;
         const 0;
 },
 GHC.RTS.Flags.$fEnumDoTrace_$cenumFromTo_entry() //  [R2, R3]
         { []
         }
     {offset
       cdk4t: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdk4u; else goto cdk4v;
       cdk4u: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoTrace_$cenumFromTo_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdk4v: // global
           I64[Sp - 16] = block_cdk4l_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udk5i; else goto cdk4m;
       udk5i: // global
           call _cdk4l(R1) args: 0, res: 0, upd: 0;
       cdk4m: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoTrace_$cenumFromTo_info" {
     GHC.RTS.Flags.$fEnumDoTrace_$cenumFromTo_info:
         const GHC.RTS.Flags.$fEnumDoTrace_$cenumFromTo_entry;
         const 0;
         const 64424509454;
         const 8589934607;
         const SddB2_srt+1408;
 },
 _cdk4l() //  [R1]
         { []
         }
     {offset
       cdk4l: // global
           _sddmT::P64 = P64[Sp + 8];
           _cdk4s::P64 = R1 & 7;
           if (_cdk4s::P64 < 3) goto udk5f; else goto cdk4r;
       udk5f: // global
           if (_cdk4s::P64 < 2) goto cdk4p; else goto cdk4q;
       cdk4p: // global
           _sddmV::I64 = 0;
           goto sddmU;
       cdk4q: // global
           _sddmV::I64 = 1;
           goto sddmU;
       cdk4r: // global
           _sddmV::I64 = 2;
           goto sddmU;
       sddmU: // global
           I64[Sp] = block_cdk4z_info;
           R1 = _sddmT::P64;
           I64[Sp + 8] = _sddmV::I64;
           if (R1 & 7 != 0) goto udk5h; else goto cdk4B;
       udk5h: // global
           call _cdk4z(R1) args: 0, res: 0, upd: 0;
       cdk4B: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdk4l_info" {
     block_cdk4l_info:
         const _cdk4l;
         const 1;
         const 30064771102;
         const SddB2_srt+1408;
 },
 _cdk4z() //  [R1]
         { []
         }
     {offset
       cdk4z: // global
           _sddmV::I64 = I64[Sp + 8];
           _cdk5e::P64 = R1 & 7;
           if (_cdk5e::P64 < 3) goto udk5g; else goto cdk54;
       udk5g: // global
           if (_cdk5e::P64 < 2) goto cdk4M; else goto cdk4V;
       cdk4M: // global
           if (%MO_S_Gt_W64(_sddmV::I64, 0)) goto cdk53; else goto cdk4J;
       cdk4J: // global
           R2 = _sddmV::I64;
           Sp = Sp + 16;
           call GHC.RTS.Flags.$fEnumDoTrace_go2_entry(R2) args: 8, res: 0, upd: 8;
       cdk4V: // global
           if (%MO_S_Gt_W64(_sddmV::I64, 1)) goto cdk53; else goto cdk4T;
       cdk4T: // global
           R2 = _sddmV::I64;
           Sp = Sp + 16;
           call GHC.RTS.Flags.$fEnumDoTrace_go1_entry(R2) args: 8, res: 0, upd: 8;
       cdk54: // global
           if (%MO_S_Gt_W64(_sddmV::I64, 2)) goto cdk53; else goto cdk52;
       cdk53: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdk52: // global
           R2 = _sddmV::I64;
           Sp = Sp + 16;
           call GHC.RTS.Flags.$fEnumDoTrace_go_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdk4z_info" {
     block_cdk4z_info:
         const _cdk4z;
         const 65;
         const 30064771102;
         const SddB2_srt+1408;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.13885808 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoTrace_$cenumFromThen_closure" {
     GHC.RTS.Flags.$fEnumDoTrace_$cenumFromThen_closure:
         const GHC.RTS.Flags.$fEnumDoTrace_$cenumFromThen_info;
         const 0;
 },
 GHC.RTS.Flags.$fEnumDoTrace_$cenumFromThen_entry() //  [R2, R3]
         { []
         }
     {offset
       cdk5Q: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdk5R; else goto cdk5S;
       cdk5R: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoTrace_$cenumFromThen_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdk5S: // global
           I64[Sp - 16] = block_cdk5I_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udk6F; else goto cdk5J;
       udk6F: // global
           call _cdk5I(R1) args: 0, res: 0, upd: 0;
       cdk5J: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoTrace_$cenumFromThen_info" {
     GHC.RTS.Flags.$fEnumDoTrace_$cenumFromThen_info:
         const GHC.RTS.Flags.$fEnumDoTrace_$cenumFromThen_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SddB2_srt+1440;
 },
 _cdk5I() //  [R1]
         { []
         }
     {offset
       cdk5I: // global
           _sddn2::P64 = P64[Sp + 8];
           _cdk5P::P64 = R1 & 7;
           if (_cdk5P::P64 < 3) goto udk6C; else goto cdk5O;
       udk6C: // global
           if (_cdk5P::P64 < 2) goto cdk5M; else goto cdk5N;
       cdk5M: // global
           _sddn4::I64 = 0;
           goto sddn3;
       cdk5N: // global
           _sddn4::I64 = 1;
           goto sddn3;
       cdk5O: // global
           _sddn4::I64 = 2;
           goto sddn3;
       sddn3: // global
           I64[Sp] = block_cdk5W_info;
           R1 = _sddn2::P64;
           I64[Sp + 8] = _sddn4::I64;
           if (R1 & 7 != 0) goto udk6E; else goto cdk5Y;
       udk6E: // global
           call _cdk5W(R1) args: 0, res: 0, upd: 0;
       cdk5Y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdk5I_info" {
     block_cdk5I_info:
         const _cdk5I;
         const 1;
         const 4294967326;
         const SddB2_srt+1448;
 },
 _cdk5W() //  [R1]
         { []
         }
     {offset
       cdk5W: // global
           _sddn4::I64 = I64[Sp + 8];
           _cdk6B::P64 = R1 & 7;
           if (_cdk6B::P64 < 3) goto udk6D; else goto cdk6n;
       udk6D: // global
           if (_cdk6B::P64 < 2) goto cdk65; else goto cdk6e;
       cdk65: // global
           I64[Sp + 8] = block_cdk62_info;
           R3 = 0;
           R2 = _sddn4::I64;
           Sp = Sp + 8;
           call GHC.Enum.efdInt_entry(R3, R2) args: 8, res: 8, upd: 8;
       cdk6e: // global
           I64[Sp + 8] = block_cdk6c_info;
           R3 = 1;
           R2 = _sddn4::I64;
           Sp = Sp + 8;
           call GHC.Enum.efdInt_entry(R3, R2) args: 8, res: 8, upd: 8;
       cdk6n: // global
           I64[Sp + 8] = block_cdk6l_info;
           R3 = 2;
           R2 = _sddn4::I64;
           Sp = Sp + 8;
           call GHC.Enum.efdInt_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdk5W_info" {
     block_cdk5W_info:
         const _cdk5W;
         const 65;
         const 4294967326;
         const SddB2_srt+1448;
 },
 _cdk62() //  [R1]
         { []
         }
     {offset
       cdk62: // global
           R3 = R1;
           R2 = GHC.RTS.Flags.$fEnumDoTrace_$ctoEnum_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdk62_info" {
     block_cdk62_info:
         const _cdk62;
         const 0;
         const 4294967326;
         const SddB2_srt+1448;
 },
 _cdk6c() //  [R1]
         { []
         }
     {offset
       cdk6c: // global
           R3 = R1;
           R2 = GHC.RTS.Flags.$fEnumDoTrace_$ctoEnum_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdk6c_info" {
     block_cdk6c_info:
         const _cdk6c;
         const 0;
         const 4294967326;
         const SddB2_srt+1448;
 },
 _cdk6l() //  [R1]
         { []
         }
     {offset
       cdk6l: // global
           R3 = R1;
           R2 = GHC.RTS.Flags.$fEnumDoTrace_$ctoEnum_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdk6l_info" {
     block_cdk6l_info:
         const _cdk6l;
         const 0;
         const 4294967326;
         const SddB2_srt+1448;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.154080382 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoTrace_go3_closure" {
     GHC.RTS.Flags.$fEnumDoTrace_go3_closure:
         const GHC.RTS.Flags.$fEnumDoTrace_go3_info;
         const 0;
 },
 sat_sddnf_entry() //  [R1]
         { []
         }
     {offset
       cdk7l: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdk7m; else goto cdk7n;
       cdk7m: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdk7n: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddnd::I64 = I64[R1 + 16];
           if (_sddnd::I64 != 9223372036854775807) goto cdk7j; else goto cdk7k;
       cdk7j: // global
           R2 = _sddnd::I64 + 1;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumDoTrace_go3_entry(R2) args: 24, res: 0, upd: 24;
       cdk7k: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddnf_info" {
     sat_sddnf_info:
         const sat_sddnf_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1456;
 },
 sat_sddnc_entry() //  [R1]
         { []
         }
     {offset
       cdk7A: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdk7B; else goto cdk7C;
       cdk7B: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdk7C: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddnb::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddnb::I64, 2)) goto udk7D; else goto udk7F;
       udk7D: // global
           if (%MO_S_Lt_W64(_sddnb::I64, 1)) goto udk7E; else goto cdk7y;
       udk7E: // global
           if (%MO_S_Lt_W64(_sddnb::I64, 0)) goto cdk7w; else goto cdk7x;
       cdk7x: // global
           R1 = GHC.RTS.Flags.TraceNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdk7y: // global
           R1 = GHC.RTS.Flags.TraceEventLog_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udk7F: // global
           if (%MO_S_Ge_W64(_sddnb::I64, 3)) goto cdk7w; else goto cdk7z;
       cdk7w: // global
           R2 = _sddnb::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl2_entry(R2) args: 24, res: 0, upd: 24;
       cdk7z: // global
           R1 = GHC.RTS.Flags.TraceStderr_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddnc_info" {
     sat_sddnc_info:
         const sat_sddnc_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1384;
 },
 GHC.RTS.Flags.$fEnumDoTrace_go3_entry() //  [R2]
         { []
         }
     {offset
       cdk7H: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdk7L; else goto cdk7K;
       cdk7L: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoTrace_go3_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdk7K: // global
           I64[Hp - 64] = sat_sddnf_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sddnc_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoTrace_go3_info" {
     GHC.RTS.Flags.$fEnumDoTrace_go3_info:
         const GHC.RTS.Flags.$fEnumDoTrace_go3_entry;
         const 0;
         const 2203318222862;
         const 4294967300;
         const SddB2_srt+1384;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.162296198 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoTrace4_closure" {
     GHC.RTS.Flags.$fEnumDoTrace4_closure:
         const GHC.RTS.Flags.$fEnumDoTrace4_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fEnumDoTrace4_entry() //  [R1]
         { []
         }
     {offset
       cdk8i: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdk8j; else goto cdk8k;
       cdk8j: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdk8k: // global
           (_cdk8f::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdk8f::I64 == 0) goto cdk8h; else goto cdk8g;
       cdk8h: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdk8g: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdk8f::I64;
           R2 = 0;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumDoTrace_go3_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoTrace4_info" {
     GHC.RTS.Flags.$fEnumDoTrace4_info:
         const GHC.RTS.Flags.$fEnumDoTrace4_entry;
         const 0;
         const 4294967317;
         const SddB2_srt+1456;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.166715352 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoTrace3_closure" {
     GHC.RTS.Flags.$fEnumDoTrace3_closure:
         const GHC.RTS.Flags.$fEnumDoTrace3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fEnumDoTrace3_entry() //  [R1]
         { []
         }
     {offset
       cdk8z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdk8A; else goto cdk8B;
       cdk8A: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdk8B: // global
           (_cdk8w::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdk8w::I64 == 0) goto cdk8y; else goto cdk8x;
       cdk8y: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdk8x: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdk8w::I64;
           R2 = 1;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumDoTrace_go3_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoTrace3_info" {
     GHC.RTS.Flags.$fEnumDoTrace3_info:
         const GHC.RTS.Flags.$fEnumDoTrace3_entry;
         const 0;
         const 4294967317;
         const SddB2_srt+1456;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.171490992 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoTrace2_closure" {
     GHC.RTS.Flags.$fEnumDoTrace2_closure:
         const GHC.RTS.Flags.$fEnumDoTrace2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.$fEnumDoTrace2_entry() //  [R1]
         { []
         }
     {offset
       cdk8Q: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdk8R; else goto cdk8S;
       cdk8R: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdk8S: // global
           (_cdk8N::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdk8N::I64 == 0) goto cdk8P; else goto cdk8O;
       cdk8P: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdk8O: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdk8N::I64;
           R2 = 2;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$fEnumDoTrace_go3_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoTrace2_info" {
     GHC.RTS.Flags.$fEnumDoTrace2_info:
         const GHC.RTS.Flags.$fEnumDoTrace2_entry;
         const 0;
         const 4294967317;
         const SddB2_srt+1456;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.1761945 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoTrace_$cenumFrom_closure" {
     GHC.RTS.Flags.$fEnumDoTrace_$cenumFrom_closure:
         const GHC.RTS.Flags.$fEnumDoTrace_$cenumFrom_info;
         const 0;
 },
 GHC.RTS.Flags.$fEnumDoTrace_$cenumFrom_entry() //  [R2]
         { []
         }
     {offset
       cdk9d: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdk9e; else goto cdk9f;
       cdk9e: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoTrace_$cenumFrom_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdk9f: // global
           I64[Sp - 8] = block_cdk95_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udk9q; else goto cdk96;
       udk9q: // global
           call _cdk95(R1) args: 0, res: 0, upd: 0;
       cdk96: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoTrace_$cenumFrom_info" {
     GHC.RTS.Flags.$fEnumDoTrace_$cenumFrom_info:
         const GHC.RTS.Flags.$fEnumDoTrace_$cenumFrom_entry;
         const 0;
         const 64424509454;
         const 4294967301;
         const SddB2_srt+1464;
 },
 _cdk95() //  [R1]
         { []
         }
     {offset
       cdk95: // global
           _cdk9c::P64 = R1 & 7;
           if (_cdk9c::P64 < 3) goto udk9p; else goto cdk9b;
       udk9p: // global
           if (_cdk9c::P64 < 2) goto cdk99; else goto cdk9a;
       cdk99: // global
           R1 = GHC.RTS.Flags.$fEnumDoTrace4_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cdk9a: // global
           R1 = GHC.RTS.Flags.$fEnumDoTrace3_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cdk9b: // global
           R1 = GHC.RTS.Flags.$fEnumDoTrace2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdk95_info" {
     block_cdk95_info:
         const _cdk95;
         const 0;
         const 30064771102;
         const SddB2_srt+1472;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.182763431 UTC

[section ""data" . lvl101_rcV8t_closure" {
     lvl101_rcV8t_closure:
         const lvl101_rcV8t_info;
         const 0;
         const 0;
         const 0;
 },
 lvl101_rcV8t_entry() //  [R1]
         { []
         }
     {offset
       cdk9L: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdk9M; else goto cdk9N;
       cdk9M: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdk9N: // global
           (_cdk9I::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdk9I::I64 == 0) goto cdk9K; else goto cdk9J;
       cdk9K: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdk9J: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdk9I::I64;
           R2 = (-1);
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl2_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl101_rcV8t_info" {
     lvl101_rcV8t_info:
         const lvl101_rcV8t_entry;
         const 0;
         const 4294967317;
         const SddB2_srt+1384;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.188149881 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoTrace_$cpred_closure" {
     GHC.RTS.Flags.$fEnumDoTrace_$cpred_closure:
         const GHC.RTS.Flags.$fEnumDoTrace_$cpred_info;
         const 0;
 },
 GHC.RTS.Flags.$fEnumDoTrace_$cpred_entry() //  [R2]
         { []
         }
     {offset
       cdka8: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdka9; else goto cdkaa;
       cdka9: // global
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoTrace_$cpred_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdkaa: // global
           I64[Sp - 8] = block_cdka0_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udkal; else goto cdka1;
       udkal: // global
           call _cdka0(R1) args: 0, res: 0, upd: 0;
       cdka1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoTrace_$cpred_info" {
     GHC.RTS.Flags.$fEnumDoTrace_$cpred_info:
         const GHC.RTS.Flags.$fEnumDoTrace_$cpred_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SddB2_srt+1496;
 },
 _cdka0() //  [R1]
         { []
         }
     {offset
       cdka0: // global
           _cdka7::P64 = R1 & 7;
           if (_cdka7::P64 < 3) goto udkak; else goto cdka6;
       udkak: // global
           if (_cdka7::P64 < 2) goto cdka4; else goto cdka5;
       cdka4: // global
           R1 = lvl101_rcV8t_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cdka5: // global
           R1 = GHC.RTS.Flags.TraceNone_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdka6: // global
           R1 = GHC.RTS.Flags.TraceEventLog_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdka0_info" {
     block_cdka0_info:
         const _cdka0;
         const 0;
         const 4294967326;
         const SddB2_srt+1504;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.22892347 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoTrace_$cenumFromThenTo_closure" {
     GHC.RTS.Flags.$fEnumDoTrace_$cenumFromThenTo_closure:
         const GHC.RTS.Flags.$fEnumDoTrace_$cenumFromThenTo_info;
         const 0;
 },
 sat_sddnE_entry() //  [R1]
         { []
         }
     {offset
       cdkbn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdkbo; else goto cdkbp;
       cdkbo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdkbp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_sddny_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddnE_info" {
     sat_sddnE_info:
         const sat_sddnE_entry;
         const 8589934593;
         const 4294967311;
         const SddB2_srt+1384;
 },
 sat_sddnC_entry() //  [R1]
         { []
         }
     {offset
       cdkbA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdkbB; else goto cdkbC;
       cdkbB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdkbC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddnB::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddnB::I64, 2)) goto udkbD; else goto udkbF;
       udkbD: // global
           if (%MO_S_Lt_W64(_sddnB::I64, 1)) goto udkbE; else goto cdkby;
       udkbE: // global
           if (%MO_S_Lt_W64(_sddnB::I64, 0)) goto cdkbw; else goto cdkbx;
       cdkbx: // global
           R1 = GHC.RTS.Flags.TraceNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdkby: // global
           R1 = GHC.RTS.Flags.TraceEventLog_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udkbF: // global
           if (%MO_S_Ge_W64(_sddnB::I64, 3)) goto cdkbw; else goto cdkbz;
       cdkbw: // global
           R2 = _sddnB::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl2_entry(R2) args: 24, res: 0, upd: 24;
       cdkbz: // global
           R1 = GHC.RTS.Flags.TraceStderr_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddnC_info" {
     sat_sddnC_info:
         const sat_sddnC_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1384;
 },
 sat_sddnG_entry() //  [R1]
         { []
         }
     {offset
       cdkbR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdkbS; else goto cdkbT;
       cdkbS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdkbT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddnF::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddnF::I64, 2)) goto udkbU; else goto udkbW;
       udkbU: // global
           if (%MO_S_Lt_W64(_sddnF::I64, 1)) goto udkbV; else goto cdkbP;
       udkbV: // global
           if (%MO_S_Lt_W64(_sddnF::I64, 0)) goto cdkbN; else goto cdkbO;
       cdkbO: // global
           R1 = GHC.RTS.Flags.TraceNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdkbP: // global
           R1 = GHC.RTS.Flags.TraceEventLog_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udkbW: // global
           if (%MO_S_Ge_W64(_sddnF::I64, 3)) goto cdkbN; else goto cdkbQ;
       cdkbN: // global
           R2 = _sddnF::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl2_entry(R2) args: 24, res: 0, upd: 24;
       cdkbQ: // global
           R1 = GHC.RTS.Flags.TraceStderr_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddnG_info" {
     sat_sddnG_info:
         const sat_sddnG_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1384;
 },
 go_dn_sddny_entry() //  [R1, R2]
         { []
         }
     {offset
       cdkc0: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdkc4; else goto cdkc3;
       cdkc4: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdkc3: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto cdkbY; else goto cdkbZ;
       cdkbY: // global
           _sddnw::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_sddnE_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _sddnw::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sddnC_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdkbZ: // global
           I64[Hp - 80] = sat_sddnG_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _cdkc6::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _cdkc6::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_sddny_info" {
     go_dn_sddny_info:
         const go_dn_sddny_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const SddB2_srt+1384;
 },
 sat_sddnH_entry() //  [R1]
         { []
         }
     {offset
       cdkc7: // global
           _sddnH::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdkc8; else goto cdkc9;
       cdkc9: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdkcb; else goto cdkca;
       cdkcb: // global
           HpAlloc = 24;
           goto cdkc8;
       cdkc8: // global
           R1 = _sddnH::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdkca: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sddnH::P64;
           _sddnq::I64 = I64[_sddnH::P64 + 24];
           _sddnw::I64 = _sddnq::I64 - I64[_sddnH::P64 + 16];
           I64[Hp - 16] = go_dn_sddny_info;
           I64[Hp - 8] = _sddnw::I64;
           I64[Hp] = 0 - _sddnw::I64;
           R2 = _sddnq::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_sddny_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddnH_info" {
     sat_sddnH_info:
         const sat_sddnH_entry;
         const 8589934592;
         const 4294967316;
         const SddB2_srt+1384;
 },
 sat_sddnv_entry() //  [R1]
         { []
         }
     {offset
       cdkcm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdkcn; else goto cdkco;
       cdkcn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdkco: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddnu::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddnu::I64, 2)) goto udkcp; else goto udkcr;
       udkcp: // global
           if (%MO_S_Lt_W64(_sddnu::I64, 1)) goto udkcq; else goto cdkck;
       udkcq: // global
           if (%MO_S_Lt_W64(_sddnu::I64, 0)) goto cdkci; else goto cdkcj;
       cdkcj: // global
           R1 = GHC.RTS.Flags.TraceNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdkck: // global
           R1 = GHC.RTS.Flags.TraceEventLog_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udkcr: // global
           if (%MO_S_Ge_W64(_sddnu::I64, 3)) goto cdkci; else goto cdkcl;
       cdkci: // global
           R2 = _sddnu::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl2_entry(R2) args: 24, res: 0, upd: 24;
       cdkcl: // global
           R1 = GHC.RTS.Flags.TraceStderr_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddnv_info" {
     sat_sddnv_info:
         const sat_sddnv_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1384;
 },
 sat_sddnK_entry() //  [R1]
         { []
         }
     {offset
       cdkcG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdkcH; else goto cdkcI;
       cdkcH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdkcI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddnJ::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddnJ::I64, 2)) goto udkcJ; else goto udkcL;
       udkcJ: // global
           if (%MO_S_Lt_W64(_sddnJ::I64, 1)) goto udkcK; else goto cdkcE;
       udkcK: // global
           if (%MO_S_Lt_W64(_sddnJ::I64, 0)) goto cdkcC; else goto cdkcD;
       cdkcD: // global
           R1 = GHC.RTS.Flags.TraceNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdkcE: // global
           R1 = GHC.RTS.Flags.TraceEventLog_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udkcL: // global
           if (%MO_S_Ge_W64(_sddnJ::I64, 3)) goto cdkcC; else goto cdkcF;
       cdkcC: // global
           R2 = _sddnJ::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl2_entry(R2) args: 24, res: 0, upd: 24;
       cdkcF: // global
           R1 = GHC.RTS.Flags.TraceStderr_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddnK_info" {
     sat_sddnK_info:
         const sat_sddnK_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1384;
 },
 sat_sddnW_entry() //  [R1]
         { []
         }
     {offset
       cdkde: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdkdf; else goto cdkdg;
       cdkdf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdkdg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_sddnQ_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddnW_info" {
     sat_sddnW_info:
         const sat_sddnW_entry;
         const 8589934593;
         const 4294967311;
         const SddB2_srt+1384;
 },
 sat_sddnU_entry() //  [R1]
         { []
         }
     {offset
       cdkdr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdkds; else goto cdkdt;
       cdkds: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdkdt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddnT::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddnT::I64, 2)) goto udkdu; else goto udkdw;
       udkdu: // global
           if (%MO_S_Lt_W64(_sddnT::I64, 1)) goto udkdv; else goto cdkdp;
       udkdv: // global
           if (%MO_S_Lt_W64(_sddnT::I64, 0)) goto cdkdn; else goto cdkdo;
       cdkdo: // global
           R1 = GHC.RTS.Flags.TraceNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdkdp: // global
           R1 = GHC.RTS.Flags.TraceEventLog_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udkdw: // global
           if (%MO_S_Ge_W64(_sddnT::I64, 3)) goto cdkdn; else goto cdkdq;
       cdkdn: // global
           R2 = _sddnT::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl2_entry(R2) args: 24, res: 0, upd: 24;
       cdkdq: // global
           R1 = GHC.RTS.Flags.TraceStderr_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddnU_info" {
     sat_sddnU_info:
         const sat_sddnU_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1384;
 },
 sat_sddnY_entry() //  [R1]
         { []
         }
     {offset
       cdkdI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdkdJ; else goto cdkdK;
       cdkdJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdkdK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddnX::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddnX::I64, 2)) goto udkdL; else goto udkdN;
       udkdL: // global
           if (%MO_S_Lt_W64(_sddnX::I64, 1)) goto udkdM; else goto cdkdG;
       udkdM: // global
           if (%MO_S_Lt_W64(_sddnX::I64, 0)) goto cdkdE; else goto cdkdF;
       cdkdF: // global
           R1 = GHC.RTS.Flags.TraceNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdkdG: // global
           R1 = GHC.RTS.Flags.TraceEventLog_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udkdN: // global
           if (%MO_S_Ge_W64(_sddnX::I64, 3)) goto cdkdE; else goto cdkdH;
       cdkdE: // global
           R2 = _sddnX::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl2_entry(R2) args: 24, res: 0, upd: 24;
       cdkdH: // global
           R1 = GHC.RTS.Flags.TraceStderr_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddnY_info" {
     sat_sddnY_info:
         const sat_sddnY_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1384;
 },
 go_up_sddnQ_entry() //  [R1, R2]
         { []
         }
     {offset
       cdkdR: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdkdV; else goto cdkdU;
       cdkdV: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdkdU: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto cdkdP; else goto cdkdQ;
       cdkdP: // global
           _sddnO::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_sddnW_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _sddnO::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sddnU_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdkdQ: // global
           I64[Hp - 80] = sat_sddnY_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _cdkdX::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _cdkdX::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_sddnQ_info" {
     go_up_sddnQ_info:
         const go_up_sddnQ_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const SddB2_srt+1384;
 },
 sat_sddnZ_entry() //  [R1]
         { []
         }
     {offset
       cdkdY: // global
           _sddnZ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdkdZ; else goto cdke0;
       cdke0: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdke2; else goto cdke1;
       cdke2: // global
           HpAlloc = 24;
           goto cdkdZ;
       cdkdZ: // global
           R1 = _sddnZ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdke1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sddnZ::P64;
           _sddnq::I64 = I64[_sddnZ::P64 + 24];
           _sddnO::I64 = _sddnq::I64 - I64[_sddnZ::P64 + 16];
           I64[Hp - 16] = go_up_sddnQ_info;
           I64[Hp - 8] = _sddnO::I64;
           I64[Hp] = 0 - _sddnO::I64;
           R2 = _sddnq::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_sddnQ_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddnZ_info" {
     sat_sddnZ_info:
         const sat_sddnZ_entry;
         const 8589934592;
         const 4294967316;
         const SddB2_srt+1384;
 },
 sat_sddnN_entry() //  [R1]
         { []
         }
     {offset
       cdked: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdkee; else goto cdkef;
       cdkee: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdkef: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddnM::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddnM::I64, 2)) goto udkeg; else goto udkei;
       udkeg: // global
           if (%MO_S_Lt_W64(_sddnM::I64, 1)) goto udkeh; else goto cdkeb;
       udkeh: // global
           if (%MO_S_Lt_W64(_sddnM::I64, 0)) goto cdke9; else goto cdkea;
       cdkea: // global
           R1 = GHC.RTS.Flags.TraceNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdkeb: // global
           R1 = GHC.RTS.Flags.TraceEventLog_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udkei: // global
           if (%MO_S_Ge_W64(_sddnM::I64, 3)) goto cdke9; else goto cdkec;
       cdke9: // global
           R2 = _sddnM::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl2_entry(R2) args: 24, res: 0, upd: 24;
       cdkec: // global
           R1 = GHC.RTS.Flags.TraceStderr_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddnN_info" {
     sat_sddnN_info:
         const sat_sddnN_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1384;
 },
 sat_sddo2_entry() //  [R1]
         { []
         }
     {offset
       cdkex: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdkey; else goto cdkez;
       cdkey: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdkez: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddo1::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddo1::I64, 2)) goto udkeA; else goto udkeC;
       udkeA: // global
           if (%MO_S_Lt_W64(_sddo1::I64, 1)) goto udkeB; else goto cdkev;
       udkeB: // global
           if (%MO_S_Lt_W64(_sddo1::I64, 0)) goto cdket; else goto cdkeu;
       cdkeu: // global
           R1 = GHC.RTS.Flags.TraceNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdkev: // global
           R1 = GHC.RTS.Flags.TraceEventLog_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udkeC: // global
           if (%MO_S_Ge_W64(_sddo1::I64, 3)) goto cdket; else goto cdkew;
       cdket: // global
           R2 = _sddo1::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl2_entry(R2) args: 24, res: 0, upd: 24;
       cdkew: // global
           R1 = GHC.RTS.Flags.TraceStderr_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddo2_info" {
     sat_sddo2_info:
         const sat_sddo2_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1384;
 },
 sat_sddof_entry() //  [R1]
         { []
         }
     {offset
       cdkf9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdkfa; else goto cdkfb;
       cdkfa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdkfb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_sddo9_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddof_info" {
     sat_sddof_info:
         const sat_sddof_entry;
         const 8589934593;
         const 4294967311;
         const SddB2_srt+1384;
 },
 sat_sddod_entry() //  [R1]
         { []
         }
     {offset
       cdkfm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdkfn; else goto cdkfo;
       cdkfn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdkfo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddoc::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddoc::I64, 2)) goto udkfp; else goto udkfr;
       udkfp: // global
           if (%MO_S_Lt_W64(_sddoc::I64, 1)) goto udkfq; else goto cdkfk;
       udkfq: // global
           if (%MO_S_Lt_W64(_sddoc::I64, 0)) goto cdkfi; else goto cdkfj;
       cdkfj: // global
           R1 = GHC.RTS.Flags.TraceNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdkfk: // global
           R1 = GHC.RTS.Flags.TraceEventLog_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udkfr: // global
           if (%MO_S_Ge_W64(_sddoc::I64, 3)) goto cdkfi; else goto cdkfl;
       cdkfi: // global
           R2 = _sddoc::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl2_entry(R2) args: 24, res: 0, upd: 24;
       cdkfl: // global
           R1 = GHC.RTS.Flags.TraceStderr_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddod_info" {
     sat_sddod_info:
         const sat_sddod_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1384;
 },
 sat_sddoh_entry() //  [R1]
         { []
         }
     {offset
       cdkfD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdkfE; else goto cdkfF;
       cdkfE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdkfF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddog::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddog::I64, 2)) goto udkfG; else goto udkfI;
       udkfG: // global
           if (%MO_S_Lt_W64(_sddog::I64, 1)) goto udkfH; else goto cdkfB;
       udkfH: // global
           if (%MO_S_Lt_W64(_sddog::I64, 0)) goto cdkfz; else goto cdkfA;
       cdkfA: // global
           R1 = GHC.RTS.Flags.TraceNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdkfB: // global
           R1 = GHC.RTS.Flags.TraceEventLog_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udkfI: // global
           if (%MO_S_Ge_W64(_sddog::I64, 3)) goto cdkfz; else goto cdkfC;
       cdkfz: // global
           R2 = _sddog::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl2_entry(R2) args: 24, res: 0, upd: 24;
       cdkfC: // global
           R1 = GHC.RTS.Flags.TraceStderr_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddoh_info" {
     sat_sddoh_info:
         const sat_sddoh_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1384;
 },
 go_dn_sddo9_entry() //  [R1, R2]
         { []
         }
     {offset
       cdkfM: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdkfQ; else goto cdkfP;
       cdkfQ: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdkfP: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto cdkfK; else goto cdkfL;
       cdkfK: // global
           _sddo7::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_sddof_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _sddo7::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sddod_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdkfL: // global
           I64[Hp - 80] = sat_sddoh_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _cdkfS::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _cdkfS::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_sddo9_info" {
     go_dn_sddo9_info:
         const go_dn_sddo9_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const SddB2_srt+1384;
 },
 sat_sddoi_entry() //  [R1]
         { []
         }
     {offset
       cdkfT: // global
           _sddoi::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdkfU; else goto cdkfV;
       cdkfV: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdkfX; else goto cdkfW;
       cdkfX: // global
           HpAlloc = 24;
           goto cdkfU;
       cdkfU: // global
           R1 = _sddoi::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdkfW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sddoi::P64;
           _sddnq::I64 = I64[_sddoi::P64 + 24];
           _sddo7::I64 = _sddnq::I64 - I64[_sddoi::P64 + 16];
           I64[Hp - 16] = go_dn_sddo9_info;
           I64[Hp - 8] = _sddo7::I64;
           I64[Hp] = 1 - _sddo7::I64;
           R2 = _sddnq::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_sddo9_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddoi_info" {
     sat_sddoi_info:
         const sat_sddoi_entry;
         const 8589934592;
         const 4294967316;
         const SddB2_srt+1384;
 },
 sat_sddo6_entry() //  [R1]
         { []
         }
     {offset
       cdkg8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdkg9; else goto cdkga;
       cdkg9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdkga: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddo5::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddo5::I64, 2)) goto udkgb; else goto udkgd;
       udkgb: // global
           if (%MO_S_Lt_W64(_sddo5::I64, 1)) goto udkgc; else goto cdkg6;
       udkgc: // global
           if (%MO_S_Lt_W64(_sddo5::I64, 0)) goto cdkg4; else goto cdkg5;
       cdkg5: // global
           R1 = GHC.RTS.Flags.TraceNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdkg6: // global
           R1 = GHC.RTS.Flags.TraceEventLog_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udkgd: // global
           if (%MO_S_Ge_W64(_sddo5::I64, 3)) goto cdkg4; else goto cdkg7;
       cdkg4: // global
           R2 = _sddo5::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl2_entry(R2) args: 24, res: 0, upd: 24;
       cdkg7: // global
           R1 = GHC.RTS.Flags.TraceStderr_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddo6_info" {
     sat_sddo6_info:
         const sat_sddo6_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1384;
 },
 sat_sddol_entry() //  [R1]
         { []
         }
     {offset
       cdkgs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdkgt; else goto cdkgu;
       cdkgt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdkgu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddok::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddok::I64, 2)) goto udkgv; else goto udkgx;
       udkgv: // global
           if (%MO_S_Lt_W64(_sddok::I64, 1)) goto udkgw; else goto cdkgq;
       udkgw: // global
           if (%MO_S_Lt_W64(_sddok::I64, 0)) goto cdkgo; else goto cdkgp;
       cdkgp: // global
           R1 = GHC.RTS.Flags.TraceNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdkgq: // global
           R1 = GHC.RTS.Flags.TraceEventLog_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udkgx: // global
           if (%MO_S_Ge_W64(_sddok::I64, 3)) goto cdkgo; else goto cdkgr;
       cdkgo: // global
           R2 = _sddok::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl2_entry(R2) args: 24, res: 0, upd: 24;
       cdkgr: // global
           R1 = GHC.RTS.Flags.TraceStderr_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddol_info" {
     sat_sddol_info:
         const sat_sddol_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1384;
 },
 sat_sddox_entry() //  [R1]
         { []
         }
     {offset
       cdkh0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdkh1; else goto cdkh2;
       cdkh1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdkh2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_sddor_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddox_info" {
     sat_sddox_info:
         const sat_sddox_entry;
         const 8589934593;
         const 4294967311;
         const SddB2_srt+1384;
 },
 sat_sddov_entry() //  [R1]
         { []
         }
     {offset
       cdkhd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdkhe; else goto cdkhf;
       cdkhe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdkhf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddou::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddou::I64, 2)) goto udkhg; else goto udkhi;
       udkhg: // global
           if (%MO_S_Lt_W64(_sddou::I64, 1)) goto udkhh; else goto cdkhb;
       udkhh: // global
           if (%MO_S_Lt_W64(_sddou::I64, 0)) goto cdkh9; else goto cdkha;
       cdkha: // global
           R1 = GHC.RTS.Flags.TraceNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdkhb: // global
           R1 = GHC.RTS.Flags.TraceEventLog_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udkhi: // global
           if (%MO_S_Ge_W64(_sddou::I64, 3)) goto cdkh9; else goto cdkhc;
       cdkh9: // global
           R2 = _sddou::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl2_entry(R2) args: 24, res: 0, upd: 24;
       cdkhc: // global
           R1 = GHC.RTS.Flags.TraceStderr_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddov_info" {
     sat_sddov_info:
         const sat_sddov_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1384;
 },
 sat_sddoz_entry() //  [R1]
         { []
         }
     {offset
       cdkhu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdkhv; else goto cdkhw;
       cdkhv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdkhw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddoy::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddoy::I64, 2)) goto udkhx; else goto udkhz;
       udkhx: // global
           if (%MO_S_Lt_W64(_sddoy::I64, 1)) goto udkhy; else goto cdkhs;
       udkhy: // global
           if (%MO_S_Lt_W64(_sddoy::I64, 0)) goto cdkhq; else goto cdkhr;
       cdkhr: // global
           R1 = GHC.RTS.Flags.TraceNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdkhs: // global
           R1 = GHC.RTS.Flags.TraceEventLog_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udkhz: // global
           if (%MO_S_Ge_W64(_sddoy::I64, 3)) goto cdkhq; else goto cdkht;
       cdkhq: // global
           R2 = _sddoy::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl2_entry(R2) args: 24, res: 0, upd: 24;
       cdkht: // global
           R1 = GHC.RTS.Flags.TraceStderr_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddoz_info" {
     sat_sddoz_info:
         const sat_sddoz_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1384;
 },
 go_up_sddor_entry() //  [R1, R2]
         { []
         }
     {offset
       cdkhD: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdkhH; else goto cdkhG;
       cdkhH: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdkhG: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto cdkhB; else goto cdkhC;
       cdkhB: // global
           _sddop::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_sddox_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _sddop::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sddov_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdkhC: // global
           I64[Hp - 80] = sat_sddoz_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _cdkhJ::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _cdkhJ::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_sddor_info" {
     go_up_sddor_info:
         const go_up_sddor_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const SddB2_srt+1384;
 },
 sat_sddoA_entry() //  [R1]
         { []
         }
     {offset
       cdkhK: // global
           _sddoA::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdkhL; else goto cdkhM;
       cdkhM: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdkhO; else goto cdkhN;
       cdkhO: // global
           HpAlloc = 24;
           goto cdkhL;
       cdkhL: // global
           R1 = _sddoA::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdkhN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sddoA::P64;
           _sddnq::I64 = I64[_sddoA::P64 + 24];
           _sddop::I64 = _sddnq::I64 - I64[_sddoA::P64 + 16];
           I64[Hp - 16] = go_up_sddor_info;
           I64[Hp - 8] = _sddop::I64;
           I64[Hp] = 1 - _sddop::I64;
           R2 = _sddnq::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_sddor_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddoA_info" {
     sat_sddoA_info:
         const sat_sddoA_entry;
         const 8589934592;
         const 4294967316;
         const SddB2_srt+1384;
 },
 sat_sddoo_entry() //  [R1]
         { []
         }
     {offset
       cdkhZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdki0; else goto cdki1;
       cdki0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdki1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddon::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddon::I64, 2)) goto udki2; else goto udki4;
       udki2: // global
           if (%MO_S_Lt_W64(_sddon::I64, 1)) goto udki3; else goto cdkhX;
       udki3: // global
           if (%MO_S_Lt_W64(_sddon::I64, 0)) goto cdkhV; else goto cdkhW;
       cdkhW: // global
           R1 = GHC.RTS.Flags.TraceNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdkhX: // global
           R1 = GHC.RTS.Flags.TraceEventLog_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udki4: // global
           if (%MO_S_Ge_W64(_sddon::I64, 3)) goto cdkhV; else goto cdkhY;
       cdkhV: // global
           R2 = _sddon::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl2_entry(R2) args: 24, res: 0, upd: 24;
       cdkhY: // global
           R1 = GHC.RTS.Flags.TraceStderr_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddoo_info" {
     sat_sddoo_info:
         const sat_sddoo_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1384;
 },
 sat_sddoD_entry() //  [R1]
         { []
         }
     {offset
       cdkij: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdkik; else goto cdkil;
       cdkik: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdkil: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddoC::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddoC::I64, 2)) goto udkim; else goto udkio;
       udkim: // global
           if (%MO_S_Lt_W64(_sddoC::I64, 1)) goto udkin; else goto cdkih;
       udkin: // global
           if (%MO_S_Lt_W64(_sddoC::I64, 0)) goto cdkif; else goto cdkig;
       cdkig: // global
           R1 = GHC.RTS.Flags.TraceNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdkih: // global
           R1 = GHC.RTS.Flags.TraceEventLog_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udkio: // global
           if (%MO_S_Ge_W64(_sddoC::I64, 3)) goto cdkif; else goto cdkii;
       cdkif: // global
           R2 = _sddoC::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl2_entry(R2) args: 24, res: 0, upd: 24;
       cdkii: // global
           R1 = GHC.RTS.Flags.TraceStderr_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddoD_info" {
     sat_sddoD_info:
         const sat_sddoD_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1384;
 },
 sat_sddoQ_entry() //  [R1]
         { []
         }
     {offset
       cdkiV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdkiW; else goto cdkiX;
       cdkiW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdkiX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_sddoK_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddoQ_info" {
     sat_sddoQ_info:
         const sat_sddoQ_entry;
         const 8589934593;
         const 4294967311;
         const SddB2_srt+1384;
 },
 sat_sddoO_entry() //  [R1]
         { []
         }
     {offset
       cdkj8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdkj9; else goto cdkja;
       cdkj9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdkja: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddoN::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddoN::I64, 2)) goto udkjb; else goto udkjd;
       udkjb: // global
           if (%MO_S_Lt_W64(_sddoN::I64, 1)) goto udkjc; else goto cdkj6;
       udkjc: // global
           if (%MO_S_Lt_W64(_sddoN::I64, 0)) goto cdkj4; else goto cdkj5;
       cdkj5: // global
           R1 = GHC.RTS.Flags.TraceNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdkj6: // global
           R1 = GHC.RTS.Flags.TraceEventLog_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udkjd: // global
           if (%MO_S_Ge_W64(_sddoN::I64, 3)) goto cdkj4; else goto cdkj7;
       cdkj4: // global
           R2 = _sddoN::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl2_entry(R2) args: 24, res: 0, upd: 24;
       cdkj7: // global
           R1 = GHC.RTS.Flags.TraceStderr_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddoO_info" {
     sat_sddoO_info:
         const sat_sddoO_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1384;
 },
 sat_sddoS_entry() //  [R1]
         { []
         }
     {offset
       cdkjp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdkjq; else goto cdkjr;
       cdkjq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdkjr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddoR::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddoR::I64, 2)) goto udkjs; else goto udkju;
       udkjs: // global
           if (%MO_S_Lt_W64(_sddoR::I64, 1)) goto udkjt; else goto cdkjn;
       udkjt: // global
           if (%MO_S_Lt_W64(_sddoR::I64, 0)) goto cdkjl; else goto cdkjm;
       cdkjm: // global
           R1 = GHC.RTS.Flags.TraceNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdkjn: // global
           R1 = GHC.RTS.Flags.TraceEventLog_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udkju: // global
           if (%MO_S_Ge_W64(_sddoR::I64, 3)) goto cdkjl; else goto cdkjo;
       cdkjl: // global
           R2 = _sddoR::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl2_entry(R2) args: 24, res: 0, upd: 24;
       cdkjo: // global
           R1 = GHC.RTS.Flags.TraceStderr_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddoS_info" {
     sat_sddoS_info:
         const sat_sddoS_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1384;
 },
 go_dn_sddoK_entry() //  [R1, R2]
         { []
         }
     {offset
       cdkjy: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdkjC; else goto cdkjB;
       cdkjC: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdkjB: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto cdkjw; else goto cdkjx;
       cdkjw: // global
           _sddoI::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_sddoQ_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _sddoI::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sddoO_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdkjx: // global
           I64[Hp - 80] = sat_sddoS_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _cdkjE::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _cdkjE::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_sddoK_info" {
     go_dn_sddoK_info:
         const go_dn_sddoK_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const SddB2_srt+1384;
 },
 sat_sddoT_entry() //  [R1]
         { []
         }
     {offset
       cdkjF: // global
           _sddoT::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdkjG; else goto cdkjH;
       cdkjH: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdkjJ; else goto cdkjI;
       cdkjJ: // global
           HpAlloc = 24;
           goto cdkjG;
       cdkjG: // global
           R1 = _sddoT::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdkjI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sddoT::P64;
           _sddnq::I64 = I64[_sddoT::P64 + 24];
           _sddoI::I64 = _sddnq::I64 - I64[_sddoT::P64 + 16];
           I64[Hp - 16] = go_dn_sddoK_info;
           I64[Hp - 8] = _sddoI::I64;
           I64[Hp] = 2 - _sddoI::I64;
           R2 = _sddnq::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_sddoK_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddoT_info" {
     sat_sddoT_info:
         const sat_sddoT_entry;
         const 8589934592;
         const 4294967316;
         const SddB2_srt+1384;
 },
 sat_sddoH_entry() //  [R1]
         { []
         }
     {offset
       cdkjU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdkjV; else goto cdkjW;
       cdkjV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdkjW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddoG::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddoG::I64, 2)) goto udkjX; else goto udkjZ;
       udkjX: // global
           if (%MO_S_Lt_W64(_sddoG::I64, 1)) goto udkjY; else goto cdkjS;
       udkjY: // global
           if (%MO_S_Lt_W64(_sddoG::I64, 0)) goto cdkjQ; else goto cdkjR;
       cdkjR: // global
           R1 = GHC.RTS.Flags.TraceNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdkjS: // global
           R1 = GHC.RTS.Flags.TraceEventLog_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udkjZ: // global
           if (%MO_S_Ge_W64(_sddoG::I64, 3)) goto cdkjQ; else goto cdkjT;
       cdkjQ: // global
           R2 = _sddoG::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl2_entry(R2) args: 24, res: 0, upd: 24;
       cdkjT: // global
           R1 = GHC.RTS.Flags.TraceStderr_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddoH_info" {
     sat_sddoH_info:
         const sat_sddoH_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1384;
 },
 sat_sddoW_entry() //  [R1]
         { []
         }
     {offset
       cdkke: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdkkf; else goto cdkkg;
       cdkkf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdkkg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddoV::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddoV::I64, 2)) goto udkkh; else goto udkkj;
       udkkh: // global
           if (%MO_S_Lt_W64(_sddoV::I64, 1)) goto udkki; else goto cdkkc;
       udkki: // global
           if (%MO_S_Lt_W64(_sddoV::I64, 0)) goto cdkka; else goto cdkkb;
       cdkkb: // global
           R1 = GHC.RTS.Flags.TraceNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdkkc: // global
           R1 = GHC.RTS.Flags.TraceEventLog_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udkkj: // global
           if (%MO_S_Ge_W64(_sddoV::I64, 3)) goto cdkka; else goto cdkkd;
       cdkka: // global
           R2 = _sddoV::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl2_entry(R2) args: 24, res: 0, upd: 24;
       cdkkd: // global
           R1 = GHC.RTS.Flags.TraceStderr_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddoW_info" {
     sat_sddoW_info:
         const sat_sddoW_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1384;
 },
 sat_sddp8_entry() //  [R1]
         { []
         }
     {offset
       cdkkM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdkkN; else goto cdkkO;
       cdkkN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdkkO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_sddp2_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddp8_info" {
     sat_sddp8_info:
         const sat_sddp8_entry;
         const 8589934593;
         const 4294967311;
         const SddB2_srt+1384;
 },
 sat_sddp6_entry() //  [R1]
         { []
         }
     {offset
       cdkkZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdkl0; else goto cdkl1;
       cdkl0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdkl1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddp5::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddp5::I64, 2)) goto udkl2; else goto udkl4;
       udkl2: // global
           if (%MO_S_Lt_W64(_sddp5::I64, 1)) goto udkl3; else goto cdkkX;
       udkl3: // global
           if (%MO_S_Lt_W64(_sddp5::I64, 0)) goto cdkkV; else goto cdkkW;
       cdkkW: // global
           R1 = GHC.RTS.Flags.TraceNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdkkX: // global
           R1 = GHC.RTS.Flags.TraceEventLog_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udkl4: // global
           if (%MO_S_Ge_W64(_sddp5::I64, 3)) goto cdkkV; else goto cdkkY;
       cdkkV: // global
           R2 = _sddp5::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl2_entry(R2) args: 24, res: 0, upd: 24;
       cdkkY: // global
           R1 = GHC.RTS.Flags.TraceStderr_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddp6_info" {
     sat_sddp6_info:
         const sat_sddp6_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1384;
 },
 sat_sddpa_entry() //  [R1]
         { []
         }
     {offset
       cdklg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdklh; else goto cdkli;
       cdklh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdkli: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddp9::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddp9::I64, 2)) goto udklj; else goto udkll;
       udklj: // global
           if (%MO_S_Lt_W64(_sddp9::I64, 1)) goto udklk; else goto cdkle;
       udklk: // global
           if (%MO_S_Lt_W64(_sddp9::I64, 0)) goto cdklc; else goto cdkld;
       cdkld: // global
           R1 = GHC.RTS.Flags.TraceNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdkle: // global
           R1 = GHC.RTS.Flags.TraceEventLog_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udkll: // global
           if (%MO_S_Ge_W64(_sddp9::I64, 3)) goto cdklc; else goto cdklf;
       cdklc: // global
           R2 = _sddp9::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl2_entry(R2) args: 24, res: 0, upd: 24;
       cdklf: // global
           R1 = GHC.RTS.Flags.TraceStderr_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddpa_info" {
     sat_sddpa_info:
         const sat_sddpa_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1384;
 },
 go_up_sddp2_entry() //  [R1, R2]
         { []
         }
     {offset
       cdklp: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdklt; else goto cdkls;
       cdklt: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdkls: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto cdkln; else goto cdklo;
       cdkln: // global
           _sddp0::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_sddp8_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _sddp0::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sddp6_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdklo: // global
           I64[Hp - 80] = sat_sddpa_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _cdklv::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _cdklv::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_sddp2_info" {
     go_up_sddp2_info:
         const go_up_sddp2_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const SddB2_srt+1384;
 },
 sat_sddpb_entry() //  [R1]
         { []
         }
     {offset
       cdklw: // global
           _sddpb::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdklx; else goto cdkly;
       cdkly: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdklA; else goto cdklz;
       cdklA: // global
           HpAlloc = 24;
           goto cdklx;
       cdklx: // global
           R1 = _sddpb::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdklz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sddpb::P64;
           _sddnq::I64 = I64[_sddpb::P64 + 24];
           _sddp0::I64 = _sddnq::I64 - I64[_sddpb::P64 + 16];
           I64[Hp - 16] = go_up_sddp2_info;
           I64[Hp - 8] = _sddp0::I64;
           I64[Hp] = 2 - _sddp0::I64;
           R2 = _sddnq::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_sddp2_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddpb_info" {
     sat_sddpb_info:
         const sat_sddpb_entry;
         const 8589934592;
         const 4294967316;
         const SddB2_srt+1384;
 },
 sat_sddoZ_entry() //  [R1]
         { []
         }
     {offset
       cdklL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdklM; else goto cdklN;
       cdklM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdklN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddoY::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddoY::I64, 2)) goto udklO; else goto udklQ;
       udklO: // global
           if (%MO_S_Lt_W64(_sddoY::I64, 1)) goto udklP; else goto cdklJ;
       udklP: // global
           if (%MO_S_Lt_W64(_sddoY::I64, 0)) goto cdklH; else goto cdklI;
       cdklI: // global
           R1 = GHC.RTS.Flags.TraceNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdklJ: // global
           R1 = GHC.RTS.Flags.TraceEventLog_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udklQ: // global
           if (%MO_S_Ge_W64(_sddoY::I64, 3)) goto cdklH; else goto cdklK;
       cdklH: // global
           R2 = _sddoY::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl2_entry(R2) args: 24, res: 0, upd: 24;
       cdklK: // global
           R1 = GHC.RTS.Flags.TraceStderr_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddoZ_info" {
     sat_sddoZ_info:
         const sat_sddoZ_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1384;
 },
 sat_sddpe_entry() //  [R1]
         { []
         }
     {offset
       cdkm5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdkm6; else goto cdkm7;
       cdkm6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdkm7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddpd::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddpd::I64, 2)) goto udkm8; else goto udkma;
       udkm8: // global
           if (%MO_S_Lt_W64(_sddpd::I64, 1)) goto udkm9; else goto cdkm3;
       udkm9: // global
           if (%MO_S_Lt_W64(_sddpd::I64, 0)) goto cdkm1; else goto cdkm2;
       cdkm2: // global
           R1 = GHC.RTS.Flags.TraceNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdkm3: // global
           R1 = GHC.RTS.Flags.TraceEventLog_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udkma: // global
           if (%MO_S_Ge_W64(_sddpd::I64, 3)) goto cdkm1; else goto cdkm4;
       cdkm1: // global
           R2 = _sddpd::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl2_entry(R2) args: 24, res: 0, upd: 24;
       cdkm4: // global
           R1 = GHC.RTS.Flags.TraceStderr_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddpe_info" {
     sat_sddpe_info:
         const sat_sddpe_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1384;
 },
 GHC.RTS.Flags.$fEnumDoTrace_$cenumFromThenTo_entry() //  [R2, R3,
                                                           R4]
         { []
         }
     {offset
       cdkmj: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdkmk; else goto cdkml;
       cdkmk: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.RTS.Flags.$fEnumDoTrace_$cenumFromThenTo_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdkml: // global
           I64[Sp - 24] = block_cdkmb_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udko1; else goto cdkmc;
       udko1: // global
           call _cdkmb(R1) args: 0, res: 0, upd: 0;
       cdkmc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.$fEnumDoTrace_$cenumFromThenTo_info" {
     GHC.RTS.Flags.$fEnumDoTrace_$cenumFromThenTo_info:
         const GHC.RTS.Flags.$fEnumDoTrace_$cenumFromThenTo_entry;
         const 0;
         const 281479271677966;
         const 12884901911;
         const SddB2_srt+1384;
 },
 _cdkmb() //  [R1]
         { []
         }
     {offset
       cdkmb: // global
           _sddnl::P64 = P64[Sp + 8];
           _cdkmi::P64 = R1 & 7;
           if (_cdkmi::P64 < 3) goto udknY; else goto cdkmh;
       udknY: // global
           if (_cdkmi::P64 < 2) goto cdkmf; else goto cdkmg;
       cdkmf: // global
           _sddno::I64 = 0;
           goto sddnn;
       cdkmg: // global
           _sddno::I64 = 1;
           goto sddnn;
       cdkmh: // global
           _sddno::I64 = 2;
           goto sddnn;
       sddnn: // global
           I64[Sp] = block_cdkmm_info;
           R1 = _sddnl::P64;
           I64[Sp + 8] = _sddno::I64;
           if (R1 & 7 != 0) goto udko0; else goto cdknx;
       udko0: // global
           call _cdkmm(R1) args: 0, res: 0, upd: 0;
       cdknx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdkmb_info" {
     block_cdkmb_info:
         const _cdkmb;
         const 2;
         const 4294967326;
         const SddB2_srt+1384;
 },
 _cdkmm() //  [R1]
         { []
         }
     {offset
       cdkmm: // global
           _sddnm::P64 = P64[Sp + 16];
           _cdknV::P64 = R1 & 7;
           if (_cdknV::P64 < 3) goto udknZ; else goto cdknL;
       udknZ: // global
           if (_cdknV::P64 < 2) goto cdknD; else goto cdknH;
       cdknD: // global
           _sddnq::I64 = 0;
           goto sddnp;
       cdknH: // global
           _sddnq::I64 = 1;
           goto sddnp;
       cdknL: // global
           _sddnq::I64 = 2;
           goto sddnp;
       sddnp: // global
           I64[Sp] = block_cdkaO_info;
           R1 = _sddnm::P64;
           I64[Sp + 16] = _sddnq::I64;
           if (R1 & 7 != 0) goto udko2; else goto cdkaP;
       udko2: // global
           call _cdkaO(R1) args: 0, res: 0, upd: 0;
       cdkaP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdkmm_info" {
     block_cdkmm_info:
         const _cdkmm;
         const 66;
         const 4294967326;
         const SddB2_srt+1384;
 },
 _cdkaO() //  [R1]
         { []
         }
     {offset
       cdkaO: // global
           _sddno::I64 = I64[Sp + 8];
           _sddnq::I64 = I64[Sp + 16];
           _cdknW::P64 = R1 & 7;
           if (_cdknW::P64 < 3) goto udknX; else goto cdkna;
       udknX: // global
           if (_cdknW::P64 < 2) goto cdkmq; else goto cdkmN;
       cdkmq: // global
           Hp = Hp + 80;
           _sddnr::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cdknd; else goto cdkms;
       cdkms: // global
           if (%MO_S_Lt_W64(_sddnq::I64,
                            _sddno::I64)) goto cdkmD; else goto cdkmM;
       cdkmD: // global
           if (%MO_S_Le_W64(0, _sddnq::I64)) goto cdkmw; else goto cdkmB;
       cdkmw: // global
           I64[Hp - 72] = sat_sddnH_info;
           I64[Hp - 56] = _sddno::I64;
           I64[Hp - 48] = _sddnq::I64;
           I64[Hp - 40] = sat_sddnv_info;
           I64[Hp - 24] = _sddno::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdkmB: // global
           if (%MO_S_Gt_W64(0, _sddno::I64)) goto cdknu; else goto cdkmz;
       cdkmz: // global
           I64[Hp - 72] = sat_sddnK_info;
           I64[Hp - 56] = _sddno::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _cdkmx::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _cdkmx::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdkmM: // global
           if (%MO_S_Ge_W64(0, _sddnq::I64)) goto cdkmG; else goto cdkmL;
       cdkmG: // global
           I64[Hp - 72] = sat_sddnZ_info;
           I64[Hp - 56] = _sddno::I64;
           I64[Hp - 48] = _sddnq::I64;
           I64[Hp - 40] = sat_sddnN_info;
           I64[Hp - 24] = _sddno::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdkmL: // global
           if (%MO_S_Lt_W64(0, _sddno::I64)) goto cdknu; else goto cdkmJ;
       cdkmJ: // global
           I64[Hp - 72] = sat_sddo2_info;
           I64[Hp - 56] = _sddno::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _cdkmH::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _cdkmH::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdkmN: // global
           Hp = Hp + 80;
           _sddnr::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cdknd; else goto cdkmP;
       cdkmP: // global
           if (%MO_S_Lt_W64(_sddnq::I64,
                            _sddno::I64)) goto cdkn0; else goto cdkn9;
       cdkn0: // global
           if (%MO_S_Le_W64(1, _sddnq::I64)) goto cdkmT; else goto cdkmY;
       cdkmT: // global
           I64[Hp - 72] = sat_sddoi_info;
           I64[Hp - 56] = _sddno::I64;
           I64[Hp - 48] = _sddnq::I64;
           I64[Hp - 40] = sat_sddo6_info;
           I64[Hp - 24] = _sddno::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdkmY: // global
           if (%MO_S_Gt_W64(1, _sddno::I64)) goto cdknu; else goto cdkmW;
       cdkmW: // global
           I64[Hp - 72] = sat_sddol_info;
           I64[Hp - 56] = _sddno::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _cdkmU::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _cdkmU::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdkn9: // global
           if (%MO_S_Ge_W64(1, _sddnq::I64)) goto cdkn3; else goto cdkn8;
       cdkn3: // global
           I64[Hp - 72] = sat_sddoA_info;
           I64[Hp - 56] = _sddno::I64;
           I64[Hp - 48] = _sddnq::I64;
           I64[Hp - 40] = sat_sddoo_info;
           I64[Hp - 24] = _sddno::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdkn8: // global
           if (%MO_S_Lt_W64(1, _sddno::I64)) goto cdknu; else goto cdkn6;
       cdkn6: // global
           I64[Hp - 72] = sat_sddoD_info;
           I64[Hp - 56] = _sddno::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _cdkn4::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _cdkn4::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdkna: // global
           Hp = Hp + 80;
           _sddnr::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cdknd; else goto cdknc;
       cdknd: // global
           HpAlloc = 80;
           R1 = _sddnr::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdknc: // global
           if (%MO_S_Lt_W64(_sddnq::I64,
                            _sddno::I64)) goto cdknn; else goto cdknw;
       cdknn: // global
           if (%MO_S_Le_W64(2, _sddnq::I64)) goto cdkng; else goto cdknl;
       cdkng: // global
           I64[Hp - 72] = sat_sddoT_info;
           I64[Hp - 56] = _sddno::I64;
           I64[Hp - 48] = _sddnq::I64;
           I64[Hp - 40] = sat_sddoH_info;
           I64[Hp - 24] = _sddno::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdknl: // global
           if (%MO_S_Gt_W64(2, _sddno::I64)) goto cdknu; else goto cdknj;
       cdknj: // global
           I64[Hp - 72] = sat_sddoW_info;
           I64[Hp - 56] = _sddno::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _cdknh::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _cdknh::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdknw: // global
           if (%MO_S_Ge_W64(2, _sddnq::I64)) goto cdknq; else goto cdknv;
       cdknq: // global
           I64[Hp - 72] = sat_sddpb_info;
           I64[Hp - 56] = _sddno::I64;
           I64[Hp - 48] = _sddnq::I64;
           I64[Hp - 40] = sat_sddoZ_info;
           I64[Hp - 24] = _sddno::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdknv: // global
           if (%MO_S_Lt_W64(2, _sddno::I64)) goto cdknu; else goto cdknt;
       cdknu: // global
           Hp = Hp - 80;
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdknt: // global
           I64[Hp - 72] = sat_sddpe_info;
           I64[Hp - 56] = _sddno::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _cdknr::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _cdknr::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdkaO_info" {
     block_cdkaO_info:
         const _cdkaO;
         const 194;
         const 4294967326;
         const SddB2_srt+1384;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.334354076 UTC

[section ""data" . GHC.RTS.Flags.$fEnumDoTrace_closure" {
     GHC.RTS.Flags.$fEnumDoTrace_closure:
         const GHC.Enum.C:Enum_con_info;
         const GHC.RTS.Flags.$fEnumDoTrace_$csucc_closure+1;
         const GHC.RTS.Flags.$fEnumDoTrace_$cpred_closure+1;
         const GHC.RTS.Flags.$fEnumDoTrace_$ctoEnum_closure+1;
         const GHC.RTS.Flags.$fEnumDoTrace_$cfromEnum_closure+1;
         const GHC.RTS.Flags.$fEnumDoTrace_$cenumFrom_closure+1;
         const GHC.RTS.Flags.$fEnumDoTrace_$cenumFromThen_closure+2;
         const GHC.RTS.Flags.$fEnumDoTrace_$cenumFromTo_closure+2;
         const GHC.RTS.Flags.$fEnumDoTrace_$cenumFromThenTo_closure+3;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.341170275 UTC

[section ""data" . GHC.RTS.Flags.getRTSFlags2_closure" {
     GHC.RTS.Flags.getRTSFlags2_closure:
         const GHC.RTS.Flags.getRTSFlags2_info;
         const 0;
 },
 sat_sddpX_entry() //  [R1]
         { []
         }
     {offset
       cdkwg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdkwh; else goto cdkwi;
       cdkwh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdkwi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto cdkwf; else goto cdkwe;
       cdkwf: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdkwe: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddpX_info" {
     sat_sddpX_info:
         const sat_sddpX_entry;
         const 4294967296;
         const 17;
 },
 sat_sddpV_entry() //  [R1]
         { []
         }
     {offset
       cdkwr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdkws; else goto cdkwt;
       cdkws: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdkwt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto cdkwq; else goto cdkwp;
       cdkwq: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdkwp: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddpV_info" {
     sat_sddpV_info:
         const sat_sddpV_entry;
         const 4294967296;
         const 17;
 },
 sat_sddpT_entry() //  [R1]
         { []
         }
     {offset
       cdkwC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdkwD; else goto cdkwE;
       cdkwD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdkwE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto cdkwB; else goto cdkwA;
       cdkwB: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdkwA: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddpT_info" {
     sat_sddpT_info:
         const sat_sddpT_entry;
         const 4294967296;
         const 17;
 },
 sat_sddpR_entry() //  [R1]
         { []
         }
     {offset
       cdkwN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdkwO; else goto cdkwP;
       cdkwO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdkwP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto cdkwM; else goto cdkwL;
       cdkwM: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdkwL: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddpR_info" {
     sat_sddpR_info:
         const sat_sddpR_entry;
         const 4294967296;
         const 17;
 },
 sat_sddpP_entry() //  [R1]
         { []
         }
     {offset
       cdkwY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdkwZ; else goto cdkx0;
       cdkwZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdkx0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto cdkwX; else goto cdkwW;
       cdkwX: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdkwW: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddpP_info" {
     sat_sddpP_info:
         const sat_sddpP_entry;
         const 4294967296;
         const 17;
 },
 sat_sddpN_entry() //  [R1]
         { []
         }
     {offset
       cdkx9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdkxa; else goto cdkxb;
       cdkxa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdkxb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto cdkx8; else goto cdkx7;
       cdkx8: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdkx7: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddpN_info" {
     sat_sddpN_info:
         const sat_sddpN_entry;
         const 4294967296;
         const 17;
 },
 sat_sddpL_entry() //  [R1]
         { []
         }
     {offset
       cdkxm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdkxn; else goto cdkxo;
       cdkxn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdkxo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddpK::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddpK::I64, 2)) goto udkxp; else goto udkxr;
       udkxp: // global
           if (%MO_S_Lt_W64(_sddpK::I64, 1)) goto udkxq; else goto cdkxk;
       udkxq: // global
           if (%MO_S_Lt_W64(_sddpK::I64, 0)) goto cdkxi; else goto cdkxj;
       cdkxj: // global
           R1 = GHC.RTS.Flags.TraceNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdkxk: // global
           R1 = GHC.RTS.Flags.TraceEventLog_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udkxr: // global
           if (%MO_S_Ge_W64(_sddpK::I64, 3)) goto cdkxi; else goto cdkxl;
       cdkxi: // global
           R2 = _sddpK::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl2_entry(R2) args: 24, res: 0, upd: 24;
       cdkxl: // global
           R1 = GHC.RTS.Flags.TraceStderr_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddpL_info" {
     sat_sddpL_info:
         const sat_sddpL_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1384;
 },
 GHC.RTS.Flags.getRTSFlags2_entry() //  []
         { []
         }
     {offset
       cdkxs: // global
           Hp = Hp + 232;
           if (Hp > HpLim) (likely: False) goto cdkxx; else goto cdkxw;
       cdkxx: // global
           HpAlloc = 232;
           R1 = GHC.RTS.Flags.getRTSFlags2_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdkxw: // global
           _sddpl::I64 = %MO_SS_Conv_W32_W64(I32[RtsFlags+336]);
           _sddpp::I64 = %MO_UU_Conv_W8_W64(I8[RtsFlags+340]);
           _sddpt::I64 = %MO_UU_Conv_W8_W64(I8[RtsFlags+341]);
           _sddpx::I64 = %MO_UU_Conv_W8_W64(I8[RtsFlags+342]);
           _sddpB::I64 = %MO_UU_Conv_W8_W64(I8[RtsFlags+343]);
           _sddpF::I64 = %MO_UU_Conv_W8_W64(I8[RtsFlags+344]);
           _sddpJ::I64 = %MO_UU_Conv_W8_W64(I8[RtsFlags+345]);
           I64[Hp - 224] = sat_sddpX_info;
           I64[Hp - 208] = _sddpJ::I64;
           I64[Hp - 200] = sat_sddpV_info;
           I64[Hp - 184] = _sddpF::I64;
           I64[Hp - 176] = sat_sddpT_info;
           I64[Hp - 160] = _sddpB::I64;
           I64[Hp - 152] = sat_sddpR_info;
           I64[Hp - 136] = _sddpx::I64;
           I64[Hp - 128] = sat_sddpP_info;
           I64[Hp - 112] = _sddpt::I64;
           I64[Hp - 104] = sat_sddpN_info;
           I64[Hp - 88] = _sddpp::I64;
           I64[Hp - 80] = sat_sddpL_info;
           I64[Hp - 64] = _sddpl::I64;
           I64[Hp - 56] = GHC.RTS.Flags.TraceFlags_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = Hp - 104;
           P64[Hp - 32] = Hp - 128;
           P64[Hp - 24] = Hp - 152;
           P64[Hp - 16] = Hp - 176;
           P64[Hp - 8] = Hp - 200;
           P64[Hp] = Hp - 224;
           R1 = Hp - 55;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.getRTSFlags2_info" {
     GHC.RTS.Flags.getRTSFlags2_info:
         const GHC.RTS.Flags.getRTSFlags2_entry;
         const 0;
         const 562954248388622;
         const 4294967299;
         const SddB2_srt+1384;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.361658125 UTC

[section ""data" . GHC.RTS.Flags.getTraceFlags_closure" {
     GHC.RTS.Flags.getTraceFlags_closure:
         const GHC.RTS.Flags.getTraceFlags_info;
         const 0;
 },
 GHC.RTS.Flags.getTraceFlags_entry() //  []
         { []
         }
     {offset
       cdkz3: // global
           call GHC.RTS.Flags.getRTSFlags2_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.getTraceFlags_info" {
     GHC.RTS.Flags.getTraceFlags_info:
         const GHC.RTS.Flags.getTraceFlags_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const SddB2_srt+1520;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.366708704 UTC

[section ""data" . GHC.RTS.Flags.getCCFlags1_closure" {
     GHC.RTS.Flags.getCCFlags1_closure:
         const GHC.RTS.Flags.getCCFlags1_info;
         const 0;
 },
 sat_sddqc_entry() //  [R1]
         { []
         }
     {offset
       cdkzz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdkzA; else goto cdkA5;
       cdkzA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdkA5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddqb::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddqb::I64, 3)) goto udkA6; else goto udkA9;
       udkA6: // global
           if (%MO_S_Lt_W64(_sddqb::I64, 1)) goto udkA7; else goto udkA8;
       udkA7: // global
           if (%MO_S_Lt_W64(_sddqb::I64, 0)) goto cdkzt; else goto cdkzu;
       cdkzu: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udkA8: // global
           if (%MO_S_Lt_W64(_sddqb::I64, 2)) goto cdkzv; else goto cdkzw;
       cdkzv: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdkzw: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udkA9: // global
           if (%MO_S_Ge_W64(_sddqb::I64, 5)) goto cdkzt; else goto udkAa;
       cdkzt: // global
           R2 = _sddqb::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udkAa: // global
           if (%MO_S_Lt_W64(_sddqb::I64, 4)) goto cdkzx; else goto cdkzy;
       cdkzx: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdkzy: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddqc_info" {
     sat_sddqc_info:
         const sat_sddqc_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1528;
 },
 GHC.RTS.Flags.getCCFlags1_entry() //  []
         { []
         }
     {offset
       cdkAb: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdkAg; else goto cdkAf;
       cdkAg: // global
           HpAlloc = 88;
           R1 = GHC.RTS.Flags.getCCFlags1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdkAf: // global
           _sddq2::I64 = %MO_UU_Conv_W32_W64(I32[RtsFlags]);
           _sddq6::I64 = I64[RtsFlags+4];
           _sddqa::I64 = I64[RtsFlags+8];
           I64[Hp - 80] = GHC.Types.I#_con_info;
           I64[Hp - 72] = _sddqa::I64;
           I64[Hp - 64] = GHC.Types.I#_con_info;
           I64[Hp - 56] = _sddq6::I64;
           I64[Hp - 48] = sat_sddqc_info;
           I64[Hp - 32] = _sddq2::I64;
           I64[Hp - 24] = GHC.RTS.Flags.CCFlags_con_info;
           P64[Hp - 16] = Hp - 48;
           P64[Hp - 8] = Hp - 63;
           P64[Hp] = Hp - 79;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.getCCFlags1_info" {
     GHC.RTS.Flags.getCCFlags1_info:
         const GHC.RTS.Flags.getCCFlags1_entry;
         const 0;
         const 12884901902;
         const 4294967299;
         const SddB2_srt+1528;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.375674319 UTC

[section ""data" . GHC.RTS.Flags.getCCFlags_closure" {
     GHC.RTS.Flags.getCCFlags_closure:
         const GHC.RTS.Flags.getCCFlags_info;
         const 0;
 },
 GHC.RTS.Flags.getCCFlags_entry() //  []
         { []
         }
     {offset
       cdkAK: // global
           call GHC.RTS.Flags.getCCFlags1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.getCCFlags_info" {
     GHC.RTS.Flags.getCCFlags_info:
         const GHC.RTS.Flags.getCCFlags_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const SddB2_srt+1536;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.390342819 UTC

[section ""data" . GHC.RTS.Flags.getDebugFlags1_closure" {
     GHC.RTS.Flags.getDebugFlags1_closure:
         const GHC.RTS.Flags.getDebugFlags1_info;
 },
 sat_sddrI_entry() //  [R1]
         { []
         }
     {offset
       cdkBM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdkBN; else goto cdkBO;
       cdkBN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdkBO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto cdkBL; else goto cdkBK;
       cdkBL: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdkBK: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddrI_info" {
     sat_sddrI_info:
         const sat_sddrI_entry;
         const 4294967296;
         const 17;
 },
 sat_sddrG_entry() //  [R1]
         { []
         }
     {offset
       cdkBX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdkBY; else goto cdkBZ;
       cdkBY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdkBZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto cdkBW; else goto cdkBV;
       cdkBW: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdkBV: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddrG_info" {
     sat_sddrG_info:
         const sat_sddrG_entry;
         const 4294967296;
         const 17;
 },
 sat_sddrE_entry() //  [R1]
         { []
         }
     {offset
       cdkC8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdkC9; else goto cdkCa;
       cdkC9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdkCa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto cdkC7; else goto cdkC6;
       cdkC7: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdkC6: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddrE_info" {
     sat_sddrE_info:
         const sat_sddrE_entry;
         const 4294967296;
         const 17;
 },
 sat_sddrC_entry() //  [R1]
         { []
         }
     {offset
       cdkCj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdkCk; else goto cdkCl;
       cdkCk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdkCl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto cdkCi; else goto cdkCh;
       cdkCi: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdkCh: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddrC_info" {
     sat_sddrC_info:
         const sat_sddrC_entry;
         const 4294967296;
         const 17;
 },
 sat_sddrA_entry() //  [R1]
         { []
         }
     {offset
       cdkCu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdkCv; else goto cdkCw;
       cdkCv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdkCw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto cdkCt; else goto cdkCs;
       cdkCt: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdkCs: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddrA_info" {
     sat_sddrA_info:
         const sat_sddrA_entry;
         const 4294967296;
         const 17;
 },
 sat_sddry_entry() //  [R1]
         { []
         }
     {offset
       cdkCF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdkCG; else goto cdkCH;
       cdkCG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdkCH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto cdkCE; else goto cdkCD;
       cdkCE: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdkCD: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddry_info" {
     sat_sddry_info:
         const sat_sddry_entry;
         const 4294967296;
         const 17;
 },
 sat_sddrw_entry() //  [R1]
         { []
         }
     {offset
       cdkCQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdkCR; else goto cdkCS;
       cdkCR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdkCS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto cdkCP; else goto cdkCO;
       cdkCP: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdkCO: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddrw_info" {
     sat_sddrw_info:
         const sat_sddrw_entry;
         const 4294967296;
         const 17;
 },
 sat_sddru_entry() //  [R1]
         { []
         }
     {offset
       cdkD1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdkD2; else goto cdkD3;
       cdkD2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdkD3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto cdkD0; else goto cdkCZ;
       cdkD0: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdkCZ: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddru_info" {
     sat_sddru_info:
         const sat_sddru_entry;
         const 4294967296;
         const 17;
 },
 sat_sddrs_entry() //  [R1]
         { []
         }
     {offset
       cdkDc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdkDd; else goto cdkDe;
       cdkDd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdkDe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto cdkDb; else goto cdkDa;
       cdkDb: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdkDa: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddrs_info" {
     sat_sddrs_info:
         const sat_sddrs_entry;
         const 4294967296;
         const 17;
 },
 sat_sddrq_entry() //  [R1]
         { []
         }
     {offset
       cdkDn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdkDo; else goto cdkDp;
       cdkDo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdkDp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto cdkDm; else goto cdkDl;
       cdkDm: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdkDl: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddrq_info" {
     sat_sddrq_info:
         const sat_sddrq_entry;
         const 4294967296;
         const 17;
 },
 sat_sddro_entry() //  [R1]
         { []
         }
     {offset
       cdkDy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdkDz; else goto cdkDA;
       cdkDz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdkDA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto cdkDx; else goto cdkDw;
       cdkDx: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdkDw: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddro_info" {
     sat_sddro_info:
         const sat_sddro_entry;
         const 4294967296;
         const 17;
 },
 sat_sddrm_entry() //  [R1]
         { []
         }
     {offset
       cdkDJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdkDK; else goto cdkDL;
       cdkDK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdkDL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto cdkDI; else goto cdkDH;
       cdkDI: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdkDH: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddrm_info" {
     sat_sddrm_info:
         const sat_sddrm_entry;
         const 4294967296;
         const 17;
 },
 sat_sddrk_entry() //  [R1]
         { []
         }
     {offset
       cdkDU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdkDV; else goto cdkDW;
       cdkDV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdkDW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto cdkDT; else goto cdkDS;
       cdkDT: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdkDS: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddrk_info" {
     sat_sddrk_info:
         const sat_sddrk_entry;
         const 4294967296;
         const 17;
 },
 sat_sddri_entry() //  [R1]
         { []
         }
     {offset
       cdkE5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdkE6; else goto cdkE7;
       cdkE6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdkE7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto cdkE4; else goto cdkE3;
       cdkE4: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdkE3: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddri_info" {
     sat_sddri_info:
         const sat_sddri_entry;
         const 4294967296;
         const 17;
 },
 sat_sddrg_entry() //  [R1]
         { []
         }
     {offset
       cdkEg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdkEh; else goto cdkEi;
       cdkEh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdkEi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto cdkEf; else goto cdkEe;
       cdkEf: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdkEe: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddrg_info" {
     sat_sddrg_info:
         const sat_sddrg_entry;
         const 4294967296;
         const 17;
 },
 GHC.RTS.Flags.getDebugFlags1_entry() //  []
         { []
         }
     {offset
       cdkEj: // global
           Hp = Hp + 488;
           if (Hp > HpLim) (likely: False) goto cdkEo; else goto cdkEn;
       cdkEo: // global
           HpAlloc = 488;
           R1 = GHC.RTS.Flags.getDebugFlags1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdkEn: // global
           _sddqk::I64 = %MO_UU_Conv_W8_W64(I8[RtsFlags+200]);
           _sddqo::I64 = %MO_UU_Conv_W8_W64(I8[RtsFlags+201]);
           _sddqs::I64 = %MO_UU_Conv_W8_W64(I8[RtsFlags+202]);
           _sddqw::I64 = %MO_UU_Conv_W8_W64(I8[RtsFlags+203]);
           _sddqA::I64 = %MO_UU_Conv_W8_W64(I8[RtsFlags+204]);
           _sddqE::I64 = %MO_UU_Conv_W8_W64(I8[RtsFlags+205]);
           _sddqI::I64 = %MO_UU_Conv_W8_W64(I8[RtsFlags+206]);
           _sddqM::I64 = %MO_UU_Conv_W8_W64(I8[RtsFlags+207]);
           _sddqQ::I64 = %MO_UU_Conv_W8_W64(I8[RtsFlags+208]);
           _sddqU::I64 = %MO_UU_Conv_W8_W64(I8[RtsFlags+209]);
           _sddqY::I64 = %MO_UU_Conv_W8_W64(I8[RtsFlags+210]);
           _sddr2::I64 = %MO_UU_Conv_W8_W64(I8[RtsFlags+211]);
           _sddr6::I64 = %MO_UU_Conv_W8_W64(I8[RtsFlags+212]);
           _sddra::I64 = %MO_UU_Conv_W8_W64(I8[RtsFlags+213]);
           _sddre::I64 = %MO_UU_Conv_W8_W64(I8[RtsFlags+214]);
           I64[Hp - 480] = sat_sddrI_info;
           I64[Hp - 464] = _sddre::I64;
           I64[Hp - 456] = sat_sddrG_info;
           I64[Hp - 440] = _sddra::I64;
           I64[Hp - 432] = sat_sddrE_info;
           I64[Hp - 416] = _sddr6::I64;
           I64[Hp - 408] = sat_sddrC_info;
           I64[Hp - 392] = _sddr2::I64;
           I64[Hp - 384] = sat_sddrA_info;
           I64[Hp - 368] = _sddqY::I64;
           I64[Hp - 360] = sat_sddry_info;
           I64[Hp - 344] = _sddqU::I64;
           I64[Hp - 336] = sat_sddrw_info;
           I64[Hp - 320] = _sddqQ::I64;
           I64[Hp - 312] = sat_sddru_info;
           I64[Hp - 296] = _sddqM::I64;
           I64[Hp - 288] = sat_sddrs_info;
           I64[Hp - 272] = _sddqI::I64;
           I64[Hp - 264] = sat_sddrq_info;
           I64[Hp - 248] = _sddqE::I64;
           I64[Hp - 240] = sat_sddro_info;
           I64[Hp - 224] = _sddqA::I64;
           I64[Hp - 216] = sat_sddrm_info;
           I64[Hp - 200] = _sddqw::I64;
           I64[Hp - 192] = sat_sddrk_info;
           I64[Hp - 176] = _sddqs::I64;
           I64[Hp - 168] = sat_sddri_info;
           I64[Hp - 152] = _sddqo::I64;
           I64[Hp - 144] = sat_sddrg_info;
           I64[Hp - 128] = _sddqk::I64;
           I64[Hp - 120] = GHC.RTS.Flags.DebugFlags_con_info;
           P64[Hp - 112] = Hp - 144;
           P64[Hp - 104] = Hp - 168;
           P64[Hp - 96] = Hp - 192;
           P64[Hp - 88] = Hp - 216;
           P64[Hp - 80] = Hp - 240;
           P64[Hp - 72] = Hp - 264;
           P64[Hp - 64] = Hp - 288;
           P64[Hp - 56] = Hp - 312;
           P64[Hp - 48] = Hp - 336;
           P64[Hp - 40] = Hp - 360;
           P64[Hp - 32] = Hp - 384;
           P64[Hp - 24] = Hp - 408;
           P64[Hp - 16] = Hp - 432;
           P64[Hp - 8] = Hp - 456;
           P64[Hp] = Hp - 480;
           R1 = Hp - 119;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.getDebugFlags1_info" {
     GHC.RTS.Flags.getDebugFlags1_info:
         const GHC.RTS.Flags.getDebugFlags1_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.430075592 UTC

[section ""data" . GHC.RTS.Flags.getDebugFlags_closure" {
     GHC.RTS.Flags.getDebugFlags_closure:
         const GHC.RTS.Flags.getDebugFlags_info;
 },
 GHC.RTS.Flags.getDebugFlags_entry() //  []
         { []
         }
     {offset
       cdkHt: // global
           call GHC.RTS.Flags.getDebugFlags1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.getDebugFlags_info" {
     GHC.RTS.Flags.getDebugFlags_info:
         const GHC.RTS.Flags.getDebugFlags_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.43689745 UTC

[section ""data" . GHC.RTS.Flags.getMiscFlags1_closure" {
     GHC.RTS.Flags.getMiscFlags1_closure:
         const GHC.RTS.Flags.getMiscFlags1_info;
 },
 sat_sddsn_entry() //  [R1]
         { []
         }
     {offset
       cdkI8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdkI9; else goto cdkIa;
       cdkI9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdkIa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto cdkI7; else goto cdkI6;
       cdkI7: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdkI6: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddsn_info" {
     sat_sddsn_info:
         const sat_sddsn_entry;
         const 4294967296;
         const 17;
 },
 sat_sddsl_entry() //  [R1]
         { []
         }
     {offset
       cdkIj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdkIk; else goto cdkIl;
       cdkIk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdkIl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto cdkIi; else goto cdkIh;
       cdkIi: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdkIh: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddsl_info" {
     sat_sddsl_info:
         const sat_sddsl_entry;
         const 4294967296;
         const 17;
 },
 sat_sddsj_entry() //  [R1]
         { []
         }
     {offset
       cdkIu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdkIv; else goto cdkIw;
       cdkIv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdkIw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto cdkIt; else goto cdkIs;
       cdkIt: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdkIs: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddsj_info" {
     sat_sddsj_info:
         const sat_sddsj_entry;
         const 4294967296;
         const 17;
 },
 sat_sddsh_entry() //  [R1]
         { []
         }
     {offset
       cdkIF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdkIG; else goto cdkIH;
       cdkIG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdkIH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto cdkIE; else goto cdkID;
       cdkIE: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdkID: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddsh_info" {
     sat_sddsh_info:
         const sat_sddsh_entry;
         const 4294967296;
         const 17;
 },
 sat_sddsf_entry() //  [R1]
         { []
         }
     {offset
       cdkIQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdkIR; else goto cdkIS;
       cdkIR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdkIS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto cdkIP; else goto cdkIO;
       cdkIP: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdkIO: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddsf_info" {
     sat_sddsf_info:
         const sat_sddsf_entry;
         const 4294967296;
         const 17;
 },
 GHC.RTS.Flags.getMiscFlags1_entry() //  []
         { []
         }
     {offset
       cdkIT: // global
           Hp = Hp + 216;
           if (Hp > HpLim) (likely: False) goto cdkIZ; else goto cdkIY;
       cdkIZ: // global
           HpAlloc = 216;
           R1 = GHC.RTS.Flags.getMiscFlags1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdkIY: // global
           _sddrO::I64 = I64[RtsFlags+176];
           _sddrS::I64 = %MO_UU_Conv_W8_W64(I8[RtsFlags+184]);
           _sddrW::I64 = %MO_UU_Conv_W8_W64(I8[RtsFlags+185]);
           _sdds0::I64 = %MO_UU_Conv_W8_W64(I8[RtsFlags+186]);
           _sdds4::I64 = %MO_UU_Conv_W8_W64(I8[RtsFlags+187]);
           _sdds8::I64 = %MO_UU_Conv_W8_W64(I8[RtsFlags+188]);
           _sddsc::I64 = I64[RtsFlags+192];
           I64[Hp - 208] = GHC.Types.W#_con_info;
           I64[Hp - 200] = _sddsc::I64;
           I64[Hp - 192] = sat_sddsn_info;
           I64[Hp - 176] = _sdds8::I64;
           I64[Hp - 168] = sat_sddsl_info;
           I64[Hp - 152] = _sdds4::I64;
           I64[Hp - 144] = sat_sddsj_info;
           I64[Hp - 128] = _sdds0::I64;
           I64[Hp - 120] = sat_sddsh_info;
           I64[Hp - 104] = _sddrW::I64;
           I64[Hp - 96] = sat_sddsf_info;
           I64[Hp - 80] = _sddrS::I64;
           I64[Hp - 72] = GHC.Word.W64#_con_info;
           I64[Hp - 64] = _sddrO::I64;
           I64[Hp - 56] = GHC.RTS.Flags.MiscFlags_con_info;
           P64[Hp - 48] = Hp - 71;
           P64[Hp - 40] = Hp - 96;
           P64[Hp - 32] = Hp - 120;
           P64[Hp - 24] = Hp - 144;
           P64[Hp - 16] = Hp - 168;
           P64[Hp - 8] = Hp - 192;
           P64[Hp] = Hp - 207;
           R1 = Hp - 55;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.getMiscFlags1_info" {
     GHC.RTS.Flags.getMiscFlags1_info:
         const GHC.RTS.Flags.getMiscFlags1_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.452743213 UTC

[section ""data" . GHC.RTS.Flags.getMiscFlags_closure" {
     GHC.RTS.Flags.getMiscFlags_closure:
         const GHC.RTS.Flags.getMiscFlags_info;
 },
 GHC.RTS.Flags.getMiscFlags_entry() //  []
         { []
         }
     {offset
       cdkKe: // global
           call GHC.RTS.Flags.getMiscFlags1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.getMiscFlags_info" {
     GHC.RTS.Flags.getMiscFlags_info:
         const GHC.RTS.Flags.getMiscFlags_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.456749649 UTC

[section ""data" . GHC.RTS.Flags.getConcFlags1_closure" {
     GHC.RTS.Flags.getConcFlags1_closure:
         const GHC.RTS.Flags.getConcFlags1_info;
 },
 GHC.RTS.Flags.getConcFlags1_entry() //  []
         { []
         }
     {offset
       cdkKr: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdkKC; else goto cdkKB;
       cdkKC: // global
           HpAlloc = 56;
           R1 = GHC.RTS.Flags.getConcFlags1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdkKB: // global
           _sddsu::I64 = I64[RtsFlags+160];
           _sddsy::I64 = I64[RtsFlags+168];
           I64[Hp - 48] = GHC.Types.I#_con_info;
           I64[Hp - 40] = _sddsy::I64;
           I64[Hp - 32] = GHC.Word.W64#_con_info;
           I64[Hp - 24] = _sddsu::I64;
           I64[Hp - 16] = GHC.RTS.Flags.ConcFlags_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.getConcFlags1_info" {
     GHC.RTS.Flags.getConcFlags1_info:
         const GHC.RTS.Flags.getConcFlags1_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.461001982 UTC

[section ""data" . GHC.RTS.Flags.getConcFlags_closure" {
     GHC.RTS.Flags.getConcFlags_closure:
         const GHC.RTS.Flags.getConcFlags_info;
 },
 GHC.RTS.Flags.getConcFlags_entry() //  []
         { []
         }
     {offset
       cdkKT: // global
           call GHC.RTS.Flags.getConcFlags1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.getConcFlags_info" {
     GHC.RTS.Flags.getConcFlags_info:
         const GHC.RTS.Flags.getConcFlags_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.467939179 UTC

[section ""data" . GHC.RTS.Flags.getParFlags1_closure" {
     GHC.RTS.Flags.getParFlags1_closure:
         const GHC.RTS.Flags.getParFlags1_info;
 },
 sat_sddtu_entry() //  [R1]
         { []
         }
     {offset
       cdkLG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdkLH; else goto cdkLI;
       cdkLH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdkLI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto cdkLF; else goto cdkLE;
       cdkLF: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdkLE: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddtu_info" {
     sat_sddtu_info:
         const sat_sddtu_entry;
         const 4294967296;
         const 17;
 },
 sat_sddtp_entry() //  [R1]
         { []
         }
     {offset
       cdkLU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdkLV; else goto cdkLW;
       cdkLV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdkLW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto cdkLT; else goto cdkLS;
       cdkLT: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdkLS: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddtp_info" {
     sat_sddtp_info:
         const sat_sddtp_entry;
         const 4294967296;
         const 17;
 },
 sat_sddtm_entry() //  [R1]
         { []
         }
     {offset
       cdkM6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdkM7; else goto cdkM8;
       cdkM7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdkM8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto cdkM5; else goto cdkM4;
       cdkM5: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdkM4: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddtm_info" {
     sat_sddtm_info:
         const sat_sddtm_entry;
         const 4294967296;
         const 17;
 },
 sat_sddtj_entry() //  [R1]
         { []
         }
     {offset
       cdkMi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdkMj; else goto cdkMk;
       cdkMj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdkMk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto cdkMh; else goto cdkMg;
       cdkMh: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdkMg: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddtj_info" {
     sat_sddtj_info:
         const sat_sddtj_entry;
         const 4294967296;
         const 17;
 },
 GHC.RTS.Flags.getParFlags1_entry() //  []
         { []
         }
     {offset
       cdkMl: // global
           Hp = Hp + 280;
           if (Hp > HpLim) (likely: False) goto cdkMr; else goto cdkMq;
       cdkMr: // global
           HpAlloc = 280;
           R1 = GHC.RTS.Flags.getParFlags1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdkMq: // global
           _sddsG::I64 = %MO_UU_Conv_W32_W64(I32[RtsFlags+368]);
           _sddsK::I64 = %MO_UU_Conv_W8_W64(I8[RtsFlags+372]);
           _sddsO::I64 = %MO_UU_Conv_W32_W64(I32[RtsFlags+376]);
           _sddsS::I64 = %MO_UU_Conv_W8_W64(I8[RtsFlags+380]);
           _sddsW::I64 = %MO_UU_Conv_W32_W64(I32[RtsFlags+384]);
           _sddt0::I64 = %MO_UU_Conv_W8_W64(I8[RtsFlags+388]);
           _sddt4::I64 = %MO_UU_Conv_W32_W64(I32[RtsFlags+392]);
           _sddt8::I64 = %MO_UU_Conv_W32_W64(I32[RtsFlags+396]);
           _sddtc::I64 = %MO_UU_Conv_W32_W64(I32[RtsFlags+400]);
           _sddtg::I64 = %MO_UU_Conv_W8_W64(I8[RtsFlags+404]);
           I64[Hp - 272] = sat_sddtu_info;
           I64[Hp - 256] = _sddtg::I64;
           I64[Hp - 248] = GHC.Word.W32#_con_info;
           I64[Hp - 240] = _sddtc::I64;
           I64[Hp - 232] = GHC.Word.W32#_con_info;
           I64[Hp - 224] = _sddt8::I64;
           I64[Hp - 216] = GHC.Word.W32#_con_info;
           I64[Hp - 208] = _sddt4::I64;
           I64[Hp - 200] = sat_sddtp_info;
           I64[Hp - 184] = _sddt0::I64;
           I64[Hp - 176] = GHC.Word.W32#_con_info;
           I64[Hp - 168] = _sddsW::I64;
           I64[Hp - 160] = sat_sddtm_info;
           I64[Hp - 144] = _sddsS::I64;
           I64[Hp - 136] = GHC.Word.W32#_con_info;
           I64[Hp - 128] = _sddsO::I64;
           I64[Hp - 120] = sat_sddtj_info;
           I64[Hp - 104] = _sddsK::I64;
           I64[Hp - 96] = GHC.Word.W32#_con_info;
           I64[Hp - 88] = _sddsG::I64;
           I64[Hp - 80] = GHC.RTS.Flags.ParFlags_con_info;
           P64[Hp - 72] = Hp - 95;
           P64[Hp - 64] = Hp - 120;
           P64[Hp - 56] = Hp - 135;
           P64[Hp - 48] = Hp - 160;
           P64[Hp - 40] = Hp - 175;
           P64[Hp - 32] = Hp - 200;
           P64[Hp - 24] = Hp - 215;
           P64[Hp - 16] = Hp - 231;
           P64[Hp - 8] = Hp - 247;
           P64[Hp] = Hp - 272;
           R1 = Hp - 79;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.getParFlags1_info" {
     GHC.RTS.Flags.getParFlags1_info:
         const GHC.RTS.Flags.getParFlags1_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.480964106 UTC

[section ""data" . GHC.RTS.Flags.getParFlags_closure" {
     GHC.RTS.Flags.getParFlags_closure:
         const GHC.RTS.Flags.getParFlags_info;
 },
 GHC.RTS.Flags.getParFlags_entry() //  []
         { []
         }
     {offset
       cdkNG: // global
           call GHC.RTS.Flags.getParFlags1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.getParFlags_info" {
     GHC.RTS.Flags.getParFlags_info:
         const GHC.RTS.Flags.getParFlags_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.496611767 UTC

[section ""data" . GHC.RTS.Flags.getProfFlags1_closure" {
     GHC.RTS.Flags.getProfFlags1_closure:
         const GHC.RTS.Flags.getProfFlags1_info;
         const 0;
 },
 sat_sdduS_entry() //  [R1]
         { []
         }
     {offset
       cdkPg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdkPh; else goto cdkPi;
       cdkPh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdkPi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto cdkPf; else goto cdkPe;
       cdkPf: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdkPe: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdduS_info" {
     sat_sdduS_info:
         const sat_sdduS_entry;
         const 4294967296;
         const 17;
 },
 sat_sdduQ_entry() //  [R1]
         { []
         }
     {offset
       cdkPr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdkPs; else goto cdkPt;
       cdkPs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdkPt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto cdkPq; else goto cdkPp;
       cdkPq: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdkPp: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdduQ_info" {
     sat_sdduQ_info:
         const sat_sdduQ_entry;
         const 4294967296;
         const 17;
 },
 sat_sdduM_entry() //  [R1]
         { []
         }
     {offset
       cdkPA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdkPB; else goto cdkPC;
       cdkPB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdkPC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.RTS.Flags.$w$ctoEnum1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdduM_info" {
     sat_sdduM_info:
         const sat_sdduM_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1544;
 },
 GHC.RTS.Flags.getProfFlags1_entry() //  []
         { []
         }
     {offset
       cdkPD: // global
           if ((Sp + -120) < SpLim) (likely: False) goto cdkPE; else goto cdkPF;
       cdkPE: // global
           R1 = GHC.RTS.Flags.getProfFlags1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdkPF: // global
           _sddtA::I64 = I64[RtsFlags+248];
           _sddtE::I64 = I64[RtsFlags+256];
           _sddtI::I64 = I64[RtsFlags+264];
           _sddtM::I64 = %MO_UU_Conv_W8_W64(I8[RtsFlags+268]);
           _sddtQ::I64 = %MO_UU_Conv_W8_W64(I8[RtsFlags+269]);
           _sddtU::I64 = I64[RtsFlags+272];
           _sddtY::I64 = I64[RtsFlags+276];
           _sddu2::I64 = I64[RtsFlags+280];
           if (_sddu2::I64 == 0) goto cdkRp; else goto cdkRj;
       cdkRp: // global
           I64[Sp - 72] = RtsFlags+248;
           I64[Sp - 64] = _sddtA::I64;
           I64[Sp - 56] = _sddtE::I64;
           I64[Sp - 48] = _sddtI::I64;
           I64[Sp - 40] = _sddtM::I64;
           I64[Sp - 32] = _sddtQ::I64;
           I64[Sp - 24] = _sddtU::I64;
           I64[Sp - 16] = _sddtY::I64;
           P64[Sp - 8] = GHC.Base.Nothing_closure+1;
           Sp = Sp - 72;
           call _sddu3() args: 0, res: 0, upd: 0;
       cdkRj: // global
           I64[Sp - 80] = block_cdkRf_info;
           R1 = GHC.IO.Encoding.getForeignEncoding_closure;
           I64[Sp - 72] = RtsFlags+248;
           I64[Sp - 64] = _sddtA::I64;
           I64[Sp - 56] = _sddtE::I64;
           I64[Sp - 48] = _sddtI::I64;
           I64[Sp - 40] = _sddtM::I64;
           I64[Sp - 32] = _sddtQ::I64;
           I64[Sp - 24] = _sddtU::I64;
           I64[Sp - 16] = _sddtY::I64;
           I64[Sp - 8] = _sddu2::I64;
           Sp = Sp - 80;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.getProfFlags1_info" {
     GHC.RTS.Flags.getProfFlags1_info:
         const GHC.RTS.Flags.getProfFlags1_entry;
         const 0;
         const 64424509454;
         const 4294967299;
         const SddB2_srt+1544;
 },
 _cdkRf() //  [R1]
         { []
         }
     {offset
       cdkRf: // global
           I64[Sp] = block_cdkRh_info;
           R3 = I64[Sp + 72];
           R2 = R1;
           call GHC.Foreign.$wpeekCString_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdkRf_info" {
     block_cdkRf_info:
         const _cdkRf;
         const 32713;
         const 30064771102;
         const SddB2_srt+1544;
 },
 _cdkRh() //  [R1]
         { []
         }
     {offset
       cdkRh: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdkRo; else goto cdkRn;
       cdkRo: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdkRn: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = R1;
           P64[Sp + 72] = Hp - 6;
           Sp = Sp + 8;
           call _sddu3() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cdkRh_info" {
     block_cdkRh_info:
         const _cdkRh;
         const 32713;
         const 30064771102;
         const SddB2_srt+1544;
 },
 _sddu3() //  []
         { []
         }
     {offset
       sddu3: // global
           _sddu9::I64 = I64[I64[Sp] + 40];
           if (_sddu9::I64 == 0) goto cdkRb; else goto cdkR5;
       cdkRb: // global
           P64[Sp - 8] = GHC.Base.Nothing_closure+1;
           Sp = Sp - 8;
           call _sddua() args: 0, res: 0, upd: 0;
       cdkR5: // global
           I64[Sp - 16] = block_cdkR1_info;
           R1 = GHC.IO.Encoding.getForeignEncoding_closure;
           I64[Sp - 8] = _sddu9::I64;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdkR1() //  [R1]
         { []
         }
     {offset
       cdkR1: // global
           _sddu9::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_cdkR3_info;
           R3 = _sddu9::I64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Foreign.$wpeekCString_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdkR1_info" {
     block_cdkR1_info:
         const _cdkR1;
         const 32714;
         const 30064771102;
         const SddB2_srt+1544;
 },
 _cdkR3() //  [R1]
         { []
         }
     {offset
       cdkR3: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdkRa; else goto cdkR9;
       cdkRa: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdkR9: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = R1;
           P64[Sp] = Hp - 6;
           call _sddua() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cdkR3_info" {
     block_cdkR3_info:
         const _cdkR3;
         const 16329;
         const 30064771102;
         const SddB2_srt+1544;
 },
 _sddua() //  []
         { []
         }
     {offset
       sddua: // global
           _sddug::I64 = I64[I64[Sp + 8] + 48];
           if (_sddug::I64 == 0) goto cdkQX; else goto cdkQR;
       cdkQX: // global
           P64[Sp - 8] = GHC.Base.Nothing_closure+1;
           Sp = Sp - 8;
           call _sdduh() args: 0, res: 0, upd: 0;
       cdkQR: // global
           I64[Sp - 16] = block_cdkQN_info;
           R1 = GHC.IO.Encoding.getForeignEncoding_closure;
           I64[Sp - 8] = _sddug::I64;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdkQN() //  [R1]
         { []
         }
     {offset
       cdkQN: // global
           _sddug::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_cdkQP_info;
           R3 = _sddug::I64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Foreign.$wpeekCString_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdkQN_info" {
     block_cdkQN_info:
         const _cdkQN;
         const 65355;
         const 30064771102;
         const SddB2_srt+1544;
 },
 _cdkQP() //  [R1]
         { []
         }
     {offset
       cdkQP: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdkQW; else goto cdkQV;
       cdkQW: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdkQV: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = R1;
           P64[Sp] = Hp - 6;
           call _sdduh() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cdkQP_info" {
     block_cdkQP_info:
         const _cdkQP;
         const 32650;
         const 30064771102;
         const SddB2_srt+1544;
 },
 _sdduh() //  []
         { []
         }
     {offset
       sdduh: // global
           _sddun::I64 = I64[I64[Sp + 16] + 56];
           if (_sddun::I64 == 0) goto cdkQJ; else goto cdkQD;
       cdkQJ: // global
           P64[Sp - 8] = GHC.Base.Nothing_closure+1;
           Sp = Sp - 8;
           call _sdduo() args: 0, res: 0, upd: 0;
       cdkQD: // global
           I64[Sp - 16] = block_cdkQz_info;
           R1 = GHC.IO.Encoding.getForeignEncoding_closure;
           I64[Sp - 8] = _sddun::I64;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdkQz() //  [R1]
         { []
         }
     {offset
       cdkQz: // global
           _sddun::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_cdkQB_info;
           R3 = _sddun::I64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Foreign.$wpeekCString_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdkQz_info" {
     block_cdkQz_info:
         const _cdkQz;
         const 130636;
         const 30064771102;
         const SddB2_srt+1544;
 },
 _cdkQB() //  [R1]
         { []
         }
     {offset
       cdkQB: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdkQI; else goto cdkQH;
       cdkQI: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdkQH: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = R1;
           P64[Sp] = Hp - 6;
           call _sdduo() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cdkQB_info" {
     block_cdkQB_info:
         const _cdkQB;
         const 65291;
         const 30064771102;
         const SddB2_srt+1544;
 },
 _sdduo() //  []
         { []
         }
     {offset
       sdduo: // global
           _sdduu::I64 = I64[I64[Sp + 24] + 64];
           if (_sdduu::I64 == 0) goto cdkQv; else goto cdkQp;
       cdkQv: // global
           P64[Sp - 8] = GHC.Base.Nothing_closure+1;
           Sp = Sp - 8;
           call _sdduv() args: 0, res: 0, upd: 0;
       cdkQp: // global
           I64[Sp - 16] = block_cdkQl_info;
           R1 = GHC.IO.Encoding.getForeignEncoding_closure;
           I64[Sp - 8] = _sdduu::I64;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdkQl() //  [R1]
         { []
         }
     {offset
       cdkQl: // global
           _sdduu::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_cdkQn_info;
           R3 = _sdduu::I64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Foreign.$wpeekCString_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdkQl_info" {
     block_cdkQl_info:
         const _cdkQl;
         const 261197;
         const 30064771102;
         const SddB2_srt+1544;
 },
 _cdkQn() //  [R1]
         { []
         }
     {offset
       cdkQn: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdkQu; else goto cdkQt;
       cdkQu: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdkQt: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = R1;
           P64[Sp] = Hp - 6;
           call _sdduv() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cdkQn_info" {
     block_cdkQn_info:
         const _cdkQn;
         const 130572;
         const 30064771102;
         const SddB2_srt+1544;
 },
 _sdduv() //  []
         { []
         }
     {offset
       sdduv: // global
           _sdduB::I64 = I64[I64[Sp + 32] + 72];
           if (_sdduB::I64 == 0) goto cdkQh; else goto cdkQb;
       cdkQh: // global
           P64[Sp - 8] = GHC.Base.Nothing_closure+1;
           Sp = Sp - 8;
           call _sdduC() args: 0, res: 0, upd: 0;
       cdkQb: // global
           I64[Sp - 16] = block_cdkQ7_info;
           R1 = GHC.IO.Encoding.getForeignEncoding_closure;
           I64[Sp - 8] = _sdduB::I64;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdkQ7() //  [R1]
         { []
         }
     {offset
       cdkQ7: // global
           _sdduB::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_cdkQ9_info;
           R3 = _sdduB::I64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Foreign.$wpeekCString_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdkQ7_info" {
     block_cdkQ7_info:
         const _cdkQ7;
         const 522318;
         const 30064771102;
         const SddB2_srt+1544;
 },
 _cdkQ9() //  [R1]
         { []
         }
     {offset
       cdkQ9: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdkQg; else goto cdkQf;
       cdkQg: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdkQf: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = R1;
           P64[Sp] = Hp - 6;
           call _sdduC() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cdkQ9_info" {
     block_cdkQ9_info:
         const _cdkQ9;
         const 261133;
         const 30064771102;
         const SddB2_srt+1544;
 },
 _sdduC() //  []
         { []
         }
     {offset
       sdduC: // global
           _sdduI::I64 = I64[I64[Sp + 40] + 80];
           if (_sdduI::I64 == 0) goto cdkQ3; else goto cdkPX;
       cdkQ3: // global
           P64[Sp + 40] = GHC.Base.Nothing_closure+1;
           call _cdkP4() args: 0, res: 0, upd: 0;
       cdkPX: // global
           I64[Sp - 8] = block_cdkPT_info;
           R1 = GHC.IO.Encoding.getForeignEncoding_closure;
           I64[Sp + 40] = _sdduI::I64;
           Sp = Sp - 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdkPT() //  [R1]
         { []
         }
     {offset
       cdkPT: // global
           I64[Sp] = block_cdkPV_info;
           R3 = I64[Sp + 48];
           R2 = R1;
           call GHC.Foreign.$wpeekCString_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdkPT_info" {
     block_cdkPT_info:
         const _cdkPT;
         const 522254;
         const 21474836510;
         const SddB2_srt+1544;
 },
 _cdkPV() //  [R1]
         { []
         }
     {offset
       cdkPV: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdkQ2; else goto cdkQ1;
       cdkQ2: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdkQ1: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = R1;
           P64[Sp + 48] = Hp - 6;
           Sp = Sp + 8;
           call _cdkP4() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cdkPV_info" {
     block_cdkPV_info:
         const _cdkPV;
         const 522254;
         const 4294967326;
         const SddB2_srt+1544;
 },
 _cdkP4() //  []
         { []
         }
     {offset
       cdkP4: // global
           Hp = Hp + 256;
           _sdduL::P64 = P64[Sp + 40];
           if (Hp > HpLim) (likely: False) goto cdkPP; else goto cdkPO;
       cdkPP: // global
           HpAlloc = 256;
           I64[Sp - 8] = block_cdkP3_info;
           R1 = _sdduL::P64;
           Sp = Sp - 8;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdkPO: // global
           I64[Hp - 248] = GHC.Types.W#_con_info;
           I64[Hp - 240] = I64[Sp + 96];
           I64[Hp - 232] = GHC.Types.W#_con_info;
           I64[Hp - 224] = I64[Sp + 88];
           I64[Hp - 216] = sat_sdduS_info;
           I64[Hp - 200] = I64[Sp + 80];
           I64[Hp - 192] = sat_sdduQ_info;
           I64[Hp - 176] = I64[Sp + 72];
           I64[Hp - 168] = GHC.Types.W#_con_info;
           I64[Hp - 160] = I64[Sp + 64];
           I64[Hp - 152] = GHC.Word.W64#_con_info;
           I64[Hp - 144] = I64[Sp + 56];
           I64[Hp - 136] = sat_sdduM_info;
           I64[Hp - 120] = I64[Sp + 48];
           I64[Hp - 112] = GHC.RTS.Flags.ProfFlags_con_info;
           P64[Hp - 104] = Hp - 136;
           P64[Hp - 96] = Hp - 151;
           P64[Hp - 88] = Hp - 167;
           P64[Hp - 80] = Hp - 192;
           P64[Hp - 72] = Hp - 216;
           P64[Hp - 64] = Hp - 231;
           P64[Hp - 56] = Hp - 247;
           P64[Hp - 48] = P64[Sp + 104];
           P64[Hp - 40] = P64[Sp + 32];
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp];
           P64[Hp] = _sdduL::P64;
           R1 = Hp - 111;
           Sp = Sp + 112;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cdkP3() //  [R1]
         { []
         }
     {offset
       cdkP3: // global
           P64[Sp + 48] = R1;
           Sp = Sp + 8;
           call _cdkP4() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cdkP3_info" {
     block_cdkP3_info:
         const _cdkP3;
         const 522254;
         const 4294967326;
         const SddB2_srt+1544;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.539708529 UTC

[section ""data" . GHC.RTS.Flags.getProfFlags_closure" {
     GHC.RTS.Flags.getProfFlags_closure:
         const GHC.RTS.Flags.getProfFlags_info;
         const 0;
 },
 GHC.RTS.Flags.getProfFlags_entry() //  []
         { []
         }
     {offset
       cdkUW: // global
           call GHC.RTS.Flags.getProfFlags1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.getProfFlags_info" {
     GHC.RTS.Flags.getProfFlags_info:
         const GHC.RTS.Flags.getProfFlags_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const SddB2_srt+1568;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.54985801 UTC

[section ""data" . GHC.RTS.Flags.getGCFlags5_closure" {
     GHC.RTS.Flags.getGCFlags5_closure:
         const GHC.RTS.Flags.getGCFlags5_info;
         const 0;
 },
 sat_sddy4_entry() //  [R1]
         { []
         }
     {offset
       cdkWw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdkWx; else goto cdkWy;
       cdkWx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdkWy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto cdkWv; else goto cdkWu;
       cdkWv: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdkWu: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddy4_info" {
     sat_sddy4_info:
         const sat_sddy4_entry;
         const 4294967296;
         const 17;
 },
 sat_sddy0_entry() //  [R1]
         { []
         }
     {offset
       cdkWJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdkWK; else goto cdkWL;
       cdkWK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdkWL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto cdkWI; else goto cdkWH;
       cdkWI: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdkWH: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddy0_info" {
     sat_sddy0_info:
         const sat_sddy0_entry;
         const 4294967296;
         const 17;
 },
 sat_sddxX_entry() //  [R1]
         { []
         }
     {offset
       cdkWV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdkWW; else goto cdkWX;
       cdkWW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdkWX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto cdkWU; else goto cdkWT;
       cdkWU: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdkWT: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddxX_info" {
     sat_sddxX_info:
         const sat_sddxX_entry;
         const 4294967296;
         const 17;
 },
 sat_sddxV_entry() //  [R1]
         { []
         }
     {offset
       cdkX6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdkX7; else goto cdkX8;
       cdkX7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdkX8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto cdkX5; else goto cdkX4;
       cdkX5: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdkX4: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddxV_info" {
     sat_sddxV_info:
         const sat_sddxV_entry;
         const 4294967296;
         const 17;
 },
 sat_sddxS_entry() //  [R1]
         { []
         }
     {offset
       cdkXi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdkXj; else goto cdkXk;
       cdkXj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdkXk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto cdkXh; else goto cdkXg;
       cdkXh: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdkXg: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddxS_info" {
     sat_sddxS_info:
         const sat_sddxS_entry;
         const 4294967296;
         const 17;
 },
 sat_sddxQ_entry() //  [R1]
         { []
         }
     {offset
       cdkXt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdkXu; else goto cdkXv;
       cdkXu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdkXv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto cdkXs; else goto cdkXr;
       cdkXs: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdkXr: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddxQ_info" {
     sat_sddxQ_info:
         const sat_sddxQ_entry;
         const 4294967296;
         const 17;
 },
 sat_sddxL_entry() //  [R1]
         { []
         }
     {offset
       cdkXH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdkXI; else goto cdkXJ;
       cdkXI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdkXJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto cdkXG; else goto cdkXF;
       cdkXG: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdkXF: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddxL_info" {
     sat_sddxL_info:
         const sat_sddxL_entry;
         const 4294967296;
         const 17;
 },
 sat_sddxz_entry() //  [R1]
         { []
         }
     {offset
       cdkY7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdkY8; else goto cdkYD;
       cdkY8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdkYD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddxy::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddxy::I64, 3)) goto udkYE; else goto udkYH;
       udkYE: // global
           if (%MO_S_Lt_W64(_sddxy::I64, 1)) goto udkYF; else goto udkYG;
       udkYF: // global
           if (%MO_S_Lt_W64(_sddxy::I64, 0)) goto cdkY1; else goto cdkY2;
       cdkY2: // global
           R1 = GHC.RTS.Flags.NoGCStats_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udkYG: // global
           if (%MO_S_Lt_W64(_sddxy::I64, 2)) goto cdkY3; else goto cdkY4;
       cdkY3: // global
           R1 = GHC.RTS.Flags.CollectGCStats_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdkY4: // global
           R1 = GHC.RTS.Flags.OneLineGCStats_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udkYH: // global
           if (%MO_S_Ge_W64(_sddxy::I64, 5)) goto cdkY1; else goto udkYI;
       cdkY1: // global
           R2 = _sddxy::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl3_entry(R2) args: 24, res: 0, upd: 24;
       udkYI: // global
           if (%MO_S_Lt_W64(_sddxy::I64, 4)) goto cdkY5; else goto cdkY6;
       cdkY5: // global
           R1 = GHC.RTS.Flags.SummaryGCStats_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdkY6: // global
           R1 = GHC.RTS.Flags.VerboseGCStats_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddxz_info" {
     sat_sddxz_info:
         const sat_sddxz_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1576;
 },
 GHC.RTS.Flags.getGCFlags5_entry() //  [R2]
         { []
         }
     {offset
       cdkYJ: // global
           Hp = Hp + 704;
           if (Hp > HpLim) (likely: False) goto cdkYO; else goto cdkYN;
       cdkYO: // global
           HpAlloc = 704;
           R2 = R2;
           R1 = GHC.RTS.Flags.getGCFlags5_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdkYN: // global
           _sddvV::I64 = %MO_UU_Conv_W32_W64(I32[RtsFlags+8]);
           _sddvZ::I64 = %MO_UU_Conv_W32_W64(I32[RtsFlags+12]);
           _sddw3::I64 = %MO_UU_Conv_W32_W64(I32[RtsFlags+16]);
           _sddw7::I64 = %MO_UU_Conv_W32_W64(I32[RtsFlags+20]);
           _sddwb::I64 = %MO_UU_Conv_W32_W64(I32[RtsFlags+24]);
           _sddwf::I64 = %MO_UU_Conv_W32_W64(I32[RtsFlags+28]);
           _sddwj::I64 = %MO_UU_Conv_W32_W64(I32[RtsFlags+32]);
           _sddwn::I64 = %MO_UU_Conv_W32_W64(I32[RtsFlags+36]);
           _sddwr::I64 = %MO_UU_Conv_W32_W64(I32[RtsFlags+40]);
           _sddwv::I64 = %MO_UU_Conv_W32_W64(I32[RtsFlags+44]);
           _sddwz::I64 = %MO_UU_Conv_W32_W64(I32[RtsFlags+48]);
           _sddwD::I64 = %MO_UU_Conv_W8_W64(I8[RtsFlags+52]);
           _sddwH::F64 = F64[RtsFlags+56];
           _sddwL::F64 = F64[RtsFlags+64];
           _sddwP::I64 = %MO_UU_Conv_W32_W64(I32[RtsFlags+72]);
           _sddwT::I64 = %MO_UU_Conv_W8_W64(I8[RtsFlags+76]);
           _sddwX::I64 = %MO_UU_Conv_W8_W64(I8[RtsFlags+77]);
           _sddx1::F64 = F64[RtsFlags+80];
           _sddx5::I64 = %MO_UU_Conv_W8_W64(I8[RtsFlags+88]);
           _sddx9::I64 = %MO_UU_Conv_W8_W64(I8[RtsFlags+89]);
           _sddxd::I64 = I64[RtsFlags+96];
           _sddxh::I64 = %MO_UU_Conv_W8_W64(I8[RtsFlags+104]);
           _sddxl::I64 = I64[RtsFlags+120];
           _sddxp::I64 = I64[RtsFlags+128];
           _sddxt::I64 = %MO_UU_Conv_W8_W64(I8[RtsFlags+144]);
           _sddxx::I64 = I64[RtsFlags+152];
           I64[Hp - 696] = GHC.Types.W#_con_info;
           I64[Hp - 688] = _sddxx::I64;
           I64[Hp - 680] = sat_sddy4_info;
           I64[Hp - 664] = _sddxt::I64;
           I64[Hp - 656] = GHC.Types.W#_con_info;
           I64[Hp - 648] = _sddxp::I64;
           I64[Hp - 640] = GHC.Types.W#_con_info;
           I64[Hp - 632] = _sddxl::I64;
           I64[Hp - 624] = sat_sddy0_info;
           I64[Hp - 608] = _sddxh::I64;
           I64[Hp - 600] = GHC.Word.W64#_con_info;
           I64[Hp - 592] = _sddxd::I64;
           I64[Hp - 584] = sat_sddxX_info;
           I64[Hp - 568] = _sddx9::I64;
           I64[Hp - 560] = sat_sddxV_info;
           I64[Hp - 544] = _sddx5::I64;
           I64[Hp - 536] = GHC.Types.D#_con_info;
           F64[Hp - 528] = _sddx1::F64;
           I64[Hp - 520] = sat_sddxS_info;
           I64[Hp - 504] = _sddwX::I64;
           I64[Hp - 496] = sat_sddxQ_info;
           I64[Hp - 480] = _sddwT::I64;
           I64[Hp - 472] = GHC.Word.W32#_con_info;
           I64[Hp - 464] = _sddwP::I64;
           I64[Hp - 456] = GHC.Types.D#_con_info;
           F64[Hp - 448] = _sddwL::F64;
           I64[Hp - 440] = GHC.Types.D#_con_info;
           F64[Hp - 432] = _sddwH::F64;
           I64[Hp - 424] = sat_sddxL_info;
           I64[Hp - 408] = _sddwD::I64;
           I64[Hp - 400] = GHC.Word.W32#_con_info;
           I64[Hp - 392] = _sddwz::I64;
           I64[Hp - 384] = GHC.Word.W32#_con_info;
           I64[Hp - 376] = _sddwv::I64;
           I64[Hp - 368] = GHC.Word.W32#_con_info;
           I64[Hp - 360] = _sddwr::I64;
           I64[Hp - 352] = GHC.Word.W32#_con_info;
           I64[Hp - 344] = _sddwn::I64;
           I64[Hp - 336] = GHC.Word.W32#_con_info;
           I64[Hp - 328] = _sddwj::I64;
           I64[Hp - 320] = GHC.Word.W32#_con_info;
           I64[Hp - 312] = _sddwf::I64;
           I64[Hp - 304] = GHC.Word.W32#_con_info;
           I64[Hp - 296] = _sddwb::I64;
           I64[Hp - 288] = GHC.Word.W32#_con_info;
           I64[Hp - 280] = _sddw7::I64;
           I64[Hp - 272] = GHC.Word.W32#_con_info;
           I64[Hp - 264] = _sddw3::I64;
           I64[Hp - 256] = GHC.Word.W32#_con_info;
           I64[Hp - 248] = _sddvZ::I64;
           I64[Hp - 240] = sat_sddxz_info;
           I64[Hp - 224] = _sddvV::I64;
           I64[Hp - 216] = GHC.RTS.Flags.GCFlags_con_info;
           P64[Hp - 208] = R2;
           P64[Hp - 200] = Hp - 240;
           P64[Hp - 192] = Hp - 255;
           P64[Hp - 184] = Hp - 271;
           P64[Hp - 176] = Hp - 287;
           P64[Hp - 168] = Hp - 303;
           P64[Hp - 160] = Hp - 319;
           P64[Hp - 152] = Hp - 335;
           P64[Hp - 144] = Hp - 351;
           P64[Hp - 136] = Hp - 367;
           P64[Hp - 128] = Hp - 383;
           P64[Hp - 120] = Hp - 399;
           P64[Hp - 112] = Hp - 424;
           P64[Hp - 104] = Hp - 439;
           P64[Hp - 96] = Hp - 455;
           P64[Hp - 88] = Hp - 471;
           P64[Hp - 80] = Hp - 496;
           P64[Hp - 72] = Hp - 520;
           P64[Hp - 64] = Hp - 535;
           P64[Hp - 56] = Hp - 560;
           P64[Hp - 48] = Hp - 584;
           P64[Hp - 40] = Hp - 599;
           P64[Hp - 32] = Hp - 624;
           P64[Hp - 24] = Hp - 639;
           P64[Hp - 16] = Hp - 655;
           P64[Hp - 8] = Hp - 680;
           P64[Hp] = Hp - 695;
           R1 = Hp - 215;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.getGCFlags5_info" {
     GHC.RTS.Flags.getGCFlags5_info:
         const GHC.RTS.Flags.getGCFlags5_entry;
         const 0;
         const 12884901902;
         const 8589934597;
         const SddB2_srt+1576;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.577729111 UTC

[section ""cstring" . GHC.RTS.Flags.getGCFlags4_bytes" {
     GHC.RTS.Flags.getGCFlags4_bytes:
         I8[] [60,102,105,108,101,112,97,116,104,62]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.581264902 UTC

[section ""data" . GHC.RTS.Flags.getGCFlags3_closure" {
     GHC.RTS.Flags.getGCFlags3_closure:
         const GHC.RTS.Flags.getGCFlags3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.RTS.Flags.getGCFlags3_entry() //  [R1]
         { []
         }
     {offset
       cdl1t: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdl1u; else goto cdl1v;
       cdl1u: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdl1v: // global
           (_cdl1q::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdl1q::I64 == 0) goto cdl1s; else goto cdl1r;
       cdl1s: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdl1r: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdl1q::I64;
           R2 = GHC.RTS.Flags.getGCFlags4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.getGCFlags3_info" {
     GHC.RTS.Flags.getGCFlags3_info:
         const GHC.RTS.Flags.getGCFlags3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.585406241 UTC

[section ""data" . GHC.RTS.Flags.getGCFlags2_closure" {
     GHC.RTS.Flags.getGCFlags2_closure:
         const GHC.Base.Just_con_info;
         const GHC.RTS.Flags.getGCFlags3_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.588107288 UTC

[section ""data" . GHC.RTS.Flags.getGCFlags1_closure" {
     GHC.RTS.Flags.getGCFlags1_closure:
         const GHC.RTS.Flags.getGCFlags1_info;
         const 0;
 },
 GHC.RTS.Flags.getGCFlags1_entry() //  []
         { []
         }
     {offset
       cdl1O: // global
           if (I64[RtsFlags] == 0) goto cdl1N; else goto cdl1M;
       cdl1N: // global
           R2 = GHC.Base.Nothing_closure+1;
           call GHC.RTS.Flags.getGCFlags5_entry(R2) args: 8, res: 0, upd: 8;
       cdl1M: // global
           R2 = GHC.RTS.Flags.getGCFlags2_closure+2;
           call GHC.RTS.Flags.getGCFlags5_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.getGCFlags1_info" {
     GHC.RTS.Flags.getGCFlags1_info:
         const GHC.RTS.Flags.getGCFlags1_entry;
         const 0;
         const 12884901902;
         const 4294967299;
         const SddB2_srt+1584;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.59223749 UTC

[section ""data" . GHC.RTS.Flags.getGCFlags_closure" {
     GHC.RTS.Flags.getGCFlags_closure:
         const GHC.RTS.Flags.getGCFlags_info;
         const 0;
 },
 GHC.RTS.Flags.getGCFlags_entry() //  []
         { []
         }
     {offset
       cdl21: // global
           call GHC.RTS.Flags.getGCFlags1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.getGCFlags_info" {
     GHC.RTS.Flags.getGCFlags_info:
         const GHC.RTS.Flags.getGCFlags_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const SddB2_srt+1600;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.598044549 UTC

[section ""data" . GHC.RTS.Flags.getTickyFlags1_closure" {
     GHC.RTS.Flags.getTickyFlags1_closure:
         const GHC.RTS.Flags.getTickyFlags1_info;
         const 0;
 },
 sat_sddyn_entry() //  [R1]
         { []
         }
     {offset
       cdl2t: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdl2u; else goto cdl2v;
       cdl2u: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdl2v: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto cdl2s; else goto cdl2r;
       cdl2s: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdl2r: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddyn_info" {
     sat_sddyn_info:
         const sat_sddyn_entry;
         const 4294967296;
         const 17;
 },
 sat_sddyq_entry() //  [R1]
         { []
         }
     {offset
       cdl2F: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdl2G; else goto cdl2H;
       cdl2G: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdl2H: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto cdl2E; else goto cdl2D;
       cdl2E: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdl2D: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddyq_info" {
     sat_sddyq_info:
         const sat_sddyq_entry;
         const 4294967296;
         const 17;
 },
 GHC.RTS.Flags.getTickyFlags1_entry() //  []
         { []
         }
     {offset
       cdl2I: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdl2M; else goto cdl2L;
       cdl2M: // global
           HpAlloc = 48;
           R1 = GHC.RTS.Flags.getTickyFlags1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdl2L: // global
           _sddyg::I64 = %MO_UU_Conv_W8_W64(I8[RtsFlags+352]);
           if (I64[RtsFlags+360] == 0) goto cdl2R; else goto cdl2P;
       cdl2R: // global
           I64[Hp - 40] = sat_sddyq_info;
           I64[Hp - 24] = _sddyg::I64;
           I64[Hp - 16] = GHC.RTS.Flags.TickyFlags_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = GHC.Base.Nothing_closure+1;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdl2P: // global
           I64[Hp - 40] = sat_sddyn_info;
           I64[Hp - 24] = _sddyg::I64;
           I64[Hp - 16] = GHC.RTS.Flags.TickyFlags_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = GHC.RTS.Flags.getGCFlags2_closure+2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.getTickyFlags1_info" {
     GHC.RTS.Flags.getTickyFlags1_info:
         const GHC.RTS.Flags.getTickyFlags1_entry;
         const 0;
         const 21474836494;
         const 4294967299;
         const SddB2_srt+1592;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.606489547 UTC

[section ""data" . GHC.RTS.Flags.getTickyFlags_closure" {
     GHC.RTS.Flags.getTickyFlags_closure:
         const GHC.RTS.Flags.getTickyFlags_info;
         const 0;
 },
 GHC.RTS.Flags.getTickyFlags_entry() //  []
         { []
         }
     {offset
       cdl3v: // global
           call GHC.RTS.Flags.getTickyFlags1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.getTickyFlags_info" {
     GHC.RTS.Flags.getTickyFlags_info:
         const GHC.RTS.Flags.getTickyFlags_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const SddB2_srt+1608;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.615813394 UTC

[section ""data" . GHC.RTS.Flags.getRTSFlags1_closure" {
     GHC.RTS.Flags.getRTSFlags1_closure:
         const GHC.RTS.Flags.getRTSFlags1_info;
         const 0;
 },
 sat_sddzm_entry() //  [R1]
         { []
         }
     {offset
       cdl4x: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdl4y; else goto cdl53;
       cdl4y: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdl53: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sddzl::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_sddzl::I64, 3)) goto udl54; else goto udl57;
       udl54: // global
           if (%MO_S_Lt_W64(_sddzl::I64, 1)) goto udl55; else goto udl56;
       udl55: // global
           if (%MO_S_Lt_W64(_sddzl::I64, 0)) goto cdl4r; else goto cdl4s;
       cdl4s: // global
           R1 = GHC.RTS.Flags.CostCentresNone_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udl56: // global
           if (%MO_S_Lt_W64(_sddzl::I64, 2)) goto cdl4t; else goto cdl4u;
       cdl4t: // global
           R1 = GHC.RTS.Flags.CostCentresSummary_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdl4u: // global
           R1 = GHC.RTS.Flags.CostCentresVerbose_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       udl57: // global
           if (%MO_S_Ge_W64(_sddzl::I64, 5)) goto cdl4r; else goto udl58;
       cdl4r: // global
           R2 = _sddzl::I64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       udl58: // global
           if (%MO_S_Lt_W64(_sddzl::I64, 4)) goto cdl4v; else goto cdl4w;
       cdl4v: // global
           R1 = GHC.RTS.Flags.CostCentresAll_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdl4w: // global
           R1 = GHC.RTS.Flags.CostCentresJSON_closure+5;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddzm_info" {
     sat_sddzm_info:
         const sat_sddzm_entry;
         const 4294967296;
         const 4294967313;
         const SddB2_srt+1528;
 },
 sat_sddzt_entry() //  [R1]
         { []
         }
     {offset
       cdl5k: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdl5l; else goto cdl5m;
       cdl5l: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdl5m: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto cdl5j; else goto cdl5i;
       cdl5j: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdl5i: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddzt_info" {
     sat_sddzt_info:
         const sat_sddzt_entry;
         const 4294967296;
         const 17;
 },
 sat_sddzw_entry() //  [R1]
         { []
         }
     {offset
       cdl5w: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdl5x; else goto cdl5y;
       cdl5x: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdl5y: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto cdl5v; else goto cdl5u;
       cdl5v: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdl5u: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sddzw_info" {
     sat_sddzw_info:
         const sat_sddzw_entry;
         const 4294967296;
         const 17;
 },
 GHC.RTS.Flags.getRTSFlags1_entry() //  []
         { []
         }
     {offset
       cdl5E: // global
           if ((Sp + -96) < SpLim) (likely: False) goto cdl5F; else goto cdl5G;
       cdl5F: // global
           R1 = GHC.RTS.Flags.getRTSFlags1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdl5G: // global
           if (I64[RtsFlags] == 0) goto cdl5D; else goto cdl5C;
       cdl5D: // global
           I64[Sp - 8] = block_cdl65_info;
           R2 = GHC.Base.Nothing_closure+1;
           Sp = Sp - 8;
           call GHC.RTS.Flags.getGCFlags5_entry(R2) args: 8, res: 8, upd: 8;
       cdl5C: // global
           I64[Sp - 8] = block_cdl61_info;
           R2 = GHC.RTS.Flags.getGCFlags2_closure+2;
           Sp = Sp - 8;
           call GHC.RTS.Flags.getGCFlags5_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.getRTSFlags1_info" {
     GHC.RTS.Flags.getRTSFlags1_info:
         const GHC.RTS.Flags.getRTSFlags1_entry;
         const 0;
         const 21178483736590;
         const 4294967299;
         const SddB2_srt+1520;
 },
 _cdl65() //  [R1]
         { []
         }
     {offset
       cdl65: // global
           P64[Sp] = R1;
           call _sddyw() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cdl65_info" {
     block_cdl65_info:
         const _cdl65;
         const 0;
         const 2486786064414;
         const SddB2_srt+1520;
 },
 _cdl61() //  [R1]
         { []
         }
     {offset
       cdl61: // global
           P64[Sp] = R1;
           call _sddyw() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cdl61_info" {
     block_cdl61_info:
         const _cdl61;
         const 0;
         const 2486786064414;
         const SddB2_srt+1520;
 },
 _sddyw() //  []
         { []
         }
     {offset
       sddyw: // global
           _sddyC::I64 = I64[RtsFlags+160];
           _sddyG::I64 = I64[RtsFlags+168];
           I64[Sp - 24] = block_cdl3R_info;
           I64[Sp - 16] = _sddyC::I64;
           I64[Sp - 8] = _sddyG::I64;
           Sp = Sp - 24;
           call GHC.RTS.Flags.getMiscFlags1_entry() args: 8, res: 8, upd: 8;
     }
 },
 _cdl3R() //  [R1]
         { []
         }
     {offset
       cdl3R: // global
           I64[Sp - 8] = block_cdl3T_info;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.RTS.Flags.getDebugFlags1_entry() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdl3R_info" {
     block_cdl3R_info:
         const _cdl3R;
         const 195;
         const 2486786064414;
         const SddB2_srt+1520;
 },
 _cdl3T() //  [R1]
         { []
         }
     {offset
       cdl3T: // global
           _sddyP::I64 = %MO_UU_Conv_W32_W64(I32[RtsFlags]);
           _sddyT::I64 = I64[RtsFlags+4];
           _sddyX::I64 = I64[RtsFlags+8];
           I64[Sp - 32] = block_cdl41_info;
           I64[Sp - 24] = _sddyP::I64;
           I64[Sp - 16] = _sddyT::I64;
           I64[Sp - 8] = _sddyX::I64;
           P64[Sp] = R1;
           Sp = Sp - 32;
           call GHC.RTS.Flags.getProfFlags1_entry() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdl3T_info" {
     block_cdl3T_info:
         const _cdl3T;
         const 388;
         const 2486786064414;
         const SddB2_srt+1520;
 },
 _cdl41() //  [R1]
         { []
         }
     {offset
       cdl41: // global
           I64[Sp - 8] = block_cdl43_info;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.RTS.Flags.getRTSFlags2_entry() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdl41_info" {
     block_cdl41_info:
         const _cdl41;
         const 6600;
         const 2211908157470;
         const SddB2_srt+1520;
 },
 _cdl43() //  [R1]
         { []
         }
     {offset
       cdl43: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdl5N; else goto cdl5M;
       cdl5N: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdl5M: // global
           _sddz7::I64 = %MO_UU_Conv_W8_W64(I8[RtsFlags+352]);
           if (I64[RtsFlags+360] == 0) goto cdl5Z; else goto cdl5Y;
       cdl5Z: // global
           I64[Hp - 40] = sat_sddzw_info;
           I64[Hp - 24] = _sddz7::I64;
           I64[Hp - 16] = GHC.RTS.Flags.TickyFlags_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = GHC.Base.Nothing_closure+1;
           _sddz3::P64 = R1;
           _sddze::P64 = Hp - 15;
           goto sddzc;
       cdl5Y: // global
           I64[Hp - 40] = sat_sddzt_info;
           I64[Hp - 24] = _sddz7::I64;
           I64[Hp - 16] = GHC.RTS.Flags.TickyFlags_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = GHC.RTS.Flags.getGCFlags2_closure+2;
           _sddz3::P64 = R1;
           _sddze::P64 = Hp - 15;
           goto sddzc;
       sddzc: // global
           I64[Sp - 16] = block_cdl4g_info;
           P64[Sp - 8] = _sddze::P64;
           P64[Sp] = _sddz3::P64;
           Sp = Sp - 16;
           call GHC.RTS.Flags.getParFlags1_entry() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdl43_info" {
     block_cdl43_info:
         const _cdl43;
         const 13193;
         const 1103806595102;
         const SddB2_srt+1528;
 },
 _cdl4g() //  [R1]
         { []
         }
     {offset
       cdl4g: // global
           Hp = Hp + 224;
           if (Hp > HpLim) (likely: False) goto cdl5W; else goto cdl5V;
       cdl5W: // global
           HpAlloc = 224;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdl5V: // global
           I64[Hp - 216] = GHC.Types.I#_con_info;
           I64[Hp - 208] = I64[Sp + 48];
           I64[Hp - 200] = GHC.Types.I#_con_info;
           I64[Hp - 192] = I64[Sp + 40];
           I64[Hp - 184] = sat_sddzm_info;
           I64[Hp - 168] = I64[Sp + 32];
           I64[Hp - 160] = GHC.RTS.Flags.CCFlags_con_info;
           P64[Hp - 152] = Hp - 184;
           P64[Hp - 144] = Hp - 199;
           P64[Hp - 136] = Hp - 215;
           I64[Hp - 128] = GHC.Types.I#_con_info;
           I64[Hp - 120] = I64[Sp + 80];
           I64[Hp - 112] = GHC.Word.W64#_con_info;
           I64[Hp - 104] = I64[Sp + 72];
           I64[Hp - 96] = GHC.RTS.Flags.ConcFlags_con_info;
           P64[Hp - 88] = Hp - 111;
           P64[Hp - 80] = Hp - 127;
           I64[Hp - 72] = GHC.RTS.Flags.RTSFlags_con_info;
           P64[Hp - 64] = P64[Sp + 88];
           P64[Hp - 56] = Hp - 95;
           P64[Hp - 48] = P64[Sp + 64];
           P64[Hp - 40] = P64[Sp + 56];
           P64[Hp - 32] = Hp - 159;
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 71;
           Sp = Sp + 96;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdl4g_info" {
     block_cdl4g_info:
         const _cdl4g;
         const 52747;
         const 4294967326;
         const SddB2_srt+1528;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.641127894 UTC

[section ""data" . GHC.RTS.Flags.getRTSFlags_closure" {
     GHC.RTS.Flags.getRTSFlags_closure:
         const GHC.RTS.Flags.getRTSFlags_info;
         const 0;
 },
 GHC.RTS.Flags.getRTSFlags_entry() //  []
         { []
         }
     {offset
       cdl82: // global
           call GHC.RTS.Flags.getRTSFlags1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.getRTSFlags_info" {
     GHC.RTS.Flags.getRTSFlags_info:
         const GHC.RTS.Flags.getRTSFlags_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const SddB2_srt+1616;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.645528034 UTC

[section ""data" . GHC.RTS.Flags.RTSFlags_closure" {
     GHC.RTS.Flags.RTSFlags_closure:
         const GHC.RTS.Flags.RTSFlags_info;
 },
 GHC.RTS.Flags.RTSFlags_slow() //  [R1]
         { []
         }
     {offset
       cdl8a: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.RTS.Flags.RTSFlags_entry(R6,
                                             R5,
                                             R4,
                                             R3,
                                             R2,
                                             R1) args: 40, res: 0, upd: 8;
     }
 },
 GHC.RTS.Flags.RTSFlags_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cdl8f: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cdl8j; else goto cdl8i;
       cdl8j: // global
           HpAlloc = 80;
           R1 = GHC.RTS.Flags.RTSFlags_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 80, res: 0, upd: 8;
       cdl8i: // global
           I64[Hp - 72] = GHC.RTS.Flags.RTSFlags_con_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R3;
           P64[Hp - 48] = R4;
           P64[Hp - 40] = R5;
           P64[Hp - 32] = R6;
           P64[Hp - 24] = P64[Sp];
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 24];
           R1 = Hp - 71;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.RTSFlags_info" {
     GHC.RTS.Flags.RTSFlags_info:
         const GHC.RTS.Flags.RTSFlags_entry;
         const 0;
         const 14;
         const 38654705664;
         const 0;
         const 9;
         const GHC.RTS.Flags.RTSFlags_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.651570288 UTC

[section ""data" . GHC.RTS.Flags.ParFlags_closure" {
     GHC.RTS.Flags.ParFlags_closure:
         const GHC.RTS.Flags.ParFlags_info;
 },
 GHC.RTS.Flags.ParFlags_slow() //  [R1]
         { []
         }
     {offset
       cdl8x: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.RTS.Flags.ParFlags_entry(R6,
                                             R5,
                                             R4,
                                             R3,
                                             R2,
                                             R1) args: 48, res: 0, upd: 8;
     }
 },
 GHC.RTS.Flags.ParFlags_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cdl8C: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdl8G; else goto cdl8F;
       cdl8G: // global
           HpAlloc = 88;
           R1 = GHC.RTS.Flags.ParFlags_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 88, res: 0, upd: 8;
       cdl8F: // global
           I64[Hp - 80] = GHC.RTS.Flags.ParFlags_con_info;
           P64[Hp - 72] = R2;
           P64[Hp - 64] = R3;
           P64[Hp - 56] = R4;
           P64[Hp - 48] = R5;
           P64[Hp - 40] = R6;
           P64[Hp - 32] = P64[Sp];
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = P64[Sp + 32];
           R1 = Hp - 79;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.ParFlags_info" {
     GHC.RTS.Flags.ParFlags_info:
         const GHC.RTS.Flags.ParFlags_entry;
         const 0;
         const 14;
         const 42949672960;
         const 0;
         const 10;
         const GHC.RTS.Flags.ParFlags_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.657014722 UTC

[section ""data" . GHC.RTS.Flags.TickyFlags_closure" {
     GHC.RTS.Flags.TickyFlags_closure:
         const GHC.RTS.Flags.TickyFlags_info;
 },
 GHC.RTS.Flags.TickyFlags_entry() //  [R2, R3]
         { []
         }
     {offset
       cdl8Z: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdl93; else goto cdl92;
       cdl93: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = GHC.RTS.Flags.TickyFlags_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdl92: // global
           I64[Hp - 16] = GHC.RTS.Flags.TickyFlags_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.TickyFlags_info" {
     GHC.RTS.Flags.TickyFlags_info:
         const GHC.RTS.Flags.TickyFlags_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.662380397 UTC

[section ""data" . GHC.RTS.Flags.TraceFlags_closure" {
     GHC.RTS.Flags.TraceFlags_closure:
         const GHC.RTS.Flags.TraceFlags_info;
 },
 GHC.RTS.Flags.TraceFlags_slow() //  [R1]
         { []
         }
     {offset
       cdl9b: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.RTS.Flags.TraceFlags_entry(R6,
                                               R5,
                                               R4,
                                               R3,
                                               R2,
                                               R1) args: 24, res: 0, upd: 8;
     }
 },
 GHC.RTS.Flags.TraceFlags_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cdl9g: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdl9k; else goto cdl9j;
       cdl9k: // global
           HpAlloc = 64;
           R1 = GHC.RTS.Flags.TraceFlags_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       cdl9j: // global
           I64[Hp - 56] = GHC.RTS.Flags.TraceFlags_con_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R5;
           P64[Hp - 16] = R6;
           P64[Hp - 8] = P64[Sp];
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 55;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.TraceFlags_info" {
     GHC.RTS.Flags.TraceFlags_info:
         const GHC.RTS.Flags.TraceFlags_entry;
         const 0;
         const 14;
         const 30064771072;
         const 0;
         const 7;
         const GHC.RTS.Flags.TraceFlags_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.667544488 UTC

[section ""data" . GHC.RTS.Flags.TraceNone_closure" {
     GHC.RTS.Flags.TraceNone_closure:
         const GHC.RTS.Flags.TraceNone_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.669283181 UTC

[section ""data" . GHC.RTS.Flags.TraceEventLog_closure" {
     GHC.RTS.Flags.TraceEventLog_closure:
         const GHC.RTS.Flags.TraceEventLog_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.671006053 UTC

[section ""data" . GHC.RTS.Flags.TraceStderr_closure" {
     GHC.RTS.Flags.TraceStderr_closure:
         const GHC.RTS.Flags.TraceStderr_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.674074461 UTC

[section ""data" . GHC.RTS.Flags.ProfFlags_closure" {
     GHC.RTS.Flags.ProfFlags_closure:
         const GHC.RTS.Flags.ProfFlags_info;
 },
 GHC.RTS.Flags.ProfFlags_slow() //  [R1]
         { []
         }
     {offset
       cdl9z: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.RTS.Flags.ProfFlags_entry(R6,
                                              R5,
                                              R4,
                                              R3,
                                              R2,
                                              R1) args: 80, res: 0, upd: 8;
     }
 },
 GHC.RTS.Flags.ProfFlags_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cdl9E: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto cdl9I; else goto cdl9H;
       cdl9I: // global
           HpAlloc = 120;
           R1 = GHC.RTS.Flags.ProfFlags_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 120, res: 0, upd: 8;
       cdl9H: // global
           I64[Hp - 112] = GHC.RTS.Flags.ProfFlags_con_info;
           P64[Hp - 104] = R2;
           P64[Hp - 96] = R3;
           P64[Hp - 88] = R4;
           P64[Hp - 80] = R5;
           P64[Hp - 72] = R6;
           P64[Hp - 64] = P64[Sp];
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = P64[Sp + 16];
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = P64[Sp + 40];
           P64[Hp - 16] = P64[Sp + 48];
           P64[Hp - 8] = P64[Sp + 56];
           P64[Hp] = P64[Sp + 64];
           R1 = Hp - 111;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.ProfFlags_info" {
     GHC.RTS.Flags.ProfFlags_info:
         const GHC.RTS.Flags.ProfFlags_entry;
         const 0;
         const 14;
         const 60129542144;
         const 0;
         const 14;
         const GHC.RTS.Flags.ProfFlags_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.6791346 UTC

[section ""data" . GHC.RTS.Flags.NoHeapProfiling_closure" {
     GHC.RTS.Flags.NoHeapProfiling_closure:
         const GHC.RTS.Flags.NoHeapProfiling_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.680814005 UTC

[section ""data" . GHC.RTS.Flags.HeapByCCS_closure" {
     GHC.RTS.Flags.HeapByCCS_closure:
         const GHC.RTS.Flags.HeapByCCS_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.682578201 UTC

[section ""data" . GHC.RTS.Flags.HeapByMod_closure" {
     GHC.RTS.Flags.HeapByMod_closure:
         const GHC.RTS.Flags.HeapByMod_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.684340581 UTC

[section ""data" . GHC.RTS.Flags.HeapByDescr_closure" {
     GHC.RTS.Flags.HeapByDescr_closure:
         const GHC.RTS.Flags.HeapByDescr_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.686140223 UTC

[section ""data" . GHC.RTS.Flags.HeapByType_closure" {
     GHC.RTS.Flags.HeapByType_closure:
         const GHC.RTS.Flags.HeapByType_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.68785149 UTC

[section ""data" . GHC.RTS.Flags.HeapByRetainer_closure" {
     GHC.RTS.Flags.HeapByRetainer_closure:
         const GHC.RTS.Flags.HeapByRetainer_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.68963345 UTC

[section ""data" . GHC.RTS.Flags.HeapByLDV_closure" {
     GHC.RTS.Flags.HeapByLDV_closure:
         const GHC.RTS.Flags.HeapByLDV_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.691986803 UTC

[section ""data" . GHC.RTS.Flags.HeapByClosureType_closure" {
     GHC.RTS.Flags.HeapByClosureType_closure:
         const GHC.RTS.Flags.HeapByClosureType_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.694535693 UTC

[section ""data" . GHC.RTS.Flags.CCFlags_closure" {
     GHC.RTS.Flags.CCFlags_closure:
         const GHC.RTS.Flags.CCFlags_info;
 },
 GHC.RTS.Flags.CCFlags_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdlad: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdlah; else goto cdlag;
       cdlah: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.RTS.Flags.CCFlags_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdlag: // global
           I64[Hp - 24] = GHC.RTS.Flags.CCFlags_con_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.CCFlags_info" {
     GHC.RTS.Flags.CCFlags_info:
         const GHC.RTS.Flags.CCFlags_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.698673329 UTC

[section ""data" . GHC.RTS.Flags.CostCentresNone_closure" {
     GHC.RTS.Flags.CostCentresNone_closure:
         const GHC.RTS.Flags.CostCentresNone_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.700315161 UTC

[section ""data" . GHC.RTS.Flags.CostCentresSummary_closure" {
     GHC.RTS.Flags.CostCentresSummary_closure:
         const GHC.RTS.Flags.CostCentresSummary_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.702081768 UTC

[section ""data" . GHC.RTS.Flags.CostCentresVerbose_closure" {
     GHC.RTS.Flags.CostCentresVerbose_closure:
         const GHC.RTS.Flags.CostCentresVerbose_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.703744897 UTC

[section ""data" . GHC.RTS.Flags.CostCentresAll_closure" {
     GHC.RTS.Flags.CostCentresAll_closure:
         const GHC.RTS.Flags.CostCentresAll_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.705552045 UTC

[section ""data" . GHC.RTS.Flags.CostCentresJSON_closure" {
     GHC.RTS.Flags.CostCentresJSON_closure:
         const GHC.RTS.Flags.CostCentresJSON_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.708617592 UTC

[section ""data" . GHC.RTS.Flags.DebugFlags_closure" {
     GHC.RTS.Flags.DebugFlags_closure:
         const GHC.RTS.Flags.DebugFlags_info;
 },
 GHC.RTS.Flags.DebugFlags_slow() //  [R1]
         { []
         }
     {offset
       cdlau: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.RTS.Flags.DebugFlags_entry(R6,
                                               R5,
                                               R4,
                                               R3,
                                               R2,
                                               R1) args: 88, res: 0, upd: 8;
     }
 },
 GHC.RTS.Flags.DebugFlags_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cdlaz: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto cdlaD; else goto cdlaC;
       cdlaD: // global
           HpAlloc = 128;
           R1 = GHC.RTS.Flags.DebugFlags_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 128, res: 0, upd: 8;
       cdlaC: // global
           I64[Hp - 120] = GHC.RTS.Flags.DebugFlags_con_info;
           P64[Hp - 112] = R2;
           P64[Hp - 104] = R3;
           P64[Hp - 96] = R4;
           P64[Hp - 88] = R5;
           P64[Hp - 80] = R6;
           P64[Hp - 72] = P64[Sp];
           P64[Hp - 64] = P64[Sp + 8];
           P64[Hp - 56] = P64[Sp + 16];
           P64[Hp - 48] = P64[Sp + 24];
           P64[Hp - 40] = P64[Sp + 32];
           P64[Hp - 32] = P64[Sp + 40];
           P64[Hp - 24] = P64[Sp + 48];
           P64[Hp - 16] = P64[Sp + 56];
           P64[Hp - 8] = P64[Sp + 64];
           P64[Hp] = P64[Sp + 72];
           R1 = Hp - 119;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.DebugFlags_info" {
     GHC.RTS.Flags.DebugFlags_info:
         const GHC.RTS.Flags.DebugFlags_entry;
         const 0;
         const 14;
         const 64424509440;
         const 0;
         const 15;
         const GHC.RTS.Flags.DebugFlags_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.714701933 UTC

[section ""data" . GHC.RTS.Flags.MiscFlags_closure" {
     GHC.RTS.Flags.MiscFlags_closure:
         const GHC.RTS.Flags.MiscFlags_info;
 },
 GHC.RTS.Flags.MiscFlags_slow() //  [R1]
         { []
         }
     {offset
       cdlaX: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.RTS.Flags.MiscFlags_entry(R6,
                                              R5,
                                              R4,
                                              R3,
                                              R2,
                                              R1) args: 24, res: 0, upd: 8;
     }
 },
 GHC.RTS.Flags.MiscFlags_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cdlb2: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdlb6; else goto cdlb5;
       cdlb6: // global
           HpAlloc = 64;
           R1 = GHC.RTS.Flags.MiscFlags_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       cdlb5: // global
           I64[Hp - 56] = GHC.RTS.Flags.MiscFlags_con_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R5;
           P64[Hp - 16] = R6;
           P64[Hp - 8] = P64[Sp];
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 55;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.MiscFlags_info" {
     GHC.RTS.Flags.MiscFlags_info:
         const GHC.RTS.Flags.MiscFlags_entry;
         const 0;
         const 14;
         const 30064771072;
         const 0;
         const 7;
         const GHC.RTS.Flags.MiscFlags_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.720459669 UTC

[section ""data" . GHC.RTS.Flags.ConcFlags_closure" {
     GHC.RTS.Flags.ConcFlags_closure:
         const GHC.RTS.Flags.ConcFlags_info;
 },
 GHC.RTS.Flags.ConcFlags_entry() //  [R2, R3]
         { []
         }
     {offset
       cdlbm: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdlbq; else goto cdlbp;
       cdlbq: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = GHC.RTS.Flags.ConcFlags_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdlbp: // global
           I64[Hp - 16] = GHC.RTS.Flags.ConcFlags_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.ConcFlags_info" {
     GHC.RTS.Flags.ConcFlags_info:
         const GHC.RTS.Flags.ConcFlags_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.725860927 UTC

[section ""data" . GHC.RTS.Flags.GCFlags_closure" {
     GHC.RTS.Flags.GCFlags_closure:
         const GHC.RTS.Flags.GCFlags_info;
 },
 GHC.RTS.Flags.GCFlags_slow() //  [R1]
         { []
         }
     {offset
       cdlby: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.RTS.Flags.GCFlags_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2,
                                            R1) args: 184, res: 0, upd: 8;
     }
 },
 GHC.RTS.Flags.GCFlags_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cdlbD: // global
           Hp = Hp + 224;
           if (Hp > HpLim) (likely: False) goto cdlbH; else goto cdlbG;
       cdlbH: // global
           HpAlloc = 224;
           R1 = GHC.RTS.Flags.GCFlags_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 224, res: 0, upd: 8;
       cdlbG: // global
           I64[Hp - 216] = GHC.RTS.Flags.GCFlags_con_info;
           P64[Hp - 208] = R2;
           P64[Hp - 200] = R3;
           P64[Hp - 192] = R4;
           P64[Hp - 184] = R5;
           P64[Hp - 176] = R6;
           P64[Hp - 168] = P64[Sp];
           P64[Hp - 160] = P64[Sp + 8];
           P64[Hp - 152] = P64[Sp + 16];
           P64[Hp - 144] = P64[Sp + 24];
           P64[Hp - 136] = P64[Sp + 32];
           P64[Hp - 128] = P64[Sp + 40];
           P64[Hp - 120] = P64[Sp + 48];
           P64[Hp - 112] = P64[Sp + 56];
           P64[Hp - 104] = P64[Sp + 64];
           P64[Hp - 96] = P64[Sp + 72];
           P64[Hp - 88] = P64[Sp + 80];
           P64[Hp - 80] = P64[Sp + 88];
           P64[Hp - 72] = P64[Sp + 96];
           P64[Hp - 64] = P64[Sp + 104];
           P64[Hp - 56] = P64[Sp + 112];
           P64[Hp - 48] = P64[Sp + 120];
           P64[Hp - 40] = P64[Sp + 128];
           P64[Hp - 32] = P64[Sp + 136];
           P64[Hp - 24] = P64[Sp + 144];
           P64[Hp - 16] = P64[Sp + 152];
           P64[Hp - 8] = P64[Sp + 160];
           P64[Hp] = P64[Sp + 168];
           R1 = Hp - 215;
           Sp = Sp + 176;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.GCFlags_info" {
     GHC.RTS.Flags.GCFlags_info:
         const GHC.RTS.Flags.GCFlags_entry;
         const 0;
         const 14;
         const 115964116992;
         const 0;
         const 27;
         const GHC.RTS.Flags.GCFlags_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.734669451 UTC

[section ""data" . GHC.RTS.Flags.NoGCStats_closure" {
     GHC.RTS.Flags.NoGCStats_closure:
         const GHC.RTS.Flags.NoGCStats_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.73635499 UTC

[section ""data" . GHC.RTS.Flags.CollectGCStats_closure" {
     GHC.RTS.Flags.CollectGCStats_closure:
         const GHC.RTS.Flags.CollectGCStats_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.738164278 UTC

[section ""data" . GHC.RTS.Flags.OneLineGCStats_closure" {
     GHC.RTS.Flags.OneLineGCStats_closure:
         const GHC.RTS.Flags.OneLineGCStats_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.739875068 UTC

[section ""data" . GHC.RTS.Flags.SummaryGCStats_closure" {
     GHC.RTS.Flags.SummaryGCStats_closure:
         const GHC.RTS.Flags.SummaryGCStats_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.741601813 UTC

[section ""data" . GHC.RTS.Flags.VerboseGCStats_closure" {
     GHC.RTS.Flags.VerboseGCStats_closure:
         const GHC.RTS.Flags.VerboseGCStats_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.743579978 UTC

[section ""cstring" . idlci_str" {
     idlci_str:
         I8[] [98,97,115,101,58,71,72,67,46,82,84,83,46,70,108,97,103,115,46,82,84,83,70,108,97,103,115]
 },
 GHC.RTS.Flags.RTSFlags_con_entry() //  [R1]
         { []
         }
     {offset
       cdlch: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.RTSFlags_con_info" {
     GHC.RTS.Flags.RTSFlags_con_info:
         const GHC.RTS.Flags.RTSFlags_con_entry;
         const 9;
         const 1;
         const idlci_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.747167886 UTC

[section ""cstring" . idlcp_str" {
     idlcp_str:
         I8[] [98,97,115,101,58,71,72,67,46,82,84,83,46,70,108,97,103,115,46,80,97,114,70,108,97,103,115]
 },
 GHC.RTS.Flags.ParFlags_con_entry() //  [R1]
         { []
         }
     {offset
       cdlco: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.ParFlags_con_info" {
     GHC.RTS.Flags.ParFlags_con_info:
         const GHC.RTS.Flags.ParFlags_con_entry;
         const 10;
         const 1;
         const idlcp_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.750437011 UTC

[section ""cstring" . idlcw_str" {
     idlcw_str:
         I8[] [98,97,115,101,58,71,72,67,46,82,84,83,46,70,108,97,103,115,46,84,105,99,107,121,70,108,97,103,115]
 },
 GHC.RTS.Flags.TickyFlags_con_entry() //  [R1]
         { []
         }
     {offset
       cdlcv: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.TickyFlags_con_info" {
     GHC.RTS.Flags.TickyFlags_con_info:
         const GHC.RTS.Flags.TickyFlags_con_entry;
         const 2;
         const 4;
         const idlcw_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.753765568 UTC

[section ""cstring" . idlcD_str" {
     idlcD_str:
         I8[] [98,97,115,101,58,71,72,67,46,82,84,83,46,70,108,97,103,115,46,84,114,97,99,101,70,108,97,103,115]
 },
 GHC.RTS.Flags.TraceFlags_con_entry() //  [R1]
         { []
         }
     {offset
       cdlcC: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.TraceFlags_con_info" {
     GHC.RTS.Flags.TraceFlags_con_info:
         const GHC.RTS.Flags.TraceFlags_con_entry;
         const 7;
         const 1;
         const idlcD_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.756824389 UTC

[section ""relreadonly" . GHC.RTS.Flags.DoTrace_closure_tbl" {
     GHC.RTS.Flags.DoTrace_closure_tbl:
         const GHC.RTS.Flags.TraceNone_closure+1;
         const GHC.RTS.Flags.TraceEventLog_closure+2;
         const GHC.RTS.Flags.TraceStderr_closure+3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.759299008 UTC

[section ""cstring" . idlcL_str" {
     idlcL_str:
         I8[] [98,97,115,101,58,71,72,67,46,82,84,83,46,70,108,97,103,115,46,84,114,97,99,101,78,111,110,101]
 },
 GHC.RTS.Flags.TraceNone_con_entry() //  [R1]
         { []
         }
     {offset
       cdlcK: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.TraceNone_con_info" {
     GHC.RTS.Flags.TraceNone_con_info:
         const GHC.RTS.Flags.TraceNone_con_entry;
         const 4294967296;
         const 3;
         const idlcL_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.762649985 UTC

[section ""cstring" . idlcS_str" {
     idlcS_str:
         I8[] [98,97,115,101,58,71,72,67,46,82,84,83,46,70,108,97,103,115,46,84,114,97,99,101,69,118,101,110,116,76,111,103]
 },
 GHC.RTS.Flags.TraceEventLog_con_entry() //  [R1]
         { []
         }
     {offset
       cdlcR: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.TraceEventLog_con_info" {
     GHC.RTS.Flags.TraceEventLog_con_info:
         const GHC.RTS.Flags.TraceEventLog_con_entry;
         const 4294967296;
         const 4294967299;
         const idlcS_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.765825349 UTC

[section ""cstring" . idlcZ_str" {
     idlcZ_str:
         I8[] [98,97,115,101,58,71,72,67,46,82,84,83,46,70,108,97,103,115,46,84,114,97,99,101,83,116,100,101,114,114]
 },
 GHC.RTS.Flags.TraceStderr_con_entry() //  [R1]
         { []
         }
     {offset
       cdlcY: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.TraceStderr_con_info" {
     GHC.RTS.Flags.TraceStderr_con_info:
         const GHC.RTS.Flags.TraceStderr_con_entry;
         const 4294967296;
         const 8589934595;
         const idlcZ_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.769067137 UTC

[section ""cstring" . idld6_str" {
     idld6_str:
         I8[] [98,97,115,101,58,71,72,67,46,82,84,83,46,70,108,97,103,115,46,80,114,111,102,70,108,97,103,115]
 },
 GHC.RTS.Flags.ProfFlags_con_entry() //  [R1]
         { []
         }
     {offset
       cdld5: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.ProfFlags_con_info" {
     GHC.RTS.Flags.ProfFlags_con_info:
         const GHC.RTS.Flags.ProfFlags_con_entry;
         const 14;
         const 1;
         const idld6_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.772624494 UTC

[section ""relreadonly" . GHC.RTS.Flags.DoHeapProfile_closure_tbl" {
     GHC.RTS.Flags.DoHeapProfile_closure_tbl:
         const GHC.RTS.Flags.NoHeapProfiling_closure+1;
         const GHC.RTS.Flags.HeapByCCS_closure+1;
         const GHC.RTS.Flags.HeapByMod_closure+1;
         const GHC.RTS.Flags.HeapByDescr_closure+1;
         const GHC.RTS.Flags.HeapByType_closure+1;
         const GHC.RTS.Flags.HeapByRetainer_closure+1;
         const GHC.RTS.Flags.HeapByLDV_closure+1;
         const GHC.RTS.Flags.HeapByClosureType_closure+1;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.774639602 UTC

[section ""cstring" . idlde_str" {
     idlde_str:
         I8[] [98,97,115,101,58,71,72,67,46,82,84,83,46,70,108,97,103,115,46,78,111,72,101,97,112,80,114,111,102,105,108,105,110,103]
 },
 GHC.RTS.Flags.NoHeapProfiling_con_entry() //  [R1]
         { []
         }
     {offset
       cdldd: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.NoHeapProfiling_con_info" {
     GHC.RTS.Flags.NoHeapProfiling_con_info:
         const GHC.RTS.Flags.NoHeapProfiling_con_entry;
         const 4294967296;
         const 3;
         const idlde_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.777867411 UTC

[section ""cstring" . idldl_str" {
     idldl_str:
         I8[] [98,97,115,101,58,71,72,67,46,82,84,83,46,70,108,97,103,115,46,72,101,97,112,66,121,67,67,83]
 },
 GHC.RTS.Flags.HeapByCCS_con_entry() //  [R1]
         { []
         }
     {offset
       cdldk: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.HeapByCCS_con_info" {
     GHC.RTS.Flags.HeapByCCS_con_info:
         const GHC.RTS.Flags.HeapByCCS_con_entry;
         const 4294967296;
         const 4294967299;
         const idldl_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.781223877 UTC

[section ""cstring" . idlds_str" {
     idlds_str:
         I8[] [98,97,115,101,58,71,72,67,46,82,84,83,46,70,108,97,103,115,46,72,101,97,112,66,121,77,111,100]
 },
 GHC.RTS.Flags.HeapByMod_con_entry() //  [R1]
         { []
         }
     {offset
       cdldr: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.HeapByMod_con_info" {
     GHC.RTS.Flags.HeapByMod_con_info:
         const GHC.RTS.Flags.HeapByMod_con_entry;
         const 4294967296;
         const 8589934595;
         const idlds_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.784558693 UTC

[section ""cstring" . idldz_str" {
     idldz_str:
         I8[] [98,97,115,101,58,71,72,67,46,82,84,83,46,70,108,97,103,115,46,72,101,97,112,66,121,68,101,115,99,114]
 },
 GHC.RTS.Flags.HeapByDescr_con_entry() //  [R1]
         { []
         }
     {offset
       cdldy: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.HeapByDescr_con_info" {
     GHC.RTS.Flags.HeapByDescr_con_info:
         const GHC.RTS.Flags.HeapByDescr_con_entry;
         const 4294967296;
         const 12884901891;
         const idldz_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.788623569 UTC

[section ""cstring" . idldG_str" {
     idldG_str:
         I8[] [98,97,115,101,58,71,72,67,46,82,84,83,46,70,108,97,103,115,46,72,101,97,112,66,121,84,121,112,101]
 },
 GHC.RTS.Flags.HeapByType_con_entry() //  [R1]
         { []
         }
     {offset
       cdldF: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.HeapByType_con_info" {
     GHC.RTS.Flags.HeapByType_con_info:
         const GHC.RTS.Flags.HeapByType_con_entry;
         const 4294967296;
         const 17179869187;
         const idldG_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.792822995 UTC

[section ""cstring" . idldN_str" {
     idldN_str:
         I8[] [98,97,115,101,58,71,72,67,46,82,84,83,46,70,108,97,103,115,46,72,101,97,112,66,121,82,101,116,97,105,110,101,114]
 },
 GHC.RTS.Flags.HeapByRetainer_con_entry() //  [R1]
         { []
         }
     {offset
       cdldM: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.HeapByRetainer_con_info" {
     GHC.RTS.Flags.HeapByRetainer_con_info:
         const GHC.RTS.Flags.HeapByRetainer_con_entry;
         const 4294967296;
         const 21474836483;
         const idldN_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.796083065 UTC

[section ""cstring" . idldU_str" {
     idldU_str:
         I8[] [98,97,115,101,58,71,72,67,46,82,84,83,46,70,108,97,103,115,46,72,101,97,112,66,121,76,68,86]
 },
 GHC.RTS.Flags.HeapByLDV_con_entry() //  [R1]
         { []
         }
     {offset
       cdldT: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.HeapByLDV_con_info" {
     GHC.RTS.Flags.HeapByLDV_con_info:
         const GHC.RTS.Flags.HeapByLDV_con_entry;
         const 4294967296;
         const 25769803779;
         const idldU_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.799276236 UTC

[section ""cstring" . idle1_str" {
     idle1_str:
         I8[] [98,97,115,101,58,71,72,67,46,82,84,83,46,70,108,97,103,115,46,72,101,97,112,66,121,67,108,111,115,117,114,101,84,121,112,101]
 },
 GHC.RTS.Flags.HeapByClosureType_con_entry() //  [R1]
         { []
         }
     {offset
       cdle0: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.HeapByClosureType_con_info" {
     GHC.RTS.Flags.HeapByClosureType_con_info:
         const GHC.RTS.Flags.HeapByClosureType_con_entry;
         const 4294967296;
         const 30064771075;
         const idle1_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.80257216 UTC

[section ""cstring" . idle8_str" {
     idle8_str:
         I8[] [98,97,115,101,58,71,72,67,46,82,84,83,46,70,108,97,103,115,46,67,67,70,108,97,103,115]
 },
 GHC.RTS.Flags.CCFlags_con_entry() //  [R1]
         { []
         }
     {offset
       cdle7: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.CCFlags_con_info" {
     GHC.RTS.Flags.CCFlags_con_info:
         const GHC.RTS.Flags.CCFlags_con_entry;
         const 3;
         const 1;
         const idle8_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.805646836 UTC

[section ""relreadonly" . GHC.RTS.Flags.DoCostCentres_closure_tbl" {
     GHC.RTS.Flags.DoCostCentres_closure_tbl:
         const GHC.RTS.Flags.CostCentresNone_closure+1;
         const GHC.RTS.Flags.CostCentresSummary_closure+2;
         const GHC.RTS.Flags.CostCentresVerbose_closure+3;
         const GHC.RTS.Flags.CostCentresAll_closure+4;
         const GHC.RTS.Flags.CostCentresJSON_closure+5;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.807647115 UTC

[section ""cstring" . idleg_str" {
     idleg_str:
         I8[] [98,97,115,101,58,71,72,67,46,82,84,83,46,70,108,97,103,115,46,67,111,115,116,67,101,110,116,114,101,115,78,111,110,101]
 },
 GHC.RTS.Flags.CostCentresNone_con_entry() //  [R1]
         { []
         }
     {offset
       cdlef: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.CostCentresNone_con_info" {
     GHC.RTS.Flags.CostCentresNone_con_info:
         const GHC.RTS.Flags.CostCentresNone_con_entry;
         const 4294967296;
         const 3;
         const idleg_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.811466376 UTC

[section ""cstring" . idlen_str" {
     idlen_str:
         I8[] [98,97,115,101,58,71,72,67,46,82,84,83,46,70,108,97,103,115,46,67,111,115,116,67,101,110,116,114,101,115,83,117,109,109,97,114,121]
 },
 GHC.RTS.Flags.CostCentresSummary_con_entry() //  [R1]
         { []
         }
     {offset
       cdlem: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.CostCentresSummary_con_info" {
     GHC.RTS.Flags.CostCentresSummary_con_info:
         const GHC.RTS.Flags.CostCentresSummary_con_entry;
         const 4294967296;
         const 4294967299;
         const idlen_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.814763554 UTC

[section ""cstring" . idleu_str" {
     idleu_str:
         I8[] [98,97,115,101,58,71,72,67,46,82,84,83,46,70,108,97,103,115,46,67,111,115,116,67,101,110,116,114,101,115,86,101,114,98,111,115,101]
 },
 GHC.RTS.Flags.CostCentresVerbose_con_entry() //  [R1]
         { []
         }
     {offset
       cdlet: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.CostCentresVerbose_con_info" {
     GHC.RTS.Flags.CostCentresVerbose_con_info:
         const GHC.RTS.Flags.CostCentresVerbose_con_entry;
         const 4294967296;
         const 8589934595;
         const idleu_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.818718112 UTC

[section ""cstring" . idleB_str" {
     idleB_str:
         I8[] [98,97,115,101,58,71,72,67,46,82,84,83,46,70,108,97,103,115,46,67,111,115,116,67,101,110,116,114,101,115,65,108,108]
 },
 GHC.RTS.Flags.CostCentresAll_con_entry() //  [R1]
         { []
         }
     {offset
       cdleA: // global
           R1 = R1 + 4;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.CostCentresAll_con_info" {
     GHC.RTS.Flags.CostCentresAll_con_info:
         const GHC.RTS.Flags.CostCentresAll_con_entry;
         const 4294967296;
         const 12884901891;
         const idleB_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.822098872 UTC

[section ""cstring" . idleI_str" {
     idleI_str:
         I8[] [98,97,115,101,58,71,72,67,46,82,84,83,46,70,108,97,103,115,46,67,111,115,116,67,101,110,116,114,101,115,74,83,79,78]
 },
 GHC.RTS.Flags.CostCentresJSON_con_entry() //  [R1]
         { []
         }
     {offset
       cdleH: // global
           R1 = R1 + 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.CostCentresJSON_con_info" {
     GHC.RTS.Flags.CostCentresJSON_con_info:
         const GHC.RTS.Flags.CostCentresJSON_con_entry;
         const 4294967296;
         const 17179869187;
         const idleI_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.825529048 UTC

[section ""cstring" . idleP_str" {
     idleP_str:
         I8[] [98,97,115,101,58,71,72,67,46,82,84,83,46,70,108,97,103,115,46,68,101,98,117,103,70,108,97,103,115]
 },
 GHC.RTS.Flags.DebugFlags_con_entry() //  [R1]
         { []
         }
     {offset
       cdleO: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.DebugFlags_con_info" {
     GHC.RTS.Flags.DebugFlags_con_info:
         const GHC.RTS.Flags.DebugFlags_con_entry;
         const 15;
         const 1;
         const idleP_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.828836863 UTC

[section ""cstring" . idleW_str" {
     idleW_str:
         I8[] [98,97,115,101,58,71,72,67,46,82,84,83,46,70,108,97,103,115,46,77,105,115,99,70,108,97,103,115]
 },
 GHC.RTS.Flags.MiscFlags_con_entry() //  [R1]
         { []
         }
     {offset
       cdleV: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.MiscFlags_con_info" {
     GHC.RTS.Flags.MiscFlags_con_info:
         const GHC.RTS.Flags.MiscFlags_con_entry;
         const 7;
         const 1;
         const idleW_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.832662596 UTC

[section ""cstring" . idlf3_str" {
     idlf3_str:
         I8[] [98,97,115,101,58,71,72,67,46,82,84,83,46,70,108,97,103,115,46,67,111,110,99,70,108,97,103,115]
 },
 GHC.RTS.Flags.ConcFlags_con_entry() //  [R1]
         { []
         }
     {offset
       cdlf2: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.ConcFlags_con_info" {
     GHC.RTS.Flags.ConcFlags_con_info:
         const GHC.RTS.Flags.ConcFlags_con_entry;
         const 2;
         const 4;
         const idlf3_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.83596884 UTC

[section ""cstring" . idlfa_str" {
     idlfa_str:
         I8[] [98,97,115,101,58,71,72,67,46,82,84,83,46,70,108,97,103,115,46,71,67,70,108,97,103,115]
 },
 GHC.RTS.Flags.GCFlags_con_entry() //  [R1]
         { []
         }
     {offset
       cdlf9: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.GCFlags_con_info" {
     GHC.RTS.Flags.GCFlags_con_info:
         const GHC.RTS.Flags.GCFlags_con_entry;
         const 27;
         const 1;
         const idlfa_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.839051482 UTC

[section ""relreadonly" . GHC.RTS.Flags.GiveGCStats_closure_tbl" {
     GHC.RTS.Flags.GiveGCStats_closure_tbl:
         const GHC.RTS.Flags.NoGCStats_closure+1;
         const GHC.RTS.Flags.CollectGCStats_closure+2;
         const GHC.RTS.Flags.OneLineGCStats_closure+3;
         const GHC.RTS.Flags.SummaryGCStats_closure+4;
         const GHC.RTS.Flags.VerboseGCStats_closure+5;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.84113321 UTC

[section ""cstring" . idlfi_str" {
     idlfi_str:
         I8[] [98,97,115,101,58,71,72,67,46,82,84,83,46,70,108,97,103,115,46,78,111,71,67,83,116,97,116,115]
 },
 GHC.RTS.Flags.NoGCStats_con_entry() //  [R1]
         { []
         }
     {offset
       cdlfh: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.NoGCStats_con_info" {
     GHC.RTS.Flags.NoGCStats_con_info:
         const GHC.RTS.Flags.NoGCStats_con_entry;
         const 4294967296;
         const 3;
         const idlfi_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.84455158 UTC

[section ""cstring" . idlfp_str" {
     idlfp_str:
         I8[] [98,97,115,101,58,71,72,67,46,82,84,83,46,70,108,97,103,115,46,67,111,108,108,101,99,116,71,67,83,116,97,116,115]
 },
 GHC.RTS.Flags.CollectGCStats_con_entry() //  [R1]
         { []
         }
     {offset
       cdlfo: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.CollectGCStats_con_info" {
     GHC.RTS.Flags.CollectGCStats_con_info:
         const GHC.RTS.Flags.CollectGCStats_con_entry;
         const 4294967296;
         const 4294967299;
         const idlfp_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.848563605 UTC

[section ""cstring" . idlfw_str" {
     idlfw_str:
         I8[] [98,97,115,101,58,71,72,67,46,82,84,83,46,70,108,97,103,115,46,79,110,101,76,105,110,101,71,67,83,116,97,116,115]
 },
 GHC.RTS.Flags.OneLineGCStats_con_entry() //  [R1]
         { []
         }
     {offset
       cdlfv: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.OneLineGCStats_con_info" {
     GHC.RTS.Flags.OneLineGCStats_con_info:
         const GHC.RTS.Flags.OneLineGCStats_con_entry;
         const 4294967296;
         const 8589934595;
         const idlfw_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.852475808 UTC

[section ""cstring" . idlfD_str" {
     idlfD_str:
         I8[] [98,97,115,101,58,71,72,67,46,82,84,83,46,70,108,97,103,115,46,83,117,109,109,97,114,121,71,67,83,116,97,116,115]
 },
 GHC.RTS.Flags.SummaryGCStats_con_entry() //  [R1]
         { []
         }
     {offset
       cdlfC: // global
           R1 = R1 + 4;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.SummaryGCStats_con_info" {
     GHC.RTS.Flags.SummaryGCStats_con_info:
         const GHC.RTS.Flags.SummaryGCStats_con_entry;
         const 4294967296;
         const 12884901891;
         const idlfD_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.855722567 UTC

[section ""cstring" . idlfK_str" {
     idlfK_str:
         I8[] [98,97,115,101,58,71,72,67,46,82,84,83,46,70,108,97,103,115,46,86,101,114,98,111,115,101,71,67,83,116,97,116,115]
 },
 GHC.RTS.Flags.VerboseGCStats_con_entry() //  [R1]
         { []
         }
     {offset
       cdlfJ: // global
           R1 = R1 + 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.RTS.Flags.VerboseGCStats_con_info" {
     GHC.RTS.Flags.VerboseGCStats_con_info:
         const GHC.RTS.Flags.VerboseGCStats_con_entry;
         const 4294967296;
         const 17179869187;
         const idlfK_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:31.860167415 UTC

[section ""relreadonly" . SddB2_srt" {
     SddB2_srt:
         const GHC.Err.errorWithoutStackTrace_closure;
         const GHC.RTS.Flags.$wlvl3_closure;
         const GHC.RTS.Flags.$fEnumGiveGCStats6_closure;
         const GHC.RTS.Flags.$fEnumGiveGCStats_$ctoEnum_closure;
         const GHC.RTS.Flags.$w$ctoEnum2_closure;
         const GHC.RTS.Flags.$wlvl_closure;
         const GHC.RTS.Flags.$fEnumDoCostCentres11_closure;
         const GHC.RTS.Flags.$fEnumDoCostCentres_$ctoEnum_closure;
         const GHC.RTS.Flags.$w$ctoEnum_closure;
         const GHC.RTS.Flags.$wlvl1_closure;
         const GHC.RTS.Flags.$fEnumDoHeapProfile_$ctoEnum_closure;
         const GHC.RTS.Flags.$w$ctoEnum1_closure;
         const GHC.RTS.Flags.$wlvl2_closure;
         const GHC.RTS.Flags.$fEnumDoTrace1_closure;
         const GHC.RTS.Flags.$fEnumDoTrace_$ctoEnum_closure;
         const g_rcV52_closure;
         const GHC.Show.$fShowBool2_closure;
         const GHC.Show.$fShowBool4_closure;
         const GHC.Show.showCommaSpace1_closure;
         const GHC.RTS.Flags.$fShowParFlags_$cshowsPrec_closure;
         const GHC.RTS.Flags.$fShowParFlags1_closure;
         const GHC.Show.$fShowMaybe_$cshowsPrec_closure;
         const GHC.Show.$fShow[]_$s$fShow[]1_closure;
         const GHC.RTS.Flags.$fShowTickyFlags4_closure;
         const GHC.RTS.Flags.$w$cshowsPrec8_closure;
         const GHC.RTS.Flags.$fShowTickyFlags_$cshowsPrec_closure;
         const GHC.RTS.Flags.$fShowTickyFlags_$cshow_closure;
         const GHC.RTS.Flags.$fShowTickyFlags1_closure;
         const GHC.RTS.Flags.$w$cshowsPrec4_closure;
         const GHC.RTS.Flags.$fShowDoTrace1_closure;
         const GHC.RTS.Flags.$fShowDoTrace3_closure;
         const GHC.RTS.Flags.$fShowDoTrace5_closure;
         const GHC.RTS.Flags.$fShowDoTrace_$cshow_closure;
         const f1_rcV5f_closure;
         const GHC.RTS.Flags.$w$cshowsPrec9_closure;
         const GHC.RTS.Flags.$fShowTraceFlags_$cshowsPrec_closure;
         const GHC.RTS.Flags.$fShowTraceFlags_$cshow_closure;
         const GHC.RTS.Flags.$fShowTraceFlags1_closure;
         const GHC.RTS.Flags.$w$cshowsPrec3_closure;
         const GHC.RTS.Flags.$fShowDoHeapProfile1_closure;
         const GHC.RTS.Flags.$fShowDoHeapProfile3_closure;
         const GHC.RTS.Flags.$fShowDoHeapProfile5_closure;
         const GHC.RTS.Flags.$fShowDoHeapProfile7_closure;
         const GHC.RTS.Flags.$fShowDoHeapProfile9_closure;
         const GHC.RTS.Flags.$fShowDoHeapProfile11_closure;
         const GHC.RTS.Flags.$fShowDoHeapProfile13_closure;
         const GHC.RTS.Flags.$fShowDoHeapProfile15_closure;
         const GHC.RTS.Flags.$fShowDoHeapProfile_$cshow_closure;
         const GHC.Show.$w$cshowsPrec4_closure;
         const f3_rcV5o_closure;
         const GHC.RTS.Flags.$fShowProfFlags_$cshowsPrec_closure;
         const GHC.RTS.Flags.$fShowProfFlags_$cshow_closure;
         const GHC.RTS.Flags.$fShowProfFlags1_closure;
         const GHC.RTS.Flags.$w$cshowsPrec1_closure;
         const GHC.RTS.Flags.$fShowCCFlags5_closure;
         const GHC.RTS.Flags.$fShowCCFlags7_closure;
         const GHC.RTS.Flags.$fShowCCFlags9_closure;
         const GHC.RTS.Flags.$fShowCCFlags11_closure;
         const GHC.RTS.Flags.$fShowCCFlags13_closure;
         const GHC.RTS.Flags.$fShowDoCostCentres_$cshow_closure;
         const GHC.Show.showCommaSpace1_closure;
         const GHC.RTS.Flags.$w$cshowsPrec_closure;
         const GHC.RTS.Flags.$fShowCCFlags_$cshowsPrec_closure;
         const GHC.RTS.Flags.$fShowCCFlags17_closure;
         const GHC.RTS.Flags.$w$cshow_closure;
         const GHC.RTS.Flags.$fShowCCFlags_$cshow_closure;
         const GHC.RTS.Flags.$fShowCCFlags1_closure;
         const g_rcV52_closure;
         const GHC.Show.$fShowBool4_closure;
         const GHC.Show.$fShowBool2_closure;
         const f5_rcV5E_closure;
         const GHC.RTS.Flags.$fShowDebugFlags_$cshowsPrec_closure;
         const GHC.RTS.Flags.$fShowDebugFlags1_closure;
         const GHC.RTS.Flags.$w$cshowsPrec6_closure;
         const GHC.RTS.Flags.$fShowMiscFlags_$cshowsPrec_closure;
         const GHC.RTS.Flags.$fShowMiscFlags_$cshow_closure;
         const GHC.RTS.Flags.$fShowMiscFlags1_closure;
         const GHC.RTS.Flags.$w$cshowsPrec2_closure;
         const GHC.RTS.Flags.$fShowConcFlags_$cshowsPrec_closure;
         const GHC.RTS.Flags.$fShowConcFlags_$cshow_closure;
         const GHC.RTS.Flags.$fShowConcFlags1_closure;
         const GHC.RTS.Flags.$w$cshowsPrec5_closure;
         const GHC.RTS.Flags.$fShowGiveGCStats1_closure;
         const GHC.RTS.Flags.$fShowGiveGCStats3_closure;
         const GHC.RTS.Flags.$fShowGiveGCStats5_closure;
         const GHC.RTS.Flags.$fShowGiveGCStats7_closure;
         const GHC.RTS.Flags.$fShowGiveGCStats9_closure;
         const GHC.RTS.Flags.$fShowGiveGCStats_$cshow_closure;
         const GHC.Show.$fShow[]_$s$fShow[]1_closure;
         const GHC.Show.$fShowMaybe_$cshowsPrec_closure;
         const GHC.Float.$fShowDouble2_closure;
         const f7_rcV63_closure;
         const GHC.RTS.Flags.$fShowGCFlags_$cshowsPrec_closure;
         const GHC.RTS.Flags.$fShowGCFlags_$cshow_closure;
         const GHC.RTS.Flags.$fShowGCFlags1_closure;
         const GHC.RTS.Flags.$fShowProfFlags_$cshowsPrec_closure;
         const GHC.RTS.Flags.$w$cshowsPrec8_closure;
         const GHC.RTS.Flags.$fShowParFlags_$cshowsPrec_closure;
         const GHC.RTS.Flags.$w$cshowsPrec7_closure;
         const GHC.RTS.Flags.$fShowRTSFlags_$cshowsPrec_closure;
         const GHC.RTS.Flags.$fShowRTSFlags_$cshow_closure;
         const GHC.RTS.Flags.$fShowRTSFlags1_closure;
         const GHC.RTS.Flags.$wlvl3_closure;
         const GHC.RTS.Flags.$fEnumGiveGCStats_$csucc_closure;
         const lvl96_rcV8o_closure;
         const GHC.RTS.Flags.$fEnumGiveGCStats_go4_closure;
         const GHC.RTS.Flags.$fEnumGiveGCStats_go3_closure;
         const GHC.RTS.Flags.$fEnumGiveGCStats_go2_closure;
         const GHC.RTS.Flags.$fEnumGiveGCStats_go1_closure;
         const GHC.RTS.Flags.$fEnumGiveGCStats_go_closure;
         const GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFromTo_closure;
         const GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFromThen_closure;
         const GHC.RTS.Flags.$fEnumGiveGCStats_$ctoEnum_closure;
         const GHC.RTS.Flags.$fEnumGiveGCStats_go5_closure;
         const GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFrom_closure;
         const GHC.RTS.Flags.$fEnumGiveGCStats1_closure;
         const GHC.RTS.Flags.$fEnumGiveGCStats2_closure;
         const GHC.RTS.Flags.$fEnumGiveGCStats3_closure;
         const GHC.RTS.Flags.$fEnumGiveGCStats4_closure;
         const GHC.RTS.Flags.$fEnumGiveGCStats5_closure;
         const GHC.RTS.Flags.$fEnumGiveGCStats_$cpred_closure;
         const lvl97_rcV8p_closure;
         const GHC.RTS.Flags.$fEnumGiveGCStats_$cenumFromThenTo_closure;
         const GHC.RTS.Flags.$wlvl1_closure;
         const GHC.RTS.Flags.$fEnumDoHeapProfile13_closure;
         const GHC.RTS.Flags.$fEnumDoHeapProfile_$csucc_closure;
         const GHC.RTS.Flags.$fEnumDoHeapProfile15_closure;
         const GHC.RTS.Flags.$fEnumDoHeapProfile_go7_closure;
         const GHC.RTS.Flags.$w$ctoEnum1_closure;
         const GHC.RTS.Flags.$fEnumDoHeapProfile_go6_closure;
         const GHC.RTS.Flags.$fEnumDoHeapProfile_go5_closure;
         const GHC.RTS.Flags.$fEnumDoHeapProfile_go4_closure;
         const GHC.RTS.Flags.$fEnumDoHeapProfile_go3_closure;
         const GHC.RTS.Flags.$fEnumDoHeapProfile_go2_closure;
         const GHC.RTS.Flags.$fEnumDoHeapProfile_go1_closure;
         const GHC.RTS.Flags.$fEnumDoHeapProfile_go_closure;
         const GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFromTo_closure;
         const GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFromThen_closure;
         const GHC.RTS.Flags.$fEnumDoHeapProfile_$ctoEnum_closure;
         const GHC.RTS.Flags.$fEnumDoHeapProfile_go8_closure;
         const GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFrom_closure;
         const GHC.RTS.Flags.$fEnumDoHeapProfile1_closure;
         const GHC.RTS.Flags.$fEnumDoHeapProfile2_closure;
         const GHC.RTS.Flags.$fEnumDoHeapProfile3_closure;
         const GHC.RTS.Flags.$fEnumDoHeapProfile4_closure;
         const GHC.RTS.Flags.$fEnumDoHeapProfile5_closure;
         const GHC.RTS.Flags.$fEnumDoHeapProfile6_closure;
         const GHC.RTS.Flags.$fEnumDoHeapProfile7_closure;
         const GHC.RTS.Flags.$fEnumDoHeapProfile8_closure;
         const GHC.RTS.Flags.$fEnumDoHeapProfile_$cpred_closure;
         const GHC.RTS.Flags.$fEnumDoHeapProfile14_closure;
         const GHC.RTS.Flags.$fEnumDoHeapProfile_$cenumFromThenTo_closure;
         const GHC.RTS.Flags.$wlvl_closure;
         const GHC.RTS.Flags.$fEnumDoCostCentres_$csucc_closure;
         const lvl98_rcV8q_closure;
         const GHC.RTS.Flags.$fEnumDoCostCentres_go4_closure;
         const GHC.RTS.Flags.$fEnumDoCostCentres_go3_closure;
         const GHC.RTS.Flags.$fEnumDoCostCentres_go2_closure;
         const GHC.RTS.Flags.$fEnumDoCostCentres_go1_closure;
         const GHC.RTS.Flags.$fEnumDoCostCentres_go_closure;
         const GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFromTo_closure;
         const GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFromThen_closure;
         const GHC.RTS.Flags.$fEnumDoCostCentres_$ctoEnum_closure;
         const GHC.RTS.Flags.$fEnumDoCostCentres_go5_closure;
         const GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFrom_closure;
         const GHC.RTS.Flags.$fEnumDoCostCentres1_closure;
         const GHC.RTS.Flags.$fEnumDoCostCentres2_closure;
         const GHC.RTS.Flags.$fEnumDoCostCentres3_closure;
         const GHC.RTS.Flags.$fEnumDoCostCentres4_closure;
         const GHC.RTS.Flags.$fEnumDoCostCentres5_closure;
         const GHC.RTS.Flags.$fEnumDoCostCentres_$cpred_closure;
         const lvl99_rcV8r_closure;
         const GHC.RTS.Flags.$fEnumDoCostCentres_$cenumFromThenTo_closure;
         const GHC.RTS.Flags.$wlvl2_closure;
         const GHC.RTS.Flags.$fEnumDoTrace_$csucc_closure;
         const lvl100_rcV8s_closure;
         const GHC.RTS.Flags.$fEnumDoTrace_go2_closure;
         const GHC.RTS.Flags.$fEnumDoTrace_go1_closure;
         const GHC.RTS.Flags.$fEnumDoTrace_go_closure;
         const GHC.RTS.Flags.$fEnumDoTrace_$cenumFromTo_closure;
         const GHC.RTS.Flags.$fEnumDoTrace_$cenumFromThen_closure;
         const GHC.RTS.Flags.$fEnumDoTrace_$ctoEnum_closure;
         const GHC.RTS.Flags.$fEnumDoTrace_go3_closure;
         const GHC.RTS.Flags.$fEnumDoTrace_$cenumFrom_closure;
         const GHC.RTS.Flags.$fEnumDoTrace2_closure;
         const GHC.RTS.Flags.$fEnumDoTrace3_closure;
         const GHC.RTS.Flags.$fEnumDoTrace4_closure;
         const GHC.RTS.Flags.$fEnumDoTrace_$cpred_closure;
         const lvl101_rcV8t_closure;
         const GHC.RTS.Flags.$fEnumDoTrace_$cenumFromThenTo_closure;
         const GHC.RTS.Flags.getRTSFlags2_closure;
         const GHC.RTS.Flags.$wlvl_closure;
         const GHC.RTS.Flags.getCCFlags1_closure;
         const GHC.RTS.Flags.$w$ctoEnum1_closure;
         const GHC.IO.Encoding.getForeignEncoding_closure;
         const GHC.Foreign.$wpeekCString_closure;
         const GHC.RTS.Flags.getProfFlags1_closure;
         const GHC.RTS.Flags.$wlvl3_closure;
         const GHC.RTS.Flags.getGCFlags5_closure;
         const GHC.RTS.Flags.getGCFlags2_closure;
         const GHC.RTS.Flags.getGCFlags1_closure;
         const GHC.RTS.Flags.getTickyFlags1_closure;
         const GHC.RTS.Flags.getRTSFlags1_closure;
 }]

