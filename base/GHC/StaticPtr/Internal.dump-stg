
==================== Pre unarise: ====================
2018-03-16 16:11:14.34902595 UTC

loc_rfwqJ :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

loc1_rfwta :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# loc_rfwqJ;

loc2_rfwtb :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.StaticPtr.Internal"#;

loc3_rfwtc :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# loc2_rfwtb;

loc4_rfwtd :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "./GHC/StaticPtr/Internal.hs"#;

loc5_rfwte :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# loc4_rfwtd;

loc6_rfwtf :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [26#];

loc7_rfwtg :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [5#];

loc8_rfwth :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [27#];

loc9_rfwti :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [59#];

$dIP_rfwtj :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "error"#;

$dIP1_rfwtk :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# $dIP_rfwtj;

$dIP2_rfwtl :: GHC.Stack.Types.SrcLoc
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.SrcLoc! [loc1_rfwta
                                           loc3_rfwtc
                                           loc5_rfwte
                                           loc6_rfwtf
                                           loc7_rfwtg
                                           loc8_rfwth
                                           loc9_rfwti];

$dIP3_rfwtm :: GHC.Stack.Types.CallStack
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.PushCallStack! [$dIP1_rfwtk
                                                  $dIP2_rfwtl
                                                  GHC.Stack.Types.EmptyCallStack];

lvl_rfwtn :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC bug - makeStatic: Unresolved static form at line "#;

lvl1_rfwto :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    ", column "#;

lvl2_rfwtp :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "."#;

lvl3_rfwtq :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl2_rfwtp;

$wlvl_rfwtr
  :: forall a.
     GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.StaticPtr.StaticPtr a
[GblId, Arity=2, Str=<B,U><B,U>x, Unf=OtherCon []] =
    sat-only [] \r [ww_sfwtv ww1_sfwtw]
        let {
          sat_sfwtH [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              [ww_sfwtv ww1_sfwtw] \u []
                  case GHC.Show.$wshowSignedInt 0# ww1_sfwtw GHC.Types.[] of {
                    (#,#) ww5_sfwty [Occ=Once] ww6_sfwtz [Occ=Once] ->
                        let {
                          sat_sfwtG [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                          [LclId] =
                              [ww_sfwtv] \s []
                                  let {
                                    sat_sfwtF [Occ=Once] :: [GHC.Types.Char]
                                    [LclId] =
                                        [ww_sfwtv] \u []
                                            case
                                                GHC.Show.$wshowSignedInt 0# ww_sfwtv GHC.Types.[]
                                            of
                                            { (#,#) ww3_sfwtC [Occ=Once] ww7_sfwtD [Occ=Once] ->
                                                  let {
                                                    sat_sfwtE [Occ=Once] :: [GHC.Types.Char]
                                                    [LclId] =
                                                        CCCS :! [ww3_sfwtC ww7_sfwtD];
                                                  } in  GHC.Base.++ sat_sfwtE lvl3_rfwtq;
                                            };
                                  } in  GHC.CString.unpackAppendCString# lvl1_rfwto sat_sfwtF; } in
                        let {
                          sat_sfwtA [Occ=Once] :: [GHC.Types.Char]
                          [LclId] =
                              CCCS :! [ww5_sfwty ww6_sfwtz];
                        } in  GHC.Base.++ sat_sfwtA sat_sfwtG;
                  };
        } in 
          case
              GHC.CString.unpackAppendCString# lvl_rfwtn sat_sfwtH
          of
          sat_sfwtI
          { __DEFAULT -> GHC.Err.error $dIP3_rfwtm sat_sfwtI;
          };

GHC.StaticPtr.Internal.makeStatic [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     (GHC.Types.Int, GHC.Types.Int) -> a -> GHC.StaticPtr.StaticPtr a
[GblId,
 Arity=2,
 Str=<B,1*U(1*U(U),1*U(U))><B,A>x,
 Unf=OtherCon []] =
    [] \r [w_sfwtJ w1_sfwtK]
        case w_sfwtJ of {
          (,) ww1_sfwtM [Occ=Once!] ww2_sfwtN [Occ=Once!] ->
              case ww1_sfwtM of {
                GHC.Types.I# ww4_sfwtP [Occ=Once] ->
                    case ww2_sfwtN of {
                      GHC.Types.I# ww6_sfwtR [Occ=Once] ->
                          $wlvl_rfwtr ww6_sfwtR ww4_sfwtP;
                    };
              };
        };

$trModule1_rfwts :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [loc_rfwqJ];

$trModule2_rfwtt :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [loc2_rfwtb];

GHC.StaticPtr.Internal.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [$trModule1_rfwts
                                     $trModule2_rfwtt];


==================== STG syntax: ====================
2018-03-16 16:11:14.351850119 UTC

loc_rfwqJ :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

loc1_rfwta :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# loc_rfwqJ;

loc2_rfwtb :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.StaticPtr.Internal"#;

loc3_rfwtc :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# loc2_rfwtb;

loc4_rfwtd :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "./GHC/StaticPtr/Internal.hs"#;

loc5_rfwte :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# loc4_rfwtd;

loc6_rfwtf :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [26#];

loc7_rfwtg :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [5#];

loc8_rfwth :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [27#];

loc9_rfwti :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [59#];

$dIP_rfwtj :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "error"#;

$dIP1_rfwtk :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# $dIP_rfwtj;

$dIP2_rfwtl :: GHC.Stack.Types.SrcLoc
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.SrcLoc! [loc1_rfwta
                                           loc3_rfwtc
                                           loc5_rfwte
                                           loc6_rfwtf
                                           loc7_rfwtg
                                           loc8_rfwth
                                           loc9_rfwti];

$dIP3_rfwtm :: GHC.Stack.Types.CallStack
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.PushCallStack! [$dIP1_rfwtk
                                                  $dIP2_rfwtl
                                                  GHC.Stack.Types.EmptyCallStack];

lvl_rfwtn :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC bug - makeStatic: Unresolved static form at line "#;

lvl1_rfwto :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    ", column "#;

lvl2_rfwtp :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "."#;

lvl3_rfwtq :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl2_rfwtp;

$wlvl_rfwtr
  :: forall a.
     GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.StaticPtr.StaticPtr a
[GblId, Arity=2, Str=<B,U><B,U>x, Unf=OtherCon []] =
    sat-only [] \r [ww_sfwtv ww1_sfwtw]
        let {
          sat_sfwtH [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              [ww_sfwtv ww1_sfwtw] \u []
                  case GHC.Show.$wshowSignedInt 0# ww1_sfwtw GHC.Types.[] of {
                    (#,#) ww5_sfwty [Occ=Once] ww6_sfwtz [Occ=Once] ->
                        let {
                          sat_sfwtG [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                          [LclId] =
                              [ww_sfwtv] \s []
                                  let {
                                    sat_sfwtF [Occ=Once] :: [GHC.Types.Char]
                                    [LclId] =
                                        [ww_sfwtv] \u []
                                            case
                                                GHC.Show.$wshowSignedInt 0# ww_sfwtv GHC.Types.[]
                                            of
                                            { (#,#) ww3_sfwtC [Occ=Once] ww7_sfwtD [Occ=Once] ->
                                                  let {
                                                    sat_sfwtE [Occ=Once] :: [GHC.Types.Char]
                                                    [LclId] =
                                                        CCCS :! [ww3_sfwtC ww7_sfwtD];
                                                  } in  GHC.Base.++ sat_sfwtE lvl3_rfwtq;
                                            };
                                  } in  GHC.CString.unpackAppendCString# lvl1_rfwto sat_sfwtF; } in
                        let {
                          sat_sfwtA [Occ=Once] :: [GHC.Types.Char]
                          [LclId] =
                              CCCS :! [ww5_sfwty ww6_sfwtz];
                        } in  GHC.Base.++ sat_sfwtA sat_sfwtG;
                  };
        } in 
          case
              GHC.CString.unpackAppendCString# lvl_rfwtn sat_sfwtH
          of
          sat_sfwtI
          { __DEFAULT -> GHC.Err.error $dIP3_rfwtm sat_sfwtI;
          };

GHC.StaticPtr.Internal.makeStatic [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     (GHC.Types.Int, GHC.Types.Int) -> a -> GHC.StaticPtr.StaticPtr a
[GblId,
 Arity=2,
 Str=<B,1*U(1*U(U),1*U(U))><B,A>x,
 Unf=OtherCon []] =
    [] \r [w_sfwtJ w1_sfwtK]
        case w_sfwtJ of {
          (,) ww1_sfwtM [Occ=Once!] ww2_sfwtN [Occ=Once!] ->
              case ww1_sfwtM of {
                GHC.Types.I# ww4_sfwtP [Occ=Once] ->
                    case ww2_sfwtN of {
                      GHC.Types.I# ww6_sfwtR [Occ=Once] ->
                          $wlvl_rfwtr ww6_sfwtR ww4_sfwtP;
                    };
              };
        };

$trModule1_rfwts :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [loc_rfwqJ];

$trModule2_rfwtt :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [loc2_rfwtb];

GHC.StaticPtr.Internal.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [$trModule1_rfwts
                                     $trModule2_rfwtt];


==================== Pre unarise: ====================
2018-03-16 16:11:14.590348267 UTC

loc_rfwqJ :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

loc1_rfwta :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# loc_rfwqJ;

loc2_rfwtb :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.StaticPtr.Internal"#;

loc3_rfwtc :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# loc2_rfwtb;

loc4_rfwtd :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "./GHC/StaticPtr/Internal.hs"#;

loc5_rfwte :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# loc4_rfwtd;

loc6_rfwtf :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [26#];

loc7_rfwtg :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [5#];

loc8_rfwth :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [27#];

loc9_rfwti :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [59#];

$dIP_rfwtj :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "error"#;

$dIP1_rfwtk :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# $dIP_rfwtj;

$dIP2_rfwtl :: GHC.Stack.Types.SrcLoc
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.SrcLoc! [loc1_rfwta
                                           loc3_rfwtc
                                           loc5_rfwte
                                           loc6_rfwtf
                                           loc7_rfwtg
                                           loc8_rfwth
                                           loc9_rfwti];

$dIP3_rfwtm :: GHC.Stack.Types.CallStack
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.PushCallStack! [$dIP1_rfwtk
                                                  $dIP2_rfwtl
                                                  GHC.Stack.Types.EmptyCallStack];

lvl_rfwtn :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC bug - makeStatic: Unresolved static form at line "#;

lvl1_rfwto :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    ", column "#;

lvl2_rfwtp :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "."#;

lvl3_rfwtq :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl2_rfwtp;

$wlvl_rfwtr
  :: forall a.
     GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.StaticPtr.StaticPtr a
[GblId, Arity=2, Str=<B,U><B,U>x, Unf=OtherCon []] =
    sat-only [] \r [ww_sfwBl ww1_sfwBm]
        let {
          sat_sfwBx [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              [ww_sfwBl ww1_sfwBm] \u []
                  case GHC.Show.$wshowSignedInt 0# ww1_sfwBm GHC.Types.[] of {
                    (#,#) ww5_sfwBo [Occ=Once] ww6_sfwBp [Occ=Once] ->
                        let {
                          sat_sfwBw [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                          [LclId] =
                              [ww_sfwBl] \s []
                                  let {
                                    sat_sfwBv [Occ=Once] :: [GHC.Types.Char]
                                    [LclId] =
                                        [ww_sfwBl] \u []
                                            case
                                                GHC.Show.$wshowSignedInt 0# ww_sfwBl GHC.Types.[]
                                            of
                                            { (#,#) ww3_sfwBs [Occ=Once] ww7_sfwBt [Occ=Once] ->
                                                  let {
                                                    sat_sfwBu [Occ=Once] :: [GHC.Types.Char]
                                                    [LclId] =
                                                        CCCS :! [ww3_sfwBs ww7_sfwBt];
                                                  } in  GHC.Base.++ sat_sfwBu lvl3_rfwtq;
                                            };
                                  } in  GHC.CString.unpackAppendCString# lvl1_rfwto sat_sfwBv; } in
                        let {
                          sat_sfwBq [Occ=Once] :: [GHC.Types.Char]
                          [LclId] =
                              CCCS :! [ww5_sfwBo ww6_sfwBp];
                        } in  GHC.Base.++ sat_sfwBq sat_sfwBw;
                  };
        } in 
          case
              GHC.CString.unpackAppendCString# lvl_rfwtn sat_sfwBx
          of
          sat_sfwBy
          { __DEFAULT -> GHC.Err.error $dIP3_rfwtm sat_sfwBy;
          };

GHC.StaticPtr.Internal.makeStatic [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     (GHC.Types.Int, GHC.Types.Int) -> a -> GHC.StaticPtr.StaticPtr a
[GblId,
 Arity=2,
 Str=<B,1*U(1*U(U),1*U(U))><B,A>x,
 Unf=OtherCon []] =
    [] \r [w_sfwBz w1_sfwBA]
        case w_sfwBz of {
          (,) ww1_sfwBC [Occ=Once!] ww2_sfwBD [Occ=Once!] ->
              case ww1_sfwBC of {
                GHC.Types.I# ww4_sfwBF [Occ=Once] ->
                    case ww2_sfwBD of {
                      GHC.Types.I# ww6_sfwBH [Occ=Once] ->
                          $wlvl_rfwtr ww6_sfwBH ww4_sfwBF;
                    };
              };
        };

$trModule1_rfwts :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [loc_rfwqJ];

$trModule2_rfwtt :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [loc2_rfwtb];

GHC.StaticPtr.Internal.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [$trModule1_rfwts
                                     $trModule2_rfwtt];


==================== STG syntax: ====================
2018-03-16 16:11:14.593582595 UTC

loc_rfwqJ :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

loc1_rfwta :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# loc_rfwqJ;

loc2_rfwtb :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.StaticPtr.Internal"#;

loc3_rfwtc :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# loc2_rfwtb;

loc4_rfwtd :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "./GHC/StaticPtr/Internal.hs"#;

loc5_rfwte :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# loc4_rfwtd;

loc6_rfwtf :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [26#];

loc7_rfwtg :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [5#];

loc8_rfwth :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [27#];

loc9_rfwti :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [59#];

$dIP_rfwtj :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "error"#;

$dIP1_rfwtk :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# $dIP_rfwtj;

$dIP2_rfwtl :: GHC.Stack.Types.SrcLoc
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.SrcLoc! [loc1_rfwta
                                           loc3_rfwtc
                                           loc5_rfwte
                                           loc6_rfwtf
                                           loc7_rfwtg
                                           loc8_rfwth
                                           loc9_rfwti];

$dIP3_rfwtm :: GHC.Stack.Types.CallStack
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.PushCallStack! [$dIP1_rfwtk
                                                  $dIP2_rfwtl
                                                  GHC.Stack.Types.EmptyCallStack];

lvl_rfwtn :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC bug - makeStatic: Unresolved static form at line "#;

lvl1_rfwto :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    ", column "#;

lvl2_rfwtp :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "."#;

lvl3_rfwtq :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl2_rfwtp;

$wlvl_rfwtr
  :: forall a.
     GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.StaticPtr.StaticPtr a
[GblId, Arity=2, Str=<B,U><B,U>x, Unf=OtherCon []] =
    sat-only [] \r [ww_sfwBl ww1_sfwBm]
        let {
          sat_sfwBx [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              [ww_sfwBl ww1_sfwBm] \u []
                  case GHC.Show.$wshowSignedInt 0# ww1_sfwBm GHC.Types.[] of {
                    (#,#) ww5_sfwBo [Occ=Once] ww6_sfwBp [Occ=Once] ->
                        let {
                          sat_sfwBw [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                          [LclId] =
                              [ww_sfwBl] \s []
                                  let {
                                    sat_sfwBv [Occ=Once] :: [GHC.Types.Char]
                                    [LclId] =
                                        [ww_sfwBl] \u []
                                            case
                                                GHC.Show.$wshowSignedInt 0# ww_sfwBl GHC.Types.[]
                                            of
                                            { (#,#) ww3_sfwBs [Occ=Once] ww7_sfwBt [Occ=Once] ->
                                                  let {
                                                    sat_sfwBu [Occ=Once] :: [GHC.Types.Char]
                                                    [LclId] =
                                                        CCCS :! [ww3_sfwBs ww7_sfwBt];
                                                  } in  GHC.Base.++ sat_sfwBu lvl3_rfwtq;
                                            };
                                  } in  GHC.CString.unpackAppendCString# lvl1_rfwto sat_sfwBv; } in
                        let {
                          sat_sfwBq [Occ=Once] :: [GHC.Types.Char]
                          [LclId] =
                              CCCS :! [ww5_sfwBo ww6_sfwBp];
                        } in  GHC.Base.++ sat_sfwBq sat_sfwBw;
                  };
        } in 
          case
              GHC.CString.unpackAppendCString# lvl_rfwtn sat_sfwBx
          of
          sat_sfwBy
          { __DEFAULT -> GHC.Err.error $dIP3_rfwtm sat_sfwBy;
          };

GHC.StaticPtr.Internal.makeStatic [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     (GHC.Types.Int, GHC.Types.Int) -> a -> GHC.StaticPtr.StaticPtr a
[GblId,
 Arity=2,
 Str=<B,1*U(1*U(U),1*U(U))><B,A>x,
 Unf=OtherCon []] =
    [] \r [w_sfwBz w1_sfwBA]
        case w_sfwBz of {
          (,) ww1_sfwBC [Occ=Once!] ww2_sfwBD [Occ=Once!] ->
              case ww1_sfwBC of {
                GHC.Types.I# ww4_sfwBF [Occ=Once] ->
                    case ww2_sfwBD of {
                      GHC.Types.I# ww6_sfwBH [Occ=Once] ->
                          $wlvl_rfwtr ww6_sfwBH ww4_sfwBF;
                    };
              };
        };

$trModule1_rfwts :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [loc_rfwqJ];

$trModule2_rfwtt :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [loc2_rfwtb];

GHC.StaticPtr.Internal.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [$trModule1_rfwts
                                     $trModule2_rfwtt];

