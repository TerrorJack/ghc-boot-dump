
==================== Raw Cmm ====================
2018-03-16 16:11:14.404569281 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:11:14.406259125 UTC

[section ""cstring" . loc_rfwqJ_bytes" {
     loc_rfwqJ_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.408785112 UTC

[section ""data" . loc1_rfwta_closure" {
     loc1_rfwta_closure:
         const loc1_rfwta_info;
         const 0;
         const 0;
         const 0;
 },
 loc1_rfwta_entry() //  [R1]
         { []
         }
     {offset
       cfwxW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfwxX; else goto cfwxY;
       cfwxX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfwxY: // global
           (_cfwxT::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfwxT::I64 == 0) goto cfwxV; else goto cfwxU;
       cfwxV: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfwxU: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfwxT::I64;
           R2 = loc_rfwqJ_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . loc1_rfwta_info" {
     loc1_rfwta_info:
         const loc1_rfwta_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.412836047 UTC

[section ""cstring" . loc2_rfwtb_bytes" {
     loc2_rfwtb_bytes:
         I8[] [71,72,67,46,83,116,97,116,105,99,80,116,114,46,73,110,116,101,114,110,97,108]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.415631696 UTC

[section ""data" . loc3_rfwtc_closure" {
     loc3_rfwtc_closure:
         const loc3_rfwtc_info;
         const 0;
         const 0;
         const 0;
 },
 loc3_rfwtc_entry() //  [R1]
         { []
         }
     {offset
       cfwyd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfwye; else goto cfwyf;
       cfwye: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfwyf: // global
           (_cfwya::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfwya::I64 == 0) goto cfwyc; else goto cfwyb;
       cfwyc: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfwyb: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfwya::I64;
           R2 = loc2_rfwtb_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . loc3_rfwtc_info" {
     loc3_rfwtc_info:
         const loc3_rfwtc_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.419527433 UTC

[section ""cstring" . loc4_rfwtd_bytes" {
     loc4_rfwtd_bytes:
         I8[] [46,47,71,72,67,47,83,116,97,116,105,99,80,116,114,47,73,110,116,101,114,110,97,108,46,104,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.422183602 UTC

[section ""data" . loc5_rfwte_closure" {
     loc5_rfwte_closure:
         const loc5_rfwte_info;
         const 0;
         const 0;
         const 0;
 },
 loc5_rfwte_entry() //  [R1]
         { []
         }
     {offset
       cfwyu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfwyv; else goto cfwyw;
       cfwyv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfwyw: // global
           (_cfwyr::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfwyr::I64 == 0) goto cfwyt; else goto cfwys;
       cfwyt: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfwys: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfwyr::I64;
           R2 = loc4_rfwtd_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . loc5_rfwte_info" {
     loc5_rfwte_info:
         const loc5_rfwte_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.426172122 UTC

[section ""data" . loc6_rfwtf_closure" {
     loc6_rfwtf_closure:
         const GHC.Types.I#_con_info;
         const 26;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.428095321 UTC

[section ""data" . loc7_rfwtg_closure" {
     loc7_rfwtg_closure:
         const GHC.Types.I#_con_info;
         const 5;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.431135387 UTC

[section ""data" . loc8_rfwth_closure" {
     loc8_rfwth_closure:
         const GHC.Types.I#_con_info;
         const 27;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.43293077 UTC

[section ""data" . loc9_rfwti_closure" {
     loc9_rfwti_closure:
         const GHC.Types.I#_con_info;
         const 59;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.434857642 UTC

[section ""cstring" . $dIP_rfwtj_bytes" {
     $dIP_rfwtj_bytes:
         I8[] [101,114,114,111,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.437693827 UTC

[section ""data" . $dIP1_rfwtk_closure" {
     $dIP1_rfwtk_closure:
         const $dIP1_rfwtk_info;
         const 0;
         const 0;
         const 0;
 },
 $dIP1_rfwtk_entry() //  [R1]
         { []
         }
     {offset
       cfwyP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfwyQ; else goto cfwyR;
       cfwyQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfwyR: // global
           (_cfwyM::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfwyM::I64 == 0) goto cfwyO; else goto cfwyN;
       cfwyO: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfwyN: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfwyM::I64;
           R2 = $dIP_rfwtj_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dIP1_rfwtk_info" {
     $dIP1_rfwtk_info:
         const $dIP1_rfwtk_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.441880408 UTC

[section ""data" . $dIP2_rfwtl_closure" {
     $dIP2_rfwtl_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const loc1_rfwta_closure;
         const loc3_rfwtc_closure;
         const loc5_rfwte_closure;
         const loc6_rfwtf_closure+1;
         const loc7_rfwtg_closure+1;
         const loc8_rfwth_closure+1;
         const loc9_rfwti_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.443830374 UTC

[section ""data" . $dIP3_rfwtm_closure" {
     $dIP3_rfwtm_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const $dIP1_rfwtk_closure;
         const $dIP2_rfwtl_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.44563661 UTC

[section ""cstring" . lvl_rfwtn_bytes" {
     lvl_rfwtn_bytes:
         I8[] [71,72,67,32,98,117,103,32,45,32,109,97,107,101,83,116,97,116,105,99,58,32,85,110,114,101,115,111,108,118,101,100,32,115,116,97,116,105,99,32,102,111,114,109,32,97,116,32,108,105,110,101,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.447462819 UTC

[section ""cstring" . lvl1_rfwto_bytes" {
     lvl1_rfwto_bytes:
         I8[] [44,32,99,111,108,117,109,110,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.449715497 UTC

[section ""cstring" . lvl2_rfwtp_bytes" {
     lvl2_rfwtp_bytes:
         I8[] [46]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.452410324 UTC

[section ""data" . lvl3_rfwtq_closure" {
     lvl3_rfwtq_closure:
         const lvl3_rfwtq_info;
         const 0;
         const 0;
         const 0;
 },
 lvl3_rfwtq_entry() //  [R1]
         { []
         }
     {offset
       cfwza: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfwzb; else goto cfwzc;
       cfwzb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfwzc: // global
           (_cfwz7::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfwz7::I64 == 0) goto cfwz9; else goto cfwz8;
       cfwz9: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfwz8: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfwz7::I64;
           R2 = lvl2_rfwtp_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl3_rfwtq_info" {
     lvl3_rfwtq_info:
         const lvl3_rfwtq_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.459986186 UTC

[section ""data" . $wlvl_rfwtr_closure" {
     $wlvl_rfwtr_closure:
         const $wlvl_rfwtr_info;
         const 0;
 },
 sat_sfwtF_entry() //  [R1]
         { []
         }
     {offset
       cfwzF: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfwzG; else goto cfwzH;
       cfwzG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfwzH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cfwzC_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 16];
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfwtF_info" {
     sat_sfwtF_info:
         const sat_sfwtF_entry;
         const 4294967296;
         const 4294967313;
         const Sfwvo_srt;
 },
 _cfwzC() //  [R1, R2]
         { []
         }
     {offset
       cfwzC: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfwzK; else goto cfwzJ;
       cfwzK: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cfwzJ: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R3 = lvl3_rfwtq_closure;
           R2 = Hp - 14;
           Sp = Sp + 8;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cfwzC_info" {
     block_cfwzC_info:
         const _cfwzC;
         const 0;
         const 4294967326;
         const Sfwvo_srt;
 },
 sat_sfwtG_entry() //  [R1]
         { []
         }
     {offset
       cfwzL: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfwzP; else goto cfwzO;
       cfwzP: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfwzO: // global
           _sfwtv::I64 = I64[R1 + 16];
           I64[Hp - 16] = sat_sfwtF_info;
           I64[Hp] = _sfwtv::I64;
           R3 = Hp - 16;
           R2 = lvl1_rfwto_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfwtG_info" {
     sat_sfwtG_info:
         const sat_sfwtG_entry;
         const 4294967296;
         const 4294967313;
         const Sfwvo_srt;
 },
 sat_sfwtH_entry() //  [R1]
         { []
         }
     {offset
       cfwzR: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfwzS; else goto cfwzT;
       cfwzS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfwzT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cfwzs_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 24];
           R2 = 0;
           I64[Sp - 24] = I64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfwtH_info" {
     sat_sfwtH_info:
         const sat_sfwtH_entry;
         const 8589934592;
         const 4294967316;
         const Sfwvo_srt;
 },
 _cfwzs() //  [R1, R2]
         { []
         }
     {offset
       cfwzs: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfwzW; else goto cfwzV;
       cfwzW: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cfwzV: // global
           I64[Hp - 40] = sat_sfwtG_info;
           I64[Hp - 24] = I64[Sp + 8];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R3 = Hp - 40;
           R2 = Hp - 14;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cfwzs_info" {
     block_cfwzs_info:
         const _cfwzs;
         const 65;
         const 4294967326;
         const Sfwvo_srt;
 },
 $wlvl_rfwtr_entry() //  [R2, R3]
         { []
         }
     {offset
       cfwzZ: // global
           _sfwtw::I64 = R3;
           _sfwtv::I64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto cfwA0; else goto cfwA1;
       cfwA1: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfwA3; else goto cfwA2;
       cfwA3: // global
           HpAlloc = 32;
           goto cfwA0;
       cfwA0: // global
           R3 = _sfwtw::I64;
           R2 = _sfwtv::I64;
           R1 = $wlvl_rfwtr_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfwA2: // global
           I64[Hp - 24] = sat_sfwtH_info;
           I64[Hp - 8] = _sfwtv::I64;
           I64[Hp] = _sfwtw::I64;
           I64[Sp - 8] = block_cfwzX_info;
           R3 = Hp - 24;
           R2 = lvl_rfwtn_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wlvl_rfwtr_info" {
     $wlvl_rfwtr_info:
         const $wlvl_rfwtr_entry;
         const 0;
         const 64424509454;
         const 8589934604;
         const Sfwvo_srt;
 },
 _cfwzX() //  [R1]
         { []
         }
     {offset
       cfwzX: // global
           R3 = R1;
           R2 = $dIP3_rfwtm_closure+2;
           Sp = Sp + 8;
           call GHC.Err.error_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfwzX_info" {
     block_cfwzX_info:
         const _cfwzX;
         const 0;
         const 12884901918;
         const Sfwvo_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.47717147 UTC

[section ""data" . GHC.StaticPtr.Internal.makeStatic_closure" {
     GHC.StaticPtr.Internal.makeStatic_closure:
         const GHC.StaticPtr.Internal.makeStatic_info;
         const 0;
 },
 GHC.StaticPtr.Internal.makeStatic_entry() //  [R2, R3]
         { []
         }
     {offset
       cfwAF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfwAO; else goto cfwAP;
       cfwAO: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.StaticPtr.Internal.makeStatic_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfwAP: // global
           I64[Sp - 8] = block_cfwAC_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufwAY; else goto cfwAD;
       ufwAY: // global
           call _cfwAC(R1) args: 0, res: 0, upd: 0;
       cfwAD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.StaticPtr.Internal.makeStatic_info" {
     GHC.StaticPtr.Internal.makeStatic_info:
         const GHC.StaticPtr.Internal.makeStatic_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const Sfwvo_srt+24;
 },
 _cfwAC() //  [R1]
         { []
         }
     {offset
       cfwAC: // global
           I64[Sp - 8] = block_cfwAI_info;
           _sfwtN::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sfwtN::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufwAX; else goto cfwAJ;
       ufwAX: // global
           call _cfwAI(R1) args: 0, res: 0, upd: 0;
       cfwAJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfwAC_info" {
     block_cfwAC_info:
         const _cfwAC;
         const 0;
         const 4294967326;
         const Sfwvo_srt+24;
 },
 _cfwAI() //  [R1]
         { []
         }
     {offset
       cfwAI: // global
           I64[Sp] = block_cfwAN_info;
           _sfwtP::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _sfwtP::I64;
           if (R1 & 7 != 0) goto ufwAZ; else goto cfwAS;
       ufwAZ: // global
           call _cfwAN(R1) args: 0, res: 0, upd: 0;
       cfwAS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfwAI_info" {
     block_cfwAI_info:
         const _cfwAI;
         const 1;
         const 4294967326;
         const Sfwvo_srt+24;
 },
 _cfwAN() //  [R1]
         { []
         }
     {offset
       cfwAN: // global
           R3 = I64[Sp + 8];
           R2 = I64[R1 + 7];
           Sp = Sp + 16;
           call $wlvl_rfwtr_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfwAN_info" {
     block_cfwAN_info:
         const _cfwAN;
         const 65;
         const 4294967326;
         const Sfwvo_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.48586185 UTC

[section ""data" . $trModule1_rfwts_closure" {
     $trModule1_rfwts_closure:
         const GHC.Types.TrNameS_con_info;
         const loc_rfwqJ_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.487621356 UTC

[section ""data" . $trModule2_rfwtt_closure" {
     $trModule2_rfwtt_closure:
         const GHC.Types.TrNameS_con_info;
         const loc2_rfwtb_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.489541959 UTC

[section ""data" . GHC.StaticPtr.Internal.$trModule_closure" {
     GHC.StaticPtr.Internal.$trModule_closure:
         const GHC.Types.Module_con_info;
         const $trModule1_rfwts_closure+1;
         const $trModule2_rfwtt_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.491495648 UTC

[section ""relreadonly" . Sfwvo_srt" {
     Sfwvo_srt:
         const lvl3_rfwtq_closure;
         const GHC.Err.error_closure;
         const $dIP3_rfwtm_closure;
         const $wlvl_rfwtr_closure;
         const GHC.StaticPtr.Internal.makeStatic_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.596991693 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:11:14.598210139 UTC

[section ""cstring" . loc_rfwqJ_bytes" {
     loc_rfwqJ_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.600883139 UTC

[section ""data" . loc1_rfwta_closure" {
     loc1_rfwta_closure:
         const loc1_rfwta_info;
         const 0;
         const 0;
         const 0;
 },
 loc1_rfwta_entry() //  [R1]
         { []
         }
     {offset
       cfwBP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfwBQ; else goto cfwBR;
       cfwBQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfwBR: // global
           (_cfwBM::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfwBM::I64 == 0) goto cfwBO; else goto cfwBN;
       cfwBO: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfwBN: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfwBM::I64;
           R2 = loc_rfwqJ_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . loc1_rfwta_info" {
     loc1_rfwta_info:
         const loc1_rfwta_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.605095398 UTC

[section ""cstring" . loc2_rfwtb_bytes" {
     loc2_rfwtb_bytes:
         I8[] [71,72,67,46,83,116,97,116,105,99,80,116,114,46,73,110,116,101,114,110,97,108]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.60770924 UTC

[section ""data" . loc3_rfwtc_closure" {
     loc3_rfwtc_closure:
         const loc3_rfwtc_info;
         const 0;
         const 0;
         const 0;
 },
 loc3_rfwtc_entry() //  [R1]
         { []
         }
     {offset
       cfwC7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfwC8; else goto cfwC9;
       cfwC8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfwC9: // global
           (_cfwC4::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfwC4::I64 == 0) goto cfwC6; else goto cfwC5;
       cfwC6: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfwC5: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfwC4::I64;
           R2 = loc2_rfwtb_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . loc3_rfwtc_info" {
     loc3_rfwtc_info:
         const loc3_rfwtc_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.6127093 UTC

[section ""cstring" . loc4_rfwtd_bytes" {
     loc4_rfwtd_bytes:
         I8[] [46,47,71,72,67,47,83,116,97,116,105,99,80,116,114,47,73,110,116,101,114,110,97,108,46,104,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.615123558 UTC

[section ""data" . loc5_rfwte_closure" {
     loc5_rfwte_closure:
         const loc5_rfwte_info;
         const 0;
         const 0;
         const 0;
 },
 loc5_rfwte_entry() //  [R1]
         { []
         }
     {offset
       cfwCp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfwCq; else goto cfwCr;
       cfwCq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfwCr: // global
           (_cfwCm::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfwCm::I64 == 0) goto cfwCo; else goto cfwCn;
       cfwCo: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfwCn: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfwCm::I64;
           R2 = loc4_rfwtd_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . loc5_rfwte_info" {
     loc5_rfwte_info:
         const loc5_rfwte_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.619281656 UTC

[section ""data" . loc6_rfwtf_closure" {
     loc6_rfwtf_closure:
         const GHC.Types.I#_con_info;
         const 26;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.621137433 UTC

[section ""data" . loc7_rfwtg_closure" {
     loc7_rfwtg_closure:
         const GHC.Types.I#_con_info;
         const 5;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.623088151 UTC

[section ""data" . loc8_rfwth_closure" {
     loc8_rfwth_closure:
         const GHC.Types.I#_con_info;
         const 27;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.625020187 UTC

[section ""data" . loc9_rfwti_closure" {
     loc9_rfwti_closure:
         const GHC.Types.I#_con_info;
         const 59;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.626927373 UTC

[section ""cstring" . $dIP_rfwtj_bytes" {
     $dIP_rfwtj_bytes:
         I8[] [101,114,114,111,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.629614211 UTC

[section ""data" . $dIP1_rfwtk_closure" {
     $dIP1_rfwtk_closure:
         const $dIP1_rfwtk_info;
         const 0;
         const 0;
         const 0;
 },
 $dIP1_rfwtk_entry() //  [R1]
         { []
         }
     {offset
       cfwCL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfwCM; else goto cfwCN;
       cfwCM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfwCN: // global
           (_cfwCI::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfwCI::I64 == 0) goto cfwCK; else goto cfwCJ;
       cfwCK: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfwCJ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfwCI::I64;
           R2 = $dIP_rfwtj_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dIP1_rfwtk_info" {
     $dIP1_rfwtk_info:
         const $dIP1_rfwtk_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.634198725 UTC

[section ""data" . $dIP2_rfwtl_closure" {
     $dIP2_rfwtl_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const loc1_rfwta_closure;
         const loc3_rfwtc_closure;
         const loc5_rfwte_closure;
         const loc6_rfwtf_closure+1;
         const loc7_rfwtg_closure+1;
         const loc8_rfwth_closure+1;
         const loc9_rfwti_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.637196753 UTC

[section ""data" . $dIP3_rfwtm_closure" {
     $dIP3_rfwtm_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const $dIP1_rfwtk_closure;
         const $dIP2_rfwtl_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.639858723 UTC

[section ""cstring" . lvl_rfwtn_bytes" {
     lvl_rfwtn_bytes:
         I8[] [71,72,67,32,98,117,103,32,45,32,109,97,107,101,83,116,97,116,105,99,58,32,85,110,114,101,115,111,108,118,101,100,32,115,116,97,116,105,99,32,102,111,114,109,32,97,116,32,108,105,110,101,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.642636229 UTC

[section ""cstring" . lvl1_rfwto_bytes" {
     lvl1_rfwto_bytes:
         I8[] [44,32,99,111,108,117,109,110,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.645266918 UTC

[section ""cstring" . lvl2_rfwtp_bytes" {
     lvl2_rfwtp_bytes:
         I8[] [46]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.649743093 UTC

[section ""data" . lvl3_rfwtq_closure" {
     lvl3_rfwtq_closure:
         const lvl3_rfwtq_info;
         const 0;
         const 0;
         const 0;
 },
 lvl3_rfwtq_entry() //  [R1]
         { []
         }
     {offset
       cfwD7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfwD8; else goto cfwD9;
       cfwD8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfwD9: // global
           (_cfwD4::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfwD4::I64 == 0) goto cfwD6; else goto cfwD5;
       cfwD6: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfwD5: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfwD4::I64;
           R2 = lvl2_rfwtp_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl3_rfwtq_info" {
     lvl3_rfwtq_info:
         const lvl3_rfwtq_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.657296675 UTC

[section ""data" . $wlvl_rfwtr_closure" {
     $wlvl_rfwtr_closure:
         const $wlvl_rfwtr_info;
         const 0;
 },
 sat_sfwBv_entry() //  [R1]
         { []
         }
     {offset
       cfwDD: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfwDE; else goto cfwDF;
       cfwDE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfwDF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cfwDA_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 16];
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfwBv_info" {
     sat_sfwBv_info:
         const sat_sfwBv_entry;
         const 4294967296;
         const 4294967313;
         const SfwE5_srt;
 },
 _cfwDA() //  [R1, R2]
         { []
         }
     {offset
       cfwDA: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfwDI; else goto cfwDH;
       cfwDI: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cfwDH: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R3 = lvl3_rfwtq_closure;
           R2 = Hp - 14;
           Sp = Sp + 8;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cfwDA_info" {
     block_cfwDA_info:
         const _cfwDA;
         const 0;
         const 4294967326;
         const SfwE5_srt;
 },
 sat_sfwBw_entry() //  [R1]
         { []
         }
     {offset
       cfwDJ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfwDN; else goto cfwDM;
       cfwDN: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfwDM: // global
           _sfwBl::I64 = I64[R1 + 16];
           I64[Hp - 16] = sat_sfwBv_info;
           I64[Hp] = _sfwBl::I64;
           R3 = Hp - 16;
           R2 = lvl1_rfwto_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfwBw_info" {
     sat_sfwBw_info:
         const sat_sfwBw_entry;
         const 4294967296;
         const 4294967313;
         const SfwE5_srt;
 },
 sat_sfwBx_entry() //  [R1]
         { []
         }
     {offset
       cfwDP: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfwDQ; else goto cfwDR;
       cfwDQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfwDR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cfwDq_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 24];
           R2 = 0;
           I64[Sp - 24] = I64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfwBx_info" {
     sat_sfwBx_info:
         const sat_sfwBx_entry;
         const 8589934592;
         const 4294967316;
         const SfwE5_srt;
 },
 _cfwDq() //  [R1, R2]
         { []
         }
     {offset
       cfwDq: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfwDU; else goto cfwDT;
       cfwDU: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cfwDT: // global
           I64[Hp - 40] = sat_sfwBw_info;
           I64[Hp - 24] = I64[Sp + 8];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R3 = Hp - 40;
           R2 = Hp - 14;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cfwDq_info" {
     block_cfwDq_info:
         const _cfwDq;
         const 65;
         const 4294967326;
         const SfwE5_srt;
 },
 $wlvl_rfwtr_entry() //  [R2, R3]
         { []
         }
     {offset
       cfwDX: // global
           _sfwBm::I64 = R3;
           _sfwBl::I64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto cfwDY; else goto cfwDZ;
       cfwDZ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfwE1; else goto cfwE0;
       cfwE1: // global
           HpAlloc = 32;
           goto cfwDY;
       cfwDY: // global
           R3 = _sfwBm::I64;
           R2 = _sfwBl::I64;
           R1 = $wlvl_rfwtr_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfwE0: // global
           I64[Hp - 24] = sat_sfwBx_info;
           I64[Hp - 8] = _sfwBl::I64;
           I64[Hp] = _sfwBm::I64;
           I64[Sp - 8] = block_cfwDV_info;
           R3 = Hp - 24;
           R2 = lvl_rfwtn_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wlvl_rfwtr_info" {
     $wlvl_rfwtr_info:
         const $wlvl_rfwtr_entry;
         const 0;
         const 64424509454;
         const 8589934604;
         const SfwE5_srt;
 },
 _cfwDV() //  [R1]
         { []
         }
     {offset
       cfwDV: // global
           R3 = R1;
           R2 = $dIP3_rfwtm_closure+2;
           Sp = Sp + 8;
           call GHC.Err.error_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfwDV_info" {
     block_cfwDV_info:
         const _cfwDV;
         const 0;
         const 12884901918;
         const SfwE5_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.672246246 UTC

[section ""data" . GHC.StaticPtr.Internal.makeStatic_closure" {
     GHC.StaticPtr.Internal.makeStatic_closure:
         const GHC.StaticPtr.Internal.makeStatic_info;
         const 0;
 },
 GHC.StaticPtr.Internal.makeStatic_entry() //  [R2, R3]
         { []
         }
     {offset
       cfwEQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfwEZ; else goto cfwF0;
       cfwEZ: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.StaticPtr.Internal.makeStatic_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfwF0: // global
           I64[Sp - 8] = block_cfwEN_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufwF9; else goto cfwEO;
       ufwF9: // global
           call _cfwEN(R1) args: 0, res: 0, upd: 0;
       cfwEO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.StaticPtr.Internal.makeStatic_info" {
     GHC.StaticPtr.Internal.makeStatic_info:
         const GHC.StaticPtr.Internal.makeStatic_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SfwE5_srt+24;
 },
 _cfwEN() //  [R1]
         { []
         }
     {offset
       cfwEN: // global
           I64[Sp - 8] = block_cfwET_info;
           _sfwBD::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sfwBD::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufwF8; else goto cfwEU;
       ufwF8: // global
           call _cfwET(R1) args: 0, res: 0, upd: 0;
       cfwEU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfwEN_info" {
     block_cfwEN_info:
         const _cfwEN;
         const 0;
         const 4294967326;
         const SfwE5_srt+24;
 },
 _cfwET() //  [R1]
         { []
         }
     {offset
       cfwET: // global
           I64[Sp] = block_cfwEY_info;
           _sfwBF::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _sfwBF::I64;
           if (R1 & 7 != 0) goto ufwFa; else goto cfwF3;
       ufwFa: // global
           call _cfwEY(R1) args: 0, res: 0, upd: 0;
       cfwF3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfwET_info" {
     block_cfwET_info:
         const _cfwET;
         const 1;
         const 4294967326;
         const SfwE5_srt+24;
 },
 _cfwEY() //  [R1]
         { []
         }
     {offset
       cfwEY: // global
           R3 = I64[Sp + 8];
           R2 = I64[R1 + 7];
           Sp = Sp + 16;
           call $wlvl_rfwtr_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfwEY_info" {
     block_cfwEY_info:
         const _cfwEY;
         const 65;
         const 4294967326;
         const SfwE5_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.680320071 UTC

[section ""data" . $trModule1_rfwts_closure" {
     $trModule1_rfwts_closure:
         const GHC.Types.TrNameS_con_info;
         const loc_rfwqJ_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.682174726 UTC

[section ""data" . $trModule2_rfwtt_closure" {
     $trModule2_rfwtt_closure:
         const GHC.Types.TrNameS_con_info;
         const loc2_rfwtb_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.684042572 UTC

[section ""data" . GHC.StaticPtr.Internal.$trModule_closure" {
     GHC.StaticPtr.Internal.$trModule_closure:
         const GHC.Types.Module_con_info;
         const $trModule1_rfwts_closure+1;
         const $trModule2_rfwtt_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.686422309 UTC

[section ""relreadonly" . SfwE5_srt" {
     SfwE5_srt:
         const lvl3_rfwtq_closure;
         const GHC.Err.error_closure;
         const $dIP3_rfwtm_closure;
         const $wlvl_rfwtr_closure;
         const GHC.StaticPtr.Internal.makeStatic_closure;
 }]

