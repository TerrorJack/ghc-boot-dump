
==================== Pre unarise: ====================
2018-03-16 16:06:33.228668471 UTC

GHC.Fingerprint.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.Fingerprint.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Fingerprint.$trModule4];

GHC.Fingerprint.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.Fingerprint"#;

GHC.Fingerprint.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Fingerprint.$trModule2];

GHC.Fingerprint.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.Fingerprint.$trModule3
                                     GHC.Fingerprint.$trModule1];

GHC.Fingerprint.$tcMD5Context2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "MD5Context"#;

GHC.Fingerprint.$tcMD5Context1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Fingerprint.$tcMD5Context2];

GHC.Fingerprint.$tcMD5Context :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [2786815183060026909##
                                    11852912954819316049##
                                    GHC.Fingerprint.$trModule
                                    GHC.Fingerprint.$tcMD5Context1
                                    0#
                                    GHC.Types.krep$*];

GHC.Fingerprint.fingerprint0 :: GHC.Fingerprint.Type.Fingerprint
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Fingerprint.Type.Fingerprint! [0## 0##];

lvl_rbDDO :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.Fingerprint.getFileHash: only read "#;

lvl1_rbDDP :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    " bytes"#;

lvl2_rbDDQ :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl1_rbDDP;

GHC.Fingerprint.$wlvl [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Types.IO ()
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [ww_sbDDS]
        let {
          sat_sbDDX [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              [ww_sbDDS] \u []
                  case GHC.Show.$wshowSignedInt 0# ww_sbDDS GHC.Types.[] of {
                    (#,#) ww5_sbDDU [Occ=Once] ww6_sbDDV [Occ=Once] ->
                        let {
                          sat_sbDDW [Occ=Once] :: [GHC.Types.Char]
                          [LclId] =
                              CCCS :! [ww5_sbDDU ww6_sbDDV];
                        } in  GHC.Base.++ sat_sbDDW lvl2_rbDDQ;
                  };
        } in 
          case
              GHC.CString.unpackAppendCString# lvl_rbDDO sat_sbDDX
          of
          sat_sbDDY
          { __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_sbDDY;
          };

GHC.Fingerprint.getFileHash2
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Fingerprint.Type.Fingerprint #)
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [h_sbDDZ eta_sbDE0]
        case newPinnedByteArray# [0# eta_sbDE0] of {
          (#,#) ipv_sbDE2 [Occ=Once] ipv1_sbDE3 [Occ=Once] ->
              case unsafeFreezeByteArray# [ipv1_sbDE3 ipv_sbDE2] of {
                (#,#) ipv2_sbDE5 [Occ=Once] ipv3_sbDE6 ->
                    case byteArrayContents# [ipv3_sbDE6] of pctxt_sbDE7 [Dmd=<S,U>] {
                      __DEFAULT ->
                          case __pkg_ccall base-4.11.0.0 [pctxt_sbDE7 ipv2_sbDE5] of {
                            Unit# ds_sbDEa [Occ=Once] ->
                                case newPinnedByteArray# [4096# ds_sbDEa] of {
                                  (#,#) ipv4_sbDEc [Occ=Once] ipv5_sbDEd [Occ=Once] ->
                                      case unsafeFreezeByteArray# [ipv5_sbDEd ipv4_sbDEc] of {
                                        (#,#) ipv6_sbDEf [Occ=Once] ipv7_sbDEg ->
                                            case byteArrayContents# [ipv7_sbDEg] of arrPtr_sbDEh {
                                              __DEFAULT ->
                                                  let {
                                                    lvl3_sbDEi [Occ=OnceL, Dmd=<L,U(U)>]
                                                      :: GHC.Ptr.Ptr GHC.Word.Word8
                                                    [LclId, Unf=OtherCon []] =
                                                        CCCS GHC.Ptr.Ptr! [arrPtr_sbDEh];
                                                  } in 
                                                    let-no-escape {
                                                      $w$j_sbDEj [InlPrag=NOUSERINLINE[0],
                                                                  Occ=OnceL!T[1],
                                                                  Dmd=<L,C(U(U,U))>]
                                                        :: GHC.Prim.State# GHC.Prim.RealWorld
                                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                 GHC.Fingerprint.Type.Fingerprint #)
                                                      [LclId[JoinId(1)],
                                                       Arity=1,
                                                       Str=<S,U>,
                                                       Unf=OtherCon []] =
                                                          sat-only [ipv3_sbDE6
                                                                    pctxt_sbDE7
                                                                    ipv7_sbDEg] \r [w_sbDEk]
                                                              case
                                                                  touch# [ipv7_sbDEg w_sbDEk]
                                                              of
                                                              s4_sbDEl
                                                              { __DEFAULT ->
                                                                    case
                                                                        newPinnedByteArray# [16#
                                                                                             s4_sbDEl]
                                                                    of
                                                                    { (#,#) ipv8_sbDEn [Occ=Once]
                                                                            ipv9_sbDEo [Occ=Once] ->
                                                                          case
                                                                              unsafeFreezeByteArray# [ipv9_sbDEo
                                                                                                      ipv8_sbDEn]
                                                                          of
                                                                          { (#,#) ipv10_sbDEq [Occ=Once]
                                                                                  ipv11_sbDEr ->
                                                                                case
                                                                                    byteArrayContents# [ipv11_sbDEr]
                                                                                of
                                                                                pdigest_sbDEs [Dmd=<S,U>]
                                                                                { __DEFAULT ->
                                                                                      case
                                                                                          __pkg_ccall base-4.11.0.0 [pdigest_sbDEs
                                                                                                                     pctxt_sbDE7
                                                                                                                     ipv10_sbDEq]
                                                                                      of
                                                                                      { Unit# ds8_sbDEv [Occ=Once] ->
                                                                                            let {
                                                                                              sat_sbDEw [Occ=Once]
                                                                                                :: GHC.Ptr.Ptr
                                                                                                     GHC.Word.Word8
                                                                                              [LclId] =
                                                                                                  CCCS GHC.Ptr.Ptr! [pdigest_sbDEs];
                                                                                            } in 
                                                                                              case
                                                                                                  Foreign.Storable.$wpeekW64
                                                                                                      sat_sbDEw
                                                                                                      8#
                                                                                                      0##
                                                                                                      ds8_sbDEv
                                                                                              of
                                                                                              { (#,#) ipv12_sbDEy [Occ=Once]
                                                                                                      ipv13_sbDEz [Occ=Once] ->
                                                                                                    case
                                                                                                        plusAddr# [pdigest_sbDEs
                                                                                                                   8#]
                                                                                                    of
                                                                                                    sat_sbDEA
                                                                                                    { __DEFAULT ->
                                                                                                          let {
                                                                                                            sat_sbDEB [Occ=Once]
                                                                                                              :: GHC.Ptr.Ptr
                                                                                                                   GHC.Word.Word8
                                                                                                            [LclId] =
                                                                                                                CCCS GHC.Ptr.Ptr! [sat_sbDEA];
                                                                                                          } in 
                                                                                                            case
                                                                                                                Foreign.Storable.$wpeekW64
                                                                                                                    sat_sbDEB
                                                                                                                    8#
                                                                                                                    0##
                                                                                                                    ipv12_sbDEy
                                                                                                            of
                                                                                                            { (#,#) ipv14_sbDED [Occ=Once]
                                                                                                                    ipv15_sbDEE [Occ=Once] ->
                                                                                                                  case
                                                                                                                      touch# [ipv11_sbDEr
                                                                                                                              ipv14_sbDED]
                                                                                                                  of
                                                                                                                  s1_sbDEF
                                                                                                                  { __DEFAULT ->
                                                                                                                        case
                                                                                                                            touch# [ipv3_sbDE6
                                                                                                                                    s1_sbDEF]
                                                                                                                        of
                                                                                                                        s2_sbDEG
                                                                                                                        { __DEFAULT ->
                                                                                                                              let {
                                                                                                                                sat_sbDEH [Occ=Once]
                                                                                                                                  :: GHC.Fingerprint.Type.Fingerprint
                                                                                                                                [LclId] =
                                                                                                                                    [ipv13_sbDEz
                                                                                                                                     ipv15_sbDEE] \u []
                                                                                                                                        GHC.Fingerprint.Type.$WFingerprint
                                                                                                                                            ipv13_sbDEz
                                                                                                                                            ipv15_sbDEE;
                                                                                                                              } in 
                                                                                                                                (#,#) [s2_sbDEG
                                                                                                                                       sat_sbDEH];
                                                                                                                        };
                                                                                                                  };
                                                                                                            };
                                                                                                    };
                                                                                              };
                                                                                      };
                                                                                };
                                                                          };
                                                                    };
                                                              };
                                                    } in 
                                                      let-no-escape {
                                                        loop_sbDEI [Occ=LoopBreakerT[1]]
                                                          :: GHC.Prim.State# GHC.Prim.RealWorld
                                                             -> (# GHC.Prim.State#
                                                                     GHC.Prim.RealWorld,
                                                                   GHC.Fingerprint.Type.Fingerprint #)
                                                        [LclId[JoinId(1)],
                                                         Arity=1,
                                                         Str=<S,U>,
                                                         Unf=OtherCon []] =
                                                            sat-only [h_sbDDZ
                                                                      pctxt_sbDE7
                                                                      arrPtr_sbDEh
                                                                      lvl3_sbDEi
                                                                      $w$j_sbDEj
                                                                      loop_sbDEI] \r [s_sbDEJ]
                                                                case
                                                                    GHC.IO.Handle.Text.$whGetBuf
                                                                        h_sbDDZ
                                                                        lvl3_sbDEi
                                                                        4096#
                                                                        s_sbDEJ
                                                                of
                                                                { (#,#) ipv8_sbDEL [Occ=Once]
                                                                        ipv9_sbDEM [Occ=Once!] ->
                                                                      case
                                                                          GHC.IO.Handle.Internals.wantReadableHandle_1
                                                                              GHC.IO.Handle.hIsEOF3
                                                                              h_sbDDZ
                                                                              GHC.IO.Handle.hIsEOF2
                                                                              ipv8_sbDEL
                                                                      of
                                                                      { (#,#) ipv10_sbDEO [Occ=Once]
                                                                              ipv11_sbDEP ->
                                                                            case ipv9_sbDEM of {
                                                                              GHC.Types.I# x_sbDER ->
                                                                                  let-no-escape {
                                                                                    $j_sbDES [Occ=Once*T[0],
                                                                                              Dmd=<S,1*U(U,U)>]
                                                                                      :: (# GHC.Prim.State#
                                                                                              GHC.Prim.RealWorld,
                                                                                            GHC.Fingerprint.Type.Fingerprint #)
                                                                                    [LclId[JoinId(0)],
                                                                                     Unf=OtherCon []] =
                                                                                        [pctxt_sbDE7
                                                                                         arrPtr_sbDEh
                                                                                         $w$j_sbDEj
                                                                                         loop_sbDEI
                                                                                         ipv10_sbDEO
                                                                                         ipv11_sbDEP
                                                                                         x_sbDER] \r []
                                                                                            case
                                                                                                narrow32Int# [x_sbDER]
                                                                                            of
                                                                                            sat_sbDEU
                                                                                            { __DEFAULT ->
                                                                                                  case
                                                                                                      __pkg_ccall base-4.11.0.0 [pctxt_sbDE7
                                                                                                                                 arrPtr_sbDEh
                                                                                                                                 sat_sbDEU
                                                                                                                                 ipv10_sbDEO]
                                                                                                  of
                                                                                                  { Unit# ds8_sbDEW [Occ=Once*] ->
                                                                                                        case
                                                                                                            ipv11_sbDEP
                                                                                                        of
                                                                                                        { GHC.Types.False ->
                                                                                                              loop_sbDEI
                                                                                                                  ds8_sbDEW;
                                                                                                          GHC.Types.True ->
                                                                                                              $w$j_sbDEj
                                                                                                                  ds8_sbDEW;
                                                                                                        };
                                                                                                  };
                                                                                            };
                                                                                  } in 
                                                                                    case
                                                                                        x_sbDER
                                                                                    of
                                                                                    wild2_sbDEY
                                                                                    { __DEFAULT ->
                                                                                          case
                                                                                              ipv11_sbDEP
                                                                                          of
                                                                                          { GHC.Types.False ->
                                                                                                GHC.Fingerprint.$wlvl
                                                                                                    wild2_sbDEY;
                                                                                            GHC.Types.True ->
                                                                                                $j_sbDES;
                                                                                          };
                                                                                      4096# ->
                                                                                          $j_sbDES;
                                                                                    };
                                                                            };
                                                                      };
                                                                };
                                                      } in  loop_sbDEI ipv6_sbDEf;
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.Fingerprint.getFileHash1
  :: GHC.IO.FilePath
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Fingerprint.Type.Fingerprint #)
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [path_sbDF1 eta_sbDF2]
        System.IO.withBinaryFile1
            path_sbDF1
            GHC.IO.IOMode.ReadMode
            GHC.Fingerprint.getFileHash2
            eta_sbDF2;

GHC.Fingerprint.getFileHash
  :: GHC.IO.FilePath -> GHC.Types.IO GHC.Fingerprint.Type.Fingerprint
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Fingerprint.getFileHash1 eta_B2 eta_B1;

GHC.Fingerprint.$wfingerprintData [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Fingerprint.Type.Fingerprint #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S,U><S,U><S,U>,
 Unf=OtherCon []] =
    [] \r [ww_sbDF3 ww1_sbDF4 w_sbDF5]
        case newPinnedByteArray# [0# w_sbDF5] of {
          (#,#) ipv_sbDF7 [Occ=Once] ipv1_sbDF8 [Occ=Once] ->
              case unsafeFreezeByteArray# [ipv1_sbDF8 ipv_sbDF7] of {
                (#,#) ipv2_sbDFa [Occ=Once] ipv3_sbDFb ->
                    case byteArrayContents# [ipv3_sbDFb] of pctxt_sbDFc [Dmd=<S,U>] {
                      __DEFAULT ->
                          case __pkg_ccall base-4.11.0.0 [pctxt_sbDFc ipv2_sbDFa] of {
                            Unit# ds_sbDFf [Occ=Once] ->
                                case narrow32Int# [ww1_sbDF4] of sat_sbDFh {
                                  __DEFAULT ->
                                      case
                                          __pkg_ccall base-4.11.0.0 [pctxt_sbDFc
                                                                     ww_sbDF3
                                                                     sat_sbDFh
                                                                     ds_sbDFf]
                                      of
                                      { Unit# ds4_sbDFj [Occ=Once] ->
                                            case newPinnedByteArray# [16# ds4_sbDFj] of {
                                              (#,#) ipv4_sbDFl [Occ=Once] ipv5_sbDFm [Occ=Once] ->
                                                  case
                                                      unsafeFreezeByteArray# [ipv5_sbDFm ipv4_sbDFl]
                                                  of
                                                  { (#,#) ipv6_sbDFo [Occ=Once] ipv7_sbDFp ->
                                                        case
                                                            byteArrayContents# [ipv7_sbDFp]
                                                        of
                                                        pdigest_sbDFq [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  __pkg_ccall base-4.11.0.0 [pdigest_sbDFq
                                                                                             pctxt_sbDFc
                                                                                             ipv6_sbDFo]
                                                              of
                                                              { Unit# ds7_sbDFt [Occ=Once] ->
                                                                    let {
                                                                      sat_sbDFu [Occ=Once]
                                                                        :: GHC.Ptr.Ptr
                                                                             GHC.Word.Word8
                                                                      [LclId] =
                                                                          CCCS GHC.Ptr.Ptr! [pdigest_sbDFq];
                                                                    } in 
                                                                      case
                                                                          Foreign.Storable.$wpeekW64
                                                                              sat_sbDFu
                                                                              8#
                                                                              0##
                                                                              ds7_sbDFt
                                                                      of
                                                                      { (#,#) ipv8_sbDFw [Occ=Once]
                                                                              ipv9_sbDFx [Occ=Once] ->
                                                                            case
                                                                                plusAddr# [pdigest_sbDFq
                                                                                           8#]
                                                                            of
                                                                            sat_sbDFy
                                                                            { __DEFAULT ->
                                                                                  let {
                                                                                    sat_sbDFz [Occ=Once]
                                                                                      :: GHC.Ptr.Ptr
                                                                                           GHC.Word.Word8
                                                                                    [LclId] =
                                                                                        CCCS GHC.Ptr.Ptr! [sat_sbDFy];
                                                                                  } in 
                                                                                    case
                                                                                        Foreign.Storable.$wpeekW64
                                                                                            sat_sbDFz
                                                                                            8#
                                                                                            0##
                                                                                            ipv8_sbDFw
                                                                                    of
                                                                                    { (#,#) ipv10_sbDFB [Occ=Once]
                                                                                            ipv11_sbDFC [Occ=Once] ->
                                                                                          case
                                                                                              touch# [ipv7_sbDFp
                                                                                                      ipv10_sbDFB]
                                                                                          of
                                                                                          s4_sbDFD
                                                                                          { __DEFAULT ->
                                                                                                case
                                                                                                    touch# [ipv3_sbDFb
                                                                                                            s4_sbDFD]
                                                                                                of
                                                                                                s1_sbDFE
                                                                                                { __DEFAULT ->
                                                                                                      let {
                                                                                                        sat_sbDFF [Occ=Once]
                                                                                                          :: GHC.Fingerprint.Type.Fingerprint
                                                                                                        [LclId] =
                                                                                                            [ipv9_sbDFx
                                                                                                             ipv11_sbDFC] \u []
                                                                                                                GHC.Fingerprint.Type.$WFingerprint
                                                                                                                    ipv9_sbDFx
                                                                                                                    ipv11_sbDFC;
                                                                                                      } in 
                                                                                                        (#,#) [s1_sbDFE
                                                                                                               sat_sbDFF];
                                                                                                };
                                                                                          };
                                                                                    };
                                                                            };
                                                                      };
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.Fingerprint.fingerprintData1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Ptr.Ptr GHC.Word.Word8
     -> GHC.Types.Int
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Fingerprint.Type.Fingerprint #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_sbDFG w1_sbDFH w2_sbDFI]
        case w_sbDFG of {
          GHC.Ptr.Ptr ww1_sbDFK [Occ=Once] ->
              case w1_sbDFH of {
                GHC.Types.I# ww3_sbDFM [Occ=Once] ->
                    GHC.Fingerprint.$wfingerprintData ww1_sbDFK ww3_sbDFM w2_sbDFI;
              };
        };

GHC.Fingerprint.fingerprintData
  :: GHC.Ptr.Ptr GHC.Word.Word8
     -> GHC.Types.Int -> GHC.Types.IO GHC.Fingerprint.Type.Fingerprint
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.Fingerprint.fingerprintData1 eta_B3 eta_B2 eta_B1;

GHC.Fingerprint.fingerprintString_go [Occ=LoopBreaker]
  :: [GHC.Types.Char] -> [GHC.Word.Word8]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_sbDFN]
        case ds_sbDFN of {
          [] -> [] [];
          : y_sbDFP [Occ=Once!] ys_sbDFQ [Occ=Once] ->
              let {
                w32_sbDFR [Dmd=<L,U(U)>] :: GHC.Word.Word32
                [LclId] =
                    [y_sbDFP] \u []
                        case y_sbDFP of {
                          GHC.Types.C# c#_sbDFT [Occ=Once] ->
                              case ord# [c#_sbDFT] of sat_sbDFU {
                                __DEFAULT ->
                                    case int2Word# [sat_sbDFU] of sat_sbDFV {
                                      __DEFAULT ->
                                          case narrow32Word# [sat_sbDFV] of sat_sbDFW {
                                            __DEFAULT -> GHC.Word.W32# [sat_sbDFW];
                                          };
                                    };
                              };
                        }; } in
              let {
                sat_sbDGg [Occ=Once] :: [GHC.Word.Word8]
                [LclId] =
                    [ys_sbDFQ] \u []
                        GHC.Fingerprint.fingerprintString_go ys_sbDFQ; } in
              let {
                sat_sbDGf [Occ=Once] :: GHC.Word.Word8
                [LclId] =
                    [w32_sbDFR] \u []
                        case w32_sbDFR of {
                          GHC.Word.W32# x#_sbDGd [Occ=Once] ->
                              case narrow8Word# [x#_sbDGd] of sat_sbDGe {
                                __DEFAULT -> GHC.Word.W8# [sat_sbDGe];
                              };
                        }; } in
              let {
                sat_sbDGh [Occ=Once] :: [GHC.Word.Word8]
                [LclId] =
                    CCCS :! [sat_sbDGf sat_sbDGg]; } in
              let {
                sat_sbDGb [Occ=Once] :: GHC.Word.Word8
                [LclId] =
                    [w32_sbDFR] \u []
                        case w32_sbDFR of {
                          GHC.Word.W32# x#_sbDG8 [Occ=Once] ->
                              case uncheckedShiftRL# [x#_sbDG8 8#] of sat_sbDG9 {
                                __DEFAULT ->
                                    case narrow8Word# [sat_sbDG9] of sat_sbDGa {
                                      __DEFAULT -> GHC.Word.W8# [sat_sbDGa];
                                    };
                              };
                        }; } in
              let {
                sat_sbDGi [Occ=Once] :: [GHC.Word.Word8]
                [LclId] =
                    CCCS :! [sat_sbDGb sat_sbDGh]; } in
              let {
                sat_sbDG6 [Occ=Once] :: GHC.Word.Word8
                [LclId] =
                    [w32_sbDFR] \u []
                        case w32_sbDFR of {
                          GHC.Word.W32# x#_sbDG3 [Occ=Once] ->
                              case uncheckedShiftRL# [x#_sbDG3 16#] of sat_sbDG4 {
                                __DEFAULT ->
                                    case narrow8Word# [sat_sbDG4] of sat_sbDG5 {
                                      __DEFAULT -> GHC.Word.W8# [sat_sbDG5];
                                    };
                              };
                        }; } in
              let {
                sat_sbDGj [Occ=Once] :: [GHC.Word.Word8]
                [LclId] =
                    CCCS :! [sat_sbDG6 sat_sbDGi]; } in
              let {
                sat_sbDG1 [Occ=Once] :: GHC.Word.Word8
                [LclId] =
                    [w32_sbDFR] \u []
                        case w32_sbDFR of {
                          GHC.Word.W32# x#_sbDFY [Occ=Once] ->
                              case uncheckedShiftRL# [x#_sbDFY 24#] of sat_sbDFZ {
                                __DEFAULT ->
                                    case narrow8Word# [sat_sbDFZ] of sat_sbDG0 {
                                      __DEFAULT -> GHC.Word.W8# [sat_sbDG0];
                                    };
                              };
                        };
              } in  : [sat_sbDG1 sat_sbDGj];
        };

GHC.Fingerprint.fingerprintString
  :: GHC.Base.String -> GHC.Fingerprint.Type.Fingerprint
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [str_sbDGk]
        case
            GHC.Fingerprint.fingerprintString_go str_sbDGk
        of
        vals_sbDGl [Dmd=<S,U>]
        { __DEFAULT ->
              case
                  case GHC.List.$wlenAcc vals_sbDGl 0# of ww2_sbDGm {
                    __DEFAULT ->
                        case
                            newAlignedPinnedByteArray# [ww2_sbDGm 1# GHC.Prim.realWorld#]
                        of
                        { (#,#) ipv_sbDGo [Occ=Once] ipv1_sbDGp [Occ=Once] ->
                              case unsafeFreezeByteArray# [ipv1_sbDGp ipv_sbDGo] of {
                                (#,#) ipv2_sbDGr [Occ=Once] ipv3_sbDGs ->
                                    case byteArrayContents# [ipv3_sbDGs] of ptr_sbDGt [Dmd=<S,U>] {
                                      __DEFAULT ->
                                          let-no-escape {
                                            exit_sbDGu [Occ=OnceL!T[1], Dmd=<C(S),C(U)>]
                                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                       GHC.Fingerprint.Type.Fingerprint #)
                                            [LclId[JoinId(1)],
                                             Arity=1,
                                             Str=<S,U>,
                                             Unf=OtherCon []] =
                                                sat-only [ww2_sbDGm
                                                          ipv3_sbDGs
                                                          ptr_sbDGt] \r [eta2_sbDGv]
                                                    case
                                                        GHC.Fingerprint.$wfingerprintData
                                                            ptr_sbDGt ww2_sbDGm eta2_sbDGv
                                                    of
                                                    { (#,#) ipv4_sbDGx [Occ=Once]
                                                            ipv5_sbDGy [Occ=Once] ->
                                                          case
                                                              touch# [ipv3_sbDGs ipv4_sbDGx]
                                                          of
                                                          s4_sbDGz
                                                          { __DEFAULT ->
                                                                (#,#) [s4_sbDGz ipv5_sbDGy];
                                                          };
                                                    };
                                          } in 
                                            let-no-escape {
                                              go_sbDGA [Occ=LoopBreakerT[3]]
                                                :: [GHC.Word.Word8]
                                                   -> GHC.Prim.Int#
                                                   -> GHC.Prim.State# GHC.Prim.RealWorld
                                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                         GHC.Fingerprint.Type.Fingerprint #)
                                              [LclId[JoinId(3)],
                                               Arity=3,
                                               Str=<S,1*U><L,U><S,U>,
                                               Unf=OtherCon []] =
                                                  sat-only [ptr_sbDGt
                                                            exit_sbDGu
                                                            go_sbDGA] \r [ds_sbDGB
                                                                          ds1_sbDGC
                                                                          eta2_sbDGD]
                                                      case ds_sbDGB of {
                                                        [] -> exit_sbDGu eta2_sbDGD;
                                                        : val_sbDGF [Occ=Once!]
                                                          vals1_sbDGG [Occ=Once] ->
                                                            case val_sbDGF of {
                                                              GHC.Word.W8# x_sbDGI [Occ=Once] ->
                                                                  case
                                                                      writeWord8OffAddr# [ptr_sbDGt
                                                                                          ds1_sbDGC
                                                                                          x_sbDGI
                                                                                          eta2_sbDGD]
                                                                  of
                                                                  s2_sbDGJ
                                                                  { __DEFAULT ->
                                                                        case
                                                                            +# [ds1_sbDGC 1#]
                                                                        of
                                                                        sat_sbDGK
                                                                        { __DEFAULT ->
                                                                              go_sbDGA
                                                                                  vals1_sbDGG
                                                                                  sat_sbDGK
                                                                                  s2_sbDGJ;
                                                                        };
                                                                  };
                                                            };
                                                      };
                                            } in  go_sbDGA vals_sbDGl 0# ipv2_sbDGr;
                                    };
                              };
                        };
                  }
              of
              { (#,#) _ [Occ=Dead] ipv1_sbDGN [Occ=Once] -> ipv1_sbDGN;
              };
        };

GHC.Fingerprint.fingerprintFingerprints
  :: [GHC.Fingerprint.Type.Fingerprint]
     -> GHC.Fingerprint.Type.Fingerprint
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [fs_sbDGO]
        case
            case GHC.List.$wlenAcc fs_sbDGO 0# of ww2_sbDGP {
              __DEFAULT ->
                  case *# [ww2_sbDGP 16#] of sat_sbDGQ {
                    __DEFAULT ->
                        case
                            newAlignedPinnedByteArray# [sat_sbDGQ 8# GHC.Prim.realWorld#]
                        of
                        { (#,#) ipv_sbDGS [Occ=Once] ipv1_sbDGT [Occ=Once] ->
                              case unsafeFreezeByteArray# [ipv1_sbDGT ipv_sbDGS] of {
                                (#,#) ipv2_sbDGV [Occ=Once] ipv3_sbDGW ->
                                    case byteArrayContents# [ipv3_sbDGW] of ptr_sbDGX [Dmd=<S,U>] {
                                      __DEFAULT ->
                                          let-no-escape {
                                            exit_sbDGY [Occ=OnceL!T[1], Dmd=<L,C(U)>]
                                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                       GHC.Fingerprint.Type.Fingerprint #)
                                            [LclId[JoinId(1)],
                                             Arity=1,
                                             Str=<S,U>,
                                             Unf=OtherCon []] =
                                                sat-only [ww2_sbDGP
                                                          ipv3_sbDGW
                                                          ptr_sbDGX] \r [eta2_sbDGZ]
                                                    case *# [ww2_sbDGP 16#] of sat_sbDH0 {
                                                      __DEFAULT ->
                                                          case
                                                              GHC.Fingerprint.$wfingerprintData
                                                                  ptr_sbDGX sat_sbDH0 eta2_sbDGZ
                                                          of
                                                          { (#,#) ipv4_sbDH2 [Occ=Once]
                                                                  ipv5_sbDH3 [Occ=Once] ->
                                                                case
                                                                    touch# [ipv3_sbDGW ipv4_sbDH2]
                                                                of
                                                                s4_sbDH4
                                                                { __DEFAULT ->
                                                                      (#,#) [s4_sbDH4 ipv5_sbDH3];
                                                                };
                                                          };
                                                    };
                                          } in 
                                            let-no-escape {
                                              go_sbDH5 [Occ=LoopBreakerT[3]]
                                                :: [GHC.Fingerprint.Type.Fingerprint]
                                                   -> GHC.Prim.Int#
                                                   -> GHC.Prim.State# GHC.Prim.RealWorld
                                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                         GHC.Fingerprint.Type.Fingerprint #)
                                              [LclId[JoinId(3)],
                                               Arity=3,
                                               Str=<S,1*U><L,U><S,U>,
                                               Unf=OtherCon []] =
                                                  sat-only [ptr_sbDGX
                                                            exit_sbDGY
                                                            go_sbDH5] \r [ds_sbDH6
                                                                          ds1_sbDH7
                                                                          eta2_sbDH8]
                                                      case ds_sbDH6 of {
                                                        [] -> exit_sbDGY eta2_sbDH8;
                                                        : val_sbDHa [Occ=Once!]
                                                          vals_sbDHb [Occ=Once] ->
                                                            case val_sbDHa of {
                                                              GHC.Fingerprint.Type.Fingerprint ww1_sbDHd [Occ=Once]
                                                                                               ww4_sbDHe [Occ=Once] ->
                                                                  case
                                                                      *# [ds1_sbDH7 16#]
                                                                  of
                                                                  sat_sbDHg
                                                                  { __DEFAULT ->
                                                                        case
                                                                            plusAddr# [ptr_sbDGX
                                                                                       sat_sbDHg]
                                                                        of
                                                                        w_sbDHf
                                                                        { __DEFAULT ->
                                                                              let {
                                                                                sat_sbDHi [Occ=Once]
                                                                                  :: GHC.Word.Word64
                                                                                [LclId] =
                                                                                    CCCS GHC.Word.W64#! [ww1_sbDHd]; } in
                                                                              let {
                                                                                sat_sbDHh [Occ=Once]
                                                                                  :: GHC.Ptr.Ptr
                                                                                       GHC.Word.Word8
                                                                                [LclId] =
                                                                                    CCCS GHC.Ptr.Ptr! [w_sbDHf];
                                                                              } in 
                                                                                case
                                                                                    Foreign.Storable.$wpokeW64
                                                                                        sat_sbDHh
                                                                                        8#
                                                                                        sat_sbDHi
                                                                                        eta2_sbDH8
                                                                                of
                                                                                { (#,#) ipv4_sbDHk [Occ=Once]
                                                                                        _ [Occ=Dead] ->
                                                                                      let {
                                                                                        sat_sbDHo [Occ=Once]
                                                                                          :: GHC.Word.Word64
                                                                                        [LclId] =
                                                                                            CCCS GHC.Word.W64#! [ww4_sbDHe];
                                                                                      } in 
                                                                                        case
                                                                                            plusAddr# [w_sbDHf
                                                                                                       8#]
                                                                                        of
                                                                                        sat_sbDHm
                                                                                        { __DEFAULT ->
                                                                                              let {
                                                                                                sat_sbDHn [Occ=Once]
                                                                                                  :: GHC.Ptr.Ptr
                                                                                                       GHC.Word.Word8
                                                                                                [LclId] =
                                                                                                    CCCS GHC.Ptr.Ptr! [sat_sbDHm];
                                                                                              } in 
                                                                                                case
                                                                                                    Foreign.Storable.$wpokeW64
                                                                                                        sat_sbDHn
                                                                                                        8#
                                                                                                        sat_sbDHo
                                                                                                        ipv4_sbDHk
                                                                                                of
                                                                                                { (#,#) ipv6_sbDHq [Occ=Once]
                                                                                                        _ [Occ=Dead] ->
                                                                                                      case
                                                                                                          +# [ds1_sbDH7
                                                                                                              1#]
                                                                                                      of
                                                                                                      sat_sbDHs
                                                                                                      { __DEFAULT ->
                                                                                                            go_sbDH5
                                                                                                                vals_sbDHb
                                                                                                                sat_sbDHs
                                                                                                                ipv6_sbDHq;
                                                                                                      };
                                                                                                };
                                                                                        };
                                                                                };
                                                                        };
                                                                  };
                                                            };
                                                      };
                                            } in  go_sbDH5 fs_sbDGO 0# ipv2_sbDGV;
                                    };
                              };
                        };
                  };
            }
        of
        { (#,#) _ [Occ=Dead] ipv1_sbDHv [Occ=Once] -> ipv1_sbDHv;
        };


==================== STG syntax: ====================
2018-03-16 16:06:33.241290438 UTC

GHC.Fingerprint.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.Fingerprint.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Fingerprint.$trModule4];

GHC.Fingerprint.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.Fingerprint"#;

GHC.Fingerprint.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Fingerprint.$trModule2];

GHC.Fingerprint.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.Fingerprint.$trModule3
                                     GHC.Fingerprint.$trModule1];

GHC.Fingerprint.$tcMD5Context2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "MD5Context"#;

GHC.Fingerprint.$tcMD5Context1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Fingerprint.$tcMD5Context2];

GHC.Fingerprint.$tcMD5Context :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [2786815183060026909##
                                    11852912954819316049##
                                    GHC.Fingerprint.$trModule
                                    GHC.Fingerprint.$tcMD5Context1
                                    0#
                                    GHC.Types.krep$*];

GHC.Fingerprint.fingerprint0 :: GHC.Fingerprint.Type.Fingerprint
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Fingerprint.Type.Fingerprint! [0## 0##];

lvl_rbDDO :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.Fingerprint.getFileHash: only read "#;

lvl1_rbDDP :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    " bytes"#;

lvl2_rbDDQ :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl1_rbDDP;

GHC.Fingerprint.$wlvl [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Types.IO ()
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [ww_sbDDS]
        let {
          sat_sbDDX [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              [ww_sbDDS] \u []
                  case GHC.Show.$wshowSignedInt 0# ww_sbDDS GHC.Types.[] of {
                    (#,#) ww5_sbDDU [Occ=Once] ww6_sbDDV [Occ=Once] ->
                        let {
                          sat_sbDDW [Occ=Once] :: [GHC.Types.Char]
                          [LclId] =
                              CCCS :! [ww5_sbDDU ww6_sbDDV];
                        } in  GHC.Base.++ sat_sbDDW lvl2_rbDDQ;
                  };
        } in 
          case
              GHC.CString.unpackAppendCString# lvl_rbDDO sat_sbDDX
          of
          sat_sbDDY
          { __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_sbDDY;
          };

GHC.Fingerprint.getFileHash2
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Fingerprint.Type.Fingerprint #)
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [h_sbDDZ void_0E]
        case newPinnedByteArray# [0# GHC.Prim.void#] of {
          Unit# ipv1_sbDE3 [Occ=Once] ->
              case unsafeFreezeByteArray# [ipv1_sbDE3 GHC.Prim.void#] of {
                Unit# ipv3_sbDE6 ->
                    case byteArrayContents# [ipv3_sbDE6] of pctxt_sbDE7 [Dmd=<S,U>] {
                      __DEFAULT ->
                          case __pkg_ccall base-4.11.0.0 [pctxt_sbDE7 GHC.Prim.void#] of {
                            (##) ->
                                case newPinnedByteArray# [4096# GHC.Prim.void#] of {
                                  Unit# ipv5_sbDEd [Occ=Once] ->
                                      case unsafeFreezeByteArray# [ipv5_sbDEd GHC.Prim.void#] of {
                                        Unit# ipv7_sbDEg ->
                                            case byteArrayContents# [ipv7_sbDEg] of arrPtr_sbDEh {
                                              __DEFAULT ->
                                                  let {
                                                    lvl3_sbDEi [Occ=OnceL, Dmd=<L,U(U)>]
                                                      :: GHC.Ptr.Ptr GHC.Word.Word8
                                                    [LclId, Unf=OtherCon []] =
                                                        CCCS GHC.Ptr.Ptr! [arrPtr_sbDEh];
                                                  } in 
                                                    let-no-escape {
                                                      $w$j_sbDEj [InlPrag=NOUSERINLINE[0],
                                                                  Occ=OnceL!T[1],
                                                                  Dmd=<L,C(U(U,U))>]
                                                        :: GHC.Prim.State# GHC.Prim.RealWorld
                                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                 GHC.Fingerprint.Type.Fingerprint #)
                                                      [LclId[JoinId(1)],
                                                       Arity=1,
                                                       Str=<S,U>,
                                                       Unf=OtherCon []] =
                                                          sat-only [ipv3_sbDE6
                                                                    pctxt_sbDE7
                                                                    ipv7_sbDEg] \r [void_0E]
                                                              case
                                                                  touch# [ipv7_sbDEg GHC.Prim.void#]
                                                              of
                                                              s4_sbDEl
                                                              { (##) ->
                                                                    case
                                                                        newPinnedByteArray# [16#
                                                                                             GHC.Prim.void#]
                                                                    of
                                                                    { Unit# ipv9_sbDEo [Occ=Once] ->
                                                                          case
                                                                              unsafeFreezeByteArray# [ipv9_sbDEo
                                                                                                      GHC.Prim.void#]
                                                                          of
                                                                          { Unit# ipv11_sbDEr ->
                                                                                case
                                                                                    byteArrayContents# [ipv11_sbDEr]
                                                                                of
                                                                                pdigest_sbDEs [Dmd=<S,U>]
                                                                                { __DEFAULT ->
                                                                                      case
                                                                                          __pkg_ccall base-4.11.0.0 [pdigest_sbDEs
                                                                                                                     pctxt_sbDE7
                                                                                                                     GHC.Prim.void#]
                                                                                      of
                                                                                      { (##) ->
                                                                                            let {
                                                                                              sat_sbDEw [Occ=Once]
                                                                                                :: GHC.Ptr.Ptr
                                                                                                     GHC.Word.Word8
                                                                                              [LclId] =
                                                                                                  CCCS GHC.Ptr.Ptr! [pdigest_sbDEs];
                                                                                            } in 
                                                                                              case
                                                                                                  Foreign.Storable.$wpeekW64
                                                                                                      sat_sbDEw
                                                                                                      8#
                                                                                                      0##
                                                                                                      GHC.Prim.void#
                                                                                              of
                                                                                              { Unit# ipv13_sbDEz [Occ=Once] ->
                                                                                                    case
                                                                                                        plusAddr# [pdigest_sbDEs
                                                                                                                   8#]
                                                                                                    of
                                                                                                    sat_sbDEA
                                                                                                    { __DEFAULT ->
                                                                                                          let {
                                                                                                            sat_sbDEB [Occ=Once]
                                                                                                              :: GHC.Ptr.Ptr
                                                                                                                   GHC.Word.Word8
                                                                                                            [LclId] =
                                                                                                                CCCS GHC.Ptr.Ptr! [sat_sbDEA];
                                                                                                          } in 
                                                                                                            case
                                                                                                                Foreign.Storable.$wpeekW64
                                                                                                                    sat_sbDEB
                                                                                                                    8#
                                                                                                                    0##
                                                                                                                    GHC.Prim.void#
                                                                                                            of
                                                                                                            { Unit# ipv15_sbDEE [Occ=Once] ->
                                                                                                                  case
                                                                                                                      touch# [ipv11_sbDEr
                                                                                                                              GHC.Prim.void#]
                                                                                                                  of
                                                                                                                  s1_sbDEF
                                                                                                                  { (##) ->
                                                                                                                        case
                                                                                                                            touch# [ipv3_sbDE6
                                                                                                                                    GHC.Prim.void#]
                                                                                                                        of
                                                                                                                        s2_sbDEG
                                                                                                                        { (##) ->
                                                                                                                              let {
                                                                                                                                sat_sbDEH [Occ=Once]
                                                                                                                                  :: GHC.Fingerprint.Type.Fingerprint
                                                                                                                                [LclId] =
                                                                                                                                    [ipv13_sbDEz
                                                                                                                                     ipv15_sbDEE] \u []
                                                                                                                                        GHC.Fingerprint.Type.$WFingerprint
                                                                                                                                            ipv13_sbDEz
                                                                                                                                            ipv15_sbDEE;
                                                                                                                              } in 
                                                                                                                                Unit# [sat_sbDEH];
                                                                                                                        };
                                                                                                                  };
                                                                                                            };
                                                                                                    };
                                                                                              };
                                                                                      };
                                                                                };
                                                                          };
                                                                    };
                                                              };
                                                    } in 
                                                      let-no-escape {
                                                        loop_sbDEI [Occ=LoopBreakerT[1]]
                                                          :: GHC.Prim.State# GHC.Prim.RealWorld
                                                             -> (# GHC.Prim.State#
                                                                     GHC.Prim.RealWorld,
                                                                   GHC.Fingerprint.Type.Fingerprint #)
                                                        [LclId[JoinId(1)],
                                                         Arity=1,
                                                         Str=<S,U>,
                                                         Unf=OtherCon []] =
                                                            sat-only [h_sbDDZ
                                                                      pctxt_sbDE7
                                                                      arrPtr_sbDEh
                                                                      lvl3_sbDEi
                                                                      $w$j_sbDEj
                                                                      loop_sbDEI] \r [void_0E]
                                                                case
                                                                    GHC.IO.Handle.Text.$whGetBuf
                                                                        h_sbDDZ
                                                                        lvl3_sbDEi
                                                                        4096#
                                                                        GHC.Prim.void#
                                                                of
                                                                { Unit# ipv9_sbDEM [Occ=Once!] ->
                                                                      case
                                                                          GHC.IO.Handle.Internals.wantReadableHandle_1
                                                                              GHC.IO.Handle.hIsEOF3
                                                                              h_sbDDZ
                                                                              GHC.IO.Handle.hIsEOF2
                                                                              GHC.Prim.void#
                                                                      of
                                                                      { Unit# ipv11_sbDEP ->
                                                                            case ipv9_sbDEM of {
                                                                              GHC.Types.I# x_sbDER ->
                                                                                  let-no-escape {
                                                                                    $j_sbDES [Occ=Once*T[0],
                                                                                              Dmd=<S,1*U(U,U)>]
                                                                                      :: (# GHC.Prim.State#
                                                                                              GHC.Prim.RealWorld,
                                                                                            GHC.Fingerprint.Type.Fingerprint #)
                                                                                    [LclId[JoinId(0)],
                                                                                     Unf=OtherCon []] =
                                                                                        [pctxt_sbDE7
                                                                                         arrPtr_sbDEh
                                                                                         $w$j_sbDEj
                                                                                         loop_sbDEI
                                                                                         ipv11_sbDEP
                                                                                         x_sbDER] \r []
                                                                                            case
                                                                                                narrow32Int# [x_sbDER]
                                                                                            of
                                                                                            sat_sbDEU
                                                                                            { __DEFAULT ->
                                                                                                  case
                                                                                                      __pkg_ccall base-4.11.0.0 [pctxt_sbDE7
                                                                                                                                 arrPtr_sbDEh
                                                                                                                                 sat_sbDEU
                                                                                                                                 GHC.Prim.void#]
                                                                                                  of
                                                                                                  { (##) ->
                                                                                                        case
                                                                                                            ipv11_sbDEP
                                                                                                        of
                                                                                                        { GHC.Types.False ->
                                                                                                              loop_sbDEI
                                                                                                                  GHC.Prim.void#;
                                                                                                          GHC.Types.True ->
                                                                                                              $w$j_sbDEj
                                                                                                                  GHC.Prim.void#;
                                                                                                        };
                                                                                                  };
                                                                                            };
                                                                                  } in 
                                                                                    case
                                                                                        x_sbDER
                                                                                    of
                                                                                    wild2_sbDEY
                                                                                    { __DEFAULT ->
                                                                                          case
                                                                                              ipv11_sbDEP
                                                                                          of
                                                                                          { GHC.Types.False ->
                                                                                                GHC.Fingerprint.$wlvl
                                                                                                    wild2_sbDEY;
                                                                                            GHC.Types.True ->
                                                                                                $j_sbDES;
                                                                                          };
                                                                                      4096# ->
                                                                                          $j_sbDES;
                                                                                    };
                                                                            };
                                                                      };
                                                                };
                                                      } in  loop_sbDEI GHC.Prim.void#;
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.Fingerprint.getFileHash1
  :: GHC.IO.FilePath
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Fingerprint.Type.Fingerprint #)
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [path_sbDF1 void_0E]
        System.IO.withBinaryFile1
            path_sbDF1
            GHC.IO.IOMode.ReadMode
            GHC.Fingerprint.getFileHash2
            GHC.Prim.void#;

GHC.Fingerprint.getFileHash
  :: GHC.IO.FilePath -> GHC.Types.IO GHC.Fingerprint.Type.Fingerprint
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.Fingerprint.getFileHash1 eta_B2 GHC.Prim.void#;

GHC.Fingerprint.$wfingerprintData [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Fingerprint.Type.Fingerprint #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S,U><S,U><S,U>,
 Unf=OtherCon []] =
    [] \r [ww_sbDF3 ww1_sbDF4 void_0E]
        case newPinnedByteArray# [0# GHC.Prim.void#] of {
          Unit# ipv1_sbDF8 [Occ=Once] ->
              case unsafeFreezeByteArray# [ipv1_sbDF8 GHC.Prim.void#] of {
                Unit# ipv3_sbDFb ->
                    case byteArrayContents# [ipv3_sbDFb] of pctxt_sbDFc [Dmd=<S,U>] {
                      __DEFAULT ->
                          case __pkg_ccall base-4.11.0.0 [pctxt_sbDFc GHC.Prim.void#] of {
                            (##) ->
                                case narrow32Int# [ww1_sbDF4] of sat_sbDFh {
                                  __DEFAULT ->
                                      case
                                          __pkg_ccall base-4.11.0.0 [pctxt_sbDFc
                                                                     ww_sbDF3
                                                                     sat_sbDFh
                                                                     GHC.Prim.void#]
                                      of
                                      { (##) ->
                                            case newPinnedByteArray# [16# GHC.Prim.void#] of {
                                              Unit# ipv5_sbDFm [Occ=Once] ->
                                                  case
                                                      unsafeFreezeByteArray# [ipv5_sbDFm
                                                                              GHC.Prim.void#]
                                                  of
                                                  { Unit# ipv7_sbDFp ->
                                                        case
                                                            byteArrayContents# [ipv7_sbDFp]
                                                        of
                                                        pdigest_sbDFq [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  __pkg_ccall base-4.11.0.0 [pdigest_sbDFq
                                                                                             pctxt_sbDFc
                                                                                             GHC.Prim.void#]
                                                              of
                                                              { (##) ->
                                                                    let {
                                                                      sat_sbDFu [Occ=Once]
                                                                        :: GHC.Ptr.Ptr
                                                                             GHC.Word.Word8
                                                                      [LclId] =
                                                                          CCCS GHC.Ptr.Ptr! [pdigest_sbDFq];
                                                                    } in 
                                                                      case
                                                                          Foreign.Storable.$wpeekW64
                                                                              sat_sbDFu
                                                                              8#
                                                                              0##
                                                                              GHC.Prim.void#
                                                                      of
                                                                      { Unit# ipv9_sbDFx [Occ=Once] ->
                                                                            case
                                                                                plusAddr# [pdigest_sbDFq
                                                                                           8#]
                                                                            of
                                                                            sat_sbDFy
                                                                            { __DEFAULT ->
                                                                                  let {
                                                                                    sat_sbDFz [Occ=Once]
                                                                                      :: GHC.Ptr.Ptr
                                                                                           GHC.Word.Word8
                                                                                    [LclId] =
                                                                                        CCCS GHC.Ptr.Ptr! [sat_sbDFy];
                                                                                  } in 
                                                                                    case
                                                                                        Foreign.Storable.$wpeekW64
                                                                                            sat_sbDFz
                                                                                            8#
                                                                                            0##
                                                                                            GHC.Prim.void#
                                                                                    of
                                                                                    { Unit# ipv11_sbDFC [Occ=Once] ->
                                                                                          case
                                                                                              touch# [ipv7_sbDFp
                                                                                                      GHC.Prim.void#]
                                                                                          of
                                                                                          s4_sbDFD
                                                                                          { (##) ->
                                                                                                case
                                                                                                    touch# [ipv3_sbDFb
                                                                                                            GHC.Prim.void#]
                                                                                                of
                                                                                                s1_sbDFE
                                                                                                { (##) ->
                                                                                                      let {
                                                                                                        sat_sbDFF [Occ=Once]
                                                                                                          :: GHC.Fingerprint.Type.Fingerprint
                                                                                                        [LclId] =
                                                                                                            [ipv9_sbDFx
                                                                                                             ipv11_sbDFC] \u []
                                                                                                                GHC.Fingerprint.Type.$WFingerprint
                                                                                                                    ipv9_sbDFx
                                                                                                                    ipv11_sbDFC;
                                                                                                      } in 
                                                                                                        Unit# [sat_sbDFF];
                                                                                                };
                                                                                          };
                                                                                    };
                                                                            };
                                                                      };
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.Fingerprint.fingerprintData1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Ptr.Ptr GHC.Word.Word8
     -> GHC.Types.Int
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Fingerprint.Type.Fingerprint #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_sbDFG w1_sbDFH void_0E]
        case w_sbDFG of {
          GHC.Ptr.Ptr ww1_sbDFK [Occ=Once] ->
              case w1_sbDFH of {
                GHC.Types.I# ww3_sbDFM [Occ=Once] ->
                    GHC.Fingerprint.$wfingerprintData
                        ww1_sbDFK ww3_sbDFM GHC.Prim.void#;
              };
        };

GHC.Fingerprint.fingerprintData
  :: GHC.Ptr.Ptr GHC.Word.Word8
     -> GHC.Types.Int -> GHC.Types.IO GHC.Fingerprint.Type.Fingerprint
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        GHC.Fingerprint.fingerprintData1 eta_B3 eta_B2 GHC.Prim.void#;

GHC.Fingerprint.fingerprintString_go [Occ=LoopBreaker]
  :: [GHC.Types.Char] -> [GHC.Word.Word8]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_sbDFN]
        case ds_sbDFN of {
          [] -> [] [];
          : y_sbDFP [Occ=Once!] ys_sbDFQ [Occ=Once] ->
              let {
                w32_sbDFR [Dmd=<L,U(U)>] :: GHC.Word.Word32
                [LclId] =
                    [y_sbDFP] \u []
                        case y_sbDFP of {
                          GHC.Types.C# c#_sbDFT [Occ=Once] ->
                              case ord# [c#_sbDFT] of sat_sbDFU {
                                __DEFAULT ->
                                    case int2Word# [sat_sbDFU] of sat_sbDFV {
                                      __DEFAULT ->
                                          case narrow32Word# [sat_sbDFV] of sat_sbDFW {
                                            __DEFAULT -> GHC.Word.W32# [sat_sbDFW];
                                          };
                                    };
                              };
                        }; } in
              let {
                sat_sbDGg [Occ=Once] :: [GHC.Word.Word8]
                [LclId] =
                    [ys_sbDFQ] \u []
                        GHC.Fingerprint.fingerprintString_go ys_sbDFQ; } in
              let {
                sat_sbDGf [Occ=Once] :: GHC.Word.Word8
                [LclId] =
                    [w32_sbDFR] \u []
                        case w32_sbDFR of {
                          GHC.Word.W32# x#_sbDGd [Occ=Once] ->
                              case narrow8Word# [x#_sbDGd] of sat_sbDGe {
                                __DEFAULT -> GHC.Word.W8# [sat_sbDGe];
                              };
                        }; } in
              let {
                sat_sbDGh [Occ=Once] :: [GHC.Word.Word8]
                [LclId] =
                    CCCS :! [sat_sbDGf sat_sbDGg]; } in
              let {
                sat_sbDGb [Occ=Once] :: GHC.Word.Word8
                [LclId] =
                    [w32_sbDFR] \u []
                        case w32_sbDFR of {
                          GHC.Word.W32# x#_sbDG8 [Occ=Once] ->
                              case uncheckedShiftRL# [x#_sbDG8 8#] of sat_sbDG9 {
                                __DEFAULT ->
                                    case narrow8Word# [sat_sbDG9] of sat_sbDGa {
                                      __DEFAULT -> GHC.Word.W8# [sat_sbDGa];
                                    };
                              };
                        }; } in
              let {
                sat_sbDGi [Occ=Once] :: [GHC.Word.Word8]
                [LclId] =
                    CCCS :! [sat_sbDGb sat_sbDGh]; } in
              let {
                sat_sbDG6 [Occ=Once] :: GHC.Word.Word8
                [LclId] =
                    [w32_sbDFR] \u []
                        case w32_sbDFR of {
                          GHC.Word.W32# x#_sbDG3 [Occ=Once] ->
                              case uncheckedShiftRL# [x#_sbDG3 16#] of sat_sbDG4 {
                                __DEFAULT ->
                                    case narrow8Word# [sat_sbDG4] of sat_sbDG5 {
                                      __DEFAULT -> GHC.Word.W8# [sat_sbDG5];
                                    };
                              };
                        }; } in
              let {
                sat_sbDGj [Occ=Once] :: [GHC.Word.Word8]
                [LclId] =
                    CCCS :! [sat_sbDG6 sat_sbDGi]; } in
              let {
                sat_sbDG1 [Occ=Once] :: GHC.Word.Word8
                [LclId] =
                    [w32_sbDFR] \u []
                        case w32_sbDFR of {
                          GHC.Word.W32# x#_sbDFY [Occ=Once] ->
                              case uncheckedShiftRL# [x#_sbDFY 24#] of sat_sbDFZ {
                                __DEFAULT ->
                                    case narrow8Word# [sat_sbDFZ] of sat_sbDG0 {
                                      __DEFAULT -> GHC.Word.W8# [sat_sbDG0];
                                    };
                              };
                        };
              } in  : [sat_sbDG1 sat_sbDGj];
        };

GHC.Fingerprint.fingerprintString
  :: GHC.Base.String -> GHC.Fingerprint.Type.Fingerprint
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [str_sbDGk]
        case
            GHC.Fingerprint.fingerprintString_go str_sbDGk
        of
        vals_sbDGl [Dmd=<S,U>]
        { __DEFAULT ->
              case
                  case GHC.List.$wlenAcc vals_sbDGl 0# of ww2_sbDGm {
                    __DEFAULT ->
                        case
                            newAlignedPinnedByteArray# [ww2_sbDGm 1# GHC.Prim.realWorld#]
                        of
                        { Unit# ipv1_sbDGp [Occ=Once] ->
                              case unsafeFreezeByteArray# [ipv1_sbDGp GHC.Prim.void#] of {
                                Unit# ipv3_sbDGs ->
                                    case byteArrayContents# [ipv3_sbDGs] of ptr_sbDGt [Dmd=<S,U>] {
                                      __DEFAULT ->
                                          let-no-escape {
                                            exit_sbDGu [Occ=OnceL!T[1], Dmd=<C(S),C(U)>]
                                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                       GHC.Fingerprint.Type.Fingerprint #)
                                            [LclId[JoinId(1)],
                                             Arity=1,
                                             Str=<S,U>,
                                             Unf=OtherCon []] =
                                                sat-only [ww2_sbDGm
                                                          ipv3_sbDGs
                                                          ptr_sbDGt] \r [void_0E]
                                                    case
                                                        GHC.Fingerprint.$wfingerprintData
                                                            ptr_sbDGt ww2_sbDGm GHC.Prim.void#
                                                    of
                                                    { Unit# ipv5_sbDGy [Occ=Once] ->
                                                          case
                                                              touch# [ipv3_sbDGs GHC.Prim.void#]
                                                          of
                                                          s4_sbDGz
                                                          { (##) -> Unit# [ipv5_sbDGy];
                                                          };
                                                    };
                                          } in 
                                            let-no-escape {
                                              go_sbDGA [Occ=LoopBreakerT[3]]
                                                :: [GHC.Word.Word8]
                                                   -> GHC.Prim.Int#
                                                   -> GHC.Prim.State# GHC.Prim.RealWorld
                                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                         GHC.Fingerprint.Type.Fingerprint #)
                                              [LclId[JoinId(3)],
                                               Arity=3,
                                               Str=<S,1*U><L,U><S,U>,
                                               Unf=OtherCon []] =
                                                  sat-only [ptr_sbDGt
                                                            exit_sbDGu
                                                            go_sbDGA] \r [ds_sbDGB
                                                                          ds1_sbDGC
                                                                          void_0E]
                                                      case ds_sbDGB of {
                                                        [] -> exit_sbDGu GHC.Prim.void#;
                                                        : val_sbDGF [Occ=Once!]
                                                          vals1_sbDGG [Occ=Once] ->
                                                            case val_sbDGF of {
                                                              GHC.Word.W8# x_sbDGI [Occ=Once] ->
                                                                  case
                                                                      writeWord8OffAddr# [ptr_sbDGt
                                                                                          ds1_sbDGC
                                                                                          x_sbDGI
                                                                                          GHC.Prim.void#]
                                                                  of
                                                                  s2_sbDGJ
                                                                  { (##) ->
                                                                        case
                                                                            +# [ds1_sbDGC 1#]
                                                                        of
                                                                        sat_sbDGK
                                                                        { __DEFAULT ->
                                                                              go_sbDGA
                                                                                  vals1_sbDGG
                                                                                  sat_sbDGK
                                                                                  GHC.Prim.void#;
                                                                        };
                                                                  };
                                                            };
                                                      };
                                            } in  go_sbDGA vals_sbDGl 0# GHC.Prim.void#;
                                    };
                              };
                        };
                  }
              of
              { Unit# ipv1_sbDGN [Occ=Once] -> ipv1_sbDGN;
              };
        };

GHC.Fingerprint.fingerprintFingerprints
  :: [GHC.Fingerprint.Type.Fingerprint]
     -> GHC.Fingerprint.Type.Fingerprint
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [fs_sbDGO]
        case
            case GHC.List.$wlenAcc fs_sbDGO 0# of ww2_sbDGP {
              __DEFAULT ->
                  case *# [ww2_sbDGP 16#] of sat_sbDGQ {
                    __DEFAULT ->
                        case
                            newAlignedPinnedByteArray# [sat_sbDGQ 8# GHC.Prim.realWorld#]
                        of
                        { Unit# ipv1_sbDGT [Occ=Once] ->
                              case unsafeFreezeByteArray# [ipv1_sbDGT GHC.Prim.void#] of {
                                Unit# ipv3_sbDGW ->
                                    case byteArrayContents# [ipv3_sbDGW] of ptr_sbDGX [Dmd=<S,U>] {
                                      __DEFAULT ->
                                          let-no-escape {
                                            exit_sbDGY [Occ=OnceL!T[1], Dmd=<L,C(U)>]
                                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                       GHC.Fingerprint.Type.Fingerprint #)
                                            [LclId[JoinId(1)],
                                             Arity=1,
                                             Str=<S,U>,
                                             Unf=OtherCon []] =
                                                sat-only [ww2_sbDGP
                                                          ipv3_sbDGW
                                                          ptr_sbDGX] \r [void_0E]
                                                    case *# [ww2_sbDGP 16#] of sat_sbDH0 {
                                                      __DEFAULT ->
                                                          case
                                                              GHC.Fingerprint.$wfingerprintData
                                                                  ptr_sbDGX sat_sbDH0 GHC.Prim.void#
                                                          of
                                                          { Unit# ipv5_sbDH3 [Occ=Once] ->
                                                                case
                                                                    touch# [ipv3_sbDGW
                                                                            GHC.Prim.void#]
                                                                of
                                                                s4_sbDH4
                                                                { (##) -> Unit# [ipv5_sbDH3];
                                                                };
                                                          };
                                                    };
                                          } in 
                                            let-no-escape {
                                              go_sbDH5 [Occ=LoopBreakerT[3]]
                                                :: [GHC.Fingerprint.Type.Fingerprint]
                                                   -> GHC.Prim.Int#
                                                   -> GHC.Prim.State# GHC.Prim.RealWorld
                                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                         GHC.Fingerprint.Type.Fingerprint #)
                                              [LclId[JoinId(3)],
                                               Arity=3,
                                               Str=<S,1*U><L,U><S,U>,
                                               Unf=OtherCon []] =
                                                  sat-only [ptr_sbDGX
                                                            exit_sbDGY
                                                            go_sbDH5] \r [ds_sbDH6
                                                                          ds1_sbDH7
                                                                          void_0E]
                                                      case ds_sbDH6 of {
                                                        [] -> exit_sbDGY GHC.Prim.void#;
                                                        : val_sbDHa [Occ=Once!]
                                                          vals_sbDHb [Occ=Once] ->
                                                            case val_sbDHa of {
                                                              GHC.Fingerprint.Type.Fingerprint ww1_sbDHd [Occ=Once]
                                                                                               ww4_sbDHe [Occ=Once] ->
                                                                  case
                                                                      *# [ds1_sbDH7 16#]
                                                                  of
                                                                  sat_sbDHg
                                                                  { __DEFAULT ->
                                                                        case
                                                                            plusAddr# [ptr_sbDGX
                                                                                       sat_sbDHg]
                                                                        of
                                                                        w_sbDHf
                                                                        { __DEFAULT ->
                                                                              let {
                                                                                sat_sbDHi [Occ=Once]
                                                                                  :: GHC.Word.Word64
                                                                                [LclId] =
                                                                                    CCCS GHC.Word.W64#! [ww1_sbDHd]; } in
                                                                              let {
                                                                                sat_sbDHh [Occ=Once]
                                                                                  :: GHC.Ptr.Ptr
                                                                                       GHC.Word.Word8
                                                                                [LclId] =
                                                                                    CCCS GHC.Ptr.Ptr! [w_sbDHf];
                                                                              } in 
                                                                                case
                                                                                    Foreign.Storable.$wpokeW64
                                                                                        sat_sbDHh
                                                                                        8#
                                                                                        sat_sbDHi
                                                                                        GHC.Prim.void#
                                                                                of
                                                                                { Unit# _ [Occ=Dead] ->
                                                                                      let {
                                                                                        sat_sbDHo [Occ=Once]
                                                                                          :: GHC.Word.Word64
                                                                                        [LclId] =
                                                                                            CCCS GHC.Word.W64#! [ww4_sbDHe];
                                                                                      } in 
                                                                                        case
                                                                                            plusAddr# [w_sbDHf
                                                                                                       8#]
                                                                                        of
                                                                                        sat_sbDHm
                                                                                        { __DEFAULT ->
                                                                                              let {
                                                                                                sat_sbDHn [Occ=Once]
                                                                                                  :: GHC.Ptr.Ptr
                                                                                                       GHC.Word.Word8
                                                                                                [LclId] =
                                                                                                    CCCS GHC.Ptr.Ptr! [sat_sbDHm];
                                                                                              } in 
                                                                                                case
                                                                                                    Foreign.Storable.$wpokeW64
                                                                                                        sat_sbDHn
                                                                                                        8#
                                                                                                        sat_sbDHo
                                                                                                        GHC.Prim.void#
                                                                                                of
                                                                                                { Unit# _ [Occ=Dead] ->
                                                                                                      case
                                                                                                          +# [ds1_sbDH7
                                                                                                              1#]
                                                                                                      of
                                                                                                      sat_sbDHs
                                                                                                      { __DEFAULT ->
                                                                                                            go_sbDH5
                                                                                                                vals_sbDHb
                                                                                                                sat_sbDHs
                                                                                                                GHC.Prim.void#;
                                                                                                      };
                                                                                                };
                                                                                        };
                                                                                };
                                                                        };
                                                                  };
                                                            };
                                                      };
                                            } in  go_sbDH5 fs_sbDGO 0# GHC.Prim.void#;
                                    };
                              };
                        };
                  };
            }
        of
        { Unit# ipv1_sbDHv [Occ=Once] -> ipv1_sbDHv;
        };


==================== Pre unarise: ====================
2018-03-16 16:06:33.83810788 UTC

GHC.Fingerprint.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.Fingerprint.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Fingerprint.$trModule4];

GHC.Fingerprint.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.Fingerprint"#;

GHC.Fingerprint.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Fingerprint.$trModule2];

GHC.Fingerprint.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.Fingerprint.$trModule3
                                     GHC.Fingerprint.$trModule1];

GHC.Fingerprint.$tcMD5Context2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "MD5Context"#;

GHC.Fingerprint.$tcMD5Context1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Fingerprint.$tcMD5Context2];

GHC.Fingerprint.$tcMD5Context :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [2786815183060026909##
                                    11852912954819316049##
                                    GHC.Fingerprint.$trModule
                                    GHC.Fingerprint.$tcMD5Context1
                                    0#
                                    GHC.Types.krep$*];

GHC.Fingerprint.fingerprint0 :: GHC.Fingerprint.Type.Fingerprint
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Fingerprint.Type.Fingerprint! [0## 0##];

lvl_rbDDO :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.Fingerprint.getFileHash: only read "#;

lvl1_rbDDP :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    " bytes"#;

lvl2_rbDDQ :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl1_rbDDP;

GHC.Fingerprint.$wlvl [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Types.IO ()
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [ww_sbEez]
        let {
          sat_sbEeE [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              [ww_sbEez] \u []
                  case GHC.Show.$wshowSignedInt 0# ww_sbEez GHC.Types.[] of {
                    (#,#) ww5_sbEeB [Occ=Once] ww6_sbEeC [Occ=Once] ->
                        let {
                          sat_sbEeD [Occ=Once] :: [GHC.Types.Char]
                          [LclId] =
                              CCCS :! [ww5_sbEeB ww6_sbEeC];
                        } in  GHC.Base.++ sat_sbEeD lvl2_rbDDQ;
                  };
        } in 
          case
              GHC.CString.unpackAppendCString# lvl_rbDDO sat_sbEeE
          of
          sat_sbEeF
          { __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_sbEeF;
          };

GHC.Fingerprint.getFileHash2
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Fingerprint.Type.Fingerprint #)
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [h_sbEeG eta_sbEeH]
        case newPinnedByteArray# [0# eta_sbEeH] of {
          (#,#) ipv_sbEeJ [Occ=Once] ipv1_sbEeK [Occ=Once] ->
              case unsafeFreezeByteArray# [ipv1_sbEeK ipv_sbEeJ] of {
                (#,#) ipv2_sbEeM [Occ=Once] ipv3_sbEeN ->
                    case byteArrayContents# [ipv3_sbEeN] of pctxt_sbEeO [Dmd=<S,U>] {
                      __DEFAULT ->
                          case __pkg_ccall base-4.11.0.0 [pctxt_sbEeO ipv2_sbEeM] of {
                            Unit# ds_sbEeR [Occ=Once] ->
                                case newPinnedByteArray# [4096# ds_sbEeR] of {
                                  (#,#) ipv4_sbEeT [Occ=Once] ipv5_sbEeU [Occ=Once] ->
                                      case unsafeFreezeByteArray# [ipv5_sbEeU ipv4_sbEeT] of {
                                        (#,#) ipv6_sbEeW [Occ=Once] ipv7_sbEeX ->
                                            case byteArrayContents# [ipv7_sbEeX] of arrPtr_sbEeY {
                                              __DEFAULT ->
                                                  let {
                                                    lvl3_sbEeZ [Occ=OnceL, Dmd=<L,U(U)>]
                                                      :: GHC.Ptr.Ptr GHC.Word.Word8
                                                    [LclId, Unf=OtherCon []] =
                                                        CCCS GHC.Ptr.Ptr! [arrPtr_sbEeY];
                                                  } in 
                                                    let-no-escape {
                                                      $w$j_sbEf0 [InlPrag=NOUSERINLINE[0],
                                                                  Occ=OnceL!T[1],
                                                                  Dmd=<L,C(U(U,U))>]
                                                        :: GHC.Prim.State# GHC.Prim.RealWorld
                                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                 GHC.Fingerprint.Type.Fingerprint #)
                                                      [LclId[JoinId(1)],
                                                       Arity=1,
                                                       Str=<S,U>,
                                                       Unf=OtherCon []] =
                                                          sat-only [ipv3_sbEeN
                                                                    pctxt_sbEeO
                                                                    ipv7_sbEeX] \r [w_sbEf1]
                                                              case
                                                                  touch# [ipv7_sbEeX w_sbEf1]
                                                              of
                                                              s4_sbEf2
                                                              { __DEFAULT ->
                                                                    case
                                                                        newPinnedByteArray# [16#
                                                                                             s4_sbEf2]
                                                                    of
                                                                    { (#,#) ipv8_sbEf4 [Occ=Once]
                                                                            ipv9_sbEf5 [Occ=Once] ->
                                                                          case
                                                                              unsafeFreezeByteArray# [ipv9_sbEf5
                                                                                                      ipv8_sbEf4]
                                                                          of
                                                                          { (#,#) ipv10_sbEf7 [Occ=Once]
                                                                                  ipv11_sbEf8 ->
                                                                                case
                                                                                    byteArrayContents# [ipv11_sbEf8]
                                                                                of
                                                                                pdigest_sbEf9 [Dmd=<S,U>]
                                                                                { __DEFAULT ->
                                                                                      case
                                                                                          __pkg_ccall base-4.11.0.0 [pdigest_sbEf9
                                                                                                                     pctxt_sbEeO
                                                                                                                     ipv10_sbEf7]
                                                                                      of
                                                                                      { Unit# ds8_sbEfc [Occ=Once] ->
                                                                                            let {
                                                                                              sat_sbEfd [Occ=Once]
                                                                                                :: GHC.Ptr.Ptr
                                                                                                     GHC.Word.Word8
                                                                                              [LclId] =
                                                                                                  CCCS GHC.Ptr.Ptr! [pdigest_sbEf9];
                                                                                            } in 
                                                                                              case
                                                                                                  Foreign.Storable.$wpeekW64
                                                                                                      sat_sbEfd
                                                                                                      8#
                                                                                                      0##
                                                                                                      ds8_sbEfc
                                                                                              of
                                                                                              { (#,#) ipv12_sbEff [Occ=Once]
                                                                                                      ipv13_sbEfg [Occ=Once] ->
                                                                                                    case
                                                                                                        plusAddr# [pdigest_sbEf9
                                                                                                                   8#]
                                                                                                    of
                                                                                                    sat_sbEfh
                                                                                                    { __DEFAULT ->
                                                                                                          let {
                                                                                                            sat_sbEfi [Occ=Once]
                                                                                                              :: GHC.Ptr.Ptr
                                                                                                                   GHC.Word.Word8
                                                                                                            [LclId] =
                                                                                                                CCCS GHC.Ptr.Ptr! [sat_sbEfh];
                                                                                                          } in 
                                                                                                            case
                                                                                                                Foreign.Storable.$wpeekW64
                                                                                                                    sat_sbEfi
                                                                                                                    8#
                                                                                                                    0##
                                                                                                                    ipv12_sbEff
                                                                                                            of
                                                                                                            { (#,#) ipv14_sbEfk [Occ=Once]
                                                                                                                    ipv15_sbEfl [Occ=Once] ->
                                                                                                                  case
                                                                                                                      touch# [ipv11_sbEf8
                                                                                                                              ipv14_sbEfk]
                                                                                                                  of
                                                                                                                  s1_sbEfm
                                                                                                                  { __DEFAULT ->
                                                                                                                        case
                                                                                                                            touch# [ipv3_sbEeN
                                                                                                                                    s1_sbEfm]
                                                                                                                        of
                                                                                                                        s2_sbEfn
                                                                                                                        { __DEFAULT ->
                                                                                                                              let {
                                                                                                                                sat_sbEfo [Occ=Once]
                                                                                                                                  :: GHC.Fingerprint.Type.Fingerprint
                                                                                                                                [LclId] =
                                                                                                                                    [ipv13_sbEfg
                                                                                                                                     ipv15_sbEfl] \u []
                                                                                                                                        GHC.Fingerprint.Type.$WFingerprint
                                                                                                                                            ipv13_sbEfg
                                                                                                                                            ipv15_sbEfl;
                                                                                                                              } in 
                                                                                                                                (#,#) [s2_sbEfn
                                                                                                                                       sat_sbEfo];
                                                                                                                        };
                                                                                                                  };
                                                                                                            };
                                                                                                    };
                                                                                              };
                                                                                      };
                                                                                };
                                                                          };
                                                                    };
                                                              };
                                                    } in 
                                                      let-no-escape {
                                                        loop_sbEfp [Occ=LoopBreakerT[1]]
                                                          :: GHC.Prim.State# GHC.Prim.RealWorld
                                                             -> (# GHC.Prim.State#
                                                                     GHC.Prim.RealWorld,
                                                                   GHC.Fingerprint.Type.Fingerprint #)
                                                        [LclId[JoinId(1)],
                                                         Arity=1,
                                                         Str=<S,U>,
                                                         Unf=OtherCon []] =
                                                            sat-only [h_sbEeG
                                                                      pctxt_sbEeO
                                                                      arrPtr_sbEeY
                                                                      lvl3_sbEeZ
                                                                      $w$j_sbEf0
                                                                      loop_sbEfp] \r [s_sbEfq]
                                                                case
                                                                    GHC.IO.Handle.Text.$whGetBuf
                                                                        h_sbEeG
                                                                        lvl3_sbEeZ
                                                                        4096#
                                                                        s_sbEfq
                                                                of
                                                                { (#,#) ipv8_sbEfs [Occ=Once]
                                                                        ipv9_sbEft [Occ=Once!] ->
                                                                      case
                                                                          GHC.IO.Handle.Internals.wantReadableHandle_1
                                                                              GHC.IO.Handle.hIsEOF3
                                                                              h_sbEeG
                                                                              GHC.IO.Handle.hIsEOF2
                                                                              ipv8_sbEfs
                                                                      of
                                                                      { (#,#) ipv10_sbEfv [Occ=Once]
                                                                              ipv11_sbEfw ->
                                                                            case ipv9_sbEft of {
                                                                              GHC.Types.I# x_sbEfy ->
                                                                                  let-no-escape {
                                                                                    $j_sbEfz [Occ=Once*T[0],
                                                                                              Dmd=<S,1*U(U,U)>]
                                                                                      :: (# GHC.Prim.State#
                                                                                              GHC.Prim.RealWorld,
                                                                                            GHC.Fingerprint.Type.Fingerprint #)
                                                                                    [LclId[JoinId(0)],
                                                                                     Unf=OtherCon []] =
                                                                                        [pctxt_sbEeO
                                                                                         arrPtr_sbEeY
                                                                                         $w$j_sbEf0
                                                                                         loop_sbEfp
                                                                                         ipv10_sbEfv
                                                                                         ipv11_sbEfw
                                                                                         x_sbEfy] \r []
                                                                                            case
                                                                                                narrow32Int# [x_sbEfy]
                                                                                            of
                                                                                            sat_sbEfB
                                                                                            { __DEFAULT ->
                                                                                                  case
                                                                                                      __pkg_ccall base-4.11.0.0 [pctxt_sbEeO
                                                                                                                                 arrPtr_sbEeY
                                                                                                                                 sat_sbEfB
                                                                                                                                 ipv10_sbEfv]
                                                                                                  of
                                                                                                  { Unit# ds8_sbEfD [Occ=Once*] ->
                                                                                                        case
                                                                                                            ipv11_sbEfw
                                                                                                        of
                                                                                                        { GHC.Types.False ->
                                                                                                              loop_sbEfp
                                                                                                                  ds8_sbEfD;
                                                                                                          GHC.Types.True ->
                                                                                                              $w$j_sbEf0
                                                                                                                  ds8_sbEfD;
                                                                                                        };
                                                                                                  };
                                                                                            };
                                                                                  } in 
                                                                                    case
                                                                                        x_sbEfy
                                                                                    of
                                                                                    wild2_sbEfF
                                                                                    { __DEFAULT ->
                                                                                          case
                                                                                              ipv11_sbEfw
                                                                                          of
                                                                                          { GHC.Types.False ->
                                                                                                GHC.Fingerprint.$wlvl
                                                                                                    wild2_sbEfF;
                                                                                            GHC.Types.True ->
                                                                                                $j_sbEfz;
                                                                                          };
                                                                                      4096# ->
                                                                                          $j_sbEfz;
                                                                                    };
                                                                            };
                                                                      };
                                                                };
                                                      } in  loop_sbEfp ipv6_sbEeW;
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.Fingerprint.getFileHash1
  :: GHC.IO.FilePath
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Fingerprint.Type.Fingerprint #)
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [path_sbEfI eta_sbEfJ]
        System.IO.withBinaryFile1
            path_sbEfI
            GHC.IO.IOMode.ReadMode
            GHC.Fingerprint.getFileHash2
            eta_sbEfJ;

GHC.Fingerprint.getFileHash
  :: GHC.IO.FilePath -> GHC.Types.IO GHC.Fingerprint.Type.Fingerprint
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Fingerprint.getFileHash1 eta_B2 eta_B1;

GHC.Fingerprint.$wfingerprintData [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Fingerprint.Type.Fingerprint #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S,U><S,U><S,U>,
 Unf=OtherCon []] =
    [] \r [ww_sbEfK ww1_sbEfL w_sbEfM]
        case newPinnedByteArray# [0# w_sbEfM] of {
          (#,#) ipv_sbEfO [Occ=Once] ipv1_sbEfP [Occ=Once] ->
              case unsafeFreezeByteArray# [ipv1_sbEfP ipv_sbEfO] of {
                (#,#) ipv2_sbEfR [Occ=Once] ipv3_sbEfS ->
                    case byteArrayContents# [ipv3_sbEfS] of pctxt_sbEfT [Dmd=<S,U>] {
                      __DEFAULT ->
                          case __pkg_ccall base-4.11.0.0 [pctxt_sbEfT ipv2_sbEfR] of {
                            Unit# ds_sbEfW [Occ=Once] ->
                                case narrow32Int# [ww1_sbEfL] of sat_sbEfY {
                                  __DEFAULT ->
                                      case
                                          __pkg_ccall base-4.11.0.0 [pctxt_sbEfT
                                                                     ww_sbEfK
                                                                     sat_sbEfY
                                                                     ds_sbEfW]
                                      of
                                      { Unit# ds4_sbEg0 [Occ=Once] ->
                                            case newPinnedByteArray# [16# ds4_sbEg0] of {
                                              (#,#) ipv4_sbEg2 [Occ=Once] ipv5_sbEg3 [Occ=Once] ->
                                                  case
                                                      unsafeFreezeByteArray# [ipv5_sbEg3 ipv4_sbEg2]
                                                  of
                                                  { (#,#) ipv6_sbEg5 [Occ=Once] ipv7_sbEg6 ->
                                                        case
                                                            byteArrayContents# [ipv7_sbEg6]
                                                        of
                                                        pdigest_sbEg7 [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  __pkg_ccall base-4.11.0.0 [pdigest_sbEg7
                                                                                             pctxt_sbEfT
                                                                                             ipv6_sbEg5]
                                                              of
                                                              { Unit# ds7_sbEga [Occ=Once] ->
                                                                    let {
                                                                      sat_sbEgb [Occ=Once]
                                                                        :: GHC.Ptr.Ptr
                                                                             GHC.Word.Word8
                                                                      [LclId] =
                                                                          CCCS GHC.Ptr.Ptr! [pdigest_sbEg7];
                                                                    } in 
                                                                      case
                                                                          Foreign.Storable.$wpeekW64
                                                                              sat_sbEgb
                                                                              8#
                                                                              0##
                                                                              ds7_sbEga
                                                                      of
                                                                      { (#,#) ipv8_sbEgd [Occ=Once]
                                                                              ipv9_sbEge [Occ=Once] ->
                                                                            case
                                                                                plusAddr# [pdigest_sbEg7
                                                                                           8#]
                                                                            of
                                                                            sat_sbEgf
                                                                            { __DEFAULT ->
                                                                                  let {
                                                                                    sat_sbEgg [Occ=Once]
                                                                                      :: GHC.Ptr.Ptr
                                                                                           GHC.Word.Word8
                                                                                    [LclId] =
                                                                                        CCCS GHC.Ptr.Ptr! [sat_sbEgf];
                                                                                  } in 
                                                                                    case
                                                                                        Foreign.Storable.$wpeekW64
                                                                                            sat_sbEgg
                                                                                            8#
                                                                                            0##
                                                                                            ipv8_sbEgd
                                                                                    of
                                                                                    { (#,#) ipv10_sbEgi [Occ=Once]
                                                                                            ipv11_sbEgj [Occ=Once] ->
                                                                                          case
                                                                                              touch# [ipv7_sbEg6
                                                                                                      ipv10_sbEgi]
                                                                                          of
                                                                                          s4_sbEgk
                                                                                          { __DEFAULT ->
                                                                                                case
                                                                                                    touch# [ipv3_sbEfS
                                                                                                            s4_sbEgk]
                                                                                                of
                                                                                                s1_sbEgl
                                                                                                { __DEFAULT ->
                                                                                                      let {
                                                                                                        sat_sbEgm [Occ=Once]
                                                                                                          :: GHC.Fingerprint.Type.Fingerprint
                                                                                                        [LclId] =
                                                                                                            [ipv9_sbEge
                                                                                                             ipv11_sbEgj] \u []
                                                                                                                GHC.Fingerprint.Type.$WFingerprint
                                                                                                                    ipv9_sbEge
                                                                                                                    ipv11_sbEgj;
                                                                                                      } in 
                                                                                                        (#,#) [s1_sbEgl
                                                                                                               sat_sbEgm];
                                                                                                };
                                                                                          };
                                                                                    };
                                                                            };
                                                                      };
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.Fingerprint.fingerprintData1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Ptr.Ptr GHC.Word.Word8
     -> GHC.Types.Int
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Fingerprint.Type.Fingerprint #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_sbEgn w1_sbEgo w2_sbEgp]
        case w_sbEgn of {
          GHC.Ptr.Ptr ww1_sbEgr [Occ=Once] ->
              case w1_sbEgo of {
                GHC.Types.I# ww3_sbEgt [Occ=Once] ->
                    GHC.Fingerprint.$wfingerprintData ww1_sbEgr ww3_sbEgt w2_sbEgp;
              };
        };

GHC.Fingerprint.fingerprintData
  :: GHC.Ptr.Ptr GHC.Word.Word8
     -> GHC.Types.Int -> GHC.Types.IO GHC.Fingerprint.Type.Fingerprint
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.Fingerprint.fingerprintData1 eta_B3 eta_B2 eta_B1;

GHC.Fingerprint.fingerprintString_go [Occ=LoopBreaker]
  :: [GHC.Types.Char] -> [GHC.Word.Word8]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_sbEgu]
        case ds_sbEgu of {
          [] -> [] [];
          : y_sbEgw [Occ=Once!] ys_sbEgx [Occ=Once] ->
              let {
                w32_sbEgy [Dmd=<L,U(U)>] :: GHC.Word.Word32
                [LclId] =
                    [y_sbEgw] \u []
                        case y_sbEgw of {
                          GHC.Types.C# c#_sbEgA [Occ=Once] ->
                              case ord# [c#_sbEgA] of sat_sbEgB {
                                __DEFAULT ->
                                    case int2Word# [sat_sbEgB] of sat_sbEgC {
                                      __DEFAULT ->
                                          case narrow32Word# [sat_sbEgC] of sat_sbEgD {
                                            __DEFAULT -> GHC.Word.W32# [sat_sbEgD];
                                          };
                                    };
                              };
                        }; } in
              let {
                sat_sbEgX [Occ=Once] :: [GHC.Word.Word8]
                [LclId] =
                    [ys_sbEgx] \u []
                        GHC.Fingerprint.fingerprintString_go ys_sbEgx; } in
              let {
                sat_sbEgW [Occ=Once] :: GHC.Word.Word8
                [LclId] =
                    [w32_sbEgy] \u []
                        case w32_sbEgy of {
                          GHC.Word.W32# x#_sbEgU [Occ=Once] ->
                              case narrow8Word# [x#_sbEgU] of sat_sbEgV {
                                __DEFAULT -> GHC.Word.W8# [sat_sbEgV];
                              };
                        }; } in
              let {
                sat_sbEgY [Occ=Once] :: [GHC.Word.Word8]
                [LclId] =
                    CCCS :! [sat_sbEgW sat_sbEgX]; } in
              let {
                sat_sbEgS [Occ=Once] :: GHC.Word.Word8
                [LclId] =
                    [w32_sbEgy] \u []
                        case w32_sbEgy of {
                          GHC.Word.W32# x#_sbEgP [Occ=Once] ->
                              case uncheckedShiftRL# [x#_sbEgP 8#] of sat_sbEgQ {
                                __DEFAULT ->
                                    case narrow8Word# [sat_sbEgQ] of sat_sbEgR {
                                      __DEFAULT -> GHC.Word.W8# [sat_sbEgR];
                                    };
                              };
                        }; } in
              let {
                sat_sbEgZ [Occ=Once] :: [GHC.Word.Word8]
                [LclId] =
                    CCCS :! [sat_sbEgS sat_sbEgY]; } in
              let {
                sat_sbEgN [Occ=Once] :: GHC.Word.Word8
                [LclId] =
                    [w32_sbEgy] \u []
                        case w32_sbEgy of {
                          GHC.Word.W32# x#_sbEgK [Occ=Once] ->
                              case uncheckedShiftRL# [x#_sbEgK 16#] of sat_sbEgL {
                                __DEFAULT ->
                                    case narrow8Word# [sat_sbEgL] of sat_sbEgM {
                                      __DEFAULT -> GHC.Word.W8# [sat_sbEgM];
                                    };
                              };
                        }; } in
              let {
                sat_sbEh0 [Occ=Once] :: [GHC.Word.Word8]
                [LclId] =
                    CCCS :! [sat_sbEgN sat_sbEgZ]; } in
              let {
                sat_sbEgI [Occ=Once] :: GHC.Word.Word8
                [LclId] =
                    [w32_sbEgy] \u []
                        case w32_sbEgy of {
                          GHC.Word.W32# x#_sbEgF [Occ=Once] ->
                              case uncheckedShiftRL# [x#_sbEgF 24#] of sat_sbEgG {
                                __DEFAULT ->
                                    case narrow8Word# [sat_sbEgG] of sat_sbEgH {
                                      __DEFAULT -> GHC.Word.W8# [sat_sbEgH];
                                    };
                              };
                        };
              } in  : [sat_sbEgI sat_sbEh0];
        };

GHC.Fingerprint.fingerprintString
  :: GHC.Base.String -> GHC.Fingerprint.Type.Fingerprint
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [str_sbEh1]
        case
            GHC.Fingerprint.fingerprintString_go str_sbEh1
        of
        vals_sbEh2 [Dmd=<S,U>]
        { __DEFAULT ->
              case
                  case GHC.List.$wlenAcc vals_sbEh2 0# of ww2_sbEh3 {
                    __DEFAULT ->
                        case
                            newAlignedPinnedByteArray# [ww2_sbEh3 1# GHC.Prim.realWorld#]
                        of
                        { (#,#) ipv_sbEh5 [Occ=Once] ipv1_sbEh6 [Occ=Once] ->
                              case unsafeFreezeByteArray# [ipv1_sbEh6 ipv_sbEh5] of {
                                (#,#) ipv2_sbEh8 [Occ=Once] ipv3_sbEh9 ->
                                    case byteArrayContents# [ipv3_sbEh9] of ptr_sbEha [Dmd=<S,U>] {
                                      __DEFAULT ->
                                          let-no-escape {
                                            exit_sbEhb [Occ=OnceL!T[1], Dmd=<C(S),C(U)>]
                                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                       GHC.Fingerprint.Type.Fingerprint #)
                                            [LclId[JoinId(1)],
                                             Arity=1,
                                             Str=<S,U>,
                                             Unf=OtherCon []] =
                                                sat-only [ww2_sbEh3
                                                          ipv3_sbEh9
                                                          ptr_sbEha] \r [eta2_sbEhc]
                                                    case
                                                        GHC.Fingerprint.$wfingerprintData
                                                            ptr_sbEha ww2_sbEh3 eta2_sbEhc
                                                    of
                                                    { (#,#) ipv4_sbEhe [Occ=Once]
                                                            ipv5_sbEhf [Occ=Once] ->
                                                          case
                                                              touch# [ipv3_sbEh9 ipv4_sbEhe]
                                                          of
                                                          s4_sbEhg
                                                          { __DEFAULT ->
                                                                (#,#) [s4_sbEhg ipv5_sbEhf];
                                                          };
                                                    };
                                          } in 
                                            let-no-escape {
                                              go_sbEhh [Occ=LoopBreakerT[3]]
                                                :: [GHC.Word.Word8]
                                                   -> GHC.Prim.Int#
                                                   -> GHC.Prim.State# GHC.Prim.RealWorld
                                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                         GHC.Fingerprint.Type.Fingerprint #)
                                              [LclId[JoinId(3)],
                                               Arity=3,
                                               Str=<S,1*U><L,U><S,U>,
                                               Unf=OtherCon []] =
                                                  sat-only [ptr_sbEha
                                                            exit_sbEhb
                                                            go_sbEhh] \r [ds_sbEhi
                                                                          ds1_sbEhj
                                                                          eta2_sbEhk]
                                                      case ds_sbEhi of {
                                                        [] -> exit_sbEhb eta2_sbEhk;
                                                        : val_sbEhm [Occ=Once!]
                                                          vals1_sbEhn [Occ=Once] ->
                                                            case val_sbEhm of {
                                                              GHC.Word.W8# x_sbEhp [Occ=Once] ->
                                                                  case
                                                                      writeWord8OffAddr# [ptr_sbEha
                                                                                          ds1_sbEhj
                                                                                          x_sbEhp
                                                                                          eta2_sbEhk]
                                                                  of
                                                                  s2_sbEhq
                                                                  { __DEFAULT ->
                                                                        case
                                                                            +# [ds1_sbEhj 1#]
                                                                        of
                                                                        sat_sbEhr
                                                                        { __DEFAULT ->
                                                                              go_sbEhh
                                                                                  vals1_sbEhn
                                                                                  sat_sbEhr
                                                                                  s2_sbEhq;
                                                                        };
                                                                  };
                                                            };
                                                      };
                                            } in  go_sbEhh vals_sbEh2 0# ipv2_sbEh8;
                                    };
                              };
                        };
                  }
              of
              { (#,#) _ [Occ=Dead] ipv1_sbEhu [Occ=Once] -> ipv1_sbEhu;
              };
        };

GHC.Fingerprint.fingerprintFingerprints
  :: [GHC.Fingerprint.Type.Fingerprint]
     -> GHC.Fingerprint.Type.Fingerprint
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [fs_sbEhv]
        case
            case GHC.List.$wlenAcc fs_sbEhv 0# of ww2_sbEhw {
              __DEFAULT ->
                  case *# [ww2_sbEhw 16#] of sat_sbEhx {
                    __DEFAULT ->
                        case
                            newAlignedPinnedByteArray# [sat_sbEhx 8# GHC.Prim.realWorld#]
                        of
                        { (#,#) ipv_sbEhz [Occ=Once] ipv1_sbEhA [Occ=Once] ->
                              case unsafeFreezeByteArray# [ipv1_sbEhA ipv_sbEhz] of {
                                (#,#) ipv2_sbEhC [Occ=Once] ipv3_sbEhD ->
                                    case byteArrayContents# [ipv3_sbEhD] of ptr_sbEhE [Dmd=<S,U>] {
                                      __DEFAULT ->
                                          let-no-escape {
                                            exit_sbEhF [Occ=OnceL!T[1], Dmd=<L,C(U)>]
                                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                       GHC.Fingerprint.Type.Fingerprint #)
                                            [LclId[JoinId(1)],
                                             Arity=1,
                                             Str=<S,U>,
                                             Unf=OtherCon []] =
                                                sat-only [ww2_sbEhw
                                                          ipv3_sbEhD
                                                          ptr_sbEhE] \r [eta2_sbEhG]
                                                    case *# [ww2_sbEhw 16#] of sat_sbEhH {
                                                      __DEFAULT ->
                                                          case
                                                              GHC.Fingerprint.$wfingerprintData
                                                                  ptr_sbEhE sat_sbEhH eta2_sbEhG
                                                          of
                                                          { (#,#) ipv4_sbEhJ [Occ=Once]
                                                                  ipv5_sbEhK [Occ=Once] ->
                                                                case
                                                                    touch# [ipv3_sbEhD ipv4_sbEhJ]
                                                                of
                                                                s4_sbEhL
                                                                { __DEFAULT ->
                                                                      (#,#) [s4_sbEhL ipv5_sbEhK];
                                                                };
                                                          };
                                                    };
                                          } in 
                                            let-no-escape {
                                              go_sbEhM [Occ=LoopBreakerT[3]]
                                                :: [GHC.Fingerprint.Type.Fingerprint]
                                                   -> GHC.Prim.Int#
                                                   -> GHC.Prim.State# GHC.Prim.RealWorld
                                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                         GHC.Fingerprint.Type.Fingerprint #)
                                              [LclId[JoinId(3)],
                                               Arity=3,
                                               Str=<S,1*U><L,U><S,U>,
                                               Unf=OtherCon []] =
                                                  sat-only [ptr_sbEhE
                                                            exit_sbEhF
                                                            go_sbEhM] \r [ds_sbEhN
                                                                          ds1_sbEhO
                                                                          eta2_sbEhP]
                                                      case ds_sbEhN of {
                                                        [] -> exit_sbEhF eta2_sbEhP;
                                                        : val_sbEhR [Occ=Once!]
                                                          vals_sbEhS [Occ=Once] ->
                                                            case val_sbEhR of {
                                                              GHC.Fingerprint.Type.Fingerprint ww1_sbEhU [Occ=Once]
                                                                                               ww4_sbEhV [Occ=Once] ->
                                                                  case
                                                                      *# [ds1_sbEhO 16#]
                                                                  of
                                                                  sat_sbEhX
                                                                  { __DEFAULT ->
                                                                        case
                                                                            plusAddr# [ptr_sbEhE
                                                                                       sat_sbEhX]
                                                                        of
                                                                        w_sbEhW
                                                                        { __DEFAULT ->
                                                                              let {
                                                                                sat_sbEhZ [Occ=Once]
                                                                                  :: GHC.Word.Word64
                                                                                [LclId] =
                                                                                    CCCS GHC.Word.W64#! [ww1_sbEhU]; } in
                                                                              let {
                                                                                sat_sbEhY [Occ=Once]
                                                                                  :: GHC.Ptr.Ptr
                                                                                       GHC.Word.Word8
                                                                                [LclId] =
                                                                                    CCCS GHC.Ptr.Ptr! [w_sbEhW];
                                                                              } in 
                                                                                case
                                                                                    Foreign.Storable.$wpokeW64
                                                                                        sat_sbEhY
                                                                                        8#
                                                                                        sat_sbEhZ
                                                                                        eta2_sbEhP
                                                                                of
                                                                                { (#,#) ipv4_sbEi1 [Occ=Once]
                                                                                        _ [Occ=Dead] ->
                                                                                      let {
                                                                                        sat_sbEi5 [Occ=Once]
                                                                                          :: GHC.Word.Word64
                                                                                        [LclId] =
                                                                                            CCCS GHC.Word.W64#! [ww4_sbEhV];
                                                                                      } in 
                                                                                        case
                                                                                            plusAddr# [w_sbEhW
                                                                                                       8#]
                                                                                        of
                                                                                        sat_sbEi3
                                                                                        { __DEFAULT ->
                                                                                              let {
                                                                                                sat_sbEi4 [Occ=Once]
                                                                                                  :: GHC.Ptr.Ptr
                                                                                                       GHC.Word.Word8
                                                                                                [LclId] =
                                                                                                    CCCS GHC.Ptr.Ptr! [sat_sbEi3];
                                                                                              } in 
                                                                                                case
                                                                                                    Foreign.Storable.$wpokeW64
                                                                                                        sat_sbEi4
                                                                                                        8#
                                                                                                        sat_sbEi5
                                                                                                        ipv4_sbEi1
                                                                                                of
                                                                                                { (#,#) ipv6_sbEi7 [Occ=Once]
                                                                                                        _ [Occ=Dead] ->
                                                                                                      case
                                                                                                          +# [ds1_sbEhO
                                                                                                              1#]
                                                                                                      of
                                                                                                      sat_sbEi9
                                                                                                      { __DEFAULT ->
                                                                                                            go_sbEhM
                                                                                                                vals_sbEhS
                                                                                                                sat_sbEi9
                                                                                                                ipv6_sbEi7;
                                                                                                      };
                                                                                                };
                                                                                        };
                                                                                };
                                                                        };
                                                                  };
                                                            };
                                                      };
                                            } in  go_sbEhM fs_sbEhv 0# ipv2_sbEhC;
                                    };
                              };
                        };
                  };
            }
        of
        { (#,#) _ [Occ=Dead] ipv1_sbEic [Occ=Once] -> ipv1_sbEic;
        };


==================== STG syntax: ====================
2018-03-16 16:06:33.852456062 UTC

GHC.Fingerprint.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.Fingerprint.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Fingerprint.$trModule4];

GHC.Fingerprint.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.Fingerprint"#;

GHC.Fingerprint.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Fingerprint.$trModule2];

GHC.Fingerprint.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.Fingerprint.$trModule3
                                     GHC.Fingerprint.$trModule1];

GHC.Fingerprint.$tcMD5Context2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "MD5Context"#;

GHC.Fingerprint.$tcMD5Context1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Fingerprint.$tcMD5Context2];

GHC.Fingerprint.$tcMD5Context :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [2786815183060026909##
                                    11852912954819316049##
                                    GHC.Fingerprint.$trModule
                                    GHC.Fingerprint.$tcMD5Context1
                                    0#
                                    GHC.Types.krep$*];

GHC.Fingerprint.fingerprint0 :: GHC.Fingerprint.Type.Fingerprint
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Fingerprint.Type.Fingerprint! [0## 0##];

lvl_rbDDO :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.Fingerprint.getFileHash: only read "#;

lvl1_rbDDP :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    " bytes"#;

lvl2_rbDDQ :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl1_rbDDP;

GHC.Fingerprint.$wlvl [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Types.IO ()
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [ww_sbEez]
        let {
          sat_sbEeE [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              [ww_sbEez] \u []
                  case GHC.Show.$wshowSignedInt 0# ww_sbEez GHC.Types.[] of {
                    (#,#) ww5_sbEeB [Occ=Once] ww6_sbEeC [Occ=Once] ->
                        let {
                          sat_sbEeD [Occ=Once] :: [GHC.Types.Char]
                          [LclId] =
                              CCCS :! [ww5_sbEeB ww6_sbEeC];
                        } in  GHC.Base.++ sat_sbEeD lvl2_rbDDQ;
                  };
        } in 
          case
              GHC.CString.unpackAppendCString# lvl_rbDDO sat_sbEeE
          of
          sat_sbEeF
          { __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_sbEeF;
          };

GHC.Fingerprint.getFileHash2
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Fingerprint.Type.Fingerprint #)
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [h_sbEeG void_0E]
        case newPinnedByteArray# [0# GHC.Prim.void#] of {
          Unit# ipv1_sbEeK [Occ=Once] ->
              case unsafeFreezeByteArray# [ipv1_sbEeK GHC.Prim.void#] of {
                Unit# ipv3_sbEeN ->
                    case byteArrayContents# [ipv3_sbEeN] of pctxt_sbEeO [Dmd=<S,U>] {
                      __DEFAULT ->
                          case __pkg_ccall base-4.11.0.0 [pctxt_sbEeO GHC.Prim.void#] of {
                            (##) ->
                                case newPinnedByteArray# [4096# GHC.Prim.void#] of {
                                  Unit# ipv5_sbEeU [Occ=Once] ->
                                      case unsafeFreezeByteArray# [ipv5_sbEeU GHC.Prim.void#] of {
                                        Unit# ipv7_sbEeX ->
                                            case byteArrayContents# [ipv7_sbEeX] of arrPtr_sbEeY {
                                              __DEFAULT ->
                                                  let {
                                                    lvl3_sbEeZ [Occ=OnceL, Dmd=<L,U(U)>]
                                                      :: GHC.Ptr.Ptr GHC.Word.Word8
                                                    [LclId, Unf=OtherCon []] =
                                                        CCCS GHC.Ptr.Ptr! [arrPtr_sbEeY];
                                                  } in 
                                                    let-no-escape {
                                                      $w$j_sbEf0 [InlPrag=NOUSERINLINE[0],
                                                                  Occ=OnceL!T[1],
                                                                  Dmd=<L,C(U(U,U))>]
                                                        :: GHC.Prim.State# GHC.Prim.RealWorld
                                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                 GHC.Fingerprint.Type.Fingerprint #)
                                                      [LclId[JoinId(1)],
                                                       Arity=1,
                                                       Str=<S,U>,
                                                       Unf=OtherCon []] =
                                                          sat-only [ipv3_sbEeN
                                                                    pctxt_sbEeO
                                                                    ipv7_sbEeX] \r [void_0E]
                                                              case
                                                                  touch# [ipv7_sbEeX GHC.Prim.void#]
                                                              of
                                                              s4_sbEf2
                                                              { (##) ->
                                                                    case
                                                                        newPinnedByteArray# [16#
                                                                                             GHC.Prim.void#]
                                                                    of
                                                                    { Unit# ipv9_sbEf5 [Occ=Once] ->
                                                                          case
                                                                              unsafeFreezeByteArray# [ipv9_sbEf5
                                                                                                      GHC.Prim.void#]
                                                                          of
                                                                          { Unit# ipv11_sbEf8 ->
                                                                                case
                                                                                    byteArrayContents# [ipv11_sbEf8]
                                                                                of
                                                                                pdigest_sbEf9 [Dmd=<S,U>]
                                                                                { __DEFAULT ->
                                                                                      case
                                                                                          __pkg_ccall base-4.11.0.0 [pdigest_sbEf9
                                                                                                                     pctxt_sbEeO
                                                                                                                     GHC.Prim.void#]
                                                                                      of
                                                                                      { (##) ->
                                                                                            let {
                                                                                              sat_sbEfd [Occ=Once]
                                                                                                :: GHC.Ptr.Ptr
                                                                                                     GHC.Word.Word8
                                                                                              [LclId] =
                                                                                                  CCCS GHC.Ptr.Ptr! [pdigest_sbEf9];
                                                                                            } in 
                                                                                              case
                                                                                                  Foreign.Storable.$wpeekW64
                                                                                                      sat_sbEfd
                                                                                                      8#
                                                                                                      0##
                                                                                                      GHC.Prim.void#
                                                                                              of
                                                                                              { Unit# ipv13_sbEfg [Occ=Once] ->
                                                                                                    case
                                                                                                        plusAddr# [pdigest_sbEf9
                                                                                                                   8#]
                                                                                                    of
                                                                                                    sat_sbEfh
                                                                                                    { __DEFAULT ->
                                                                                                          let {
                                                                                                            sat_sbEfi [Occ=Once]
                                                                                                              :: GHC.Ptr.Ptr
                                                                                                                   GHC.Word.Word8
                                                                                                            [LclId] =
                                                                                                                CCCS GHC.Ptr.Ptr! [sat_sbEfh];
                                                                                                          } in 
                                                                                                            case
                                                                                                                Foreign.Storable.$wpeekW64
                                                                                                                    sat_sbEfi
                                                                                                                    8#
                                                                                                                    0##
                                                                                                                    GHC.Prim.void#
                                                                                                            of
                                                                                                            { Unit# ipv15_sbEfl [Occ=Once] ->
                                                                                                                  case
                                                                                                                      touch# [ipv11_sbEf8
                                                                                                                              GHC.Prim.void#]
                                                                                                                  of
                                                                                                                  s1_sbEfm
                                                                                                                  { (##) ->
                                                                                                                        case
                                                                                                                            touch# [ipv3_sbEeN
                                                                                                                                    GHC.Prim.void#]
                                                                                                                        of
                                                                                                                        s2_sbEfn
                                                                                                                        { (##) ->
                                                                                                                              let {
                                                                                                                                sat_sbEfo [Occ=Once]
                                                                                                                                  :: GHC.Fingerprint.Type.Fingerprint
                                                                                                                                [LclId] =
                                                                                                                                    [ipv13_sbEfg
                                                                                                                                     ipv15_sbEfl] \u []
                                                                                                                                        GHC.Fingerprint.Type.$WFingerprint
                                                                                                                                            ipv13_sbEfg
                                                                                                                                            ipv15_sbEfl;
                                                                                                                              } in 
                                                                                                                                Unit# [sat_sbEfo];
                                                                                                                        };
                                                                                                                  };
                                                                                                            };
                                                                                                    };
                                                                                              };
                                                                                      };
                                                                                };
                                                                          };
                                                                    };
                                                              };
                                                    } in 
                                                      let-no-escape {
                                                        loop_sbEfp [Occ=LoopBreakerT[1]]
                                                          :: GHC.Prim.State# GHC.Prim.RealWorld
                                                             -> (# GHC.Prim.State#
                                                                     GHC.Prim.RealWorld,
                                                                   GHC.Fingerprint.Type.Fingerprint #)
                                                        [LclId[JoinId(1)],
                                                         Arity=1,
                                                         Str=<S,U>,
                                                         Unf=OtherCon []] =
                                                            sat-only [h_sbEeG
                                                                      pctxt_sbEeO
                                                                      arrPtr_sbEeY
                                                                      lvl3_sbEeZ
                                                                      $w$j_sbEf0
                                                                      loop_sbEfp] \r [void_0E]
                                                                case
                                                                    GHC.IO.Handle.Text.$whGetBuf
                                                                        h_sbEeG
                                                                        lvl3_sbEeZ
                                                                        4096#
                                                                        GHC.Prim.void#
                                                                of
                                                                { Unit# ipv9_sbEft [Occ=Once!] ->
                                                                      case
                                                                          GHC.IO.Handle.Internals.wantReadableHandle_1
                                                                              GHC.IO.Handle.hIsEOF3
                                                                              h_sbEeG
                                                                              GHC.IO.Handle.hIsEOF2
                                                                              GHC.Prim.void#
                                                                      of
                                                                      { Unit# ipv11_sbEfw ->
                                                                            case ipv9_sbEft of {
                                                                              GHC.Types.I# x_sbEfy ->
                                                                                  let-no-escape {
                                                                                    $j_sbEfz [Occ=Once*T[0],
                                                                                              Dmd=<S,1*U(U,U)>]
                                                                                      :: (# GHC.Prim.State#
                                                                                              GHC.Prim.RealWorld,
                                                                                            GHC.Fingerprint.Type.Fingerprint #)
                                                                                    [LclId[JoinId(0)],
                                                                                     Unf=OtherCon []] =
                                                                                        [pctxt_sbEeO
                                                                                         arrPtr_sbEeY
                                                                                         $w$j_sbEf0
                                                                                         loop_sbEfp
                                                                                         ipv11_sbEfw
                                                                                         x_sbEfy] \r []
                                                                                            case
                                                                                                narrow32Int# [x_sbEfy]
                                                                                            of
                                                                                            sat_sbEfB
                                                                                            { __DEFAULT ->
                                                                                                  case
                                                                                                      __pkg_ccall base-4.11.0.0 [pctxt_sbEeO
                                                                                                                                 arrPtr_sbEeY
                                                                                                                                 sat_sbEfB
                                                                                                                                 GHC.Prim.void#]
                                                                                                  of
                                                                                                  { (##) ->
                                                                                                        case
                                                                                                            ipv11_sbEfw
                                                                                                        of
                                                                                                        { GHC.Types.False ->
                                                                                                              loop_sbEfp
                                                                                                                  GHC.Prim.void#;
                                                                                                          GHC.Types.True ->
                                                                                                              $w$j_sbEf0
                                                                                                                  GHC.Prim.void#;
                                                                                                        };
                                                                                                  };
                                                                                            };
                                                                                  } in 
                                                                                    case
                                                                                        x_sbEfy
                                                                                    of
                                                                                    wild2_sbEfF
                                                                                    { __DEFAULT ->
                                                                                          case
                                                                                              ipv11_sbEfw
                                                                                          of
                                                                                          { GHC.Types.False ->
                                                                                                GHC.Fingerprint.$wlvl
                                                                                                    wild2_sbEfF;
                                                                                            GHC.Types.True ->
                                                                                                $j_sbEfz;
                                                                                          };
                                                                                      4096# ->
                                                                                          $j_sbEfz;
                                                                                    };
                                                                            };
                                                                      };
                                                                };
                                                      } in  loop_sbEfp GHC.Prim.void#;
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.Fingerprint.getFileHash1
  :: GHC.IO.FilePath
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Fingerprint.Type.Fingerprint #)
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [path_sbEfI void_0E]
        System.IO.withBinaryFile1
            path_sbEfI
            GHC.IO.IOMode.ReadMode
            GHC.Fingerprint.getFileHash2
            GHC.Prim.void#;

GHC.Fingerprint.getFileHash
  :: GHC.IO.FilePath -> GHC.Types.IO GHC.Fingerprint.Type.Fingerprint
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.Fingerprint.getFileHash1 eta_B2 GHC.Prim.void#;

GHC.Fingerprint.$wfingerprintData [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Fingerprint.Type.Fingerprint #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S,U><S,U><S,U>,
 Unf=OtherCon []] =
    [] \r [ww_sbEfK ww1_sbEfL void_0E]
        case newPinnedByteArray# [0# GHC.Prim.void#] of {
          Unit# ipv1_sbEfP [Occ=Once] ->
              case unsafeFreezeByteArray# [ipv1_sbEfP GHC.Prim.void#] of {
                Unit# ipv3_sbEfS ->
                    case byteArrayContents# [ipv3_sbEfS] of pctxt_sbEfT [Dmd=<S,U>] {
                      __DEFAULT ->
                          case __pkg_ccall base-4.11.0.0 [pctxt_sbEfT GHC.Prim.void#] of {
                            (##) ->
                                case narrow32Int# [ww1_sbEfL] of sat_sbEfY {
                                  __DEFAULT ->
                                      case
                                          __pkg_ccall base-4.11.0.0 [pctxt_sbEfT
                                                                     ww_sbEfK
                                                                     sat_sbEfY
                                                                     GHC.Prim.void#]
                                      of
                                      { (##) ->
                                            case newPinnedByteArray# [16# GHC.Prim.void#] of {
                                              Unit# ipv5_sbEg3 [Occ=Once] ->
                                                  case
                                                      unsafeFreezeByteArray# [ipv5_sbEg3
                                                                              GHC.Prim.void#]
                                                  of
                                                  { Unit# ipv7_sbEg6 ->
                                                        case
                                                            byteArrayContents# [ipv7_sbEg6]
                                                        of
                                                        pdigest_sbEg7 [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  __pkg_ccall base-4.11.0.0 [pdigest_sbEg7
                                                                                             pctxt_sbEfT
                                                                                             GHC.Prim.void#]
                                                              of
                                                              { (##) ->
                                                                    let {
                                                                      sat_sbEgb [Occ=Once]
                                                                        :: GHC.Ptr.Ptr
                                                                             GHC.Word.Word8
                                                                      [LclId] =
                                                                          CCCS GHC.Ptr.Ptr! [pdigest_sbEg7];
                                                                    } in 
                                                                      case
                                                                          Foreign.Storable.$wpeekW64
                                                                              sat_sbEgb
                                                                              8#
                                                                              0##
                                                                              GHC.Prim.void#
                                                                      of
                                                                      { Unit# ipv9_sbEge [Occ=Once] ->
                                                                            case
                                                                                plusAddr# [pdigest_sbEg7
                                                                                           8#]
                                                                            of
                                                                            sat_sbEgf
                                                                            { __DEFAULT ->
                                                                                  let {
                                                                                    sat_sbEgg [Occ=Once]
                                                                                      :: GHC.Ptr.Ptr
                                                                                           GHC.Word.Word8
                                                                                    [LclId] =
                                                                                        CCCS GHC.Ptr.Ptr! [sat_sbEgf];
                                                                                  } in 
                                                                                    case
                                                                                        Foreign.Storable.$wpeekW64
                                                                                            sat_sbEgg
                                                                                            8#
                                                                                            0##
                                                                                            GHC.Prim.void#
                                                                                    of
                                                                                    { Unit# ipv11_sbEgj [Occ=Once] ->
                                                                                          case
                                                                                              touch# [ipv7_sbEg6
                                                                                                      GHC.Prim.void#]
                                                                                          of
                                                                                          s4_sbEgk
                                                                                          { (##) ->
                                                                                                case
                                                                                                    touch# [ipv3_sbEfS
                                                                                                            GHC.Prim.void#]
                                                                                                of
                                                                                                s1_sbEgl
                                                                                                { (##) ->
                                                                                                      let {
                                                                                                        sat_sbEgm [Occ=Once]
                                                                                                          :: GHC.Fingerprint.Type.Fingerprint
                                                                                                        [LclId] =
                                                                                                            [ipv9_sbEge
                                                                                                             ipv11_sbEgj] \u []
                                                                                                                GHC.Fingerprint.Type.$WFingerprint
                                                                                                                    ipv9_sbEge
                                                                                                                    ipv11_sbEgj;
                                                                                                      } in 
                                                                                                        Unit# [sat_sbEgm];
                                                                                                };
                                                                                          };
                                                                                    };
                                                                            };
                                                                      };
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.Fingerprint.fingerprintData1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Ptr.Ptr GHC.Word.Word8
     -> GHC.Types.Int
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Fingerprint.Type.Fingerprint #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_sbEgn w1_sbEgo void_0E]
        case w_sbEgn of {
          GHC.Ptr.Ptr ww1_sbEgr [Occ=Once] ->
              case w1_sbEgo of {
                GHC.Types.I# ww3_sbEgt [Occ=Once] ->
                    GHC.Fingerprint.$wfingerprintData
                        ww1_sbEgr ww3_sbEgt GHC.Prim.void#;
              };
        };

GHC.Fingerprint.fingerprintData
  :: GHC.Ptr.Ptr GHC.Word.Word8
     -> GHC.Types.Int -> GHC.Types.IO GHC.Fingerprint.Type.Fingerprint
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        GHC.Fingerprint.fingerprintData1 eta_B3 eta_B2 GHC.Prim.void#;

GHC.Fingerprint.fingerprintString_go [Occ=LoopBreaker]
  :: [GHC.Types.Char] -> [GHC.Word.Word8]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_sbEgu]
        case ds_sbEgu of {
          [] -> [] [];
          : y_sbEgw [Occ=Once!] ys_sbEgx [Occ=Once] ->
              let {
                w32_sbEgy [Dmd=<L,U(U)>] :: GHC.Word.Word32
                [LclId] =
                    [y_sbEgw] \u []
                        case y_sbEgw of {
                          GHC.Types.C# c#_sbEgA [Occ=Once] ->
                              case ord# [c#_sbEgA] of sat_sbEgB {
                                __DEFAULT ->
                                    case int2Word# [sat_sbEgB] of sat_sbEgC {
                                      __DEFAULT ->
                                          case narrow32Word# [sat_sbEgC] of sat_sbEgD {
                                            __DEFAULT -> GHC.Word.W32# [sat_sbEgD];
                                          };
                                    };
                              };
                        }; } in
              let {
                sat_sbEgX [Occ=Once] :: [GHC.Word.Word8]
                [LclId] =
                    [ys_sbEgx] \u []
                        GHC.Fingerprint.fingerprintString_go ys_sbEgx; } in
              let {
                sat_sbEgW [Occ=Once] :: GHC.Word.Word8
                [LclId] =
                    [w32_sbEgy] \u []
                        case w32_sbEgy of {
                          GHC.Word.W32# x#_sbEgU [Occ=Once] ->
                              case narrow8Word# [x#_sbEgU] of sat_sbEgV {
                                __DEFAULT -> GHC.Word.W8# [sat_sbEgV];
                              };
                        }; } in
              let {
                sat_sbEgY [Occ=Once] :: [GHC.Word.Word8]
                [LclId] =
                    CCCS :! [sat_sbEgW sat_sbEgX]; } in
              let {
                sat_sbEgS [Occ=Once] :: GHC.Word.Word8
                [LclId] =
                    [w32_sbEgy] \u []
                        case w32_sbEgy of {
                          GHC.Word.W32# x#_sbEgP [Occ=Once] ->
                              case uncheckedShiftRL# [x#_sbEgP 8#] of sat_sbEgQ {
                                __DEFAULT ->
                                    case narrow8Word# [sat_sbEgQ] of sat_sbEgR {
                                      __DEFAULT -> GHC.Word.W8# [sat_sbEgR];
                                    };
                              };
                        }; } in
              let {
                sat_sbEgZ [Occ=Once] :: [GHC.Word.Word8]
                [LclId] =
                    CCCS :! [sat_sbEgS sat_sbEgY]; } in
              let {
                sat_sbEgN [Occ=Once] :: GHC.Word.Word8
                [LclId] =
                    [w32_sbEgy] \u []
                        case w32_sbEgy of {
                          GHC.Word.W32# x#_sbEgK [Occ=Once] ->
                              case uncheckedShiftRL# [x#_sbEgK 16#] of sat_sbEgL {
                                __DEFAULT ->
                                    case narrow8Word# [sat_sbEgL] of sat_sbEgM {
                                      __DEFAULT -> GHC.Word.W8# [sat_sbEgM];
                                    };
                              };
                        }; } in
              let {
                sat_sbEh0 [Occ=Once] :: [GHC.Word.Word8]
                [LclId] =
                    CCCS :! [sat_sbEgN sat_sbEgZ]; } in
              let {
                sat_sbEgI [Occ=Once] :: GHC.Word.Word8
                [LclId] =
                    [w32_sbEgy] \u []
                        case w32_sbEgy of {
                          GHC.Word.W32# x#_sbEgF [Occ=Once] ->
                              case uncheckedShiftRL# [x#_sbEgF 24#] of sat_sbEgG {
                                __DEFAULT ->
                                    case narrow8Word# [sat_sbEgG] of sat_sbEgH {
                                      __DEFAULT -> GHC.Word.W8# [sat_sbEgH];
                                    };
                              };
                        };
              } in  : [sat_sbEgI sat_sbEh0];
        };

GHC.Fingerprint.fingerprintString
  :: GHC.Base.String -> GHC.Fingerprint.Type.Fingerprint
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [str_sbEh1]
        case
            GHC.Fingerprint.fingerprintString_go str_sbEh1
        of
        vals_sbEh2 [Dmd=<S,U>]
        { __DEFAULT ->
              case
                  case GHC.List.$wlenAcc vals_sbEh2 0# of ww2_sbEh3 {
                    __DEFAULT ->
                        case
                            newAlignedPinnedByteArray# [ww2_sbEh3 1# GHC.Prim.realWorld#]
                        of
                        { Unit# ipv1_sbEh6 [Occ=Once] ->
                              case unsafeFreezeByteArray# [ipv1_sbEh6 GHC.Prim.void#] of {
                                Unit# ipv3_sbEh9 ->
                                    case byteArrayContents# [ipv3_sbEh9] of ptr_sbEha [Dmd=<S,U>] {
                                      __DEFAULT ->
                                          let-no-escape {
                                            exit_sbEhb [Occ=OnceL!T[1], Dmd=<C(S),C(U)>]
                                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                       GHC.Fingerprint.Type.Fingerprint #)
                                            [LclId[JoinId(1)],
                                             Arity=1,
                                             Str=<S,U>,
                                             Unf=OtherCon []] =
                                                sat-only [ww2_sbEh3
                                                          ipv3_sbEh9
                                                          ptr_sbEha] \r [void_0E]
                                                    case
                                                        GHC.Fingerprint.$wfingerprintData
                                                            ptr_sbEha ww2_sbEh3 GHC.Prim.void#
                                                    of
                                                    { Unit# ipv5_sbEhf [Occ=Once] ->
                                                          case
                                                              touch# [ipv3_sbEh9 GHC.Prim.void#]
                                                          of
                                                          s4_sbEhg
                                                          { (##) -> Unit# [ipv5_sbEhf];
                                                          };
                                                    };
                                          } in 
                                            let-no-escape {
                                              go_sbEhh [Occ=LoopBreakerT[3]]
                                                :: [GHC.Word.Word8]
                                                   -> GHC.Prim.Int#
                                                   -> GHC.Prim.State# GHC.Prim.RealWorld
                                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                         GHC.Fingerprint.Type.Fingerprint #)
                                              [LclId[JoinId(3)],
                                               Arity=3,
                                               Str=<S,1*U><L,U><S,U>,
                                               Unf=OtherCon []] =
                                                  sat-only [ptr_sbEha
                                                            exit_sbEhb
                                                            go_sbEhh] \r [ds_sbEhi
                                                                          ds1_sbEhj
                                                                          void_0E]
                                                      case ds_sbEhi of {
                                                        [] -> exit_sbEhb GHC.Prim.void#;
                                                        : val_sbEhm [Occ=Once!]
                                                          vals1_sbEhn [Occ=Once] ->
                                                            case val_sbEhm of {
                                                              GHC.Word.W8# x_sbEhp [Occ=Once] ->
                                                                  case
                                                                      writeWord8OffAddr# [ptr_sbEha
                                                                                          ds1_sbEhj
                                                                                          x_sbEhp
                                                                                          GHC.Prim.void#]
                                                                  of
                                                                  s2_sbEhq
                                                                  { (##) ->
                                                                        case
                                                                            +# [ds1_sbEhj 1#]
                                                                        of
                                                                        sat_sbEhr
                                                                        { __DEFAULT ->
                                                                              go_sbEhh
                                                                                  vals1_sbEhn
                                                                                  sat_sbEhr
                                                                                  GHC.Prim.void#;
                                                                        };
                                                                  };
                                                            };
                                                      };
                                            } in  go_sbEhh vals_sbEh2 0# GHC.Prim.void#;
                                    };
                              };
                        };
                  }
              of
              { Unit# ipv1_sbEhu [Occ=Once] -> ipv1_sbEhu;
              };
        };

GHC.Fingerprint.fingerprintFingerprints
  :: [GHC.Fingerprint.Type.Fingerprint]
     -> GHC.Fingerprint.Type.Fingerprint
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [fs_sbEhv]
        case
            case GHC.List.$wlenAcc fs_sbEhv 0# of ww2_sbEhw {
              __DEFAULT ->
                  case *# [ww2_sbEhw 16#] of sat_sbEhx {
                    __DEFAULT ->
                        case
                            newAlignedPinnedByteArray# [sat_sbEhx 8# GHC.Prim.realWorld#]
                        of
                        { Unit# ipv1_sbEhA [Occ=Once] ->
                              case unsafeFreezeByteArray# [ipv1_sbEhA GHC.Prim.void#] of {
                                Unit# ipv3_sbEhD ->
                                    case byteArrayContents# [ipv3_sbEhD] of ptr_sbEhE [Dmd=<S,U>] {
                                      __DEFAULT ->
                                          let-no-escape {
                                            exit_sbEhF [Occ=OnceL!T[1], Dmd=<L,C(U)>]
                                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                       GHC.Fingerprint.Type.Fingerprint #)
                                            [LclId[JoinId(1)],
                                             Arity=1,
                                             Str=<S,U>,
                                             Unf=OtherCon []] =
                                                sat-only [ww2_sbEhw
                                                          ipv3_sbEhD
                                                          ptr_sbEhE] \r [void_0E]
                                                    case *# [ww2_sbEhw 16#] of sat_sbEhH {
                                                      __DEFAULT ->
                                                          case
                                                              GHC.Fingerprint.$wfingerprintData
                                                                  ptr_sbEhE sat_sbEhH GHC.Prim.void#
                                                          of
                                                          { Unit# ipv5_sbEhK [Occ=Once] ->
                                                                case
                                                                    touch# [ipv3_sbEhD
                                                                            GHC.Prim.void#]
                                                                of
                                                                s4_sbEhL
                                                                { (##) -> Unit# [ipv5_sbEhK];
                                                                };
                                                          };
                                                    };
                                          } in 
                                            let-no-escape {
                                              go_sbEhM [Occ=LoopBreakerT[3]]
                                                :: [GHC.Fingerprint.Type.Fingerprint]
                                                   -> GHC.Prim.Int#
                                                   -> GHC.Prim.State# GHC.Prim.RealWorld
                                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                         GHC.Fingerprint.Type.Fingerprint #)
                                              [LclId[JoinId(3)],
                                               Arity=3,
                                               Str=<S,1*U><L,U><S,U>,
                                               Unf=OtherCon []] =
                                                  sat-only [ptr_sbEhE
                                                            exit_sbEhF
                                                            go_sbEhM] \r [ds_sbEhN
                                                                          ds1_sbEhO
                                                                          void_0E]
                                                      case ds_sbEhN of {
                                                        [] -> exit_sbEhF GHC.Prim.void#;
                                                        : val_sbEhR [Occ=Once!]
                                                          vals_sbEhS [Occ=Once] ->
                                                            case val_sbEhR of {
                                                              GHC.Fingerprint.Type.Fingerprint ww1_sbEhU [Occ=Once]
                                                                                               ww4_sbEhV [Occ=Once] ->
                                                                  case
                                                                      *# [ds1_sbEhO 16#]
                                                                  of
                                                                  sat_sbEhX
                                                                  { __DEFAULT ->
                                                                        case
                                                                            plusAddr# [ptr_sbEhE
                                                                                       sat_sbEhX]
                                                                        of
                                                                        w_sbEhW
                                                                        { __DEFAULT ->
                                                                              let {
                                                                                sat_sbEhZ [Occ=Once]
                                                                                  :: GHC.Word.Word64
                                                                                [LclId] =
                                                                                    CCCS GHC.Word.W64#! [ww1_sbEhU]; } in
                                                                              let {
                                                                                sat_sbEhY [Occ=Once]
                                                                                  :: GHC.Ptr.Ptr
                                                                                       GHC.Word.Word8
                                                                                [LclId] =
                                                                                    CCCS GHC.Ptr.Ptr! [w_sbEhW];
                                                                              } in 
                                                                                case
                                                                                    Foreign.Storable.$wpokeW64
                                                                                        sat_sbEhY
                                                                                        8#
                                                                                        sat_sbEhZ
                                                                                        GHC.Prim.void#
                                                                                of
                                                                                { Unit# _ [Occ=Dead] ->
                                                                                      let {
                                                                                        sat_sbEi5 [Occ=Once]
                                                                                          :: GHC.Word.Word64
                                                                                        [LclId] =
                                                                                            CCCS GHC.Word.W64#! [ww4_sbEhV];
                                                                                      } in 
                                                                                        case
                                                                                            plusAddr# [w_sbEhW
                                                                                                       8#]
                                                                                        of
                                                                                        sat_sbEi3
                                                                                        { __DEFAULT ->
                                                                                              let {
                                                                                                sat_sbEi4 [Occ=Once]
                                                                                                  :: GHC.Ptr.Ptr
                                                                                                       GHC.Word.Word8
                                                                                                [LclId] =
                                                                                                    CCCS GHC.Ptr.Ptr! [sat_sbEi3];
                                                                                              } in 
                                                                                                case
                                                                                                    Foreign.Storable.$wpokeW64
                                                                                                        sat_sbEi4
                                                                                                        8#
                                                                                                        sat_sbEi5
                                                                                                        GHC.Prim.void#
                                                                                                of
                                                                                                { Unit# _ [Occ=Dead] ->
                                                                                                      case
                                                                                                          +# [ds1_sbEhO
                                                                                                              1#]
                                                                                                      of
                                                                                                      sat_sbEi9
                                                                                                      { __DEFAULT ->
                                                                                                            go_sbEhM
                                                                                                                vals_sbEhS
                                                                                                                sat_sbEi9
                                                                                                                GHC.Prim.void#;
                                                                                                      };
                                                                                                };
                                                                                        };
                                                                                };
                                                                        };
                                                                  };
                                                            };
                                                      };
                                            } in  go_sbEhM fs_sbEhv 0# GHC.Prim.void#;
                                    };
                              };
                        };
                  };
            }
        of
        { Unit# ipv1_sbEic [Occ=Once] -> ipv1_sbEic;
        };

