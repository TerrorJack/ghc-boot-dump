
==================== Raw Cmm ====================
2018-03-16 16:04:02.787678858 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:04:02.788929924 UTC

[section ""cstring" . GHC.Foreign.$trModule4_bytes" {
     GHC.Foreign.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:02.790946419 UTC

[section ""data" . GHC.Foreign.$trModule3_closure" {
     GHC.Foreign.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Foreign.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:02.792984146 UTC

[section ""cstring" . GHC.Foreign.$trModule2_bytes" {
     GHC.Foreign.$trModule2_bytes:
         I8[] [71,72,67,46,70,111,114,101,105,103,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:02.794995317 UTC

[section ""data" . GHC.Foreign.$trModule1_closure" {
     GHC.Foreign.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Foreign.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:02.796939646 UTC

[section ""data" . GHC.Foreign.$trModule_closure" {
     GHC.Foreign.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Foreign.$trModule3_closure+1;
         const GHC.Foreign.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:02.82010615 UTC

[section ""data" . $wpeekCStringLen_r8TNn_closure" {
     $wpeekCStringLen_r8TNn_closure:
         const $wpeekCStringLen_r8TNn_info;
         const 0;
 },
 sat_s8TOF_entry() //  [R1]
         { []
         }
     {offset
       c8V5g: // global
           _s8TOF::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c8V5h; else goto c8V5i;
       c8V5i: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c8V5k; else goto c8V5j;
       c8V5k: // global
           HpAlloc = 40;
           goto c8V5h;
       c8V5h: // global
           R1 = _s8TOF::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8V5j: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s8TOF::P64;
           _s8TOu::P64 = P64[_s8TOF::P64 + 16];
           _s8TOC::P64 = P64[_s8TOF::P64 + 24];
           _s8TOy::I64 = I64[_s8TOF::P64 + 32];
           I64[Hp - 32] = GHC.Types.C#_con_info;
           I64[Hp - 24] = _s8TOy::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _s8TOu::P64;
           R3 = _s8TOC::P64;
           R2 = Hp - 14;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8TOF_info" {
     sat_s8TOF_info:
         const sat_s8TOF_entry;
         const 4294967298;
         const 15;
 },
 sat_s8TOW_entry() //  [R1]
         { []
         }
     {offset
       c8V5t: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8V5u; else goto c8V5v;
       c8V5u: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8V5v: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.Types.[]_closure+1;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8TOW_info" {
     sat_s8TOW_info:
         const sat_s8TOW_entry;
         const 1;
         const 16;
 },
 $wgo_s8TNW_entry() //  [R1, R2]
         { []
         }
     {offset
       c8V5w: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c8V5x; else goto c8V5y;
       c8V5x: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8V5y: // global
           I64[Sp - 32] = block_c8V3V_info;
           _s8TNW::P64 = R1;
           _s8TNV::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 24] = _s8TNV::P64;
           P64[Sp - 16] = _s8TNW::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u8V78; else goto c8V3W;
       u8V78: // global
           call _c8V3V(R1) args: 0, res: 0, upd: 0;
       c8V3W: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wgo_s8TNW_info" {
     $wgo_s8TNW_info:
         const $wgo_s8TNW_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _c8V3V() //  [R1]
         { []
         }
     {offset
       c8V3V: // global
           _s8TNV::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c8V40_info;
           R3 = _s8TNV::P64;
           R2 = P64[Sp + 24];
           _s8TO1::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp + 24] = _s8TO1::P64;
           Sp = Sp + 8;
           call stg_ap_ppv_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8V3V_info" {
     block_c8V3V_info:
         const _c8V3V;
         const 3;
         const 30;
 },
 _c8V40() //  [R1]
         { []
         }
     {offset
       c8V40: // global
           I64[Sp] = block_c8V42_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u8V70; else goto c8V43;
       u8V70: // global
           call _c8V42(R1) args: 0, res: 0, upd: 0;
       c8V43: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8V40_info" {
     block_c8V40_info:
         const _c8V40;
         const 2;
         const 30;
 },
 _c8V42() //  [R1]
         { []
         }
     {offset
       c8V42: // global
           I64[Sp - 16] = block_c8V47_info;
           _s8TO9::P64 = P64[R1 + 7];
           _s8TOb::P64 = P64[R1 + 23];
           R1 = P64[R1 + 15];
           P64[Sp - 8] = _s8TOb::P64;
           P64[Sp] = _s8TO9::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8V71; else goto c8V48;
       u8V71: // global
           call _c8V47(R1) args: 0, res: 0, upd: 0;
       c8V48: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8V42_info" {
     block_c8V42_info:
         const _c8V42;
         const 2;
         const 30;
 },
 _c8V47() //  [R1]
         { []
         }
     {offset
       c8V47: // global
           if (I64[R1 + 39] == I64[R1 + 47]) goto c8V6t; else goto c8V5W;
       c8V6t: // global
           I64[Sp + 32] = block_c8V4F_info;
           R1 = P64[Sp + 8];
           Sp = Sp + 32;
           if (R1 & 7 != 0) goto u8V73; else goto c8V4G;
       u8V73: // global
           call _c8V4F(R1) args: 0, res: 0, upd: 0;
       c8V4G: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8V5W: // global
           I64[Sp] = block_c8V5D_info;
           _s8TOc::P64 = R1;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s8TOc::P64;
           if (R1 & 7 != 0) goto u8V72; else goto c8V5X;
       u8V72: // global
           call _c8V5D(R1) args: 0, res: 0, upd: 0;
       c8V5X: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8V47_info" {
     block_c8V47_info:
         const _c8V47;
         const 4;
         const 30;
 },
 _c8V4F() //  [R1]
         { []
         }
     {offset
       c8V4F: // global
           _s8TPk::P64 = P64[R1 + 7];
           _s8TPp::I64 = I64[R1 + 47] - I64[R1 + 39];
           if (%MO_S_Gt_W64(_s8TPp::I64, 0)) goto c8V6L; else goto c8V6M;
       c8V6L: // global
           P64[Sp - 24] = _s8TPk::P64;
           I64[Sp - 16] = _s8TPp::I64 - 1;
           P64[Sp - 8] = GHC.Types.[]_closure+1;
           I64[Sp] = I64[R1 + 23];
           Sp = Sp - 32;
           call _c8V4X() args: 0, res: 0, upd: 0;
       c8V6M: // global
           call MO_Touch(_s8TPk::P64);
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8V4F_info" {
     block_c8V4F_info:
         const _c8V4F;
         const 0;
         const 30;
 },
 _c8V4X() //  []
         { []
         }
     {offset
       c8V4X: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c8V6G; else goto c8V6F;
       c8V6G: // global
           HpAlloc = 40;
           I64[Sp] = block_c8V4X_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c8V6F: // global
           _s8TPC::P64 = P64[Sp + 24];
           _s8TPE::I64 = I64[Sp + 16];
           if (_s8TPE::I64 != 0) goto c8V6I; else goto c8V6J;
       c8V6I: // global
           I64[Hp - 32] = GHC.Types.C#_con_info;
           I64[Hp - 24] = %MO_UU_Conv_W32_W64(I32[I64[Sp + 32] + (_s8TPE::I64 << 2)]);
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _s8TPC::P64;
           I64[Sp + 16] = _s8TPE::I64 - 1;
           P64[Sp + 24] = Hp - 14;
           call _c8V4X() args: 0, res: 0, upd: 0;
       c8V6J: // global
           Hp = Hp - 40;
           P64[Sp + 24] = _s8TPC::P64;
           Sp = Sp + 8;
           call _c8V6w() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8V4X_info" {
     block_c8V4X_info:
         const _c8V4X;
         const 644;
         const 30;
 },
 _c8V6w() //  []
         { []
         }
     {offset
       c8V6w: // global
           Hp = Hp + 40;
           _s8TPs::P64 = P64[Sp + 16];
           if (Hp > HpLim) (likely: False) goto c8V6D; else goto c8V6C;
       c8V6D: // global
           HpAlloc = 40;
           I64[Sp - 8] = block_c8V6v_info;
           R1 = _s8TPs::P64;
           Sp = Sp - 8;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8V6C: // global
           _s8TPw::I64 = %MO_UU_Conv_W32_W64(I32[I64[Sp + 24]]);
           call MO_Touch(P64[Sp]);
           I64[Hp - 32] = GHC.Types.C#_con_info;
           I64[Hp - 24] = _s8TPw::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _s8TPs::P64;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8V6v() //  [R1]
         { []
         }
     {offset
       c8V6v: // global
           P64[Sp + 24] = R1;
           Sp = Sp + 8;
           call _c8V6w() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8V6v_info" {
     block_c8V6v_info:
         const _c8V6v;
         const 900;
         const 30;
 },
 _c8V5D() //  [R1]
         { []
         }
     {offset
       c8V5D: // global
           _s8TOb::P64 = P64[Sp + 8];
           if (R1 & 7 == 2) goto c8V6n; else goto c8V6b;
       c8V6n: // global
           I64[Sp + 8] = block_c8V6l_info;
           R1 = _s8TOb::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8V79; else goto c8V6o;
       u8V79: // global
           call _c8V6l(R1) args: 0, res: 0, upd: 0;
       c8V6o: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8V6b: // global
           _s8TOc::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c8V61_info;
           R3 = _s8TOb::P64;
           R2 = _s8TOc::P64;
           R1 = P64[Sp + 32];
           Sp = Sp + 16;
           call stg_ap_ppv_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8V5D_info" {
     block_c8V5D_info:
         const _c8V5D;
         const 4;
         const 30;
 },
 _c8V6l() //  [R1]
         { []
         }
     {offset
       c8V6l: // global
           P64[Sp + 24] = P64[Sp + 8];
           I64[Sp + 8] = I64[R1 + 23];
           P64[Sp - 16] = P64[R1 + 7];
           I64[Sp - 8] = I64[R1 + 39];
           I64[Sp] = I64[R1 + 47];
           Sp = Sp - 16;
           call _s8TOk() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8V6l_info" {
     block_c8V6l_info:
         const _c8V6l;
         const 259;
         const 30;
 },
 _c8V61() //  [R1]
         { []
         }
     {offset
       c8V61: // global
           I64[Sp] = block_c8V63_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u8V7a; else goto c8V64;
       u8V7a: // global
           call _c8V63(R1) args: 0, res: 0, upd: 0;
       c8V64: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8V61_info" {
     block_c8V61_info:
         const _c8V61;
         const 130;
         const 30;
 },
 _c8V63() //  [R1]
         { []
         }
     {offset
       c8V63: // global
           I64[Sp] = block_c8V68_info;
           _s8TP2::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp + 16] = _s8TP2::P64;
           if (R1 & 7 != 0) goto u8V7b; else goto c8V6e;
       u8V7b: // global
           call _c8V68(R1) args: 0, res: 0, upd: 0;
       c8V6e: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8V63_info" {
     block_c8V63_info:
         const _c8V63;
         const 130;
         const 30;
 },
 _c8V68() //  [R1]
         { []
         }
     {offset
       c8V68: // global
           P64[Sp - 24] = P64[R1 + 7];
           I64[Sp - 16] = I64[R1 + 39];
           I64[Sp - 8] = I64[R1 + 47];
           I64[Sp] = I64[R1 + 23];
           P64[Sp + 16] = P64[Sp + 16];
           Sp = Sp - 24;
           call _s8TOk() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8V68_info" {
     block_c8V68_info:
         const _c8V68;
         const 2;
         const 30;
 },
 _s8TOk() //  []
         { []
         }
     {offset
       s8TOk: // global
           _s8TOr::I64 = I64[Sp + 16] - I64[Sp + 8];
           if (%MO_S_Gt_W64(_s8TOr::I64, 0)) goto c8V5Q; else goto c8V5R;
       c8V5Q: // global
           P64[Sp + 8] = GHC.Types.[]_closure+1;
           I64[Sp + 16] = _s8TOr::I64 - 1;
           Sp = Sp - 8;
           call _c8V4x() args: 0, res: 0, upd: 0;
       c8V5R: // global
           _s8TNW::P64 = P64[Sp + 32];
           _s8TOm::P64 = P64[Sp + 40];
           call MO_Touch(P64[Sp]);
           I64[Sp + 40] = block_c8V5n_info;
           R2 = _s8TOm::P64;
           R1 = _s8TNW::P64;
           Sp = Sp + 40;
           call $wgo_s8TNW_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c8V4x() //  []
         { []
         }
     {offset
       c8V4x: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c8V5L; else goto c8V5K;
       c8V5L: // global
           HpAlloc = 40;
           I64[Sp] = block_c8V4x_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c8V5K: // global
           _s8TOn::I64 = I64[Sp + 32];
           _s8TOI::P64 = P64[Sp + 16];
           _s8TOK::I64 = I64[Sp + 24];
           if (_s8TOK::I64 != 0) goto c8V5N; else goto c8V5O;
       c8V5N: // global
           _s8TON::I64 = %MO_UU_Conv_W32_W64(I32[_s8TOn::I64 + (_s8TOK::I64 << 2)]);
           I64[Hp - 32] = GHC.Types.C#_con_info;
           I64[Hp - 24] = _s8TON::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _s8TOI::P64;
           I64[Sp + 24] = _s8TOK::I64 - 1;
           P64[Sp + 16] = Hp - 14;
           call _c8V4x() args: 0, res: 0, upd: 0;
       c8V5O: // global
           Hp = Hp - 40;
           _s8TNW::P64 = P64[Sp + 40];
           _s8TOm::P64 = P64[Sp + 48];
           _s8TOy::I64 = %MO_UU_Conv_W32_W64(I32[_s8TOn::I64]);
           call MO_Touch(P64[Sp + 8]);
           I64[Sp + 32] = block_c8V58_info;
           R2 = _s8TOm::P64;
           R1 = _s8TNW::P64;
           I64[Sp + 40] = _s8TOy::I64;
           P64[Sp + 48] = _s8TOI::P64;
           Sp = Sp + 32;
           call $wgo_s8TNW_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8V4x_info" {
     block_c8V4x_info:
         const _c8V4x;
         const 774;
         const 30;
 },
 _c8V58() //  [R1]
         { []
         }
     {offset
       c8V58: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c8V5I; else goto c8V5H;
       c8V5I: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8V5H: // global
           I64[Hp - 32] = sat_s8TOF_info;
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = R1;
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 32;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8V58_info" {
     block_c8V58_info:
         const _c8V58;
         const 66;
         const 30;
 },
 _c8V5n() //  [R1]
         { []
         }
     {offset
       c8V5n: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8V5U; else goto c8V5T;
       c8V5U: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8V5T: // global
           I64[Hp - 16] = sat_s8TOW_info;
           P64[Hp] = R1;
           R1 = Hp - 16;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8V5n_info" {
     block_c8V5n_info:
         const _c8V5n;
         const 0;
         const 30;
 },
 sat_s8TPR_entry() //  [R1, R2]
         { []
         }
     {offset
       c8V7g: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c8V7h; else goto c8V7i;
       c8V7h: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8V7i: // global
           I64[Sp - 24] = block_c8V3k_info;
           _s8TNu::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 16] = _s8TNu::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u8V7C; else goto c8V3l;
       u8V7C: // global
           call _c8V3k(R1) args: 0, res: 0, upd: 0;
       c8V3l: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8TPR_info" {
     sat_s8TPR_info:
         const sat_s8TPR_entry;
         const 2;
         const 4294967307;
         const 8589934597;
         const S8U6c_srt;
 },
 _c8V3k() //  [R1]
         { []
         }
     {offset
       c8V3k: // global
           I64[Sp - 8] = block_c8V3p_info;
           _s8TND::I64 = I64[R1 + 7];
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           I64[Sp] = _s8TND::I64;
           Sp = Sp - 8;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8V3k_info" {
     block_c8V3k_info:
         const _c8V3k;
         const 2;
         const 4294967326;
         const S8U6c_srt;
 },
 _c8V3p() //  [R1]
         { []
         }
     {offset
       c8V3p: // global
           I64[Sp] = block_c8V3r_info;
           _s8TNG::P64 = R1;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s8TNG::P64;
           if (R1 & 7 != 0) goto u8V7B; else goto c8V3s;
       u8V7B: // global
           call _c8V3r(R1) args: 0, res: 0, upd: 0;
       c8V3s: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8V3p_info" {
     block_c8V3p_info:
         const _c8V3p;
         const 67;
         const 4294967326;
         const S8U6c_srt;
 },
 _c8V3r() //  [R1]
         { []
         }
     {offset
       c8V3r: // global
           _s8TNI::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(_s8TNI::I64, 1)) goto c8V7z; else goto c8V7A;
       c8V7z: // global
           _s8TNK::I64 = _s8TNI::I64;
           goto s8TNJ;
       c8V7A: // global
           _s8TNK::I64 = 1;
           goto s8TNJ;
       s8TNJ: // global
           _s8TNL::I64 = _s8TNK::I64 << 2;
           if (%MO_S_Ge_W64(_s8TNL::I64, 0)) goto c8V7q; else goto c8V7v;
       c8V7q: // global
           I64[Sp - 24] = block_c8V3H_info;
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           I64[Sp - 16] = _s8TNK::I64;
           I64[Sp - 8] = _s8TNL::I64;
           I64[Sp] = _s8TNI::I64;
           Sp = Sp - 24;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
       c8V7v: // global
           R1 = GHC.ForeignPtr.mallocForeignPtrBytes2_closure;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8V3r_info" {
     block_c8V3r_info:
         const _c8V3r;
         const 67;
         const 4294967326;
         const S8U6c_srt;
 },
 _c8V3H() //  [R1]
         { []
         }
     {offset
       c8V3H: // global
           I64[Sp] = block_c8V3J_info;
           _s8TNP::P64 = R1;
           R1 = I64[Sp + 16];
           P64[Sp + 16] = _s8TNP::P64;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8V3H_info" {
     block_c8V3H_info:
         const _c8V3H;
         const 966;
         const 30;
 },
 _c8V3J() //  [R1]
         { []
         }
     {offset
       c8V3J: // global
           Hp = Hp + 176;
           if (Hp > HpLim) (likely: False) goto c8V7u; else goto c8V7t;
       c8V7u: // global
           HpAlloc = 176;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8V7t: // global
           I64[Hp - 168] = GHC.ForeignPtr.MallocPtr_con_info;
           P64[Hp - 160] = R1;
           P64[Hp - 152] = P64[Sp + 16];
           I64[Hp - 144] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 136] = Hp - 166;
           P64[Hp - 128] = GHC.IO.Buffer.WriteBuffer_closure+2;
           P64[Hp - 120] = R1 + 16;
           I64[Hp - 112] = I64[Sp + 8];
           I64[Hp - 104] = 0;
           I64[Hp - 96] = 0;
           I64[Hp - 88] = $wgo_s8TNW_info;
           P64[Hp - 80] = P64[Sp + 48];
           P64[Hp - 72] = Hp - 143;
           I64[Hp - 64] = GHC.ForeignPtr.PlainForeignPtr_con_info;
           P64[Hp - 56] = P64[Sp + 40];
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = Hp - 63;
           P64[Hp - 32] = GHC.IO.Buffer.ReadBuffer_closure+1;
           I64[Hp - 24] = I64[Sp + 32];
           _s8TNI::I64 = I64[Sp + 24];
           I64[Hp - 16] = _s8TNI::I64;
           I64[Hp - 8] = 0;
           I64[Hp] = _s8TNI::I64;
           R2 = Hp - 47;
           R1 = Hp - 86;
           Sp = Sp + 56;
           call $wgo_s8TNW_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8V3J_info" {
     block_c8V3J_info:
         const _c8V3J;
         const 838;
         const 30;
 },
 $wpeekCStringLen_r8TNn_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c8V7D: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8V7E; else goto c8V7F;
       c8V7E: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = $wpeekCStringLen_r8TNn_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8V7F: // global
           I64[Sp - 24] = block_c8V3a_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u8V7J; else goto c8V3b;
       u8V7J: // global
           call _c8V3a(R1) args: 0, res: 0, upd: 0;
       c8V3b: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wpeekCStringLen_r8TNn_info" {
     $wpeekCStringLen_r8TNn_info:
         const $wpeekCStringLen_r8TNn_entry;
         const 0;
         const 12884901902;
         const 17179869207;
         const S8U6c_srt;
 },
 _c8V3a() //  [R1]
         { []
         }
     {offset
       c8V3a: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8V7I; else goto c8V7H;
       c8V7I: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8V7H: // global
           _s8TNy::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_s8TPR_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           R4 = Hp - 14;
           R3 = GHC.IO.Encoding.Types.close_closure+1;
           R2 = _s8TNy::P64;
           Sp = Sp + 24;
           call GHC.IO.bracket1_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8V3a_info" {
     block_c8V3a_info:
         const _c8V3a;
         const 2;
         const 4294967326;
         const S8U6c_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:02.873711761 UTC

[section ""data" . peekCStringLen1_r8TNo_closure" {
     peekCStringLen1_r8TNo_closure:
         const peekCStringLen1_r8TNo_info;
         const 0;
 },
 peekCStringLen1_r8TNo_entry() //  [R2, R3]
         { []
         }
     {offset
       c8Vad: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8Vae; else goto c8Vaf;
       c8Vae: // global
           R3 = R3;
           R2 = R2;
           R1 = peekCStringLen1_r8TNo_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8Vaf: // global
           I64[Sp - 16] = block_c8Vaa_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8Vaj; else goto c8Vab;
       u8Vaj: // global
           call _c8Vaa(R1) args: 0, res: 0, upd: 0;
       c8Vab: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . peekCStringLen1_r8TNo_info" {
     peekCStringLen1_r8TNo_info:
         const peekCStringLen1_r8TNo_entry;
         const 0;
         const 12884901902;
         const 12884901903;
         const S8U6c_srt+8;
 },
 _c8Vaa() //  [R1]
         { []
         }
     {offset
       c8Vaa: // global
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call $wpeekCStringLen_r8TNn_entry(R4,
                                             R3,
                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Vaa_info" {
     block_c8Vaa_info:
         const _c8Vaa;
         const 1;
         const 4294967326;
         const S8U6c_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:02.87985167 UTC

[section ""data" . GHC.Foreign.peekCStringLen_closure" {
     GHC.Foreign.peekCStringLen_closure:
         const GHC.Foreign.peekCStringLen_info;
         const 0;
 },
 GHC.Foreign.peekCStringLen_entry() //  [R2, R3]
         { []
         }
     {offset
       c8Vax: // global
           R3 = R3;
           R2 = R2;
           call peekCStringLen1_r8TNo_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Foreign.peekCStringLen_info" {
     GHC.Foreign.peekCStringLen_info:
         const GHC.Foreign.peekCStringLen_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const S8U6c_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:02.891822194 UTC

[section ""data" . GHC.Foreign.$wtryFillBufferAndCall_closure" {
     GHC.Foreign.$wtryFillBufferAndCall_closure:
         const GHC.Foreign.$wtryFillBufferAndCall_info;
 },
 GHC.Foreign.$wtryFillBufferAndCall_slow() //  [R1]
         { []
         }
     {offset
       c8VaF: // global
           R6 = I64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Foreign.$wtryFillBufferAndCall_entry(R6,
                                                         R5,
                                                         R4,
                                                         R3,
                                                         R2,
                                                         R1) args: 24, res: 0, upd: 8;
     }
 },
 sat_s8TRg_entry() //  [R1]
         { []
         }
     {offset
       c8VaS: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c8VaX; else goto c8VaY;
       c8VaX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8VaY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c8VaP_info;
           _s8TQ8::P64 = P64[R1 + 24];
           _s8TQ2::I64 = I64[R1 + 32];
           R1 = P64[R1 + 16];
           I64[Sp - 32] = _s8TQ2::I64;
           P64[Sp - 24] = _s8TQ8::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u8Vb2; else goto c8VaQ;
       u8Vb2: // global
           call _c8VaP(R1) args: 0, res: 0, upd: 0;
       c8VaQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8TRg_info" {
     sat_s8TRg_info:
         const sat_s8TRg_entry;
         const 4294967298;
         const 15;
 },
 _c8VaP() //  [R1]
         { []
         }
     {offset
       c8VaP: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c8Vb1; else goto c8Vb0;
       c8Vb1: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c8Vb0: // global
           _s8TRe::I64 = I64[R1 + 7];
           I64[Hp - 64] = GHC.ForeignPtr.PlainForeignPtr_con_info;
           P64[Hp - 56] = P64[Sp + 16];
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = Hp - 63;
           P64[Hp - 32] = GHC.IO.Buffer.WriteBuffer_closure+2;
           I64[Hp - 24] = I64[Sp + 8];
           I64[Hp - 16] = _s8TRe::I64;
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           R1 = Hp - 47;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c8VaP_info" {
     block_c8VaP_info:
         const _c8VaP;
         const 66;
         const 30;
 },
 GHC.Foreign.$wtryFillBufferAndCall_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c8Vb7: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c8Vb8; else goto c8Vb9;
       c8Vb8: // global
           R1 = GHC.Foreign.$wtryFillBufferAndCall_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           I64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       c8Vb9: // global
           I64[Sp - 48] = block_c8VaJ_info;
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           I64[Sp - 8] = R6;
           Sp = Sp - 48;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Foreign.$wtryFillBufferAndCall_info" {
     GHC.Foreign.$wtryFillBufferAndCall_info:
         const GHC.Foreign.$wtryFillBufferAndCall_entry;
         const 0;
         const 14;
         const 34359738368;
         const 0;
         const 1031;
         const GHC.Foreign.$wtryFillBufferAndCall_slow;
 },
 _c8VaJ() //  [R1]
         { []
         }
     {offset
       c8VaJ: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c8Vbc; else goto c8Vbb;
       c8Vbc: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8Vbb: // global
           I64[Hp - 32] = sat_s8TRg_info;
           P64[Hp - 16] = P64[Sp + 48];
           P64[Hp - 8] = R1;
           I64[Hp] = I64[Sp + 40];
           P64[Sp + 40] = Hp - 32;
           P64[Sp + 48] = P64[Sp + 32];
           Sp = Sp + 8;
           call _c8VcH() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8VaJ_info" {
     block_c8VaJ_info:
         const _c8VaJ;
         const 1031;
         const 30;
 },
 _c8VcH() //  []
         { []
         }
     {offset
       c8VcH: // global
           I64[Sp - 8] = block_c8VcJ_info;
           R3 = P64[Sp + 32];
           R2 = P64[Sp + 40];
           R1 = P64[Sp];
           Sp = Sp - 8;
           call stg_ap_ppv_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c8VcJ() //  [R1]
         { []
         }
     {offset
       c8VcJ: // global
           I64[Sp] = block_c8VcL_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u8VdF; else goto c8VcM;
       u8VdF: // global
           call _c8VcL(R1) args: 0, res: 0, upd: 0;
       c8VcM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8VcJ_info" {
     block_c8VcJ_info:
         const _c8VcJ;
         const 3591;
         const 30;
 },
 _c8VcL() //  [R1]
         { []
         }
     {offset
       c8VcL: // global
           I64[Sp] = block_c8VcQ_info;
           _s8TQV::P64 = P64[R1 + 7];
           _s8TQX::P64 = P64[R1 + 23];
           R1 = P64[R1 + 15];
           P64[Sp + 40] = _s8TQX::P64;
           P64[Sp + 48] = _s8TQV::P64;
           if (R1 & 7 != 0) goto u8VdG; else goto c8VcU;
       u8VdG: // global
           call _c8VcQ(R1) args: 0, res: 0, upd: 0;
       c8VcU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8VcL_info" {
     block_c8VcL_info:
         const _c8VcL;
         const 3591;
         const 30;
 },
 _c8VcQ() //  [R1]
         { []
         }
     {offset
       c8VcQ: // global
           if (I64[R1 + 39] == I64[R1 + 47]) goto c8Vdp; else goto c8Vd4;
       c8Vdp: // global
           I64[Sp + 16] = block_c8Vbi_info;
           R1 = P64[Sp + 24];
           P64[Sp + 48] = P64[Sp + 40];
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto u8VdI; else goto c8Vca;
       u8VdI: // global
           call _c8Vbi(R1) args: 0, res: 0, upd: 0;
       c8Vca: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8Vd4: // global
           I64[Sp] = block_c8Vd2_info;
           _s8TQY::P64 = R1;
           R1 = P64[Sp + 48];
           P64[Sp + 48] = _s8TQY::P64;
           if (R1 & 7 != 0) goto u8VdH; else goto c8Vd5;
       u8VdH: // global
           call _c8Vd2(R1) args: 0, res: 0, upd: 0;
       c8Vd5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8VcQ_info" {
     block_c8VcQ_info:
         const _c8VcQ;
         const 519;
         const 30;
 },
 _c8Vbi() //  [R1]
         { []
         }
     {offset
       c8Vbi: // global
           if (R1 & 7 == 1) goto u8Vdw; else goto c8Vcl;
       u8Vdw: // global
           Sp = Sp + 8;
           call _s8TQc() args: 0, res: 0, upd: 0;
       c8Vcl: // global
           I64[Sp] = block_c8Vcj_info;
           R1 = P64[Sp + 32];
           if (R1 & 7 != 0) goto u8VdA; else goto c8Vcm;
       u8VdA: // global
           call _c8Vcj(R1) args: 0, res: 0, upd: 0;
       c8Vcm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Vbi_info" {
     block_c8Vbi_info:
         const _c8Vbi;
         const 389;
         const 30;
 },
 _c8Vcj() //  [R1]
         { []
         }
     {offset
       c8Vcj: // global
           if (I64[R1 + 31] - I64[R1 + 47] == 0) goto u8Vdx; else goto u8Vdy;
       u8Vdx: // global
           Sp = Sp + 48;
           call _c8VcC() args: 0, res: 0, upd: 0;
       u8Vdy: // global
           Sp = Sp + 8;
           call _s8TQc() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8Vcj_info" {
     block_c8Vcj_info:
         const _c8Vcj;
         const 389;
         const 30;
 },
 _s8TQc() //  []
         { []
         }
     {offset
       s8TQc: // global
           I64[Sp - 8] = block_c8Vbn_info;
           R1 = P64[Sp + 24];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8VdM; else goto c8Vbp;
       u8VdM: // global
           call _c8Vbn(R1) args: 0, res: 0, upd: 0;
       c8Vbp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c8Vbn() //  [R1]
         { []
         }
     {offset
       c8Vbn: // global
           I64[Sp] = block_c8Vbt_info;
           _s8TQf::P64 = P64[R1 + 7];
           _s8TQe::I64 = I64[R1 + 23];
           _s8TQi::I64 = I64[R1 + 39];
           _s8TQj::I64 = I64[R1 + 47];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s8TQj::I64;
           I64[Sp + 16] = _s8TQi::I64;
           P64[Sp + 24] = _s8TQf::P64;
           I64[Sp + 32] = _s8TQe::I64;
           if (R1 & 7 != 0) goto u8VdC; else goto c8Vbv;
       u8VdC: // global
           call _c8Vbt(R1) args: 0, res: 0, upd: 0;
       c8Vbv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Vbn_info" {
     block_c8Vbn_info:
         const _c8Vbn;
         const 901;
         const 30;
 },
 _c8Vbt() //  [R1]
         { []
         }
     {offset
       c8Vbt: // global
           _s8TQ4::P64 = P64[Sp + 40];
           _s8TQe::I64 = I64[Sp + 32];
           _s8TQi::I64 = I64[Sp + 16];
           _s8TQj::I64 = I64[Sp + 8];
           if (R1 & 7 == 1) goto c8VbK; else goto c8Vc3;
       c8VbK: // global
           Hp = Hp + 56;
           _s8TQk::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c8Vc6; else goto c8VbM;
       c8VbM: // global
           I64[Hp - 48] = GHC.Types.I#_con_info;
           I64[Hp - 40] = _s8TQj::I64 - _s8TQi::I64;
           I64[Hp - 32] = GHC.Ptr.Ptr_con_info;
           I64[Hp - 24] = _s8TQe::I64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           I64[Sp + 16] = block_c8VbF_info;
           R2 = Hp - 15;
           R1 = _s8TQ4::P64;
           Sp = Sp + 16;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
       c8Vc3: // global
           Hp = Hp + 56;
           _s8TQk::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c8Vc6; else goto c8Vc5;
       c8Vc6: // global
           HpAlloc = 56;
           R1 = _s8TQk::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8Vc5: // global
           I8[_s8TQe::I64 + _s8TQj::I64] = 0 :: W8;
           I64[Hp - 48] = GHC.Types.I#_con_info;
           I64[Hp - 40] = _s8TQj::I64 - _s8TQi::I64;
           I64[Hp - 32] = GHC.Ptr.Ptr_con_info;
           I64[Hp - 24] = _s8TQe::I64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           I64[Sp + 16] = block_c8VbZ_info;
           R2 = Hp - 15;
           R1 = _s8TQ4::P64;
           Sp = Sp + 16;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Vbt_info" {
     block_c8Vbt_info:
         const _c8Vbt;
         const 709;
         const 30;
 },
 _c8VbF() //  [R1]
         { []
         }
     {offset
       c8VbF: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8VbQ; else goto c8VbP;
       c8VbQ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8VbP: // global
           call MO_Touch(P64[Sp + 8]);
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8VbF_info" {
     block_c8VbF_info:
         const _c8VbF;
         const 387;
         const 30;
 },
 _c8VbZ() //  [R1]
         { []
         }
     {offset
       c8VbZ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8Vc9; else goto c8Vc8;
       c8Vc9: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8Vc8: // global
           call MO_Touch(P64[Sp + 8]);
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8VbZ_info" {
     block_c8VbZ_info:
         const _c8VbZ;
         const 387;
         const 30;
 },
 _c8Vd2() //  [R1]
         { []
         }
     {offset
       c8Vd2: // global
           if (R1 & 7 == 2) goto u8Vdu; else goto c8Vde;
       u8Vdu: // global
           Sp = Sp + 64;
           call _c8VcC() args: 0, res: 0, upd: 0;
       c8Vde: // global
           I64[Sp] = block_c8Vd9_info;
           R3 = P64[Sp + 40];
           R2 = P64[Sp + 48];
           R1 = P64[Sp + 16];
           call stg_ap_ppv_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Vd2_info" {
     block_c8Vd2_info:
         const _c8Vd2;
         const 519;
         const 30;
 },
 _c8VcC() //  []
         { []
         }
     {offset
       c8VcC: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8Vd9() //  [R1]
         { []
         }
     {offset
       c8Vd9: // global
           I64[Sp] = block_c8Vdb_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u8VdK; else goto c8Vdg;
       u8VdK: // global
           call _c8Vdb(R1) args: 0, res: 0, upd: 0;
       c8Vdg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Vd9_info" {
     block_c8Vd9_info:
         const _c8Vd9;
         const 3591;
         const 30;
 },
 _c8Vdb() //  [R1]
         { []
         }
     {offset
       c8Vdb: // global
           P64[Sp + 48] = P64[R1 + 7];
           P64[Sp + 40] = P64[R1 + 15];
           Sp = Sp + 8;
           call _c8VcH() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8Vdb_info" {
     block_c8Vdb_info:
         const _c8Vdb;
         const 3591;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:02.93026535 UTC

[section ""data" . GHC.Foreign.newCStringLen1_closure" {
     GHC.Foreign.newCStringLen1_closure:
         const GHC.Foreign.newCStringLen1_info;
 },
 GHC.Foreign.newCStringLen1_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c8Vfw: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c8VfA; else goto c8VfB;
       c8VfA: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Foreign.newCStringLen1_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       c8VfB: // global
           I64[Sp - 40] = block_c8Vft_info;
           R1 = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u8VfJ; else goto c8Vfu;
       u8VfJ: // global
           call _c8Vft(R1) args: 0, res: 0, upd: 0;
       c8Vfu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Foreign.newCStringLen1_info" {
     GHC.Foreign.newCStringLen1_info:
         const GHC.Foreign.newCStringLen1_entry;
         const 0;
         const 14;
         const 30064771098;
 },
 _c8Vft() //  [R1]
         { []
         }
     {offset
       c8Vft: // global
           I64[Sp - 8] = block_c8Vfz_info;
           _s8TRp::P64 = P64[R1 + 7];
           _s8TRq::P64 = P64[R1 + 15];
           R1 = P64[Sp + 24];
           P64[Sp] = _s8TRq::P64;
           P64[Sp + 24] = _s8TRp::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8VfI; else goto c8VfD;
       u8VfI: // global
           call _c8Vfz(R1) args: 0, res: 0, upd: 0;
       c8VfD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Vft_info" {
     block_c8Vft_info:
         const _c8Vft;
         const 5;
         const 30;
 },
 _c8Vfz() //  [R1]
         { []
         }
     {offset
       c8Vfz: // global
           R6 = I64[R1 + 7];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 32];
           Sp = Sp + 40;
           call GHC.Foreign.$wtryFillBufferAndCall_entry(R6,
                                                         R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Vfz_info" {
     block_c8Vfz_info:
         const _c8Vfz;
         const 6;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:02.946600687 UTC

[section ""data" . withEncodedCString1_r8TNp_closure" {
     withEncodedCString1_r8TNp_closure:
         const withEncodedCString1_r8TNp_info;
 },
 $wgo_s8TRX_entry() //  [R1, R2]
         { []
         }
     {offset
       c8VgG: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c8VgH; else goto c8VgI;
       c8VgH: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8VgI: // global
           I64[Sp - 56] = block_c8VgB_info;
           _s8TRX::P64 = R1;
           _s8TRx::P64 = P64[R1 + 6];
           _s8TRz::P64 = P64[R1 + 14];
           _s8TRF::P64 = P64[R1 + 22];
           _s8TRW::P64 = P64[R1 + 30];
           R1 = R2;
           P64[Sp - 48] = _s8TRx::P64;
           P64[Sp - 40] = _s8TRz::P64;
           P64[Sp - 32] = _s8TRF::P64;
           P64[Sp - 24] = _s8TRW::P64;
           P64[Sp - 16] = _s8TRX::P64;
           I64[Sp - 8] = R2;
           Sp = Sp - 56;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wgo_s8TRX_info" {
     $wgo_s8TRX_info:
         const $wgo_s8TRX_entry;
         const 4;
         const 8;
         const 8589934596;
 },
 _c8VgB() //  [R1]
         { []
         }
     {offset
       c8VgB: // global
           I64[Sp] = block_c8VgD_info;
           _s8TS5::P64 = R1;
           R1 = P64[Sp + 24];
           P64[Sp + 24] = _s8TS5::P64;
           if (R1 & 7 != 0) goto u8Vhh; else goto c8VgE;
       u8Vhh: // global
           call _c8VgD(R1) args: 0, res: 0, upd: 0;
       c8VgE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8VgB_info" {
     block_c8VgB_info:
         const _c8VgB;
         const 2054;
         const 30;
 },
 _c8VgD() //  [R1]
         { []
         }
     {offset
       c8VgD: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8VgO; else goto c8VgN;
       c8VgO: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8VgN: // global
           _s8TS7::P64 = P64[R1 + 7];
           _s8TS8::P64 = P64[R1 + 15];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 48];
           _s8TRz::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c8VgT_info;
           R6 = P64[Sp + 24] + 16;
           R5 = P64[Sp + 32];
           R4 = P64[Sp + 8];
           R3 = _s8TS8::P64;
           R2 = _s8TS7::P64;
           P64[Sp] = Hp - 7;
           P64[Sp + 8] = _s8TRz::P64;
           call GHC.Foreign.$wtryFillBufferAndCall_entry(R6,
                                                         R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8VgD_info" {
     block_c8VgD_info:
         const _c8VgD;
         const 2054;
         const 30;
 },
 _c8VgT() //  [R1]
         { []
         }
     {offset
       c8VgT: // global
           I64[Sp] = block_c8VgV_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u8Vhi; else goto c8VgX;
       u8Vhi: // global
           call _c8VgV(R1) args: 0, res: 0, upd: 0;
       c8VgX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8VgT_info" {
     block_c8VgT_info:
         const _c8VgT;
         const 644;
         const 30;
 },
 _c8VgV() //  [R1]
         { []
         }
     {offset
       c8VgV: // global
           if (R1 & 7 == 1) goto c8Vh7; else goto c8Vhd;
       c8Vh7: // global
           I64[Sp] = block_c8Vh5_info;
           R2 = I64[Sp + 32] << 1;
           R1 = P64[Sp + 24];
           call $wgo_s8TRX_entry(R2, R1) args: 8, res: 8, upd: 8;
       c8Vhd: // global
           _s8TSn::P64 = P64[R1 + 6];
           call MO_Touch(P64[Sp + 8]);
           R1 = _s8TSn::P64;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8VgV_info" {
     block_c8VgV_info:
         const _c8VgV;
         const 644;
         const 30;
 },
 _c8Vh5() //  [R1]
         { []
         }
     {offset
       c8Vh5: // global
           call MO_Touch(P64[Sp + 8]);
           R1 = R1;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Vh5_info" {
     block_c8Vh5_info:
         const _c8Vh5;
         const 900;
         const 30;
 },
 sat_s8TSF_entry() //  [R1, R2]
         { []
         }
     {offset
       c8Vhj: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c8Vhk; else goto c8Vhl;
       c8Vhk: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8Vhl: // global
           I64[Sp - 40] = block_c8Vgb_info;
           R3 = 0;
           _s8TRF::P64 = R2;
           _s8TRy::P64 = P64[R1 + 14];
           R2 = _s8TRy::P64;
           P64[Sp - 32] = P64[R1 + 6];
           P64[Sp - 24] = _s8TRy::P64;
           P64[Sp - 16] = P64[R1 + 22];
           P64[Sp - 8] = _s8TRF::P64;
           Sp = Sp - 40;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8TSF_info" {
     sat_s8TSF_info:
         const sat_s8TSF_entry;
         const 3;
         const 8;
         const 8589934597;
 },
 _c8Vgb() //  [R1]
         { []
         }
     {offset
       c8Vgb: // global
           I64[Sp - 8] = block_c8Vgi_info;
           R2 = 4;
           _s8TRH::I64 = R1;
           R1 = R1 << 2;
           I64[Sp] = _s8TRH::I64;
           Sp = Sp - 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Vgb_info" {
     block_c8Vgb_info:
         const _c8Vgb;
         const 4;
         const 30;
 },
 _c8Vgi() //  [R1]
         { []
         }
     {offset
       c8Vgi: // global
           P64[Sp - 16] = P64[Sp + 24];
           I64[Sp - 8] = 0;
           P64[Sp] = R1 + 16;
           P64[Sp + 24] = R1;
           Sp = Sp - 16;
           call _c8VhA() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8Vgi_info" {
     block_c8Vgi_info:
         const _c8Vgi;
         const 69;
         const 30;
 },
 _c8VhA() //  []
         { []
         }
     {offset
       c8VhA: // global
           _s8TSv::P64 = P64[Sp];
           I64[Sp] = block_c8VhD_info;
           R1 = _s8TSv::P64;
           if (R1 & 7 != 0) goto u8Vi2; else goto c8VhF;
       u8Vi2: // global
           call _c8VhD(R1) args: 0, res: 0, upd: 0;
       c8VhF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c8VhD() //  [R1]
         { []
         }
     {offset
       c8VhD: // global
           if (R1 & 7 == 1) goto c8VhL; else goto c8VhQ;
       c8VhL: // global
           I64[Sp + 8] = block_c8Vgs_info;
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           Sp = Sp + 8;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
       c8VhQ: // global
           I64[Sp - 8] = block_c8VhO_info;
           _s8TSA::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s8TSA::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8Vi3; else goto c8VhR;
       u8Vi3: // global
           call _c8VhO(R1) args: 0, res: 0, upd: 0;
       c8VhR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8VhD_info" {
     block_c8VhD_info:
         const _c8VhD;
         const 455;
         const 30;
 },
 _c8Vgs() //  [R1]
         { []
         }
     {offset
       c8Vgs: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto c8Vhr; else goto c8Vhq;
       c8Vhr: // global
           HpAlloc = 112;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8Vhq: // global
           I64[Hp - 104] = GHC.ForeignPtr.PlainForeignPtr_con_info;
           P64[Hp - 96] = R1;
           I64[Hp - 88] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 80] = Hp - 103;
           P64[Hp - 72] = GHC.IO.Buffer.ReadBuffer_closure+1;
           I64[Hp - 64] = I64[Sp + 8];
           _s8TRH::I64 = I64[Sp + 16];
           I64[Hp - 56] = _s8TRH::I64;
           I64[Hp - 48] = 0;
           I64[Hp - 40] = _s8TRH::I64;
           I64[Hp - 32] = $wgo_s8TRX_info;
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 40];
           P64[Hp - 8] = P64[Sp + 48];
           P64[Hp] = Hp - 87;
           I64[Sp + 24] = block_c8Vhv_info;
           R2 = _s8TRH::I64 + 1;
           R1 = Hp - 30;
           Sp = Sp + 24;
           call $wgo_s8TRX_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Vgs_info" {
     block_c8Vgs_info:
         const _c8Vgs;
         const 198;
         const 30;
 },
 _c8Vhv() //  [R1]
         { []
         }
     {offset
       c8Vhv: // global
           call MO_Touch(P64[Sp + 8]);
           R1 = R1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Vhv_info" {
     block_c8Vhv_info:
         const _c8Vhv;
         const 387;
         const 30;
 },
 _c8VhO() //  [R1]
         { []
         }
     {offset
       c8VhO: // global
           _s8TSw::I64 = I64[Sp + 16];
           _s8TSA::P64 = P64[Sp + 8];
           I32[I64[Sp + 24] + (_s8TSw::I64 << 2)] = %MO_UU_Conv_W64_W32(I64[R1 + 7]);
           P64[Sp + 8] = _s8TSA::P64;
           I64[Sp + 16] = _s8TSw::I64 + 1;
           Sp = Sp + 8;
           call _c8VhA() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8VhO_info" {
     block_c8VhO_info:
         const _c8VhO;
         const 904;
         const 30;
 },
 withEncodedCString1_r8TNp_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c8Vi5: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c8Vi6; else goto c8Vi7;
       c8Vi6: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = withEncodedCString1_r8TNp_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8Vi7: // global
           I64[Sp - 32] = block_c8Vg1_info;
           R1 = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u8Vib; else goto c8Vg2;
       u8Vib: // global
           call _c8Vg1(R1) args: 0, res: 0, upd: 0;
       c8Vg2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . withEncodedCString1_r8TNp_info" {
     withEncodedCString1_r8TNp_info:
         const withEncodedCString1_r8TNp_entry;
         const 0;
         const 14;
         const 21474836504;
 },
 _c8Vg1() //  [R1]
         { []
         }
     {offset
       c8Vg1: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c8Via; else goto c8Vi9;
       c8Via: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8Vi9: // global
           _s8TRE::P64 = P64[R1 + 23];
           I64[Hp - 24] = sat_s8TSF_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 24];
           R4 = Hp - 22;
           R3 = GHC.IO.Encoding.Types.close_closure+1;
           R2 = _s8TRE::P64;
           Sp = Sp + 32;
           call GHC.IO.bracket1_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Vg1_info" {
     block_c8Vg1_info:
         const _c8Vg1;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:02.974123566 UTC

[section ""data" . GHC.Foreign.withEncodedCString_closure" {
     GHC.Foreign.withEncodedCString_closure:
         const GHC.Foreign.withEncodedCString_info;
 },
 GHC.Foreign.withEncodedCString_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c8VjA: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call withEncodedCString1_r8TNp_entry(R5,
                                                R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Foreign.withEncodedCString_info" {
     GHC.Foreign.withEncodedCString_info:
         const GHC.Foreign.withEncodedCString_entry;
         const 0;
         const 14;
         const 21474836504;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:02.986574378 UTC

[section ""data" . GHC.Foreign.charIsRepresentable3_closure" {
     GHC.Foreign.charIsRepresentable3_closure:
         const GHC.Foreign.charIsRepresentable3_info;
 },
 $wgo_s8TT6_entry() //  [R1, R2]
         { []
         }
     {offset
       c8Vku: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c8Vkv; else goto c8Vkw;
       c8Vkv: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8Vkw: // global
           I64[Sp - 48] = block_c8Vkl_info;
           _s8TT6::P64 = R1;
           _s8TSI::P64 = P64[R1 + 6];
           _s8TSO::P64 = P64[R1 + 14];
           _s8TT5::P64 = P64[R1 + 22];
           R1 = R2;
           P64[Sp - 40] = _s8TSI::P64;
           P64[Sp - 32] = _s8TSO::P64;
           P64[Sp - 24] = _s8TT5::P64;
           P64[Sp - 16] = _s8TT6::P64;
           I64[Sp - 8] = R2;
           Sp = Sp - 48;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wgo_s8TT6_info" {
     $wgo_s8TT6_info:
         const $wgo_s8TT6_entry;
         const 3;
         const 8;
         const 8589934596;
 },
 _c8Vkl() //  [R1]
         { []
         }
     {offset
       c8Vkl: // global
           I64[Sp - 8] = block_c8Vkn_info;
           _s8TTe::P64 = R1;
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           P64[Sp] = _s8TTe::P64;
           Sp = Sp - 8;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Vkl_info" {
     block_c8Vkl_info:
         const _c8Vkl;
         const 1029;
         const 30;
 },
 _c8Vkn() //  [R1]
         { []
         }
     {offset
       c8Vkn: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c8VkA; else goto c8Vkz;
       c8VkA: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8Vkz: // global
           I64[Hp - 64] = GHC.ForeignPtr.PlainForeignPtr_con_info;
           P64[Hp - 56] = R1;
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = Hp - 63;
           P64[Hp - 32] = GHC.IO.Buffer.WriteBuffer_closure+2;
           P64[Hp - 24] = P64[Sp + 8] + 16;
           I64[Hp - 16] = I64[Sp + 48];
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           P64[Sp] = Hp - 47;
           P64[Sp + 32] = P64[Sp + 32];
           call _c8Vlt() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8Vkn_info" {
     block_c8Vkn_info:
         const _c8Vkn;
         const 2054;
         const 30;
 },
 _c8Vlt() //  []
         { []
         }
     {offset
       c8Vlt: // global
           I64[Sp - 8] = block_c8Vlv_info;
           R1 = P64[Sp + 24];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8Vmu; else goto c8Vlw;
       u8Vmu: // global
           call _c8Vlv(R1) args: 0, res: 0, upd: 0;
       c8Vlw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c8Vlv() //  [R1]
         { []
         }
     {offset
       c8Vlv: // global
           _s8TTO::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c8VlA_info;
           R3 = _s8TTO::P64;
           R2 = P64[Sp + 40];
           _s8TTS::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp + 40] = _s8TTS::P64;
           Sp = Sp + 8;
           call stg_ap_ppv_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Vlv_info" {
     block_c8Vlv_info:
         const _c8Vlv;
         const 4103;
         const 30;
 },
 _c8VlA() //  [R1]
         { []
         }
     {offset
       c8VlA: // global
           I64[Sp] = block_c8VlC_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u8Vmv; else goto c8VlD;
       u8Vmv: // global
           call _c8VlC(R1) args: 0, res: 0, upd: 0;
       c8VlD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8VlA_info" {
     block_c8VlA_info:
         const _c8VlA;
         const 2054;
         const 30;
 },
 _c8VlC() //  [R1]
         { []
         }
     {offset
       c8VlC: // global
           I64[Sp - 16] = block_c8VlH_info;
           _s8TU0::P64 = P64[R1 + 7];
           _s8TU2::P64 = P64[R1 + 23];
           R1 = P64[R1 + 15];
           P64[Sp - 8] = _s8TU2::P64;
           P64[Sp] = _s8TU0::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8Vmw; else goto c8VlM;
       u8Vmw: // global
           call _c8VlH(R1) args: 0, res: 0, upd: 0;
       c8VlM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8VlC_info" {
     block_c8VlC_info:
         const _c8VlC;
         const 2054;
         const 30;
 },
 _c8VlH() //  [R1]
         { []
         }
     {offset
       c8VlH: // global
           if (I64[R1 + 39] == I64[R1 + 47]) goto c8Vmh; else goto c8VlW;
       c8Vmh: // global
           I64[Sp + 16] = block_c8VkS_info;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto u8Vmy; else goto c8VkU;
       u8Vmy: // global
           call _c8VkS(R1) args: 0, res: 0, upd: 0;
       c8VkU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8VlW: // global
           I64[Sp] = block_c8VlU_info;
           _s8TU3::P64 = R1;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s8TU3::P64;
           if (R1 & 7 != 0) goto u8Vmx; else goto c8VlX;
       u8Vmx: // global
           call _c8VlU(R1) args: 0, res: 0, upd: 0;
       c8VlX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8VlH_info" {
     block_c8VlH_info:
         const _c8VlH;
         const 8200;
         const 30;
 },
 _c8VkS() //  [R1]
         { []
         }
     {offset
       c8VkS: // global
           _s8TTy::I64 = I64[R1 + 47];
           _s8TTz::I64 = I64[R1 + 31] - _s8TTy::I64;
           if (_s8TTz::I64 != 0) goto u8Vmp; else goto c8Vlg;
       u8Vmp: // global
           I64[Sp + 24] = _s8TTz::I64;
           I64[Sp + 32] = _s8TTy::I64;
           P64[Sp + 40] = P64[R1 + 7];
           I64[Sp + 48] = I64[R1 + 23];
           Sp = Sp + 8;
           call _c8Vl3() args: 0, res: 0, upd: 0;
       c8Vlg: // global
           I64[Sp] = block_c8Vln_info;
           R2 = I64[Sp + 48] << 1;
           R1 = P64[Sp + 40];
           call $wgo_s8TT6_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8VkS_info" {
     block_c8VkS_info:
         const _c8VkS;
         const 2822;
         const 30;
 },
 _c8Vl3() //  []
         { []
         }
     {offset
       c8Vl3: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8Vlb; else goto c8Vla;
       c8Vlb: // global
           HpAlloc = 16;
           I64[Sp - 8] = block_c8Vl2_info;
           R1 = I64[Sp + 16];
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c8Vla: // global
           _s8TSI::P64 = P64[Sp + 8];
           _s8TTt::I64 = I64[Sp + 40];
           I8[_s8TTt::I64 + I64[Sp + 24]] = 0 :: W8;
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s8TTt::I64;
           I64[Sp - 8] = block_c8Vl6_info;
           R2 = Hp - 7;
           R1 = _s8TSI::P64;
           Sp = Sp - 8;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c8Vl2() //  [R1]
         { []
         }
     {offset
       c8Vl2: // global
           I64[Sp + 24] = R1;
           Sp = Sp + 8;
           call _c8Vl3() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8Vl2_info" {
     block_c8Vl2_info:
         const _c8Vl2;
         const 2822;
         const 30;
 },
 _c8Vl6() //  [R1]
         { []
         }
     {offset
       c8Vl6: // global
           _s8TTe::P64 = P64[Sp + 8];
           call MO_Touch(P64[Sp + 40]);
           call MO_Touch(_s8TTe::P64);
           R1 = R1;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Vl6_info" {
     block_c8Vl6_info:
         const _c8Vl6;
         const 2950;
         const 30;
 },
 _c8Vln() //  [R1]
         { []
         }
     {offset
       c8Vln: // global
           call MO_Touch(P64[Sp + 8]);
           R1 = R1;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Vln_info" {
     block_c8Vln_info:
         const _c8Vln;
         const 3974;
         const 30;
 },
 _c8VlU() //  [R1]
         { []
         }
     {offset
       c8VlU: // global
           if (R1 & 7 == 2) goto c8Vmg; else goto c8Vm6;
       c8Vmg: // global
           I64[Sp + 16] = block_c8VkK_info;
           R2 = I64[Sp + 64] << 1;
           R1 = P64[Sp + 56];
           Sp = Sp + 16;
           call $wgo_s8TT6_entry(R2, R1) args: 8, res: 8, upd: 8;
       c8Vm6: // global
           _s8TU3::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c8Vm1_info;
           R3 = P64[Sp + 8];
           R2 = _s8TU3::P64;
           R1 = P64[Sp + 48];
           Sp = Sp + 16;
           call stg_ap_ppv_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8VlU_info" {
     block_c8VlU_info:
         const _c8VlU;
         const 8200;
         const 30;
 },
 _c8VkK() //  [R1]
         { []
         }
     {offset
       c8VkK: // global
           call MO_Touch(P64[Sp + 8]);
           R1 = R1;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8VkK_info" {
     block_c8VkK_info:
         const _c8VkK;
         const 3974;
         const 30;
 },
 _c8Vm1() //  [R1]
         { []
         }
     {offset
       c8Vm1: // global
           I64[Sp] = block_c8Vm3_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u8Vmz; else goto c8Vm8;
       u8Vmz: // global
           call _c8Vm3(R1) args: 0, res: 0, upd: 0;
       c8Vm8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Vm1_info" {
     block_c8Vm1_info:
         const _c8Vm1;
         const 2566;
         const 30;
 },
 _c8Vm3() //  [R1]
         { []
         }
     {offset
       c8Vm3: // global
           P64[Sp + 32] = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           call _c8Vlt() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8Vm3_info" {
     block_c8Vm3_info:
         const _c8Vm3;
         const 2566;
         const 30;
 },
 sat_s8TUB_entry() //  [R1, R2]
         { []
         }
     {offset
       c8VmB: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c8VmC; else goto c8VmD;
       c8VmC: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8VmD: // global
           I64[Sp - 32] = block_c8VjV_info;
           R3 = 0;
           _s8TSO::P64 = R2;
           _s8TSH::P64 = P64[R1 + 6];
           R2 = _s8TSH::P64;
           P64[Sp - 24] = _s8TSH::P64;
           P64[Sp - 16] = P64[R1 + 14];
           P64[Sp - 8] = _s8TSO::P64;
           Sp = Sp - 32;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8TUB_info" {
     sat_s8TUB_info:
         const sat_s8TUB_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _c8VjV() //  [R1]
         { []
         }
     {offset
       c8VjV: // global
           I64[Sp - 8] = block_c8Vk2_info;
           R2 = 4;
           _s8TSQ::I64 = R1;
           R1 = R1 << 2;
           I64[Sp] = _s8TSQ::I64;
           Sp = Sp - 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8VjV_info" {
     block_c8VjV_info:
         const _c8VjV;
         const 3;
         const 30;
 },
 _c8Vk2() //  [R1]
         { []
         }
     {offset
       c8Vk2: // global
           P64[Sp - 16] = P64[Sp + 16];
           I64[Sp - 8] = 0;
           P64[Sp] = R1 + 16;
           P64[Sp + 16] = R1;
           Sp = Sp - 16;
           call _c8VmS() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8Vk2_info" {
     block_c8Vk2_info:
         const _c8Vk2;
         const 68;
         const 30;
 },
 _c8VmS() //  []
         { []
         }
     {offset
       c8VmS: // global
           _s8TUr::P64 = P64[Sp];
           I64[Sp] = block_c8VmV_info;
           R1 = _s8TUr::P64;
           if (R1 & 7 != 0) goto u8Vnk; else goto c8VmX;
       u8Vnk: // global
           call _c8VmV(R1) args: 0, res: 0, upd: 0;
       c8VmX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c8VmV() //  [R1]
         { []
         }
     {offset
       c8VmV: // global
           if (R1 & 7 == 1) goto c8Vn3; else goto c8Vn8;
       c8Vn3: // global
           I64[Sp + 8] = block_c8Vkc_info;
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           Sp = Sp + 8;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
       c8Vn8: // global
           I64[Sp - 8] = block_c8Vn6_info;
           _s8TUw::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s8TUw::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8Vnl; else goto c8Vn9;
       u8Vnl: // global
           call _c8Vn6(R1) args: 0, res: 0, upd: 0;
       c8Vn9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8VmV_info" {
     block_c8VmV_info:
         const _c8VmV;
         const 454;
         const 30;
 },
 _c8Vkc() //  [R1]
         { []
         }
     {offset
       c8Vkc: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c8VmJ; else goto c8VmI;
       c8VmJ: // global
           HpAlloc = 104;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8VmI: // global
           I64[Hp - 96] = GHC.ForeignPtr.PlainForeignPtr_con_info;
           P64[Hp - 88] = R1;
           I64[Hp - 80] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 72] = Hp - 95;
           P64[Hp - 64] = GHC.IO.Buffer.ReadBuffer_closure+1;
           I64[Hp - 56] = I64[Sp + 8];
           _s8TSQ::I64 = I64[Sp + 16];
           I64[Hp - 48] = _s8TSQ::I64;
           I64[Hp - 40] = 0;
           I64[Hp - 32] = _s8TSQ::I64;
           I64[Hp - 24] = $wgo_s8TT6_info;
           P64[Hp - 16] = P64[Sp + 32];
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = Hp - 79;
           I64[Sp + 16] = block_c8VmN_info;
           R2 = _s8TSQ::I64 + 1;
           R1 = Hp - 22;
           Sp = Sp + 16;
           call $wgo_s8TT6_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Vkc_info" {
     block_c8Vkc_info:
         const _c8Vkc;
         const 197;
         const 30;
 },
 _c8VmN() //  [R1]
         { []
         }
     {offset
       c8VmN: // global
           call MO_Touch(P64[Sp + 8]);
           R1 = R1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8VmN_info" {
     block_c8VmN_info:
         const _c8VmN;
         const 387;
         const 30;
 },
 _c8Vn6() //  [R1]
         { []
         }
     {offset
       c8Vn6: // global
           _s8TUs::I64 = I64[Sp + 16];
           _s8TUw::P64 = P64[Sp + 8];
           I32[I64[Sp + 24] + (_s8TUs::I64 << 2)] = %MO_UU_Conv_W64_W32(I64[R1 + 7]);
           P64[Sp + 8] = _s8TUw::P64;
           I64[Sp + 16] = _s8TUs::I64 + 1;
           Sp = Sp + 8;
           call _c8VmS() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8Vn6_info" {
     block_c8Vn6_info:
         const _c8Vn6;
         const 903;
         const 30;
 },
 GHC.Foreign.charIsRepresentable3_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c8Vnn: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8Vno; else goto c8Vnp;
       c8Vno: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Foreign.charIsRepresentable3_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8Vnp: // global
           I64[Sp - 24] = block_c8VjL_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u8Vnt; else goto c8VjM;
       u8Vnt: // global
           call _c8VjL(R1) args: 0, res: 0, upd: 0;
       c8VjM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Foreign.charIsRepresentable3_info" {
     GHC.Foreign.charIsRepresentable3_info:
         const GHC.Foreign.charIsRepresentable3_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c8VjL() //  [R1]
         { []
         }
     {offset
       c8VjL: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8Vns; else goto c8Vnr;
       c8Vns: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8Vnr: // global
           _s8TSN::P64 = P64[R1 + 23];
           I64[Hp - 16] = sat_s8TUB_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           R4 = Hp - 14;
           R3 = GHC.IO.Encoding.Types.close_closure+1;
           R2 = _s8TSN::P64;
           Sp = Sp + 24;
           call GHC.IO.bracket1_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8VjL_info" {
     block_c8VjL_info:
         const _c8VjL;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:03.028523844 UTC

[section ""data" . GHC.Foreign.withCString_closure" {
     GHC.Foreign.withCString_closure:
         const GHC.Foreign.withCString_info;
 },
 GHC.Foreign.withCString_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c8Vpz: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Foreign.charIsRepresentable3_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Foreign.withCString_info" {
     GHC.Foreign.withCString_info:
         const GHC.Foreign.withCString_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:03.034782201 UTC

[section ""data" . GHC.Foreign.withCStringsLen1_closure" {
     GHC.Foreign.withCStringsLen1_closure:
         const GHC.Foreign.withCStringsLen1_info;
         const 0;
 },
 sat_s8TUL_entry() //  [R1]
         { []
         }
     {offset
       c8VpY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8VpZ; else goto c8Vq0;
       c8VpZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8Vq0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.List.reverse_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8TUL_info" {
     sat_s8TUL_info:
         const sat_s8TUL_entry;
         const 1;
         const 16;
 },
 sat_s8TUR_entry() //  [R1, R2]
         { []
         }
     {offset
       c8Vq9: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8Vqd; else goto c8Vqc;
       c8Vqd: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8Vqc: // global
           _s8TUG::P64 = P64[R1 + 6];
           _s8TUH::P64 = P64[R1 + 14];
           _s8TUN::P64 = P64[R1 + 22];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = _s8TUH::P64;
           R3 = _s8TUN::P64;
           R2 = Hp - 14;
           R1 = _s8TUG::P64;
           call go_s8TUG_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8TUR_info" {
     sat_s8TUR_info:
         const sat_s8TUR_entry;
         const 3;
         const 4294967304;
         const 8589934597;
         const S8U6c_srt+24;
 },
 go_s8TUG_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c8Vqi: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c8Vqj; else goto c8Vqk;
       c8Vqj: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8Vqk: // global
           I64[Sp - 40] = block_c8VpP_info;
           _s8TUG::P64 = R1;
           _s8TUC::P64 = P64[R1 + 5];
           _s8TUE::P64 = P64[R1 + 13];
           R1 = R3;
           P64[Sp - 32] = _s8TUC::P64;
           P64[Sp - 24] = _s8TUE::P64;
           P64[Sp - 16] = _s8TUG::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u8Vqr; else goto c8VpQ;
       u8Vqr: // global
           call _c8VpP(R1) args: 0, res: 0, upd: 0;
       c8VpQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s8TUG_info" {
     go_s8TUG_info:
         const go_s8TUG_entry;
         const 2;
         const 4294967307;
         const 12884901903;
         const S8U6c_srt+24;
 },
 _c8VpP() //  [R1]
         { []
         }
     {offset
       c8VpP: // global
           _s8TUH::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto c8Vqf; else goto c8Vqg;
       c8Vqf: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8Vqn; else goto c8Vqm;
       c8Vqn: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8Vqm: // global
           I64[Hp - 16] = sat_s8TUL_info;
           P64[Hp] = _s8TUH::P64;
           R4 = P64[Sp + 16];
           R3 = Hp - 16;
           R2 = Foreign.Storable.$fStorablePtr_closure;
           I64[Sp + 32] = stg_ap_v_info;
           Sp = Sp + 32;
           call Foreign.Marshal.Array.withArrayLen_entry(R4,
                                                         R3,
                                                         R2) args: 16, res: 0, upd: 8;
       c8Vqg: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c8Vqq; else goto c8Vqp;
       c8Vqq: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8Vqp: // global
           _s8TUM::P64 = P64[R1 + 6];
           _s8TUN::P64 = P64[R1 + 14];
           I64[Hp - 24] = sat_s8TUR_info;
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = _s8TUH::P64;
           P64[Hp] = _s8TUN::P64;
           R4 = Hp - 22;
           R3 = _s8TUM::P64;
           R2 = P64[Sp + 8];
           Sp = Sp + 40;
           call GHC.Foreign.charIsRepresentable3_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8VpP_info" {
     block_c8VpP_info:
         const _c8VpP;
         const 4;
         const 4294967326;
         const S8U6c_srt+24;
 },
 GHC.Foreign.withCStringsLen1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c8Vqs: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8Vqw; else goto c8Vqv;
       c8Vqw: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Foreign.withCStringsLen1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8Vqv: // global
           I64[Hp - 16] = go_s8TUG_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R4;
           R3 = R3;
           R2 = GHC.Types.[]_closure+1;
           R1 = Hp - 13;
           call go_s8TUG_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Foreign.withCStringsLen1_info" {
     GHC.Foreign.withCStringsLen1_info:
         const GHC.Foreign.withCStringsLen1_entry;
         const 0;
         const 12884901902;
         const 17179869207;
         const S8U6c_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:03.046663543 UTC

[section ""data" . GHC.Foreign.withCStringsLen_closure" {
     GHC.Foreign.withCStringsLen_closure:
         const GHC.Foreign.withCStringsLen_info;
         const 0;
 },
 GHC.Foreign.withCStringsLen_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c8VqX: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Foreign.withCStringsLen1_entry(R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Foreign.withCStringsLen_info" {
     GHC.Foreign.withCStringsLen_info:
         const GHC.Foreign.withCStringsLen_entry;
         const 0;
         const 4294967310;
         const 17179869207;
         const S8U6c_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:03.050607279 UTC

[section ""data" . GHC.Foreign.withCStringLen_closure" {
     GHC.Foreign.withCStringLen_closure:
         const GHC.Foreign.withCStringLen_info;
 },
 GHC.Foreign.withCStringLen_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c8Vr8: // global
           R5 = R4;
           R4 = R3;
           R3 = GHC.Types.False_closure+1;
           R2 = R2;
           call GHC.Foreign.withEncodedCString_entry(R5,
                                                     R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Foreign.withCStringLen_info" {
     GHC.Foreign.withCStringLen_info:
         const GHC.Foreign.withCStringLen_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:03.053593391 UTC

[section ""data" . GHC.Foreign.newCString2_closure" {
     GHC.Foreign.newCString2_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:03.061948553 UTC

[section ""data" . newEncodedCString1_r8TNq_closure" {
     newEncodedCString1_r8TNq_closure:
         const newEncodedCString1_r8TNq_info;
         const 0;
 },
 sat_s8TWa_entry() //  [R1, R2]
         { []
         }
     {offset
       c8VsF: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c8VsG; else goto c8VsH;
       c8VsG: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8VsH: // global
           I64[Sp - 32] = block_c8Vru_info;
           R3 = 0;
           _s8TV1::P64 = R2;
           _s8TUV::P64 = P64[R1 + 14];
           R2 = _s8TUV::P64;
           P64[Sp - 24] = P64[R1 + 6];
           P64[Sp - 16] = _s8TUV::P64;
           P64[Sp - 8] = _s8TV1::P64;
           Sp = Sp - 32;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8TWa_info" {
     sat_s8TWa_info:
         const sat_s8TWa_entry;
         const 2;
         const 12884901899;
         const 8589934597;
         const S8U6c_srt+40;
 },
 _c8Vru() //  [R1]
         { []
         }
     {offset
       c8Vru: // global
           I64[Sp - 8] = block_c8VrB_info;
           R2 = 4;
           _s8TV3::I64 = R1;
           R1 = R1 << 2;
           I64[Sp] = _s8TV3::I64;
           Sp = Sp - 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Vru_info" {
     block_c8Vru_info:
         const _c8Vru;
         const 3;
         const 12884901918;
         const S8U6c_srt+40;
 },
 _c8VrB() //  [R1]
         { []
         }
     {offset
       c8VrB: // global
           P64[Sp - 16] = P64[Sp + 24];
           I64[Sp - 8] = 0;
           P64[Sp] = R1 + 16;
           P64[Sp + 24] = R1;
           Sp = Sp - 16;
           call _c8Vtm() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8VrB_info" {
     block_c8VrB_info:
         const _c8VrB;
         const 68;
         const 12884901918;
         const S8U6c_srt+40;
 },
 _c8Vtm() //  []
         { []
         }
     {offset
       c8Vtm: // global
           _s8TW0::P64 = P64[Sp];
           I64[Sp] = block_c8Vtp_info;
           R1 = _s8TW0::P64;
           if (R1 & 7 != 0) goto u8Vu4; else goto c8Vtr;
       u8Vu4: // global
           call _c8Vtp(R1) args: 0, res: 0, upd: 0;
       c8Vtr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c8Vtp() //  [R1]
         { []
         }
     {offset
       c8Vtp: // global
           if (R1 & 7 == 1) goto c8Vtx; else goto c8VtC;
       c8Vtx: // global
           I64[Sp + 8] = block_c8VrL_info;
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           Sp = Sp + 8;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
       c8VtC: // global
           I64[Sp - 8] = block_c8VtA_info;
           _s8TW5::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s8TW5::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8Vu5; else goto c8VtD;
       u8Vu5: // global
           call _c8VtA(R1) args: 0, res: 0, upd: 0;
       c8VtD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Vtp_info" {
     block_c8Vtp_info:
         const _c8Vtp;
         const 454;
         const 12884901918;
         const S8U6c_srt+40;
 },
 _c8VrL() //  [R1]
         { []
         }
     {offset
       c8VrL: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c8VsN; else goto c8VsM;
       c8VsN: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8VsM: // global
           _s8TV3::I64 = I64[Sp + 16];
           _s8TVb::I64 = I64[Sp + 8];
           _s8TVh::I64 = _s8TV3::I64 + 1;
           (_s8TVm::I64) = call "ccall" arg hints:  []  result hints:  [PtrHint] malloc(_s8TVh::I64);
           if (_s8TVm::I64 == 0) goto c8Vtj; else goto c8Vti;
       c8Vtj: // global
           Hp = Hp - 88;
           R1 = Foreign.Marshal.Alloc.malloc1_closure;
           Sp = Sp + 48;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       c8Vti: // global
           I64[Hp - 80] = GHC.ForeignPtr.PlainForeignPtr_con_info;
           P64[Hp - 72] = R1;
           I64[Hp - 64] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 56] = Hp - 79;
           P64[Hp - 48] = GHC.IO.Buffer.ReadBuffer_closure+1;
           I64[Hp - 40] = _s8TVb::I64;
           I64[Hp - 32] = _s8TV3::I64;
           I64[Hp - 24] = 0;
           I64[Hp - 16] = _s8TV3::I64;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s8TVh::I64;
           P64[Sp] = Hp - 7;
           I64[Sp + 8] = _s8TVm::I64;
           P64[Sp + 16] = Hp - 63;
           call _c8Vs5() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8VrL_info" {
     block_c8VrL_info:
         const _c8VrL;
         const 197;
         const 12884901918;
         const S8U6c_srt+40;
 },
 _c8Vs5() //  []
         { []
         }
     {offset
       c8Vs5: // global
           I64[Sp - 8] = block_c8Vs8_info;
           R1 = P64[Sp + 40];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8VtX; else goto c8Vs9;
       u8VtX: // global
           call _c8Vs8(R1) args: 0, res: 0, upd: 0;
       c8Vs9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c8Vs8() //  [R1]
         { []
         }
     {offset
       c8Vs8: // global
           I64[Sp] = block_c8Vsd_info;
           R6 = I64[Sp + 16];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 32];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           P64[Sp - 16] = P64[Sp + 8];
           P64[Sp - 8] = GHC.Base.$fApplicativeIO4_closure+2;
           Sp = Sp - 16;
           call GHC.Foreign.$wtryFillBufferAndCall_entry(R6,
                                                         R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Vs8_info" {
     block_c8Vs8_info:
         const _c8Vs8;
         const 134;
         const 4294967326;
         const S8U6c_srt+48;
 },
 _c8Vsd() //  [R1]
         { []
         }
     {offset
       c8Vsd: // global
           I64[Sp] = block_c8Vsf_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u8VtY; else goto c8Vsg;
       u8VtY: // global
           call _c8Vsf(R1) args: 0, res: 0, upd: 0;
       c8Vsg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Vsd_info" {
     block_c8Vsd_info:
         const _c8Vsd;
         const 134;
         const 4294967326;
         const S8U6c_srt+48;
 },
 _c8Vsf() //  [R1]
         { []
         }
     {offset
       c8Vsf: // global
           if (R1 & 7 == 1) goto c8VsX; else goto c8Vtg;
       c8VsX: // global
           _s8TVw::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c8Vsk_info;
           R1 = _s8TVw::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8VtZ; else goto c8Vsl;
       u8VtZ: // global
           call _c8Vsk(R1) args: 0, res: 0, upd: 0;
       c8Vsl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8Vtg: // global
           _s8TVs::P64 = P64[R1 + 6];
           call MO_Touch(P64[Sp + 40]);
           R1 = _s8TVs::P64;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Vsf_info" {
     block_c8Vsf_info:
         const _c8Vsf;
         const 134;
         const 4294967326;
         const S8U6c_srt+48;
 },
 _c8Vsk() //  [R1]
         { []
         }
     {offset
       c8Vsk: // global
           _s8TVK::I64 = I64[R1 + 7] << 1;
           if (_s8TVK::I64 != 0) goto u8VtR; else goto c8Vt9;
       u8VtR: // global
           I64[Sp] = _s8TVK::I64;
           call _c8Vst() args: 0, res: 0, upd: 0;
       c8Vt9: // global
           call "ccall" arg hints:  [PtrHint]  result hints:  [] free(I64[Sp + 8]);
           I64[Sp + 8] = 0;
           P64[Sp] = GHC.Foreign.newCString2_closure+1;
           call _c8Vs5() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8Vsk_info" {
     block_c8Vsk_info:
         const _c8Vsk;
         const 69;
         const 4294967326;
         const S8U6c_srt+48;
 },
 _c8Vst() //  []
         { []
         }
     {offset
       c8Vst: // global
           Hp = Hp + 16;
           _s8TVK::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c8Vt3; else goto c8Vt2;
       c8Vt3: // global
           HpAlloc = 16;
           I64[Sp] = block_c8Vss_info;
           R1 = _s8TVK::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c8Vt2: // global
           (_s8TVP::I64) = call "ccall" arg hints:  [PtrHint,]  result hints:  [PtrHint] realloc(I64[Sp + 8], _s8TVK::I64);
           if (_s8TVP::I64 == 0) goto c8Vt6; else goto c8Vt5;
       c8Vt6: // global
           Hp = Hp - 16;
           R1 = Foreign.Marshal.Alloc.realloc2_closure;
           Sp = Sp + 48;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       c8Vt5: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s8TVK::I64;
           I64[Sp + 8] = _s8TVP::I64;
           P64[Sp] = Hp - 7;
           call _c8Vs5() args: 0, res: 0, upd: 0;
     }
 },
 _c8Vss() //  [R1]
         { []
         }
     {offset
       c8Vss: // global
           I64[Sp] = R1;
           call _c8Vst() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8Vss_info" {
     block_c8Vss_info:
         const _c8Vss;
         const 69;
         const 4294967326;
         const S8U6c_srt+48;
 },
 _c8VtA() //  [R1]
         { []
         }
     {offset
       c8VtA: // global
           _s8TW1::I64 = I64[Sp + 16];
           _s8TW5::P64 = P64[Sp + 8];
           I32[I64[Sp + 24] + (_s8TW1::I64 << 2)] = %MO_UU_Conv_W64_W32(I64[R1 + 7]);
           P64[Sp + 8] = _s8TW5::P64;
           I64[Sp + 16] = _s8TW1::I64 + 1;
           Sp = Sp + 8;
           call _c8Vtm() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8VtA_info" {
     block_c8VtA_info:
         const _c8VtA;
         const 903;
         const 12884901918;
         const S8U6c_srt+40;
 },
 newEncodedCString1_r8TNq_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c8Vu7: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8Vu8; else goto c8Vu9;
       c8Vu8: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = newEncodedCString1_r8TNq_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8Vu9: // global
           I64[Sp - 24] = block_c8Vrk_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u8Vud; else goto c8Vrl;
       u8Vud: // global
           call _c8Vrk(R1) args: 0, res: 0, upd: 0;
       c8Vrl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . newEncodedCString1_r8TNq_info" {
     newEncodedCString1_r8TNq_info:
         const newEncodedCString1_r8TNq_entry;
         const 0;
         const 30064771086;
         const 17179869207;
         const S8U6c_srt+40;
 },
 _c8Vrk() //  [R1]
         { []
         }
     {offset
       c8Vrk: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8Vuc; else goto c8Vub;
       c8Vuc: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8Vub: // global
           _s8TV0::P64 = P64[R1 + 23];
           I64[Hp - 16] = sat_s8TWa_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           R4 = Hp - 14;
           R3 = GHC.IO.Encoding.Types.close_closure+1;
           R2 = _s8TV0::P64;
           Sp = Sp + 24;
           call GHC.IO.bracket1_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Vrk_info" {
     block_c8Vrk_info:
         const _c8Vrk;
         const 2;
         const 12884901918;
         const S8U6c_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:03.088683706 UTC

[section ""data" . GHC.Foreign.newEncodedCString_closure" {
     GHC.Foreign.newEncodedCString_closure:
         const GHC.Foreign.newEncodedCString_info;
         const 0;
 },
 GHC.Foreign.newEncodedCString_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c8Vvs: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call newEncodedCString1_r8TNq_entry(R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Foreign.newEncodedCString_info" {
     GHC.Foreign.newEncodedCString_info:
         const GHC.Foreign.newEncodedCString_entry;
         const 0;
         const 4294967310;
         const 17179869207;
         const S8U6c_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:03.105725859 UTC

[section ""data" . GHC.Foreign.newCString1_closure" {
     GHC.Foreign.newCString1_closure:
         const GHC.Foreign.newCString1_info;
         const 0;
 },
 sat_s8TY4_entry() //  [R1]
         { []
         }
     {offset
       c8Vxa: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c8Vxf; else goto c8Vxg;
       c8Vxf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8Vxg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c8Vx7_info;
           _s8TWX::P64 = P64[R1 + 24];
           _s8TWM::I64 = I64[R1 + 32];
           R1 = P64[R1 + 16];
           I64[Sp - 32] = _s8TWM::I64;
           P64[Sp - 24] = _s8TWX::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u8Vxk; else goto c8Vx8;
       u8Vxk: // global
           call _c8Vx7(R1) args: 0, res: 0, upd: 0;
       c8Vx8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8TY4_info" {
     sat_s8TY4_info:
         const sat_s8TY4_entry;
         const 4294967298;
         const 15;
 },
 _c8Vx7() //  [R1]
         { []
         }
     {offset
       c8Vx7: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c8Vxj; else goto c8Vxi;
       c8Vxj: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c8Vxi: // global
           _s8TY2::I64 = I64[R1 + 7];
           I64[Hp - 64] = GHC.ForeignPtr.PlainForeignPtr_con_info;
           P64[Hp - 56] = P64[Sp + 16];
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = Hp - 63;
           P64[Hp - 32] = GHC.IO.Buffer.WriteBuffer_closure+2;
           I64[Hp - 24] = I64[Sp + 8];
           I64[Hp - 16] = _s8TY2::I64;
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           R1 = Hp - 47;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c8Vx7_info" {
     block_c8Vx7_info:
         const _c8Vx7;
         const 66;
         const 30;
 },
 sat_s8TYi_entry() //  [R1, R2]
         { []
         }
     {offset
       c8Vxl: // global
           if ((Sp + -88) < SpLim) (likely: False) goto c8Vxm; else goto c8Vxn;
       c8Vxm: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8Vxn: // global
           I64[Sp - 24] = block_c8VvN_info;
           R3 = 0;
           _s8TWi::P64 = R2;
           _s8TWc::P64 = P64[R1 + 6];
           R2 = _s8TWc::P64;
           P64[Sp - 16] = _s8TWc::P64;
           P64[Sp - 8] = _s8TWi::P64;
           Sp = Sp - 24;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8TYi_info" {
     sat_s8TYi_info:
         const sat_s8TYi_entry;
         const 1;
         const 12884901897;
         const 8589934597;
         const S8U6c_srt+40;
 },
 _c8VvN() //  [R1]
         { []
         }
     {offset
       c8VvN: // global
           I64[Sp - 8] = block_c8VvU_info;
           R2 = 4;
           _s8TWk::I64 = R1;
           R1 = R1 << 2;
           I64[Sp] = _s8TWk::I64;
           Sp = Sp - 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8VvN_info" {
     block_c8VvN_info:
         const _c8VvN;
         const 2;
         const 12884901918;
         const S8U6c_srt+40;
 },
 _c8VvU() //  [R1]
         { []
         }
     {offset
       c8VvU: // global
           P64[Sp - 16] = P64[Sp + 16];
           I64[Sp - 8] = 0;
           P64[Sp] = R1 + 16;
           P64[Sp + 16] = R1;
           Sp = Sp - 16;
           call _c8Vzq() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8VvU_info" {
     block_c8VvU_info:
         const _c8VvU;
         const 67;
         const 12884901918;
         const S8U6c_srt+40;
 },
 _c8Vzq() //  []
         { []
         }
     {offset
       c8Vzq: // global
           _s8TY8::P64 = P64[Sp];
           I64[Sp] = block_c8Vzt_info;
           R1 = _s8TY8::P64;
           if (R1 & 7 != 0) goto u8VAB; else goto c8Vzv;
       u8VAB: // global
           call _c8Vzt(R1) args: 0, res: 0, upd: 0;
       c8Vzv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c8Vzt() //  [R1]
         { []
         }
     {offset
       c8Vzt: // global
           if (R1 & 7 == 1) goto c8VzB; else goto c8VzG;
       c8VzB: // global
           I64[Sp + 8] = block_c8Vw4_info;
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           Sp = Sp + 8;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
       c8VzG: // global
           I64[Sp - 8] = block_c8VzE_info;
           _s8TYd::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s8TYd::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8VAC; else goto c8VzH;
       u8VAC: // global
           call _c8VzE(R1) args: 0, res: 0, upd: 0;
       c8VzH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Vzt_info" {
     block_c8Vzt_info:
         const _c8Vzt;
         const 453;
         const 12884901918;
         const S8U6c_srt+40;
 },
 _c8Vw4() //  [R1]
         { []
         }
     {offset
       c8Vw4: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c8Vxt; else goto c8Vxs;
       c8Vxt: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8Vxs: // global
           _s8TWk::I64 = I64[Sp + 16];
           _s8TWs::I64 = I64[Sp + 8];
           _s8TWy::I64 = _s8TWk::I64 + 1;
           (_s8TWD::I64) = call "ccall" arg hints:  []  result hints:  [PtrHint] malloc(_s8TWy::I64);
           if (_s8TWD::I64 == 0) goto c8Vzn; else goto c8Vzm;
       c8Vzn: // global
           Hp = Hp - 88;
           R1 = Foreign.Marshal.Alloc.malloc1_closure;
           Sp = Sp + 40;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       c8Vzm: // global
           I64[Hp - 80] = GHC.ForeignPtr.PlainForeignPtr_con_info;
           P64[Hp - 72] = R1;
           I64[Hp - 64] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 56] = Hp - 79;
           P64[Hp - 48] = GHC.IO.Buffer.ReadBuffer_closure+1;
           I64[Hp - 40] = _s8TWs::I64;
           I64[Hp - 32] = _s8TWk::I64;
           I64[Hp - 24] = 0;
           I64[Hp - 16] = _s8TWk::I64;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s8TWy::I64;
           P64[Sp] = Hp - 7;
           I64[Sp + 8] = _s8TWD::I64;
           P64[Sp + 16] = Hp - 63;
           call _c8Vwo() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8Vw4_info" {
     block_c8Vw4_info:
         const _c8Vw4;
         const 196;
         const 12884901918;
         const S8U6c_srt+40;
 },
 _c8Vwo() //  []
         { []
         }
     {offset
       c8Vwo: // global
           I64[Sp - 8] = block_c8Vwr_info;
           R1 = P64[Sp + 32];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8VAi; else goto c8Vws;
       u8VAi: // global
           call _c8Vwr(R1) args: 0, res: 0, upd: 0;
       c8Vws: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c8Vwr() //  [R1]
         { []
         }
     {offset
       c8Vwr: // global
           I64[Sp - 16] = block_c8Vww_info;
           _s8TWQ::P64 = P64[R1 + 7];
           _s8TWR::P64 = P64[R1 + 15];
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           P64[Sp - 8] = _s8TWR::P64;
           P64[Sp] = _s8TWQ::P64;
           Sp = Sp - 16;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Vwr_info" {
     block_c8Vwr_info:
         const _c8Vwr;
         const 133;
         const 4294967326;
         const S8U6c_srt+48;
 },
 _c8Vww() //  [R1]
         { []
         }
     {offset
       c8Vww: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c8VxC; else goto c8VxB;
       c8VxC: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8VxB: // global
           I64[Hp - 32] = sat_s8TY4_info;
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = R1;
           I64[Hp] = I64[Sp + 32];
           P64[Sp - 8] = Hp - 32;
           P64[Sp] = P64[Sp + 40];
           Sp = Sp - 8;
           call _c8VyC() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8Vww_info" {
     block_c8Vww_info:
         const _c8Vww;
         const 519;
         const 4294967326;
         const S8U6c_srt+48;
 },
 _c8VyC() //  []
         { []
         }
     {offset
       c8VyC: // global
           _s8TXC::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c8VyE_info;
           R3 = P64[Sp];
           R2 = _s8TXC::P64;
           R1 = P64[Sp + 24];
           Sp = Sp + 8;
           call stg_ap_ppv_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c8VyE() //  [R1]
         { []
         }
     {offset
       c8VyE: // global
           I64[Sp] = block_c8VyG_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u8VAu; else goto c8VyH;
       u8VAu: // global
           call _c8VyG(R1) args: 0, res: 0, upd: 0;
       c8VyH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8VyE_info" {
     block_c8VyE_info:
         const _c8VyE;
         const 519;
         const 4294967326;
         const S8U6c_srt+48;
 },
 _c8VyG() //  [R1]
         { []
         }
     {offset
       c8VyG: // global
           I64[Sp - 16] = block_c8VyL_info;
           _s8TXJ::P64 = P64[R1 + 7];
           _s8TXL::P64 = P64[R1 + 23];
           R1 = P64[R1 + 15];
           P64[Sp - 8] = _s8TXL::P64;
           P64[Sp] = _s8TXJ::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8VAv; else goto c8VyP;
       u8VAv: // global
           call _c8VyL(R1) args: 0, res: 0, upd: 0;
       c8VyP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8VyG_info" {
     block_c8VyG_info:
         const _c8VyG;
         const 519;
         const 4294967326;
         const S8U6c_srt+48;
 },
 _c8VyL() //  [R1]
         { []
         }
     {offset
       c8VyL: // global
           if (I64[R1 + 39] == I64[R1 + 47]) goto c8Vzk; else goto c8VyZ;
       c8Vzk: // global
           I64[Sp + 32] = block_c8Vyb_info;
           R1 = P64[Sp + 8];
           Sp = Sp + 32;
           if (R1 & 7 != 0) goto u8VAx; else goto c8Vyd;
       u8VAx: // global
           call _c8Vyb(R1) args: 0, res: 0, upd: 0;
       c8Vyd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8VyZ: // global
           I64[Sp] = block_c8VyX_info;
           _s8TXM::P64 = R1;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s8TXM::P64;
           if (R1 & 7 != 0) goto u8VAw; else goto c8Vz0;
       u8VAw: // global
           call _c8VyX(R1) args: 0, res: 0, upd: 0;
       c8Vz0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8VyL_info" {
     block_c8VyL_info:
         const _c8VyL;
         const 2057;
         const 4294967326;
         const S8U6c_srt+48;
 },
 _c8Vyb() //  [R1]
         { []
         }
     {offset
       c8Vyb: // global
           _s8TXs::I64 = I64[R1 + 47];
           _s8TXt::I64 = I64[R1 + 31] - _s8TXs::I64;
           if (_s8TXt::I64 != 0) goto u8VA8; else goto u8VA7;
       u8VA8: // global
           P64[Sp - 32] = P64[R1 + 7];
           I64[Sp - 24] = I64[R1 + 39];
           I64[Sp - 16] = _s8TXs::I64;
           I64[Sp - 8] = _s8TXt::I64;
           I64[Sp] = I64[R1 + 23];
           Sp = Sp - 32;
           call _c8Vyo() args: 0, res: 0, upd: 0;
       u8VA7: // global
           Sp = Sp + 8;
           call _c8Vyv() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8Vyb_info" {
     block_c8Vyb_info:
         const _c8Vyb;
         const 133;
         const 4294967326;
         const S8U6c_srt+48;
 },
 _c8Vyo() //  []
         { []
         }
     {offset
       c8Vyo: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c8Vys; else goto c8Vyr;
       c8Vys: // global
           HpAlloc = 72;
           I64[Sp - 8] = block_c8Vyl_info;
           R1 = I64[Sp + 24];
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c8Vyr: // global
           _s8TXn::I64 = I64[Sp + 32];
           _s8TXo::P64 = P64[Sp];
           _s8TXr::I64 = I64[Sp + 8];
           _s8TXs::I64 = I64[Sp + 16];
           I8[_s8TXn::I64 + _s8TXs::I64] = 0 :: W8;
           call MO_Touch(_s8TXo::P64);
           I64[Hp - 64] = GHC.Types.I#_con_info;
           I64[Hp - 56] = _s8TXs::I64 - _s8TXr::I64;
           I64[Hp - 48] = GHC.Ptr.Ptr_con_info;
           I64[Hp - 40] = _s8TXn::I64;
           I64[Hp - 32] = (,)_con_info;
           P64[Hp - 24] = Hp - 47;
           P64[Hp - 16] = Hp - 63;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           P64[Sp + 32] = Hp - 6;
           Sp = Sp + 32;
           call _s8TWY() args: 0, res: 0, upd: 0;
     }
 },
 _c8Vyl() //  [R1]
         { []
         }
     {offset
       c8Vyl: // global
           I64[Sp + 32] = R1;
           Sp = Sp + 8;
           call _c8Vyo() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8Vyl_info" {
     block_c8Vyl_info:
         const _c8Vyl;
         const 6026;
         const 4294967326;
         const S8U6c_srt+48;
 },
 _c8VyX() //  [R1]
         { []
         }
     {offset
       c8VyX: // global
           if (R1 & 7 == 2) goto u8VA5; else goto c8Vz9;
       u8VA5: // global
           Sp = Sp + 40;
           call _c8Vyv() args: 0, res: 0, upd: 0;
       c8Vz9: // global
           _s8TXM::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c8Vz4_info;
           R3 = P64[Sp + 8];
           R2 = _s8TXM::P64;
           R1 = P64[Sp + 24];
           Sp = Sp + 16;
           call stg_ap_ppv_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8VyX_info" {
     block_c8VyX_info:
         const _c8VyX;
         const 2057;
         const 4294967326;
         const S8U6c_srt+48;
 },
 _c8Vyv() //  []
         { []
         }
     {offset
       c8Vyv: // global
           P64[Sp - 8] = GHC.Base.Nothing_closure+1;
           Sp = Sp - 8;
           call _s8TWY() args: 0, res: 0, upd: 0;
     }
 },
 _s8TWY() //  []
         { []
         }
     {offset
       s8TWY: // global
           _s8TX0::P64 = P64[Sp];
           I64[Sp] = block_c8VwF_info;
           R1 = _s8TX0::P64;
           if (R1 & 7 != 0) goto u8VAE; else goto c8VwG;
       u8VAE: // global
           call _c8VwF(R1) args: 0, res: 0, upd: 0;
       c8VwG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c8VwF() //  [R1]
         { []
         }
     {offset
       c8VwF: // global
           if (R1 & 7 == 1) goto c8VxG; else goto c8VxZ;
       c8VxG: // global
           _s8TWN::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c8VwK_info;
           R1 = _s8TWN::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8VAk; else goto c8VwL;
       u8VAk: // global
           call _c8VwK(R1) args: 0, res: 0, upd: 0;
       c8VwL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8VxZ: // global
           _s8TWJ::P64 = P64[R1 + 6];
           call MO_Touch(P64[Sp + 32]);
           R1 = _s8TWJ::P64;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8VwF_info" {
     block_c8VwF_info:
         const _c8VwF;
         const 133;
         const 4294967326;
         const S8U6c_srt+48;
 },
 _c8VwK() //  [R1]
         { []
         }
     {offset
       c8VwK: // global
           _s8TX4::I64 = I64[R1 + 7] << 1;
           if (_s8TX4::I64 != 0) goto u8VAc; else goto c8VxS;
       u8VAc: // global
           I64[Sp] = _s8TX4::I64;
           call _c8VwT() args: 0, res: 0, upd: 0;
       c8VxS: // global
           call "ccall" arg hints:  [PtrHint]  result hints:  [] free(I64[Sp + 8]);
           I64[Sp + 8] = 0;
           P64[Sp] = GHC.Foreign.newCString2_closure+1;
           call _c8Vwo() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8VwK_info" {
     block_c8VwK_info:
         const _c8VwK;
         const 68;
         const 4294967326;
         const S8U6c_srt+48;
 },
 _c8VwT() //  []
         { []
         }
     {offset
       c8VwT: // global
           Hp = Hp + 16;
           _s8TX4::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c8VxM; else goto c8VxL;
       c8VxM: // global
           HpAlloc = 16;
           I64[Sp] = block_c8VwS_info;
           R1 = _s8TX4::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c8VxL: // global
           (_s8TX9::I64) = call "ccall" arg hints:  [PtrHint,]  result hints:  [PtrHint] realloc(I64[Sp + 8], _s8TX4::I64);
           if (_s8TX9::I64 == 0) goto c8VxP; else goto c8VxO;
       c8VxP: // global
           Hp = Hp - 16;
           R1 = Foreign.Marshal.Alloc.realloc2_closure;
           Sp = Sp + 40;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       c8VxO: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s8TX4::I64;
           I64[Sp + 8] = _s8TX9::I64;
           P64[Sp] = Hp - 7;
           call _c8Vwo() args: 0, res: 0, upd: 0;
     }
 },
 _c8VwS() //  [R1]
         { []
         }
     {offset
       c8VwS: // global
           I64[Sp] = R1;
           call _c8VwT() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8VwS_info" {
     block_c8VwS_info:
         const _c8VwS;
         const 68;
         const 4294967326;
         const S8U6c_srt+48;
 },
 _c8Vz4() //  [R1]
         { []
         }
     {offset
       c8Vz4: // global
           I64[Sp] = block_c8Vz6_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u8VAz; else goto c8Vzb;
       u8VAz: // global
           call _c8Vz6(R1) args: 0, res: 0, upd: 0;
       c8Vzb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Vz4_info" {
     block_c8Vz4_info:
         const _c8Vz4;
         const 519;
         const 4294967326;
         const S8U6c_srt+48;
 },
 _c8Vz6() //  [R1]
         { []
         }
     {offset
       c8Vz6: // global
           P64[Sp] = P64[R1 + 7];
           P64[Sp - 8] = P64[R1 + 15];
           Sp = Sp - 8;
           call _c8VyC() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8Vz6_info" {
     block_c8Vz6_info:
         const _c8Vz6;
         const 519;
         const 4294967326;
         const S8U6c_srt+48;
 },
 _c8VzE() //  [R1]
         { []
         }
     {offset
       c8VzE: // global
           _s8TY9::I64 = I64[Sp + 16];
           _s8TYd::P64 = P64[Sp + 8];
           I32[I64[Sp + 24] + (_s8TY9::I64 << 2)] = %MO_UU_Conv_W64_W32(I64[R1 + 7]);
           P64[Sp + 8] = _s8TYd::P64;
           I64[Sp + 16] = _s8TY9::I64 + 1;
           Sp = Sp + 8;
           call _c8Vzq() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8VzE_info" {
     block_c8VzE_info:
         const _c8VzE;
         const 902;
         const 12884901918;
         const S8U6c_srt+40;
 },
 sat_s8TYm_entry() //  [R1]
         { []
         }
     {offset
       c8VAL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8VAM; else goto c8VAN;
       c8VAM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8VAN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Tuple.fst_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8TYm_info" {
     sat_s8TYm_info:
         const sat_s8TYm_entry;
         const 1;
         const 16;
 },
 GHC.Foreign.newCString1_entry() //  [R2, R3]
         { []
         }
     {offset
       c8VAO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8VAP; else goto c8VAQ;
       c8VAP: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Foreign.newCString1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8VAQ: // global
           I64[Sp - 16] = block_c8VvD_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8VAX; else goto c8VvE;
       u8VAX: // global
           call _c8VvD(R1) args: 0, res: 0, upd: 0;
       c8VvE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Foreign.newCString1_info" {
     GHC.Foreign.newCString1_info:
         const GHC.Foreign.newCString1_entry;
         const 0;
         const 47244640270;
         const 12884901903;
         const S8U6c_srt+40;
 },
 _c8VvD() //  [R1]
         { []
         }
     {offset
       c8VvD: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8VAT; else goto c8VAS;
       c8VAT: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8VAS: // global
           _s8TWh::P64 = P64[R1 + 23];
           I64[Hp - 8] = sat_s8TYi_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_c8VAF_info;
           R4 = Hp - 6;
           R3 = GHC.IO.Encoding.Types.close_closure+1;
           R2 = _s8TWh::P64;
           Sp = Sp + 8;
           call GHC.IO.bracket1_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8VvD_info" {
     block_c8VvD_info:
         const _c8VvD;
         const 1;
         const 12884901918;
         const S8U6c_srt+40;
 },
 _c8VAF() //  [R1]
         { []
         }
     {offset
       c8VAF: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8VAW; else goto c8VAV;
       c8VAW: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8VAV: // global
           I64[Hp - 16] = sat_s8TYm_info;
           P64[Hp] = R1;
           R1 = Hp - 16;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8VAF_info" {
     block_c8VAF_info:
         const _c8VAF;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:03.156260152 UTC

[section ""data" . GHC.Foreign.newCString_closure" {
     GHC.Foreign.newCString_closure:
         const GHC.Foreign.newCString_info;
         const 0;
 },
 GHC.Foreign.newCString_entry() //  [R2, R3]
         { []
         }
     {offset
       c8VDn: // global
           R3 = R3;
           R2 = R2;
           call GHC.Foreign.newCString1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Foreign.newCString_info" {
     GHC.Foreign.newCString_info:
         const GHC.Foreign.newCString_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const S8U6c_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:03.160583678 UTC

[section ""data" . GHC.Foreign.newCStringLen_closure" {
     GHC.Foreign.newCStringLen_closure:
         const GHC.Foreign.newCStringLen_info;
         const 0;
 },
 GHC.Foreign.newCStringLen_entry() //  [R2, R3]
         { []
         }
     {offset
       c8VDy: // global
           R4 = R3;
           R3 = GHC.Types.False_closure+1;
           R2 = R2;
           call GHC.Foreign.newEncodedCString_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Foreign.newCStringLen_info" {
     GHC.Foreign.newCStringLen_info:
         const GHC.Foreign.newCStringLen_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const S8U6c_srt+72;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:03.175264304 UTC

[section ""data" . GHC.Foreign.$wpeekCString_closure" {
     GHC.Foreign.$wpeekCString_closure:
         const GHC.Foreign.$wpeekCString_info;
         const 0;
 },
 sat_s8TZz_entry() //  [R1]
         { []
         }
     {offset
       c8VFK: // global
           _s8TZz::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c8VFL; else goto c8VFM;
       c8VFM: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c8VFO; else goto c8VFN;
       c8VFO: // global
           HpAlloc = 40;
           goto c8VFL;
       c8VFL: // global
           R1 = _s8TZz::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8VFN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s8TZz::P64;
           _s8TZo::P64 = P64[_s8TZz::P64 + 16];
           _s8TZw::P64 = P64[_s8TZz::P64 + 24];
           _s8TZs::I64 = I64[_s8TZz::P64 + 32];
           I64[Hp - 32] = GHC.Types.C#_con_info;
           I64[Hp - 24] = _s8TZs::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _s8TZo::P64;
           R3 = _s8TZw::P64;
           R2 = Hp - 14;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8TZz_info" {
     sat_s8TZz_info:
         const sat_s8TZz_entry;
         const 4294967298;
         const 15;
 },
 sat_s8TZQ_entry() //  [R1]
         { []
         }
     {offset
       c8VFX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8VFY; else goto c8VFZ;
       c8VFY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8VFZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.Types.[]_closure+1;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8TZQ_info" {
     sat_s8TZQ_info:
         const sat_s8TZQ_entry;
         const 1;
         const 16;
 },
 $wgo_s8TYQ_entry() //  [R1, R2]
         { []
         }
     {offset
       c8VG0: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c8VG1; else goto c8VG2;
       c8VG1: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8VG2: // global
           I64[Sp - 32] = block_c8VEp_info;
           _s8TYQ::P64 = R1;
           _s8TYP::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 24] = _s8TYP::P64;
           P64[Sp - 16] = _s8TYQ::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u8VHC; else goto c8VEq;
       u8VHC: // global
           call _c8VEp(R1) args: 0, res: 0, upd: 0;
       c8VEq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wgo_s8TYQ_info" {
     $wgo_s8TYQ_info:
         const $wgo_s8TYQ_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _c8VEp() //  [R1]
         { []
         }
     {offset
       c8VEp: // global
           _s8TYP::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c8VEu_info;
           R3 = _s8TYP::P64;
           R2 = P64[Sp + 24];
           _s8TYV::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp + 24] = _s8TYV::P64;
           Sp = Sp + 8;
           call stg_ap_ppv_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8VEp_info" {
     block_c8VEp_info:
         const _c8VEp;
         const 3;
         const 30;
 },
 _c8VEu() //  [R1]
         { []
         }
     {offset
       c8VEu: // global
           I64[Sp] = block_c8VEw_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u8VHu; else goto c8VEx;
       u8VHu: // global
           call _c8VEw(R1) args: 0, res: 0, upd: 0;
       c8VEx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8VEu_info" {
     block_c8VEu_info:
         const _c8VEu;
         const 2;
         const 30;
 },
 _c8VEw() //  [R1]
         { []
         }
     {offset
       c8VEw: // global
           I64[Sp - 16] = block_c8VEB_info;
           _s8TZ3::P64 = P64[R1 + 7];
           _s8TZ5::P64 = P64[R1 + 23];
           R1 = P64[R1 + 15];
           P64[Sp - 8] = _s8TZ5::P64;
           P64[Sp] = _s8TZ3::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8VHv; else goto c8VEC;
       u8VHv: // global
           call _c8VEB(R1) args: 0, res: 0, upd: 0;
       c8VEC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8VEw_info" {
     block_c8VEw_info:
         const _c8VEw;
         const 2;
         const 30;
 },
 _c8VEB() //  [R1]
         { []
         }
     {offset
       c8VEB: // global
           if (I64[R1 + 39] == I64[R1 + 47]) goto c8VGX; else goto c8VGq;
       c8VGX: // global
           I64[Sp + 32] = block_c8VF9_info;
           R1 = P64[Sp + 8];
           Sp = Sp + 32;
           if (R1 & 7 != 0) goto u8VHx; else goto c8VFa;
       u8VHx: // global
           call _c8VF9(R1) args: 0, res: 0, upd: 0;
       c8VFa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8VGq: // global
           I64[Sp] = block_c8VG7_info;
           _s8TZ6::P64 = R1;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s8TZ6::P64;
           if (R1 & 7 != 0) goto u8VHw; else goto c8VGr;
       u8VHw: // global
           call _c8VG7(R1) args: 0, res: 0, upd: 0;
       c8VGr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8VEB_info" {
     block_c8VEB_info:
         const _c8VEB;
         const 4;
         const 30;
 },
 _c8VF9() //  [R1]
         { []
         }
     {offset
       c8VF9: // global
           _s8U0e::P64 = P64[R1 + 7];
           _s8U0j::I64 = I64[R1 + 47] - I64[R1 + 39];
           if (%MO_S_Gt_W64(_s8U0j::I64, 0)) goto c8VHf; else goto c8VHg;
       c8VHf: // global
           P64[Sp - 24] = _s8U0e::P64;
           I64[Sp - 16] = _s8U0j::I64 - 1;
           P64[Sp - 8] = GHC.Types.[]_closure+1;
           I64[Sp] = I64[R1 + 23];
           Sp = Sp - 32;
           call _c8VFr() args: 0, res: 0, upd: 0;
       c8VHg: // global
           call MO_Touch(_s8U0e::P64);
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8VF9_info" {
     block_c8VF9_info:
         const _c8VF9;
         const 0;
         const 30;
 },
 _c8VFr() //  []
         { []
         }
     {offset
       c8VFr: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c8VHa; else goto c8VH9;
       c8VHa: // global
           HpAlloc = 40;
           I64[Sp] = block_c8VFr_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c8VH9: // global
           _s8U0w::P64 = P64[Sp + 24];
           _s8U0y::I64 = I64[Sp + 16];
           if (_s8U0y::I64 != 0) goto c8VHc; else goto c8VHd;
       c8VHc: // global
           I64[Hp - 32] = GHC.Types.C#_con_info;
           I64[Hp - 24] = %MO_UU_Conv_W32_W64(I32[I64[Sp + 32] + (_s8U0y::I64 << 2)]);
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _s8U0w::P64;
           I64[Sp + 16] = _s8U0y::I64 - 1;
           P64[Sp + 24] = Hp - 14;
           call _c8VFr() args: 0, res: 0, upd: 0;
       c8VHd: // global
           Hp = Hp - 40;
           P64[Sp + 24] = _s8U0w::P64;
           Sp = Sp + 8;
           call _c8VH0() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8VFr_info" {
     block_c8VFr_info:
         const _c8VFr;
         const 644;
         const 30;
 },
 _c8VH0() //  []
         { []
         }
     {offset
       c8VH0: // global
           Hp = Hp + 40;
           _s8U0m::P64 = P64[Sp + 16];
           if (Hp > HpLim) (likely: False) goto c8VH7; else goto c8VH6;
       c8VH7: // global
           HpAlloc = 40;
           I64[Sp - 8] = block_c8VGZ_info;
           R1 = _s8U0m::P64;
           Sp = Sp - 8;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8VH6: // global
           _s8U0q::I64 = %MO_UU_Conv_W32_W64(I32[I64[Sp + 24]]);
           call MO_Touch(P64[Sp]);
           I64[Hp - 32] = GHC.Types.C#_con_info;
           I64[Hp - 24] = _s8U0q::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _s8U0m::P64;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8VGZ() //  [R1]
         { []
         }
     {offset
       c8VGZ: // global
           P64[Sp + 24] = R1;
           Sp = Sp + 8;
           call _c8VH0() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8VGZ_info" {
     block_c8VGZ_info:
         const _c8VGZ;
         const 900;
         const 30;
 },
 _c8VG7() //  [R1]
         { []
         }
     {offset
       c8VG7: // global
           _s8TZ5::P64 = P64[Sp + 8];
           if (R1 & 7 == 2) goto c8VGR; else goto c8VGF;
       c8VGR: // global
           I64[Sp + 8] = block_c8VGP_info;
           R1 = _s8TZ5::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8VHD; else goto c8VGS;
       u8VHD: // global
           call _c8VGP(R1) args: 0, res: 0, upd: 0;
       c8VGS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8VGF: // global
           _s8TZ6::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c8VGv_info;
           R3 = _s8TZ5::P64;
           R2 = _s8TZ6::P64;
           R1 = P64[Sp + 32];
           Sp = Sp + 16;
           call stg_ap_ppv_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8VG7_info" {
     block_c8VG7_info:
         const _c8VG7;
         const 4;
         const 30;
 },
 _c8VGP() //  [R1]
         { []
         }
     {offset
       c8VGP: // global
           P64[Sp + 24] = P64[Sp + 8];
           I64[Sp + 8] = I64[R1 + 23];
           P64[Sp - 16] = P64[R1 + 7];
           I64[Sp - 8] = I64[R1 + 39];
           I64[Sp] = I64[R1 + 47];
           Sp = Sp - 16;
           call _s8TZe() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8VGP_info" {
     block_c8VGP_info:
         const _c8VGP;
         const 259;
         const 30;
 },
 _c8VGv() //  [R1]
         { []
         }
     {offset
       c8VGv: // global
           I64[Sp] = block_c8VGx_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u8VHE; else goto c8VGy;
       u8VHE: // global
           call _c8VGx(R1) args: 0, res: 0, upd: 0;
       c8VGy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8VGv_info" {
     block_c8VGv_info:
         const _c8VGv;
         const 130;
         const 30;
 },
 _c8VGx() //  [R1]
         { []
         }
     {offset
       c8VGx: // global
           I64[Sp] = block_c8VGC_info;
           _s8TZW::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp + 16] = _s8TZW::P64;
           if (R1 & 7 != 0) goto u8VHF; else goto c8VGI;
       u8VHF: // global
           call _c8VGC(R1) args: 0, res: 0, upd: 0;
       c8VGI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8VGx_info" {
     block_c8VGx_info:
         const _c8VGx;
         const 130;
         const 30;
 },
 _c8VGC() //  [R1]
         { []
         }
     {offset
       c8VGC: // global
           P64[Sp - 24] = P64[R1 + 7];
           I64[Sp - 16] = I64[R1 + 39];
           I64[Sp - 8] = I64[R1 + 47];
           I64[Sp] = I64[R1 + 23];
           P64[Sp + 16] = P64[Sp + 16];
           Sp = Sp - 24;
           call _s8TZe() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8VGC_info" {
     block_c8VGC_info:
         const _c8VGC;
         const 2;
         const 30;
 },
 _s8TZe() //  []
         { []
         }
     {offset
       s8TZe: // global
           _s8TZl::I64 = I64[Sp + 16] - I64[Sp + 8];
           if (%MO_S_Gt_W64(_s8TZl::I64, 0)) goto c8VGk; else goto c8VGl;
       c8VGk: // global
           P64[Sp + 8] = GHC.Types.[]_closure+1;
           I64[Sp + 16] = _s8TZl::I64 - 1;
           Sp = Sp - 8;
           call _c8VF1() args: 0, res: 0, upd: 0;
       c8VGl: // global
           _s8TYQ::P64 = P64[Sp + 32];
           _s8TZg::P64 = P64[Sp + 40];
           call MO_Touch(P64[Sp]);
           I64[Sp + 40] = block_c8VFR_info;
           R2 = _s8TZg::P64;
           R1 = _s8TYQ::P64;
           Sp = Sp + 40;
           call $wgo_s8TYQ_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c8VF1() //  []
         { []
         }
     {offset
       c8VF1: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c8VGf; else goto c8VGe;
       c8VGf: // global
           HpAlloc = 40;
           I64[Sp] = block_c8VF1_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c8VGe: // global
           _s8TZh::I64 = I64[Sp + 32];
           _s8TZC::P64 = P64[Sp + 16];
           _s8TZE::I64 = I64[Sp + 24];
           if (_s8TZE::I64 != 0) goto c8VGh; else goto c8VGi;
       c8VGh: // global
           _s8TZH::I64 = %MO_UU_Conv_W32_W64(I32[_s8TZh::I64 + (_s8TZE::I64 << 2)]);
           I64[Hp - 32] = GHC.Types.C#_con_info;
           I64[Hp - 24] = _s8TZH::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _s8TZC::P64;
           I64[Sp + 24] = _s8TZE::I64 - 1;
           P64[Sp + 16] = Hp - 14;
           call _c8VF1() args: 0, res: 0, upd: 0;
       c8VGi: // global
           Hp = Hp - 40;
           _s8TYQ::P64 = P64[Sp + 40];
           _s8TZg::P64 = P64[Sp + 48];
           _s8TZs::I64 = %MO_UU_Conv_W32_W64(I32[_s8TZh::I64]);
           call MO_Touch(P64[Sp + 8]);
           I64[Sp + 32] = block_c8VFC_info;
           R2 = _s8TZg::P64;
           R1 = _s8TYQ::P64;
           I64[Sp + 40] = _s8TZs::I64;
           P64[Sp + 48] = _s8TZC::P64;
           Sp = Sp + 32;
           call $wgo_s8TYQ_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8VF1_info" {
     block_c8VF1_info:
         const _c8VF1;
         const 774;
         const 30;
 },
 _c8VFC() //  [R1]
         { []
         }
     {offset
       c8VFC: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c8VGc; else goto c8VGb;
       c8VGc: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8VGb: // global
           I64[Hp - 32] = sat_s8TZz_info;
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = R1;
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 32;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8VFC_info" {
     block_c8VFC_info:
         const _c8VFC;
         const 66;
         const 30;
 },
 _c8VFR() //  [R1]
         { []
         }
     {offset
       c8VFR: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8VGo; else goto c8VGn;
       c8VGo: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8VGn: // global
           I64[Hp - 16] = sat_s8TZQ_info;
           P64[Hp] = R1;
           R1 = Hp - 16;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8VFR_info" {
     block_c8VFR_info:
         const _c8VFR;
         const 0;
         const 30;
 },
 sat_s8U0L_entry() //  [R1, R2]
         { []
         }
     {offset
       c8VHP: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c8VHQ; else goto c8VHR;
       c8VHQ: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8VHR: // global
           I64[Sp - 32] = block_c8VDY_info;
           _s8TYp::I64 = I64[R1 + 6];
           _s8TYs::I64 = I64[R1 + 14];
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           I64[Sp - 24] = _s8TYp::I64;
           I64[Sp - 16] = _s8TYs::I64;
           P64[Sp - 8] = R2;
           Sp = Sp - 32;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8U0L_info" {
     sat_s8U0L_info:
         const sat_s8U0L_entry;
         const 8589934592;
         const 4294967309;
         const 8589934597;
         const S8U6c_srt;
 },
 _c8VDY() //  [R1]
         { []
         }
     {offset
       c8VDY: // global
           _s8TYs::I64 = I64[Sp + 16];
           if (%MO_S_Gt_W64(_s8TYs::I64, 1)) goto c8VHN; else goto c8VHO;
       c8VHN: // global
           _s8TYC::P64 = R1;
           _s8TYE::I64 = _s8TYs::I64;
           goto s8TYD;
       c8VHO: // global
           _s8TYC::P64 = R1;
           _s8TYE::I64 = 1;
           goto s8TYD;
       s8TYD: // global
           _s8TYF::I64 = _s8TYE::I64 << 2;
           if (%MO_S_Ge_W64(_s8TYF::I64, 0)) goto c8VHX; else goto c8VI2;
       c8VHX: // global
           I64[Sp - 24] = block_c8VEb_info;
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           I64[Sp - 16] = _s8TYE::I64;
           I64[Sp - 8] = _s8TYF::I64;
           P64[Sp] = _s8TYC::P64;
           Sp = Sp - 24;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
       c8VI2: // global
           R1 = GHC.ForeignPtr.mallocForeignPtrBytes2_closure;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8VDY_info" {
     block_c8VDY_info:
         const _c8VDY;
         const 195;
         const 4294967326;
         const S8U6c_srt;
 },
 _c8VEb() //  [R1]
         { []
         }
     {offset
       c8VEb: // global
           I64[Sp] = block_c8VEd_info;
           _s8TYJ::P64 = R1;
           R1 = I64[Sp + 16];
           P64[Sp + 16] = _s8TYJ::P64;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8VEb_info" {
     block_c8VEb_info:
         const _c8VEb;
         const 1734;
         const 30;
 },
 _c8VEd() //  [R1]
         { []
         }
     {offset
       c8VEd: // global
           Hp = Hp + 176;
           if (Hp > HpLim) (likely: False) goto c8VI1; else goto c8VI0;
       c8VI1: // global
           HpAlloc = 176;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8VI0: // global
           I64[Hp - 168] = GHC.ForeignPtr.MallocPtr_con_info;
           P64[Hp - 160] = R1;
           P64[Hp - 152] = P64[Sp + 16];
           I64[Hp - 144] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 136] = Hp - 166;
           P64[Hp - 128] = GHC.IO.Buffer.WriteBuffer_closure+2;
           P64[Hp - 120] = R1 + 16;
           I64[Hp - 112] = I64[Sp + 8];
           I64[Hp - 104] = 0;
           I64[Hp - 96] = 0;
           I64[Hp - 88] = $wgo_s8TYQ_info;
           P64[Hp - 80] = P64[Sp + 48];
           P64[Hp - 72] = Hp - 143;
           I64[Hp - 64] = GHC.ForeignPtr.PlainForeignPtr_con_info;
           P64[Hp - 56] = P64[Sp + 24];
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = Hp - 63;
           P64[Hp - 32] = GHC.IO.Buffer.ReadBuffer_closure+1;
           I64[Hp - 24] = I64[Sp + 32];
           _s8TYs::I64 = I64[Sp + 40];
           I64[Hp - 16] = _s8TYs::I64;
           I64[Hp - 8] = 0;
           I64[Hp] = _s8TYs::I64;
           R2 = Hp - 47;
           R1 = Hp - 86;
           Sp = Sp + 56;
           call $wgo_s8TYQ_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8VEd_info" {
     block_c8VEd_info:
         const _c8VEd;
         const 1606;
         const 30;
 },
 GHC.Foreign.$wpeekCString_entry() //  [R2, R3]
         { []
         }
     {offset
       c8VI5: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8VI6; else goto c8VI7;
       c8VI6: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Foreign.$wpeekCString_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8VI7: // global
           _s8TYp::I64 = R3;
           _s8TYo::P64 = R2;
           _s8U0N::I64 = 0;
           goto c8VId;
       c8VId: // global
           if (I8[_s8TYp::I64 + _s8U0N::I64] == 0 :: W8) goto c8VIj; else goto c8VIi;
       c8VIj: // global
           I64[Sp - 24] = block_c8VDO_info;
           R1 = _s8TYo::P64;
           I64[Sp - 16] = _s8TYp::I64;
           I64[Sp - 8] = _s8U0N::I64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u8VIm; else goto c8VDP;
       u8VIm: // global
           call _c8VDO(R1) args: 0, res: 0, upd: 0;
       c8VDP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8VIi: // global
           _s8U0N::I64 = _s8U0N::I64 + 1;
           goto c8VId;
     }
 },
 section ""relreadonly" . GHC.Foreign.$wpeekCString_info" {
     GHC.Foreign.$wpeekCString_info:
         const GHC.Foreign.$wpeekCString_entry;
         const 0;
         const 4402341478414;
         const 12884901902;
         const S8U6c_srt;
 },
 _c8VDO() //  [R1]
         { []
         }
     {offset
       c8VDO: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8VIb; else goto c8VIa;
       c8VIb: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8VIa: // global
           _s8TYw::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_s8U0L_info;
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = I64[Sp + 16];
           R4 = Hp - 14;
           R3 = GHC.IO.Encoding.Types.close_closure+1;
           R2 = _s8TYw::P64;
           Sp = Sp + 24;
           call GHC.IO.bracket1_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8VDO_info" {
     block_c8VDO_info:
         const _c8VDO;
         const 194;
         const 4294967326;
         const S8U6c_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:03.221170154 UTC

[section ""data" . GHC.Foreign.peekCString1_closure" {
     GHC.Foreign.peekCString1_closure:
         const GHC.Foreign.peekCString1_info;
         const 0;
 },
 GHC.Foreign.peekCString1_entry() //  [R2, R3]
         { []
         }
     {offset
       c8VKI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8VKJ; else goto c8VKK;
       c8VKJ: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Foreign.peekCString1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8VKK: // global
           I64[Sp - 16] = block_c8VKF_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8VKO; else goto c8VKG;
       u8VKO: // global
           call _c8VKF(R1) args: 0, res: 0, upd: 0;
       c8VKG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Foreign.peekCString1_info" {
     GHC.Foreign.peekCString1_info:
         const GHC.Foreign.peekCString1_entry;
         const 0;
         const 12884901902;
         const 12884901903;
         const S8U6c_srt+80;
 },
 _c8VKF() //  [R1]
         { []
         }
     {offset
       c8VKF: // global
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Foreign.$wpeekCString_entry(R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8VKF_info" {
     block_c8VKF_info:
         const _c8VKF;
         const 1;
         const 4294967326;
         const S8U6c_srt+80;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:03.226539598 UTC

[section ""data" . GHC.Foreign.peekCString_closure" {
     GHC.Foreign.peekCString_closure:
         const GHC.Foreign.peekCString_info;
         const 0;
 },
 GHC.Foreign.peekCString_entry() //  [R2, R3]
         { []
         }
     {offset
       c8VL2: // global
           R3 = R3;
           R2 = R2;
           call GHC.Foreign.peekCString1_entry(R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Foreign.peekCString_info" {
     GHC.Foreign.peekCString_info:
         const GHC.Foreign.peekCString_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const S8U6c_srt+88;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:03.230823672 UTC

[section ""data" . GHC.Foreign.charIsRepresentable2_closure" {
     GHC.Foreign.charIsRepresentable2_closure:
         const GHC.Foreign.charIsRepresentable2_info;
         const 0;
 },
 GHC.Foreign.charIsRepresentable2_entry() //  [R2]
         { []
         }
     {offset
       c8VLg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8VLk; else goto c8VLl;
       c8VLk: // global
           R2 = R2;
           R1 = GHC.Foreign.charIsRepresentable2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8VLl: // global
           I64[Sp - 8] = block_c8VLd_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8VLD; else goto c8VLe;
       u8VLD: // global
           call _c8VLd(R1) args: 0, res: 0, upd: 0;
       c8VLe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Foreign.charIsRepresentable2_info" {
     GHC.Foreign.charIsRepresentable2_info:
         const GHC.Foreign.charIsRepresentable2_entry;
         const 0;
         const 30064771086;
         const 8589934597;
         const S8U6c_srt+96;
 },
 _c8VLd() //  [R1]
         { []
         }
     {offset
       c8VLd: // global
           I64[Sp - 8] = block_c8VLj_info;
           R2 = P64[R1 + 7];
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8VLd_info" {
     block_c8VLd_info:
         const _c8VLd;
         const 0;
         const 12884901918;
         const S8U6c_srt+96;
 },
 _c8VLj() //  [R1]
         { []
         }
     {offset
       c8VLj: // global
           I64[Sp] = block_c8VLq_info;
           R3 = GHC.IO.Exception.$fExceptionIOException4_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8VLj_info" {
     block_c8VLj_info:
         const _c8VLj;
         const 1;
         const 12884901918;
         const S8U6c_srt+96;
 },
 _c8VLq() //  [R1]
         { []
         }
     {offset
       c8VLq: // global
           if (R1 & 7 == 1) goto c8VLx; else goto c8VLB;
       c8VLx: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       c8VLB: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8VLq_info" {
     block_c8VLq_info:
         const _c8VLq;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:03.24339795 UTC

[section ""data" . GHC.Foreign.charIsRepresentable1_closure" {
     GHC.Foreign.charIsRepresentable1_closure:
         const GHC.Foreign.charIsRepresentable1_info;
         const 0;
 },
 sat_s8U1w_entry() //  [R1, R2]
         { []
         }
     {offset
       c8VMd: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8VMe; else goto c8VMf;
       c8VMe: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8VMf: // global
           I64[Sp - 24] = block_c8VMa_info;
           _s8U17::P64 = P64[R1 + 6];
           _s8U19::P64 = P64[R1 + 14];
           R1 = R2;
           P64[Sp - 16] = _s8U17::P64;
           P64[Sp - 8] = _s8U19::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u8VN6; else goto c8VMb;
       u8VN6: // global
           call _c8VMa(R1) args: 0, res: 0, upd: 0;
       c8VMb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8U1w_info" {
     sat_s8U1w_info:
         const sat_s8U1w_entry;
         const 2;
         const 4294967307;
         const 8589934597;
         const S8U6c_srt+80;
 },
 _c8VMa() //  [R1]
         { []
         }
     {offset
       c8VMa: // global
           I64[Sp] = block_c8VMi_info;
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 16];
           call GHC.Foreign.$wpeekCString_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8VMa_info" {
     block_c8VMa_info:
         const _c8VMa;
         const 2;
         const 4294967326;
         const S8U6c_srt+80;
 },
 _c8VMi() //  [R1]
         { []
         }
     {offset
       c8VMi: // global
           I64[Sp] = block_c8VMk_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u8VN7; else goto c8VMn;
       u8VN7: // global
           call _c8VMk(R1) args: 0, res: 0, upd: 0;
       c8VMn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8VMi_info" {
     block_c8VMi_info:
         const _c8VMi;
         const 130;
         const 30;
 },
 _c8VMk() //  [R1]
         { []
         }
     {offset
       c8VMk: // global
           if (R1 & 7 == 1) goto u8VN3; else goto c8VMy;
       u8VN3: // global
           Sp = Sp + 24;
           call _c8VN0() args: 0, res: 0, upd: 0;
       c8VMy: // global
           I64[Sp] = block_c8VMw_info;
           _s8U1m::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp + 16] = _s8U1m::P64;
           if (R1 & 7 != 0) goto u8VN8; else goto c8VMz;
       u8VN8: // global
           call _c8VMw(R1) args: 0, res: 0, upd: 0;
       c8VMz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8VMk_info" {
     block_c8VMk_info:
         const _c8VMk;
         const 130;
         const 30;
 },
 _c8VMw() //  [R1]
         { []
         }
     {offset
       c8VMw: // global
           if (R1 & 7 == 1) goto c8VML; else goto u8VN4;
       c8VML: // global
           I64[Sp] = block_c8VMD_info;
           R1 = P64[Sp + 16];
           if (R1 & 7 != 0) goto u8VNa; else goto c8VME;
       u8VNa: // global
           call _c8VMD(R1) args: 0, res: 0, upd: 0;
       c8VME: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u8VN4: // global
           Sp = Sp + 24;
           call _c8VN0() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8VMw_info" {
     block_c8VMw_info:
         const _c8VMw;
         const 2;
         const 30;
 },
 _c8VMD() //  [R1]
         { []
         }
     {offset
       c8VMD: // global
           _s8U17::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c8VMI_info;
           _s8U1q::I64 = I64[R1 + 7];
           R1 = _s8U17::P64;
           I64[Sp + 16] = _s8U1q::I64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8VNc; else goto c8VMN;
       u8VNc: // global
           call _c8VMI(R1) args: 0, res: 0, upd: 0;
       c8VMN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8VMD_info" {
     block_c8VMD_info:
         const _c8VMD;
         const 130;
         const 30;
 },
 _c8VMI() //  [R1]
         { []
         }
     {offset
       c8VMI: // global
           if (I64[Sp + 8] == I64[R1 + 7]) goto c8VMW; else goto u8VN5;
       c8VMW: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u8VN5: // global
           Sp = Sp + 16;
           call _c8VN0() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8VMI_info" {
     block_c8VMI_info:
         const _c8VMI;
         const 65;
         const 30;
 },
 _c8VN0() //  []
         { []
         }
     {offset
       c8VN0: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s8U1x_entry() //  [R1]
         { []
         }
     {offset
       c8VNk: // global
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Foreign.charIsRepresentable3_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8U1x_info" {
     sat_s8U1x_info:
         const sat_s8U1x_entry;
         const 3;
         const 8;
         const 4294967299;
 },
 GHC.Foreign.charIsRepresentable1_entry() //  [R2, R3]
         { []
         }
     {offset
       c8VNn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8VNo; else goto c8VNp;
       c8VNo: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Foreign.charIsRepresentable1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8VNp: // global
           I64[Sp - 16] = block_c8VM0_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8VNt; else goto c8VM1;
       u8VNt: // global
           call _c8VM0(R1) args: 0, res: 0, upd: 0;
       c8VM1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Foreign.charIsRepresentable1_info" {
     GHC.Foreign.charIsRepresentable1_info:
         const GHC.Foreign.charIsRepresentable1_entry;
         const 0;
         const 210453397518;
         const 12884901903;
         const S8U6c_srt+80;
 },
 _c8VM0() //  [R1]
         { []
         }
     {offset
       c8VM0: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c8VNs; else goto c8VNr;
       c8VNs: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8VNr: // global
           I64[Hp - 72] = sat_s8U1w_info;
           _s8U17::P64 = P64[Sp + 8];
           P64[Hp - 64] = _s8U17::P64;
           P64[Hp - 56] = R1;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = _s8U17::P64;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           I64[Hp - 24] = sat_s8U1x_info;
           P64[Hp - 16] = R1;
           P64[Hp - 8] = Hp - 46;
           P64[Hp] = Hp - 70;
           R2 = GHC.Foreign.charIsRepresentable2_closure+2;
           R1 = Hp - 23;
           Sp = Sp + 16;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8VM0_info" {
     block_c8VM0_info:
         const _c8VM0;
         const 1;
         const 73014444062;
         const S8U6c_srt+80;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:03.261785152 UTC

[section ""data" . GHC.Foreign.charIsRepresentable_closure" {
     GHC.Foreign.charIsRepresentable_closure:
         const GHC.Foreign.charIsRepresentable_info;
         const 0;
 },
 GHC.Foreign.charIsRepresentable_entry() //  [R2, R3]
         { []
         }
     {offset
       c8VOm: // global
           R3 = R3;
           R2 = R2;
           call GHC.Foreign.charIsRepresentable1_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Foreign.charIsRepresentable_info" {
     GHC.Foreign.charIsRepresentable_info:
         const GHC.Foreign.charIsRepresentable_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const S8U6c_srt+120;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:03.266272567 UTC

[section ""relreadonly" . S8U6c_srt" {
     S8U6c_srt:
         const GHC.ForeignPtr.mallocForeignPtrBytes2_closure;
         const $wpeekCStringLen_r8TNn_closure;
         const peekCStringLen1_r8TNo_closure;
         const Foreign.Marshal.Array.withArrayLen_closure;
         const GHC.Foreign.withCStringsLen1_closure;
         const Foreign.Marshal.Alloc.malloc1_closure;
         const Foreign.Marshal.Alloc.realloc2_closure;
         const newEncodedCString1_r8TNq_closure;
         const GHC.Foreign.newCString1_closure;
         const GHC.Foreign.newEncodedCString_closure;
         const GHC.Foreign.$wpeekCString_closure;
         const GHC.Foreign.peekCString1_closure;
         const Data.Typeable.Internal.sameTypeRep_closure;
         const GHC.IO.Exception.$fExceptionIOException4_closure;
         const GHC.Foreign.charIsRepresentable2_closure;
         const GHC.Foreign.charIsRepresentable1_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:06.492853353 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:04:06.494449245 UTC

[section ""cstring" . GHC.Foreign.$trModule4_bytes" {
     GHC.Foreign.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:06.496990375 UTC

[section ""data" . GHC.Foreign.$trModule3_closure" {
     GHC.Foreign.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Foreign.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:06.498910431 UTC

[section ""cstring" . GHC.Foreign.$trModule2_bytes" {
     GHC.Foreign.$trModule2_bytes:
         I8[] [71,72,67,46,70,111,114,101,105,103,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:06.500719287 UTC

[section ""data" . GHC.Foreign.$trModule1_closure" {
     GHC.Foreign.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Foreign.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:06.50267931 UTC

[section ""data" . GHC.Foreign.$trModule_closure" {
     GHC.Foreign.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Foreign.$trModule3_closure+1;
         const GHC.Foreign.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:06.516015898 UTC

[section ""data" . $wpeekCStringLen_r8TNn_closure" {
     $wpeekCStringLen_r8TNn_closure:
         const $wpeekCStringLen_r8TNn_info;
         const 0;
 },
 sat_s8VPH_entry() //  [R1]
         { []
         }
     {offset
       c8W4P: // global
           _s8VPH::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c8W4Q; else goto c8W4R;
       c8W4R: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c8W4T; else goto c8W4S;
       c8W4T: // global
           HpAlloc = 40;
           goto c8W4Q;
       c8W4Q: // global
           R1 = _s8VPH::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8W4S: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s8VPH::P64;
           _s8VPw::P64 = P64[_s8VPH::P64 + 16];
           _s8VPE::P64 = P64[_s8VPH::P64 + 24];
           _s8VPA::I64 = I64[_s8VPH::P64 + 32];
           I64[Hp - 32] = GHC.Types.C#_con_info;
           I64[Hp - 24] = _s8VPA::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _s8VPw::P64;
           R3 = _s8VPE::P64;
           R2 = Hp - 14;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8VPH_info" {
     sat_s8VPH_info:
         const sat_s8VPH_entry;
         const 4294967298;
         const 15;
 },
 sat_s8VPY_entry() //  [R1]
         { []
         }
     {offset
       c8W52: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8W53; else goto c8W54;
       c8W53: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8W54: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.Types.[]_closure+1;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8VPY_info" {
     sat_s8VPY_info:
         const sat_s8VPY_entry;
         const 1;
         const 16;
 },
 $wgo_s8VOY_entry() //  [R1, R2]
         { []
         }
     {offset
       c8W55: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c8W56; else goto c8W57;
       c8W56: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8W57: // global
           I64[Sp - 32] = block_c8W3u_info;
           _s8VOY::P64 = R1;
           _s8VOX::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 24] = _s8VOX::P64;
           P64[Sp - 16] = _s8VOY::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u8W6H; else goto c8W3v;
       u8W6H: // global
           call _c8W3u(R1) args: 0, res: 0, upd: 0;
       c8W3v: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wgo_s8VOY_info" {
     $wgo_s8VOY_info:
         const $wgo_s8VOY_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _c8W3u() //  [R1]
         { []
         }
     {offset
       c8W3u: // global
           _s8VOX::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c8W3z_info;
           R3 = _s8VOX::P64;
           R2 = P64[Sp + 24];
           _s8VP3::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp + 24] = _s8VP3::P64;
           Sp = Sp + 8;
           call stg_ap_ppv_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8W3u_info" {
     block_c8W3u_info:
         const _c8W3u;
         const 3;
         const 30;
 },
 _c8W3z() //  [R1]
         { []
         }
     {offset
       c8W3z: // global
           I64[Sp] = block_c8W3B_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u8W6z; else goto c8W3C;
       u8W6z: // global
           call _c8W3B(R1) args: 0, res: 0, upd: 0;
       c8W3C: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8W3z_info" {
     block_c8W3z_info:
         const _c8W3z;
         const 2;
         const 30;
 },
 _c8W3B() //  [R1]
         { []
         }
     {offset
       c8W3B: // global
           I64[Sp - 16] = block_c8W3G_info;
           _s8VPb::P64 = P64[R1 + 7];
           _s8VPd::P64 = P64[R1 + 23];
           R1 = P64[R1 + 15];
           P64[Sp - 8] = _s8VPd::P64;
           P64[Sp] = _s8VPb::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8W6A; else goto c8W3H;
       u8W6A: // global
           call _c8W3G(R1) args: 0, res: 0, upd: 0;
       c8W3H: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8W3B_info" {
     block_c8W3B_info:
         const _c8W3B;
         const 2;
         const 30;
 },
 _c8W3G() //  [R1]
         { []
         }
     {offset
       c8W3G: // global
           if (I64[R1 + 39] == I64[R1 + 47]) goto c8W62; else goto c8W5v;
       c8W62: // global
           I64[Sp + 32] = block_c8W4e_info;
           R1 = P64[Sp + 8];
           Sp = Sp + 32;
           if (R1 & 7 != 0) goto u8W6C; else goto c8W4f;
       u8W6C: // global
           call _c8W4e(R1) args: 0, res: 0, upd: 0;
       c8W4f: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8W5v: // global
           I64[Sp] = block_c8W5c_info;
           _s8VPe::P64 = R1;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s8VPe::P64;
           if (R1 & 7 != 0) goto u8W6B; else goto c8W5w;
       u8W6B: // global
           call _c8W5c(R1) args: 0, res: 0, upd: 0;
       c8W5w: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8W3G_info" {
     block_c8W3G_info:
         const _c8W3G;
         const 4;
         const 30;
 },
 _c8W4e() //  [R1]
         { []
         }
     {offset
       c8W4e: // global
           _s8VQm::P64 = P64[R1 + 7];
           _s8VQr::I64 = I64[R1 + 47] - I64[R1 + 39];
           if (%MO_S_Gt_W64(_s8VQr::I64, 0)) goto c8W6k; else goto c8W6l;
       c8W6k: // global
           P64[Sp - 24] = _s8VQm::P64;
           I64[Sp - 16] = _s8VQr::I64 - 1;
           P64[Sp - 8] = GHC.Types.[]_closure+1;
           I64[Sp] = I64[R1 + 23];
           Sp = Sp - 32;
           call _c8W4w() args: 0, res: 0, upd: 0;
       c8W6l: // global
           call MO_Touch(_s8VQm::P64);
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8W4e_info" {
     block_c8W4e_info:
         const _c8W4e;
         const 0;
         const 30;
 },
 _c8W4w() //  []
         { []
         }
     {offset
       c8W4w: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c8W6f; else goto c8W6e;
       c8W6f: // global
           HpAlloc = 40;
           I64[Sp] = block_c8W4w_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c8W6e: // global
           _s8VQE::P64 = P64[Sp + 24];
           _s8VQG::I64 = I64[Sp + 16];
           if (_s8VQG::I64 != 0) goto c8W6h; else goto c8W6i;
       c8W6h: // global
           I64[Hp - 32] = GHC.Types.C#_con_info;
           I64[Hp - 24] = %MO_UU_Conv_W32_W64(I32[I64[Sp + 32] + (_s8VQG::I64 << 2)]);
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _s8VQE::P64;
           I64[Sp + 16] = _s8VQG::I64 - 1;
           P64[Sp + 24] = Hp - 14;
           call _c8W4w() args: 0, res: 0, upd: 0;
       c8W6i: // global
           Hp = Hp - 40;
           P64[Sp + 24] = _s8VQE::P64;
           Sp = Sp + 8;
           call _c8W65() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8W4w_info" {
     block_c8W4w_info:
         const _c8W4w;
         const 644;
         const 30;
 },
 _c8W65() //  []
         { []
         }
     {offset
       c8W65: // global
           Hp = Hp + 40;
           _s8VQu::P64 = P64[Sp + 16];
           if (Hp > HpLim) (likely: False) goto c8W6c; else goto c8W6b;
       c8W6c: // global
           HpAlloc = 40;
           I64[Sp - 8] = block_c8W64_info;
           R1 = _s8VQu::P64;
           Sp = Sp - 8;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8W6b: // global
           _s8VQy::I64 = %MO_UU_Conv_W32_W64(I32[I64[Sp + 24]]);
           call MO_Touch(P64[Sp]);
           I64[Hp - 32] = GHC.Types.C#_con_info;
           I64[Hp - 24] = _s8VQy::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _s8VQu::P64;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8W64() //  [R1]
         { []
         }
     {offset
       c8W64: // global
           P64[Sp + 24] = R1;
           Sp = Sp + 8;
           call _c8W65() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8W64_info" {
     block_c8W64_info:
         const _c8W64;
         const 900;
         const 30;
 },
 _c8W5c() //  [R1]
         { []
         }
     {offset
       c8W5c: // global
           _s8VPd::P64 = P64[Sp + 8];
           if (R1 & 7 == 2) goto c8W5W; else goto c8W5K;
       c8W5W: // global
           I64[Sp + 8] = block_c8W5U_info;
           R1 = _s8VPd::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8W6I; else goto c8W5X;
       u8W6I: // global
           call _c8W5U(R1) args: 0, res: 0, upd: 0;
       c8W5X: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8W5K: // global
           _s8VPe::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c8W5A_info;
           R3 = _s8VPd::P64;
           R2 = _s8VPe::P64;
           R1 = P64[Sp + 32];
           Sp = Sp + 16;
           call stg_ap_ppv_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8W5c_info" {
     block_c8W5c_info:
         const _c8W5c;
         const 4;
         const 30;
 },
 _c8W5U() //  [R1]
         { []
         }
     {offset
       c8W5U: // global
           P64[Sp + 24] = P64[Sp + 8];
           I64[Sp + 8] = I64[R1 + 23];
           P64[Sp - 16] = P64[R1 + 7];
           I64[Sp - 8] = I64[R1 + 39];
           I64[Sp] = I64[R1 + 47];
           Sp = Sp - 16;
           call _s8VPm() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8W5U_info" {
     block_c8W5U_info:
         const _c8W5U;
         const 259;
         const 30;
 },
 _c8W5A() //  [R1]
         { []
         }
     {offset
       c8W5A: // global
           I64[Sp] = block_c8W5C_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u8W6J; else goto c8W5D;
       u8W6J: // global
           call _c8W5C(R1) args: 0, res: 0, upd: 0;
       c8W5D: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8W5A_info" {
     block_c8W5A_info:
         const _c8W5A;
         const 130;
         const 30;
 },
 _c8W5C() //  [R1]
         { []
         }
     {offset
       c8W5C: // global
           I64[Sp] = block_c8W5H_info;
           _s8VQ4::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp + 16] = _s8VQ4::P64;
           if (R1 & 7 != 0) goto u8W6K; else goto c8W5N;
       u8W6K: // global
           call _c8W5H(R1) args: 0, res: 0, upd: 0;
       c8W5N: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8W5C_info" {
     block_c8W5C_info:
         const _c8W5C;
         const 130;
         const 30;
 },
 _c8W5H() //  [R1]
         { []
         }
     {offset
       c8W5H: // global
           P64[Sp - 24] = P64[R1 + 7];
           I64[Sp - 16] = I64[R1 + 39];
           I64[Sp - 8] = I64[R1 + 47];
           I64[Sp] = I64[R1 + 23];
           P64[Sp + 16] = P64[Sp + 16];
           Sp = Sp - 24;
           call _s8VPm() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8W5H_info" {
     block_c8W5H_info:
         const _c8W5H;
         const 2;
         const 30;
 },
 _s8VPm() //  []
         { []
         }
     {offset
       s8VPm: // global
           _s8VPt::I64 = I64[Sp + 16] - I64[Sp + 8];
           if (%MO_S_Gt_W64(_s8VPt::I64, 0)) goto c8W5p; else goto c8W5q;
       c8W5p: // global
           P64[Sp + 8] = GHC.Types.[]_closure+1;
           I64[Sp + 16] = _s8VPt::I64 - 1;
           Sp = Sp - 8;
           call _c8W46() args: 0, res: 0, upd: 0;
       c8W5q: // global
           _s8VOY::P64 = P64[Sp + 32];
           _s8VPo::P64 = P64[Sp + 40];
           call MO_Touch(P64[Sp]);
           I64[Sp + 40] = block_c8W4W_info;
           R2 = _s8VPo::P64;
           R1 = _s8VOY::P64;
           Sp = Sp + 40;
           call $wgo_s8VOY_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c8W46() //  []
         { []
         }
     {offset
       c8W46: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c8W5k; else goto c8W5j;
       c8W5k: // global
           HpAlloc = 40;
           I64[Sp] = block_c8W46_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c8W5j: // global
           _s8VPp::I64 = I64[Sp + 32];
           _s8VPK::P64 = P64[Sp + 16];
           _s8VPM::I64 = I64[Sp + 24];
           if (_s8VPM::I64 != 0) goto c8W5m; else goto c8W5n;
       c8W5m: // global
           _s8VPP::I64 = %MO_UU_Conv_W32_W64(I32[_s8VPp::I64 + (_s8VPM::I64 << 2)]);
           I64[Hp - 32] = GHC.Types.C#_con_info;
           I64[Hp - 24] = _s8VPP::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _s8VPK::P64;
           I64[Sp + 24] = _s8VPM::I64 - 1;
           P64[Sp + 16] = Hp - 14;
           call _c8W46() args: 0, res: 0, upd: 0;
       c8W5n: // global
           Hp = Hp - 40;
           _s8VOY::P64 = P64[Sp + 40];
           _s8VPo::P64 = P64[Sp + 48];
           _s8VPA::I64 = %MO_UU_Conv_W32_W64(I32[_s8VPp::I64]);
           call MO_Touch(P64[Sp + 8]);
           I64[Sp + 32] = block_c8W4H_info;
           R2 = _s8VPo::P64;
           R1 = _s8VOY::P64;
           I64[Sp + 40] = _s8VPA::I64;
           P64[Sp + 48] = _s8VPK::P64;
           Sp = Sp + 32;
           call $wgo_s8VOY_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8W46_info" {
     block_c8W46_info:
         const _c8W46;
         const 774;
         const 30;
 },
 _c8W4H() //  [R1]
         { []
         }
     {offset
       c8W4H: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c8W5h; else goto c8W5g;
       c8W5h: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8W5g: // global
           I64[Hp - 32] = sat_s8VPH_info;
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = R1;
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 32;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8W4H_info" {
     block_c8W4H_info:
         const _c8W4H;
         const 66;
         const 30;
 },
 _c8W4W() //  [R1]
         { []
         }
     {offset
       c8W4W: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8W5t; else goto c8W5s;
       c8W5t: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8W5s: // global
           I64[Hp - 16] = sat_s8VPY_info;
           P64[Hp] = R1;
           R1 = Hp - 16;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8W4W_info" {
     block_c8W4W_info:
         const _c8W4W;
         const 0;
         const 30;
 },
 sat_s8VQT_entry() //  [R1, R2]
         { []
         }
     {offset
       c8W6P: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c8W6Q; else goto c8W6R;
       c8W6Q: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8W6R: // global
           I64[Sp - 24] = block_c8W2T_info;
           _s8VOw::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 16] = _s8VOw::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u8W7b; else goto c8W2U;
       u8W7b: // global
           call _c8W2T(R1) args: 0, res: 0, upd: 0;
       c8W2U: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8VQT_info" {
     sat_s8VQT_info:
         const sat_s8VQT_entry;
         const 2;
         const 4294967307;
         const 8589934597;
         const S8W7j_srt;
 },
 _c8W2T() //  [R1]
         { []
         }
     {offset
       c8W2T: // global
           I64[Sp - 8] = block_c8W2Y_info;
           _s8VOF::I64 = I64[R1 + 7];
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           I64[Sp] = _s8VOF::I64;
           Sp = Sp - 8;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8W2T_info" {
     block_c8W2T_info:
         const _c8W2T;
         const 2;
         const 4294967326;
         const S8W7j_srt;
 },
 _c8W2Y() //  [R1]
         { []
         }
     {offset
       c8W2Y: // global
           I64[Sp] = block_c8W30_info;
           _s8VOI::P64 = R1;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s8VOI::P64;
           if (R1 & 7 != 0) goto u8W7a; else goto c8W31;
       u8W7a: // global
           call _c8W30(R1) args: 0, res: 0, upd: 0;
       c8W31: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8W2Y_info" {
     block_c8W2Y_info:
         const _c8W2Y;
         const 67;
         const 4294967326;
         const S8W7j_srt;
 },
 _c8W30() //  [R1]
         { []
         }
     {offset
       c8W30: // global
           _s8VOK::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(_s8VOK::I64, 1)) goto c8W78; else goto c8W79;
       c8W78: // global
           _s8VOM::I64 = _s8VOK::I64;
           goto s8VOL;
       c8W79: // global
           _s8VOM::I64 = 1;
           goto s8VOL;
       s8VOL: // global
           _s8VON::I64 = _s8VOM::I64 << 2;
           if (%MO_S_Ge_W64(_s8VON::I64, 0)) goto c8W6Z; else goto c8W74;
       c8W6Z: // global
           I64[Sp - 24] = block_c8W3g_info;
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           I64[Sp - 16] = _s8VOM::I64;
           I64[Sp - 8] = _s8VON::I64;
           I64[Sp] = _s8VOK::I64;
           Sp = Sp - 24;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
       c8W74: // global
           R1 = GHC.ForeignPtr.mallocForeignPtrBytes2_closure;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8W30_info" {
     block_c8W30_info:
         const _c8W30;
         const 67;
         const 4294967326;
         const S8W7j_srt;
 },
 _c8W3g() //  [R1]
         { []
         }
     {offset
       c8W3g: // global
           I64[Sp] = block_c8W3i_info;
           _s8VOR::P64 = R1;
           R1 = I64[Sp + 16];
           P64[Sp + 16] = _s8VOR::P64;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8W3g_info" {
     block_c8W3g_info:
         const _c8W3g;
         const 966;
         const 30;
 },
 _c8W3i() //  [R1]
         { []
         }
     {offset
       c8W3i: // global
           Hp = Hp + 176;
           if (Hp > HpLim) (likely: False) goto c8W73; else goto c8W72;
       c8W73: // global
           HpAlloc = 176;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8W72: // global
           I64[Hp - 168] = GHC.ForeignPtr.MallocPtr_con_info;
           P64[Hp - 160] = R1;
           P64[Hp - 152] = P64[Sp + 16];
           I64[Hp - 144] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 136] = Hp - 166;
           P64[Hp - 128] = GHC.IO.Buffer.WriteBuffer_closure+2;
           P64[Hp - 120] = R1 + 16;
           I64[Hp - 112] = I64[Sp + 8];
           I64[Hp - 104] = 0;
           I64[Hp - 96] = 0;
           I64[Hp - 88] = $wgo_s8VOY_info;
           P64[Hp - 80] = P64[Sp + 48];
           P64[Hp - 72] = Hp - 143;
           I64[Hp - 64] = GHC.ForeignPtr.PlainForeignPtr_con_info;
           P64[Hp - 56] = P64[Sp + 40];
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = Hp - 63;
           P64[Hp - 32] = GHC.IO.Buffer.ReadBuffer_closure+1;
           I64[Hp - 24] = I64[Sp + 32];
           _s8VOK::I64 = I64[Sp + 24];
           I64[Hp - 16] = _s8VOK::I64;
           I64[Hp - 8] = 0;
           I64[Hp] = _s8VOK::I64;
           R2 = Hp - 47;
           R1 = Hp - 86;
           Sp = Sp + 56;
           call $wgo_s8VOY_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8W3i_info" {
     block_c8W3i_info:
         const _c8W3i;
         const 838;
         const 30;
 },
 $wpeekCStringLen_r8TNn_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c8W7c: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8W7d; else goto c8W7e;
       c8W7d: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = $wpeekCStringLen_r8TNn_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8W7e: // global
           I64[Sp - 24] = block_c8W2J_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u8W7i; else goto c8W2K;
       u8W7i: // global
           call _c8W2J(R1) args: 0, res: 0, upd: 0;
       c8W2K: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wpeekCStringLen_r8TNn_info" {
     $wpeekCStringLen_r8TNn_info:
         const $wpeekCStringLen_r8TNn_entry;
         const 0;
         const 12884901902;
         const 17179869207;
         const S8W7j_srt;
 },
 _c8W2J() //  [R1]
         { []
         }
     {offset
       c8W2J: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8W7h; else goto c8W7g;
       c8W7h: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8W7g: // global
           _s8VOA::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_s8VQT_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           R4 = Hp - 14;
           R3 = GHC.IO.Encoding.Types.close_closure+1;
           R2 = _s8VOA::P64;
           Sp = Sp + 24;
           call GHC.IO.bracket1_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8W2J_info" {
     block_c8W2J_info:
         const _c8W2J;
         const 2;
         const 4294967326;
         const S8W7j_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:06.564054706 UTC

[section ""data" . peekCStringLen1_r8TNo_closure" {
     peekCStringLen1_r8TNo_closure:
         const peekCStringLen1_r8TNo_info;
         const 0;
 },
 peekCStringLen1_r8TNo_entry() //  [R2, R3]
         { []
         }
     {offset
       c8WaD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8WaE; else goto c8WaF;
       c8WaE: // global
           R3 = R3;
           R2 = R2;
           R1 = peekCStringLen1_r8TNo_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8WaF: // global
           I64[Sp - 16] = block_c8WaA_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8WaJ; else goto c8WaB;
       u8WaJ: // global
           call _c8WaA(R1) args: 0, res: 0, upd: 0;
       c8WaB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . peekCStringLen1_r8TNo_info" {
     peekCStringLen1_r8TNo_info:
         const peekCStringLen1_r8TNo_entry;
         const 0;
         const 12884901902;
         const 12884901903;
         const S8W7j_srt+8;
 },
 _c8WaA() //  [R1]
         { []
         }
     {offset
       c8WaA: // global
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call $wpeekCStringLen_r8TNn_entry(R4,
                                             R3,
                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8WaA_info" {
     block_c8WaA_info:
         const _c8WaA;
         const 1;
         const 4294967326;
         const S8W7j_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:06.569311715 UTC

[section ""data" . GHC.Foreign.peekCStringLen_closure" {
     GHC.Foreign.peekCStringLen_closure:
         const GHC.Foreign.peekCStringLen_info;
         const 0;
 },
 GHC.Foreign.peekCStringLen_entry() //  [R2, R3]
         { []
         }
     {offset
       c8WaY: // global
           R3 = R3;
           R2 = R2;
           call peekCStringLen1_r8TNo_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Foreign.peekCStringLen_info" {
     GHC.Foreign.peekCStringLen_info:
         const GHC.Foreign.peekCStringLen_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const S8W7j_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:06.579797421 UTC

[section ""data" . GHC.Foreign.$wtryFillBufferAndCall_closure" {
     GHC.Foreign.$wtryFillBufferAndCall_closure:
         const GHC.Foreign.$wtryFillBufferAndCall_info;
 },
 GHC.Foreign.$wtryFillBufferAndCall_slow() //  [R1]
         { []
         }
     {offset
       c8Wb6: // global
           R6 = I64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Foreign.$wtryFillBufferAndCall_entry(R6,
                                                         R5,
                                                         R4,
                                                         R3,
                                                         R2,
                                                         R1) args: 24, res: 0, upd: 8;
     }
 },
 sat_s8VSi_entry() //  [R1]
         { []
         }
     {offset
       c8Wbj: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c8Wbo; else goto c8Wbp;
       c8Wbo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8Wbp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c8Wbg_info;
           _s8VRa::P64 = P64[R1 + 24];
           _s8VR4::I64 = I64[R1 + 32];
           R1 = P64[R1 + 16];
           I64[Sp - 32] = _s8VR4::I64;
           P64[Sp - 24] = _s8VRa::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u8Wbt; else goto c8Wbh;
       u8Wbt: // global
           call _c8Wbg(R1) args: 0, res: 0, upd: 0;
       c8Wbh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8VSi_info" {
     sat_s8VSi_info:
         const sat_s8VSi_entry;
         const 4294967298;
         const 15;
 },
 _c8Wbg() //  [R1]
         { []
         }
     {offset
       c8Wbg: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c8Wbs; else goto c8Wbr;
       c8Wbs: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c8Wbr: // global
           _s8VSg::I64 = I64[R1 + 7];
           I64[Hp - 64] = GHC.ForeignPtr.PlainForeignPtr_con_info;
           P64[Hp - 56] = P64[Sp + 16];
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = Hp - 63;
           P64[Hp - 32] = GHC.IO.Buffer.WriteBuffer_closure+2;
           I64[Hp - 24] = I64[Sp + 8];
           I64[Hp - 16] = _s8VSg::I64;
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           R1 = Hp - 47;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c8Wbg_info" {
     block_c8Wbg_info:
         const _c8Wbg;
         const 66;
         const 30;
 },
 GHC.Foreign.$wtryFillBufferAndCall_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c8Wby: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c8Wbz; else goto c8WbA;
       c8Wbz: // global
           R1 = GHC.Foreign.$wtryFillBufferAndCall_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           I64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       c8WbA: // global
           I64[Sp - 48] = block_c8Wba_info;
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           I64[Sp - 8] = R6;
           Sp = Sp - 48;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Foreign.$wtryFillBufferAndCall_info" {
     GHC.Foreign.$wtryFillBufferAndCall_info:
         const GHC.Foreign.$wtryFillBufferAndCall_entry;
         const 0;
         const 14;
         const 34359738368;
         const 0;
         const 1031;
         const GHC.Foreign.$wtryFillBufferAndCall_slow;
 },
 _c8Wba() //  [R1]
         { []
         }
     {offset
       c8Wba: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c8WbD; else goto c8WbC;
       c8WbD: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8WbC: // global
           I64[Hp - 32] = sat_s8VSi_info;
           P64[Hp - 16] = P64[Sp + 48];
           P64[Hp - 8] = R1;
           I64[Hp] = I64[Sp + 40];
           P64[Sp + 40] = Hp - 32;
           P64[Sp + 48] = P64[Sp + 32];
           Sp = Sp + 8;
           call _c8Wd8() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8Wba_info" {
     block_c8Wba_info:
         const _c8Wba;
         const 1031;
         const 30;
 },
 _c8Wd8() //  []
         { []
         }
     {offset
       c8Wd8: // global
           I64[Sp - 8] = block_c8Wda_info;
           R3 = P64[Sp + 32];
           R2 = P64[Sp + 40];
           R1 = P64[Sp];
           Sp = Sp - 8;
           call stg_ap_ppv_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c8Wda() //  [R1]
         { []
         }
     {offset
       c8Wda: // global
           I64[Sp] = block_c8Wdc_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u8We6; else goto c8Wdd;
       u8We6: // global
           call _c8Wdc(R1) args: 0, res: 0, upd: 0;
       c8Wdd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Wda_info" {
     block_c8Wda_info:
         const _c8Wda;
         const 3591;
         const 30;
 },
 _c8Wdc() //  [R1]
         { []
         }
     {offset
       c8Wdc: // global
           I64[Sp] = block_c8Wdh_info;
           _s8VRX::P64 = P64[R1 + 7];
           _s8VRZ::P64 = P64[R1 + 23];
           R1 = P64[R1 + 15];
           P64[Sp + 40] = _s8VRZ::P64;
           P64[Sp + 48] = _s8VRX::P64;
           if (R1 & 7 != 0) goto u8We7; else goto c8Wdl;
       u8We7: // global
           call _c8Wdh(R1) args: 0, res: 0, upd: 0;
       c8Wdl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Wdc_info" {
     block_c8Wdc_info:
         const _c8Wdc;
         const 3591;
         const 30;
 },
 _c8Wdh() //  [R1]
         { []
         }
     {offset
       c8Wdh: // global
           if (I64[R1 + 39] == I64[R1 + 47]) goto c8WdQ; else goto c8Wdv;
       c8WdQ: // global
           I64[Sp + 16] = block_c8WbJ_info;
           R1 = P64[Sp + 24];
           P64[Sp + 48] = P64[Sp + 40];
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto u8We9; else goto c8WcB;
       u8We9: // global
           call _c8WbJ(R1) args: 0, res: 0, upd: 0;
       c8WcB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8Wdv: // global
           I64[Sp] = block_c8Wdt_info;
           _s8VS0::P64 = R1;
           R1 = P64[Sp + 48];
           P64[Sp + 48] = _s8VS0::P64;
           if (R1 & 7 != 0) goto u8We8; else goto c8Wdw;
       u8We8: // global
           call _c8Wdt(R1) args: 0, res: 0, upd: 0;
       c8Wdw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Wdh_info" {
     block_c8Wdh_info:
         const _c8Wdh;
         const 519;
         const 30;
 },
 _c8WbJ() //  [R1]
         { []
         }
     {offset
       c8WbJ: // global
           if (R1 & 7 == 1) goto u8WdX; else goto c8WcM;
       u8WdX: // global
           Sp = Sp + 8;
           call _s8VRe() args: 0, res: 0, upd: 0;
       c8WcM: // global
           I64[Sp] = block_c8WcK_info;
           R1 = P64[Sp + 32];
           if (R1 & 7 != 0) goto u8We1; else goto c8WcN;
       u8We1: // global
           call _c8WcK(R1) args: 0, res: 0, upd: 0;
       c8WcN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8WbJ_info" {
     block_c8WbJ_info:
         const _c8WbJ;
         const 389;
         const 30;
 },
 _c8WcK() //  [R1]
         { []
         }
     {offset
       c8WcK: // global
           if (I64[R1 + 31] - I64[R1 + 47] == 0) goto u8WdY; else goto u8WdZ;
       u8WdY: // global
           Sp = Sp + 48;
           call _c8Wd3() args: 0, res: 0, upd: 0;
       u8WdZ: // global
           Sp = Sp + 8;
           call _s8VRe() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8WcK_info" {
     block_c8WcK_info:
         const _c8WcK;
         const 389;
         const 30;
 },
 _s8VRe() //  []
         { []
         }
     {offset
       s8VRe: // global
           I64[Sp - 8] = block_c8WbO_info;
           R1 = P64[Sp + 24];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8Wed; else goto c8WbQ;
       u8Wed: // global
           call _c8WbO(R1) args: 0, res: 0, upd: 0;
       c8WbQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c8WbO() //  [R1]
         { []
         }
     {offset
       c8WbO: // global
           I64[Sp] = block_c8WbU_info;
           _s8VRh::P64 = P64[R1 + 7];
           _s8VRg::I64 = I64[R1 + 23];
           _s8VRk::I64 = I64[R1 + 39];
           _s8VRl::I64 = I64[R1 + 47];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s8VRl::I64;
           I64[Sp + 16] = _s8VRk::I64;
           P64[Sp + 24] = _s8VRh::P64;
           I64[Sp + 32] = _s8VRg::I64;
           if (R1 & 7 != 0) goto u8We3; else goto c8WbW;
       u8We3: // global
           call _c8WbU(R1) args: 0, res: 0, upd: 0;
       c8WbW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8WbO_info" {
     block_c8WbO_info:
         const _c8WbO;
         const 901;
         const 30;
 },
 _c8WbU() //  [R1]
         { []
         }
     {offset
       c8WbU: // global
           _s8VR6::P64 = P64[Sp + 40];
           _s8VRg::I64 = I64[Sp + 32];
           _s8VRk::I64 = I64[Sp + 16];
           _s8VRl::I64 = I64[Sp + 8];
           if (R1 & 7 == 1) goto c8Wcb; else goto c8Wcu;
       c8Wcb: // global
           Hp = Hp + 56;
           _s8VRm::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c8Wcx; else goto c8Wcd;
       c8Wcd: // global
           I64[Hp - 48] = GHC.Types.I#_con_info;
           I64[Hp - 40] = _s8VRl::I64 - _s8VRk::I64;
           I64[Hp - 32] = GHC.Ptr.Ptr_con_info;
           I64[Hp - 24] = _s8VRg::I64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           I64[Sp + 16] = block_c8Wc6_info;
           R2 = Hp - 15;
           R1 = _s8VR6::P64;
           Sp = Sp + 16;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
       c8Wcu: // global
           Hp = Hp + 56;
           _s8VRm::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c8Wcx; else goto c8Wcw;
       c8Wcx: // global
           HpAlloc = 56;
           R1 = _s8VRm::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8Wcw: // global
           I8[_s8VRg::I64 + _s8VRl::I64] = 0 :: W8;
           I64[Hp - 48] = GHC.Types.I#_con_info;
           I64[Hp - 40] = _s8VRl::I64 - _s8VRk::I64;
           I64[Hp - 32] = GHC.Ptr.Ptr_con_info;
           I64[Hp - 24] = _s8VRg::I64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           I64[Sp + 16] = block_c8Wcq_info;
           R2 = Hp - 15;
           R1 = _s8VR6::P64;
           Sp = Sp + 16;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8WbU_info" {
     block_c8WbU_info:
         const _c8WbU;
         const 709;
         const 30;
 },
 _c8Wc6() //  [R1]
         { []
         }
     {offset
       c8Wc6: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8Wch; else goto c8Wcg;
       c8Wch: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8Wcg: // global
           call MO_Touch(P64[Sp + 8]);
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Wc6_info" {
     block_c8Wc6_info:
         const _c8Wc6;
         const 387;
         const 30;
 },
 _c8Wcq() //  [R1]
         { []
         }
     {offset
       c8Wcq: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8WcA; else goto c8Wcz;
       c8WcA: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8Wcz: // global
           call MO_Touch(P64[Sp + 8]);
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Wcq_info" {
     block_c8Wcq_info:
         const _c8Wcq;
         const 387;
         const 30;
 },
 _c8Wdt() //  [R1]
         { []
         }
     {offset
       c8Wdt: // global
           if (R1 & 7 == 2) goto u8WdV; else goto c8WdF;
       u8WdV: // global
           Sp = Sp + 64;
           call _c8Wd3() args: 0, res: 0, upd: 0;
       c8WdF: // global
           I64[Sp] = block_c8WdA_info;
           R3 = P64[Sp + 40];
           R2 = P64[Sp + 48];
           R1 = P64[Sp + 16];
           call stg_ap_ppv_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Wdt_info" {
     block_c8Wdt_info:
         const _c8Wdt;
         const 519;
         const 30;
 },
 _c8Wd3() //  []
         { []
         }
     {offset
       c8Wd3: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8WdA() //  [R1]
         { []
         }
     {offset
       c8WdA: // global
           I64[Sp] = block_c8WdC_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u8Web; else goto c8WdH;
       u8Web: // global
           call _c8WdC(R1) args: 0, res: 0, upd: 0;
       c8WdH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8WdA_info" {
     block_c8WdA_info:
         const _c8WdA;
         const 3591;
         const 30;
 },
 _c8WdC() //  [R1]
         { []
         }
     {offset
       c8WdC: // global
           P64[Sp + 48] = P64[R1 + 7];
           P64[Sp + 40] = P64[R1 + 15];
           Sp = Sp + 8;
           call _c8Wd8() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8WdC_info" {
     block_c8WdC_info:
         const _c8WdC;
         const 3591;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:06.61264007 UTC

[section ""data" . GHC.Foreign.newCStringLen1_closure" {
     GHC.Foreign.newCStringLen1_closure:
         const GHC.Foreign.newCStringLen1_info;
 },
 GHC.Foreign.newCStringLen1_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c8Wgr: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c8Wgv; else goto c8Wgw;
       c8Wgv: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Foreign.newCStringLen1_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       c8Wgw: // global
           I64[Sp - 40] = block_c8Wgo_info;
           R1 = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u8WgE; else goto c8Wgp;
       u8WgE: // global
           call _c8Wgo(R1) args: 0, res: 0, upd: 0;
       c8Wgp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Foreign.newCStringLen1_info" {
     GHC.Foreign.newCStringLen1_info:
         const GHC.Foreign.newCStringLen1_entry;
         const 0;
         const 14;
         const 30064771098;
 },
 _c8Wgo() //  [R1]
         { []
         }
     {offset
       c8Wgo: // global
           I64[Sp - 8] = block_c8Wgu_info;
           _s8VSr::P64 = P64[R1 + 7];
           _s8VSs::P64 = P64[R1 + 15];
           R1 = P64[Sp + 24];
           P64[Sp] = _s8VSs::P64;
           P64[Sp + 24] = _s8VSr::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8WgD; else goto c8Wgy;
       u8WgD: // global
           call _c8Wgu(R1) args: 0, res: 0, upd: 0;
       c8Wgy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Wgo_info" {
     block_c8Wgo_info:
         const _c8Wgo;
         const 5;
         const 30;
 },
 _c8Wgu() //  [R1]
         { []
         }
     {offset
       c8Wgu: // global
           R6 = I64[R1 + 7];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 32];
           Sp = Sp + 40;
           call GHC.Foreign.$wtryFillBufferAndCall_entry(R6,
                                                         R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Wgu_info" {
     block_c8Wgu_info:
         const _c8Wgu;
         const 6;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:06.626023432 UTC

[section ""data" . withEncodedCString1_r8TNp_closure" {
     withEncodedCString1_r8TNp_closure:
         const withEncodedCString1_r8TNp_info;
 },
 $wgo_s8VSZ_entry() //  [R1, R2]
         { []
         }
     {offset
       c8WhD: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c8WhE; else goto c8WhF;
       c8WhE: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8WhF: // global
           I64[Sp - 56] = block_c8Why_info;
           _s8VSZ::P64 = R1;
           _s8VSz::P64 = P64[R1 + 6];
           _s8VSB::P64 = P64[R1 + 14];
           _s8VSH::P64 = P64[R1 + 22];
           _s8VSY::P64 = P64[R1 + 30];
           R1 = R2;
           P64[Sp - 48] = _s8VSz::P64;
           P64[Sp - 40] = _s8VSB::P64;
           P64[Sp - 32] = _s8VSH::P64;
           P64[Sp - 24] = _s8VSY::P64;
           P64[Sp - 16] = _s8VSZ::P64;
           I64[Sp - 8] = R2;
           Sp = Sp - 56;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wgo_s8VSZ_info" {
     $wgo_s8VSZ_info:
         const $wgo_s8VSZ_entry;
         const 4;
         const 8;
         const 8589934596;
 },
 _c8Why() //  [R1]
         { []
         }
     {offset
       c8Why: // global
           I64[Sp] = block_c8WhA_info;
           _s8VT7::P64 = R1;
           R1 = P64[Sp + 24];
           P64[Sp + 24] = _s8VT7::P64;
           if (R1 & 7 != 0) goto u8Wie; else goto c8WhB;
       u8Wie: // global
           call _c8WhA(R1) args: 0, res: 0, upd: 0;
       c8WhB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Why_info" {
     block_c8Why_info:
         const _c8Why;
         const 2054;
         const 30;
 },
 _c8WhA() //  [R1]
         { []
         }
     {offset
       c8WhA: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8WhL; else goto c8WhK;
       c8WhL: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8WhK: // global
           _s8VT9::P64 = P64[R1 + 7];
           _s8VTa::P64 = P64[R1 + 15];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 48];
           _s8VSB::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c8WhQ_info;
           R6 = P64[Sp + 24] + 16;
           R5 = P64[Sp + 32];
           R4 = P64[Sp + 8];
           R3 = _s8VTa::P64;
           R2 = _s8VT9::P64;
           P64[Sp] = Hp - 7;
           P64[Sp + 8] = _s8VSB::P64;
           call GHC.Foreign.$wtryFillBufferAndCall_entry(R6,
                                                         R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8WhA_info" {
     block_c8WhA_info:
         const _c8WhA;
         const 2054;
         const 30;
 },
 _c8WhQ() //  [R1]
         { []
         }
     {offset
       c8WhQ: // global
           I64[Sp] = block_c8WhS_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u8Wif; else goto c8WhU;
       u8Wif: // global
           call _c8WhS(R1) args: 0, res: 0, upd: 0;
       c8WhU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8WhQ_info" {
     block_c8WhQ_info:
         const _c8WhQ;
         const 644;
         const 30;
 },
 _c8WhS() //  [R1]
         { []
         }
     {offset
       c8WhS: // global
           if (R1 & 7 == 1) goto c8Wi4; else goto c8Wia;
       c8Wi4: // global
           I64[Sp] = block_c8Wi2_info;
           R2 = I64[Sp + 32] << 1;
           R1 = P64[Sp + 24];
           call $wgo_s8VSZ_entry(R2, R1) args: 8, res: 8, upd: 8;
       c8Wia: // global
           _s8VTp::P64 = P64[R1 + 6];
           call MO_Touch(P64[Sp + 8]);
           R1 = _s8VTp::P64;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8WhS_info" {
     block_c8WhS_info:
         const _c8WhS;
         const 644;
         const 30;
 },
 _c8Wi2() //  [R1]
         { []
         }
     {offset
       c8Wi2: // global
           call MO_Touch(P64[Sp + 8]);
           R1 = R1;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Wi2_info" {
     block_c8Wi2_info:
         const _c8Wi2;
         const 900;
         const 30;
 },
 sat_s8VTH_entry() //  [R1, R2]
         { []
         }
     {offset
       c8Wig: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c8Wih; else goto c8Wii;
       c8Wih: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8Wii: // global
           I64[Sp - 40] = block_c8Wh8_info;
           R3 = 0;
           _s8VSH::P64 = R2;
           _s8VSA::P64 = P64[R1 + 14];
           R2 = _s8VSA::P64;
           P64[Sp - 32] = P64[R1 + 6];
           P64[Sp - 24] = _s8VSA::P64;
           P64[Sp - 16] = P64[R1 + 22];
           P64[Sp - 8] = _s8VSH::P64;
           Sp = Sp - 40;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8VTH_info" {
     sat_s8VTH_info:
         const sat_s8VTH_entry;
         const 3;
         const 8;
         const 8589934597;
 },
 _c8Wh8() //  [R1]
         { []
         }
     {offset
       c8Wh8: // global
           I64[Sp - 8] = block_c8Whf_info;
           R2 = 4;
           _s8VSJ::I64 = R1;
           R1 = R1 << 2;
           I64[Sp] = _s8VSJ::I64;
           Sp = Sp - 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Wh8_info" {
     block_c8Wh8_info:
         const _c8Wh8;
         const 4;
         const 30;
 },
 _c8Whf() //  [R1]
         { []
         }
     {offset
       c8Whf: // global
           P64[Sp - 16] = P64[Sp + 24];
           I64[Sp - 8] = 0;
           P64[Sp] = R1 + 16;
           P64[Sp + 24] = R1;
           Sp = Sp - 16;
           call _c8Wix() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8Whf_info" {
     block_c8Whf_info:
         const _c8Whf;
         const 69;
         const 30;
 },
 _c8Wix() //  []
         { []
         }
     {offset
       c8Wix: // global
           _s8VTx::P64 = P64[Sp];
           I64[Sp] = block_c8WiA_info;
           R1 = _s8VTx::P64;
           if (R1 & 7 != 0) goto u8WiZ; else goto c8WiC;
       u8WiZ: // global
           call _c8WiA(R1) args: 0, res: 0, upd: 0;
       c8WiC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c8WiA() //  [R1]
         { []
         }
     {offset
       c8WiA: // global
           if (R1 & 7 == 1) goto c8WiI; else goto c8WiN;
       c8WiI: // global
           I64[Sp + 8] = block_c8Whp_info;
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           Sp = Sp + 8;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
       c8WiN: // global
           I64[Sp - 8] = block_c8WiL_info;
           _s8VTC::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s8VTC::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8Wj0; else goto c8WiO;
       u8Wj0: // global
           call _c8WiL(R1) args: 0, res: 0, upd: 0;
       c8WiO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8WiA_info" {
     block_c8WiA_info:
         const _c8WiA;
         const 455;
         const 30;
 },
 _c8Whp() //  [R1]
         { []
         }
     {offset
       c8Whp: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto c8Wio; else goto c8Win;
       c8Wio: // global
           HpAlloc = 112;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8Win: // global
           I64[Hp - 104] = GHC.ForeignPtr.PlainForeignPtr_con_info;
           P64[Hp - 96] = R1;
           I64[Hp - 88] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 80] = Hp - 103;
           P64[Hp - 72] = GHC.IO.Buffer.ReadBuffer_closure+1;
           I64[Hp - 64] = I64[Sp + 8];
           _s8VSJ::I64 = I64[Sp + 16];
           I64[Hp - 56] = _s8VSJ::I64;
           I64[Hp - 48] = 0;
           I64[Hp - 40] = _s8VSJ::I64;
           I64[Hp - 32] = $wgo_s8VSZ_info;
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 40];
           P64[Hp - 8] = P64[Sp + 48];
           P64[Hp] = Hp - 87;
           I64[Sp + 24] = block_c8Wis_info;
           R2 = _s8VSJ::I64 + 1;
           R1 = Hp - 30;
           Sp = Sp + 24;
           call $wgo_s8VSZ_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Whp_info" {
     block_c8Whp_info:
         const _c8Whp;
         const 198;
         const 30;
 },
 _c8Wis() //  [R1]
         { []
         }
     {offset
       c8Wis: // global
           call MO_Touch(P64[Sp + 8]);
           R1 = R1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Wis_info" {
     block_c8Wis_info:
         const _c8Wis;
         const 387;
         const 30;
 },
 _c8WiL() //  [R1]
         { []
         }
     {offset
       c8WiL: // global
           _s8VTy::I64 = I64[Sp + 16];
           _s8VTC::P64 = P64[Sp + 8];
           I32[I64[Sp + 24] + (_s8VTy::I64 << 2)] = %MO_UU_Conv_W64_W32(I64[R1 + 7]);
           P64[Sp + 8] = _s8VTC::P64;
           I64[Sp + 16] = _s8VTy::I64 + 1;
           Sp = Sp + 8;
           call _c8Wix() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8WiL_info" {
     block_c8WiL_info:
         const _c8WiL;
         const 904;
         const 30;
 },
 withEncodedCString1_r8TNp_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c8Wj2: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c8Wj3; else goto c8Wj4;
       c8Wj3: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = withEncodedCString1_r8TNp_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8Wj4: // global
           I64[Sp - 32] = block_c8WgY_info;
           R1 = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u8Wj8; else goto c8WgZ;
       u8Wj8: // global
           call _c8WgY(R1) args: 0, res: 0, upd: 0;
       c8WgZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . withEncodedCString1_r8TNp_info" {
     withEncodedCString1_r8TNp_info:
         const withEncodedCString1_r8TNp_entry;
         const 0;
         const 14;
         const 21474836504;
 },
 _c8WgY() //  [R1]
         { []
         }
     {offset
       c8WgY: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c8Wj7; else goto c8Wj6;
       c8Wj7: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8Wj6: // global
           _s8VSG::P64 = P64[R1 + 23];
           I64[Hp - 24] = sat_s8VTH_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 24];
           R4 = Hp - 22;
           R3 = GHC.IO.Encoding.Types.close_closure+1;
           R2 = _s8VSG::P64;
           Sp = Sp + 32;
           call GHC.IO.bracket1_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8WgY_info" {
     block_c8WgY_info:
         const _c8WgY;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:06.65285254 UTC

[section ""data" . GHC.Foreign.withEncodedCString_closure" {
     GHC.Foreign.withEncodedCString_closure:
         const GHC.Foreign.withEncodedCString_info;
 },
 GHC.Foreign.withEncodedCString_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c8WkS: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call withEncodedCString1_r8TNp_entry(R5,
                                                R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Foreign.withEncodedCString_info" {
     GHC.Foreign.withEncodedCString_info:
         const GHC.Foreign.withEncodedCString_entry;
         const 0;
         const 14;
         const 21474836504;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:06.666039582 UTC

[section ""data" . GHC.Foreign.charIsRepresentable3_closure" {
     GHC.Foreign.charIsRepresentable3_closure:
         const GHC.Foreign.charIsRepresentable3_info;
 },
 $wgo_s8VU8_entry() //  [R1, R2]
         { []
         }
     {offset
       c8WlM: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c8WlN; else goto c8WlO;
       c8WlN: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8WlO: // global
           I64[Sp - 48] = block_c8WlD_info;
           _s8VU8::P64 = R1;
           _s8VTK::P64 = P64[R1 + 6];
           _s8VTQ::P64 = P64[R1 + 14];
           _s8VU7::P64 = P64[R1 + 22];
           R1 = R2;
           P64[Sp - 40] = _s8VTK::P64;
           P64[Sp - 32] = _s8VTQ::P64;
           P64[Sp - 24] = _s8VU7::P64;
           P64[Sp - 16] = _s8VU8::P64;
           I64[Sp - 8] = R2;
           Sp = Sp - 48;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wgo_s8VU8_info" {
     $wgo_s8VU8_info:
         const $wgo_s8VU8_entry;
         const 3;
         const 8;
         const 8589934596;
 },
 _c8WlD() //  [R1]
         { []
         }
     {offset
       c8WlD: // global
           I64[Sp - 8] = block_c8WlF_info;
           _s8VUg::P64 = R1;
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           P64[Sp] = _s8VUg::P64;
           Sp = Sp - 8;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8WlD_info" {
     block_c8WlD_info:
         const _c8WlD;
         const 1029;
         const 30;
 },
 _c8WlF() //  [R1]
         { []
         }
     {offset
       c8WlF: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c8WlS; else goto c8WlR;
       c8WlS: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8WlR: // global
           I64[Hp - 64] = GHC.ForeignPtr.PlainForeignPtr_con_info;
           P64[Hp - 56] = R1;
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = Hp - 63;
           P64[Hp - 32] = GHC.IO.Buffer.WriteBuffer_closure+2;
           P64[Hp - 24] = P64[Sp + 8] + 16;
           I64[Hp - 16] = I64[Sp + 48];
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           P64[Sp] = Hp - 47;
           P64[Sp + 32] = P64[Sp + 32];
           call _c8WmL() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8WlF_info" {
     block_c8WlF_info:
         const _c8WlF;
         const 2054;
         const 30;
 },
 _c8WmL() //  []
         { []
         }
     {offset
       c8WmL: // global
           I64[Sp - 8] = block_c8WmN_info;
           R1 = P64[Sp + 24];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8WnM; else goto c8WmO;
       u8WnM: // global
           call _c8WmN(R1) args: 0, res: 0, upd: 0;
       c8WmO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c8WmN() //  [R1]
         { []
         }
     {offset
       c8WmN: // global
           _s8VUQ::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c8WmS_info;
           R3 = _s8VUQ::P64;
           R2 = P64[Sp + 40];
           _s8VUU::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp + 40] = _s8VUU::P64;
           Sp = Sp + 8;
           call stg_ap_ppv_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8WmN_info" {
     block_c8WmN_info:
         const _c8WmN;
         const 4103;
         const 30;
 },
 _c8WmS() //  [R1]
         { []
         }
     {offset
       c8WmS: // global
           I64[Sp] = block_c8WmU_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u8WnN; else goto c8WmV;
       u8WnN: // global
           call _c8WmU(R1) args: 0, res: 0, upd: 0;
       c8WmV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8WmS_info" {
     block_c8WmS_info:
         const _c8WmS;
         const 2054;
         const 30;
 },
 _c8WmU() //  [R1]
         { []
         }
     {offset
       c8WmU: // global
           I64[Sp - 16] = block_c8WmZ_info;
           _s8VV2::P64 = P64[R1 + 7];
           _s8VV4::P64 = P64[R1 + 23];
           R1 = P64[R1 + 15];
           P64[Sp - 8] = _s8VV4::P64;
           P64[Sp] = _s8VV2::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8WnO; else goto c8Wn4;
       u8WnO: // global
           call _c8WmZ(R1) args: 0, res: 0, upd: 0;
       c8Wn4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8WmU_info" {
     block_c8WmU_info:
         const _c8WmU;
         const 2054;
         const 30;
 },
 _c8WmZ() //  [R1]
         { []
         }
     {offset
       c8WmZ: // global
           if (I64[R1 + 39] == I64[R1 + 47]) goto c8Wnz; else goto c8Wne;
       c8Wnz: // global
           I64[Sp + 16] = block_c8Wma_info;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto u8WnQ; else goto c8Wmc;
       u8WnQ: // global
           call _c8Wma(R1) args: 0, res: 0, upd: 0;
       c8Wmc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8Wne: // global
           I64[Sp] = block_c8Wnc_info;
           _s8VV5::P64 = R1;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s8VV5::P64;
           if (R1 & 7 != 0) goto u8WnP; else goto c8Wnf;
       u8WnP: // global
           call _c8Wnc(R1) args: 0, res: 0, upd: 0;
       c8Wnf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8WmZ_info" {
     block_c8WmZ_info:
         const _c8WmZ;
         const 8200;
         const 30;
 },
 _c8Wma() //  [R1]
         { []
         }
     {offset
       c8Wma: // global
           _s8VUA::I64 = I64[R1 + 47];
           _s8VUB::I64 = I64[R1 + 31] - _s8VUA::I64;
           if (_s8VUB::I64 != 0) goto u8WnH; else goto c8Wmy;
       u8WnH: // global
           I64[Sp + 24] = _s8VUB::I64;
           I64[Sp + 32] = _s8VUA::I64;
           P64[Sp + 40] = P64[R1 + 7];
           I64[Sp + 48] = I64[R1 + 23];
           Sp = Sp + 8;
           call _c8Wml() args: 0, res: 0, upd: 0;
       c8Wmy: // global
           I64[Sp] = block_c8WmF_info;
           R2 = I64[Sp + 48] << 1;
           R1 = P64[Sp + 40];
           call $wgo_s8VU8_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Wma_info" {
     block_c8Wma_info:
         const _c8Wma;
         const 2822;
         const 30;
 },
 _c8Wml() //  []
         { []
         }
     {offset
       c8Wml: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8Wmt; else goto c8Wms;
       c8Wmt: // global
           HpAlloc = 16;
           I64[Sp - 8] = block_c8Wmk_info;
           R1 = I64[Sp + 16];
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c8Wms: // global
           _s8VTK::P64 = P64[Sp + 8];
           _s8VUv::I64 = I64[Sp + 40];
           I8[_s8VUv::I64 + I64[Sp + 24]] = 0 :: W8;
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s8VUv::I64;
           I64[Sp - 8] = block_c8Wmo_info;
           R2 = Hp - 7;
           R1 = _s8VTK::P64;
           Sp = Sp - 8;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c8Wmk() //  [R1]
         { []
         }
     {offset
       c8Wmk: // global
           I64[Sp + 24] = R1;
           Sp = Sp + 8;
           call _c8Wml() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8Wmk_info" {
     block_c8Wmk_info:
         const _c8Wmk;
         const 2822;
         const 30;
 },
 _c8Wmo() //  [R1]
         { []
         }
     {offset
       c8Wmo: // global
           _s8VUg::P64 = P64[Sp + 8];
           call MO_Touch(P64[Sp + 40]);
           call MO_Touch(_s8VUg::P64);
           R1 = R1;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Wmo_info" {
     block_c8Wmo_info:
         const _c8Wmo;
         const 2950;
         const 30;
 },
 _c8WmF() //  [R1]
         { []
         }
     {offset
       c8WmF: // global
           call MO_Touch(P64[Sp + 8]);
           R1 = R1;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8WmF_info" {
     block_c8WmF_info:
         const _c8WmF;
         const 3974;
         const 30;
 },
 _c8Wnc() //  [R1]
         { []
         }
     {offset
       c8Wnc: // global
           if (R1 & 7 == 2) goto c8Wny; else goto c8Wno;
       c8Wny: // global
           I64[Sp + 16] = block_c8Wm2_info;
           R2 = I64[Sp + 64] << 1;
           R1 = P64[Sp + 56];
           Sp = Sp + 16;
           call $wgo_s8VU8_entry(R2, R1) args: 8, res: 8, upd: 8;
       c8Wno: // global
           _s8VV5::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c8Wnj_info;
           R3 = P64[Sp + 8];
           R2 = _s8VV5::P64;
           R1 = P64[Sp + 48];
           Sp = Sp + 16;
           call stg_ap_ppv_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Wnc_info" {
     block_c8Wnc_info:
         const _c8Wnc;
         const 8200;
         const 30;
 },
 _c8Wm2() //  [R1]
         { []
         }
     {offset
       c8Wm2: // global
           call MO_Touch(P64[Sp + 8]);
           R1 = R1;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Wm2_info" {
     block_c8Wm2_info:
         const _c8Wm2;
         const 3974;
         const 30;
 },
 _c8Wnj() //  [R1]
         { []
         }
     {offset
       c8Wnj: // global
           I64[Sp] = block_c8Wnl_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u8WnR; else goto c8Wnq;
       u8WnR: // global
           call _c8Wnl(R1) args: 0, res: 0, upd: 0;
       c8Wnq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Wnj_info" {
     block_c8Wnj_info:
         const _c8Wnj;
         const 2566;
         const 30;
 },
 _c8Wnl() //  [R1]
         { []
         }
     {offset
       c8Wnl: // global
           P64[Sp + 32] = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           call _c8WmL() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8Wnl_info" {
     block_c8Wnl_info:
         const _c8Wnl;
         const 2566;
         const 30;
 },
 sat_s8VVD_entry() //  [R1, R2]
         { []
         }
     {offset
       c8WnT: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c8WnU; else goto c8WnV;
       c8WnU: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8WnV: // global
           I64[Sp - 32] = block_c8Wld_info;
           R3 = 0;
           _s8VTQ::P64 = R2;
           _s8VTJ::P64 = P64[R1 + 6];
           R2 = _s8VTJ::P64;
           P64[Sp - 24] = _s8VTJ::P64;
           P64[Sp - 16] = P64[R1 + 14];
           P64[Sp - 8] = _s8VTQ::P64;
           Sp = Sp - 32;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8VVD_info" {
     sat_s8VVD_info:
         const sat_s8VVD_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _c8Wld() //  [R1]
         { []
         }
     {offset
       c8Wld: // global
           I64[Sp - 8] = block_c8Wlk_info;
           R2 = 4;
           _s8VTS::I64 = R1;
           R1 = R1 << 2;
           I64[Sp] = _s8VTS::I64;
           Sp = Sp - 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Wld_info" {
     block_c8Wld_info:
         const _c8Wld;
         const 3;
         const 30;
 },
 _c8Wlk() //  [R1]
         { []
         }
     {offset
       c8Wlk: // global
           P64[Sp - 16] = P64[Sp + 16];
           I64[Sp - 8] = 0;
           P64[Sp] = R1 + 16;
           P64[Sp + 16] = R1;
           Sp = Sp - 16;
           call _c8Woa() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8Wlk_info" {
     block_c8Wlk_info:
         const _c8Wlk;
         const 68;
         const 30;
 },
 _c8Woa() //  []
         { []
         }
     {offset
       c8Woa: // global
           _s8VVt::P64 = P64[Sp];
           I64[Sp] = block_c8Wod_info;
           R1 = _s8VVt::P64;
           if (R1 & 7 != 0) goto u8WoC; else goto c8Wof;
       u8WoC: // global
           call _c8Wod(R1) args: 0, res: 0, upd: 0;
       c8Wof: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c8Wod() //  [R1]
         { []
         }
     {offset
       c8Wod: // global
           if (R1 & 7 == 1) goto c8Wol; else goto c8Woq;
       c8Wol: // global
           I64[Sp + 8] = block_c8Wlu_info;
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           Sp = Sp + 8;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
       c8Woq: // global
           I64[Sp - 8] = block_c8Woo_info;
           _s8VVy::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s8VVy::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8WoD; else goto c8Wor;
       u8WoD: // global
           call _c8Woo(R1) args: 0, res: 0, upd: 0;
       c8Wor: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Wod_info" {
     block_c8Wod_info:
         const _c8Wod;
         const 454;
         const 30;
 },
 _c8Wlu() //  [R1]
         { []
         }
     {offset
       c8Wlu: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c8Wo1; else goto c8Wo0;
       c8Wo1: // global
           HpAlloc = 104;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8Wo0: // global
           I64[Hp - 96] = GHC.ForeignPtr.PlainForeignPtr_con_info;
           P64[Hp - 88] = R1;
           I64[Hp - 80] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 72] = Hp - 95;
           P64[Hp - 64] = GHC.IO.Buffer.ReadBuffer_closure+1;
           I64[Hp - 56] = I64[Sp + 8];
           _s8VTS::I64 = I64[Sp + 16];
           I64[Hp - 48] = _s8VTS::I64;
           I64[Hp - 40] = 0;
           I64[Hp - 32] = _s8VTS::I64;
           I64[Hp - 24] = $wgo_s8VU8_info;
           P64[Hp - 16] = P64[Sp + 32];
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = Hp - 79;
           I64[Sp + 16] = block_c8Wo5_info;
           R2 = _s8VTS::I64 + 1;
           R1 = Hp - 22;
           Sp = Sp + 16;
           call $wgo_s8VU8_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Wlu_info" {
     block_c8Wlu_info:
         const _c8Wlu;
         const 197;
         const 30;
 },
 _c8Wo5() //  [R1]
         { []
         }
     {offset
       c8Wo5: // global
           call MO_Touch(P64[Sp + 8]);
           R1 = R1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Wo5_info" {
     block_c8Wo5_info:
         const _c8Wo5;
         const 387;
         const 30;
 },
 _c8Woo() //  [R1]
         { []
         }
     {offset
       c8Woo: // global
           _s8VVu::I64 = I64[Sp + 16];
           _s8VVy::P64 = P64[Sp + 8];
           I32[I64[Sp + 24] + (_s8VVu::I64 << 2)] = %MO_UU_Conv_W64_W32(I64[R1 + 7]);
           P64[Sp + 8] = _s8VVy::P64;
           I64[Sp + 16] = _s8VVu::I64 + 1;
           Sp = Sp + 8;
           call _c8Woa() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8Woo_info" {
     block_c8Woo_info:
         const _c8Woo;
         const 903;
         const 30;
 },
 GHC.Foreign.charIsRepresentable3_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c8WoF: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8WoG; else goto c8WoH;
       c8WoG: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Foreign.charIsRepresentable3_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8WoH: // global
           I64[Sp - 24] = block_c8Wl3_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u8WoL; else goto c8Wl4;
       u8WoL: // global
           call _c8Wl3(R1) args: 0, res: 0, upd: 0;
       c8Wl4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Foreign.charIsRepresentable3_info" {
     GHC.Foreign.charIsRepresentable3_info:
         const GHC.Foreign.charIsRepresentable3_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c8Wl3() //  [R1]
         { []
         }
     {offset
       c8Wl3: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8WoK; else goto c8WoJ;
       c8WoK: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8WoJ: // global
           _s8VTP::P64 = P64[R1 + 23];
           I64[Hp - 16] = sat_s8VVD_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           R4 = Hp - 14;
           R3 = GHC.IO.Encoding.Types.close_closure+1;
           R2 = _s8VTP::P64;
           Sp = Sp + 24;
           call GHC.IO.bracket1_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Wl3_info" {
     block_c8Wl3_info:
         const _c8Wl3;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:06.708115268 UTC

[section ""data" . GHC.Foreign.withCString_closure" {
     GHC.Foreign.withCString_closure:
         const GHC.Foreign.withCString_info;
 },
 GHC.Foreign.withCString_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c8Wrq: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Foreign.charIsRepresentable3_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Foreign.withCString_info" {
     GHC.Foreign.withCString_info:
         const GHC.Foreign.withCString_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:06.714198428 UTC

[section ""data" . GHC.Foreign.withCStringsLen1_closure" {
     GHC.Foreign.withCStringsLen1_closure:
         const GHC.Foreign.withCStringsLen1_info;
         const 0;
 },
 sat_s8VVN_entry() //  [R1]
         { []
         }
     {offset
       c8WrP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8WrQ; else goto c8WrR;
       c8WrQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8WrR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.List.reverse_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8VVN_info" {
     sat_s8VVN_info:
         const sat_s8VVN_entry;
         const 1;
         const 16;
 },
 sat_s8VVT_entry() //  [R1, R2]
         { []
         }
     {offset
       c8Ws0: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8Ws4; else goto c8Ws3;
       c8Ws4: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8Ws3: // global
           _s8VVI::P64 = P64[R1 + 6];
           _s8VVJ::P64 = P64[R1 + 14];
           _s8VVP::P64 = P64[R1 + 22];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = _s8VVJ::P64;
           R3 = _s8VVP::P64;
           R2 = Hp - 14;
           R1 = _s8VVI::P64;
           call go_s8VVI_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8VVT_info" {
     sat_s8VVT_info:
         const sat_s8VVT_entry;
         const 3;
         const 4294967304;
         const 8589934597;
         const S8W7j_srt+24;
 },
 go_s8VVI_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c8Ws9: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c8Wsa; else goto c8Wsb;
       c8Wsa: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8Wsb: // global
           I64[Sp - 40] = block_c8WrG_info;
           _s8VVI::P64 = R1;
           _s8VVE::P64 = P64[R1 + 5];
           _s8VVG::P64 = P64[R1 + 13];
           R1 = R3;
           P64[Sp - 32] = _s8VVE::P64;
           P64[Sp - 24] = _s8VVG::P64;
           P64[Sp - 16] = _s8VVI::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u8Wsi; else goto c8WrH;
       u8Wsi: // global
           call _c8WrG(R1) args: 0, res: 0, upd: 0;
       c8WrH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s8VVI_info" {
     go_s8VVI_info:
         const go_s8VVI_entry;
         const 2;
         const 4294967307;
         const 12884901903;
         const S8W7j_srt+24;
 },
 _c8WrG() //  [R1]
         { []
         }
     {offset
       c8WrG: // global
           _s8VVJ::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto c8Ws6; else goto c8Ws7;
       c8Ws6: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8Wse; else goto c8Wsd;
       c8Wse: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8Wsd: // global
           I64[Hp - 16] = sat_s8VVN_info;
           P64[Hp] = _s8VVJ::P64;
           R4 = P64[Sp + 16];
           R3 = Hp - 16;
           R2 = Foreign.Storable.$fStorablePtr_closure;
           I64[Sp + 32] = stg_ap_v_info;
           Sp = Sp + 32;
           call Foreign.Marshal.Array.withArrayLen_entry(R4,
                                                         R3,
                                                         R2) args: 16, res: 0, upd: 8;
       c8Ws7: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c8Wsh; else goto c8Wsg;
       c8Wsh: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8Wsg: // global
           _s8VVO::P64 = P64[R1 + 6];
           _s8VVP::P64 = P64[R1 + 14];
           I64[Hp - 24] = sat_s8VVT_info;
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = _s8VVJ::P64;
           P64[Hp] = _s8VVP::P64;
           R4 = Hp - 22;
           R3 = _s8VVO::P64;
           R2 = P64[Sp + 8];
           Sp = Sp + 40;
           call GHC.Foreign.charIsRepresentable3_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8WrG_info" {
     block_c8WrG_info:
         const _c8WrG;
         const 4;
         const 4294967326;
         const S8W7j_srt+24;
 },
 GHC.Foreign.withCStringsLen1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c8Wsj: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8Wsn; else goto c8Wsm;
       c8Wsn: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Foreign.withCStringsLen1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8Wsm: // global
           I64[Hp - 16] = go_s8VVI_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R4;
           R3 = R3;
           R2 = GHC.Types.[]_closure+1;
           R1 = Hp - 13;
           call go_s8VVI_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Foreign.withCStringsLen1_info" {
     GHC.Foreign.withCStringsLen1_info:
         const GHC.Foreign.withCStringsLen1_entry;
         const 0;
         const 12884901902;
         const 17179869207;
         const S8W7j_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:06.725659066 UTC

[section ""data" . GHC.Foreign.withCStringsLen_closure" {
     GHC.Foreign.withCStringsLen_closure:
         const GHC.Foreign.withCStringsLen_info;
         const 0;
 },
 GHC.Foreign.withCStringsLen_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c8WsW: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Foreign.withCStringsLen1_entry(R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Foreign.withCStringsLen_info" {
     GHC.Foreign.withCStringsLen_info:
         const GHC.Foreign.withCStringsLen_entry;
         const 0;
         const 4294967310;
         const 17179869207;
         const S8W7j_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:06.728986299 UTC

[section ""data" . GHC.Foreign.withCStringLen_closure" {
     GHC.Foreign.withCStringLen_closure:
         const GHC.Foreign.withCStringLen_info;
 },
 GHC.Foreign.withCStringLen_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c8Wt7: // global
           R5 = R4;
           R4 = R3;
           R3 = GHC.Types.False_closure+1;
           R2 = R2;
           call GHC.Foreign.withEncodedCString_entry(R5,
                                                     R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Foreign.withCStringLen_info" {
     GHC.Foreign.withCStringLen_info:
         const GHC.Foreign.withCStringLen_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:06.732267354 UTC

[section ""data" . GHC.Foreign.newCString2_closure" {
     GHC.Foreign.newCString2_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:06.740554299 UTC

[section ""data" . newEncodedCString1_r8TNq_closure" {
     newEncodedCString1_r8TNq_closure:
         const newEncodedCString1_r8TNq_info;
         const 0;
 },
 sat_s8VXc_entry() //  [R1, R2]
         { []
         }
     {offset
       c8WuF: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c8WuG; else goto c8WuH;
       c8WuG: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8WuH: // global
           I64[Sp - 32] = block_c8Wtu_info;
           R3 = 0;
           _s8VW3::P64 = R2;
           _s8VVX::P64 = P64[R1 + 14];
           R2 = _s8VVX::P64;
           P64[Sp - 24] = P64[R1 + 6];
           P64[Sp - 16] = _s8VVX::P64;
           P64[Sp - 8] = _s8VW3::P64;
           Sp = Sp - 32;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8VXc_info" {
     sat_s8VXc_info:
         const sat_s8VXc_entry;
         const 2;
         const 12884901899;
         const 8589934597;
         const S8W7j_srt+40;
 },
 _c8Wtu() //  [R1]
         { []
         }
     {offset
       c8Wtu: // global
           I64[Sp - 8] = block_c8WtB_info;
           R2 = 4;
           _s8VW5::I64 = R1;
           R1 = R1 << 2;
           I64[Sp] = _s8VW5::I64;
           Sp = Sp - 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Wtu_info" {
     block_c8Wtu_info:
         const _c8Wtu;
         const 3;
         const 12884901918;
         const S8W7j_srt+40;
 },
 _c8WtB() //  [R1]
         { []
         }
     {offset
       c8WtB: // global
           P64[Sp - 16] = P64[Sp + 24];
           I64[Sp - 8] = 0;
           P64[Sp] = R1 + 16;
           P64[Sp + 24] = R1;
           Sp = Sp - 16;
           call _c8Wvm() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8WtB_info" {
     block_c8WtB_info:
         const _c8WtB;
         const 68;
         const 12884901918;
         const S8W7j_srt+40;
 },
 _c8Wvm() //  []
         { []
         }
     {offset
       c8Wvm: // global
           _s8VX2::P64 = P64[Sp];
           I64[Sp] = block_c8Wvp_info;
           R1 = _s8VX2::P64;
           if (R1 & 7 != 0) goto u8Ww4; else goto c8Wvr;
       u8Ww4: // global
           call _c8Wvp(R1) args: 0, res: 0, upd: 0;
       c8Wvr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c8Wvp() //  [R1]
         { []
         }
     {offset
       c8Wvp: // global
           if (R1 & 7 == 1) goto c8Wvx; else goto c8WvC;
       c8Wvx: // global
           I64[Sp + 8] = block_c8WtL_info;
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           Sp = Sp + 8;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
       c8WvC: // global
           I64[Sp - 8] = block_c8WvA_info;
           _s8VX7::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s8VX7::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8Ww5; else goto c8WvD;
       u8Ww5: // global
           call _c8WvA(R1) args: 0, res: 0, upd: 0;
       c8WvD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Wvp_info" {
     block_c8Wvp_info:
         const _c8Wvp;
         const 454;
         const 12884901918;
         const S8W7j_srt+40;
 },
 _c8WtL() //  [R1]
         { []
         }
     {offset
       c8WtL: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c8WuN; else goto c8WuM;
       c8WuN: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8WuM: // global
           _s8VW5::I64 = I64[Sp + 16];
           _s8VWd::I64 = I64[Sp + 8];
           _s8VWj::I64 = _s8VW5::I64 + 1;
           (_s8VWo::I64) = call "ccall" arg hints:  []  result hints:  [PtrHint] malloc(_s8VWj::I64);
           if (_s8VWo::I64 == 0) goto c8Wvj; else goto c8Wvi;
       c8Wvj: // global
           Hp = Hp - 88;
           R1 = Foreign.Marshal.Alloc.malloc1_closure;
           Sp = Sp + 48;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       c8Wvi: // global
           I64[Hp - 80] = GHC.ForeignPtr.PlainForeignPtr_con_info;
           P64[Hp - 72] = R1;
           I64[Hp - 64] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 56] = Hp - 79;
           P64[Hp - 48] = GHC.IO.Buffer.ReadBuffer_closure+1;
           I64[Hp - 40] = _s8VWd::I64;
           I64[Hp - 32] = _s8VW5::I64;
           I64[Hp - 24] = 0;
           I64[Hp - 16] = _s8VW5::I64;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s8VWj::I64;
           P64[Sp] = Hp - 7;
           I64[Sp + 8] = _s8VWo::I64;
           P64[Sp + 16] = Hp - 63;
           call _c8Wu5() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8WtL_info" {
     block_c8WtL_info:
         const _c8WtL;
         const 197;
         const 12884901918;
         const S8W7j_srt+40;
 },
 _c8Wu5() //  []
         { []
         }
     {offset
       c8Wu5: // global
           I64[Sp - 8] = block_c8Wu8_info;
           R1 = P64[Sp + 40];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8WvX; else goto c8Wu9;
       u8WvX: // global
           call _c8Wu8(R1) args: 0, res: 0, upd: 0;
       c8Wu9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c8Wu8() //  [R1]
         { []
         }
     {offset
       c8Wu8: // global
           I64[Sp] = block_c8Wud_info;
           R6 = I64[Sp + 16];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 32];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           P64[Sp - 16] = P64[Sp + 8];
           P64[Sp - 8] = GHC.Base.$fApplicativeIO4_closure+2;
           Sp = Sp - 16;
           call GHC.Foreign.$wtryFillBufferAndCall_entry(R6,
                                                         R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Wu8_info" {
     block_c8Wu8_info:
         const _c8Wu8;
         const 134;
         const 4294967326;
         const S8W7j_srt+48;
 },
 _c8Wud() //  [R1]
         { []
         }
     {offset
       c8Wud: // global
           I64[Sp] = block_c8Wuf_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u8WvY; else goto c8Wug;
       u8WvY: // global
           call _c8Wuf(R1) args: 0, res: 0, upd: 0;
       c8Wug: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Wud_info" {
     block_c8Wud_info:
         const _c8Wud;
         const 134;
         const 4294967326;
         const S8W7j_srt+48;
 },
 _c8Wuf() //  [R1]
         { []
         }
     {offset
       c8Wuf: // global
           if (R1 & 7 == 1) goto c8WuX; else goto c8Wvg;
       c8WuX: // global
           _s8VWy::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c8Wuk_info;
           R1 = _s8VWy::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8WvZ; else goto c8Wul;
       u8WvZ: // global
           call _c8Wuk(R1) args: 0, res: 0, upd: 0;
       c8Wul: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8Wvg: // global
           _s8VWu::P64 = P64[R1 + 6];
           call MO_Touch(P64[Sp + 40]);
           R1 = _s8VWu::P64;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Wuf_info" {
     block_c8Wuf_info:
         const _c8Wuf;
         const 134;
         const 4294967326;
         const S8W7j_srt+48;
 },
 _c8Wuk() //  [R1]
         { []
         }
     {offset
       c8Wuk: // global
           _s8VWM::I64 = I64[R1 + 7] << 1;
           if (_s8VWM::I64 != 0) goto u8WvR; else goto c8Wv9;
       u8WvR: // global
           I64[Sp] = _s8VWM::I64;
           call _c8Wut() args: 0, res: 0, upd: 0;
       c8Wv9: // global
           call "ccall" arg hints:  [PtrHint]  result hints:  [] free(I64[Sp + 8]);
           I64[Sp + 8] = 0;
           P64[Sp] = GHC.Foreign.newCString2_closure+1;
           call _c8Wu5() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8Wuk_info" {
     block_c8Wuk_info:
         const _c8Wuk;
         const 69;
         const 4294967326;
         const S8W7j_srt+48;
 },
 _c8Wut() //  []
         { []
         }
     {offset
       c8Wut: // global
           Hp = Hp + 16;
           _s8VWM::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c8Wv3; else goto c8Wv2;
       c8Wv3: // global
           HpAlloc = 16;
           I64[Sp] = block_c8Wus_info;
           R1 = _s8VWM::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c8Wv2: // global
           (_s8VWR::I64) = call "ccall" arg hints:  [PtrHint,]  result hints:  [PtrHint] realloc(I64[Sp + 8], _s8VWM::I64);
           if (_s8VWR::I64 == 0) goto c8Wv6; else goto c8Wv5;
       c8Wv6: // global
           Hp = Hp - 16;
           R1 = Foreign.Marshal.Alloc.realloc2_closure;
           Sp = Sp + 48;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       c8Wv5: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s8VWM::I64;
           I64[Sp + 8] = _s8VWR::I64;
           P64[Sp] = Hp - 7;
           call _c8Wu5() args: 0, res: 0, upd: 0;
     }
 },
 _c8Wus() //  [R1]
         { []
         }
     {offset
       c8Wus: // global
           I64[Sp] = R1;
           call _c8Wut() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8Wus_info" {
     block_c8Wus_info:
         const _c8Wus;
         const 69;
         const 4294967326;
         const S8W7j_srt+48;
 },
 _c8WvA() //  [R1]
         { []
         }
     {offset
       c8WvA: // global
           _s8VX3::I64 = I64[Sp + 16];
           _s8VX7::P64 = P64[Sp + 8];
           I32[I64[Sp + 24] + (_s8VX3::I64 << 2)] = %MO_UU_Conv_W64_W32(I64[R1 + 7]);
           P64[Sp + 8] = _s8VX7::P64;
           I64[Sp + 16] = _s8VX3::I64 + 1;
           Sp = Sp + 8;
           call _c8Wvm() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8WvA_info" {
     block_c8WvA_info:
         const _c8WvA;
         const 903;
         const 12884901918;
         const S8W7j_srt+40;
 },
 newEncodedCString1_r8TNq_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c8Ww7: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8Ww8; else goto c8Ww9;
       c8Ww8: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = newEncodedCString1_r8TNq_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8Ww9: // global
           I64[Sp - 24] = block_c8Wtk_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u8Wwd; else goto c8Wtl;
       u8Wwd: // global
           call _c8Wtk(R1) args: 0, res: 0, upd: 0;
       c8Wtl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . newEncodedCString1_r8TNq_info" {
     newEncodedCString1_r8TNq_info:
         const newEncodedCString1_r8TNq_entry;
         const 0;
         const 30064771086;
         const 17179869207;
         const S8W7j_srt+40;
 },
 _c8Wtk() //  [R1]
         { []
         }
     {offset
       c8Wtk: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8Wwc; else goto c8Wwb;
       c8Wwc: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8Wwb: // global
           _s8VW2::P64 = P64[R1 + 23];
           I64[Hp - 16] = sat_s8VXc_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           R4 = Hp - 14;
           R3 = GHC.IO.Encoding.Types.close_closure+1;
           R2 = _s8VW2::P64;
           Sp = Sp + 24;
           call GHC.IO.bracket1_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Wtk_info" {
     block_c8Wtk_info:
         const _c8Wtk;
         const 2;
         const 12884901918;
         const S8W7j_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:06.767435855 UTC

[section ""data" . GHC.Foreign.newEncodedCString_closure" {
     GHC.Foreign.newEncodedCString_closure:
         const GHC.Foreign.newEncodedCString_info;
         const 0;
 },
 GHC.Foreign.newEncodedCString_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c8WxP: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call newEncodedCString1_r8TNq_entry(R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Foreign.newEncodedCString_info" {
     GHC.Foreign.newEncodedCString_info:
         const GHC.Foreign.newEncodedCString_entry;
         const 0;
         const 4294967310;
         const 17179869207;
         const S8W7j_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:06.783107857 UTC

[section ""data" . GHC.Foreign.newCString1_closure" {
     GHC.Foreign.newCString1_closure:
         const GHC.Foreign.newCString1_info;
         const 0;
 },
 sat_s8VZ6_entry() //  [R1]
         { []
         }
     {offset
       c8Wzx: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c8WzC; else goto c8WzD;
       c8WzC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8WzD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c8Wzu_info;
           _s8VXZ::P64 = P64[R1 + 24];
           _s8VXO::I64 = I64[R1 + 32];
           R1 = P64[R1 + 16];
           I64[Sp - 32] = _s8VXO::I64;
           P64[Sp - 24] = _s8VXZ::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u8WzH; else goto c8Wzv;
       u8WzH: // global
           call _c8Wzu(R1) args: 0, res: 0, upd: 0;
       c8Wzv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8VZ6_info" {
     sat_s8VZ6_info:
         const sat_s8VZ6_entry;
         const 4294967298;
         const 15;
 },
 _c8Wzu() //  [R1]
         { []
         }
     {offset
       c8Wzu: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c8WzG; else goto c8WzF;
       c8WzG: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c8WzF: // global
           _s8VZ4::I64 = I64[R1 + 7];
           I64[Hp - 64] = GHC.ForeignPtr.PlainForeignPtr_con_info;
           P64[Hp - 56] = P64[Sp + 16];
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = Hp - 63;
           P64[Hp - 32] = GHC.IO.Buffer.WriteBuffer_closure+2;
           I64[Hp - 24] = I64[Sp + 8];
           I64[Hp - 16] = _s8VZ4::I64;
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           R1 = Hp - 47;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c8Wzu_info" {
     block_c8Wzu_info:
         const _c8Wzu;
         const 66;
         const 30;
 },
 sat_s8VZk_entry() //  [R1, R2]
         { []
         }
     {offset
       c8WzI: // global
           if ((Sp + -88) < SpLim) (likely: False) goto c8WzJ; else goto c8WzK;
       c8WzJ: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8WzK: // global
           I64[Sp - 24] = block_c8Wya_info;
           R3 = 0;
           _s8VXk::P64 = R2;
           _s8VXe::P64 = P64[R1 + 6];
           R2 = _s8VXe::P64;
           P64[Sp - 16] = _s8VXe::P64;
           P64[Sp - 8] = _s8VXk::P64;
           Sp = Sp - 24;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8VZk_info" {
     sat_s8VZk_info:
         const sat_s8VZk_entry;
         const 1;
         const 12884901897;
         const 8589934597;
         const S8W7j_srt+40;
 },
 _c8Wya() //  [R1]
         { []
         }
     {offset
       c8Wya: // global
           I64[Sp - 8] = block_c8Wyh_info;
           R2 = 4;
           _s8VXm::I64 = R1;
           R1 = R1 << 2;
           I64[Sp] = _s8VXm::I64;
           Sp = Sp - 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Wya_info" {
     block_c8Wya_info:
         const _c8Wya;
         const 2;
         const 12884901918;
         const S8W7j_srt+40;
 },
 _c8Wyh() //  [R1]
         { []
         }
     {offset
       c8Wyh: // global
           P64[Sp - 16] = P64[Sp + 16];
           I64[Sp - 8] = 0;
           P64[Sp] = R1 + 16;
           P64[Sp + 16] = R1;
           Sp = Sp - 16;
           call _c8WBN() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8Wyh_info" {
     block_c8Wyh_info:
         const _c8Wyh;
         const 67;
         const 12884901918;
         const S8W7j_srt+40;
 },
 _c8WBN() //  []
         { []
         }
     {offset
       c8WBN: // global
           _s8VZa::P64 = P64[Sp];
           I64[Sp] = block_c8WBQ_info;
           R1 = _s8VZa::P64;
           if (R1 & 7 != 0) goto u8WCY; else goto c8WBS;
       u8WCY: // global
           call _c8WBQ(R1) args: 0, res: 0, upd: 0;
       c8WBS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c8WBQ() //  [R1]
         { []
         }
     {offset
       c8WBQ: // global
           if (R1 & 7 == 1) goto c8WBY; else goto c8WC3;
       c8WBY: // global
           I64[Sp + 8] = block_c8Wyr_info;
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           Sp = Sp + 8;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
       c8WC3: // global
           I64[Sp - 8] = block_c8WC1_info;
           _s8VZf::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s8VZf::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8WCZ; else goto c8WC4;
       u8WCZ: // global
           call _c8WC1(R1) args: 0, res: 0, upd: 0;
       c8WC4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8WBQ_info" {
     block_c8WBQ_info:
         const _c8WBQ;
         const 453;
         const 12884901918;
         const S8W7j_srt+40;
 },
 _c8Wyr() //  [R1]
         { []
         }
     {offset
       c8Wyr: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c8WzQ; else goto c8WzP;
       c8WzQ: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8WzP: // global
           _s8VXm::I64 = I64[Sp + 16];
           _s8VXu::I64 = I64[Sp + 8];
           _s8VXA::I64 = _s8VXm::I64 + 1;
           (_s8VXF::I64) = call "ccall" arg hints:  []  result hints:  [PtrHint] malloc(_s8VXA::I64);
           if (_s8VXF::I64 == 0) goto c8WBK; else goto c8WBJ;
       c8WBK: // global
           Hp = Hp - 88;
           R1 = Foreign.Marshal.Alloc.malloc1_closure;
           Sp = Sp + 40;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       c8WBJ: // global
           I64[Hp - 80] = GHC.ForeignPtr.PlainForeignPtr_con_info;
           P64[Hp - 72] = R1;
           I64[Hp - 64] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 56] = Hp - 79;
           P64[Hp - 48] = GHC.IO.Buffer.ReadBuffer_closure+1;
           I64[Hp - 40] = _s8VXu::I64;
           I64[Hp - 32] = _s8VXm::I64;
           I64[Hp - 24] = 0;
           I64[Hp - 16] = _s8VXm::I64;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s8VXA::I64;
           P64[Sp] = Hp - 7;
           I64[Sp + 8] = _s8VXF::I64;
           P64[Sp + 16] = Hp - 63;
           call _c8WyL() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8Wyr_info" {
     block_c8Wyr_info:
         const _c8Wyr;
         const 196;
         const 12884901918;
         const S8W7j_srt+40;
 },
 _c8WyL() //  []
         { []
         }
     {offset
       c8WyL: // global
           I64[Sp - 8] = block_c8WyO_info;
           R1 = P64[Sp + 32];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8WCF; else goto c8WyP;
       u8WCF: // global
           call _c8WyO(R1) args: 0, res: 0, upd: 0;
       c8WyP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c8WyO() //  [R1]
         { []
         }
     {offset
       c8WyO: // global
           I64[Sp - 16] = block_c8WyT_info;
           _s8VXS::P64 = P64[R1 + 7];
           _s8VXT::P64 = P64[R1 + 15];
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           P64[Sp - 8] = _s8VXT::P64;
           P64[Sp] = _s8VXS::P64;
           Sp = Sp - 16;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8WyO_info" {
     block_c8WyO_info:
         const _c8WyO;
         const 133;
         const 4294967326;
         const S8W7j_srt+48;
 },
 _c8WyT() //  [R1]
         { []
         }
     {offset
       c8WyT: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c8WzZ; else goto c8WzY;
       c8WzZ: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8WzY: // global
           I64[Hp - 32] = sat_s8VZ6_info;
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = R1;
           I64[Hp] = I64[Sp + 32];
           P64[Sp - 8] = Hp - 32;
           P64[Sp] = P64[Sp + 40];
           Sp = Sp - 8;
           call _c8WAZ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8WyT_info" {
     block_c8WyT_info:
         const _c8WyT;
         const 519;
         const 4294967326;
         const S8W7j_srt+48;
 },
 _c8WAZ() //  []
         { []
         }
     {offset
       c8WAZ: // global
           _s8VYE::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c8WB1_info;
           R3 = P64[Sp];
           R2 = _s8VYE::P64;
           R1 = P64[Sp + 24];
           Sp = Sp + 8;
           call stg_ap_ppv_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c8WB1() //  [R1]
         { []
         }
     {offset
       c8WB1: // global
           I64[Sp] = block_c8WB3_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u8WCR; else goto c8WB4;
       u8WCR: // global
           call _c8WB3(R1) args: 0, res: 0, upd: 0;
       c8WB4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8WB1_info" {
     block_c8WB1_info:
         const _c8WB1;
         const 519;
         const 4294967326;
         const S8W7j_srt+48;
 },
 _c8WB3() //  [R1]
         { []
         }
     {offset
       c8WB3: // global
           I64[Sp - 16] = block_c8WB8_info;
           _s8VYL::P64 = P64[R1 + 7];
           _s8VYN::P64 = P64[R1 + 23];
           R1 = P64[R1 + 15];
           P64[Sp - 8] = _s8VYN::P64;
           P64[Sp] = _s8VYL::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8WCS; else goto c8WBc;
       u8WCS: // global
           call _c8WB8(R1) args: 0, res: 0, upd: 0;
       c8WBc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8WB3_info" {
     block_c8WB3_info:
         const _c8WB3;
         const 519;
         const 4294967326;
         const S8W7j_srt+48;
 },
 _c8WB8() //  [R1]
         { []
         }
     {offset
       c8WB8: // global
           if (I64[R1 + 39] == I64[R1 + 47]) goto c8WBH; else goto c8WBm;
       c8WBH: // global
           I64[Sp + 32] = block_c8WAy_info;
           R1 = P64[Sp + 8];
           Sp = Sp + 32;
           if (R1 & 7 != 0) goto u8WCU; else goto c8WAA;
       u8WCU: // global
           call _c8WAy(R1) args: 0, res: 0, upd: 0;
       c8WAA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8WBm: // global
           I64[Sp] = block_c8WBk_info;
           _s8VYO::P64 = R1;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s8VYO::P64;
           if (R1 & 7 != 0) goto u8WCT; else goto c8WBn;
       u8WCT: // global
           call _c8WBk(R1) args: 0, res: 0, upd: 0;
       c8WBn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8WB8_info" {
     block_c8WB8_info:
         const _c8WB8;
         const 2057;
         const 4294967326;
         const S8W7j_srt+48;
 },
 _c8WAy() //  [R1]
         { []
         }
     {offset
       c8WAy: // global
           _s8VYu::I64 = I64[R1 + 47];
           _s8VYv::I64 = I64[R1 + 31] - _s8VYu::I64;
           if (_s8VYv::I64 != 0) goto u8WCv; else goto u8WCu;
       u8WCv: // global
           P64[Sp - 32] = P64[R1 + 7];
           I64[Sp - 24] = I64[R1 + 39];
           I64[Sp - 16] = _s8VYu::I64;
           I64[Sp - 8] = _s8VYv::I64;
           I64[Sp] = I64[R1 + 23];
           Sp = Sp - 32;
           call _c8WAL() args: 0, res: 0, upd: 0;
       u8WCu: // global
           Sp = Sp + 8;
           call _c8WAS() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8WAy_info" {
     block_c8WAy_info:
         const _c8WAy;
         const 133;
         const 4294967326;
         const S8W7j_srt+48;
 },
 _c8WAL() //  []
         { []
         }
     {offset
       c8WAL: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c8WAP; else goto c8WAO;
       c8WAP: // global
           HpAlloc = 72;
           I64[Sp - 8] = block_c8WAI_info;
           R1 = I64[Sp + 24];
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c8WAO: // global
           _s8VYp::I64 = I64[Sp + 32];
           _s8VYq::P64 = P64[Sp];
           _s8VYt::I64 = I64[Sp + 8];
           _s8VYu::I64 = I64[Sp + 16];
           I8[_s8VYp::I64 + _s8VYu::I64] = 0 :: W8;
           call MO_Touch(_s8VYq::P64);
           I64[Hp - 64] = GHC.Types.I#_con_info;
           I64[Hp - 56] = _s8VYu::I64 - _s8VYt::I64;
           I64[Hp - 48] = GHC.Ptr.Ptr_con_info;
           I64[Hp - 40] = _s8VYp::I64;
           I64[Hp - 32] = (,)_con_info;
           P64[Hp - 24] = Hp - 47;
           P64[Hp - 16] = Hp - 63;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           P64[Sp + 32] = Hp - 6;
           Sp = Sp + 32;
           call _s8VY0() args: 0, res: 0, upd: 0;
     }
 },
 _c8WAI() //  [R1]
         { []
         }
     {offset
       c8WAI: // global
           I64[Sp + 32] = R1;
           Sp = Sp + 8;
           call _c8WAL() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8WAI_info" {
     block_c8WAI_info:
         const _c8WAI;
         const 6026;
         const 4294967326;
         const S8W7j_srt+48;
 },
 _c8WBk() //  [R1]
         { []
         }
     {offset
       c8WBk: // global
           if (R1 & 7 == 2) goto u8WCs; else goto c8WBw;
       u8WCs: // global
           Sp = Sp + 40;
           call _c8WAS() args: 0, res: 0, upd: 0;
       c8WBw: // global
           _s8VYO::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c8WBr_info;
           R3 = P64[Sp + 8];
           R2 = _s8VYO::P64;
           R1 = P64[Sp + 24];
           Sp = Sp + 16;
           call stg_ap_ppv_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8WBk_info" {
     block_c8WBk_info:
         const _c8WBk;
         const 2057;
         const 4294967326;
         const S8W7j_srt+48;
 },
 _c8WAS() //  []
         { []
         }
     {offset
       c8WAS: // global
           P64[Sp - 8] = GHC.Base.Nothing_closure+1;
           Sp = Sp - 8;
           call _s8VY0() args: 0, res: 0, upd: 0;
     }
 },
 _s8VY0() //  []
         { []
         }
     {offset
       s8VY0: // global
           _s8VY2::P64 = P64[Sp];
           I64[Sp] = block_c8Wz2_info;
           R1 = _s8VY2::P64;
           if (R1 & 7 != 0) goto u8WD1; else goto c8Wz3;
       u8WD1: // global
           call _c8Wz2(R1) args: 0, res: 0, upd: 0;
       c8Wz3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c8Wz2() //  [R1]
         { []
         }
     {offset
       c8Wz2: // global
           if (R1 & 7 == 1) goto c8WA3; else goto c8WAm;
       c8WA3: // global
           _s8VXP::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c8Wz7_info;
           R1 = _s8VXP::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8WCH; else goto c8Wz8;
       u8WCH: // global
           call _c8Wz7(R1) args: 0, res: 0, upd: 0;
       c8Wz8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8WAm: // global
           _s8VXL::P64 = P64[R1 + 6];
           call MO_Touch(P64[Sp + 32]);
           R1 = _s8VXL::P64;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Wz2_info" {
     block_c8Wz2_info:
         const _c8Wz2;
         const 133;
         const 4294967326;
         const S8W7j_srt+48;
 },
 _c8Wz7() //  [R1]
         { []
         }
     {offset
       c8Wz7: // global
           _s8VY6::I64 = I64[R1 + 7] << 1;
           if (_s8VY6::I64 != 0) goto u8WCz; else goto c8WAf;
       u8WCz: // global
           I64[Sp] = _s8VY6::I64;
           call _c8Wzg() args: 0, res: 0, upd: 0;
       c8WAf: // global
           call "ccall" arg hints:  [PtrHint]  result hints:  [] free(I64[Sp + 8]);
           I64[Sp + 8] = 0;
           P64[Sp] = GHC.Foreign.newCString2_closure+1;
           call _c8WyL() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8Wz7_info" {
     block_c8Wz7_info:
         const _c8Wz7;
         const 68;
         const 4294967326;
         const S8W7j_srt+48;
 },
 _c8Wzg() //  []
         { []
         }
     {offset
       c8Wzg: // global
           Hp = Hp + 16;
           _s8VY6::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c8WA9; else goto c8WA8;
       c8WA9: // global
           HpAlloc = 16;
           I64[Sp] = block_c8Wzf_info;
           R1 = _s8VY6::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c8WA8: // global
           (_s8VYb::I64) = call "ccall" arg hints:  [PtrHint,]  result hints:  [PtrHint] realloc(I64[Sp + 8], _s8VY6::I64);
           if (_s8VYb::I64 == 0) goto c8WAc; else goto c8WAb;
       c8WAc: // global
           Hp = Hp - 16;
           R1 = Foreign.Marshal.Alloc.realloc2_closure;
           Sp = Sp + 40;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       c8WAb: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s8VY6::I64;
           I64[Sp + 8] = _s8VYb::I64;
           P64[Sp] = Hp - 7;
           call _c8WyL() args: 0, res: 0, upd: 0;
     }
 },
 _c8Wzf() //  [R1]
         { []
         }
     {offset
       c8Wzf: // global
           I64[Sp] = R1;
           call _c8Wzg() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8Wzf_info" {
     block_c8Wzf_info:
         const _c8Wzf;
         const 68;
         const 4294967326;
         const S8W7j_srt+48;
 },
 _c8WBr() //  [R1]
         { []
         }
     {offset
       c8WBr: // global
           I64[Sp] = block_c8WBt_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u8WCW; else goto c8WBy;
       u8WCW: // global
           call _c8WBt(R1) args: 0, res: 0, upd: 0;
       c8WBy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8WBr_info" {
     block_c8WBr_info:
         const _c8WBr;
         const 519;
         const 4294967326;
         const S8W7j_srt+48;
 },
 _c8WBt() //  [R1]
         { []
         }
     {offset
       c8WBt: // global
           P64[Sp] = P64[R1 + 7];
           P64[Sp - 8] = P64[R1 + 15];
           Sp = Sp - 8;
           call _c8WAZ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8WBt_info" {
     block_c8WBt_info:
         const _c8WBt;
         const 519;
         const 4294967326;
         const S8W7j_srt+48;
 },
 _c8WC1() //  [R1]
         { []
         }
     {offset
       c8WC1: // global
           _s8VZb::I64 = I64[Sp + 16];
           _s8VZf::P64 = P64[Sp + 8];
           I32[I64[Sp + 24] + (_s8VZb::I64 << 2)] = %MO_UU_Conv_W64_W32(I64[R1 + 7]);
           P64[Sp + 8] = _s8VZf::P64;
           I64[Sp + 16] = _s8VZb::I64 + 1;
           Sp = Sp + 8;
           call _c8WBN() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8WC1_info" {
     block_c8WC1_info:
         const _c8WC1;
         const 902;
         const 12884901918;
         const S8W7j_srt+40;
 },
 sat_s8VZo_entry() //  [R1]
         { []
         }
     {offset
       c8WD8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8WD9; else goto c8WDa;
       c8WD9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8WDa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Tuple.fst_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8VZo_info" {
     sat_s8VZo_info:
         const sat_s8VZo_entry;
         const 1;
         const 16;
 },
 GHC.Foreign.newCString1_entry() //  [R2, R3]
         { []
         }
     {offset
       c8WDb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8WDc; else goto c8WDd;
       c8WDc: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Foreign.newCString1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8WDd: // global
           I64[Sp - 16] = block_c8Wy0_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8WDk; else goto c8Wy1;
       u8WDk: // global
           call _c8Wy0(R1) args: 0, res: 0, upd: 0;
       c8Wy1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Foreign.newCString1_info" {
     GHC.Foreign.newCString1_info:
         const GHC.Foreign.newCString1_entry;
         const 0;
         const 47244640270;
         const 12884901903;
         const S8W7j_srt+40;
 },
 _c8Wy0() //  [R1]
         { []
         }
     {offset
       c8Wy0: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8WDg; else goto c8WDf;
       c8WDg: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8WDf: // global
           _s8VXj::P64 = P64[R1 + 23];
           I64[Hp - 8] = sat_s8VZk_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_c8WD2_info;
           R4 = Hp - 6;
           R3 = GHC.IO.Encoding.Types.close_closure+1;
           R2 = _s8VXj::P64;
           Sp = Sp + 8;
           call GHC.IO.bracket1_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8Wy0_info" {
     block_c8Wy0_info:
         const _c8Wy0;
         const 1;
         const 12884901918;
         const S8W7j_srt+40;
 },
 _c8WD2() //  [R1]
         { []
         }
     {offset
       c8WD2: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8WDj; else goto c8WDi;
       c8WDj: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8WDi: // global
           I64[Hp - 16] = sat_s8VZo_info;
           P64[Hp] = R1;
           R1 = Hp - 16;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8WD2_info" {
     block_c8WD2_info:
         const _c8WD2;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:06.840563365 UTC

[section ""data" . GHC.Foreign.newCString_closure" {
     GHC.Foreign.newCString_closure:
         const GHC.Foreign.newCString_info;
         const 0;
 },
 GHC.Foreign.newCString_entry() //  [R2, R3]
         { []
         }
     {offset
       c8WGu: // global
           R3 = R3;
           R2 = R2;
           call GHC.Foreign.newCString1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Foreign.newCString_info" {
     GHC.Foreign.newCString_info:
         const GHC.Foreign.newCString_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const S8W7j_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:06.844716683 UTC

[section ""data" . GHC.Foreign.newCStringLen_closure" {
     GHC.Foreign.newCStringLen_closure:
         const GHC.Foreign.newCStringLen_info;
         const 0;
 },
 GHC.Foreign.newCStringLen_entry() //  [R2, R3]
         { []
         }
     {offset
       c8WGF: // global
           R4 = R3;
           R3 = GHC.Types.False_closure+1;
           R2 = R2;
           call GHC.Foreign.newEncodedCString_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Foreign.newCStringLen_info" {
     GHC.Foreign.newCStringLen_info:
         const GHC.Foreign.newCStringLen_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const S8W7j_srt+72;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:06.859990182 UTC

[section ""data" . GHC.Foreign.$wpeekCString_closure" {
     GHC.Foreign.$wpeekCString_closure:
         const GHC.Foreign.$wpeekCString_info;
         const 0;
 },
 sat_s8W0B_entry() //  [R1]
         { []
         }
     {offset
       c8WIS: // global
           _s8W0B::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c8WIT; else goto c8WIU;
       c8WIU: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c8WIW; else goto c8WIV;
       c8WIW: // global
           HpAlloc = 40;
           goto c8WIT;
       c8WIT: // global
           R1 = _s8W0B::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8WIV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s8W0B::P64;
           _s8W0q::P64 = P64[_s8W0B::P64 + 16];
           _s8W0y::P64 = P64[_s8W0B::P64 + 24];
           _s8W0u::I64 = I64[_s8W0B::P64 + 32];
           I64[Hp - 32] = GHC.Types.C#_con_info;
           I64[Hp - 24] = _s8W0u::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _s8W0q::P64;
           R3 = _s8W0y::P64;
           R2 = Hp - 14;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8W0B_info" {
     sat_s8W0B_info:
         const sat_s8W0B_entry;
         const 4294967298;
         const 15;
 },
 sat_s8W0S_entry() //  [R1]
         { []
         }
     {offset
       c8WJ5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8WJ6; else goto c8WJ7;
       c8WJ6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8WJ7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.Types.[]_closure+1;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8W0S_info" {
     sat_s8W0S_info:
         const sat_s8W0S_entry;
         const 1;
         const 16;
 },
 $wgo_s8VZS_entry() //  [R1, R2]
         { []
         }
     {offset
       c8WJ8: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c8WJ9; else goto c8WJa;
       c8WJ9: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8WJa: // global
           I64[Sp - 32] = block_c8WHx_info;
           _s8VZS::P64 = R1;
           _s8VZR::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 24] = _s8VZR::P64;
           P64[Sp - 16] = _s8VZS::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u8WKK; else goto c8WHy;
       u8WKK: // global
           call _c8WHx(R1) args: 0, res: 0, upd: 0;
       c8WHy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wgo_s8VZS_info" {
     $wgo_s8VZS_info:
         const $wgo_s8VZS_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _c8WHx() //  [R1]
         { []
         }
     {offset
       c8WHx: // global
           _s8VZR::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c8WHC_info;
           R3 = _s8VZR::P64;
           R2 = P64[Sp + 24];
           _s8VZX::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp + 24] = _s8VZX::P64;
           Sp = Sp + 8;
           call stg_ap_ppv_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8WHx_info" {
     block_c8WHx_info:
         const _c8WHx;
         const 3;
         const 30;
 },
 _c8WHC() //  [R1]
         { []
         }
     {offset
       c8WHC: // global
           I64[Sp] = block_c8WHE_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u8WKC; else goto c8WHF;
       u8WKC: // global
           call _c8WHE(R1) args: 0, res: 0, upd: 0;
       c8WHF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8WHC_info" {
     block_c8WHC_info:
         const _c8WHC;
         const 2;
         const 30;
 },
 _c8WHE() //  [R1]
         { []
         }
     {offset
       c8WHE: // global
           I64[Sp - 16] = block_c8WHJ_info;
           _s8W05::P64 = P64[R1 + 7];
           _s8W07::P64 = P64[R1 + 23];
           R1 = P64[R1 + 15];
           P64[Sp - 8] = _s8W07::P64;
           P64[Sp] = _s8W05::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8WKD; else goto c8WHK;
       u8WKD: // global
           call _c8WHJ(R1) args: 0, res: 0, upd: 0;
       c8WHK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8WHE_info" {
     block_c8WHE_info:
         const _c8WHE;
         const 2;
         const 30;
 },
 _c8WHJ() //  [R1]
         { []
         }
     {offset
       c8WHJ: // global
           if (I64[R1 + 39] == I64[R1 + 47]) goto c8WK5; else goto c8WJy;
       c8WK5: // global
           I64[Sp + 32] = block_c8WIh_info;
           R1 = P64[Sp + 8];
           Sp = Sp + 32;
           if (R1 & 7 != 0) goto u8WKF; else goto c8WIi;
       u8WKF: // global
           call _c8WIh(R1) args: 0, res: 0, upd: 0;
       c8WIi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8WJy: // global
           I64[Sp] = block_c8WJf_info;
           _s8W08::P64 = R1;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s8W08::P64;
           if (R1 & 7 != 0) goto u8WKE; else goto c8WJz;
       u8WKE: // global
           call _c8WJf(R1) args: 0, res: 0, upd: 0;
       c8WJz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8WHJ_info" {
     block_c8WHJ_info:
         const _c8WHJ;
         const 4;
         const 30;
 },
 _c8WIh() //  [R1]
         { []
         }
     {offset
       c8WIh: // global
           _s8W1g::P64 = P64[R1 + 7];
           _s8W1l::I64 = I64[R1 + 47] - I64[R1 + 39];
           if (%MO_S_Gt_W64(_s8W1l::I64, 0)) goto c8WKn; else goto c8WKo;
       c8WKn: // global
           P64[Sp - 24] = _s8W1g::P64;
           I64[Sp - 16] = _s8W1l::I64 - 1;
           P64[Sp - 8] = GHC.Types.[]_closure+1;
           I64[Sp] = I64[R1 + 23];
           Sp = Sp - 32;
           call _c8WIz() args: 0, res: 0, upd: 0;
       c8WKo: // global
           call MO_Touch(_s8W1g::P64);
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8WIh_info" {
     block_c8WIh_info:
         const _c8WIh;
         const 0;
         const 30;
 },
 _c8WIz() //  []
         { []
         }
     {offset
       c8WIz: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c8WKi; else goto c8WKh;
       c8WKi: // global
           HpAlloc = 40;
           I64[Sp] = block_c8WIz_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c8WKh: // global
           _s8W1y::P64 = P64[Sp + 24];
           _s8W1A::I64 = I64[Sp + 16];
           if (_s8W1A::I64 != 0) goto c8WKk; else goto c8WKl;
       c8WKk: // global
           I64[Hp - 32] = GHC.Types.C#_con_info;
           I64[Hp - 24] = %MO_UU_Conv_W32_W64(I32[I64[Sp + 32] + (_s8W1A::I64 << 2)]);
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _s8W1y::P64;
           I64[Sp + 16] = _s8W1A::I64 - 1;
           P64[Sp + 24] = Hp - 14;
           call _c8WIz() args: 0, res: 0, upd: 0;
       c8WKl: // global
           Hp = Hp - 40;
           P64[Sp + 24] = _s8W1y::P64;
           Sp = Sp + 8;
           call _c8WK8() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8WIz_info" {
     block_c8WIz_info:
         const _c8WIz;
         const 644;
         const 30;
 },
 _c8WK8() //  []
         { []
         }
     {offset
       c8WK8: // global
           Hp = Hp + 40;
           _s8W1o::P64 = P64[Sp + 16];
           if (Hp > HpLim) (likely: False) goto c8WKf; else goto c8WKe;
       c8WKf: // global
           HpAlloc = 40;
           I64[Sp - 8] = block_c8WK7_info;
           R1 = _s8W1o::P64;
           Sp = Sp - 8;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8WKe: // global
           _s8W1s::I64 = %MO_UU_Conv_W32_W64(I32[I64[Sp + 24]]);
           call MO_Touch(P64[Sp]);
           I64[Hp - 32] = GHC.Types.C#_con_info;
           I64[Hp - 24] = _s8W1s::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _s8W1o::P64;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8WK7() //  [R1]
         { []
         }
     {offset
       c8WK7: // global
           P64[Sp + 24] = R1;
           Sp = Sp + 8;
           call _c8WK8() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8WK7_info" {
     block_c8WK7_info:
         const _c8WK7;
         const 900;
         const 30;
 },
 _c8WJf() //  [R1]
         { []
         }
     {offset
       c8WJf: // global
           _s8W07::P64 = P64[Sp + 8];
           if (R1 & 7 == 2) goto c8WJZ; else goto c8WJN;
       c8WJZ: // global
           I64[Sp + 8] = block_c8WJX_info;
           R1 = _s8W07::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8WKL; else goto c8WK0;
       u8WKL: // global
           call _c8WJX(R1) args: 0, res: 0, upd: 0;
       c8WK0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8WJN: // global
           _s8W08::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c8WJD_info;
           R3 = _s8W07::P64;
           R2 = _s8W08::P64;
           R1 = P64[Sp + 32];
           Sp = Sp + 16;
           call stg_ap_ppv_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8WJf_info" {
     block_c8WJf_info:
         const _c8WJf;
         const 4;
         const 30;
 },
 _c8WJX() //  [R1]
         { []
         }
     {offset
       c8WJX: // global
           P64[Sp + 24] = P64[Sp + 8];
           I64[Sp + 8] = I64[R1 + 23];
           P64[Sp - 16] = P64[R1 + 7];
           I64[Sp - 8] = I64[R1 + 39];
           I64[Sp] = I64[R1 + 47];
           Sp = Sp - 16;
           call _s8W0g() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8WJX_info" {
     block_c8WJX_info:
         const _c8WJX;
         const 259;
         const 30;
 },
 _c8WJD() //  [R1]
         { []
         }
     {offset
       c8WJD: // global
           I64[Sp] = block_c8WJF_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u8WKM; else goto c8WJG;
       u8WKM: // global
           call _c8WJF(R1) args: 0, res: 0, upd: 0;
       c8WJG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8WJD_info" {
     block_c8WJD_info:
         const _c8WJD;
         const 130;
         const 30;
 },
 _c8WJF() //  [R1]
         { []
         }
     {offset
       c8WJF: // global
           I64[Sp] = block_c8WJK_info;
           _s8W0Y::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp + 16] = _s8W0Y::P64;
           if (R1 & 7 != 0) goto u8WKN; else goto c8WJQ;
       u8WKN: // global
           call _c8WJK(R1) args: 0, res: 0, upd: 0;
       c8WJQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8WJF_info" {
     block_c8WJF_info:
         const _c8WJF;
         const 130;
         const 30;
 },
 _c8WJK() //  [R1]
         { []
         }
     {offset
       c8WJK: // global
           P64[Sp - 24] = P64[R1 + 7];
           I64[Sp - 16] = I64[R1 + 39];
           I64[Sp - 8] = I64[R1 + 47];
           I64[Sp] = I64[R1 + 23];
           P64[Sp + 16] = P64[Sp + 16];
           Sp = Sp - 24;
           call _s8W0g() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8WJK_info" {
     block_c8WJK_info:
         const _c8WJK;
         const 2;
         const 30;
 },
 _s8W0g() //  []
         { []
         }
     {offset
       s8W0g: // global
           _s8W0n::I64 = I64[Sp + 16] - I64[Sp + 8];
           if (%MO_S_Gt_W64(_s8W0n::I64, 0)) goto c8WJs; else goto c8WJt;
       c8WJs: // global
           P64[Sp + 8] = GHC.Types.[]_closure+1;
           I64[Sp + 16] = _s8W0n::I64 - 1;
           Sp = Sp - 8;
           call _c8WI9() args: 0, res: 0, upd: 0;
       c8WJt: // global
           _s8VZS::P64 = P64[Sp + 32];
           _s8W0i::P64 = P64[Sp + 40];
           call MO_Touch(P64[Sp]);
           I64[Sp + 40] = block_c8WIZ_info;
           R2 = _s8W0i::P64;
           R1 = _s8VZS::P64;
           Sp = Sp + 40;
           call $wgo_s8VZS_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c8WI9() //  []
         { []
         }
     {offset
       c8WI9: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c8WJn; else goto c8WJm;
       c8WJn: // global
           HpAlloc = 40;
           I64[Sp] = block_c8WI9_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c8WJm: // global
           _s8W0j::I64 = I64[Sp + 32];
           _s8W0E::P64 = P64[Sp + 16];
           _s8W0G::I64 = I64[Sp + 24];
           if (_s8W0G::I64 != 0) goto c8WJp; else goto c8WJq;
       c8WJp: // global
           _s8W0J::I64 = %MO_UU_Conv_W32_W64(I32[_s8W0j::I64 + (_s8W0G::I64 << 2)]);
           I64[Hp - 32] = GHC.Types.C#_con_info;
           I64[Hp - 24] = _s8W0J::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _s8W0E::P64;
           I64[Sp + 24] = _s8W0G::I64 - 1;
           P64[Sp + 16] = Hp - 14;
           call _c8WI9() args: 0, res: 0, upd: 0;
       c8WJq: // global
           Hp = Hp - 40;
           _s8VZS::P64 = P64[Sp + 40];
           _s8W0i::P64 = P64[Sp + 48];
           _s8W0u::I64 = %MO_UU_Conv_W32_W64(I32[_s8W0j::I64]);
           call MO_Touch(P64[Sp + 8]);
           I64[Sp + 32] = block_c8WIK_info;
           R2 = _s8W0i::P64;
           R1 = _s8VZS::P64;
           I64[Sp + 40] = _s8W0u::I64;
           P64[Sp + 48] = _s8W0E::P64;
           Sp = Sp + 32;
           call $wgo_s8VZS_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8WI9_info" {
     block_c8WI9_info:
         const _c8WI9;
         const 774;
         const 30;
 },
 _c8WIK() //  [R1]
         { []
         }
     {offset
       c8WIK: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c8WJk; else goto c8WJj;
       c8WJk: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8WJj: // global
           I64[Hp - 32] = sat_s8W0B_info;
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = R1;
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 32;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8WIK_info" {
     block_c8WIK_info:
         const _c8WIK;
         const 66;
         const 30;
 },
 _c8WIZ() //  [R1]
         { []
         }
     {offset
       c8WIZ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8WJw; else goto c8WJv;
       c8WJw: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8WJv: // global
           I64[Hp - 16] = sat_s8W0S_info;
           P64[Hp] = R1;
           R1 = Hp - 16;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8WIZ_info" {
     block_c8WIZ_info:
         const _c8WIZ;
         const 0;
         const 30;
 },
 sat_s8W1N_entry() //  [R1, R2]
         { []
         }
     {offset
       c8WKX: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c8WKY; else goto c8WKZ;
       c8WKY: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8WKZ: // global
           I64[Sp - 32] = block_c8WH6_info;
           _s8VZr::I64 = I64[R1 + 6];
           _s8VZu::I64 = I64[R1 + 14];
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           I64[Sp - 24] = _s8VZr::I64;
           I64[Sp - 16] = _s8VZu::I64;
           P64[Sp - 8] = R2;
           Sp = Sp - 32;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8W1N_info" {
     sat_s8W1N_info:
         const sat_s8W1N_entry;
         const 8589934592;
         const 4294967309;
         const 8589934597;
         const S8W7j_srt;
 },
 _c8WH6() //  [R1]
         { []
         }
     {offset
       c8WH6: // global
           _s8VZu::I64 = I64[Sp + 16];
           if (%MO_S_Gt_W64(_s8VZu::I64, 1)) goto c8WKV; else goto c8WKW;
       c8WKV: // global
           _s8VZE::P64 = R1;
           _s8VZG::I64 = _s8VZu::I64;
           goto s8VZF;
       c8WKW: // global
           _s8VZE::P64 = R1;
           _s8VZG::I64 = 1;
           goto s8VZF;
       s8VZF: // global
           _s8VZH::I64 = _s8VZG::I64 << 2;
           if (%MO_S_Ge_W64(_s8VZH::I64, 0)) goto c8WL5; else goto c8WLa;
       c8WL5: // global
           I64[Sp - 24] = block_c8WHj_info;
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           I64[Sp - 16] = _s8VZG::I64;
           I64[Sp - 8] = _s8VZH::I64;
           P64[Sp] = _s8VZE::P64;
           Sp = Sp - 24;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
       c8WLa: // global
           R1 = GHC.ForeignPtr.mallocForeignPtrBytes2_closure;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8WH6_info" {
     block_c8WH6_info:
         const _c8WH6;
         const 195;
         const 4294967326;
         const S8W7j_srt;
 },
 _c8WHj() //  [R1]
         { []
         }
     {offset
       c8WHj: // global
           I64[Sp] = block_c8WHl_info;
           _s8VZL::P64 = R1;
           R1 = I64[Sp + 16];
           P64[Sp + 16] = _s8VZL::P64;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8WHj_info" {
     block_c8WHj_info:
         const _c8WHj;
         const 1734;
         const 30;
 },
 _c8WHl() //  [R1]
         { []
         }
     {offset
       c8WHl: // global
           Hp = Hp + 176;
           if (Hp > HpLim) (likely: False) goto c8WL9; else goto c8WL8;
       c8WL9: // global
           HpAlloc = 176;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8WL8: // global
           I64[Hp - 168] = GHC.ForeignPtr.MallocPtr_con_info;
           P64[Hp - 160] = R1;
           P64[Hp - 152] = P64[Sp + 16];
           I64[Hp - 144] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 136] = Hp - 166;
           P64[Hp - 128] = GHC.IO.Buffer.WriteBuffer_closure+2;
           P64[Hp - 120] = R1 + 16;
           I64[Hp - 112] = I64[Sp + 8];
           I64[Hp - 104] = 0;
           I64[Hp - 96] = 0;
           I64[Hp - 88] = $wgo_s8VZS_info;
           P64[Hp - 80] = P64[Sp + 48];
           P64[Hp - 72] = Hp - 143;
           I64[Hp - 64] = GHC.ForeignPtr.PlainForeignPtr_con_info;
           P64[Hp - 56] = P64[Sp + 24];
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = Hp - 63;
           P64[Hp - 32] = GHC.IO.Buffer.ReadBuffer_closure+1;
           I64[Hp - 24] = I64[Sp + 32];
           _s8VZu::I64 = I64[Sp + 40];
           I64[Hp - 16] = _s8VZu::I64;
           I64[Hp - 8] = 0;
           I64[Hp] = _s8VZu::I64;
           R2 = Hp - 47;
           R1 = Hp - 86;
           Sp = Sp + 56;
           call $wgo_s8VZS_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8WHl_info" {
     block_c8WHl_info:
         const _c8WHl;
         const 1606;
         const 30;
 },
 GHC.Foreign.$wpeekCString_entry() //  [R2, R3]
         { []
         }
     {offset
       c8WLd: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8WLe; else goto c8WLf;
       c8WLe: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Foreign.$wpeekCString_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8WLf: // global
           _s8VZr::I64 = R3;
           _s8VZq::P64 = R2;
           _s8W1P::I64 = 0;
           goto c8WLl;
       c8WLl: // global
           if (I8[_s8VZr::I64 + _s8W1P::I64] == 0 :: W8) goto c8WLr; else goto c8WLq;
       c8WLr: // global
           I64[Sp - 24] = block_c8WGW_info;
           R1 = _s8VZq::P64;
           I64[Sp - 16] = _s8VZr::I64;
           I64[Sp - 8] = _s8W1P::I64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u8WLu; else goto c8WGX;
       u8WLu: // global
           call _c8WGW(R1) args: 0, res: 0, upd: 0;
       c8WGX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8WLq: // global
           _s8W1P::I64 = _s8W1P::I64 + 1;
           goto c8WLl;
     }
 },
 section ""relreadonly" . GHC.Foreign.$wpeekCString_info" {
     GHC.Foreign.$wpeekCString_info:
         const GHC.Foreign.$wpeekCString_entry;
         const 0;
         const 4402341478414;
         const 12884901902;
         const S8W7j_srt;
 },
 _c8WGW() //  [R1]
         { []
         }
     {offset
       c8WGW: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8WLj; else goto c8WLi;
       c8WLj: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8WLi: // global
           _s8VZy::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_s8W1N_info;
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = I64[Sp + 16];
           R4 = Hp - 14;
           R3 = GHC.IO.Encoding.Types.close_closure+1;
           R2 = _s8VZy::P64;
           Sp = Sp + 24;
           call GHC.IO.bracket1_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8WGW_info" {
     block_c8WGW_info:
         const _c8WGW;
         const 194;
         const 4294967326;
         const S8W7j_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:06.911064485 UTC

[section ""data" . GHC.Foreign.peekCString1_closure" {
     GHC.Foreign.peekCString1_closure:
         const GHC.Foreign.peekCString1_info;
         const 0;
 },
 GHC.Foreign.peekCString1_entry() //  [R2, R3]
         { []
         }
     {offset
       c8WOE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8WOF; else goto c8WOG;
       c8WOF: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Foreign.peekCString1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8WOG: // global
           I64[Sp - 16] = block_c8WOB_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8WOK; else goto c8WOC;
       u8WOK: // global
           call _c8WOB(R1) args: 0, res: 0, upd: 0;
       c8WOC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Foreign.peekCString1_info" {
     GHC.Foreign.peekCString1_info:
         const GHC.Foreign.peekCString1_entry;
         const 0;
         const 12884901902;
         const 12884901903;
         const S8W7j_srt+80;
 },
 _c8WOB() //  [R1]
         { []
         }
     {offset
       c8WOB: // global
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Foreign.$wpeekCString_entry(R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8WOB_info" {
     block_c8WOB_info:
         const _c8WOB;
         const 1;
         const 4294967326;
         const S8W7j_srt+80;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:06.916171666 UTC

[section ""data" . GHC.Foreign.peekCString_closure" {
     GHC.Foreign.peekCString_closure:
         const GHC.Foreign.peekCString_info;
         const 0;
 },
 GHC.Foreign.peekCString_entry() //  [R2, R3]
         { []
         }
     {offset
       c8WOZ: // global
           R3 = R3;
           R2 = R2;
           call GHC.Foreign.peekCString1_entry(R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Foreign.peekCString_info" {
     GHC.Foreign.peekCString_info:
         const GHC.Foreign.peekCString_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const S8W7j_srt+88;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:06.920743208 UTC

[section ""data" . GHC.Foreign.charIsRepresentable2_closure" {
     GHC.Foreign.charIsRepresentable2_closure:
         const GHC.Foreign.charIsRepresentable2_info;
         const 0;
 },
 GHC.Foreign.charIsRepresentable2_entry() //  [R2]
         { []
         }
     {offset
       c8WPd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8WPh; else goto c8WPi;
       c8WPh: // global
           R2 = R2;
           R1 = GHC.Foreign.charIsRepresentable2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8WPi: // global
           I64[Sp - 8] = block_c8WPa_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8WPA; else goto c8WPb;
       u8WPA: // global
           call _c8WPa(R1) args: 0, res: 0, upd: 0;
       c8WPb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Foreign.charIsRepresentable2_info" {
     GHC.Foreign.charIsRepresentable2_info:
         const GHC.Foreign.charIsRepresentable2_entry;
         const 0;
         const 30064771086;
         const 8589934597;
         const S8W7j_srt+96;
 },
 _c8WPa() //  [R1]
         { []
         }
     {offset
       c8WPa: // global
           I64[Sp - 8] = block_c8WPg_info;
           R2 = P64[R1 + 7];
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8WPa_info" {
     block_c8WPa_info:
         const _c8WPa;
         const 0;
         const 12884901918;
         const S8W7j_srt+96;
 },
 _c8WPg() //  [R1]
         { []
         }
     {offset
       c8WPg: // global
           I64[Sp] = block_c8WPn_info;
           R3 = GHC.IO.Exception.$fExceptionIOException4_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8WPg_info" {
     block_c8WPg_info:
         const _c8WPg;
         const 1;
         const 12884901918;
         const S8W7j_srt+96;
 },
 _c8WPn() //  [R1]
         { []
         }
     {offset
       c8WPn: // global
           if (R1 & 7 == 1) goto c8WPu; else goto c8WPy;
       c8WPu: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       c8WPy: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8WPn_info" {
     block_c8WPn_info:
         const _c8WPn;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:06.932173762 UTC

[section ""data" . GHC.Foreign.charIsRepresentable1_closure" {
     GHC.Foreign.charIsRepresentable1_closure:
         const GHC.Foreign.charIsRepresentable1_info;
         const 0;
 },
 sat_s8W2y_entry() //  [R1, R2]
         { []
         }
     {offset
       c8WQe: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8WQf; else goto c8WQg;
       c8WQf: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8WQg: // global
           I64[Sp - 24] = block_c8WQb_info;
           _s8W29::P64 = P64[R1 + 6];
           _s8W2b::P64 = P64[R1 + 14];
           R1 = R2;
           P64[Sp - 16] = _s8W29::P64;
           P64[Sp - 8] = _s8W2b::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u8WR7; else goto c8WQc;
       u8WR7: // global
           call _c8WQb(R1) args: 0, res: 0, upd: 0;
       c8WQc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8W2y_info" {
     sat_s8W2y_info:
         const sat_s8W2y_entry;
         const 2;
         const 4294967307;
         const 8589934597;
         const S8W7j_srt+80;
 },
 _c8WQb() //  [R1]
         { []
         }
     {offset
       c8WQb: // global
           I64[Sp] = block_c8WQj_info;
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 16];
           call GHC.Foreign.$wpeekCString_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8WQb_info" {
     block_c8WQb_info:
         const _c8WQb;
         const 2;
         const 4294967326;
         const S8W7j_srt+80;
 },
 _c8WQj() //  [R1]
         { []
         }
     {offset
       c8WQj: // global
           I64[Sp] = block_c8WQl_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u8WR8; else goto c8WQo;
       u8WR8: // global
           call _c8WQl(R1) args: 0, res: 0, upd: 0;
       c8WQo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8WQj_info" {
     block_c8WQj_info:
         const _c8WQj;
         const 130;
         const 30;
 },
 _c8WQl() //  [R1]
         { []
         }
     {offset
       c8WQl: // global
           if (R1 & 7 == 1) goto u8WR4; else goto c8WQz;
       u8WR4: // global
           Sp = Sp + 24;
           call _c8WR1() args: 0, res: 0, upd: 0;
       c8WQz: // global
           I64[Sp] = block_c8WQx_info;
           _s8W2o::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp + 16] = _s8W2o::P64;
           if (R1 & 7 != 0) goto u8WR9; else goto c8WQA;
       u8WR9: // global
           call _c8WQx(R1) args: 0, res: 0, upd: 0;
       c8WQA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8WQl_info" {
     block_c8WQl_info:
         const _c8WQl;
         const 130;
         const 30;
 },
 _c8WQx() //  [R1]
         { []
         }
     {offset
       c8WQx: // global
           if (R1 & 7 == 1) goto c8WQM; else goto u8WR5;
       c8WQM: // global
           I64[Sp] = block_c8WQE_info;
           R1 = P64[Sp + 16];
           if (R1 & 7 != 0) goto u8WRb; else goto c8WQF;
       u8WRb: // global
           call _c8WQE(R1) args: 0, res: 0, upd: 0;
       c8WQF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u8WR5: // global
           Sp = Sp + 24;
           call _c8WR1() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8WQx_info" {
     block_c8WQx_info:
         const _c8WQx;
         const 2;
         const 30;
 },
 _c8WQE() //  [R1]
         { []
         }
     {offset
       c8WQE: // global
           _s8W29::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c8WQJ_info;
           _s8W2s::I64 = I64[R1 + 7];
           R1 = _s8W29::P64;
           I64[Sp + 16] = _s8W2s::I64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8WRd; else goto c8WQO;
       u8WRd: // global
           call _c8WQJ(R1) args: 0, res: 0, upd: 0;
       c8WQO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8WQE_info" {
     block_c8WQE_info:
         const _c8WQE;
         const 130;
         const 30;
 },
 _c8WQJ() //  [R1]
         { []
         }
     {offset
       c8WQJ: // global
           if (I64[Sp + 8] == I64[R1 + 7]) goto c8WQX; else goto u8WR6;
       c8WQX: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u8WR6: // global
           Sp = Sp + 16;
           call _c8WR1() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8WQJ_info" {
     block_c8WQJ_info:
         const _c8WQJ;
         const 65;
         const 30;
 },
 _c8WR1() //  []
         { []
         }
     {offset
       c8WR1: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s8W2z_entry() //  [R1]
         { []
         }
     {offset
       c8WRl: // global
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Foreign.charIsRepresentable3_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8W2z_info" {
     sat_s8W2z_info:
         const sat_s8W2z_entry;
         const 3;
         const 8;
         const 4294967299;
 },
 GHC.Foreign.charIsRepresentable1_entry() //  [R2, R3]
         { []
         }
     {offset
       c8WRo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8WRp; else goto c8WRq;
       c8WRp: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Foreign.charIsRepresentable1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8WRq: // global
           I64[Sp - 16] = block_c8WQ1_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8WRu; else goto c8WQ2;
       u8WRu: // global
           call _c8WQ1(R1) args: 0, res: 0, upd: 0;
       c8WQ2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Foreign.charIsRepresentable1_info" {
     GHC.Foreign.charIsRepresentable1_info:
         const GHC.Foreign.charIsRepresentable1_entry;
         const 0;
         const 210453397518;
         const 12884901903;
         const S8W7j_srt+80;
 },
 _c8WQ1() //  [R1]
         { []
         }
     {offset
       c8WQ1: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c8WRt; else goto c8WRs;
       c8WRt: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8WRs: // global
           I64[Hp - 72] = sat_s8W2y_info;
           _s8W29::P64 = P64[Sp + 8];
           P64[Hp - 64] = _s8W29::P64;
           P64[Hp - 56] = R1;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = _s8W29::P64;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           I64[Hp - 24] = sat_s8W2z_info;
           P64[Hp - 16] = R1;
           P64[Hp - 8] = Hp - 46;
           P64[Hp] = Hp - 70;
           R2 = GHC.Foreign.charIsRepresentable2_closure+2;
           R1 = Hp - 23;
           Sp = Sp + 16;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8WQ1_info" {
     block_c8WQ1_info:
         const _c8WQ1;
         const 1;
         const 73014444062;
         const S8W7j_srt+80;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:06.951185796 UTC

[section ""data" . GHC.Foreign.charIsRepresentable_closure" {
     GHC.Foreign.charIsRepresentable_closure:
         const GHC.Foreign.charIsRepresentable_info;
         const 0;
 },
 GHC.Foreign.charIsRepresentable_entry() //  [R2, R3]
         { []
         }
     {offset
       c8WSB: // global
           R3 = R3;
           R2 = R2;
           call GHC.Foreign.charIsRepresentable1_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Foreign.charIsRepresentable_info" {
     GHC.Foreign.charIsRepresentable_info:
         const GHC.Foreign.charIsRepresentable_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const S8W7j_srt+120;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:06.954273643 UTC

[section ""relreadonly" . S8W7j_srt" {
     S8W7j_srt:
         const GHC.ForeignPtr.mallocForeignPtrBytes2_closure;
         const $wpeekCStringLen_r8TNn_closure;
         const peekCStringLen1_r8TNo_closure;
         const Foreign.Marshal.Array.withArrayLen_closure;
         const GHC.Foreign.withCStringsLen1_closure;
         const Foreign.Marshal.Alloc.malloc1_closure;
         const Foreign.Marshal.Alloc.realloc2_closure;
         const newEncodedCString1_r8TNq_closure;
         const GHC.Foreign.newCString1_closure;
         const GHC.Foreign.newEncodedCString_closure;
         const GHC.Foreign.$wpeekCString_closure;
         const GHC.Foreign.peekCString1_closure;
         const Data.Typeable.Internal.sameTypeRep_closure;
         const GHC.IO.Exception.$fExceptionIOException4_closure;
         const GHC.Foreign.charIsRepresentable2_closure;
         const GHC.Foreign.charIsRepresentable1_closure;
 }]

