
==================== Raw Cmm ====================
2018-03-16 16:11:11.243067722 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:11:11.244896915 UTC

[section ""data" . GHC.Exts.fromList_closure" {
     GHC.Exts.fromList_closure:
         const GHC.Exts.fromList_info;
 },
 GHC.Exts.fromList_entry() //  [R2]
         { []
         }
     {offset
       cftSz: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cftSA; else goto cftSB;
       cftSA: // global
           R2 = R2;
           R1 = GHC.Exts.fromList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cftSB: // global
           I64[Sp - 8] = block_cftSw_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uftSF; else goto cftSx;
       uftSF: // global
           call _cftSw(R1) args: 0, res: 0, upd: 0;
       cftSx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Exts.fromList_info" {
     GHC.Exts.fromList_info:
         const GHC.Exts.fromList_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cftSw() //  [R1]
         { []
         }
     {offset
       cftSw: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cftSw_info" {
     block_cftSw_info:
         const _cftSw;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:11.250412794 UTC

[section ""data" . GHC.Exts.fromListN_closure" {
     GHC.Exts.fromListN_closure:
         const GHC.Exts.fromListN_info;
 },
 GHC.Exts.fromListN_entry() //  [R2]
         { []
         }
     {offset
       cftSW: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cftSX; else goto cftSY;
       cftSX: // global
           R2 = R2;
           R1 = GHC.Exts.fromListN_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cftSY: // global
           I64[Sp - 8] = block_cftST_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uftT2; else goto cftSU;
       uftT2: // global
           call _cftST(R1) args: 0, res: 0, upd: 0;
       cftSU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Exts.fromListN_info" {
     GHC.Exts.fromListN_info:
         const GHC.Exts.fromListN_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cftST() //  [R1]
         { []
         }
     {offset
       cftST: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cftST_info" {
     block_cftST_info:
         const _cftST;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:11.255554873 UTC

[section ""data" . GHC.Exts.toList_closure" {
     GHC.Exts.toList_closure:
         const GHC.Exts.toList_info;
 },
 GHC.Exts.toList_entry() //  [R2]
         { []
         }
     {offset
       cftTj: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cftTk; else goto cftTl;
       cftTk: // global
           R2 = R2;
           R1 = GHC.Exts.toList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cftTl: // global
           I64[Sp - 8] = block_cftTg_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uftTp; else goto cftTh;
       uftTp: // global
           call _cftTg(R1) args: 0, res: 0, upd: 0;
       cftTh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Exts.toList_info" {
     GHC.Exts.toList_info:
         const GHC.Exts.toList_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cftTg() //  [R1]
         { []
         }
     {offset
       cftTg: // global
           R1 = P64[R1 + 23];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cftTg_info" {
     block_cftTg_info:
         const _cftTg;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:11.260840182 UTC

[section ""data" . GHC.Exts.$fIsListNonEmpty1_closure" {
     GHC.Exts.$fIsListNonEmpty1_closure:
         const GHC.Exts.$fIsListNonEmpty1_info;
 },
 GHC.Exts.$fIsListNonEmpty1_entry() //  [R2]
         { []
         }
     {offset
       cftTG: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cftTK; else goto cftTJ;
       cftTK: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.Exts.$fIsListNonEmpty1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cftTJ: // global
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Exts.$fIsListNonEmpty1_info" {
     GHC.Exts.$fIsListNonEmpty1_info:
         const GHC.Exts.$fIsListNonEmpty1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:11.264344917 UTC

[section ""cstring" . lvl_rftgk_bytes" {
     lvl_rftgk_bytes:
         I8[] [78,111,110,69,109,112,116,121,46,102,114,111,109,76,105,115,116,58,32,101,109,112,116,121,32,108,105,115,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:11.267130935 UTC

[section ""data" . GHC.Exts.$fIsListNonEmpty2_closure" {
     GHC.Exts.$fIsListNonEmpty2_closure:
         const GHC.Exts.$fIsListNonEmpty2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exts.$fIsListNonEmpty2_entry() //  [R1]
         { []
         }
     {offset
       cftU1: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cftU2; else goto cftU3;
       cftU2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cftU3: // global
           (_cftTW::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cftTW::I64 == 0) goto cftTY; else goto cftTX;
       cftTY: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cftTX: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cftTW::I64;
           I64[Sp - 24] = block_cftTZ_info;
           R2 = lvl_rftgk_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Exts.$fIsListNonEmpty2_info" {
     GHC.Exts.$fIsListNonEmpty2_info:
         const GHC.Exts.$fIsListNonEmpty2_entry;
         const 0;
         const 4294967317;
         const Sftlu_srt;
 },
 _cftTZ() //  [R1]
         { []
         }
     {offset
       cftTZ: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cftTZ_info" {
     block_cftTZ_info:
         const _cftTZ;
         const 0;
         const 4294967326;
         const Sftlu_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:11.274176458 UTC

[section ""data" . GHC.Exts.$fIsListNonEmpty_$cfromList_closure" {
     GHC.Exts.$fIsListNonEmpty_$cfromList_closure:
         const GHC.Exts.$fIsListNonEmpty_$cfromList_info;
         const 0;
 },
 GHC.Exts.$fIsListNonEmpty_$cfromList_entry() //  [R2]
         { []
         }
     {offset
       cftUs: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cftUt; else goto cftUu;
       cftUt: // global
           R2 = R2;
           R1 = GHC.Exts.$fIsListNonEmpty_$cfromList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cftUu: // global
           I64[Sp - 8] = block_cftUl_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uftUE; else goto cftUm;
       uftUE: // global
           call _cftUl(R1) args: 0, res: 0, upd: 0;
       cftUm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Exts.$fIsListNonEmpty_$cfromList_info" {
     GHC.Exts.$fIsListNonEmpty_$cfromList_info:
         const GHC.Exts.$fIsListNonEmpty_$cfromList_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const Sftlu_srt+8;
 },
 _cftUl() //  [R1]
         { []
         }
     {offset
       cftUl: // global
           if (R1 & 7 == 1) goto cftUp; else goto cftUq;
       cftUp: // global
           R1 = GHC.Exts.$fIsListNonEmpty2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cftUq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cftUD; else goto cftUC;
       cftUD: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cftUC: // global
           _sfth4::P64 = P64[R1 + 6];
           _sfth5::P64 = P64[R1 + 14];
           I64[Hp - 16] = GHC.Base.:|_con_info;
           P64[Hp - 8] = _sfth4::P64;
           P64[Hp] = _sfth5::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cftUl_info" {
     block_cftUl_info:
         const _cftUl;
         const 0;
         const 4294967326;
         const Sftlu_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:11.281577711 UTC

[section ""data" . GHC.Exts.$fEqSpecConstrAnnotation_$c==_closure" {
     GHC.Exts.$fEqSpecConstrAnnotation_$c==_closure:
         const GHC.Exts.$fEqSpecConstrAnnotation_$c==_info;
 },
 GHC.Exts.$fEqSpecConstrAnnotation_$c==_entry() //  [R2, R3]
         { []
         }
     {offset
       cftV3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cftV4; else goto cftV5;
       cftV4: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exts.$fEqSpecConstrAnnotation_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cftV5: // global
           I64[Sp - 16] = block_cftUW_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uftVI; else goto cftUX;
       uftVI: // global
           call _cftUW(R1) args: 0, res: 0, upd: 0;
       cftUX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Exts.$fEqSpecConstrAnnotation_$c==_info" {
     GHC.Exts.$fEqSpecConstrAnnotation_$c==_info:
         const GHC.Exts.$fEqSpecConstrAnnotation_$c==_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cftUW() //  [R1]
         { []
         }
     {offset
       cftUW: // global
           _sfth7::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cftV0; else goto cftV1;
       cftV0: // global
           I64[Sp + 8] = block_cftV8_info;
           R1 = _sfth7::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uftVG; else goto cftVa;
       uftVG: // global
           call _cftV8(R1) args: 0, res: 0, upd: 0;
       cftVa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cftV1: // global
           I64[Sp + 8] = block_cftVn_info;
           R1 = _sfth7::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uftVH; else goto cftVp;
       uftVH: // global
           call _cftVn(R1) args: 0, res: 0, upd: 0;
       cftVp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cftUW_info" {
     block_cftUW_info:
         const _cftUW;
         const 1;
         const 30;
 },
 _cftV8() //  [R1]
         { []
         }
     {offset
       cftV8: // global
           if (R1 & 7 == 1) goto uftVE; else goto uftVF;
       uftVE: // global
           Sp = Sp + 8;
           call _cftVz() args: 0, res: 0, upd: 0;
       uftVF: // global
           Sp = Sp + 8;
           call _cftVv() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cftV8_info" {
     block_cftV8_info:
         const _cftV8;
         const 0;
         const 30;
 },
 _cftVn() //  [R1]
         { []
         }
     {offset
       cftVn: // global
           if (R1 & 7 == 1) goto uftVC; else goto uftVD;
       uftVC: // global
           Sp = Sp + 8;
           call _cftVv() args: 0, res: 0, upd: 0;
       uftVD: // global
           Sp = Sp + 8;
           call _cftVz() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cftVn_info" {
     block_cftVn_info:
         const _cftVn;
         const 0;
         const 30;
 },
 _cftVv() //  []
         { []
         }
     {offset
       cftVv: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cftVz() //  []
         { []
         }
     {offset
       cftVz: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:11.292802295 UTC

[section ""data" . GHC.Exts.$fEqSpecConstrAnnotation_$c/=_closure" {
     GHC.Exts.$fEqSpecConstrAnnotation_$c/=_closure:
         const GHC.Exts.$fEqSpecConstrAnnotation_$c/=_info;
 },
 GHC.Exts.$fEqSpecConstrAnnotation_$c/=_entry() //  [R2, R3]
         { []
         }
     {offset
       cftWr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cftWs; else goto cftWt;
       cftWs: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exts.$fEqSpecConstrAnnotation_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cftWt: // global
           I64[Sp - 16] = block_cftWk_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uftX6; else goto cftWl;
       uftX6: // global
           call _cftWk(R1) args: 0, res: 0, upd: 0;
       cftWl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Exts.$fEqSpecConstrAnnotation_$c/=_info" {
     GHC.Exts.$fEqSpecConstrAnnotation_$c/=_info:
         const GHC.Exts.$fEqSpecConstrAnnotation_$c/=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cftWk() //  [R1]
         { []
         }
     {offset
       cftWk: // global
           _sfthc::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cftWo; else goto cftWp;
       cftWo: // global
           I64[Sp + 8] = block_cftWw_info;
           R1 = _sfthc::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uftX4; else goto cftWy;
       uftX4: // global
           call _cftWw(R1) args: 0, res: 0, upd: 0;
       cftWy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cftWp: // global
           I64[Sp + 8] = block_cftWL_info;
           R1 = _sfthc::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uftX5; else goto cftWN;
       uftX5: // global
           call _cftWL(R1) args: 0, res: 0, upd: 0;
       cftWN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cftWk_info" {
     block_cftWk_info:
         const _cftWk;
         const 1;
         const 30;
 },
 _cftWw() //  [R1]
         { []
         }
     {offset
       cftWw: // global
           if (R1 & 7 == 1) goto uftX2; else goto uftX3;
       uftX2: // global
           Sp = Sp + 8;
           call _cftWX() args: 0, res: 0, upd: 0;
       uftX3: // global
           Sp = Sp + 8;
           call _cftWT() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cftWw_info" {
     block_cftWw_info:
         const _cftWw;
         const 0;
         const 30;
 },
 _cftWL() //  [R1]
         { []
         }
     {offset
       cftWL: // global
           if (R1 & 7 == 1) goto uftX0; else goto uftX1;
       uftX0: // global
           Sp = Sp + 8;
           call _cftWT() args: 0, res: 0, upd: 0;
       uftX1: // global
           Sp = Sp + 8;
           call _cftWX() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cftWL_info" {
     block_cftWL_info:
         const _cftWL;
         const 0;
         const 30;
 },
 _cftWT() //  []
         { []
         }
     {offset
       cftWT: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cftWX() //  []
         { []
         }
     {offset
       cftWX: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:11.302217841 UTC

[section ""data" . GHC.Exts.$fEqSpecConstrAnnotation_closure" {
     GHC.Exts.$fEqSpecConstrAnnotation_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Exts.$fEqSpecConstrAnnotation_$c==_closure+2;
         const GHC.Exts.$fEqSpecConstrAnnotation_$c/=_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:11.305586533 UTC

[section ""data" . GHC.Exts.$w$cgunfold_closure" {
     GHC.Exts.$w$cgunfold_closure:
         const GHC.Exts.$w$cgunfold_info;
         const 0;
 },
 GHC.Exts.$w$cgunfold_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cftXQ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cftXR; else goto cftXS;
       cftXR: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exts.$w$cgunfold_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cftXS: // global
           I64[Sp - 24] = block_cftXJ_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uftYh; else goto cftXK;
       uftYh: // global
           call _cftXJ(R1) args: 0, res: 0, upd: 0;
       cftXK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Exts.$w$cgunfold_info" {
     GHC.Exts.$w$cgunfold_info:
         const GHC.Exts.$w$cgunfold_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const Sftlu_srt+24;
 },
 _cftXJ() //  [R1]
         { []
         }
     {offset
       cftXJ: // global
           if (R1 & 7 == 1) goto cftXO; else goto cftXN;
       cftXO: // global
           I64[Sp] = block_cftY4_info;
           R1 = P64[R1 + 7];
           if (R1 & 7 != 0) goto uftYg; else goto cftY6;
       uftYg: // global
           call _cftY4(R1) args: 0, res: 0, upd: 0;
       cftY6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cftXN: // global
           _sfthi::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cftXV_info;
           R1 = _sfthi::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto uftYf; else goto cftXX;
       uftYf: // global
           call _cftXV(R1) args: 0, res: 0, upd: 0;
       cftXX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cftXJ_info" {
     block_cftXJ_info:
         const _cftXJ;
         const 2;
         const 4294967326;
         const Sftlu_srt+24;
 },
 _cftY4() //  [R1]
         { []
         }
     {offset
       cftY4: // global
           _sfthg::P64 = P64[Sp + 8];
           if (I64[R1 + 7] == 1) goto cftYe; else goto cftYd;
       cftYe: // global
           R2 = GHC.Exts.NoSpecConstr_closure+1;
           R1 = _sfthg::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       cftYd: // global
           R2 = GHC.Exts.ForceSpecConstr_closure+2;
           R1 = _sfthg::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cftY4_info" {
     block_cftY4_info:
         const _cftY4;
         const 130;
         const 30;
 },
 _cftXV() //  [R1]
         { []
         }
     {offset
       cftXV: // global
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call Data.Data.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cftXV_info" {
     block_cftXV_info:
         const _cftXV;
         const 0;
         const 4294967326;
         const Sftlu_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:11.315921263 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation_$cgunfold_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cgunfold_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgunfold_info;
         const 0;
 },
 GHC.Exts.$fDataSpecConstrAnnotation_$cgunfold_entry() //  [R2, R3,
                                                            R4]
         { []
         }
     {offset
       cftYI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cftYJ; else goto cftYK;
       cftYJ: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exts.$fDataSpecConstrAnnotation_$cgunfold_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cftYK: // global
           I64[Sp - 16] = block_cftYF_info;
           R1 = R4;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uftYO; else goto cftYG;
       uftYO: // global
           call _cftYF(R1) args: 0, res: 0, upd: 0;
       cftYG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Exts.$fDataSpecConstrAnnotation_$cgunfold_info" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cgunfold_info:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgunfold_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const Sftlu_srt+32;
 },
 _cftYF() //  [R1]
         { []
         }
     {offset
       cftYF: // global
           R4 = P64[R1 + 39];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Exts.$w$cgunfold_entry(R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cftYF_info" {
     block_cftYF_info:
         const _cftYF;
         const 1;
         const 4294967326;
         const Sftlu_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:11.321887364 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation_$cgfoldl_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cgfoldl_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgfoldl_info;
 },
 GHC.Exts.$fDataSpecConstrAnnotation_$cgfoldl_entry() //  [R2, R3,
                                                           R4]
         { []
         }
     {offset
       cftZ9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cftZa; else goto cftZb;
       cftZa: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exts.$fDataSpecConstrAnnotation_$cgfoldl_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cftZb: // global
           I64[Sp - 16] = block_cftZ2_info;
           R1 = R4;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uftZi; else goto cftZ3;
       uftZi: // global
           call _cftZ2(R1) args: 0, res: 0, upd: 0;
       cftZ3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Exts.$fDataSpecConstrAnnotation_$cgfoldl_info" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cgfoldl_info:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgfoldl_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cftZ2() //  [R1]
         { []
         }
     {offset
       cftZ2: // global
           _sfthC::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cftZ6; else goto cftZ7;
       cftZ6: // global
           R2 = GHC.Exts.NoSpecConstr_closure+1;
           R1 = _sfthC::P64;
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       cftZ7: // global
           R2 = GHC.Exts.ForceSpecConstr_closure+2;
           R1 = _sfthC::P64;
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cftZ2_info" {
     block_cftZ2_info:
         const _cftZ2;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:11.327094678 UTC

[section ""data" . GHC.Exts.$dmfromListN_closure" {
     GHC.Exts.$dmfromListN_closure:
         const GHC.Exts.$dmfromListN_info;
 },
 GHC.Exts.$dmfromListN_entry() //  [R2]
         { []
         }
     {offset
       cftZy: // global
           R2 = R2;
           call GHC.Exts.fromList_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Exts.$dmfromListN_info" {
     GHC.Exts.$dmfromListN_info:
         const GHC.Exts.$dmfromListN_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:11.330356089 UTC

[section ""data" . GHC.Exts.$fIsListCallStack1_closure" {
     GHC.Exts.$fIsListCallStack1_closure:
         const GHC.Exts.$fIsListCallStack1_info;
 },
 GHC.Exts.$fIsListCallStack1_entry() //  [R3]
         { []
         }
     {offset
       cftZJ: // global
           R2 = R3;
           call GHC.Stack.Types.fromCallSiteList_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Exts.$fIsListCallStack1_info" {
     GHC.Exts.$fIsListCallStack1_info:
         const GHC.Exts.$fIsListCallStack1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:11.333724321 UTC

[section ""data" . GHC.Exts.$fIsListCallStack_closure" {
     GHC.Exts.$fIsListCallStack_closure:
         const GHC.Exts.C:IsList_con_info;
         const GHC.Stack.Types.fromCallSiteList_closure+1;
         const GHC.Exts.$fIsListCallStack1_closure+2;
         const GHC.Stack.Types.getCallStack_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:11.335683907 UTC

[section ""data" . GHC.Exts.$fIsListVersion1_closure" {
     GHC.Exts.$fIsListVersion1_closure:
         const GHC.Exts.$fIsListVersion1_info;
 },
 GHC.Exts.$fIsListVersion1_entry() //  [R3]
         { []
         }
     {offset
       cftZV: // global
           R2 = R3;
           call Data.Version.makeVersion_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Exts.$fIsListVersion1_info" {
     GHC.Exts.$fIsListVersion1_info:
         const GHC.Exts.$fIsListVersion1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:11.338860861 UTC

[section ""data" . GHC.Exts.$fIsListVersion_closure" {
     GHC.Exts.$fIsListVersion_closure:
         const GHC.Exts.C:IsList_con_info;
         const Data.Version.makeVersion_closure+1;
         const GHC.Exts.$fIsListVersion1_closure+2;
         const Data.Version.versionBranch_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:11.341398811 UTC

[section ""data" . GHC.Exts.$fIsListNonEmpty_$cfromListN_closure" {
     GHC.Exts.$fIsListNonEmpty_$cfromListN_closure:
         const GHC.Exts.$fIsListNonEmpty_$cfromListN_info;
         const 0;
 },
 GHC.Exts.$fIsListNonEmpty_$cfromListN_entry() //  [R3]
         { []
         }
     {offset
       cfu07: // global
           R2 = R3;
           call GHC.Exts.$fIsListNonEmpty_$cfromList_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Exts.$fIsListNonEmpty_$cfromListN_info" {
     GHC.Exts.$fIsListNonEmpty_$cfromListN_info:
         const GHC.Exts.$fIsListNonEmpty_$cfromListN_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const Sftlu_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:11.344865434 UTC

[section ""data" . GHC.Exts.$fIsListNonEmpty_closure" {
     GHC.Exts.$fIsListNonEmpty_closure:
         const GHC.Exts.C:IsList_con_info;
         const GHC.Exts.$fIsListNonEmpty_$cfromList_closure+1;
         const GHC.Exts.$fIsListNonEmpty_$cfromListN_closure+2;
         const GHC.Exts.$fIsListNonEmpty1_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:11.34741053 UTC

[section ""data" . GHC.Exts.$fIsList[]1_closure" {
     GHC.Exts.$fIsList[]1_closure:
         const GHC.Exts.$fIsList[]1_info;
 },
 GHC.Exts.$fIsList[]1_entry() //  [R3]
         { []
         }
     {offset
       cfu0j: // global
           R2 = R3;
           call GHC.Base.id_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Exts.$fIsList[]1_info" {
     GHC.Exts.$fIsList[]1_info:
         const GHC.Exts.$fIsList[]1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:11.350410066 UTC

[section ""data" . GHC.Exts.$fIsList[]_closure" {
     GHC.Exts.$fIsList[]_closure:
         const GHC.Exts.C:IsList_con_info;
         const GHC.Base.id_closure+1;
         const GHC.Exts.$fIsList[]1_closure+2;
         const GHC.Base.id_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:11.352112821 UTC

[section ""data" . GHC.Exts.maxTupleSize_closure" {
     GHC.Exts.maxTupleSize_closure:
         const GHC.Types.I#_con_info;
         const 62;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:11.353769514 UTC

[section ""cstring" . lvl1_rftgl_bytes" {
     lvl1_rftgl_bytes:
         I8[] [71,72,67,46,69,120,116,115,46,116,104,101,58,32,101,109,112,116,121,32,108,105,115,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:11.356287096 UTC

[section ""data" . GHC.Exts.the2_closure" {
     GHC.Exts.the2_closure:
         const GHC.Exts.the2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exts.the2_entry() //  [R1]
         { []
         }
     {offset
       cfu0B: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfu0C; else goto cfu0D;
       cfu0C: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfu0D: // global
           (_cfu0w::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfu0w::I64 == 0) goto cfu0y; else goto cfu0x;
       cfu0y: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfu0x: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfu0w::I64;
           I64[Sp - 24] = block_cfu0z_info;
           R2 = lvl1_rftgl_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Exts.the2_info" {
     GHC.Exts.the2_info:
         const GHC.Exts.the2_entry;
         const 0;
         const 4294967317;
         const Sftlu_srt;
 },
 _cfu0z() //  [R1]
         { []
         }
     {offset
       cfu0z: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cfu0z_info" {
     block_cfu0z_info:
         const _cfu0z;
         const 0;
         const 4294967326;
         const Sftlu_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:11.361670117 UTC

[section ""cstring" . lvl2_rftgm_bytes" {
     lvl2_rftgm_bytes:
         I8[] [71,72,67,46,69,120,116,115,46,116,104,101,58,32,110,111,110,45,105,100,101,110,116,105,99,97,108,32,101,108,101,109,101,110,116,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:11.364039711 UTC

[section ""data" . GHC.Exts.the1_closure" {
     GHC.Exts.the1_closure:
         const GHC.Exts.the1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exts.the1_entry() //  [R1]
         { []
         }
     {offset
       cfu10: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfu11; else goto cfu12;
       cfu11: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfu12: // global
           (_cfu0V::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfu0V::I64 == 0) goto cfu0X; else goto cfu0W;
       cfu0X: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfu0W: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfu0V::I64;
           I64[Sp - 24] = block_cfu0Y_info;
           R2 = lvl2_rftgm_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Exts.the1_info" {
     GHC.Exts.the1_info:
         const GHC.Exts.the1_entry;
         const 0;
         const 4294967317;
         const Sftlu_srt;
 },
 _cfu0Y() //  [R1]
         { []
         }
     {offset
       cfu0Y: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cfu0Y_info" {
     block_cfu0Y_info:
         const _cfu0Y;
         const 0;
         const 4294967326;
         const Sftlu_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:11.371154464 UTC

[section ""data" . GHC.Exts.the_closure" {
     GHC.Exts.the_closure:
         const GHC.Exts.the_info;
         const 0;
 },
 sat_sfthS_entry() //  [R1]
         { []
         }
     {offset
       cfu1u: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfu1v; else goto cfu1w;
       cfu1v: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfu1w: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfthS_info" {
     sat_sfthS_info:
         const sat_sfthS_entry;
         const 2;
         const 18;
 },
 GHC.Exts.the_entry() //  [R2, R3]
         { []
         }
     {offset
       cfu1B: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfu1C; else goto cfu1D;
       cfu1C: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exts.the_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfu1D: // global
           I64[Sp - 16] = block_cfu1k_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ufu1V; else goto cfu1l;
       ufu1V: // global
           call _cfu1k(R1) args: 0, res: 0, upd: 0;
       cfu1l: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Exts.the_info" {
     GHC.Exts.the_info:
         const GHC.Exts.the_entry;
         const 0;
         const 30064771086;
         const 8589934607;
         const Sftlu_srt+48;
 },
 _cfu1k() //  [R1]
         { []
         }
     {offset
       cfu1k: // global
           if (R1 & 7 == 1) goto cfu1y; else goto cfu1z;
       cfu1y: // global
           R1 = GHC.Exts.the2_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cfu1z: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfu1J; else goto cfu1I;
       cfu1J: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfu1I: // global
           _sfthQ::P64 = P64[R1 + 6];
           _sfthR::P64 = P64[R1 + 14];
           I64[Hp - 24] = sat_sfthS_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = _sfthQ::P64;
           I64[Sp] = block_cfu1G_info;
           R3 = _sfthR::P64;
           R2 = Hp - 24;
           P64[Sp + 8] = _sfthQ::P64;
           call GHC.List.all_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfu1k_info" {
     block_cfu1k_info:
         const _cfu1k;
         const 1;
         const 12884901918;
         const Sftlu_srt+56;
 },
 _cfu1G() //  [R1]
         { []
         }
     {offset
       cfu1G: // global
           if (R1 & 7 == 1) goto cfu1P; else goto cfu1T;
       cfu1P: // global
           R1 = GHC.Exts.the1_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cfu1T: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfu1G_info" {
     block_cfu1G_info:
         const _cfu1G;
         const 1;
         const 4294967326;
         const Sftlu_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:11.38216201 UTC

[section ""data" . GHC.Exts.sortWith_closure" {
     GHC.Exts.sortWith_closure:
         const GHC.Exts.sortWith_info;
 },
 sat_sfti1_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfu2t: // global
           _sfthY::P64 = R3;
           _sfthX::P64 = R2;
           _sfti1::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cfu2u; else goto cfu2v;
       cfu2v: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cfu2x; else goto cfu2w;
       cfu2x: // global
           HpAlloc = 64;
           goto cfu2u;
       cfu2u: // global
           R3 = _sfthY::P64;
           R2 = _sfthX::P64;
           R1 = _sfti1::P64;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfu2w: // global
           _sfthU::P64 = P64[_sfti1::P64 + 6];
           _sfthV::P64 = P64[_sfti1::P64 + 14];
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = _sfthV::P64;
           P64[Hp - 32] = _sfthY::P64;
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sfthV::P64;
           P64[Hp] = _sfthX::P64;
           R2 = _sfthU::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 24;
           P64[Sp - 8] = Hp - 56;
           Sp = Sp - 24;
           call GHC.Classes.compare_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfti1_info" {
     sat_sfti1_info:
         const sat_sfti1_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 GHC.Exts.sortWith_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfu2y: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfu2C; else goto cfu2B;
       cfu2C: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exts.sortWith_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfu2B: // global
           I64[Hp - 16] = sat_sfti1_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R3 = R4;
           R2 = Hp - 14;
           call Data.OldList.sortBy_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Exts.sortWith_info" {
     GHC.Exts.sortWith_info:
         const GHC.Exts.sortWith_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:11.390846547 UTC

[section ""data" . GHC.Exts.groupByFB_closure" {
     GHC.Exts.groupByFB_closure:
         const GHC.Exts.groupByFB_info;
 },
 ds1_sftib_entry() //  [R1]
         { []
         }
     {offset
       cfu3a: // global
           _sftib::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cfu3b; else goto cfu3c;
       cfu3c: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfu3e; else goto cfu3d;
       cfu3e: // global
           HpAlloc = 32;
           goto cfu3b;
       cfu3b: // global
           R1 = _sftib::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfu3d: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sftib::P64;
           _sfti4::P64 = P64[_sftib::P64 + 16];
           _sfti9::P64 = P64[_sftib::P64 + 24];
           _sftia::P64 = P64[_sftib::P64 + 32];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sfti4::P64;
           P64[Hp] = _sfti9::P64;
           I64[Sp - 24] = block_cfu37_info;
           R3 = _sftia::P64;
           R2 = Hp - 24;
           Sp = Sp - 24;
           call GHC.List.$wspan_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds1_sftib_info" {
     ds1_sftib_info:
         const ds1_sftib_entry;
         const 3;
         const 15;
 },
 _cfu37() //  [R1, R2]
         { []
         }
     {offset
       cfu37: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfu3h; else goto cfu3g;
       cfu3h: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cfu3g: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cfu37_info" {
     block_cfu37_info:
         const _cfu37;
         const 0;
         const 30;
 },
 sat_sftio_entry() //  [R1]
         { []
         }
     {offset
       cfu3p: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfu3q; else goto cfu3r;
       cfu3q: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfu3r: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cfu3m_info;
           _sfti6::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _sfti6::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ufu3v; else goto cfu3n;
       ufu3v: // global
           call _cfu3m(R1) args: 0, res: 0, upd: 0;
       cfu3n: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sftio_info" {
     sat_sftio_info:
         const sat_sftio_entry;
         const 2;
         const 18;
 },
 _cfu3m() //  [R1]
         { []
         }
     {offset
       cfu3m: // global
           R2 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call groupByFBCore_sfti6_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cfu3m_info" {
     block_cfu3m_info:
         const _cfu3m;
         const 1;
         const 30;
 },
 groupByFBCore_sfti6_entry() //  [R1, R2]
         { []
         }
     {offset
       cfu3A: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cfu3B; else goto cfu3C;
       cfu3B: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfu3C: // global
           I64[Sp - 40] = block_cfu2W_info;
           _sfti6::P64 = R1;
           _sfti2::P64 = P64[R1 + 7];
           _sfti3::P64 = P64[R1 + 15];
           _sfti4::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 32] = _sfti2::P64;
           P64[Sp - 24] = _sfti3::P64;
           P64[Sp - 16] = _sfti4::P64;
           P64[Sp - 8] = _sfti6::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ufu3K; else goto cfu2X;
       ufu3K: // global
           call _cfu2W(R1) args: 0, res: 0, upd: 0;
       cfu2X: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . groupByFBCore_sfti6_info" {
     groupByFBCore_sfti6_info:
         const groupByFBCore_sfti6_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 _cfu2W() //  [R1]
         { []
         }
     {offset
       cfu2W: // global
           if (R1 & 7 == 1) goto cfu3x; else goto cfu3y;
       cfu3x: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 40;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cfu3y: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto cfu3J; else goto cfu3I;
       cfu3J: // global
           HpAlloc = 120;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfu3I: // global
           _sfti9::P64 = P64[R1 + 6];
           _sftia::P64 = P64[R1 + 14];
           I64[Hp - 112] = ds1_sftib_info;
           P64[Hp - 96] = P64[Sp + 24];
           P64[Hp - 88] = _sfti9::P64;
           P64[Hp - 80] = _sftia::P64;
           I64[Hp - 72] = sat_sftio_info;
           P64[Hp - 56] = P64[Sp + 32];
           _cfu32::P64 = Hp - 112;
           P64[Hp - 48] = _cfu32::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _cfu32::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _sfti9::P64;
           P64[Hp] = Hp - 40;
           R3 = Hp - 72;
           R2 = Hp - 14;
           R1 = P64[Sp + 8];
           Sp = Sp + 40;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfu2W_info" {
     block_cfu2W_info:
         const _cfu2W;
         const 4;
         const 30;
 },
 GHC.Exts.groupByFB_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cfu3L: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfu3P; else goto cfu3O;
       cfu3P: // global
           HpAlloc = 32;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exts.groupByFB_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfu3O: // global
           I64[Hp - 24] = groupByFBCore_sfti6_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R2 = R5;
           R1 = Hp - 23;
           call groupByFBCore_sfti6_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Exts.groupByFB_info" {
     GHC.Exts.groupByFB_info:
         const GHC.Exts.groupByFB_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:11.409953754 UTC

[section ""data" . GHC.Exts.groupWith_closure" {
     GHC.Exts.groupWith_closure:
         const GHC.Exts.groupWith_info;
 },
 $dEq_sftis_entry() //  [R1]
         { []
         }
     {offset
       cfu4v: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfu4w; else goto cfu4x;
       cfu4w: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfu4x: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.$p1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dEq_sftis_info" {
     $dEq_sftis_info:
         const $dEq_sftis_entry;
         const 1;
         const 16;
 },
 sat_sftiC_entry() //  [R1, R2]
         { []
         }
     {offset
       cfu4U: // global
           _sftiA::P64 = R2;
           _sftiC::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cfu4V; else goto cfu4W;
       cfu4W: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfu4Y; else goto cfu4X;
       cfu4Y: // global
           HpAlloc = 32;
           goto cfu4V;
       cfu4V: // global
           R2 = _sftiA::P64;
           R1 = _sftiC::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfu4X: // global
           _sftiq::P64 = P64[_sftiC::P64 + 7];
           _sftis::P64 = P64[_sftiC::P64 + 15];
           _sftiz::P64 = P64[_sftiC::P64 + 23];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sftiq::P64;
           P64[Hp] = _sftiA::P64;
           R2 = _sftis::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sftiz::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sftiC_info" {
     sat_sftiC_info:
         const sat_sftiC_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 ds1_sftiy_entry() //  [R1]
         { []
         }
     {offset
       cfu52: // global
           _sftiy::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cfu53; else goto cfu54;
       cfu54: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cfu56; else goto cfu55;
       cfu56: // global
           HpAlloc = 64;
           goto cfu53;
       cfu53: // global
           R1 = _sftiy::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfu55: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sftiy::P64;
           _sftiq::P64 = P64[_sftiy::P64 + 16];
           _sftis::P64 = P64[_sftiy::P64 + 24];
           _sftiw::P64 = P64[_sftiy::P64 + 32];
           _sftix::P64 = P64[_sftiy::P64 + 40];
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = _sftiq::P64;
           P64[Hp - 32] = _sftiw::P64;
           I64[Hp - 24] = sat_sftiC_info;
           P64[Hp - 16] = _sftiq::P64;
           P64[Hp - 8] = _sftis::P64;
           P64[Hp] = Hp - 56;
           I64[Sp - 24] = block_cfu4Z_info;
           R3 = _sftix::P64;
           R2 = Hp - 23;
           Sp = Sp - 24;
           call GHC.List.$wspan_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds1_sftiy_info" {
     ds1_sftiy_info:
         const ds1_sftiy_entry;
         const 4;
         const 15;
 },
 _cfu4Z() //  [R1, R2]
         { []
         }
     {offset
       cfu4Z: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfu59; else goto cfu58;
       cfu59: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cfu58: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cfu4Z_info" {
     block_cfu4Z_info:
         const _cfu4Z;
         const 0;
         const 30;
 },
 sat_sftiO_entry() //  [R1]
         { []
         }
     {offset
       cfu5h: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfu5i; else goto cfu5j;
       cfu5i: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfu5j: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cfu5e_info;
           _sftit::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _sftit::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ufu5n; else goto cfu5f;
       ufu5n: // global
           call _cfu5e(R1) args: 0, res: 0, upd: 0;
       cfu5f: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sftiO_info" {
     sat_sftiO_info:
         const sat_sftiO_entry;
         const 2;
         const 18;
 },
 _cfu5e() //  [R1]
         { []
         }
     {offset
       cfu5e: // global
           R2 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call groupByFBCore_sftit_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cfu5e_info" {
     block_cfu5e_info:
         const _cfu5e;
         const 1;
         const 30;
 },
 groupByFBCore_sftit_entry() //  [R1, R2]
         { []
         }
     {offset
       cfu5s: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfu5t; else goto cfu5u;
       cfu5t: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfu5u: // global
           I64[Sp - 32] = block_cfu4D_info;
           _sftit::P64 = R1;
           _sftiq::P64 = P64[R1 + 7];
           _sftis::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 24] = _sftiq::P64;
           P64[Sp - 16] = _sftis::P64;
           P64[Sp - 8] = _sftit::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ufu5D; else goto cfu4E;
       ufu5D: // global
           call _cfu4D(R1) args: 0, res: 0, upd: 0;
       cfu4E: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . groupByFBCore_sftit_info" {
     groupByFBCore_sftit_info:
         const groupByFBCore_sftit_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cfu4D() //  [R1]
         { []
         }
     {offset
       cfu4D: // global
           if (R1 & 7 == 1) goto cfu5p; else goto cfu5q;
       cfu5p: // global
           R1 = []_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cfu5q: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto cfu5C; else goto cfu5B;
       cfu5C: // global
           HpAlloc = 152;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfu5B: // global
           _sftiw::P64 = P64[R1 + 6];
           _sftix::P64 = P64[R1 + 14];
           I64[Hp - 144] = ds1_sftiy_info;
           P64[Hp - 128] = P64[Sp + 8];
           P64[Hp - 120] = P64[Sp + 16];
           P64[Hp - 112] = _sftiw::P64;
           P64[Hp - 104] = _sftix::P64;
           I64[Hp - 96] = sat_sftiO_info;
           P64[Hp - 80] = P64[Sp + 24];
           _cfu4J::P64 = Hp - 144;
           P64[Hp - 72] = _cfu4J::P64;
           I64[Hp - 64] = stg_sel_0_upd_info;
           P64[Hp - 48] = _cfu4J::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = _sftiw::P64;
           P64[Hp - 24] = Hp - 64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 38;
           P64[Hp] = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfu4D_info" {
     block_cfu4D_info:
         const _cfu4D;
         const 3;
         const 30;
 },
 GHC.Exts.groupWith_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfu5G: // global
           _sftir::P64 = R4;
           _sftiq::P64 = R3;
           _sftip::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto cfu5H; else goto cfu5I;
       cfu5I: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfu5K; else goto cfu5J;
       cfu5K: // global
           HpAlloc = 48;
           goto cfu5H;
       cfu5H: // global
           R4 = _sftir::P64;
           R3 = _sftiq::P64;
           R2 = _sftip::P64;
           R1 = GHC.Exts.groupWith_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfu5J: // global
           I64[Hp - 40] = $dEq_sftis_info;
           P64[Hp - 24] = _sftip::P64;
           I64[Hp - 16] = groupByFBCore_sftit_info;
           P64[Hp - 8] = _sftiq::P64;
           P64[Hp] = Hp - 40;
           I64[Sp - 16] = block_cfu5E_info;
           R4 = _sftir::P64;
           R3 = _sftiq::P64;
           R2 = _sftip::P64;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 16;
           call GHC.Exts.sortWith_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Exts.groupWith_info" {
     GHC.Exts.groupWith_info:
         const GHC.Exts.groupWith_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cfu5E() //  [R1]
         { []
         }
     {offset
       cfu5E: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call groupByFBCore_sftit_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfu5E_info" {
     block_cfu5E_info:
         const _cfu5E;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:11.43057497 UTC

[section ""data" . GHC.Exts.traceEvent_closure" {
     GHC.Exts.traceEvent_closure:
         const GHC.Exts.traceEvent_info;
         const 0;
 },
 GHC.Exts.traceEvent_entry() //  [R2]
         { []
         }
     {offset
       cfu6K: // global
           R2 = R2;
           call Debug.Trace.traceEventIO1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Exts.traceEvent_info" {
     GHC.Exts.traceEvent_info:
         const GHC.Exts.traceEvent_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const Sftlu_srt+72;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:11.433775027 UTC

[section ""cstring" . GHC.Exts.$fDataSpecConstrAnnotation7_bytes" {
     GHC.Exts.$fDataSpecConstrAnnotation7_bytes:
         I8[] [83,112,101,99,67,111,110,115,116,114,65,110,110,111,116,97,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:11.435945557 UTC

[section ""data" . $tSpecConstrAnnotation1_rftgn_closure" {
     $tSpecConstrAnnotation1_rftgn_closure:
         const $tSpecConstrAnnotation1_rftgn_info;
         const 0;
         const 0;
         const 0;
 },
 $tSpecConstrAnnotation1_rftgn_entry() //  [R1]
         { []
         }
     {offset
       cfu6Y: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfu6Z; else goto cfu70;
       cfu6Z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfu70: // global
           (_cfu6V::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfu6V::I64 == 0) goto cfu6X; else goto cfu6W;
       cfu6X: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfu6W: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfu6V::I64;
           R2 = GHC.Exts.$fDataSpecConstrAnnotation7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $tSpecConstrAnnotation1_rftgn_info" {
     $tSpecConstrAnnotation1_rftgn_info:
         const $tSpecConstrAnnotation1_rftgn_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:11.439461798 UTC

[section ""cstring" . w1_rftgo_bytes" {
     w1_rftgo_bytes:
         I8[] [70,111,114,99,101,83,112,101,99,67,111,110,115,116,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:11.441531694 UTC

[section ""data" . w2_rftgp_closure" {
     w2_rftgp_closure:
         const w2_rftgp_info;
         const 0;
         const 0;
         const 0;
 },
 w2_rftgp_entry() //  [R1]
         { []
         }
     {offset
       cfu7f: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfu7g; else goto cfu7h;
       cfu7g: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfu7h: // global
           (_cfu7c::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfu7c::I64 == 0) goto cfu7e; else goto cfu7d;
       cfu7e: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfu7d: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfu7c::I64;
           R2 = w1_rftgo_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . w2_rftgp_info" {
     w2_rftgp_info:
         const w2_rftgp_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:11.444942404 UTC

[section ""cstring" . w3_rftgq_bytes" {
     w3_rftgq_bytes:
         I8[] [78,111,83,112,101,99,67,111,110,115,116,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:11.44745571 UTC

[section ""data" . w4_rftgr_closure" {
     w4_rftgr_closure:
         const w4_rftgr_info;
         const 0;
         const 0;
         const 0;
 },
 w4_rftgr_entry() //  [R1]
         { []
         }
     {offset
       cfu7w: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfu7x; else goto cfu7y;
       cfu7x: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfu7y: // global
           (_cfu7t::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfu7t::I64 == 0) goto cfu7v; else goto cfu7u;
       cfu7v: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfu7u: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfu7t::I64;
           R2 = w3_rftgq_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . w4_rftgr_info" {
     w4_rftgr_info:
         const w4_rftgr_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:11.453055254 UTC

[section ""data" . go61_rftgs_closure" {
     go61_rftgs_closure:
         const go61_rftgs_info;
         const 0;
 },
 go61_rftgs_entry() //  [R2, R3]
         { []
         }
     {offset
       cfu7R: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfu7S; else goto ufu8v;
       cfu7S: // global
           R3 = R3;
           R2 = R2;
           R1 = go61_rftgs_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ufu8v: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _cfu7H() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . go61_rftgs_info" {
     go61_rftgs_info:
         const go61_rftgs_entry;
         const 0;
         const 30064771086;
         const 8589934607;
         const Sftlu_srt+80;
 },
 _cfu7H() //  []
         { []
         }
     {offset
       cfu7H: // global
           _sftiQ::P64 = P64[Sp];
           I64[Sp] = block_cfu7K_info;
           R1 = _sftiQ::P64;
           if (R1 & 7 != 0) goto ufu8z; else goto cfu7L;
       ufu8z: // global
           call _cfu7K(R1) args: 0, res: 0, upd: 0;
       cfu7L: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cfu7K() //  [R1]
         { []
         }
     {offset
       cfu7K: // global
           if (R1 & 7 == 1) goto ufu8w; else goto cfu7P;
       ufu8w: // global
           Sp = Sp + 16;
           call _cfu87() args: 0, res: 0, upd: 0;
       cfu7P: // global
           I64[Sp - 8] = block_cfu7Z_info;
           _sftiT::P64 = P64[R1 + 6];
           _sftiU::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp] = _sftiU::P64;
           P64[Sp + 8] = _sftiT::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufu8A; else goto cfu81;
       ufu8A: // global
           call _cfu7Z(R1) args: 0, res: 0, upd: 0;
       cfu81: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfu7K_info" {
     block_cfu7K_info:
         const _cfu7K;
         const 1;
         const 12884901918;
         const Sftlu_srt+80;
 },
 _cfu7Z() //  [R1]
         { []
         }
     {offset
       cfu7Z: // global
           if (R1 & 7 == 1) goto ufu8x; else goto cfu8c;
       ufu8x: // global
           Sp = Sp + 24;
           call _cfu87() args: 0, res: 0, upd: 0;
       cfu8c: // global
           I64[Sp - 8] = block_cfu8a_info;
           _sftiW::P64 = P64[R1 + 6];
           _sftiX::P64 = P64[R1 + 14];
           R1 = P64[Sp + 16];
           P64[Sp] = _sftiX::P64;
           P64[Sp + 16] = _sftiW::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufu8D; else goto cfu8d;
       ufu8D: // global
           call _cfu8a(R1) args: 0, res: 0, upd: 0;
       cfu8d: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfu7Z_info" {
     block_cfu7Z_info:
         const _cfu7Z;
         const 2;
         const 12884901918;
         const Sftlu_srt+80;
 },
 _cfu87() //  []
         { []
         }
     {offset
       cfu87: // global
           R1 = GHC.List.badHead_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cfu8a() //  [R1]
         { []
         }
     {offset
       cfu8a: // global
           I64[Sp] = block_cfu8h_info;
           R3 = w2_rftgp_closure;
           R2 = P64[R1 + 15];
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfu8a_info" {
     block_cfu8a_info:
         const _cfu8a;
         const 3;
         const 12884901918;
         const Sftlu_srt+80;
 },
 _cfu8h() //  [R1]
         { []
         }
     {offset
       cfu8h: // global
           if (R1 & 7 == 1) goto cfu8o; else goto cfu8s;
       cfu8o: // global
           P64[Sp + 16] = P64[Sp + 16];
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call _cfu7H() args: 0, res: 0, upd: 0;
       cfu8s: // global
           R1 = P64[Sp + 24] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfu8h_info" {
     block_cfu8h_info:
         const _cfu8h;
         const 3;
         const 12884901918;
         const Sftlu_srt+80;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:11.467817227 UTC

[section ""data" . go1_rftgt_closure" {
     go1_rftgt_closure:
         const go1_rftgt_info;
         const 0;
 },
 go1_rftgt_entry() //  [R2, R3]
         { []
         }
     {offset
       cfu9p: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfu9q; else goto ufua3;
       cfu9q: // global
           R3 = R3;
           R2 = R2;
           R1 = go1_rftgt_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ufua3: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _cfu9f() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . go1_rftgt_info" {
     go1_rftgt_info:
         const go1_rftgt_entry;
         const 0;
         const 107374182414;
         const 8589934607;
         const Sftlu_srt+80;
 },
 _cfu9f() //  []
         { []
         }
     {offset
       cfu9f: // global
           _sftj5::P64 = P64[Sp];
           I64[Sp] = block_cfu9i_info;
           R1 = _sftj5::P64;
           if (R1 & 7 != 0) goto ufua7; else goto cfu9j;
       ufua7: // global
           call _cfu9i(R1) args: 0, res: 0, upd: 0;
       cfu9j: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cfu9i() //  [R1]
         { []
         }
     {offset
       cfu9i: // global
           if (R1 & 7 == 1) goto ufua4; else goto cfu9n;
       ufua4: // global
           Sp = Sp + 16;
           call _cfu9F() args: 0, res: 0, upd: 0;
       cfu9n: // global
           I64[Sp - 8] = block_cfu9x_info;
           _sftj8::P64 = P64[R1 + 6];
           _sftj9::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp] = _sftj9::P64;
           P64[Sp + 8] = _sftj8::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufua8; else goto cfu9z;
       ufua8: // global
           call _cfu9x(R1) args: 0, res: 0, upd: 0;
       cfu9z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfu9i_info" {
     block_cfu9i_info:
         const _cfu9i;
         const 1;
         const 38654705694;
         const Sftlu_srt+80;
 },
 _cfu9x() //  [R1]
         { []
         }
     {offset
       cfu9x: // global
           if (R1 & 7 == 1) goto ufua5; else goto cfu9K;
       ufua5: // global
           Sp = Sp + 24;
           call _cfu9F() args: 0, res: 0, upd: 0;
       cfu9K: // global
           I64[Sp - 8] = block_cfu9I_info;
           _sftjb::P64 = P64[R1 + 6];
           _sftjc::P64 = P64[R1 + 14];
           R1 = P64[Sp + 16];
           P64[Sp] = _sftjc::P64;
           P64[Sp + 16] = _sftjb::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufuab; else goto cfu9L;
       ufuab: // global
           call _cfu9I(R1) args: 0, res: 0, upd: 0;
       cfu9L: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfu9x_info" {
     block_cfu9x_info:
         const _cfu9x;
         const 2;
         const 38654705694;
         const Sftlu_srt+80;
 },
 _cfu9F() //  []
         { []
         }
     {offset
       cfu9F: // global
           R1 = GHC.List.badHead_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cfu9I() //  [R1]
         { []
         }
     {offset
       cfu9I: // global
           I64[Sp] = block_cfu9P_info;
           R3 = w4_rftgr_closure;
           R2 = P64[R1 + 15];
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfu9I_info" {
     block_cfu9I_info:
         const _cfu9I;
         const 3;
         const 38654705694;
         const Sftlu_srt+80;
 },
 _cfu9P() //  [R1]
         { []
         }
     {offset
       cfu9P: // global
           if (R1 & 7 == 1) goto cfu9W; else goto cfua0;
       cfu9W: // global
           P64[Sp + 16] = P64[Sp + 16];
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call _cfu9f() args: 0, res: 0, upd: 0;
       cfua0: // global
           R1 = P64[Sp + 24] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfu9P_info" {
     block_cfu9P_info:
         const _cfu9P;
         const 3;
         const 38654705694;
         const Sftlu_srt+80;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:11.480821267 UTC

[section ""data" . $cForceSpecConstr1_rftgu_closure" {
     $cForceSpecConstr1_rftgu_closure:
         const Data.Data.AlgConstr_con_info;
         const $cForceSpecConstr2_rftgA_closure;
         const 0;
 },
 section ""data" . $cNoSpecConstr1_rftgv_closure" {
     $cNoSpecConstr1_rftgv_closure:
         const Data.Data.AlgConstr_con_info;
         const $cNoSpecConstr2_rftgz_closure;
         const 0;
 },
 section ""data" . GHC.Exts.$cForceSpecConstr_closure" {
     GHC.Exts.$cForceSpecConstr_closure:
         const Data.Data.Constr_con_info;
         const $cForceSpecConstr1_rftgu_closure+1;
         const w2_rftgp_closure;
         const GHC.Types.[]_closure+1;
         const Data.Data.Prefix_closure+1;
         const GHC.Exts.$tSpecConstrAnnotation_closure+1;
         const 0;
 },
 section ""data" . $tSpecConstrAnnotation2_rftgw_closure" {
     $tSpecConstrAnnotation2_rftgw_closure:
         const :_con_info;
         const GHC.Exts.$cForceSpecConstr_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 },
 section ""data" . $tSpecConstrAnnotation3_rftgx_closure" {
     $tSpecConstrAnnotation3_rftgx_closure:
         const :_con_info;
         const GHC.Exts.$cNoSpecConstr_closure+1;
         const $tSpecConstrAnnotation2_rftgw_closure+2;
         const 0;
 },
 section ""data" . $tSpecConstrAnnotation4_rftgy_closure" {
     $tSpecConstrAnnotation4_rftgy_closure:
         const Data.Data.AlgRep_con_info;
         const $tSpecConstrAnnotation3_rftgx_closure+2;
         const 0;
 },
 section ""data" . GHC.Exts.$tSpecConstrAnnotation_closure" {
     GHC.Exts.$tSpecConstrAnnotation_closure:
         const Data.Data.DataType_con_info;
         const $tSpecConstrAnnotation1_rftgn_closure;
         const $tSpecConstrAnnotation4_rftgy_closure+1;
         const 0;
 },
 section ""data" . GHC.Exts.$cNoSpecConstr_closure" {
     GHC.Exts.$cNoSpecConstr_closure:
         const Data.Data.Constr_con_info;
         const $cNoSpecConstr1_rftgv_closure+1;
         const w4_rftgr_closure;
         const GHC.Types.[]_closure+1;
         const Data.Data.Prefix_closure+1;
         const GHC.Exts.$tSpecConstrAnnotation_closure+1;
         const 0;
 },
 section ""data" . $cNoSpecConstr2_rftgz_closure" {
     $cNoSpecConstr2_rftgz_closure:
         const $cNoSpecConstr2_rftgz_info;
         const 0;
         const 0;
         const 0;
 },
 $cNoSpecConstr2_rftgz_entry() //  [R1]
         { []
         }
     {offset
       cfuaS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfuaT; else goto cfuaU;
       cfuaT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfuaU: // global
           (_cfuaP::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfuaP::I64 == 0) goto cfuaR; else goto cfuaQ;
       cfuaR: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfuaQ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfuaP::I64;
           R3 = Data.Data.mkConstr1_closure;
           R2 = $tSpecConstrAnnotation3_rftgx_closure+2;
           Sp = Sp - 16;
           call go1_rftgt_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $cNoSpecConstr2_rftgz_info" {
     $cNoSpecConstr2_rftgz_info:
         const $cNoSpecConstr2_rftgz_entry;
         const 0;
         const 30064771093;
         const Sftlu_srt+112;
 },
 section ""data" . $cForceSpecConstr2_rftgA_closure" {
     $cForceSpecConstr2_rftgA_closure:
         const $cForceSpecConstr2_rftgA_info;
         const 0;
         const 0;
         const 0;
 },
 $cForceSpecConstr2_rftgA_entry() //  [R1]
         { []
         }
     {offset
       cfub1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfub2; else goto cfub3;
       cfub2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfub3: // global
           (_cfuaY::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfuaY::I64 == 0) goto cfub0; else goto cfuaZ;
       cfub0: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfuaZ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfuaY::I64;
           R3 = Data.Data.mkConstr1_closure;
           R2 = $tSpecConstrAnnotation3_rftgx_closure+2;
           Sp = Sp - 16;
           call go61_rftgs_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $cForceSpecConstr2_rftgA_info" {
     $cForceSpecConstr2_rftgA_info:
         const $cForceSpecConstr2_rftgA_entry;
         const 0;
         const 107374182421;
         const Sftlu_srt+96;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:11.492990805 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation_$cdataTypeOf_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cdataTypeOf_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cdataTypeOf_info;
         const 0;
 },
 GHC.Exts.$fDataSpecConstrAnnotation_$cdataTypeOf_entry() //  []
         { []
         }
     {offset
       cfubu: // global
           R1 = GHC.Exts.$tSpecConstrAnnotation_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Exts.$fDataSpecConstrAnnotation_$cdataTypeOf_info" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cdataTypeOf_info:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cdataTypeOf_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const Sftlu_srt+136;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:11.497223017 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation_$ctoConstr_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation_$ctoConstr_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation_$ctoConstr_info;
         const 0;
 },
 GHC.Exts.$fDataSpecConstrAnnotation_$ctoConstr_entry() //  [R2]
         { []
         }
     {offset
       cfubN: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfubO; else goto cfubP;
       cfubO: // global
           R2 = R2;
           R1 = GHC.Exts.$fDataSpecConstrAnnotation_$ctoConstr_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfubP: // global
           I64[Sp - 8] = block_cfubG_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufubW; else goto cfubH;
       ufubW: // global
           call _cfubG(R1) args: 0, res: 0, upd: 0;
       cfubH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Exts.$fDataSpecConstrAnnotation_$ctoConstr_info" {
     GHC.Exts.$fDataSpecConstrAnnotation_$ctoConstr_info:
         const GHC.Exts.$fDataSpecConstrAnnotation_$ctoConstr_entry;
         const 0;
         const 30064771086;
         const 4294967301;
         const Sftlu_srt+144;
 },
 _cfubG() //  [R1]
         { []
         }
     {offset
       cfubG: // global
           if (R1 & 7 == 1) goto cfubK; else goto cfubL;
       cfubK: // global
           R1 = GHC.Exts.$cNoSpecConstr_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cfubL: // global
           R1 = GHC.Exts.$cForceSpecConstr_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfubG_info" {
     block_cfubG_info:
         const _cfubG;
         const 0;
         const 12884901918;
         const Sftlu_srt+144;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:11.502533201 UTC

[section ""cstring" . GHC.Exts.$trModule4_bytes" {
     GHC.Exts.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:11.504176634 UTC

[section ""data" . GHC.Exts.$trModule3_closure" {
     GHC.Exts.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exts.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:11.505910084 UTC

[section ""cstring" . GHC.Exts.$trModule2_bytes" {
     GHC.Exts.$trModule2_bytes:
         I8[] [71,72,67,46,69,120,116,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:11.50755063 UTC

[section ""data" . GHC.Exts.$trModule1_closure" {
     GHC.Exts.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exts.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:11.509271676 UTC

[section ""data" . GHC.Exts.$trModule_closure" {
     GHC.Exts.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Exts.$trModule3_closure+1;
         const GHC.Exts.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:11.511119915 UTC

[section ""data" . $krep_rftgB_closure" {
     $krep_rftgB_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcConstraint_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:11.512830939 UTC

[section ""data" . GHC.Exts.$tcIsList1_closure" {
     GHC.Exts.$tcIsList1_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Types.krep$*_closure;
         const $krep_rftgB_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:11.515028322 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation6_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation6_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exts.$fDataSpecConstrAnnotation7_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:11.516742939 UTC

[section ""data" . GHC.Exts.$tcSpecConstrAnnotation_closure" {
     GHC.Exts.$tcSpecConstrAnnotation_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Exts.$trModule_closure+1;
         const GHC.Exts.$fDataSpecConstrAnnotation6_closure+1;
         const GHC.Types.krep$*_closure;
         const 8217012571387563927;
         const 8545973142114271769;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:11.518617496 UTC

[section ""data" . GHC.Exts.$tc'ForceSpecConstr1_closure" {
     GHC.Exts.$tc'ForceSpecConstr1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Exts.$tcSpecConstrAnnotation_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:11.520935032 UTC

[section ""cstring" . GHC.Exts.$tc'NoSpecConstr2_bytes" {
     GHC.Exts.$tc'NoSpecConstr2_bytes:
         I8[] [39,78,111,83,112,101,99,67,111,110,115,116,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:11.522786659 UTC

[section ""data" . GHC.Exts.$tc'NoSpecConstr1_closure" {
     GHC.Exts.$tc'NoSpecConstr1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exts.$tc'NoSpecConstr2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:11.524627292 UTC

[section ""data" . GHC.Exts.$tc'NoSpecConstr_closure" {
     GHC.Exts.$tc'NoSpecConstr_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Exts.$trModule_closure+1;
         const GHC.Exts.$tc'NoSpecConstr1_closure+1;
         const GHC.Exts.$tc'ForceSpecConstr1_closure+1;
         const 18402820579108170608;
         const 14598374581444186552;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:11.526932904 UTC

[section ""cstring" . GHC.Exts.$tc'ForceSpecConstr3_bytes" {
     GHC.Exts.$tc'ForceSpecConstr3_bytes:
         I8[] [39,70,111,114,99,101,83,112,101,99,67,111,110,115,116,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:11.528637079 UTC

[section ""data" . GHC.Exts.$tc'ForceSpecConstr2_closure" {
     GHC.Exts.$tc'ForceSpecConstr2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exts.$tc'ForceSpecConstr3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:11.530421489 UTC

[section ""data" . GHC.Exts.$tc'ForceSpecConstr_closure" {
     GHC.Exts.$tc'ForceSpecConstr_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Exts.$trModule_closure+1;
         const GHC.Exts.$tc'ForceSpecConstr2_closure+1;
         const GHC.Exts.$tc'ForceSpecConstr1_closure+1;
         const 13715005538542947299;
         const 3802030838304098377;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:11.533804185 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation5_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation5_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exts.$fDataSpecConstrAnnotation5_entry() //  [R1]
         { []
         }
     {offset
       cfucB: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cfucC; else goto cfucD;
       cfucC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfucD: // global
           (_cfuct::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfuct::I64 == 0) goto cfucv; else goto cfucu;
       cfucv: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfucu: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfuct::I64;
           I64[Sp - 24] = block_cfucw_info;
           R6 = 0;
           R5 = GHC.Exts.$fDataSpecConstrAnnotation6_closure+1;
           R4 = GHC.Exts.$trModule_closure+1;
           R3 = 8545973142114271769;
           R2 = 8217012571387563927;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Exts.$fDataSpecConstrAnnotation5_info" {
     GHC.Exts.$fDataSpecConstrAnnotation5_info:
         const GHC.Exts.$fDataSpecConstrAnnotation5_entry;
         const 0;
         const 4294967317;
         const Sftlu_srt+168;
 },
 _cfucw() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cfucw: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _cfucx() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cfucw_info" {
     block_cfucw_info:
         const _cfucw;
         const 0;
         const 30;
 },
 _cfucx() //  []
         { []
         }
     {offset
       cfucx: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfucG; else goto cfucF;
       cfucG: // global
           HpAlloc = 48;
           I64[Sp] = block_cfucx_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       cfucF: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cfucx_info" {
     block_cfucx_info:
         const _cfucx;
         const 1093;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:11.541481191 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation_$cdataCast1_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cdataCast1_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cdataCast1_info;
 },
 GHC.Exts.$fDataSpecConstrAnnotation_$cdataCast1_entry() //  []
         { []
         }
     {offset
       cfud6: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Exts.$fDataSpecConstrAnnotation_$cdataCast1_info" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cdataCast1_info:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cdataCast1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:11.54462837 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation2_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation2_closure:
         const (,)_con_info;
         const GHC.Exts.NoSpecConstr_closure+1;
         const GHC.Types.False_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:11.546364489 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation1_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation1_closure:
         const (,)_con_info;
         const GHC.Exts.ForceSpecConstr_closure+2;
         const GHC.Types.False_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:11.551687786 UTC

[section ""data" . GHC.Exts.$w$cgmapMp_closure" {
     GHC.Exts.$w$cgmapMp_closure:
         const GHC.Exts.$w$cgmapMp_info;
 },
 lvl3_sftjx_entry() //  [R1]
         { []
         }
     {offset
       cfudo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfudp; else goto cfudq;
       cfudp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfudq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mzero_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl3_sftjx_info" {
     lvl3_sftjx_info:
         const lvl3_sftjx_entry;
         const 1;
         const 16;
 },
 sat_sftjG_entry() //  [R1, R2]
         { []
         }
     {offset
       cfudD: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfudE; else goto cfudF;
       cfudE: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfudF: // global
           I64[Sp - 24] = block_cfudA_info;
           _sftjx::P64 = P64[R1 + 7];
           _sftjy::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _sftjx::P64;
           P64[Sp - 8] = _sftjy::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufudX; else goto cfudB;
       ufudX: // global
           call _cfudA(R1) args: 0, res: 0, upd: 0;
       cfudB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sftjG_info" {
     sat_sftjG_info:
         const sat_sftjG_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cfudA() //  [R1]
         { []
         }
     {offset
       cfudA: // global
           I64[Sp - 8] = block_cfudI_info;
           _sftjD::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sftjD::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufudW; else goto cfudK;
       ufudW: // global
           call _cfudI(R1) args: 0, res: 0, upd: 0;
       cfudK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfudA_info" {
     block_cfudA_info:
         const _cfudA;
         const 2;
         const 30;
 },
 _cfudI() //  [R1]
         { []
         }
     {offset
       cfudI: // global
           if (R1 & 7 == 1) goto cfudQ; else goto cfudU;
       cfudQ: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cfudU: // global
           R2 = P64[Sp + 24];
           I64[Sp + 16] = stg_ap_p_info;
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfudI_info" {
     block_cfudI_info:
         const _cfudI;
         const 3;
         const 30;
 },
 sat_sftjA_entry() //  [R1]
         { []
         }
     {offset
       cfue9: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfuea; else goto cfueb;
       cfuea: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfueb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cfue2_info;
           _sftjy::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _sftjy::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ufuei; else goto cfue3;
       ufuei: // global
           call _cfue2(R1) args: 0, res: 0, upd: 0;
       cfue3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sftjA_info" {
     sat_sftjA_info:
         const sat_sftjA_entry;
         const 2;
         const 18;
 },
 _cfue2() //  [R1]
         { []
         }
     {offset
       cfue2: // global
           _sftjy::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cfue6; else goto cfue7;
       cfue6: // global
           R2 = _sftjy::P64;
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = GHC.Exts.$fDataSpecConstrAnnotation2_closure+1;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
       cfue7: // global
           R2 = _sftjy::P64;
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = GHC.Exts.$fDataSpecConstrAnnotation1_closure+1;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cfue2_info" {
     block_cfue2_info:
         const _cfue2;
         const 1;
         const 30;
 },
 GHC.Exts.$w$cgmapMp_entry() //  [R2, R3]
         { []
         }
     {offset
       cfuej: // global
           _sftjw::P64 = R3;
           _sftjv::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cfuek; else goto cfuel;
       cfuel: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfuen; else goto cfuem;
       cfuen: // global
           HpAlloc = 24;
           goto cfuek;
       cfuek: // global
           R3 = _sftjw::P64;
           R2 = _sftjv::P64;
           R1 = GHC.Exts.$w$cgmapMp_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfuem: // global
           I64[Hp - 16] = lvl3_sftjx_info;
           P64[Hp] = _sftjv::P64;
           I64[Sp - 24] = block_cfudr_info;
           R2 = _sftjv::P64;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = _sftjw::P64;
           Sp = Sp - 24;
           call GHC.Base.$p2MonadPlus_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Exts.$w$cgmapMp_info" {
     GHC.Exts.$w$cgmapMp_info:
         const GHC.Exts.$w$cgmapMp_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cfudr() //  [R1]
         { []
         }
     {offset
       cfudr: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfueq; else goto cfuep;
       cfueq: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfuep: // global
           I64[Hp - 48] = sat_sftjG_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = R1;
           I64[Hp - 24] = sat_sftjA_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 8] = Hp - 24;
           P64[Sp + 16] = Hp - 47;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfudr_info" {
     block_cfudr_info:
         const _cfudr;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:11.568042611 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation_$cgmapMp_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cgmapMp_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapMp_info;
 },
 GHC.Exts.$fDataSpecConstrAnnotation_$cgmapMp_entry() //  [R2, R4]
         { []
         }
     {offset
       cfufb: // global
           R3 = R4;
           R2 = R2;
           call GHC.Exts.$w$cgmapMp_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Exts.$fDataSpecConstrAnnotation_$cgmapMp_info" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cgmapMp_info:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapMp_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:11.572024985 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation_$cgmapM_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cgmapM_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapM_info;
 },
 GHC.Exts.$fDataSpecConstrAnnotation_$cgmapM_entry() //  [R2, R3,
                                                          R4]
         { []
         }
     {offset
       cfuft: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfufu; else goto cfufv;
       cfufu: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exts.$fDataSpecConstrAnnotation_$cgmapM_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfufv: // global
           I64[Sp - 16] = block_cfufm_info;
           R1 = R4;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ufufC; else goto cfufn;
       ufufC: // global
           call _cfufm(R1) args: 0, res: 0, upd: 0;
       cfufn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Exts.$fDataSpecConstrAnnotation_$cgmapM_info" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cgmapM_info:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapM_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cfufm() //  [R1]
         { []
         }
     {offset
       cfufm: // global
           _sftjK::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cfufq; else goto cfufr;
       cfufq: // global
           R2 = _sftjK::P64;
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = GHC.Exts.NoSpecConstr_closure+1;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
       cfufr: // global
           R2 = _sftjK::P64;
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = GHC.Exts.ForceSpecConstr_closure+2;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfufm_info" {
     block_cfufm_info:
         const _cfufm;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:11.578202882 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQi_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQi_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQi_info;
         const 0;
 },
 GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQi_entry() //  [R2, R3,
                                                           R4]
         { []
         }
     {offset
       cfufV: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfufW; else goto cfufX;
       cfufW: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQi_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfufX: // global
           I64[Sp - 8] = block_cfufS_info;
           R1 = R4;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufug1; else goto cfufT;
       ufug1: // global
           call _cfufS() args: 0, res: 0, upd: 0;
       cfufT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQi_info" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQi_info:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQi_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const Sftlu_srt+176;
 },
 _cfufS() //  []
         { []
         }
     {offset
       cfufS: // global
           R1 = Data.Maybe.fromJust1_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfufS_info" {
     block_cfufS_info:
         const _cfufS;
         const 0;
         const 4294967326;
         const Sftlu_srt+176;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:11.583824387 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQr_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQr_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQr_info;
 },
 GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQr_entry() //  [R2, R3,
                                                           R4, R5]
         { []
         }
     {offset
       cfugi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfugj; else goto cfugk;
       cfugj: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQr_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfugk: // global
           I64[Sp - 16] = block_cfugf_info;
           R1 = R5;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ufugo; else goto cfugg;
       ufugo: // global
           call _cfugf() args: 0, res: 0, upd: 0;
       cfugg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQr_info" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQr_info:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQr_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cfugf() //  []
         { []
         }
     {offset
       cfugf: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfugf_info" {
     block_cfugf_info:
         const _cfugf;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:11.58935963 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQ_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQ_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQ_info;
 },
 GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQ_entry() //  [R2, R3]
         { []
         }
     {offset
       cfugF: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfugG; else goto cfugH;
       cfugG: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQ_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfugH: // global
           I64[Sp - 8] = block_cfugC_info;
           R1 = R3;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufugL; else goto cfugD;
       ufugL: // global
           call _cfugC() args: 0, res: 0, upd: 0;
       cfugD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQ_info" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQ_info:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQ_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cfugC() //  []
         { []
         }
     {offset
       cfugC: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfugC_info" {
     block_cfugC_info:
         const _cfugC;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:11.596409165 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation3_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation3_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation3_info;
 },
 GHC.Exts.$fDataSpecConstrAnnotation3_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cfuh3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfuh4; else goto cfuh5;
       cfuh4: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exts.$fDataSpecConstrAnnotation3_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfuh5: // global
           I64[Sp - 16] = block_cfuh0_info;
           R1 = R5;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ufuh9; else goto cfuh1;
       ufuh9: // global
           call _cfuh0() args: 0, res: 0, upd: 0;
       cfuh1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Exts.$fDataSpecConstrAnnotation3_info" {
     GHC.Exts.$fDataSpecConstrAnnotation3_info:
         const GHC.Exts.$fDataSpecConstrAnnotation3_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cfuh0() //  []
         { []
         }
     {offset
       cfuh0: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfuh0_info" {
     block_cfuh0_info:
         const _cfuh0;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:11.601587013 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation4_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation4_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation4_info;
 },
 GHC.Exts.$fDataSpecConstrAnnotation4_entry() //  [R3]
         { []
         }
     {offset
       cfuhn: // global
           R1 = R3 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Exts.$fDataSpecConstrAnnotation4_info" {
     GHC.Exts.$fDataSpecConstrAnnotation4_info:
         const GHC.Exts.$fDataSpecConstrAnnotation4_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:11.604975084 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation_$cdataCast2_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cdataCast2_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cdataCast2_info;
 },
 GHC.Exts.$fDataSpecConstrAnnotation_$cdataCast2_entry() //  []
         { []
         }
     {offset
       cfuhA: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Exts.$fDataSpecConstrAnnotation_$cdataCast2_info" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cdataCast2_info:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cdataCast2_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:11.611624227 UTC

[section ""data" . GHC.Exts.$w$cgmapMo_closure" {
     GHC.Exts.$w$cgmapMo_closure:
         const GHC.Exts.$w$cgmapMo_info;
 },
 lvl3_sftkb_entry() //  [R1]
         { []
         }
     {offset
       cfuhQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfuhR; else goto cfuhS;
       cfuhR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfuhS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mzero_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl3_sftkb_info" {
     lvl3_sftkb_info:
         const lvl3_sftkb_entry;
         const 1;
         const 16;
 },
 sat_sftkk_entry() //  [R1, R2]
         { []
         }
     {offset
       cfui5: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfui6; else goto cfui7;
       cfui6: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfui7: // global
           I64[Sp - 24] = block_cfui2_info;
           _sftkb::P64 = P64[R1 + 7];
           _sftkc::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _sftkb::P64;
           P64[Sp - 8] = _sftkc::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufuip; else goto cfui3;
       ufuip: // global
           call _cfui2(R1) args: 0, res: 0, upd: 0;
       cfui3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sftkk_info" {
     sat_sftkk_info:
         const sat_sftkk_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cfui2() //  [R1]
         { []
         }
     {offset
       cfui2: // global
           I64[Sp - 8] = block_cfuia_info;
           _sftkh::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sftkh::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufuio; else goto cfuic;
       ufuio: // global
           call _cfuia(R1) args: 0, res: 0, upd: 0;
       cfuic: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfui2_info" {
     block_cfui2_info:
         const _cfui2;
         const 2;
         const 30;
 },
 _cfuia() //  [R1]
         { []
         }
     {offset
       cfuia: // global
           if (R1 & 7 == 1) goto cfuii; else goto cfuim;
       cfuii: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cfuim: // global
           R2 = P64[Sp + 24];
           I64[Sp + 16] = stg_ap_p_info;
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfuia_info" {
     block_cfuia_info:
         const _cfuia;
         const 3;
         const 30;
 },
 sat_sftke_entry() //  [R1]
         { []
         }
     {offset
       cfuiB: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfuiC; else goto cfuiD;
       cfuiC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfuiD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cfuiu_info;
           _sftkc::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _sftkc::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ufuiK; else goto cfuiv;
       ufuiK: // global
           call _cfuiu(R1) args: 0, res: 0, upd: 0;
       cfuiv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sftke_info" {
     sat_sftke_info:
         const sat_sftke_entry;
         const 2;
         const 18;
 },
 _cfuiu() //  [R1]
         { []
         }
     {offset
       cfuiu: // global
           _sftkc::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cfuiy; else goto cfuiz;
       cfuiy: // global
           R2 = _sftkc::P64;
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = GHC.Exts.$fDataSpecConstrAnnotation2_closure+1;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
       cfuiz: // global
           R2 = _sftkc::P64;
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = GHC.Exts.$fDataSpecConstrAnnotation1_closure+1;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cfuiu_info" {
     block_cfuiu_info:
         const _cfuiu;
         const 1;
         const 30;
 },
 GHC.Exts.$w$cgmapMo_entry() //  [R2, R3]
         { []
         }
     {offset
       cfuiL: // global
           _sftka::P64 = R3;
           _sftk9::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cfuiM; else goto cfuiN;
       cfuiN: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfuiP; else goto cfuiO;
       cfuiP: // global
           HpAlloc = 24;
           goto cfuiM;
       cfuiM: // global
           R3 = _sftka::P64;
           R2 = _sftk9::P64;
           R1 = GHC.Exts.$w$cgmapMo_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfuiO: // global
           I64[Hp - 16] = lvl3_sftkb_info;
           P64[Hp] = _sftk9::P64;
           I64[Sp - 24] = block_cfuhT_info;
           R2 = _sftk9::P64;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = _sftka::P64;
           Sp = Sp - 24;
           call GHC.Base.$p2MonadPlus_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Exts.$w$cgmapMo_info" {
     GHC.Exts.$w$cgmapMo_info:
         const GHC.Exts.$w$cgmapMo_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cfuhT() //  [R1]
         { []
         }
     {offset
       cfuhT: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfuiS; else goto cfuiR;
       cfuiS: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfuiR: // global
           I64[Hp - 48] = sat_sftkk_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = R1;
           I64[Hp - 24] = sat_sftke_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 8] = Hp - 24;
           P64[Sp + 16] = Hp - 47;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfuhT_info" {
     block_cfuhT_info:
         const _cfuhT;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:11.627504258 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation_$cgmapMo_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cgmapMo_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapMo_info;
 },
 GHC.Exts.$fDataSpecConstrAnnotation_$cgmapMo_entry() //  [R2, R4]
         { []
         }
     {offset
       cfujD: // global
           R3 = R4;
           R2 = R2;
           call GHC.Exts.$w$cgmapMo_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Exts.$fDataSpecConstrAnnotation_$cgmapMo_info" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cgmapMo_info:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapMo_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:11.631761518 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation_closure:
         const Data.Data.C:Data_con_info;
         const GHC.Exts.$fDataSpecConstrAnnotation5_closure;
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgfoldl_closure+3;
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgunfold_closure+3;
         const GHC.Exts.$fDataSpecConstrAnnotation_$ctoConstr_closure+1;
         const GHC.Exts.$fDataSpecConstrAnnotation_$cdataTypeOf_closure+1;
         const GHC.Exts.$fDataSpecConstrAnnotation_$cdataCast1_closure+2;
         const GHC.Exts.$fDataSpecConstrAnnotation_$cdataCast2_closure+2;
         const GHC.Exts.$fDataSpecConstrAnnotation4_closure+2;
         const GHC.Exts.$fDataSpecConstrAnnotation3_closure+4;
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQr_closure+4;
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQ_closure+2;
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQi_closure+3;
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapM_closure+3;
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapMp_closure+3;
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapMo_closure+3;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:11.633823875 UTC

[section ""cstring" . GHC.Exts.$tcIsList3_bytes" {
     GHC.Exts.$tcIsList3_bytes:
         I8[] [73,115,76,105,115,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:11.635599237 UTC

[section ""data" . GHC.Exts.$tcIsList2_closure" {
     GHC.Exts.$tcIsList2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exts.$tcIsList3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:11.637359631 UTC

[section ""data" . GHC.Exts.$tcIsList_closure" {
     GHC.Exts.$tcIsList_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Exts.$trModule_closure+1;
         const GHC.Exts.$tcIsList2_closure+1;
         const GHC.Exts.$tcIsList1_closure+4;
         const 17963880945977000500;
         const 13985778898022155754;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:11.639797955 UTC

[section ""data" . GHC.Exts.C:IsList_closure" {
     GHC.Exts.C:IsList_closure:
         const GHC.Exts.C:IsList_info;
 },
 GHC.Exts.C:IsList_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfujT: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfujX; else goto cfujW;
       cfujX: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exts.C:IsList_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfujW: // global
           I64[Hp - 24] = GHC.Exts.C:IsList_con_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Exts.C:IsList_info" {
     GHC.Exts.C:IsList_info:
         const GHC.Exts.C:IsList_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:11.643431692 UTC

[section ""data" . GHC.Exts.NoSpecConstr_closure" {
     GHC.Exts.NoSpecConstr_closure:
         const GHC.Exts.NoSpecConstr_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:11.645098885 UTC

[section ""data" . GHC.Exts.ForceSpecConstr_closure" {
     GHC.Exts.ForceSpecConstr_closure:
         const GHC.Exts.ForceSpecConstr_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:11.647062347 UTC

[section ""cstring" . iftSn_str" {
     iftSn_str:
         I8[] [98,97,115,101,58,71,72,67,46,69,120,116,115,46,67,58,73,115,76,105,115,116]
 },
 GHC.Exts.C:IsList_con_entry() //  [R1]
         { []
         }
     {offset
       cfuk5: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Exts.C:IsList_con_info" {
     GHC.Exts.C:IsList_con_info:
         const GHC.Exts.C:IsList_con_entry;
         const 3;
         const 1;
         const iftSn_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:11.650294133 UTC

[section ""relreadonly" . GHC.Exts.SpecConstrAnnotation_closure_tbl" {
     GHC.Exts.SpecConstrAnnotation_closure_tbl:
         const GHC.Exts.NoSpecConstr_closure+1;
         const GHC.Exts.ForceSpecConstr_closure+2;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:11.652204819 UTC

[section ""cstring" . iftSp_str" {
     iftSp_str:
         I8[] [98,97,115,101,58,71,72,67,46,69,120,116,115,46,78,111,83,112,101,99,67,111,110,115,116,114]
 },
 GHC.Exts.NoSpecConstr_con_entry() //  [R1]
         { []
         }
     {offset
       cfukc: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Exts.NoSpecConstr_con_info" {
     GHC.Exts.NoSpecConstr_con_info:
         const GHC.Exts.NoSpecConstr_con_entry;
         const 4294967296;
         const 3;
         const iftSp_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:11.655808093 UTC

[section ""cstring" . iftSr_str" {
     iftSr_str:
         I8[] [98,97,115,101,58,71,72,67,46,69,120,116,115,46,70,111,114,99,101,83,112,101,99,67,111,110,115,116,114]
 },
 GHC.Exts.ForceSpecConstr_con_entry() //  [R1]
         { []
         }
     {offset
       cfuki: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Exts.ForceSpecConstr_con_info" {
     GHC.Exts.ForceSpecConstr_con_info:
         const GHC.Exts.ForceSpecConstr_con_entry;
         const 4294967296;
         const 4294967299;
         const iftSr_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:11.659605251 UTC

[section ""relreadonly" . Sftlu_srt" {
     Sftlu_srt:
         const GHC.Err.errorWithoutStackTrace_closure;
         const GHC.Exts.$fIsListNonEmpty_$cfromList_closure;
         const GHC.Exts.$fIsListNonEmpty2_closure;
         const Data.Data.$wlvl_closure;
         const GHC.Exts.$w$cgunfold_closure;
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgunfold_closure;
         const GHC.Exts.the_closure;
         const GHC.Exts.the1_closure;
         const GHC.Exts.the2_closure;
         const Debug.Trace.traceEventIO1_closure;
         const GHC.List.badHead_closure;
         const w2_rftgp_closure;
         const go61_rftgs_closure;
         const w4_rftgr_closure;
         const go1_rftgt_closure;
         const Data.Data.mkConstr1_closure;
         const $tSpecConstrAnnotation3_rftgx_closure;
         const GHC.Exts.$tSpecConstrAnnotation_closure;
         const GHC.Exts.$cNoSpecConstr_closure;
         const GHC.Exts.$cForceSpecConstr_closure;
         const GHC.Exts.$fDataSpecConstrAnnotation_$ctoConstr_closure;
         const Data.Typeable.Internal.$wmkTrCon_closure;
         const Data.Maybe.fromJust1_closure;
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQi_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:12.3484824 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:11:12.350377531 UTC

[section ""data" . GHC.Exts.fromList_closure" {
     GHC.Exts.fromList_closure:
         const GHC.Exts.fromList_info;
 },
 GHC.Exts.fromList_entry() //  [R2]
         { []
         }
     {offset
       cfuoh: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfuoi; else goto cfuoj;
       cfuoi: // global
           R2 = R2;
           R1 = GHC.Exts.fromList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfuoj: // global
           I64[Sp - 8] = block_cfuoe_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufuon; else goto cfuof;
       ufuon: // global
           call _cfuoe(R1) args: 0, res: 0, upd: 0;
       cfuof: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Exts.fromList_info" {
     GHC.Exts.fromList_info:
         const GHC.Exts.fromList_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cfuoe() //  [R1]
         { []
         }
     {offset
       cfuoe: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfuoe_info" {
     block_cfuoe_info:
         const _cfuoe;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:12.355687647 UTC

[section ""data" . GHC.Exts.fromListN_closure" {
     GHC.Exts.fromListN_closure:
         const GHC.Exts.fromListN_info;
 },
 GHC.Exts.fromListN_entry() //  [R2]
         { []
         }
     {offset
       cfuoF: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfuoG; else goto cfuoH;
       cfuoG: // global
           R2 = R2;
           R1 = GHC.Exts.fromListN_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfuoH: // global
           I64[Sp - 8] = block_cfuoC_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufuoL; else goto cfuoD;
       ufuoL: // global
           call _cfuoC(R1) args: 0, res: 0, upd: 0;
       cfuoD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Exts.fromListN_info" {
     GHC.Exts.fromListN_info:
         const GHC.Exts.fromListN_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cfuoC() //  [R1]
         { []
         }
     {offset
       cfuoC: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfuoC_info" {
     block_cfuoC_info:
         const _cfuoC;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:12.361050424 UTC

[section ""data" . GHC.Exts.toList_closure" {
     GHC.Exts.toList_closure:
         const GHC.Exts.toList_info;
 },
 GHC.Exts.toList_entry() //  [R2]
         { []
         }
     {offset
       cfup3: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfup4; else goto cfup5;
       cfup4: // global
           R2 = R2;
           R1 = GHC.Exts.toList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfup5: // global
           I64[Sp - 8] = block_cfup0_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufup9; else goto cfup1;
       ufup9: // global
           call _cfup0(R1) args: 0, res: 0, upd: 0;
       cfup1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Exts.toList_info" {
     GHC.Exts.toList_info:
         const GHC.Exts.toList_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cfup0() //  [R1]
         { []
         }
     {offset
       cfup0: // global
           R1 = P64[R1 + 23];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfup0_info" {
     block_cfup0_info:
         const _cfup0;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:12.366400785 UTC

[section ""data" . GHC.Exts.$fIsListNonEmpty1_closure" {
     GHC.Exts.$fIsListNonEmpty1_closure:
         const GHC.Exts.$fIsListNonEmpty1_info;
 },
 GHC.Exts.$fIsListNonEmpty1_entry() //  [R2]
         { []
         }
     {offset
       cfupr: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cfupv; else goto cfupu;
       cfupv: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.Exts.$fIsListNonEmpty1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfupu: // global
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Exts.$fIsListNonEmpty1_info" {
     GHC.Exts.$fIsListNonEmpty1_info:
         const GHC.Exts.$fIsListNonEmpty1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:12.370022184 UTC

[section ""cstring" . lvl_rftgk_bytes" {
     lvl_rftgk_bytes:
         I8[] [78,111,110,69,109,112,116,121,46,102,114,111,109,76,105,115,116,58,32,101,109,112,116,121,32,108,105,115,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:12.372476813 UTC

[section ""data" . GHC.Exts.$fIsListNonEmpty2_closure" {
     GHC.Exts.$fIsListNonEmpty2_closure:
         const GHC.Exts.$fIsListNonEmpty2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exts.$fIsListNonEmpty2_entry() //  [R1]
         { []
         }
     {offset
       cfupP: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfupQ; else goto cfupR;
       cfupQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfupR: // global
           (_cfupK::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfupK::I64 == 0) goto cfupM; else goto cfupL;
       cfupM: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfupL: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfupK::I64;
           I64[Sp - 24] = block_cfupN_info;
           R2 = lvl_rftgk_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Exts.$fIsListNonEmpty2_info" {
     GHC.Exts.$fIsListNonEmpty2_info:
         const GHC.Exts.$fIsListNonEmpty2_entry;
         const 0;
         const 4294967317;
         const SfupV_srt;
 },
 _cfupN() //  [R1]
         { []
         }
     {offset
       cfupN: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cfupN_info" {
     block_cfupN_info:
         const _cfupN;
         const 0;
         const 4294967326;
         const SfupV_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:12.378500688 UTC

[section ""data" . GHC.Exts.$fIsListNonEmpty_$cfromList_closure" {
     GHC.Exts.$fIsListNonEmpty_$cfromList_closure:
         const GHC.Exts.$fIsListNonEmpty_$cfromList_info;
         const 0;
 },
 GHC.Exts.$fIsListNonEmpty_$cfromList_entry() //  [R2]
         { []
         }
     {offset
       cfuqj: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfuqk; else goto cfuql;
       cfuqk: // global
           R2 = R2;
           R1 = GHC.Exts.$fIsListNonEmpty_$cfromList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfuql: // global
           I64[Sp - 8] = block_cfuqc_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufuqv; else goto cfuqd;
       ufuqv: // global
           call _cfuqc(R1) args: 0, res: 0, upd: 0;
       cfuqd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Exts.$fIsListNonEmpty_$cfromList_info" {
     GHC.Exts.$fIsListNonEmpty_$cfromList_info:
         const GHC.Exts.$fIsListNonEmpty_$cfromList_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SfupV_srt+8;
 },
 _cfuqc() //  [R1]
         { []
         }
     {offset
       cfuqc: // global
           if (R1 & 7 == 1) goto cfuqg; else goto cfuqh;
       cfuqg: // global
           R1 = GHC.Exts.$fIsListNonEmpty2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cfuqh: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfuqu; else goto cfuqt;
       cfuqu: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfuqt: // global
           _sfukQ::P64 = P64[R1 + 6];
           _sfukR::P64 = P64[R1 + 14];
           I64[Hp - 16] = GHC.Base.:|_con_info;
           P64[Hp - 8] = _sfukQ::P64;
           P64[Hp] = _sfukR::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfuqc_info" {
     block_cfuqc_info:
         const _cfuqc;
         const 0;
         const 4294967326;
         const SfupV_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:12.386733156 UTC

[section ""data" . GHC.Exts.$fEqSpecConstrAnnotation_$c==_closure" {
     GHC.Exts.$fEqSpecConstrAnnotation_$c==_closure:
         const GHC.Exts.$fEqSpecConstrAnnotation_$c==_info;
 },
 GHC.Exts.$fEqSpecConstrAnnotation_$c==_entry() //  [R2, R3]
         { []
         }
     {offset
       cfuqW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfuqX; else goto cfuqY;
       cfuqX: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exts.$fEqSpecConstrAnnotation_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfuqY: // global
           I64[Sp - 16] = block_cfuqP_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ufurB; else goto cfuqQ;
       ufurB: // global
           call _cfuqP(R1) args: 0, res: 0, upd: 0;
       cfuqQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Exts.$fEqSpecConstrAnnotation_$c==_info" {
     GHC.Exts.$fEqSpecConstrAnnotation_$c==_info:
         const GHC.Exts.$fEqSpecConstrAnnotation_$c==_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cfuqP() //  [R1]
         { []
         }
     {offset
       cfuqP: // global
           _sfukT::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cfuqT; else goto cfuqU;
       cfuqT: // global
           I64[Sp + 8] = block_cfur1_info;
           R1 = _sfukT::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ufurz; else goto cfur3;
       ufurz: // global
           call _cfur1(R1) args: 0, res: 0, upd: 0;
       cfur3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cfuqU: // global
           I64[Sp + 8] = block_cfurg_info;
           R1 = _sfukT::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ufurA; else goto cfuri;
       ufurA: // global
           call _cfurg(R1) args: 0, res: 0, upd: 0;
       cfuri: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfuqP_info" {
     block_cfuqP_info:
         const _cfuqP;
         const 1;
         const 30;
 },
 _cfur1() //  [R1]
         { []
         }
     {offset
       cfur1: // global
           if (R1 & 7 == 1) goto ufurx; else goto ufury;
       ufurx: // global
           Sp = Sp + 8;
           call _cfurs() args: 0, res: 0, upd: 0;
       ufury: // global
           Sp = Sp + 8;
           call _cfuro() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cfur1_info" {
     block_cfur1_info:
         const _cfur1;
         const 0;
         const 30;
 },
 _cfurg() //  [R1]
         { []
         }
     {offset
       cfurg: // global
           if (R1 & 7 == 1) goto ufurv; else goto ufurw;
       ufurv: // global
           Sp = Sp + 8;
           call _cfuro() args: 0, res: 0, upd: 0;
       ufurw: // global
           Sp = Sp + 8;
           call _cfurs() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cfurg_info" {
     block_cfurg_info:
         const _cfurg;
         const 0;
         const 30;
 },
 _cfuro() //  []
         { []
         }
     {offset
       cfuro: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cfurs() //  []
         { []
         }
     {offset
       cfurs: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:12.398052286 UTC

[section ""data" . GHC.Exts.$fEqSpecConstrAnnotation_$c/=_closure" {
     GHC.Exts.$fEqSpecConstrAnnotation_$c/=_closure:
         const GHC.Exts.$fEqSpecConstrAnnotation_$c/=_info;
 },
 GHC.Exts.$fEqSpecConstrAnnotation_$c/=_entry() //  [R2, R3]
         { []
         }
     {offset
       cfusp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfusq; else goto cfusr;
       cfusq: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exts.$fEqSpecConstrAnnotation_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfusr: // global
           I64[Sp - 16] = block_cfusi_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ufut4; else goto cfusj;
       ufut4: // global
           call _cfusi(R1) args: 0, res: 0, upd: 0;
       cfusj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Exts.$fEqSpecConstrAnnotation_$c/=_info" {
     GHC.Exts.$fEqSpecConstrAnnotation_$c/=_info:
         const GHC.Exts.$fEqSpecConstrAnnotation_$c/=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cfusi() //  [R1]
         { []
         }
     {offset
       cfusi: // global
           _sfukY::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cfusm; else goto cfusn;
       cfusm: // global
           I64[Sp + 8] = block_cfusu_info;
           R1 = _sfukY::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ufut2; else goto cfusw;
       ufut2: // global
           call _cfusu(R1) args: 0, res: 0, upd: 0;
       cfusw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cfusn: // global
           I64[Sp + 8] = block_cfusJ_info;
           R1 = _sfukY::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ufut3; else goto cfusL;
       ufut3: // global
           call _cfusJ(R1) args: 0, res: 0, upd: 0;
       cfusL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfusi_info" {
     block_cfusi_info:
         const _cfusi;
         const 1;
         const 30;
 },
 _cfusu() //  [R1]
         { []
         }
     {offset
       cfusu: // global
           if (R1 & 7 == 1) goto ufut0; else goto ufut1;
       ufut0: // global
           Sp = Sp + 8;
           call _cfusV() args: 0, res: 0, upd: 0;
       ufut1: // global
           Sp = Sp + 8;
           call _cfusR() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cfusu_info" {
     block_cfusu_info:
         const _cfusu;
         const 0;
         const 30;
 },
 _cfusJ() //  [R1]
         { []
         }
     {offset
       cfusJ: // global
           if (R1 & 7 == 1) goto ufusY; else goto ufusZ;
       ufusY: // global
           Sp = Sp + 8;
           call _cfusR() args: 0, res: 0, upd: 0;
       ufusZ: // global
           Sp = Sp + 8;
           call _cfusV() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cfusJ_info" {
     block_cfusJ_info:
         const _cfusJ;
         const 0;
         const 30;
 },
 _cfusR() //  []
         { []
         }
     {offset
       cfusR: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cfusV() //  []
         { []
         }
     {offset
       cfusV: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:12.407951675 UTC

[section ""data" . GHC.Exts.$fEqSpecConstrAnnotation_closure" {
     GHC.Exts.$fEqSpecConstrAnnotation_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Exts.$fEqSpecConstrAnnotation_$c==_closure+2;
         const GHC.Exts.$fEqSpecConstrAnnotation_$c/=_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:12.411297373 UTC

[section ""data" . GHC.Exts.$w$cgunfold_closure" {
     GHC.Exts.$w$cgunfold_closure:
         const GHC.Exts.$w$cgunfold_info;
         const 0;
 },
 GHC.Exts.$w$cgunfold_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfutT: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfutU; else goto cfutV;
       cfutU: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exts.$w$cgunfold_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfutV: // global
           I64[Sp - 24] = block_cfutM_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufuuk; else goto cfutN;
       ufuuk: // global
           call _cfutM(R1) args: 0, res: 0, upd: 0;
       cfutN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Exts.$w$cgunfold_info" {
     GHC.Exts.$w$cgunfold_info:
         const GHC.Exts.$w$cgunfold_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const SfupV_srt+24;
 },
 _cfutM() //  [R1]
         { []
         }
     {offset
       cfutM: // global
           if (R1 & 7 == 1) goto cfutR; else goto cfutQ;
       cfutR: // global
           I64[Sp] = block_cfuu7_info;
           R1 = P64[R1 + 7];
           if (R1 & 7 != 0) goto ufuuj; else goto cfuu9;
       ufuuj: // global
           call _cfuu7(R1) args: 0, res: 0, upd: 0;
       cfuu9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cfutQ: // global
           _sful4::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cfutY_info;
           R1 = _sful4::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto ufuui; else goto cfuu0;
       ufuui: // global
           call _cfutY(R1) args: 0, res: 0, upd: 0;
       cfuu0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfutM_info" {
     block_cfutM_info:
         const _cfutM;
         const 2;
         const 4294967326;
         const SfupV_srt+24;
 },
 _cfuu7() //  [R1]
         { []
         }
     {offset
       cfuu7: // global
           _sful2::P64 = P64[Sp + 8];
           if (I64[R1 + 7] == 1) goto cfuuh; else goto cfuug;
       cfuuh: // global
           R2 = GHC.Exts.NoSpecConstr_closure+1;
           R1 = _sful2::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       cfuug: // global
           R2 = GHC.Exts.ForceSpecConstr_closure+2;
           R1 = _sful2::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfuu7_info" {
     block_cfuu7_info:
         const _cfuu7;
         const 130;
         const 30;
 },
 _cfutY() //  [R1]
         { []
         }
     {offset
       cfutY: // global
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call Data.Data.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfutY_info" {
     block_cfutY_info:
         const _cfutY;
         const 0;
         const 4294967326;
         const SfupV_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:12.42082908 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation_$cgunfold_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cgunfold_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgunfold_info;
         const 0;
 },
 GHC.Exts.$fDataSpecConstrAnnotation_$cgunfold_entry() //  [R2, R3,
                                                            R4]
         { []
         }
     {offset
       cfuuO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfuuP; else goto cfuuQ;
       cfuuP: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exts.$fDataSpecConstrAnnotation_$cgunfold_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfuuQ: // global
           I64[Sp - 16] = block_cfuuL_info;
           R1 = R4;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ufuuU; else goto cfuuM;
       ufuuU: // global
           call _cfuuL(R1) args: 0, res: 0, upd: 0;
       cfuuM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Exts.$fDataSpecConstrAnnotation_$cgunfold_info" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cgunfold_info:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgunfold_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const SfupV_srt+32;
 },
 _cfuuL() //  [R1]
         { []
         }
     {offset
       cfuuL: // global
           R4 = P64[R1 + 39];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Exts.$w$cgunfold_entry(R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfuuL_info" {
     block_cfuuL_info:
         const _cfuuL;
         const 1;
         const 4294967326;
         const SfupV_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:12.426543574 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation_$cgfoldl_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cgfoldl_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgfoldl_info;
 },
 GHC.Exts.$fDataSpecConstrAnnotation_$cgfoldl_entry() //  [R2, R3,
                                                           R4]
         { []
         }
     {offset
       cfuvg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfuvh; else goto cfuvi;
       cfuvh: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exts.$fDataSpecConstrAnnotation_$cgfoldl_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfuvi: // global
           I64[Sp - 16] = block_cfuv9_info;
           R1 = R4;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ufuvp; else goto cfuva;
       ufuvp: // global
           call _cfuv9(R1) args: 0, res: 0, upd: 0;
       cfuva: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Exts.$fDataSpecConstrAnnotation_$cgfoldl_info" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cgfoldl_info:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgfoldl_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cfuv9() //  [R1]
         { []
         }
     {offset
       cfuv9: // global
           _sfulo::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cfuvd; else goto cfuve;
       cfuvd: // global
           R2 = GHC.Exts.NoSpecConstr_closure+1;
           R1 = _sfulo::P64;
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       cfuve: // global
           R2 = GHC.Exts.ForceSpecConstr_closure+2;
           R1 = _sfulo::P64;
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfuv9_info" {
     block_cfuv9_info:
         const _cfuv9;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:12.432472912 UTC

[section ""data" . GHC.Exts.$dmfromListN_closure" {
     GHC.Exts.$dmfromListN_closure:
         const GHC.Exts.$dmfromListN_info;
 },
 GHC.Exts.$dmfromListN_entry() //  [R2]
         { []
         }
     {offset
       cfuvG: // global
           R2 = R2;
           call GHC.Exts.fromList_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Exts.$dmfromListN_info" {
     GHC.Exts.$dmfromListN_info:
         const GHC.Exts.$dmfromListN_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:12.435837749 UTC

[section ""data" . GHC.Exts.$fIsListCallStack1_closure" {
     GHC.Exts.$fIsListCallStack1_closure:
         const GHC.Exts.$fIsListCallStack1_info;
 },
 GHC.Exts.$fIsListCallStack1_entry() //  [R3]
         { []
         }
     {offset
       cfuvR: // global
           R2 = R3;
           call GHC.Stack.Types.fromCallSiteList_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Exts.$fIsListCallStack1_info" {
     GHC.Exts.$fIsListCallStack1_info:
         const GHC.Exts.$fIsListCallStack1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:12.439029503 UTC

[section ""data" . GHC.Exts.$fIsListCallStack_closure" {
     GHC.Exts.$fIsListCallStack_closure:
         const GHC.Exts.C:IsList_con_info;
         const GHC.Stack.Types.fromCallSiteList_closure+1;
         const GHC.Exts.$fIsListCallStack1_closure+2;
         const GHC.Stack.Types.getCallStack_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:12.441070646 UTC

[section ""data" . GHC.Exts.$fIsListVersion1_closure" {
     GHC.Exts.$fIsListVersion1_closure:
         const GHC.Exts.$fIsListVersion1_info;
 },
 GHC.Exts.$fIsListVersion1_entry() //  [R3]
         { []
         }
     {offset
       cfuw3: // global
           R2 = R3;
           call Data.Version.makeVersion_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Exts.$fIsListVersion1_info" {
     GHC.Exts.$fIsListVersion1_info:
         const GHC.Exts.$fIsListVersion1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:12.444695725 UTC

[section ""data" . GHC.Exts.$fIsListVersion_closure" {
     GHC.Exts.$fIsListVersion_closure:
         const GHC.Exts.C:IsList_con_info;
         const Data.Version.makeVersion_closure+1;
         const GHC.Exts.$fIsListVersion1_closure+2;
         const Data.Version.versionBranch_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:12.446801854 UTC

[section ""data" . GHC.Exts.$fIsListNonEmpty_$cfromListN_closure" {
     GHC.Exts.$fIsListNonEmpty_$cfromListN_closure:
         const GHC.Exts.$fIsListNonEmpty_$cfromListN_info;
         const 0;
 },
 GHC.Exts.$fIsListNonEmpty_$cfromListN_entry() //  [R3]
         { []
         }
     {offset
       cfuwf: // global
           R2 = R3;
           call GHC.Exts.$fIsListNonEmpty_$cfromList_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Exts.$fIsListNonEmpty_$cfromListN_info" {
     GHC.Exts.$fIsListNonEmpty_$cfromListN_info:
         const GHC.Exts.$fIsListNonEmpty_$cfromListN_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const SfupV_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:12.449894659 UTC

[section ""data" . GHC.Exts.$fIsListNonEmpty_closure" {
     GHC.Exts.$fIsListNonEmpty_closure:
         const GHC.Exts.C:IsList_con_info;
         const GHC.Exts.$fIsListNonEmpty_$cfromList_closure+1;
         const GHC.Exts.$fIsListNonEmpty_$cfromListN_closure+2;
         const GHC.Exts.$fIsListNonEmpty1_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:12.452486759 UTC

[section ""data" . GHC.Exts.$fIsList[]1_closure" {
     GHC.Exts.$fIsList[]1_closure:
         const GHC.Exts.$fIsList[]1_info;
 },
 GHC.Exts.$fIsList[]1_entry() //  [R3]
         { []
         }
     {offset
       cfuwr: // global
           R2 = R3;
           call GHC.Base.id_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Exts.$fIsList[]1_info" {
     GHC.Exts.$fIsList[]1_info:
         const GHC.Exts.$fIsList[]1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:12.455819703 UTC

[section ""data" . GHC.Exts.$fIsList[]_closure" {
     GHC.Exts.$fIsList[]_closure:
         const GHC.Exts.C:IsList_con_info;
         const GHC.Base.id_closure+1;
         const GHC.Exts.$fIsList[]1_closure+2;
         const GHC.Base.id_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:12.457573028 UTC

[section ""data" . GHC.Exts.maxTupleSize_closure" {
     GHC.Exts.maxTupleSize_closure:
         const GHC.Types.I#_con_info;
         const 62;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:12.459272514 UTC

[section ""cstring" . lvl1_rftgl_bytes" {
     lvl1_rftgl_bytes:
         I8[] [71,72,67,46,69,120,116,115,46,116,104,101,58,32,101,109,112,116,121,32,108,105,115,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:12.461725769 UTC

[section ""data" . GHC.Exts.the2_closure" {
     GHC.Exts.the2_closure:
         const GHC.Exts.the2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exts.the2_entry() //  [R1]
         { []
         }
     {offset
       cfuwJ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfuwK; else goto cfuwL;
       cfuwK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfuwL: // global
           (_cfuwE::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfuwE::I64 == 0) goto cfuwG; else goto cfuwF;
       cfuwG: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfuwF: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfuwE::I64;
           I64[Sp - 24] = block_cfuwH_info;
           R2 = lvl1_rftgl_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Exts.the2_info" {
     GHC.Exts.the2_info:
         const GHC.Exts.the2_entry;
         const 0;
         const 4294967317;
         const SfupV_srt;
 },
 _cfuwH() //  [R1]
         { []
         }
     {offset
       cfuwH: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cfuwH_info" {
     block_cfuwH_info:
         const _cfuwH;
         const 0;
         const 4294967326;
         const SfupV_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:12.466778762 UTC

[section ""cstring" . lvl2_rftgm_bytes" {
     lvl2_rftgm_bytes:
         I8[] [71,72,67,46,69,120,116,115,46,116,104,101,58,32,110,111,110,45,105,100,101,110,116,105,99,97,108,32,101,108,101,109,101,110,116,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:12.469063205 UTC

[section ""data" . GHC.Exts.the1_closure" {
     GHC.Exts.the1_closure:
         const GHC.Exts.the1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exts.the1_entry() //  [R1]
         { []
         }
     {offset
       cfuxa: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfuxb; else goto cfuxc;
       cfuxb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfuxc: // global
           (_cfux5::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfux5::I64 == 0) goto cfux7; else goto cfux6;
       cfux7: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfux6: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfux5::I64;
           I64[Sp - 24] = block_cfux8_info;
           R2 = lvl2_rftgm_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Exts.the1_info" {
     GHC.Exts.the1_info:
         const GHC.Exts.the1_entry;
         const 0;
         const 4294967317;
         const SfupV_srt;
 },
 _cfux8() //  [R1]
         { []
         }
     {offset
       cfux8: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cfux8_info" {
     block_cfux8_info:
         const _cfux8;
         const 0;
         const 4294967326;
         const SfupV_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:12.476069736 UTC

[section ""data" . GHC.Exts.the_closure" {
     GHC.Exts.the_closure:
         const GHC.Exts.the_info;
         const 0;
 },
 sat_sfulE_entry() //  [R1]
         { []
         }
     {offset
       cfuxG: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfuxH; else goto cfuxI;
       cfuxH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfuxI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfulE_info" {
     sat_sfulE_info:
         const sat_sfulE_entry;
         const 2;
         const 18;
 },
 GHC.Exts.the_entry() //  [R2, R3]
         { []
         }
     {offset
       cfuxN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfuxO; else goto cfuxP;
       cfuxO: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exts.the_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfuxP: // global
           I64[Sp - 16] = block_cfuxw_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ufuy7; else goto cfuxx;
       ufuy7: // global
           call _cfuxw(R1) args: 0, res: 0, upd: 0;
       cfuxx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Exts.the_info" {
     GHC.Exts.the_info:
         const GHC.Exts.the_entry;
         const 0;
         const 30064771086;
         const 8589934607;
         const SfupV_srt+48;
 },
 _cfuxw() //  [R1]
         { []
         }
     {offset
       cfuxw: // global
           if (R1 & 7 == 1) goto cfuxK; else goto cfuxL;
       cfuxK: // global
           R1 = GHC.Exts.the2_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cfuxL: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfuxV; else goto cfuxU;
       cfuxV: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfuxU: // global
           _sfulC::P64 = P64[R1 + 6];
           _sfulD::P64 = P64[R1 + 14];
           I64[Hp - 24] = sat_sfulE_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = _sfulC::P64;
           I64[Sp] = block_cfuxS_info;
           R3 = _sfulD::P64;
           R2 = Hp - 24;
           P64[Sp + 8] = _sfulC::P64;
           call GHC.List.all_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfuxw_info" {
     block_cfuxw_info:
         const _cfuxw;
         const 1;
         const 12884901918;
         const SfupV_srt+56;
 },
 _cfuxS() //  [R1]
         { []
         }
     {offset
       cfuxS: // global
           if (R1 & 7 == 1) goto cfuy1; else goto cfuy5;
       cfuy1: // global
           R1 = GHC.Exts.the1_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cfuy5: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfuxS_info" {
     block_cfuxS_info:
         const _cfuxS;
         const 1;
         const 4294967326;
         const SfupV_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:12.486496769 UTC

[section ""data" . GHC.Exts.sortWith_closure" {
     GHC.Exts.sortWith_closure:
         const GHC.Exts.sortWith_info;
 },
 sat_sfulN_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cfuyK: // global
           _sfulK::P64 = R3;
           _sfulJ::P64 = R2;
           _sfulN::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cfuyL; else goto cfuyM;
       cfuyM: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cfuyO; else goto cfuyN;
       cfuyO: // global
           HpAlloc = 64;
           goto cfuyL;
       cfuyL: // global
           R3 = _sfulK::P64;
           R2 = _sfulJ::P64;
           R1 = _sfulN::P64;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfuyN: // global
           _sfulG::P64 = P64[_sfulN::P64 + 6];
           _sfulH::P64 = P64[_sfulN::P64 + 14];
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = _sfulH::P64;
           P64[Hp - 32] = _sfulK::P64;
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sfulH::P64;
           P64[Hp] = _sfulJ::P64;
           R2 = _sfulG::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 24;
           P64[Sp - 8] = Hp - 56;
           Sp = Sp - 24;
           call GHC.Classes.compare_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfulN_info" {
     sat_sfulN_info:
         const sat_sfulN_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 GHC.Exts.sortWith_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfuyP: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfuyT; else goto cfuyS;
       cfuyT: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exts.sortWith_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfuyS: // global
           I64[Hp - 16] = sat_sfulN_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R3 = R4;
           R2 = Hp - 14;
           call Data.OldList.sortBy_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Exts.sortWith_info" {
     GHC.Exts.sortWith_info:
         const GHC.Exts.sortWith_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:12.495195878 UTC

[section ""data" . GHC.Exts.groupByFB_closure" {
     GHC.Exts.groupByFB_closure:
         const GHC.Exts.groupByFB_info;
 },
 ds1_sfulX_entry() //  [R1]
         { []
         }
     {offset
       cfuzv: // global
           _sfulX::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cfuzw; else goto cfuzx;
       cfuzx: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfuzz; else goto cfuzy;
       cfuzz: // global
           HpAlloc = 32;
           goto cfuzw;
       cfuzw: // global
           R1 = _sfulX::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfuzy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfulX::P64;
           _sfulQ::P64 = P64[_sfulX::P64 + 16];
           _sfulV::P64 = P64[_sfulX::P64 + 24];
           _sfulW::P64 = P64[_sfulX::P64 + 32];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sfulQ::P64;
           P64[Hp] = _sfulV::P64;
           I64[Sp - 24] = block_cfuzs_info;
           R3 = _sfulW::P64;
           R2 = Hp - 24;
           Sp = Sp - 24;
           call GHC.List.$wspan_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds1_sfulX_info" {
     ds1_sfulX_info:
         const ds1_sfulX_entry;
         const 3;
         const 15;
 },
 _cfuzs() //  [R1, R2]
         { []
         }
     {offset
       cfuzs: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfuzC; else goto cfuzB;
       cfuzC: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cfuzB: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cfuzs_info" {
     block_cfuzs_info:
         const _cfuzs;
         const 0;
         const 30;
 },
 sat_sfuma_entry() //  [R1]
         { []
         }
     {offset
       cfuzK: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfuzL; else goto cfuzM;
       cfuzL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfuzM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cfuzH_info;
           _sfulS::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _sfulS::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ufuzQ; else goto cfuzI;
       ufuzQ: // global
           call _cfuzH(R1) args: 0, res: 0, upd: 0;
       cfuzI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfuma_info" {
     sat_sfuma_info:
         const sat_sfuma_entry;
         const 2;
         const 18;
 },
 _cfuzH() //  [R1]
         { []
         }
     {offset
       cfuzH: // global
           R2 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call groupByFBCore_sfulS_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cfuzH_info" {
     block_cfuzH_info:
         const _cfuzH;
         const 1;
         const 30;
 },
 groupByFBCore_sfulS_entry() //  [R1, R2]
         { []
         }
     {offset
       cfuzV: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cfuzW; else goto cfuzX;
       cfuzW: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfuzX: // global
           I64[Sp - 40] = block_cfuzh_info;
           _sfulS::P64 = R1;
           _sfulO::P64 = P64[R1 + 7];
           _sfulP::P64 = P64[R1 + 15];
           _sfulQ::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 32] = _sfulO::P64;
           P64[Sp - 24] = _sfulP::P64;
           P64[Sp - 16] = _sfulQ::P64;
           P64[Sp - 8] = _sfulS::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ufuA5; else goto cfuzi;
       ufuA5: // global
           call _cfuzh(R1) args: 0, res: 0, upd: 0;
       cfuzi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . groupByFBCore_sfulS_info" {
     groupByFBCore_sfulS_info:
         const groupByFBCore_sfulS_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 _cfuzh() //  [R1]
         { []
         }
     {offset
       cfuzh: // global
           if (R1 & 7 == 1) goto cfuzS; else goto cfuzT;
       cfuzS: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 40;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cfuzT: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto cfuA4; else goto cfuA3;
       cfuA4: // global
           HpAlloc = 120;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfuA3: // global
           _sfulV::P64 = P64[R1 + 6];
           _sfulW::P64 = P64[R1 + 14];
           I64[Hp - 112] = ds1_sfulX_info;
           P64[Hp - 96] = P64[Sp + 24];
           P64[Hp - 88] = _sfulV::P64;
           P64[Hp - 80] = _sfulW::P64;
           I64[Hp - 72] = sat_sfuma_info;
           P64[Hp - 56] = P64[Sp + 32];
           _cfuzn::P64 = Hp - 112;
           P64[Hp - 48] = _cfuzn::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _cfuzn::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _sfulV::P64;
           P64[Hp] = Hp - 40;
           R3 = Hp - 72;
           R2 = Hp - 14;
           R1 = P64[Sp + 8];
           Sp = Sp + 40;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfuzh_info" {
     block_cfuzh_info:
         const _cfuzh;
         const 4;
         const 30;
 },
 GHC.Exts.groupByFB_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cfuA6: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfuAa; else goto cfuA9;
       cfuAa: // global
           HpAlloc = 32;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exts.groupByFB_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfuA9: // global
           I64[Hp - 24] = groupByFBCore_sfulS_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R2 = R5;
           R1 = Hp - 23;
           call groupByFBCore_sfulS_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Exts.groupByFB_info" {
     GHC.Exts.groupByFB_info:
         const GHC.Exts.groupByFB_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:12.513879313 UTC

[section ""data" . GHC.Exts.groupWith_closure" {
     GHC.Exts.groupWith_closure:
         const GHC.Exts.groupWith_info;
 },
 $dEq_sfume_entry() //  [R1]
         { []
         }
     {offset
       cfuB2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfuB3; else goto cfuB4;
       cfuB3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfuB4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.$p1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dEq_sfume_info" {
     $dEq_sfume_info:
         const $dEq_sfume_entry;
         const 1;
         const 16;
 },
 sat_sfumo_entry() //  [R1, R2]
         { []
         }
     {offset
       cfuBr: // global
           _sfumm::P64 = R2;
           _sfumo::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cfuBs; else goto cfuBt;
       cfuBt: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfuBv; else goto cfuBu;
       cfuBv: // global
           HpAlloc = 32;
           goto cfuBs;
       cfuBs: // global
           R2 = _sfumm::P64;
           R1 = _sfumo::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfuBu: // global
           _sfumc::P64 = P64[_sfumo::P64 + 7];
           _sfume::P64 = P64[_sfumo::P64 + 15];
           _sfuml::P64 = P64[_sfumo::P64 + 23];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sfumc::P64;
           P64[Hp] = _sfumm::P64;
           R2 = _sfume::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sfuml::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfumo_info" {
     sat_sfumo_info:
         const sat_sfumo_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 ds1_sfumk_entry() //  [R1]
         { []
         }
     {offset
       cfuBz: // global
           _sfumk::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cfuBA; else goto cfuBB;
       cfuBB: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cfuBD; else goto cfuBC;
       cfuBD: // global
           HpAlloc = 64;
           goto cfuBA;
       cfuBA: // global
           R1 = _sfumk::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfuBC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfumk::P64;
           _sfumc::P64 = P64[_sfumk::P64 + 16];
           _sfume::P64 = P64[_sfumk::P64 + 24];
           _sfumi::P64 = P64[_sfumk::P64 + 32];
           _sfumj::P64 = P64[_sfumk::P64 + 40];
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = _sfumc::P64;
           P64[Hp - 32] = _sfumi::P64;
           I64[Hp - 24] = sat_sfumo_info;
           P64[Hp - 16] = _sfumc::P64;
           P64[Hp - 8] = _sfume::P64;
           P64[Hp] = Hp - 56;
           I64[Sp - 24] = block_cfuBw_info;
           R3 = _sfumj::P64;
           R2 = Hp - 23;
           Sp = Sp - 24;
           call GHC.List.$wspan_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds1_sfumk_info" {
     ds1_sfumk_info:
         const ds1_sfumk_entry;
         const 4;
         const 15;
 },
 _cfuBw() //  [R1, R2]
         { []
         }
     {offset
       cfuBw: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfuBG; else goto cfuBF;
       cfuBG: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cfuBF: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cfuBw_info" {
     block_cfuBw_info:
         const _cfuBw;
         const 0;
         const 30;
 },
 sat_sfumA_entry() //  [R1]
         { []
         }
     {offset
       cfuBO: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfuBP; else goto cfuBQ;
       cfuBP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfuBQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cfuBL_info;
           _sfumf::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _sfumf::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ufuBU; else goto cfuBM;
       ufuBU: // global
           call _cfuBL(R1) args: 0, res: 0, upd: 0;
       cfuBM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfumA_info" {
     sat_sfumA_info:
         const sat_sfumA_entry;
         const 2;
         const 18;
 },
 _cfuBL() //  [R1]
         { []
         }
     {offset
       cfuBL: // global
           R2 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call groupByFBCore_sfumf_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cfuBL_info" {
     block_cfuBL_info:
         const _cfuBL;
         const 1;
         const 30;
 },
 groupByFBCore_sfumf_entry() //  [R1, R2]
         { []
         }
     {offset
       cfuBZ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfuC0; else goto cfuC1;
       cfuC0: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfuC1: // global
           I64[Sp - 32] = block_cfuBa_info;
           _sfumf::P64 = R1;
           _sfumc::P64 = P64[R1 + 7];
           _sfume::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 24] = _sfumc::P64;
           P64[Sp - 16] = _sfume::P64;
           P64[Sp - 8] = _sfumf::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ufuCa; else goto cfuBb;
       ufuCa: // global
           call _cfuBa(R1) args: 0, res: 0, upd: 0;
       cfuBb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . groupByFBCore_sfumf_info" {
     groupByFBCore_sfumf_info:
         const groupByFBCore_sfumf_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cfuBa() //  [R1]
         { []
         }
     {offset
       cfuBa: // global
           if (R1 & 7 == 1) goto cfuBW; else goto cfuBX;
       cfuBW: // global
           R1 = []_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cfuBX: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto cfuC9; else goto cfuC8;
       cfuC9: // global
           HpAlloc = 152;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfuC8: // global
           _sfumi::P64 = P64[R1 + 6];
           _sfumj::P64 = P64[R1 + 14];
           I64[Hp - 144] = ds1_sfumk_info;
           P64[Hp - 128] = P64[Sp + 8];
           P64[Hp - 120] = P64[Sp + 16];
           P64[Hp - 112] = _sfumi::P64;
           P64[Hp - 104] = _sfumj::P64;
           I64[Hp - 96] = sat_sfumA_info;
           P64[Hp - 80] = P64[Sp + 24];
           _cfuBg::P64 = Hp - 144;
           P64[Hp - 72] = _cfuBg::P64;
           I64[Hp - 64] = stg_sel_0_upd_info;
           P64[Hp - 48] = _cfuBg::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = _sfumi::P64;
           P64[Hp - 24] = Hp - 64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 38;
           P64[Hp] = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfuBa_info" {
     block_cfuBa_info:
         const _cfuBa;
         const 3;
         const 30;
 },
 GHC.Exts.groupWith_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfuCd: // global
           _sfumd::P64 = R4;
           _sfumc::P64 = R3;
           _sfumb::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto cfuCe; else goto cfuCf;
       cfuCf: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfuCh; else goto cfuCg;
       cfuCh: // global
           HpAlloc = 48;
           goto cfuCe;
       cfuCe: // global
           R4 = _sfumd::P64;
           R3 = _sfumc::P64;
           R2 = _sfumb::P64;
           R1 = GHC.Exts.groupWith_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfuCg: // global
           I64[Hp - 40] = $dEq_sfume_info;
           P64[Hp - 24] = _sfumb::P64;
           I64[Hp - 16] = groupByFBCore_sfumf_info;
           P64[Hp - 8] = _sfumc::P64;
           P64[Hp] = Hp - 40;
           I64[Sp - 16] = block_cfuCb_info;
           R4 = _sfumd::P64;
           R3 = _sfumc::P64;
           R2 = _sfumb::P64;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 16;
           call GHC.Exts.sortWith_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Exts.groupWith_info" {
     GHC.Exts.groupWith_info:
         const GHC.Exts.groupWith_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cfuCb() //  [R1]
         { []
         }
     {offset
       cfuCb: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call groupByFBCore_sfumf_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfuCb_info" {
     block_cfuCb_info:
         const _cfuCb;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:12.534944066 UTC

[section ""data" . GHC.Exts.traceEvent_closure" {
     GHC.Exts.traceEvent_closure:
         const GHC.Exts.traceEvent_info;
         const 0;
 },
 GHC.Exts.traceEvent_entry() //  [R2]
         { []
         }
     {offset
       cfuDB: // global
           R2 = R2;
           call Debug.Trace.traceEventIO1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Exts.traceEvent_info" {
     GHC.Exts.traceEvent_info:
         const GHC.Exts.traceEvent_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SfupV_srt+72;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:12.53807202 UTC

[section ""cstring" . GHC.Exts.$fDataSpecConstrAnnotation7_bytes" {
     GHC.Exts.$fDataSpecConstrAnnotation7_bytes:
         I8[] [83,112,101,99,67,111,110,115,116,114,65,110,110,111,116,97,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:12.540289128 UTC

[section ""data" . $tSpecConstrAnnotation1_rftgn_closure" {
     $tSpecConstrAnnotation1_rftgn_closure:
         const $tSpecConstrAnnotation1_rftgn_info;
         const 0;
         const 0;
         const 0;
 },
 $tSpecConstrAnnotation1_rftgn_entry() //  [R1]
         { []
         }
     {offset
       cfuDP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfuDQ; else goto cfuDR;
       cfuDQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfuDR: // global
           (_cfuDM::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfuDM::I64 == 0) goto cfuDO; else goto cfuDN;
       cfuDO: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfuDN: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfuDM::I64;
           R2 = GHC.Exts.$fDataSpecConstrAnnotation7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $tSpecConstrAnnotation1_rftgn_info" {
     $tSpecConstrAnnotation1_rftgn_info:
         const $tSpecConstrAnnotation1_rftgn_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:12.544207405 UTC

[section ""cstring" . w1_rftgo_bytes" {
     w1_rftgo_bytes:
         I8[] [70,111,114,99,101,83,112,101,99,67,111,110,115,116,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:12.546360603 UTC

[section ""data" . w2_rftgp_closure" {
     w2_rftgp_closure:
         const w2_rftgp_info;
         const 0;
         const 0;
         const 0;
 },
 w2_rftgp_entry() //  [R1]
         { []
         }
     {offset
       cfuE7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfuE8; else goto cfuE9;
       cfuE8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfuE9: // global
           (_cfuE4::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfuE4::I64 == 0) goto cfuE6; else goto cfuE5;
       cfuE6: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfuE5: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfuE4::I64;
           R2 = w1_rftgo_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . w2_rftgp_info" {
     w2_rftgp_info:
         const w2_rftgp_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:12.549966105 UTC

[section ""cstring" . w3_rftgq_bytes" {
     w3_rftgq_bytes:
         I8[] [78,111,83,112,101,99,67,111,110,115,116,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:12.552195129 UTC

[section ""data" . w4_rftgr_closure" {
     w4_rftgr_closure:
         const w4_rftgr_info;
         const 0;
         const 0;
         const 0;
 },
 w4_rftgr_entry() //  [R1]
         { []
         }
     {offset
       cfuEp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfuEq; else goto cfuEr;
       cfuEq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfuEr: // global
           (_cfuEm::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfuEm::I64 == 0) goto cfuEo; else goto cfuEn;
       cfuEo: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfuEn: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfuEm::I64;
           R2 = w3_rftgq_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . w4_rftgr_info" {
     w4_rftgr_info:
         const w4_rftgr_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:12.558315374 UTC

[section ""data" . go61_rftgs_closure" {
     go61_rftgs_closure:
         const go61_rftgs_info;
         const 0;
 },
 go61_rftgs_entry() //  [R2, R3]
         { []
         }
     {offset
       cfuEL: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfuEM; else goto ufuFp;
       cfuEM: // global
           R3 = R3;
           R2 = R2;
           R1 = go61_rftgs_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ufuFp: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _cfuEB() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . go61_rftgs_info" {
     go61_rftgs_info:
         const go61_rftgs_entry;
         const 0;
         const 30064771086;
         const 8589934607;
         const SfupV_srt+80;
 },
 _cfuEB() //  []
         { []
         }
     {offset
       cfuEB: // global
           _sfumC::P64 = P64[Sp];
           I64[Sp] = block_cfuEE_info;
           R1 = _sfumC::P64;
           if (R1 & 7 != 0) goto ufuFt; else goto cfuEF;
       ufuFt: // global
           call _cfuEE(R1) args: 0, res: 0, upd: 0;
       cfuEF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cfuEE() //  [R1]
         { []
         }
     {offset
       cfuEE: // global
           if (R1 & 7 == 1) goto ufuFq; else goto cfuEJ;
       ufuFq: // global
           Sp = Sp + 16;
           call _cfuF1() args: 0, res: 0, upd: 0;
       cfuEJ: // global
           I64[Sp - 8] = block_cfuET_info;
           _sfumF::P64 = P64[R1 + 6];
           _sfumG::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp] = _sfumG::P64;
           P64[Sp + 8] = _sfumF::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufuFu; else goto cfuEV;
       ufuFu: // global
           call _cfuET(R1) args: 0, res: 0, upd: 0;
       cfuEV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfuEE_info" {
     block_cfuEE_info:
         const _cfuEE;
         const 1;
         const 12884901918;
         const SfupV_srt+80;
 },
 _cfuET() //  [R1]
         { []
         }
     {offset
       cfuET: // global
           if (R1 & 7 == 1) goto ufuFr; else goto cfuF6;
       ufuFr: // global
           Sp = Sp + 24;
           call _cfuF1() args: 0, res: 0, upd: 0;
       cfuF6: // global
           I64[Sp - 8] = block_cfuF4_info;
           _sfumI::P64 = P64[R1 + 6];
           _sfumJ::P64 = P64[R1 + 14];
           R1 = P64[Sp + 16];
           P64[Sp] = _sfumJ::P64;
           P64[Sp + 16] = _sfumI::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufuFx; else goto cfuF7;
       ufuFx: // global
           call _cfuF4(R1) args: 0, res: 0, upd: 0;
       cfuF7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfuET_info" {
     block_cfuET_info:
         const _cfuET;
         const 2;
         const 12884901918;
         const SfupV_srt+80;
 },
 _cfuF1() //  []
         { []
         }
     {offset
       cfuF1: // global
           R1 = GHC.List.badHead_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cfuF4() //  [R1]
         { []
         }
     {offset
       cfuF4: // global
           I64[Sp] = block_cfuFb_info;
           R3 = w2_rftgp_closure;
           R2 = P64[R1 + 15];
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfuF4_info" {
     block_cfuF4_info:
         const _cfuF4;
         const 3;
         const 12884901918;
         const SfupV_srt+80;
 },
 _cfuFb() //  [R1]
         { []
         }
     {offset
       cfuFb: // global
           if (R1 & 7 == 1) goto cfuFi; else goto cfuFm;
       cfuFi: // global
           P64[Sp + 16] = P64[Sp + 16];
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call _cfuEB() args: 0, res: 0, upd: 0;
       cfuFm: // global
           R1 = P64[Sp + 24] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfuFb_info" {
     block_cfuFb_info:
         const _cfuFb;
         const 3;
         const 12884901918;
         const SfupV_srt+80;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:12.572885416 UTC

[section ""data" . go1_rftgt_closure" {
     go1_rftgt_closure:
         const go1_rftgt_info;
         const 0;
 },
 go1_rftgt_entry() //  [R2, R3]
         { []
         }
     {offset
       cfuGn: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfuGo; else goto ufuH1;
       cfuGo: // global
           R3 = R3;
           R2 = R2;
           R1 = go1_rftgt_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ufuH1: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _cfuGd() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . go1_rftgt_info" {
     go1_rftgt_info:
         const go1_rftgt_entry;
         const 0;
         const 107374182414;
         const 8589934607;
         const SfupV_srt+80;
 },
 _cfuGd() //  []
         { []
         }
     {offset
       cfuGd: // global
           _sfumR::P64 = P64[Sp];
           I64[Sp] = block_cfuGg_info;
           R1 = _sfumR::P64;
           if (R1 & 7 != 0) goto ufuH5; else goto cfuGh;
       ufuH5: // global
           call _cfuGg(R1) args: 0, res: 0, upd: 0;
       cfuGh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cfuGg() //  [R1]
         { []
         }
     {offset
       cfuGg: // global
           if (R1 & 7 == 1) goto ufuH2; else goto cfuGl;
       ufuH2: // global
           Sp = Sp + 16;
           call _cfuGD() args: 0, res: 0, upd: 0;
       cfuGl: // global
           I64[Sp - 8] = block_cfuGv_info;
           _sfumU::P64 = P64[R1 + 6];
           _sfumV::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp] = _sfumV::P64;
           P64[Sp + 8] = _sfumU::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufuH6; else goto cfuGx;
       ufuH6: // global
           call _cfuGv(R1) args: 0, res: 0, upd: 0;
       cfuGx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfuGg_info" {
     block_cfuGg_info:
         const _cfuGg;
         const 1;
         const 38654705694;
         const SfupV_srt+80;
 },
 _cfuGv() //  [R1]
         { []
         }
     {offset
       cfuGv: // global
           if (R1 & 7 == 1) goto ufuH3; else goto cfuGI;
       ufuH3: // global
           Sp = Sp + 24;
           call _cfuGD() args: 0, res: 0, upd: 0;
       cfuGI: // global
           I64[Sp - 8] = block_cfuGG_info;
           _sfumX::P64 = P64[R1 + 6];
           _sfumY::P64 = P64[R1 + 14];
           R1 = P64[Sp + 16];
           P64[Sp] = _sfumY::P64;
           P64[Sp + 16] = _sfumX::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufuH9; else goto cfuGJ;
       ufuH9: // global
           call _cfuGG(R1) args: 0, res: 0, upd: 0;
       cfuGJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfuGv_info" {
     block_cfuGv_info:
         const _cfuGv;
         const 2;
         const 38654705694;
         const SfupV_srt+80;
 },
 _cfuGD() //  []
         { []
         }
     {offset
       cfuGD: // global
           R1 = GHC.List.badHead_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cfuGG() //  [R1]
         { []
         }
     {offset
       cfuGG: // global
           I64[Sp] = block_cfuGN_info;
           R3 = w4_rftgr_closure;
           R2 = P64[R1 + 15];
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfuGG_info" {
     block_cfuGG_info:
         const _cfuGG;
         const 3;
         const 38654705694;
         const SfupV_srt+80;
 },
 _cfuGN() //  [R1]
         { []
         }
     {offset
       cfuGN: // global
           if (R1 & 7 == 1) goto cfuGU; else goto cfuGY;
       cfuGU: // global
           P64[Sp + 16] = P64[Sp + 16];
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call _cfuGd() args: 0, res: 0, upd: 0;
       cfuGY: // global
           R1 = P64[Sp + 24] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfuGN_info" {
     block_cfuGN_info:
         const _cfuGN;
         const 3;
         const 38654705694;
         const SfupV_srt+80;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:12.586250199 UTC

[section ""data" . $cForceSpecConstr1_rftgu_closure" {
     $cForceSpecConstr1_rftgu_closure:
         const Data.Data.AlgConstr_con_info;
         const $cForceSpecConstr2_rftgA_closure;
         const 0;
 },
 section ""data" . $cNoSpecConstr1_rftgv_closure" {
     $cNoSpecConstr1_rftgv_closure:
         const Data.Data.AlgConstr_con_info;
         const $cNoSpecConstr2_rftgz_closure;
         const 0;
 },
 section ""data" . GHC.Exts.$cForceSpecConstr_closure" {
     GHC.Exts.$cForceSpecConstr_closure:
         const Data.Data.Constr_con_info;
         const $cForceSpecConstr1_rftgu_closure+1;
         const w2_rftgp_closure;
         const GHC.Types.[]_closure+1;
         const Data.Data.Prefix_closure+1;
         const GHC.Exts.$tSpecConstrAnnotation_closure+1;
         const 0;
 },
 section ""data" . $tSpecConstrAnnotation2_rftgw_closure" {
     $tSpecConstrAnnotation2_rftgw_closure:
         const :_con_info;
         const GHC.Exts.$cForceSpecConstr_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 },
 section ""data" . $tSpecConstrAnnotation3_rftgx_closure" {
     $tSpecConstrAnnotation3_rftgx_closure:
         const :_con_info;
         const GHC.Exts.$cNoSpecConstr_closure+1;
         const $tSpecConstrAnnotation2_rftgw_closure+2;
         const 0;
 },
 section ""data" . $tSpecConstrAnnotation4_rftgy_closure" {
     $tSpecConstrAnnotation4_rftgy_closure:
         const Data.Data.AlgRep_con_info;
         const $tSpecConstrAnnotation3_rftgx_closure+2;
         const 0;
 },
 section ""data" . GHC.Exts.$tSpecConstrAnnotation_closure" {
     GHC.Exts.$tSpecConstrAnnotation_closure:
         const Data.Data.DataType_con_info;
         const $tSpecConstrAnnotation1_rftgn_closure;
         const $tSpecConstrAnnotation4_rftgy_closure+1;
         const 0;
 },
 section ""data" . GHC.Exts.$cNoSpecConstr_closure" {
     GHC.Exts.$cNoSpecConstr_closure:
         const Data.Data.Constr_con_info;
         const $cNoSpecConstr1_rftgv_closure+1;
         const w4_rftgr_closure;
         const GHC.Types.[]_closure+1;
         const Data.Data.Prefix_closure+1;
         const GHC.Exts.$tSpecConstrAnnotation_closure+1;
         const 0;
 },
 section ""data" . $cNoSpecConstr2_rftgz_closure" {
     $cNoSpecConstr2_rftgz_closure:
         const $cNoSpecConstr2_rftgz_info;
         const 0;
         const 0;
         const 0;
 },
 $cNoSpecConstr2_rftgz_entry() //  [R1]
         { []
         }
     {offset
       cfuHU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfuHV; else goto cfuHW;
       cfuHV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfuHW: // global
           (_cfuHR::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfuHR::I64 == 0) goto cfuHT; else goto cfuHS;
       cfuHT: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfuHS: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfuHR::I64;
           R3 = Data.Data.mkConstr1_closure;
           R2 = $tSpecConstrAnnotation3_rftgx_closure+2;
           Sp = Sp - 16;
           call go1_rftgt_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $cNoSpecConstr2_rftgz_info" {
     $cNoSpecConstr2_rftgz_info:
         const $cNoSpecConstr2_rftgz_entry;
         const 0;
         const 30064771093;
         const SfupV_srt+112;
 },
 section ""data" . $cForceSpecConstr2_rftgA_closure" {
     $cForceSpecConstr2_rftgA_closure:
         const $cForceSpecConstr2_rftgA_info;
         const 0;
         const 0;
         const 0;
 },
 $cForceSpecConstr2_rftgA_entry() //  [R1]
         { []
         }
     {offset
       cfuI3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfuI4; else goto cfuI5;
       cfuI4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfuI5: // global
           (_cfuI0::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfuI0::I64 == 0) goto cfuI2; else goto cfuI1;
       cfuI2: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfuI1: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfuI0::I64;
           R3 = Data.Data.mkConstr1_closure;
           R2 = $tSpecConstrAnnotation3_rftgx_closure+2;
           Sp = Sp - 16;
           call go61_rftgs_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $cForceSpecConstr2_rftgA_info" {
     $cForceSpecConstr2_rftgA_info:
         const $cForceSpecConstr2_rftgA_entry;
         const 0;
         const 107374182421;
         const SfupV_srt+96;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:12.598198012 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation_$cdataTypeOf_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cdataTypeOf_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cdataTypeOf_info;
         const 0;
 },
 GHC.Exts.$fDataSpecConstrAnnotation_$cdataTypeOf_entry() //  []
         { []
         }
     {offset
       cfuIy: // global
           R1 = GHC.Exts.$tSpecConstrAnnotation_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Exts.$fDataSpecConstrAnnotation_$cdataTypeOf_info" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cdataTypeOf_info:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cdataTypeOf_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SfupV_srt+136;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:12.60265095 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation_$ctoConstr_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation_$ctoConstr_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation_$ctoConstr_info;
         const 0;
 },
 GHC.Exts.$fDataSpecConstrAnnotation_$ctoConstr_entry() //  [R2]
         { []
         }
     {offset
       cfuIR: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfuIS; else goto cfuIT;
       cfuIS: // global
           R2 = R2;
           R1 = GHC.Exts.$fDataSpecConstrAnnotation_$ctoConstr_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfuIT: // global
           I64[Sp - 8] = block_cfuIK_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufuJ0; else goto cfuIL;
       ufuJ0: // global
           call _cfuIK(R1) args: 0, res: 0, upd: 0;
       cfuIL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Exts.$fDataSpecConstrAnnotation_$ctoConstr_info" {
     GHC.Exts.$fDataSpecConstrAnnotation_$ctoConstr_info:
         const GHC.Exts.$fDataSpecConstrAnnotation_$ctoConstr_entry;
         const 0;
         const 30064771086;
         const 4294967301;
         const SfupV_srt+144;
 },
 _cfuIK() //  [R1]
         { []
         }
     {offset
       cfuIK: // global
           if (R1 & 7 == 1) goto cfuIO; else goto cfuIP;
       cfuIO: // global
           R1 = GHC.Exts.$cNoSpecConstr_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cfuIP: // global
           R1 = GHC.Exts.$cForceSpecConstr_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfuIK_info" {
     block_cfuIK_info:
         const _cfuIK;
         const 0;
         const 12884901918;
         const SfupV_srt+144;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:12.607580283 UTC

[section ""cstring" . GHC.Exts.$trModule4_bytes" {
     GHC.Exts.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:12.609329678 UTC

[section ""data" . GHC.Exts.$trModule3_closure" {
     GHC.Exts.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exts.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:12.610980289 UTC

[section ""cstring" . GHC.Exts.$trModule2_bytes" {
     GHC.Exts.$trModule2_bytes:
         I8[] [71,72,67,46,69,120,116,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:12.612703588 UTC

[section ""data" . GHC.Exts.$trModule1_closure" {
     GHC.Exts.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exts.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:12.614825135 UTC

[section ""data" . GHC.Exts.$trModule_closure" {
     GHC.Exts.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Exts.$trModule3_closure+1;
         const GHC.Exts.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:12.616666479 UTC

[section ""data" . $krep_rftgB_closure" {
     $krep_rftgB_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcConstraint_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:12.61844406 UTC

[section ""data" . GHC.Exts.$tcIsList1_closure" {
     GHC.Exts.$tcIsList1_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Types.krep$*_closure;
         const $krep_rftgB_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:12.620199363 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation6_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation6_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exts.$fDataSpecConstrAnnotation7_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:12.622047286 UTC

[section ""data" . GHC.Exts.$tcSpecConstrAnnotation_closure" {
     GHC.Exts.$tcSpecConstrAnnotation_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Exts.$trModule_closure+1;
         const GHC.Exts.$fDataSpecConstrAnnotation6_closure+1;
         const GHC.Types.krep$*_closure;
         const 8217012571387563927;
         const 8545973142114271769;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:12.623897956 UTC

[section ""data" . GHC.Exts.$tc'ForceSpecConstr1_closure" {
     GHC.Exts.$tc'ForceSpecConstr1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Exts.$tcSpecConstrAnnotation_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:12.626121744 UTC

[section ""cstring" . GHC.Exts.$tc'NoSpecConstr2_bytes" {
     GHC.Exts.$tc'NoSpecConstr2_bytes:
         I8[] [39,78,111,83,112,101,99,67,111,110,115,116,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:12.627825939 UTC

[section ""data" . GHC.Exts.$tc'NoSpecConstr1_closure" {
     GHC.Exts.$tc'NoSpecConstr1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exts.$tc'NoSpecConstr2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:12.630069243 UTC

[section ""data" . GHC.Exts.$tc'NoSpecConstr_closure" {
     GHC.Exts.$tc'NoSpecConstr_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Exts.$trModule_closure+1;
         const GHC.Exts.$tc'NoSpecConstr1_closure+1;
         const GHC.Exts.$tc'ForceSpecConstr1_closure+1;
         const 18402820579108170608;
         const 14598374581444186552;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:12.631779821 UTC

[section ""cstring" . GHC.Exts.$tc'ForceSpecConstr3_bytes" {
     GHC.Exts.$tc'ForceSpecConstr3_bytes:
         I8[] [39,70,111,114,99,101,83,112,101,99,67,111,110,115,116,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:12.633483599 UTC

[section ""data" . GHC.Exts.$tc'ForceSpecConstr2_closure" {
     GHC.Exts.$tc'ForceSpecConstr2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exts.$tc'ForceSpecConstr3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:12.635236074 UTC

[section ""data" . GHC.Exts.$tc'ForceSpecConstr_closure" {
     GHC.Exts.$tc'ForceSpecConstr_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Exts.$trModule_closure+1;
         const GHC.Exts.$tc'ForceSpecConstr2_closure+1;
         const GHC.Exts.$tc'ForceSpecConstr1_closure+1;
         const 13715005538542947299;
         const 3802030838304098377;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:12.639073854 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation5_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation5_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exts.$fDataSpecConstrAnnotation5_entry() //  [R1]
         { []
         }
     {offset
       cfuJG: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cfuJH; else goto cfuJI;
       cfuJH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfuJI: // global
           (_cfuJy::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfuJy::I64 == 0) goto cfuJA; else goto cfuJz;
       cfuJA: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfuJz: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfuJy::I64;
           I64[Sp - 24] = block_cfuJB_info;
           R6 = 0;
           R5 = GHC.Exts.$fDataSpecConstrAnnotation6_closure+1;
           R4 = GHC.Exts.$trModule_closure+1;
           R3 = 8545973142114271769;
           R2 = 8217012571387563927;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Exts.$fDataSpecConstrAnnotation5_info" {
     GHC.Exts.$fDataSpecConstrAnnotation5_info:
         const GHC.Exts.$fDataSpecConstrAnnotation5_entry;
         const 0;
         const 4294967317;
         const SfupV_srt+168;
 },
 _cfuJB() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cfuJB: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _cfuJC() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cfuJB_info" {
     block_cfuJB_info:
         const _cfuJB;
         const 0;
         const 30;
 },
 _cfuJC() //  []
         { []
         }
     {offset
       cfuJC: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfuJL; else goto cfuJK;
       cfuJL: // global
           HpAlloc = 48;
           I64[Sp] = block_cfuJC_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       cfuJK: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cfuJC_info" {
     block_cfuJC_info:
         const _cfuJC;
         const 1093;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:12.646536483 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation_$cdataCast1_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cdataCast1_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cdataCast1_info;
 },
 GHC.Exts.$fDataSpecConstrAnnotation_$cdataCast1_entry() //  []
         { []
         }
     {offset
       cfuKi: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Exts.$fDataSpecConstrAnnotation_$cdataCast1_info" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cdataCast1_info:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cdataCast1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:12.650036976 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation2_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation2_closure:
         const (,)_con_info;
         const GHC.Exts.NoSpecConstr_closure+1;
         const GHC.Types.False_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:12.651734477 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation1_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation1_closure:
         const (,)_con_info;
         const GHC.Exts.ForceSpecConstr_closure+2;
         const GHC.Types.False_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:12.656762344 UTC

[section ""data" . GHC.Exts.$w$cgmapMp_closure" {
     GHC.Exts.$w$cgmapMp_closure:
         const GHC.Exts.$w$cgmapMp_info;
 },
 lvl3_sfunj_entry() //  [R1]
         { []
         }
     {offset
       cfuKB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfuKC; else goto cfuKD;
       cfuKC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfuKD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mzero_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl3_sfunj_info" {
     lvl3_sfunj_info:
         const lvl3_sfunj_entry;
         const 1;
         const 16;
 },
 sat_sfuns_entry() //  [R1, R2]
         { []
         }
     {offset
       cfuKQ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfuKR; else goto cfuKS;
       cfuKR: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfuKS: // global
           I64[Sp - 24] = block_cfuKN_info;
           _sfunj::P64 = P64[R1 + 7];
           _sfunk::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _sfunj::P64;
           P64[Sp - 8] = _sfunk::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufuLa; else goto cfuKO;
       ufuLa: // global
           call _cfuKN(R1) args: 0, res: 0, upd: 0;
       cfuKO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfuns_info" {
     sat_sfuns_info:
         const sat_sfuns_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cfuKN() //  [R1]
         { []
         }
     {offset
       cfuKN: // global
           I64[Sp - 8] = block_cfuKV_info;
           _sfunp::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sfunp::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufuL9; else goto cfuKX;
       ufuL9: // global
           call _cfuKV(R1) args: 0, res: 0, upd: 0;
       cfuKX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfuKN_info" {
     block_cfuKN_info:
         const _cfuKN;
         const 2;
         const 30;
 },
 _cfuKV() //  [R1]
         { []
         }
     {offset
       cfuKV: // global
           if (R1 & 7 == 1) goto cfuL3; else goto cfuL7;
       cfuL3: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cfuL7: // global
           R2 = P64[Sp + 24];
           I64[Sp + 16] = stg_ap_p_info;
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfuKV_info" {
     block_cfuKV_info:
         const _cfuKV;
         const 3;
         const 30;
 },
 sat_sfunm_entry() //  [R1]
         { []
         }
     {offset
       cfuLm: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfuLn; else goto cfuLo;
       cfuLn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfuLo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cfuLf_info;
           _sfunk::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _sfunk::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ufuLv; else goto cfuLg;
       ufuLv: // global
           call _cfuLf(R1) args: 0, res: 0, upd: 0;
       cfuLg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfunm_info" {
     sat_sfunm_info:
         const sat_sfunm_entry;
         const 2;
         const 18;
 },
 _cfuLf() //  [R1]
         { []
         }
     {offset
       cfuLf: // global
           _sfunk::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cfuLj; else goto cfuLk;
       cfuLj: // global
           R2 = _sfunk::P64;
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = GHC.Exts.$fDataSpecConstrAnnotation2_closure+1;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
       cfuLk: // global
           R2 = _sfunk::P64;
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = GHC.Exts.$fDataSpecConstrAnnotation1_closure+1;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cfuLf_info" {
     block_cfuLf_info:
         const _cfuLf;
         const 1;
         const 30;
 },
 GHC.Exts.$w$cgmapMp_entry() //  [R2, R3]
         { []
         }
     {offset
       cfuLw: // global
           _sfuni::P64 = R3;
           _sfunh::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cfuLx; else goto cfuLy;
       cfuLy: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfuLA; else goto cfuLz;
       cfuLA: // global
           HpAlloc = 24;
           goto cfuLx;
       cfuLx: // global
           R3 = _sfuni::P64;
           R2 = _sfunh::P64;
           R1 = GHC.Exts.$w$cgmapMp_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfuLz: // global
           I64[Hp - 16] = lvl3_sfunj_info;
           P64[Hp] = _sfunh::P64;
           I64[Sp - 24] = block_cfuKE_info;
           R2 = _sfunh::P64;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = _sfuni::P64;
           Sp = Sp - 24;
           call GHC.Base.$p2MonadPlus_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Exts.$w$cgmapMp_info" {
     GHC.Exts.$w$cgmapMp_info:
         const GHC.Exts.$w$cgmapMp_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cfuKE() //  [R1]
         { []
         }
     {offset
       cfuKE: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfuLD; else goto cfuLC;
       cfuLD: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfuLC: // global
           I64[Hp - 48] = sat_sfuns_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = R1;
           I64[Hp - 24] = sat_sfunm_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 8] = Hp - 24;
           P64[Sp + 16] = Hp - 47;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfuKE_info" {
     block_cfuKE_info:
         const _cfuKE;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:12.673136864 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation_$cgmapMp_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cgmapMp_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapMp_info;
 },
 GHC.Exts.$fDataSpecConstrAnnotation_$cgmapMp_entry() //  [R2, R4]
         { []
         }
     {offset
       cfuMD: // global
           R3 = R4;
           R2 = R2;
           call GHC.Exts.$w$cgmapMp_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Exts.$fDataSpecConstrAnnotation_$cgmapMp_info" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cgmapMp_info:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapMp_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:12.677328119 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation_$cgmapM_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cgmapM_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapM_info;
 },
 GHC.Exts.$fDataSpecConstrAnnotation_$cgmapM_entry() //  [R2, R3,
                                                          R4]
         { []
         }
     {offset
       cfuMV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfuMW; else goto cfuMX;
       cfuMW: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exts.$fDataSpecConstrAnnotation_$cgmapM_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfuMX: // global
           I64[Sp - 16] = block_cfuMO_info;
           R1 = R4;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ufuN4; else goto cfuMP;
       ufuN4: // global
           call _cfuMO(R1) args: 0, res: 0, upd: 0;
       cfuMP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Exts.$fDataSpecConstrAnnotation_$cgmapM_info" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cgmapM_info:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapM_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cfuMO() //  [R1]
         { []
         }
     {offset
       cfuMO: // global
           _sfunw::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cfuMS; else goto cfuMT;
       cfuMS: // global
           R2 = _sfunw::P64;
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = GHC.Exts.NoSpecConstr_closure+1;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
       cfuMT: // global
           R2 = _sfunw::P64;
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = GHC.Exts.ForceSpecConstr_closure+2;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfuMO_info" {
     block_cfuMO_info:
         const _cfuMO;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:12.683193829 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQi_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQi_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQi_info;
         const 0;
 },
 GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQi_entry() //  [R2, R3,
                                                           R4]
         { []
         }
     {offset
       cfuNs: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfuNt; else goto cfuNu;
       cfuNt: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQi_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfuNu: // global
           I64[Sp - 8] = block_cfuNp_info;
           R1 = R4;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufuNy; else goto cfuNq;
       ufuNy: // global
           call _cfuNp() args: 0, res: 0, upd: 0;
       cfuNq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQi_info" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQi_info:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQi_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const SfupV_srt+176;
 },
 _cfuNp() //  []
         { []
         }
     {offset
       cfuNp: // global
           R1 = Data.Maybe.fromJust1_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfuNp_info" {
     block_cfuNp_info:
         const _cfuNp;
         const 0;
         const 4294967326;
         const SfupV_srt+176;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:12.689046933 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQr_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQr_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQr_info;
 },
 GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQr_entry() //  [R2, R3,
                                                           R4, R5]
         { []
         }
     {offset
       cfuNQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfuNR; else goto cfuNS;
       cfuNR: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQr_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfuNS: // global
           I64[Sp - 16] = block_cfuNN_info;
           R1 = R5;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ufuNW; else goto cfuNO;
       ufuNW: // global
           call _cfuNN() args: 0, res: 0, upd: 0;
       cfuNO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQr_info" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQr_info:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQr_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cfuNN() //  []
         { []
         }
     {offset
       cfuNN: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfuNN_info" {
     block_cfuNN_info:
         const _cfuNN;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:12.694529744 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQ_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQ_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQ_info;
 },
 GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQ_entry() //  [R2, R3]
         { []
         }
     {offset
       cfuOe: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfuOf; else goto cfuOg;
       cfuOf: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQ_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfuOg: // global
           I64[Sp - 8] = block_cfuOb_info;
           R1 = R3;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufuOk; else goto cfuOc;
       ufuOk: // global
           call _cfuOb() args: 0, res: 0, upd: 0;
       cfuOc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQ_info" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQ_info:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQ_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cfuOb() //  []
         { []
         }
     {offset
       cfuOb: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfuOb_info" {
     block_cfuOb_info:
         const _cfuOb;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:12.700284113 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation3_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation3_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation3_info;
 },
 GHC.Exts.$fDataSpecConstrAnnotation3_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cfuOE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfuOF; else goto cfuOG;
       cfuOF: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exts.$fDataSpecConstrAnnotation3_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfuOG: // global
           I64[Sp - 16] = block_cfuOB_info;
           R1 = R5;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ufuOK; else goto cfuOC;
       ufuOK: // global
           call _cfuOB() args: 0, res: 0, upd: 0;
       cfuOC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Exts.$fDataSpecConstrAnnotation3_info" {
     GHC.Exts.$fDataSpecConstrAnnotation3_info:
         const GHC.Exts.$fDataSpecConstrAnnotation3_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cfuOB() //  []
         { []
         }
     {offset
       cfuOB: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfuOB_info" {
     block_cfuOB_info:
         const _cfuOB;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:12.706220096 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation4_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation4_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation4_info;
 },
 GHC.Exts.$fDataSpecConstrAnnotation4_entry() //  [R3]
         { []
         }
     {offset
       cfuOZ: // global
           R1 = R3 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Exts.$fDataSpecConstrAnnotation4_info" {
     GHC.Exts.$fDataSpecConstrAnnotation4_info:
         const GHC.Exts.$fDataSpecConstrAnnotation4_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:12.709858141 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation_$cdataCast2_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cdataCast2_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cdataCast2_info;
 },
 GHC.Exts.$fDataSpecConstrAnnotation_$cdataCast2_entry() //  []
         { []
         }
     {offset
       cfuPc: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Exts.$fDataSpecConstrAnnotation_$cdataCast2_info" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cdataCast2_info:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cdataCast2_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:12.716199094 UTC

[section ""data" . GHC.Exts.$w$cgmapMo_closure" {
     GHC.Exts.$w$cgmapMo_closure:
         const GHC.Exts.$w$cgmapMo_info;
 },
 lvl3_sfunX_entry() //  [R1]
         { []
         }
     {offset
       cfuPt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfuPu; else goto cfuPv;
       cfuPu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfuPv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mzero_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl3_sfunX_info" {
     lvl3_sfunX_info:
         const lvl3_sfunX_entry;
         const 1;
         const 16;
 },
 sat_sfuo6_entry() //  [R1, R2]
         { []
         }
     {offset
       cfuPI: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfuPJ; else goto cfuPK;
       cfuPJ: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfuPK: // global
           I64[Sp - 24] = block_cfuPF_info;
           _sfunX::P64 = P64[R1 + 7];
           _sfunY::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _sfunX::P64;
           P64[Sp - 8] = _sfunY::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufuQ2; else goto cfuPG;
       ufuQ2: // global
           call _cfuPF(R1) args: 0, res: 0, upd: 0;
       cfuPG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfuo6_info" {
     sat_sfuo6_info:
         const sat_sfuo6_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cfuPF() //  [R1]
         { []
         }
     {offset
       cfuPF: // global
           I64[Sp - 8] = block_cfuPN_info;
           _sfuo3::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sfuo3::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufuQ1; else goto cfuPP;
       ufuQ1: // global
           call _cfuPN(R1) args: 0, res: 0, upd: 0;
       cfuPP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfuPF_info" {
     block_cfuPF_info:
         const _cfuPF;
         const 2;
         const 30;
 },
 _cfuPN() //  [R1]
         { []
         }
     {offset
       cfuPN: // global
           if (R1 & 7 == 1) goto cfuPV; else goto cfuPZ;
       cfuPV: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cfuPZ: // global
           R2 = P64[Sp + 24];
           I64[Sp + 16] = stg_ap_p_info;
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfuPN_info" {
     block_cfuPN_info:
         const _cfuPN;
         const 3;
         const 30;
 },
 sat_sfuo0_entry() //  [R1]
         { []
         }
     {offset
       cfuQe: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfuQf; else goto cfuQg;
       cfuQf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfuQg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cfuQ7_info;
           _sfunY::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _sfunY::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ufuQn; else goto cfuQ8;
       ufuQn: // global
           call _cfuQ7(R1) args: 0, res: 0, upd: 0;
       cfuQ8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfuo0_info" {
     sat_sfuo0_info:
         const sat_sfuo0_entry;
         const 2;
         const 18;
 },
 _cfuQ7() //  [R1]
         { []
         }
     {offset
       cfuQ7: // global
           _sfunY::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cfuQb; else goto cfuQc;
       cfuQb: // global
           R2 = _sfunY::P64;
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = GHC.Exts.$fDataSpecConstrAnnotation2_closure+1;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
       cfuQc: // global
           R2 = _sfunY::P64;
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = GHC.Exts.$fDataSpecConstrAnnotation1_closure+1;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cfuQ7_info" {
     block_cfuQ7_info:
         const _cfuQ7;
         const 1;
         const 30;
 },
 GHC.Exts.$w$cgmapMo_entry() //  [R2, R3]
         { []
         }
     {offset
       cfuQo: // global
           _sfunW::P64 = R3;
           _sfunV::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cfuQp; else goto cfuQq;
       cfuQq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfuQs; else goto cfuQr;
       cfuQs: // global
           HpAlloc = 24;
           goto cfuQp;
       cfuQp: // global
           R3 = _sfunW::P64;
           R2 = _sfunV::P64;
           R1 = GHC.Exts.$w$cgmapMo_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfuQr: // global
           I64[Hp - 16] = lvl3_sfunX_info;
           P64[Hp] = _sfunV::P64;
           I64[Sp - 24] = block_cfuPw_info;
           R2 = _sfunV::P64;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = _sfunW::P64;
           Sp = Sp - 24;
           call GHC.Base.$p2MonadPlus_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Exts.$w$cgmapMo_info" {
     GHC.Exts.$w$cgmapMo_info:
         const GHC.Exts.$w$cgmapMo_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cfuPw() //  [R1]
         { []
         }
     {offset
       cfuPw: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfuQv; else goto cfuQu;
       cfuQv: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfuQu: // global
           I64[Hp - 48] = sat_sfuo6_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = R1;
           I64[Hp - 24] = sat_sfuo0_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 8] = Hp - 24;
           P64[Sp + 16] = Hp - 47;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfuPw_info" {
     block_cfuPw_info:
         const _cfuPw;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:12.732356223 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation_$cgmapMo_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cgmapMo_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapMo_info;
 },
 GHC.Exts.$fDataSpecConstrAnnotation_$cgmapMo_entry() //  [R2, R4]
         { []
         }
     {offset
       cfuRv: // global
           R3 = R4;
           R2 = R2;
           call GHC.Exts.$w$cgmapMo_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Exts.$fDataSpecConstrAnnotation_$cgmapMo_info" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cgmapMo_info:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapMo_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:12.735692815 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation_closure:
         const Data.Data.C:Data_con_info;
         const GHC.Exts.$fDataSpecConstrAnnotation5_closure;
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgfoldl_closure+3;
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgunfold_closure+3;
         const GHC.Exts.$fDataSpecConstrAnnotation_$ctoConstr_closure+1;
         const GHC.Exts.$fDataSpecConstrAnnotation_$cdataTypeOf_closure+1;
         const GHC.Exts.$fDataSpecConstrAnnotation_$cdataCast1_closure+2;
         const GHC.Exts.$fDataSpecConstrAnnotation_$cdataCast2_closure+2;
         const GHC.Exts.$fDataSpecConstrAnnotation4_closure+2;
         const GHC.Exts.$fDataSpecConstrAnnotation3_closure+4;
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQr_closure+4;
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQ_closure+2;
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQi_closure+3;
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapM_closure+3;
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapMp_closure+3;
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapMo_closure+3;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:12.738244145 UTC

[section ""cstring" . GHC.Exts.$tcIsList3_bytes" {
     GHC.Exts.$tcIsList3_bytes:
         I8[] [73,115,76,105,115,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:12.739937142 UTC

[section ""data" . GHC.Exts.$tcIsList2_closure" {
     GHC.Exts.$tcIsList2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exts.$tcIsList3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:12.74206234 UTC

[section ""data" . GHC.Exts.$tcIsList_closure" {
     GHC.Exts.$tcIsList_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Exts.$trModule_closure+1;
         const GHC.Exts.$tcIsList2_closure+1;
         const GHC.Exts.$tcIsList1_closure+4;
         const 17963880945977000500;
         const 13985778898022155754;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:12.744441373 UTC

[section ""data" . GHC.Exts.C:IsList_closure" {
     GHC.Exts.C:IsList_closure:
         const GHC.Exts.C:IsList_info;
 },
 GHC.Exts.C:IsList_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfuRL: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfuRP; else goto cfuRO;
       cfuRP: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exts.C:IsList_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfuRO: // global
           I64[Hp - 24] = GHC.Exts.C:IsList_con_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Exts.C:IsList_info" {
     GHC.Exts.C:IsList_info:
         const GHC.Exts.C:IsList_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:12.748039916 UTC

[section ""data" . GHC.Exts.NoSpecConstr_closure" {
     GHC.Exts.NoSpecConstr_closure:
         const GHC.Exts.NoSpecConstr_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:12.749727011 UTC

[section ""data" . GHC.Exts.ForceSpecConstr_closure" {
     GHC.Exts.ForceSpecConstr_closure:
         const GHC.Exts.ForceSpecConstr_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:12.751628142 UTC

[section ""cstring" . ifuRZ_str" {
     ifuRZ_str:
         I8[] [98,97,115,101,58,71,72,67,46,69,120,116,115,46,67,58,73,115,76,105,115,116]
 },
 GHC.Exts.C:IsList_con_entry() //  [R1]
         { []
         }
     {offset
       cfuRY: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Exts.C:IsList_con_info" {
     GHC.Exts.C:IsList_con_info:
         const GHC.Exts.C:IsList_con_entry;
         const 3;
         const 1;
         const ifuRZ_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:12.755064696 UTC

[section ""relreadonly" . GHC.Exts.SpecConstrAnnotation_closure_tbl" {
     GHC.Exts.SpecConstrAnnotation_closure_tbl:
         const GHC.Exts.NoSpecConstr_closure+1;
         const GHC.Exts.ForceSpecConstr_closure+2;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:12.757026754 UTC

[section ""cstring" . ifuS7_str" {
     ifuS7_str:
         I8[] [98,97,115,101,58,71,72,67,46,69,120,116,115,46,78,111,83,112,101,99,67,111,110,115,116,114]
 },
 GHC.Exts.NoSpecConstr_con_entry() //  [R1]
         { []
         }
     {offset
       cfuS6: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Exts.NoSpecConstr_con_info" {
     GHC.Exts.NoSpecConstr_con_info:
         const GHC.Exts.NoSpecConstr_con_entry;
         const 4294967296;
         const 3;
         const ifuS7_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:12.760346247 UTC

[section ""cstring" . ifuSe_str" {
     ifuSe_str:
         I8[] [98,97,115,101,58,71,72,67,46,69,120,116,115,46,70,111,114,99,101,83,112,101,99,67,111,110,115,116,114]
 },
 GHC.Exts.ForceSpecConstr_con_entry() //  [R1]
         { []
         }
     {offset
       cfuSd: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Exts.ForceSpecConstr_con_info" {
     GHC.Exts.ForceSpecConstr_con_info:
         const GHC.Exts.ForceSpecConstr_con_entry;
         const 4294967296;
         const 4294967299;
         const ifuSe_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:12.763572669 UTC

[section ""relreadonly" . SfupV_srt" {
     SfupV_srt:
         const GHC.Err.errorWithoutStackTrace_closure;
         const GHC.Exts.$fIsListNonEmpty_$cfromList_closure;
         const GHC.Exts.$fIsListNonEmpty2_closure;
         const Data.Data.$wlvl_closure;
         const GHC.Exts.$w$cgunfold_closure;
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgunfold_closure;
         const GHC.Exts.the_closure;
         const GHC.Exts.the1_closure;
         const GHC.Exts.the2_closure;
         const Debug.Trace.traceEventIO1_closure;
         const GHC.List.badHead_closure;
         const w2_rftgp_closure;
         const go61_rftgs_closure;
         const w4_rftgr_closure;
         const go1_rftgt_closure;
         const Data.Data.mkConstr1_closure;
         const $tSpecConstrAnnotation3_rftgx_closure;
         const GHC.Exts.$tSpecConstrAnnotation_closure;
         const GHC.Exts.$cNoSpecConstr_closure;
         const GHC.Exts.$cForceSpecConstr_closure;
         const GHC.Exts.$fDataSpecConstrAnnotation_$ctoConstr_closure;
         const Data.Typeable.Internal.$wmkTrCon_closure;
         const Data.Maybe.fromJust1_closure;
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQi_closure;
 }]

