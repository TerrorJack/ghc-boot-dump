
==================== Raw Cmm ====================
2018-03-16 15:56:03.64046106 UTC

[]


==================== Raw Cmm ====================
2018-03-16 15:56:03.642385949 UTC

[section ""data" . GHC.Real.$p1Fractional_closure" {
     GHC.Real.$p1Fractional_closure:
         const GHC.Real.$p1Fractional_info;
 },
 GHC.Real.$p1Fractional_entry() //  [R2]
         { []
         }
     {offset
       c1omf: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1omg; else goto c1omh;
       c1omg: // global
           R2 = R2;
           R1 = GHC.Real.$p1Fractional_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1omh: // global
           I64[Sp - 8] = block_c1omc_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1oml; else goto c1omd;
       u1oml: // global
           call _c1omc(R1) args: 0, res: 0, upd: 0;
       c1omd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$p1Fractional_info" {
     GHC.Real.$p1Fractional_info:
         const GHC.Real.$p1Fractional_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1omc() //  [R1]
         { []
         }
     {offset
       c1omc: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1omc_info" {
     block_c1omc_info:
         const _c1omc;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:03.648374654 UTC

[section ""data" . GHC.Real./_closure" {
     GHC.Real./_closure:
         const GHC.Real./_info;
 },
 GHC.Real./_entry() //  [R2]
         { []
         }
     {offset
       c1omE: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1omF; else goto c1omG;
       c1omF: // global
           R2 = R2;
           R1 = GHC.Real./_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1omG: // global
           I64[Sp - 8] = block_c1omB_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1omK; else goto c1omC;
       u1omK: // global
           call _c1omB(R1) args: 0, res: 0, upd: 0;
       c1omC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real./_info" {
     GHC.Real./_info:
         const GHC.Real./_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1omB() //  [R1]
         { []
         }
     {offset
       c1omB: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1omB_info" {
     block_c1omB_info:
         const _c1omB;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:03.653775092 UTC

[section ""data" . GHC.Real.recip_closure" {
     GHC.Real.recip_closure:
         const GHC.Real.recip_info;
 },
 GHC.Real.recip_entry() //  [R2]
         { []
         }
     {offset
       c1on1: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1on2; else goto c1on3;
       c1on2: // global
           R2 = R2;
           R1 = GHC.Real.recip_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1on3: // global
           I64[Sp - 8] = block_c1omY_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1on7; else goto c1omZ;
       u1on7: // global
           call _c1omY(R1) args: 0, res: 0, upd: 0;
       c1omZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.recip_info" {
     GHC.Real.recip_info:
         const GHC.Real.recip_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1omY() //  [R1]
         { []
         }
     {offset
       c1omY: // global
           R1 = P64[R1 + 23];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1omY_info" {
     block_c1omY_info:
         const _c1omY;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:03.659252955 UTC

[section ""data" . GHC.Real.fromRational_closure" {
     GHC.Real.fromRational_closure:
         const GHC.Real.fromRational_info;
 },
 GHC.Real.fromRational_entry() //  [R2]
         { []
         }
     {offset
       c1ono: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1onp; else goto c1onq;
       c1onp: // global
           R2 = R2;
           R1 = GHC.Real.fromRational_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1onq: // global
           I64[Sp - 8] = block_c1onl_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1onu; else goto c1onm;
       u1onu: // global
           call _c1onl(R1) args: 0, res: 0, upd: 0;
       c1onm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.fromRational_info" {
     GHC.Real.fromRational_info:
         const GHC.Real.fromRational_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1onl() //  [R1]
         { []
         }
     {offset
       c1onl: // global
           R1 = P64[R1 + 31];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1onl_info" {
     block_c1onl_info:
         const _c1onl;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:03.665661096 UTC

[section ""data" . GHC.Real.$p1Integral_closure" {
     GHC.Real.$p1Integral_closure:
         const GHC.Real.$p1Integral_info;
 },
 GHC.Real.$p1Integral_entry() //  [R2]
         { []
         }
     {offset
       c1onL: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1onM; else goto c1onN;
       c1onM: // global
           R2 = R2;
           R1 = GHC.Real.$p1Integral_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1onN: // global
           I64[Sp - 8] = block_c1onI_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1onR; else goto c1onJ;
       u1onR: // global
           call _c1onI(R1) args: 0, res: 0, upd: 0;
       c1onJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$p1Integral_info" {
     GHC.Real.$p1Integral_info:
         const GHC.Real.$p1Integral_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1onI() //  [R1]
         { []
         }
     {offset
       c1onI: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1onI_info" {
     block_c1onI_info:
         const _c1onI;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:03.671061797 UTC

[section ""data" . GHC.Real.$p2Integral_closure" {
     GHC.Real.$p2Integral_closure:
         const GHC.Real.$p2Integral_info;
 },
 GHC.Real.$p2Integral_entry() //  [R2]
         { []
         }
     {offset
       c1ooa: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1oob; else goto c1ooc;
       c1oob: // global
           R2 = R2;
           R1 = GHC.Real.$p2Integral_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1ooc: // global
           I64[Sp - 8] = block_c1oo7_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1oog; else goto c1oo8;
       u1oog: // global
           call _c1oo7(R1) args: 0, res: 0, upd: 0;
       c1oo8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$p2Integral_info" {
     GHC.Real.$p2Integral_info:
         const GHC.Real.$p2Integral_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1oo7() //  [R1]
         { []
         }
     {offset
       c1oo7: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1oo7_info" {
     block_c1oo7_info:
         const _c1oo7;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:03.676384743 UTC

[section ""data" . GHC.Real.quot_closure" {
     GHC.Real.quot_closure:
         const GHC.Real.quot_info;
 },
 GHC.Real.quot_entry() //  [R2]
         { []
         }
     {offset
       c1ooz: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1ooA; else goto c1ooB;
       c1ooA: // global
           R2 = R2;
           R1 = GHC.Real.quot_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1ooB: // global
           I64[Sp - 8] = block_c1oow_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1ooF; else goto c1oox;
       u1ooF: // global
           call _c1oow(R1) args: 0, res: 0, upd: 0;
       c1oox: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.quot_info" {
     GHC.Real.quot_info:
         const GHC.Real.quot_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1oow() //  [R1]
         { []
         }
     {offset
       c1oow: // global
           R1 = P64[R1 + 23];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1oow_info" {
     block_c1oow_info:
         const _c1oow;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:03.68178038 UTC

[section ""data" . GHC.Real.rem_closure" {
     GHC.Real.rem_closure:
         const GHC.Real.rem_info;
 },
 GHC.Real.rem_entry() //  [R2]
         { []
         }
     {offset
       c1ooW: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1ooX; else goto c1ooY;
       c1ooX: // global
           R2 = R2;
           R1 = GHC.Real.rem_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1ooY: // global
           I64[Sp - 8] = block_c1ooT_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1op2; else goto c1ooU;
       u1op2: // global
           call _c1ooT(R1) args: 0, res: 0, upd: 0;
       c1ooU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.rem_info" {
     GHC.Real.rem_info:
         const GHC.Real.rem_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1ooT() //  [R1]
         { []
         }
     {offset
       c1ooT: // global
           R1 = P64[R1 + 31];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1ooT_info" {
     block_c1ooT_info:
         const _c1ooT;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:03.687227771 UTC

[section ""data" . GHC.Real.div_closure" {
     GHC.Real.div_closure:
         const GHC.Real.div_info;
 },
 GHC.Real.div_entry() //  [R2]
         { []
         }
     {offset
       c1opj: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1opk; else goto c1opl;
       c1opk: // global
           R2 = R2;
           R1 = GHC.Real.div_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1opl: // global
           I64[Sp - 8] = block_c1opg_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1opp; else goto c1oph;
       u1opp: // global
           call _c1opg(R1) args: 0, res: 0, upd: 0;
       c1oph: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.div_info" {
     GHC.Real.div_info:
         const GHC.Real.div_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1opg() //  [R1]
         { []
         }
     {offset
       c1opg: // global
           R1 = P64[R1 + 39];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1opg_info" {
     block_c1opg_info:
         const _c1opg;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:03.693150802 UTC

[section ""data" . GHC.Real.mod_closure" {
     GHC.Real.mod_closure:
         const GHC.Real.mod_info;
 },
 GHC.Real.mod_entry() //  [R2]
         { []
         }
     {offset
       c1opG: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1opH; else goto c1opI;
       c1opH: // global
           R2 = R2;
           R1 = GHC.Real.mod_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1opI: // global
           I64[Sp - 8] = block_c1opD_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1opM; else goto c1opE;
       u1opM: // global
           call _c1opD(R1) args: 0, res: 0, upd: 0;
       c1opE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.mod_info" {
     GHC.Real.mod_info:
         const GHC.Real.mod_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1opD() //  [R1]
         { []
         }
     {offset
       c1opD: // global
           R1 = P64[R1 + 47];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1opD_info" {
     block_c1opD_info:
         const _c1opD;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:03.698531942 UTC

[section ""data" . GHC.Real.quotRem_closure" {
     GHC.Real.quotRem_closure:
         const GHC.Real.quotRem_info;
 },
 GHC.Real.quotRem_entry() //  [R2]
         { []
         }
     {offset
       c1oq3: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1oq4; else goto c1oq5;
       c1oq4: // global
           R2 = R2;
           R1 = GHC.Real.quotRem_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1oq5: // global
           I64[Sp - 8] = block_c1oq0_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1oq9; else goto c1oq1;
       u1oq9: // global
           call _c1oq0(R1) args: 0, res: 0, upd: 0;
       c1oq1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.quotRem_info" {
     GHC.Real.quotRem_info:
         const GHC.Real.quotRem_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1oq0() //  [R1]
         { []
         }
     {offset
       c1oq0: // global
           R1 = P64[R1 + 55];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1oq0_info" {
     block_c1oq0_info:
         const _c1oq0;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:03.703749481 UTC

[section ""data" . GHC.Real.divMod_closure" {
     GHC.Real.divMod_closure:
         const GHC.Real.divMod_info;
 },
 GHC.Real.divMod_entry() //  [R2]
         { []
         }
     {offset
       c1oqq: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1oqr; else goto c1oqs;
       c1oqr: // global
           R2 = R2;
           R1 = GHC.Real.divMod_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1oqs: // global
           I64[Sp - 8] = block_c1oqn_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1oqw; else goto c1oqo;
       u1oqw: // global
           call _c1oqn(R1) args: 0, res: 0, upd: 0;
       c1oqo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.divMod_info" {
     GHC.Real.divMod_info:
         const GHC.Real.divMod_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1oqn() //  [R1]
         { []
         }
     {offset
       c1oqn: // global
           R1 = P64[R1 + 63];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1oqn_info" {
     block_c1oqn_info:
         const _c1oqn;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:03.709082837 UTC

[section ""data" . GHC.Real.toInteger_closure" {
     GHC.Real.toInteger_closure:
         const GHC.Real.toInteger_info;
 },
 GHC.Real.toInteger_entry() //  [R2]
         { []
         }
     {offset
       c1oqN: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1oqO; else goto c1oqP;
       c1oqO: // global
           R2 = R2;
           R1 = GHC.Real.toInteger_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1oqP: // global
           I64[Sp - 8] = block_c1oqK_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1oqT; else goto c1oqL;
       u1oqT: // global
           call _c1oqK(R1) args: 0, res: 0, upd: 0;
       c1oqL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.toInteger_info" {
     GHC.Real.toInteger_info:
         const GHC.Real.toInteger_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1oqK() //  [R1]
         { []
         }
     {offset
       c1oqK: // global
           R1 = P64[R1 + 71];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1oqK_info" {
     block_c1oqK_info:
         const _c1oqK;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:03.71520178 UTC

[section ""data" . GHC.Real.$p1Real_closure" {
     GHC.Real.$p1Real_closure:
         const GHC.Real.$p1Real_info;
 },
 GHC.Real.$p1Real_entry() //  [R2]
         { []
         }
     {offset
       c1ora: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1orb; else goto c1orc;
       c1orb: // global
           R2 = R2;
           R1 = GHC.Real.$p1Real_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1orc: // global
           I64[Sp - 8] = block_c1or7_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1org; else goto c1or8;
       u1org: // global
           call _c1or7(R1) args: 0, res: 0, upd: 0;
       c1or8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$p1Real_info" {
     GHC.Real.$p1Real_info:
         const GHC.Real.$p1Real_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1or7() //  [R1]
         { []
         }
     {offset
       c1or7: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1or7_info" {
     block_c1or7_info:
         const _c1or7;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:03.721148988 UTC

[section ""data" . GHC.Real.$p2Real_closure" {
     GHC.Real.$p2Real_closure:
         const GHC.Real.$p2Real_info;
 },
 GHC.Real.$p2Real_entry() //  [R2]
         { []
         }
     {offset
       c1orz: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1orA; else goto c1orB;
       c1orA: // global
           R2 = R2;
           R1 = GHC.Real.$p2Real_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1orB: // global
           I64[Sp - 8] = block_c1orw_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1orF; else goto c1orx;
       u1orF: // global
           call _c1orw(R1) args: 0, res: 0, upd: 0;
       c1orx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$p2Real_info" {
     GHC.Real.$p2Real_info:
         const GHC.Real.$p2Real_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1orw() //  [R1]
         { []
         }
     {offset
       c1orw: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1orw_info" {
     block_c1orw_info:
         const _c1orw;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:03.72668049 UTC

[section ""data" . GHC.Real.toRational_closure" {
     GHC.Real.toRational_closure:
         const GHC.Real.toRational_info;
 },
 GHC.Real.toRational_entry() //  [R2]
         { []
         }
     {offset
       c1orY: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1orZ; else goto c1os0;
       c1orZ: // global
           R2 = R2;
           R1 = GHC.Real.toRational_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1os0: // global
           I64[Sp - 8] = block_c1orV_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1os4; else goto c1orW;
       u1os4: // global
           call _c1orV(R1) args: 0, res: 0, upd: 0;
       c1orW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.toRational_info" {
     GHC.Real.toRational_info:
         const GHC.Real.toRational_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1orV() //  [R1]
         { []
         }
     {offset
       c1orV: // global
           R1 = P64[R1 + 23];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1orV_info" {
     block_c1orV_info:
         const _c1orV;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:03.731905772 UTC

[section ""data" . GHC.Real.$p1RealFrac_closure" {
     GHC.Real.$p1RealFrac_closure:
         const GHC.Real.$p1RealFrac_info;
 },
 GHC.Real.$p1RealFrac_entry() //  [R2]
         { []
         }
     {offset
       c1osl: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1osm; else goto c1osn;
       c1osm: // global
           R2 = R2;
           R1 = GHC.Real.$p1RealFrac_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1osn: // global
           I64[Sp - 8] = block_c1osi_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1osr; else goto c1osj;
       u1osr: // global
           call _c1osi(R1) args: 0, res: 0, upd: 0;
       c1osj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$p1RealFrac_info" {
     GHC.Real.$p1RealFrac_info:
         const GHC.Real.$p1RealFrac_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1osi() //  [R1]
         { []
         }
     {offset
       c1osi: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1osi_info" {
     block_c1osi_info:
         const _c1osi;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:03.737473609 UTC

[section ""data" . GHC.Real.$p2RealFrac_closure" {
     GHC.Real.$p2RealFrac_closure:
         const GHC.Real.$p2RealFrac_info;
 },
 GHC.Real.$p2RealFrac_entry() //  [R2]
         { []
         }
     {offset
       c1osK: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1osL; else goto c1osM;
       c1osL: // global
           R2 = R2;
           R1 = GHC.Real.$p2RealFrac_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1osM: // global
           I64[Sp - 8] = block_c1osH_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1osQ; else goto c1osI;
       u1osQ: // global
           call _c1osH(R1) args: 0, res: 0, upd: 0;
       c1osI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$p2RealFrac_info" {
     GHC.Real.$p2RealFrac_info:
         const GHC.Real.$p2RealFrac_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1osH() //  [R1]
         { []
         }
     {offset
       c1osH: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1osH_info" {
     block_c1osH_info:
         const _c1osH;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:03.742799829 UTC

[section ""data" . GHC.Real.properFraction_closure" {
     GHC.Real.properFraction_closure:
         const GHC.Real.properFraction_info;
 },
 GHC.Real.properFraction_entry() //  [R2]
         { []
         }
     {offset
       c1ot9: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1ota; else goto c1otb;
       c1ota: // global
           R2 = R2;
           R1 = GHC.Real.properFraction_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1otb: // global
           I64[Sp - 8] = block_c1ot6_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1otf; else goto c1ot7;
       u1otf: // global
           call _c1ot6(R1) args: 0, res: 0, upd: 0;
       c1ot7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.properFraction_info" {
     GHC.Real.properFraction_info:
         const GHC.Real.properFraction_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1ot6() //  [R1]
         { []
         }
     {offset
       c1ot6: // global
           R1 = P64[R1 + 23];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1ot6_info" {
     block_c1ot6_info:
         const _c1ot6;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:03.748451055 UTC

[section ""data" . GHC.Real.truncate_closure" {
     GHC.Real.truncate_closure:
         const GHC.Real.truncate_info;
 },
 GHC.Real.truncate_entry() //  [R2]
         { []
         }
     {offset
       c1otw: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1otx; else goto c1oty;
       c1otx: // global
           R2 = R2;
           R1 = GHC.Real.truncate_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1oty: // global
           I64[Sp - 8] = block_c1ott_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1otC; else goto c1otu;
       u1otC: // global
           call _c1ott(R1) args: 0, res: 0, upd: 0;
       c1otu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.truncate_info" {
     GHC.Real.truncate_info:
         const GHC.Real.truncate_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1ott() //  [R1]
         { []
         }
     {offset
       c1ott: // global
           R1 = P64[R1 + 31];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1ott_info" {
     block_c1ott_info:
         const _c1ott;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:03.753588674 UTC

[section ""data" . GHC.Real.round_closure" {
     GHC.Real.round_closure:
         const GHC.Real.round_info;
 },
 GHC.Real.round_entry() //  [R2]
         { []
         }
     {offset
       c1otT: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1otU; else goto c1otV;
       c1otU: // global
           R2 = R2;
           R1 = GHC.Real.round_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1otV: // global
           I64[Sp - 8] = block_c1otQ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1otZ; else goto c1otR;
       u1otZ: // global
           call _c1otQ(R1) args: 0, res: 0, upd: 0;
       c1otR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.round_info" {
     GHC.Real.round_info:
         const GHC.Real.round_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1otQ() //  [R1]
         { []
         }
     {offset
       c1otQ: // global
           R1 = P64[R1 + 39];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1otQ_info" {
     block_c1otQ_info:
         const _c1otQ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:03.759059522 UTC

[section ""data" . GHC.Real.ceiling_closure" {
     GHC.Real.ceiling_closure:
         const GHC.Real.ceiling_info;
 },
 GHC.Real.ceiling_entry() //  [R2]
         { []
         }
     {offset
       c1oug: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1ouh; else goto c1oui;
       c1ouh: // global
           R2 = R2;
           R1 = GHC.Real.ceiling_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1oui: // global
           I64[Sp - 8] = block_c1oud_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1oum; else goto c1oue;
       u1oum: // global
           call _c1oud(R1) args: 0, res: 0, upd: 0;
       c1oue: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.ceiling_info" {
     GHC.Real.ceiling_info:
         const GHC.Real.ceiling_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1oud() //  [R1]
         { []
         }
     {offset
       c1oud: // global
           R1 = P64[R1 + 47];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1oud_info" {
     block_c1oud_info:
         const _c1oud;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:03.764326229 UTC

[section ""data" . GHC.Real.floor_closure" {
     GHC.Real.floor_closure:
         const GHC.Real.floor_info;
 },
 GHC.Real.floor_entry() //  [R2]
         { []
         }
     {offset
       c1ouD: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1ouE; else goto c1ouF;
       c1ouE: // global
           R2 = R2;
           R1 = GHC.Real.floor_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1ouF: // global
           I64[Sp - 8] = block_c1ouA_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1ouJ; else goto c1ouB;
       u1ouJ: // global
           call _c1ouA(R1) args: 0, res: 0, upd: 0;
       c1ouB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.floor_info" {
     GHC.Real.floor_info:
         const GHC.Real.floor_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1ouA() //  [R1]
         { []
         }
     {offset
       c1ouA: // global
           R1 = P64[R1 + 55];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1ouA_info" {
     block_c1ouA_info:
         const _c1ouA;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:03.770187973 UTC

[section ""data" . GHC.Real.$W:%_closure" {
     GHC.Real.$W:%_closure:
         const GHC.Real.$W:%_info;
 },
 GHC.Real.$W:%_entry() //  [R2, R3]
         { []
         }
     {offset
       c1ov2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1ov3; else goto c1ov4;
       c1ov3: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$W:%_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1ov4: // global
           I64[Sp - 16] = block_c1ouX_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$W:%_info" {
     GHC.Real.$W:%_info:
         const GHC.Real.$W:%_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1ouX() //  [R1]
         { []
         }
     {offset
       c1ouX: // global
           I64[Sp] = block_c1ouZ_info;
           _s1j7b::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s1j7b::P64;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1ouX_info" {
     block_c1ouX_info:
         const _c1ouX;
         const 1;
         const 30;
 },
 _c1ouZ() //  [R1]
         { []
         }
     {offset
       c1ouZ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1ov8; else goto c1ov7;
       c1ov8: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1ov7: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1ouZ_info" {
     block_c1ouZ_info:
         const _c1ouZ;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:03.778670127 UTC

[section ""data" . GHC.Real.$fOrdRatio_$s$c<_closure" {
     GHC.Real.$fOrdRatio_$s$c<_closure:
         const GHC.Real.$fOrdRatio_$s$c<_info;
         const 0;
 },
 GHC.Real.$fOrdRatio_$s$c<_entry() //  [R2, R3]
         { []
         }
     {offset
       c1ovt: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1ovK; else goto c1ovL;
       c1ovK: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fOrdRatio_$s$c<_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1ovL: // global
           I64[Sp - 16] = block_c1ovq_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1ovV; else goto c1ovr;
       u1ovV: // global
           call _c1ovq(R1) args: 0, res: 0, upd: 0;
       c1ovr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fOrdRatio_$s$c<_info" {
     GHC.Real.$fOrdRatio_$s$c<_info:
         const GHC.Real.$fOrdRatio_$s$c<_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S1jKw_srt;
 },
 _c1ovq() //  [R1]
         { []
         }
     {offset
       c1ovq: // global
           I64[Sp - 8] = block_c1ovw_info;
           _s1j7g::P64 = P64[R1 + 7];
           _s1j7h::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s1j7h::P64;
           P64[Sp + 8] = _s1j7g::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1ovU; else goto c1ovx;
       u1ovU: // global
           call _c1ovw(R1) args: 0, res: 0, upd: 0;
       c1ovx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1ovq_info" {
     block_c1ovq_info:
         const _c1ovq;
         const 1;
         const 4294967326;
         const S1jKw_srt;
 },
 _c1ovw() //  [R1]
         { []
         }
     {offset
       c1ovw: // global
           I64[Sp] = block_c1ovB_info;
           R3 = P64[Sp + 8];
           R2 = P64[R1 + 7];
           P64[Sp + 8] = P64[R1 + 15];
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1ovw_info" {
     block_c1ovw_info:
         const _c1ovw;
         const 2;
         const 4294967326;
         const S1jKw_srt;
 },
 _c1ovB() //  [R1]
         { []
         }
     {offset
       c1ovB: // global
           _s1j7k::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1ovF_info;
           R3 = _s1j7k::P64;
           R2 = P64[Sp + 16];
           P64[Sp + 16] = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1ovB_info" {
     block_c1ovB_info:
         const _c1ovB;
         const 2;
         const 4294967326;
         const S1jKw_srt;
 },
 _c1ovF() //  [R1]
         { []
         }
     {offset
       c1ovF: // global
           _s1j7m::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1ovJ_info;
           R3 = _s1j7m::P64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.ltInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1ovF_info" {
     block_c1ovF_info:
         const _c1ovF;
         const 1;
         const 30;
 },
 _c1ovJ() //  [R1]
         { []
         }
     {offset
       c1ovJ: // global
           R1 = I64[(R1 << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1ovJ_info" {
     block_c1ovJ_info:
         const _c1ovJ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:03.793067962 UTC

[section ""data" . GHC.Real.$fEnumRatio_$s$c<=_closure" {
     GHC.Real.$fEnumRatio_$s$c<=_closure:
         const GHC.Real.$fEnumRatio_$s$c<=_info;
         const 0;
 },
 GHC.Real.$fEnumRatio_$s$c<=_entry() //  [R2, R3]
         { []
         }
     {offset
       c1ows: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1owJ; else goto c1owK;
       c1owJ: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fEnumRatio_$s$c<=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1owK: // global
           I64[Sp - 16] = block_c1owp_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1owU; else goto c1owq;
       u1owU: // global
           call _c1owp(R1) args: 0, res: 0, upd: 0;
       c1owq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fEnumRatio_$s$c<=_info" {
     GHC.Real.$fEnumRatio_$s$c<=_info:
         const GHC.Real.$fEnumRatio_$s$c<=_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const S1jKw_srt;
 },
 _c1owp() //  [R1]
         { []
         }
     {offset
       c1owp: // global
           I64[Sp - 8] = block_c1owv_info;
           _s1j7r::P64 = P64[R1 + 7];
           _s1j7s::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s1j7s::P64;
           P64[Sp + 8] = _s1j7r::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1owT; else goto c1oww;
       u1owT: // global
           call _c1owv(R1) args: 0, res: 0, upd: 0;
       c1oww: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1owp_info" {
     block_c1owp_info:
         const _c1owp;
         const 1;
         const 4294967326;
         const S1jKw_srt;
 },
 _c1owv() //  [R1]
         { []
         }
     {offset
       c1owv: // global
           I64[Sp] = block_c1owA_info;
           R3 = P64[Sp + 8];
           R2 = P64[R1 + 7];
           P64[Sp + 8] = P64[R1 + 15];
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1owv_info" {
     block_c1owv_info:
         const _c1owv;
         const 2;
         const 4294967326;
         const S1jKw_srt;
 },
 _c1owA() //  [R1]
         { []
         }
     {offset
       c1owA: // global
           _s1j7v::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1owE_info;
           R3 = _s1j7v::P64;
           R2 = P64[Sp + 16];
           P64[Sp + 16] = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1owA_info" {
     block_c1owA_info:
         const _c1owA;
         const 2;
         const 4294967326;
         const S1jKw_srt;
 },
 _c1owE() //  [R1]
         { []
         }
     {offset
       c1owE: // global
           _s1j7x::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1owI_info;
           R3 = _s1j7x::P64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.leInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1owE_info" {
     block_c1owE_info:
         const _c1owE;
         const 1;
         const 30;
 },
 _c1owI() //  [R1]
         { []
         }
     {offset
       c1owI: // global
           R1 = I64[(R1 << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1owI_info" {
     block_c1owI_info:
         const _c1owI;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:03.806430479 UTC

[section ""data" . GHC.Real.$w$s$ccompare_closure" {
     GHC.Real.$w$s$ccompare_closure:
         const GHC.Real.$w$s$ccompare_info;
         const 0;
 },
 GHC.Real.$w$s$ccompare_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c1oxq: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1oxr; else goto c1oxs;
       c1oxr: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$w$s$ccompare_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1oxs: // global
           I64[Sp - 40] = block_c1oxo_info;
           _s1j7A::P64 = R3;
           R3 = R4;
           _s1j7z::P64 = R2;
           R2 = R2;
           P64[Sp - 32] = _s1j7z::P64;
           P64[Sp - 24] = _s1j7A::P64;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$w$s$ccompare_info" {
     GHC.Real.$w$s$ccompare_info:
         const GHC.Real.$w$s$ccompare_entry;
         const 0;
         const 38654705678;
         const 17179869208;
         const S1jKw_srt;
 },
 _c1oxo() //  [R1]
         { []
         }
     {offset
       c1oxo: // global
           if (R1 == 1) goto c1oy3; else goto u1oye;
       c1oy3: // global
           I64[Sp] = block_c1oy2_info;
           R3 = P64[Sp + 32];
           R2 = P64[Sp + 16];
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
       u1oye: // global
           Sp = Sp + 8;
           call _s1j7E() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1oxo_info" {
     block_c1oxo_info:
         const _c1oxo;
         const 4;
         const 4294967326;
         const S1jKw_srt;
 },
 _c1oy2() //  [R1]
         { []
         }
     {offset
       c1oy2: // global
           if (R1 == 1) goto c1oyd; else goto u1oyf;
       c1oyd: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u1oyf: // global
           Sp = Sp + 8;
           call _s1j7E() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1oy2_info" {
     block_c1oy2_info:
         const _c1oy2;
         const 4;
         const 4294967326;
         const S1jKw_srt;
 },
 _s1j7E() //  []
         { []
         }
     {offset
       s1j7E: // global
           I64[Sp - 8] = block_c1oxB_info;
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 16];
           Sp = Sp - 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c1oxB() //  [R1]
         { []
         }
     {offset
       c1oxB: // global
           I64[Sp + 24] = block_c1oxF_info;
           R3 = P64[Sp + 32];
           R2 = P64[Sp + 8];
           P64[Sp + 32] = R1;
           Sp = Sp + 24;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1oxB_info" {
     block_c1oxB_info:
         const _c1oxB;
         const 388;
         const 4294967326;
         const S1jKw_srt;
 },
 _c1oxF() //  [R1]
         { []
         }
     {offset
       c1oxF: // global
           _s1j7G::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1oxL_info;
           R3 = _s1j7G::P64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.leInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1oxF_info" {
     block_c1oxF_info:
         const _c1oxF;
         const 1;
         const 30;
 },
 _c1oxL() //  [R1]
         { []
         }
     {offset
       c1oxL: // global
           if (R1 == 1) goto c1oxW; else goto c1oxS;
       c1oxW: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1oxS: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1oxL_info" {
     block_c1oxL_info:
         const _c1oxL;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:03.819270144 UTC

[section ""data" . GHC.Real.$fEnumRatio_$s$ccompare_closure" {
     GHC.Real.$fEnumRatio_$s$ccompare_closure:
         const GHC.Real.$fEnumRatio_$s$ccompare_info;
         const 0;
 },
 GHC.Real.$fEnumRatio_$s$ccompare_entry() //  [R2, R3]
         { []
         }
     {offset
       c1oyO: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1oyS; else goto c1oyT;
       c1oyS: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fEnumRatio_$s$ccompare_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1oyT: // global
           I64[Sp - 16] = block_c1oyL_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1oz1; else goto c1oyM;
       u1oz1: // global
           call _c1oyL(R1) args: 0, res: 0, upd: 0;
       c1oyM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fEnumRatio_$s$ccompare_info" {
     GHC.Real.$fEnumRatio_$s$ccompare_info:
         const GHC.Real.$fEnumRatio_$s$ccompare_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S1jKw_srt+24;
 },
 _c1oyL() //  [R1]
         { []
         }
     {offset
       c1oyL: // global
           I64[Sp - 8] = block_c1oyR_info;
           _s1j7N::P64 = P64[R1 + 7];
           _s1j7O::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s1j7O::P64;
           P64[Sp + 8] = _s1j7N::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1oz0; else goto c1oyV;
       u1oz0: // global
           call _c1oyR(R1) args: 0, res: 0, upd: 0;
       c1oyV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1oyL_info" {
     block_c1oyL_info:
         const _c1oyL;
         const 1;
         const 4294967326;
         const S1jKw_srt+24;
 },
 _c1oyR() //  [R1]
         { []
         }
     {offset
       c1oyR: // global
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call GHC.Real.$w$s$ccompare_entry(R5,
                                             R4,
                                             R3,
                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1oyR_info" {
     block_c1oyR_info:
         const _c1oyR;
         const 2;
         const 4294967326;
         const S1jKw_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:03.827326259 UTC

[section ""data" . GHC.Real.$fEnumRatio_$s$c>=_closure" {
     GHC.Real.$fEnumRatio_$s$c>=_closure:
         const GHC.Real.$fEnumRatio_$s$c>=_info;
         const 0;
 },
 GHC.Real.$fEnumRatio_$s$c>=_entry() //  [R2, R3]
         { []
         }
     {offset
       c1ozm: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1ozq; else goto c1ozr;
       c1ozq: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fEnumRatio_$s$c>=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1ozr: // global
           I64[Sp - 16] = block_c1ozj_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1ozL; else goto c1ozk;
       u1ozL: // global
           call _c1ozj(R1) args: 0, res: 0, upd: 0;
       c1ozk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fEnumRatio_$s$c>=_info" {
     GHC.Real.$fEnumRatio_$s$c>=_info:
         const GHC.Real.$fEnumRatio_$s$c>=_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const S1jKw_srt+24;
 },
 _c1ozj() //  [R1]
         { []
         }
     {offset
       c1ozj: // global
           I64[Sp - 8] = block_c1ozp_info;
           _s1j7V::P64 = P64[R1 + 7];
           _s1j7W::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s1j7W::P64;
           P64[Sp + 8] = _s1j7V::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1ozK; else goto c1ozt;
       u1ozK: // global
           call _c1ozp(R1) args: 0, res: 0, upd: 0;
       c1ozt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1ozj_info" {
     block_c1ozj_info:
         const _c1ozj;
         const 1;
         const 4294967326;
         const S1jKw_srt+24;
 },
 _c1ozp() //  [R1]
         { []
         }
     {offset
       c1ozp: // global
           _s1j7V::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c1ozx_info;
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = P64[Sp + 8];
           R2 = _s1j7V::P64;
           Sp = Sp + 16;
           call GHC.Real.$w$s$ccompare_entry(R5,
                                             R4,
                                             R3,
                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1ozp_info" {
     block_c1ozp_info:
         const _c1ozp;
         const 2;
         const 4294967326;
         const S1jKw_srt+24;
 },
 _c1ozx() //  [R1]
         { []
         }
     {offset
       c1ozx: // global
           if (R1 & 7 == 1) goto c1ozI; else goto c1ozE;
       c1ozI: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1ozE: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1ozx_info" {
     block_c1ozx_info:
         const _c1ozx;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:03.837769876 UTC

[section ""data" . GHC.Real.$fOrdRatio_$s$c>_closure" {
     GHC.Real.$fOrdRatio_$s$c>_closure:
         const GHC.Real.$fOrdRatio_$s$c>_info;
         const 0;
 },
 GHC.Real.$fOrdRatio_$s$c>_entry() //  [R2, R3]
         { []
         }
     {offset
       c1oAd: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1oAh; else goto c1oAi;
       c1oAh: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fOrdRatio_$s$c>_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1oAi: // global
           I64[Sp - 16] = block_c1oAa_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1oAC; else goto c1oAb;
       u1oAC: // global
           call _c1oAa(R1) args: 0, res: 0, upd: 0;
       c1oAb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fOrdRatio_$s$c>_info" {
     GHC.Real.$fOrdRatio_$s$c>_info:
         const GHC.Real.$fOrdRatio_$s$c>_entry;
         const 0;
         const 38654705678;
         const 8589934607;
         const S1jKw_srt+24;
 },
 _c1oAa() //  [R1]
         { []
         }
     {offset
       c1oAa: // global
           I64[Sp - 8] = block_c1oAg_info;
           _s1j84::P64 = P64[R1 + 7];
           _s1j85::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s1j85::P64;
           P64[Sp + 8] = _s1j84::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1oAB; else goto c1oAk;
       u1oAB: // global
           call _c1oAg(R1) args: 0, res: 0, upd: 0;
       c1oAk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1oAa_info" {
     block_c1oAa_info:
         const _c1oAa;
         const 1;
         const 4294967326;
         const S1jKw_srt+24;
 },
 _c1oAg() //  [R1]
         { []
         }
     {offset
       c1oAg: // global
           _s1j84::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c1oAo_info;
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = P64[Sp + 8];
           R2 = _s1j84::P64;
           Sp = Sp + 16;
           call GHC.Real.$w$s$ccompare_entry(R5,
                                             R4,
                                             R3,
                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1oAg_info" {
     block_c1oAg_info:
         const _c1oAg;
         const 2;
         const 4294967326;
         const S1jKw_srt+24;
 },
 _c1oAo() //  [R1]
         { []
         }
     {offset
       c1oAo: // global
           if (R1 & 7 == 3) goto c1oAz; else goto c1oAv;
       c1oAz: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1oAv: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1oAo_info" {
     block_c1oAo_info:
         const _c1oAo;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:03.847799205 UTC

[section ""data" . GHC.Real.$fOrdRatio_$s$cmin_closure" {
     GHC.Real.$fOrdRatio_$s$cmin_closure:
         const GHC.Real.$fOrdRatio_$s$cmin_info;
         const 0;
 },
 GHC.Real.$fOrdRatio_$s$cmin_entry() //  [R2, R3]
         { []
         }
     {offset
       c1oB4: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1oBh; else goto c1oBi;
       c1oBh: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fOrdRatio_$s$cmin_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1oBi: // global
           I64[Sp - 16] = block_c1oB1_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1oBC; else goto c1oB2;
       u1oBC: // global
           call _c1oB1(R1) args: 0, res: 0, upd: 0;
       c1oB2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fOrdRatio_$s$cmin_info" {
     GHC.Real.$fOrdRatio_$s$cmin_info:
         const GHC.Real.$fOrdRatio_$s$cmin_entry;
         const 0;
         const 554050781198;
         const 8589934607;
         const S1jKw_srt;
 },
 _c1oB1() //  [R1]
         { []
         }
     {offset
       c1oB1: // global
           I64[Sp - 16] = block_c1oB7_info;
           _s1j8c::P64 = R1;
           _s1j8d::P64 = P64[R1 + 7];
           _s1j8e::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp - 8] = _s1j8e::P64;
           P64[Sp] = _s1j8d::P64;
           P64[Sp + 8] = _s1j8c::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1oBB; else goto c1oB8;
       u1oBB: // global
           call _c1oB7(R1) args: 0, res: 0, upd: 0;
       c1oB8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1oB1_info" {
     block_c1oB1_info:
         const _c1oB1;
         const 1;
         const 4294967326;
         const S1jKw_srt;
 },
 _c1oB7() //  [R1]
         { []
         }
     {offset
       c1oB7: // global
           I64[Sp - 8] = block_c1oBc_info;
           R3 = P64[Sp + 8];
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           P64[Sp + 8] = R1;
           Sp = Sp - 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1oB7_info" {
     block_c1oB7_info:
         const _c1oB7;
         const 3;
         const 4294967326;
         const S1jKw_srt;
 },
 _c1oBc() //  [R1]
         { []
         }
     {offset
       c1oBc: // global
           _s1j8h::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1oBg_info;
           R3 = _s1j8h::P64;
           R2 = P64[Sp + 24];
           P64[Sp + 24] = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1oBc_info" {
     block_c1oBc_info:
         const _c1oBc;
         const 4;
         const 4294967326;
         const S1jKw_srt;
 },
 _c1oBg() //  [R1]
         { []
         }
     {offset
       c1oBg: // global
           I64[Sp] = block_c1oBp_info;
           R3 = P64[Sp + 16];
           R2 = R1;
           call GHC.Integer.Type.leInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1oBg_info" {
     block_c1oBg_info:
         const _c1oBg;
         const 3;
         const 30;
 },
 _c1oBp() //  [R1]
         { []
         }
     {offset
       c1oBp: // global
           if (R1 == 1) goto c1oBA; else goto c1oBw;
       c1oBA: // global
           R1 = P64[Sp + 24] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c1oBw: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1oBp_info" {
     block_c1oBp_info:
         const _c1oBp;
         const 131;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:03.861093847 UTC

[section ""data" . GHC.Real.$fOrdRatio_$s$cmax_closure" {
     GHC.Real.$fOrdRatio_$s$cmax_closure:
         const GHC.Real.$fOrdRatio_$s$cmax_info;
         const 0;
 },
 GHC.Real.$fOrdRatio_$s$cmax_entry() //  [R2, R3]
         { []
         }
     {offset
       c1oCb: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1oCo; else goto c1oCp;
       c1oCo: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fOrdRatio_$s$cmax_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1oCp: // global
           I64[Sp - 16] = block_c1oC8_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1oCJ; else goto c1oC9;
       u1oCJ: // global
           call _c1oC8(R1) args: 0, res: 0, upd: 0;
       c1oC9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fOrdRatio_$s$cmax_info" {
     GHC.Real.$fOrdRatio_$s$cmax_info:
         const GHC.Real.$fOrdRatio_$s$cmax_entry;
         const 0;
         const 1103806595086;
         const 8589934607;
         const S1jKw_srt;
 },
 _c1oC8() //  [R1]
         { []
         }
     {offset
       c1oC8: // global
           I64[Sp - 16] = block_c1oCe_info;
           _s1j8n::P64 = R1;
           _s1j8o::P64 = P64[R1 + 7];
           _s1j8p::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp - 8] = _s1j8p::P64;
           P64[Sp] = _s1j8o::P64;
           P64[Sp + 8] = _s1j8n::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1oCI; else goto c1oCf;
       u1oCI: // global
           call _c1oCe(R1) args: 0, res: 0, upd: 0;
       c1oCf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1oC8_info" {
     block_c1oC8_info:
         const _c1oC8;
         const 1;
         const 4294967326;
         const S1jKw_srt;
 },
 _c1oCe() //  [R1]
         { []
         }
     {offset
       c1oCe: // global
           I64[Sp - 8] = block_c1oCj_info;
           R3 = P64[Sp + 8];
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           P64[Sp + 8] = R1;
           Sp = Sp - 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1oCe_info" {
     block_c1oCe_info:
         const _c1oCe;
         const 3;
         const 4294967326;
         const S1jKw_srt;
 },
 _c1oCj() //  [R1]
         { []
         }
     {offset
       c1oCj: // global
           _s1j8s::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1oCn_info;
           R3 = _s1j8s::P64;
           R2 = P64[Sp + 24];
           P64[Sp + 24] = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1oCj_info" {
     block_c1oCj_info:
         const _c1oCj;
         const 4;
         const 4294967326;
         const S1jKw_srt;
 },
 _c1oCn() //  [R1]
         { []
         }
     {offset
       c1oCn: // global
           I64[Sp] = block_c1oCw_info;
           R3 = P64[Sp + 16];
           R2 = R1;
           call GHC.Integer.Type.leInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1oCn_info" {
     block_c1oCn_info:
         const _c1oCn;
         const 3;
         const 30;
 },
 _c1oCw() //  [R1]
         { []
         }
     {offset
       c1oCw: // global
           if (R1 == 1) goto c1oCH; else goto c1oCD;
       c1oCH: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c1oCD: // global
           R1 = P64[Sp + 24] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1oCw_info" {
     block_c1oCw_info:
         const _c1oCw;
         const 131;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:03.873111479 UTC

[section ""data" . GHC.Real.$fFractionalRatio_$s$cnegate_closure" {
     GHC.Real.$fFractionalRatio_$s$cnegate_closure:
         const GHC.Real.$fFractionalRatio_$s$cnegate_info;
 },
 GHC.Real.$fFractionalRatio_$s$cnegate_entry() //  [R2]
         { []
         }
     {offset
       c1oDi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1oDq; else goto c1oDr;
       c1oDq: // global
           R2 = R2;
           R1 = GHC.Real.$fFractionalRatio_$s$cnegate_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1oDr: // global
           I64[Sp - 8] = block_c1oDf_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1oDw; else goto c1oDg;
       u1oDw: // global
           call _c1oDf(R1) args: 0, res: 0, upd: 0;
       c1oDg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fFractionalRatio_$s$cnegate_info" {
     GHC.Real.$fFractionalRatio_$s$cnegate_info:
         const GHC.Real.$fFractionalRatio_$s$cnegate_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1oDf() //  [R1]
         { []
         }
     {offset
       c1oDf: // global
           I64[Sp - 8] = block_c1oDl_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Integer.Type.negateInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1oDf_info" {
     block_c1oDf_info:
         const _c1oDf;
         const 0;
         const 30;
 },
 _c1oDl() //  [R1]
         { []
         }
     {offset
       c1oDl: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1oDv; else goto c1oDu;
       c1oDv: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1oDu: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1oDl_info" {
     block_c1oDl_info:
         const _c1oDl;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:03.880553562 UTC

[section ""data" . GHC.Real.$fFractionalRatio_$s$cabs_closure" {
     GHC.Real.$fFractionalRatio_$s$cabs_closure:
         const GHC.Real.$fFractionalRatio_$s$cabs_info;
 },
 GHC.Real.$fFractionalRatio_$s$cabs_entry() //  [R2]
         { []
         }
     {offset
       c1oDT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1oE1; else goto c1oE2;
       c1oE1: // global
           R2 = R2;
           R1 = GHC.Real.$fFractionalRatio_$s$cabs_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1oE2: // global
           I64[Sp - 8] = block_c1oDQ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1oE7; else goto c1oDR;
       u1oE7: // global
           call _c1oDQ(R1) args: 0, res: 0, upd: 0;
       c1oDR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fFractionalRatio_$s$cabs_info" {
     GHC.Real.$fFractionalRatio_$s$cabs_info:
         const GHC.Real.$fFractionalRatio_$s$cabs_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1oDQ() //  [R1]
         { []
         }
     {offset
       c1oDQ: // global
           I64[Sp - 8] = block_c1oDW_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Integer.Type.absInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1oDQ_info" {
     block_c1oDQ_info:
         const _c1oDQ;
         const 0;
         const 30;
 },
 _c1oDW() //  [R1]
         { []
         }
     {offset
       c1oDW: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1oE6; else goto c1oE5;
       c1oE6: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1oE5: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1oDW_info" {
     block_c1oDW_info:
         const _c1oDW;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:03.887438779 UTC

[section ""data" . sat_s1j8G_closure" {
     sat_s1j8G_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:03.889039529 UTC

[section ""data" . sat_s1j8H_closure" {
     sat_s1j8H_closure:
         const :_con_info;
         const sat_s1j8G_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:03.891449221 UTC

[section ""data" . GHC.Real.$fEnumRatio1_closure" {
     GHC.Real.$fEnumRatio1_closure:
         const GHC.Real.$fEnumRatio1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Real.$fEnumRatio1_entry() //  [R1]
         { []
         }
     {offset
       c1oEv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1oEw; else goto c1oEx;
       c1oEw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1oEx: // global
           (_c1oEs::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c1oEs::I64 == 0) goto c1oEu; else goto c1oEt;
       c1oEu: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c1oEt: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c1oEs::I64;
           R3 = sat_s1j8H_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Real.$fEnumRatio1_info" {
     GHC.Real.$fEnumRatio1_info:
         const GHC.Real.$fEnumRatio1_entry;
         const 0;
         const 4294967317;
         const S1jKw_srt+72;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:03.896143746 UTC

[section ""data" . GHC.Real.$fFractionalRatio_$s$csignum_closure" {
     GHC.Real.$fFractionalRatio_$s$csignum_closure:
         const GHC.Real.$fFractionalRatio_$s$csignum_info;
         const 0;
 },
 GHC.Real.$fFractionalRatio_$s$csignum_entry() //  [R2]
         { []
         }
     {offset
       c1oEM: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1oEU; else goto c1oEV;
       c1oEU: // global
           R2 = R2;
           R1 = GHC.Real.$fFractionalRatio_$s$csignum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1oEV: // global
           I64[Sp - 8] = block_c1oEJ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1oF0; else goto c1oEK;
       u1oF0: // global
           call _c1oEJ(R1) args: 0, res: 0, upd: 0;
       c1oEK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fFractionalRatio_$s$csignum_info" {
     GHC.Real.$fFractionalRatio_$s$csignum_info:
         const GHC.Real.$fFractionalRatio_$s$csignum_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S1jKw_srt+80;
 },
 _c1oEJ() //  [R1]
         { []
         }
     {offset
       c1oEJ: // global
           I64[Sp] = block_c1oEP_info;
           R2 = P64[R1 + 7];
           call GHC.Integer.Type.signumInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1oEJ_info" {
     block_c1oEJ_info:
         const _c1oEJ;
         const 0;
         const 4294967326;
         const S1jKw_srt+80;
 },
 _c1oEP() //  [R1]
         { []
         }
     {offset
       c1oEP: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1oEZ; else goto c1oEY;
       c1oEZ: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1oEY: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = GHC.Real.$fEnumRatio1_closure;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1oEP_info" {
     block_c1oEP_info:
         const _c1oEP;
         const 0;
         const 4294967326;
         const S1jKw_srt+80;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:03.903428491 UTC

[section ""data" . GHC.Real.$fFractionalRatio_$s$cfromInteger_closure" {
     GHC.Real.$fFractionalRatio_$s$cfromInteger_closure:
         const GHC.Real.$fFractionalRatio_$s$cfromInteger_info;
         const 0;
 },
 GHC.Real.$fFractionalRatio_$s$cfromInteger_entry() //  [R2]
         { []
         }
     {offset
       c1oFl: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1oFp; else goto c1oFq;
       c1oFp: // global
           R2 = R2;
           R1 = GHC.Real.$fFractionalRatio_$s$cfromInteger_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1oFq: // global
           I64[Sp - 8] = block_c1oFi_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1oFu; else goto c1oFj;
       u1oFu: // global
           call _c1oFi(R1) args: 0, res: 0, upd: 0;
       c1oFj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fFractionalRatio_$s$cfromInteger_info" {
     GHC.Real.$fFractionalRatio_$s$cfromInteger_info:
         const GHC.Real.$fFractionalRatio_$s$cfromInteger_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const S1jKw_srt+80;
 },
 _c1oFi() //  [R1]
         { []
         }
     {offset
       c1oFi: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1oFt; else goto c1oFs;
       c1oFt: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1oFs: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = GHC.Real.$fEnumRatio1_closure;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1oFi_info" {
     block_c1oFi_info:
         const _c1oFi;
         const 0;
         const 4294967326;
         const S1jKw_srt+80;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:03.908555265 UTC

[section ""data" . GHC.Real.$fRealInteger_closure" {
     GHC.Real.$fRealInteger_closure:
         const GHC.Real.C:Real_con_info;
         const GHC.Num.$fNumInteger_closure;
         const GHC.Integer.Type.$fOrdInteger_closure;
         const GHC.Real.$fFractionalRatio_$s$cfromInteger_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:03.912714113 UTC

[section ""data" . GHC.Real.$fIntegralInt_$ctoInteger_closure" {
     GHC.Real.$fIntegralInt_$ctoInteger_closure:
         const GHC.Real.$fIntegralInt_$ctoInteger_info;
 },
 GHC.Real.$fIntegralInt_$ctoInteger_entry() //  [R2]
         { []
         }
     {offset
       c1oFN: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1oFO; else goto c1oFP;
       c1oFO: // global
           R2 = R2;
           R1 = GHC.Real.$fIntegralInt_$ctoInteger_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1oFP: // global
           I64[Sp - 8] = block_c1oFK_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1oFT; else goto c1oFL;
       u1oFT: // global
           call _c1oFK(R1) args: 0, res: 0, upd: 0;
       c1oFL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fIntegralInt_$ctoInteger_info" {
     GHC.Real.$fIntegralInt_$ctoInteger_info:
         const GHC.Real.$fIntegralInt_$ctoInteger_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1oFK() //  [R1]
         { []
         }
     {offset
       c1oFK: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1oFK_info" {
     block_c1oFK_info:
         const _c1oFK;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:03.918627678 UTC

[section ""data" . GHC.Real.$fEnumRatio_$ctoRational_closure" {
     GHC.Real.$fEnumRatio_$ctoRational_closure:
         const GHC.Real.$fEnumRatio_$ctoRational_info;
         const 0;
 },
 GHC.Real.$fEnumRatio_$ctoRational_entry() //  [R2]
         { []
         }
     {offset
       c1oGa: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1oGi; else goto c1oGj;
       c1oGi: // global
           R2 = R2;
           R1 = GHC.Real.$fEnumRatio_$ctoRational_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1oGj: // global
           I64[Sp - 8] = block_c1oG7_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1oGo; else goto c1oG8;
       u1oGo: // global
           call _c1oG7(R1) args: 0, res: 0, upd: 0;
       c1oG8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fEnumRatio_$ctoRational_info" {
     GHC.Real.$fEnumRatio_$ctoRational_info:
         const GHC.Real.$fEnumRatio_$ctoRational_entry;
         const 0;
         const 38654705678;
         const 4294967301;
         const S1jKw_srt+80;
 },
 _c1oG7() //  [R1]
         { []
         }
     {offset
       c1oG7: // global
           I64[Sp] = block_c1oGd_info;
           R2 = I64[R1 + 7];
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1oG7_info" {
     block_c1oG7_info:
         const _c1oG7;
         const 0;
         const 4294967326;
         const S1jKw_srt+80;
 },
 _c1oGd() //  [R1]
         { []
         }
     {offset
       c1oGd: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1oGn; else goto c1oGm;
       c1oGn: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1oGm: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = GHC.Real.$fEnumRatio1_closure;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1oGd_info" {
     block_c1oGd_info:
         const _c1oGd;
         const 0;
         const 4294967326;
         const S1jKw_srt+80;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:03.924943825 UTC

[section ""data" . GHC.Real.$fRealInt_closure" {
     GHC.Real.$fRealInt_closure:
         const GHC.Real.C:Real_con_info;
         const GHC.Num.$fNumInt_closure;
         const GHC.Classes.$fOrdInt_closure;
         const GHC.Real.$fEnumRatio_$ctoRational_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:03.92742673 UTC

[section ""data" . GHC.Real.$fIntegralWord_$ctoInteger_closure" {
     GHC.Real.$fIntegralWord_$ctoInteger_closure:
         const GHC.Real.$fIntegralWord_$ctoInteger_info;
 },
 GHC.Real.$fIntegralWord_$ctoInteger_entry() //  [R2]
         { []
         }
     {offset
       c1oGK: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1oGL; else goto c1oGM;
       c1oGL: // global
           R2 = R2;
           R1 = GHC.Real.$fIntegralWord_$ctoInteger_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1oGM: // global
           I64[Sp - 8] = block_c1oGH_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1oGQ; else goto c1oGI;
       u1oGQ: // global
           call _c1oGH(R1) args: 0, res: 0, upd: 0;
       c1oGI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fIntegralWord_$ctoInteger_info" {
     GHC.Real.$fIntegralWord_$ctoInteger_info:
         const GHC.Real.$fIntegralWord_$ctoInteger_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1oGH() //  [R1]
         { []
         }
     {offset
       c1oGH: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Integer.Type.wordToInteger_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1oGH_info" {
     block_c1oGH_info:
         const _c1oGH;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:03.932462476 UTC

[section ""data" . GHC.Real.$fIntegralInteger_$ctoInteger_closure" {
     GHC.Real.$fIntegralInteger_$ctoInteger_closure:
         const GHC.Real.$fIntegralInteger_$ctoInteger_info;
 },
 GHC.Real.$fIntegralInteger_$ctoInteger_entry() //  [R2]
         { []
         }
     {offset
       c1oH4: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fIntegralInteger_$ctoInteger_info" {
     GHC.Real.$fIntegralInteger_$ctoInteger_info:
         const GHC.Real.$fIntegralInteger_$ctoInteger_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:03.937133859 UTC

[section ""data" . GHC.Real.$fEqRatio_$s$c==_closure" {
     GHC.Real.$fEqRatio_$s$c==_closure:
         const GHC.Real.$fEqRatio_$s$c==_info;
 },
 GHC.Real.$fEqRatio_$s$c==_entry() //  [R2, R3]
         { []
         }
     {offset
       c1oHk: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1oHo; else goto c1oHp;
       c1oHo: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fEqRatio_$s$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1oHp: // global
           I64[Sp - 16] = block_c1oHh_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1oHN; else goto c1oHi;
       u1oHN: // global
           call _c1oHh(R1) args: 0, res: 0, upd: 0;
       c1oHi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fEqRatio_$s$c==_info" {
     GHC.Real.$fEqRatio_$s$c==_info:
         const GHC.Real.$fEqRatio_$s$c==_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1oHh() //  [R1]
         { []
         }
     {offset
       c1oHh: // global
           I64[Sp - 8] = block_c1oHn_info;
           _s1j93::P64 = P64[R1 + 7];
           _s1j94::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s1j94::P64;
           P64[Sp + 8] = _s1j93::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1oHM; else goto c1oHr;
       u1oHM: // global
           call _c1oHn(R1) args: 0, res: 0, upd: 0;
       c1oHr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1oHh_info" {
     block_c1oHh_info:
         const _c1oHh;
         const 1;
         const 30;
 },
 _c1oHn() //  [R1]
         { []
         }
     {offset
       c1oHn: // global
           I64[Sp] = block_c1oHv_info;
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 16];
           P64[Sp + 16] = P64[R1 + 15];
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1oHn_info" {
     block_c1oHn_info:
         const _c1oHn;
         const 2;
         const 30;
 },
 _c1oHv() //  [R1]
         { []
         }
     {offset
       c1oHv: // global
           if (R1 == 1) goto c1oHH; else goto c1oHC;
       c1oHH: // global
           _s1j97::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c1oHF_info;
           R3 = _s1j97::P64;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
       c1oHC: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1oHv_info" {
     block_c1oHv_info:
         const _c1oHv;
         const 2;
         const 30;
 },
 _c1oHF() //  [R1]
         { []
         }
     {offset
       c1oHF: // global
           R1 = I64[(R1 << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1oHF_info" {
     block_c1oHF_info:
         const _c1oHF;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:03.948901246 UTC

[section ""data" . GHC.Real.$fEqRatio_$c==_closure" {
     GHC.Real.$fEqRatio_$c==_closure:
         const GHC.Real.$fEqRatio_$c==_info;
 },
 GHC.Real.$fEqRatio_$c==_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1oIi: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c1oIm; else goto c1oIn;
       c1oIm: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fEqRatio_$c==_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1oIn: // global
           I64[Sp - 24] = block_c1oIf_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u1oIH; else goto c1oIg;
       u1oIH: // global
           call _c1oIf(R1) args: 0, res: 0, upd: 0;
       c1oIg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fEqRatio_$c==_info" {
     GHC.Real.$fEqRatio_$c==_info:
         const GHC.Real.$fEqRatio_$c==_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c1oIf() //  [R1]
         { []
         }
     {offset
       c1oIf: // global
           I64[Sp - 8] = block_c1oIl_info;
           _s1j9e::P64 = P64[R1 + 7];
           _s1j9f::P64 = P64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp] = _s1j9f::P64;
           P64[Sp + 16] = _s1j9e::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1oIG; else goto c1oIp;
       u1oIG: // global
           call _c1oIl(R1) args: 0, res: 0, upd: 0;
       c1oIp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1oIf_info" {
     block_c1oIf_info:
         const _c1oIf;
         const 2;
         const 30;
 },
 _c1oIl() //  [R1]
         { []
         }
     {offset
       c1oIl: // global
           I64[Sp] = block_c1oIt_info;
           R2 = P64[Sp + 16];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 24];
           P64[Sp - 8] = P64[R1 + 7];
           P64[Sp + 24] = P64[R1 + 15];
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1oIl_info" {
     block_c1oIl_info:
         const _c1oIl;
         const 3;
         const 30;
 },
 _c1oIt() //  [R1]
         { []
         }
     {offset
       c1oIt: // global
           if (R1 & 7 == 1) goto c1oIA; else goto c1oIE;
       c1oIA: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1oIE: // global
           R2 = P64[Sp + 16];
           _s1j9f::P64 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_pp_info;
           P64[Sp + 16] = _s1j9f::P64;
           Sp = Sp + 8;
           call GHC.Classes.==_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1oIt_info" {
     block_c1oIt_info:
         const _c1oIt;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:03.961123096 UTC

[section ""data" . GHC.Real.$fOrdRatio_$s$c/=_closure" {
     GHC.Real.$fOrdRatio_$s$c/=_closure:
         const GHC.Real.$fOrdRatio_$s$c/=_info;
 },
 GHC.Real.$fOrdRatio_$s$c/=_entry() //  [R2, R3]
         { []
         }
     {offset
       c1oJb: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1oJf; else goto c1oJg;
       c1oJf: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fOrdRatio_$s$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1oJg: // global
           I64[Sp - 16] = block_c1oJ8_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1oJM; else goto c1oJ9;
       u1oJM: // global
           call _c1oJ8(R1) args: 0, res: 0, upd: 0;
       c1oJ9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fOrdRatio_$s$c/=_info" {
     GHC.Real.$fOrdRatio_$s$c/=_info:
         const GHC.Real.$fOrdRatio_$s$c/=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1oJ8() //  [R1]
         { []
         }
     {offset
       c1oJ8: // global
           I64[Sp - 8] = block_c1oJe_info;
           _s1j9n::P64 = P64[R1 + 7];
           _s1j9o::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s1j9o::P64;
           P64[Sp + 8] = _s1j9n::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1oJL; else goto c1oJi;
       u1oJL: // global
           call _c1oJe(R1) args: 0, res: 0, upd: 0;
       c1oJi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1oJ8_info" {
     block_c1oJ8_info:
         const _c1oJ8;
         const 1;
         const 30;
 },
 _c1oJe() //  [R1]
         { []
         }
     {offset
       c1oJe: // global
           I64[Sp] = block_c1oJm_info;
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 16];
           P64[Sp + 16] = P64[R1 + 15];
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1oJe_info" {
     block_c1oJe_info:
         const _c1oJe;
         const 2;
         const 30;
 },
 _c1oJm() //  [R1]
         { []
         }
     {offset
       c1oJm: // global
           if (R1 == 1) goto c1oJy; else goto u1oJJ;
       c1oJy: // global
           _s1j9r::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c1oJw_info;
           R3 = _s1j9r::P64;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
       u1oJJ: // global
           Sp = Sp + 24;
           call _c1oJE() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1oJm_info" {
     block_c1oJm_info:
         const _c1oJm;
         const 2;
         const 30;
 },
 _c1oJw() //  [R1]
         { []
         }
     {offset
       c1oJw: // global
           if (R1 == 1) goto c1oJI; else goto u1oJK;
       c1oJI: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u1oJK: // global
           Sp = Sp + 8;
           call _c1oJE() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1oJw_info" {
     block_c1oJw_info:
         const _c1oJw;
         const 0;
         const 30;
 },
 _c1oJE() //  []
         { []
         }
     {offset
       c1oJE: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:03.980684164 UTC

[section ""data" . GHC.Real.$fEqRatio_$c/=_closure" {
     GHC.Real.$fEqRatio_$c/=_closure:
         const GHC.Real.$fEqRatio_$c/=_info;
 },
 GHC.Real.$fEqRatio_$c/=_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1oKk: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c1oKo; else goto c1oKp;
       c1oKo: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fEqRatio_$c/=_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1oKp: // global
           I64[Sp - 24] = block_c1oKh_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u1oKX; else goto c1oKi;
       u1oKX: // global
           call _c1oKh(R1) args: 0, res: 0, upd: 0;
       c1oKi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fEqRatio_$c/=_info" {
     GHC.Real.$fEqRatio_$c/=_info:
         const GHC.Real.$fEqRatio_$c/=_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c1oKh() //  [R1]
         { []
         }
     {offset
       c1oKh: // global
           I64[Sp - 8] = block_c1oKn_info;
           _s1j9y::P64 = P64[R1 + 7];
           _s1j9z::P64 = P64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp] = _s1j9z::P64;
           P64[Sp + 16] = _s1j9y::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1oKW; else goto c1oKr;
       u1oKW: // global
           call _c1oKn(R1) args: 0, res: 0, upd: 0;
       c1oKr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1oKh_info" {
     block_c1oKh_info:
         const _c1oKh;
         const 2;
         const 30;
 },
 _c1oKn() //  [R1]
         { []
         }
     {offset
       c1oKn: // global
           I64[Sp] = block_c1oKv_info;
           R2 = P64[Sp + 16];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 24];
           P64[Sp - 8] = P64[R1 + 7];
           P64[Sp + 24] = P64[R1 + 15];
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1oKn_info" {
     block_c1oKn_info:
         const _c1oKn;
         const 3;
         const 30;
 },
 _c1oKv() //  [R1]
         { []
         }
     {offset
       c1oKv: // global
           if (R1 & 7 == 1) goto u1oKU; else goto c1oKH;
       u1oKU: // global
           Sp = Sp + 32;
           call _c1oKN() args: 0, res: 0, upd: 0;
       c1oKH: // global
           _s1j9C::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_c1oKF_info;
           R2 = P64[Sp + 16];
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 16] = _s1j9C::P64;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1oKv_info" {
     block_c1oKv_info:
         const _c1oKv;
         const 3;
         const 30;
 },
 _c1oKF() //  [R1]
         { []
         }
     {offset
       c1oKF: // global
           if (R1 & 7 == 1) goto u1oKV; else goto c1oKR;
       u1oKV: // global
           Sp = Sp + 8;
           call _c1oKN() args: 0, res: 0, upd: 0;
       c1oKR: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1oKF_info" {
     block_c1oKF_info:
         const _c1oKF;
         const 0;
         const 30;
 },
 _c1oKN() //  []
         { []
         }
     {offset
       c1oKN: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:03.99739634 UTC

[section ""data" . GHC.Real.$fOrdRatio_$s$fEqRatio_closure" {
     GHC.Real.$fOrdRatio_$s$fEqRatio_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Real.$fEqRatio_$s$c==_closure+2;
         const GHC.Real.$fOrdRatio_$s$c/=_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.001982367 UTC

[section ""data" . GHC.Real.$fEqRatio_closure" {
     GHC.Real.$fEqRatio_closure:
         const GHC.Real.$fEqRatio_info;
 },
 sat_s1j9H_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c1oLE: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Real.$fEqRatio_$c/=_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1j9H_info" {
     sat_s1j9H_info:
         const sat_s1j9H_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s1j9G_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c1oLM: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Real.$fEqRatio_$c==_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1j9G_info" {
     sat_s1j9G_info:
         const sat_s1j9G_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 GHC.Real.$fEqRatio_entry() //  [R2]
         { []
         }
     {offset
       c1oLQ: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c1oLU; else goto c1oLT;
       c1oLU: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = GHC.Real.$fEqRatio_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1oLT: // global
           I64[Hp - 48] = sat_s1j9H_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = sat_s1j9G_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = GHC.Classes.C:Eq_con_info;
           P64[Hp - 8] = Hp - 30;
           P64[Hp] = Hp - 46;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fEqRatio_info" {
     GHC.Real.$fEqRatio_info:
         const GHC.Real.$fEqRatio_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.010200946 UTC

[section ""data" . GHC.Real.$fOrdRatio_$s$fOrdRatio_closure" {
     GHC.Real.$fOrdRatio_$s$fOrdRatio_closure:
         const GHC.Classes.C:Ord_con_info;
         const GHC.Real.$fOrdRatio_$s$fEqRatio_closure+1;
         const GHC.Real.$fEnumRatio_$s$ccompare_closure+2;
         const GHC.Real.$fOrdRatio_$s$c<_closure+2;
         const GHC.Real.$fEnumRatio_$s$c<=_closure+2;
         const GHC.Real.$fOrdRatio_$s$c>_closure+2;
         const GHC.Real.$fEnumRatio_$s$c>=_closure+2;
         const GHC.Real.$fOrdRatio_$s$cmax_closure+2;
         const GHC.Real.$fOrdRatio_$s$cmin_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.014421988 UTC

[section ""data" . GHC.Real.$fOrdRatio_$cp1Ord_closure" {
     GHC.Real.$fOrdRatio_$cp1Ord_closure:
         const GHC.Real.$fOrdRatio_$cp1Ord_info;
 },
 sat_s1j9L_entry() //  [R1]
         { []
         }
     {offset
       c1oMj: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1oMn; else goto c1oMo;
       c1oMn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1oMo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c1oMh_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1j9L_info" {
     sat_s1j9L_info:
         const sat_s1j9L_entry;
         const 1;
         const 16;
 },
 _c1oMh() //  [R1]
         { []
         }
     {offset
       c1oMh: // global
           I64[Sp] = block_c1oMm_info;
           R2 = R1;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c1oMh_info" {
     block_c1oMh_info:
         const _c1oMh;
         const 0;
         const 30;
 },
 _c1oMm() //  [R1]
         { []
         }
     {offset
       c1oMm: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Classes.$p1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1oMm_info" {
     block_c1oMm_info:
         const _c1oMm;
         const 0;
         const 30;
 },
 GHC.Real.$fOrdRatio_$cp1Ord_entry() //  [R2]
         { []
         }
     {offset
       c1oMu: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1oMy; else goto c1oMx;
       c1oMy: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Real.$fOrdRatio_$cp1Ord_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1oMx: // global
           I64[Hp - 16] = sat_s1j9L_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call GHC.Real.$fEqRatio_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fOrdRatio_$cp1Ord_info" {
     GHC.Real.$fOrdRatio_$cp1Ord_info:
         const GHC.Real.$fOrdRatio_$cp1Ord_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.022313049 UTC

[section ""data" . GHC.Real.even1_closure" {
     GHC.Real.even1_closure:
         const GHC.Real.even1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Real.even1_entry() //  [R1]
         { []
         }
     {offset
       c1oMT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1oMU; else goto c1oMV;
       c1oMU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1oMV: // global
           (_c1oMQ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c1oMQ::I64 == 0) goto c1oMS; else goto c1oMR;
       c1oMS: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c1oMR: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c1oMQ::I64;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Real.even1_info" {
     GHC.Real.even1_info:
         const GHC.Real.even1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.029726875 UTC

[section ""data" . GHC.Real.$dmfloor_closure" {
     GHC.Real.$dmfloor_closure:
         const GHC.Real.$dmfloor_info;
         const 0;
 },
 ds_s1j9P_entry() //  [R1]
         { []
         }
     {offset
       c1oNb: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1oNc; else goto c1oNd;
       c1oNc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1oNd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call GHC.Real.properFraction_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds_s1j9P_info" {
     ds_s1j9P_info:
         const ds_s1j9P_entry;
         const 3;
         const 15;
 },
 sat_s1j9X_entry() //  [R1]
         { []
         }
     {offset
       c1oNo: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1oNp; else goto c1oNq;
       c1oNp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1oNq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c1oNm_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1j9X_info" {
     sat_s1j9X_info:
         const sat_s1j9X_entry;
         const 1;
         const 4294967312;
         const S1jKw_srt+112;
 },
 _c1oNm() //  [R1]
         { []
         }
     {offset
       c1oNm: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = GHC.Real.even1_closure;
           Sp = Sp - 8;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1oNm_info" {
     block_c1oNm_info:
         const _c1oNm;
         const 0;
         const 4294967326;
         const S1jKw_srt+112;
 },
 sat_s1ja8_entry() //  [R1]
         { []
         }
     {offset
       c1oNQ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1oNR; else goto c1oNS;
       c1oNR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1oNS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Real.$fEnumRatio1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1ja8_info" {
     sat_s1ja8_info:
         const sat_s1ja8_entry;
         const 1;
         const 4294967312;
         const S1jKw_srt+80;
 },
 GHC.Real.$dmfloor_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1oNT: // global
           _s1j9O::P64 = R4;
           _s1j9N::P64 = R3;
           _s1j9M::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto c1oNU; else goto c1oNV;
       c1oNV: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c1oNX; else goto c1oNW;
       c1oNX: // global
           HpAlloc = 40;
           goto c1oNU;
       c1oNU: // global
           R4 = _s1j9O::P64;
           R3 = _s1j9N::P64;
           R2 = _s1j9M::P64;
           R1 = GHC.Real.$dmfloor_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1oNW: // global
           I64[Hp - 32] = ds_s1j9P_info;
           P64[Hp - 16] = _s1j9M::P64;
           P64[Hp - 8] = _s1j9N::P64;
           P64[Hp] = _s1j9O::P64;
           I64[Sp - 24] = block_c1oNe_info;
           R2 = _s1j9M::P64;
           P64[Sp - 16] = Hp - 32;
           P64[Sp - 8] = _s1j9N::P64;
           Sp = Sp - 24;
           call GHC.Real.$p1RealFrac_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$dmfloor_info" {
     GHC.Real.$dmfloor_info:
         const GHC.Real.$dmfloor_entry;
         const 0;
         const 210453397518;
         const 12884901911;
         const S1jKw_srt+80;
 },
 _c1oNe() //  [R1]
         { []
         }
     {offset
       c1oNe: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c1oO0; else goto c1oNZ;
       c1oO0: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1oNZ: // global
           I64[Hp - 40] = sat_s1j9X_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = stg_sel_1_upd_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp - 16] = block_c1oNv_info;
           R2 = R1;
           P64[Sp - 8] = Hp - 16;
           P64[Sp] = Hp - 40;
           Sp = Sp - 16;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1oNe_info" {
     block_c1oNe_info:
         const _c1oNe;
         const 2;
         const 73014444062;
         const S1jKw_srt+80;
 },
 _c1oNv() //  [R1]
         { []
         }
     {offset
       c1oNv: // global
           _c1oNi::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c1oNz_info;
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = P64[Sp + 8];
           P64[Sp + 8] = _c1oNi::P64;
           Sp = Sp - 8;
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1oNv_info" {
     block_c1oNv_info:
         const _c1oNv;
         const 4;
         const 4294967326;
         const S1jKw_srt+80;
 },
 _c1oNz() //  [R1]
         { []
         }
     {offset
       c1oNz: // global
           if (R1 & 7 == 1) goto c1oO6; else goto c1oOd;
       c1oO6: // global
           I64[Sp + 16] = block_c1oO3_info;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto u1oOk; else goto c1oO7;
       u1oOk: // global
           call _c1oO3(R1) args: 0, res: 0, upd: 0;
       c1oO7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c1oOd: // global
           I64[Sp] = block_c1oNE_info;
           R2 = P64[Sp + 16];
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1oNz_info" {
     block_c1oNz_info:
         const _c1oNz;
         const 2;
         const 4294967326;
         const S1jKw_srt+80;
 },
 _c1oO3() //  [R1]
         { []
         }
     {offset
       c1oO3: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1oO3_info" {
     block_c1oO3_info:
         const _c1oO3;
         const 0;
         const 30;
 },
 _c1oNE() //  [R1]
         { []
         }
     {offset
       c1oNE: // global
           I64[Sp] = block_c1oNI_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1oNE_info" {
     block_c1oNE_info:
         const _c1oNE;
         const 130;
         const 4294967326;
         const S1jKw_srt+80;
 },
 _c1oNI() //  [R1]
         { []
         }
     {offset
       c1oNI: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c1oOh; else goto c1oOg;
       c1oOh: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1oOg: // global
           I64[Hp - 40] = sat_s1ja8_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = P64[Sp + 8];
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 8] = Hp - 16;
           P64[Sp + 16] = Hp - 40;
           call GHC.Num.-_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1oNI_info" {
     block_c1oNI_info:
         const _c1oNI;
         const 130;
         const 4294967326;
         const S1jKw_srt+80;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.052825093 UTC

[section ""data" . GHC.Real.$dmceiling_closure" {
     GHC.Real.$dmceiling_closure:
         const GHC.Real.$dmceiling_info;
         const 0;
 },
 ds_s1jac_entry() //  [R1]
         { []
         }
     {offset
       c1oPi: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1oPj; else goto c1oPk;
       c1oPj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1oPk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call GHC.Real.properFraction_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds_s1jac_info" {
     ds_s1jac_info:
         const ds_s1jac_entry;
         const 3;
         const 15;
 },
 sat_s1jak_entry() //  [R1]
         { []
         }
     {offset
       c1oPv: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1oPw; else goto c1oPx;
       c1oPw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1oPx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c1oPt_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jak_info" {
     sat_s1jak_info:
         const sat_s1jak_entry;
         const 1;
         const 4294967312;
         const S1jKw_srt+112;
 },
 _c1oPt() //  [R1]
         { []
         }
     {offset
       c1oPt: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = GHC.Real.even1_closure;
           Sp = Sp - 8;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1oPt_info" {
     block_c1oPt_info:
         const _c1oPt;
         const 0;
         const 4294967326;
         const S1jKw_srt+112;
 },
 sat_s1jav_entry() //  [R1]
         { []
         }
     {offset
       c1oPX: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1oPY; else goto c1oPZ;
       c1oPY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1oPZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Real.$fEnumRatio1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jav_info" {
     sat_s1jav_info:
         const sat_s1jav_entry;
         const 1;
         const 4294967312;
         const S1jKw_srt+80;
 },
 GHC.Real.$dmceiling_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1oQ0: // global
           _s1jab::P64 = R4;
           _s1jaa::P64 = R3;
           _s1ja9::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto c1oQ1; else goto c1oQ2;
       c1oQ2: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c1oQ4; else goto c1oQ3;
       c1oQ4: // global
           HpAlloc = 40;
           goto c1oQ1;
       c1oQ1: // global
           R4 = _s1jab::P64;
           R3 = _s1jaa::P64;
           R2 = _s1ja9::P64;
           R1 = GHC.Real.$dmceiling_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1oQ3: // global
           I64[Hp - 32] = ds_s1jac_info;
           P64[Hp - 16] = _s1ja9::P64;
           P64[Hp - 8] = _s1jaa::P64;
           P64[Hp] = _s1jab::P64;
           I64[Sp - 24] = block_c1oPl_info;
           R2 = _s1ja9::P64;
           P64[Sp - 16] = Hp - 32;
           P64[Sp - 8] = _s1jaa::P64;
           Sp = Sp - 24;
           call GHC.Real.$p1RealFrac_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$dmceiling_info" {
     GHC.Real.$dmceiling_info:
         const GHC.Real.$dmceiling_entry;
         const 0;
         const 347892350990;
         const 12884901911;
         const S1jKw_srt+80;
 },
 _c1oPl() //  [R1]
         { []
         }
     {offset
       c1oPl: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c1oQ7; else goto c1oQ6;
       c1oQ7: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1oQ6: // global
           I64[Hp - 40] = sat_s1jak_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = stg_sel_1_upd_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp - 16] = block_c1oPC_info;
           R2 = R1;
           P64[Sp - 8] = Hp - 16;
           P64[Sp] = Hp - 40;
           Sp = Sp - 16;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1oPl_info" {
     block_c1oPl_info:
         const _c1oPl;
         const 2;
         const 73014444062;
         const S1jKw_srt+80;
 },
 _c1oPC() //  [R1]
         { []
         }
     {offset
       c1oPC: // global
           _c1oPp::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c1oPG_info;
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = P64[Sp + 8];
           P64[Sp + 8] = _c1oPp::P64;
           Sp = Sp - 8;
           call GHC.Classes.>_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1oPC_info" {
     block_c1oPC_info:
         const _c1oPC;
         const 4;
         const 4294967326;
         const S1jKw_srt+80;
 },
 _c1oPG() //  [R1]
         { []
         }
     {offset
       c1oPG: // global
           if (R1 & 7 == 1) goto c1oQd; else goto c1oQk;
       c1oQd: // global
           I64[Sp + 16] = block_c1oQa_info;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto u1oQr; else goto c1oQe;
       u1oQr: // global
           call _c1oQa(R1) args: 0, res: 0, upd: 0;
       c1oQe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c1oQk: // global
           I64[Sp] = block_c1oPL_info;
           R2 = P64[Sp + 16];
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1oPG_info" {
     block_c1oPG_info:
         const _c1oPG;
         const 2;
         const 4294967326;
         const S1jKw_srt+80;
 },
 _c1oQa() //  [R1]
         { []
         }
     {offset
       c1oQa: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1oQa_info" {
     block_c1oQa_info:
         const _c1oQa;
         const 0;
         const 30;
 },
 _c1oPL() //  [R1]
         { []
         }
     {offset
       c1oPL: // global
           I64[Sp] = block_c1oPP_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1oPL_info" {
     block_c1oPL_info:
         const _c1oPL;
         const 130;
         const 4294967326;
         const S1jKw_srt+80;
 },
 _c1oPP() //  [R1]
         { []
         }
     {offset
       c1oPP: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c1oQo; else goto c1oQn;
       c1oQo: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1oQn: // global
           I64[Hp - 40] = sat_s1jav_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = P64[Sp + 8];
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 8] = Hp - 16;
           P64[Sp + 16] = Hp - 40;
           call GHC.Num.+_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1oPP_info" {
     block_c1oPP_info:
         const _c1oPP;
         const 130;
         const 4294967326;
         const S1jKw_srt+80;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.073369209 UTC

[section ""data" . GHC.Real.$dmtruncate_closure" {
     GHC.Real.$dmtruncate_closure:
         const GHC.Real.$dmtruncate_info;
 },
 GHC.Real.$dmtruncate_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1oRn: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1oRo; else goto c1oRp;
       c1oRo: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$dmtruncate_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1oRp: // global
           I64[Sp - 8] = block_c1oRl_info;
           R2 = R2;
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           Sp = Sp - 32;
           call GHC.Real.properFraction_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$dmtruncate_info" {
     GHC.Real.$dmtruncate_info:
         const GHC.Real.$dmtruncate_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c1oRl() //  [R1]
         { []
         }
     {offset
       c1oRl: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1oRl_info" {
     block_c1oRl_info:
         const _c1oRl;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.080491076 UTC

[section ""data" . GHC.Real.$dmrecip_closure" {
     GHC.Real.$dmrecip_closure:
         const GHC.Real.$dmrecip_info;
         const 0;
 },
 sat_s1jaF_entry() //  [R1]
         { []
         }
     {offset
       c1oRL: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1oRM; else goto c1oRN;
       c1oRM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1oRN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c1oRJ_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Real.$p1Fractional_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jaF_info" {
     sat_s1jaF_info:
         const sat_s1jaF_entry;
         const 1;
         const 4294967312;
         const S1jKw_srt+80;
 },
 _c1oRJ() //  [R1]
         { []
         }
     {offset
       c1oRJ: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = GHC.Real.$fEnumRatio1_closure;
           Sp = Sp - 8;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1oRJ_info" {
     block_c1oRJ_info:
         const _c1oRJ;
         const 0;
         const 4294967326;
         const S1jKw_srt+80;
 },
 GHC.Real.$dmrecip_entry() //  [R2, R3]
         { []
         }
     {offset
       c1oRR: // global
           _s1jaD::P64 = R3;
           _s1jaC::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c1oRS; else goto c1oRT;
       c1oRT: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1oRV; else goto c1oRU;
       c1oRV: // global
           HpAlloc = 24;
           goto c1oRS;
       c1oRS: // global
           R3 = _s1jaD::P64;
           R2 = _s1jaC::P64;
           R1 = GHC.Real.$dmrecip_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1oRU: // global
           I64[Hp - 16] = sat_s1jaF_info;
           P64[Hp] = _s1jaC::P64;
           R2 = _s1jaC::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = _s1jaD::P64;
           Sp = Sp - 24;
           call GHC.Real./_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$dmrecip_info" {
     GHC.Real.$dmrecip_info:
         const GHC.Real.$dmrecip_entry;
         const 0;
         const 554050781198;
         const 8589934607;
         const S1jKw_srt+80;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.088210214 UTC

[section ""data" . GHC.Real.$dm/_closure" {
     GHC.Real.$dm/_closure:
         const GHC.Real.$dm/_info;
 },
 sat_s1jaK_entry() //  [R1]
         { []
         }
     {offset
       c1oSh: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1oSi; else goto c1oSj;
       c1oSi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1oSj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Real.recip_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jaK_info" {
     sat_s1jaK_info:
         const sat_s1jaK_entry;
         const 2;
         const 18;
 },
 GHC.Real.$dm/_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1oSm: // global
           _s1jaI::P64 = R4;
           _s1jaH::P64 = R3;
           _s1jaG::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c1oSn; else goto c1oSo;
       c1oSo: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1oSq; else goto c1oSp;
       c1oSq: // global
           HpAlloc = 32;
           goto c1oSn;
       c1oSn: // global
           R4 = _s1jaI::P64;
           R3 = _s1jaH::P64;
           R2 = _s1jaG::P64;
           R1 = GHC.Real.$dm/_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1oSp: // global
           I64[Hp - 24] = sat_s1jaK_info;
           P64[Hp - 8] = _s1jaG::P64;
           P64[Hp] = _s1jaI::P64;
           I64[Sp - 24] = block_c1oSk_info;
           R2 = _s1jaG::P64;
           P64[Sp - 16] = Hp - 24;
           P64[Sp - 8] = _s1jaH::P64;
           Sp = Sp - 24;
           call GHC.Real.$p1Fractional_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$dm/_info" {
     GHC.Real.$dm/_info:
         const GHC.Real.$dm/_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c1oSk() //  [R1]
         { []
         }
     {offset
       c1oSk: // global
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           _c1oSd::P64 = P64[Sp + 8];
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = _c1oSd::P64;
           call GHC.Num.*_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1oSk_info" {
     block_c1oSk_info:
         const _c1oSk;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.101503671 UTC

[section ""data" . GHC.Real.$dmdivMod_closure" {
     GHC.Real.$dmdivMod_closure:
         const GHC.Real.$dmdivMod_info;
         const 0;
 },
 $dNum_s1jaP_entry() //  [R1]
         { []
         }
     {offset
       c1oSV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1oSW; else goto c1oSX;
       c1oSW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1oSX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dNum_s1jaP_info" {
     $dNum_s1jaP_info:
         const $dNum_s1jaP_entry;
         const 1;
         const 16;
 },
 ds_s1jaQ_entry() //  [R1]
         { []
         }
     {offset
       c1oT4: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c1oT8; else goto c1oT9;
       c1oT8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1oT9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c1oT2_info;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_pp_info;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = P64[R1 + 32];
           Sp = Sp - 48;
           call GHC.Real.quotRem_entry(R2) args: 32, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds_s1jaQ_info" {
     ds_s1jaQ_info:
         const ds_s1jaQ_entry;
         const 3;
         const 15;
 },
 _c1oT2() //  [R1]
         { []
         }
     {offset
       c1oT2: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1oTc; else goto c1oTb;
       c1oTc: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c1oTb: // global
           _s1jaS::P64 = P64[R1 + 7];
           _s1jaT::P64 = P64[R1 + 15];
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = R1;
           P64[Hp - 8] = _s1jaS::P64;
           P64[Hp] = _s1jaT::P64;
           R1 = Hp - 23;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1oT2_info" {
     block_c1oT2_info:
         const _c1oT2;
         const 0;
         const 30;
 },
 sat_s1jb2_entry() //  [R1]
         { []
         }
     {offset
       c1oTm: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1oTn; else goto c1oTo;
       c1oTn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1oTo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Num.signum_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jb2_info" {
     sat_s1jb2_info:
         const sat_s1jb2_entry;
         const 2;
         const 18;
 },
 sat_s1jb3_entry() //  [R1]
         { []
         }
     {offset
       c1oTp: // global
           _s1jb3::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c1oTq; else goto c1oTr;
       c1oTr: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1oTt; else goto c1oTs;
       c1oTt: // global
           HpAlloc = 32;
           goto c1oTq;
       c1oTq: // global
           R1 = _s1jb3::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1oTs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1jb3::P64;
           _s1jaN::P64 = P64[_s1jb3::P64 + 16];
           _s1jaP::P64 = P64[_s1jb3::P64 + 24];
           I64[Hp - 24] = sat_s1jb2_info;
           P64[Hp - 8] = _s1jaN::P64;
           P64[Hp] = _s1jaP::P64;
           R2 = _s1jaP::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 24;
           Sp = Sp - 32;
           call GHC.Num.negate_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jb3_info" {
     sat_s1jb3_info:
         const sat_s1jb3_entry;
         const 2;
         const 18;
 },
 sat_s1jb1_entry() //  [R1]
         { []
         }
     {offset
       c1oTy: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1oTz; else goto c1oTA;
       c1oTz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1oTA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Num.signum_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jb1_info" {
     sat_s1jb1_info:
         const sat_s1jb1_entry;
         const 2;
         const 18;
 },
 sat_s1jbg_entry() //  [R1]
         { []
         }
     {offset
       c1oTS: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1oTT; else goto c1oTU;
       c1oTT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1oTU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 40;
           call GHC.Num.+_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jbg_info" {
     sat_s1jbg_info:
         const sat_s1jbg_entry;
         const 3;
         const 15;
 },
 sat_s1jbe_entry() //  [R1]
         { []
         }
     {offset
       c1oU3: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1oU4; else goto c1oU5;
       c1oU4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1oU5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Real.$fEnumRatio1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jbe_info" {
     sat_s1jbe_info:
         const sat_s1jbe_entry;
         const 1;
         const 4294967312;
         const S1jKw_srt+80;
 },
 sat_s1jbf_entry() //  [R1]
         { []
         }
     {offset
       c1oU7: // global
           _s1jbf::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c1oU8; else goto c1oU9;
       c1oU9: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c1oUb; else goto c1oUa;
       c1oUb: // global
           HpAlloc = 48;
           goto c1oU8;
       c1oU8: // global
           R1 = _s1jbf::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1oUa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1jbf::P64;
           _s1jaP::P64 = P64[_s1jbf::P64 + 16];
           _s1jaQ::P64 = P64[_s1jbf::P64 + 24];
           I64[Hp - 40] = sat_s1jbe_info;
           P64[Hp - 24] = _s1jaP::P64;
           I64[Hp - 16] = stg_sel_1_upd_info;
           P64[Hp] = _s1jaQ::P64;
           R2 = _s1jaP::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 16;
           P64[Sp - 24] = Hp - 40;
           Sp = Sp - 40;
           call GHC.Num.-_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jbf_info" {
     sat_s1jbf_info:
         const sat_s1jbf_entry;
         const 2;
         const 4294967314;
         const S1jKw_srt+80;
 },
 GHC.Real.$dmdivMod_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1oUc: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c1oUd; else goto c1oUe;
       c1oUd: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$dmdivMod_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1oUe: // global
           I64[Sp - 32] = block_c1oSN_info;
           _s1jaL::P64 = R2;
           R2 = R2;
           P64[Sp - 24] = _s1jaL::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$dmdivMod_info" {
     GHC.Real.$dmdivMod_info:
         const GHC.Real.$dmdivMod_entry;
         const 0;
         const 1103806595086;
         const 12884901911;
         const S1jKw_srt+80;
 },
 _c1oSN() //  [R1]
         { []
         }
     {offset
       c1oSN: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto c1oUh; else goto c1oUg;
       c1oUh: // global
           HpAlloc = 152;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1oUg: // global
           I64[Hp - 144] = $dNum_s1jaP_info;
           P64[Hp - 128] = R1;
           I64[Hp - 120] = ds_s1jaQ_info;
           P64[Hp - 104] = P64[Sp + 8];
           P64[Hp - 96] = P64[Sp + 16];
           _s1jaN::P64 = P64[Sp + 24];
           P64[Hp - 88] = _s1jaN::P64;
           I64[Hp - 80] = stg_sel_2_upd_info;
           _c1oSY::P64 = Hp - 120;
           P64[Hp - 64] = _c1oSY::P64;
           I64[Hp - 56] = sat_s1jb3_info;
           P64[Hp - 40] = _s1jaN::P64;
           _c1oSR::P64 = Hp - 144;
           P64[Hp - 32] = _c1oSR::P64;
           I64[Hp - 24] = sat_s1jb1_info;
           P64[Hp - 8] = _c1oSR::P64;
           _c1oTd::P64 = Hp - 80;
           P64[Hp] = _c1oTd::P64;
           I64[Sp - 24] = block_c1oTB_info;
           R2 = R1;
           P64[Sp - 16] = Hp - 56;
           P64[Sp - 8] = Hp - 24;
           P64[Sp] = _c1oTd::P64;
           P64[Sp + 8] = _c1oSY::P64;
           P64[Sp + 16] = _c1oSR::P64;
           Sp = Sp - 24;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1oSN_info" {
     block_c1oSN_info:
         const _c1oSN;
         const 3;
         const 4294967326;
         const S1jKw_srt+80;
 },
 _c1oTB() //  [R1]
         { []
         }
     {offset
       c1oTB: // global
           I64[Sp] = block_c1oTF_info;
           R2 = R1;
           call GHC.Classes.$p1Ord_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1oTB_info" {
     block_c1oTB_info:
         const _c1oTB;
         const 6;
         const 4294967326;
         const S1jKw_srt+80;
 },
 _c1oTF() //  [R1]
         { []
         }
     {offset
       c1oTF: // global
           _c1oTu::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c1oTJ_info;
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = _c1oTu::P64;
           Sp = Sp - 8;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1oTF_info" {
     block_c1oTF_info:
         const _c1oTF;
         const 6;
         const 4294967326;
         const S1jKw_srt+80;
 },
 _c1oTJ() //  [R1]
         { []
         }
     {offset
       c1oTJ: // global
           _c1oSY::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c1oUo; else goto c1oUv;
       c1oUo: // global
           I64[Sp + 32] = block_c1oUl_info;
           R1 = _c1oSY::P64;
           Sp = Sp + 32;
           if (R1 & 7 != 0) goto u1oUA; else goto c1oUp;
       u1oUA: // global
           call _c1oUl(R1) args: 0, res: 0, upd: 0;
       c1oUp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c1oUv: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c1oUy; else goto c1oUx;
       c1oUy: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1oUx: // global
           I64[Hp - 88] = sat_s1jbg_info;
           P64[Hp - 72] = P64[Sp + 32];
           _c1oSR::P64 = P64[Sp + 24];
           P64[Hp - 64] = _c1oSR::P64;
           P64[Hp - 56] = P64[Sp + 8];
           I64[Hp - 48] = sat_s1jbf_info;
           P64[Hp - 32] = _c1oSR::P64;
           P64[Hp - 24] = _c1oSY::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 88;
           R1 = Hp - 15;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1oTJ_info" {
     block_c1oTJ_info:
         const _c1oTJ;
         const 4;
         const 4294967326;
         const S1jKw_srt+80;
 },
 _c1oUl() //  [R1]
         { []
         }
     {offset
       c1oUl: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1oUl_info" {
     block_c1oUl_info:
         const _c1oUl;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.128874344 UTC

[section ""data" . GHC.Real.$dmmod_closure" {
     GHC.Real.$dmmod_closure:
         const GHC.Real.$dmmod_info;
 },
 GHC.Real.$dmmod_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1oVY: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1oVZ; else goto c1oW0;
       c1oVZ: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$dmmod_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1oW0: // global
           I64[Sp - 8] = block_c1oVW_info;
           R2 = R2;
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           Sp = Sp - 32;
           call GHC.Real.divMod_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$dmmod_info" {
     GHC.Real.$dmmod_info:
         const GHC.Real.$dmmod_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c1oVW() //  [R1]
         { []
         }
     {offset
       c1oVW: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1oVW_info" {
     block_c1oVW_info:
         const _c1oVW;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.134787971 UTC

[section ""data" . GHC.Real.$dmdiv_closure" {
     GHC.Real.$dmdiv_closure:
         const GHC.Real.$dmdiv_info;
 },
 GHC.Real.$dmdiv_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1oWi: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1oWj; else goto c1oWk;
       c1oWj: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$dmdiv_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1oWk: // global
           I64[Sp - 8] = block_c1oWg_info;
           R2 = R2;
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           Sp = Sp - 32;
           call GHC.Real.divMod_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$dmdiv_info" {
     GHC.Real.$dmdiv_info:
         const GHC.Real.$dmdiv_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c1oWg() //  [R1]
         { []
         }
     {offset
       c1oWg: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1oWg_info" {
     block_c1oWg_info:
         const _c1oWg;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.139929593 UTC

[section ""data" . GHC.Real.$dmrem_closure" {
     GHC.Real.$dmrem_closure:
         const GHC.Real.$dmrem_info;
 },
 GHC.Real.$dmrem_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1oWC: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1oWD; else goto c1oWE;
       c1oWD: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$dmrem_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1oWE: // global
           I64[Sp - 8] = block_c1oWA_info;
           R2 = R2;
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           Sp = Sp - 32;
           call GHC.Real.quotRem_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$dmrem_info" {
     GHC.Real.$dmrem_info:
         const GHC.Real.$dmrem_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c1oWA() //  [R1]
         { []
         }
     {offset
       c1oWA: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1oWA_info" {
     block_c1oWA_info:
         const _c1oWA;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.145197454 UTC

[section ""data" . GHC.Real.$dmquot_closure" {
     GHC.Real.$dmquot_closure:
         const GHC.Real.$dmquot_info;
 },
 GHC.Real.$dmquot_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1oWW: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1oWX; else goto c1oWY;
       c1oWX: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$dmquot_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1oWY: // global
           I64[Sp - 8] = block_c1oWU_info;
           R2 = R2;
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           Sp = Sp - 32;
           call GHC.Real.quotRem_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$dmquot_info" {
     GHC.Real.$dmquot_info:
         const GHC.Real.$dmquot_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c1oWU() //  [R1]
         { []
         }
     {offset
       c1oWU: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1oWU_info" {
     block_c1oWU_info:
         const _c1oWU;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.150592395 UTC

[section ""data" . GHC.Real.divZeroError_closure" {
     GHC.Real.divZeroError_closure:
         const GHC.Real.divZeroError_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Real.divZeroError_entry() //  [R1]
         { []
         }
     {offset
       c1oXg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1oXh; else goto c1oXi;
       c1oXh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1oXi: // global
           (_c1oXd::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c1oXd::I64 == 0) goto c1oXf; else goto c1oXe;
       c1oXf: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c1oXe: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c1oXd::I64;
           R1 = GHC.Exception.divZeroException_closure;
           Sp = Sp - 16;
           call stg_raise#(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Real.divZeroError_info" {
     GHC.Real.divZeroError_info:
         const GHC.Real.divZeroError_entry;
         const 0;
         const 4294967317;
         const S1jKw_srt+152;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.154781584 UTC

[section ""data" . GHC.Real.$fIntegralInt1_closure" {
     GHC.Real.$fIntegralInt1_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.15818244 UTC

[section ""data" . GHC.Real.$fIntegralInt_$cmod_closure" {
     GHC.Real.$fIntegralInt_$cmod_closure:
         const GHC.Real.$fIntegralInt_$cmod_info;
         const 0;
 },
 GHC.Real.$fIntegralInt_$cmod_entry() //  [R2, R3]
         { []
         }
     {offset
       c1oXy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1oXz; else goto c1oXA;
       c1oXz: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fIntegralInt_$cmod_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1oXA: // global
           I64[Sp - 16] = block_c1oXv_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1oY0; else goto c1oXw;
       u1oY0: // global
           call _c1oXv(R1) args: 0, res: 0, upd: 0;
       c1oXw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fIntegralInt_$cmod_info" {
     GHC.Real.$fIntegralInt_$cmod_info:
         const GHC.Real.$fIntegralInt_$cmod_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S1jKw_srt+160;
 },
 _c1oXv() //  [R1]
         { []
         }
     {offset
       c1oXv: // global
           _s1jbJ::I64 = I64[R1 + 7];
           if (_s1jbJ::I64 != (-1)) goto u1oXY; else goto c1oXW;
       u1oXY: // global
           if (_s1jbJ::I64 != 0) goto c1oXR; else goto c1oXX;
       c1oXR: // global
           I64[Sp] = block_c1oXG_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1jbJ::I64;
           if (R1 & 7 != 0) goto u1oXZ; else goto c1oXH;
       u1oXZ: // global
           call _c1oXG(R1) args: 0, res: 0, upd: 0;
       c1oXH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c1oXX: // global
           R1 = GHC.Real.divZeroError_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c1oXW: // global
           R1 = GHC.Real.$fIntegralInt1_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1oXv_info" {
     block_c1oXv_info:
         const _c1oXv;
         const 1;
         const 4294967326;
         const S1jKw_srt+160;
 },
 _c1oXG() //  [R1]
         { []
         }
     {offset
       c1oXG: // global
           _s1jbJ::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_c1oXL_info;
           R3 = _s1jbJ::I64;
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Classes.modInt#_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1oXG_info" {
     block_c1oXG_info:
         const _c1oXG;
         const 65;
         const 30;
 },
 _c1oXL() //  [R1]
         { []
         }
     {offset
       c1oXL: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1oXV; else goto c1oXU;
       c1oXV: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c1oXU: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1oXL_info" {
     block_c1oXL_info:
         const _c1oXL;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.168771359 UTC

[section ""data" . GHC.Real.$fIntegralInt_$crem_closure" {
     GHC.Real.$fIntegralInt_$crem_closure:
         const GHC.Real.$fIntegralInt_$crem_info;
         const 0;
 },
 GHC.Real.$fIntegralInt_$crem_entry() //  [R2, R3]
         { []
         }
     {offset
       c1oYq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1oYr; else goto c1oYs;
       c1oYr: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fIntegralInt_$crem_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1oYs: // global
           I64[Sp - 16] = block_c1oYn_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1oYQ; else goto c1oYo;
       u1oYQ: // global
           call _c1oYn(R1) args: 0, res: 0, upd: 0;
       c1oYo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fIntegralInt_$crem_info" {
     GHC.Real.$fIntegralInt_$crem_info:
         const GHC.Real.$fIntegralInt_$crem_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const S1jKw_srt+160;
 },
 _c1oYn() //  [R1]
         { []
         }
     {offset
       c1oYn: // global
           _s1jbS::I64 = I64[R1 + 7];
           if (_s1jbS::I64 != (-1)) goto u1oYO; else goto c1oYM;
       u1oYO: // global
           if (_s1jbS::I64 != 0) goto c1oYI; else goto c1oYN;
       c1oYI: // global
           I64[Sp] = block_c1oYy_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1jbS::I64;
           if (R1 & 7 != 0) goto u1oYP; else goto c1oYz;
       u1oYP: // global
           call _c1oYy(R1) args: 0, res: 0, upd: 0;
       c1oYz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c1oYN: // global
           R1 = GHC.Real.divZeroError_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c1oYM: // global
           R1 = GHC.Real.$fIntegralInt1_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1oYn_info" {
     block_c1oYn_info:
         const _c1oYn;
         const 1;
         const 4294967326;
         const S1jKw_srt+160;
 },
 _c1oYy() //  [R1]
         { []
         }
     {offset
       c1oYy: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1oYL; else goto c1oYK;
       c1oYL: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1oYK: // global
           _s1jbV::I64 = %MO_S_Rem_W64(I64[R1 + 7], I64[Sp + 8]);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s1jbV::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1oYy_info" {
     block_c1oYy_info:
         const _c1oYy;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.176805473 UTC

[section ""data" . GHC.Real.$fIntegralInteger_$cquot_closure" {
     GHC.Real.$fIntegralInteger_$cquot_closure:
         const GHC.Real.$fIntegralInteger_$cquot_info;
         const 0;
 },
 GHC.Real.$fIntegralInteger_$cquot_entry() //  [R2, R3]
         { []
         }
     {offset
       c1oZf: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1oZg; else goto c1oZh;
       c1oZg: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fIntegralInteger_$cquot_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1oZh: // global
           I64[Sp - 24] = block_c1oZa_info;
           _s1jbX::P64 = R3;
           R3 = GHC.Real.even1_closure;
           _s1jbW::P64 = R2;
           R2 = _s1jbX::P64;
           P64[Sp - 16] = _s1jbW::P64;
           P64[Sp - 8] = _s1jbX::P64;
           Sp = Sp - 24;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fIntegralInteger_$cquot_info" {
     GHC.Real.$fIntegralInteger_$cquot_info:
         const GHC.Real.$fIntegralInteger_$cquot_entry;
         const 0;
         const 2478196129806;
         const 8589934607;
         const S1jKw_srt+112;
 },
 _c1oZa() //  [R1]
         { []
         }
     {offset
       c1oZa: // global
           if (R1 == 1) goto c1oZe; else goto c1oZd;
       c1oZe: // global
           R1 = GHC.Real.divZeroError_closure;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c1oZd: // global
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Integer.Type.quotInteger_entry(R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1oZa_info" {
     block_c1oZa_info:
         const _c1oZa;
         const 2;
         const 4294967326;
         const S1jKw_srt+160;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.183469764 UTC

[section ""data" . GHC.Real.$fIntegralInteger_$crem_closure" {
     GHC.Real.$fIntegralInteger_$crem_closure:
         const GHC.Real.$fIntegralInteger_$crem_info;
         const 0;
 },
 GHC.Real.$fIntegralInteger_$crem_entry() //  [R2, R3]
         { []
         }
     {offset
       c1oZF: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1oZG; else goto c1oZH;
       c1oZG: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fIntegralInteger_$crem_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1oZH: // global
           I64[Sp - 24] = block_c1oZA_info;
           _s1jc0::P64 = R3;
           R3 = GHC.Real.even1_closure;
           _s1jbZ::P64 = R2;
           R2 = _s1jc0::P64;
           P64[Sp - 16] = _s1jbZ::P64;
           P64[Sp - 8] = _s1jc0::P64;
           Sp = Sp - 24;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fIntegralInteger_$crem_info" {
     GHC.Real.$fIntegralInteger_$crem_info:
         const GHC.Real.$fIntegralInteger_$crem_entry;
         const 0;
         const 4677219385358;
         const 8589934607;
         const S1jKw_srt+112;
 },
 _c1oZA() //  [R1]
         { []
         }
     {offset
       c1oZA: // global
           if (R1 == 1) goto c1oZE; else goto c1oZD;
       c1oZE: // global
           R1 = GHC.Real.divZeroError_closure;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c1oZD: // global
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Integer.Type.remInteger_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1oZA_info" {
     block_c1oZA_info:
         const _c1oZA;
         const 2;
         const 4294967326;
         const S1jKw_srt+160;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.189194853 UTC

[section ""data" . GHC.Real.$fIntegralInteger_$cdiv_closure" {
     GHC.Real.$fIntegralInteger_$cdiv_closure:
         const GHC.Real.$fIntegralInteger_$cdiv_info;
         const 0;
 },
 GHC.Real.$fIntegralInteger_$cdiv_entry() //  [R2, R3]
         { []
         }
     {offset
       c1p05: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1p06; else goto c1p07;
       c1p06: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fIntegralInteger_$cdiv_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1p07: // global
           I64[Sp - 24] = block_c1p00_info;
           _s1jc3::P64 = R3;
           R3 = GHC.Real.even1_closure;
           _s1jc2::P64 = R2;
           R2 = _s1jc3::P64;
           P64[Sp - 16] = _s1jc2::P64;
           P64[Sp - 8] = _s1jc3::P64;
           Sp = Sp - 24;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fIntegralInteger_$cdiv_info" {
     GHC.Real.$fIntegralInteger_$cdiv_info:
         const GHC.Real.$fIntegralInteger_$cdiv_entry;
         const 0;
         const 26667451940878;
         const 8589934607;
         const S1jKw_srt+112;
 },
 _c1p00() //  [R1]
         { []
         }
     {offset
       c1p00: // global
           if (R1 == 1) goto c1p04; else goto c1p03;
       c1p04: // global
           R1 = GHC.Real.divZeroError_closure;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c1p03: // global
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Integer.Type.divInteger_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1p00_info" {
     block_c1p00_info:
         const _c1p00;
         const 2;
         const 141733920798;
         const S1jKw_srt+160;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.194908784 UTC

[section ""data" . GHC.Real.$fIntegralInteger_$cmod_closure" {
     GHC.Real.$fIntegralInteger_$cmod_closure:
         const GHC.Real.$fIntegralInteger_$cmod_info;
         const 0;
 },
 GHC.Real.$fIntegralInteger_$cmod_entry() //  [R2, R3]
         { []
         }
     {offset
       c1p0v: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1p0w; else goto c1p0x;
       c1p0w: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fIntegralInteger_$cmod_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1p0x: // global
           I64[Sp - 24] = block_c1p0q_info;
           _s1jc6::P64 = R3;
           R3 = GHC.Real.even1_closure;
           _s1jc5::P64 = R2;
           R2 = _s1jc6::P64;
           P64[Sp - 16] = _s1jc5::P64;
           P64[Sp - 8] = _s1jc6::P64;
           Sp = Sp - 24;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fIntegralInteger_$cmod_info" {
     GHC.Real.$fIntegralInteger_$cmod_info:
         const GHC.Real.$fIntegralInteger_$cmod_entry;
         const 0;
         const 105832289140750;
         const 8589934607;
         const S1jKw_srt+112;
 },
 _c1p0q() //  [R1]
         { []
         }
     {offset
       c1p0q: // global
           if (R1 == 1) goto c1p0u; else goto c1p0t;
       c1p0u: // global
           R1 = GHC.Real.divZeroError_closure;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c1p0t: // global
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Integer.Type.modInteger_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1p0q_info" {
     block_c1p0q_info:
         const _c1p0q;
         const 2;
         const 554050781214;
         const S1jKw_srt+160;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.20101532 UTC

[section ""data" . GHC.Real.$fIntegralInteger_$cquotRem_closure" {
     GHC.Real.$fIntegralInteger_$cquotRem_closure:
         const GHC.Real.$fIntegralInteger_$cquotRem_info;
         const 0;
 },
 GHC.Real.$fIntegralInteger_$cquotRem_entry() //  [R2, R3]
         { []
         }
     {offset
       c1p0V: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1p0W; else goto c1p0X;
       c1p0W: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fIntegralInteger_$cquotRem_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1p0X: // global
           I64[Sp - 24] = block_c1p0Q_info;
           _s1jc9::P64 = R3;
           R3 = GHC.Real.even1_closure;
           _s1jc8::P64 = R2;
           R2 = _s1jc9::P64;
           P64[Sp - 16] = _s1jc8::P64;
           P64[Sp - 8] = _s1jc9::P64;
           Sp = Sp - 24;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fIntegralInteger_$cquotRem_info" {
     GHC.Real.$fIntegralInteger_$cquotRem_info:
         const GHC.Real.$fIntegralInteger_$cquotRem_entry;
         const 0;
         const 141016661229582;
         const 8589934607;
         const S1jKw_srt+112;
 },
 _c1p0Q() //  [R1]
         { []
         }
     {offset
       c1p0Q: // global
           if (R1 == 1) goto c1p0U; else goto c1p0T;
       c1p0U: // global
           R1 = GHC.Real.divZeroError_closure;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c1p0T: // global
           _s1jc9::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c1p10_info;
           R3 = _s1jc9::P64;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Integer.Type.quotRemInteger_entry(R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1p0Q_info" {
     block_c1p0Q_info:
         const _c1p0Q;
         const 2;
         const 4294967326;
         const S1jKw_srt+160;
 },
 _c1p10() //  [R1, R2]
         { []
         }
     {offset
       c1p10: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1p16; else goto c1p15;
       c1p16: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c1p15: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1p10_info" {
     block_c1p10_info:
         const _c1p10;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.209556038 UTC

[section ""data" . GHC.Real.$fIntegralInteger_$cdivMod_closure" {
     GHC.Real.$fIntegralInteger_$cdivMod_closure:
         const GHC.Real.$fIntegralInteger_$cdivMod_info;
         const 0;
 },
 GHC.Real.$fIntegralInteger_$cdivMod_entry() //  [R2, R3]
         { []
         }
     {offset
       c1p1v: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1p1w; else goto c1p1x;
       c1p1w: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fIntegralInteger_$cdivMod_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1p1x: // global
           I64[Sp - 24] = block_c1p1q_info;
           _s1jcf::P64 = R3;
           R3 = GHC.Real.even1_closure;
           _s1jce::P64 = R2;
           R2 = _s1jcf::P64;
           P64[Sp - 16] = _s1jce::P64;
           P64[Sp - 8] = _s1jcf::P64;
           Sp = Sp - 24;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fIntegralInteger_$cdivMod_info" {
     GHC.Real.$fIntegralInteger_$cdivMod_info:
         const GHC.Real.$fIntegralInteger_$cdivMod_entry;
         const 0;
         const 844704103006222;
         const 8589934607;
         const S1jKw_srt+112;
 },
 _c1p1q() //  [R1]
         { []
         }
     {offset
       c1p1q: // global
           if (R1 == 1) goto c1p1u; else goto c1p1t;
       c1p1u: // global
           R1 = GHC.Real.divZeroError_closure;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c1p1t: // global
           _s1jcf::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c1p1A_info;
           R3 = _s1jcf::P64;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Integer.Type.divModInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1p1q_info" {
     block_c1p1q_info:
         const _c1p1q;
         const 2;
         const 4402341478430;
         const S1jKw_srt+160;
 },
 _c1p1A() //  [R1, R2]
         { []
         }
     {offset
       c1p1A: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1p1G; else goto c1p1F;
       c1p1G: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c1p1F: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1p1A_info" {
     block_c1p1A_info:
         const _c1p1A;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.216231335 UTC

[section ""data" . GHC.Real.$fIntegralInteger_closure" {
     GHC.Real.$fIntegralInteger_closure:
         const GHC.Real.C:Integral_con_info;
         const GHC.Real.$fRealInteger_closure+1;
         const GHC.Enum.$fEnumInteger_closure;
         const GHC.Real.$fIntegralInteger_$cquot_closure+2;
         const GHC.Real.$fIntegralInteger_$crem_closure+2;
         const GHC.Real.$fIntegralInteger_$cdiv_closure+2;
         const GHC.Real.$fIntegralInteger_$cmod_closure+2;
         const GHC.Real.$fIntegralInteger_$cquotRem_closure+2;
         const GHC.Real.$fIntegralInteger_$cdivMod_closure+2;
         const GHC.Real.$fIntegralInteger_$ctoInteger_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.219496963 UTC

[section ""data" . GHC.Real.$fIntegralWord_$cquot_closure" {
     GHC.Real.$fIntegralWord_$cquot_closure:
         const GHC.Real.$fIntegralWord_$cquot_info;
         const 0;
 },
 GHC.Real.$fIntegralWord_$cquot_entry() //  [R2, R3]
         { []
         }
     {offset
       c1p24: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1p28; else goto c1p29;
       c1p28: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fIntegralWord_$cquot_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1p29: // global
           I64[Sp - 16] = block_c1p21_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1p2s; else goto c1p22;
       u1p2s: // global
           call _c1p21(R1) args: 0, res: 0, upd: 0;
       c1p22: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fIntegralWord_$cquot_info" {
     GHC.Real.$fIntegralWord_$cquot_info:
         const GHC.Real.$fIntegralWord_$cquot_entry;
         const 0;
         const 17596481011726;
         const 8589934607;
         const S1jKw_srt+160;
 },
 _c1p21() //  [R1]
         { []
         }
     {offset
       c1p21: // global
           I64[Sp] = block_c1p27_info;
           _s1jcn::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1jcn::I64;
           if (R1 & 7 != 0) goto u1p2r; else goto c1p2b;
       u1p2r: // global
           call _c1p27(R1) args: 0, res: 0, upd: 0;
       c1p2b: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1p21_info" {
     block_c1p21_info:
         const _c1p21;
         const 1;
         const 4294967326;
         const S1jKw_srt+160;
 },
 _c1p27() //  [R1]
         { []
         }
     {offset
       c1p27: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1p2h; else goto c1p2g;
       c1p2h: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1p2g: // global
           _s1jcq::I64 = I64[R1 + 7];
           if (_s1jcq::I64 != 0) goto c1p2p; else goto c1p2q;
       c1p2p: // global
           I64[Hp - 8] = GHC.Types.W#_con_info;
           I64[Hp] = I64[Sp + 8] / _s1jcq::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1p2q: // global
           Hp = Hp - 16;
           R1 = GHC.Real.divZeroError_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1p27_info" {
     block_c1p27_info:
         const _c1p27;
         const 65;
         const 4294967326;
         const S1jKw_srt+160;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.228658591 UTC

[section ""data" . GHC.Real.$fIntegralWord_$crem_closure" {
     GHC.Real.$fIntegralWord_$crem_closure:
         const GHC.Real.$fIntegralWord_$crem_info;
         const 0;
 },
 GHC.Real.$fIntegralWord_$crem_entry() //  [R2, R3]
         { []
         }
     {offset
       c1p2P: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1p2T; else goto c1p2U;
       c1p2T: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fIntegralWord_$crem_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1p2U: // global
           I64[Sp - 16] = block_c1p2M_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1p3d; else goto c1p2N;
       u1p3d: // global
           call _c1p2M(R1) args: 0, res: 0, upd: 0;
       c1p2N: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fIntegralWord_$crem_info" {
     GHC.Real.$fIntegralWord_$crem_info:
         const GHC.Real.$fIntegralWord_$crem_entry;
         const 0;
         const 35188667056142;
         const 8589934607;
         const S1jKw_srt+160;
 },
 _c1p2M() //  [R1]
         { []
         }
     {offset
       c1p2M: // global
           I64[Sp] = block_c1p2S_info;
           _s1jcv::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1jcv::I64;
           if (R1 & 7 != 0) goto u1p3c; else goto c1p2W;
       u1p3c: // global
           call _c1p2S(R1) args: 0, res: 0, upd: 0;
       c1p2W: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1p2M_info" {
     block_c1p2M_info:
         const _c1p2M;
         const 1;
         const 4294967326;
         const S1jKw_srt+160;
 },
 _c1p2S() //  [R1]
         { []
         }
     {offset
       c1p2S: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1p32; else goto c1p31;
       c1p32: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1p31: // global
           _s1jcy::I64 = I64[R1 + 7];
           if (_s1jcy::I64 != 0) goto c1p3a; else goto c1p3b;
       c1p3a: // global
           I64[Hp - 8] = GHC.Types.W#_con_info;
           I64[Hp] = I64[Sp + 8] % _s1jcy::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1p3b: // global
           Hp = Hp - 16;
           R1 = GHC.Real.divZeroError_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1p2S_info" {
     block_c1p2S_info:
         const _c1p2S;
         const 65;
         const 4294967326;
         const S1jKw_srt+160;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.237591036 UTC

[section ""data" . GHC.Real.$fIntegralWord_$cquotRem_closure" {
     GHC.Real.$fIntegralWord_$cquotRem_closure:
         const GHC.Real.$fIntegralWord_$cquotRem_info;
         const 0;
 },
 GHC.Real.$fIntegralWord_$cquotRem_entry() //  [R2, R3]
         { []
         }
     {offset
       c1p3A: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1p3E; else goto c1p3F;
       c1p3E: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fIntegralWord_$cquotRem_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1p3F: // global
           I64[Sp - 16] = block_c1p3x_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1p3X; else goto c1p3y;
       u1p3X: // global
           call _c1p3x(R1) args: 0, res: 0, upd: 0;
       c1p3y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fIntegralWord_$cquotRem_info" {
     GHC.Real.$fIntegralWord_$cquotRem_info:
         const GHC.Real.$fIntegralWord_$cquotRem_entry;
         const 0;
         const 70373039144974;
         const 8589934607;
         const S1jKw_srt+160;
 },
 _c1p3x() //  [R1]
         { []
         }
     {offset
       c1p3x: // global
           I64[Sp] = block_c1p3D_info;
           _s1jcD::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1jcD::I64;
           if (R1 & 7 != 0) goto u1p3W; else goto c1p3H;
       u1p3W: // global
           call _c1p3D(R1) args: 0, res: 0, upd: 0;
       c1p3H: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1p3x_info" {
     block_c1p3x_info:
         const _c1p3x;
         const 1;
         const 4294967326;
         const S1jKw_srt+160;
 },
 _c1p3D() //  [R1]
         { []
         }
     {offset
       c1p3D: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c1p3N; else goto c1p3M;
       c1p3N: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1p3M: // global
           _s1jcG::I64 = I64[R1 + 7];
           if (_s1jcG::I64 != 0) goto c1p3U; else goto c1p3V;
       c1p3U: // global
           (_s1jcI::I64, _s1jcJ::I64) = call MO_U_QuotRem W64(I64[Sp + 8], _s1jcG::I64);
           I64[Hp - 48] = GHC.Types.W#_con_info;
           I64[Hp - 40] = _s1jcJ::I64;
           I64[Hp - 32] = GHC.Types.W#_con_info;
           I64[Hp - 24] = _s1jcI::I64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1p3V: // global
           Hp = Hp - 56;
           R1 = GHC.Real.divZeroError_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1p3D_info" {
     block_c1p3D_info:
         const _c1p3D;
         const 65;
         const 4294967326;
         const S1jKw_srt+160;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.24695285 UTC

[section ""data" . GHC.Real.$fIntegralWord_$cdivMod_closure" {
     GHC.Real.$fIntegralWord_$cdivMod_closure:
         const GHC.Real.$fIntegralWord_$cdivMod_info;
         const 0;
 },
 sat_s1jcW_entry() //  [R1]
         { []
         }
     {offset
       c1p4A: // global
           _s1jcW::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1p4D; else goto c1p4E;
       c1p4E: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1p4G; else goto c1p4F;
       c1p4G: // global
           HpAlloc = 16;
           goto c1p4D;
       c1p4D: // global
           R1 = _s1jcW::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1p4F: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1jcW::P64;
           _s1jcV::I64 = I64[_s1jcW::P64 + 16] % I64[_s1jcW::P64 + 24];
           I64[Hp - 8] = GHC.Types.W#_con_info;
           I64[Hp] = _s1jcV::I64;
           R1 = Hp - 7;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jcW_info" {
     sat_s1jcW_info:
         const sat_s1jcW_entry;
         const 8589934592;
         const 20;
 },
 sat_s1jcU_entry() //  [R1]
         { []
         }
     {offset
       c1p4N: // global
           _s1jcU::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1p4Q; else goto c1p4R;
       c1p4R: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1p4T; else goto c1p4S;
       c1p4T: // global
           HpAlloc = 16;
           goto c1p4Q;
       c1p4Q: // global
           R1 = _s1jcU::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1p4S: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1jcU::P64;
           _s1jcT::I64 = I64[_s1jcU::P64 + 16] / I64[_s1jcU::P64 + 24];
           I64[Hp - 8] = GHC.Types.W#_con_info;
           I64[Hp] = _s1jcT::I64;
           R1 = Hp - 7;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jcU_info" {
     sat_s1jcU_info:
         const sat_s1jcU_entry;
         const 8589934592;
         const 20;
 },
 GHC.Real.$fIntegralWord_$cdivMod_entry() //  [R2, R3]
         { []
         }
     {offset
       c1p4U: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1p4V; else goto c1p4W;
       c1p4V: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fIntegralWord_$cdivMod_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1p4W: // global
           I64[Sp - 16] = block_c1p4i_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1p56; else goto c1p4j;
       u1p56: // global
           call _c1p4i(R1) args: 0, res: 0, upd: 0;
       c1p4j: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fIntegralWord_$cdivMod_info" {
     GHC.Real.$fIntegralWord_$cdivMod_info:
         const GHC.Real.$fIntegralWord_$cdivMod_entry;
         const 0;
         const 140741783322638;
         const 8589934607;
         const S1jKw_srt+160;
 },
 _c1p4i() //  [R1]
         { []
         }
     {offset
       c1p4i: // global
           I64[Sp] = block_c1p4n_info;
           _s1jcP::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1jcP::I64;
           if (R1 & 7 != 0) goto u1p55; else goto c1p4o;
       u1p55: // global
           call _c1p4n(R1) args: 0, res: 0, upd: 0;
       c1p4o: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1p4i_info" {
     block_c1p4i_info:
         const _c1p4i;
         const 1;
         const 4294967326;
         const S1jKw_srt+160;
 },
 _c1p4n() //  [R1]
         { []
         }
     {offset
       c1p4n: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c1p50; else goto c1p4Z;
       c1p50: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1p4Z: // global
           _s1jcS::I64 = I64[R1 + 7];
           if (_s1jcS::I64 != 0) goto c1p53; else goto c1p54;
       c1p53: // global
           I64[Hp - 80] = sat_s1jcW_info;
           _s1jcP::I64 = I64[Sp + 8];
           I64[Hp - 64] = _s1jcP::I64;
           I64[Hp - 56] = _s1jcS::I64;
           I64[Hp - 48] = sat_s1jcU_info;
           I64[Hp - 32] = _s1jcP::I64;
           I64[Hp - 24] = _s1jcS::I64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 80;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1p54: // global
           Hp = Hp - 88;
           R1 = GHC.Real.divZeroError_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1p4n_info" {
     block_c1p4n_info:
         const _c1p4n;
         const 65;
         const 4294967326;
         const S1jKw_srt+160;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.258069598 UTC

[section ""data" . GHC.Real.ratioZeroDenominatorError_closure" {
     GHC.Real.ratioZeroDenominatorError_closure:
         const GHC.Real.ratioZeroDenominatorError_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Real.ratioZeroDenominatorError_entry() //  [R1]
         { []
         }
     {offset
       c1p5D: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1p5E; else goto c1p5F;
       c1p5E: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1p5F: // global
           (_c1p5A::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c1p5A::I64 == 0) goto c1p5C; else goto c1p5B;
       c1p5C: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c1p5B: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c1p5A::I64;
           R1 = GHC.Exception.ratioZeroDenomException_closure;
           Sp = Sp - 16;
           call stg_raise#(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Real.ratioZeroDenominatorError_info" {
     GHC.Real.ratioZeroDenominatorError_info:
         const GHC.Real.ratioZeroDenominatorError_entry;
         const 0;
         const 4294967317;
         const S1jKw_srt+288;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.26381448 UTC

[section ""data" . GHC.Real.$fFractionalRatio_$s$crecip_closure" {
     GHC.Real.$fFractionalRatio_$s$crecip_closure:
         const GHC.Real.$fFractionalRatio_$s$crecip_info;
         const 0;
 },
 GHC.Real.$fFractionalRatio_$s$crecip_entry() //  [R2]
         { []
         }
     {offset
       c1p5U: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1p5V; else goto c1p5W;
       c1p5V: // global
           R2 = R2;
           R1 = GHC.Real.$fFractionalRatio_$s$crecip_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1p5W: // global
           I64[Sp - 8] = block_c1p5R_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1p6C; else goto c1p5S;
       u1p6C: // global
           call _c1p5R(R1) args: 0, res: 0, upd: 0;
       c1p5S: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fFractionalRatio_$s$crecip_info" {
     GHC.Real.$fFractionalRatio_$s$crecip_info:
         const GHC.Real.$fFractionalRatio_$s$crecip_entry;
         const 0;
         const 108086395351859214;
         const 4294967301;
         const S1jKw_srt+112;
 },
 _c1p5R() //  [R1]
         { []
         }
     {offset
       c1p5R: // global
           I64[Sp - 16] = block_c1p5Z_info;
           R3 = GHC.Real.even1_closure;
           _s1jcZ::P64 = P64[R1 + 7];
           R2 = _s1jcZ::P64;
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp] = _s1jcZ::P64;
           Sp = Sp - 16;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1p5R_info" {
     block_c1p5R_info:
         const _c1p5R;
         const 0;
         const 36028801313931294;
         const S1jKw_srt+112;
 },
 _c1p5Z() //  [R1]
         { []
         }
     {offset
       c1p5Z: // global
           if (R1 == 1) goto c1p6B; else goto c1p67;
       c1p6B: // global
           R1 = GHC.Real.ratioZeroDenominatorError_closure;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c1p67: // global
           I64[Sp] = block_c1p64_info;
           R3 = GHC.Real.even1_closure;
           R2 = P64[Sp + 16];
           call GHC.Integer.Type.ltInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1p5Z_info" {
     block_c1p5Z_info:
         const _c1p5Z;
         const 2;
         const 36028801313931294;
         const S1jKw_srt+112;
 },
 _c1p64() //  [R1]
         { []
         }
     {offset
       c1p64: // global
           _s1jd0::P64 = P64[Sp + 8];
           if (R1 == 1) goto c1p6t; else goto c1p6d;
       c1p6t: // global
           I64[Sp + 8] = block_c1p6j_info;
           R2 = _s1jd0::P64;
           Sp = Sp + 8;
           call GHC.Integer.Type.negateInteger_entry(R2) args: 8, res: 8, upd: 8;
       c1p6d: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1p6g; else goto c1p6f;
       c1p6g: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c1p6f: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = _s1jd0::P64;
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1p64_info" {
     block_c1p64_info:
         const _c1p64;
         const 2;
         const 30;
 },
 _c1p6j() //  [R1]
         { []
         }
     {offset
       c1p6j: // global
           I64[Sp] = block_c1p6n_info;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Integer.Type.negateInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1p6j_info" {
     block_c1p6j_info:
         const _c1p6j;
         const 1;
         const 30;
 },
 _c1p6n() //  [R1]
         { []
         }
     {offset
       c1p6n: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1p6x; else goto c1p6w;
       c1p6x: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1p6w: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1p6n_info" {
     block_c1p6n_info:
         const _c1p6n;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.275986895 UTC

[section ""data" . GHC.Real.overflowError_closure" {
     GHC.Real.overflowError_closure:
         const GHC.Real.overflowError_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Real.overflowError_entry() //  [R1]
         { []
         }
     {offset
       c1p79: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1p7a; else goto c1p7b;
       c1p7a: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1p7b: // global
           (_c1p76::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c1p76::I64 == 0) goto c1p78; else goto c1p77;
       c1p78: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c1p77: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c1p76::I64;
           R1 = GHC.Exception.overflowException_closure;
           Sp = Sp - 16;
           call stg_raise#(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Real.overflowError_info" {
     GHC.Real.overflowError_info:
         const GHC.Real.overflowError_entry;
         const 0;
         const 4294967317;
         const S1jKw_srt+312;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.279547286 UTC

[section ""data" . lvl_r1j38_closure" {
     lvl_r1j38_closure:
         const (,)_con_info;
         const GHC.Real.overflowError_closure;
         const GHC.Real.$fIntegralInt1_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.285217054 UTC

[section ""data" . GHC.Real.$fIntegralInt_$cdivMod_closure" {
     GHC.Real.$fIntegralInt_$cdivMod_closure:
         const GHC.Real.$fIntegralInt_$cdivMod_info;
         const 0;
 },
 GHC.Real.$fIntegralInt_$cdivMod_entry() //  [R2, R3]
         { []
         }
     {offset
       c1p7r: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1p7v; else goto c1p7w;
       c1p7v: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fIntegralInt_$cdivMod_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1p7w: // global
           I64[Sp - 16] = block_c1p7o_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1p9T; else goto c1p7p;
       u1p9T: // global
           call _c1p7o(R1) args: 0, res: 0, upd: 0;
       c1p7p: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fIntegralInt_$cdivMod_info" {
     GHC.Real.$fIntegralInt_$cdivMod_info:
         const GHC.Real.$fIntegralInt_$cdivMod_entry;
         const 0;
         const 13510803177078798;
         const 8589934607;
         const S1jKw_srt+160;
 },
 _c1p7o() //  [R1]
         { []
         }
     {offset
       c1p7o: // global
           I64[Sp] = block_c1p7u_info;
           _s1jd9::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1jd9::I64;
           if (R1 & 7 != 0) goto u1p9S; else goto c1p7y;
       u1p9S: // global
           call _c1p7u(R1) args: 0, res: 0, upd: 0;
       c1p7y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1p7o_info" {
     block_c1p7o_info:
         const _c1p7o;
         const 1;
         const 9007203549708318;
         const S1jKw_srt+160;
 },
 _c1p7u() //  [R1]
         { []
         }
     {offset
       c1p7u: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c1p7E; else goto c1p7D;
       c1p7E: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1p7D: // global
           _s1jd9::I64 = I64[Sp + 8];
           _s1jdc::I64 = I64[R1 + 7];
           if (_s1jdc::I64 != (-1)) goto u1p9R; else goto c1p9P;
       u1p9R: // global
           if (_s1jdc::I64 != 0) goto c1p9j; else goto c1p9Q;
       c1p9j: // global
           if (%MO_S_Le_W64(_s1jd9::I64, 0)) goto c1p8k; else goto c1p9h;
       c1p8k: // global
           if (%MO_S_Ge_W64(_s1jd9::I64, 0)) goto c1p7R; else goto c1p8i;
       c1p7R: // global
           (_s1jdg::I64, _s1jdh::I64) = call MO_S_QuotRem W64(_s1jd9::I64, _s1jdc::I64);
           I64[Hp - 48] = GHC.Types.I#_con_info;
           I64[Hp - 40] = _s1jdh::I64;
           I64[Hp - 32] = GHC.Types.I#_con_info;
           I64[Hp - 24] = _s1jdg::I64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1p8i: // global
           if (%MO_S_Le_W64(_s1jdc::I64, 0)) goto c1p80; else goto c1p8h;
       c1p80: // global
           (_s1jdm::I64, _s1jdn::I64) = call MO_S_QuotRem W64(_s1jd9::I64, _s1jdc::I64);
           I64[Hp - 48] = GHC.Types.I#_con_info;
           I64[Hp - 40] = _s1jdn::I64;
           I64[Hp - 32] = GHC.Types.I#_con_info;
           I64[Hp - 24] = _s1jdm::I64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1p8h: // global
           (_s1jds::I64, _s1jdt::I64) = call MO_S_QuotRem W64(_s1jd9::I64 + 1, _s1jdc::I64);
           I64[Hp - 48] = GHC.Types.I#_con_info;
           I64[Hp - 40] = _s1jdt::I64 + _s1jdc::I64 - 1;
           I64[Hp - 32] = GHC.Types.I#_con_info;
           I64[Hp - 24] = _s1jds::I64 - 1;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1p9h: // global
           if (%MO_S_Ge_W64(_s1jdc::I64, 0)) goto c1p8Z; else goto c1p9g;
       c1p8Z: // global
           if (%MO_S_Ge_W64(_s1jd9::I64, 0)) goto c1p8w; else goto c1p8X;
       c1p8w: // global
           (_s1jdC::I64, _s1jdD::I64) = call MO_S_QuotRem W64(_s1jd9::I64, _s1jdc::I64);
           I64[Hp - 48] = GHC.Types.I#_con_info;
           I64[Hp - 40] = _s1jdD::I64;
           I64[Hp - 32] = GHC.Types.I#_con_info;
           I64[Hp - 24] = _s1jdC::I64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1p8X: // global
           if (%MO_S_Le_W64(_s1jdc::I64, 0)) goto c1p8F; else goto c1p8W;
       c1p8F: // global
           (_s1jdI::I64, _s1jdJ::I64) = call MO_S_QuotRem W64(_s1jd9::I64, _s1jdc::I64);
           I64[Hp - 48] = GHC.Types.I#_con_info;
           I64[Hp - 40] = _s1jdJ::I64;
           I64[Hp - 32] = GHC.Types.I#_con_info;
           I64[Hp - 24] = _s1jdI::I64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1p8W: // global
           (_s1jdO::I64, _s1jdP::I64) = call MO_S_QuotRem W64(_s1jd9::I64 + 1, _s1jdc::I64);
           I64[Hp - 48] = GHC.Types.I#_con_info;
           I64[Hp - 40] = _s1jdP::I64 + _s1jdc::I64 - 1;
           I64[Hp - 32] = GHC.Types.I#_con_info;
           I64[Hp - 24] = _s1jdO::I64 - 1;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1p9g: // global
           (_s1jdX::I64, _s1jdY::I64) = call MO_S_QuotRem W64(_s1jd9::I64 - 1, _s1jdc::I64);
           I64[Hp - 48] = GHC.Types.I#_con_info;
           I64[Hp - 40] = _s1jdY::I64 + _s1jdc::I64 + 1;
           I64[Hp - 32] = GHC.Types.I#_con_info;
           I64[Hp - 24] = _s1jdX::I64 - 1;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1p9Q: // global
           Hp = Hp - 56;
           R1 = GHC.Real.divZeroError_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c1p9P: // global
           if (_s1jd9::I64 == (-9223372036854775808)) goto c1p9O; else goto c1p9N;
       c1p9O: // global
           Hp = Hp - 56;
           R1 = lvl_r1j38_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1p9N: // global
           if (%MO_S_Le_W64(_s1jd9::I64, 0)) goto c1p9u; else goto c1p9L;
       c1p9u: // global
           (_s1je7::I64, _s1je8::I64) = call MO_S_QuotRem W64(_s1jd9::I64, (-1));
           I64[Hp - 48] = GHC.Types.I#_con_info;
           I64[Hp - 40] = _s1je8::I64;
           I64[Hp - 32] = GHC.Types.I#_con_info;
           I64[Hp - 24] = _s1je7::I64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1p9L: // global
           (_s1jed::I64, _s1jee::I64) = call MO_S_QuotRem W64(_s1jd9::I64 - 1, (-1));
           I64[Hp - 48] = GHC.Types.I#_con_info;
           I64[Hp - 40] = _s1jee::I64;
           I64[Hp - 32] = GHC.Types.I#_con_info;
           I64[Hp - 24] = _s1jed::I64 - 1;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1p7u_info" {
     block_c1p7u_info:
         const _c1p7u;
         const 65;
         const 9007203549708318;
         const S1jKw_srt+160;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.299462877 UTC

[section ""data" . GHC.Real.$fIntegralInt_$cquotRem_closure" {
     GHC.Real.$fIntegralInt_$cquotRem_closure:
         const GHC.Real.$fIntegralInt_$cquotRem_info;
         const 0;
 },
 GHC.Real.$fIntegralInt_$cquotRem_entry() //  [R2, R3]
         { []
         }
     {offset
       c1paW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1pb0; else goto c1pb1;
       c1pb0: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fIntegralInt_$cquotRem_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1pb1: // global
           I64[Sp - 16] = block_c1paT_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1pbu; else goto c1paU;
       u1pbu: // global
           call _c1paT(R1) args: 0, res: 0, upd: 0;
       c1paU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fIntegralInt_$cquotRem_info" {
     GHC.Real.$fIntegralInt_$cquotRem_info:
         const GHC.Real.$fIntegralInt_$cquotRem_entry;
         const 0;
         const 27021602059190286;
         const 8589934607;
         const S1jKw_srt+160;
 },
 _c1paT() //  [R1]
         { []
         }
     {offset
       c1paT: // global
           I64[Sp] = block_c1paZ_info;
           _s1jeo::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1jeo::I64;
           if (R1 & 7 != 0) goto u1pbt; else goto c1pb3;
       u1pbt: // global
           call _c1paZ(R1) args: 0, res: 0, upd: 0;
       c1pb3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1paT_info" {
     block_c1paT_info:
         const _c1paT;
         const 1;
         const 9007203549708318;
         const S1jKw_srt+160;
 },
 _c1paZ() //  [R1]
         { []
         }
     {offset
       c1paZ: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c1pb9; else goto c1pb8;
       c1pb9: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1pb8: // global
           _s1jeo::I64 = I64[Sp + 8];
           _s1jer::I64 = I64[R1 + 7];
           if (_s1jer::I64 != (-1)) goto u1pbs; else goto c1pbq;
       u1pbs: // global
           if (_s1jer::I64 != 0) goto c1pbg; else goto c1pbr;
       c1pbg: // global
           (_s1jet::I64, _s1jeu::I64) = call MO_S_QuotRem W64(_s1jeo::I64, _s1jer::I64);
           I64[Hp - 48] = GHC.Types.I#_con_info;
           I64[Hp - 40] = _s1jeu::I64;
           I64[Hp - 32] = GHC.Types.I#_con_info;
           I64[Hp - 24] = _s1jet::I64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1pbr: // global
           Hp = Hp - 56;
           R1 = GHC.Real.divZeroError_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c1pbq: // global
           if (_s1jeo::I64 == (-9223372036854775808)) goto c1pbp; else goto c1pbo;
       c1pbp: // global
           Hp = Hp - 56;
           R1 = lvl_r1j38_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1pbo: // global
           (_s1jez::I64, _s1jeA::I64) = call MO_S_QuotRem W64(_s1jeo::I64, (-1));
           I64[Hp - 48] = GHC.Types.I#_con_info;
           I64[Hp - 40] = _s1jeA::I64;
           I64[Hp - 32] = GHC.Types.I#_con_info;
           I64[Hp - 24] = _s1jez::I64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1paZ_info" {
     block_c1paZ_info:
         const _c1paZ;
         const 65;
         const 9007203549708318;
         const S1jKw_srt+160;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.307796083 UTC

[section ""data" . GHC.Real.$w$cdiv_closure" {
     GHC.Real.$w$cdiv_closure:
         const GHC.Real.$w$cdiv_info;
         const 0;
 },
 GHC.Real.$w$cdiv_entry() //  [R2, R3]
         { []
         }
     {offset
       c1pc0: // global
           if (R3 == (-1)) goto c1pbY; else goto u1pc9;
       c1pbY: // global
           if (R2 == (-9223372036854775808)) goto c1pc8; else goto c1pc7;
       c1pc8: // global
           R1 = GHC.Real.overflowError_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c1pc7: // global
           R3 = (-1);
           R2 = R2;
           call GHC.Classes.divInt#_entry(R3, R2) args: 8, res: 0, upd: 8;
       u1pc9: // global
           if (R3 == 0) goto c1pbZ; else goto c1pbX;
       c1pbZ: // global
           R1 = GHC.Real.divZeroError_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c1pbX: // global
           R3 = R3;
           R2 = R2;
           call GHC.Classes.divInt#_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$w$cdiv_info" {
     GHC.Real.$w$cdiv_info:
         const GHC.Real.$w$cdiv_entry;
         const 0;
         const 36028801313931278;
         const 8589934604;
         const S1jKw_srt+160;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.312702969 UTC

[section ""data" . GHC.Real.$fIntegralInt_$cdiv_closure" {
     GHC.Real.$fIntegralInt_$cdiv_closure:
         const GHC.Real.$fIntegralInt_$cdiv_info;
         const 0;
 },
 GHC.Real.$fIntegralInt_$cdiv_entry() //  [R2, R3]
         { []
         }
     {offset
       c1pcm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1pcz; else goto c1pcA;
       c1pcz: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fIntegralInt_$cdiv_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1pcA: // global
           I64[Sp - 16] = block_c1pcj_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1pcH; else goto c1pck;
       u1pcH: // global
           call _c1pcj(R1) args: 0, res: 0, upd: 0;
       c1pck: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fIntegralInt_$cdiv_info" {
     GHC.Real.$fIntegralInt_$cdiv_info:
         const GHC.Real.$fIntegralInt_$cdiv_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S1jKw_srt+352;
 },
 _c1pcj() //  [R1]
         { []
         }
     {offset
       c1pcj: // global
           I64[Sp] = block_c1pcp_info;
           _s1jeN::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1jeN::I64;
           if (R1 & 7 != 0) goto u1pcG; else goto c1pcq;
       u1pcG: // global
           call _c1pcp(R1) args: 0, res: 0, upd: 0;
       c1pcq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pcj_info" {
     block_c1pcj_info:
         const _c1pcj;
         const 1;
         const 4294967326;
         const S1jKw_srt+360;
 },
 _c1pcp() //  [R1]
         { []
         }
     {offset
       c1pcp: // global
           _s1jeN::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_c1pcu_info;
           R3 = I64[R1 + 7];
           R2 = _s1jeN::I64;
           Sp = Sp + 8;
           call GHC.Real.$w$cdiv_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pcp_info" {
     block_c1pcp_info:
         const _c1pcp;
         const 65;
         const 4294967326;
         const S1jKw_srt+360;
 },
 _c1pcu() //  [R1]
         { []
         }
     {offset
       c1pcu: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1pcF; else goto c1pcE;
       c1pcF: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c1pcE: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pcu_info" {
     block_c1pcu_info:
         const _c1pcu;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.32317033 UTC

[section ""data" . GHC.Real.$fIntegralInt_$cquot_closure" {
     GHC.Real.$fIntegralInt_$cquot_closure:
         const GHC.Real.$fIntegralInt_$cquot_info;
         const 0;
 },
 GHC.Real.$fIntegralInt_$cquot_entry() //  [R2, R3]
         { []
         }
     {offset
       c1pd6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1pda; else goto c1pdb;
       c1pda: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fIntegralInt_$cquot_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1pdb: // global
           I64[Sp - 16] = block_c1pd3_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1pdG; else goto c1pd4;
       u1pdG: // global
           call _c1pd3(R1) args: 0, res: 0, upd: 0;
       c1pd4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fIntegralInt_$cquot_info" {
     GHC.Real.$fIntegralInt_$cquot_info:
         const GHC.Real.$fIntegralInt_$cquot_entry;
         const 0;
         const 324259177465643022;
         const 8589934607;
         const S1jKw_srt+160;
 },
 _c1pd3() //  [R1]
         { []
         }
     {offset
       c1pd3: // global
           I64[Sp] = block_c1pd9_info;
           _s1jeU::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1jeU::I64;
           if (R1 & 7 != 0) goto u1pdF; else goto c1pdd;
       u1pdF: // global
           call _c1pd9(R1) args: 0, res: 0, upd: 0;
       c1pdd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pd3_info" {
     block_c1pd3_info:
         const _c1pd3;
         const 1;
         const 36028801313931294;
         const S1jKw_srt+160;
 },
 _c1pd9() //  [R1]
         { []
         }
     {offset
       c1pd9: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1pdj; else goto c1pdi;
       c1pdj: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1pdi: // global
           _s1jeU::I64 = I64[Sp + 8];
           _s1jeX::I64 = I64[R1 + 7];
           if (_s1jeX::I64 != (-1)) goto u1pdE; else goto c1pdC;
       u1pdE: // global
           if (_s1jeX::I64 != 0) goto c1pdr; else goto c1pdD;
       c1pdr: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = %MO_S_Quot_W64(_s1jeU::I64, _s1jeX::I64);
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1pdD: // global
           Hp = Hp - 16;
           R1 = GHC.Real.divZeroError_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c1pdC: // global
           if (_s1jeU::I64 == (-9223372036854775808)) goto c1pdB; else goto c1pdA;
       c1pdB: // global
           Hp = Hp - 16;
           R1 = GHC.Real.overflowError_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c1pdA: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = %MO_S_Quot_W64(_s1jeU::I64, (-1));
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pd9_info" {
     block_c1pd9_info:
         const _c1pd9;
         const 65;
         const 36028801313931294;
         const S1jKw_srt+160;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.33082159 UTC

[section ""data" . GHC.Real.$fIntegralInt_closure" {
     GHC.Real.$fIntegralInt_closure:
         const GHC.Real.C:Integral_con_info;
         const GHC.Real.$fRealInt_closure+1;
         const GHC.Enum.$fEnumInt_closure;
         const GHC.Real.$fIntegralInt_$cquot_closure+2;
         const GHC.Real.$fIntegralInt_$crem_closure+2;
         const GHC.Real.$fIntegralInt_$cdiv_closure+2;
         const GHC.Real.$fIntegralInt_$cmod_closure+2;
         const GHC.Real.$fIntegralInt_$cquotRem_closure+2;
         const GHC.Real.$fIntegralInt_$cdivMod_closure+2;
         const GHC.Real.$fIntegralInt_$ctoInteger_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.332687848 UTC

[section ""data" . lvl1_r1j39_closure" {
     lvl1_r1j39_closure:
         const GHC.Types.I#_con_info;
         const (-1);
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.336583709 UTC

[section ""data" . lvl2_r1j3a_closure" {
     lvl2_r1j3a_closure:
         const lvl2_r1j3a_info;
         const 0;
         const 0;
         const 0;
 },
 lvl2_r1j3a_entry() //  [R1]
         { []
         }
     {offset
       c1pen: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1peo; else goto c1pep;
       c1peo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1pep: // global
           (_c1pek::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c1pek::I64 == 0) goto c1pem; else goto c1pel;
       c1pem: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c1pel: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c1pek::I64;
           R3 = 0;
           R2 = lvl1_r1j39_closure+1;
           Sp = Sp - 16;
           call GHC.Real.$wgcd'_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl2_r1j3a_info" {
     lvl2_r1j3a_info:
         const lvl2_r1j3a_entry;
         const 0;
         const 4294967317;
         const S1jKw_srt+376;
 },
 section ""data" . GHC.Real.$wgcd'_closure" {
     GHC.Real.$wgcd'_closure:
         const GHC.Real.$wgcd'_info;
         const 0;
 },
 GHC.Real.$wgcd'_entry() //  [R2, R3]
         { []
         }
     {offset
       c1peu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1pev; else goto u1peB;
       c1pev: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$wgcd'_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       u1peB: // global
           P64[Sp - 16] = R2;
           I64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _c1pe4() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . GHC.Real.$wgcd'_info" {
     GHC.Real.$wgcd'_info:
         const GHC.Real.$wgcd'_entry;
         const 0;
         const 12884901902;
         const 8589934606;
         const S1jKw_srt+376;
 },
 _c1pe4() //  []
         { []
         }
     {offset
       c1pe4: // global
           _s1jf5::I64 = I64[Sp + 8];
           if (_s1jf5::I64 != (-1)) goto u1peA; else goto c1pes;
       u1peA: // global
           _s1jf3::P64 = P64[Sp];
           if (_s1jf5::I64 != 0) goto c1per; else goto c1pet;
       c1per: // global
           I64[Sp] = block_c1pe9_info;
           R1 = _s1jf3::P64;
           I64[Sp + 8] = _s1jf5::I64;
           if (R1 & 7 != 0) goto u1peD; else goto c1pea;
       u1peD: // global
           call _c1pe9(R1) args: 0, res: 0, upd: 0;
       c1pea: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c1pet: // global
           R1 = _s1jf3::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c1pes: // global
           R1 = lvl2_r1j3a_closure;
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c1pe9() //  [R1]
         { []
         }
     {offset
       c1pe9: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1pez; else goto c1pey;
       c1pez: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1pey: // global
           _s1jf5::I64 = I64[Sp + 8];
           _s1jf8::I64 = %MO_S_Rem_W64(I64[R1 + 7], _s1jf5::I64);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s1jf5::I64;
           P64[Sp] = Hp - 7;
           I64[Sp + 8] = _s1jf8::I64;
           call _c1pe4() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1pe9_info" {
     block_c1pe9_info:
         const _c1pe9;
         const 65;
         const 4294967326;
         const S1jKw_srt+384;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.346853537 UTC

[section ""data" . GHC.Real.$fEnumRatio_gcd'_closure" {
     GHC.Real.$fEnumRatio_gcd'_closure:
         const GHC.Real.$fEnumRatio_gcd'_info;
         const 0;
 },
 GHC.Real.$fEnumRatio_gcd'_entry() //  [R2, R3]
         { []
         }
     {offset
       c1pfb: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1pfc; else goto u1pfp;
       c1pfc: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fEnumRatio_gcd'_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       u1pfp: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _c1pf3() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . GHC.Real.$fEnumRatio_gcd'_info" {
     GHC.Real.$fEnumRatio_gcd'_info:
         const GHC.Real.$fEnumRatio_gcd'_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S1jKw_srt+392;
 },
 _c1pf3() //  []
         { []
         }
     {offset
       c1pf3: // global
           I64[Sp - 8] = block_c1pf6_info;
           R3 = GHC.Real.even1_closure;
           R2 = P64[Sp + 8];
           Sp = Sp - 8;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 _c1pf6() //  [R1]
         { []
         }
     {offset
       c1pf6: // global
           _s1jfa::P64 = P64[Sp + 8];
           if (R1 == 1) goto c1pfa; else goto c1pf9;
       c1pfa: // global
           R1 = _s1jfa::P64 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c1pf9: // global
           I64[Sp + 8] = block_c1pfg_info;
           R3 = P64[Sp + 16];
           R2 = _s1jfa::P64;
           Sp = Sp + 8;
           call GHC.Integer.Type.remInteger_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pf6_info" {
     block_c1pf6_info:
         const _c1pf6;
         const 2;
         const 4294967326;
         const S1jKw_srt+400;
 },
 _c1pfg() //  [R1]
         { []
         }
     {offset
       c1pfg: // global
           P64[Sp] = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call _c1pf3() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1pfg_info" {
     block_c1pfg_info:
         const _c1pfg;
         const 1;
         const 4294967326;
         const S1jKw_srt+400;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.359485203 UTC

[section ""data" . GHC.Real.gcd_closure" {
     GHC.Real.gcd_closure:
         const GHC.Real.gcd_info;
         const 0;
 },
 lvl8_s1jfi_entry() //  [R1]
         { []
         }
     {offset
       c1pgl: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1pgm; else goto c1pgn;
       c1pgm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1pgn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c1pgj_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl8_s1jfi_info" {
     lvl8_s1jfi_info:
         const lvl8_s1jfi_entry;
         const 1;
         const 4294967312;
         const S1jKw_srt+400;
 },
 _c1pgj() //  [R1]
         { []
         }
     {offset
       c1pgj: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = GHC.Real.even1_closure;
           Sp = Sp - 8;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1pgj_info" {
     block_c1pgj_info:
         const _c1pgj;
         const 0;
         const 4294967326;
         const S1jKw_srt+400;
 },
 $dNum_s1jfm_entry() //  [R1]
         { []
         }
     {offset
       c1pgt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1pgu; else goto c1pgv;
       c1pgu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1pgv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dNum_s1jfm_info" {
     $dNum_s1jfm_info:
         const $dNum_s1jfm_entry;
         const 1;
         const 16;
 },
 sat_s1jft_entry() //  [R1]
         { []
         }
     {offset
       c1pgy: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1pgz; else goto c1pgA;
       c1pgz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1pgA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Num.abs_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jft_info" {
     sat_s1jft_info:
         const sat_s1jft_entry;
         const 2;
         const 18;
 },
 sat_s1jfs_entry() //  [R1]
         { []
         }
     {offset
       c1pgD: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1pgE; else goto c1pgF;
       c1pgE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1pgF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Num.abs_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jfs_info" {
     sat_s1jfs_info:
         const sat_s1jfs_entry;
         const 2;
         const 18;
 },
 sat_s1jfr_entry() //  [R1]
         { []
         }
     {offset
       c1pgJ: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1pgK; else goto c1pgL;
       c1pgK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1pgL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call GHC.Real.rem_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jfr_info" {
     sat_s1jfr_info:
         const sat_s1jfr_entry;
         const 3;
         const 15;
 },
 GHC.Real.gcd_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1pgM: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c1pgN; else goto c1pgO;
       c1pgN: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.gcd_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1pgO: // global
           I64[Sp - 32] = block_c1pfN_info;
           _s1jfe::P64 = R2;
           R2 = R2;
           P64[Sp - 24] = _s1jfe::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.gcd_info" {
     GHC.Real.gcd_info:
         const GHC.Real.gcd_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S1jKw_srt+400;
 },
 _c1pfN() //  [R1]
         { []
         }
     {offset
       c1pfN: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1pgR; else goto c1pgQ;
       c1pgR: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1pgQ: // global
           I64[Hp - 16] = lvl8_s1jfi_info;
           P64[Hp] = R1;
           I64[Sp - 16] = block_c1pfT_info;
           R2 = R1;
           P64[Sp - 8] = R1;
           P64[Sp] = Hp - 16;
           Sp = Sp - 16;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pfN_info" {
     block_c1pfN_info:
         const _c1pfN;
         const 3;
         const 4294967326;
         const S1jKw_srt+400;
 },
 _c1pfT() //  [R1]
         { []
         }
     {offset
       c1pfT: // global
           I64[Sp] = block_c1pfX_info;
           R2 = R1;
           call GHC.Classes.$p1Ord_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pfT_info" {
     block_c1pfT_info:
         const _c1pfT;
         const 5;
         const 30;
 },
 _c1pfX() //  [R1]
         { []
         }
     {offset
       c1pfX: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c1pgV; else goto c1pgU;
       c1pgV: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1pgU: // global
           I64[Hp - 80] = $dNum_s1jfm_info;
           P64[Hp - 64] = P64[Sp + 8];
           I64[Hp - 56] = sat_s1jft_info;
           P64[Hp - 40] = P64[Sp + 40];
           _c1pg1::P64 = Hp - 80;
           P64[Hp - 32] = _c1pg1::P64;
           I64[Hp - 24] = sat_s1jfs_info;
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = _c1pg1::P64;
           P64[Sp + 8] = Hp - 56;
           P64[Sp + 32] = Hp - 24;
           P64[Sp + 40] = R1;
           Sp = Sp + 8;
           call _c1pga() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1pfX_info" {
     block_c1pfX_info:
         const _c1pfX;
         const 5;
         const 30;
 },
 _c1pga() //  []
         { []
         }
     {offset
       c1pga: // global
           I64[Sp - 8] = block_c1pgc_info;
           R2 = P64[Sp + 32];
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = P64[Sp];
           P64[Sp - 16] = P64[Sp + 8];
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c1pgc() //  [R1]
         { []
         }
     {offset
       c1pgc: // global
           _s1jfo::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto c1pgY; else goto c1ph5;
       c1pgY: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c1ph1; else goto c1ph0;
       c1ph1: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1ph0: // global
           I64[Hp - 32] = sat_s1jfr_info;
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = _s1jfo::P64;
           _s1jfp::P64 = P64[Sp + 8];
           P64[Hp] = _s1jfp::P64;
           _s1jfo::P64 = _s1jfp::P64;
           P64[Sp + 32] = _s1jfo::P64;
           P64[Sp + 8] = Hp - 32;
           Sp = Sp + 8;
           call _c1pga() args: 0, res: 0, upd: 0;
       c1ph5: // global
           R1 = _s1jfo::P64;
           Sp = Sp + 48;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pgc_info" {
     block_c1pgc_info:
         const _c1pgc;
         const 5;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.382375141 UTC

[section ""data" . GHC.Real.$w$sreduce_closure" {
     GHC.Real.$w$sreduce_closure:
         const GHC.Real.$w$sreduce_info;
         const 0;
 },
 section ""relreadonly" . u1piZ_srtd" {
     u1piZ_srtd:
         const S1jKw_srt+160;
         const 33;
         const 5905711105;
 },
 GHC.Real.$w$sreduce_entry() //  [R2, R3]
         { []
         }
     {offset
       c1pig: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1pih; else goto c1pii;
       c1pih: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$w$sreduce_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1pii: // global
           I64[Sp - 24] = block_c1pib_info;
           _s1jfv::P64 = R3;
           R3 = GHC.Real.even1_closure;
           _s1jfu::P64 = R2;
           R2 = _s1jfv::P64;
           P64[Sp - 16] = _s1jfu::P64;
           P64[Sp - 8] = _s1jfv::P64;
           Sp = Sp - 24;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$w$sreduce_info" {
     GHC.Real.$w$sreduce_info:
         const GHC.Real.$w$sreduce_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const u1piZ_srtd;
 },
 _c1pib() //  [R1]
         { []
         }
     {offset
       c1pib: // global
           if (R1 == 1) goto c1pif; else goto c1pie;
       c1pif: // global
           R1 = GHC.Real.ratioZeroDenominatorError_closure;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c1pie: // global
           I64[Sp] = block_c1pil_info;
           R2 = P64[Sp + 16];
           call GHC.Integer.Type.absInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pib_info" {
     block_c1pib_info:
         const _c1pib;
         const 2;
         const 6918091981889470494;
         const S1jKw_srt+160;
 },
 _c1pil() //  [R1]
         { []
         }
     {offset
       c1pil: // global
           I64[Sp - 8] = block_c1pip_info;
           R2 = P64[Sp + 8];
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Integer.Type.absInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pil_info" {
     block_c1pil_info:
         const _c1pil;
         const 2;
         const 6917529031936049182;
         const S1jKw_srt+160;
 },
 _c1pip() //  [R1]
         { []
         }
     {offset
       c1pip: // global
           _s1jfz::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1pit_info;
           R3 = _s1jfz::P64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Real.$fEnumRatio_gcd'_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pip_info" {
     block_c1pip_info:
         const _c1pip;
         const 3;
         const 6917529031936049182;
         const S1jKw_srt+160;
 },
 _c1pit() //  [R1]
         { []
         }
     {offset
       c1pit: // global
           I64[Sp - 8] = block_c1piA_info;
           R3 = GHC.Real.even1_closure;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pit_info" {
     block_c1pit_info:
         const _c1pit;
         const 2;
         const 4611686022722355230;
         const S1jKw_srt+160;
 },
 _c1piA() //  [R1]
         { []
         }
     {offset
       c1piA: // global
           if (R1 == 1) goto c1piV; else goto c1piM;
       c1piV: // global
           R1 = GHC.Real.divZeroError_closure;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c1piM: // global
           I64[Sp] = block_c1piF_info;
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 16];
           call GHC.Integer.Type.quotInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1piA_info" {
     block_c1piA_info:
         const _c1piA;
         const 3;
         const 4294967326;
         const S1jKw_srt+424;
 },
 _c1piF() //  [R1]
         { []
         }
     {offset
       c1piF: // global
           I64[Sp + 16] = block_c1piJ_info;
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 24];
           P64[Sp + 24] = R1;
           Sp = Sp + 16;
           call GHC.Integer.Type.quotInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1piF_info" {
     block_c1piF_info:
         const _c1piF;
         const 131;
         const 30;
 },
 _c1piJ() //  [R1]
         { []
         }
     {offset
       c1piJ: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1piJ_info" {
     block_c1piJ_info:
         const _c1piJ;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.39768868 UTC

[section ""data" . GHC.Real.reduce_$sreduce_closure" {
     GHC.Real.reduce_$sreduce_closure:
         const GHC.Real.reduce_$sreduce_info;
         const 0;
 },
 GHC.Real.reduce_$sreduce_entry() //  [R2, R3]
         { []
         }
     {offset
       c1pjz: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1pjA; else goto c1pjB;
       c1pjA: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.reduce_$sreduce_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1pjB: // global
           I64[Sp - 8] = block_c1pjw_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Real.$w$sreduce_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.reduce_$sreduce_info" {
     GHC.Real.reduce_$sreduce_info:
         const GHC.Real.reduce_$sreduce_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const S1jKw_srt+416;
 },
 _c1pjw() //  [R1, R2]
         { []
         }
     {offset
       c1pjw: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1pjE; else goto c1pjD;
       c1pjE: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c1pjD: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pjw_info" {
     block_c1pjw_info:
         const _c1pjw;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.404928034 UTC

[section ""data" . GHC.Real.$fRealWord_$ctoRational_closure" {
     GHC.Real.$fRealWord_$ctoRational_closure:
         const GHC.Real.$fRealWord_$ctoRational_info;
         const 0;
 },
 section ""relreadonly" . u1pki_srtd" {
     u1pki_srtd:
         const S1jKw_srt;
         const 56;
         const 40532396646335489;
 },
 GHC.Real.$fRealWord_$ctoRational_entry() //  [R2]
         { []
         }
     {offset
       c1pjV: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1pk9; else goto c1pka;
       c1pk9: // global
           R2 = R2;
           R1 = GHC.Real.$fRealWord_$ctoRational_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1pka: // global
           I64[Sp - 8] = block_c1pjS_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1pkh; else goto c1pjT;
       u1pkh: // global
           call _c1pjS(R1) args: 0, res: 0, upd: 0;
       c1pjT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fRealWord_$ctoRational_info" {
     GHC.Real.$fRealWord_$ctoRational_info:
         const GHC.Real.$fRealWord_$ctoRational_entry;
         const 0;
         const 18446744069414584334;
         const 4294967301;
         const u1pki_srtd;
 },
 section ""relreadonly" . u1pkj_srtd" {
     u1pkj_srtd:
         const S1jKw_srt;
         const 53;
         const 4503599627371521;
 },
 _c1pjS() //  [R1]
         { []
         }
     {offset
       c1pjS: // global
           I64[Sp] = block_c1pjY_info;
           R2 = I64[R1 + 7];
           call GHC.Integer.Type.wordToInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pjS_info" {
     block_c1pjS_info:
         const _c1pjS;
         const 0;
         const 18446744069414584350;
         const u1pkj_srtd;
 },
 section ""relreadonly" . u1pkk_srtd" {
     u1pkk_srtd:
         const S1jKw_srt;
         const 53;
         const 4503599627371521;
 },
 _c1pjY() //  [R1]
         { []
         }
     {offset
       c1pjY: // global
           I64[Sp] = block_c1pk2_info;
           R3 = GHC.Real.$fEnumRatio1_closure;
           R2 = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pjY_info" {
     block_c1pjY_info:
         const _c1pjY;
         const 0;
         const 18446744069414584350;
         const u1pkk_srtd;
 },
 section ""relreadonly" . u1pkl_srtd" {
     u1pkl_srtd:
         const S1jKw_srt+80;
         const 43;
         const 4398046511105;
 },
 _c1pk2() //  [R1]
         { []
         }
     {offset
       c1pk2: // global
           I64[Sp] = block_c1pk6_info;
           R3 = GHC.Real.$fEnumRatio1_closure;
           R2 = R1;
           call GHC.Real.$w$sreduce_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pk2_info" {
     block_c1pk2_info:
         const _c1pk2;
         const 0;
         const 18446744069414584350;
         const u1pkl_srtd;
 },
 _c1pk6() //  [R1, R2]
         { []
         }
     {offset
       c1pk6: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1pkg; else goto c1pkf;
       c1pkg: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c1pkf: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pk6_info" {
     block_c1pk6_info:
         const _c1pk6;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.417656708 UTC

[section ""data" . GHC.Real.$fRealWord_closure" {
     GHC.Real.$fRealWord_closure:
         const GHC.Real.C:Real_con_info;
         const GHC.Num.$fNumWord_closure;
         const GHC.Classes.$fOrdWord_closure;
         const GHC.Real.$fRealWord_$ctoRational_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.419465024 UTC

[section ""data" . GHC.Real.$fIntegralWord_closure" {
     GHC.Real.$fIntegralWord_closure:
         const GHC.Real.C:Integral_con_info;
         const GHC.Real.$fRealWord_closure+1;
         const GHC.Enum.$fEnumWord_closure;
         const GHC.Real.$fIntegralWord_$cquot_closure+2;
         const GHC.Real.$fIntegralWord_$crem_closure+2;
         const GHC.Real.$fIntegralWord_$cquot_closure+2;
         const GHC.Real.$fIntegralWord_$crem_closure+2;
         const GHC.Real.$fIntegralWord_$cquotRem_closure+2;
         const GHC.Real.$fIntegralWord_$cdivMod_closure+2;
         const GHC.Real.$fIntegralWord_$ctoInteger_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.42358063 UTC

[section ""data" . GHC.Real.$fFractionalRatio_$s$c*_closure" {
     GHC.Real.$fFractionalRatio_$s$c*_closure:
         const GHC.Real.$fFractionalRatio_$s$c*_info;
         const 0;
 },
 section ""relreadonly" . u1plm_srtd" {
     u1plm_srtd:
         const S1jKw_srt;
         const 57;
         const 76561193665298433;
 },
 GHC.Real.$fFractionalRatio_$s$c*_entry() //  [R2, R3]
         { []
         }
     {offset
       c1pkS: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1plb; else goto c1plc;
       c1plb: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fFractionalRatio_$s$c*_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1plc: // global
           I64[Sp - 16] = block_c1pkP_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1pll; else goto c1pkQ;
       u1pll: // global
           call _c1pkP(R1) args: 0, res: 0, upd: 0;
       c1pkQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fFractionalRatio_$s$c*_info" {
     GHC.Real.$fFractionalRatio_$s$c*_info:
         const GHC.Real.$fFractionalRatio_$s$c*_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const u1plm_srtd;
 },
 section ""relreadonly" . u1pln_srtd" {
     u1pln_srtd:
         const S1jKw_srt;
         const 53;
         const 4503599627370497;
 },
 _c1pkP() //  [R1]
         { []
         }
     {offset
       c1pkP: // global
           I64[Sp - 8] = block_c1pkV_info;
           _s1jfV::P64 = P64[R1 + 7];
           _s1jfW::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s1jfW::P64;
           P64[Sp + 8] = _s1jfV::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1plk; else goto c1pkW;
       u1plk: // global
           call _c1pkV(R1) args: 0, res: 0, upd: 0;
       c1pkW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pkP_info" {
     block_c1pkP_info:
         const _c1pkP;
         const 1;
         const 18446744069414584350;
         const u1pln_srtd;
 },
 section ""relreadonly" . u1plo_srtd" {
     u1plo_srtd:
         const S1jKw_srt;
         const 53;
         const 4503599627370497;
 },
 _c1pkV() //  [R1]
         { []
         }
     {offset
       c1pkV: // global
           I64[Sp] = block_c1pl0_info;
           R3 = P64[R1 + 15];
           R2 = P64[Sp + 8];
           P64[Sp + 8] = P64[R1 + 7];
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pkV_info" {
     block_c1pkV_info:
         const _c1pkV;
         const 2;
         const 18446744069414584350;
         const u1plo_srtd;
 },
 section ""relreadonly" . u1plp_srtd" {
     u1plp_srtd:
         const S1jKw_srt;
         const 53;
         const 4503599627370497;
 },
 _c1pl0() //  [R1]
         { []
         }
     {offset
       c1pl0: // global
           _s1jfY::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1pl4_info;
           R3 = _s1jfY::P64;
           R2 = P64[Sp + 16];
           P64[Sp + 16] = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pl0_info" {
     block_c1pl0_info:
         const _c1pl0;
         const 2;
         const 18446744069414584350;
         const u1plp_srtd;
 },
 _c1pl4() //  [R1]
         { []
         }
     {offset
       c1pl4: // global
           _s1jg1::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1pl8_info;
           R3 = _s1jg1::P64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Real.$w$sreduce_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pl4_info" {
     block_c1pl4_info:
         const _c1pl4;
         const 1;
         const 4294967326;
         const S1jKw_srt+416;
 },
 _c1pl8() //  [R1, R2]
         { []
         }
     {offset
       c1pl8: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1plj; else goto c1pli;
       c1plj: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c1pli: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pl8_info" {
     block_c1pl8_info:
         const _c1pl8;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.440173311 UTC

[section ""data" . GHC.Real.$w$s$c-_closure" {
     GHC.Real.$w$s$c-_closure:
         const GHC.Real.$w$s$c-_info;
         const 0;
 },
 section ""relreadonly" . u1pmj_srtd" {
     u1pmj_srtd:
         const S1jKw_srt;
         const 59;
         const 436849163854938113;
 },
 GHC.Real.$w$s$c-_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c1plY: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1pma; else goto c1pmb;
       c1pma: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$w$s$c-_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1pmb: // global
           I64[Sp - 40] = block_c1plW_info;
           _s1jg6::P64 = R3;
           R3 = R5;
           _s1jg5::P64 = R2;
           R2 = _s1jg6::P64;
           P64[Sp - 32] = _s1jg5::P64;
           P64[Sp - 24] = _s1jg6::P64;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$w$s$c-_info" {
     GHC.Real.$w$s$c-_info:
         const GHC.Real.$w$s$c-_entry;
         const 0;
         const 18446744069414584334;
         const 17179869208;
         const u1pmj_srtd;
 },
 section ""relreadonly" . u1pmk_srtd" {
     u1pmk_srtd:
         const S1jKw_srt;
         const 58;
         const 148618787703226369;
 },
 _c1plW() //  [R1]
         { []
         }
     {offset
       c1plW: // global
           I64[Sp] = block_c1pm1_info;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 24];
           P64[Sp + 24] = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1plW_info" {
     block_c1plW_info:
         const _c1plW;
         const 4;
         const 18446744069414584350;
         const u1pmk_srtd;
 },
 section ""relreadonly" . u1pml_srtd" {
     u1pml_srtd:
         const S1jKw_srt;
         const 58;
         const 148618787703226369;
 },
 _c1pm1() //  [R1]
         { []
         }
     {offset
       c1pm1: // global
           I64[Sp + 16] = block_c1pm5_info;
           R3 = P64[Sp + 32];
           R2 = P64[Sp + 8];
           P64[Sp + 32] = R1;
           Sp = Sp + 16;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pm1_info" {
     block_c1pm1_info:
         const _c1pm1;
         const 132;
         const 18446744069414584350;
         const u1pml_srtd;
 },
 _c1pm5() //  [R1]
         { []
         }
     {offset
       c1pm5: // global
           I64[Sp] = block_c1pm9_info;
           R3 = P64[Sp + 16];
           R2 = R1;
           call GHC.Integer.Type.minusInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pm5_info" {
     block_c1pm5_info:
         const _c1pm5;
         const 2;
         const 141733920798;
         const S1jKw_srt+416;
 },
 _c1pm9() //  [R1]
         { []
         }
     {offset
       c1pm9: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 24;
           call GHC.Real.$w$sreduce_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pm9_info" {
     block_c1pm9_info:
         const _c1pm9;
         const 130;
         const 4294967326;
         const S1jKw_srt+416;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.45246957 UTC

[section ""data" . GHC.Real.$fEnumRatio_$s$c-_closure" {
     GHC.Real.$fEnumRatio_$s$c-_closure:
         const GHC.Real.$fEnumRatio_$s$c-_info;
         const 0;
 },
 GHC.Real.$fEnumRatio_$s$c-_entry() //  [R2, R3]
         { []
         }
     {offset
       c1pmN: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1pmY; else goto c1pmZ;
       c1pmY: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fEnumRatio_$s$c-_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1pmZ: // global
           I64[Sp - 16] = block_c1pmK_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1pn6; else goto c1pmL;
       u1pn6: // global
           call _c1pmK(R1) args: 0, res: 0, upd: 0;
       c1pmL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fEnumRatio_$s$c-_info" {
     GHC.Real.$fEnumRatio_$s$c-_info:
         const GHC.Real.$fEnumRatio_$s$c-_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S1jKw_srt+464;
 },
 _c1pmK() //  [R1]
         { []
         }
     {offset
       c1pmK: // global
           I64[Sp - 8] = block_c1pmQ_info;
           _s1jgg::P64 = P64[R1 + 7];
           _s1jgh::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s1jgh::P64;
           P64[Sp + 8] = _s1jgg::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1pn5; else goto c1pmR;
       u1pn5: // global
           call _c1pmQ(R1) args: 0, res: 0, upd: 0;
       c1pmR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pmK_info" {
     block_c1pmK_info:
         const _c1pmK;
         const 1;
         const 4294967326;
         const S1jKw_srt+464;
 },
 _c1pmQ() //  [R1]
         { []
         }
     {offset
       c1pmQ: // global
           _s1jgg::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c1pmV_info;
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = P64[Sp + 8];
           R2 = _s1jgg::P64;
           Sp = Sp + 16;
           call GHC.Real.$w$s$c-_entry(R5,
                                       R4,
                                       R3,
                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pmQ_info" {
     block_c1pmQ_info:
         const _c1pmQ;
         const 2;
         const 4294967326;
         const S1jKw_srt+464;
 },
 _c1pmV() //  [R1, R2]
         { []
         }
     {offset
       c1pmV: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1pn4; else goto c1pn3;
       c1pn4: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c1pn3: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pmV_info" {
     block_c1pmV_info:
         const _c1pmV;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.462872798 UTC

[section ""data" . GHC.Real.$w$s$c+_closure" {
     GHC.Real.$w$s$c+_closure:
         const GHC.Real.$w$s$c+_info;
         const 0;
 },
 section ""relreadonly" . u1pnP_srtd" {
     u1pnP_srtd:
         const S1jKw_srt;
         const 62;
         const 3463268113447911425;
 },
 GHC.Real.$w$s$c+_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c1pnu: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1pnG; else goto c1pnH;
       c1pnG: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$w$s$c+_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1pnH: // global
           I64[Sp - 40] = block_c1pns_info;
           _s1jgp::P64 = R3;
           R3 = R5;
           _s1jgo::P64 = R2;
           R2 = _s1jgp::P64;
           P64[Sp - 32] = _s1jgo::P64;
           P64[Sp - 24] = _s1jgp::P64;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$w$s$c+_info" {
     GHC.Real.$w$s$c+_info:
         const GHC.Real.$w$s$c+_entry;
         const 0;
         const 18446744069414584334;
         const 17179869208;
         const u1pnP_srtd;
 },
 section ""relreadonly" . u1pnQ_srtd" {
     u1pnQ_srtd:
         const S1jKw_srt;
         const 61;
         const 1157425104234217473;
 },
 _c1pns() //  [R1]
         { []
         }
     {offset
       c1pns: // global
           I64[Sp] = block_c1pnx_info;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 24];
           P64[Sp + 24] = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pns_info" {
     block_c1pns_info:
         const _c1pns;
         const 4;
         const 18446744069414584350;
         const u1pnQ_srtd;
 },
 section ""relreadonly" . u1pnR_srtd" {
     u1pnR_srtd:
         const S1jKw_srt;
         const 61;
         const 1157425104234217473;
 },
 _c1pnx() //  [R1]
         { []
         }
     {offset
       c1pnx: // global
           I64[Sp + 16] = block_c1pnB_info;
           R3 = P64[Sp + 32];
           R2 = P64[Sp + 8];
           P64[Sp + 32] = R1;
           Sp = Sp + 16;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pnx_info" {
     block_c1pnx_info:
         const _c1pnx;
         const 132;
         const 18446744069414584350;
         const u1pnR_srtd;
 },
 _c1pnB() //  [R1]
         { []
         }
     {offset
       c1pnB: // global
           I64[Sp] = block_c1pnF_info;
           R3 = P64[Sp + 16];
           R2 = R1;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pnB_info" {
     block_c1pnB_info:
         const _c1pnB;
         const 2;
         const 1103806595102;
         const S1jKw_srt+416;
 },
 _c1pnF() //  [R1]
         { []
         }
     {offset
       c1pnF: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 24;
           call GHC.Real.$w$sreduce_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pnF_info" {
     block_c1pnF_info:
         const _c1pnF;
         const 130;
         const 4294967326;
         const S1jKw_srt+416;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.475475704 UTC

[section ""data" . GHC.Real.$fEnumRatio_$s$c+_closure" {
     GHC.Real.$fEnumRatio_$s$c+_closure:
         const GHC.Real.$fEnumRatio_$s$c+_info;
         const 0;
 },
 GHC.Real.$fEnumRatio_$s$c+_entry() //  [R2, R3]
         { []
         }
     {offset
       c1poj: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1pou; else goto c1pov;
       c1pou: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fEnumRatio_$s$c+_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1pov: // global
           I64[Sp - 16] = block_c1pog_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1poC; else goto c1poh;
       u1poC: // global
           call _c1pog(R1) args: 0, res: 0, upd: 0;
       c1poh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fEnumRatio_$s$c+_info" {
     GHC.Real.$fEnumRatio_$s$c+_info:
         const GHC.Real.$fEnumRatio_$s$c+_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S1jKw_srt+488;
 },
 _c1pog() //  [R1]
         { []
         }
     {offset
       c1pog: // global
           I64[Sp - 8] = block_c1pom_info;
           _s1jgz::P64 = P64[R1 + 7];
           _s1jgA::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s1jgA::P64;
           P64[Sp + 8] = _s1jgz::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1poB; else goto c1pon;
       u1poB: // global
           call _c1pom(R1) args: 0, res: 0, upd: 0;
       c1pon: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pog_info" {
     block_c1pog_info:
         const _c1pog;
         const 1;
         const 4294967326;
         const S1jKw_srt+488;
 },
 _c1pom() //  [R1]
         { []
         }
     {offset
       c1pom: // global
           _s1jgz::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c1por_info;
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = P64[Sp + 8];
           R2 = _s1jgz::P64;
           Sp = Sp + 16;
           call GHC.Real.$w$s$c+_entry(R5,
                                       R4,
                                       R3,
                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pom_info" {
     block_c1pom_info:
         const _c1pom;
         const 2;
         const 4294967326;
         const S1jKw_srt+488;
 },
 _c1por() //  [R1, R2]
         { []
         }
     {offset
       c1por: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1poA; else goto c1poz;
       c1poA: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c1poz: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1por_info" {
     block_c1por_info:
         const _c1por;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.483651029 UTC

[section ""data" . GHC.Real.$fFractionalRatio_$s$fNumRatio_closure" {
     GHC.Real.$fFractionalRatio_$s$fNumRatio_closure:
         const GHC.Num.C:Num_con_info;
         const GHC.Real.$fEnumRatio_$s$c+_closure+2;
         const GHC.Real.$fEnumRatio_$s$c-_closure+2;
         const GHC.Real.$fFractionalRatio_$s$c*_closure+2;
         const GHC.Real.$fFractionalRatio_$s$cnegate_closure+1;
         const GHC.Real.$fFractionalRatio_$s$cabs_closure+1;
         const GHC.Real.$fFractionalRatio_$s$csignum_closure+1;
         const GHC.Real.$fFractionalRatio_$s$cfromInteger_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.487465251 UTC

[section ""data" . GHC.Real.$w$s$cfromRational_closure" {
     GHC.Real.$w$s$cfromRational_closure:
         const GHC.Real.$w$s$cfromRational_info;
         const 0;
 },
 section ""relreadonly" . u1pph_srtd" {
     u1pph_srtd:
         const S1jKw_srt;
         const 64;
         const 9227875636482146305;
 },
 GHC.Real.$w$s$cfromRational_entry() //  [R2, R3]
         { []
         }
     {offset
       c1pp1: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1pp9; else goto c1ppa;
       c1pp9: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$w$s$cfromRational_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1ppa: // global
           I64[Sp - 24] = block_c1poZ_info;
           _s1jgH::P64 = R2;
           R2 = R3;
           P64[Sp - 16] = _s1jgH::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call GHC.Integer.Type.absInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$w$s$cfromRational_info" {
     GHC.Real.$w$s$cfromRational_info:
         const GHC.Real.$w$s$cfromRational_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const u1pph_srtd;
 },
 section ""relreadonly" . u1ppi_srtd" {
     u1ppi_srtd:
         const S1jKw_srt;
         const 53;
         const 4503599627370497;
 },
 _c1poZ() //  [R1]
         { []
         }
     {offset
       c1poZ: // global
           I64[Sp] = block_c1pp4_info;
           R2 = P64[Sp + 16];
           P64[Sp + 16] = R1;
           call GHC.Integer.Type.signumInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1poZ_info" {
     block_c1poZ_info:
         const _c1poZ;
         const 2;
         const 18446744069414584350;
         const u1ppi_srtd;
 },
 section ""relreadonly" . u1ppj_srtd" {
     u1ppj_srtd:
         const S1jKw_srt;
         const 53;
         const 4503599627370497;
 },
 _c1pp4() //  [R1]
         { []
         }
     {offset
       c1pp4: // global
           _s1jgH::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1pp8_info;
           R3 = R1;
           R2 = _s1jgH::P64;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pp4_info" {
     block_c1pp4_info:
         const _c1pp4;
         const 2;
         const 18446744069414584350;
         const u1ppj_srtd;
 },
 _c1pp8() //  [R1]
         { []
         }
     {offset
       c1pp8: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Real.$w$sreduce_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pp8_info" {
     block_c1pp8_info:
         const _c1pp8;
         const 1;
         const 4294967326;
         const S1jKw_srt+416;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.499103332 UTC

[section ""data" . GHC.Real.$fFractionalRatio_$s$cfromRational_closure" {
     GHC.Real.$fFractionalRatio_$s$cfromRational_closure:
         const GHC.Real.$fFractionalRatio_$s$cfromRational_info;
         const 0;
 },
 GHC.Real.$fFractionalRatio_$s$cfromRational_entry() //  [R2]
         { []
         }
     {offset
       c1ppI: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1ppO; else goto c1ppP;
       c1ppO: // global
           R2 = R2;
           R1 = GHC.Real.$fFractionalRatio_$s$cfromRational_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1ppP: // global
           I64[Sp - 8] = block_c1ppF_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1ppU; else goto c1ppG;
       u1ppU: // global
           call _c1ppF(R1) args: 0, res: 0, upd: 0;
       c1ppG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fFractionalRatio_$s$cfromRational_info" {
     GHC.Real.$fFractionalRatio_$s$cfromRational_info:
         const GHC.Real.$fFractionalRatio_$s$cfromRational_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S1jKw_srt+504;
 },
 _c1ppF() //  [R1]
         { []
         }
     {offset
       c1ppF: // global
           I64[Sp] = block_c1ppL_info;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Real.$w$s$cfromRational_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1ppF_info" {
     block_c1ppF_info:
         const _c1ppF;
         const 0;
         const 4294967326;
         const S1jKw_srt+504;
 },
 _c1ppL() //  [R1, R2]
         { []
         }
     {offset
       c1ppL: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1ppT; else goto c1ppS;
       c1ppT: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c1ppS: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1ppL_info" {
     block_c1ppL_info:
         const _c1ppL;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.508534418 UTC

[section ""data" . GHC.Real.$w$s$c/_closure" {
     GHC.Real.$w$s$c/_closure:
         const GHC.Real.$w$s$c/_info;
         const 0;
 },
 section ""relreadonly" . u1pqE_srtd" {
     u1pqE_srtd:
         const S1jKw_srt;
         const 66;
         const 4503599627370497;
         const 2;
 },
 GHC.Real.$w$s$c/_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c1pqe: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1pqu; else goto c1pqv;
       c1pqu: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$w$s$c/_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1pqv: // global
           I64[Sp - 24] = block_c1pqc_info;
           _s1jgU::P64 = R3;
           R3 = R4;
           _s1jgT::P64 = R2;
           R2 = _s1jgU::P64;
           P64[Sp - 16] = _s1jgT::P64;
           P64[Sp - 8] = R5;
           Sp = Sp - 24;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$w$s$c/_info" {
     GHC.Real.$w$s$c/_info:
         const GHC.Real.$w$s$c/_entry;
         const 0;
         const 18446744069414584334;
         const 17179869208;
         const u1pqE_srtd;
 },
 section ""relreadonly" . u1pqF_srtd" {
     u1pqF_srtd:
         const S1jKw_srt;
         const 53;
         const 4503599627370497;
 },
 _c1pqc() //  [R1]
         { []
         }
     {offset
       c1pqc: // global
           I64[Sp - 8] = block_c1pqh_info;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Integer.Type.absInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pqc_info" {
     block_c1pqc_info:
         const _c1pqc;
         const 2;
         const 18446744069414584350;
         const u1pqF_srtd;
 },
 section ""relreadonly" . u1pqG_srtd" {
     u1pqG_srtd:
         const S1jKw_srt;
         const 53;
         const 4503599627370497;
 },
 _c1pqh() //  [R1]
         { []
         }
     {offset
       c1pqh: // global
           I64[Sp] = block_c1pql_info;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Integer.Type.signumInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pqh_info" {
     block_c1pqh_info:
         const _c1pqh;
         const 3;
         const 18446744069414584350;
         const u1pqG_srtd;
 },
 section ""relreadonly" . u1pqH_srtd" {
     u1pqH_srtd:
         const S1jKw_srt;
         const 53;
         const 4503599627370497;
 },
 _c1pql() //  [R1]
         { []
         }
     {offset
       c1pql: // global
           I64[Sp] = block_c1pqp_info;
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 16];
           P64[Sp + 24] = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pql_info" {
     block_c1pql_info:
         const _c1pql;
         const 3;
         const 18446744069414584350;
         const u1pqH_srtd;
 },
 section ""relreadonly" . u1pqI_srtd" {
     u1pqI_srtd:
         const S1jKw_srt;
         const 53;
         const 4503599627370497;
 },
 _c1pqp() //  [R1]
         { []
         }
     {offset
       c1pqp: // global
           I64[Sp] = block_c1pqt_info;
           R3 = P64[Sp + 24];
           R2 = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pqp_info" {
     block_c1pqp_info:
         const _c1pqp;
         const 131;
         const 18446744069414584350;
         const u1pqI_srtd;
 },
 _c1pqt() //  [R1]
         { []
         }
     {offset
       c1pqt: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 32;
           call GHC.Real.$w$sreduce_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pqt_info" {
     block_c1pqt_info:
         const _c1pqt;
         const 387;
         const 4294967326;
         const S1jKw_srt+416;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.525630724 UTC

[section ""data" . GHC.Real.$fFractionalRatio_$s$c/_closure" {
     GHC.Real.$fFractionalRatio_$s$c/_closure:
         const GHC.Real.$fFractionalRatio_$s$c/_info;
         const 0;
 },
 GHC.Real.$fFractionalRatio_$s$c/_entry() //  [R2, R3]
         { []
         }
     {offset
       c1prf: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1prq; else goto c1prr;
       c1prq: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fFractionalRatio_$s$c/_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1prr: // global
           I64[Sp - 16] = block_c1prc_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1pry; else goto c1prd;
       u1pry: // global
           call _c1prc(R1) args: 0, res: 0, upd: 0;
       c1prd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fFractionalRatio_$s$c/_info" {
     GHC.Real.$fFractionalRatio_$s$c/_info:
         const GHC.Real.$fFractionalRatio_$s$c/_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S1jKw_srt+520;
 },
 _c1prc() //  [R1]
         { []
         }
     {offset
       c1prc: // global
           I64[Sp - 8] = block_c1pri_info;
           _s1jh5::P64 = P64[R1 + 7];
           _s1jh6::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s1jh6::P64;
           P64[Sp + 8] = _s1jh5::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1prx; else goto c1prj;
       u1prx: // global
           call _c1pri(R1) args: 0, res: 0, upd: 0;
       c1prj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1prc_info" {
     block_c1prc_info:
         const _c1prc;
         const 1;
         const 4294967326;
         const S1jKw_srt+520;
 },
 _c1pri() //  [R1]
         { []
         }
     {offset
       c1pri: // global
           _s1jh5::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c1prn_info;
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = P64[Sp + 8];
           R2 = _s1jh5::P64;
           Sp = Sp + 16;
           call GHC.Real.$w$s$c/_entry(R5,
                                       R4,
                                       R3,
                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pri_info" {
     block_c1pri_info:
         const _c1pri;
         const 2;
         const 4294967326;
         const S1jKw_srt+520;
 },
 _c1prn() //  [R1, R2]
         { []
         }
     {offset
       c1prn: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1prw; else goto c1prv;
       c1prw: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c1prv: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1prn_info" {
     block_c1prn_info:
         const _c1prn;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.533784399 UTC

[section ""data" . GHC.Real.$fFractionalRatio_$s$fFractionalRatio_closure" {
     GHC.Real.$fFractionalRatio_$s$fFractionalRatio_closure:
         const GHC.Real.C:Fractional_con_info;
         const GHC.Real.$fFractionalRatio_$s$fNumRatio_closure+1;
         const GHC.Real.$fFractionalRatio_$s$c/_closure+2;
         const GHC.Real.$fFractionalRatio_$s$crecip_closure+1;
         const GHC.Real.$fFractionalRatio_$s$cfromRational_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.535611296 UTC

[section ""data" . GHC.Real.ratioPrec_closure" {
     GHC.Real.ratioPrec_closure:
         const GHC.Types.I#_con_info;
         const 7;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.538050301 UTC

[section ""data" . GHC.Real.infinity_closure" {
     GHC.Real.infinity_closure:
         const GHC.Real.:%_con_info;
         const GHC.Real.$fEnumRatio1_closure;
         const GHC.Real.even1_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.540696752 UTC

[section ""data" . GHC.Real.notANumber_closure" {
     GHC.Real.notANumber_closure:
         const GHC.Real.:%_con_info;
         const GHC.Real.even1_closure;
         const GHC.Real.even1_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.544915514 UTC

[section ""data" . GHC.Real.numerator_closure" {
     GHC.Real.numerator_closure:
         const GHC.Real.numerator_info;
 },
 GHC.Real.numerator_entry() //  [R2]
         { []
         }
     {offset
       c1ps1: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1ps2; else goto c1ps3;
       c1ps2: // global
           R2 = R2;
           R1 = GHC.Real.numerator_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1ps3: // global
           I64[Sp - 8] = block_c1prY_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1ps7; else goto c1prZ;
       u1ps7: // global
           call _c1prY(R1) args: 0, res: 0, upd: 0;
       c1prZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.numerator_info" {
     GHC.Real.numerator_info:
         const GHC.Real.numerator_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1prY() //  [R1]
         { []
         }
     {offset
       c1prY: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1prY_info" {
     block_c1prY_info:
         const _c1prY;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.551172388 UTC

[section ""data" . GHC.Real.denominator_closure" {
     GHC.Real.denominator_closure:
         const GHC.Real.denominator_info;
 },
 GHC.Real.denominator_entry() //  [R2]
         { []
         }
     {offset
       c1pso: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1psp; else goto c1psq;
       c1psp: // global
           R2 = R2;
           R1 = GHC.Real.denominator_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1psq: // global
           I64[Sp - 8] = block_c1psl_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1psu; else goto c1psm;
       u1psu: // global
           call _c1psl(R1) args: 0, res: 0, upd: 0;
       c1psm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.denominator_info" {
     GHC.Real.denominator_info:
         const GHC.Real.denominator_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1psl() //  [R1]
         { []
         }
     {offset
       c1psl: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1psl_info" {
     block_c1psl_info:
         const _c1psl;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.558834427 UTC

[section ""data" . GHC.Real.$w$snumericEnumFrom_closure" {
     GHC.Real.$w$snumericEnumFrom_closure:
         const GHC.Real.$w$snumericEnumFrom_info;
         const 0;
 },
 section ""relreadonly" . u1pt4_srtd" {
     u1pt4_srtd:
         const S1jKw_srt+80;
         const 58;
         const 146366987889541121;
 },
 sat_s1jhu_entry() //  [R1]
         { []
         }
     {offset
       c1psR: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1psS; else goto c1psT;
       c1psS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1psT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c1psM_info;
           R5 = GHC.Real.$fEnumRatio1_closure;
           R4 = GHC.Real.$fEnumRatio1_closure;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Real.$w$s$c+_entry(R5,
                                       R4,
                                       R3,
                                       R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jhu_info" {
     sat_s1jhu_info:
         const sat_s1jhu_entry;
         const 2;
         const 18446744069414584338;
         const u1pt4_srtd;
 },
 _c1psM() //  [R1, R2]
         { []
         }
     {offset
       c1psM: // global
           I64[Sp] = block_c1psO_info;
           R3 = R2;
           R2 = R1;
           call GHC.Real.$w$snumericEnumFrom_entry(R3,
                                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c1psM_info" {
     block_c1psM_info:
         const _c1psM;
         const 0;
         const 4294967326;
         const S1jKw_srt+536;
 },
 _c1psO() //  [R1, R2]
         { []
         }
     {offset
       c1psO: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1psX; else goto c1psW;
       c1psX: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c1psW: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1psO_info" {
     block_c1psO_info:
         const _c1psO;
         const 0;
         const 30;
 },
 section ""relreadonly" . u1pt5_srtd" {
     u1pt5_srtd:
         const S1jKw_srt+80;
         const 58;
         const 146366987889541121;
 },
 GHC.Real.$w$snumericEnumFrom_entry() //  [R2, R3]
         { []
         }
     {offset
       c1psZ: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c1pt3; else goto c1pt2;
       c1pt3: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$w$snumericEnumFrom_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1pt2: // global
           I64[Hp - 48] = sat_s1jhu_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 48;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$w$snumericEnumFrom_info" {
     GHC.Real.$w$snumericEnumFrom_info:
         const GHC.Real.$w$snumericEnumFrom_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const u1pt5_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.569658129 UTC

[section ""data" . GHC.Real.$fEnumRatio_$snumericEnumFrom_closure" {
     GHC.Real.$fEnumRatio_$snumericEnumFrom_closure:
         const GHC.Real.$fEnumRatio_$snumericEnumFrom_info;
         const 0;
 },
 GHC.Real.$fEnumRatio_$snumericEnumFrom_entry() //  [R2]
         { []
         }
     {offset
       c1ptv: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1ptB; else goto c1ptC;
       c1ptB: // global
           R2 = R2;
           R1 = GHC.Real.$fEnumRatio_$snumericEnumFrom_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1ptC: // global
           I64[Sp - 8] = block_c1pts_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1ptH; else goto c1ptt;
       u1ptH: // global
           call _c1pts(R1) args: 0, res: 0, upd: 0;
       c1ptt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fEnumRatio_$snumericEnumFrom_info" {
     GHC.Real.$fEnumRatio_$snumericEnumFrom_info:
         const GHC.Real.$fEnumRatio_$snumericEnumFrom_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S1jKw_srt+536;
 },
 _c1pts() //  [R1]
         { []
         }
     {offset
       c1pts: // global
           I64[Sp] = block_c1pty_info;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Real.$w$snumericEnumFrom_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pts_info" {
     block_c1pts_info:
         const _c1pts;
         const 0;
         const 4294967326;
         const S1jKw_srt+536;
 },
 _c1pty() //  [R1, R2]
         { []
         }
     {offset
       c1pty: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1ptG; else goto c1ptF;
       c1ptG: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c1ptF: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pty_info" {
     block_c1pty_info:
         const _c1pty;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.580581099 UTC

[section ""data" . GHC.Real.$wnumericEnumFrom_closure" {
     GHC.Real.$wnumericEnumFrom_closure:
         const GHC.Real.$wnumericEnumFrom_info;
         const 0;
 },
 sat_s1jhG_entry() //  [R1]
         { []
         }
     {offset
       c1pud: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1pue; else goto c1puf;
       c1pue: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1puf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Real.$fEnumRatio1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jhG_info" {
     sat_s1jhG_info:
         const sat_s1jhG_entry;
         const 1;
         const 4294967312;
         const S1jKw_srt+552;
 },
 sat_s1jhL_entry() //  [R1]
         { []
         }
     {offset
       c1pug: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c1pum; else goto c1pun;
       c1pum: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1pun: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c1pu5_info;
           _s1jhC::P64 = P64[R1 + 16];
           R2 = _s1jhC::P64;
           P64[Sp - 32] = _s1jhC::P64;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Real.$p1Fractional_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jhL_info" {
     sat_s1jhL_info:
         const sat_s1jhL_entry;
         const 2;
         const 12884901906;
         const S1jKw_srt+552;
 },
 _c1pu5() //  [R1]
         { []
         }
     {offset
       c1pu5: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1puq; else goto c1pup;
       c1puq: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c1pup: // global
           I64[Hp - 16] = sat_s1jhG_info;
           P64[Hp] = R1;
           I64[Sp] = block_c1puh_info;
           R2 = R1;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 16];
           P64[Sp - 8] = Hp - 16;
           Sp = Sp - 24;
           call GHC.Num.+_entry(R2) args: 32, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c1pu5_info" {
     block_c1pu5_info:
         const _c1pu5;
         const 2;
         const 12884901918;
         const S1jKw_srt+552;
 },
 _c1puh() //  [R1]
         { []
         }
     {offset
       c1puh: // global
           I64[Sp + 16] = block_c1puj_info;
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Real.$wnumericEnumFrom_entry(R3,
                                                 R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c1puh_info" {
     block_c1puh_info:
         const _c1puh;
         const 130;
         const 4294967326;
         const S1jKw_srt+560;
 },
 _c1puj() //  [R1, R2]
         { []
         }
     {offset
       c1puj: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1puu; else goto c1put;
       c1puu: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c1put: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1puj_info" {
     block_c1puj_info:
         const _c1puj;
         const 0;
         const 30;
 },
 GHC.Real.$wnumericEnumFrom_entry() //  [R2, R3]
         { []
         }
     {offset
       c1puv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1puw; else goto c1pux;
       c1puw: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$wnumericEnumFrom_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1pux: // global
           I64[Sp - 16] = block_c1ptZ_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$wnumericEnumFrom_info" {
     GHC.Real.$wnumericEnumFrom_info:
         const GHC.Real.$wnumericEnumFrom_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S1jKw_srt+552;
 },
 _c1ptZ() //  [R1]
         { []
         }
     {offset
       c1ptZ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1puA; else goto c1puz;
       c1puA: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1puz: // global
           I64[Hp - 24] = sat_s1jhL_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R2 = Hp - 24;
           R1 = R1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1ptZ_info" {
     block_c1ptZ_info:
         const _c1ptZ;
         const 1;
         const 12884901918;
         const S1jKw_srt+552;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.594990824 UTC

[section ""data" . GHC.Real.numericEnumFrom_closure" {
     GHC.Real.numericEnumFrom_closure:
         const GHC.Real.numericEnumFrom_info;
         const 0;
 },
 GHC.Real.numericEnumFrom_entry() //  [R2, R3]
         { []
         }
     {offset
       c1pvd: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1pve; else goto c1pvf;
       c1pve: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.numericEnumFrom_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1pvf: // global
           I64[Sp - 8] = block_c1pva_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Real.$wnumericEnumFrom_entry(R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.numericEnumFrom_info" {
     GHC.Real.numericEnumFrom_info:
         const GHC.Real.numericEnumFrom_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S1jKw_srt+560;
 },
 _c1pva() //  [R1, R2]
         { []
         }
     {offset
       c1pva: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1pvi; else goto c1pvh;
       c1pvi: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c1pvh: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pva_info" {
     block_c1pva_info:
         const _c1pva;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.599969747 UTC

[section ""data" . sat_s1jhR_closure" {
     sat_s1jhR_closure:
         const GHC.Types.I#_con_info;
         const 2;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.6016758 UTC

[section ""data" . sat_s1jhS_closure" {
     sat_s1jhS_closure:
         const :_con_info;
         const sat_s1jhR_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.604130787 UTC

[section ""data" . GHC.Real.even2_closure" {
     GHC.Real.even2_closure:
         const GHC.Real.even2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Real.even2_entry() //  [R1]
         { []
         }
     {offset
       c1pvA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1pvB; else goto c1pvC;
       c1pvB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1pvC: // global
           (_c1pvx::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c1pvx::I64 == 0) goto c1pvz; else goto c1pvy;
       c1pvz: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c1pvy: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c1pvx::I64;
           R3 = sat_s1jhS_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Real.even2_info" {
     GHC.Real.even2_info:
         const GHC.Real.even2_entry;
         const 0;
         const 4294967317;
         const S1jKw_srt+576;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.609352444 UTC

[section ""data" . GHC.Real.$fEnumRatio2_closure" {
     GHC.Real.$fEnumRatio2_closure:
         const GHC.Real.$fEnumRatio2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Real.$fEnumRatio2_entry() //  [R1]
         { []
         }
     {offset
       c1pvT: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1pvU; else goto c1pvV;
       c1pvU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1pvV: // global
           (_c1pvN::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c1pvN::I64 == 0) goto c1pvP; else goto c1pvO;
       c1pvP: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c1pvO: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c1pvN::I64;
           I64[Sp - 24] = block_c1pvQ_info;
           R5 = GHC.Real.$fEnumRatio1_closure;
           R4 = GHC.Real.even2_closure;
           R3 = GHC.Real.$fEnumRatio1_closure;
           R2 = GHC.Real.$fEnumRatio1_closure;
           Sp = Sp - 24;
           call GHC.Real.$w$s$c/_entry(R5,
                                       R4,
                                       R3,
                                       R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Real.$fEnumRatio2_info" {
     GHC.Real.$fEnumRatio2_info:
         const GHC.Real.$fEnumRatio2_entry;
         const 0;
         const 1172526071829;
         const S1jKw_srt+520;
 },
 _c1pvQ() //  [R1, R2]
         { []
         }
     {offset
       c1pvQ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1pvY; else goto c1pvX;
       c1pvY: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c1pvX: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1pvQ_info" {
     block_c1pvQ_info:
         const _c1pvQ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.617235494 UTC

[section ""data" . GHC.Real.$w$snumericEnumFromTo_closure" {
     GHC.Real.$w$snumericEnumFromTo_closure:
         const GHC.Real.$w$snumericEnumFromTo_info;
         const 0;
 },
 ds_s1ji2_entry() //  [R1]
         { []
         }
     {offset
       c1pwo: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1pwz; else goto c1pwA;
       c1pwz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1pwA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c1pwl_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u1pwH; else goto c1pwm;
       u1pwH: // global
           call _c1pwl(R1) args: 0, res: 0, upd: 0;
       c1pwm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds_s1ji2_info" {
     ds_s1ji2_info:
         const ds_s1ji2_entry;
         const 1;
         const 35188667056144;
         const S1jKw_srt+488;
 },
 _c1pwl() //  [R1]
         { []
         }
     {offset
       c1pwl: // global
           I64[Sp - 16] = block_c1pwr_info;
           _s1ji4::P64 = P64[R1 + 7];
           _s1ji5::P64 = P64[R1 + 15];
           R1 = GHC.Real.$fEnumRatio2_closure;
           P64[Sp - 8] = _s1ji5::P64;
           P64[Sp] = _s1ji4::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1pwG; else goto c1pws;
       u1pwG: // global
           call _c1pwr(R1) args: 0, res: 0, upd: 0;
       c1pws: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c1pwl_info" {
     block_c1pwl_info:
         const _c1pwl;
         const 0;
         const 35188667056158;
         const S1jKw_srt+488;
 },
 _c1pwr() //  [R1]
         { []
         }
     {offset
       c1pwr: // global
           _s1ji4::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c1pww_info;
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = P64[Sp + 8];
           R2 = _s1ji4::P64;
           Sp = Sp + 16;
           call GHC.Real.$w$s$c+_entry(R5,
                                       R4,
                                       R3,
                                       R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c1pwr_info" {
     block_c1pwr_info:
         const _c1pwr;
         const 2;
         const 4294967326;
         const S1jKw_srt+488;
 },
 _c1pww() //  [R1, R2]
         { []
         }
     {offset
       c1pww: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1pwF; else goto c1pwE;
       c1pwF: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c1pwE: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1pww_info" {
     block_c1pww_info:
         const _c1pww;
         const 0;
         const 30;
 },
 sat_s1jid_entry() //  [R1, R2]
         { []
         }
     {offset
       c1pwN: // global
           R3 = P64[R1 + 7];
           R2 = R2;
           call GHC.Real.$fEnumRatio_$s$c<=_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1jid_info" {
     sat_s1jid_info:
         const sat_s1jid_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S1jKw_srt+600;
 },
 GHC.Real.$w$snumericEnumFromTo_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1pwQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1pwR; else goto c1pwS;
       c1pwR: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$w$snumericEnumFromTo_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1pwS: // global
           I64[Sp - 16] = block_c1pwe_info;
           R3 = R3;
           R2 = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           call GHC.Real.$w$snumericEnumFrom_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$w$snumericEnumFromTo_info" {
     GHC.Real.$w$snumericEnumFromTo_info:
         const GHC.Real.$w$snumericEnumFromTo_entry;
         const 0;
         const 246569777496078;
         const 12884901911;
         const S1jKw_srt+488;
 },
 _c1pwe() //  [R1, R2]
         { []
         }
     {offset
       c1pwe: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c1pwV; else goto c1pwU;
       c1pwV: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c1pwU: // global
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = R1;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = ds_s1ji2_info;
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = sat_s1jid_info;
           P64[Hp] = Hp - 32;
           R3 = Hp - 54;
           R2 = Hp - 7;
           Sp = Sp + 16;
           call GHC.List.takeWhile_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pwe_info" {
     block_c1pwe_info:
         const _c1pwe;
         const 1;
         const 105557411233822;
         const S1jKw_srt+488;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.630845403 UTC

[section ""data" . GHC.Real.$fEnumRatio_$snumericEnumFromTo_closure" {
     GHC.Real.$fEnumRatio_$snumericEnumFromTo_closure:
         const GHC.Real.$fEnumRatio_$snumericEnumFromTo_info;
         const 0;
 },
 GHC.Real.$fEnumRatio_$snumericEnumFromTo_entry() //  [R2, R3]
         { []
         }
     {offset
       c1pxw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1pxx; else goto c1pxy;
       c1pxx: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fEnumRatio_$snumericEnumFromTo_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1pxy: // global
           I64[Sp - 16] = block_c1pxt_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1pxC; else goto c1pxu;
       u1pxC: // global
           call _c1pxt(R1) args: 0, res: 0, upd: 0;
       c1pxu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fEnumRatio_$snumericEnumFromTo_info" {
     GHC.Real.$fEnumRatio_$snumericEnumFromTo_info:
         const GHC.Real.$fEnumRatio_$snumericEnumFromTo_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S1jKw_srt+608;
 },
 _c1pxt() //  [R1]
         { []
         }
     {offset
       c1pxt: // global
           R4 = P64[Sp + 8];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 16;
           call GHC.Real.$w$snumericEnumFromTo_entry(R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pxt_info" {
     block_c1pxt_info:
         const _c1pxt;
         const 1;
         const 4294967326;
         const S1jKw_srt+608;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.64019222 UTC

[section ""data" . GHC.Real.numericEnumFromTo_closure" {
     GHC.Real.numericEnumFromTo_closure:
         const GHC.Real.numericEnumFromTo_info;
         const 0;
 },
 $dNum_s1jir_entry() //  [R1]
         { []
         }
     {offset
       c1pxW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1pxX; else goto c1pxY;
       c1pxX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1pxY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Fractional_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dNum_s1jir_info" {
     $dNum_s1jir_info:
         const $dNum_s1jir_entry;
         const 1;
         const 16;
 },
 sat_s1jiu_entry() //  [R1]
         { []
         }
     {offset
       c1pyc: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1pyd; else goto c1pye;
       c1pyd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1pye: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Real.even2_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jiu_info" {
     sat_s1jiu_info:
         const sat_s1jiu_entry;
         const 1;
         const 4294967312;
         const S1jKw_srt+584;
 },
 sat_s1jit_entry() //  [R1]
         { []
         }
     {offset
       c1pyj: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1pyk; else goto c1pyl;
       c1pyk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1pyl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Real.$fEnumRatio1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jit_info" {
     sat_s1jit_info:
         const sat_s1jit_entry;
         const 1;
         const 4294967312;
         const S1jKw_srt+552;
 },
 sat_s1jiv_entry() //  [R1]
         { []
         }
     {offset
       c1pym: // global
           _s1jiv::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c1pyn; else goto c1pyo;
       c1pyo: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c1pyq; else goto c1pyp;
       c1pyq: // global
           HpAlloc = 48;
           goto c1pyn;
       c1pyn: // global
           R1 = _s1jiv::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1pyp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1jiv::P64;
           _s1jil::P64 = P64[_s1jiv::P64 + 16];
           _s1jir::P64 = P64[_s1jiv::P64 + 24];
           I64[Hp - 40] = sat_s1jiu_info;
           P64[Hp - 24] = _s1jir::P64;
           I64[Hp - 16] = sat_s1jit_info;
           P64[Hp] = _s1jir::P64;
           R2 = _s1jil::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 16;
           P64[Sp - 24] = Hp - 40;
           Sp = Sp - 40;
           call GHC.Real./_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jiv_info" {
     sat_s1jiv_info:
         const sat_s1jiv_entry;
         const 2;
         const 73014444050;
         const S1jKw_srt+552;
 },
 ds_s1jis_entry() //  [R1]
         { []
         }
     {offset
       c1pyr: // global
           _s1jis::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c1pys; else goto c1pyt;
       c1pyt: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1pyv; else goto c1pyu;
       c1pyv: // global
           HpAlloc = 32;
           goto c1pys;
       c1pys: // global
           R1 = _s1jis::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1pyu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1jis::P64;
           _s1jil::P64 = P64[_s1jis::P64 + 16];
           _s1jin::P64 = P64[_s1jis::P64 + 24];
           _s1jir::P64 = P64[_s1jis::P64 + 32];
           I64[Hp - 24] = sat_s1jiv_info;
           P64[Hp - 8] = _s1jil::P64;
           P64[Hp] = _s1jir::P64;
           R2 = _s1jir::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _s1jin::P64;
           P64[Sp - 24] = Hp - 24;
           Sp = Sp - 40;
           call GHC.Num.+_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds_s1jis_info" {
     ds_s1jis_info:
         const ds_s1jis_entry;
         const 3;
         const 73014444047;
         const S1jKw_srt+552;
 },
 sat_s1jix_entry() //  [R1, R2]
         { []
         }
     {offset
       c1pyB: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1pyC; else goto c1pyD;
       c1pyC: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1pyD: // global
           _s1jiw::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _s1jiw::P64;
           P64[Sp - 8] = P64[R1 + 15];
           Sp = Sp - 24;
           call GHC.Classes.<=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1jix_info" {
     sat_s1jix_info:
         const sat_s1jix_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 GHC.Real.numericEnumFromTo_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c1pyE: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1pyF; else goto c1pyG;
       c1pyF: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.numericEnumFromTo_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1pyG: // global
           I64[Sp - 32] = block_c1pxQ_info;
           _s1jil::P64 = R3;
           R3 = R4;
           _s1jik::P64 = R2;
           R2 = _s1jil::P64;
           P64[Sp - 24] = _s1jik::P64;
           P64[Sp - 16] = _s1jil::P64;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call GHC.Real.$wnumericEnumFrom_entry(R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.numericEnumFromTo_info" {
     GHC.Real.numericEnumFromTo_info:
         const GHC.Real.numericEnumFromTo_entry;
         const 0;
         const 2280627634190;
         const 17179869208;
         const S1jKw_srt+552;
 },
 _c1pxQ() //  [R1, R2]
         { []
         }
     {offset
       c1pxQ: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto c1pyJ; else goto c1pyI;
       c1pyJ: // global
           HpAlloc = 112;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c1pyI: // global
           I64[Hp - 104] = $dNum_s1jir_info;
           _s1jil::P64 = P64[Sp + 16];
           P64[Hp - 88] = _s1jil::P64;
           I64[Hp - 80] = :_con_info;
           P64[Hp - 72] = R1;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = ds_s1jis_info;
           P64[Hp - 40] = _s1jil::P64;
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = Hp - 104;
           I64[Hp - 16] = sat_s1jix_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = Hp - 56;
           R3 = Hp - 78;
           R2 = Hp - 15;
           Sp = Sp + 32;
           call GHC.List.takeWhile_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pxQ_info" {
     block_c1pxQ_info:
         const _c1pxQ;
         const 3;
         const 73014444062;
         const S1jKw_srt+552;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.6590636 UTC

[section ""data" . GHC.Real.$w$snumericEnumFromThen_closure" {
     GHC.Real.$w$snumericEnumFromThen_closure:
         const GHC.Real.$w$snumericEnumFromThen_info;
         const 0;
 },
 sat_s1jiN_entry() //  [R1]
         { []
         }
     {offset
       c1pzD: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c1pzE; else goto c1pzF;
       c1pzE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1pzF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 56] = block_c1pzw_info;
           _s1jiC::P64 = P64[R1 + 40];
           R5 = _s1jiC::P64;
           _s1jiB::P64 = P64[R1 + 32];
           R4 = _s1jiB::P64;
           R3 = _s1jiC::P64;
           R2 = _s1jiB::P64;
           P64[Sp - 48] = P64[R1 + 16];
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = _s1jiB::P64;
           P64[Sp - 24] = _s1jiC::P64;
           Sp = Sp - 56;
           call GHC.Real.$w$s$c+_entry(R5,
                                       R4,
                                       R3,
                                       R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jiN_info" {
     sat_s1jiN_info:
         const sat_s1jiN_entry;
         const 4;
         const 9007237909446671;
         const S1jKw_srt+464;
 },
 _c1pzw() //  [R1, R2]
         { []
         }
     {offset
       c1pzw: // global
           _s1jiA::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c1pzy_info;
           R5 = _s1jiA::P64;
           R4 = P64[Sp + 8];
           R3 = R2;
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Real.$w$s$c-_entry(R5,
                                       R4,
                                       R3,
                                       R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c1pzw_info" {
     block_c1pzw_info:
         const _c1pzw;
         const 4;
         const 9007203549708318;
         const S1jKw_srt+464;
 },
 _c1pzy() //  [R1, R2]
         { []
         }
     {offset
       c1pzy: // global
           _s1jiC::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c1pzA_info;
           R5 = R2;
           R4 = R1;
           R3 = _s1jiC::P64;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Real.$w$snumericEnumFromThen_entry(R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c1pzy_info" {
     block_c1pzy_info:
         const _c1pzy;
         const 2;
         const 4294967326;
         const S1jKw_srt+632;
 },
 _c1pzA() //  [R1, R2]
         { []
         }
     {offset
       c1pzA: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1pzK; else goto c1pzJ;
       c1pzK: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c1pzJ: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1pzA_info" {
     block_c1pzA_info:
         const _c1pzA;
         const 0;
         const 30;
 },
 GHC.Real.$w$snumericEnumFromThen_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c1pzM: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c1pzQ; else goto c1pzP;
       c1pzQ: // global
           HpAlloc = 72;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$w$snumericEnumFromThen_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1pzP: // global
           I64[Hp - 64] = sat_s1jiN_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R5;
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$w$snumericEnumFromThen_info" {
     GHC.Real.$w$snumericEnumFromThen_info:
         const GHC.Real.$w$snumericEnumFromThen_entry;
         const 0;
         const 9007237909446670;
         const 17179869208;
         const S1jKw_srt+464;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.671153008 UTC

[section ""data" . GHC.Real.$fEnumRatio_$snumericEnumFromThen_closure" {
     GHC.Real.$fEnumRatio_$snumericEnumFromThen_closure:
         const GHC.Real.$fEnumRatio_$snumericEnumFromThen_info;
         const 0;
 },
 GHC.Real.$fEnumRatio_$snumericEnumFromThen_entry() //  [R2, R3]
         { []
         }
     {offset
       c1pAj: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1pAu; else goto c1pAv;
       c1pAu: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fEnumRatio_$snumericEnumFromThen_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1pAv: // global
           I64[Sp - 16] = block_c1pAg_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1pAC; else goto c1pAh;
       u1pAC: // global
           call _c1pAg(R1) args: 0, res: 0, upd: 0;
       c1pAh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fEnumRatio_$snumericEnumFromThen_info" {
     GHC.Real.$fEnumRatio_$snumericEnumFromThen_info:
         const GHC.Real.$fEnumRatio_$snumericEnumFromThen_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S1jKw_srt+632;
 },
 _c1pAg() //  [R1]
         { []
         }
     {offset
       c1pAg: // global
           I64[Sp - 8] = block_c1pAm_info;
           _s1jiR::P64 = P64[R1 + 7];
           _s1jiS::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s1jiS::P64;
           P64[Sp + 8] = _s1jiR::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1pAB; else goto c1pAn;
       u1pAB: // global
           call _c1pAm(R1) args: 0, res: 0, upd: 0;
       c1pAn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pAg_info" {
     block_c1pAg_info:
         const _c1pAg;
         const 1;
         const 4294967326;
         const S1jKw_srt+632;
 },
 _c1pAm() //  [R1]
         { []
         }
     {offset
       c1pAm: // global
           _s1jiR::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c1pAr_info;
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = P64[Sp + 8];
           R2 = _s1jiR::P64;
           Sp = Sp + 16;
           call GHC.Real.$w$snumericEnumFromThen_entry(R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pAm_info" {
     block_c1pAm_info:
         const _c1pAm;
         const 2;
         const 4294967326;
         const S1jKw_srt+632;
 },
 _c1pAr() //  [R1, R2]
         { []
         }
     {offset
       c1pAr: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1pAA; else goto c1pAz;
       c1pAA: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c1pAz: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pAr_info" {
     block_c1pAr_info:
         const _c1pAr;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.682588945 UTC

[section ""data" . GHC.Real.$wnumericEnumFromThen_closure" {
     GHC.Real.$wnumericEnumFromThen_closure:
         const GHC.Real.$wnumericEnumFromThen_info;
 },
 sat_s1jj5_entry() //  [R1]
         { []
         }
     {offset
       c1pBe: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1pBf; else goto c1pBg;
       c1pBf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1pBg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 40] = stg_ap_pp_info;
           _s1jj3::P64 = P64[R1 + 16];
           P64[Sp - 32] = _s1jj3::P64;
           P64[Sp - 24] = _s1jj3::P64;
           Sp = Sp - 40;
           call GHC.Num.+_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jj5_info" {
     sat_s1jj5_info:
         const sat_s1jj5_entry;
         const 2;
         const 18;
 },
 sat_s1jja_entry() //  [R1]
         { []
         }
     {offset
       c1pBh: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c1pBn; else goto c1pBo;
       c1pBn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1pBo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_c1pB6_info;
           _s1jiZ::P64 = P64[R1 + 16];
           R2 = _s1jiZ::P64;
           P64[Sp - 40] = _s1jiZ::P64;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 48;
           call GHC.Real.$p1Fractional_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jja_info" {
     sat_s1jja_info:
         const sat_s1jja_entry;
         const 3;
         const 15;
 },
 _c1pB6() //  [R1]
         { []
         }
     {offset
       c1pB6: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1pBr; else goto c1pBq;
       c1pBr: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c1pBq: // global
           I64[Hp - 24] = sat_s1jj5_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = R1;
           I64[Sp] = block_c1pBi_info;
           R2 = R1;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 24;
           P64[Sp - 8] = P64[Sp + 16];
           Sp = Sp - 24;
           call GHC.Num.-_entry(R2) args: 32, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c1pB6_info" {
     block_c1pB6_info:
         const _c1pB6;
         const 3;
         const 30;
 },
 _c1pBi() //  [R1]
         { []
         }
     {offset
       c1pBi: // global
           _s1jj3::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_c1pBk_info;
           R4 = R1;
           R3 = _s1jj3::P64;
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Real.$wnumericEnumFromThen_entry(R4,
                                                     R3,
                                                     R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c1pBi_info" {
     block_c1pBi_info:
         const _c1pBi;
         const 131;
         const 30;
 },
 _c1pBk() //  [R1, R2]
         { []
         }
     {offset
       c1pBk: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1pBv; else goto c1pBu;
       c1pBv: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c1pBu: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1pBk_info" {
     block_c1pBk_info:
         const _c1pBk;
         const 0;
         const 30;
 },
 GHC.Real.$wnumericEnumFromThen_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1pBw: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1pBx; else goto c1pBy;
       c1pBx: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$wnumericEnumFromThen_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1pBy: // global
           I64[Sp - 24] = block_c1pAY_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$wnumericEnumFromThen_info" {
     GHC.Real.$wnumericEnumFromThen_info:
         const GHC.Real.$wnumericEnumFromThen_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c1pAY() //  [R1]
         { []
         }
     {offset
       c1pAY: // global
           I64[Sp] = block_c1pB0_info;
           _s1jj2::P64 = R1;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s1jj2::P64;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pAY_info" {
     block_c1pAY_info:
         const _c1pAY;
         const 2;
         const 30;
 },
 _c1pB0() //  [R1]
         { []
         }
     {offset
       c1pB0: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c1pBC; else goto c1pBB;
       c1pBC: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1pBB: // global
           I64[Hp - 32] = sat_s1jja_info;
           P64[Hp - 16] = P64[Sp + 8];
           _s1jj2::P64 = P64[Sp + 16];
           P64[Hp - 8] = _s1jj2::P64;
           P64[Hp] = R1;
           R2 = Hp - 32;
           R1 = _s1jj2::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pB0_info" {
     block_c1pB0_info:
         const _c1pB0;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.698552106 UTC

[section ""data" . GHC.Real.numericEnumFromThen_closure" {
     GHC.Real.numericEnumFromThen_closure:
         const GHC.Real.numericEnumFromThen_info;
 },
 GHC.Real.numericEnumFromThen_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1pCk: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1pCl; else goto c1pCm;
       c1pCl: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.numericEnumFromThen_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1pCm: // global
           I64[Sp - 8] = block_c1pCh_info;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Real.$wnumericEnumFromThen_entry(R4,
                                                     R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.numericEnumFromThen_info" {
     GHC.Real.numericEnumFromThen_info:
         const GHC.Real.numericEnumFromThen_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c1pCh() //  [R1, R2]
         { []
         }
     {offset
       c1pCh: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1pCp; else goto c1pCo;
       c1pCp: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c1pCo: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pCh_info" {
     block_c1pCh_info:
         const _c1pCh;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.710301158 UTC

[section ""data" . GHC.Real.$w$snumericEnumFromThenTo_closure" {
     GHC.Real.$w$snumericEnumFromThenTo_closure:
         const GHC.Real.$w$snumericEnumFromThenTo_info;
         const 0;
 },
 ds_s1jjq_entry() //  [R1]
         { []
         }
     {offset
       c1pCV: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c1pD5; else goto c1pD6;
       c1pD5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1pD6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 56] = block_c1pCS_info;
           _s1jjh::P64 = P64[R1 + 16];
           _s1jji::P64 = P64[R1 + 24];
           _s1jjj::P64 = P64[R1 + 32];
           _s1jjk::P64 = P64[R1 + 40];
           R1 = P64[R1 + 48];
           P64[Sp - 48] = _s1jjh::P64;
           P64[Sp - 40] = _s1jji::P64;
           P64[Sp - 32] = _s1jjj::P64;
           P64[Sp - 24] = _s1jjk::P64;
           Sp = Sp - 56;
           if (R1 & 7 != 0) goto u1pDd; else goto c1pCT;
       u1pDd: // global
           call _c1pCS(R1) args: 0, res: 0, upd: 0;
       c1pCT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds_s1jjq_info" {
     ds_s1jjq_info:
         const ds_s1jjq_entry;
         const 5;
         const 150121991897103;
         const S1jKw_srt+464;
 },
 _c1pCS() //  [R1]
         { []
         }
     {offset
       c1pCS: // global
           _s1jji::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c1pCY_info;
           R5 = _s1jji::P64;
           R4 = P64[Sp + 8];
           R3 = P64[Sp + 32];
           R2 = P64[Sp + 24];
           P64[Sp + 24] = P64[R1 + 15];
           P64[Sp + 32] = P64[R1 + 7];
           Sp = Sp + 16;
           call GHC.Real.$w$s$c-_entry(R5,
                                       R4,
                                       R3,
                                       R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c1pCS_info" {
     block_c1pCS_info:
         const _c1pCS;
         const 4;
         const 150121991897118;
         const S1jKw_srt+464;
 },
 _c1pCY() //  [R1, R2]
         { []
         }
     {offset
       c1pCY: // global
           I64[Sp] = block_c1pD0_info;
           R5 = GHC.Real.$fEnumRatio1_closure;
           R4 = GHC.Real.even2_closure;
           R3 = R2;
           R2 = R1;
           call GHC.Real.$w$s$c/_entry(R5,
                                       R4,
                                       R3,
                                       R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c1pCY_info" {
     block_c1pCY_info:
         const _c1pCY;
         const 2;
         const 18764712116254;
         const S1jKw_srt+488;
 },
 _c1pD0() //  [R1, R2]
         { []
         }
     {offset
       c1pD0: // global
           _s1jjs::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c1pD2_info;
           R5 = R2;
           R4 = R1;
           R3 = P64[Sp + 8];
           R2 = _s1jjs::P64;
           Sp = Sp + 16;
           call GHC.Real.$w$s$c+_entry(R5,
                                       R4,
                                       R3,
                                       R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c1pD0_info" {
     block_c1pD0_info:
         const _c1pD0;
         const 2;
         const 4294967326;
         const S1jKw_srt+488;
 },
 _c1pD2() //  [R1, R2]
         { []
         }
     {offset
       c1pD2: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1pDc; else goto c1pDb;
       c1pDc: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c1pDb: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1pD2_info" {
     block_c1pD2_info:
         const _c1pD2;
         const 0;
         const 30;
 },
 sat_s1jjE_entry() //  [R1, R2]
         { []
         }
     {offset
       c1pDj: // global
           R3 = P64[R1 + 7];
           R2 = R2;
           call GHC.Real.$fEnumRatio_$s$c<=_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1jjE_info" {
     sat_s1jjE_info:
         const sat_s1jjE_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S1jKw_srt+600;
 },
 ds_s1jjF_entry() //  [R1]
         { []
         }
     {offset
       c1pDv: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c1pDF; else goto c1pDG;
       c1pDF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1pDG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 56] = block_c1pDs_info;
           _s1jjh::P64 = P64[R1 + 16];
           _s1jji::P64 = P64[R1 + 24];
           _s1jjj::P64 = P64[R1 + 32];
           _s1jjk::P64 = P64[R1 + 40];
           R1 = P64[R1 + 48];
           P64[Sp - 48] = _s1jjh::P64;
           P64[Sp - 40] = _s1jji::P64;
           P64[Sp - 32] = _s1jjj::P64;
           P64[Sp - 24] = _s1jjk::P64;
           Sp = Sp - 56;
           if (R1 & 7 != 0) goto u1pDN; else goto c1pDt;
       u1pDN: // global
           call _c1pDs(R1) args: 0, res: 0, upd: 0;
       c1pDt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds_s1jjF_info" {
     ds_s1jjF_info:
         const ds_s1jjF_entry;
         const 5;
         const 150121991897103;
         const S1jKw_srt+464;
 },
 _c1pDs() //  [R1]
         { []
         }
     {offset
       c1pDs: // global
           _s1jji::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c1pDy_info;
           R5 = _s1jji::P64;
           R4 = P64[Sp + 8];
           R3 = P64[Sp + 32];
           R2 = P64[Sp + 24];
           P64[Sp + 24] = P64[R1 + 15];
           P64[Sp + 32] = P64[R1 + 7];
           Sp = Sp + 16;
           call GHC.Real.$w$s$c-_entry(R5,
                                       R4,
                                       R3,
                                       R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c1pDs_info" {
     block_c1pDs_info:
         const _c1pDs;
         const 4;
         const 150121991897118;
         const S1jKw_srt+464;
 },
 _c1pDy() //  [R1, R2]
         { []
         }
     {offset
       c1pDy: // global
           I64[Sp] = block_c1pDA_info;
           R5 = GHC.Real.$fEnumRatio1_closure;
           R4 = GHC.Real.even2_closure;
           R3 = R2;
           R2 = R1;
           call GHC.Real.$w$s$c/_entry(R5,
                                       R4,
                                       R3,
                                       R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c1pDy_info" {
     block_c1pDy_info:
         const _c1pDy;
         const 2;
         const 18764712116254;
         const S1jKw_srt+488;
 },
 _c1pDA() //  [R1, R2]
         { []
         }
     {offset
       c1pDA: // global
           _s1jjH::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c1pDC_info;
           R5 = R2;
           R4 = R1;
           R3 = P64[Sp + 8];
           R2 = _s1jjH::P64;
           Sp = Sp + 16;
           call GHC.Real.$w$s$c+_entry(R5,
                                       R4,
                                       R3,
                                       R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c1pDA_info" {
     block_c1pDA_info:
         const _c1pDA;
         const 2;
         const 4294967326;
         const S1jKw_srt+488;
 },
 _c1pDC() //  [R1, R2]
         { []
         }
     {offset
       c1pDC: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1pDM; else goto c1pDL;
       c1pDM: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c1pDL: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1pDC_info" {
     block_c1pDC_info:
         const _c1pDC;
         const 0;
         const 30;
 },
 sat_s1jjT_entry() //  [R1, R2]
         { []
         }
     {offset
       c1pDT: // global
           R3 = P64[R1 + 7];
           R2 = R2;
           call GHC.Real.$fEnumRatio_$s$c>=_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1jjT_info" {
     sat_s1jjT_info:
         const sat_s1jjT_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S1jKw_srt+648;
 },
 section ""relreadonly" . u1pEf_srtd" {
     u1pEf_srtd:
         const S1jKw_srt+24;
         const 79;
         const 4935945191598063617;
         const 16708;
 },
 sat_s1jjU_entry() //  [R1]
         { []
         }
     {offset
       c1pE0: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c1pE1; else goto c1pE2;
       c1pE1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1pE2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 64] = block_c1pCK_info;
           _s1jji::P64 = P64[R1 + 24];
           R5 = _s1jji::P64;
           _s1jjh::P64 = P64[R1 + 16];
           R4 = _s1jjh::P64;
           _s1jjk::P64 = P64[R1 + 40];
           R3 = _s1jjk::P64;
           _s1jjj::P64 = P64[R1 + 32];
           R2 = _s1jjj::P64;
           P64[Sp - 56] = _s1jjh::P64;
           P64[Sp - 48] = _s1jji::P64;
           P64[Sp - 40] = _s1jjj::P64;
           P64[Sp - 32] = _s1jjk::P64;
           P64[Sp - 24] = P64[R1 + 48];
           Sp = Sp - 64;
           call GHC.Real.$w$s$ccompare_entry(R5,
                                             R4,
                                             R3,
                                             R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jjU_info" {
     sat_s1jjU_info:
         const sat_s1jjU_entry;
         const 5;
         const 18446744069414584335;
         const u1pEf_srtd;
 },
 _c1pCK() //  [R1]
         { []
         }
     {offset
       c1pCK: // global
           _s1jjh::P64 = P64[Sp + 8];
           _s1jji::P64 = P64[Sp + 16];
           _s1jjj::P64 = P64[Sp + 24];
           _s1jjk::P64 = P64[Sp + 32];
           _s1jjl::P64 = P64[Sp + 40];
           if (R1 & 7 == 1) goto c1pDY; else goto c1pDX;
       c1pDY: // global
           Hp = Hp + 72;
           _s1jjp::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c1pE8; else goto c1pE7;
       c1pE7: // global
           I64[Hp - 64] = ds_s1jjF_info;
           P64[Hp - 48] = _s1jjh::P64;
           P64[Hp - 40] = _s1jji::P64;
           P64[Hp - 32] = _s1jjj::P64;
           P64[Hp - 24] = _s1jjk::P64;
           P64[Hp - 16] = _s1jjl::P64;
           I64[Hp - 8] = sat_s1jjT_info;
           P64[Hp] = Hp - 64;
           R1 = Hp - 7;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c1pDX: // global
           Hp = Hp + 72;
           _s1jjp::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c1pE8; else goto c1pE4;
       c1pE8: // global
           HpAlloc = 72;
           R1 = _s1jjp::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c1pE4: // global
           I64[Hp - 64] = ds_s1jjq_info;
           P64[Hp - 48] = _s1jjh::P64;
           P64[Hp - 40] = _s1jji::P64;
           P64[Hp - 32] = _s1jjj::P64;
           P64[Hp - 24] = _s1jjk::P64;
           P64[Hp - 16] = _s1jjl::P64;
           I64[Hp - 8] = sat_s1jjE_info;
           P64[Hp] = Hp - 64;
           R1 = Hp - 7;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1pCK_info" {
     block_c1pCK_info:
         const _c1pCK;
         const 5;
         const 36741868964282398;
         const S1jKw_srt+464;
 },
 section ""relreadonly" . u1pEg_srtd" {
     u1pEg_srtd:
         const S1jKw_srt+24;
         const 80;
         const 4935945191598063617;
         const 53572;
 },
 GHC.Real.$w$snumericEnumFromThenTo_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c1pE9: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c1pEa; else goto c1pEb;
       c1pEa: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$w$snumericEnumFromThenTo_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1pEb: // global
           I64[Sp - 48] = block_c1pCD_info;
           _s1jjk::P64 = R5;
           R5 = R5;
           _s1jjj::P64 = R4;
           R4 = R4;
           _s1jji::P64 = R3;
           R3 = R3;
           _s1jjh::P64 = R2;
           R2 = R2;
           P64[Sp - 40] = _s1jjh::P64;
           P64[Sp - 32] = _s1jji::P64;
           P64[Sp - 24] = _s1jjj::P64;
           P64[Sp - 16] = _s1jjk::P64;
           P64[Sp - 8] = R6;
           Sp = Sp - 48;
           call GHC.Real.$w$snumericEnumFromThen_entry(R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$w$snumericEnumFromThenTo_info" {
     GHC.Real.$w$snumericEnumFromThenTo_info:
         const GHC.Real.$w$snumericEnumFromThenTo_entry;
         const 0;
         const 18446744069414584334;
         const 21474836505;
         const u1pEg_srtd;
 },
 section ""relreadonly" . u1pEh_srtd" {
     u1pEh_srtd:
         const S1jKw_srt+24;
         const 79;
         const 4935945191598063617;
         const 16708;
 },
 _c1pCD() //  [R1, R2]
         { []
         }
     {offset
       c1pCD: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c1pEe; else goto c1pEd;
       c1pEe: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c1pEd: // global
           I64[Hp - 72] = :_con_info;
           P64[Hp - 64] = R1;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = sat_s1jjU_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = P64[Sp + 40];
           R3 = Hp - 70;
           R2 = Hp - 48;
           Sp = Sp + 48;
           call GHC.List.takeWhile_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pCD_info" {
     block_c1pCD_info:
         const _c1pCD;
         const 5;
         const 18446744069414584350;
         const u1pEh_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.744767342 UTC

[section ""data" . GHC.Real.$fEnumRatio_$snumericEnumFromThenTo_closure" {
     GHC.Real.$fEnumRatio_$snumericEnumFromThenTo_closure:
         const GHC.Real.$fEnumRatio_$snumericEnumFromThenTo_info;
         const 0;
 },
 GHC.Real.$fEnumRatio_$snumericEnumFromThenTo_entry() //  [R2, R3,
                                                           R4]
         { []
         }
     {offset
       c1pFD: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1pFH; else goto c1pFI;
       c1pFH: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fEnumRatio_$snumericEnumFromThenTo_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1pFI: // global
           I64[Sp - 24] = block_c1pFA_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u1pFQ; else goto c1pFB;
       u1pFQ: // global
           call _c1pFA(R1) args: 0, res: 0, upd: 0;
       c1pFB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fEnumRatio_$snumericEnumFromThenTo_info" {
     GHC.Real.$fEnumRatio_$snumericEnumFromThenTo_info:
         const GHC.Real.$fEnumRatio_$snumericEnumFromThenTo_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S1jKw_srt+656;
 },
 _c1pFA() //  [R1]
         { []
         }
     {offset
       c1pFA: // global
           I64[Sp - 8] = block_c1pFG_info;
           _s1jk0::P64 = P64[R1 + 7];
           _s1jk1::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s1jk1::P64;
           P64[Sp + 8] = _s1jk0::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1pFP; else goto c1pFK;
       u1pFP: // global
           call _c1pFG(R1) args: 0, res: 0, upd: 0;
       c1pFK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pFA_info" {
     block_c1pFA_info:
         const _c1pFA;
         const 2;
         const 4294967326;
         const S1jKw_srt+656;
 },
 _c1pFG() //  [R1]
         { []
         }
     {offset
       c1pFG: // global
           R6 = P64[Sp + 24];
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 16];
           Sp = Sp + 32;
           call GHC.Real.$w$snumericEnumFromThenTo_entry(R6,
                                                         R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pFG_info" {
     block_c1pFG_info:
         const _c1pFG;
         const 3;
         const 4294967326;
         const S1jKw_srt+656;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.759254421 UTC

[section ""data" . GHC.Real.numericEnumFromThenTo_closure" {
     GHC.Real.numericEnumFromThenTo_closure:
         const GHC.Real.numericEnumFromThenTo_info;
         const 0;
 },
 $dNum_s1jkd_entry() //  [R1]
         { []
         }
     {offset
       c1pGj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1pGk; else goto c1pGl;
       c1pGk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1pGl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Fractional_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dNum_s1jkd_info" {
     $dNum_s1jkd_info:
         const $dNum_s1jkd_entry;
         const 1;
         const 16;
 },
 sat_s1jkg_entry() //  [R1]
         { []
         }
     {offset
       c1pGu: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1pGv; else goto c1pGw;
       c1pGv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1pGw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Real.even2_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jkg_info" {
     sat_s1jkg_info:
         const sat_s1jkg_entry;
         const 1;
         const 4294967312;
         const S1jKw_srt+584;
 },
 sat_s1jkf_entry() //  [R1]
         { []
         }
     {offset
       c1pGB: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1pGC; else goto c1pGD;
       c1pGC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1pGD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 32];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 40;
           call GHC.Num.-_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jkf_info" {
     sat_s1jkf_info:
         const sat_s1jkf_entry;
         const 3;
         const 15;
 },
 mid_s1jke_entry() //  [R1]
         { []
         }
     {offset
       c1pGE: // global
           _s1jke::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c1pGF; else goto c1pGG;
       c1pGG: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c1pGI; else goto c1pGH;
       c1pGI: // global
           HpAlloc = 64;
           goto c1pGF;
       c1pGF: // global
           R1 = _s1jke::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1pGH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1jke::P64;
           _s1jk6::P64 = P64[_s1jke::P64 + 16];
           _s1jk7::P64 = P64[_s1jke::P64 + 24];
           _s1jk8::P64 = P64[_s1jke::P64 + 32];
           _s1jkd::P64 = P64[_s1jke::P64 + 40];
           I64[Hp - 56] = sat_s1jkg_info;
           P64[Hp - 40] = _s1jkd::P64;
           I64[Hp - 32] = sat_s1jkf_info;
           P64[Hp - 16] = _s1jk7::P64;
           P64[Hp - 8] = _s1jk8::P64;
           P64[Hp] = _s1jkd::P64;
           R2 = _s1jk6::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 32;
           P64[Sp - 24] = Hp - 56;
           Sp = Sp - 40;
           call GHC.Real./_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . mid_s1jke_info" {
     mid_s1jke_info:
         const mid_s1jke_entry;
         const 4;
         const 4294967311;
         const S1jKw_srt+584;
 },
 ds_s1jki_entry() //  [R1]
         { []
         }
     {offset
       c1pGR: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1pGS; else goto c1pGT;
       c1pGS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1pGT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call GHC.Num.+_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds_s1jki_info" {
     ds_s1jki_info:
         const ds_s1jki_entry;
         const 3;
         const 15;
 },
 sat_s1jkk_entry() //  [R1, R2]
         { []
         }
     {offset
       c1pGZ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1pH0; else goto c1pH1;
       c1pH0: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1pH1: // global
           _s1jkj::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _s1jkj::P64;
           P64[Sp - 8] = P64[R1 + 15];
           Sp = Sp - 24;
           call GHC.Classes.>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1jkk_info" {
     sat_s1jkk_info:
         const sat_s1jkk_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 ds_s1jkl_entry() //  [R1]
         { []
         }
     {offset
       c1pH8: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1pH9; else goto c1pHa;
       c1pH9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1pHa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call GHC.Num.+_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds_s1jkl_info" {
     ds_s1jkl_info:
         const ds_s1jkl_entry;
         const 3;
         const 15;
 },
 sat_s1jkn_entry() //  [R1, R2]
         { []
         }
     {offset
       c1pHg: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1pHh; else goto c1pHi;
       c1pHh: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1pHi: // global
           _s1jkm::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _s1jkm::P64;
           P64[Sp - 8] = P64[R1 + 15];
           Sp = Sp - 24;
           call GHC.Classes.<=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1jkn_info" {
     sat_s1jkn_info:
         const sat_s1jkn_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s1jko_entry() //  [R1]
         { []
         }
     {offset
       c1pHn: // global
           _s1jko::P64 = R1;
           if ((Sp + -80) < SpLim) (likely: False) goto c1pHo; else goto c1pHp;
       c1pHp: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c1pHr; else goto c1pHq;
       c1pHr: // global
           HpAlloc = 72;
           goto c1pHo;
       c1pHo: // global
           R1 = _s1jko::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1pHq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1jko::P64;
           _s1jk5::P64 = P64[_s1jko::P64 + 16];
           _s1jk6::P64 = P64[_s1jko::P64 + 24];
           _s1jk7::P64 = P64[_s1jko::P64 + 32];
           _s1jk8::P64 = P64[_s1jko::P64 + 40];
           _s1jk9::P64 = P64[_s1jko::P64 + 48];
           I64[Hp - 64] = $dNum_s1jkd_info;
           P64[Hp - 48] = _s1jk6::P64;
           I64[Hp - 40] = mid_s1jke_info;
           P64[Hp - 24] = _s1jk6::P64;
           P64[Hp - 16] = _s1jk7::P64;
           P64[Hp - 8] = _s1jk8::P64;
           _c1pGf::P64 = Hp - 64;
           P64[Hp] = _c1pGf::P64;
           I64[Sp - 56] = block_c1pGJ_info;
           R2 = _s1jk5::P64;
           I64[Sp - 80] = stg_ap_pp_info;
           P64[Sp - 72] = _s1jk8::P64;
           P64[Sp - 64] = _s1jk7::P64;
           P64[Sp - 48] = _c1pGf::P64;
           P64[Sp - 40] = Hp - 40;
           P64[Sp - 32] = _s1jk5::P64;
           P64[Sp - 24] = _s1jk9::P64;
           Sp = Sp - 80;
           call GHC.Classes.>=_entry(R2) args: 32, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jko_info" {
     sat_s1jko_info:
         const sat_s1jko_entry;
         const 5;
         const 4294967311;
         const S1jKw_srt+584;
 },
 _c1pGJ() //  [R1]
         { []
         }
     {offset
       c1pGJ: // global
           _c1pGf::P64 = P64[Sp + 8];
           _c1pGm::P64 = P64[Sp + 16];
           _s1jk5::P64 = P64[Sp + 24];
           _s1jk9::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto c1pHk; else goto c1pHl;
       c1pHk: // global
           Hp = Hp + 64;
           _s1jkh::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c1pHx; else goto c1pHt;
       c1pHt: // global
           I64[Hp - 56] = ds_s1jki_info;
           P64[Hp - 40] = _s1jk9::P64;
           P64[Hp - 32] = _c1pGf::P64;
           P64[Hp - 24] = _c1pGm::P64;
           I64[Hp - 16] = sat_s1jkk_info;
           P64[Hp - 8] = _s1jk5::P64;
           P64[Hp] = Hp - 56;
           R1 = Hp - 15;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c1pHl: // global
           Hp = Hp + 64;
           _s1jkh::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c1pHx; else goto c1pHw;
       c1pHx: // global
           HpAlloc = 64;
           R1 = _s1jkh::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c1pHw: // global
           I64[Hp - 56] = ds_s1jkl_info;
           P64[Hp - 40] = _s1jk9::P64;
           P64[Hp - 32] = _c1pGf::P64;
           P64[Hp - 24] = _c1pGm::P64;
           I64[Hp - 16] = sat_s1jkn_info;
           P64[Hp - 8] = _s1jk5::P64;
           P64[Hp] = Hp - 56;
           R1 = Hp - 15;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1pGJ_info" {
     block_c1pGJ_info:
         const _c1pGJ;
         const 4;
         const 30;
 },
 GHC.Real.numericEnumFromThenTo_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c1pHy: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c1pHz; else goto c1pHA;
       c1pHz: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.numericEnumFromThenTo_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1pHA: // global
           I64[Sp - 48] = block_c1pG8_info;
           _s1jk7::P64 = R4;
           R4 = R5;
           _s1jk6::P64 = R3;
           R3 = _s1jk7::P64;
           _s1jk5::P64 = R2;
           R2 = _s1jk6::P64;
           P64[Sp - 40] = _s1jk5::P64;
           P64[Sp - 32] = _s1jk6::P64;
           P64[Sp - 24] = _s1jk7::P64;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 48;
           call GHC.Real.$wnumericEnumFromThen_entry(R4,
                                                     R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.numericEnumFromThenTo_info" {
     GHC.Real.numericEnumFromThenTo_info:
         const GHC.Real.numericEnumFromThenTo_entry;
         const 0;
         const 8800387989518;
         const 21474836505;
         const S1jKw_srt+584;
 },
 _c1pG8() //  [R1, R2]
         { []
         }
     {offset
       c1pG8: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c1pHD; else goto c1pHC;
       c1pHD: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c1pHC: // global
           I64[Hp - 72] = :_con_info;
           P64[Hp - 64] = R1;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = sat_s1jko_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = P64[Sp + 40];
           R3 = Hp - 70;
           R2 = Hp - 48;
           Sp = Sp + 48;
           call GHC.List.takeWhile_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pG8_info" {
     block_c1pG8_info:
         const _c1pG8;
         const 5;
         const 4294967326;
         const S1jKw_srt+584;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.784716867 UTC

[section ""data" . GHC.Real.fromIntegral_closure" {
     GHC.Real.fromIntegral_closure:
         const GHC.Real.fromIntegral_info;
 },
 sat_s1jkt_entry() //  [R1]
         { []
         }
     {offset
       c1pIT: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1pIU; else goto c1pIV;
       c1pIU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1pIV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Real.toInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jkt_info" {
     sat_s1jkt_info:
         const sat_s1jkt_entry;
         const 2;
         const 18;
 },
 GHC.Real.fromIntegral_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1pIW: // global
           _s1jks::P64 = R4;
           _s1jkr::P64 = R3;
           _s1jkq::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c1pIX; else goto c1pIY;
       c1pIY: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1pJ0; else goto c1pIZ;
       c1pJ0: // global
           HpAlloc = 32;
           goto c1pIX;
       c1pIX: // global
           R4 = _s1jks::P64;
           R3 = _s1jkr::P64;
           R2 = _s1jkq::P64;
           R1 = GHC.Real.fromIntegral_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1pIZ: // global
           I64[Hp - 24] = sat_s1jkt_info;
           P64[Hp - 8] = _s1jkq::P64;
           P64[Hp] = _s1jks::P64;
           R2 = _s1jkr::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Num.fromInteger_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.fromIntegral_info" {
     GHC.Real.fromIntegral_info:
         const GHC.Real.fromIntegral_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.791226107 UTC

[section ""data" . GHC.Real.realToFrac_closure" {
     GHC.Real.realToFrac_closure:
         const GHC.Real.realToFrac_info;
 },
 sat_s1jkx_entry() //  [R1]
         { []
         }
     {offset
       c1pJk: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1pJl; else goto c1pJm;
       c1pJl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1pJm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Real.toRational_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jkx_info" {
     sat_s1jkx_info:
         const sat_s1jkx_entry;
         const 2;
         const 18;
 },
 GHC.Real.realToFrac_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1pJn: // global
           _s1jkw::P64 = R4;
           _s1jkv::P64 = R3;
           _s1jku::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c1pJo; else goto c1pJp;
       c1pJp: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1pJr; else goto c1pJq;
       c1pJr: // global
           HpAlloc = 32;
           goto c1pJo;
       c1pJo: // global
           R4 = _s1jkw::P64;
           R3 = _s1jkv::P64;
           R2 = _s1jku::P64;
           R1 = GHC.Real.realToFrac_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1pJq: // global
           I64[Hp - 24] = sat_s1jkx_info;
           P64[Hp - 8] = _s1jku::P64;
           P64[Hp] = _s1jkw::P64;
           R2 = _s1jkv::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Real.fromRational_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.realToFrac_info" {
     GHC.Real.realToFrac_info:
         const GHC.Real.realToFrac_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.796585942 UTC

[section ""data" . GHC.Real.showSigned1_closure" {
     GHC.Real.showSigned1_closure:
         const GHC.Types.C#_con_info;
         const 45;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.804387839 UTC

[section ""data" . GHC.Real.showSigned_closure" {
     GHC.Real.showSigned_closure:
         const GHC.Real.showSigned_info;
         const 0;
 },
 $dNum_s1jkC_entry() //  [R1]
         { []
         }
     {offset
       c1pJM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1pJN; else goto c1pJO;
       c1pJN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1pJO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dNum_s1jkC_info" {
     $dNum_s1jkC_info:
         const $dNum_s1jkC_entry;
         const 1;
         const 16;
 },
 sat_s1jkE_entry() //  [R1]
         { []
         }
     {offset
       c1pJT: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1pJU; else goto c1pJV;
       c1pJU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1pJV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Real.even1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jkE_info" {
     sat_s1jkE_info:
         const sat_s1jkE_entry;
         const 1;
         const 4294967312;
         const S1jKw_srt+680;
 },
 sat_s1jkJ_entry() //  [R1]
         { []
         }
     {offset
       c1pKi: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1pKj; else goto c1pKk;
       c1pKj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1pKk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Num.negate_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jkJ_info" {
     sat_s1jkJ_info:
         const sat_s1jkJ_entry;
         const 2;
         const 18;
 },
 g1_s1jkI_entry() //  [R1]
         { []
         }
     {offset
       c1pKl: // global
           _s1jkI::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1pKm; else goto c1pKn;
       c1pKn: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1pKp; else goto c1pKo;
       c1pKp: // global
           HpAlloc = 32;
           goto c1pKm;
       c1pKm: // global
           R1 = _s1jkI::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1pKo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1jkI::P64;
           _s1jkz::P64 = P64[_s1jkI::P64 + 16];
           _s1jkB::P64 = P64[_s1jkI::P64 + 24];
           _s1jkC::P64 = P64[_s1jkI::P64 + 32];
           I64[Hp - 24] = sat_s1jkJ_info;
           P64[Hp - 8] = _s1jkB::P64;
           P64[Hp] = _s1jkC::P64;
           R2 = Hp - 24;
           R1 = _s1jkz::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . g1_s1jkI_info" {
     g1_s1jkI_info:
         const g1_s1jkI_entry;
         const 3;
         const 15;
 },
 sat_s1jkN_entry() //  [R1, R2]
         { []
         }
     {offset
       c1pKA: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c1pKE; else goto c1pKD;
       c1pKE: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1pKD: // global
           _s1jkI::P64 = P64[R1 + 7];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _s1jkI::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Real.showSigned1_closure+1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1jkN_info" {
     sat_s1jkN_info:
         const sat_s1jkN_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s1jkQ_entry() //  [R1]
         { []
         }
     {offset
       c1pKQ: // global
           _s1jkQ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1pKR; else goto c1pKS;
       c1pKS: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1pKU; else goto c1pKT;
       c1pKU: // global
           HpAlloc = 24;
           goto c1pKR;
       c1pKR: // global
           R1 = _s1jkQ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1pKT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1jkQ::P64;
           _s1jkI::P64 = P64[_s1jkQ::P64 + 16];
           _s1jkO::P64 = P64[_s1jkQ::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s1jkO::P64;
           R2 = Hp - 14;
           R1 = _s1jkI::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jkQ_info" {
     sat_s1jkQ_info:
         const sat_s1jkQ_entry;
         const 2;
         const 18;
 },
 sat_s1jkS_entry() //  [R1, R2]
         { []
         }
     {offset
       c1pKX: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c1pL1; else goto c1pL0;
       c1pL1: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1pL0: // global
           _s1jkI::P64 = P64[R1 + 7];
           I64[Hp - 72] = sat_s1jkQ_info;
           P64[Hp - 56] = _s1jkI::P64;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = GHC.Real.showSigned1_closure+1;
           P64[Hp - 24] = Hp - 72;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 38;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1jkS_info" {
     sat_s1jkS_info:
         const sat_s1jkS_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 GHC.Real.showSigned_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c1pL2: // global
           _s1jkB::P64 = R5;
           _s1jkA::P64 = R4;
           _s1jkz::P64 = R3;
           _s1jky::P64 = R2;
           if ((Sp + -72) < SpLim) (likely: False) goto c1pL3; else goto c1pL4;
       c1pL4: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c1pL6; else goto c1pL5;
       c1pL6: // global
           HpAlloc = 48;
           goto c1pL3;
       c1pL3: // global
           R5 = _s1jkB::P64;
           R4 = _s1jkA::P64;
           R3 = _s1jkz::P64;
           R2 = _s1jky::P64;
           R1 = GHC.Real.showSigned_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1pL5: // global
           I64[Hp - 40] = $dNum_s1jkC_info;
           P64[Hp - 24] = _s1jky::P64;
           I64[Hp - 16] = sat_s1jkE_info;
           _c1pJI::P64 = Hp - 40;
           P64[Hp] = _c1pJI::P64;
           I64[Sp - 48] = block_c1pJW_info;
           R2 = _s1jky::P64;
           P64[Sp - 40] = _c1pJI::P64;
           P64[Sp - 32] = Hp - 16;
           P64[Sp - 24] = _s1jkz::P64;
           P64[Sp - 16] = _s1jkA::P64;
           P64[Sp - 8] = _s1jkB::P64;
           Sp = Sp - 48;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.showSigned_info" {
     GHC.Real.showSigned_info:
         const GHC.Real.showSigned_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const S1jKw_srt+680;
 },
 _c1pJW() //  [R1]
         { []
         }
     {offset
       c1pJW: // global
           I64[Sp] = block_c1pK0_info;
           R2 = R1;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 40];
           P64[Sp - 8] = P64[Sp + 16];
           Sp = Sp - 24;
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pJW_info" {
     block_c1pJW_info:
         const _c1pJW;
         const 5;
         const 30;
 },
 _c1pK0() //  [R1]
         { []
         }
     {offset
       c1pK0: // global
           if (R1 & 7 == 1) goto c1pLb; else goto c1pLd;
       c1pLb: // global
           R2 = P64[Sp + 40];
           R1 = P64[Sp + 24];
           Sp = Sp + 48;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c1pLd: // global
           I64[Sp] = block_c1pK5_info;
           R1 = P64[Sp + 32];
           if (R1 & 7 != 0) goto u1pLl; else goto c1pK6;
       u1pLl: // global
           call _c1pK5(R1) args: 0, res: 0, upd: 0;
       c1pK6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pK0_info" {
     block_c1pK0_info:
         const _c1pK0;
         const 133;
         const 30;
 },
 _c1pK5() //  [R1]
         { []
         }
     {offset
       c1pK5: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c1pLg; else goto c1pLf;
       c1pLg: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1pLf: // global
           _s1jkH::I64 = I64[R1 + 7];
           I64[Hp - 48] = g1_s1jkI_info;
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = P64[Sp + 40];
           P64[Hp - 16] = P64[Sp + 8];
           _c1pKa::P64 = Hp - 48;
           if (%MO_S_Le_W64(_s1jkH::I64, 6)) goto c1pLi; else goto c1pLj;
       c1pLi: // global
           I64[Hp - 8] = sat_s1jkN_info;
           P64[Hp] = _c1pKa::P64;
           R1 = Hp - 7;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1pLj: // global
           I64[Hp - 8] = sat_s1jkS_info;
           P64[Hp] = _c1pKa::P64;
           R1 = Hp - 7;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pK5_info" {
     block_c1pK5_info:
         const _c1pK5;
         const 645;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.828563412 UTC

[section ""data" . GHC.Real.even_closure" {
     GHC.Real.even_closure:
         const GHC.Real.even_info;
         const 0;
 },
 $dNum_s1jkW_entry() //  [R1]
         { []
         }
     {offset
       c1pMt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1pMu; else goto c1pMv;
       c1pMu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1pMv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dNum_s1jkW_info" {
     $dNum_s1jkW_info:
         const $dNum_s1jkW_entry;
         const 1;
         const 16;
 },
 sat_s1jl1_entry() //  [R1]
         { []
         }
     {offset
       c1pMA: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1pMB; else goto c1pMC;
       c1pMB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1pMC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Real.even1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jl1_info" {
     sat_s1jl1_info:
         const sat_s1jl1_entry;
         const 1;
         const 4294967312;
         const S1jKw_srt+680;
 },
 sat_s1jkZ_entry() //  [R1]
         { []
         }
     {offset
       c1pML: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1pMM; else goto c1pMN;
       c1pMM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1pMN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Real.even2_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jkZ_info" {
     sat_s1jkZ_info:
         const sat_s1jkZ_entry;
         const 1;
         const 4294967312;
         const S1jKw_srt+584;
 },
 sat_s1jl0_entry() //  [R1]
         { []
         }
     {offset
       c1pMO: // global
           _s1jl0::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c1pMP; else goto c1pMQ;
       c1pMQ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1pMS; else goto c1pMR;
       c1pMS: // global
           HpAlloc = 24;
           goto c1pMP;
       c1pMP: // global
           R1 = _s1jl0::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1pMR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1jl0::P64;
           _s1jkT::P64 = P64[_s1jl0::P64 + 16];
           _s1jkU::P64 = P64[_s1jl0::P64 + 24];
           _s1jkW::P64 = P64[_s1jl0::P64 + 32];
           I64[Hp - 16] = sat_s1jkZ_info;
           P64[Hp] = _s1jkW::P64;
           R2 = _s1jkT::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _s1jkU::P64;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 40;
           call GHC.Real.rem_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jl0_info" {
     sat_s1jl0_info:
         const sat_s1jl0_entry;
         const 3;
         const 4294967311;
         const S1jKw_srt+584;
 },
 GHC.Real.even_entry() //  [R2, R3]
         { []
         }
     {offset
       c1pMT: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1pMZ; else goto c1pN0;
       c1pMZ: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.even_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1pN0: // global
           I64[Sp - 24] = block_c1pMl_info;
           _s1jkT::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = _s1jkT::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.even_info" {
     GHC.Real.even_info:
         const GHC.Real.even_entry;
         const 0;
         const 87965225189390;
         const 8589934607;
         const S1jKw_srt+584;
 },
 _c1pMl() //  [R1]
         { []
         }
     {offset
       c1pMl: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c1pN3; else goto c1pN2;
       c1pN3: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1pN2: // global
           I64[Hp - 80] = $dNum_s1jkW_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = sat_s1jl1_info;
           _c1pMp::P64 = Hp - 80;
           P64[Hp - 40] = _c1pMp::P64;
           I64[Hp - 32] = sat_s1jl0_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = _c1pMp::P64;
           I64[Sp] = block_c1pMU_info;
           R2 = R1;
           P64[Sp + 8] = Hp - 32;
           P64[Sp + 16] = Hp - 56;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pMl_info" {
     block_c1pMl_info:
         const _c1pMl;
         const 2;
         const 17596481011742;
         const S1jKw_srt+584;
 },
 _c1pMU() //  [R1]
         { []
         }
     {offset
       c1pMU: // global
           I64[Sp] = block_c1pMY_info;
           R2 = R1;
           call GHC.Classes.$p1Ord_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pMU_info" {
     block_c1pMU_info:
         const _c1pMU;
         const 2;
         const 30;
 },
 _c1pMY() //  [R1]
         { []
         }
     {offset
       c1pMY: // global
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           call GHC.Classes.==_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pMY_info" {
     block_c1pMY_info:
         const _c1pMY;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.844181256 UTC

[section ""data" . GHC.Real.odd_closure" {
     GHC.Real.odd_closure:
         const GHC.Real.odd_info;
         const 0;
 },
 GHC.Real.odd_entry() //  [R2, R3]
         { []
         }
     {offset
       c1pNS: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1pNT; else goto c1pNU;
       c1pNT: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.odd_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1pNU: // global
           I64[Sp - 8] = block_c1pNM_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Real.even_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.odd_info" {
     GHC.Real.odd_info:
         const GHC.Real.odd_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S1jKw_srt+696;
 },
 _c1pNM() //  [R1]
         { []
         }
     {offset
       c1pNM: // global
           if (R1 & 7 == 1) goto c1pNP; else goto c1pNQ;
       c1pNP: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1pNQ: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pNM_info" {
     block_c1pNM_info:
         const _c1pNM;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.849130901 UTC

[section ""data" . lvl3_r1j3b_closure" {
     lvl3_r1j3b_closure:
         const GHC.Real.:%_con_info;
         const GHC.Real.$fEnumRatio1_closure;
         const GHC.Real.even2_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.850891854 UTC

[section ""cstring" . lvl4_r1j3c_bytes" {
     lvl4_r1j3c_bytes:
         I8[] [114,111,117,110,100,32,100,101,102,97,117,108,116,32,100,101,102,110,58,32,66,97,100,32,118,97,108,117,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.854173978 UTC

[section ""data" . GHC.Real.$fRealFracRatio1_closure" {
     GHC.Real.$fRealFracRatio1_closure:
         const GHC.Real.$fRealFracRatio1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Real.$fRealFracRatio1_entry() //  [R1]
         { []
         }
     {offset
       c1pOn: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1pOo; else goto c1pOp;
       c1pOo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1pOp: // global
           (_c1pOi::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c1pOi::I64 == 0) goto c1pOk; else goto c1pOj;
       c1pOk: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c1pOj: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c1pOi::I64;
           I64[Sp - 24] = block_c1pOl_info;
           R2 = lvl4_r1j3c_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Real.$fRealFracRatio1_info" {
     GHC.Real.$fRealFracRatio1_info:
         const GHC.Real.$fRealFracRatio1_entry;
         const 0;
         const 4294967317;
         const S1jKw_srt+712;
 },
 _c1pOl() //  [R1]
         { []
         }
     {offset
       c1pOl: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1pOl_info" {
     block_c1pOl_info:
         const _c1pOl;
         const 0;
         const 4294967326;
         const S1jKw_srt+712;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.869691208 UTC

[section ""data" . GHC.Real.$dmround_closure" {
     GHC.Real.$dmround_closure:
         const GHC.Real.$dmround_info;
         const 0;
 },
 ds_s1jl9_entry() //  [R1]
         { []
         }
     {offset
       c1pOL: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1pOM; else goto c1pON;
       c1pOM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1pON: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call GHC.Real.properFraction_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds_s1jl9_info" {
     ds_s1jl9_info:
         const ds_s1jl9_entry;
         const 3;
         const 15;
 },
 $dNum_s1jld_entry() //  [R1]
         { []
         }
     {offset
       c1pP4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1pP5; else goto c1pP6;
       c1pP5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1pP6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dNum_s1jld_info" {
     $dNum_s1jld_info:
         const $dNum_s1jld_entry;
         const 1;
         const 16;
 },
 sat_s1jll_entry() //  [R1]
         { []
         }
     {offset
       c1pPm: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1pPn; else goto c1pPo;
       c1pPn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1pPo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c1pPk_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Real.$p2RealFrac_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jll_info" {
     sat_s1jll_info:
         const sat_s1jll_entry;
         const 1;
         const 4294967312;
         const S1jKw_srt+720;
 },
 _c1pPk() //  [R1]
         { []
         }
     {offset
       c1pPk: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = lvl3_r1j3b_closure+1;
           Sp = Sp - 8;
           call GHC.Real.fromRational_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1pPk_info" {
     block_c1pPk_info:
         const _c1pPk;
         const 0;
         const 4294967326;
         const S1jKw_srt+720;
 },
 sat_s1jlj_entry() //  [R1]
         { []
         }
     {offset
       c1pPw: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1pPx; else goto c1pPy;
       c1pPx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1pPy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Num.abs_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jlj_info" {
     sat_s1jlj_info:
         const sat_s1jlj_entry;
         const 2;
         const 18;
 },
 sat_s1jlm_entry() //  [R1]
         { []
         }
     {offset
       c1pPz: // global
           _s1jlm::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c1pPA; else goto c1pPB;
       c1pPB: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c1pPD; else goto c1pPC;
       c1pPD: // global
           HpAlloc = 56;
           goto c1pPA;
       c1pPA: // global
           R1 = _s1jlm::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1pPC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1jlm::P64;
           _s1jl6::P64 = P64[_s1jlm::P64 + 16];
           _s1jld::P64 = P64[_s1jlm::P64 + 24];
           _s1jle::P64 = P64[_s1jlm::P64 + 32];
           I64[Hp - 48] = sat_s1jll_info;
           P64[Hp - 32] = _s1jl6::P64;
           I64[Hp - 24] = sat_s1jlj_info;
           P64[Hp - 8] = _s1jld::P64;
           P64[Hp] = _s1jle::P64;
           R2 = _s1jld::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 24;
           P64[Sp - 24] = Hp - 48;
           Sp = Sp - 40;
           call GHC.Num.-_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jlm_info" {
     sat_s1jlm_info:
         const sat_s1jlm_entry;
         const 3;
         const 4294967311;
         const S1jKw_srt+720;
 },
 ds1_s1jli_entry() //  [R1]
         { []
         }
     {offset
       c1pPE: // global
           _s1jli::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c1pPF; else goto c1pPG;
       c1pPG: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c1pPI; else goto c1pPH;
       c1pPI: // global
           HpAlloc = 40;
           goto c1pPF;
       c1pPF: // global
           R1 = _s1jli::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1pPH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1jli::P64;
           _s1jl6::P64 = P64[_s1jli::P64 + 16];
           _s1jld::P64 = P64[_s1jli::P64 + 24];
           _s1jle::P64 = P64[_s1jli::P64 + 32];
           I64[Hp - 32] = sat_s1jlm_info;
           P64[Hp - 16] = _s1jl6::P64;
           P64[Hp - 8] = _s1jld::P64;
           P64[Hp] = _s1jle::P64;
           R2 = _s1jld::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 32;
           Sp = Sp - 32;
           call GHC.Num.signum_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds1_s1jli_info" {
     ds1_s1jli_info:
         const ds1_s1jli_entry;
         const 3;
         const 4294967311;
         const S1jKw_srt+720;
 },
 sat_s1jlr_entry() //  [R1]
         { []
         }
     {offset
       c1pPS: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1pPT; else goto c1pPU;
       c1pPT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1pPU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Real.$fEnumRatio1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jlr_info" {
     sat_s1jlr_info:
         const sat_s1jlr_entry;
         const 1;
         const 4294967312;
         const S1jKw_srt+552;
 },
 sat_s1jls_entry() //  [R1]
         { []
         }
     {offset
       c1pPV: // global
           _s1jls::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c1pPW; else goto c1pPX;
       c1pPX: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1pPZ; else goto c1pPY;
       c1pPZ: // global
           HpAlloc = 24;
           goto c1pPW;
       c1pPW: // global
           R1 = _s1jls::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1pPY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1jls::P64;
           _s1jld::P64 = P64[_s1jls::P64 + 16];
           I64[Hp - 16] = sat_s1jlr_info;
           P64[Hp] = _s1jld::P64;
           R2 = _s1jld::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 32;
           call GHC.Num.negate_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jls_info" {
     sat_s1jls_info:
         const sat_s1jls_entry;
         const 1;
         const 4294967312;
         const S1jKw_srt+552;
 },
 sat_s1jlB_entry() //  [R1]
         { []
         }
     {offset
       c1pQ8: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1pQ9; else goto c1pQa;
       c1pQ9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1pQa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Real.even1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jlB_info" {
     sat_s1jlB_info:
         const sat_s1jlB_entry;
         const 1;
         const 4294967312;
         const S1jKw_srt+680;
 },
 sat_s1jlx_entry() //  [R1]
         { []
         }
     {offset
       c1pQs: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1pQt; else goto c1pQu;
       c1pQt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1pQu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Real.even1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jlx_info" {
     sat_s1jlx_info:
         const sat_s1jlx_entry;
         const 1;
         const 4294967312;
         const S1jKw_srt+680;
 },
 sat_s1jlz_entry() //  [R1]
         { []
         }
     {offset
       c1pQD: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1pQE; else goto c1pQF;
       c1pQE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1pQF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Real.$fEnumRatio1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jlz_info" {
     sat_s1jlz_info:
         const sat_s1jlz_entry;
         const 1;
         const 4294967312;
         const S1jKw_srt+552;
 },
 sat_s1jlA_entry() //  [R1]
         { []
         }
     {offset
       c1pQM: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1pQN; else goto c1pQO;
       c1pQN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1pQO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Real.$fEnumRatio1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jlA_info" {
     sat_s1jlA_info:
         const sat_s1jlA_entry;
         const 1;
         const 4294967312;
         const S1jKw_srt+552;
 },
 sat_s1jlD_entry() //  [R1]
         { []
         }
     {offset
       c1pQX: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1pQY; else goto c1pQZ;
       c1pQY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1pQZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Real.$fEnumRatio1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jlD_info" {
     sat_s1jlD_info:
         const sat_s1jlD_entry;
         const 1;
         const 4294967312;
         const S1jKw_srt+552;
 },
 GHC.Real.$dmround_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1pR0: // global
           _s1jl8::P64 = R4;
           _s1jl7::P64 = R3;
           _s1jl6::P64 = R2;
           if ((Sp + -88) < SpLim) (likely: False) goto c1pR1; else goto c1pR2;
       c1pR2: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c1pR4; else goto c1pR3;
       c1pR4: // global
           HpAlloc = 40;
           goto c1pR1;
       c1pR1: // global
           R4 = _s1jl8::P64;
           R3 = _s1jl7::P64;
           R2 = _s1jl6::P64;
           R1 = GHC.Real.$dmround_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1pR3: // global
           I64[Hp - 32] = ds_s1jl9_info;
           P64[Hp - 16] = _s1jl6::P64;
           P64[Hp - 8] = _s1jl7::P64;
           P64[Hp] = _s1jl8::P64;
           I64[Sp - 32] = block_c1pOO_info;
           R2 = _s1jl6::P64;
           P64[Sp - 24] = Hp - 32;
           P64[Sp - 16] = _s1jl6::P64;
           P64[Sp - 8] = _s1jl7::P64;
           Sp = Sp - 32;
           call GHC.Real.$p1RealFrac_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$dmround_info" {
     GHC.Real.$dmround_info:
         const GHC.Real.$dmround_entry;
         const 0;
         const 64457773961707534;
         const 12884901911;
         const S1jKw_srt+552;
 },
 _c1pOO() //  [R1]
         { []
         }
     {offset
       c1pOO: // global
           I64[Sp - 8] = block_c1pOS_info;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pOO_info" {
     block_c1pOO_info:
         const _c1pOO;
         const 3;
         const 46443375452225566;
         const S1jKw_srt+552;
 },
 _c1pOS() //  [R1]
         { []
         }
     {offset
       c1pOS: // global
           I64[Sp - 8] = block_c1pOW_info;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Classes.$p1Ord_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pOS_info" {
     block_c1pOS_info:
         const _c1pOS;
         const 4;
         const 46443375452225566;
         const S1jKw_srt+552;
 },
 _c1pOW() //  [R1]
         { []
         }
     {offset
       c1pOW: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c1pR9; else goto c1pR8;
       c1pR9: // global
           HpAlloc = 136;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1pR8: // global
           I64[Hp - 128] = $dNum_s1jld_info;
           P64[Hp - 112] = P64[Sp + 16];
           I64[Hp - 104] = stg_sel_1_upd_info;
           _c1pOH::P64 = P64[Sp + 24];
           P64[Hp - 88] = _c1pOH::P64;
           I64[Hp - 80] = ds1_s1jli_info;
           P64[Hp - 64] = P64[Sp + 32];
           _c1pP0::P64 = Hp - 128;
           P64[Hp - 56] = _c1pP0::P64;
           _c1pP7::P64 = Hp - 104;
           P64[Hp - 48] = _c1pP7::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _c1pOH::P64;
           I64[Hp - 16] = sat_s1jls_info;
           P64[Hp] = _c1pP0::P64;
           I64[Sp - 16] = block_c1pQ0_info;
           R2 = R1;
           I64[Sp - 40] = stg_ap_pp_info;
           _c1pP8::P64 = Hp - 80;
           P64[Sp - 32] = _c1pP8::P64;
           P64[Sp - 24] = Hp - 16;
           P64[Sp - 8] = R1;
           P64[Sp] = Hp - 40;
           P64[Sp + 16] = _c1pP8::P64;
           P64[Sp + 24] = _c1pP7::P64;
           P64[Sp + 32] = _c1pP0::P64;
           Sp = Sp - 40;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pOW_info" {
     block_c1pOW_info:
         const _c1pOW;
         const 5;
         const 46443375452225566;
         const S1jKw_srt+552;
 },
 _c1pQ0() //  [R1]
         { []
         }
     {offset
       c1pQ0: // global
           if (R1 & 7 == 1) goto c1pRb; else goto u1pS7;
       c1pRb: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1pRe; else goto c1pRd;
       c1pRe: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1pRd: // global
           I64[Hp - 16] = sat_s1jlB_info;
           P64[Hp] = P64[Sp + 48];
           I64[Sp] = block_c1pQP_info;
           R2 = P64[Sp + 8];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 32];
           P64[Sp - 8] = Hp - 16;
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
       u1pS7: // global
           Sp = Sp + 16;
           call _c1pS1() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1pQ0_info" {
     block_c1pQ0_info:
         const _c1pQ0;
         const 7;
         const 37436176197484574;
         const S1jKw_srt+552;
 },
 _c1pQP() //  [R1]
         { []
         }
     {offset
       c1pQP: // global
           if (R1 & 7 == 1) goto c1pRv; else goto c1pRN;
       c1pRv: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1pRy; else goto c1pRx;
       c1pRy: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1pRx: // global
           I64[Hp - 16] = sat_s1jlD_info;
           P64[Hp] = P64[Sp + 48];
           _s1jlc::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1pRt_info;
           R2 = _s1jlc::P64;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = P64[Sp + 32];
           P64[Sp] = Hp - 16;
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
       c1pRN: // global
           I64[Sp + 8] = block_c1pRL_info;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 56];
           Sp = Sp + 8;
           call GHC.Real.even_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pQP_info" {
     block_c1pQP_info:
         const _c1pQP;
         const 7;
         const 37436176197484574;
         const S1jKw_srt+552;
 },
 _c1pRt() //  [R1]
         { []
         }
     {offset
       c1pRt: // global
           if (R1 & 7 == 1) goto c1pRE; else goto u1pSa;
       c1pRE: // global
           R1 = GHC.Real.$fRealFracRatio1_closure;
           Sp = Sp + 56;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       u1pSa: // global
           Sp = Sp + 8;
           call _s1jlu() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1pRt_info" {
     block_c1pRt_info:
         const _c1pRt;
         const 262;
         const 36310276290641950;
         const S1jKw_srt+552;
 },
 _c1pRL() //  [R1]
         { []
         }
     {offset
       c1pRL: // global
           if (R1 & 7 == 1) goto u1pS8; else goto u1pS9;
       u1pS8: // global
           Sp = Sp + 8;
           call _s1jlu() args: 0, res: 0, upd: 0;
       u1pS9: // global
           Sp = Sp + 8;
           call _c1pS1() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1pRL_info" {
     block_c1pRL_info:
         const _c1pRL;
         const 262;
         const 281479271677982;
         const S1jKw_srt+552;
 },
 _s1jlu() //  []
         { []
         }
     {offset
       s1jlu: // global
           I64[Sp - 8] = block_c1pQg_info;
           R2 = P64[Sp + 40];
           Sp = Sp - 8;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c1pQg() //  [R1]
         { []
         }
     {offset
       c1pQg: // global
           I64[Sp] = block_c1pQk_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pQg_info" {
     block_c1pQg_info:
         const _c1pQg;
         const 2310;
         const 281479271677982;
         const S1jKw_srt+552;
 },
 _c1pQk() //  [R1]
         { []
         }
     {offset
       c1pQk: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1pRj; else goto c1pRi;
       c1pRj: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1pRi: // global
           I64[Hp - 16] = sat_s1jlx_info;
           P64[Hp] = P64[Sp + 40];
           I64[Sp] = block_c1pQv_info;
           R2 = P64[Sp + 16];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 32];
           P64[Sp - 8] = Hp - 16;
           P64[Sp + 48] = R1;
           Sp = Sp - 24;
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pQk_info" {
     block_c1pQk_info:
         const _c1pQk;
         const 2310;
         const 281479271677982;
         const S1jKw_srt+552;
 },
 _c1pQv() //  [R1]
         { []
         }
     {offset
       c1pQv: // global
           _c1pPJ::P64 = P64[Sp + 8];
           _s1jlw::P64 = P64[Sp + 48];
           if (R1 & 7 == 1) goto c1pRl; else goto c1pRp;
       c1pRl: // global
           Hp = Hp + 24;
           _s1jly::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c1pRs; else goto c1pRn;
       c1pRn: // global
           I64[Hp - 16] = sat_s1jlz_info;
           P64[Hp] = _s1jlw::P64;
           R2 = _s1jlw::P64;
           I64[Sp + 32] = stg_ap_pp_info;
           P64[Sp + 40] = _c1pPJ::P64;
           P64[Sp + 48] = Hp - 16;
           Sp = Sp + 32;
           call GHC.Num.+_entry(R2) args: 32, res: 0, upd: 8;
       c1pRp: // global
           Hp = Hp + 24;
           _s1jly::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c1pRs; else goto c1pRr;
       c1pRs: // global
           HpAlloc = 24;
           R1 = _s1jly::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1pRr: // global
           I64[Hp - 16] = sat_s1jlA_info;
           P64[Hp] = _s1jlw::P64;
           R2 = _s1jlw::P64;
           I64[Sp + 32] = stg_ap_pp_info;
           P64[Sp + 40] = _c1pPJ::P64;
           P64[Sp + 48] = Hp - 16;
           Sp = Sp + 32;
           call GHC.Num.-_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pQv_info" {
     block_c1pQv_info:
         const _c1pQv;
         const 1926;
         const 4294967326;
         const S1jKw_srt+552;
 },
 _c1pS1() //  []
         { []
         }
     {offset
       c1pS1: // global
           R1 = P64[Sp];
           Sp = Sp + 48;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.921464707 UTC

[section ""data" . GHC.Real.integralEnumFrom_closure" {
     GHC.Real.integralEnumFrom_closure:
         const GHC.Real.integralEnumFrom_info;
         const 0;
 },
 f_s1jlJ_entry() //  [R1]
         { []
         }
     {offset
       c1pUq: // global
           R2 = P64[R1 + 16];
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . f_s1jlJ_info" {
     f_s1jlJ_info:
         const f_s1jlJ_entry;
         const 1;
         const 16;
 },
 f1_s1jlK_entry() //  [R1]
         { []
         }
     {offset
       c1pUx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1pUy; else goto c1pUz;
       c1pUy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1pUz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f1_s1jlK_info" {
     f1_s1jlK_info:
         const f1_s1jlK_entry;
         const 1;
         const 16;
 },
 sat_s1jlM_entry() //  [R1]
         { []
         }
     {offset
       c1pUE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1pUF; else goto c1pUG;
       c1pUF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1pUG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jlM_info" {
     sat_s1jlM_info:
         const sat_s1jlM_entry;
         const 1;
         const 16;
 },
 sat_s1jlS_entry() //  [R1]
         { []
         }
     {offset
       c1pV0: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1pV1; else goto c1pV2;
       c1pV1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1pV2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c1pUY_info;
           R3 = GHC.Real.$fEnumRatio1_closure;
           R2 = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jlS_info" {
     sat_s1jlS_info:
         const sat_s1jlS_entry;
         const 2;
         const 2203318222866;
         const S1jKw_srt+480;
 },
 _c1pUY() //  [R1]
         { []
         }
     {offset
       c1pUY: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_s1jlN_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1pUY_info" {
     block_c1pUY_info:
         const _c1pUY;
         const 1;
         const 2203318222878;
         const S1jKw_srt+480;
 },
 sat_s1jlQ_entry() //  [R1]
         { []
         }
     {offset
       c1pVa: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1pVb; else goto c1pVc;
       c1pVb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1pVc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jlQ_info" {
     sat_s1jlQ_info:
         const sat_s1jlQ_entry;
         const 2;
         const 18;
 },
 go_s1jlN_entry() //  [R1, R2]
         { []
         }
     {offset
       c1pVg: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1pVh; else goto c1pVi;
       c1pVh: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1pVi: // global
           I64[Sp - 32] = block_c1pUQ_info;
           R3 = P64[R1 + 15];
           _s1jlO::P64 = R2;
           R2 = R2;
           P64[Sp - 24] = P64[R1 + 7];
           P64[Sp - 16] = R1;
           P64[Sp - 8] = _s1jlO::P64;
           Sp = Sp - 32;
           call GHC.Integer.Type.gtInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s1jlN_info" {
     go_s1jlN_info:
         const go_s1jlN_entry;
         const 2;
         const 2203318222859;
         const 4294967301;
         const S1jKw_srt+480;
 },
 _c1pUQ() //  [R1]
         { []
         }
     {offset
       c1pUQ: // global
           if (R1 == 1) goto c1pVf; else goto c1pVe;
       c1pVf: // global
           R1 = []_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1pVe: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c1pVm; else goto c1pVl;
       c1pVm: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c1pVl: // global
           I64[Hp - 80] = sat_s1jlS_info;
           P64[Hp - 64] = P64[Sp + 16];
           _s1jlO::P64 = P64[Sp + 24];
           P64[Hp - 56] = _s1jlO::P64;
           I64[Hp - 48] = sat_s1jlQ_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = _s1jlO::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pUQ_info" {
     block_c1pUQ_info:
         const _c1pUQ;
         const 3;
         const 2203318222878;
         const S1jKw_srt+480;
 },
 section ""relreadonly" . u1pVD_srtd" {
     u1pVD_srtd:
         const S1jKw_srt+480;
         const 34;
         const 8589935105;
 },
 GHC.Real.integralEnumFrom_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1pVq: // global
           _s1jlI::P64 = R4;
           _s1jlH::P64 = R3;
           _s1jlG::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto c1pVs; else goto c1pVt;
       c1pVt: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c1pVv; else goto c1pVu;
       c1pVv: // global
           HpAlloc = 72;
           goto c1pVs;
       c1pVs: // global
           R4 = _s1jlI::P64;
           R3 = _s1jlH::P64;
           R2 = _s1jlG::P64;
           R1 = GHC.Real.integralEnumFrom_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1pVu: // global
           I64[Hp - 64] = f_s1jlJ_info;
           P64[Hp - 48] = _s1jlG::P64;
           I64[Hp - 40] = f1_s1jlK_info;
           P64[Hp - 24] = Hp - 64;
           I64[Hp - 16] = sat_s1jlM_info;
           P64[Hp] = _s1jlH::P64;
           I64[Sp - 32] = block_c1pUH_info;
           R2 = _s1jlG::P64;
           I64[Sp - 48] = stg_ap_p_info;
           P64[Sp - 40] = Hp - 16;
           P64[Sp - 24] = Hp - 40;
           P64[Sp - 16] = _s1jlG::P64;
           P64[Sp - 8] = _s1jlI::P64;
           Sp = Sp - 48;
           call GHC.Real.toInteger_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.integralEnumFrom_info" {
     GHC.Real.integralEnumFrom_info:
         const GHC.Real.integralEnumFrom_entry;
         const 0;
         const 18446744069414584334;
         const 12884901911;
         const u1pVD_srtd;
 },
 _c1pUH() //  [R1]
         { []
         }
     {offset
       c1pUH: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1pVy; else goto c1pVx;
       c1pVy: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1pVx: // global
           I64[Hp - 16] = go_s1jlN_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           _s1jlG::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c1pVr_info;
           R2 = _s1jlG::P64;
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = P64[Sp + 24];
           P64[Sp + 24] = Hp - 15;
           call GHC.Real.toInteger_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pUH_info" {
     block_c1pUH_info:
         const _c1pUH;
         const 3;
         const 2203318222878;
         const S1jKw_srt+480;
 },
 _c1pVr() //  [R1]
         { []
         }
     {offset
       c1pVr: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_s1jlN_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pVr_info" {
     block_c1pVr_info:
         const _c1pVr;
         const 1;
         const 2203318222878;
         const S1jKw_srt+480;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:04.959369984 UTC

[section ""data" . GHC.Real.integralEnumFromThen_closure" {
     GHC.Real.integralEnumFromThen_closure:
         const GHC.Real.integralEnumFromThen_info;
         const 0;
 },
 f_s1jm2_entry() //  [R1]
         { []
         }
     {offset
       c1pWW: // global
           R2 = P64[R1 + 16];
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . f_s1jm2_info" {
     f_s1jm2_info:
         const f_s1jm2_entry;
         const 1;
         const 16;
 },
 f1_s1jm3_entry() //  [R1]
         { []
         }
     {offset
       c1pX3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1pX4; else goto c1pX5;
       c1pX4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1pX5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f1_s1jm3_info" {
     f1_s1jm3_info:
         const f1_s1jm3_entry;
         const 1;
         const 16;
 },
 sat_s1jm6_entry() //  [R1]
         { []
         }
     {offset
       c1pXe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1pXf; else goto c1pXg;
       c1pXf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1pXg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jm6_info" {
     sat_s1jm6_info:
         const sat_s1jm6_entry;
         const 1;
         const 16;
 },
 sat_s1jmc_entry() //  [R1]
         { []
         }
     {offset
       c1pXA: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1pXB; else goto c1pXC;
       c1pXB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1pXC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c1pXy_info;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jmc_info" {
     sat_s1jmc_info:
         const sat_s1jmc_entry;
         const 3;
         const 4294967311;
         const S1jKw_srt+752;
 },
 _c1pXy() //  [R1]
         { []
         }
     {offset
       c1pXy: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_s1jm7_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1pXy_info" {
     block_c1pXy_info:
         const _c1pXy;
         const 1;
         const 4294967326;
         const S1jKw_srt+752;
 },
 sat_s1jma_entry() //  [R1]
         { []
         }
     {offset
       c1pXK: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1pXL; else goto c1pXM;
       c1pXL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1pXM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jma_info" {
     sat_s1jma_info:
         const sat_s1jma_entry;
         const 2;
         const 18;
 },
 go_s1jm7_entry() //  [R1, R2]
         { []
         }
     {offset
       c1pXQ: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1pXR; else goto c1pXS;
       c1pXR: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1pXS: // global
           I64[Sp - 40] = block_c1pXq_info;
           R3 = P64[R1 + 23];
           _s1jm8::P64 = R2;
           R2 = R2;
           P64[Sp - 32] = P64[R1 + 7];
           P64[Sp - 24] = P64[R1 + 15];
           P64[Sp - 16] = R1;
           P64[Sp - 8] = _s1jm8::P64;
           Sp = Sp - 40;
           call GHC.Integer.Type.ltInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s1jm7_info" {
     go_s1jm7_info:
         const go_s1jm7_entry;
         const 3;
         const 4294967304;
         const 4294967301;
         const S1jKw_srt+752;
 },
 _c1pXq() //  [R1]
         { []
         }
     {offset
       c1pXq: // global
           if (R1 == 1) goto c1pXP; else goto c1pXO;
       c1pXP: // global
           R1 = []_closure+1;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1pXO: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c1pXW; else goto c1pXV;
       c1pXW: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c1pXV: // global
           I64[Hp - 88] = sat_s1jmc_info;
           P64[Hp - 72] = P64[Sp + 8];
           P64[Hp - 64] = P64[Sp + 24];
           _s1jm8::P64 = P64[Sp + 32];
           P64[Hp - 56] = _s1jm8::P64;
           I64[Hp - 48] = sat_s1jma_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = _s1jm8::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 88;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pXq_info" {
     block_c1pXq_info:
         const _c1pXq;
         const 4;
         const 4294967326;
         const S1jKw_srt+752;
 },
 sat_s1jme_entry() //  [R1]
         { []
         }
     {offset
       c1pY6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1pY7; else goto c1pY8;
       c1pY7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1pY8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jme_info" {
     sat_s1jme_info:
         const sat_s1jme_entry;
         const 1;
         const 16;
 },
 sat_s1jmk_entry() //  [R1]
         { []
         }
     {offset
       c1pYs: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1pYt; else goto c1pYu;
       c1pYt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1pYu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c1pYq_info;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jmk_info" {
     sat_s1jmk_info:
         const sat_s1jmk_entry;
         const 3;
         const 4294967311;
         const S1jKw_srt+752;
 },
 _c1pYq() //  [R1]
         { []
         }
     {offset
       c1pYq: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_s1jmf_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1pYq_info" {
     block_c1pYq_info:
         const _c1pYq;
         const 1;
         const 4294967326;
         const S1jKw_srt+752;
 },
 sat_s1jmi_entry() //  [R1]
         { []
         }
     {offset
       c1pYC: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1pYD; else goto c1pYE;
       c1pYD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1pYE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jmi_info" {
     sat_s1jmi_info:
         const sat_s1jmi_entry;
         const 2;
         const 18;
 },
 go_s1jmf_entry() //  [R1, R2]
         { []
         }
     {offset
       c1pYI: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1pYJ; else goto c1pYK;
       c1pYJ: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1pYK: // global
           I64[Sp - 40] = block_c1pYi_info;
           R3 = P64[R1 + 23];
           _s1jmg::P64 = R2;
           R2 = R2;
           P64[Sp - 32] = P64[R1 + 7];
           P64[Sp - 24] = P64[R1 + 15];
           P64[Sp - 16] = R1;
           P64[Sp - 8] = _s1jmg::P64;
           Sp = Sp - 40;
           call GHC.Integer.Type.gtInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s1jmf_info" {
     go_s1jmf_info:
         const go_s1jmf_entry;
         const 3;
         const 4294967304;
         const 4294967301;
         const S1jKw_srt+752;
 },
 _c1pYi() //  [R1]
         { []
         }
     {offset
       c1pYi: // global
           if (R1 == 1) goto c1pYH; else goto c1pYG;
       c1pYH: // global
           R1 = []_closure+1;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1pYG: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c1pYO; else goto c1pYN;
       c1pYO: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c1pYN: // global
           I64[Hp - 88] = sat_s1jmk_info;
           P64[Hp - 72] = P64[Sp + 8];
           P64[Hp - 64] = P64[Sp + 24];
           _s1jmg::P64 = P64[Sp + 32];
           P64[Hp - 56] = _s1jmg::P64;
           I64[Hp - 48] = sat_s1jmi_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = _s1jmg::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 88;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pYi_info" {
     block_c1pYi_info:
         const _c1pYi;
         const 4;
         const 4294967326;
         const S1jKw_srt+752;
 },
 f_s1jmm_entry() //  [R1]
         { []
         }
     {offset
       c1pZ2: // global
           R2 = P64[R1 + 16];
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . f_s1jmm_info" {
     f_s1jmm_info:
         const f_s1jmm_entry;
         const 1;
         const 16;
 },
 f1_s1jmn_entry() //  [R1]
         { []
         }
     {offset
       c1pZ9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1pZa; else goto c1pZb;
       c1pZa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1pZb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f1_s1jmn_info" {
     f1_s1jmn_info:
         const f1_s1jmn_entry;
         const 1;
         const 16;
 },
 sat_s1jmq_entry() //  [R1]
         { []
         }
     {offset
       c1pZk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1pZl; else goto c1pZm;
       c1pZl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1pZm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jmq_info" {
     sat_s1jmq_info:
         const sat_s1jmq_entry;
         const 1;
         const 16;
 },
 sat_s1jmw_entry() //  [R1]
         { []
         }
     {offset
       c1pZG: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1pZH; else goto c1pZI;
       c1pZH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1pZI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c1pZE_info;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jmw_info" {
     sat_s1jmw_info:
         const sat_s1jmw_entry;
         const 3;
         const 4294967311;
         const S1jKw_srt+752;
 },
 _c1pZE() //  [R1]
         { []
         }
     {offset
       c1pZE: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_s1jmr_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1pZE_info" {
     block_c1pZE_info:
         const _c1pZE;
         const 1;
         const 4294967326;
         const S1jKw_srt+752;
 },
 sat_s1jmu_entry() //  [R1]
         { []
         }
     {offset
       c1pZQ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1pZR; else goto c1pZS;
       c1pZR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1pZS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jmu_info" {
     sat_s1jmu_info:
         const sat_s1jmu_entry;
         const 2;
         const 18;
 },
 go_s1jmr_entry() //  [R1, R2]
         { []
         }
     {offset
       c1pZW: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1pZX; else goto c1pZY;
       c1pZX: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1pZY: // global
           I64[Sp - 40] = block_c1pZw_info;
           R3 = P64[R1 + 23];
           _s1jms::P64 = R2;
           R2 = R2;
           P64[Sp - 32] = P64[R1 + 7];
           P64[Sp - 24] = P64[R1 + 15];
           P64[Sp - 16] = R1;
           P64[Sp - 8] = _s1jms::P64;
           Sp = Sp - 40;
           call GHC.Integer.Type.ltInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s1jmr_info" {
     go_s1jmr_info:
         const go_s1jmr_entry;
         const 3;
         const 4294967304;
         const 4294967301;
         const S1jKw_srt+752;
 },
 _c1pZw() //  [R1]
         { []
         }
     {offset
       c1pZw: // global
           if (R1 == 1) goto c1pZV; else goto c1pZU;
       c1pZV: // global
           R1 = []_closure+1;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1pZU: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c1q02; else goto c1q01;
       c1q02: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c1q01: // global
           I64[Hp - 88] = sat_s1jmw_info;
           P64[Hp - 72] = P64[Sp + 8];
           P64[Hp - 64] = P64[Sp + 24];
           _s1jms::P64 = P64[Sp + 32];
           P64[Hp - 56] = _s1jms::P64;
           I64[Hp - 48] = sat_s1jmu_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = _s1jms::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 88;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pZw_info" {
     block_c1pZw_info:
         const _c1pZw;
         const 4;
         const 4294967326;
         const S1jKw_srt+752;
 },
 sat_s1jmy_entry() //  [R1]
         { []
         }
     {offset
       c1q0c: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1q0d; else goto c1q0e;
       c1q0d: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1q0e: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jmy_info" {
     sat_s1jmy_info:
         const sat_s1jmy_entry;
         const 1;
         const 16;
 },
 sat_s1jmE_entry() //  [R1]
         { []
         }
     {offset
       c1q0y: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1q0z; else goto c1q0A;
       c1q0z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1q0A: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c1q0w_info;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jmE_info" {
     sat_s1jmE_info:
         const sat_s1jmE_entry;
         const 3;
         const 4294967311;
         const S1jKw_srt+752;
 },
 _c1q0w() //  [R1]
         { []
         }
     {offset
       c1q0w: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_s1jmz_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1q0w_info" {
     block_c1q0w_info:
         const _c1q0w;
         const 1;
         const 4294967326;
         const S1jKw_srt+752;
 },
 sat_s1jmC_entry() //  [R1]
         { []
         }
     {offset
       c1q0I: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1q0J; else goto c1q0K;
       c1q0J: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1q0K: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jmC_info" {
     sat_s1jmC_info:
         const sat_s1jmC_entry;
         const 2;
         const 18;
 },
 go_s1jmz_entry() //  [R1, R2]
         { []
         }
     {offset
       c1q0O: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1q0P; else goto c1q0Q;
       c1q0P: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1q0Q: // global
           I64[Sp - 40] = block_c1q0o_info;
           R3 = P64[R1 + 23];
           _s1jmA::P64 = R2;
           R2 = R2;
           P64[Sp - 32] = P64[R1 + 7];
           P64[Sp - 24] = P64[R1 + 15];
           P64[Sp - 16] = R1;
           P64[Sp - 8] = _s1jmA::P64;
           Sp = Sp - 40;
           call GHC.Integer.Type.gtInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s1jmz_info" {
     go_s1jmz_info:
         const go_s1jmz_entry;
         const 3;
         const 4294967304;
         const 4294967301;
         const S1jKw_srt+752;
 },
 _c1q0o() //  [R1]
         { []
         }
     {offset
       c1q0o: // global
           if (R1 == 1) goto c1q0N; else goto c1q0M;
       c1q0N: // global
           R1 = []_closure+1;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1q0M: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c1q0U; else goto c1q0T;
       c1q0U: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c1q0T: // global
           I64[Hp - 88] = sat_s1jmE_info;
           P64[Hp - 72] = P64[Sp + 8];
           P64[Hp - 64] = P64[Sp + 24];
           _s1jmA::P64 = P64[Sp + 32];
           P64[Hp - 56] = _s1jmA::P64;
           I64[Hp - 48] = sat_s1jmC_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = _s1jmA::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 88;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1q0o_info" {
     block_c1q0o_info:
         const _c1q0o;
         const 4;
         const 4294967326;
         const S1jKw_srt+752;
 },
 section ""relreadonly" . u1q1I_srtd" {
     u1q1I_srtd:
         const S1jKw_srt+456;
         const 39;
         const 412585295873;
 },
 GHC.Real.integralEnumFromThen_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c1q0Y: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c1q0Z; else goto c1q10;
       c1q0Z: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.integralEnumFromThen_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1q10: // global
           I64[Sp - 32] = block_c1pWC_info;
           _s1jlU::P64 = R2;
           R2 = R2;
           I64[Sp - 48] = stg_ap_p_info;
           P64[Sp - 40] = R5;
           P64[Sp - 24] = _s1jlU::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 48;
           call GHC.Real.toInteger_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.integralEnumFromThen_info" {
     GHC.Real.integralEnumFromThen_info:
         const GHC.Real.integralEnumFromThen_entry;
         const 0;
         const 18446744069414584334;
         const 17179869208;
         const u1q1I_srtd;
 },
 section ""relreadonly" . u1q1J_srtd" {
     u1q1J_srtd:
         const S1jKw_srt+456;
         const 38;
         const 137707388929;
 },
 _c1pWC() //  [R1]
         { []
         }
     {offset
       c1pWC: // global
           I64[Sp] = block_c1pWG_info;
           R2 = P64[Sp + 8];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 24];
           P64[Sp + 24] = R1;
           Sp = Sp - 16;
           call GHC.Real.toInteger_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pWC_info" {
     block_c1pWC_info:
         const _c1pWC;
         const 3;
         const 18446744069414584350;
         const u1q1J_srtd;
 },
 section ""relreadonly" . u1q1K_srtd" {
     u1q1K_srtd:
         const S1jKw_srt+456;
         const 38;
         const 137707388929;
 },
 _c1pWG() //  [R1]
         { []
         }
     {offset
       c1pWG: // global
           I64[Sp - 8] = block_c1pWK_info;
           R3 = R1;
           R2 = P64[Sp + 24];
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Integer.Type.geInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pWG_info" {
     block_c1pWG_info:
         const _c1pWG;
         const 3;
         const 18446744069414584350;
         const u1q1K_srtd;
 },
 section ""relreadonly" . u1q1L_srtd" {
     u1q1L_srtd:
         const S1jKw_srt+456;
         const 38;
         const 137707388929;
 },
 _c1pWK() //  [R1]
         { []
         }
     {offset
       c1pWK: // global
           _s1jlY::P64 = P64[Sp + 32];
           _s1jlZ::P64 = P64[Sp + 8];
           if (R1 == 1) goto c1q1p; else goto c1q15;
       c1q1p: // global
           I64[Sp] = block_c1pYU_info;
           R3 = _s1jlZ::P64;
           R2 = _s1jlY::P64;
           call GHC.Integer.Type.minusInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
       c1q15: // global
           I64[Sp] = block_c1pWO_info;
           R3 = _s1jlZ::P64;
           R2 = _s1jlY::P64;
           call GHC.Integer.Type.minusInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pWK_info" {
     block_c1pWK_info:
         const _c1pWK;
         const 4;
         const 18446744069414584350;
         const u1q1L_srtd;
 },
 _c1pYU() //  [R1]
         { []
         }
     {offset
       c1pYU: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c1q1s; else goto c1q1r;
       c1q1s: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1q1r: // global
           I64[Hp - 40] = f_s1jmm_info;
           P64[Hp - 24] = P64[Sp + 16];
           I64[Hp - 16] = f1_s1jmn_info;
           P64[Hp] = Hp - 40;
           I64[Sp - 8] = block_c1pZc_info;
           R3 = GHC.Real.even1_closure;
           R2 = R1;
           P64[Sp] = R1;
           P64[Sp + 32] = Hp - 16;
           Sp = Sp - 8;
           call GHC.Integer.Type.geInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pYU_info" {
     block_c1pYU_info:
         const _c1pYU;
         const 516;
         const 2203318222878;
         const S1jKw_srt+680;
 },
 _c1pZc() //  [R1]
         { []
         }
     {offset
       c1pZc: // global
           _s1jlU::P64 = P64[Sp + 24];
           _s1jlV::P64 = P64[Sp + 32];
           if (R1 == 1) goto c1q1B; else goto c1q1u;
       c1q1B: // global
           Hp = Hp + 24;
           _s1jmo::I64 = R1;
           if (Hp > HpLim) (likely: False) goto c1q1E; else goto c1q1D;
       c1q1D: // global
           I64[Hp - 16] = sat_s1jmy_info;
           P64[Hp] = _s1jlV::P64;
           I64[Sp] = block_c1q0f_info;
           R2 = _s1jlU::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 16;
           Sp = Sp - 16;
           call GHC.Real.toInteger_entry(R2) args: 24, res: 8, upd: 8;
       c1q1u: // global
           Hp = Hp + 24;
           _s1jmo::I64 = R1;
           if (Hp > HpLim) (likely: False) goto c1q1E; else goto c1q1w;
       c1q1E: // global
           HpAlloc = 24;
           R1 = _s1jmo::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c1q1w: // global
           I64[Hp - 16] = sat_s1jmq_info;
           P64[Hp] = _s1jlV::P64;
           I64[Sp] = block_c1pZn_info;
           R2 = _s1jlU::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 16;
           Sp = Sp - 16;
           call GHC.Real.toInteger_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pZc_info" {
     block_c1pZc_info:
         const _c1pZc;
         const 5;
         const 4294967326;
         const S1jKw_srt+752;
 },
 _c1q0f() //  [R1]
         { []
         }
     {offset
       c1q0f: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1q1H; else goto c1q1G;
       c1q1H: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1q1G: // global
           I64[Hp - 24] = go_s1jmz_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = R1;
           R2 = P64[Sp + 16];
           R1 = Hp - 23;
           Sp = Sp + 48;
           call go_s1jmz_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1q0f_info" {
     block_c1q0f_info:
         const _c1q0f;
         const 773;
         const 4294967326;
         const S1jKw_srt+752;
 },
 _c1pZn() //  [R1]
         { []
         }
     {offset
       c1pZn: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1q1A; else goto c1q1z;
       c1q1A: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1q1z: // global
           I64[Hp - 24] = go_s1jmr_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = R1;
           R2 = P64[Sp + 16];
           R1 = Hp - 23;
           Sp = Sp + 48;
           call go_s1jmr_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pZn_info" {
     block_c1pZn_info:
         const _c1pZn;
         const 773;
         const 4294967326;
         const S1jKw_srt+752;
 },
 _c1pWO() //  [R1]
         { []
         }
     {offset
       c1pWO: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c1q18; else goto c1q17;
       c1q18: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1q17: // global
           I64[Hp - 40] = f_s1jm2_info;
           P64[Hp - 24] = P64[Sp + 16];
           I64[Hp - 16] = f1_s1jm3_info;
           P64[Hp] = Hp - 40;
           I64[Sp - 8] = block_c1pX6_info;
           R3 = GHC.Real.even1_closure;
           R2 = R1;
           P64[Sp] = R1;
           P64[Sp + 32] = Hp - 16;
           Sp = Sp - 8;
           call GHC.Integer.Type.geInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pWO_info" {
     block_c1pWO_info:
         const _c1pWO;
         const 516;
         const 2203318222878;
         const S1jKw_srt+680;
 },
 _c1pX6() //  [R1]
         { []
         }
     {offset
       c1pX6: // global
           _s1jlU::P64 = P64[Sp + 24];
           _s1jlV::P64 = P64[Sp + 32];
           if (R1 == 1) goto c1q1h; else goto c1q1a;
       c1q1h: // global
           Hp = Hp + 24;
           _s1jm4::I64 = R1;
           if (Hp > HpLim) (likely: False) goto c1q1k; else goto c1q1j;
       c1q1j: // global
           I64[Hp - 16] = sat_s1jme_info;
           P64[Hp] = _s1jlV::P64;
           I64[Sp] = block_c1pY9_info;
           R2 = _s1jlU::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 16;
           Sp = Sp - 16;
           call GHC.Real.toInteger_entry(R2) args: 24, res: 8, upd: 8;
       c1q1a: // global
           Hp = Hp + 24;
           _s1jm4::I64 = R1;
           if (Hp > HpLim) (likely: False) goto c1q1k; else goto c1q1c;
       c1q1k: // global
           HpAlloc = 24;
           R1 = _s1jm4::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c1q1c: // global
           I64[Hp - 16] = sat_s1jm6_info;
           P64[Hp] = _s1jlV::P64;
           I64[Sp] = block_c1pXh_info;
           R2 = _s1jlU::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 16;
           Sp = Sp - 16;
           call GHC.Real.toInteger_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pX6_info" {
     block_c1pX6_info:
         const _c1pX6;
         const 5;
         const 4294967326;
         const S1jKw_srt+752;
 },
 _c1pY9() //  [R1]
         { []
         }
     {offset
       c1pY9: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1q1n; else goto c1q1m;
       c1q1n: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1q1m: // global
           I64[Hp - 24] = go_s1jmf_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = R1;
           R2 = P64[Sp + 16];
           R1 = Hp - 23;
           Sp = Sp + 48;
           call go_s1jmf_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pY9_info" {
     block_c1pY9_info:
         const _c1pY9;
         const 773;
         const 4294967326;
         const S1jKw_srt+752;
 },
 _c1pXh() //  [R1]
         { []
         }
     {offset
       c1pXh: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1q1g; else goto c1q1f;
       c1q1g: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1q1f: // global
           I64[Hp - 24] = go_s1jm7_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = R1;
           R2 = P64[Sp + 16];
           R1 = Hp - 23;
           Sp = Sp + 48;
           call go_s1jm7_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1pXh_info" {
     block_c1pXh_info:
         const _c1pXh;
         const 773;
         const 4294967326;
         const S1jKw_srt+752;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.03365069 UTC

[section ""data" . GHC.Real.integralEnumFromTo_closure" {
     GHC.Real.integralEnumFromTo_closure:
         const GHC.Real.integralEnumFromTo_info;
         const 0;
 },
 f_s1jmI_entry() //  [R1]
         { []
         }
     {offset
       c1q5f: // global
           R2 = P64[R1 + 16];
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . f_s1jmI_info" {
     f_s1jmI_info:
         const f_s1jmI_entry;
         const 1;
         const 16;
 },
 f1_s1jmJ_entry() //  [R1]
         { []
         }
     {offset
       c1q5m: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1q5n; else goto c1q5o;
       c1q5n: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1q5o: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f1_s1jmJ_info" {
     f1_s1jmJ_info:
         const f1_s1jmJ_entry;
         const 1;
         const 16;
 },
 sat_s1jmQ_entry() //  [R1]
         { []
         }
     {offset
       c1q5I: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1q5J; else goto c1q5K;
       c1q5J: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1q5K: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c1q5G_info;
           R3 = GHC.Real.$fEnumRatio1_closure;
           R2 = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jmQ_info" {
     sat_s1jmQ_info:
         const sat_s1jmQ_entry;
         const 2;
         const 144115192370823186;
         const S1jKw_srt+552;
 },
 _c1q5G() //  [R1]
         { []
         }
     {offset
       c1q5G: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_s1jmL_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1q5G_info" {
     block_c1q5G_info:
         const _c1q5G;
         const 1;
         const 144115192370823198;
         const S1jKw_srt+552;
 },
 sat_s1jmO_entry() //  [R1]
         { []
         }
     {offset
       c1q5S: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1q5T; else goto c1q5U;
       c1q5T: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1q5U: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jmO_info" {
     sat_s1jmO_info:
         const sat_s1jmO_entry;
         const 2;
         const 18;
 },
 go_s1jmL_entry() //  [R1, R2]
         { []
         }
     {offset
       c1q5Y: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1q5Z; else goto c1q60;
       c1q5Z: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1q60: // global
           I64[Sp - 32] = block_c1q5y_info;
           R3 = P64[R1 + 15];
           _s1jmM::P64 = R2;
           R2 = R2;
           P64[Sp - 24] = P64[R1 + 7];
           P64[Sp - 16] = R1;
           P64[Sp - 8] = _s1jmM::P64;
           Sp = Sp - 32;
           call GHC.Integer.Type.gtInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s1jmL_info" {
     go_s1jmL_info:
         const go_s1jmL_entry;
         const 2;
         const 144115192370823179;
         const 4294967301;
         const S1jKw_srt+552;
 },
 _c1q5y() //  [R1]
         { []
         }
     {offset
       c1q5y: // global
           if (R1 == 1) goto c1q5X; else goto c1q5W;
       c1q5X: // global
           R1 = []_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1q5W: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c1q64; else goto c1q63;
       c1q64: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c1q63: // global
           I64[Hp - 80] = sat_s1jmQ_info;
           P64[Hp - 64] = P64[Sp + 16];
           _s1jmM::P64 = P64[Sp + 24];
           P64[Hp - 56] = _s1jmM::P64;
           I64[Hp - 48] = sat_s1jmO_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = _s1jmM::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1q5y_info" {
     block_c1q5y_info:
         const _c1q5y;
         const 3;
         const 144115192370823198;
         const S1jKw_srt+552;
 },
 GHC.Real.integralEnumFromTo_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1q68: // global
           _s1jmH::P64 = R4;
           _s1jmG::P64 = R3;
           _s1jmF::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto c1q6a; else goto c1q6b;
       c1q6b: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c1q6d; else goto c1q6c;
       c1q6d: // global
           HpAlloc = 48;
           goto c1q6a;
       c1q6a: // global
           R4 = _s1jmH::P64;
           R3 = _s1jmG::P64;
           R2 = _s1jmF::P64;
           R1 = GHC.Real.integralEnumFromTo_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1q6c: // global
           I64[Hp - 40] = f_s1jmI_info;
           P64[Hp - 24] = _s1jmF::P64;
           I64[Hp - 16] = f1_s1jmJ_info;
           P64[Hp] = Hp - 40;
           I64[Sp - 32] = block_c1q5p_info;
           R2 = _s1jmF::P64;
           I64[Sp - 48] = stg_ap_p_info;
           P64[Sp - 40] = _s1jmH::P64;
           P64[Sp - 24] = Hp - 16;
           P64[Sp - 16] = _s1jmF::P64;
           P64[Sp - 8] = _s1jmG::P64;
           Sp = Sp - 48;
           call GHC.Real.toInteger_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.integralEnumFromTo_info" {
     GHC.Real.integralEnumFromTo_info:
         const GHC.Real.integralEnumFromTo_entry;
         const 0;
         const 720575944674246670;
         const 12884901911;
         const S1jKw_srt+552;
 },
 _c1q5p() //  [R1]
         { []
         }
     {offset
       c1q5p: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1q6g; else goto c1q6f;
       c1q6g: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1q6f: // global
           I64[Hp - 16] = go_s1jmL_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           _s1jmF::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c1q69_info;
           R2 = _s1jmF::P64;
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = P64[Sp + 24];
           P64[Sp + 24] = Hp - 15;
           call GHC.Real.toInteger_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1q5p_info" {
     block_c1q5p_info:
         const _c1q5p;
         const 3;
         const 144115192370823198;
         const S1jKw_srt+552;
 },
 _c1q69() //  [R1]
         { []
         }
     {offset
       c1q69: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_s1jmL_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1q69_info" {
     block_c1q69_info:
         const _c1q69;
         const 1;
         const 144115192370823198;
         const S1jKw_srt+552;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.060335113 UTC

[section ""data" . GHC.Real.integralEnumFromThenTo_closure" {
     GHC.Real.integralEnumFromThenTo_closure:
         const GHC.Real.integralEnumFromThenTo_info;
         const 0;
 },
 f_s1jmZ_entry() //  [R1]
         { []
         }
     {offset
       c1q7t: // global
           R2 = P64[R1 + 16];
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . f_s1jmZ_info" {
     f_s1jmZ_info:
         const f_s1jmZ_entry;
         const 1;
         const 16;
 },
 f1_s1jn0_entry() //  [R1]
         { []
         }
     {offset
       c1q7A: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1q7B; else goto c1q7C;
       c1q7B: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1q7C: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f1_s1jn0_info" {
     f1_s1jn0_info:
         const f1_s1jn0_entry;
         const 1;
         const 16;
 },
 sat_s1jn8_entry() //  [R1]
         { []
         }
     {offset
       c1q80: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1q81; else goto c1q82;
       c1q81: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1q82: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c1q7Y_info;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jn8_info" {
     sat_s1jn8_info:
         const sat_s1jn8_entry;
         const 3;
         const 4294967311;
         const S1jKw_srt+752;
 },
 _c1q7Y() //  [R1]
         { []
         }
     {offset
       c1q7Y: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_s1jn3_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1q7Y_info" {
     block_c1q7Y_info:
         const _c1q7Y;
         const 1;
         const 4294967326;
         const S1jKw_srt+752;
 },
 sat_s1jn6_entry() //  [R1]
         { []
         }
     {offset
       c1q8a: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1q8b; else goto c1q8c;
       c1q8b: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1q8c: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jn6_info" {
     sat_s1jn6_info:
         const sat_s1jn6_entry;
         const 2;
         const 18;
 },
 go_s1jn3_entry() //  [R1, R2]
         { []
         }
     {offset
       c1q8g: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1q8h; else goto c1q8i;
       c1q8h: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1q8i: // global
           I64[Sp - 40] = block_c1q7Q_info;
           R3 = P64[R1 + 23];
           _s1jn4::P64 = R2;
           R2 = R2;
           P64[Sp - 32] = P64[R1 + 7];
           P64[Sp - 24] = P64[R1 + 15];
           P64[Sp - 16] = R1;
           P64[Sp - 8] = _s1jn4::P64;
           Sp = Sp - 40;
           call GHC.Integer.Type.ltInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s1jn3_info" {
     go_s1jn3_info:
         const go_s1jn3_entry;
         const 3;
         const 4294967304;
         const 4294967301;
         const S1jKw_srt+752;
 },
 _c1q7Q() //  [R1]
         { []
         }
     {offset
       c1q7Q: // global
           if (R1 == 1) goto c1q8f; else goto c1q8e;
       c1q8f: // global
           R1 = []_closure+1;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1q8e: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c1q8m; else goto c1q8l;
       c1q8m: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c1q8l: // global
           I64[Hp - 88] = sat_s1jn8_info;
           P64[Hp - 72] = P64[Sp + 8];
           P64[Hp - 64] = P64[Sp + 24];
           _s1jn4::P64 = P64[Sp + 32];
           P64[Hp - 56] = _s1jn4::P64;
           I64[Hp - 48] = sat_s1jn6_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = _s1jn4::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 88;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1q7Q_info" {
     block_c1q7Q_info:
         const _c1q7Q;
         const 4;
         const 4294967326;
         const S1jKw_srt+752;
 },
 sat_s1jnf_entry() //  [R1]
         { []
         }
     {offset
       c1q8L: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1q8M; else goto c1q8N;
       c1q8M: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1q8N: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c1q8J_info;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jnf_info" {
     sat_s1jnf_info:
         const sat_s1jnf_entry;
         const 3;
         const 4294967311;
         const S1jKw_srt+752;
 },
 _c1q8J() //  [R1]
         { []
         }
     {offset
       c1q8J: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_s1jna_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1q8J_info" {
     block_c1q8J_info:
         const _c1q8J;
         const 1;
         const 4294967326;
         const S1jKw_srt+752;
 },
 sat_s1jnd_entry() //  [R1]
         { []
         }
     {offset
       c1q8V: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1q8W; else goto c1q8X;
       c1q8W: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1q8X: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jnd_info" {
     sat_s1jnd_info:
         const sat_s1jnd_entry;
         const 2;
         const 18;
 },
 go_s1jna_entry() //  [R1, R2]
         { []
         }
     {offset
       c1q91: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1q92; else goto c1q93;
       c1q92: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1q93: // global
           I64[Sp - 40] = block_c1q8B_info;
           R3 = P64[R1 + 23];
           _s1jnb::P64 = R2;
           R2 = R2;
           P64[Sp - 32] = P64[R1 + 7];
           P64[Sp - 24] = P64[R1 + 15];
           P64[Sp - 16] = R1;
           P64[Sp - 8] = _s1jnb::P64;
           Sp = Sp - 40;
           call GHC.Integer.Type.gtInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s1jna_info" {
     go_s1jna_info:
         const go_s1jna_entry;
         const 3;
         const 4294967304;
         const 4294967301;
         const S1jKw_srt+752;
 },
 _c1q8B() //  [R1]
         { []
         }
     {offset
       c1q8B: // global
           if (R1 == 1) goto c1q90; else goto c1q8Z;
       c1q90: // global
           R1 = []_closure+1;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1q8Z: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c1q97; else goto c1q96;
       c1q97: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c1q96: // global
           I64[Hp - 88] = sat_s1jnf_info;
           P64[Hp - 72] = P64[Sp + 8];
           P64[Hp - 64] = P64[Sp + 24];
           _s1jnb::P64 = P64[Sp + 32];
           P64[Hp - 56] = _s1jnb::P64;
           I64[Hp - 48] = sat_s1jnd_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = _s1jnb::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 88;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1q8B_info" {
     block_c1q8B_info:
         const _c1q8B;
         const 4;
         const 4294967326;
         const S1jKw_srt+752;
 },
 section ""relreadonly" . u1q9u_srtd" {
     u1q9u_srtd:
         const S1jKw_srt+456;
         const 41;
         const 1237219016705;
 },
 GHC.Real.integralEnumFromThenTo_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c1q9b: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c1q9c; else goto c1q9d;
       c1q9c: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.integralEnumFromThenTo_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1q9d: // global
           I64[Sp - 32] = block_c1q7d_info;
           _s1jmS::P64 = R2;
           R2 = R2;
           I64[Sp - 48] = stg_ap_p_info;
           P64[Sp - 40] = R3;
           P64[Sp - 24] = _s1jmS::P64;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 48;
           call GHC.Real.toInteger_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.integralEnumFromThenTo_info" {
     GHC.Real.integralEnumFromThenTo_info:
         const GHC.Real.integralEnumFromThenTo_entry;
         const 0;
         const 18446744069414584334;
         const 17179869208;
         const u1q9u_srtd;
 },
 section ""relreadonly" . u1q9v_srtd" {
     u1q9v_srtd:
         const S1jKw_srt+456;
         const 38;
         const 137707388929;
 },
 _c1q7d() //  [R1]
         { []
         }
     {offset
       c1q7d: // global
           I64[Sp] = block_c1q7h_info;
           R2 = P64[Sp + 8];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 16];
           P64[Sp + 16] = R1;
           Sp = Sp - 16;
           call GHC.Real.toInteger_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1q7d_info" {
     block_c1q7d_info:
         const _c1q7d;
         const 3;
         const 18446744069414584350;
         const u1q9v_srtd;
 },
 section ""relreadonly" . u1q9w_srtd" {
     u1q9w_srtd:
         const S1jKw_srt+456;
         const 38;
         const 137707388929;
 },
 _c1q7h() //  [R1]
         { []
         }
     {offset
       c1q7h: // global
           I64[Sp] = block_c1q7l_info;
           R3 = P64[Sp + 16];
           R2 = R1;
           call GHC.Integer.Type.minusInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1q7h_info" {
     block_c1q7h_info:
         const _c1q7h;
         const 3;
         const 18446744069414584350;
         const u1q9w_srtd;
 },
 _c1q7l() //  [R1]
         { []
         }
     {offset
       c1q7l: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c1q9i; else goto c1q9h;
       c1q9i: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1q9h: // global
           I64[Hp - 40] = f_s1jmZ_info;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = f1_s1jn0_info;
           P64[Hp] = Hp - 40;
           I64[Sp - 16] = block_c1q7D_info;
           R3 = GHC.Real.even1_closure;
           R2 = R1;
           P64[Sp - 8] = R1;
           P64[Sp] = Hp - 16;
           Sp = Sp - 16;
           call GHC.Integer.Type.geInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1q7l_info" {
     block_c1q7l_info:
         const _c1q7l;
         const 3;
         const 2203318222878;
         const S1jKw_srt+680;
 },
 _c1q7D() //  [R1]
         { []
         }
     {offset
       c1q7D: // global
           _s1jmS::P64 = P64[Sp + 24];
           _s1jmV::P64 = P64[Sp + 40];
           if (R1 == 1) goto c1q9q; else goto c1q9l;
       c1q9q: // global
           I64[Sp] = block_c1q8s_info;
           R2 = _s1jmS::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _s1jmV::P64;
           Sp = Sp - 16;
           call GHC.Real.toInteger_entry(R2) args: 24, res: 8, upd: 8;
       c1q9l: // global
           I64[Sp] = block_c1q7H_info;
           R2 = _s1jmS::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _s1jmV::P64;
           Sp = Sp - 16;
           call GHC.Real.toInteger_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1q7D_info" {
     block_c1q7D_info:
         const _c1q7D;
         const 5;
         const 4294967326;
         const S1jKw_srt+752;
 },
 _c1q8s() //  [R1]
         { []
         }
     {offset
       c1q8s: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1q9t; else goto c1q9s;
       c1q9t: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1q9s: // global
           I64[Hp - 24] = go_s1jna_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = R1;
           R2 = P64[Sp + 32];
           R1 = Hp - 23;
           Sp = Sp + 48;
           call go_s1jna_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1q8s_info" {
     block_c1q8s_info:
         const _c1q8s;
         const 1285;
         const 4294967326;
         const S1jKw_srt+752;
 },
 _c1q7H() //  [R1]
         { []
         }
     {offset
       c1q7H: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1q9o; else goto c1q9n;
       c1q9o: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1q9n: // global
           I64[Hp - 24] = go_s1jn3_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = R1;
           R2 = P64[Sp + 32];
           R1 = Hp - 23;
           Sp = Sp + 48;
           call go_s1jn3_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1q7H_info" {
     block_c1q7H_info:
         const _c1q7H;
         const 1285;
         const 4294967326;
         const S1jKw_srt+752;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.095335013 UTC

[section ""cstring" . GHC.Real.$trModule4_bytes" {
     GHC.Real.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.096943781 UTC

[section ""data" . GHC.Real.$trModule3_closure" {
     GHC.Real.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Real.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.09859736 UTC

[section ""cstring" . GHC.Real.$trModule2_bytes" {
     GHC.Real.$trModule2_bytes:
         I8[] [71,72,67,46,82,101,97,108]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.100223712 UTC

[section ""data" . GHC.Real.$trModule1_closure" {
     GHC.Real.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Real.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.102540267 UTC

[section ""data" . GHC.Real.$trModule_closure" {
     GHC.Real.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Real.$trModule3_closure+1;
         const GHC.Real.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.104924604 UTC

[section ""data" . $krep_r1j3d_closure" {
     $krep_r1j3d_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Integer.Type.$tcInteger_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.106666325 UTC

[section ""data" . $krep1_r1j3e_closure" {
     $krep1_r1j3e_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcConstraint_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.108308611 UTC

[section ""data" . GHC.Real.$tcFractional1_closure" {
     GHC.Real.$tcFractional1_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Types.krep$*_closure;
         const $krep1_r1j3e_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.110103233 UTC

[section ""data" . $krep2_r1j3f_closure" {
     $krep2_r1j3f_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.111774986 UTC

[section ""data" . $krep3_r1j3g_closure" {
     $krep3_r1j3g_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r1j3f_closure+2;
         const $krep2_r1j3f_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.113519344 UTC

[section ""data" . $krep4_r1j3h_closure" {
     $krep4_r1j3h_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r1j3f_closure+2;
         const $krep3_r1j3g_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.115256042 UTC

[section ""data" . $krep5_r1j3i_closure" {
     $krep5_r1j3i_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r1j3f_closure+2;
         const $krep_r1j3d_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.116956899 UTC

[section ""data" . $krep6_r1j3j_closure" {
     $krep6_r1j3j_closure:
         const :_con_info;
         const $krep2_r1j3f_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.118803858 UTC

[section ""data" . $krep7_r1j3k_closure" {
     $krep7_r1j3k_closure:
         const :_con_info;
         const $krep2_r1j3f_closure+2;
         const $krep6_r1j3j_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.120514789 UTC

[section ""data" . $krep8_r1j3l_closure" {
     $krep8_r1j3l_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc(,)_closure;
         const $krep7_r1j3k_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.123970893 UTC

[section ""data" . $krep9_r1j3m_closure" {
     $krep9_r1j3m_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r1j3f_closure+2;
         const $krep8_r1j3l_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.125662099 UTC

[section ""data" . $krep10_r1j3n_closure" {
     $krep10_r1j3n_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r1j3f_closure+2;
         const $krep9_r1j3m_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.127498634 UTC

[section ""data" . $krep11_r1j3o_closure" {
     $krep11_r1j3o_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Num.$tcNum_closure;
         const $krep6_r1j3j_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.129789334 UTC

[section ""data" . $krep12_r1j3p_closure" {
     $krep12_r1j3p_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Enum.$tcEnum_closure;
         const $krep6_r1j3j_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.131566424 UTC

[section ""data" . $krep13_r1j3q_closure" {
     $krep13_r1j3q_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Classes.$tcOrd_closure;
         const $krep6_r1j3j_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.133196037 UTC

[section ""cstring" . GHC.Real.$tcRatio2_bytes" {
     GHC.Real.$tcRatio2_bytes:
         I8[] [82,97,116,105,111]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.135115133 UTC

[section ""data" . GHC.Real.$tcRatio1_closure" {
     GHC.Real.$tcRatio1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Real.$tcRatio2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.136847221 UTC

[section ""data" . GHC.Real.$tcRatio_closure" {
     GHC.Real.$tcRatio_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Real.$trModule_closure+1;
         const GHC.Real.$tcRatio1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 17658523810845794968;
         const 1271393732863050253;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.138640049 UTC

[section ""data" . $krep14_r1j3r_closure" {
     $krep14_r1j3r_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Real.$tcRatio_closure+1;
         const $krep6_r1j3j_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.140368217 UTC

[section ""data" . $krep15_r1j3s_closure" {
     $krep15_r1j3s_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r1j3f_closure+2;
         const $krep14_r1j3r_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.142073383 UTC

[section ""data" . GHC.Real.$tc':%1_closure" {
     GHC.Real.$tc':%1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r1j3f_closure+2;
         const $krep15_r1j3s_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.143710367 UTC

[section ""cstring" . GHC.Real.$tc':%3_bytes" {
     GHC.Real.$tc':%3_bytes:
         I8[] [39,58,37]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.145400396 UTC

[section ""data" . GHC.Real.$tc':%2_closure" {
     GHC.Real.$tc':%2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Real.$tc':%3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.147178314 UTC

[section ""data" . GHC.Real.$tc':%_closure" {
     GHC.Real.$tc':%_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Real.$trModule_closure+1;
         const GHC.Real.$tc':%2_closure+1;
         const GHC.Real.$tc':%1_closure+4;
         const 11952989868638128372;
         const 6861245286732044789;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.148976497 UTC

[section ""data" . $krep16_r1j3t_closure" {
     $krep16_r1j3t_closure:
         const :_con_info;
         const $krep_r1j3d_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.151498321 UTC

[section ""data" . $krep17_r1j3u_closure" {
     $krep17_r1j3u_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Real.$tcRatio_closure+1;
         const $krep16_r1j3t_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.153305743 UTC

[section ""data" . $krep18_r1j3v_closure" {
     $krep18_r1j3v_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r1j3f_closure+2;
         const $krep17_r1j3u_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.155603363 UTC

[section ""data" . $krep19_r1j3w_closure" {
     $krep19_r1j3w_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep17_r1j3u_closure+1;
         const $krep2_r1j3f_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.157300364 UTC

[section ""cstring" . GHC.Real.$tcReal2_bytes" {
     GHC.Real.$tcReal2_bytes:
         I8[] [82,101,97,108]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.158906506 UTC

[section ""data" . GHC.Real.$tcReal1_closure" {
     GHC.Real.$tcReal1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Real.$tcReal2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.16052431 UTC

[section ""data" . GHC.Real.$tcReal_closure" {
     GHC.Real.$tcReal_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Real.$trModule_closure+1;
         const GHC.Real.$tcReal1_closure+1;
         const GHC.Real.$tcFractional1_closure+4;
         const 1826502536394630182;
         const 14487785779892251413;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.16233335 UTC

[section ""data" . $krep20_r1j3x_closure" {
     $krep20_r1j3x_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Real.$tcReal_closure+1;
         const $krep6_r1j3j_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.164015602 UTC

[section ""data" . $krep21_r1j3y_closure" {
     $krep21_r1j3y_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep18_r1j3v_closure+4;
         const $krep20_r1j3x_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.16579523 UTC

[section ""data" . $krep22_r1j3z_closure" {
     $krep22_r1j3z_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep13_r1j3q_closure+1;
         const $krep21_r1j3y_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.167418866 UTC

[section ""data" . GHC.Real.$tc'C:Real1_closure" {
     GHC.Real.$tc'C:Real1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep11_r1j3o_closure+1;
         const $krep22_r1j3z_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.169115351 UTC

[section ""cstring" . GHC.Real.$tc'C:Real3_bytes" {
     GHC.Real.$tc'C:Real3_bytes:
         I8[] [39,67,58,82,101,97,108]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.170819806 UTC

[section ""data" . GHC.Real.$tc'C:Real2_closure" {
     GHC.Real.$tc'C:Real2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Real.$tc'C:Real3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.17251343 UTC

[section ""data" . GHC.Real.$tc'C:Real_closure" {
     GHC.Real.$tc'C:Real_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Real.$trModule_closure+1;
         const GHC.Real.$tc'C:Real2_closure+1;
         const GHC.Real.$tc'C:Real1_closure+4;
         const 5938283050841830427;
         const 8926187074226767634;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.174332725 UTC

[section ""cstring" . GHC.Real.$tcIntegral2_bytes" {
     GHC.Real.$tcIntegral2_bytes:
         I8[] [73,110,116,101,103,114,97,108]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.175932251 UTC

[section ""data" . GHC.Real.$tcIntegral1_closure" {
     GHC.Real.$tcIntegral1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Real.$tcIntegral2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.17830576 UTC

[section ""data" . GHC.Real.$tcIntegral_closure" {
     GHC.Real.$tcIntegral_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Real.$trModule_closure+1;
         const GHC.Real.$tcIntegral1_closure+1;
         const GHC.Real.$tcFractional1_closure+4;
         const 16601157811546713973;
         const 3304955164956033666;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.180006504 UTC

[section ""data" . $krep23_r1j3A_closure" {
     $krep23_r1j3A_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Real.$tcIntegral_closure+1;
         const $krep6_r1j3j_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.181702419 UTC

[section ""data" . $krep24_r1j3B_closure" {
     $krep24_r1j3B_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_r1j3i_closure+4;
         const $krep23_r1j3A_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.183398223 UTC

[section ""data" . $krep25_r1j3C_closure" {
     $krep25_r1j3C_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_r1j3n_closure+4;
         const $krep24_r1j3B_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.185133938 UTC

[section ""data" . $krep26_r1j3D_closure" {
     $krep26_r1j3D_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_r1j3n_closure+4;
         const $krep25_r1j3C_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.186859998 UTC

[section ""data" . $krep27_r1j3E_closure" {
     $krep27_r1j3E_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_r1j3h_closure+4;
         const $krep26_r1j3D_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.18848066 UTC

[section ""data" . $krep28_r1j3F_closure" {
     $krep28_r1j3F_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_r1j3h_closure+4;
         const $krep27_r1j3E_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.190193973 UTC

[section ""data" . $krep29_r1j3G_closure" {
     $krep29_r1j3G_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_r1j3h_closure+4;
         const $krep28_r1j3F_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.191850448 UTC

[section ""data" . $krep30_r1j3H_closure" {
     $krep30_r1j3H_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_r1j3h_closure+4;
         const $krep29_r1j3G_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.193888459 UTC

[section ""data" . $krep31_r1j3I_closure" {
     $krep31_r1j3I_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep12_r1j3p_closure+1;
         const $krep30_r1j3H_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.195542867 UTC

[section ""data" . GHC.Real.$tc'C:Integral1_closure" {
     GHC.Real.$tc'C:Integral1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep20_r1j3x_closure+1;
         const $krep31_r1j3I_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.197196476 UTC

[section ""cstring" . GHC.Real.$tc'C:Integral3_bytes" {
     GHC.Real.$tc'C:Integral3_bytes:
         I8[] [39,67,58,73,110,116,101,103,114,97,108]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.198860471 UTC

[section ""data" . GHC.Real.$tc'C:Integral2_closure" {
     GHC.Real.$tc'C:Integral2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Real.$tc'C:Integral3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.200569528 UTC

[section ""data" . GHC.Real.$tc'C:Integral_closure" {
     GHC.Real.$tc'C:Integral_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Real.$trModule_closure+1;
         const GHC.Real.$tc'C:Integral2_closure+1;
         const GHC.Real.$tc'C:Integral1_closure+4;
         const 12141017740256829283;
         const 17564033539811245778;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.203415963 UTC

[section ""cstring" . GHC.Real.$tcFractional3_bytes" {
     GHC.Real.$tcFractional3_bytes:
         I8[] [70,114,97,99,116,105,111,110,97,108]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.205004266 UTC

[section ""data" . GHC.Real.$tcFractional2_closure" {
     GHC.Real.$tcFractional2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Real.$tcFractional3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.20674054 UTC

[section ""data" . GHC.Real.$tcFractional_closure" {
     GHC.Real.$tcFractional_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Real.$trModule_closure+1;
         const GHC.Real.$tcFractional2_closure+1;
         const GHC.Real.$tcFractional1_closure+4;
         const 14968870971062750857;
         const 13774835939651899219;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.208452797 UTC

[section ""data" . $krep32_r1j3J_closure" {
     $krep32_r1j3J_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Real.$tcFractional_closure+1;
         const $krep6_r1j3j_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.210202244 UTC

[section ""data" . $krep33_r1j3K_closure" {
     $krep33_r1j3K_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep19_r1j3w_closure+4;
         const $krep32_r1j3J_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.211887219 UTC

[section ""data" . $krep34_r1j3L_closure" {
     $krep34_r1j3L_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r1j3g_closure+4;
         const $krep33_r1j3K_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.213619977 UTC

[section ""data" . $krep35_r1j3M_closure" {
     $krep35_r1j3M_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_r1j3h_closure+4;
         const $krep34_r1j3L_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.215292864 UTC

[section ""data" . GHC.Real.$tc'C:Fractional1_closure" {
     GHC.Real.$tc'C:Fractional1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep11_r1j3o_closure+1;
         const $krep35_r1j3M_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.216972658 UTC

[section ""cstring" . GHC.Real.$tc'C:Fractional3_bytes" {
     GHC.Real.$tc'C:Fractional3_bytes:
         I8[] [39,67,58,70,114,97,99,116,105,111,110,97,108]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.218650163 UTC

[section ""data" . GHC.Real.$tc'C:Fractional2_closure" {
     GHC.Real.$tc'C:Fractional2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Real.$tc'C:Fractional3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.220409766 UTC

[section ""data" . GHC.Real.$tc'C:Fractional_closure" {
     GHC.Real.$tc'C:Fractional_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Real.$trModule_closure+1;
         const GHC.Real.$tc'C:Fractional2_closure+1;
         const GHC.Real.$tc'C:Fractional1_closure+4;
         const 15706435530565718930;
         const 11021884564355505453;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.222210479 UTC

[section ""cstring" . GHC.Real.$tcRealFrac2_bytes" {
     GHC.Real.$tcRealFrac2_bytes:
         I8[] [82,101,97,108,70,114,97,99]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.223834127 UTC

[section ""data" . GHC.Real.$tcRealFrac1_closure" {
     GHC.Real.$tcRealFrac1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Real.$tcRealFrac2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.227360069 UTC

[section ""data" . GHC.Real.$tcRealFrac_closure" {
     GHC.Real.$tcRealFrac_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Real.$trModule_closure+1;
         const GHC.Real.$tcRealFrac1_closure+1;
         const GHC.Real.$tcFractional1_closure+4;
         const 2318913099678420819;
         const 6373121509494083706;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.23165034 UTC

[section ""data" . GHC.Real.$w$c<_closure" {
     GHC.Real.$w$c<_closure:
         const GHC.Real.$w$c<_info;
 },
 $dNum_s1jnm_entry() //  [R1]
         { []
         }
     {offset
       c1qcv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1qcw; else goto c1qcx;
       c1qcw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1qcx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dNum_s1jnm_info" {
     $dNum_s1jnm_info:
         const $dNum_s1jnm_entry;
         const 1;
         const 16;
 },
 sat_s1jnp_entry() //  [R1]
         { []
         }
     {offset
       c1qcC: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1qcD; else goto c1qcE;
       c1qcD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1qcE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 32];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jnp_info" {
     sat_s1jnp_info:
         const sat_s1jnp_entry;
         const 3;
         const 15;
 },
 sat_s1jno_entry() //  [R1]
         { []
         }
     {offset
       c1qcJ: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1qcK; else goto c1qcL;
       c1qcK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1qcL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 32];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jno_info" {
     sat_s1jno_info:
         const sat_s1jno_entry;
         const 3;
         const 15;
 },
 GHC.Real.$w$c<_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c1qcM: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1qcO; else goto c1qcP;
       c1qcO: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$w$c<_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1qcP: // global
           I64[Sp - 40] = block_c1qcn_info;
           R2 = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$w$c<_info" {
     GHC.Real.$w$c<_info:
         const GHC.Real.$w$c<_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _c1qcn() //  [R1]
         { []
         }
     {offset
       c1qcn: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c1qcS; else goto c1qcR;
       c1qcS: // global
           HpAlloc = 104;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1qcR: // global
           I64[Hp - 96] = $dNum_s1jnm_info;
           P64[Hp - 80] = R1;
           I64[Hp - 72] = sat_s1jnp_info;
           P64[Hp - 56] = P64[Sp + 16];
           P64[Hp - 48] = P64[Sp + 24];
           _c1qcr::P64 = Hp - 96;
           P64[Hp - 40] = _c1qcr::P64;
           I64[Hp - 32] = sat_s1jno_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = _c1qcr::P64;
           I64[Sp + 16] = block_c1qcN_info;
           R2 = R1;
           P64[Sp + 24] = Hp - 32;
           P64[Sp + 32] = Hp - 72;
           Sp = Sp + 16;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qcn_info" {
     block_c1qcn_info:
         const _c1qcn;
         const 4;
         const 30;
 },
 _c1qcN() //  [R1]
         { []
         }
     {offset
       c1qcN: // global
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           call GHC.Classes.<_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qcN_info" {
     block_c1qcN_info:
         const _c1qcN;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.244151795 UTC

[section ""data" . GHC.Real.$fOrdRatio_$c<_closure" {
     GHC.Real.$fOrdRatio_$c<_closure:
         const GHC.Real.$fOrdRatio_$c<_info;
 },
 GHC.Real.$fOrdRatio_$c<_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1qdB: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1qdF; else goto c1qdG;
       c1qdF: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fOrdRatio_$c<_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1qdG: // global
           I64[Sp - 24] = block_c1qdy_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u1qdO; else goto c1qdz;
       u1qdO: // global
           call _c1qdy(R1) args: 0, res: 0, upd: 0;
       c1qdz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fOrdRatio_$c<_info" {
     GHC.Real.$fOrdRatio_$c<_info:
         const GHC.Real.$fOrdRatio_$c<_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c1qdy() //  [R1]
         { []
         }
     {offset
       c1qdy: // global
           I64[Sp - 8] = block_c1qdE_info;
           _s1jnu::P64 = P64[R1 + 7];
           _s1jnv::P64 = P64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp] = _s1jnv::P64;
           P64[Sp + 16] = _s1jnu::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1qdN; else goto c1qdI;
       u1qdN: // global
           call _c1qdE(R1) args: 0, res: 0, upd: 0;
       c1qdI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qdy_info" {
     block_c1qdy_info:
         const _c1qdy;
         const 2;
         const 30;
 },
 _c1qdE() //  [R1]
         { []
         }
     {offset
       c1qdE: // global
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = P64[Sp + 8];
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 16];
           Sp = Sp + 32;
           call GHC.Real.$w$c<_entry(R6,
                                     R5,
                                     R4,
                                     R3,
                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qdE_info" {
     block_c1qdE_info:
         const _c1qdE;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.253174941 UTC

[section ""data" . GHC.Real.$w$c<=_closure" {
     GHC.Real.$w$c<=_closure:
         const GHC.Real.$w$c<=_info;
 },
 $dNum_s1jnF_entry() //  [R1]
         { []
         }
     {offset
       c1qee: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1qef; else goto c1qeg;
       c1qef: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1qeg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dNum_s1jnF_info" {
     $dNum_s1jnF_info:
         const $dNum_s1jnF_entry;
         const 1;
         const 16;
 },
 sat_s1jnI_entry() //  [R1]
         { []
         }
     {offset
       c1qel: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1qem; else goto c1qen;
       c1qem: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1qen: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 32];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jnI_info" {
     sat_s1jnI_info:
         const sat_s1jnI_entry;
         const 3;
         const 15;
 },
 sat_s1jnH_entry() //  [R1]
         { []
         }
     {offset
       c1qes: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1qet; else goto c1qeu;
       c1qet: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1qeu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 32];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jnH_info" {
     sat_s1jnH_info:
         const sat_s1jnH_entry;
         const 3;
         const 15;
 },
 GHC.Real.$w$c<=_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c1qev: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1qex; else goto c1qey;
       c1qex: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$w$c<=_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1qey: // global
           I64[Sp - 40] = block_c1qe6_info;
           R2 = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$w$c<=_info" {
     GHC.Real.$w$c<=_info:
         const GHC.Real.$w$c<=_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _c1qe6() //  [R1]
         { []
         }
     {offset
       c1qe6: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c1qeB; else goto c1qeA;
       c1qeB: // global
           HpAlloc = 104;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1qeA: // global
           I64[Hp - 96] = $dNum_s1jnF_info;
           P64[Hp - 80] = R1;
           I64[Hp - 72] = sat_s1jnI_info;
           P64[Hp - 56] = P64[Sp + 16];
           P64[Hp - 48] = P64[Sp + 24];
           _c1qea::P64 = Hp - 96;
           P64[Hp - 40] = _c1qea::P64;
           I64[Hp - 32] = sat_s1jnH_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = _c1qea::P64;
           I64[Sp + 16] = block_c1qew_info;
           R2 = R1;
           P64[Sp + 24] = Hp - 32;
           P64[Sp + 32] = Hp - 72;
           Sp = Sp + 16;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qe6_info" {
     block_c1qe6_info:
         const _c1qe6;
         const 4;
         const 30;
 },
 _c1qew() //  [R1]
         { []
         }
     {offset
       c1qew: // global
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           call GHC.Classes.<=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qew_info" {
     block_c1qew_info:
         const _c1qew;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.267011363 UTC

[section ""data" . GHC.Real.$fOrdRatio_$c<=_closure" {
     GHC.Real.$fOrdRatio_$c<=_closure:
         const GHC.Real.$fOrdRatio_$c<=_info;
 },
 GHC.Real.$fOrdRatio_$c<=_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1qfk: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1qfo; else goto c1qfp;
       c1qfo: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fOrdRatio_$c<=_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1qfp: // global
           I64[Sp - 24] = block_c1qfh_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u1qfx; else goto c1qfi;
       u1qfx: // global
           call _c1qfh(R1) args: 0, res: 0, upd: 0;
       c1qfi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fOrdRatio_$c<=_info" {
     GHC.Real.$fOrdRatio_$c<=_info:
         const GHC.Real.$fOrdRatio_$c<=_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c1qfh() //  [R1]
         { []
         }
     {offset
       c1qfh: // global
           I64[Sp - 8] = block_c1qfn_info;
           _s1jnN::P64 = P64[R1 + 7];
           _s1jnO::P64 = P64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp] = _s1jnO::P64;
           P64[Sp + 16] = _s1jnN::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1qfw; else goto c1qfr;
       u1qfw: // global
           call _c1qfn(R1) args: 0, res: 0, upd: 0;
       c1qfr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qfh_info" {
     block_c1qfh_info:
         const _c1qfh;
         const 2;
         const 30;
 },
 _c1qfn() //  [R1]
         { []
         }
     {offset
       c1qfn: // global
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = P64[Sp + 8];
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 16];
           Sp = Sp + 32;
           call GHC.Real.$w$c<=_entry(R6,
                                      R5,
                                      R4,
                                      R3,
                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qfn_info" {
     block_c1qfn_info:
         const _c1qfn;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.275203213 UTC

[section ""data" . GHC.Real.$fOrdRatio_$cmax_closure" {
     GHC.Real.$fOrdRatio_$cmax_closure:
         const GHC.Real.$fOrdRatio_$cmax_info;
 },
 GHC.Real.$fOrdRatio_$cmax_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1qfS: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1qfW; else goto c1qfX;
       c1qfW: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fOrdRatio_$cmax_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1qfX: // global
           I64[Sp - 24] = block_c1qfP_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u1qgh; else goto c1qfQ;
       u1qgh: // global
           call _c1qfP(R1) args: 0, res: 0, upd: 0;
       c1qfQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fOrdRatio_$cmax_info" {
     GHC.Real.$fOrdRatio_$cmax_info:
         const GHC.Real.$fOrdRatio_$cmax_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c1qfP() //  [R1]
         { []
         }
     {offset
       c1qfP: // global
           I64[Sp - 16] = block_c1qfV_info;
           _s1jnV::P64 = R1;
           _s1jnW::P64 = P64[R1 + 7];
           _s1jnX::P64 = P64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp - 8] = _s1jnX::P64;
           P64[Sp] = _s1jnW::P64;
           P64[Sp + 16] = _s1jnV::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1qgg; else goto c1qfZ;
       u1qgg: // global
           call _c1qfV(R1) args: 0, res: 0, upd: 0;
       c1qfZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qfP_info" {
     block_c1qfP_info:
         const _c1qfP;
         const 2;
         const 30;
 },
 _c1qfV() //  [R1]
         { []
         }
     {offset
       c1qfV: // global
           _s1jnW::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c1qg3_info;
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = P64[Sp + 8];
           R3 = _s1jnW::P64;
           R2 = P64[Sp + 24];
           P64[Sp + 24] = R1;
           Sp = Sp + 16;
           call GHC.Real.$w$c<=_entry(R6,
                                      R5,
                                      R4,
                                      R3,
                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qfV_info" {
     block_c1qfV_info:
         const _c1qfV;
         const 4;
         const 30;
 },
 _c1qg3() //  [R1]
         { []
         }
     {offset
       c1qg3: // global
           if (R1 & 7 == 1) goto c1qga; else goto c1qge;
       c1qga: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c1qge: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qg3_info" {
     block_c1qg3_info:
         const _c1qg3;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.285744767 UTC

[section ""data" . GHC.Real.$fOrdRatio_$cmin_closure" {
     GHC.Real.$fOrdRatio_$cmin_closure:
         const GHC.Real.$fOrdRatio_$cmin_info;
 },
 GHC.Real.$fOrdRatio_$cmin_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1qgL: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1qgP; else goto c1qgQ;
       c1qgP: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fOrdRatio_$cmin_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1qgQ: // global
           I64[Sp - 24] = block_c1qgI_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u1qha; else goto c1qgJ;
       u1qha: // global
           call _c1qgI(R1) args: 0, res: 0, upd: 0;
       c1qgJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fOrdRatio_$cmin_info" {
     GHC.Real.$fOrdRatio_$cmin_info:
         const GHC.Real.$fOrdRatio_$cmin_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c1qgI() //  [R1]
         { []
         }
     {offset
       c1qgI: // global
           I64[Sp - 16] = block_c1qgO_info;
           _s1jo5::P64 = R1;
           _s1jo6::P64 = P64[R1 + 7];
           _s1jo7::P64 = P64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp - 8] = _s1jo7::P64;
           P64[Sp] = _s1jo6::P64;
           P64[Sp + 16] = _s1jo5::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1qh9; else goto c1qgS;
       u1qh9: // global
           call _c1qgO(R1) args: 0, res: 0, upd: 0;
       c1qgS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qgI_info" {
     block_c1qgI_info:
         const _c1qgI;
         const 2;
         const 30;
 },
 _c1qgO() //  [R1]
         { []
         }
     {offset
       c1qgO: // global
           _s1jo6::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c1qgW_info;
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = P64[Sp + 8];
           R3 = _s1jo6::P64;
           R2 = P64[Sp + 24];
           P64[Sp + 24] = R1;
           Sp = Sp + 16;
           call GHC.Real.$w$c<=_entry(R6,
                                      R5,
                                      R4,
                                      R3,
                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qgO_info" {
     block_c1qgO_info:
         const _c1qgO;
         const 4;
         const 30;
 },
 _c1qgW() //  [R1]
         { []
         }
     {offset
       c1qgW: // global
           if (R1 & 7 == 1) goto c1qh3; else goto c1qh7;
       c1qh3: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c1qh7: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qgW_info" {
     block_c1qgW_info:
         const _c1qgW;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.296974738 UTC

[section ""data" . GHC.Real.$w$ccompare_closure" {
     GHC.Real.$w$ccompare_closure:
         const GHC.Real.$w$ccompare_info;
 },
 GHC.Real.$w$ccompare_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c1qhD: // global
           if ((Sp + -80) < SpLim) (likely: False) goto c1qhL; else goto c1qhM;
       c1qhL: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$w$ccompare_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1qhM: // global
           I64[Sp - 48] = block_c1qhB_info;
           _s1joc::P64 = R2;
           R2 = R2;
           P64[Sp - 40] = _s1joc::P64;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 48;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$w$ccompare_info" {
     GHC.Real.$w$ccompare_info:
         const GHC.Real.$w$ccompare_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _c1qhB() //  [R1]
         { []
         }
     {offset
       c1qhB: // global
           I64[Sp] = block_c1qhG_info;
           R2 = R1;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qhB_info" {
     block_c1qhB_info:
         const _c1qhB;
         const 5;
         const 30;
 },
 _c1qhG() //  [R1]
         { []
         }
     {offset
       c1qhG: // global
           I64[Sp] = block_c1qhK_info;
           R2 = R1;
           call GHC.Classes.$p1Ord_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qhG_info" {
     block_c1qhG_info:
         const _c1qhG;
         const 5;
         const 30;
 },
 _c1qhK() //  [R1]
         { []
         }
     {offset
       c1qhK: // global
           I64[Sp - 8] = block_c1qhS_info;
           R2 = R1;
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = P64[Sp + 16];
           P64[Sp - 16] = P64[Sp + 32];
           P64[Sp] = R1;
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qhK_info" {
     block_c1qhK_info:
         const _c1qhK;
         const 5;
         const 30;
 },
 _c1qhS() //  [R1]
         { []
         }
     {offset
       c1qhS: // global
           _s1joe::P64 = P64[Sp + 32];
           _s1jog::P64 = P64[Sp + 48];
           if (R1 & 7 == 1) goto c1qi0; else goto c1qif;
       c1qi0: // global
           I64[Sp + 48] = block_c1qhX_info;
           R6 = _s1jog::P64;
           R5 = P64[Sp + 40];
           R4 = _s1joe::P64;
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 16];
           Sp = Sp + 48;
           call GHC.Real.$w$c<=_entry(R6,
                                      R5,
                                      R4,
                                      R3,
                                      R2) args: 8, res: 8, upd: 8;
       c1qif: // global
           _s1joj::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1qid_info;
           R2 = _s1joj::P64;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = _s1joe::P64;
           P64[Sp] = _s1jog::P64;
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qhS_info" {
     block_c1qhS_info:
         const _c1qhS;
         const 6;
         const 30;
 },
 _c1qhX() //  [R1]
         { []
         }
     {offset
       c1qhX: // global
           if (R1 & 7 == 1) goto u1qiH; else goto u1qiI;
       u1qiH: // global
           Sp = Sp + 8;
           call _c1qis() args: 0, res: 0, upd: 0;
       u1qiI: // global
           Sp = Sp + 8;
           call _c1qiw() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1qhX_info" {
     block_c1qhX_info:
         const _c1qhX;
         const 0;
         const 30;
 },
 _c1qid() //  [R1]
         { []
         }
     {offset
       c1qid: // global
           if (R1 & 7 == 1) goto c1qim; else goto c1qiA;
       c1qim: // global
           _s1jog::P64 = P64[Sp + 40];
           I64[Sp + 40] = block_c1qij_info;
           R6 = _s1jog::P64;
           R5 = P64[Sp + 32];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 40;
           call GHC.Real.$w$c<=_entry(R6,
                                      R5,
                                      R4,
                                      R3,
                                      R2) args: 8, res: 8, upd: 8;
       c1qiA: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qid_info" {
     block_c1qid_info:
         const _c1qid;
         const 5;
         const 30;
 },
 _c1qij() //  [R1]
         { []
         }
     {offset
       c1qij: // global
           if (R1 & 7 == 1) goto u1qiF; else goto u1qiG;
       u1qiF: // global
           Sp = Sp + 8;
           call _c1qis() args: 0, res: 0, upd: 0;
       u1qiG: // global
           Sp = Sp + 8;
           call _c1qiw() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1qij_info" {
     block_c1qij_info:
         const _c1qij;
         const 0;
         const 30;
 },
 _c1qis() //  []
         { []
         }
     {offset
       c1qis: // global
           R1 = GHC.Types.GT_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c1qiw() //  []
         { []
         }
     {offset
       c1qiw: // global
           R1 = GHC.Types.LT_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.314442378 UTC

[section ""data" . GHC.Real.$fOrdRatio_$ccompare_closure" {
     GHC.Real.$fOrdRatio_$ccompare_closure:
         const GHC.Real.$fOrdRatio_$ccompare_info;
 },
 GHC.Real.$fOrdRatio_$ccompare_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1qjB: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1qjF; else goto c1qjG;
       c1qjF: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fOrdRatio_$ccompare_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1qjG: // global
           I64[Sp - 24] = block_c1qjy_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u1qjO; else goto c1qjz;
       u1qjO: // global
           call _c1qjy(R1) args: 0, res: 0, upd: 0;
       c1qjz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fOrdRatio_$ccompare_info" {
     GHC.Real.$fOrdRatio_$ccompare_info:
         const GHC.Real.$fOrdRatio_$ccompare_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c1qjy() //  [R1]
         { []
         }
     {offset
       c1qjy: // global
           I64[Sp - 8] = block_c1qjE_info;
           _s1jos::P64 = P64[R1 + 7];
           _s1jot::P64 = P64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp] = _s1jot::P64;
           P64[Sp + 16] = _s1jos::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1qjN; else goto c1qjI;
       u1qjN: // global
           call _c1qjE(R1) args: 0, res: 0, upd: 0;
       c1qjI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qjy_info" {
     block_c1qjy_info:
         const _c1qjy;
         const 2;
         const 30;
 },
 _c1qjE() //  [R1]
         { []
         }
     {offset
       c1qjE: // global
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = P64[Sp + 8];
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 16];
           Sp = Sp + 32;
           call GHC.Real.$w$ccompare_entry(R6,
                                           R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qjE_info" {
     block_c1qjE_info:
         const _c1qjE;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.322229843 UTC

[section ""data" . GHC.Real.$fOrdRatio_$c>_closure" {
     GHC.Real.$fOrdRatio_$c>_closure:
         const GHC.Real.$fOrdRatio_$c>_info;
 },
 GHC.Real.$fOrdRatio_$c>_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1qk9: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1qkd; else goto c1qke;
       c1qkd: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fOrdRatio_$c>_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1qke: // global
           I64[Sp - 24] = block_c1qk6_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u1qky; else goto c1qk7;
       u1qky: // global
           call _c1qk6(R1) args: 0, res: 0, upd: 0;
       c1qk7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fOrdRatio_$c>_info" {
     GHC.Real.$fOrdRatio_$c>_info:
         const GHC.Real.$fOrdRatio_$c>_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c1qk6() //  [R1]
         { []
         }
     {offset
       c1qk6: // global
           I64[Sp - 8] = block_c1qkc_info;
           _s1joB::P64 = P64[R1 + 7];
           _s1joC::P64 = P64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp] = _s1joC::P64;
           P64[Sp + 16] = _s1joB::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1qkx; else goto c1qkg;
       u1qkx: // global
           call _c1qkc(R1) args: 0, res: 0, upd: 0;
       c1qkg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qk6_info" {
     block_c1qk6_info:
         const _c1qk6;
         const 2;
         const 30;
 },
 _c1qkc() //  [R1]
         { []
         }
     {offset
       c1qkc: // global
           _s1joB::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_c1qkk_info;
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = P64[Sp + 8];
           R3 = _s1joB::P64;
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call GHC.Real.$w$ccompare_entry(R6,
                                           R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qkc_info" {
     block_c1qkc_info:
         const _c1qkc;
         const 3;
         const 30;
 },
 _c1qkk() //  [R1]
         { []
         }
     {offset
       c1qkk: // global
           if (R1 & 7 == 3) goto c1qkv; else goto c1qkr;
       c1qkv: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1qkr: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qkk_info" {
     block_c1qkk_info:
         const _c1qkk;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.331831697 UTC

[section ""data" . GHC.Real.$fOrdRatio_$c>=_closure" {
     GHC.Real.$fOrdRatio_$c>=_closure:
         const GHC.Real.$fOrdRatio_$c>=_info;
 },
 GHC.Real.$fOrdRatio_$c>=_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1ql0: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1ql4; else goto c1ql5;
       c1ql4: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fOrdRatio_$c>=_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1ql5: // global
           I64[Sp - 24] = block_c1qkX_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u1qlp; else goto c1qkY;
       u1qlp: // global
           call _c1qkX(R1) args: 0, res: 0, upd: 0;
       c1qkY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fOrdRatio_$c>=_info" {
     GHC.Real.$fOrdRatio_$c>=_info:
         const GHC.Real.$fOrdRatio_$c>=_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c1qkX() //  [R1]
         { []
         }
     {offset
       c1qkX: // global
           I64[Sp - 8] = block_c1ql3_info;
           _s1joL::P64 = P64[R1 + 7];
           _s1joM::P64 = P64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp] = _s1joM::P64;
           P64[Sp + 16] = _s1joL::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1qlo; else goto c1ql7;
       u1qlo: // global
           call _c1ql3(R1) args: 0, res: 0, upd: 0;
       c1ql7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qkX_info" {
     block_c1qkX_info:
         const _c1qkX;
         const 2;
         const 30;
 },
 _c1ql3() //  [R1]
         { []
         }
     {offset
       c1ql3: // global
           _s1joL::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_c1qlb_info;
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = P64[Sp + 8];
           R3 = _s1joL::P64;
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call GHC.Real.$w$ccompare_entry(R6,
                                           R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1ql3_info" {
     block_c1ql3_info:
         const _c1ql3;
         const 3;
         const 30;
 },
 _c1qlb() //  [R1]
         { []
         }
     {offset
       c1qlb: // global
           if (R1 & 7 == 1) goto c1qlm; else goto c1qli;
       c1qlm: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1qli: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qlb_info" {
     block_c1qlb_info:
         const _c1qlb;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.34350059 UTC

[section ""data" . GHC.Real.$fOrdRatio_closure" {
     GHC.Real.$fOrdRatio_closure:
         const GHC.Real.$fOrdRatio_info;
 },
 sat_s1joZ_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c1qlT: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Real.$fOrdRatio_$cmin_entry(R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1joZ_info" {
     sat_s1joZ_info:
         const sat_s1joZ_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s1joY_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c1qm1: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Real.$fOrdRatio_$cmax_entry(R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1joY_info" {
     sat_s1joY_info:
         const sat_s1joY_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s1joX_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c1qm9: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Real.$fOrdRatio_$c>=_entry(R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1joX_info" {
     sat_s1joX_info:
         const sat_s1joX_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s1joW_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c1qmh: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Real.$fOrdRatio_$c>_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1joW_info" {
     sat_s1joW_info:
         const sat_s1joW_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s1joV_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c1qmp: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Real.$fOrdRatio_$c<=_entry(R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1joV_info" {
     sat_s1joV_info:
         const sat_s1joV_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s1joU_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c1qmx: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Real.$fOrdRatio_$c<_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1joU_info" {
     sat_s1joU_info:
         const sat_s1joU_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s1joT_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c1qmF: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Real.$fOrdRatio_$ccompare_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1joT_info" {
     sat_s1joT_info:
         const sat_s1joT_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s1joS_entry() //  [R1]
         { []
         }
     {offset
       c1qmM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1qmN; else goto c1qmO;
       c1qmN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1qmO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$fOrdRatio_$cp1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1joS_info" {
     sat_s1joS_info:
         const sat_s1joS_entry;
         const 1;
         const 16;
 },
 GHC.Real.$fOrdRatio_entry() //  [R2]
         { []
         }
     {offset
       c1qmQ: // global
           Hp = Hp + 208;
           if (Hp > HpLim) (likely: False) goto c1qmU; else goto c1qmT;
       c1qmU: // global
           HpAlloc = 208;
           R2 = R2;
           R1 = GHC.Real.$fOrdRatio_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1qmT: // global
           I64[Hp - 200] = sat_s1joZ_info;
           P64[Hp - 192] = R2;
           I64[Hp - 184] = sat_s1joY_info;
           P64[Hp - 176] = R2;
           I64[Hp - 168] = sat_s1joX_info;
           P64[Hp - 160] = R2;
           I64[Hp - 152] = sat_s1joW_info;
           P64[Hp - 144] = R2;
           I64[Hp - 136] = sat_s1joV_info;
           P64[Hp - 128] = R2;
           I64[Hp - 120] = sat_s1joU_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_s1joT_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_s1joS_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = GHC.Classes.C:Ord_con_info;
           P64[Hp - 56] = Hp - 88;
           P64[Hp - 48] = Hp - 102;
           P64[Hp - 40] = Hp - 118;
           P64[Hp - 32] = Hp - 134;
           P64[Hp - 24] = Hp - 150;
           P64[Hp - 16] = Hp - 166;
           P64[Hp - 8] = Hp - 182;
           P64[Hp] = Hp - 198;
           R1 = Hp - 63;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fOrdRatio_info" {
     GHC.Real.$fOrdRatio_info:
         const GHC.Real.$fOrdRatio_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.365539061 UTC

[section ""data" . GHC.Real.$fNumRatio_$cnegate_closure" {
     GHC.Real.$fNumRatio_$cnegate_closure:
         const GHC.Real.$fNumRatio_$cnegate_info;
 },
 GHC.Real.$fNumRatio_$cnegate_entry() //  [R2, R3]
         { []
         }
     {offset
       c1qnE: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1qnS; else goto c1qnT;
       c1qnS: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fNumRatio_$cnegate_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1qnT: // global
           I64[Sp - 16] = block_c1qnB_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1qo0; else goto c1qnC;
       u1qo0: // global
           call _c1qnB(R1) args: 0, res: 0, upd: 0;
       c1qnC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fNumRatio_$cnegate_info" {
     GHC.Real.$fNumRatio_$cnegate_info:
         const GHC.Real.$fNumRatio_$cnegate_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1qnB() //  [R1]
         { []
         }
     {offset
       c1qnB: // global
           I64[Sp - 8] = block_c1qnH_info;
           R2 = P64[Sp + 8];
           P64[Sp] = P64[R1 + 15];
           P64[Sp + 8] = P64[R1 + 7];
           Sp = Sp - 8;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qnB_info" {
     block_c1qnB_info:
         const _c1qnB;
         const 1;
         const 30;
 },
 _c1qnH() //  [R1]
         { []
         }
     {offset
       c1qnH: // global
           I64[Sp] = block_c1qnL_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qnH_info" {
     block_c1qnH_info:
         const _c1qnH;
         const 2;
         const 30;
 },
 _c1qnL() //  [R1]
         { []
         }
     {offset
       c1qnL: // global
           I64[Sp] = block_c1qnP_info;
           R2 = R1;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 16];
           Sp = Sp - 16;
           call GHC.Num.negate_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qnL_info" {
     block_c1qnL_info:
         const _c1qnL;
         const 2;
         const 30;
 },
 _c1qnP() //  [R1]
         { []
         }
     {offset
       c1qnP: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1qnZ; else goto c1qnY;
       c1qnZ: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1qnY: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qnP_info" {
     block_c1qnP_info:
         const _c1qnP;
         const 130;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.381982044 UTC

[section ""data" . GHC.Real.$fNumRatio_$cabs_closure" {
     GHC.Real.$fNumRatio_$cabs_closure:
         const GHC.Real.$fNumRatio_$cabs_info;
 },
 GHC.Real.$fNumRatio_$cabs_entry() //  [R2, R3]
         { []
         }
     {offset
       c1qov: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1qoJ; else goto c1qoK;
       c1qoJ: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fNumRatio_$cabs_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1qoK: // global
           I64[Sp - 16] = block_c1qos_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1qoR; else goto c1qot;
       u1qoR: // global
           call _c1qos(R1) args: 0, res: 0, upd: 0;
       c1qot: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fNumRatio_$cabs_info" {
     GHC.Real.$fNumRatio_$cabs_info:
         const GHC.Real.$fNumRatio_$cabs_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1qos() //  [R1]
         { []
         }
     {offset
       c1qos: // global
           I64[Sp - 8] = block_c1qoy_info;
           R2 = P64[Sp + 8];
           P64[Sp] = P64[R1 + 15];
           P64[Sp + 8] = P64[R1 + 7];
           Sp = Sp - 8;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qos_info" {
     block_c1qos_info:
         const _c1qos;
         const 1;
         const 30;
 },
 _c1qoy() //  [R1]
         { []
         }
     {offset
       c1qoy: // global
           I64[Sp] = block_c1qoC_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qoy_info" {
     block_c1qoy_info:
         const _c1qoy;
         const 2;
         const 30;
 },
 _c1qoC() //  [R1]
         { []
         }
     {offset
       c1qoC: // global
           I64[Sp] = block_c1qoG_info;
           R2 = R1;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 16];
           Sp = Sp - 16;
           call GHC.Num.abs_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qoC_info" {
     block_c1qoC_info:
         const _c1qoC;
         const 2;
         const 30;
 },
 _c1qoG() //  [R1]
         { []
         }
     {offset
       c1qoG: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1qoQ; else goto c1qoP;
       c1qoQ: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1qoP: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qoG_info" {
     block_c1qoG_info:
         const _c1qoG;
         const 130;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.39702151 UTC

[section ""data" . GHC.Real.$w$csignum_closure" {
     GHC.Real.$w$csignum_closure:
         const GHC.Real.$w$csignum_info;
         const 0;
 },
 GHC.Real.$w$csignum_entry() //  [R2, R3]
         { []
         }
     {offset
       c1qpl: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1qpv; else goto c1qpw;
       c1qpv: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$w$csignum_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1qpw: // global
           I64[Sp - 16] = block_c1qpj_info;
           R2 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$w$csignum_info" {
     GHC.Real.$w$csignum_info:
         const GHC.Real.$w$csignum_entry;
         const 0;
         const 2305843013508661262;
         const 8589934607;
         const S1jKw_srt+552;
 },
 _c1qpj() //  [R1]
         { []
         }
     {offset
       c1qpj: // global
           I64[Sp] = block_c1qpo_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qpj_info" {
     block_c1qpj_info:
         const _c1qpj;
         const 1;
         const 4294967326;
         const S1jKw_srt+552;
 },
 _c1qpo() //  [R1]
         { []
         }
     {offset
       c1qpo: // global
           I64[Sp] = block_c1qps_info;
           R2 = R1;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 8];
           P64[Sp + 8] = R1;
           Sp = Sp - 16;
           call GHC.Num.signum_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qpo_info" {
     block_c1qpo_info:
         const _c1qpo;
         const 1;
         const 4294967326;
         const S1jKw_srt+552;
 },
 _c1qps() //  [R1]
         { []
         }
     {offset
       c1qps: // global
           I64[Sp] = block_c1qpu_info;
           R2 = P64[Sp + 8];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = GHC.Real.$fEnumRatio1_closure;
           P64[Sp + 8] = R1;
           Sp = Sp - 16;
           call GHC.Num.fromInteger_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qps_info" {
     block_c1qps_info:
         const _c1qps;
         const 1;
         const 4294967326;
         const S1jKw_srt+552;
 },
 _c1qpu() //  [R1]
         { []
         }
     {offset
       c1qpu: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qpu_info" {
     block_c1qpu_info:
         const _c1qpu;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.410136636 UTC

[section ""data" . GHC.Real.$fNumRatio_$csignum_closure" {
     GHC.Real.$fNumRatio_$csignum_closure:
         const GHC.Real.$fNumRatio_$csignum_info;
         const 0;
 },
 GHC.Real.$fNumRatio_$csignum_entry() //  [R2, R3]
         { []
         }
     {offset
       c1qq2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1qq8; else goto c1qq9;
       c1qq8: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fNumRatio_$csignum_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1qq9: // global
           I64[Sp - 16] = block_c1qpZ_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1qqe; else goto c1qq0;
       u1qqe: // global
           call _c1qpZ(R1) args: 0, res: 0, upd: 0;
       c1qq0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fNumRatio_$csignum_info" {
     GHC.Real.$fNumRatio_$csignum_info:
         const GHC.Real.$fNumRatio_$csignum_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S1jKw_srt+784;
 },
 _c1qpZ() //  [R1]
         { []
         }
     {offset
       c1qpZ: // global
           _s1jpm::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1qq5_info;
           R3 = P64[R1 + 7];
           R2 = _s1jpm::P64;
           Sp = Sp + 8;
           call GHC.Real.$w$csignum_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qpZ_info" {
     block_c1qpZ_info:
         const _c1qpZ;
         const 1;
         const 4294967326;
         const S1jKw_srt+784;
 },
 _c1qq5() //  [R1, R2]
         { []
         }
     {offset
       c1qq5: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1qqd; else goto c1qqc;
       c1qqd: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c1qqc: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qq5_info" {
     block_c1qq5_info:
         const _c1qq5;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.417882808 UTC

[section ""data" . GHC.Real.$w$cfromInteger_closure" {
     GHC.Real.$w$cfromInteger_closure:
         const GHC.Real.$w$cfromInteger_info;
         const 0;
 },
 GHC.Real.$w$cfromInteger_entry() //  [R2, R3]
         { []
         }
     {offset
       c1qqy: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1qqI; else goto c1qqJ;
       c1qqI: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$w$cfromInteger_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1qqJ: // global
           I64[Sp - 16] = block_c1qqw_info;
           R2 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$w$cfromInteger_info" {
     GHC.Real.$w$cfromInteger_info:
         const GHC.Real.$w$cfromInteger_entry;
         const 0;
         const 9223372041149743118;
         const 8589934607;
         const S1jKw_srt+552;
 },
 _c1qqw() //  [R1]
         { []
         }
     {offset
       c1qqw: // global
           I64[Sp] = block_c1qqB_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qqw_info" {
     block_c1qqw_info:
         const _c1qqw;
         const 1;
         const 4294967326;
         const S1jKw_srt+552;
 },
 _c1qqB() //  [R1]
         { []
         }
     {offset
       c1qqB: // global
           I64[Sp] = block_c1qqF_info;
           R2 = R1;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 8];
           P64[Sp + 8] = R1;
           Sp = Sp - 16;
           call GHC.Num.fromInteger_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qqB_info" {
     block_c1qqB_info:
         const _c1qqB;
         const 1;
         const 4294967326;
         const S1jKw_srt+552;
 },
 _c1qqF() //  [R1]
         { []
         }
     {offset
       c1qqF: // global
           I64[Sp] = block_c1qqH_info;
           R2 = P64[Sp + 8];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = GHC.Real.$fEnumRatio1_closure;
           P64[Sp + 8] = R1;
           Sp = Sp - 16;
           call GHC.Num.fromInteger_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qqF_info" {
     block_c1qqF_info:
         const _c1qqF;
         const 1;
         const 4294967326;
         const S1jKw_srt+552;
 },
 _c1qqH() //  [R1]
         { []
         }
     {offset
       c1qqH: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qqH_info" {
     block_c1qqH_info:
         const _c1qqH;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.427790621 UTC

[section ""data" . GHC.Real.$fNumRatio_$cfromInteger_closure" {
     GHC.Real.$fNumRatio_$cfromInteger_closure:
         const GHC.Real.$fNumRatio_$cfromInteger_info;
         const 0;
 },
 GHC.Real.$fNumRatio_$cfromInteger_entry() //  [R2, R3]
         { []
         }
     {offset
       c1qrf: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1qrg; else goto c1qrh;
       c1qrg: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fNumRatio_$cfromInteger_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1qrh: // global
           I64[Sp - 8] = block_c1qrc_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Real.$w$cfromInteger_entry(R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fNumRatio_$cfromInteger_info" {
     GHC.Real.$fNumRatio_$cfromInteger_info:
         const GHC.Real.$fNumRatio_$cfromInteger_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S1jKw_srt+800;
 },
 _c1qrc() //  [R1, R2]
         { []
         }
     {offset
       c1qrc: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1qrk; else goto c1qrj;
       c1qrk: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c1qrj: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qrc_info" {
     block_c1qrc_info:
         const _c1qrc;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.433762571 UTC

[section ""data" . GHC.Real.$fRealRatio_$s$ctoRational_closure" {
     GHC.Real.$fRealRatio_$s$ctoRational_closure:
         const GHC.Real.$fRealRatio_$s$ctoRational_info;
 },
 GHC.Real.$fRealRatio_$s$ctoRational_entry() //  [R2]
         { []
         }
     {offset
       c1qry: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fRealRatio_$s$ctoRational_info" {
     GHC.Real.$fRealRatio_$s$ctoRational_info:
         const GHC.Real.$fRealRatio_$s$ctoRational_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.438242145 UTC

[section ""data" . GHC.Real.$fRealRatio_$ctoRational_closure" {
     GHC.Real.$fRealRatio_$ctoRational_closure:
         const GHC.Real.$fRealRatio_$ctoRational_info;
 },
 GHC.Real.$fRealRatio_$ctoRational_entry() //  [R2, R3]
         { []
         }
     {offset
       c1qrO: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1qs0; else goto c1qs1;
       c1qs0: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fRealRatio_$ctoRational_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1qs1: // global
           I64[Sp - 16] = block_c1qrL_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1qs7; else goto c1qrM;
       u1qs7: // global
           call _c1qrL(R1) args: 0, res: 0, upd: 0;
       c1qrM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fRealRatio_$ctoRational_info" {
     GHC.Real.$fRealRatio_$ctoRational_info:
         const GHC.Real.$fRealRatio_$ctoRational_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1qrL() //  [R1]
         { []
         }
     {offset
       c1qrL: // global
           I64[Sp - 8] = block_c1qrR_info;
           R2 = P64[Sp + 8];
           I64[Sp - 24] = stg_ap_p_info;
           P64[Sp - 16] = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 24;
           call GHC.Real.toInteger_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qrL_info" {
     block_c1qrL_info:
         const _c1qrL;
         const 1;
         const 30;
 },
 _c1qrR() //  [R1]
         { []
         }
     {offset
       c1qrR: // global
           _s1jpK::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1qrV_info;
           R2 = P64[Sp + 16];
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = _s1jpK::P64;
           P64[Sp + 16] = R1;
           Sp = Sp - 8;
           call GHC.Real.toInteger_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qrR_info" {
     block_c1qrR_info:
         const _c1qrR;
         const 2;
         const 30;
 },
 _c1qrV() //  [R1]
         { []
         }
     {offset
       c1qrV: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1qs6; else goto c1qs5;
       c1qs6: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1qs5: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qrV_info" {
     block_c1qrV_info:
         const _c1qrV;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.450304545 UTC

[section ""data" . GHC.Real.$w$crecip_closure" {
     GHC.Real.$w$crecip_closure:
         const GHC.Real.$w$crecip_info;
         const 0;
 },
 $dNum_s1jpR_entry() //  [R1]
         { []
         }
     {offset
       c1qsD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1qsE; else goto c1qsF;
       c1qsE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1qsF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dNum_s1jpR_info" {
     $dNum_s1jpR_info:
         const $dNum_s1jpR_entry;
         const 1;
         const 16;
 },
 sat_s1jpU_entry() //  [R1]
         { []
         }
     {offset
       c1qsO: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1qsP; else goto c1qsQ;
       c1qsP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1qsQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Real.even1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jpU_info" {
     sat_s1jpU_info:
         const sat_s1jpU_entry;
         const 1;
         const 4294967312;
         const S1jKw_srt+680;
 },
 sat_s1jpW_entry() //  [R1]
         { []
         }
     {offset
       c1qt3: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1qt4; else goto c1qt5;
       c1qt4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1qt5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Real.even1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jpW_info" {
     sat_s1jpW_info:
         const sat_s1jpW_entry;
         const 1;
         const 4294967312;
         const S1jKw_srt+680;
 },
 section ""relreadonly" . u1qtI_srtd" {
     u1qtI_srtd:
         const S1jKw_srt+296;
         const 66;
         const 281474976710657;
         const 2;
 },
 GHC.Real.$w$crecip_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1qt6: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c1qt7; else goto c1qt8;
       c1qt7: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$w$crecip_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1qt8: // global
           I64[Sp - 24] = block_c1qsv_info;
           R2 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$w$crecip_info" {
     GHC.Real.$w$crecip_info:
         const GHC.Real.$w$crecip_entry;
         const 0;
         const 18446744069414584334;
         const 12884901911;
         const u1qtI_srtd;
 },
 section ""relreadonly" . u1qtJ_srtd" {
     u1qtJ_srtd:
         const S1jKw_srt+296;
         const 49;
         const 281474976710657;
 },
 _c1qsv() //  [R1]
         { []
         }
     {offset
       c1qsv: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1qtb; else goto c1qta;
       c1qtb: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1qta: // global
           I64[Hp - 16] = $dNum_s1jpR_info;
           P64[Hp] = R1;
           I64[Sp - 8] = block_c1qsG_info;
           R2 = R1;
           P64[Sp] = Hp - 16;
           Sp = Sp - 8;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qsv_info" {
     block_c1qsv_info:
         const _c1qsv;
         const 2;
         const 18446744069414584350;
         const u1qtJ_srtd;
 },
 section ""relreadonly" . u1qtK_srtd" {
     u1qtK_srtd:
         const S1jKw_srt+296;
         const 49;
         const 281474976710657;
 },
 _c1qsG() //  [R1]
         { []
         }
     {offset
       c1qsG: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1qte; else goto c1qtd;
       c1qte: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1qtd: // global
           I64[Hp - 16] = sat_s1jpU_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp - 16] = block_c1qsR_info;
           R2 = R1;
           P64[Sp - 8] = R1;
           P64[Sp] = Hp - 16;
           Sp = Sp - 16;
           call GHC.Classes.$p1Ord_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qsG_info" {
     block_c1qsG_info:
         const _c1qsG;
         const 3;
         const 18446744069414584350;
         const u1qtK_srtd;
 },
 section ""relreadonly" . u1qtL_srtd" {
     u1qtL_srtd:
         const S1jKw_srt+296;
         const 49;
         const 281474976710657;
 },
 _c1qsR() //  [R1]
         { []
         }
     {offset
       c1qsR: // global
           I64[Sp] = block_c1qsV_info;
           R2 = R1;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 32];
           P64[Sp - 8] = P64[Sp + 16];
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qsR_info" {
     block_c1qsR_info:
         const _c1qsR;
         const 5;
         const 18446744069414584350;
         const u1qtL_srtd;
 },
 section ""relreadonly" . u1qtM_srtd" {
     u1qtM_srtd:
         const S1jKw_srt+296;
         const 49;
         const 281474976710657;
 },
 _c1qsV() //  [R1]
         { []
         }
     {offset
       c1qsV: // global
           if (R1 & 7 == 1) goto c1qti; else goto c1qtF;
       c1qti: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1qtl; else goto c1qtk;
       c1qtl: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1qtk: // global
           I64[Hp - 16] = sat_s1jpW_info;
           P64[Hp] = P64[Sp + 24];
           I64[Sp + 16] = block_c1qtg_info;
           R2 = P64[Sp + 8];
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = P64[Sp + 32];
           P64[Sp + 8] = Hp - 16;
           Sp = Sp - 8;
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
       c1qtF: // global
           R1 = GHC.Real.ratioZeroDenominatorError_closure;
           Sp = Sp + 48;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qsV_info" {
     block_c1qsV_info:
         const _c1qsV;
         const 133;
         const 18446744069414584350;
         const u1qtM_srtd;
 },
 _c1qtg() //  [R1]
         { []
         }
     {offset
       c1qtg: // global
           _s1jpP::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c1qtr; else goto c1qty;
       c1qtr: // global
           R2 = P64[Sp + 16];
           R1 = _s1jpP::P64;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c1qty: // global
           I64[Sp] = block_c1qtu_info;
           R2 = P64[Sp + 8];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _s1jpP::P64;
           Sp = Sp - 16;
           call GHC.Num.negate_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qtg_info" {
     block_c1qtg_info:
         const _c1qtg;
         const 3;
         const 30;
 },
 _c1qtu() //  [R1]
         { []
         }
     {offset
       c1qtu: // global
           _s1jpO::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c1qtw_info;
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = _s1jpO::P64;
           P64[Sp + 24] = R1;
           call GHC.Num.negate_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qtu_info" {
     block_c1qtu_info:
         const _c1qtu;
         const 259;
         const 30;
 },
 _c1qtw() //  [R1]
         { []
         }
     {offset
       c1qtw: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qtw_info" {
     block_c1qtw_info:
         const _c1qtw;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.474214104 UTC

[section ""data" . GHC.Real.$fFractionalRatio_$crecip_closure" {
     GHC.Real.$fFractionalRatio_$crecip_closure:
         const GHC.Real.$fFractionalRatio_$crecip_info;
         const 0;
 },
 GHC.Real.$fFractionalRatio_$crecip_entry() //  [R2, R3]
         { []
         }
     {offset
       c1quP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1quV; else goto c1quW;
       c1quV: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fFractionalRatio_$crecip_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1quW: // global
           I64[Sp - 16] = block_c1quM_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1qv1; else goto c1quN;
       u1qv1: // global
           call _c1quM(R1) args: 0, res: 0, upd: 0;
       c1quN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fFractionalRatio_$crecip_info" {
     GHC.Real.$fFractionalRatio_$crecip_info:
         const GHC.Real.$fFractionalRatio_$crecip_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S1jKw_srt+816;
 },
 _c1quM() //  [R1]
         { []
         }
     {offset
       c1quM: // global
           _s1jq1::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1quS_info;
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = _s1jq1::P64;
           Sp = Sp + 8;
           call GHC.Real.$w$crecip_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1quM_info" {
     block_c1quM_info:
         const _c1quM;
         const 1;
         const 4294967326;
         const S1jKw_srt+816;
 },
 _c1quS() //  [R1, R2]
         { []
         }
     {offset
       c1quS: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1qv0; else goto c1quZ;
       c1qv0: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c1quZ: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1quS_info" {
     block_c1quS_info:
         const _c1quS;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.484766762 UTC

[section ""data" . GHC.Real.$w$s$cproperFraction_closure" {
     GHC.Real.$w$s$cproperFraction_closure:
         const GHC.Real.$w$s$cproperFraction_info;
         const 0;
 },
 section ""relreadonly" . u1qwu_srtd" {
     u1qwu_srtd:
         const S1jKw_srt+424;
         const 33;
         const 4294967297;
 },
 ds_s1jqc_entry() //  [R1]
         { []
         }
     {offset
       c1qvs: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1qvt; else goto c1qvu;
       c1qvt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1qvu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c1qvn_info;
           R3 = GHC.Real.even1_closure;
           _s1jqb::P64 = P64[R1 + 24];
           R2 = _s1jqb::P64;
           P64[Sp - 32] = P64[R1 + 16];
           P64[Sp - 24] = _s1jqb::P64;
           Sp = Sp - 40;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds_s1jqc_info" {
     ds_s1jqc_info:
         const ds_s1jqc_entry;
         const 2;
         const 18446744069414584338;
         const u1qwu_srtd;
 },
 _c1qvn() //  [R1]
         { []
         }
     {offset
       c1qvn: // global
           if (R1 == 1) goto c1qvr; else goto c1qvq;
       c1qvr: // global
           R1 = GHC.Real.divZeroError_closure;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       c1qvq: // global
           _s1jqb::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c1qvx_info;
           R3 = _s1jqb::P64;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Integer.Type.quotRemInteger_entry(R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c1qvn_info" {
     block_c1qvn_info:
         const _c1qvn;
         const 2;
         const 4294967326;
         const S1jKw_srt+832;
 },
 _c1qvx() //  [R1, R2]
         { []
         }
     {offset
       c1qvx: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1qvD; else goto c1qvC;
       c1qvD: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c1qvC: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1qvx_info" {
     block_c1qvx_info:
         const _c1qvx;
         const 0;
         const 30;
 },
 sat_s1jqs_entry() //  [R1]
         { []
         }
     {offset
       c1qvO: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1qvX; else goto c1qvY;
       c1qvX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1qvY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c1qvL_info;
           _s1jqb::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _s1jqb::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u1qw4; else goto c1qvM;
       u1qw4: // global
           call _c1qvL(R1) args: 0, res: 0, upd: 0;
       c1qvM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jqs_info" {
     sat_s1jqs_info:
         const sat_s1jqs_entry;
         const 2;
         const 18;
 },
 _c1qvL() //  [R1]
         { []
         }
     {offset
       c1qvL: // global
           I64[Sp] = block_c1qvR_info;
           R1 = P64[R1 + 15];
           if (R1 & 7 != 0) goto u1qw3; else goto c1qvS;
       u1qw3: // global
           call _c1qvR(R1) args: 0, res: 0, upd: 0;
       c1qvS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c1qvL_info" {
     block_c1qvL_info:
         const _c1qvL;
         const 1;
         const 30;
 },
 _c1qvR() //  [R1]
         { []
         }
     {offset
       c1qvR: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1qw2; else goto c1qw1;
       c1qw2: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c1qw1: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1qvR_info" {
     block_c1qvR_info:
         const _c1qvR;
         const 1;
         const 30;
 },
 sat_s1jqn_entry() //  [R1]
         { []
         }
     {offset
       c1qwc: // global
           _s1jqn::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c1qwg; else goto c1qwh;
       c1qwh: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1qwj; else goto c1qwi;
       c1qwj: // global
           HpAlloc = 24;
           goto c1qwg;
       c1qwg: // global
           R1 = _s1jqn::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1qwi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1jqn::P64;
           _s1jq9::P64 = P64[_s1jqn::P64 + 16];
           _s1jqc::P64 = P64[_s1jqn::P64 + 24];
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _s1jqc::P64;
           I64[Sp - 32] = block_c1qwa_info;
           R2 = _s1jq9::P64;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 32;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jqn_info" {
     sat_s1jqn_info:
         const sat_s1jqn_entry;
         const 2;
         const 18;
 },
 _c1qwa() //  [R1]
         { []
         }
     {offset
       c1qwa: // global
           I64[Sp] = block_c1qwf_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c1qwa_info" {
     block_c1qwa_info:
         const _c1qwa;
         const 1;
         const 30;
 },
 _c1qwf() //  [R1]
         { []
         }
     {offset
       c1qwf: // global
           R2 = R1;
           I64[Sp] = stg_ap_p_info;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1qwf_info" {
     block_c1qwf_info:
         const _c1qwf;
         const 1;
         const 30;
 },
 GHC.Real.$w$s$cproperFraction_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1qwp: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c1qwt; else goto c1qws;
       c1qwt: // global
           HpAlloc = 96;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$w$s$cproperFraction_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1qws: // global
           I64[Hp - 88] = ds_s1jqc_info;
           P64[Hp - 72] = R3;
           P64[Hp - 64] = R4;
           I64[Hp - 56] = sat_s1jqs_info;
           P64[Hp - 40] = R4;
           _c1qvj::P64 = Hp - 88;
           P64[Hp - 32] = _c1qvj::P64;
           I64[Hp - 24] = sat_s1jqn_info;
           P64[Hp - 8] = R2;
           P64[Hp] = _c1qvj::P64;
           R2 = Hp - 56;
           R1 = Hp - 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$w$s$cproperFraction_info" {
     GHC.Real.$w$s$cproperFraction_info:
         const GHC.Real.$w$s$cproperFraction_entry;
         const 0;
         const 6755403736023054;
         const 12884901911;
         const S1jKw_srt+680;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.506112214 UTC

[section ""data" . GHC.Real.$fEnumRatio_$s$cproperFraction_closure" {
     GHC.Real.$fEnumRatio_$s$cproperFraction_closure:
         const GHC.Real.$fEnumRatio_$s$cproperFraction_info;
         const 0;
 },
 GHC.Real.$fEnumRatio_$s$cproperFraction_entry() //  [R2, R3]
         { []
         }
     {offset
       c1qxj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1qxp; else goto c1qxq;
       c1qxp: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fEnumRatio_$s$cproperFraction_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1qxq: // global
           I64[Sp - 16] = block_c1qxg_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1qxv; else goto c1qxh;
       u1qxv: // global
           call _c1qxg(R1) args: 0, res: 0, upd: 0;
       c1qxh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fEnumRatio_$s$cproperFraction_info" {
     GHC.Real.$fEnumRatio_$s$cproperFraction_info:
         const GHC.Real.$fEnumRatio_$s$cproperFraction_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S1jKw_srt+840;
 },
 _c1qxg() //  [R1]
         { []
         }
     {offset
       c1qxg: // global
           _s1jqt::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1qxm_info;
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = _s1jqt::P64;
           Sp = Sp + 8;
           call GHC.Real.$w$s$cproperFraction_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qxg_info" {
     block_c1qxg_info:
         const _c1qxg;
         const 1;
         const 4294967326;
         const S1jKw_srt+840;
 },
 _c1qxm() //  [R1, R2]
         { []
         }
     {offset
       c1qxm: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1qxu; else goto c1qxt;
       c1qxu: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c1qxt: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qxm_info" {
     block_c1qxm_info:
         const _c1qxm;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.516300037 UTC

[section ""data" . GHC.Real.$w$cproperFraction_closure" {
     GHC.Real.$w$cproperFraction_closure:
         const GHC.Real.$w$cproperFraction_info;
 },
 ds_s1jqF_entry() //  [R1]
         { []
         }
     {offset
       c1qxR: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1qxS; else goto c1qxT;
       c1qxS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1qxT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call GHC.Real.quotRem_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds_s1jqF_info" {
     ds_s1jqF_info:
         const ds_s1jqF_entry;
         const 3;
         const 15;
 },
 sat_s1jqS_entry() //  [R1]
         { []
         }
     {offset
       c1qy1: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1qy7; else goto c1qy8;
       c1qy7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1qy8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c1qxY_info;
           _s1jqE::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _s1jqE::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u1qyd; else goto c1qxZ;
       u1qyd: // global
           call _c1qxY(R1) args: 0, res: 0, upd: 0;
       c1qxZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jqS_info" {
     sat_s1jqS_info:
         const sat_s1jqS_entry;
         const 2;
         const 18;
 },
 _c1qxY() //  [R1]
         { []
         }
     {offset
       c1qxY: // global
           I64[Sp] = block_c1qy4_info;
           R1 = P64[R1 + 15];
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c1qxY_info" {
     block_c1qxY_info:
         const _c1qxY;
         const 1;
         const 30;
 },
 _c1qy4() //  [R1]
         { []
         }
     {offset
       c1qy4: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1qyc; else goto c1qyb;
       c1qyc: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c1qyb: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1qy4_info" {
     block_c1qy4_info:
         const _c1qy4;
         const 1;
         const 30;
 },
 sat_s1jqM_entry() //  [R1]
         { []
         }
     {offset
       c1qyn: // global
           _s1jqM::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c1qyo; else goto c1qyp;
       c1qyp: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1qyr; else goto c1qyq;
       c1qyr: // global
           HpAlloc = 24;
           goto c1qyo;
       c1qyo: // global
           R1 = _s1jqM::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1qyq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1jqM::P64;
           _s1jqB::P64 = P64[_s1jqM::P64 + 16];
           _s1jqF::P64 = P64[_s1jqM::P64 + 24];
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _s1jqF::P64;
           R2 = _s1jqB::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 32;
           call GHC.Real.toInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jqM_info" {
     sat_s1jqM_info:
         const sat_s1jqM_entry;
         const 2;
         const 18;
 },
 sat_s1jqN_entry() //  [R1]
         { []
         }
     {offset
       c1qyu: // global
           _s1jqN::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c1qyy; else goto c1qyz;
       c1qyz: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1qyB; else goto c1qyA;
       c1qyB: // global
           HpAlloc = 32;
           goto c1qyy;
       c1qyy: // global
           R1 = _s1jqN::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1qyA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1jqN::P64;
           _s1jqB::P64 = P64[_s1jqN::P64 + 16];
           _s1jqC::P64 = P64[_s1jqN::P64 + 24];
           _s1jqF::P64 = P64[_s1jqN::P64 + 32];
           I64[Hp - 24] = sat_s1jqM_info;
           P64[Hp - 8] = _s1jqB::P64;
           P64[Hp] = _s1jqF::P64;
           I64[Sp - 32] = block_c1qys_info;
           R2 = _s1jqC::P64;
           P64[Sp - 24] = Hp - 24;
           Sp = Sp - 32;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jqN_info" {
     sat_s1jqN_info:
         const sat_s1jqN_entry;
         const 3;
         const 15;
 },
 _c1qys() //  [R1]
         { []
         }
     {offset
       c1qys: // global
           I64[Sp] = block_c1qyx_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c1qys_info" {
     block_c1qys_info:
         const _c1qys;
         const 1;
         const 30;
 },
 _c1qyx() //  [R1]
         { []
         }
     {offset
       c1qyx: // global
           R2 = R1;
           I64[Sp] = stg_ap_p_info;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1qyx_info" {
     block_c1qyx_info:
         const _c1qyx;
         const 1;
         const 30;
 },
 GHC.Real.$w$cproperFraction_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c1qyH: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto c1qyL; else goto c1qyK;
       c1qyL: // global
           HpAlloc = 112;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$w$cproperFraction_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1qyK: // global
           I64[Hp - 104] = ds_s1jqF_info;
           P64[Hp - 88] = R2;
           P64[Hp - 80] = R4;
           P64[Hp - 72] = R5;
           I64[Hp - 64] = sat_s1jqS_info;
           P64[Hp - 48] = R5;
           _c1qxN::P64 = Hp - 104;
           P64[Hp - 40] = _c1qxN::P64;
           I64[Hp - 32] = sat_s1jqN_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = _c1qxN::P64;
           R2 = Hp - 64;
           R1 = Hp - 32;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$w$cproperFraction_info" {
     GHC.Real.$w$cproperFraction_info:
         const GHC.Real.$w$cproperFraction_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.535015865 UTC

[section ""data" . GHC.Real.$fEnumRatio_$cproperFraction_closure" {
     GHC.Real.$fEnumRatio_$cproperFraction_closure:
         const GHC.Real.$fEnumRatio_$cproperFraction_info;
 },
 GHC.Real.$fEnumRatio_$cproperFraction_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1qzx: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1qzD; else goto c1qzE;
       c1qzD: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fEnumRatio_$cproperFraction_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1qzE: // global
           I64[Sp - 24] = block_c1qzu_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u1qzJ; else goto c1qzv;
       u1qzJ: // global
           call _c1qzu(R1) args: 0, res: 0, upd: 0;
       c1qzv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fEnumRatio_$cproperFraction_info" {
     GHC.Real.$fEnumRatio_$cproperFraction_info:
         const GHC.Real.$fEnumRatio_$cproperFraction_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c1qzu() //  [R1]
         { []
         }
     {offset
       c1qzu: // global
           _s1jqU::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c1qzA_info;
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = _s1jqU::P64;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Real.$w$cproperFraction_entry(R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qzu_info" {
     block_c1qzu_info:
         const _c1qzu;
         const 2;
         const 30;
 },
 _c1qzA() //  [R1, R2]
         { []
         }
     {offset
       c1qzA: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1qzI; else goto c1qzH;
       c1qzI: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c1qzH: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qzA_info" {
     block_c1qzA_info:
         const _c1qzA;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.546254294 UTC

[section ""data" . GHC.Real.$wreduce_closure" {
     GHC.Real.$wreduce_closure:
         const GHC.Real.$wreduce_info;
         const 0;
 },
 sat_s1jr9_entry() //  [R1]
         { []
         }
     {offset
       c1qAb: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1qAc; else goto c1qAd;
       c1qAc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1qAd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c1qA9_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jr9_info" {
     sat_s1jr9_info:
         const sat_s1jr9_entry;
         const 1;
         const 4294967312;
         const S1jKw_srt+680;
 },
 _c1qA9() //  [R1]
         { []
         }
     {offset
       c1qA9: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = GHC.Real.even1_closure;
           Sp = Sp - 8;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1qA9_info" {
     block_c1qA9_info:
         const _c1qA9;
         const 0;
         const 4294967326;
         const S1jKw_srt+680;
 },
 d_s1jrb_entry() //  [R1]
         { []
         }
     {offset
       c1qAx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1qAy; else goto c1qAz;
       c1qAy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1qAz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.gcd_entry(R4, R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . d_s1jrb_info" {
     d_s1jrb_info:
         const d_s1jrb_entry;
         const 3;
         const 4294967311;
         const S1jKw_srt+856;
 },
 section ""relreadonly" . u1qAY_srtd" {
     u1qAY_srtd:
         const S1jKw_srt+296;
         const 72;
         const 281474976710657;
         const 192;
 },
 GHC.Real.$wreduce_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1qAA: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c1qAB; else goto c1qAC;
       c1qAB: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$wreduce_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1qAC: // global
           I64[Sp - 32] = block_c1qA1_info;
           _s1jr2::P64 = R2;
           R2 = R2;
           P64[Sp - 24] = _s1jr2::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$wreduce_info" {
     GHC.Real.$wreduce_info:
         const GHC.Real.$wreduce_entry;
         const 0;
         const 18446744069414584334;
         const 12884901911;
         const u1qAY_srtd;
 },
 section ""relreadonly" . u1qAZ_srtd" {
     u1qAZ_srtd:
         const S1jKw_srt+296;
         const 71;
         const 281474976710657;
         const 64;
 },
 _c1qA1() //  [R1]
         { []
         }
     {offset
       c1qA1: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1qAF; else goto c1qAE;
       c1qAF: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1qAE: // global
           I64[Hp - 16] = sat_s1jr9_info;
           P64[Hp] = R1;
           I64[Sp - 8] = block_c1qAh_info;
           R2 = R1;
           P64[Sp] = Hp - 16;
           Sp = Sp - 8;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qA1_info" {
     block_c1qA1_info:
         const _c1qA1;
         const 3;
         const 18446744069414584350;
         const u1qAZ_srtd;
 },
 section ""relreadonly" . u1qB0_srtd" {
     u1qB0_srtd:
         const S1jKw_srt+296;
         const 71;
         const 1;
         const 64;
 },
 _c1qAh() //  [R1]
         { []
         }
     {offset
       c1qAh: // global
           I64[Sp] = block_c1qAl_info;
           R2 = R1;
           call GHC.Classes.$p1Ord_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qAh_info" {
     block_c1qAh_info:
         const _c1qAh;
         const 4;
         const 18446744069414584350;
         const u1qB0_srtd;
 },
 section ""relreadonly" . u1qB1_srtd" {
     u1qB1_srtd:
         const S1jKw_srt+296;
         const 71;
         const 1;
         const 64;
 },
 _c1qAl() //  [R1]
         { []
         }
     {offset
       c1qAl: // global
           _c1qA5::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1qAp_info;
           R2 = R1;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = P64[Sp + 32];
           P64[Sp] = _c1qA5::P64;
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qAl_info" {
     block_c1qAl_info:
         const _c1qAl;
         const 4;
         const 18446744069414584350;
         const u1qB1_srtd;
 },
 section ""relreadonly" . u1qB2_srtd" {
     u1qB2_srtd:
         const S1jKw_srt+296;
         const 71;
         const 1;
         const 64;
 },
 _c1qAp() //  [R1]
         { []
         }
     {offset
       c1qAp: // global
           if (R1 & 7 == 1) goto c1qAM; else goto c1qAW;
       c1qAM: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c1qAP; else goto c1qAO;
       c1qAP: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1qAO: // global
           I64[Hp - 32] = d_s1jrb_info;
           _s1jr2::P64 = P64[Sp + 8];
           P64[Hp - 16] = _s1jr2::P64;
           _s1jr3::P64 = P64[Sp + 16];
           P64[Hp - 8] = _s1jr3::P64;
           P64[Hp] = P64[Sp + 24];
           I64[Sp] = block_c1qAI_info;
           R2 = _s1jr2::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _s1jr3::P64;
           _c1qAt::P64 = Hp - 32;
           P64[Sp - 8] = _c1qAt::P64;
           P64[Sp + 16] = _c1qAt::P64;
           Sp = Sp - 24;
           call GHC.Real.quot_entry(R2) args: 32, res: 8, upd: 8;
       c1qAW: // global
           R1 = GHC.Real.ratioZeroDenominatorError_closure;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qAp_info" {
     block_c1qAp_info:
         const _c1qAp;
         const 3;
         const 18446744069414584350;
         const u1qB2_srtd;
 },
 _c1qAI() //  [R1]
         { []
         }
     {offset
       c1qAI: // global
           _c1qAt::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c1qAK_info;
           R2 = P64[Sp + 8];
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = P64[Sp + 24];
           P64[Sp + 8] = _c1qAt::P64;
           P64[Sp + 24] = R1;
           Sp = Sp - 8;
           call GHC.Real.quot_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qAI_info" {
     block_c1qAI_info:
         const _c1qAI;
         const 3;
         const 30;
 },
 _c1qAK() //  [R1]
         { []
         }
     {offset
       c1qAK: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qAK_info" {
     block_c1qAK_info:
         const _c1qAK;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.568652301 UTC

[section ""data" . GHC.Real.reduce_closure" {
     GHC.Real.reduce_closure:
         const GHC.Real.reduce_info;
         const 0;
 },
 GHC.Real.reduce_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1qBU: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1qBV; else goto c1qBW;
       c1qBV: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.reduce_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1qBW: // global
           I64[Sp - 8] = block_c1qBR_info;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Real.$wreduce_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.reduce_info" {
     GHC.Real.reduce_info:
         const GHC.Real.reduce_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S1jKw_srt+864;
 },
 _c1qBR() //  [R1, R2]
         { []
         }
     {offset
       c1qBR: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1qBZ; else goto c1qBY;
       c1qBZ: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c1qBY: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qBR_info" {
     block_c1qBR_info:
         const _c1qBR;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.575155635 UTC

[section ""data" . GHC.Real.%_$s%_closure" {
     GHC.Real.%_$s%_closure:
         const GHC.Real.%_$s%_info;
         const 0;
 },
 GHC.Real.%_$s%_entry() //  [R2, R3]
         { []
         }
     {offset
       c1qCg: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1qCh; else goto c1qCi;
       c1qCh: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.%_$s%_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1qCi: // global
           I64[Sp - 8] = block_c1qCd_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Real.$w$s$cfromRational_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.%_$s%_info" {
     GHC.Real.%_$s%_info:
         const GHC.Real.%_$s%_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S1jKw_srt+880;
 },
 _c1qCd() //  [R1, R2]
         { []
         }
     {offset
       c1qCd: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1qCl; else goto c1qCk;
       c1qCl: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c1qCk: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qCd_info" {
     block_c1qCd_info:
         const _c1qCd;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.582781708 UTC

[section ""data" . GHC.Real.$w%_closure" {
     GHC.Real.$w%_closure:
         const GHC.Real.$w%_info;
         const 0;
 },
 $dReal_s1jrt_entry() //  [R1]
         { []
         }
     {offset
       c1qCD: // global
           R2 = P64[R1 + 16];
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $dReal_s1jrt_info" {
     $dReal_s1jrt_info:
         const $dReal_s1jrt_entry;
         const 1;
         const 16;
 },
 $dNum_s1jru_entry() //  [R1]
         { []
         }
     {offset
       c1qCK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1qCL; else goto c1qCM;
       c1qCL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1qCM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dNum_s1jru_info" {
     $dNum_s1jru_info:
         const $dNum_s1jru_entry;
         const 1;
         const 16;
 },
 sat_s1jrx_entry() //  [R1]
         { []
         }
     {offset
       c1qCR: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1qCS; else goto c1qCT;
       c1qCS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1qCT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Num.abs_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jrx_info" {
     sat_s1jrx_info:
         const sat_s1jrx_entry;
         const 2;
         const 18;
 },
 sat_s1jrv_entry() //  [R1]
         { []
         }
     {offset
       c1qD2: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1qD3; else goto c1qD4;
       c1qD3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1qD4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Num.signum_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jrv_info" {
     sat_s1jrv_info:
         const sat_s1jrv_entry;
         const 2;
         const 18;
 },
 sat_s1jrw_entry() //  [R1]
         { []
         }
     {offset
       c1qD5: // global
           _s1jrw::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c1qD6; else goto c1qD7;
       c1qD7: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1qD9; else goto c1qD8;
       c1qD9: // global
           HpAlloc = 32;
           goto c1qD6;
       c1qD6: // global
           R1 = _s1jrw::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1qD8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1jrw::P64;
           _s1jrr::P64 = P64[_s1jrw::P64 + 16];
           _s1jrs::P64 = P64[_s1jrw::P64 + 24];
           _s1jru::P64 = P64[_s1jrw::P64 + 32];
           I64[Hp - 24] = sat_s1jrv_info;
           P64[Hp - 8] = _s1jrs::P64;
           P64[Hp] = _s1jru::P64;
           R2 = _s1jru::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _s1jrr::P64;
           P64[Sp - 24] = Hp - 24;
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jrw_info" {
     sat_s1jrw_info:
         const sat_s1jrw_entry;
         const 3;
         const 15;
 },
 GHC.Real.$w%_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1qDa: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto c1qDe; else goto c1qDd;
       c1qDe: // global
           HpAlloc = 120;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$w%_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1qDd: // global
           I64[Hp - 112] = $dReal_s1jrt_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = $dNum_s1jru_info;
           P64[Hp - 72] = Hp - 112;
           I64[Hp - 64] = sat_s1jrx_info;
           P64[Hp - 48] = R4;
           _c1qCG::P64 = Hp - 88;
           P64[Hp - 40] = _c1qCG::P64;
           I64[Hp - 32] = sat_s1jrw_info;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = _c1qCG::P64;
           R4 = Hp - 64;
           R3 = Hp - 32;
           R2 = R2;
           call GHC.Real.$wreduce_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$w%_info" {
     GHC.Real.$w%_info:
         const GHC.Real.$w%_entry;
         const 0;
         const 73014444046;
         const 12884901911;
         const S1jKw_srt+864;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.596235322 UTC

[section ""data" . GHC.Real.%_closure" {
     GHC.Real.%_closure:
         const GHC.Real.%_info;
         const 0;
 },
 GHC.Real.%_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1qDN: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1qDO; else goto c1qDP;
       c1qDO: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.%_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1qDP: // global
           I64[Sp - 8] = block_c1qDK_info;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Real.$w%_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.%_info" {
     GHC.Real.%_info:
         const GHC.Real.%_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S1jKw_srt+896;
 },
 _c1qDK() //  [R1, R2]
         { []
         }
     {offset
       c1qDK: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1qDS; else goto c1qDR;
       c1qDS: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c1qDR: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qDK_info" {
     block_c1qDK_info:
         const _c1qDK;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.604109884 UTC

[section ""data" . GHC.Real.$w$c/_closure" {
     GHC.Real.$w$c/_closure:
         const GHC.Real.$w$c/_info;
         const 0;
 },
 $dReal_s1jrJ_entry() //  [R1]
         { []
         }
     {offset
       c1qEa: // global
           R2 = P64[R1 + 16];
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $dReal_s1jrJ_info" {
     $dReal_s1jrJ_info:
         const $dReal_s1jrJ_entry;
         const 1;
         const 16;
 },
 $dNum_s1jrK_entry() //  [R1]
         { []
         }
     {offset
       c1qEh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1qEi; else goto c1qEj;
       c1qEi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1qEj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dNum_s1jrK_info" {
     $dNum_s1jrK_info:
         const $dNum_s1jrK_entry;
         const 1;
         const 16;
 },
 sat_s1jrM_entry() //  [R1]
         { []
         }
     {offset
       c1qEo: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1qEp; else goto c1qEq;
       c1qEp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1qEq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 32];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jrM_info" {
     sat_s1jrM_info:
         const sat_s1jrM_entry;
         const 3;
         const 15;
 },
 sat_s1jrL_entry() //  [R1]
         { []
         }
     {offset
       c1qEv: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1qEw; else goto c1qEx;
       c1qEw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1qEx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 32];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jrL_info" {
     sat_s1jrL_info:
         const sat_s1jrL_entry;
         const 3;
         const 15;
 },
 GHC.Real.$w$c/_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c1qEy: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto c1qEC; else goto c1qEB;
       c1qEC: // global
           HpAlloc = 128;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$w$c/_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1qEB: // global
           I64[Hp - 120] = $dReal_s1jrJ_info;
           P64[Hp - 104] = R2;
           I64[Hp - 96] = $dNum_s1jrK_info;
           P64[Hp - 80] = Hp - 120;
           I64[Hp - 72] = sat_s1jrM_info;
           P64[Hp - 56] = R4;
           P64[Hp - 48] = R5;
           _c1qEd::P64 = Hp - 96;
           P64[Hp - 40] = _c1qEd::P64;
           I64[Hp - 32] = sat_s1jrL_info;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R6;
           P64[Hp] = _c1qEd::P64;
           R4 = Hp - 72;
           R3 = Hp - 32;
           R2 = R2;
           call GHC.Real.$w%_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$w$c/_info" {
     GHC.Real.$w$c/_info:
         const GHC.Real.$w$c/_entry;
         const 0;
         const 21474836494;
         const 21474836505;
         const S1jKw_srt+896;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.61587745 UTC

[section ""data" . GHC.Real.$fFractionalRatio_$c/_closure" {
     GHC.Real.$fFractionalRatio_$c/_closure:
         const GHC.Real.$fFractionalRatio_$c/_info;
         const 0;
 },
 GHC.Real.$fFractionalRatio_$c/_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1qF8: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1qFj; else goto c1qFk;
       c1qFj: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fFractionalRatio_$c/_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1qFk: // global
           I64[Sp - 24] = block_c1qF5_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u1qFr; else goto c1qF6;
       u1qFr: // global
           call _c1qF5(R1) args: 0, res: 0, upd: 0;
       c1qF6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fFractionalRatio_$c/_info" {
     GHC.Real.$fFractionalRatio_$c/_info:
         const GHC.Real.$fFractionalRatio_$c/_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S1jKw_srt+912;
 },
 _c1qF5() //  [R1]
         { []
         }
     {offset
       c1qF5: // global
           I64[Sp - 8] = block_c1qFb_info;
           _s1jrR::P64 = P64[R1 + 7];
           _s1jrS::P64 = P64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp] = _s1jrS::P64;
           P64[Sp + 16] = _s1jrR::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1qFq; else goto c1qFc;
       u1qFq: // global
           call _c1qFb(R1) args: 0, res: 0, upd: 0;
       c1qFc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qF5_info" {
     block_c1qF5_info:
         const _c1qF5;
         const 2;
         const 4294967326;
         const S1jKw_srt+912;
 },
 _c1qFb() //  [R1]
         { []
         }
     {offset
       c1qFb: // global
           _s1jrR::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_c1qFg_info;
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = P64[Sp + 8];
           R3 = _s1jrR::P64;
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call GHC.Real.$w$c/_entry(R6,
                                     R5,
                                     R4,
                                     R3,
                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qFb_info" {
     block_c1qFb_info:
         const _c1qFb;
         const 3;
         const 4294967326;
         const S1jKw_srt+912;
 },
 _c1qFg() //  [R1, R2]
         { []
         }
     {offset
       c1qFg: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1qFp; else goto c1qFo;
       c1qFp: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c1qFo: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qFg_info" {
     block_c1qFg_info:
         const _c1qFg;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.627256816 UTC

[section ""data" . GHC.Real.$w$cfromRational_closure" {
     GHC.Real.$w$cfromRational_closure:
         const GHC.Real.$w$cfromRational_info;
         const 0;
 },
 $dReal_s1js2_entry() //  [R1]
         { []
         }
     {offset
       c1qFR: // global
           R2 = P64[R1 + 16];
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $dReal_s1js2_info" {
     $dReal_s1js2_info:
         const $dReal_s1js2_entry;
         const 1;
         const 16;
 },
 $dNum_s1js3_entry() //  [R1]
         { []
         }
     {offset
       c1qFY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1qFZ; else goto c1qG0;
       c1qFZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1qG0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dNum_s1js3_info" {
     $dNum_s1js3_info:
         const $dNum_s1js3_entry;
         const 1;
         const 16;
 },
 sat_s1js5_entry() //  [R1]
         { []
         }
     {offset
       c1qG5: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1qG6; else goto c1qG7;
       c1qG6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1qG7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1js5_info" {
     sat_s1js5_info:
         const sat_s1js5_entry;
         const 2;
         const 18;
 },
 sat_s1js4_entry() //  [R1]
         { []
         }
     {offset
       c1qGc: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1qGd; else goto c1qGe;
       c1qGd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1qGe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1js4_info" {
     sat_s1js4_info:
         const sat_s1js4_entry;
         const 2;
         const 18;
 },
 GHC.Real.$w$cfromRational_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1qGf: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto c1qGj; else goto c1qGi;
       c1qGj: // global
           HpAlloc = 112;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$w$cfromRational_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1qGi: // global
           I64[Hp - 104] = $dReal_s1js2_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = $dNum_s1js3_info;
           P64[Hp - 64] = Hp - 104;
           I64[Hp - 56] = sat_s1js5_info;
           P64[Hp - 40] = R4;
           _c1qFU::P64 = Hp - 80;
           P64[Hp - 32] = _c1qFU::P64;
           I64[Hp - 24] = sat_s1js4_info;
           P64[Hp - 8] = R3;
           P64[Hp] = _c1qFU::P64;
           R4 = Hp - 56;
           R3 = Hp - 24;
           R2 = R2;
           call GHC.Real.$w%_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$w$cfromRational_info" {
     GHC.Real.$w$cfromRational_info:
         const GHC.Real.$w$cfromRational_entry;
         const 0;
         const 73014444046;
         const 12884901911;
         const S1jKw_srt+896;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.638463751 UTC

[section ""data" . GHC.Real.$fFractionalRatio_$cfromRational_closure" {
     GHC.Real.$fFractionalRatio_$cfromRational_closure:
         const GHC.Real.$fFractionalRatio_$cfromRational_info;
         const 0;
 },
 GHC.Real.$fFractionalRatio_$cfromRational_entry() //  [R2, R3]
         { []
         }
     {offset
       c1qGN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1qGT; else goto c1qGU;
       c1qGT: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fFractionalRatio_$cfromRational_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1qGU: // global
           I64[Sp - 16] = block_c1qGK_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1qGZ; else goto c1qGL;
       u1qGZ: // global
           call _c1qGK(R1) args: 0, res: 0, upd: 0;
       c1qGL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fFractionalRatio_$cfromRational_info" {
     GHC.Real.$fFractionalRatio_$cfromRational_info:
         const GHC.Real.$fFractionalRatio_$cfromRational_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S1jKw_srt+928;
 },
 _c1qGK() //  [R1]
         { []
         }
     {offset
       c1qGK: // global
           _s1js6::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1qGQ_info;
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = _s1js6::P64;
           Sp = Sp + 8;
           call GHC.Real.$w$cfromRational_entry(R4,
                                                R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qGK_info" {
     block_c1qGK_info:
         const _c1qGK;
         const 1;
         const 4294967326;
         const S1jKw_srt+928;
 },
 _c1qGQ() //  [R1, R2]
         { []
         }
     {offset
       c1qGQ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1qGY; else goto c1qGX;
       c1qGY: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c1qGX: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qGQ_info" {
     block_c1qGQ_info:
         const _c1qGQ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.648403343 UTC

[section ""data" . GHC.Real.$w$c+_closure" {
     GHC.Real.$w$c+_closure:
         const GHC.Real.$w$c+_info;
         const 0;
 },
 $dReal_s1jsj_entry() //  [R1]
         { []
         }
     {offset
       c1qHl: // global
           R2 = P64[R1 + 16];
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $dReal_s1jsj_info" {
     $dReal_s1jsj_info:
         const $dReal_s1jsj_entry;
         const 1;
         const 16;
 },
 $dNum_s1jsk_entry() //  [R1]
         { []
         }
     {offset
       c1qHs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1qHt; else goto c1qHu;
       c1qHt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1qHu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dNum_s1jsk_info" {
     $dNum_s1jsk_info:
         const $dNum_s1jsk_entry;
         const 1;
         const 16;
 },
 sat_s1jso_entry() //  [R1]
         { []
         }
     {offset
       c1qHz: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1qHA; else goto c1qHB;
       c1qHA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1qHB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 32];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jso_info" {
     sat_s1jso_info:
         const sat_s1jso_entry;
         const 3;
         const 15;
 },
 sat_s1jsm_entry() //  [R1]
         { []
         }
     {offset
       c1qHK: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1qHL; else goto c1qHM;
       c1qHL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1qHM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 32];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jsm_info" {
     sat_s1jsm_info:
         const sat_s1jsm_entry;
         const 3;
         const 15;
 },
 sat_s1jsl_entry() //  [R1]
         { []
         }
     {offset
       c1qHR: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1qHS; else goto c1qHT;
       c1qHS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1qHT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 32];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jsl_info" {
     sat_s1jsl_info:
         const sat_s1jsl_entry;
         const 3;
         const 15;
 },
 sat_s1jsn_entry() //  [R1]
         { []
         }
     {offset
       c1qHU: // global
           _s1jsn::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c1qHV; else goto c1qHW;
       c1qHW: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c1qHY; else goto c1qHX;
       c1qHY: // global
           HpAlloc = 80;
           goto c1qHV;
       c1qHV: // global
           R1 = _s1jsn::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1qHX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1jsn::P64;
           _s1jsf::P64 = P64[_s1jsn::P64 + 16];
           _s1jsg::P64 = P64[_s1jsn::P64 + 24];
           _s1jsh::P64 = P64[_s1jsn::P64 + 32];
           _s1jsi::P64 = P64[_s1jsn::P64 + 40];
           _s1jsk::P64 = P64[_s1jsn::P64 + 48];
           I64[Hp - 72] = sat_s1jsm_info;
           P64[Hp - 56] = _s1jsg::P64;
           P64[Hp - 48] = _s1jsh::P64;
           P64[Hp - 40] = _s1jsk::P64;
           I64[Hp - 32] = sat_s1jsl_info;
           P64[Hp - 16] = _s1jsf::P64;
           P64[Hp - 8] = _s1jsi::P64;
           P64[Hp] = _s1jsk::P64;
           R2 = _s1jsk::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 32;
           P64[Sp - 24] = Hp - 72;
           Sp = Sp - 40;
           call GHC.Num.+_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jsn_info" {
     sat_s1jsn_info:
         const sat_s1jsn_entry;
         const 5;
         const 15;
 },
 GHC.Real.$w$c+_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c1qHZ: // global
           Hp = Hp + 144;
           if (Hp > HpLim) (likely: False) goto c1qI3; else goto c1qI2;
       c1qI3: // global
           HpAlloc = 144;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$w$c+_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1qI2: // global
           I64[Hp - 136] = $dReal_s1jsj_info;
           P64[Hp - 120] = R2;
           I64[Hp - 112] = $dNum_s1jsk_info;
           P64[Hp - 96] = Hp - 136;
           I64[Hp - 88] = sat_s1jso_info;
           P64[Hp - 72] = R4;
           P64[Hp - 64] = R6;
           _c1qHo::P64 = Hp - 112;
           P64[Hp - 56] = _c1qHo::P64;
           I64[Hp - 48] = sat_s1jsn_info;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           P64[Hp - 16] = R5;
           P64[Hp - 8] = R6;
           P64[Hp] = _c1qHo::P64;
           R4 = Hp - 88;
           R3 = Hp - 48;
           R2 = R2;
           call GHC.Real.$wreduce_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$w$c+_info" {
     GHC.Real.$w$c+_info:
         const GHC.Real.$w$c+_entry;
         const 0;
         const 4402341478414;
         const 21474836505;
         const S1jKw_srt+864;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.665030041 UTC

[section ""data" . GHC.Real.$fNumRatio_$c+_closure" {
     GHC.Real.$fNumRatio_$c+_closure:
         const GHC.Real.$fNumRatio_$c+_info;
         const 0;
 },
 GHC.Real.$fNumRatio_$c+_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1qIL: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1qIW; else goto c1qIX;
       c1qIW: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fNumRatio_$c+_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1qIX: // global
           I64[Sp - 24] = block_c1qII_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u1qJ4; else goto c1qIJ;
       u1qJ4: // global
           call _c1qII(R1) args: 0, res: 0, upd: 0;
       c1qIJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fNumRatio_$c+_info" {
     GHC.Real.$fNumRatio_$c+_info:
         const GHC.Real.$fNumRatio_$c+_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S1jKw_srt+944;
 },
 _c1qII() //  [R1]
         { []
         }
     {offset
       c1qII: // global
           I64[Sp - 8] = block_c1qIO_info;
           _s1jst::P64 = P64[R1 + 7];
           _s1jsu::P64 = P64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp] = _s1jsu::P64;
           P64[Sp + 16] = _s1jst::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1qJ3; else goto c1qIP;
       u1qJ3: // global
           call _c1qIO(R1) args: 0, res: 0, upd: 0;
       c1qIP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qII_info" {
     block_c1qII_info:
         const _c1qII;
         const 2;
         const 4294967326;
         const S1jKw_srt+944;
 },
 _c1qIO() //  [R1]
         { []
         }
     {offset
       c1qIO: // global
           _s1jst::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_c1qIT_info;
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = P64[Sp + 8];
           R3 = _s1jst::P64;
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call GHC.Real.$w$c+_entry(R6,
                                     R5,
                                     R4,
                                     R3,
                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qIO_info" {
     block_c1qIO_info:
         const _c1qIO;
         const 3;
         const 4294967326;
         const S1jKw_srt+944;
 },
 _c1qIT() //  [R1, R2]
         { []
         }
     {offset
       c1qIT: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1qJ2; else goto c1qJ1;
       c1qJ2: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c1qJ1: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qIT_info" {
     block_c1qIT_info:
         const _c1qIT;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.677357336 UTC

[section ""data" . GHC.Real.$w$c-_closure" {
     GHC.Real.$w$c-_closure:
         const GHC.Real.$w$c-_info;
         const 0;
 },
 $dReal_s1jsG_entry() //  [R1]
         { []
         }
     {offset
       c1qJu: // global
           R2 = P64[R1 + 16];
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $dReal_s1jsG_info" {
     $dReal_s1jsG_info:
         const $dReal_s1jsG_entry;
         const 1;
         const 16;
 },
 $dNum_s1jsH_entry() //  [R1]
         { []
         }
     {offset
       c1qJB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1qJC; else goto c1qJD;
       c1qJC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1qJD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dNum_s1jsH_info" {
     $dNum_s1jsH_info:
         const $dNum_s1jsH_entry;
         const 1;
         const 16;
 },
 sat_s1jsL_entry() //  [R1]
         { []
         }
     {offset
       c1qJI: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1qJJ; else goto c1qJK;
       c1qJJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1qJK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 32];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jsL_info" {
     sat_s1jsL_info:
         const sat_s1jsL_entry;
         const 3;
         const 15;
 },
 sat_s1jsJ_entry() //  [R1]
         { []
         }
     {offset
       c1qJT: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1qJU; else goto c1qJV;
       c1qJU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1qJV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 32];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jsJ_info" {
     sat_s1jsJ_info:
         const sat_s1jsJ_entry;
         const 3;
         const 15;
 },
 sat_s1jsI_entry() //  [R1]
         { []
         }
     {offset
       c1qK0: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1qK1; else goto c1qK2;
       c1qK1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1qK2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 32];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jsI_info" {
     sat_s1jsI_info:
         const sat_s1jsI_entry;
         const 3;
         const 15;
 },
 sat_s1jsK_entry() //  [R1]
         { []
         }
     {offset
       c1qK3: // global
           _s1jsK::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c1qK4; else goto c1qK5;
       c1qK5: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c1qK7; else goto c1qK6;
       c1qK7: // global
           HpAlloc = 80;
           goto c1qK4;
       c1qK4: // global
           R1 = _s1jsK::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1qK6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1jsK::P64;
           _s1jsC::P64 = P64[_s1jsK::P64 + 16];
           _s1jsD::P64 = P64[_s1jsK::P64 + 24];
           _s1jsE::P64 = P64[_s1jsK::P64 + 32];
           _s1jsF::P64 = P64[_s1jsK::P64 + 40];
           _s1jsH::P64 = P64[_s1jsK::P64 + 48];
           I64[Hp - 72] = sat_s1jsJ_info;
           P64[Hp - 56] = _s1jsD::P64;
           P64[Hp - 48] = _s1jsE::P64;
           P64[Hp - 40] = _s1jsH::P64;
           I64[Hp - 32] = sat_s1jsI_info;
           P64[Hp - 16] = _s1jsC::P64;
           P64[Hp - 8] = _s1jsF::P64;
           P64[Hp] = _s1jsH::P64;
           R2 = _s1jsH::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 32;
           P64[Sp - 24] = Hp - 72;
           Sp = Sp - 40;
           call GHC.Num.-_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jsK_info" {
     sat_s1jsK_info:
         const sat_s1jsK_entry;
         const 5;
         const 15;
 },
 GHC.Real.$w$c-_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c1qK8: // global
           Hp = Hp + 144;
           if (Hp > HpLim) (likely: False) goto c1qKc; else goto c1qKb;
       c1qKc: // global
           HpAlloc = 144;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$w$c-_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1qKb: // global
           I64[Hp - 136] = $dReal_s1jsG_info;
           P64[Hp - 120] = R2;
           I64[Hp - 112] = $dNum_s1jsH_info;
           P64[Hp - 96] = Hp - 136;
           I64[Hp - 88] = sat_s1jsL_info;
           P64[Hp - 72] = R4;
           P64[Hp - 64] = R6;
           _c1qJx::P64 = Hp - 112;
           P64[Hp - 56] = _c1qJx::P64;
           I64[Hp - 48] = sat_s1jsK_info;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           P64[Hp - 16] = R5;
           P64[Hp - 8] = R6;
           P64[Hp] = _c1qJx::P64;
           R4 = Hp - 88;
           R3 = Hp - 48;
           R2 = R2;
           call GHC.Real.$wreduce_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$w$c-_info" {
     GHC.Real.$w$c-_info:
         const GHC.Real.$w$c-_entry;
         const 0;
         const 17596481011726;
         const 21474836505;
         const S1jKw_srt+864;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.693697808 UTC

[section ""data" . GHC.Real.$fNumRatio_$c-_closure" {
     GHC.Real.$fNumRatio_$c-_closure:
         const GHC.Real.$fNumRatio_$c-_info;
         const 0;
 },
 GHC.Real.$fNumRatio_$c-_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1qKU: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1qL5; else goto c1qL6;
       c1qL5: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fNumRatio_$c-_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1qL6: // global
           I64[Sp - 24] = block_c1qKR_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u1qLd; else goto c1qKS;
       u1qLd: // global
           call _c1qKR(R1) args: 0, res: 0, upd: 0;
       c1qKS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fNumRatio_$c-_info" {
     GHC.Real.$fNumRatio_$c-_info:
         const GHC.Real.$fNumRatio_$c-_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S1jKw_srt+960;
 },
 _c1qKR() //  [R1]
         { []
         }
     {offset
       c1qKR: // global
           I64[Sp - 8] = block_c1qKX_info;
           _s1jsQ::P64 = P64[R1 + 7];
           _s1jsR::P64 = P64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp] = _s1jsR::P64;
           P64[Sp + 16] = _s1jsQ::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1qLc; else goto c1qKY;
       u1qLc: // global
           call _c1qKX(R1) args: 0, res: 0, upd: 0;
       c1qKY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qKR_info" {
     block_c1qKR_info:
         const _c1qKR;
         const 2;
         const 4294967326;
         const S1jKw_srt+960;
 },
 _c1qKX() //  [R1]
         { []
         }
     {offset
       c1qKX: // global
           _s1jsQ::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_c1qL2_info;
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = P64[Sp + 8];
           R3 = _s1jsQ::P64;
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call GHC.Real.$w$c-_entry(R6,
                                     R5,
                                     R4,
                                     R3,
                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qKX_info" {
     block_c1qKX_info:
         const _c1qKX;
         const 3;
         const 4294967326;
         const S1jKw_srt+960;
 },
 _c1qL2() //  [R1, R2]
         { []
         }
     {offset
       c1qL2: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1qLb; else goto c1qLa;
       c1qLb: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c1qLa: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qL2_info" {
     block_c1qL2_info:
         const _c1qL2;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.704353037 UTC

[section ""data" . GHC.Real.$w$c*_closure" {
     GHC.Real.$w$c*_closure:
         const GHC.Real.$w$c*_info;
         const 0;
 },
 $dReal_s1jt3_entry() //  [R1]
         { []
         }
     {offset
       c1qLD: // global
           R2 = P64[R1 + 16];
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $dReal_s1jt3_info" {
     $dReal_s1jt3_info:
         const $dReal_s1jt3_entry;
         const 1;
         const 16;
 },
 $dNum_s1jt4_entry() //  [R1]
         { []
         }
     {offset
       c1qLK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1qLL; else goto c1qLM;
       c1qLL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1qLM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dNum_s1jt4_info" {
     $dNum_s1jt4_info:
         const $dNum_s1jt4_entry;
         const 1;
         const 16;
 },
 sat_s1jt6_entry() //  [R1]
         { []
         }
     {offset
       c1qLR: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1qLS; else goto c1qLT;
       c1qLS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1qLT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 32];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jt6_info" {
     sat_s1jt6_info:
         const sat_s1jt6_entry;
         const 3;
         const 15;
 },
 sat_s1jt5_entry() //  [R1]
         { []
         }
     {offset
       c1qLY: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1qLZ; else goto c1qM0;
       c1qLZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1qM0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 32];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jt5_info" {
     sat_s1jt5_info:
         const sat_s1jt5_entry;
         const 3;
         const 15;
 },
 GHC.Real.$w$c*_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c1qM1: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto c1qM5; else goto c1qM4;
       c1qM5: // global
           HpAlloc = 128;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$w$c*_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1qM4: // global
           I64[Hp - 120] = $dReal_s1jt3_info;
           P64[Hp - 104] = R2;
           I64[Hp - 96] = $dNum_s1jt4_info;
           P64[Hp - 80] = Hp - 120;
           I64[Hp - 72] = sat_s1jt6_info;
           P64[Hp - 56] = R4;
           P64[Hp - 48] = R6;
           _c1qLG::P64 = Hp - 96;
           P64[Hp - 40] = _c1qLG::P64;
           I64[Hp - 32] = sat_s1jt5_info;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R5;
           P64[Hp] = _c1qLG::P64;
           R4 = Hp - 72;
           R3 = Hp - 32;
           R2 = R2;
           call GHC.Real.$wreduce_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$w$c*_info" {
     GHC.Real.$w$c*_info:
         const GHC.Real.$w$c*_entry;
         const 0;
         const 70373039144974;
         const 21474836505;
         const S1jKw_srt+864;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.716487163 UTC

[section ""data" . GHC.Real.$fNumRatio_$c*_closure" {
     GHC.Real.$fNumRatio_$c*_closure:
         const GHC.Real.$fNumRatio_$c*_info;
         const 0;
 },
 GHC.Real.$fNumRatio_$c*_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1qMB: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1qMM; else goto c1qMN;
       c1qMM: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fNumRatio_$c*_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1qMN: // global
           I64[Sp - 24] = block_c1qMy_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u1qMU; else goto c1qMz;
       u1qMU: // global
           call _c1qMy(R1) args: 0, res: 0, upd: 0;
       c1qMz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fNumRatio_$c*_info" {
     GHC.Real.$fNumRatio_$c*_info:
         const GHC.Real.$fNumRatio_$c*_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S1jKw_srt+976;
 },
 _c1qMy() //  [R1]
         { []
         }
     {offset
       c1qMy: // global
           I64[Sp - 8] = block_c1qME_info;
           _s1jtb::P64 = P64[R1 + 7];
           _s1jtc::P64 = P64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp] = _s1jtc::P64;
           P64[Sp + 16] = _s1jtb::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1qMT; else goto c1qMF;
       u1qMT: // global
           call _c1qME(R1) args: 0, res: 0, upd: 0;
       c1qMF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qMy_info" {
     block_c1qMy_info:
         const _c1qMy;
         const 2;
         const 4294967326;
         const S1jKw_srt+976;
 },
 _c1qME() //  [R1]
         { []
         }
     {offset
       c1qME: // global
           _s1jtb::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_c1qMJ_info;
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = P64[Sp + 8];
           R3 = _s1jtb::P64;
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call GHC.Real.$w$c*_entry(R6,
                                     R5,
                                     R4,
                                     R3,
                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qME_info" {
     block_c1qME_info:
         const _c1qME;
         const 3;
         const 4294967326;
         const S1jKw_srt+976;
 },
 _c1qMJ() //  [R1, R2]
         { []
         }
     {offset
       c1qMJ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1qMS; else goto c1qMR;
       c1qMS: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c1qMR: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qMJ_info" {
     block_c1qMJ_info:
         const _c1qMJ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.727541401 UTC

[section ""data" . GHC.Real.$fNumRatio_closure" {
     GHC.Real.$fNumRatio_closure:
         const GHC.Real.$fNumRatio_info;
         const 0;
 },
 sat_s1jtq_entry() //  [R1, R2]
         { []
         }
     {offset
       c1qNl: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call GHC.Real.$fNumRatio_$cfromInteger_entry(R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1jtq_info" {
     sat_s1jtq_info:
         const sat_s1jtq_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S1jKw_srt+808;
 },
 sat_s1jtp_entry() //  [R1, R2]
         { []
         }
     {offset
       c1qNt: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call GHC.Real.$fNumRatio_$csignum_entry(R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1jtp_info" {
     sat_s1jtp_info:
         const sat_s1jtp_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S1jKw_srt+792;
 },
 sat_s1jto_entry() //  [R1, R2]
         { []
         }
     {offset
       c1qNB: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call GHC.Real.$fNumRatio_$cabs_entry(R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1jto_info" {
     sat_s1jto_info:
         const sat_s1jto_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s1jtn_entry() //  [R1, R2]
         { []
         }
     {offset
       c1qNJ: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call GHC.Real.$fNumRatio_$cnegate_entry(R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1jtn_info" {
     sat_s1jtn_info:
         const sat_s1jtn_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s1jtm_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c1qNR: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Real.$fNumRatio_$c*_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1jtm_info" {
     sat_s1jtm_info:
         const sat_s1jtm_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const S1jKw_srt+984;
 },
 sat_s1jtl_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c1qNZ: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Real.$fNumRatio_$c-_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1jtl_info" {
     sat_s1jtl_info:
         const sat_s1jtl_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const S1jKw_srt+968;
 },
 sat_s1jtk_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c1qO7: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Real.$fNumRatio_$c+_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1jtk_info" {
     sat_s1jtk_info:
         const sat_s1jtk_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const S1jKw_srt+952;
 },
 GHC.Real.$fNumRatio_entry() //  [R2]
         { []
         }
     {offset
       c1qOb: // global
           Hp = Hp + 176;
           if (Hp > HpLim) (likely: False) goto c1qOf; else goto c1qOe;
       c1qOf: // global
           HpAlloc = 176;
           R2 = R2;
           R1 = GHC.Real.$fNumRatio_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1qOe: // global
           I64[Hp - 168] = sat_s1jtq_info;
           P64[Hp - 160] = R2;
           I64[Hp - 152] = sat_s1jtp_info;
           P64[Hp - 144] = R2;
           I64[Hp - 136] = sat_s1jto_info;
           P64[Hp - 128] = R2;
           I64[Hp - 120] = sat_s1jtn_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_s1jtm_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_s1jtl_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_s1jtk_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = GHC.Num.C:Num_con_info;
           P64[Hp - 48] = Hp - 70;
           P64[Hp - 40] = Hp - 86;
           P64[Hp - 32] = Hp - 102;
           P64[Hp - 24] = Hp - 119;
           P64[Hp - 16] = Hp - 135;
           P64[Hp - 8] = Hp - 151;
           P64[Hp] = Hp - 167;
           R1 = Hp - 55;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fNumRatio_info" {
     GHC.Real.$fNumRatio_info:
         const GHC.Real.$fNumRatio_entry;
         const 0;
         const 238690801725472782;
         const 4294967301;
         const S1jKw_srt+792;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.742574785 UTC

[section ""data" . GHC.Real.$fEnumRatio3_closure" {
     GHC.Real.$fEnumRatio3_closure:
         const GHC.Real.:%_con_info;
         const GHC.Real.$fEnumRatio1_closure;
         const GHC.Real.$fEnumRatio1_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.745523485 UTC

[section ""data" . GHC.Real.$fEnumRatio_$s$csucc_closure" {
     GHC.Real.$fEnumRatio_$s$csucc_closure:
         const GHC.Real.$fEnumRatio_$s$csucc_info;
         const 0;
 },
 GHC.Real.$fEnumRatio_$s$csucc_entry() //  [R2]
         { []
         }
     {offset
       c1qOV: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1qP1; else goto c1qP2;
       c1qP1: // global
           R2 = R2;
           R1 = GHC.Real.$fEnumRatio_$s$csucc_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1qP2: // global
           I64[Sp - 8] = block_c1qOS_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1qP7; else goto c1qOT;
       u1qP7: // global
           call _c1qOS(R1) args: 0, res: 0, upd: 0;
       c1qOT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fEnumRatio_$s$csucc_info" {
     GHC.Real.$fEnumRatio_$s$csucc_info:
         const GHC.Real.$fEnumRatio_$s$csucc_entry;
         const 0;
         const 30064771086;
         const 4294967301;
         const S1jKw_srt+1000;
 },
 _c1qOS() //  [R1]
         { []
         }
     {offset
       c1qOS: // global
           I64[Sp] = block_c1qOY_info;
           R5 = GHC.Real.$fEnumRatio1_closure;
           R4 = GHC.Real.$fEnumRatio1_closure;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Real.$w$s$c+_entry(R5,
                                       R4,
                                       R3,
                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qOS_info" {
     block_c1qOS_info:
         const _c1qOS;
         const 0;
         const 12884901918;
         const S1jKw_srt+1008;
 },
 _c1qOY() //  [R1, R2]
         { []
         }
     {offset
       c1qOY: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1qP6; else goto c1qP5;
       c1qP6: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c1qP5: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qOY_info" {
     block_c1qOY_info:
         const _c1qOY;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.75385285 UTC

[section ""data" . GHC.Real.$fEnumRatio_$csucc_closure" {
     GHC.Real.$fEnumRatio_$csucc_closure:
         const GHC.Real.$fEnumRatio_$csucc_info;
         const 0;
 },
 GHC.Real.$fEnumRatio_$csucc_entry() //  [R2, R3]
         { []
         }
     {offset
       c1qPs: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1qPA; else goto c1qPB;
       c1qPA: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fEnumRatio_$csucc_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1qPB: // global
           I64[Sp - 16] = block_c1qPp_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1qPH; else goto c1qPq;
       u1qPH: // global
           call _c1qPp(R1) args: 0, res: 0, upd: 0;
       c1qPq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fEnumRatio_$csucc_info" {
     GHC.Real.$fEnumRatio_$csucc_info:
         const GHC.Real.$fEnumRatio_$csucc_entry;
         const 0;
         const 1442277784960368654;
         const 8589934607;
         const S1jKw_srt+800;
 },
 _c1qPp() //  [R1]
         { []
         }
     {offset
       c1qPp: // global
           I64[Sp - 16] = block_c1qPv_info;
           R3 = GHC.Real.$fEnumRatio1_closure;
           R2 = P64[Sp + 8];
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp] = P64[R1 + 7];
           Sp = Sp - 16;
           call GHC.Real.$w$cfromInteger_entry(R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qPp_info" {
     block_c1qPp_info:
         const _c1qPp;
         const 1;
         const 289356280353521694;
         const S1jKw_srt+800;
 },
 _c1qPv() //  [R1, R2]
         { []
         }
     {offset
       c1qPv: // global
           _s1jty::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_c1qPx_info;
           R6 = R2;
           R5 = R1;
           R4 = P64[Sp + 8];
           R3 = P64[Sp + 16];
           R2 = _s1jty::P64;
           Sp = Sp + 24;
           call GHC.Real.$w$c+_entry(R6,
                                     R5,
                                     R4,
                                     R3,
                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qPv_info" {
     block_c1qPv_info:
         const _c1qPv;
         const 3;
         const 4294967326;
         const S1jKw_srt+944;
 },
 _c1qPx() //  [R1, R2]
         { []
         }
     {offset
       c1qPx: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1qPG; else goto c1qPF;
       c1qPG: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c1qPF: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qPx_info" {
     block_c1qPx_info:
         const _c1qPx;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.763993454 UTC

[section ""data" . GHC.Real.$fEnumRatio_$s$cpred_closure" {
     GHC.Real.$fEnumRatio_$s$cpred_closure:
         const GHC.Real.$fEnumRatio_$s$cpred_info;
         const 0;
 },
 section ""relreadonly" . u1qQk_srtd" {
     u1qQk_srtd:
         const S1jKw_srt+464;
         const 72;
         const 1;
         const 144;
 },
 GHC.Real.$fEnumRatio_$s$cpred_entry() //  [R2]
         { []
         }
     {offset
       c1qQ7: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1qQd; else goto c1qQe;
       c1qQd: // global
           R2 = R2;
           R1 = GHC.Real.$fEnumRatio_$s$cpred_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1qQe: // global
           I64[Sp - 8] = block_c1qQ4_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1qQj; else goto c1qQ5;
       u1qQj: // global
           call _c1qQ4(R1) args: 0, res: 0, upd: 0;
       c1qQ5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fEnumRatio_$s$cpred_info" {
     GHC.Real.$fEnumRatio_$s$cpred_info:
         const GHC.Real.$fEnumRatio_$s$cpred_entry;
         const 0;
         const 18446744069414584334;
         const 4294967301;
         const u1qQk_srtd;
 },
 section ""relreadonly" . u1qQl_srtd" {
     u1qQl_srtd:
         const S1jKw_srt+464;
         const 69;
         const 1;
         const 16;
 },
 _c1qQ4() //  [R1]
         { []
         }
     {offset
       c1qQ4: // global
           I64[Sp] = block_c1qQa_info;
           R5 = GHC.Real.$fEnumRatio1_closure;
           R4 = GHC.Real.$fEnumRatio1_closure;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Real.$w$s$c-_entry(R5,
                                       R4,
                                       R3,
                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qQ4_info" {
     block_c1qQ4_info:
         const _c1qQ4;
         const 0;
         const 18446744069414584350;
         const u1qQl_srtd;
 },
 _c1qQa() //  [R1, R2]
         { []
         }
     {offset
       c1qQa: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1qQi; else goto c1qQh;
       c1qQi: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c1qQh: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qQa_info" {
     block_c1qQa_info:
         const _c1qQa;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.773510696 UTC

[section ""data" . GHC.Real.$fEnumRatio_$cpred_closure" {
     GHC.Real.$fEnumRatio_$cpred_closure:
         const GHC.Real.$fEnumRatio_$cpred_info;
         const 0;
 },
 GHC.Real.$fEnumRatio_$cpred_entry() //  [R2, R3]
         { []
         }
     {offset
       c1qQI: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1qQQ; else goto c1qQR;
       c1qQQ: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fEnumRatio_$cpred_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1qQR: // global
           I64[Sp - 16] = block_c1qQF_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1qQX; else goto c1qQG;
       u1qQX: // global
           call _c1qQF(R1) args: 0, res: 0, upd: 0;
       c1qQG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fEnumRatio_$cpred_info" {
     GHC.Real.$fEnumRatio_$cpred_info:
         const GHC.Real.$fEnumRatio_$cpred_entry;
         const 0;
         const 4904419998501437454;
         const 8589934607;
         const S1jKw_srt+800;
 },
 _c1qQF() //  [R1]
         { []
         }
     {offset
       c1qQF: // global
           I64[Sp - 16] = block_c1qQL_info;
           R3 = GHC.Real.$fEnumRatio1_closure;
           R2 = P64[Sp + 8];
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp] = P64[R1 + 7];
           Sp = Sp - 16;
           call GHC.Real.$w$cfromInteger_entry(R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qQF_info" {
     block_c1qQF_info:
         const _c1qQF;
         const 1;
         const 292733980074049566;
         const S1jKw_srt+800;
 },
 _c1qQL() //  [R1, R2]
         { []
         }
     {offset
       c1qQL: // global
           _s1jtQ::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_c1qQN_info;
           R6 = R2;
           R5 = R1;
           R4 = P64[Sp + 8];
           R3 = P64[Sp + 16];
           R2 = _s1jtQ::P64;
           Sp = Sp + 24;
           call GHC.Real.$w$c-_entry(R6,
                                     R5,
                                     R4,
                                     R3,
                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qQL_info" {
     block_c1qQL_info:
         const _c1qQL;
         const 3;
         const 4294967326;
         const S1jKw_srt+960;
 },
 _c1qQN() //  [R1, R2]
         { []
         }
     {offset
       c1qQN: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1qQW; else goto c1qQV;
       c1qQW: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c1qQV: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qQN_info" {
     block_c1qQN_info:
         const _c1qQN;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.783966566 UTC

[section ""data" . GHC.Real.$fFractionalRatio_closure" {
     GHC.Real.$fFractionalRatio_closure:
         const GHC.Real.$fFractionalRatio_info;
         const 0;
 },
 sat_s1ju5_entry() //  [R1, R2]
         { []
         }
     {offset
       c1qRp: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call GHC.Real.$fFractionalRatio_$cfromRational_entry(R3,
                                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1ju5_info" {
     sat_s1ju5_info:
         const sat_s1ju5_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S1jKw_srt+936;
 },
 sat_s1ju4_entry() //  [R1, R2]
         { []
         }
     {offset
       c1qRx: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call GHC.Real.$fFractionalRatio_$crecip_entry(R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1ju4_info" {
     sat_s1ju4_info:
         const sat_s1ju4_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S1jKw_srt+824;
 },
 sat_s1ju3_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c1qRF: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Real.$fFractionalRatio_$c/_entry(R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1ju3_info" {
     sat_s1ju3_info:
         const sat_s1ju3_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const S1jKw_srt+920;
 },
 sat_s1ju2_entry() //  [R1]
         { []
         }
     {offset
       c1qRM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1qRN; else goto c1qRO;
       c1qRN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1qRO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$fNumRatio_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1ju2_info" {
     sat_s1ju2_info:
         const sat_s1ju2_entry;
         const 1;
         const 4294967312;
         const S1jKw_srt+992;
 },
 GHC.Real.$fFractionalRatio_entry() //  [R2]
         { []
         }
     {offset
       c1qRQ: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto c1qRU; else goto c1qRT;
       c1qRU: // global
           HpAlloc = 112;
           R2 = R2;
           R1 = GHC.Real.$fFractionalRatio_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1qRT: // global
           I64[Hp - 104] = sat_s1ju5_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_s1ju4_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_s1ju3_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_s1ju2_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Real.C:Fractional_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 70;
           P64[Hp - 8] = Hp - 87;
           P64[Hp] = Hp - 103;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fFractionalRatio_info" {
     GHC.Real.$fFractionalRatio_info:
         const GHC.Real.$fFractionalRatio_entry;
         const 0;
         const 1162016669086777358;
         const 4294967301;
         const S1jKw_srt+824;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.79583312 UTC

[section ""data" . GHC.Real.$fEnumRatio_$cenumFrom_closure" {
     GHC.Real.$fEnumRatio_$cenumFrom_closure:
         const GHC.Real.$fEnumRatio_$cenumFrom_info;
         const 0;
 },
 w_s1ju7_entry() //  [R1]
         { []
         }
     {offset
       c1qSp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1qSq; else goto c1qSr;
       c1qSq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1qSr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$fFractionalRatio_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . w_s1ju7_info" {
     w_s1ju7_info:
         const w_s1ju7_entry;
         const 1;
         const 4294967312;
         const S1jKw_srt+1048;
 },
 sat_s1juc_entry() //  [R1, R2]
         { []
         }
     {offset
       c1qSA: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1qSB; else goto c1qSC;
       c1qSB: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1qSC: // global
           I64[Sp - 8] = block_c1qSx_info;
           R3 = R2;
           R2 = P64[R1 + 7];
           Sp = Sp - 8;
           call GHC.Real.$wnumericEnumFrom_entry(R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1juc_info" {
     sat_s1juc_info:
         const sat_s1juc_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S1jKw_srt+1056;
 },
 _c1qSx() //  [R1, R2]
         { []
         }
     {offset
       c1qSx: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1qSF; else goto c1qSE;
       c1qSF: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c1qSE: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qSx_info" {
     block_c1qSx_info:
         const _c1qSx;
         const 0;
         const 30;
 },
 GHC.Real.$fEnumRatio_$cenumFrom_entry() //  [R2]
         { []
         }
     {offset
       c1qSG: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c1qSK; else goto c1qSJ;
       c1qSK: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = GHC.Real.$fEnumRatio_$cenumFrom_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1qSJ: // global
           I64[Hp - 32] = w_s1ju7_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s1juc_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fEnumRatio_$cenumFrom_info" {
     GHC.Real.$fEnumRatio_$cenumFrom_info:
         const GHC.Real.$fEnumRatio_$cenumFrom_entry;
         const 0;
         const 30064771086;
         const 4294967301;
         const S1jKw_srt+1048;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.805643827 UTC

[section ""data" . GHC.Real.$fEnumRatio_$cenumFromThen_closure" {
     GHC.Real.$fEnumRatio_$cenumFromThen_closure:
         const GHC.Real.$fEnumRatio_$cenumFromThen_info;
         const 0;
 },
 w_s1jue_entry() //  [R1]
         { []
         }
     {offset
       c1qTb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1qTc; else goto c1qTd;
       c1qTc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1qTd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$fFractionalRatio_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . w_s1jue_info" {
     w_s1jue_info:
         const w_s1jue_entry;
         const 1;
         const 4294967312;
         const S1jKw_srt+1048;
 },
 sat_s1juk_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c1qTm: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1qTn; else goto c1qTo;
       c1qTn: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1qTo: // global
           I64[Sp - 8] = block_c1qTj_info;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Real.$wnumericEnumFromThen_entry(R4,
                                                     R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1juk_info" {
     sat_s1juk_info:
         const sat_s1juk_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _c1qTj() //  [R1, R2]
         { []
         }
     {offset
       c1qTj: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1qTr; else goto c1qTq;
       c1qTr: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c1qTq: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qTj_info" {
     block_c1qTj_info:
         const _c1qTj;
         const 0;
         const 30;
 },
 GHC.Real.$fEnumRatio_$cenumFromThen_entry() //  [R2]
         { []
         }
     {offset
       c1qTs: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c1qTw; else goto c1qTv;
       c1qTw: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = GHC.Real.$fEnumRatio_$cenumFromThen_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1qTv: // global
           I64[Hp - 32] = w_s1jue_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s1juk_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fEnumRatio_$cenumFromThen_info" {
     GHC.Real.$fEnumRatio_$cenumFromThen_info:
         const GHC.Real.$fEnumRatio_$cenumFromThen_entry;
         const 0;
         const 38654705678;
         const 4294967301;
         const S1jKw_srt+1048;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.815437 UTC

[section ""data" . GHC.Real.$fEnumRatio_$cenumFromTo_closure" {
     GHC.Real.$fEnumRatio_$cenumFromTo_closure:
         const GHC.Real.$fEnumRatio_$cenumFromTo_info;
         const 0;
 },
 sat_s1jun_entry() //  [R1]
         { []
         }
     {offset
       c1qTX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1qTY; else goto c1qTZ;
       c1qTY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1qTZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$fFractionalRatio_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jun_info" {
     sat_s1jun_info:
         const sat_s1jun_entry;
         const 1;
         const 4294967312;
         const S1jKw_srt+1048;
 },
 sat_s1jum_entry() //  [R1]
         { []
         }
     {offset
       c1qU4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1qU5; else goto c1qU6;
       c1qU5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1qU6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$fOrdRatio_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jum_info" {
     sat_s1jum_info:
         const sat_s1jum_entry;
         const 1;
         const 16;
 },
 section ""relreadonly" . u1qUc_srtd" {
     u1qUc_srtd:
         const S1jKw_srt+624;
         const 58;
         const 153122387330596865;
 },
 GHC.Real.$fEnumRatio_$cenumFromTo_entry() //  [R2]
         { []
         }
     {offset
       c1qU7: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c1qUb; else goto c1qUa;
       c1qUb: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = GHC.Real.$fEnumRatio_$cenumFromTo_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1qUa: // global
           I64[Hp - 40] = sat_s1jun_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = sat_s1jum_info;
           P64[Hp] = R2;
           R3 = Hp - 40;
           R2 = Hp - 16;
           R1 = GHC.Real.numericEnumFromTo_closure+4;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fEnumRatio_$cenumFromTo_info" {
     GHC.Real.$fEnumRatio_$cenumFromTo_info:
         const GHC.Real.$fEnumRatio_$cenumFromTo_entry;
         const 0;
         const 18446744069414584334;
         const 4294967301;
         const u1qUc_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.824543506 UTC

[section ""data" . GHC.Real.$fEnumRatio_$cenumFromThenTo_closure" {
     GHC.Real.$fEnumRatio_$cenumFromThenTo_closure:
         const GHC.Real.$fEnumRatio_$cenumFromThenTo_info;
         const 0;
 },
 sat_s1juq_entry() //  [R1]
         { []
         }
     {offset
       c1qUy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1qUz; else goto c1qUA;
       c1qUz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1qUA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$fFractionalRatio_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1juq_info" {
     sat_s1juq_info:
         const sat_s1juq_entry;
         const 1;
         const 4294967312;
         const S1jKw_srt+1048;
 },
 sat_s1jup_entry() //  [R1]
         { []
         }
     {offset
       c1qUF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1qUG; else goto c1qUH;
       c1qUG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1qUH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$fOrdRatio_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jup_info" {
     sat_s1jup_info:
         const sat_s1jup_entry;
         const 1;
         const 16;
 },
 section ""relreadonly" . u1qUN_srtd" {
     u1qUN_srtd:
         const S1jKw_srt+672;
         const 53;
         const 4644337115725825;
 },
 GHC.Real.$fEnumRatio_$cenumFromThenTo_entry() //  [R2]
         { []
         }
     {offset
       c1qUI: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c1qUM; else goto c1qUL;
       c1qUM: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = GHC.Real.$fEnumRatio_$cenumFromThenTo_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1qUL: // global
           I64[Hp - 40] = sat_s1juq_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = sat_s1jup_info;
           P64[Hp] = R2;
           R3 = Hp - 40;
           R2 = Hp - 16;
           R1 = GHC.Real.numericEnumFromThenTo_closure+5;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fEnumRatio_$cenumFromThenTo_info" {
     GHC.Real.$fEnumRatio_$cenumFromThenTo_info:
         const GHC.Real.$fEnumRatio_$cenumFromThenTo_entry;
         const 0;
         const 18446744069414584334;
         const 4294967301;
         const u1qUN_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.831702365 UTC

[section ""data" . GHC.Real.$fRealFracRatio_$s$fRealRatio_closure" {
     GHC.Real.$fRealFracRatio_$s$fRealRatio_closure:
         const GHC.Real.C:Real_con_info;
         const GHC.Real.$fFractionalRatio_$s$fNumRatio_closure+1;
         const GHC.Real.$fOrdRatio_$s$fOrdRatio_closure+1;
         const GHC.Real.$fRealRatio_$s$ctoRational_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.83500865 UTC

[section ""data" . GHC.Real.$fRealRatio_closure" {
     GHC.Real.$fRealRatio_closure:
         const GHC.Real.$fRealRatio_info;
         const 0;
 },
 sat_s1juu_entry() //  [R1, R2]
         { []
         }
     {offset
       c1qVb: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call GHC.Real.$fRealRatio_$ctoRational_entry(R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1juu_info" {
     sat_s1juu_info:
         const sat_s1juu_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s1jut_entry() //  [R1]
         { []
         }
     {offset
       c1qVi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1qVj; else goto c1qVk;
       c1qVj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1qVk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$fOrdRatio_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jut_info" {
     sat_s1jut_info:
         const sat_s1jut_entry;
         const 1;
         const 16;
 },
 sat_s1jus_entry() //  [R1]
         { []
         }
     {offset
       c1qVp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1qVq; else goto c1qVr;
       c1qVq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1qVr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$fNumRatio_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jus_info" {
     sat_s1jus_info:
         const sat_s1jus_entry;
         const 1;
         const 4294967312;
         const S1jKw_srt+992;
 },
 GHC.Real.$fRealRatio_entry() //  [R2]
         { []
         }
     {offset
       c1qVt: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c1qVx; else goto c1qVw;
       c1qVx: // global
           HpAlloc = 96;
           R2 = R2;
           R1 = GHC.Real.$fRealRatio_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1qVw: // global
           I64[Hp - 88] = sat_s1juu_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_s1jut_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = sat_s1jus_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = GHC.Real.C:Real_con_info;
           P64[Hp - 16] = Hp - 48;
           P64[Hp - 8] = Hp - 72;
           P64[Hp] = Hp - 87;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fRealRatio_info" {
     GHC.Real.$fRealRatio_info:
         const GHC.Real.$fRealRatio_entry;
         const 0;
         const 35188667056142;
         const 4294967301;
         const S1jKw_srt+992;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.84614931 UTC

[section ""data" . GHC.Real.$w$s$cceiling_closure" {
     GHC.Real.$w$s$cceiling_closure:
         const GHC.Real.$w$s$cceiling_info;
         const 0;
 },
 sat_s1juH_entry() //  [R1]
         { []
         }
     {offset
       c1qWj: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1qWk; else goto c1qWl;
       c1qWk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1qWl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Real.$fEnumRatio1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1juH_info" {
     sat_s1juH_info:
         const sat_s1juH_entry;
         const 1;
         const 4294967312;
         const S1jKw_srt+1008;
 },
 section ""relreadonly" . u1qWD_srtd" {
     u1qWD_srtd:
         const S1jKw_srt+24;
         const 136;
         const 1;
         const 576461027181592576;
         const 128;
 },
 GHC.Real.$w$s$cceiling_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1qWm: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1qWn; else goto c1qWo;
       c1qWn: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$w$s$cceiling_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1qWo: // global
           I64[Sp - 16] = block_c1qVV_info;
           R4 = R4;
           R3 = R3;
           _s1juv::P64 = R2;
           R2 = R2;
           P64[Sp - 8] = _s1juv::P64;
           Sp = Sp - 16;
           call GHC.Real.$w$s$cproperFraction_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$w$s$cceiling_info" {
     GHC.Real.$w$s$cceiling_info:
         const GHC.Real.$w$s$cceiling_entry;
         const 0;
         const 18446744069414584334;
         const 12884901911;
         const u1qWD_srtd;
 },
 section ""relreadonly" . u1qWE_srtd" {
     u1qWE_srtd:
         const S1jKw_srt+24;
         const 124;
         const 1;
         const 576460752303685632;
 },
 _c1qVV() //  [R1, R2]
         { []
         }
     {offset
       c1qVV: // global
           I64[Sp - 8] = block_c1qVX_info;
           _s1juz::P64 = R1;
           R1 = R2;
           P64[Sp] = _s1juz::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1qWC; else goto c1qVY;
       u1qWC: // global
           call _c1qVX(R1) args: 0, res: 0, upd: 0;
       c1qVY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qVV_info" {
     block_c1qVV_info:
         const _c1qVV;
         const 1;
         const 18446744069414584350;
         const u1qWE_srtd;
 },
 section ""relreadonly" . u1qWF_srtd" {
     u1qWF_srtd:
         const S1jKw_srt+24;
         const 124;
         const 1;
         const 576460752303685632;
 },
 _c1qVX() //  [R1]
         { []
         }
     {offset
       c1qVX: // global
           I64[Sp] = block_c1qW2_info;
           R5 = GHC.Real.$fEnumRatio1_closure;
           R4 = GHC.Real.even1_closure;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Real.$w$s$ccompare_entry(R5,
                                             R4,
                                             R3,
                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qVX_info" {
     block_c1qVX_info:
         const _c1qVX;
         const 2;
         const 18446744069414584350;
         const u1qWF_srtd;
 },
 _c1qW2() //  [R1]
         { []
         }
     {offset
       c1qW2: // global
           if (R1 & 7 == 3) goto c1qWw; else goto c1qWu;
       c1qWw: // global
           I64[Sp] = block_c1qW7_info;
           R2 = P64[Sp + 16];
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
       c1qWu: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qW2_info" {
     block_c1qW2_info:
         const _c1qW2;
         const 2;
         const 4294967326;
         const S1jKw_srt+1008;
 },
 _c1qW7() //  [R1]
         { []
         }
     {offset
       c1qW7: // global
           I64[Sp] = block_c1qWb_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qW7_info" {
     block_c1qW7_info:
         const _c1qW7;
         const 130;
         const 4294967326;
         const S1jKw_srt+1008;
 },
 _c1qWb() //  [R1]
         { []
         }
     {offset
       c1qWb: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1qWA; else goto c1qWz;
       c1qWA: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1qWz: // global
           I64[Hp - 16] = sat_s1juH_info;
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 16] = Hp - 16;
           call GHC.Num.+_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qWb_info" {
     block_c1qWb_info:
         const _c1qWb;
         const 130;
         const 4294967326;
         const S1jKw_srt+1008;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.861336746 UTC

[section ""data" . GHC.Real.$fRealFracRatio_$s$cceiling_closure" {
     GHC.Real.$fRealFracRatio_$s$cceiling_closure:
         const GHC.Real.$fRealFracRatio_$s$cceiling_info;
         const 0;
 },
 GHC.Real.$fRealFracRatio_$s$cceiling_entry() //  [R2, R3]
         { []
         }
     {offset
       c1qXi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1qXj; else goto c1qXk;
       c1qXj: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fRealFracRatio_$s$cceiling_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1qXk: // global
           I64[Sp - 16] = block_c1qXf_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1qXo; else goto c1qXg;
       u1qXo: // global
           call _c1qXf(R1) args: 0, res: 0, upd: 0;
       c1qXg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fRealFracRatio_$s$cceiling_info" {
     GHC.Real.$fRealFracRatio_$s$cceiling_info:
         const GHC.Real.$fRealFracRatio_$s$cceiling_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S1jKw_srt+1104;
 },
 _c1qXf() //  [R1]
         { []
         }
     {offset
       c1qXf: // global
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Real.$w$s$cceiling_entry(R4,
                                             R3,
                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qXf_info" {
     block_c1qXf_info:
         const _c1qXf;
         const 1;
         const 4294967326;
         const S1jKw_srt+1104;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.869102922 UTC

[section ""data" . GHC.Real.$w$cceiling_closure" {
     GHC.Real.$w$cceiling_closure:
         const GHC.Real.$w$cceiling_info;
         const 0;
 },
 sat_s1jv3_entry() //  [R1]
         { []
         }
     {offset
       c1qY2: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1qY3; else goto c1qY4;
       c1qY3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1qY4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Real.$fEnumRatio1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jv3_info" {
     sat_s1jv3_info:
         const sat_s1jv3_entry;
         const 1;
         const 4294967312;
         const S1jKw_srt+1008;
 },
 section ""relreadonly" . u1qYn_srtd" {
     u1qYn_srtd:
         const S1jKw_srt+680;
         const 56;
         const 36030996042252289;
 },
 GHC.Real.$w$cceiling_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c1qY5: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c1qY6; else goto c1qY7;
       c1qY6: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$w$cceiling_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1qY7: // global
           I64[Sp - 24] = block_c1qXC_info;
           R5 = R5;
           R4 = R4;
           _s1juO::P64 = R3;
           R3 = R3;
           _s1juN::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = _s1juN::P64;
           P64[Sp - 8] = _s1juO::P64;
           Sp = Sp - 24;
           call GHC.Real.$w$cproperFraction_entry(R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$w$cceiling_info" {
     GHC.Real.$w$cceiling_info:
         const GHC.Real.$w$cceiling_entry;
         const 0;
         const 18446744069414584334;
         const 17179869208;
         const u1qYn_srtd;
 },
 section ""relreadonly" . u1qYo_srtd" {
     u1qYo_srtd:
         const S1jKw_srt+680;
         const 42;
         const 2199023288321;
 },
 _c1qXC() //  [R1, R2]
         { []
         }
     {offset
       c1qXC: // global
           I64[Sp - 8] = block_c1qXE_info;
           _s1juS::P64 = R1;
           R1 = R2;
           P64[Sp] = _s1juS::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1qYm; else goto c1qXF;
       u1qYm: // global
           call _c1qXE(R1) args: 0, res: 0, upd: 0;
       c1qXF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qXC_info" {
     block_c1qXC_info:
         const _c1qXC;
         const 2;
         const 18446744069414584350;
         const u1qYo_srtd;
 },
 section ""relreadonly" . u1qYp_srtd" {
     u1qYp_srtd:
         const S1jKw_srt+680;
         const 42;
         const 2199023288321;
 },
 _c1qXE() //  [R1]
         { []
         }
     {offset
       c1qXE: // global
           I64[Sp - 16] = block_c1qXJ_info;
           R3 = GHC.Real.even1_closure;
           R2 = P64[Sp + 16];
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp] = P64[R1 + 7];
           Sp = Sp - 16;
           call GHC.Real.$w$cfromInteger_entry(R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qXE_info" {
     block_c1qXE_info:
         const _c1qXE;
         const 3;
         const 18446744069414584350;
         const u1qYp_srtd;
 },
 _c1qXJ() //  [R1, R2]
         { []
         }
     {offset
       c1qXJ: // global
           _s1juV::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c1qXL_info;
           R6 = R2;
           R5 = R1;
           R4 = P64[Sp + 8];
           R3 = _s1juV::P64;
           R2 = P64[Sp + 32];
           Sp = Sp + 16;
           call GHC.Real.$w$ccompare_entry(R6,
                                           R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qXJ_info" {
     block_c1qXJ_info:
         const _c1qXJ;
         const 5;
         const 4294967326;
         const S1jKw_srt+1008;
 },
 _c1qXL() //  [R1]
         { []
         }
     {offset
       c1qXL: // global
           if (R1 & 7 == 3) goto c1qYg; else goto c1qYe;
       c1qYg: // global
           I64[Sp] = block_c1qXQ_info;
           R2 = P64[Sp + 24];
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
       c1qYe: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qXL_info" {
     block_c1qXL_info:
         const _c1qXL;
         const 131;
         const 4294967326;
         const S1jKw_srt+1008;
 },
 _c1qXQ() //  [R1]
         { []
         }
     {offset
       c1qXQ: // global
           I64[Sp] = block_c1qXU_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qXQ_info" {
     block_c1qXQ_info:
         const _c1qXQ;
         const 387;
         const 4294967326;
         const S1jKw_srt+1008;
 },
 _c1qXU() //  [R1]
         { []
         }
     {offset
       c1qXU: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1qYk; else goto c1qYj;
       c1qYk: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1qYj: // global
           I64[Hp - 16] = sat_s1jv3_info;
           P64[Hp] = R1;
           R2 = R1;
           _s1juS::P64 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_pp_info;
           P64[Sp + 16] = _s1juS::P64;
           P64[Sp + 24] = Hp - 16;
           Sp = Sp + 8;
           call GHC.Num.+_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qXU_info" {
     block_c1qXU_info:
         const _c1qXU;
         const 387;
         const 4294967326;
         const S1jKw_srt+1008;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.887024554 UTC

[section ""data" . GHC.Real.$fRealFracRatio_$cceiling_closure" {
     GHC.Real.$fRealFracRatio_$cceiling_closure:
         const GHC.Real.$fRealFracRatio_$cceiling_info;
         const 0;
 },
 GHC.Real.$fRealFracRatio_$cceiling_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1qZ7: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1qZ8; else goto c1qZ9;
       c1qZ8: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fRealFracRatio_$cceiling_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1qZ9: // global
           I64[Sp - 24] = block_c1qZ4_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u1qZd; else goto c1qZ5;
       u1qZd: // global
           call _c1qZ4(R1) args: 0, res: 0, upd: 0;
       c1qZ5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fRealFracRatio_$cceiling_info" {
     GHC.Real.$fRealFracRatio_$cceiling_info:
         const GHC.Real.$fRealFracRatio_$cceiling_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S1jKw_srt+1120;
 },
 _c1qZ4() //  [R1]
         { []
         }
     {offset
       c1qZ4: // global
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Real.$w$cceiling_entry(R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qZ4_info" {
     block_c1qZ4_info:
         const _c1qZ4;
         const 2;
         const 4294967326;
         const S1jKw_srt+1120;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.894905538 UTC

[section ""data" . GHC.Real.$w$s$cfloor_closure" {
     GHC.Real.$w$s$cfloor_closure:
         const GHC.Real.$w$s$cfloor_info;
         const 0;
 },
 sat_s1jvo_entry() //  [R1]
         { []
         }
     {offset
       c1qZX: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1qZY; else goto c1qZZ;
       c1qZY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1qZZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Real.$fEnumRatio1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jvo_info" {
     sat_s1jvo_info:
         const sat_s1jvo_entry;
         const 1;
         const 4294967312;
         const S1jKw_srt+1008;
 },
 section ""relreadonly" . u1r0i_srtd" {
     u1r0i_srtd:
         const S1jKw_srt;
         const 143;
         const 1;
         const 4611688217452740608;
         const 16384;
 },
 GHC.Real.$w$s$cfloor_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1r00: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1r01; else goto c1r02;
       c1r01: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$w$s$cfloor_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1r02: // global
           I64[Sp - 16] = block_c1qZr_info;
           R4 = R4;
           R3 = R3;
           _s1jva::P64 = R2;
           R2 = R2;
           P64[Sp - 8] = _s1jva::P64;
           Sp = Sp - 16;
           call GHC.Real.$w$s$cproperFraction_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$w$s$cfloor_info" {
     GHC.Real.$w$s$cfloor_info:
         const GHC.Real.$w$s$cfloor_entry;
         const 0;
         const 18446744069414584334;
         const 12884901911;
         const u1r0i_srtd;
 },
 section ""relreadonly" . u1r0j_srtd" {
     u1r0j_srtd:
         const S1jKw_srt;
         const 127;
         const 1;
         const 4611686018429485056;
 },
 _c1qZr() //  [R1, R2]
         { []
         }
     {offset
       c1qZr: // global
           I64[Sp - 8] = block_c1qZt_info;
           _s1jve::P64 = R1;
           R1 = R2;
           P64[Sp] = _s1jve::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1r0h; else goto c1qZu;
       u1r0h: // global
           call _c1qZt(R1) args: 0, res: 0, upd: 0;
       c1qZu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qZr_info" {
     block_c1qZr_info:
         const _c1qZr;
         const 1;
         const 18446744069414584350;
         const u1r0j_srtd;
 },
 section ""relreadonly" . u1r0k_srtd" {
     u1r0k_srtd:
         const S1jKw_srt;
         const 127;
         const 1;
         const 4611686018429485056;
 },
 _c1qZt() //  [R1]
         { []
         }
     {offset
       c1qZt: // global
           I64[Sp - 8] = block_c1qZy_info;
           R3 = P64[R1 + 15];
           R2 = GHC.Real.even1_closure;
           P64[Sp] = P64[R1 + 7];
           Sp = Sp - 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qZt_info" {
     block_c1qZt_info:
         const _c1qZt;
         const 2;
         const 18446744069414584350;
         const u1r0k_srtd;
 },
 section ""relreadonly" . u1r0l_srtd" {
     u1r0l_srtd:
         const S1jKw_srt;
         const 127;
         const 1;
         const 4611686018427387904;
 },
 _c1qZy() //  [R1]
         { []
         }
     {offset
       c1qZy: // global
           I64[Sp] = block_c1qZC_info;
           R3 = GHC.Real.$fEnumRatio1_closure;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qZy_info" {
     block_c1qZy_info:
         const _c1qZy;
         const 3;
         const 18446744069414584350;
         const u1r0l_srtd;
 },
 _c1qZC() //  [R1]
         { []
         }
     {offset
       c1qZC: // global
           _s1jvk::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1qZG_info;
           R3 = _s1jvk::P64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.ltInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qZC_info" {
     block_c1qZC_info:
         const _c1qZC;
         const 3;
         const 4294967326;
         const S1jKw_srt+1008;
 },
 _c1qZG() //  [R1]
         { []
         }
     {offset
       c1qZG: // global
           if (R1 == 1) goto c1r0c; else goto c1r0a;
       c1r0c: // global
           I64[Sp] = block_c1qZL_info;
           R2 = P64[Sp + 16];
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
       c1r0a: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qZG_info" {
     block_c1qZG_info:
         const _c1qZG;
         const 2;
         const 4294967326;
         const S1jKw_srt+1008;
 },
 _c1qZL() //  [R1]
         { []
         }
     {offset
       c1qZL: // global
           I64[Sp] = block_c1qZP_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qZL_info" {
     block_c1qZL_info:
         const _c1qZL;
         const 130;
         const 4294967326;
         const S1jKw_srt+1008;
 },
 _c1qZP() //  [R1]
         { []
         }
     {offset
       c1qZP: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1r0g; else goto c1r0f;
       c1r0g: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1r0f: // global
           I64[Hp - 16] = sat_s1jvo_info;
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 16] = Hp - 16;
           call GHC.Num.-_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1qZP_info" {
     block_c1qZP_info:
         const _c1qZP;
         const 130;
         const 4294967326;
         const S1jKw_srt+1008;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.914767844 UTC

[section ""data" . GHC.Real.$fRealFracRatio_$s$cfloor_closure" {
     GHC.Real.$fRealFracRatio_$s$cfloor_closure:
         const GHC.Real.$fRealFracRatio_$s$cfloor_info;
         const 0;
 },
 GHC.Real.$fRealFracRatio_$s$cfloor_entry() //  [R2, R3]
         { []
         }
     {offset
       c1r14: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1r15; else goto c1r16;
       c1r15: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fRealFracRatio_$s$cfloor_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1r16: // global
           I64[Sp - 16] = block_c1r11_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1r1a; else goto c1r12;
       u1r1a: // global
           call _c1r11(R1) args: 0, res: 0, upd: 0;
       c1r12: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fRealFracRatio_$s$cfloor_info" {
     GHC.Real.$fRealFracRatio_$s$cfloor_info:
         const GHC.Real.$fRealFracRatio_$s$cfloor_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S1jKw_srt+1136;
 },
 _c1r11() //  [R1]
         { []
         }
     {offset
       c1r11: // global
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Real.$w$s$cfloor_entry(R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1r11_info" {
     block_c1r11_info:
         const _c1r11;
         const 1;
         const 4294967326;
         const S1jKw_srt+1136;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.922644927 UTC

[section ""data" . GHC.Real.$w$cfloor_closure" {
     GHC.Real.$w$cfloor_closure:
         const GHC.Real.$w$cfloor_info;
         const 0;
 },
 sat_s1jvK_entry() //  [R1]
         { []
         }
     {offset
       c1r1O: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1r1P; else goto c1r1Q;
       c1r1P: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1r1Q: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Real.$fEnumRatio1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jvK_info" {
     sat_s1jvK_info:
         const sat_s1jvK_entry;
         const 1;
         const 4294967312;
         const S1jKw_srt+1008;
 },
 section ""relreadonly" . u1r29_srtd" {
     u1r29_srtd:
         const S1jKw_srt+680;
         const 60;
         const 576462951326711809;
 },
 GHC.Real.$w$cfloor_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c1r1R: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c1r1S; else goto c1r1T;
       c1r1S: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$w$cfloor_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1r1T: // global
           I64[Sp - 24] = block_c1r1o_info;
           R5 = R5;
           R4 = R4;
           _s1jvv::P64 = R3;
           R3 = R3;
           _s1jvu::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = _s1jvu::P64;
           P64[Sp - 8] = _s1jvv::P64;
           Sp = Sp - 24;
           call GHC.Real.$w$cproperFraction_entry(R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$w$cfloor_info" {
     GHC.Real.$w$cfloor_info:
         const GHC.Real.$w$cfloor_entry;
         const 0;
         const 18446744069414584334;
         const 17179869208;
         const u1r29_srtd;
 },
 section ""relreadonly" . u1r2a_srtd" {
     u1r2a_srtd:
         const S1jKw_srt+680;
         const 42;
         const 2199023288321;
 },
 _c1r1o() //  [R1, R2]
         { []
         }
     {offset
       c1r1o: // global
           I64[Sp - 8] = block_c1r1q_info;
           _s1jvz::P64 = R1;
           R1 = R2;
           P64[Sp] = _s1jvz::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1r28; else goto c1r1r;
       u1r28: // global
           call _c1r1q(R1) args: 0, res: 0, upd: 0;
       c1r1r: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1r1o_info" {
     block_c1r1o_info:
         const _c1r1o;
         const 2;
         const 18446744069414584350;
         const u1r2a_srtd;
 },
 section ""relreadonly" . u1r2b_srtd" {
     u1r2b_srtd:
         const S1jKw_srt+680;
         const 42;
         const 2199023288321;
 },
 _c1r1q() //  [R1]
         { []
         }
     {offset
       c1r1q: // global
           I64[Sp - 16] = block_c1r1v_info;
           R3 = GHC.Real.even1_closure;
           R2 = P64[Sp + 16];
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp] = P64[R1 + 7];
           Sp = Sp - 16;
           call GHC.Real.$w$cfromInteger_entry(R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1r1q_info" {
     block_c1r1q_info:
         const _c1r1q;
         const 3;
         const 18446744069414584350;
         const u1r2b_srtd;
 },
 _c1r1v() //  [R1, R2]
         { []
         }
     {offset
       c1r1v: // global
           _s1jvC::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c1r1x_info;
           R6 = R2;
           R5 = R1;
           R4 = P64[Sp + 8];
           R3 = _s1jvC::P64;
           R2 = P64[Sp + 32];
           Sp = Sp + 16;
           call GHC.Real.$w$c<_entry(R6,
                                     R5,
                                     R4,
                                     R3,
                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1r1v_info" {
     block_c1r1v_info:
         const _c1r1v;
         const 5;
         const 4294967326;
         const S1jKw_srt+1008;
 },
 _c1r1x() //  [R1]
         { []
         }
     {offset
       c1r1x: // global
           if (R1 & 7 == 1) goto c1r20; else goto c1r22;
       c1r20: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c1r22: // global
           I64[Sp] = block_c1r1C_info;
           R2 = P64[Sp + 24];
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1r1x_info" {
     block_c1r1x_info:
         const _c1r1x;
         const 131;
         const 4294967326;
         const S1jKw_srt+1008;
 },
 _c1r1C() //  [R1]
         { []
         }
     {offset
       c1r1C: // global
           I64[Sp] = block_c1r1G_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1r1C_info" {
     block_c1r1C_info:
         const _c1r1C;
         const 387;
         const 4294967326;
         const S1jKw_srt+1008;
 },
 _c1r1G() //  [R1]
         { []
         }
     {offset
       c1r1G: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1r26; else goto c1r25;
       c1r26: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1r25: // global
           I64[Hp - 16] = sat_s1jvK_info;
           P64[Hp] = R1;
           R2 = R1;
           _s1jvz::P64 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_pp_info;
           P64[Sp + 16] = _s1jvz::P64;
           P64[Sp + 24] = Hp - 16;
           Sp = Sp + 8;
           call GHC.Num.-_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1r1G_info" {
     block_c1r1G_info:
         const _c1r1G;
         const 387;
         const 4294967326;
         const S1jKw_srt+1008;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.939878856 UTC

[section ""data" . GHC.Real.$fRealFracRatio_$cfloor_closure" {
     GHC.Real.$fRealFracRatio_$cfloor_closure:
         const GHC.Real.$fRealFracRatio_$cfloor_info;
         const 0;
 },
 GHC.Real.$fRealFracRatio_$cfloor_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1r2T: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1r2U; else goto c1r2V;
       c1r2U: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fRealFracRatio_$cfloor_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1r2V: // global
           I64[Sp - 24] = block_c1r2Q_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u1r2Z; else goto c1r2R;
       u1r2Z: // global
           call _c1r2Q(R1) args: 0, res: 0, upd: 0;
       c1r2R: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fRealFracRatio_$cfloor_info" {
     GHC.Real.$fRealFracRatio_$cfloor_info:
         const GHC.Real.$fRealFracRatio_$cfloor_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S1jKw_srt+1152;
 },
 _c1r2Q() //  [R1]
         { []
         }
     {offset
       c1r2Q: // global
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Real.$w$cfloor_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1r2Q_info" {
     block_c1r2Q_info:
         const _c1r2Q;
         const 2;
         const 4294967326;
         const S1jKw_srt+1152;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.94473723 UTC

[section ""data" . sat_s1jvR_closure" {
     sat_s1jvR_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.946403185 UTC

[section ""data" . sat_s1jvS_closure" {
     sat_s1jvS_closure:
         const :_con_info;
         const sat_s1jvR_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.948784607 UTC

[section ""data" . GHC.Real.$fRealFracRatio2_closure" {
     GHC.Real.$fRealFracRatio2_closure:
         const GHC.Real.$fRealFracRatio2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Real.$fRealFracRatio2_entry() //  [R1]
         { []
         }
     {offset
       c1r3h: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1r3i; else goto c1r3j;
       c1r3i: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1r3j: // global
           (_c1r3e::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c1r3e::I64 == 0) goto c1r3g; else goto c1r3f;
       c1r3g: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c1r3f: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c1r3e::I64;
           R3 = sat_s1jvS_closure+2;
           R2 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Real.$fRealFracRatio2_info" {
     GHC.Real.$fRealFracRatio2_info:
         const GHC.Real.$fRealFracRatio2_entry;
         const 0;
         const 4294967317;
         const S1jKw_srt+1168;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.959210977 UTC

[section ""data" . GHC.Real.$w$s$cround_closure" {
     GHC.Real.$w$s$cround_closure:
         const GHC.Real.$w$s$cround_info;
         const 0;
 },
 sat_s1jwe_entry() //  [R1]
         { []
         }
     {offset
       c1r4j: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1r4k; else goto c1r4l;
       c1r4k: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1r4l: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Real.$fEnumRatio1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jwe_info" {
     sat_s1jwe_info:
         const sat_s1jwe_entry;
         const 1;
         const 4294967312;
         const S1jKw_srt+1008;
 },
 sat_s1jwf_entry() //  [R1]
         { []
         }
     {offset
       c1r4s: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1r4t; else goto c1r4u;
       c1r4t: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1r4u: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Real.$fEnumRatio1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jwf_info" {
     sat_s1jwf_info:
         const sat_s1jwf_entry;
         const 1;
         const 4294967312;
         const S1jKw_srt+1008;
 },
 section ""relreadonly" . u1r5F_srtd" {
     u1r5F_srtd:
         const S1jKw_srt;
         const 149;
         const 288230376151711745;
         const 4611688217729565184;
         const 1572864;
 },
 GHC.Real.$w$s$cround_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1r4v: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c1r4w; else goto c1r4x;
       c1r4w: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$w$s$cround_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1r4x: // global
           I64[Sp - 16] = block_c1r3v_info;
           R4 = R4;
           R3 = R3;
           _s1jvT::P64 = R2;
           R2 = R2;
           P64[Sp - 8] = _s1jvT::P64;
           Sp = Sp - 16;
           call GHC.Real.$w$s$cproperFraction_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$w$s$cround_info" {
     GHC.Real.$w$s$cround_info:
         const GHC.Real.$w$s$cround_entry;
         const 0;
         const 18446744069414584334;
         const 12884901911;
         const u1r5F_srtd;
 },
 section ""relreadonly" . u1r5G_srtd" {
     u1r5G_srtd:
         const S1jKw_srt;
         const 149;
         const 288230376151711745;
         const 4611686018706309632;
         const 1048576;
 },
 _c1r3v() //  [R1, R2]
         { []
         }
     {offset
       c1r3v: // global
           I64[Sp - 8] = block_c1r3x_info;
           _s1jvX::P64 = R1;
           R1 = R2;
           P64[Sp] = _s1jvX::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1r5A; else goto c1r3y;
       u1r5A: // global
           call _c1r3x(R1) args: 0, res: 0, upd: 0;
       c1r3y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1r3v_info" {
     block_c1r3v_info:
         const _c1r3v;
         const 1;
         const 18446744069414584350;
         const u1r5G_srtd;
 },
 section ""relreadonly" . u1r5H_srtd" {
     u1r5H_srtd:
         const S1jKw_srt;
         const 149;
         const 288230376151711745;
         const 4611686018706309632;
         const 1048576;
 },
 _c1r3x() //  [R1]
         { []
         }
     {offset
       c1r3x: // global
           I64[Sp - 16] = block_c1r3C_info;
           _s1jw0::P64 = P64[R1 + 7];
           R2 = _s1jw0::P64;
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp] = _s1jw0::P64;
           Sp = Sp - 16;
           call GHC.Integer.Type.absInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1r3x_info" {
     block_c1r3x_info:
         const _c1r3x;
         const 2;
         const 18446744069414584350;
         const u1r5H_srtd;
 },
 section ""relreadonly" . u1r5I_srtd" {
     u1r5I_srtd:
         const S1jKw_srt;
         const 149;
         const 288230376151711745;
         const 4611686018706309632;
         const 1048576;
 },
 _c1r3C() //  [R1]
         { []
         }
     {offset
       c1r3C: // global
           I64[Sp] = block_c1r3G_info;
           R5 = GHC.Real.even2_closure;
           R4 = GHC.Real.$fEnumRatio1_closure;
           R3 = P64[Sp + 8];
           R2 = R1;
           call GHC.Real.$w$s$c-_entry(R5,
                                       R4,
                                       R3,
                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1r3C_info" {
     block_c1r3C_info:
         const _c1r3C;
         const 4;
         const 18446744069414584350;
         const u1r5I_srtd;
 },
 section ""relreadonly" . u1r5J_srtd" {
     u1r5J_srtd:
         const S1jKw_srt;
         const 149;
         const 1;
         const 4611686018706309120;
         const 1048576;
 },
 _c1r3G() //  [R1]
         { []
         }
     {offset
       c1r3G: // global
           I64[Sp] = block_c1r3I_info;
           R2 = R1;
           call GHC.Integer.Type.signumInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1r3G_info" {
     block_c1r3G_info:
         const _c1r3G;
         const 4;
         const 18446744069414584350;
         const u1r5J_srtd;
 },
 section ""relreadonly" . u1r5K_srtd" {
     u1r5K_srtd:
         const S1jKw_srt;
         const 149;
         const 1;
         const 4611686018706309120;
         const 1048576;
 },
 _c1r3I() //  [R1]
         { []
         }
     {offset
       c1r3I: // global
           I64[Sp - 8] = block_c1r3M_info;
           R3 = GHC.Real.$fRealFracRatio2_closure;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1r3I_info" {
     block_c1r3I_info:
         const _c1r3I;
         const 4;
         const 18446744069414584350;
         const u1r5K_srtd;
 },
 section ""relreadonly" . u1r5L_srtd" {
     u1r5L_srtd:
         const S1jKw_srt;
         const 127;
         const 1;
         const 4611686018706309120;
 },
 _c1r3M() //  [R1]
         { []
         }
     {offset
       c1r3M: // global
           if (R1 == 1) goto u1r5w; else goto c1r4U;
       u1r5w: // global
           Sp = Sp + 32;
           call _c1r5u() args: 0, res: 0, upd: 0;
       c1r4U: // global
           I64[Sp] = block_c1r4D_info;
           R3 = GHC.Real.even1_closure;
           R2 = P64[Sp + 8];
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1r3M_info" {
     block_c1r3M_info:
         const _c1r3M;
         const 5;
         const 18446744069414584350;
         const u1r5L_srtd;
 },
 section ""relreadonly" . u1r5M_srtd" {
     u1r5M_srtd:
         const S1jKw_srt;
         const 127;
         const 1;
         const 4611686018706309120;
 },
 _c1r4D() //  [R1]
         { []
         }
     {offset
       c1r4D: // global
           if (R1 == 1) goto c1r5g; else goto c1r51;
       c1r5g: // global
           I64[Sp + 8] = block_c1r5e_info;
           R3 = P64[Sp + 32];
           R2 = P64[Sp + 40];
           Sp = Sp + 8;
           call GHC.Real.even_entry(R3, R2) args: 8, res: 8, upd: 8;
       c1r51: // global
           _s1jw6::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1r4Y_info;
           R3 = GHC.Real.$fEnumRatio1_closure;
           R2 = _s1jw6::P64;
           Sp = Sp + 8;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1r4D_info" {
     block_c1r4D_info:
         const _c1r4D;
         const 5;
         const 18446744069414584350;
         const u1r5M_srtd;
 },
 section ""relreadonly" . u1r5N_srtd" {
     u1r5N_srtd:
         const S1jKw_srt;
         const 127;
         const 1;
         const 4611686018429485056;
 },
 _c1r5e() //  [R1]
         { []
         }
     {offset
       c1r5e: // global
           if (R1 & 7 == 1) goto u1r5y; else goto u1r5z;
       u1r5y: // global
           Sp = Sp + 8;
           call _s1jw8() args: 0, res: 0, upd: 0;
       u1r5z: // global
           Sp = Sp + 24;
           call _c1r5u() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1r5e_info" {
     block_c1r5e_info:
         const _c1r5e;
         const 4;
         const 18446744069414584350;
         const u1r5N_srtd;
 },
 _c1r5u() //  []
         { []
         }
     {offset
       c1r5u: // global
           R1 = P64[Sp];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . u1r5O_srtd" {
     u1r5O_srtd:
         const S1jKw_srt;
         const 127;
         const 1;
         const 4611686018697920512;
 },
 _c1r4Y() //  [R1]
         { []
         }
     {offset
       c1r4Y: // global
           if (R1 == 1) goto u1r5x; else goto c1r57;
       u1r5x: // global
           Sp = Sp + 8;
           call _s1jw8() args: 0, res: 0, upd: 0;
       c1r57: // global
           R1 = GHC.Real.$fRealFracRatio1_closure;
           Sp = Sp + 40;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1r4Y_info" {
     block_c1r4Y_info:
         const _c1r4Y;
         const 4;
         const 18446744069414584350;
         const u1r5O_srtd;
 },
 _s1jw8() //  []
         { []
         }
     {offset
       s1jw8: // global
           I64[Sp - 8] = block_c1r3V_info;
           R2 = P64[Sp + 24];
           Sp = Sp - 8;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . u1r5P_srtd" {
     u1r5P_srtd:
         const S1jKw_srt;
         const 127;
         const 1;
         const 4611686018429485056;
 },
 _c1r3V() //  [R1]
         { []
         }
     {offset
       c1r3V: // global
           I64[Sp] = block_c1r3Z_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1r3V_info" {
     block_c1r3V_info:
         const _c1r3V;
         const 516;
         const 18446744069414584350;
         const u1r5P_srtd;
 },
 section ""relreadonly" . u1r5Q_srtd" {
     u1r5Q_srtd:
         const S1jKw_srt;
         const 127;
         const 1;
         const 4611686018429485056;
 },
 _c1r3Z() //  [R1]
         { []
         }
     {offset
       c1r3Z: // global
           _s1jw1::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1r43_info;
           R3 = _s1jw1::P64;
           R2 = GHC.Real.even1_closure;
           P64[Sp + 32] = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1r3Z_info" {
     block_c1r3Z_info:
         const _c1r3Z;
         const 516;
         const 18446744069414584350;
         const u1r5Q_srtd;
 },
 section ""relreadonly" . u1r5R_srtd" {
     u1r5R_srtd:
         const S1jKw_srt;
         const 127;
         const 1;
         const 4611686018427387904;
 },
 _c1r43() //  [R1]
         { []
         }
     {offset
       c1r43: // global
           I64[Sp] = block_c1r47_info;
           R3 = GHC.Real.$fEnumRatio1_closure;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1r43_info" {
     block_c1r43_info:
         const _c1r43;
         const 3;
         const 18446744069414584350;
         const u1r5R_srtd;
 },
 _c1r47() //  [R1]
         { []
         }
     {offset
       c1r47: // global
           _s1jwc::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1r4b_info;
           R3 = _s1jwc::P64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.ltInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1r47_info" {
     block_c1r47_info:
         const _c1r47;
         const 3;
         const 4294967326;
         const S1jKw_srt+1008;
 },
 _c1r4b() //  [R1]
         { []
         }
     {offset
       c1r4b: // global
           _s1jwa::P64 = P64[Sp + 16];
           if (R1 == 1) goto c1r4P; else goto c1r4L;
       c1r4P: // global
           Hp = Hp + 24;
           _s1jwd::I64 = R1;
           if (Hp > HpLim) (likely: False) goto c1r4S; else goto c1r4R;
       c1r4R: // global
           I64[Hp - 16] = sat_s1jwf_info;
           P64[Hp] = _s1jwa::P64;
           R2 = _s1jwa::P64;
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 16] = Hp - 16;
           call GHC.Num.-_entry(R2) args: 32, res: 0, upd: 8;
       c1r4L: // global
           Hp = Hp + 24;
           _s1jwd::I64 = R1;
           if (Hp > HpLim) (likely: False) goto c1r4S; else goto c1r4N;
       c1r4S: // global
           HpAlloc = 24;
           R1 = _s1jwd::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c1r4N: // global
           I64[Hp - 16] = sat_s1jwe_info;
           P64[Hp] = _s1jwa::P64;
           R2 = _s1jwa::P64;
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 16] = Hp - 16;
           call GHC.Num.+_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1r4b_info" {
     block_c1r4b_info:
         const _c1r4b;
         const 2;
         const 4294967326;
         const S1jKw_srt+1008;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:05.997537922 UTC

[section ""data" . GHC.Real.$fRealFracRatio_$s$cround_closure" {
     GHC.Real.$fRealFracRatio_$s$cround_closure:
         const GHC.Real.$fRealFracRatio_$s$cround_info;
         const 0;
 },
 GHC.Real.$fRealFracRatio_$s$cround_entry() //  [R2, R3]
         { []
         }
     {offset
       c1r7f: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1r7g; else goto c1r7h;
       c1r7g: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fRealFracRatio_$s$cround_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1r7h: // global
           I64[Sp - 16] = block_c1r7c_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1r7l; else goto c1r7d;
       u1r7l: // global
           call _c1r7c(R1) args: 0, res: 0, upd: 0;
       c1r7d: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fRealFracRatio_$s$cround_info" {
     GHC.Real.$fRealFracRatio_$s$cround_info:
         const GHC.Real.$fRealFracRatio_$s$cround_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const S1jKw_srt+1176;
 },
 _c1r7c() //  [R1]
         { []
         }
     {offset
       c1r7c: // global
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Real.$w$s$cround_entry(R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1r7c_info" {
     block_c1r7c_info:
         const _c1r7c;
         const 1;
         const 4294967326;
         const S1jKw_srt+1176;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:06.014297038 UTC

[section ""data" . GHC.Real.$w$cround_closure" {
     GHC.Real.$w$cround_closure:
         const GHC.Real.$w$cround_info;
         const 0;
 },
 sat_s1jx1_entry() //  [R1]
         { []
         }
     {offset
       c1r8M: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1r8N; else goto c1r8O;
       c1r8N: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1r8O: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Real.$fEnumRatio1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jx1_info" {
     sat_s1jx1_info:
         const sat_s1jx1_entry;
         const 1;
         const 4294967312;
         const S1jKw_srt+1008;
 },
 sat_s1jx2_entry() //  [R1]
         { []
         }
     {offset
       c1r8V: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1r8W; else goto c1r8X;
       c1r8W: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1r8X: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Real.$fEnumRatio1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jx2_info" {
     sat_s1jx2_info:
         const sat_s1jx2_entry;
         const 1;
         const 4294967312;
         const S1jKw_srt+1008;
 },
 section ""relreadonly" . u1rbi_srtd" {
     u1rbi_srtd:
         const S1jKw_srt+584;
         const 78;
         const 9156733004435457;
         const 8192;
 },
 GHC.Real.$w$cround_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c1r8Y: // global
           if ((Sp + -128) < SpLim) (likely: False) goto c1r8Z; else goto c1r90;
       c1r8Z: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$w$cround_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1r90: // global
           I64[Sp - 24] = block_c1r7z_info;
           R5 = R5;
           R4 = R4;
           _s1jwp::P64 = R3;
           R3 = R3;
           _s1jwo::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = _s1jwo::P64;
           P64[Sp - 8] = _s1jwp::P64;
           Sp = Sp - 24;
           call GHC.Real.$w$cproperFraction_entry(R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$w$cround_info" {
     GHC.Real.$w$cround_info:
         const GHC.Real.$w$cround_entry;
         const 0;
         const 18446744069414584334;
         const 17179869208;
         const u1rbi_srtd;
 },
 section ""relreadonly" . u1rbj_srtd" {
     u1rbj_srtd:
         const S1jKw_srt+584;
         const 54;
         const 9156733004435457;
 },
 _c1r7z() //  [R1, R2]
         { []
         }
     {offset
       c1r7z: // global
           I64[Sp - 8] = block_c1r7B_info;
           _s1jwt::P64 = R1;
           R1 = R2;
           P64[Sp] = _s1jwt::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1rb7; else goto c1r7C;
       u1rb7: // global
           call _c1r7B(R1) args: 0, res: 0, upd: 0;
       c1r7C: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1r7z_info" {
     block_c1r7z_info:
         const _c1r7z;
         const 2;
         const 18446744069414584350;
         const u1rbj_srtd;
 },
 section ""relreadonly" . u1rbk_srtd" {
     u1rbk_srtd:
         const S1jKw_srt+584;
         const 54;
         const 9156733004435457;
 },
 _c1r7B() //  [R1]
         { []
         }
     {offset
       c1r7B: // global
           I64[Sp - 16] = block_c1r7G_info;
           R2 = P64[Sp + 16];
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp] = P64[R1 + 7];
           Sp = Sp - 16;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1r7B_info" {
     block_c1r7B_info:
         const _c1r7B;
         const 3;
         const 18446744069414584350;
         const u1rbk_srtd;
 },
 section ""relreadonly" . u1rbl_srtd" {
     u1rbl_srtd:
         const S1jKw_srt+584;
         const 54;
         const 9156733004435457;
 },
 _c1r7G() //  [R1]
         { []
         }
     {offset
       c1r7G: // global
           I64[Sp] = block_c1r7K_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1r7G_info" {
     block_c1r7G_info:
         const _c1r7G;
         const 5;
         const 18446744069414584350;
         const u1rbl_srtd;
 },
 section ""relreadonly" . u1rbm_srtd" {
     u1rbm_srtd:
         const S1jKw_srt+584;
         const 54;
         const 9156733004435457;
 },
 _c1r7K() //  [R1]
         { []
         }
     {offset
       c1r7K: // global
           I64[Sp] = block_c1r7O_info;
           R2 = R1;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 16];
           Sp = Sp - 16;
           call GHC.Num.abs_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1r7K_info" {
     block_c1r7K_info:
         const _c1r7K;
         const 5;
         const 18446744069414584350;
         const u1rbm_srtd;
 },
 section ""relreadonly" . u1rbn_srtd" {
     u1rbn_srtd:
         const S1jKw_srt+584;
         const 54;
         const 9156733004435457;
 },
 _c1r7O() //  [R1]
         { []
         }
     {offset
       c1r7O: // global
           I64[Sp - 8] = block_c1r7Q_info;
           R4 = GHC.Real.even2_closure;
           R3 = GHC.Real.$fEnumRatio1_closure;
           R2 = P64[Sp + 32];
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Real.$w$cfromRational_entry(R4,
                                                R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1r7O_info" {
     block_c1r7O_info:
         const _c1r7O;
         const 5;
         const 18446744069414584350;
         const u1rbn_srtd;
 },
 section ""relreadonly" . u1rbo_srtd" {
     u1rbo_srtd:
         const S1jKw_srt+680;
         const 42;
         const 2233383035013;
 },
 _c1r7Q() //  [R1, R2]
         { []
         }
     {offset
       c1r7Q: // global
           _s1jwA::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1r7S_info;
           R6 = R2;
           R5 = R1;
           R4 = P64[Sp + 16];
           R3 = _s1jwA::P64;
           R2 = P64[Sp + 40];
           Sp = Sp + 8;
           call GHC.Real.$w$c-_entry(R6,
                                     R5,
                                     R4,
                                     R3,
                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1r7Q_info" {
     block_c1r7Q_info:
         const _c1r7Q;
         const 6;
         const 18446744069414584350;
         const u1rbo_srtd;
 },
 section ""relreadonly" . u1rbp_srtd" {
     u1rbp_srtd:
         const S1jKw_srt+680;
         const 42;
         const 2199023296645;
 },
 _c1r7S() //  [R1]
         { []
         }
     {offset
       c1r7S: // global
           I64[Sp] = block_c1r7U_info;
           R3 = R1;
           R2 = P64[Sp + 32];
           call GHC.Real.$w$csignum_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1r7S_info" {
     block_c1r7S_info:
         const _c1r7S;
         const 5;
         const 18446744069414584350;
         const u1rbp_srtd;
 },
 section ""relreadonly" . u1rbq_srtd" {
     u1rbq_srtd:
         const S1jKw_srt+680;
         const 42;
         const 2199023288453;
 },
 _c1r7U() //  [R1, R2]
         { []
         }
     {offset
       c1r7U: // global
           I64[Sp - 16] = block_c1r7W_info;
           R3 = GHC.Real.$fEnumRatio1_closure;
           _s1jwJ::P64 = R2;
           R2 = P64[Sp + 32];
           P64[Sp - 8] = _s1jwJ::P64;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call GHC.Real.$w$cfromInteger_entry(R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1r7U_info" {
     block_c1r7U_info:
         const _c1r7U;
         const 5;
         const 18446744069414584350;
         const u1rbq_srtd;
 },
 section ""relreadonly" . u1rbr_srtd" {
     u1rbr_srtd:
         const S1jKw_srt+680;
         const 42;
         const 2199023288453;
 },
 _c1r7W() //  [R1, R2]
         { []
         }
     {offset
       c1r7W: // global
           I64[Sp - 16] = block_c1r7Y_info;
           _s1jwM::P64 = R2;
           R2 = P64[Sp + 48];
           P64[Sp - 8] = _s1jwM::P64;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1r7W_info" {
     block_c1r7W_info:
         const _c1r7W;
         const 7;
         const 18446744069414584350;
         const u1rbr_srtd;
 },
 section ""relreadonly" . u1rbs_srtd" {
     u1rbs_srtd:
         const S1jKw_srt+680;
         const 42;
         const 2199023288453;
 },
 _c1r7Y() //  [R1]
         { []
         }
     {offset
       c1r7Y: // global
           I64[Sp] = block_c1r82_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1r7Y_info" {
     block_c1r7Y_info:
         const _c1r7Y;
         const 9;
         const 18446744069414584350;
         const u1rbs_srtd;
 },
 section ""relreadonly" . u1rbt_srtd" {
     u1rbt_srtd:
         const S1jKw_srt+680;
         const 42;
         const 2199023288453;
 },
 _c1r82() //  [R1]
         { []
         }
     {offset
       c1r82: // global
           I64[Sp] = block_c1r86_info;
           R2 = R1;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 16];
           Sp = Sp - 16;
           call GHC.Num.negate_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1r82_info" {
     block_c1r82_info:
         const _c1r82;
         const 9;
         const 18446744069414584350;
         const u1rbt_srtd;
 },
 section ""relreadonly" . u1rbu_srtd" {
     u1rbu_srtd:
         const S1jKw_srt+680;
         const 42;
         const 2199023288453;
 },
 _c1r86() //  [R1]
         { []
         }
     {offset
       c1r86: // global
           I64[Sp - 8] = block_c1r88_info;
           R2 = P64[Sp + 64];
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1r86_info" {
     block_c1r86_info:
         const _c1r86;
         const 9;
         const 18446744069414584350;
         const u1rbu_srtd;
 },
 section ""relreadonly" . u1rbv_srtd" {
     u1rbv_srtd:
         const S1jKw_srt+680;
         const 42;
         const 2199023288453;
 },
 _c1r88() //  [R1]
         { []
         }
     {offset
       c1r88: // global
           I64[Sp] = block_c1r8c_info;
           R2 = R1;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1r88_info" {
     block_c1r88_info:
         const _c1r88;
         const 10;
         const 18446744069414584350;
         const u1rbv_srtd;
 },
 section ""relreadonly" . u1rbw_srtd" {
     u1rbw_srtd:
         const S1jKw_srt+680;
         const 42;
         const 2199023288453;
 },
 _c1r8c() //  [R1]
         { []
         }
     {offset
       c1r8c: // global
           I64[Sp] = block_c1r8g_info;
           R2 = R1;
           call GHC.Classes.$p1Ord_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1r8c_info" {
     block_c1r8c_info:
         const _c1r8c;
         const 10;
         const 18446744069414584350;
         const u1rbw_srtd;
 },
 section ""relreadonly" . u1rbx_srtd" {
     u1rbx_srtd:
         const S1jKw_srt+680;
         const 42;
         const 2199023288453;
 },
 _c1r8g() //  [R1]
         { []
         }
     {offset
       c1r8g: // global
           I64[Sp] = block_c1r9f_info;
           R2 = R1;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 40];
           P64[Sp - 8] = P64[Sp + 8];
           P64[Sp + 8] = R1;
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1r8g_info" {
     block_c1r8g_info:
         const _c1r8g;
         const 10;
         const 18446744069414584350;
         const u1rbx_srtd;
 },
 section ""relreadonly" . u1rby_srtd" {
     u1rby_srtd:
         const S1jKw_srt+680;
         const 42;
         const 2199023288453;
 },
 _c1r9f() //  [R1]
         { []
         }
     {offset
       c1r9f: // global
           if (R1 & 7 == 1) goto u1raX; else goto c1raE;
       u1raX: // global
           Sp = Sp + 8;
           call _s1jwT() args: 0, res: 0, upd: 0;
       c1raE: // global
           I64[Sp] = block_c1raC_info;
           R2 = P64[Sp + 8];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 32];
           P64[Sp - 8] = P64[Sp + 16];
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1r9f_info" {
     block_c1r9f_info:
         const _c1r9f;
         const 10;
         const 18446744069414584350;
         const u1rby_srtd;
 },
 section ""relreadonly" . u1rbz_srtd" {
     u1rbz_srtd:
         const S1jKw_srt+680;
         const 42;
         const 2199023288453;
 },
 _c1raC() //  [R1]
         { []
         }
     {offset
       c1raC: // global
           if (R1 & 7 == 1) goto u1raY; else goto u1raZ;
       u1raY: // global
           Sp = Sp + 8;
           call _s1jwT() args: 0, res: 0, upd: 0;
       u1raZ: // global
           Sp = Sp + 64;
           call _c1raO() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1raC_info" {
     block_c1raC_info:
         const _c1raC;
         const 10;
         const 18446744069414584350;
         const u1rbz_srtd;
 },
 _s1jwT() //  []
         { []
         }
     {offset
       s1jwT: // global
           I64[Sp - 8] = block_c1r8p_info;
           R3 = GHC.Real.even1_closure;
           R2 = P64[Sp + 64];
           Sp = Sp - 8;
           call GHC.Real.$w$cfromInteger_entry(R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . u1rbA_srtd" {
     u1rbA_srtd:
         const S1jKw_srt+696;
         const 40;
         const 549755813921;
 },
 _c1r8p() //  [R1, R2]
         { []
         }
     {offset
       c1r8p: // global
           I64[Sp - 16] = block_c1r9j_info;
           _s1jwW::P64 = R2;
           R2 = P64[Sp + 8];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[Sp + 40];
           P64[Sp - 24] = R1;
           P64[Sp - 8] = _s1jwW::P64;
           P64[Sp] = R1;
           Sp = Sp - 40;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1r8p_info" {
     block_c1r8p_info:
         const _c1r8p;
         const 10;
         const 18446744069414584350;
         const u1rbA_srtd;
 },
 section ""relreadonly" . u1rbB_srtd" {
     u1rbB_srtd:
         const S1jKw_srt+696;
         const 40;
         const 549755813921;
 },
 _c1r9j() //  [R1]
         { []
         }
     {offset
       c1r9j: // global
           if (R1 & 7 == 1) goto u1rb0; else goto c1ra8;
       u1rb0: // global
           Sp = Sp + 8;
           call _s1jx3() args: 0, res: 0, upd: 0;
       c1ra8: // global
           I64[Sp] = block_c1ra6_info;
           R2 = P64[Sp + 24];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 48];
           P64[Sp - 8] = P64[Sp + 8];
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1r9j_info" {
     block_c1r9j_info:
         const _c1r9j;
         const 12;
         const 18446744069414584350;
         const u1rbB_srtd;
 },
 section ""relreadonly" . u1rbC_srtd" {
     u1rbC_srtd:
         const S1jKw_srt+696;
         const 40;
         const 549755813921;
 },
 _c1ra6() //  [R1]
         { []
         }
     {offset
       c1ra6: // global
           if (R1 & 7 == 1) goto u1rb1; else goto c1raj;
       u1rb1: // global
           Sp = Sp + 8;
           call _s1jx3() args: 0, res: 0, upd: 0;
       c1raj: // global
           I64[Sp] = block_c1rah_info;
           R3 = P64[Sp + 80];
           R2 = P64[Sp + 96];
           call GHC.Real.even_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1ra6_info" {
     block_c1ra6_info:
         const _c1ra6;
         const 12;
         const 18446744069414584350;
         const u1rbC_srtd;
 },
 _s1jx3() //  []
         { []
         }
     {offset
       s1jx3: // global
           I64[Sp - 8] = block_c1r9B_info;
           R2 = P64[Sp + 16];
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = P64[Sp + 48];
           P64[Sp - 16] = P64[Sp + 32];
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . u1rbD_srtd" {
     u1rbD_srtd:
         const S1jKw_srt+736;
         const 35;
         const 17179869185;
 },
 _c1r9B() //  [R1]
         { []
         }
     {offset
       c1r9B: // global
           if (R1 & 7 == 1) goto u1rb4; else goto c1r9N;
       u1rb4: // global
           Sp = Sp + 104;
           call _c1r9T() args: 0, res: 0, upd: 0;
       c1r9N: // global
           I64[Sp] = block_c1r9L_info;
           R2 = P64[Sp + 24];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 48];
           P64[Sp - 8] = P64[Sp + 32];
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1r9B_info" {
     block_c1r9B_info:
         const _c1r9B;
         const 5132;
         const 18446744069414584350;
         const u1rbD_srtd;
 },
 section ""relreadonly" . u1rbE_srtd" {
     u1rbE_srtd:
         const S1jKw_srt+736;
         const 35;
         const 17179869185;
 },
 _c1r9L() //  [R1]
         { []
         }
     {offset
       c1r9L: // global
           if (R1 & 7 == 1) goto u1rb5; else goto u1rb6;
       u1rb5: // global
           Sp = Sp + 104;
           call _c1r9T() args: 0, res: 0, upd: 0;
       u1rb6: // global
           Sp = Sp + 8;
           call _s1jwX() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1r9L_info" {
     block_c1r9L_info:
         const _c1r9L;
         const 7948;
         const 18446744069414584350;
         const u1rbE_srtd;
 },
 _c1r9T() //  []
         { []
         }
     {offset
       c1r9T: // global
           R1 = GHC.Real.$fRealFracRatio1_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c1rah() //  [R1]
         { []
         }
     {offset
       c1rah: // global
           if (R1 & 7 == 1) goto u1rb2; else goto u1rb3;
       u1rb2: // global
           Sp = Sp + 8;
           call _s1jwX() args: 0, res: 0, upd: 0;
       u1rb3: // global
           Sp = Sp + 80;
           call _c1raO() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1rah_info" {
     block_c1rah_info:
         const _c1rah;
         const 7948;
         const 4294967326;
         const S1jKw_srt+1008;
 },
 _s1jwX() //  []
         { []
         }
     {offset
       s1jwX: // global
           I64[Sp - 8] = block_c1r8w_info;
           R2 = P64[Sp + 88];
           Sp = Sp - 8;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c1r8w() //  [R1]
         { []
         }
     {offset
       c1r8w: // global
           I64[Sp] = block_c1r8A_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1r8w_info" {
     block_c1r8w_info:
         const _c1r8w;
         const 139020;
         const 4294967326;
         const S1jKw_srt+1008;
 },
 _c1r8A() //  [R1]
         { []
         }
     {offset
       c1r8A: // global
           _s1jww::P64 = P64[Sp + 72];
           I64[Sp + 72] = block_c1r8E_info;
           R6 = P64[Sp + 8];
           R5 = P64[Sp + 16];
           R4 = P64[Sp + 64];
           R3 = _s1jww::P64;
           R2 = P64[Sp + 88];
           P64[Sp + 96] = R1;
           Sp = Sp + 72;
           call GHC.Real.$w$c<_entry(R6,
                                     R5,
                                     R4,
                                     R3,
                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1r8A_info" {
     block_c1r8A_info:
         const _c1r8A;
         const 139020;
         const 4294967326;
         const S1jKw_srt+1008;
 },
 _c1r8E() //  [R1]
         { []
         }
     {offset
       c1r8E: // global
           _s1jwt::P64 = P64[Sp + 8];
           _s1jwZ::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c1r9q; else goto c1r9u;
       c1r9q: // global
           Hp = Hp + 24;
           _s1jx0::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c1r9x; else goto c1r9s;
       c1r9s: // global
           I64[Hp - 16] = sat_s1jx1_info;
           P64[Hp] = _s1jwZ::P64;
           R2 = _s1jwZ::P64;
           I64[Sp + 8] = stg_ap_pp_info;
           P64[Sp + 16] = _s1jwt::P64;
           P64[Sp + 24] = Hp - 16;
           Sp = Sp + 8;
           call GHC.Num.+_entry(R2) args: 32, res: 0, upd: 8;
       c1r9u: // global
           Hp = Hp + 24;
           _s1jx0::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c1r9x; else goto c1r9w;
       c1r9x: // global
           HpAlloc = 24;
           R1 = _s1jx0::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1r9w: // global
           I64[Hp - 16] = sat_s1jx2_info;
           P64[Hp] = _s1jwZ::P64;
           R2 = _s1jwZ::P64;
           I64[Sp + 8] = stg_ap_pp_info;
           P64[Sp + 16] = _s1jwt::P64;
           P64[Sp + 24] = Hp - 16;
           Sp = Sp + 8;
           call GHC.Num.-_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1r8E_info" {
     block_c1r8E_info:
         const _c1r8E;
         const 131;
         const 4294967326;
         const S1jKw_srt+1008;
 },
 _c1raO() //  []
         { []
         }
     {offset
       c1raO: // global
           R1 = P64[Sp];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:06.077731261 UTC

[section ""data" . GHC.Real.$fRealFracRatio_$cround_closure" {
     GHC.Real.$fRealFracRatio_$cround_closure:
         const GHC.Real.$fRealFracRatio_$cround_info;
         const 0;
 },
 GHC.Real.$fRealFracRatio_$cround_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1rek: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1rel; else goto c1rem;
       c1rel: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fRealFracRatio_$cround_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1rem: // global
           I64[Sp - 24] = block_c1reh_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u1req; else goto c1rei;
       u1req: // global
           call _c1reh(R1) args: 0, res: 0, upd: 0;
       c1rei: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fRealFracRatio_$cround_info" {
     GHC.Real.$fRealFracRatio_$cround_info:
         const GHC.Real.$fRealFracRatio_$cround_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S1jKw_srt+1200;
 },
 _c1reh() //  [R1]
         { []
         }
     {offset
       c1reh: // global
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Real.$w$cround_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1reh_info" {
     block_c1reh_info:
         const _c1reh;
         const 2;
         const 4294967326;
         const S1jKw_srt+1200;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:06.084986129 UTC

[section ""data" . GHC.Real.$fRealFracRatio_$s$ctruncate_closure" {
     GHC.Real.$fRealFracRatio_$s$ctruncate_closure:
         const GHC.Real.$fRealFracRatio_$s$ctruncate_info;
         const 0;
 },
 sat_s1jxt_entry() //  [R1]
         { []
         }
     {offset
       c1reS: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1reT; else goto c1reU;
       c1reT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1reU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c1reN_info;
           R3 = GHC.Real.even1_closure;
           _s1jxl::P64 = P64[R1 + 24];
           R2 = _s1jxl::P64;
           P64[Sp - 32] = P64[R1 + 16];
           P64[Sp - 24] = _s1jxl::P64;
           Sp = Sp - 40;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jxt_info" {
     sat_s1jxt_info:
         const sat_s1jxt_entry;
         const 2;
         const 12884901906;
         const S1jKw_srt+1216;
 },
 _c1reN() //  [R1]
         { []
         }
     {offset
       c1reN: // global
           if (R1 == 1) goto c1reR; else goto c1reQ;
       c1reR: // global
           R1 = GHC.Real.divZeroError_closure;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       c1reQ: // global
           _s1jxl::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c1reX_info;
           R3 = _s1jxl::P64;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Integer.Type.quotRemInteger_entry(R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c1reN_info" {
     block_c1reN_info:
         const _c1reN;
         const 2;
         const 4294967326;
         const S1jKw_srt+1216;
 },
 _c1reX() //  [R1]
         { []
         }
     {offset
       c1reX: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1reX_info" {
     block_c1reX_info:
         const _c1reX;
         const 0;
         const 30;
 },
 GHC.Real.$fRealFracRatio_$s$ctruncate_entry() //  [R2, R3]
         { []
         }
     {offset
       c1rf4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1rfa; else goto c1rfb;
       c1rfa: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fRealFracRatio_$s$ctruncate_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1rfb: // global
           I64[Sp - 16] = block_c1reE_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1rfk; else goto c1reF;
       u1rfk: // global
           call _c1reE(R1) args: 0, res: 0, upd: 0;
       c1reF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fRealFracRatio_$s$ctruncate_info" {
     GHC.Real.$fRealFracRatio_$s$ctruncate_info:
         const GHC.Real.$fRealFracRatio_$s$ctruncate_entry;
         const 0;
         const 30064771086;
         const 8589934607;
         const S1jKw_srt+1216;
 },
 _c1reE() //  [R1]
         { []
         }
     {offset
       c1reE: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1rfe; else goto c1rfd;
       c1rfe: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1rfd: // global
           _s1jxk::P64 = P64[R1 + 7];
           _s1jxl::P64 = P64[R1 + 15];
           I64[Hp - 24] = sat_s1jxt_info;
           P64[Hp - 8] = _s1jxk::P64;
           P64[Hp] = _s1jxl::P64;
           I64[Sp] = block_c1rf5_info;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = Hp - 24;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1reE_info" {
     block_c1reE_info:
         const _c1reE;
         const 1;
         const 12884901918;
         const S1jKw_srt+1216;
 },
 _c1rf5() //  [R1]
         { []
         }
     {offset
       c1rf5: // global
           I64[Sp] = block_c1rf9_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1rf5_info" {
     block_c1rf5_info:
         const _c1rf5;
         const 1;
         const 30;
 },
 _c1rf9() //  [R1]
         { []
         }
     {offset
       c1rf9: // global
           R2 = R1;
           I64[Sp] = stg_ap_p_info;
           call GHC.Num.fromInteger_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1rf9_info" {
     block_c1rf9_info:
         const _c1rf9;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:06.099430058 UTC

[section ""data" . GHC.Real.$fRealFracRatio_$ctruncate_closure" {
     GHC.Real.$fRealFracRatio_$ctruncate_closure:
         const GHC.Real.$fRealFracRatio_$ctruncate_info;
 },
 GHC.Real.$fRealFracRatio_$ctruncate_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1rfV: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1rfZ; else goto c1rg0;
       c1rfZ: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fRealFracRatio_$ctruncate_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1rg0: // global
           I64[Sp - 24] = block_c1rfS_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u1rg4; else goto c1rfT;
       u1rg4: // global
           call _c1rfS(R1) args: 0, res: 0, upd: 0;
       c1rfT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fRealFracRatio_$ctruncate_info" {
     GHC.Real.$fRealFracRatio_$ctruncate_info:
         const GHC.Real.$fRealFracRatio_$ctruncate_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c1rfS() //  [R1]
         { []
         }
     {offset
       c1rfS: // global
           _s1jxv::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c1rfY_info;
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = _s1jxv::P64;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Real.$w$cproperFraction_entry(R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1rfS_info" {
     block_c1rfS_info:
         const _c1rfS;
         const 2;
         const 30;
 },
 _c1rfY() //  [R1]
         { []
         }
     {offset
       c1rfY: // global
           R1 = R1;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1rfY_info" {
     block_c1rfY_info:
         const _c1rfY;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:06.105912581 UTC

[section ""data" . GHC.Real.$fRealFracRatio_$s$fRealFracRatio_closure" {
     GHC.Real.$fRealFracRatio_$s$fRealFracRatio_closure:
         const GHC.Real.C:RealFrac_con_info;
         const GHC.Real.$fRealFracRatio_$s$fRealRatio_closure+1;
         const GHC.Real.$fFractionalRatio_$s$fFractionalRatio_closure+1;
         const GHC.Real.$fEnumRatio_$s$cproperFraction_closure+2;
         const GHC.Real.$fRealFracRatio_$s$ctruncate_closure+2;
         const GHC.Real.$fRealFracRatio_$s$cround_closure+2;
         const GHC.Real.$fRealFracRatio_$s$cceiling_closure+2;
         const GHC.Real.$fRealFracRatio_$s$cfloor_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:06.110736816 UTC

[section ""data" . GHC.Real.$fRealFracRatio_closure" {
     GHC.Real.$fRealFracRatio_closure:
         const GHC.Real.$fRealFracRatio_info;
         const 0;
 },
 sat_s1jxK_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c1rgr: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Real.$fRealFracRatio_$cfloor_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1jxK_info" {
     sat_s1jxK_info:
         const sat_s1jxK_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const S1jKw_srt+1160;
 },
 sat_s1jxJ_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c1rgz: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Real.$fRealFracRatio_$cceiling_entry(R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1jxJ_info" {
     sat_s1jxJ_info:
         const sat_s1jxJ_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const S1jKw_srt+1128;
 },
 sat_s1jxI_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c1rgH: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Real.$fRealFracRatio_$cround_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1jxI_info" {
     sat_s1jxI_info:
         const sat_s1jxI_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const S1jKw_srt+1208;
 },
 sat_s1jxH_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c1rgP: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Real.$fRealFracRatio_$ctruncate_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1jxH_info" {
     sat_s1jxH_info:
         const sat_s1jxH_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s1jxG_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c1rgX: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Real.$fEnumRatio_$cproperFraction_entry(R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1jxG_info" {
     sat_s1jxG_info:
         const sat_s1jxG_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s1jxF_entry() //  [R1]
         { []
         }
     {offset
       c1rh4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1rh5; else goto c1rh6;
       c1rh5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1rh6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$fFractionalRatio_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jxF_info" {
     sat_s1jxF_info:
         const sat_s1jxF_entry;
         const 1;
         const 4294967312;
         const S1jKw_srt+1048;
 },
 sat_s1jxE_entry() //  [R1]
         { []
         }
     {offset
       c1rhb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1rhc; else goto c1rhd;
       c1rhc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1rhd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$fRealRatio_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jxE_info" {
     sat_s1jxE_info:
         const sat_s1jxE_entry;
         const 1;
         const 4294967312;
         const S1jKw_srt+1096;
 },
 GHC.Real.$fRealFracRatio_entry() //  [R2]
         { []
         }
     {offset
       c1rhf: // global
           Hp = Hp + 192;
           if (Hp > HpLim) (likely: False) goto c1rhj; else goto c1rhi;
       c1rhj: // global
           HpAlloc = 192;
           R2 = R2;
           R1 = GHC.Real.$fRealFracRatio_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1rhi: // global
           I64[Hp - 184] = sat_s1jxK_info;
           P64[Hp - 176] = R2;
           I64[Hp - 168] = sat_s1jxJ_info;
           P64[Hp - 160] = R2;
           I64[Hp - 152] = sat_s1jxI_info;
           P64[Hp - 144] = R2;
           I64[Hp - 136] = sat_s1jxH_info;
           P64[Hp - 128] = R2;
           I64[Hp - 120] = sat_s1jxG_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_s1jxF_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_s1jxE_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = GHC.Real.C:RealFrac_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = Hp - 104;
           P64[Hp - 32] = Hp - 118;
           P64[Hp - 24] = Hp - 134;
           P64[Hp - 16] = Hp - 150;
           P64[Hp - 8] = Hp - 166;
           P64[Hp] = Hp - 182;
           R1 = Hp - 55;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fRealFracRatio_info" {
     GHC.Real.$fRealFracRatio_info:
         const GHC.Real.$fRealFracRatio_entry;
         const 0;
         const 76636239628861454;
         const 4294967301;
         const S1jKw_srt+1048;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:06.129189613 UTC

[section ""data" . g_r1j3N_closure" {
     g_r1j3N_closure:
         const g_r1j3N_info;
         const 0;
 },
 section ""relreadonly" . u1riW_srtd" {
     u1riW_srtd:
         const S1jKw_srt;
         const 157;
         const 1;
         const 4611686018427388416;
         const 301989888;
 },
 g_r1j3N_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1rhZ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1ri0; else goto u1riQ;
       c1ri0: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = g_r1j3N_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       u1riQ: // global
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call _c1rhU() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . g_r1j3N_info" {
     g_r1j3N_info:
         const g_r1j3N_entry;
         const 0;
         const 18446744069414584334;
         const 12884901911;
         const u1riW_srtd;
 },
 _c1rhU() //  []
         { []
         }
     {offset
       c1rhU: // global
           I64[Sp - 8] = block_c1rhX_info;
           R3 = GHC.Real.even2_closure;
           R2 = P64[Sp + 8];
           Sp = Sp - 8;
           call GHC.Integer.Type.remInteger_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . u1riX_srtd" {
     u1riX_srtd:
         const S1jKw_srt;
         const 154;
         const 1;
         const 4611686018427388416;
         const 33554432;
 },
 _c1rhX() //  [R1]
         { []
         }
     {offset
       c1rhX: // global
           I64[Sp] = block_c1ri4_info;
           R3 = GHC.Real.even1_closure;
           R2 = R1;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1rhX_info" {
     block_c1rhX_info:
         const _c1rhX;
         const 3;
         const 18446744069414584350;
         const u1riX_srtd;
 },
 section ""relreadonly" . u1riY_srtd" {
     u1riY_srtd:
         const S1jKw_srt;
         const 154;
         const 1;
         const 4611686018427388416;
         const 33554432;
 },
 _c1ri4() //  [R1]
         { []
         }
     {offset
       c1ri4: // global
           _s1jxM::P64 = P64[Sp + 16];
           if (R1 == 1) goto c1riK; else goto c1ric;
       c1riK: // global
           I64[Sp] = block_c1riE_info;
           R3 = GHC.Real.even2_closure;
           R2 = _s1jxM::P64;
           call GHC.Integer.Type.quotInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
       c1ric: // global
           I64[Sp] = block_c1ri9_info;
           R3 = GHC.Real.$fEnumRatio1_closure;
           R2 = _s1jxM::P64;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1ri4_info" {
     block_c1ri4_info:
         const _c1ri4;
         const 3;
         const 18446744069414584350;
         const u1riY_srtd;
 },
 section ""relreadonly" . u1riZ_srtd" {
     u1riZ_srtd:
         const S1jKw_srt;
         const 154;
         const 1;
         const 4611686018427388416;
         const 33554432;
 },
 _c1riE() //  [R1]
         { []
         }
     {offset
       c1riE: // global
           _s1jxL::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1riI_info;
           R3 = _s1jxL::P64;
           R2 = _s1jxL::P64;
           P64[Sp + 16] = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1riE_info" {
     block_c1riE_info:
         const _c1riE;
         const 131;
         const 18446744069414584350;
         const u1riZ_srtd;
 },
 section ""relreadonly" . u1rj0_srtd" {
     u1rj0_srtd:
         const S1jKw_srt;
         const 154;
         const 1;
         const 4611686018427388416;
         const 33554432;
 },
 _c1riI() //  [R1]
         { []
         }
     {offset
       c1riI: // global
           P64[Sp] = R1;
           P64[Sp + 8] = P64[Sp + 8];
           P64[Sp + 16] = P64[Sp + 16];
           call _c1rhU() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1riI_info" {
     block_c1riI_info:
         const _c1riI;
         const 2;
         const 18446744069414584350;
         const u1rj0_srtd;
 },
 section ""relreadonly" . u1rj1_srtd" {
     u1rj1_srtd:
         const S1jKw_srt;
         const 154;
         const 1;
         const 4611686018427388416;
         const 33554432;
 },
 _c1ri9() //  [R1]
         { []
         }
     {offset
       c1ri9: // global
           _s1jxL::P64 = P64[Sp + 8];
           _s1jxN::P64 = P64[Sp + 24];
           if (R1 == 1) goto c1riB; else goto c1rir;
       c1riB: // global
           R3 = _s1jxN::P64;
           R2 = _s1jxL::P64;
           Sp = Sp + 32;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 0, upd: 8;
       c1rir: // global
           I64[Sp] = block_c1rig_info;
           R3 = _s1jxN::P64;
           R2 = _s1jxL::P64;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1ri9_info" {
     block_c1ri9_info:
         const _c1ri9;
         const 3;
         const 18446744069414584350;
         const u1rj1_srtd;
 },
 section ""relreadonly" . u1rj2_srtd" {
     u1rj2_srtd:
         const S1jKw_srt;
         const 154;
         const 1;
         const 4611686018427388416;
         const 33554432;
 },
 _c1rig() //  [R1]
         { []
         }
     {offset
       c1rig: // global
           I64[Sp] = block_c1rik_info;
           R3 = GHC.Real.even2_closure;
           R2 = P64[Sp + 16];
           P64[Sp + 24] = R1;
           call GHC.Integer.Type.quotInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1rig_info" {
     block_c1rig_info:
         const _c1rig;
         const 259;
         const 18446744069414584350;
         const u1rj2_srtd;
 },
 section ""relreadonly" . u1rj3_srtd" {
     u1rj3_srtd:
         const S1jKw_srt;
         const 154;
         const 1;
         const 4611686018427388416;
         const 33554432;
 },
 _c1rik() //  [R1]
         { []
         }
     {offset
       c1rik: // global
           _s1jxL::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1rio_info;
           R3 = _s1jxL::P64;
           R2 = _s1jxL::P64;
           P64[Sp + 16] = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1rik_info" {
     block_c1rik_info:
         const _c1rik;
         const 131;
         const 18446744069414584350;
         const u1rj3_srtd;
 },
 section ""relreadonly" . u1rj4_srtd" {
     u1rj4_srtd:
         const S1jKw_srt;
         const 154;
         const 1;
         const 4611686018427388416;
         const 33554432;
 },
 _c1rio() //  [R1]
         { []
         }
     {offset
       c1rio: // global
           P64[Sp] = R1;
           P64[Sp + 8] = P64[Sp + 8];
           P64[Sp + 16] = P64[Sp + 16];
           call _c1rhU() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1rio_info" {
     block_c1rio_info:
         const _c1rio;
         const 2;
         const 18446744069414584350;
         const u1rj4_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:06.153874753 UTC

[section ""data" . GHC.Real.^_f_closure" {
     GHC.Real.^_f_closure:
         const GHC.Real.^_f_info;
         const 0;
 },
 section ""relreadonly" . u1rkJ_srtd" {
     u1rkJ_srtd:
         const S1jKw_srt;
         const 158;
         const 1;
         const 4611686018427388416;
         const 838860800;
 },
 GHC.Real.^_f_entry() //  [R2, R3]
         { []
         }
     {offset
       c1rjT: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1rjU; else goto u1rkF;
       c1rjU: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.^_f_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       u1rkF: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _c1rjO() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . GHC.Real.^_f_info" {
     GHC.Real.^_f_info:
         const GHC.Real.^_f_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const u1rkJ_srtd;
 },
 _c1rjO() //  []
         { []
         }
     {offset
       c1rjO: // global
           I64[Sp - 8] = block_c1rjR_info;
           R3 = GHC.Real.even2_closure;
           R2 = P64[Sp + 8];
           Sp = Sp - 8;
           call GHC.Integer.Type.remInteger_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . u1rkK_srtd" {
     u1rkK_srtd:
         const S1jKw_srt;
         const 157;
         const 1;
         const 4611686018427388416;
         const 301989888;
 },
 _c1rjR() //  [R1]
         { []
         }
     {offset
       c1rjR: // global
           I64[Sp] = block_c1rjY_info;
           R3 = GHC.Real.even1_closure;
           R2 = R1;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1rjR_info" {
     block_c1rjR_info:
         const _c1rjR;
         const 2;
         const 18446744069414584350;
         const u1rkK_srtd;
 },
 section ""relreadonly" . u1rkL_srtd" {
     u1rkL_srtd:
         const S1jKw_srt;
         const 157;
         const 1;
         const 4611686018427388416;
         const 301989888;
 },
 _c1rjY() //  [R1]
         { []
         }
     {offset
       c1rjY: // global
           _s1jxX::P64 = P64[Sp + 16];
           if (R1 == 1) goto c1rkz; else goto c1rk6;
       c1rkz: // global
           I64[Sp] = block_c1rkt_info;
           R3 = GHC.Real.even2_closure;
           R2 = _s1jxX::P64;
           call GHC.Integer.Type.quotInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
       c1rk6: // global
           I64[Sp] = block_c1rk3_info;
           R3 = GHC.Real.$fEnumRatio1_closure;
           R2 = _s1jxX::P64;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1rjY_info" {
     block_c1rjY_info:
         const _c1rjY;
         const 2;
         const 18446744069414584350;
         const u1rkL_srtd;
 },
 section ""relreadonly" . u1rkM_srtd" {
     u1rkM_srtd:
         const S1jKw_srt;
         const 157;
         const 1;
         const 4611686018427388416;
         const 301989888;
 },
 _c1rkt() //  [R1]
         { []
         }
     {offset
       c1rkt: // global
           _s1jxW::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1rkx_info;
           R3 = _s1jxW::P64;
           R2 = _s1jxW::P64;
           P64[Sp + 16] = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1rkt_info" {
     block_c1rkt_info:
         const _c1rkt;
         const 130;
         const 18446744069414584350;
         const u1rkM_srtd;
 },
 section ""relreadonly" . u1rkN_srtd" {
     u1rkN_srtd:
         const S1jKw_srt;
         const 157;
         const 1;
         const 4611686018427388416;
         const 301989888;
 },
 _c1rkx() //  [R1]
         { []
         }
     {offset
       c1rkx: // global
           P64[Sp] = R1;
           P64[Sp + 8] = P64[Sp + 8];
           call _c1rjO() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1rkx_info" {
     block_c1rkx_info:
         const _c1rkx;
         const 1;
         const 18446744069414584350;
         const u1rkN_srtd;
 },
 section ""relreadonly" . u1rkO_srtd" {
     u1rkO_srtd:
         const S1jKw_srt;
         const 157;
         const 1;
         const 512;
         const 268435456;
 },
 _c1rk3() //  [R1]
         { []
         }
     {offset
       c1rk3: // global
           if (R1 == 1) goto c1rkq; else goto c1rkh;
       c1rkq: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c1rkh: // global
           I64[Sp] = block_c1rka_info;
           R3 = GHC.Real.even2_closure;
           R2 = P64[Sp + 16];
           call GHC.Integer.Type.quotInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1rk3_info" {
     block_c1rk3_info:
         const _c1rk3;
         const 2;
         const 18446744069414584350;
         const u1rkO_srtd;
 },
 section ""relreadonly" . u1rkP_srtd" {
     u1rkP_srtd:
         const S1jKw_srt;
         const 157;
         const 1;
         const 0;
         const 268435456;
 },
 _c1rka() //  [R1]
         { []
         }
     {offset
       c1rka: // global
           I64[Sp] = block_c1rke_info;
           _s1jxW::P64 = P64[Sp + 8];
           R3 = _s1jxW::P64;
           R2 = _s1jxW::P64;
           P64[Sp + 16] = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1rka_info" {
     block_c1rka_info:
         const _c1rka;
         const 130;
         const 18446744069414584350;
         const u1rkP_srtd;
 },
 _c1rke() //  [R1]
         { []
         }
     {offset
       c1rke: // global
           R4 = P64[Sp + 8];
           R3 = P64[Sp + 16];
           R2 = R1;
           Sp = Sp + 24;
           call g_r1j3N_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1rke_info" {
     block_c1rke_info:
         const _c1rke;
         const 2;
         const 4294967326;
         const S1jKw_srt+1248;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:06.172766774 UTC

[section ""cstring" . lvl5_r1j3O_bytes" {
     lvl5_r1j3O_bytes:
         I8[] [78,101,103,97,116,105,118,101,32,101,120,112,111,110,101,110,116]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:06.176351684 UTC

[section ""data" . GHC.Real.^1_closure" {
     GHC.Real.^1_closure:
         const GHC.Real.^1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Real.^1_entry() //  [R1]
         { []
         }
     {offset
       c1rlB: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1rlC; else goto c1rlD;
       c1rlC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1rlD: // global
           (_c1rlw::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c1rlw::I64 == 0) goto c1rly; else goto c1rlx;
       c1rly: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c1rlx: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c1rlw::I64;
           I64[Sp - 24] = block_c1rlz_info;
           R2 = lvl5_r1j3O_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Real.^1_info" {
     GHC.Real.^1_info:
         const GHC.Real.^1_entry;
         const 0;
         const 4294967317;
         const S1jKw_srt+1264;
 },
 _c1rlz() //  [R1]
         { []
         }
     {offset
       c1rlz: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1rlz_info" {
     block_c1rlz_info:
         const _c1rlz;
         const 0;
         const 4294967326;
         const S1jKw_srt+1264;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:06.18280613 UTC

[section ""data" . GHC.Real.^_$s^_closure" {
     GHC.Real.^_$s^_closure:
         const GHC.Real.^_$s^_info;
         const 0;
 },
 section ""relreadonly" . u1rmk_srtd" {
     u1rmk_srtd:
         const S1jKw_srt+1008;
         const 35;
         const 28051505153;
 },
 GHC.Real.^_$s^_entry() //  [R2, R3]
         { []
         }
     {offset
       c1rm0: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1rm1; else goto c1rm2;
       c1rm1: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.^_$s^_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1rm2: // global
           I64[Sp - 24] = block_c1rlV_info;
           _s1jy7::P64 = R3;
           R3 = GHC.Real.even1_closure;
           _s1jy6::P64 = R2;
           R2 = _s1jy7::P64;
           P64[Sp - 16] = _s1jy6::P64;
           P64[Sp - 8] = _s1jy7::P64;
           Sp = Sp - 24;
           call GHC.Integer.Type.ltInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.^_$s^_info" {
     GHC.Real.^_$s^_info:
         const GHC.Real.^_$s^_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const u1rmk_srtd;
 },
 section ""relreadonly" . u1rml_srtd" {
     u1rml_srtd:
         const S1jKw_srt+1008;
         const 35;
         const 19461570561;
 },
 _c1rlV() //  [R1]
         { []
         }
     {offset
       c1rlV: // global
           if (R1 == 1) goto c1rlZ; else goto c1rlY;
       c1rlZ: // global
           R1 = GHC.Real.^1_closure;
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c1rlY: // global
           I64[Sp] = block_c1rm5_info;
           R3 = GHC.Real.even1_closure;
           R2 = P64[Sp + 16];
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1rlV_info" {
     block_c1rlV_info:
         const _c1rlV;
         const 2;
         const 18446744069414584350;
         const u1rml_srtd;
 },
 _c1rm5() //  [R1]
         { []
         }
     {offset
       c1rm5: // global
           if (R1 == 1) goto c1rmg; else goto c1rmc;
       c1rmg: // global
           R1 = GHC.Real.$fEnumRatio1_closure;
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c1rmc: // global
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Real.^_f_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1rm5_info" {
     block_c1rm5_info:
         const _c1rm5;
         const 2;
         const 9223372041149743134;
         const S1jKw_srt+1008;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:06.191830222 UTC

[section ""data" . GHC.Real.$w$s$cfromEnum_closure" {
     GHC.Real.$w$s$cfromEnum_closure:
         const GHC.Real.$w$s$cfromEnum_info;
         const 0;
 },
 GHC.Real.$w$s$cfromEnum_entry() //  [R2, R3]
         { []
         }
     {offset
       c1rmK: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1rmL; else goto c1rmM;
       c1rmL: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$w$s$cfromEnum_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1rmM: // global
           I64[Sp - 24] = block_c1rmF_info;
           _s1jyb::P64 = R3;
           R3 = GHC.Real.even1_closure;
           _s1jya::P64 = R2;
           R2 = _s1jyb::P64;
           P64[Sp - 16] = _s1jya::P64;
           P64[Sp - 8] = _s1jyb::P64;
           Sp = Sp - 24;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$w$s$cfromEnum_info" {
     GHC.Real.$w$s$cfromEnum_info:
         const GHC.Real.$w$s$cfromEnum_entry;
         const 0;
         const 2211908157454;
         const 8589934607;
         const S1jKw_srt+1216;
 },
 _c1rmF() //  [R1]
         { []
         }
     {offset
       c1rmF: // global
           if (R1 == 1) goto c1rmJ; else goto c1rmI;
       c1rmJ: // global
           R1 = GHC.Real.divZeroError_closure;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c1rmI: // global
           _s1jyb::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c1rmP_info;
           R3 = _s1jyb::P64;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Integer.Type.quotRemInteger_entry(R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1rmF_info" {
     block_c1rmF_info:
         const _c1rmF;
         const 2;
         const 4294967326;
         const S1jKw_srt+1216;
 },
 _c1rmP() //  [R1]
         { []
         }
     {offset
       c1rmP: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1rmP_info" {
     block_c1rmP_info:
         const _c1rmP;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:06.200390337 UTC

[section ""data" . GHC.Real.$fEnumRatio_$s$cfromEnum_closure" {
     GHC.Real.$fEnumRatio_$s$cfromEnum_closure:
         const GHC.Real.$fEnumRatio_$s$cfromEnum_info;
         const 0;
 },
 GHC.Real.$fEnumRatio_$s$cfromEnum_entry() //  [R2]
         { []
         }
     {offset
       c1rne: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1rnm; else goto c1rnn;
       c1rnm: // global
           R2 = R2;
           R1 = GHC.Real.$fEnumRatio_$s$cfromEnum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1rnn: // global
           I64[Sp - 8] = block_c1rnb_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1rns; else goto c1rnc;
       u1rns: // global
           call _c1rnb(R1) args: 0, res: 0, upd: 0;
       c1rnc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fEnumRatio_$s$cfromEnum_info" {
     GHC.Real.$fEnumRatio_$s$cfromEnum_info:
         const GHC.Real.$fEnumRatio_$s$cfromEnum_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S1jKw_srt+1288;
 },
 _c1rnb() //  [R1]
         { []
         }
     {offset
       c1rnb: // global
           I64[Sp] = block_c1rnh_info;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Real.$w$s$cfromEnum_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1rnb_info" {
     block_c1rnb_info:
         const _c1rnb;
         const 0;
         const 4294967326;
         const S1jKw_srt+1288;
 },
 _c1rnh() //  [R1]
         { []
         }
     {offset
       c1rnh: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1rnr; else goto c1rnq;
       c1rnr: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c1rnq: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1rnh_info" {
     block_c1rnh_info:
         const _c1rnh;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:06.208820487 UTC

[section ""data" . GHC.Real.$fEnumRatio_$cfromEnum_closure" {
     GHC.Real.$fEnumRatio_$cfromEnum_closure:
         const GHC.Real.$fEnumRatio_$cfromEnum_info;
 },
 sat_s1jyu_entry() //  [R1]
         { []
         }
     {offset
       c1rnV: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c1rnW; else goto c1rnX;
       c1rnW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1rnX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c1rnT_info;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_pp_info;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = P64[R1 + 32];
           Sp = Sp - 48;
           call GHC.Real.quotRem_entry(R2) args: 32, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jyu_info" {
     sat_s1jyu_info:
         const sat_s1jyu_entry;
         const 3;
         const 15;
 },
 _c1rnT() //  [R1]
         { []
         }
     {offset
       c1rnT: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1rnT_info" {
     block_c1rnT_info:
         const _c1rnT;
         const 0;
         const 30;
 },
 GHC.Real.$fEnumRatio_$cfromEnum_entry() //  [R2, R3]
         { []
         }
     {offset
       c1ro1: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1rob; else goto c1roc;
       c1rob: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fEnumRatio_$cfromEnum_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1roc: // global
           I64[Sp - 16] = block_c1rnK_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1rok; else goto c1rnL;
       u1rok: // global
           call _c1rnK(R1) args: 0, res: 0, upd: 0;
       c1rnL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fEnumRatio_$cfromEnum_info" {
     GHC.Real.$fEnumRatio_$cfromEnum_info:
         const GHC.Real.$fEnumRatio_$cfromEnum_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1rnK() //  [R1]
         { []
         }
     {offset
       c1rnK: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c1rof; else goto c1roe;
       c1rof: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1roe: // global
           _s1jyp::P64 = P64[R1 + 7];
           _s1jyq::P64 = P64[R1 + 15];
           I64[Hp - 32] = sat_s1jyu_info;
           _s1jym::P64 = P64[Sp + 8];
           P64[Hp - 16] = _s1jym::P64;
           P64[Hp - 8] = _s1jyp::P64;
           P64[Hp] = _s1jyq::P64;
           I64[Sp + 8] = block_c1ro2_info;
           R2 = _s1jym::P64;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = Hp - 32;
           Sp = Sp - 8;
           call GHC.Real.toInteger_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1rnK_info" {
     block_c1rnK_info:
         const _c1rnK;
         const 1;
         const 30;
 },
 _c1ro2() //  [R1]
         { []
         }
     {offset
       c1ro2: // global
           I64[Sp] = block_c1ro6_info;
           R2 = R1;
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1ro2_info" {
     block_c1ro2_info:
         const _c1ro2;
         const 0;
         const 30;
 },
 _c1ro6() //  [R1]
         { []
         }
     {offset
       c1ro6: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1roj; else goto c1roi;
       c1roj: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c1roi: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1ro6_info" {
     block_c1ro6_info:
         const _c1ro6;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:06.221720309 UTC

[section ""data" . GHC.Real.ratioPrec1_closure" {
     GHC.Real.ratioPrec1_closure:
         const GHC.Types.I#_con_info;
         const 8;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:06.22341174 UTC

[section ""cstring" . GHC.Real.$fShowRatio2_bytes" {
     GHC.Real.$fShowRatio2_bytes:
         I8[] [32,37,32]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:06.229942281 UTC

[section ""data" . GHC.Real.$w$s$cshowsPrec_closure" {
     GHC.Real.$w$s$cshowsPrec_closure:
         const GHC.Real.$w$s$cshowsPrec_info;
         const 0;
 },
 GHC.Real.$w$s$cshowsPrec_slow() //  [R1]
         { []
         }
     {offset
       c1roO: // global
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call GHC.Real.$w$s$cshowsPrec_entry(R5,
                                               R4,
                                               R3,
                                               R2,
                                               R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s1jyF_entry() //  [R1]
         { []
         }
     {offset
       c1rp6: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1rp7; else goto c1rp8;
       c1rp7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1rp8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c1rp3_info;
           R4 = P64[R1 + 24];
           R3 = P64[R1 + 16];
           R2 = 8;
           Sp = Sp - 24;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jyF_info" {
     sat_s1jyF_info:
         const sat_s1jyF_entry;
         const 2;
         const 4294967314;
         const S1jKw_srt+1304;
 },
 _c1rp3() //  [R1, R2]
         { []
         }
     {offset
       c1rp3: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1rpb; else goto c1rpa;
       c1rpb: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c1rpa: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1rp3_info" {
     block_c1rp3_info:
         const _c1rp3;
         const 0;
         const 30;
 },
 sat_s1jyG_entry() //  [R1]
         { []
         }
     {offset
       c1rpc: // global
           _s1jyG::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1rpd; else goto c1rpe;
       c1rpe: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1rpg; else goto c1rpf;
       c1rpg: // global
           HpAlloc = 32;
           goto c1rpd;
       c1rpd: // global
           R1 = _s1jyG::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1rpf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1jyG::P64;
           _s1jyz::P64 = P64[_s1jyG::P64 + 16];
           _s1jyA::P64 = P64[_s1jyG::P64 + 24];
           I64[Hp - 24] = sat_s1jyF_info;
           P64[Hp - 8] = _s1jyz::P64;
           P64[Hp] = _s1jyA::P64;
           R3 = Hp - 24;
           R2 = GHC.Real.$fShowRatio2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jyG_info" {
     sat_s1jyG_info:
         const sat_s1jyG_entry;
         const 2;
         const 4294967314;
         const S1jKw_srt+1304;
 },
 sat_s1jyL_entry() //  [R1]
         { []
         }
     {offset
       c1rpy: // global
           _s1jyL::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c1rpz; else goto c1rpA;
       c1rpA: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1rpC; else goto c1rpB;
       c1rpC: // global
           HpAlloc = 24;
           goto c1rpz;
       c1rpz: // global
           R1 = _s1jyL::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1rpB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1jyL::P64;
           _s1jyz::P64 = P64[_s1jyL::P64 + 16];
           _s1jyA::P64 = P64[_s1jyL::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s1jyA::P64;
           I64[Sp - 24] = block_c1rpv_info;
           R4 = Hp - 14;
           R3 = _s1jyz::P64;
           R2 = 8;
           Sp = Sp - 24;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jyL_info" {
     sat_s1jyL_info:
         const sat_s1jyL_entry;
         const 2;
         const 4294967314;
         const S1jKw_srt+1304;
 },
 _c1rpv() //  [R1, R2]
         { []
         }
     {offset
       c1rpv: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1rpF; else goto c1rpE;
       c1rpF: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c1rpE: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1rpv_info" {
     block_c1rpv_info:
         const _c1rpv;
         const 0;
         const 30;
 },
 sat_s1jyM_entry() //  [R1]
         { []
         }
     {offset
       c1rpG: // global
           _s1jyM::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1rpH; else goto c1rpI;
       c1rpI: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1rpK; else goto c1rpJ;
       c1rpK: // global
           HpAlloc = 32;
           goto c1rpH;
       c1rpH: // global
           R1 = _s1jyM::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1rpJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1jyM::P64;
           _s1jyz::P64 = P64[_s1jyM::P64 + 16];
           _s1jyA::P64 = P64[_s1jyM::P64 + 24];
           I64[Hp - 24] = sat_s1jyL_info;
           P64[Hp - 8] = _s1jyz::P64;
           P64[Hp] = _s1jyA::P64;
           R3 = Hp - 24;
           R2 = GHC.Real.$fShowRatio2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jyM_info" {
     sat_s1jyM_info:
         const sat_s1jyM_entry;
         const 2;
         const 4294967314;
         const S1jKw_srt+1304;
 },
 sat_s1jyQ_entry() //  [R1]
         { []
         }
     {offset
       c1rpO: // global
           _s1jyQ::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c1rpP; else goto c1rpQ;
       c1rpQ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1rpS; else goto c1rpR;
       c1rpS: // global
           HpAlloc = 32;
           goto c1rpP;
       c1rpP: // global
           R1 = _s1jyQ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1rpR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1jyQ::P64;
           _s1jyy::P64 = P64[_s1jyQ::P64 + 16];
           _s1jyz::P64 = P64[_s1jyQ::P64 + 24];
           _s1jyA::P64 = P64[_s1jyQ::P64 + 32];
           I64[Hp - 24] = sat_s1jyM_info;
           P64[Hp - 8] = _s1jyz::P64;
           P64[Hp] = _s1jyA::P64;
           I64[Sp - 24] = block_c1rpL_info;
           R4 = Hp - 24;
           R3 = _s1jyy::P64;
           R2 = 8;
           Sp = Sp - 24;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jyQ_info" {
     sat_s1jyQ_info:
         const sat_s1jyQ_entry;
         const 3;
         const 4294967311;
         const S1jKw_srt+1304;
 },
 _c1rpL() //  [R1, R2]
         { []
         }
     {offset
       c1rpL: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1rpV; else goto c1rpU;
       c1rpV: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c1rpU: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1rpL_info" {
     block_c1rpL_info:
         const _c1rpL;
         const 0;
         const 30;
 },
 GHC.Real.$w$s$cshowsPrec_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c1rpZ: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c1rq3; else goto c1rq2;
       c1rq3: // global
           HpAlloc = 40;
           R1 = GHC.Real.$w$s$cshowsPrec_closure;
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       c1rq2: // global
           if (%MO_S_Le_W64(R2, 7)) goto c1rpX; else goto c1rpY;
       c1rpX: // global
           I64[Hp - 32] = sat_s1jyG_info;
           P64[Hp - 16] = R4;
           P64[Hp - 8] = R5;
           _c1roV::P64 = Hp - 32;
           Hp = Hp - 8;
           R4 = _c1roV::P64;
           R3 = R3;
           R2 = 8;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
       c1rpY: // global
           I64[Hp - 32] = sat_s1jyQ_info;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = R5;
           R2 = Hp - 32;
           R1 = GHC.Show.$fShow(,)4_closure;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$w$s$cshowsPrec_info" {
     GHC.Real.$w$s$cshowsPrec_info:
         const GHC.Real.$w$s$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 17179869184;
         const S1jKw_srt+1304;
         const 68;
         const GHC.Real.$w$s$cshowsPrec_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:06.251263184 UTC

[section ""data" . GHC.Real.$fShowRatio_$s$cshowsPrec_closure" {
     GHC.Real.$fShowRatio_$s$cshowsPrec_closure:
         const GHC.Real.$fShowRatio_$s$cshowsPrec_info;
         const 0;
 },
 GHC.Real.$fShowRatio_$s$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1rqO: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1rqZ; else goto c1rr0;
       c1rqZ: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fShowRatio_$s$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1rr0: // global
           I64[Sp - 24] = block_c1rqL_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u1rr7; else goto c1rqM;
       u1rr7: // global
           call _c1rqL(R1) args: 0, res: 0, upd: 0;
       c1rqM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fShowRatio_$s$cshowsPrec_info" {
     GHC.Real.$fShowRatio_$s$cshowsPrec_info:
         const GHC.Real.$fShowRatio_$s$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S1jKw_srt+1312;
 },
 _c1rqL() //  [R1]
         { []
         }
     {offset
       c1rqL: // global
           I64[Sp] = block_c1rqR_info;
           _s1jyV::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1jyV::I64;
           if (R1 & 7 != 0) goto u1rr6; else goto c1rqS;
       u1rr6: // global
           call _c1rqR(R1) args: 0, res: 0, upd: 0;
       c1rqS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1rqL_info" {
     block_c1rqL_info:
         const _c1rqL;
         const 2;
         const 4294967326;
         const S1jKw_srt+1312;
 },
 _c1rqR() //  [R1]
         { []
         }
     {offset
       c1rqR: // global
           _s1jyT::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c1rqW_info;
           R5 = _s1jyT::P64;
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = I64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Real.$w$s$cshowsPrec_entry(R5,
                                               R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1rqR_info" {
     block_c1rqR_info:
         const _c1rqR;
         const 66;
         const 4294967326;
         const S1jKw_srt+1312;
 },
 _c1rqW() //  [R1, R2]
         { []
         }
     {offset
       c1rqW: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1rr5; else goto c1rr4;
       c1rr5: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c1rr4: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1rqW_info" {
     block_c1rqW_info:
         const _c1rqW;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:06.264205684 UTC

[section ""data" . GHC.Real.$w$cshowsPrec_closure" {
     GHC.Real.$w$cshowsPrec_closure:
         const GHC.Real.$w$cshowsPrec_info;
 },
 GHC.Real.$w$cshowsPrec_slow() //  [R1]
         { []
         }
     {offset
       c1rrq: // global
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = I64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call GHC.Real.$w$cshowsPrec_entry(R5,
                                             R4,
                                             R3,
                                             R2,
                                             R1) args: 8, res: 0, upd: 8;
     }
 },
 f_s1jz6_entry() //  [R1]
         { []
         }
     {offset
       c1rry: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1rrz; else goto c1rrA;
       c1rrz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1rrA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Real.ratioPrec1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f_s1jz6_info" {
     f_s1jz6_info:
         const f_s1jz6_entry;
         const 2;
         const 18;
 },
 g1_s1jz7_entry() //  [R1]
         { []
         }
     {offset
       c1rrF: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1rrG; else goto c1rrH;
       c1rrG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1rrH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Real.ratioPrec1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . g1_s1jz7_info" {
     g1_s1jz7_info:
         const g1_s1jz7_entry;
         const 2;
         const 18;
 },
 sat_s1jzb_entry() //  [R1]
         { []
         }
     {offset
       c1rrV: // global
           _s1jzb::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1rrW; else goto c1rrX;
       c1rrX: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1rrZ; else goto c1rrY;
       c1rrZ: // global
           HpAlloc = 32;
           goto c1rrW;
       c1rrW: // global
           R1 = _s1jzb::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1rrY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1jzb::P64;
           _s1jz7::P64 = P64[_s1jzb::P64 + 16];
           _s1jz9::P64 = P64[_s1jzb::P64 + 24];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s1jz7::P64;
           P64[Hp] = _s1jz9::P64;
           R3 = Hp - 24;
           R2 = GHC.Real.$fShowRatio2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jzb_info" {
     sat_s1jzb_info:
         const sat_s1jzb_entry;
         const 2;
         const 18;
 },
 sat_s1jzc_entry() //  [R1, R2]
         { []
         }
     {offset
       c1rs0: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1rs4; else goto c1rs3;
       c1rs4: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1rs3: // global
           _s1jz6::P64 = P64[R1 + 7];
           _s1jz7::P64 = P64[R1 + 15];
           I64[Hp - 24] = sat_s1jzb_info;
           P64[Hp - 8] = _s1jz7::P64;
           P64[Hp] = R2;
           R2 = Hp - 24;
           R1 = _s1jz6::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1jzc_info" {
     sat_s1jzc_info:
         const sat_s1jzc_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s1jzf_entry() //  [R1]
         { []
         }
     {offset
       c1rso: // global
           _s1jzf::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1rsp; else goto c1rsq;
       c1rsq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1rss; else goto c1rsr;
       c1rss: // global
           HpAlloc = 24;
           goto c1rsp;
       c1rsp: // global
           R1 = _s1jzf::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1rsr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1jzf::P64;
           _s1jz7::P64 = P64[_s1jzf::P64 + 16];
           _s1jzd::P64 = P64[_s1jzf::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s1jzd::P64;
           R2 = Hp - 14;
           R1 = _s1jz7::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jzf_info" {
     sat_s1jzf_info:
         const sat_s1jzf_entry;
         const 2;
         const 18;
 },
 sat_s1jzg_entry() //  [R1]
         { []
         }
     {offset
       c1rst: // global
           _s1jzg::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1rsu; else goto c1rsv;
       c1rsv: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1rsx; else goto c1rsw;
       c1rsx: // global
           HpAlloc = 32;
           goto c1rsu;
       c1rsu: // global
           R1 = _s1jzg::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1rsw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1jzg::P64;
           _s1jz7::P64 = P64[_s1jzg::P64 + 16];
           _s1jzd::P64 = P64[_s1jzg::P64 + 24];
           I64[Hp - 24] = sat_s1jzf_info;
           P64[Hp - 8] = _s1jz7::P64;
           P64[Hp] = _s1jzd::P64;
           R3 = Hp - 24;
           R2 = GHC.Real.$fShowRatio2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jzg_info" {
     sat_s1jzg_info:
         const sat_s1jzg_entry;
         const 2;
         const 18;
 },
 sat_s1jzh_entry() //  [R1]
         { []
         }
     {offset
       c1rsy: // global
           _s1jzh::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1rsz; else goto c1rsA;
       c1rsA: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1rsC; else goto c1rsB;
       c1rsC: // global
           HpAlloc = 32;
           goto c1rsz;
       c1rsz: // global
           R1 = _s1jzh::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1rsB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1jzh::P64;
           _s1jz6::P64 = P64[_s1jzh::P64 + 16];
           _s1jz7::P64 = P64[_s1jzh::P64 + 24];
           _s1jzd::P64 = P64[_s1jzh::P64 + 32];
           I64[Hp - 24] = sat_s1jzg_info;
           P64[Hp - 8] = _s1jz7::P64;
           P64[Hp] = _s1jzd::P64;
           R2 = Hp - 24;
           R1 = _s1jz6::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jzh_info" {
     sat_s1jzh_info:
         const sat_s1jzh_entry;
         const 3;
         const 15;
 },
 sat_s1jzi_entry() //  [R1, R2]
         { []
         }
     {offset
       c1rsE: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c1rsI; else goto c1rsH;
       c1rsI: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1rsH: // global
           _s1jz6::P64 = P64[R1 + 7];
           _s1jz7::P64 = P64[R1 + 15];
           I64[Hp - 56] = sat_s1jzh_info;
           P64[Hp - 40] = _s1jz6::P64;
           P64[Hp - 32] = _s1jz7::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1jzi_info" {
     sat_s1jzi_info:
         const sat_s1jzi_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 GHC.Real.$w$cshowsPrec_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c1rsM: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c1rsQ; else goto c1rsP;
       c1rsQ: // global
           HpAlloc = 88;
           R1 = GHC.Real.$w$cshowsPrec_closure;
           P64[Sp - 32] = R2;
           I64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       c1rsP: // global
           I64[Hp - 80] = f_s1jz6_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R4;
           I64[Hp - 48] = g1_s1jz7_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R5;
           _c1rru::P64 = Hp - 80;
           _c1rrB::P64 = Hp - 48;
           if (%MO_S_Le_W64(R3, 7)) goto c1rsK; else goto c1rsL;
       c1rsK: // global
           I64[Hp - 16] = sat_s1jzc_info;
           P64[Hp - 8] = _c1rru::P64;
           P64[Hp] = _c1rrB::P64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1rsL: // global
           I64[Hp - 16] = sat_s1jzi_info;
           P64[Hp - 8] = _c1rru::P64;
           P64[Hp] = _c1rrB::P64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$w$cshowsPrec_info" {
     GHC.Real.$w$cshowsPrec_info:
         const GHC.Real.$w$cshowsPrec_entry;
         const 0;
         const 14;
         const 17179869184;
         const 0;
         const 132;
         const GHC.Real.$w$cshowsPrec_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:06.284804808 UTC

[section ""data" . GHC.Real.$fShowRatio_$cshowsPrec_closure" {
     GHC.Real.$fShowRatio_$cshowsPrec_closure:
         const GHC.Real.$fShowRatio_$cshowsPrec_info;
 },
 GHC.Real.$fShowRatio_$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1rtE: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1rtI; else goto c1rtJ;
       c1rtI: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fShowRatio_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1rtJ: // global
           I64[Sp - 24] = block_c1rtB_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u1rtR; else goto c1rtC;
       u1rtR: // global
           call _c1rtB(R1) args: 0, res: 0, upd: 0;
       c1rtC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fShowRatio_$cshowsPrec_info" {
     GHC.Real.$fShowRatio_$cshowsPrec_info:
         const GHC.Real.$fShowRatio_$cshowsPrec_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c1rtB() //  [R1]
         { []
         }
     {offset
       c1rtB: // global
           I64[Sp] = block_c1rtH_info;
           _s1jzn::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s1jzn::I64;
           if (R1 & 7 != 0) goto u1rtQ; else goto c1rtL;
       u1rtQ: // global
           call _c1rtH(R1) args: 0, res: 0, upd: 0;
       c1rtL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1rtB_info" {
     block_c1rtB_info:
         const _c1rtB;
         const 2;
         const 30;
 },
 _c1rtH() //  [R1]
         { []
         }
     {offset
       c1rtH: // global
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = I64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Real.$w$cshowsPrec_entry(R5,
                                             R4,
                                             R3,
                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1rtH_info" {
     block_c1rtH_info:
         const _c1rtH;
         const 130;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:06.292401207 UTC

[section ""data" . GHC.Real.$fShowRatio1_closure" {
     GHC.Real.$fShowRatio1_closure:
         const GHC.Real.$fShowRatio1_info;
         const 0;
 },
 GHC.Real.$fShowRatio1_entry() //  [R2, R3]
         { []
         }
     {offset
       c1ruc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1rui; else goto c1ruj;
       c1rui: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fShowRatio1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1ruj: // global
           I64[Sp - 16] = block_c1ru9_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1ruo; else goto c1rua;
       u1ruo: // global
           call _c1ru9(R1) args: 0, res: 0, upd: 0;
       c1rua: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fShowRatio1_info" {
     GHC.Real.$fShowRatio1_info:
         const GHC.Real.$fShowRatio1_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const S1jKw_srt+1312;
 },
 _c1ru9() //  [R1]
         { []
         }
     {offset
       c1ru9: // global
           _s1jzs::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1ruf_info;
           R5 = _s1jzs::P64;
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = 0;
           Sp = Sp + 8;
           call GHC.Real.$w$s$cshowsPrec_entry(R5,
                                               R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1ru9_info" {
     block_c1ru9_info:
         const _c1ru9;
         const 1;
         const 4294967326;
         const S1jKw_srt+1312;
 },
 _c1ruf() //  [R1, R2]
         { []
         }
     {offset
       c1ruf: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1run; else goto c1rum;
       c1run: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c1rum: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1ruf_info" {
     block_c1ruf_info:
         const _c1ruf;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:06.299877033 UTC

[section ""data" . GHC.Real.$fShowRatio_$s$cshowList_closure" {
     GHC.Real.$fShowRatio_$s$cshowList_closure:
         const GHC.Real.$fShowRatio_$s$cshowList_info;
         const 0;
 },
 GHC.Real.$fShowRatio_$s$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       c1ruG: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Real.$fShowRatio1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fShowRatio_$s$cshowList_info" {
     GHC.Real.$fShowRatio_$s$cshowList_info:
         const GHC.Real.$fShowRatio_$s$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S1jKw_srt+1328;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:06.304837236 UTC

[section ""data" . GHC.Real.$fShowRatio_$cshowList_closure" {
     GHC.Real.$fShowRatio_$cshowList_closure:
         const GHC.Real.$fShowRatio_$cshowList_info;
 },
 sat_s1jzI_entry() //  [R1, R2]
         { []
         }
     {offset
       c1ruZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1rv0; else goto c1rv1;
       c1rv0: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1rv1: // global
           I64[Sp - 16] = block_c1ruW_info;
           _s1jzB::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s1jzB::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1rv5; else goto c1ruX;
       u1rv5: // global
           call _c1ruW(R1) args: 0, res: 0, upd: 0;
       c1ruX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1jzI_info" {
     sat_s1jzI_info:
         const sat_s1jzI_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c1ruW() //  [R1]
         { []
         }
     {offset
       c1ruW: // global
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = 0;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Real.$w$cshowsPrec_entry(R5,
                                             R4,
                                             R3,
                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1ruW_info" {
     block_c1ruW_info:
         const _c1ruW;
         const 1;
         const 30;
 },
 GHC.Real.$fShowRatio_$cshowList_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1rv6: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1rva; else goto c1rv9;
       c1rva: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fShowRatio_$cshowList_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1rv9: // global
           I64[Hp - 8] = sat_s1jzI_info;
           P64[Hp] = R2;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 7;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fShowRatio_$cshowList_info" {
     GHC.Real.$fShowRatio_$cshowList_info:
         const GHC.Real.$fShowRatio_$cshowList_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:06.313095599 UTC

[section ""data" . GHC.Real.$w$s$cshow_closure" {
     GHC.Real.$w$s$cshow_closure:
         const GHC.Real.$w$s$cshow_info;
         const 0;
 },
 sat_s1jzO_entry() //  [R1]
         { []
         }
     {offset
       c1rvC: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1rvD; else goto c1rvE;
       c1rvD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1rvE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c1rvz_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = P64[R1 + 16];
           R2 = 8;
           Sp = Sp - 24;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jzO_info" {
     sat_s1jzO_info:
         const sat_s1jzO_entry;
         const 1;
         const 4294967312;
         const S1jKw_srt+1304;
 },
 _c1rvz() //  [R1, R2]
         { []
         }
     {offset
       c1rvz: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1rvH; else goto c1rvG;
       c1rvH: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c1rvG: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1rvz_info" {
     block_c1rvz_info:
         const _c1rvz;
         const 0;
         const 30;
 },
 sat_s1jzP_entry() //  [R1]
         { []
         }
     {offset
       c1rvI: // global
           _s1jzP::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1rvJ; else goto c1rvK;
       c1rvK: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1rvM; else goto c1rvL;
       c1rvM: // global
           HpAlloc = 24;
           goto c1rvJ;
       c1rvJ: // global
           R1 = _s1jzP::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1rvL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1jzP::P64;
           _s1jzK::P64 = P64[_s1jzP::P64 + 16];
           I64[Hp - 16] = sat_s1jzO_info;
           P64[Hp] = _s1jzK::P64;
           R3 = Hp - 16;
           R2 = GHC.Real.$fShowRatio2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jzP_info" {
     sat_s1jzP_info:
         const sat_s1jzP_entry;
         const 1;
         const 4294967312;
         const S1jKw_srt+1304;
 },
 GHC.Real.$w$s$cshow_entry() //  [R2, R3]
         { []
         }
     {offset
       c1rvN: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1rvR; else goto c1rvQ;
       c1rvR: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$w$s$cshow_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1rvQ: // global
           I64[Hp - 16] = sat_s1jzP_info;
           P64[Hp] = R3;
           R4 = Hp - 16;
           R3 = R2;
           R2 = 8;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$w$s$cshow_info" {
     GHC.Real.$w$s$cshow_info:
         const GHC.Real.$w$s$cshow_entry;
         const 0;
         const 73014444046;
         const 8589934607;
         const S1jKw_srt+1304;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:06.322498251 UTC

[section ""data" . GHC.Real.$fShowRatio_$s$cshow_closure" {
     GHC.Real.$fShowRatio_$s$cshow_closure:
         const GHC.Real.$fShowRatio_$s$cshow_info;
         const 0;
 },
 GHC.Real.$fShowRatio_$s$cshow_entry() //  [R2]
         { []
         }
     {offset
       c1rwf: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1rwl; else goto c1rwm;
       c1rwl: // global
           R2 = R2;
           R1 = GHC.Real.$fShowRatio_$s$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1rwm: // global
           I64[Sp - 8] = block_c1rwc_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1rwr; else goto c1rwd;
       u1rwr: // global
           call _c1rwc(R1) args: 0, res: 0, upd: 0;
       c1rwd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fShowRatio_$s$cshow_info" {
     GHC.Real.$fShowRatio_$s$cshow_info:
         const GHC.Real.$fShowRatio_$s$cshow_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S1jKw_srt+1336;
 },
 _c1rwc() //  [R1]
         { []
         }
     {offset
       c1rwc: // global
           I64[Sp] = block_c1rwi_info;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Real.$w$s$cshow_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1rwc_info" {
     block_c1rwc_info:
         const _c1rwc;
         const 0;
         const 4294967326;
         const S1jKw_srt+1336;
 },
 _c1rwi() //  [R1, R2]
         { []
         }
     {offset
       c1rwi: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1rwq; else goto c1rwp;
       c1rwq: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c1rwp: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1rwi_info" {
     block_c1rwi_info:
         const _c1rwi;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:06.331185916 UTC

[section ""data" . GHC.Real.$w$cshow_closure" {
     GHC.Real.$w$cshow_closure:
         const GHC.Real.$w$cshow_info;
 },
 sat_s1jA0_entry() //  [R1]
         { []
         }
     {offset
       c1rwR: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c1rwS; else goto c1rwT;
       c1rwS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1rwT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = GHC.Real.ratioPrec1_closure+1;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = GHC.Types.[]_closure+1;
           Sp = Sp - 48;
           call GHC.Show.showsPrec_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jA0_info" {
     sat_s1jA0_info:
         const sat_s1jA0_entry;
         const 2;
         const 18;
 },
 sat_s1jA1_entry() //  [R1]
         { []
         }
     {offset
       c1rwU: // global
           _s1jA1::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1rwV; else goto c1rwW;
       c1rwW: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1rwY; else goto c1rwX;
       c1rwY: // global
           HpAlloc = 32;
           goto c1rwV;
       c1rwV: // global
           R1 = _s1jA1::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1rwX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1jA1::P64;
           _s1jzX::P64 = P64[_s1jA1::P64 + 16];
           _s1jzZ::P64 = P64[_s1jA1::P64 + 24];
           I64[Hp - 24] = sat_s1jA0_info;
           P64[Hp - 8] = _s1jzX::P64;
           P64[Hp] = _s1jzZ::P64;
           R3 = Hp - 24;
           R2 = GHC.Real.$fShowRatio2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jA1_info" {
     sat_s1jA1_info:
         const sat_s1jA1_entry;
         const 2;
         const 18;
 },
 GHC.Real.$w$cshow_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1rwZ: // global
           _s1jzZ::P64 = R4;
           _s1jzY::P64 = R3;
           _s1jzX::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto c1rx0; else goto c1rx1;
       c1rx1: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1rx3; else goto c1rx2;
       c1rx3: // global
           HpAlloc = 32;
           goto c1rx0;
       c1rx0: // global
           R4 = _s1jzZ::P64;
           R3 = _s1jzY::P64;
           R2 = _s1jzX::P64;
           R1 = GHC.Real.$w$cshow_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1rx2: // global
           I64[Hp - 24] = sat_s1jA1_info;
           P64[Hp - 8] = _s1jzX::P64;
           P64[Hp] = _s1jzZ::P64;
           R2 = _s1jzX::P64;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = GHC.Real.ratioPrec1_closure+1;
           P64[Sp - 16] = _s1jzY::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 32;
           call GHC.Show.showsPrec_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$w$cshow_info" {
     GHC.Real.$w$cshow_info:
         const GHC.Real.$w$cshow_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:06.33899586 UTC

[section ""data" . GHC.Real.$fShowRatio_$cshow_closure" {
     GHC.Real.$fShowRatio_$cshow_closure:
         const GHC.Real.$fShowRatio_$cshow_info;
 },
 GHC.Real.$fShowRatio_$cshow_entry() //  [R2, R3]
         { []
         }
     {offset
       c1rxq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1rxr; else goto c1rxs;
       c1rxr: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fShowRatio_$cshow_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1rxs: // global
           I64[Sp - 16] = block_c1rxn_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1rxw; else goto c1rxo;
       u1rxw: // global
           call _c1rxn(R1) args: 0, res: 0, upd: 0;
       c1rxo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fShowRatio_$cshow_info" {
     GHC.Real.$fShowRatio_$cshow_info:
         const GHC.Real.$fShowRatio_$cshow_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1rxn() //  [R1]
         { []
         }
     {offset
       c1rxn: // global
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Real.$w$cshow_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1rxn_info" {
     block_c1rxn_info:
         const _c1rxn;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:06.343726304 UTC

[section ""data" . GHC.Real.$fShowRatio_$s$fShowRatio_closure" {
     GHC.Real.$fShowRatio_$s$fShowRatio_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Real.$fShowRatio_$s$cshowsPrec_closure+3;
         const GHC.Real.$fShowRatio_$s$cshow_closure+1;
         const GHC.Real.$fShowRatio_$s$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:06.347400882 UTC

[section ""data" . GHC.Real.$fShowRatio_closure" {
     GHC.Real.$fShowRatio_closure:
         const GHC.Real.$fShowRatio_info;
 },
 sat_s1jAa_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c1rxQ: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Real.$fShowRatio_$cshowList_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1jAa_info" {
     sat_s1jAa_info:
         const sat_s1jAa_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s1jA9_entry() //  [R1, R2]
         { []
         }
     {offset
       c1rxY: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call GHC.Real.$fShowRatio_$cshow_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1jA9_info" {
     sat_s1jA9_info:
         const sat_s1jA9_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s1jA8_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c1ry6: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Real.$fShowRatio_$cshowsPrec_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1jA8_info" {
     sat_s1jA8_info:
         const sat_s1jA8_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 GHC.Real.$fShowRatio_entry() //  [R2]
         { []
         }
     {offset
       c1rya: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c1rye; else goto c1ryd;
       c1rye: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = GHC.Real.$fShowRatio_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1ryd: // global
           I64[Hp - 72] = sat_s1jAa_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_s1jA9_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s1jA8_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 38;
           P64[Hp - 8] = Hp - 55;
           P64[Hp] = Hp - 70;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fShowRatio_info" {
     GHC.Real.$fShowRatio_info:
         const GHC.Real.$fShowRatio_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:06.357632631 UTC

[section ""data" . GHC.Real.$w$slcm_closure" {
     GHC.Real.$w$slcm_closure:
         const GHC.Real.$w$slcm_info;
         const 0;
 },
 section ""relreadonly" . u1rzb_srtd" {
     u1rzb_srtd:
         const S1jKw_srt+856;
         const 64;
         const 13835093239654252545;
 },
 GHC.Real.$w$slcm_entry() //  [R2, R3]
         { []
         }
     {offset
       c1ryE: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1ryF; else goto c1ryG;
       c1ryF: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$w$slcm_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1ryG: // global
           if (R3 == 0) goto c1ryD; else goto c1ryC;
       c1ryD: // global
           R1 = 0;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1ryC: // global
           I64[Sp - 16] = block_c1ryI_info;
           R1 = R2;
           I64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1rza; else goto c1ryJ;
       u1rza: // global
           call _c1ryI(R1) args: 0, res: 0, upd: 0;
       c1ryJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$w$slcm_info" {
     GHC.Real.$w$slcm_info:
         const GHC.Real.$w$slcm_entry;
         const 0;
         const 18446744069414584334;
         const 8589934606;
         const u1rzb_srtd;
 },
 section ""relreadonly" . u1rzc_srtd" {
     u1rzc_srtd:
         const S1jKw_srt+856;
         const 63;
         const 4611721202799476737;
 },
 _c1ryI() //  [R1]
         { []
         }
     {offset
       c1ryI: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1ryP; else goto c1ryO;
       c1ryP: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1ryO: // global
           _s1jAg::I64 = I64[R1 + 7];
           if (_s1jAg::I64 == 0) goto c1rz9; else goto c1ryV;
       c1rz9: // global
           Hp = Hp - 16;
           R1 = 0;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1ryV: // global
           I64[Hp - 8] = GHC.Types.W#_con_info;
           I64[Hp] = I64[Sp + 8];
           I64[Sp - 8] = block_c1ryT_info;
           R4 = Hp - 7;
           R3 = R1;
           R2 = GHC.Real.$fIntegralWord_closure+1;
           I64[Sp] = _s1jAg::I64;
           Sp = Sp - 8;
           call GHC.Real.gcd_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1ryI_info" {
     block_c1ryI_info:
         const _c1ryI;
         const 65;
         const 18446744069414584350;
         const u1rzc_srtd;
 },
 _c1ryT() //  [R1]
         { []
         }
     {offset
       c1ryT: // global
           _s1jAk::I64 = I64[R1 + 7];
           if (_s1jAk::I64 != 0) goto c1rz7; else goto c1rz8;
       c1rz7: // global
           R1 = I64[Sp + 8] / _s1jAk::I64 * I64[Sp + 16];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1rz8: // global
           R1 = GHC.Real.divZeroError_closure;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1ryT_info" {
     block_c1ryT_info:
         const _c1ryT;
         const 194;
         const 4294967326;
         const S1jKw_srt+1216;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:06.367153763 UTC

[section ""data" . GHC.Real.lcm_$slcm_closure" {
     GHC.Real.lcm_$slcm_closure:
         const GHC.Real.lcm_$slcm_info;
         const 0;
 },
 GHC.Real.lcm_$slcm_entry() //  [R2, R3]
         { []
         }
     {offset
       c1rzD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1rzL; else goto c1rzM;
       c1rzL: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.lcm_$slcm_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1rzM: // global
           I64[Sp - 16] = block_c1rzA_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1rzR; else goto c1rzB;
       u1rzR: // global
           call _c1rzA(R1) args: 0, res: 0, upd: 0;
       c1rzB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.lcm_$slcm_info" {
     GHC.Real.lcm_$slcm_info:
         const GHC.Real.lcm_$slcm_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S1jKw_srt+1360;
 },
 _c1rzA() //  [R1]
         { []
         }
     {offset
       c1rzA: // global
           _s1jAn::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1rzG_info;
           R3 = I64[R1 + 7];
           R2 = _s1jAn::P64;
           Sp = Sp + 8;
           call GHC.Real.$w$slcm_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1rzA_info" {
     block_c1rzA_info:
         const _c1rzA;
         const 1;
         const 4294967326;
         const S1jKw_srt+1360;
 },
 _c1rzG() //  [R1]
         { []
         }
     {offset
       c1rzG: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1rzQ; else goto c1rzP;
       c1rzQ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c1rzP: // global
           I64[Hp - 8] = GHC.Types.W#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1rzG_info" {
     block_c1rzG_info:
         const _c1rzG;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:06.378216337 UTC

[section ""data" . GHC.Real.$w$slcm1_closure" {
     GHC.Real.$w$slcm1_closure:
         const GHC.Real.$w$slcm1_info;
         const 0;
 },
 sat_s1jAC_entry() //  [R1]
         { []
         }
     {offset
       c1rAw: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1rAA; else goto c1rAz;
       c1rAA: // global
           HpAlloc = 16;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1rAz: // global
           _s1jAx::I64 = I64[R1 + 24];
           if (%MO_S_Lt_W64(_s1jAx::I64, 0)) goto c1rAu; else goto c1rAv;
       c1rAu: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = -_s1jAx::I64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1rAv: // global
           _s1jAv::P64 = P64[R1 + 16];
           Hp = Hp - 16;
           R1 = _s1jAv::P64 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1jAC_info" {
     sat_s1jAC_info:
         const sat_s1jAC_entry;
         const 4294967297;
         const 19;
 },
 section ""relreadonly" . u1rBS_srtd" {
     u1rBS_srtd:
         const S1jKw_srt+344;
         const 130;
         const 17;
         const 35184372088832;
         const 2;
 },
 GHC.Real.$w$slcm1_entry() //  [R2, R3]
         { []
         }
     {offset
       c1rAJ: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1rAK; else goto c1rAL;
       c1rAK: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$w$slcm1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1rAL: // global
           if (R3 == 0) goto u1rBR; else goto c1rAH;
       u1rBR: // global
           call _c1rAI() args: 0, res: 0, upd: 0;
       c1rAH: // global
           I64[Sp - 16] = block_c1rAb_info;
           R1 = R2;
           I64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1rBQ; else goto c1rAc;
       u1rBQ: // global
           call _c1rAb(R1) args: 0, res: 0, upd: 0;
       c1rAc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$w$slcm1_info" {
     GHC.Real.$w$slcm1_info:
         const GHC.Real.$w$slcm1_entry;
         const 0;
         const 18446744069414584334;
         const 8589934606;
         const u1rBS_srtd;
 },
 section ""relreadonly" . u1rBT_srtd" {
     u1rBT_srtd:
         const S1jKw_srt+344;
         const 110;
         const 17;
         const 35184372088832;
 },
 _c1rAb() //  [R1]
         { []
         }
     {offset
       c1rAb: // global
           _s1jAx::I64 = I64[R1 + 7];
           if (_s1jAx::I64 == 0) goto u1rBI; else goto c1rBD;
       u1rBI: // global
           Sp = Sp + 16;
           call _c1rAI() args: 0, res: 0, upd: 0;
       c1rBD: // global
           _s1jAu::I64 = I64[Sp + 8];
           if (%MO_S_Lt_W64(_s1jAu::I64, 0)) goto c1rBA; else goto c1rBB;
       c1rBA: // global
           I64[Sp - 16] = _s1jAx::I64;
           I64[Sp - 8] = -_s1jAu::I64;
           P64[Sp] = R1;
           Sp = Sp - 16;
           goto u1rBO;
       c1rBB: // global
           P64[Sp] = R1;
           I64[Sp - 16] = _s1jAx::I64;
           I64[Sp - 8] = _s1jAu::I64;
           Sp = Sp - 16;
           goto u1rBO;
       u1rBO: // global
           call _c1rAl() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1rAb_info" {
     block_c1rAb_info:
         const _c1rAb;
         const 65;
         const 18446744069414584350;
         const u1rBT_srtd;
 },
 _c1rAI() //  []
         { []
         }
     {offset
       c1rAI: // global
           R1 = 0;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c1rAl() //  []
         { []
         }
     {offset
       c1rAl: // global
           Hp = Hp + 32;
           _s1jAz::I64 = I64[Sp + 8];
           if (Hp > HpLim) (likely: False) goto c1rAQ; else goto c1rAP;
       c1rAQ: // global
           HpAlloc = 32;
           I64[Sp - 8] = block_c1rAk_info;
           R1 = _s1jAz::I64;
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c1rAP: // global
           I64[Hp - 24] = sat_s1jAC_info;
           P64[Hp - 8] = P64[Sp + 16];
           I64[Hp] = I64[Sp];
           I64[Sp - 8] = block_c1rAN_info;
           R3 = _s1jAz::I64;
           R2 = Hp - 24;
           Sp = Sp - 8;
           call GHC.Real.$wgcd'_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . u1rBU_srtd" {
     u1rBU_srtd:
         const S1jKw_srt+344;
         const 110;
         const 17;
         const 35184372088832;
 },
 _c1rAk() //  [R1]
         { []
         }
     {offset
       c1rAk: // global
           I64[Sp + 16] = R1;
           Sp = Sp + 8;
           call _c1rAl() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1rAk_info" {
     block_c1rAk_info:
         const _c1rAk;
         const 708;
         const 18446744069414584350;
         const u1rBU_srtd;
 },
 section ""relreadonly" . u1rBV_srtd" {
     u1rBV_srtd:
         const S1jKw_srt+344;
         const 110;
         const 1;
         const 35184372088832;
 },
 _c1rAN() //  [R1]
         { []
         }
     {offset
       c1rAN: // global
           _s1jAu::I64 = I64[Sp + 32];
           _s1jAx::I64 = I64[Sp + 8];
           _s1jAF::I64 = I64[R1 + 7];
           if (_s1jAF::I64 != (-1)) goto u1rBH; else goto c1rBv;
       u1rBH: // global
           if (_s1jAF::I64 != 0) goto c1rBb; else goto c1rBw;
       c1rBb: // global
           _s1jAH::I64 = %MO_S_Quot_W64(_s1jAx::I64,
                                        _s1jAF::I64) * _s1jAu::I64;
           if (%MO_S_Lt_W64(_s1jAH::I64, 0)) goto c1rB8; else goto c1rB9;
       c1rB8: // global
           R1 = -_s1jAH::I64;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1rB9: // global
           R1 = _s1jAH::I64;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1rBw: // global
           R1 = GHC.Real.divZeroError_closure;
           Sp = Sp + 40;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c1rBv: // global
           if (_s1jAx::I64 == (-9223372036854775808)) goto c1rBu; else goto c1rBt;
       c1rBu: // global
           R1 = GHC.Real.overflowError_closure;
           Sp = Sp + 40;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c1rBt: // global
           _s1jAK::I64 = %MO_S_Quot_W64(_s1jAx::I64, (-1)) * _s1jAu::I64;
           if (%MO_S_Lt_W64(_s1jAK::I64, 0)) goto c1rBq; else goto c1rBr;
       c1rBq: // global
           R1 = -_s1jAK::I64;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1rBr: // global
           R1 = _s1jAK::I64;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1rAN_info" {
     block_c1rAN_info:
         const _c1rAN;
         const 964;
         const 18446744069414584350;
         const u1rBV_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:06.395106737 UTC

[section ""data" . GHC.Real.lcm_$slcm1_closure" {
     GHC.Real.lcm_$slcm1_closure:
         const GHC.Real.lcm_$slcm1_info;
         const 0;
 },
 GHC.Real.lcm_$slcm1_entry() //  [R2, R3]
         { []
         }
     {offset
       c1rCJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1rCR; else goto c1rCS;
       c1rCR: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.lcm_$slcm1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1rCS: // global
           I64[Sp - 16] = block_c1rCG_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1rCX; else goto c1rCH;
       u1rCX: // global
           call _c1rCG(R1) args: 0, res: 0, upd: 0;
       c1rCH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.lcm_$slcm1_info" {
     GHC.Real.lcm_$slcm1_info:
         const GHC.Real.lcm_$slcm1_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S1jKw_srt+1376;
 },
 _c1rCG() //  [R1]
         { []
         }
     {offset
       c1rCG: // global
           _s1jAR::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1rCM_info;
           R3 = I64[R1 + 7];
           R2 = _s1jAR::P64;
           Sp = Sp + 8;
           call GHC.Real.$w$slcm1_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1rCG_info" {
     block_c1rCG_info:
         const _c1rCG;
         const 1;
         const 4294967326;
         const S1jKw_srt+1376;
 },
 _c1rCM() //  [R1]
         { []
         }
     {offset
       c1rCM: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1rCW; else goto c1rCV;
       c1rCW: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c1rCV: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1rCM_info" {
     block_c1rCM_info:
         const _c1rCM;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:06.406843589 UTC

[section ""data" . GHC.Real.lcm_closure" {
     GHC.Real.lcm_closure:
         const GHC.Real.lcm_info;
         const 0;
 },
 sat_s1jB3_entry() //  [R1]
         { []
         }
     {offset
       c1rDz: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1rDA; else goto c1rDB;
       c1rDA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1rDB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Real.even1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jB3_info" {
     sat_s1jB3_info:
         const sat_s1jB3_entry;
         const 1;
         const 4294967312;
         const S1jKw_srt+1224;
 },
 sat_s1jB5_entry() //  [R1]
         { []
         }
     {offset
       c1rDK: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1rDL; else goto c1rDM;
       c1rDL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1rDM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Real.even1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jB5_info" {
     sat_s1jB5_info:
         const sat_s1jB5_entry;
         const 1;
         const 4294967312;
         const S1jKw_srt+1224;
 },
 sat_s1jB7_entry() //  [R1]
         { []
         }
     {offset
       c1rE3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1rE4; else goto c1rE5;
       c1rE4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1rE5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.gcd_entry(R4, R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jB7_info" {
     sat_s1jB7_info:
         const sat_s1jB7_entry;
         const 3;
         const 4294967311;
         const S1jKw_srt+1392;
 },
 sat_s1jB8_entry() //  [R1]
         { []
         }
     {offset
       c1rE6: // global
           _s1jB8::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c1rE7; else goto c1rE8;
       c1rE8: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c1rEa; else goto c1rE9;
       c1rEa: // global
           HpAlloc = 40;
           goto c1rE7;
       c1rE7: // global
           R1 = _s1jB8::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1rE9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1jB8::P64;
           _s1jAW::P64 = P64[_s1jB8::P64 + 16];
           _s1jAX::P64 = P64[_s1jB8::P64 + 24];
           _s1jAY::P64 = P64[_s1jB8::P64 + 32];
           I64[Hp - 32] = sat_s1jB7_info;
           P64[Hp - 16] = _s1jAW::P64;
           P64[Hp - 8] = _s1jAX::P64;
           P64[Hp] = _s1jAY::P64;
           R2 = _s1jAW::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _s1jAX::P64;
           P64[Sp - 24] = Hp - 32;
           Sp = Sp - 40;
           call GHC.Real.quot_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jB8_info" {
     sat_s1jB8_info:
         const sat_s1jB8_entry;
         const 3;
         const 4294967311;
         const S1jKw_srt+1392;
 },
 sat_s1jB9_entry() //  [R1]
         { []
         }
     {offset
       c1rEb: // global
           _s1jB9::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c1rEc; else goto c1rEd;
       c1rEd: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c1rEf; else goto c1rEe;
       c1rEf: // global
           HpAlloc = 40;
           goto c1rEc;
       c1rEc: // global
           R1 = _s1jB9::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1rEe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1jB9::P64;
           _s1jAW::P64 = P64[_s1jB9::P64 + 16];
           _s1jAX::P64 = P64[_s1jB9::P64 + 24];
           _s1jAY::P64 = P64[_s1jB9::P64 + 32];
           _s1jB0::P64 = P64[_s1jB9::P64 + 40];
           I64[Hp - 32] = sat_s1jB8_info;
           P64[Hp - 16] = _s1jAW::P64;
           P64[Hp - 8] = _s1jAX::P64;
           P64[Hp] = _s1jAY::P64;
           R2 = _s1jB0::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 32;
           P64[Sp - 24] = _s1jAY::P64;
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jB9_info" {
     sat_s1jB9_info:
         const sat_s1jB9_entry;
         const 4;
         const 4294967311;
         const S1jKw_srt+1392;
 },
 GHC.Real.lcm_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1rEg: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c1rEh; else goto c1rEi;
       c1rEh: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.lcm_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1rEi: // global
           I64[Sp - 32] = block_c1rDf_info;
           _s1jAW::P64 = R2;
           R2 = R2;
           P64[Sp - 24] = _s1jAW::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.lcm_info" {
     GHC.Real.lcm_info:
         const GHC.Real.lcm_entry;
         const 0;
         const 27021602059190286;
         const 12884901911;
         const S1jKw_srt+1224;
 },
 _c1rDf() //  [R1]
         { []
         }
     {offset
       c1rDf: // global
           I64[Sp - 8] = block_c1rDj_info;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1rDf_info" {
     block_c1rDf_info:
         const _c1rDf;
         const 3;
         const 9007203549708318;
         const S1jKw_srt+1224;
 },
 _c1rDj() //  [R1]
         { []
         }
     {offset
       c1rDj: // global
           I64[Sp] = block_c1rDn_info;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1rDj_info" {
     block_c1rDj_info:
         const _c1rDj;
         const 4;
         const 9007203549708318;
         const S1jKw_srt+1224;
 },
 _c1rDn() //  [R1]
         { []
         }
     {offset
       c1rDn: // global
           I64[Sp] = block_c1rDr_info;
           R2 = R1;
           call GHC.Classes.$p1Ord_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1rDn_info" {
     block_c1rDn_info:
         const _c1rDn;
         const 4;
         const 9007203549708318;
         const S1jKw_srt+1224;
 },
 _c1rDr() //  [R1]
         { []
         }
     {offset
       c1rDr: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1rEo; else goto c1rEn;
       c1rEo: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1rEn: // global
           I64[Hp - 16] = sat_s1jB3_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp - 8] = block_c1rDC_info;
           R2 = R1;
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = P64[Sp + 32];
           P64[Sp - 16] = Hp - 16;
           P64[Sp] = R1;
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1rDr_info" {
     block_c1rDr_info:
         const _c1rDr;
         const 4;
         const 9007203549708318;
         const S1jKw_srt+1224;
 },
 _c1rDC() //  [R1]
         { []
         }
     {offset
       c1rDC: // global
           if (R1 & 7 == 1) goto c1rEq; else goto u1rEJ;
       c1rEq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1rEt; else goto c1rEs;
       c1rEt: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1rEs: // global
           I64[Hp - 16] = sat_s1jB5_info;
           P64[Hp] = P64[Sp + 16];
           _s1jB2::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1rDN_info;
           R2 = _s1jB2::P64;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = P64[Sp + 32];
           P64[Sp] = Hp - 16;
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
       u1rEJ: // global
           Sp = Sp + 16;
           call _c1rEG() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1rDC_info" {
     block_c1rDC_info:
         const _c1rDC;
         const 5;
         const 9007203549708318;
         const S1jKw_srt+1224;
 },
 _c1rDN() //  [R1]
         { []
         }
     {offset
       c1rDN: // global
           if (R1 & 7 == 1) goto c1rEv; else goto u1rEK;
       c1rEv: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c1rEy; else goto c1rEx;
       c1rEy: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1rEx: // global
           I64[Hp - 40] = sat_s1jB9_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = P64[Sp + 32];
           _s1jB0::P64 = P64[Sp + 8];
           P64[Hp] = _s1jB0::P64;
           R2 = _s1jB0::P64;
           I64[Sp + 24] = stg_ap_p_info;
           P64[Sp + 32] = Hp - 40;
           Sp = Sp + 24;
           call GHC.Num.abs_entry(R2) args: 24, res: 0, upd: 8;
       u1rEK: // global
           Sp = Sp + 8;
           call _c1rEG() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1rDN_info" {
     block_c1rDN_info:
         const _c1rDN;
         const 4;
         const 9007203549708318;
         const S1jKw_srt+1224;
 },
 _c1rEG() //  []
         { []
         }
     {offset
       c1rEG: // global
           R2 = P64[Sp];
           I64[Sp + 16] = stg_ap_p_info;
           P64[Sp + 24] = GHC.Real.even1_closure;
           Sp = Sp + 16;
           call GHC.Num.fromInteger_entry(R2) args: 24, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:06.432444816 UTC

[section ""data" . GHC.Real.$w$ctoEnum_closure" {
     GHC.Real.$w$ctoEnum_closure:
         const GHC.Real.$w$ctoEnum_info;
         const 0;
 },
 sat_s1jBg_entry() //  [R1]
         { []
         }
     {offset
       c1rG5: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1rG6; else goto c1rG7;
       c1rG6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1rG7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c1rG2_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u1rGb; else goto c1rG3;
       u1rGb: // global
           call _c1rG2(R1) args: 0, res: 0, upd: 0;
       c1rG3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jBg_info" {
     sat_s1jBg_info:
         const sat_s1jBg_entry;
         const 1;
         const 16;
 },
 _c1rG2() //  [R1]
         { []
         }
     {offset
       c1rG2: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1rG2_info" {
     block_c1rG2_info:
         const _c1rG2;
         const 0;
         const 30;
 },
 GHC.Real.$w$ctoEnum_entry() //  [R2, R3]
         { []
         }
     {offset
       c1rGc: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1rGg; else goto c1rGh;
       c1rGg: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$w$ctoEnum_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1rGh: // global
           I64[Sp - 16] = block_c1rFQ_info;
           R2 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$w$ctoEnum_info" {
     GHC.Real.$w$ctoEnum_info:
         const GHC.Real.$w$ctoEnum_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S1jKw_srt+1408;
 },
 _c1rFQ() //  [R1]
         { []
         }
     {offset
       c1rFQ: // global
           I64[Sp] = block_c1rFU_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1rFQ_info" {
     block_c1rFQ_info:
         const _c1rFQ;
         const 1;
         const 4294967326;
         const S1jKw_srt+1416;
 },
 _c1rFU() //  [R1]
         { []
         }
     {offset
       c1rFU: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1rGl; else goto c1rGk;
       c1rGl: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1rGk: // global
           I64[Hp - 16] = sat_s1jBg_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp] = block_c1rGd_info;
           R2 = R1;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 16;
           P64[Sp + 8] = R1;
           Sp = Sp - 16;
           call GHC.Num.fromInteger_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1rFU_info" {
     block_c1rFU_info:
         const _c1rFU;
         const 1;
         const 4294967326;
         const S1jKw_srt+1416;
 },
 _c1rGd() //  [R1]
         { []
         }
     {offset
       c1rGd: // global
           I64[Sp] = block_c1rGf_info;
           R2 = P64[Sp + 8];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = GHC.Real.$fEnumRatio1_closure;
           P64[Sp + 8] = R1;
           Sp = Sp - 16;
           call GHC.Num.fromInteger_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1rGd_info" {
     block_c1rGd_info:
         const _c1rGd;
         const 1;
         const 4294967326;
         const S1jKw_srt+1416;
 },
 _c1rGf() //  [R1]
         { []
         }
     {offset
       c1rGf: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1rGf_info" {
     block_c1rGf_info:
         const _c1rGf;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:06.446137645 UTC

[section ""data" . GHC.Real.$fEnumRatio_$ctoEnum_closure" {
     GHC.Real.$fEnumRatio_$ctoEnum_closure:
         const GHC.Real.$fEnumRatio_$ctoEnum_info;
         const 0;
 },
 GHC.Real.$fEnumRatio_$ctoEnum_entry() //  [R2, R3]
         { []
         }
     {offset
       c1rGY: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1rGZ; else goto c1rH0;
       c1rGZ: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fEnumRatio_$ctoEnum_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1rH0: // global
           I64[Sp - 8] = block_c1rGV_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Real.$w$ctoEnum_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fEnumRatio_$ctoEnum_info" {
     GHC.Real.$fEnumRatio_$ctoEnum_info:
         const GHC.Real.$fEnumRatio_$ctoEnum_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const S1jKw_srt+1408;
 },
 _c1rGV() //  [R1, R2]
         { []
         }
     {offset
       c1rGV: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1rH3; else goto c1rH2;
       c1rH3: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c1rH2: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1rGV_info" {
     block_c1rGV_info:
         const _c1rGV;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:06.451274749 UTC

[section ""data" . GHC.Real.$fEnumRatio_$s$fEnumRatio_closure" {
     GHC.Real.$fEnumRatio_$s$fEnumRatio_closure:
         const GHC.Enum.C:Enum_con_info;
         const GHC.Real.$fEnumRatio_$s$csucc_closure+1;
         const GHC.Real.$fEnumRatio_$s$cpred_closure+1;
         const GHC.Real.$fEnumRatio_$ctoRational_closure+1;
         const GHC.Real.$fEnumRatio_$s$cfromEnum_closure+1;
         const GHC.Real.$fEnumRatio_$snumericEnumFrom_closure+1;
         const GHC.Real.$fEnumRatio_$snumericEnumFromThen_closure+2;
         const GHC.Real.$fEnumRatio_$snumericEnumFromTo_closure+2;
         const GHC.Real.$fEnumRatio_$snumericEnumFromThenTo_closure+3;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:06.456439824 UTC

[section ""data" . GHC.Real.$fEnumRatio_closure" {
     GHC.Real.$fEnumRatio_closure:
         const GHC.Real.$fEnumRatio_info;
         const 0;
 },
 sat_s1jBw_entry() //  [R1]
         { []
         }
     {offset
       c1rHm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1rHn; else goto c1rHo;
       c1rHn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1rHo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$fEnumRatio_$cenumFromThenTo_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jBw_info" {
     sat_s1jBw_info:
         const sat_s1jBw_entry;
         const 1;
         const 4294967312;
         const S1jKw_srt+1432;
 },
 sat_s1jBv_entry() //  [R1]
         { []
         }
     {offset
       c1rHt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1rHu; else goto c1rHv;
       c1rHu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1rHv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$fEnumRatio_$cenumFromTo_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jBv_info" {
     sat_s1jBv_info:
         const sat_s1jBv_entry;
         const 1;
         const 4294967312;
         const S1jKw_srt+1440;
 },
 sat_s1jBu_entry() //  [R1]
         { []
         }
     {offset
       c1rHA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1rHB; else goto c1rHC;
       c1rHB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1rHC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$fEnumRatio_$cenumFromThen_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jBu_info" {
     sat_s1jBu_info:
         const sat_s1jBu_entry;
         const 1;
         const 4294967312;
         const S1jKw_srt+1448;
 },
 sat_s1jBt_entry() //  [R1]
         { []
         }
     {offset
       c1rHH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1rHI; else goto c1rHJ;
       c1rHI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1rHJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$fEnumRatio_$cenumFrom_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jBt_info" {
     sat_s1jBt_info:
         const sat_s1jBt_entry;
         const 1;
         const 4294967312;
         const S1jKw_srt+1456;
 },
 sat_s1jBs_entry() //  [R1, R2]
         { []
         }
     {offset
       c1rHP: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call GHC.Real.$fEnumRatio_$cfromEnum_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1jBs_info" {
     sat_s1jBs_info:
         const sat_s1jBs_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s1jBr_entry() //  [R1, R2]
         { []
         }
     {offset
       c1rHX: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call GHC.Real.$fEnumRatio_$ctoEnum_entry(R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1jBr_info" {
     sat_s1jBr_info:
         const sat_s1jBr_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S1jKw_srt+1424;
 },
 sat_s1jBq_entry() //  [R1, R2]
         { []
         }
     {offset
       c1rI5: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call GHC.Real.$fEnumRatio_$cpred_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1jBq_info" {
     sat_s1jBq_info:
         const sat_s1jBq_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S1jKw_srt+1464;
 },
 sat_s1jBp_entry() //  [R1, R2]
         { []
         }
     {offset
       c1rId: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call GHC.Real.$fEnumRatio_$csucc_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1jBp_info" {
     sat_s1jBp_info:
         const sat_s1jBp_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S1jKw_srt+1472;
 },
 GHC.Real.$fEnumRatio_entry() //  [R2]
         { []
         }
     {offset
       c1rIh: // global
           Hp = Hp + 232;
           if (Hp > HpLim) (likely: False) goto c1rIl; else goto c1rIk;
       c1rIl: // global
           HpAlloc = 232;
           R2 = R2;
           R1 = GHC.Real.$fEnumRatio_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1rIk: // global
           I64[Hp - 224] = sat_s1jBw_info;
           P64[Hp - 208] = R2;
           I64[Hp - 200] = sat_s1jBv_info;
           P64[Hp - 184] = R2;
           I64[Hp - 176] = sat_s1jBu_info;
           P64[Hp - 160] = R2;
           I64[Hp - 152] = sat_s1jBt_info;
           P64[Hp - 136] = R2;
           I64[Hp - 128] = sat_s1jBs_info;
           P64[Hp - 120] = R2;
           I64[Hp - 112] = sat_s1jBr_info;
           P64[Hp - 104] = R2;
           I64[Hp - 96] = sat_s1jBq_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_s1jBp_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = GHC.Enum.C:Enum_con_info;
           P64[Hp - 56] = Hp - 79;
           P64[Hp - 48] = Hp - 95;
           P64[Hp - 40] = Hp - 111;
           P64[Hp - 32] = Hp - 127;
           P64[Hp - 24] = Hp - 152;
           P64[Hp - 16] = Hp - 176;
           P64[Hp - 8] = Hp - 200;
           P64[Hp] = Hp - 224;
           R1 = Hp - 63;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fEnumRatio_info" {
     GHC.Real.$fEnumRatio_info:
         const GHC.Real.$fEnumRatio_entry;
         const 0;
         const 1095216660494;
         const 4294967301;
         const S1jKw_srt+1424;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:06.475341892 UTC

[section ""data" . $wg_r1j3P_closure" {
     $wg_r1j3P_closure:
         const $wg_r1j3P_info;
 },
 $wg_r1j3P_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1rJa: // global
           _s1jBz::I64 = R4;
           _s1jBy::I64 = R3;
           _s1jBx::I64 = R2;
           goto c1rJ2;
       c1rJ2: // global
           if (_s1jBy::I64 - (_s1jBy::I64 + (_s1jBy::I64 >> 63)) & (-2) == 0) goto c1rJ9; else goto c1rJ8;
       c1rJ9: // global
           _s1jBy::I64 = %MO_S_Shr_W64(_s1jBy::I64 + (_s1jBy::I64 >> 63), 1);
           _s1jBx::I64 = _s1jBx::I64 * _s1jBx::I64;
           goto c1rJ2;
       c1rJ8: // global
           if (_s1jBy::I64 == 1) goto c1rJo; else goto c1rJk;
       c1rJo: // global
           R1 = _s1jBx::I64 * _s1jBz::I64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1rJk: // global
           _s1jBz::I64 = _s1jBx::I64 * _s1jBz::I64;
           _s1jBy::I64 = %MO_S_Shr_W64(_s1jBy::I64 + (_s1jBy::I64 >> 63), 1);
           _s1jBx::I64 = _s1jBx::I64 * _s1jBx::I64;
           goto c1rJ2;
     }
 },
 section ""relreadonly" . $wg_r1j3P_info" {
     $wg_r1j3P_info:
         const $wg_r1j3P_entry;
         const 0;
         const 14;
         const 12884901904;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:06.479889203 UTC

[section ""data" . GHC.Real.$wf1_closure" {
     GHC.Real.$wf1_closure:
         const GHC.Real.$wf1_info;
 },
 GHC.Real.$wf1_entry() //  [R2, R3]
         { []
         }
     {offset
       c1rK8: // global
           _s1jBI::I64 = R3;
           _s1jBH::I64 = R2;
           goto c1rK0;
       c1rK0: // global
           if (_s1jBI::I64 - (_s1jBI::I64 + (_s1jBI::I64 >> 63)) & (-2) == 0) goto c1rK7; else goto c1rK6;
       c1rK7: // global
           _s1jBI::I64 = %MO_S_Shr_W64(_s1jBI::I64 + (_s1jBI::I64 >> 63), 1);
           _s1jBH::I64 = _s1jBH::I64 * _s1jBH::I64;
           goto c1rK0;
       c1rK6: // global
           if (_s1jBI::I64 == 1) goto c1rKj; else goto c1rKi;
       c1rKj: // global
           R1 = _s1jBH::I64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1rKi: // global
           R4 = _s1jBH::I64;
           R3 = %MO_S_Shr_W64(_s1jBI::I64 + (_s1jBI::I64 >> 63), 1);
           R2 = _s1jBH::I64 * _s1jBH::I64;
           call $wg_r1j3P_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$wf1_info" {
     GHC.Real.$wf1_info:
         const GHC.Real.$wf1_entry;
         const 0;
         const 14;
         const 8589934604;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:06.484827264 UTC

[section ""data" . GHC.Real.^_f2_closure" {
     GHC.Real.^_f2_closure:
         const GHC.Real.^_f2_info;
 },
 GHC.Real.^_f2_entry() //  [R2, R3]
         { []
         }
     {offset
       c1rKW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1rL9; else goto c1rLa;
       c1rL9: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.^_f2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1rLa: // global
           I64[Sp - 16] = block_c1rKT_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1rLh; else goto c1rKU;
       u1rLh: // global
           call _c1rKT(R1) args: 0, res: 0, upd: 0;
       c1rKU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.^_f2_info" {
     GHC.Real.^_f2_info:
         const GHC.Real.^_f2_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1rKT() //  [R1]
         { []
         }
     {offset
       c1rKT: // global
           I64[Sp] = block_c1rKZ_info;
           _s1jBS::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1jBS::I64;
           if (R1 & 7 != 0) goto u1rLg; else goto c1rL0;
       u1rLg: // global
           call _c1rKZ(R1) args: 0, res: 0, upd: 0;
       c1rL0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1rKT_info" {
     block_c1rKT_info:
         const _c1rKT;
         const 1;
         const 30;
 },
 _c1rKZ() //  [R1]
         { []
         }
     {offset
       c1rKZ: // global
           _s1jBS::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_c1rL4_info;
           R3 = I64[R1 + 7];
           R2 = _s1jBS::I64;
           Sp = Sp + 8;
           call GHC.Real.$wf1_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1rKZ_info" {
     block_c1rKZ_info:
         const _c1rKZ;
         const 65;
         const 30;
 },
 _c1rL4() //  [R1]
         { []
         }
     {offset
       c1rL4: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1rLf; else goto c1rLe;
       c1rLf: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c1rLe: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1rL4_info" {
     block_c1rL4_info:
         const _c1rL4;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:06.493398355 UTC

[section ""data" . GHC.Real.^3_closure" {
     GHC.Real.^3_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:06.495881142 UTC

[section ""data" . GHC.Real.^2_closure" {
     GHC.Real.^2_closure:
         const GHC.Real.^2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Real.^2_entry() //  [R1]
         { []
         }
     {offset
       c1rLI: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1rLJ; else goto c1rLK;
       c1rLJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1rLK: // global
           (_c1rLD::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c1rLD::I64 == 0) goto c1rLF; else goto c1rLE;
       c1rLF: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c1rLE: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c1rLD::I64;
           I64[Sp - 24] = block_c1rLG_info;
           R2 = lvl5_r1j3O_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Real.^2_info" {
     GHC.Real.^2_info:
         const GHC.Real.^2_entry;
         const 0;
         const 4294967317;
         const S1jKw_srt+1264;
 },
 _c1rLG() //  [R1]
         { []
         }
     {offset
       c1rLG: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1rLG_info" {
     block_c1rLG_info:
         const _c1rLG;
         const 0;
         const 4294967326;
         const S1jKw_srt+1264;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:06.50228451 UTC

[section ""data" . GHC.Real.^_$s^2_closure" {
     GHC.Real.^_$s^2_closure:
         const GHC.Real.^_$s^2_info;
         const 0;
 },
 GHC.Real.^_$s^2_entry() //  [R2, R3]
         { []
         }
     {offset
       c1rM5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1rM6; else goto c1rM7;
       c1rM6: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.^_$s^2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1rM7: // global
           I64[Sp - 16] = block_c1rM2_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1rMB; else goto c1rM3;
       u1rMB: // global
           call _c1rM2(R1) args: 0, res: 0, upd: 0;
       c1rM3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.^_$s^2_info" {
     GHC.Real.^_$s^2_info:
         const GHC.Real.^_$s^2_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S1jKw_srt+1488;
 },
 _c1rM2() //  [R1]
         { []
         }
     {offset
       c1rM2: // global
           _s1jC0::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s1jC0::I64, 0)) goto c1rMy; else goto c1rMz;
       c1rMy: // global
           if (_s1jC0::I64 == 0) goto c1rMw; else goto c1rMr;
       c1rMw: // global
           R1 = GHC.Real.^3_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1rMr: // global
           I64[Sp] = block_c1rMg_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1jC0::I64;
           if (R1 & 7 != 0) goto u1rMA; else goto c1rMh;
       u1rMA: // global
           call _c1rMg(R1) args: 0, res: 0, upd: 0;
       c1rMh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c1rMz: // global
           R1 = GHC.Real.^2_closure;
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1rM2_info" {
     block_c1rM2_info:
         const _c1rM2;
         const 1;
         const 4294967326;
         const S1jKw_srt+1496;
 },
 _c1rMg() //  [R1]
         { []
         }
     {offset
       c1rMg: // global
           _s1jC2::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_c1rMl_info;
           R3 = _s1jC2::I64;
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Real.$wf1_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1rMg_info" {
     block_c1rMg_info:
         const _c1rMg;
         const 65;
         const 30;
 },
 _c1rMl() //  [R1]
         { []
         }
     {offset
       c1rMl: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1rMv; else goto c1rMu;
       c1rMv: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c1rMu: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1rMl_info" {
     block_c1rMl_info:
         const _c1rMl;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:06.512449252 UTC

[section ""data" . $wg1_r1j3Q_closure" {
     $wg1_r1j3Q_closure:
         const $wg1_r1j3Q_info;
         const 0;
 },
 $wg1_r1j3Q_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1rN4: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1rN5; else goto u1rNH;
       c1rN5: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = $wg1_r1j3Q_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       u1rNH: // global
           P64[Sp - 24] = R2;
           I64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call _c1rMW() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . $wg1_r1j3Q_info" {
     $wg1_r1j3Q_info:
         const $wg1_r1j3Q_entry;
         const 0;
         const 12884901902;
         const 12884901909;
         const S1jKw_srt+1504;
 },
 _c1rMW() //  []
         { []
         }
     {offset
       c1rMW: // global
           _s1jC6::P64 = P64[Sp];
           _s1jC7::I64 = I64[Sp + 8];
           if (_s1jC7::I64 - (_s1jC7::I64 + (_s1jC7::I64 >> 63)) & (-2) == 0) goto c1rN3; else goto c1rN2;
       c1rN3: // global
           I64[Sp] = block_c1rNB_info;
           R3 = _s1jC6::P64;
           R2 = _s1jC6::P64;
           I64[Sp + 8] = %MO_S_Shr_W64(_s1jC7::I64 + (_s1jC7::I64 >> 63), 1);
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
       c1rN2: // global
           _s1jC8::P64 = P64[Sp + 16];
           if (_s1jC7::I64 == 1) goto c1rNt; else goto c1rNn;
       c1rNt: // global
           R3 = _s1jC8::P64;
           R2 = _s1jC6::P64;
           Sp = Sp + 24;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 0, upd: 8;
       c1rNn: // global
           I64[Sp - 8] = block_c1rNe_info;
           R3 = _s1jC8::P64;
           R2 = _s1jC6::P64;
           I64[Sp + 16] = _s1jC7::I64;
           Sp = Sp - 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c1rNB() //  [R1]
         { []
         }
     {offset
       c1rNB: // global
           P64[Sp] = R1;
           I64[Sp + 8] = I64[Sp + 8];
           P64[Sp + 16] = P64[Sp + 16];
           call _c1rMW() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1rNB_info" {
     block_c1rNB_info:
         const _c1rNB;
         const 66;
         const 4294967326;
         const S1jKw_srt+1512;
 },
 _c1rNe() //  [R1]
         { []
         }
     {offset
       c1rNe: // global
           _s1jC6::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1rNl_info;
           R3 = _s1jC6::P64;
           R2 = _s1jC6::P64;
           P64[Sp + 16] = R1;
           _s1jCa::I64 = I64[Sp + 24];
           I64[Sp + 24] = %MO_S_Shr_W64(_s1jCa::I64 + (_s1jCa::I64 >> 63), 1);
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1rNe_info" {
     block_c1rNe_info:
         const _c1rNe;
         const 387;
         const 4294967326;
         const S1jKw_srt+1512;
 },
 _c1rNl() //  [R1]
         { []
         }
     {offset
       c1rNl: // global
           P64[Sp] = R1;
           _s1jC8::P64 = P64[Sp + 8];
           I64[Sp + 8] = I64[Sp + 16];
           P64[Sp + 16] = _s1jC8::P64;
           call _c1rMW() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1rNl_info" {
     block_c1rNl_info:
         const _c1rNl;
         const 130;
         const 4294967326;
         const S1jKw_srt+1512;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:06.523826702 UTC

[section ""data" . GHC.Real.$wf_closure" {
     GHC.Real.$wf_closure:
         const GHC.Real.$wf_info;
         const 0;
 },
 GHC.Real.$wf_entry() //  [R2, R3]
         { []
         }
     {offset
       c1rOr: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1rOs; else goto u1rOZ;
       c1rOs: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$wf_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       u1rOZ: // global
           P64[Sp - 16] = R2;
           I64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _c1rOj() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . GHC.Real.$wf_info" {
     GHC.Real.$wf_info:
         const GHC.Real.$wf_entry;
         const 0;
         const 30064771086;
         const 8589934606;
         const S1jKw_srt+1504;
 },
 _c1rOj() //  []
         { []
         }
     {offset
       c1rOj: // global
           _s1jCg::P64 = P64[Sp];
           _s1jCh::I64 = I64[Sp + 8];
           if (_s1jCh::I64 - (_s1jCh::I64 + (_s1jCh::I64 >> 63)) & (-2) == 0) goto c1rOq; else goto c1rOp;
       c1rOq: // global
           I64[Sp] = block_c1rOT_info;
           R3 = _s1jCg::P64;
           R2 = _s1jCg::P64;
           I64[Sp + 8] = %MO_S_Shr_W64(_s1jCh::I64 + (_s1jCh::I64 >> 63), 1);
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
       c1rOp: // global
           if (_s1jCh::I64 == 1) goto c1rOL; else goto c1rOG;
       c1rOL: // global
           R1 = _s1jCg::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c1rOG: // global
           I64[Sp - 8] = block_c1rOE_info;
           R3 = _s1jCg::P64;
           R2 = _s1jCg::P64;
           I64[Sp + 8] = %MO_S_Shr_W64(_s1jCh::I64 + (_s1jCh::I64 >> 63), 1);
           Sp = Sp - 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c1rOT() //  [R1]
         { []
         }
     {offset
       c1rOT: // global
           P64[Sp] = R1;
           I64[Sp + 8] = I64[Sp + 8];
           call _c1rOj() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1rOT_info" {
     block_c1rOT_info:
         const _c1rOT;
         const 65;
         const 12884901918;
         const S1jKw_srt+1504;
 },
 _c1rOE() //  [R1]
         { []
         }
     {offset
       c1rOE: // global
           R4 = P64[Sp + 8];
           R3 = I64[Sp + 16];
           R2 = R1;
           Sp = Sp + 24;
           call $wg1_r1j3Q_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1rOE_info" {
     block_c1rOE_info:
         const _c1rOE;
         const 130;
         const 4294967326;
         const S1jKw_srt+1504;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:06.532116136 UTC

[section ""data" . GHC.Real.^_f1_closure" {
     GHC.Real.^_f1_closure:
         const GHC.Real.^_f1_info;
         const 0;
 },
 GHC.Real.^_f1_entry() //  [R2, R3]
         { []
         }
     {offset
       c1rPC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1rPD; else goto c1rPE;
       c1rPD: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.^_f1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1rPE: // global
           I64[Sp - 16] = block_c1rPz_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1rPI; else goto c1rPA;
       u1rPI: // global
           call _c1rPz(R1) args: 0, res: 0, upd: 0;
       c1rPA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.^_f1_info" {
     GHC.Real.^_f1_info:
         const GHC.Real.^_f1_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S1jKw_srt+1520;
 },
 _c1rPz() //  [R1]
         { []
         }
     {offset
       c1rPz: // global
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Real.$wf_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1rPz_info" {
     block_c1rPz_info:
         const _c1rPz;
         const 1;
         const 4294967326;
         const S1jKw_srt+1520;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:06.538208535 UTC

[section ""data" . GHC.Real.^_$s^1_closure" {
     GHC.Real.^_$s^1_closure:
         const GHC.Real.^_$s^1_info;
         const 0;
 },
 section ""relreadonly" . u1rQg_srtd" {
     u1rQg_srtd:
         const S1jKw_srt+1280;
         const 33;
         const 5368840193;
 },
 GHC.Real.^_$s^1_entry() //  [R2, R3]
         { []
         }
     {offset
       c1rPZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1rQ0; else goto c1rQ1;
       c1rQ0: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.^_$s^1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1rQ1: // global
           I64[Sp - 16] = block_c1rPW_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1rQf; else goto c1rPX;
       u1rQf: // global
           call _c1rPW(R1) args: 0, res: 0, upd: 0;
       c1rPX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.^_$s^1_info" {
     GHC.Real.^_$s^1_info:
         const GHC.Real.^_$s^1_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const u1rQg_srtd;
 },
 _c1rPW() //  [R1]
         { []
         }
     {offset
       c1rPW: // global
           _s1jCv::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s1jCv::I64, 0)) goto c1rQd; else goto c1rQe;
       c1rQd: // global
           if (_s1jCv::I64 == 0) goto c1rQb; else goto c1rQa;
       c1rQb: // global
           R1 = GHC.Real.$fEnumRatio1_closure;
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c1rQa: // global
           R3 = _s1jCv::I64;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Real.$wf_entry(R3, R2) args: 8, res: 0, upd: 8;
       c1rQe: // global
           R1 = GHC.Real.^1_closure;
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1rPW_info" {
     block_c1rPW_info:
         const _c1rPW;
         const 1;
         const 4612248972675776542;
         const S1jKw_srt+1280;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:06.545717978 UTC

[section ""data" . lvl6_r1j3R_closure" {
     lvl6_r1j3R_closure:
         const lvl6_r1j3R_info;
         const 0;
         const 0;
         const 0;
 },
 lvl6_r1j3R_entry() //  [R1]
         { []
         }
     {offset
       c1rQB: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1rQC; else goto c1rQD;
       c1rQC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1rQD: // global
           (_c1rQw::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c1rQw::I64 == 0) goto c1rQy; else goto c1rQx;
       c1rQy: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c1rQx: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c1rQw::I64;
           I64[Sp - 24] = block_c1rQz_info;
           R2 = lvl5_r1j3O_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl6_r1j3R_info" {
     lvl6_r1j3R_info:
         const lvl6_r1j3R_entry;
         const 0;
         const 4294967317;
         const S1jKw_srt+1544;
 },
 _c1rQz() //  [R1]
         { []
         }
     {offset
       c1rQz: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1rQz_info" {
     block_c1rQz_info:
         const _c1rQz;
         const 0;
         const 4294967326;
         const S1jKw_srt+1544;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:06.551426219 UTC

[section ""data" . lvl7_r1j3S_closure" {
     lvl7_r1j3S_closure:
         const lvl7_r1j3S_info;
         const 0;
         const 0;
         const 0;
 },
 lvl7_r1j3S_entry() //  [R1]
         { []
         }
     {offset
       c1rQZ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1rR0; else goto c1rR1;
       c1rR0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1rR1: // global
           (_c1rQU::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c1rQU::I64 == 0) goto c1rQW; else goto c1rQV;
       c1rQW: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c1rQV: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c1rQU::I64;
           I64[Sp - 24] = block_c1rQX_info;
           R2 = lvl5_r1j3O_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl7_r1j3S_info" {
     lvl7_r1j3S_info:
         const lvl7_r1j3S_entry;
         const 0;
         const 4294967317;
         const S1jKw_srt+1544;
 },
 _c1rQX() //  [R1]
         { []
         }
     {offset
       c1rQX: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1rQX_info" {
     block_c1rQX_info:
         const _c1rQX;
         const 0;
         const 4294967326;
         const S1jKw_srt+1544;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:06.574100716 UTC

[section ""data" . GHC.Real.^_closure" {
     GHC.Real.^_closure:
         const GHC.Real.^_info;
         const 0;
 },
 $dNum1_s1jCF_entry() //  [R1]
         { []
         }
     {offset
       c1rSI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1rSJ; else goto c1rSK;
       c1rSJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1rSK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dNum1_s1jCF_info" {
     $dNum1_s1jCF_info:
         const $dNum1_s1jCF_entry;
         const 1;
         const 16;
 },
 sat_s1jCH_entry() //  [R1]
         { []
         }
     {offset
       c1rSN: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1rSO; else goto c1rSP;
       c1rSO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1rSP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Real.even1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jCH_info" {
     sat_s1jCH_info:
         const sat_s1jCH_entry;
         const 1;
         const 4294967312;
         const S1jKw_srt+1552;
 },
 sat_s1jCK_entry() //  [R1]
         { []
         }
     {offset
       c1rSS: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1rST; else goto c1rSU;
       c1rST: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1rSU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Real.even1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jCK_info" {
     sat_s1jCK_info:
         const sat_s1jCK_entry;
         const 1;
         const 4294967312;
         const S1jKw_srt+1552;
 },
 lvl8_s1jCM_entry() //  [R1]
         { []
         }
     {offset
       c1rSX: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1rSY; else goto c1rSZ;
       c1rSY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1rSZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Real.even2_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl8_s1jCM_info" {
     lvl8_s1jCM_info:
         const lvl8_s1jCM_entry;
         const 1;
         const 4294967312;
         const S1jKw_srt+1560;
 },
 lvl9_s1jCR_entry() //  [R1]
         { []
         }
     {offset
       c1rT2: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1rT3; else goto c1rT4;
       c1rT3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1rT4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Real.$fEnumRatio1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl9_s1jCR_info" {
     lvl9_s1jCR_info:
         const lvl9_s1jCR_entry;
         const 1;
         const 4294967312;
         const S1jKw_srt+1416;
 },
 sat_s1jD8_entry() //  [R1]
         { []
         }
     {offset
       c1rT7: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1rT8; else goto c1rT9;
       c1rT8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1rT9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Real.quot_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jD8_info" {
     sat_s1jD8_info:
         const sat_s1jD8_entry;
         const 3;
         const 15;
 },
 sat_s1jD7_entry() //  [R1]
         { []
         }
     {offset
       c1rTc: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1rTd; else goto c1rTe;
       c1rTd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1rTe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           _s1jCO::P64 = P64[R1 + 24];
           P64[Sp - 32] = _s1jCO::P64;
           P64[Sp - 24] = _s1jCO::P64;
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jD7_info" {
     sat_s1jD7_info:
         const sat_s1jD7_entry;
         const 2;
         const 18;
 },
 sat_s1jD4_entry() //  [R1]
         { []
         }
     {offset
       c1rTh: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1rTi; else goto c1rTj;
       c1rTi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1rTj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jD4_info" {
     sat_s1jD4_info:
         const sat_s1jD4_entry;
         const 3;
         const 15;
 },
 sat_s1jD3_entry() //  [R1]
         { []
         }
     {offset
       c1rTm: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1rTn; else goto c1rTo;
       c1rTn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1rTo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Real.quot_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jD3_info" {
     sat_s1jD3_info:
         const sat_s1jD3_entry;
         const 3;
         const 15;
 },
 sat_s1jD2_entry() //  [R1]
         { []
         }
     {offset
       c1rTs: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1rTt; else goto c1rTu;
       c1rTt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1rTu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           _s1jCX::P64 = P64[R1 + 24];
           P64[Sp - 32] = _s1jCX::P64;
           P64[Sp - 24] = _s1jCX::P64;
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jD2_info" {
     sat_s1jD2_info:
         const sat_s1jD2_entry;
         const 2;
         const 18;
 },
 sat_s1jD6_entry() //  [R1]
         { []
         }
     {offset
       c1rTx: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1rTy; else goto c1rTz;
       c1rTy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1rTz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Real.quot_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jD6_info" {
     sat_s1jD6_info:
         const sat_s1jD6_entry;
         const 3;
         const 15;
 },
 sat_s1jD5_entry() //  [R1]
         { []
         }
     {offset
       c1rTD: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1rTE; else goto c1rTF;
       c1rTE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1rTF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           _s1jCX::P64 = P64[R1 + 24];
           P64[Sp - 32] = _s1jCX::P64;
           P64[Sp - 24] = _s1jCX::P64;
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jD5_info" {
     sat_s1jD5_info:
         const sat_s1jD5_entry;
         const 2;
         const 18;
 },
 sat_s1jDe_entry() //  [R1]
         { []
         }
     {offset
       c1rTI: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1rTJ; else goto c1rTK;
       c1rTJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1rTK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Real.quot_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jDe_info" {
     sat_s1jDe_info:
         const sat_s1jDe_entry;
         const 3;
         const 15;
 },
 sat_s1jDd_entry() //  [R1]
         { []
         }
     {offset
       c1rTO: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1rTP; else goto c1rTQ;
       c1rTP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1rTQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           _s1jDa::P64 = P64[R1 + 24];
           P64[Sp - 32] = _s1jDa::P64;
           P64[Sp - 24] = _s1jDa::P64;
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jDd_info" {
     sat_s1jDd_info:
         const sat_s1jDd_entry;
         const 2;
         const 18;
 },
 section ""relreadonly" . u1rWV_srtd" {
     u1rWV_srtd:
         const S1jKw_srt+696;
         const 111;
         const 1;
         const 131941462441984;
 },
 GHC.Real.^_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c1rTR: // global
           if ((Sp + -96) < SpLim) (likely: False) goto c1rTS; else goto c1rTT;
       c1rTS: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.^_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1rTT: // global
           I64[Sp - 40] = block_c1rRj_info;
           _s1jCA::P64 = R2;
           R2 = R3;
           P64[Sp - 32] = _s1jCA::P64;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.^_info" {
     GHC.Real.^_info:
         const GHC.Real.^_entry;
         const 0;
         const 18446744069414584334;
         const 17179869208;
         const u1rWV_srtd;
 },
 section ""relreadonly" . u1rWW_srtd" {
     u1rWW_srtd:
         const S1jKw_srt+696;
         const 111;
         const 1;
         const 96757090353152;
 },
 _c1rRj() //  [R1]
         { []
         }
     {offset
       c1rRj: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1rTW; else goto c1rTV;
       c1rTW: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1rTV: // global
           I64[Hp - 16] = $dNum1_s1jCF_info;
           P64[Hp] = R1;
           I64[Sp - 8] = block_c1rRp_info;
           R2 = R1;
           P64[Sp] = Hp - 16;
           Sp = Sp - 8;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1rRj_info" {
     block_c1rRj_info:
         const _c1rRj;
         const 4;
         const 18446744069414584350;
         const u1rWW_srtd;
 },
 section ""relreadonly" . u1rWX_srtd" {
     u1rWX_srtd:
         const S1jKw_srt+696;
         const 111;
         const 1;
         const 96757090353152;
 },
 _c1rRp() //  [R1]
         { []
         }
     {offset
       c1rRp: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1rTZ; else goto c1rTY;
       c1rTZ: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1rTY: // global
           I64[Hp - 16] = sat_s1jCH_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp - 8] = block_c1rRv_info;
           R2 = R1;
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = P64[Sp + 40];
           P64[Sp - 16] = Hp - 16;
           P64[Sp] = R1;
           Sp = Sp - 32;
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1rRp_info" {
     block_c1rRp_info:
         const _c1rRp;
         const 5;
         const 18446744069414584350;
         const u1rWX_srtd;
 },
 section ""relreadonly" . u1rWY_srtd" {
     u1rWY_srtd:
         const S1jKw_srt+696;
         const 111;
         const 1;
         const 96757090353152;
 },
 _c1rRv() //  [R1]
         { []
         }
     {offset
       c1rRv: // global
           if (R1 & 7 == 1) goto c1rU1; else goto c1rUZ;
       c1rU1: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1rU4; else goto c1rU3;
       c1rU4: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1rU3: // global
           I64[Hp - 16] = sat_s1jCK_info;
           P64[Hp] = P64[Sp + 16];
           I64[Sp - 8] = block_c1rRB_info;
           R2 = P64[Sp + 8];
           P64[Sp] = Hp - 16;
           Sp = Sp - 8;
           call GHC.Classes.$p1Ord_entry(R2) args: 8, res: 8, upd: 8;
       c1rUZ: // global
           R1 = lvl7_r1j3S_closure;
           Sp = Sp + 56;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1rRv_info" {
     block_c1rRv_info:
         const _c1rRv;
         const 6;
         const 18446744069414584350;
         const u1rWY_srtd;
 },
 section ""relreadonly" . u1rWZ_srtd" {
     u1rWZ_srtd:
         const S1jKw_srt+696;
         const 109;
         const 1;
         const 17592253153280;
 },
 _c1rRB() //  [R1]
         { []
         }
     {offset
       c1rRB: // global
           _c1rRz::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1rRF_info;
           R2 = R1;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = P64[Sp + 56];
           P64[Sp] = _c1rRz::P64;
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1rRB_info" {
     block_c1rRB_info:
         const _c1rRB;
         const 7;
         const 18446744069414584350;
         const u1rWZ_srtd;
 },
 section ""relreadonly" . u1rX0_srtd" {
     u1rX0_srtd:
         const S1jKw_srt+696;
         const 109;
         const 1;
         const 17592253153280;
 },
 _c1rRF() //  [R1]
         { []
         }
     {offset
       c1rRF: // global
           if (R1 & 7 == 1) goto c1rU7; else goto c1rUV;
       c1rU7: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1rUa; else goto c1rU9;
       c1rUa: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1rU9: // global
           I64[Hp - 16] = lvl8_s1jCM_info;
           P64[Hp] = P64[Sp + 16];
           P64[Sp] = P64[Sp + 48];
           P64[Sp + 40] = P64[Sp + 40];
           P64[Sp + 48] = Hp - 16;
           call _c1rSw() args: 0, res: 0, upd: 0;
       c1rUV: // global
           R2 = P64[Sp + 24];
           I64[Sp + 40] = stg_ap_p_info;
           P64[Sp + 48] = GHC.Real.$fEnumRatio1_closure;
           Sp = Sp + 40;
           call GHC.Num.fromInteger_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1rRF_info" {
     block_c1rRF_info:
         const _c1rRF;
         const 6;
         const 18446744069414584350;
         const u1rX0_srtd;
 },
 _c1rSw() //  []
         { []
         }
     {offset
       c1rSw: // global
           I64[Sp - 8] = block_c1rSy_info;
           R3 = P64[Sp];
           R2 = P64[Sp + 32];
           Sp = Sp - 8;
           call GHC.Real.even_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . u1rX1_srtd" {
     u1rX1_srtd:
         const S1jKw_srt+696;
         const 91;
         const 1;
         const 67108864;
 },
 _c1rSy() //  [R1]
         { []
         }
     {offset
       c1rSy: // global
           _s1jDa::P64 = P64[Sp + 48];
           _s1jDb::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c1rUN; else goto c1rUO;
       c1rUN: // global
           I64[Sp + 8] = block_c1rRQ_info;
           R2 = P64[Sp + 16];
           P64[Sp + 16] = _s1jDb::P64;
           P64[Sp + 48] = _s1jDa::P64;
           Sp = Sp + 8;
           call GHC.Classes.$p1Ord_entry(R2) args: 8, res: 8, upd: 8;
       c1rUO: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c1rUR; else goto c1rUQ;
       c1rUR: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1rUQ: // global
           I64[Hp - 64] = sat_s1jDe_info;
           P64[Hp - 48] = P64[Sp + 40];
           P64[Hp - 40] = P64[Sp + 56];
           P64[Hp - 32] = _s1jDb::P64;
           I64[Hp - 24] = sat_s1jDd_info;
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = _s1jDa::P64;
           P64[Sp + 48] = Hp - 24;
           P64[Sp + 8] = Hp - 64;
           Sp = Sp + 8;
           call _c1rSw() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1rSy_info" {
     block_c1rSy_info:
         const _c1rSy;
         const 7;
         const 18446744069414584350;
         const u1rX1_srtd;
 },
 section ""relreadonly" . u1rX2_srtd" {
     u1rX2_srtd:
         const S1jKw_srt+696;
         const 91;
         const 1;
         const 67108864;
 },
 _c1rRQ() //  [R1]
         { []
         }
     {offset
       c1rRQ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1rUe; else goto c1rUd;
       c1rUe: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1rUd: // global
           I64[Hp - 16] = lvl9_s1jCR_info;
           P64[Hp] = P64[Sp + 16];
           I64[Sp - 8] = block_c1rRW_info;
           R2 = R1;
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = P64[Sp + 8];
           _c1rRU::P64 = Hp - 16;
           P64[Sp - 16] = _c1rRU::P64;
           P64[Sp] = R1;
           P64[Sp + 16] = _c1rRU::P64;
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1rRQ_info" {
     block_c1rRQ_info:
         const _c1rRQ;
         const 6;
         const 18446744069414584350;
         const u1rX2_srtd;
 },
 _c1rRW() //  [R1]
         { []
         }
     {offset
       c1rRW: // global
           _s1jCO::P64 = P64[Sp + 48];
           if (R1 & 7 == 1) goto c1rUg; else goto c1rUI;
       c1rUg: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c1rUj; else goto c1rUi;
       c1rUj: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1rUi: // global
           I64[Hp - 64] = sat_s1jD8_info;
           P64[Hp - 48] = P64[Sp + 40];
           P64[Hp - 40] = P64[Sp + 56];
           P64[Hp - 32] = P64[Sp + 16];
           I64[Hp - 24] = sat_s1jD7_info;
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = _s1jCO::P64;
           P64[Sp] = _s1jCO::P64;
           P64[Sp + 16] = Hp - 64;
           P64[Sp + 48] = Hp - 24;
           call _c1rS9() args: 0, res: 0, upd: 0;
       c1rUI: // global
           R1 = _s1jCO::P64;
           Sp = Sp + 64;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1rRW_info" {
     block_c1rRW_info:
         const _c1rRW;
         const 7;
         const 4294967326;
         const S1jKw_srt+1584;
 },
 _c1rS9() //  []
         { []
         }
     {offset
       c1rS9: // global
           I64[Sp - 8] = block_c1rSb_info;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 40];
           Sp = Sp - 8;
           call GHC.Real.even_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c1rSb() //  [R1]
         { []
         }
     {offset
       c1rSb: // global
           _s1jCY::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c1rUr; else goto c1rUB;
       c1rUr: // global
           I64[Sp] = block_c1rSf_info;
           R2 = P64[Sp + 16];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _s1jCY::P64;
           P64[Sp - 8] = P64[Sp + 32];
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
       c1rUB: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c1rUE; else goto c1rUD;
       c1rUE: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1rUD: // global
           I64[Hp - 64] = sat_s1jD6_info;
           P64[Hp - 48] = P64[Sp + 48];
           P64[Hp - 40] = P64[Sp + 64];
           P64[Hp - 32] = _s1jCY::P64;
           I64[Hp - 24] = sat_s1jD5_info;
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = P64[Sp + 56];
           P64[Sp + 56] = Hp - 24;
           P64[Sp + 24] = Hp - 64;
           P64[Sp + 8] = P64[Sp + 8];
           Sp = Sp + 8;
           call _c1rS9() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1rSb_info" {
     block_c1rSb_info:
         const _c1rSb;
         const 8;
         const 4294967326;
         const S1jKw_srt+1584;
 },
 _c1rSf() //  [R1]
         { []
         }
     {offset
       c1rSf: // global
           _s1jCA::P64 = P64[Sp + 40];
           _s1jCX::P64 = P64[Sp + 56];
           _s1jCZ::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c1rUt; else goto c1rUA;
       c1rUt: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto c1rUw; else goto c1rUv;
       c1rUw: // global
           HpAlloc = 112;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1rUv: // global
           I64[Hp - 104] = sat_s1jD4_info;
           P64[Hp - 88] = _s1jCA::P64;
           P64[Hp - 80] = _s1jCX::P64;
           P64[Hp - 72] = _s1jCZ::P64;
           I64[Hp - 64] = sat_s1jD3_info;
           P64[Hp - 48] = P64[Sp + 48];
           P64[Hp - 40] = P64[Sp + 64];
           P64[Hp - 32] = P64[Sp + 24];
           I64[Hp - 24] = sat_s1jD2_info;
           P64[Hp - 8] = _s1jCA::P64;
           P64[Hp] = _s1jCX::P64;
           P64[Sp + 56] = Hp - 24;
           P64[Sp + 24] = Hp - 64;
           P64[Sp + 8] = Hp - 104;
           Sp = Sp + 8;
           call _c1rS9() args: 0, res: 0, upd: 0;
       c1rUA: // global
           R2 = _s1jCA::P64;
           I64[Sp + 48] = stg_ap_pp_info;
           P64[Sp + 56] = _s1jCX::P64;
           P64[Sp + 64] = _s1jCZ::P64;
           Sp = Sp + 48;
           call GHC.Num.*_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1rSf_info" {
     block_c1rSf_info:
         const _c1rSf;
         const 8;
         const 4294967326;
         const S1jKw_srt+1584;
 },
 section ""data" . GHC.Real.^%^_closure" {
     GHC.Real.^%^_closure:
         const GHC.Real.^%^_info;
         const 0;
 },
 GHC.Real.^%^_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1rVn: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1rVt; else goto c1rVu;
       c1rVt: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.^%^_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1rVu: // global
           I64[Sp - 24] = block_c1rVk_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u1rVz; else goto c1rVl;
       u1rVz: // global
           call _c1rVk(R1) args: 0, res: 0, upd: 0;
       c1rVl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.^%^_info" {
     GHC.Real.^%^_info:
         const GHC.Real.^%^_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S1jKw_srt+1592;
 },
 _c1rVk() //  [R1]
         { []
         }
     {offset
       c1rVk: // global
           _s1jDh::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c1rVq_info;
           R5 = _s1jDh::P64;
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Real.$w^%^_entry(R5, R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1rVk_info" {
     block_c1rVk_info:
         const _c1rVk;
         const 2;
         const 4294967326;
         const S1jKw_srt+1600;
 },
 _c1rVq() //  [R1, R2]
         { []
         }
     {offset
       c1rVq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1rVy; else goto c1rVx;
       c1rVy: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c1rVx: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1rVq_info" {
     block_c1rVq_info:
         const _c1rVq;
         const 0;
         const 30;
 },
 section ""data" . GHC.Real.$w^%^_closure" {
     GHC.Real.$w^%^_closure:
         const GHC.Real.$w^%^_info;
         const 0;
 },
 $dNum_s1jDt_entry() //  [R1]
         { []
         }
     {offset
       c1rVM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1rVN; else goto c1rVO;
       c1rVN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1rVO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dNum_s1jDt_info" {
     $dNum_s1jDt_info:
         const $dNum_s1jDt_entry;
         const 1;
         const 16;
 },
 sat_s1jDv_entry() //  [R1]
         { []
         }
     {offset
       c1rVX: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1rVY; else goto c1rVZ;
       c1rVY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1rVZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Real.even1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jDv_info" {
     sat_s1jDv_info:
         const sat_s1jDv_entry;
         const 1;
         const 4294967312;
         const S1jKw_srt+1552;
 },
 sat_s1jDy_entry() //  [R1]
         { []
         }
     {offset
       c1rW8: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1rW9; else goto c1rWa;
       c1rW9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1rWa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Real.even1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jDy_info" {
     sat_s1jDy_info:
         const sat_s1jDy_entry;
         const 1;
         const 4294967312;
         const S1jKw_srt+1552;
 },
 GHC.Real.$w^%^_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c1rWb: // global
           if ((Sp + -80) < SpLim) (likely: False) goto c1rWc; else goto c1rWd;
       c1rWc: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$w^%^_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1rWd: // global
           I64[Sp - 40] = block_c1rVE_info;
           _s1jDo::P64 = R2;
           R2 = R2;
           P64[Sp - 32] = _s1jDo::P64;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$w^%^_info" {
     GHC.Real.$w^%^_info:
         const GHC.Real.$w^%^_entry;
         const 0;
         const 255016333194821646;
         const 17179869208;
         const S1jKw_srt+1416;
 },
 _c1rVE() //  [R1]
         { []
         }
     {offset
       c1rVE: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1rWg; else goto c1rWf;
       c1rWg: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1rWf: // global
           I64[Hp - 16] = $dNum_s1jDt_info;
           P64[Hp] = R1;
           I64[Sp - 8] = block_c1rVP_info;
           R2 = R1;
           P64[Sp] = Hp - 16;
           Sp = Sp - 8;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1rVE_info" {
     block_c1rVE_info:
         const _c1rVE;
         const 4;
         const 218987536175857694;
         const S1jKw_srt+1416;
 },
 _c1rVP() //  [R1]
         { []
         }
     {offset
       c1rVP: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1rWj; else goto c1rWi;
       c1rWj: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1rWi: // global
           I64[Hp - 16] = sat_s1jDv_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp - 8] = block_c1rW0_info;
           R2 = R1;
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = P64[Sp + 40];
           P64[Sp - 16] = Hp - 16;
           P64[Sp] = R1;
           Sp = Sp - 32;
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1rVP_info" {
     block_c1rVP_info:
         const _c1rVP;
         const 5;
         const 218987536175857694;
         const S1jKw_srt+1416;
 },
 _c1rW0() //  [R1]
         { []
         }
     {offset
       c1rW0: // global
           if (R1 & 7 == 1) goto c1rWm; else goto c1rWS;
       c1rWm: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1rWp; else goto c1rWo;
       c1rWp: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1rWo: // global
           I64[Hp - 16] = sat_s1jDy_info;
           P64[Hp] = P64[Sp + 16];
           _s1jDu::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1rWk_info;
           R2 = _s1jDu::P64;
           P64[Sp + 16] = Hp - 16;
           Sp = Sp + 8;
           call GHC.Classes.$p1Ord_entry(R2) args: 8, res: 8, upd: 8;
       c1rWS: // global
           R1 = lvl6_r1j3R_closure;
           Sp = Sp + 56;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1rW0_info" {
     block_c1rW0_info:
         const _c1rW0;
         const 6;
         const 218987536175857694;
         const S1jKw_srt+1416;
 },
 _c1rWk() //  [R1]
         { []
         }
     {offset
       c1rWk: // global
           _c1rW4::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1rWt_info;
           R2 = R1;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = P64[Sp + 40];
           P64[Sp] = _c1rW4::P64;
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1rWk_info" {
     block_c1rWk_info:
         const _c1rWk;
         const 5;
         const 74309398146580510;
         const S1jKw_srt+1416;
 },
 _c1rWt() //  [R1]
         { []
         }
     {offset
       c1rWt: // global
           if (R1 & 7 == 1) goto c1rWF; else goto c1rWO;
       c1rWF: // global
           I64[Sp] = block_c1rWy_info;
           R5 = P64[Sp + 32];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = GHC.Num.$fNumInteger_closure;
           call GHC.Real.^_entry(R5, R4, R3, R2) args: 8, res: 8, upd: 8;
       c1rWO: // global
           R2 = GHC.Real.$fEnumRatio1_closure;
           R1 = GHC.Real.$fEnumRatio1_closure;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1rWt_info" {
     block_c1rWt_info:
         const _c1rWt;
         const 4;
         const 74309398146580510;
         const S1jKw_srt+1416;
 },
 _c1rWy() //  [R1]
         { []
         }
     {offset
       c1rWy: // global
           _s1jDq::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_c1rWC_info;
           R5 = P64[Sp + 32];
           R4 = _s1jDq::P64;
           R3 = P64[Sp + 8];
           R2 = GHC.Num.$fNumInteger_closure;
           P64[Sp + 32] = R1;
           Sp = Sp + 24;
           call GHC.Real.^_entry(R5, R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1rWy_info" {
     block_c1rWy_info:
         const _c1rWy;
         const 132;
         const 141733920798;
         const S1jKw_srt+1568;
 },
 _c1rWC() //  [R1]
         { []
         }
     {offset
       c1rWC: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1rWC_info" {
     block_c1rWC_info:
         const _c1rWC;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:06.662474914 UTC

[section ""data" . GHC.Real.$w^^%^^_closure" {
     GHC.Real.$w^^%^^_closure:
         const GHC.Real.$w^^%^^_info;
         const 0;
 },
 $dNum_s1jDI_entry() //  [R1]
         { []
         }
     {offset
       c1s0V: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1s0W; else goto c1s0X;
       c1s0W: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1s0X: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dNum_s1jDI_info" {
     $dNum_s1jDI_info:
         const $dNum_s1jDI_entry;
         const 1;
         const 16;
 },
 sat_s1jDK_entry() //  [R1]
         { []
         }
     {offset
       c1s16: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1s17; else goto c1s18;
       c1s17: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1s18: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Real.even1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jDK_info" {
     sat_s1jDK_info:
         const sat_s1jDK_entry;
         const 1;
         const 4294967312;
         const S1jKw_srt+1552;
 },
 sat_s1jDN_entry() //  [R1]
         { []
         }
     {offset
       c1s1h: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1s1i; else goto c1s1j;
       c1s1i: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1s1j: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Real.even1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jDN_info" {
     sat_s1jDN_info:
         const sat_s1jDN_entry;
         const 1;
         const 4294967312;
         const S1jKw_srt+1552;
 },
 sat_s1jDT_entry() //  [R1]
         { []
         }
     {offset
       c1s1E: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1s1F; else goto c1s1G;
       c1s1F: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1s1G: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Num.negate_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jDT_info" {
     sat_s1jDT_info:
         const sat_s1jDT_entry;
         const 2;
         const 18;
 },
 sat_s1jDS_entry() //  [R1]
         { []
         }
     {offset
       c1s1L: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1s1M; else goto c1s1N;
       c1s1M: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1s1N: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Integer.Type.negateInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jDS_info" {
     sat_s1jDS_info:
         const sat_s1jDS_entry;
         const 1;
         const 16;
 },
 sat_s1jDV_entry() //  [R1]
         { []
         }
     {offset
       c1s1W: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1s1X; else goto c1s1Y;
       c1s1X: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1s1Y: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Num.negate_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jDV_info" {
     sat_s1jDV_info:
         const sat_s1jDV_entry;
         const 2;
         const 18;
 },
 sat_s1jE2_entry() //  [R1]
         { []
         }
     {offset
       c1s25: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1s26; else goto c1s27;
       c1s26: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1s27: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Num.negate_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jE2_info" {
     sat_s1jE2_info:
         const sat_s1jE2_entry;
         const 2;
         const 18;
 },
 sat_s1jE4_entry() //  [R1]
         { []
         }
     {offset
       c1s2g: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1s2h; else goto c1s2i;
       c1s2h: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1s2i: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Num.negate_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jE4_info" {
     sat_s1jE4_info:
         const sat_s1jE4_entry;
         const 2;
         const 18;
 },
 section ""relreadonly" . u1s43_srtd" {
     u1s43_srtd:
         const S1jKw_srt+296;
         const 167;
         const 1;
         const 0;
         const 354871676928;
 },
 GHC.Real.$w^^%^^_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c1s2j: // global
           if ((Sp + -80) < SpLim) (likely: False) goto c1s2k; else goto c1s2l;
       c1s2k: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$w^^%^^_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1s2l: // global
           I64[Sp - 40] = block_c1s0N_info;
           _s1jDD::P64 = R2;
           R2 = R2;
           P64[Sp - 32] = _s1jDD::P64;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$w^^%^^_info" {
     GHC.Real.$w^^%^^_info:
         const GHC.Real.$w^^%^^_entry;
         const 0;
         const 18446744069414584334;
         const 17179869208;
         const u1s43_srtd;
 },
 section ""relreadonly" . u1s44_srtd" {
     u1s44_srtd:
         const S1jKw_srt+296;
         const 165;
         const 1;
         const 0;
         const 79993769984;
 },
 _c1s0N() //  [R1]
         { []
         }
     {offset
       c1s0N: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1s2o; else goto c1s2n;
       c1s2o: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1s2n: // global
           I64[Hp - 16] = $dNum_s1jDI_info;
           P64[Hp] = R1;
           I64[Sp - 8] = block_c1s0Y_info;
           R2 = R1;
           P64[Sp] = Hp - 16;
           Sp = Sp - 8;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1s0N_info" {
     block_c1s0N_info:
         const _c1s0N;
         const 4;
         const 18446744069414584350;
         const u1s44_srtd;
 },
 section ""relreadonly" . u1s45_srtd" {
     u1s45_srtd:
         const S1jKw_srt+296;
         const 165;
         const 1;
         const 0;
         const 79993769984;
 },
 _c1s0Y() //  [R1]
         { []
         }
     {offset
       c1s0Y: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1s2r; else goto c1s2q;
       c1s2r: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1s2q: // global
           I64[Hp - 16] = sat_s1jDK_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp - 8] = block_c1s19_info;
           R2 = R1;
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = P64[Sp + 40];
           P64[Sp - 16] = Hp - 16;
           P64[Sp] = R1;
           Sp = Sp - 32;
           call GHC.Classes.>_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1s0Y_info" {
     block_c1s0Y_info:
         const _c1s0Y;
         const 5;
         const 18446744069414584350;
         const u1s45_srtd;
 },
 section ""relreadonly" . u1s46_srtd" {
     u1s46_srtd:
         const S1jKw_srt+296;
         const 165;
         const 1;
         const 0;
         const 79993769984;
 },
 _c1s19() //  [R1]
         { []
         }
     {offset
       c1s19: // global
           if (R1 & 7 == 1) goto c1s2t; else goto c1s3R;
       c1s2t: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1s2w; else goto c1s2v;
       c1s2w: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1s2v: // global
           I64[Hp - 16] = sat_s1jDN_info;
           P64[Hp] = P64[Sp + 16];
           I64[Sp] = block_c1s1k_info;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = Hp - 16;
           call GHC.Classes.$p1Ord_entry(R2) args: 8, res: 8, upd: 8;
       c1s3R: // global
           I64[Sp + 16] = block_c1s3L_info;
           R5 = P64[Sp + 48];
           R4 = P64[Sp + 32];
           R3 = P64[Sp + 24];
           R2 = GHC.Num.$fNumInteger_closure;
           Sp = Sp + 16;
           call GHC.Real.^_entry(R5, R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1s19_info" {
     block_c1s19_info:
         const _c1s19;
         const 6;
         const 18446744069414584350;
         const u1s46_srtd;
 },
 section ""relreadonly" . u1s47_srtd" {
     u1s47_srtd:
         const S1jKw_srt+296;
         const 165;
         const 1;
         const 0;
         const 79993769984;
 },
 _c1s1k() //  [R1]
         { []
         }
     {offset
       c1s1k: // global
           _c1s1d::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1s1o_info;
           R2 = R1;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = P64[Sp + 48];
           P64[Sp] = _c1s1d::P64;
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1s1k_info" {
     block_c1s1k_info:
         const _c1s1k;
         const 6;
         const 18446744069414584350;
         const u1s47_srtd;
 },
 section ""relreadonly" . u1s48_srtd" {
     u1s48_srtd:
         const S1jKw_srt+296;
         const 165;
         const 1;
         const 0;
         const 79993769984;
 },
 _c1s1o() //  [R1]
         { []
         }
     {offset
       c1s1o: // global
           if (R1 & 7 == 1) goto c1s2A; else goto c1s3I;
       c1s2A: // global
           I64[Sp] = block_c1s1s_info;
           R3 = GHC.Real.even1_closure;
           R2 = P64[Sp + 24];
           call GHC.Integer.Type.gtInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
       c1s3I: // global
           R2 = GHC.Real.$fEnumRatio1_closure;
           R1 = GHC.Real.$fEnumRatio1_closure;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1s1o_info" {
     block_c1s1o_info:
         const _c1s1o;
         const 5;
         const 18446744069414584350;
         const u1s48_srtd;
 },
 section ""relreadonly" . u1s49_srtd" {
     u1s49_srtd:
         const S1jKw_srt+296;
         const 165;
         const 1;
         const 0;
         const 79993765888;
 },
 _c1s1s() //  [R1]
         { []
         }
     {offset
       c1s1s: // global
           if (R1 == 1) goto c1s3u; else goto c1s2D;
       c1s3u: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1s3x; else goto c1s3w;
       c1s3x: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c1s3w: // global
           I64[Hp - 24] = sat_s1jE2_info;
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = P64[Sp + 8];
           I64[Sp] = block_c1s28_info;
           R5 = Hp - 24;
           R4 = P64[Sp + 32];
           R3 = P64[Sp + 16];
           R2 = GHC.Num.$fNumInteger_closure;
           call GHC.Real.^_entry(R5, R4, R3, R2) args: 8, res: 8, upd: 8;
       c1s2D: // global
           I64[Sp] = block_c1s1w_info;
           R3 = GHC.Real.even1_closure;
           R2 = P64[Sp + 24];
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1s1s_info" {
     block_c1s1s_info:
         const _c1s1s;
         const 5;
         const 18446744069414584350;
         const u1s49_srtd;
 },
 _c1s28() //  [R1]
         { []
         }
     {offset
       c1s28: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1s3A; else goto c1s3z;
       c1s3A: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1s3z: // global
           I64[Hp - 24] = sat_s1jE4_info;
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 32] = block_c1s3t_info;
           R5 = Hp - 24;
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = GHC.Num.$fNumInteger_closure;
           P64[Sp + 40] = R1;
           Sp = Sp + 32;
           call GHC.Real.^_entry(R5, R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1s28_info" {
     block_c1s28_info:
         const _c1s28;
         const 517;
         const 141733920798;
         const S1jKw_srt+1568;
 },
 _c1s3t() //  [R1]
         { []
         }
     {offset
       c1s3t: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1s3t_info" {
     block_c1s3t_info:
         const _c1s3t;
         const 1;
         const 30;
 },
 section ""relreadonly" . u1s4a_srtd" {
     u1s4a_srtd:
         const S1jKw_srt+296;
         const 165;
         const 1;
         const 0;
         const 79456894976;
 },
 _c1s1w() //  [R1]
         { []
         }
     {offset
       c1s1w: // global
           if (R1 == 1) goto c1s3s; else goto c1s2G;
       c1s3s: // global
           R1 = GHC.Real.ratioZeroDenominatorError_closure;
           Sp = Sp + 48;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c1s2G: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c1s2J; else goto c1s2I;
       c1s2J: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c1s2I: // global
           I64[Hp - 48] = sat_s1jDT_info;
           P64[Hp - 32] = P64[Sp + 40];
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = sat_s1jDS_info;
           P64[Hp] = P64[Sp + 24];
           I64[Sp] = block_c1s1O_info;
           R5 = Hp - 48;
           R4 = Hp - 16;
           R3 = P64[Sp + 16];
           R2 = GHC.Num.$fNumInteger_closure;
           call GHC.Real.^_entry(R5, R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1s1w_info" {
     block_c1s1w_info:
         const _c1s1w;
         const 5;
         const 18446744069414584350;
         const u1s4a_srtd;
 },
 _c1s1O() //  [R1]
         { []
         }
     {offset
       c1s1O: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1s2M; else goto c1s2L;
       c1s2M: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1s2L: // global
           I64[Hp - 24] = sat_s1jDV_info;
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_c1s2E_info;
           R5 = Hp - 24;
           R4 = P64[Sp + 32];
           R3 = P64[Sp + 16];
           R2 = GHC.Num.$fNumInteger_closure;
           P64[Sp + 32] = R1;
           Sp = Sp + 8;
           call GHC.Real.^_entry(R5, R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1s1O_info" {
     block_c1s1O_info:
         const _c1s1O;
         const 261;
         const 158913789982;
         const S1jKw_srt+1568;
 },
 _c1s2E() //  [R1]
         { []
         }
     {offset
       c1s2E: // global
           I64[Sp + 16] = block_c1s2Q_info;
           R3 = P64[Sp + 32];
           R2 = P64[Sp + 8];
           P64[Sp + 32] = R1;
           Sp = Sp + 16;
           call GHC.Real.even_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1s2E_info" {
     block_c1s2E_info:
         const _c1s2E;
         const 132;
         const 4294967326;
         const S1jKw_srt+1584;
 },
 _c1s2Q() //  [R1]
         { []
         }
     {offset
       c1s2Q: // global
           _s1jDU::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c1s32; else goto c1s3i;
       c1s32: // global
           I64[Sp] = block_c1s2V_info;
           R2 = _s1jDU::P64;
           call GHC.Integer.Type.negateInteger_entry(R2) args: 8, res: 8, upd: 8;
       c1s3i: // global
           I64[Sp] = block_c1s3b_info;
           R1 = _s1jDU::P64;
           if (R1 & 7 != 0) goto u1s40; else goto c1s3c;
       u1s40: // global
           call _c1s3b(R1) args: 0, res: 0, upd: 0;
       c1s3c: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1s2Q_info" {
     block_c1s2Q_info:
         const _c1s2Q;
         const 2;
         const 30;
 },
 _c1s2V() //  [R1]
         { []
         }
     {offset
       c1s2V: // global
           _s1jDR::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1s2Z_info;
           _s1jDX::P64 = R1;
           R1 = _s1jDR::P64;
           P64[Sp + 16] = _s1jDX::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u1s41; else goto c1s34;
       u1s41: // global
           call _c1s2Z(R1) args: 0, res: 0, upd: 0;
       c1s34: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1s2V_info" {
     block_c1s2V_info:
         const _c1s2V;
         const 130;
         const 30;
 },
 _c1s2Z() //  [R1]
         { []
         }
     {offset
       c1s2Z: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1s2Z_info" {
     block_c1s2Z_info:
         const _c1s2Z;
         const 1;
         const 30;
 },
 _c1s3b() //  [R1]
         { []
         }
     {offset
       c1s3b: // global
           _s1jDR::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1s3g_info;
           _s1jDZ::P64 = R1;
           R1 = _s1jDR::P64;
           P64[Sp + 16] = _s1jDZ::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u1s42; else goto c1s3k;
       u1s42: // global
           call _c1s3g(R1) args: 0, res: 0, upd: 0;
       c1s3k: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1s3b_info" {
     block_c1s3b_info:
         const _c1s3b;
         const 130;
         const 30;
 },
 _c1s3g() //  [R1]
         { []
         }
     {offset
       c1s3g: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1s3g_info" {
     block_c1s3g_info:
         const _c1s3g;
         const 1;
         const 30;
 },
 _c1s3L() //  [R1]
         { []
         }
     {offset
       c1s3L: // global
           _s1jDF::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_c1s3P_info;
           R5 = P64[Sp + 32];
           R4 = _s1jDF::P64;
           R3 = P64[Sp + 8];
           R2 = GHC.Num.$fNumInteger_closure;
           P64[Sp + 32] = R1;
           Sp = Sp + 24;
           call GHC.Real.^_entry(R5, R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1s3L_info" {
     block_c1s3L_info:
         const _c1s3L;
         const 132;
         const 141733920798;
         const S1jKw_srt+1568;
 },
 _c1s3P() //  [R1]
         { []
         }
     {offset
       c1s3P: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1s3P_info" {
     block_c1s3P_info:
         const _c1s3P;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:06.714418898 UTC

[section ""data" . GHC.Real.^^%^^_closure" {
     GHC.Real.^^%^^_closure:
         const GHC.Real.^^%^^_info;
         const 0;
 },
 GHC.Real.^^%^^_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1s6r: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1s6x; else goto c1s6y;
       c1s6x: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.^^%^^_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1s6y: // global
           I64[Sp - 24] = block_c1s6o_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u1s6D; else goto c1s6p;
       u1s6D: // global
           call _c1s6o(R1) args: 0, res: 0, upd: 0;
       c1s6p: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.^^%^^_info" {
     GHC.Real.^^%^^_info:
         const GHC.Real.^^%^^_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S1jKw_srt+1624;
 },
 _c1s6o() //  [R1]
         { []
         }
     {offset
       c1s6o: // global
           _s1jEa::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c1s6u_info;
           R5 = _s1jEa::P64;
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Real.$w^^%^^_entry(R5,
                                       R4,
                                       R3,
                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1s6o_info" {
     block_c1s6o_info:
         const _c1s6o;
         const 2;
         const 4294967326;
         const S1jKw_srt+1624;
 },
 _c1s6u() //  [R1, R2]
         { []
         }
     {offset
       c1s6u: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1s6C; else goto c1s6B;
       c1s6C: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c1s6B: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1s6u_info" {
     block_c1s6u_info:
         const _c1s6u;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:06.726519515 UTC

[section ""data" . GHC.Real.^^_closure" {
     GHC.Real.^^_closure:
         const GHC.Real.^^_info;
         const 0;
 },
 $dNum_s1jEm_entry() //  [R1]
         { []
         }
     {offset
       c1s73: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1s74; else goto c1s75;
       c1s74: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1s75: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dNum_s1jEm_info" {
     $dNum_s1jEm_info:
         const $dNum_s1jEm_entry;
         const 1;
         const 16;
 },
 sat_s1jEo_entry() //  [R1]
         { []
         }
     {offset
       c1s7a: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1s7b; else goto c1s7c;
       c1s7b: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1s7c: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Real.even1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jEo_info" {
     sat_s1jEo_info:
         const sat_s1jEo_entry;
         const 1;
         const 4294967312;
         const S1jKw_srt+1552;
 },
 sat_s1jEr_entry() //  [R1]
         { []
         }
     {offset
       c1s7t: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1s7u; else goto c1s7v;
       c1s7u: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1s7v: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Num.negate_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jEr_info" {
     sat_s1jEr_info:
         const sat_s1jEr_entry;
         const 2;
         const 18;
 },
 sat_s1jEq_entry() //  [R1]
         { []
         }
     {offset
       c1s7A: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1s7B; else goto c1s7C;
       c1s7B: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1s7C: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Fractional_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jEq_info" {
     sat_s1jEq_info:
         const sat_s1jEq_entry;
         const 1;
         const 16;
 },
 sat_s1jEs_entry() //  [R1]
         { []
         }
     {offset
       c1s7D: // global
           _s1jEs::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1s7E; else goto c1s7F;
       c1s7F: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c1s7H; else goto c1s7G;
       c1s7H: // global
           HpAlloc = 56;
           goto c1s7E;
       c1s7E: // global
           R1 = _s1jEs::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1s7G: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1jEs::P64;
           _s1jEh::P64 = P64[_s1jEs::P64 + 16];
           _s1jEi::P64 = P64[_s1jEs::P64 + 24];
           _s1jEj::P64 = P64[_s1jEs::P64 + 32];
           _s1jEk::P64 = P64[_s1jEs::P64 + 40];
           _s1jEm::P64 = P64[_s1jEs::P64 + 48];
           I64[Hp - 48] = sat_s1jEr_info;
           P64[Hp - 32] = _s1jEk::P64;
           P64[Hp - 24] = _s1jEm::P64;
           I64[Hp - 16] = sat_s1jEq_info;
           P64[Hp] = _s1jEh::P64;
           R5 = Hp - 48;
           R4 = _s1jEj::P64;
           R3 = _s1jEi::P64;
           R2 = Hp - 16;
           Sp = Sp - 16;
           call GHC.Real.^_entry(R5, R4, R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jEs_info" {
     sat_s1jEs_info:
         const sat_s1jEs_entry;
         const 5;
         const 4294967311;
         const S1jKw_srt+1568;
 },
 sat_s1jEt_entry() //  [R1]
         { []
         }
     {offset
       c1s7O: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1s7P; else goto c1s7Q;
       c1s7P: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1s7Q: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Fractional_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1jEt_info" {
     sat_s1jEt_info:
         const sat_s1jEt_entry;
         const 1;
         const 16;
 },
 GHC.Real.^^_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c1s7R: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c1s7S; else goto c1s7T;
       c1s7S: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.^^_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1s7T: // global
           I64[Sp - 40] = block_c1s6V_info;
           _s1jEh::P64 = R2;
           R2 = R3;
           P64[Sp - 32] = _s1jEh::P64;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.^^_info" {
     GHC.Real.^^_info:
         const GHC.Real.^^_entry;
         const 0;
         const 8817567858702;
         const 17179869208;
         const S1jKw_srt+1552;
 },
 _c1s6V() //  [R1]
         { []
         }
     {offset
       c1s6V: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c1s7W; else goto c1s7V;
       c1s7W: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1s7V: // global
           I64[Hp - 40] = $dNum_s1jEm_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = sat_s1jEo_info;
           _c1s6Z::P64 = Hp - 40;
           P64[Hp] = _c1s6Z::P64;
           I64[Sp - 16] = block_c1s7d_info;
           R2 = R1;
           P64[Sp - 8] = Hp - 16;
           P64[Sp] = _c1s6Z::P64;
           Sp = Sp - 16;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1s6V_info" {
     block_c1s6V_info:
         const _c1s6V;
         const 4;
         const 21474836510;
         const S1jKw_srt+1552;
 },
 _c1s7d() //  [R1]
         { []
         }
     {offset
       c1s7d: // global
           _c1s76::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1s7h_info;
           R2 = R1;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = P64[Sp + 48];
           P64[Sp] = _c1s76::P64;
           Sp = Sp - 16;
           call GHC.Classes.>=_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1s7d_info" {
     block_c1s7d_info:
         const _c1s7d;
         const 6;
         const 4294967326;
         const S1jKw_srt+1568;
 },
 _c1s7h() //  [R1]
         { []
         }
     {offset
       c1s7h: // global
           _s1jEh::P64 = P64[Sp + 16];
           _s1jEi::P64 = P64[Sp + 24];
           _s1jEj::P64 = P64[Sp + 32];
           _s1jEk::P64 = P64[Sp + 40];
           if (R1 & 7 == 1) goto c1s7Z; else goto c1s83;
       c1s7Z: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c1s82; else goto c1s81;
       c1s82: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1s81: // global
           I64[Hp - 48] = sat_s1jEs_info;
           P64[Hp - 32] = _s1jEh::P64;
           P64[Hp - 24] = _s1jEi::P64;
           P64[Hp - 16] = _s1jEj::P64;
           P64[Hp - 8] = _s1jEk::P64;
           P64[Hp] = P64[Sp + 8];
           R2 = _s1jEh::P64;
           I64[Sp + 32] = stg_ap_p_info;
           P64[Sp + 40] = Hp - 48;
           Sp = Sp + 32;
           call GHC.Real.recip_entry(R2) args: 24, res: 0, upd: 8;
       c1s83: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1s86; else goto c1s85;
       c1s86: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1s85: // global
           I64[Hp - 16] = sat_s1jEt_info;
           P64[Hp] = _s1jEh::P64;
           R5 = _s1jEk::P64;
           R4 = _s1jEj::P64;
           R3 = _s1jEi::P64;
           R2 = Hp - 16;
           Sp = Sp + 48;
           call GHC.Real.^_entry(R5, R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1s7h_info" {
     block_c1s7h_info:
         const _c1s7h;
         const 5;
         const 4294967326;
         const S1jKw_srt+1568;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:06.746821697 UTC

[section ""data" . GHC.Real.C:Fractional_closure" {
     GHC.Real.C:Fractional_closure:
         const GHC.Real.C:Fractional_info;
 },
 GHC.Real.C:Fractional_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c1s8W: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c1s90; else goto c1s8Z;
       c1s90: // global
           HpAlloc = 40;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.C:Fractional_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1s8Z: // global
           I64[Hp - 32] = GHC.Real.C:Fractional_con_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = R5;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.C:Fractional_info" {
     GHC.Real.C:Fractional_info:
         const GHC.Real.C:Fractional_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:06.75121296 UTC

[section ""data" . GHC.Real.C:Integral_closure" {
     GHC.Real.C:Integral_closure:
         const GHC.Real.C:Integral_info;
 },
 GHC.Real.C:Integral_slow() //  [R1]
         { []
         }
     {offset
       c1s97: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Real.C:Integral_entry(R6,
                                          R5,
                                          R4,
                                          R3,
                                          R2,
                                          R1) args: 40, res: 0, upd: 8;
     }
 },
 GHC.Real.C:Integral_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c1s9c: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c1s9g; else goto c1s9f;
       c1s9g: // global
           HpAlloc = 80;
           R1 = GHC.Real.C:Integral_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 80, res: 0, upd: 8;
       c1s9f: // global
           I64[Hp - 72] = GHC.Real.C:Integral_con_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R3;
           P64[Hp - 48] = R4;
           P64[Hp - 40] = R5;
           P64[Hp - 32] = R6;
           P64[Hp - 24] = P64[Sp];
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 24];
           R1 = Hp - 71;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.C:Integral_info" {
     GHC.Real.C:Integral_info:
         const GHC.Real.C:Integral_entry;
         const 0;
         const 14;
         const 38654705664;
         const 0;
         const 9;
         const GHC.Real.C:Integral_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:06.756270327 UTC

[section ""data" . GHC.Real.C:Real_closure" {
     GHC.Real.C:Real_closure:
         const GHC.Real.C:Real_info;
 },
 GHC.Real.C:Real_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1s9x: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1s9B; else goto c1s9A;
       c1s9B: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.C:Real_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1s9A: // global
           I64[Hp - 24] = GHC.Real.C:Real_con_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.C:Real_info" {
     GHC.Real.C:Real_info:
         const GHC.Real.C:Real_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:06.761395321 UTC

[section ""data" . GHC.Real.C:RealFrac_closure" {
     GHC.Real.C:RealFrac_closure:
         const GHC.Real.C:RealFrac_info;
 },
 GHC.Real.C:RealFrac_slow() //  [R1]
         { []
         }
     {offset
       c1s9I: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Real.C:RealFrac_entry(R6,
                                          R5,
                                          R4,
                                          R3,
                                          R2,
                                          R1) args: 24, res: 0, upd: 8;
     }
 },
 GHC.Real.C:RealFrac_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c1s9N: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c1s9R; else goto c1s9Q;
       c1s9R: // global
           HpAlloc = 64;
           R1 = GHC.Real.C:RealFrac_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       c1s9Q: // global
           I64[Hp - 56] = GHC.Real.C:RealFrac_con_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R5;
           P64[Hp - 16] = R6;
           P64[Hp - 8] = P64[Sp];
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 55;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.C:RealFrac_info" {
     GHC.Real.C:RealFrac_info:
         const GHC.Real.C:RealFrac_entry;
         const 0;
         const 14;
         const 30064771072;
         const 0;
         const 7;
         const GHC.Real.C:RealFrac_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:06.766407308 UTC

[section ""data" . GHC.Real.:%_closure" {
     GHC.Real.:%_closure:
         const GHC.Real.:%_info;
 },
 GHC.Real.:%_entry() //  [R2, R3]
         { []
         }
     {offset
       c1sa6: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1saa; else goto c1sa9;
       c1saa: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.:%_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1sa9: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.:%_info" {
     GHC.Real.:%_info:
         const GHC.Real.:%_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:06.769880518 UTC

[section ""cstring" . i1olZ_str" {
     i1olZ_str:
         I8[] [98,97,115,101,58,71,72,67,46,82,101,97,108,46,67,58,70,114,97,99,116,105,111,110,97,108]
 },
 GHC.Real.C:Fractional_con_entry() //  [R1]
         { []
         }
     {offset
       c1sag: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.C:Fractional_con_info" {
     GHC.Real.C:Fractional_con_info:
         const GHC.Real.C:Fractional_con_entry;
         const 4;
         const 1;
         const i1olZ_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:06.773125232 UTC

[section ""cstring" . i1om1_str" {
     i1om1_str:
         I8[] [98,97,115,101,58,71,72,67,46,82,101,97,108,46,67,58,73,110,116,101,103,114,97,108]
 },
 GHC.Real.C:Integral_con_entry() //  [R1]
         { []
         }
     {offset
       c1sam: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.C:Integral_con_info" {
     GHC.Real.C:Integral_con_info:
         const GHC.Real.C:Integral_con_entry;
         const 9;
         const 1;
         const i1om1_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:06.776270498 UTC

[section ""cstring" . i1om3_str" {
     i1om3_str:
         I8[] [98,97,115,101,58,71,72,67,46,82,101,97,108,46,67,58,82,101,97,108]
 },
 GHC.Real.C:Real_con_entry() //  [R1]
         { []
         }
     {offset
       c1sas: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.C:Real_con_info" {
     GHC.Real.C:Real_con_info:
         const GHC.Real.C:Real_con_entry;
         const 3;
         const 1;
         const i1om3_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:06.780406448 UTC

[section ""cstring" . i1om5_str" {
     i1om5_str:
         I8[] [98,97,115,101,58,71,72,67,46,82,101,97,108,46,67,58,82,101,97,108,70,114,97,99]
 },
 GHC.Real.C:RealFrac_con_entry() //  [R1]
         { []
         }
     {offset
       c1say: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.C:RealFrac_con_info" {
     GHC.Real.C:RealFrac_con_info:
         const GHC.Real.C:RealFrac_con_entry;
         const 7;
         const 1;
         const i1om5_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:06.784388242 UTC

[section ""cstring" . i1om7_str" {
     i1om7_str:
         I8[] [98,97,115,101,58,71,72,67,46,82,101,97,108,46,58,37]
 },
 GHC.Real.:%_con_entry() //  [R1]
         { []
         }
     {offset
       c1saE: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.:%_con_info" {
     GHC.Real.:%_con_info:
         const GHC.Real.:%_con_entry;
         const 2;
         const 4;
         const i1om7_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:06.788952292 UTC

[section ""relreadonly" . S1jKw_srt" {
     S1jKw_srt:
         const GHC.Integer.Type.timesInteger_closure;
         const GHC.Real.$fOrdRatio_$s$c<_closure;
         const GHC.Real.$fEnumRatio_$s$c<=_closure;
         const GHC.Real.$w$s$ccompare_closure;
         const GHC.Real.$fEnumRatio_$s$ccompare_closure;
         const GHC.Real.$fEnumRatio_$s$c>=_closure;
         const GHC.Real.$fOrdRatio_$s$c>_closure;
         const GHC.Real.$fOrdRatio_$s$cmin_closure;
         const GHC.Real.$fOrdRatio_$s$cmax_closure;
         const sat_s1j8H_closure;
         const GHC.Real.$fEnumRatio1_closure;
         const GHC.Real.$fFractionalRatio_$s$csignum_closure;
         const GHC.Real.$fFractionalRatio_$s$cfromInteger_closure;
         const GHC.Real.$fEnumRatio_$ctoRational_closure;
         const GHC.Real.even1_closure;
         const GHC.Real.$dmfloor_closure;
         const GHC.Real.$dmceiling_closure;
         const GHC.Real.$dmrecip_closure;
         const GHC.Real.$dmdivMod_closure;
         const GHC.Exception.divZeroException_closure;
         const GHC.Real.divZeroError_closure;
         const GHC.Real.$fIntegralInt_$cmod_closure;
         const GHC.Real.$fIntegralInt_$crem_closure;
         const GHC.Real.$fIntegralInteger_$cquot_closure;
         const GHC.Real.$fIntegralInteger_$crem_closure;
         const GHC.Integer.Type.divInteger_closure;
         const GHC.Real.$fIntegralInteger_$cdiv_closure;
         const GHC.Integer.Type.modInteger_closure;
         const GHC.Real.$fIntegralInteger_$cmod_closure;
         const GHC.Real.$fIntegralInteger_$cquotRem_closure;
         const GHC.Integer.Type.divModInteger_closure;
         const GHC.Real.$fIntegralInteger_$cdivMod_closure;
         const GHC.Real.$fIntegralWord_$cquot_closure;
         const GHC.Real.$fIntegralWord_$crem_closure;
         const GHC.Real.$fIntegralWord_$cquotRem_closure;
         const GHC.Real.$fIntegralWord_$cdivMod_closure;
         const GHC.Exception.ratioZeroDenomException_closure;
         const GHC.Real.ratioZeroDenominatorError_closure;
         const GHC.Real.$fFractionalRatio_$s$crecip_closure;
         const GHC.Exception.overflowException_closure;
         const GHC.Real.$fIntegralInt_$cdivMod_closure;
         const lvl_r1j38_closure;
         const GHC.Real.$fIntegralInt_$cquotRem_closure;
         const GHC.Real.overflowError_closure;
         const GHC.Real.$fIntegralInt_$cdiv_closure;
         const GHC.Real.$w$cdiv_closure;
         const GHC.Real.$fIntegralInt_$cquot_closure;
         const GHC.Real.$wgcd'_closure;
         const lvl2_r1j3a_closure;
         const GHC.Real.$fEnumRatio_gcd'_closure;
         const GHC.Real.even1_closure;
         const GHC.Real.gcd_closure;
         const GHC.Real.$w$sreduce_closure;
         const GHC.Real.divZeroError_closure;
         const GHC.Real.reduce_$sreduce_closure;
         const GHC.Real.$fRealWord_$ctoRational_closure;
         const GHC.Real.$fFractionalRatio_$s$c*_closure;
         const GHC.Integer.Type.minusInteger_closure;
         const GHC.Real.$w$s$c-_closure;
         const GHC.Real.$fEnumRatio_$s$c-_closure;
         const GHC.Integer.Type.plusInteger_closure;
         const GHC.Real.$w$s$c+_closure;
         const GHC.Real.$fEnumRatio_$s$c+_closure;
         const GHC.Real.$w$s$cfromRational_closure;
         const GHC.Real.$fFractionalRatio_$s$cfromRational_closure;
         const GHC.Real.$w$s$c/_closure;
         const GHC.Real.$fFractionalRatio_$s$c/_closure;
         const GHC.Real.$w$snumericEnumFrom_closure;
         const GHC.Real.$fEnumRatio_$snumericEnumFrom_closure;
         const GHC.Real.$fEnumRatio1_closure;
         const GHC.Real.$wnumericEnumFrom_closure;
         const GHC.Real.numericEnumFrom_closure;
         const sat_s1jhS_closure;
         const GHC.Real.even2_closure;
         const GHC.Real.$fEnumRatio2_closure;
         const GHC.Real.$fEnumRatio_$s$c<=_closure;
         const GHC.Real.$w$snumericEnumFromTo_closure;
         const GHC.Real.$fEnumRatio_$snumericEnumFromTo_closure;
         const GHC.Real.numericEnumFromTo_closure;
         const GHC.Real.$w$snumericEnumFromThen_closure;
         const GHC.Real.$fEnumRatio_$snumericEnumFromThen_closure;
         const GHC.Real.$fEnumRatio_$s$c>=_closure;
         const GHC.Real.$w$snumericEnumFromThenTo_closure;
         const GHC.Real.$fEnumRatio_$snumericEnumFromThenTo_closure;
         const GHC.Real.numericEnumFromThenTo_closure;
         const GHC.Real.even1_closure;
         const GHC.Real.showSigned_closure;
         const GHC.Real.even_closure;
         const GHC.Real.odd_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const lvl3_r1j3b_closure;
         const GHC.Real.$dmround_closure;
         const GHC.Real.$fRealFracRatio1_closure;
         const GHC.Real.integralEnumFrom_closure;
         const GHC.Integer.Type.plusInteger_closure;
         const GHC.Real.integralEnumFromThen_closure;
         const GHC.Real.integralEnumFromTo_closure;
         const GHC.Real.integralEnumFromThenTo_closure;
         const GHC.Real.$w$csignum_closure;
         const GHC.Real.$fNumRatio_$csignum_closure;
         const GHC.Real.$w$cfromInteger_closure;
         const GHC.Real.$fNumRatio_$cfromInteger_closure;
         const GHC.Real.$w$crecip_closure;
         const GHC.Real.$fFractionalRatio_$crecip_closure;
         const GHC.Real.divZeroError_closure;
         const GHC.Real.$w$s$cproperFraction_closure;
         const GHC.Real.$fEnumRatio_$s$cproperFraction_closure;
         const GHC.Real.gcd_closure;
         const GHC.Real.$wreduce_closure;
         const GHC.Real.reduce_closure;
         const GHC.Real.%_$s%_closure;
         const GHC.Real.$w$s$cfromRational_closure;
         const GHC.Real.$w%_closure;
         const GHC.Real.%_closure;
         const GHC.Real.$w$c/_closure;
         const GHC.Real.$fFractionalRatio_$c/_closure;
         const GHC.Real.$w$cfromRational_closure;
         const GHC.Real.$fFractionalRatio_$cfromRational_closure;
         const GHC.Real.$w$c+_closure;
         const GHC.Real.$fNumRatio_$c+_closure;
         const GHC.Real.$w$c-_closure;
         const GHC.Real.$fNumRatio_$c-_closure;
         const GHC.Real.$w$c*_closure;
         const GHC.Real.$fNumRatio_$c*_closure;
         const GHC.Real.$fNumRatio_closure;
         const GHC.Real.$fEnumRatio_$s$csucc_closure;
         const GHC.Real.$fEnumRatio1_closure;
         const GHC.Real.$w$s$c+_closure;
         const GHC.Real.$fEnumRatio_$csucc_closure;
         const GHC.Real.$fEnumRatio_$s$cpred_closure;
         const GHC.Real.$fEnumRatio_$cpred_closure;
         const GHC.Real.$fFractionalRatio_closure;
         const GHC.Real.$wnumericEnumFrom_closure;
         const GHC.Real.$fEnumRatio_$cenumFrom_closure;
         const GHC.Real.$fEnumRatio_$cenumFromThen_closure;
         const GHC.Real.$fEnumRatio_$cenumFromTo_closure;
         const GHC.Real.$fEnumRatio_$cenumFromThenTo_closure;
         const GHC.Real.$fRealRatio_closure;
         const GHC.Real.$w$s$cceiling_closure;
         const GHC.Real.$fRealFracRatio_$s$cceiling_closure;
         const GHC.Real.$w$cceiling_closure;
         const GHC.Real.$fRealFracRatio_$cceiling_closure;
         const GHC.Real.$w$s$cfloor_closure;
         const GHC.Real.$fRealFracRatio_$s$cfloor_closure;
         const GHC.Real.$w$cfloor_closure;
         const GHC.Real.$fRealFracRatio_$cfloor_closure;
         const sat_s1jvS_closure;
         const GHC.Real.$w$s$cround_closure;
         const GHC.Real.$fRealFracRatio2_closure;
         const GHC.Real.$fRealFracRatio_$s$cround_closure;
         const GHC.Real.$w$cround_closure;
         const GHC.Real.$fRealFracRatio_$cround_closure;
         const GHC.Real.divZeroError_closure;
         const GHC.Real.even1_closure;
         const GHC.Real.$fRealFracRatio_$s$ctruncate_closure;
         const GHC.Real.$fRealFracRatio_closure;
         const g_r1j3N_closure;
         const GHC.Real.^_f_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const GHC.Real.^_$s^_closure;
         const GHC.Real.^1_closure;
         const GHC.Real.$w$s$cfromEnum_closure;
         const GHC.Real.$fEnumRatio_$s$cfromEnum_closure;
         const GHC.Show.$w$cshowsPrec4_closure;
         const GHC.Real.$w$s$cshowsPrec_closure;
         const GHC.Real.$fShowRatio_$s$cshowsPrec_closure;
         const GHC.Real.$fShowRatio1_closure;
         const GHC.Real.$w$s$cshow_closure;
         const GHC.Real.$fShowRatio_$s$cshow_closure;
         const GHC.Real.$fIntegralWord_closure;
         const GHC.Real.$w$slcm_closure;
         const GHC.Real.lcm_$slcm_closure;
         const GHC.Real.$w$slcm1_closure;
         const GHC.Real.lcm_$slcm1_closure;
         const GHC.Real.gcd_closure;
         const GHC.Real.lcm_closure;
         const GHC.Real.$w$ctoEnum_closure;
         const GHC.Real.$fEnumRatio1_closure;
         const GHC.Real.$fEnumRatio_$ctoEnum_closure;
         const GHC.Real.$fEnumRatio_$cenumFromThenTo_closure;
         const GHC.Real.$fEnumRatio_$cenumFromTo_closure;
         const GHC.Real.$fEnumRatio_$cenumFromThen_closure;
         const GHC.Real.$fEnumRatio_$cenumFrom_closure;
         const GHC.Real.$fEnumRatio_$cpred_closure;
         const GHC.Real.$fEnumRatio_$csucc_closure;
         const GHC.Real.$fEnumRatio_closure;
         const GHC.Real.^_$s^2_closure;
         const GHC.Real.^2_closure;
         const $wg1_r1j3Q_closure;
         const GHC.Integer.Type.timesInteger_closure;
         const GHC.Real.$wf_closure;
         const GHC.Real.^_f1_closure;
         const GHC.Real.^_$s^1_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const GHC.Real.even1_closure;
         const GHC.Real.even2_closure;
         const GHC.Real.^_closure;
         const lvl7_r1j3S_closure;
         const GHC.Real.even_closure;
         const GHC.Real.^%^_closure;
         const GHC.Real.$w^%^_closure;
         const GHC.Num.$fNumInteger_closure;
         const lvl6_r1j3R_closure;
         const GHC.Real.$w^^%^^_closure;
         const GHC.Real.^^%^^_closure;
         const GHC.Real.^^_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:15.998990944 UTC

[]


==================== Raw Cmm ====================
2018-03-16 15:56:16.03004676 UTC

[section ""data" . GHC.Real.$p1Fractional_closure" {
     GHC.Real.$p1Fractional_closure:
         const GHC.Real.$p1Fractional_info;
 },
 GHC.Real.$p1Fractional_entry() //  [R2]
         { []
         }
     {offset
       c1sLs: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1sLt; else goto c1sLu;
       c1sLt: // global
           R2 = R2;
           R1 = GHC.Real.$p1Fractional_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1sLu: // global
           I64[Sp - 8] = block_c1sLp_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1sLy; else goto c1sLq;
       u1sLy: // global
           call _c1sLp(R1) args: 0, res: 0, upd: 0;
       c1sLq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$p1Fractional_info" {
     GHC.Real.$p1Fractional_info:
         const GHC.Real.$p1Fractional_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1sLp() //  [R1]
         { []
         }
     {offset
       c1sLp: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1sLp_info" {
     block_c1sLp_info:
         const _c1sLp;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.0355898 UTC

[section ""data" . GHC.Real./_closure" {
     GHC.Real./_closure:
         const GHC.Real./_info;
 },
 GHC.Real./_entry() //  [R2]
         { []
         }
     {offset
       c1sLS: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1sLT; else goto c1sLU;
       c1sLT: // global
           R2 = R2;
           R1 = GHC.Real./_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1sLU: // global
           I64[Sp - 8] = block_c1sLP_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1sLY; else goto c1sLQ;
       u1sLY: // global
           call _c1sLP(R1) args: 0, res: 0, upd: 0;
       c1sLQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real./_info" {
     GHC.Real./_info:
         const GHC.Real./_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1sLP() //  [R1]
         { []
         }
     {offset
       c1sLP: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1sLP_info" {
     block_c1sLP_info:
         const _c1sLP;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.040781637 UTC

[section ""data" . GHC.Real.recip_closure" {
     GHC.Real.recip_closure:
         const GHC.Real.recip_info;
 },
 GHC.Real.recip_entry() //  [R2]
         { []
         }
     {offset
       c1sMg: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1sMh; else goto c1sMi;
       c1sMh: // global
           R2 = R2;
           R1 = GHC.Real.recip_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1sMi: // global
           I64[Sp - 8] = block_c1sMd_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1sMm; else goto c1sMe;
       u1sMm: // global
           call _c1sMd(R1) args: 0, res: 0, upd: 0;
       c1sMe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.recip_info" {
     GHC.Real.recip_info:
         const GHC.Real.recip_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1sMd() //  [R1]
         { []
         }
     {offset
       c1sMd: // global
           R1 = P64[R1 + 23];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1sMd_info" {
     block_c1sMd_info:
         const _c1sMd;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.046135787 UTC

[section ""data" . GHC.Real.fromRational_closure" {
     GHC.Real.fromRational_closure:
         const GHC.Real.fromRational_info;
 },
 GHC.Real.fromRational_entry() //  [R2]
         { []
         }
     {offset
       c1sME: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1sMF; else goto c1sMG;
       c1sMF: // global
           R2 = R2;
           R1 = GHC.Real.fromRational_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1sMG: // global
           I64[Sp - 8] = block_c1sMB_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1sMK; else goto c1sMC;
       u1sMK: // global
           call _c1sMB(R1) args: 0, res: 0, upd: 0;
       c1sMC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.fromRational_info" {
     GHC.Real.fromRational_info:
         const GHC.Real.fromRational_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1sMB() //  [R1]
         { []
         }
     {offset
       c1sMB: // global
           R1 = P64[R1 + 31];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1sMB_info" {
     block_c1sMB_info:
         const _c1sMB;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.051587738 UTC

[section ""data" . GHC.Real.$p1Integral_closure" {
     GHC.Real.$p1Integral_closure:
         const GHC.Real.$p1Integral_info;
 },
 GHC.Real.$p1Integral_entry() //  [R2]
         { []
         }
     {offset
       c1sN2: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1sN3; else goto c1sN4;
       c1sN3: // global
           R2 = R2;
           R1 = GHC.Real.$p1Integral_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1sN4: // global
           I64[Sp - 8] = block_c1sMZ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1sN8; else goto c1sN0;
       u1sN8: // global
           call _c1sMZ(R1) args: 0, res: 0, upd: 0;
       c1sN0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$p1Integral_info" {
     GHC.Real.$p1Integral_info:
         const GHC.Real.$p1Integral_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1sMZ() //  [R1]
         { []
         }
     {offset
       c1sMZ: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1sMZ_info" {
     block_c1sMZ_info:
         const _c1sMZ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.057957999 UTC

[section ""data" . GHC.Real.$p2Integral_closure" {
     GHC.Real.$p2Integral_closure:
         const GHC.Real.$p2Integral_info;
 },
 GHC.Real.$p2Integral_entry() //  [R2]
         { []
         }
     {offset
       c1sNs: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1sNt; else goto c1sNu;
       c1sNt: // global
           R2 = R2;
           R1 = GHC.Real.$p2Integral_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1sNu: // global
           I64[Sp - 8] = block_c1sNp_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1sNy; else goto c1sNq;
       u1sNy: // global
           call _c1sNp(R1) args: 0, res: 0, upd: 0;
       c1sNq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$p2Integral_info" {
     GHC.Real.$p2Integral_info:
         const GHC.Real.$p2Integral_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1sNp() //  [R1]
         { []
         }
     {offset
       c1sNp: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1sNp_info" {
     block_c1sNp_info:
         const _c1sNp;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.063366797 UTC

[section ""data" . GHC.Real.quot_closure" {
     GHC.Real.quot_closure:
         const GHC.Real.quot_info;
 },
 GHC.Real.quot_entry() //  [R2]
         { []
         }
     {offset
       c1sNS: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1sNT; else goto c1sNU;
       c1sNT: // global
           R2 = R2;
           R1 = GHC.Real.quot_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1sNU: // global
           I64[Sp - 8] = block_c1sNP_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1sNY; else goto c1sNQ;
       u1sNY: // global
           call _c1sNP(R1) args: 0, res: 0, upd: 0;
       c1sNQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.quot_info" {
     GHC.Real.quot_info:
         const GHC.Real.quot_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1sNP() //  [R1]
         { []
         }
     {offset
       c1sNP: // global
           R1 = P64[R1 + 23];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1sNP_info" {
     block_c1sNP_info:
         const _c1sNP;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.068863348 UTC

[section ""data" . GHC.Real.rem_closure" {
     GHC.Real.rem_closure:
         const GHC.Real.rem_info;
 },
 GHC.Real.rem_entry() //  [R2]
         { []
         }
     {offset
       c1sOg: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1sOh; else goto c1sOi;
       c1sOh: // global
           R2 = R2;
           R1 = GHC.Real.rem_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1sOi: // global
           I64[Sp - 8] = block_c1sOd_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1sOm; else goto c1sOe;
       u1sOm: // global
           call _c1sOd(R1) args: 0, res: 0, upd: 0;
       c1sOe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.rem_info" {
     GHC.Real.rem_info:
         const GHC.Real.rem_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1sOd() //  [R1]
         { []
         }
     {offset
       c1sOd: // global
           R1 = P64[R1 + 31];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1sOd_info" {
     block_c1sOd_info:
         const _c1sOd;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.074548597 UTC

[section ""data" . GHC.Real.div_closure" {
     GHC.Real.div_closure:
         const GHC.Real.div_info;
 },
 GHC.Real.div_entry() //  [R2]
         { []
         }
     {offset
       c1sOE: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1sOF; else goto c1sOG;
       c1sOF: // global
           R2 = R2;
           R1 = GHC.Real.div_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1sOG: // global
           I64[Sp - 8] = block_c1sOB_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1sOK; else goto c1sOC;
       u1sOK: // global
           call _c1sOB(R1) args: 0, res: 0, upd: 0;
       c1sOC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.div_info" {
     GHC.Real.div_info:
         const GHC.Real.div_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1sOB() //  [R1]
         { []
         }
     {offset
       c1sOB: // global
           R1 = P64[R1 + 39];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1sOB_info" {
     block_c1sOB_info:
         const _c1sOB;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.08001289 UTC

[section ""data" . GHC.Real.mod_closure" {
     GHC.Real.mod_closure:
         const GHC.Real.mod_info;
 },
 GHC.Real.mod_entry() //  [R2]
         { []
         }
     {offset
       c1sP2: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1sP3; else goto c1sP4;
       c1sP3: // global
           R2 = R2;
           R1 = GHC.Real.mod_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1sP4: // global
           I64[Sp - 8] = block_c1sOZ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1sP8; else goto c1sP0;
       u1sP8: // global
           call _c1sOZ(R1) args: 0, res: 0, upd: 0;
       c1sP0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.mod_info" {
     GHC.Real.mod_info:
         const GHC.Real.mod_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1sOZ() //  [R1]
         { []
         }
     {offset
       c1sOZ: // global
           R1 = P64[R1 + 47];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1sOZ_info" {
     block_c1sOZ_info:
         const _c1sOZ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.085477114 UTC

[section ""data" . GHC.Real.quotRem_closure" {
     GHC.Real.quotRem_closure:
         const GHC.Real.quotRem_info;
 },
 GHC.Real.quotRem_entry() //  [R2]
         { []
         }
     {offset
       c1sPq: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1sPr; else goto c1sPs;
       c1sPr: // global
           R2 = R2;
           R1 = GHC.Real.quotRem_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1sPs: // global
           I64[Sp - 8] = block_c1sPn_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1sPw; else goto c1sPo;
       u1sPw: // global
           call _c1sPn(R1) args: 0, res: 0, upd: 0;
       c1sPo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.quotRem_info" {
     GHC.Real.quotRem_info:
         const GHC.Real.quotRem_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1sPn() //  [R1]
         { []
         }
     {offset
       c1sPn: // global
           R1 = P64[R1 + 55];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1sPn_info" {
     block_c1sPn_info:
         const _c1sPn;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.091532105 UTC

[section ""data" . GHC.Real.divMod_closure" {
     GHC.Real.divMod_closure:
         const GHC.Real.divMod_info;
 },
 GHC.Real.divMod_entry() //  [R2]
         { []
         }
     {offset
       c1sPO: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1sPP; else goto c1sPQ;
       c1sPP: // global
           R2 = R2;
           R1 = GHC.Real.divMod_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1sPQ: // global
           I64[Sp - 8] = block_c1sPL_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1sPU; else goto c1sPM;
       u1sPU: // global
           call _c1sPL(R1) args: 0, res: 0, upd: 0;
       c1sPM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.divMod_info" {
     GHC.Real.divMod_info:
         const GHC.Real.divMod_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1sPL() //  [R1]
         { []
         }
     {offset
       c1sPL: // global
           R1 = P64[R1 + 63];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1sPL_info" {
     block_c1sPL_info:
         const _c1sPL;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.096814352 UTC

[section ""data" . GHC.Real.toInteger_closure" {
     GHC.Real.toInteger_closure:
         const GHC.Real.toInteger_info;
 },
 GHC.Real.toInteger_entry() //  [R2]
         { []
         }
     {offset
       c1sQc: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1sQd; else goto c1sQe;
       c1sQd: // global
           R2 = R2;
           R1 = GHC.Real.toInteger_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1sQe: // global
           I64[Sp - 8] = block_c1sQ9_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1sQi; else goto c1sQa;
       u1sQi: // global
           call _c1sQ9(R1) args: 0, res: 0, upd: 0;
       c1sQa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.toInteger_info" {
     GHC.Real.toInteger_info:
         const GHC.Real.toInteger_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1sQ9() //  [R1]
         { []
         }
     {offset
       c1sQ9: // global
           R1 = P64[R1 + 71];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1sQ9_info" {
     block_c1sQ9_info:
         const _c1sQ9;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.102637695 UTC

[section ""data" . GHC.Real.$p1Real_closure" {
     GHC.Real.$p1Real_closure:
         const GHC.Real.$p1Real_info;
 },
 GHC.Real.$p1Real_entry() //  [R2]
         { []
         }
     {offset
       c1sQA: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1sQB; else goto c1sQC;
       c1sQB: // global
           R2 = R2;
           R1 = GHC.Real.$p1Real_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1sQC: // global
           I64[Sp - 8] = block_c1sQx_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1sQG; else goto c1sQy;
       u1sQG: // global
           call _c1sQx(R1) args: 0, res: 0, upd: 0;
       c1sQy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$p1Real_info" {
     GHC.Real.$p1Real_info:
         const GHC.Real.$p1Real_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1sQx() //  [R1]
         { []
         }
     {offset
       c1sQx: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1sQx_info" {
     block_c1sQx_info:
         const _c1sQx;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.108028984 UTC

[section ""data" . GHC.Real.$p2Real_closure" {
     GHC.Real.$p2Real_closure:
         const GHC.Real.$p2Real_info;
 },
 GHC.Real.$p2Real_entry() //  [R2]
         { []
         }
     {offset
       c1sR0: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1sR1; else goto c1sR2;
       c1sR1: // global
           R2 = R2;
           R1 = GHC.Real.$p2Real_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1sR2: // global
           I64[Sp - 8] = block_c1sQX_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1sR6; else goto c1sQY;
       u1sR6: // global
           call _c1sQX(R1) args: 0, res: 0, upd: 0;
       c1sQY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$p2Real_info" {
     GHC.Real.$p2Real_info:
         const GHC.Real.$p2Real_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1sQX() //  [R1]
         { []
         }
     {offset
       c1sQX: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1sQX_info" {
     block_c1sQX_info:
         const _c1sQX;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.113944276 UTC

[section ""data" . GHC.Real.toRational_closure" {
     GHC.Real.toRational_closure:
         const GHC.Real.toRational_info;
 },
 GHC.Real.toRational_entry() //  [R2]
         { []
         }
     {offset
       c1sRq: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1sRr; else goto c1sRs;
       c1sRr: // global
           R2 = R2;
           R1 = GHC.Real.toRational_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1sRs: // global
           I64[Sp - 8] = block_c1sRn_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1sRw; else goto c1sRo;
       u1sRw: // global
           call _c1sRn(R1) args: 0, res: 0, upd: 0;
       c1sRo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.toRational_info" {
     GHC.Real.toRational_info:
         const GHC.Real.toRational_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1sRn() //  [R1]
         { []
         }
     {offset
       c1sRn: // global
           R1 = P64[R1 + 23];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1sRn_info" {
     block_c1sRn_info:
         const _c1sRn;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.119422971 UTC

[section ""data" . GHC.Real.$p1RealFrac_closure" {
     GHC.Real.$p1RealFrac_closure:
         const GHC.Real.$p1RealFrac_info;
 },
 GHC.Real.$p1RealFrac_entry() //  [R2]
         { []
         }
     {offset
       c1sRO: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1sRP; else goto c1sRQ;
       c1sRP: // global
           R2 = R2;
           R1 = GHC.Real.$p1RealFrac_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1sRQ: // global
           I64[Sp - 8] = block_c1sRL_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1sRU; else goto c1sRM;
       u1sRU: // global
           call _c1sRL(R1) args: 0, res: 0, upd: 0;
       c1sRM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$p1RealFrac_info" {
     GHC.Real.$p1RealFrac_info:
         const GHC.Real.$p1RealFrac_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1sRL() //  [R1]
         { []
         }
     {offset
       c1sRL: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1sRL_info" {
     block_c1sRL_info:
         const _c1sRL;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.125380557 UTC

[section ""data" . GHC.Real.$p2RealFrac_closure" {
     GHC.Real.$p2RealFrac_closure:
         const GHC.Real.$p2RealFrac_info;
 },
 GHC.Real.$p2RealFrac_entry() //  [R2]
         { []
         }
     {offset
       c1sSe: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1sSf; else goto c1sSg;
       c1sSf: // global
           R2 = R2;
           R1 = GHC.Real.$p2RealFrac_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1sSg: // global
           I64[Sp - 8] = block_c1sSb_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1sSk; else goto c1sSc;
       u1sSk: // global
           call _c1sSb(R1) args: 0, res: 0, upd: 0;
       c1sSc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$p2RealFrac_info" {
     GHC.Real.$p2RealFrac_info:
         const GHC.Real.$p2RealFrac_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1sSb() //  [R1]
         { []
         }
     {offset
       c1sSb: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1sSb_info" {
     block_c1sSb_info:
         const _c1sSb;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.130790198 UTC

[section ""data" . GHC.Real.properFraction_closure" {
     GHC.Real.properFraction_closure:
         const GHC.Real.properFraction_info;
 },
 GHC.Real.properFraction_entry() //  [R2]
         { []
         }
     {offset
       c1sSE: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1sSF; else goto c1sSG;
       c1sSF: // global
           R2 = R2;
           R1 = GHC.Real.properFraction_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1sSG: // global
           I64[Sp - 8] = block_c1sSB_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1sSK; else goto c1sSC;
       u1sSK: // global
           call _c1sSB(R1) args: 0, res: 0, upd: 0;
       c1sSC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.properFraction_info" {
     GHC.Real.properFraction_info:
         const GHC.Real.properFraction_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1sSB() //  [R1]
         { []
         }
     {offset
       c1sSB: // global
           R1 = P64[R1 + 23];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1sSB_info" {
     block_c1sSB_info:
         const _c1sSB;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.136468349 UTC

[section ""data" . GHC.Real.truncate_closure" {
     GHC.Real.truncate_closure:
         const GHC.Real.truncate_info;
 },
 GHC.Real.truncate_entry() //  [R2]
         { []
         }
     {offset
       c1sT2: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1sT3; else goto c1sT4;
       c1sT3: // global
           R2 = R2;
           R1 = GHC.Real.truncate_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1sT4: // global
           I64[Sp - 8] = block_c1sSZ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1sT8; else goto c1sT0;
       u1sT8: // global
           call _c1sSZ(R1) args: 0, res: 0, upd: 0;
       c1sT0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.truncate_info" {
     GHC.Real.truncate_info:
         const GHC.Real.truncate_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1sSZ() //  [R1]
         { []
         }
     {offset
       c1sSZ: // global
           R1 = P64[R1 + 31];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1sSZ_info" {
     block_c1sSZ_info:
         const _c1sSZ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.142033545 UTC

[section ""data" . GHC.Real.round_closure" {
     GHC.Real.round_closure:
         const GHC.Real.round_info;
 },
 GHC.Real.round_entry() //  [R2]
         { []
         }
     {offset
       c1sTq: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1sTr; else goto c1sTs;
       c1sTr: // global
           R2 = R2;
           R1 = GHC.Real.round_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1sTs: // global
           I64[Sp - 8] = block_c1sTn_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1sTw; else goto c1sTo;
       u1sTw: // global
           call _c1sTn(R1) args: 0, res: 0, upd: 0;
       c1sTo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.round_info" {
     GHC.Real.round_info:
         const GHC.Real.round_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1sTn() //  [R1]
         { []
         }
     {offset
       c1sTn: // global
           R1 = P64[R1 + 39];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1sTn_info" {
     block_c1sTn_info:
         const _c1sTn;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.147425276 UTC

[section ""data" . GHC.Real.ceiling_closure" {
     GHC.Real.ceiling_closure:
         const GHC.Real.ceiling_info;
 },
 GHC.Real.ceiling_entry() //  [R2]
         { []
         }
     {offset
       c1sTO: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1sTP; else goto c1sTQ;
       c1sTP: // global
           R2 = R2;
           R1 = GHC.Real.ceiling_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1sTQ: // global
           I64[Sp - 8] = block_c1sTL_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1sTU; else goto c1sTM;
       u1sTU: // global
           call _c1sTL(R1) args: 0, res: 0, upd: 0;
       c1sTM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.ceiling_info" {
     GHC.Real.ceiling_info:
         const GHC.Real.ceiling_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1sTL() //  [R1]
         { []
         }
     {offset
       c1sTL: // global
           R1 = P64[R1 + 47];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1sTL_info" {
     block_c1sTL_info:
         const _c1sTL;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.153992665 UTC

[section ""data" . GHC.Real.floor_closure" {
     GHC.Real.floor_closure:
         const GHC.Real.floor_info;
 },
 GHC.Real.floor_entry() //  [R2]
         { []
         }
     {offset
       c1sUc: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1sUd; else goto c1sUe;
       c1sUd: // global
           R2 = R2;
           R1 = GHC.Real.floor_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1sUe: // global
           I64[Sp - 8] = block_c1sU9_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1sUi; else goto c1sUa;
       u1sUi: // global
           call _c1sU9(R1) args: 0, res: 0, upd: 0;
       c1sUa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.floor_info" {
     GHC.Real.floor_info:
         const GHC.Real.floor_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1sU9() //  [R1]
         { []
         }
     {offset
       c1sU9: // global
           R1 = P64[R1 + 55];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1sU9_info" {
     block_c1sU9_info:
         const _c1sU9;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.15945878 UTC

[section ""data" . GHC.Real.$W:%_closure" {
     GHC.Real.$W:%_closure:
         const GHC.Real.$W:%_info;
 },
 GHC.Real.$W:%_entry() //  [R2, R3]
         { []
         }
     {offset
       c1sUC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1sUD; else goto c1sUE;
       c1sUD: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$W:%_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1sUE: // global
           I64[Sp - 16] = block_c1sUx_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$W:%_info" {
     GHC.Real.$W:%_info:
         const GHC.Real.$W:%_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1sUx() //  [R1]
         { []
         }
     {offset
       c1sUx: // global
           I64[Sp] = block_c1sUz_info;
           _s1se2::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s1se2::P64;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1sUx_info" {
     block_c1sUx_info:
         const _c1sUx;
         const 1;
         const 30;
 },
 _c1sUz() //  [R1]
         { []
         }
     {offset
       c1sUz: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1sUI; else goto c1sUH;
       c1sUI: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1sUH: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1sUz_info" {
     block_c1sUz_info:
         const _c1sUz;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.167509497 UTC

[section ""data" . GHC.Real.$fOrdRatio_$s$c<_closure" {
     GHC.Real.$fOrdRatio_$s$c<_closure:
         const GHC.Real.$fOrdRatio_$s$c<_info;
         const 0;
 },
 GHC.Real.$fOrdRatio_$s$c<_entry() //  [R2, R3]
         { []
         }
     {offset
       c1sV6: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1sVn; else goto c1sVo;
       c1sVn: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fOrdRatio_$s$c<_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1sVo: // global
           I64[Sp - 16] = block_c1sV3_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1sVy; else goto c1sV4;
       u1sVy: // global
           call _c1sV3(R1) args: 0, res: 0, upd: 0;
       c1sV4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fOrdRatio_$s$c<_info" {
     GHC.Real.$fOrdRatio_$s$c<_info:
         const GHC.Real.$fOrdRatio_$s$c<_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S1sVz_srt;
 },
 _c1sV3() //  [R1]
         { []
         }
     {offset
       c1sV3: // global
           I64[Sp - 8] = block_c1sV9_info;
           _s1se7::P64 = P64[R1 + 7];
           _s1se8::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s1se8::P64;
           P64[Sp + 8] = _s1se7::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1sVx; else goto c1sVa;
       u1sVx: // global
           call _c1sV9(R1) args: 0, res: 0, upd: 0;
       c1sVa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1sV3_info" {
     block_c1sV3_info:
         const _c1sV3;
         const 1;
         const 4294967326;
         const S1sVz_srt;
 },
 _c1sV9() //  [R1]
         { []
         }
     {offset
       c1sV9: // global
           I64[Sp] = block_c1sVe_info;
           R3 = P64[Sp + 8];
           R2 = P64[R1 + 7];
           P64[Sp + 8] = P64[R1 + 15];
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1sV9_info" {
     block_c1sV9_info:
         const _c1sV9;
         const 2;
         const 4294967326;
         const S1sVz_srt;
 },
 _c1sVe() //  [R1]
         { []
         }
     {offset
       c1sVe: // global
           _s1seb::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1sVi_info;
           R3 = _s1seb::P64;
           R2 = P64[Sp + 16];
           P64[Sp + 16] = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1sVe_info" {
     block_c1sVe_info:
         const _c1sVe;
         const 2;
         const 4294967326;
         const S1sVz_srt;
 },
 _c1sVi() //  [R1]
         { []
         }
     {offset
       c1sVi: // global
           _s1sed::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1sVm_info;
           R3 = _s1sed::P64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.ltInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1sVi_info" {
     block_c1sVi_info:
         const _c1sVi;
         const 1;
         const 30;
 },
 _c1sVm() //  [R1]
         { []
         }
     {offset
       c1sVm: // global
           R1 = I64[(R1 << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1sVm_info" {
     block_c1sVm_info:
         const _c1sVm;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.180484661 UTC

[section ""data" . GHC.Real.$fEnumRatio_$s$c<=_closure" {
     GHC.Real.$fEnumRatio_$s$c<=_closure:
         const GHC.Real.$fEnumRatio_$s$c<=_info;
         const 0;
 },
 GHC.Real.$fEnumRatio_$s$c<=_entry() //  [R2, R3]
         { []
         }
     {offset
       c1sWc: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1sWt; else goto c1sWu;
       c1sWt: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fEnumRatio_$s$c<=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1sWu: // global
           I64[Sp - 16] = block_c1sW9_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1sWE; else goto c1sWa;
       u1sWE: // global
           call _c1sW9(R1) args: 0, res: 0, upd: 0;
       c1sWa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fEnumRatio_$s$c<=_info" {
     GHC.Real.$fEnumRatio_$s$c<=_info:
         const GHC.Real.$fEnumRatio_$s$c<=_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const S1sVz_srt;
 },
 _c1sW9() //  [R1]
         { []
         }
     {offset
       c1sW9: // global
           I64[Sp - 8] = block_c1sWf_info;
           _s1sei::P64 = P64[R1 + 7];
           _s1sej::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s1sej::P64;
           P64[Sp + 8] = _s1sei::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1sWD; else goto c1sWg;
       u1sWD: // global
           call _c1sWf(R1) args: 0, res: 0, upd: 0;
       c1sWg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1sW9_info" {
     block_c1sW9_info:
         const _c1sW9;
         const 1;
         const 4294967326;
         const S1sVz_srt;
 },
 _c1sWf() //  [R1]
         { []
         }
     {offset
       c1sWf: // global
           I64[Sp] = block_c1sWk_info;
           R3 = P64[Sp + 8];
           R2 = P64[R1 + 7];
           P64[Sp + 8] = P64[R1 + 15];
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1sWf_info" {
     block_c1sWf_info:
         const _c1sWf;
         const 2;
         const 4294967326;
         const S1sVz_srt;
 },
 _c1sWk() //  [R1]
         { []
         }
     {offset
       c1sWk: // global
           _s1sem::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1sWo_info;
           R3 = _s1sem::P64;
           R2 = P64[Sp + 16];
           P64[Sp + 16] = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1sWk_info" {
     block_c1sWk_info:
         const _c1sWk;
         const 2;
         const 4294967326;
         const S1sVz_srt;
 },
 _c1sWo() //  [R1]
         { []
         }
     {offset
       c1sWo: // global
           _s1seo::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1sWs_info;
           R3 = _s1seo::P64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.leInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1sWo_info" {
     block_c1sWo_info:
         const _c1sWo;
         const 1;
         const 30;
 },
 _c1sWs() //  [R1]
         { []
         }
     {offset
       c1sWs: // global
           R1 = I64[(R1 << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1sWs_info" {
     block_c1sWs_info:
         const _c1sWs;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.194108232 UTC

[section ""data" . GHC.Real.$w$s$ccompare_closure" {
     GHC.Real.$w$s$ccompare_closure:
         const GHC.Real.$w$s$ccompare_info;
         const 0;
 },
 GHC.Real.$w$s$ccompare_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c1sXg: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1sXh; else goto c1sXi;
       c1sXh: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$w$s$ccompare_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1sXi: // global
           I64[Sp - 40] = block_c1sXe_info;
           _s1ser::P64 = R3;
           R3 = R4;
           _s1seq::P64 = R2;
           R2 = R2;
           P64[Sp - 32] = _s1seq::P64;
           P64[Sp - 24] = _s1ser::P64;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$w$s$ccompare_info" {
     GHC.Real.$w$s$ccompare_info:
         const GHC.Real.$w$s$ccompare_entry;
         const 0;
         const 38654705678;
         const 17179869208;
         const S1sVz_srt;
 },
 _c1sXe() //  [R1]
         { []
         }
     {offset
       c1sXe: // global
           if (R1 == 1) goto c1sXT; else goto u1sY4;
       c1sXT: // global
           I64[Sp] = block_c1sXS_info;
           R3 = P64[Sp + 32];
           R2 = P64[Sp + 16];
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
       u1sY4: // global
           Sp = Sp + 8;
           call _s1sev() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1sXe_info" {
     block_c1sXe_info:
         const _c1sXe;
         const 4;
         const 4294967326;
         const S1sVz_srt;
 },
 _c1sXS() //  [R1]
         { []
         }
     {offset
       c1sXS: // global
           if (R1 == 1) goto c1sY3; else goto u1sY5;
       c1sY3: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u1sY5: // global
           Sp = Sp + 8;
           call _s1sev() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1sXS_info" {
     block_c1sXS_info:
         const _c1sXS;
         const 4;
         const 4294967326;
         const S1sVz_srt;
 },
 _s1sev() //  []
         { []
         }
     {offset
       s1sev: // global
           I64[Sp - 8] = block_c1sXr_info;
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 16];
           Sp = Sp - 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c1sXr() //  [R1]
         { []
         }
     {offset
       c1sXr: // global
           I64[Sp + 24] = block_c1sXv_info;
           R3 = P64[Sp + 32];
           R2 = P64[Sp + 8];
           P64[Sp + 32] = R1;
           Sp = Sp + 24;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1sXr_info" {
     block_c1sXr_info:
         const _c1sXr;
         const 388;
         const 4294967326;
         const S1sVz_srt;
 },
 _c1sXv() //  [R1]
         { []
         }
     {offset
       c1sXv: // global
           _s1sex::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1sXB_info;
           R3 = _s1sex::P64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.leInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1sXv_info" {
     block_c1sXv_info:
         const _c1sXv;
         const 1;
         const 30;
 },
 _c1sXB() //  [R1]
         { []
         }
     {offset
       c1sXB: // global
           if (R1 == 1) goto c1sXM; else goto c1sXI;
       c1sXM: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1sXI: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1sXB_info" {
     block_c1sXB_info:
         const _c1sXB;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.207312635 UTC

[section ""data" . GHC.Real.$fEnumRatio_$s$ccompare_closure" {
     GHC.Real.$fEnumRatio_$s$ccompare_closure:
         const GHC.Real.$fEnumRatio_$s$ccompare_info;
         const 0;
 },
 GHC.Real.$fEnumRatio_$s$ccompare_entry() //  [R2, R3]
         { []
         }
     {offset
       c1sYM: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1sYQ; else goto c1sYR;
       c1sYQ: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fEnumRatio_$s$ccompare_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1sYR: // global
           I64[Sp - 16] = block_c1sYJ_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1sYZ; else goto c1sYK;
       u1sYZ: // global
           call _c1sYJ(R1) args: 0, res: 0, upd: 0;
       c1sYK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fEnumRatio_$s$ccompare_info" {
     GHC.Real.$fEnumRatio_$s$ccompare_info:
         const GHC.Real.$fEnumRatio_$s$ccompare_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S1sVz_srt+24;
 },
 _c1sYJ() //  [R1]
         { []
         }
     {offset
       c1sYJ: // global
           I64[Sp - 8] = block_c1sYP_info;
           _s1seE::P64 = P64[R1 + 7];
           _s1seF::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s1seF::P64;
           P64[Sp + 8] = _s1seE::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1sYY; else goto c1sYT;
       u1sYY: // global
           call _c1sYP(R1) args: 0, res: 0, upd: 0;
       c1sYT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1sYJ_info" {
     block_c1sYJ_info:
         const _c1sYJ;
         const 1;
         const 4294967326;
         const S1sVz_srt+24;
 },
 _c1sYP() //  [R1]
         { []
         }
     {offset
       c1sYP: // global
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call GHC.Real.$w$s$ccompare_entry(R5,
                                             R4,
                                             R3,
                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1sYP_info" {
     block_c1sYP_info:
         const _c1sYP;
         const 2;
         const 4294967326;
         const S1sVz_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.215581007 UTC

[section ""data" . GHC.Real.$fEnumRatio_$s$c>=_closure" {
     GHC.Real.$fEnumRatio_$s$c>=_closure:
         const GHC.Real.$fEnumRatio_$s$c>=_info;
         const 0;
 },
 GHC.Real.$fEnumRatio_$s$c>=_entry() //  [R2, R3]
         { []
         }
     {offset
       c1sZm: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1sZq; else goto c1sZr;
       c1sZq: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fEnumRatio_$s$c>=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1sZr: // global
           I64[Sp - 16] = block_c1sZj_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1sZL; else goto c1sZk;
       u1sZL: // global
           call _c1sZj(R1) args: 0, res: 0, upd: 0;
       c1sZk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fEnumRatio_$s$c>=_info" {
     GHC.Real.$fEnumRatio_$s$c>=_info:
         const GHC.Real.$fEnumRatio_$s$c>=_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const S1sVz_srt+24;
 },
 _c1sZj() //  [R1]
         { []
         }
     {offset
       c1sZj: // global
           I64[Sp - 8] = block_c1sZp_info;
           _s1seM::P64 = P64[R1 + 7];
           _s1seN::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s1seN::P64;
           P64[Sp + 8] = _s1seM::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1sZK; else goto c1sZt;
       u1sZK: // global
           call _c1sZp(R1) args: 0, res: 0, upd: 0;
       c1sZt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1sZj_info" {
     block_c1sZj_info:
         const _c1sZj;
         const 1;
         const 4294967326;
         const S1sVz_srt+24;
 },
 _c1sZp() //  [R1]
         { []
         }
     {offset
       c1sZp: // global
           _s1seM::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c1sZx_info;
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = P64[Sp + 8];
           R2 = _s1seM::P64;
           Sp = Sp + 16;
           call GHC.Real.$w$s$ccompare_entry(R5,
                                             R4,
                                             R3,
                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1sZp_info" {
     block_c1sZp_info:
         const _c1sZp;
         const 2;
         const 4294967326;
         const S1sVz_srt+24;
 },
 _c1sZx() //  [R1]
         { []
         }
     {offset
       c1sZx: // global
           if (R1 & 7 == 1) goto c1sZI; else goto c1sZE;
       c1sZI: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1sZE: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1sZx_info" {
     block_c1sZx_info:
         const _c1sZx;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.226137988 UTC

[section ""data" . GHC.Real.$fOrdRatio_$s$c>_closure" {
     GHC.Real.$fOrdRatio_$s$c>_closure:
         const GHC.Real.$fOrdRatio_$s$c>_info;
         const 0;
 },
 GHC.Real.$fOrdRatio_$s$c>_entry() //  [R2, R3]
         { []
         }
     {offset
       c1t0i: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1t0m; else goto c1t0n;
       c1t0m: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fOrdRatio_$s$c>_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1t0n: // global
           I64[Sp - 16] = block_c1t0f_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1t0H; else goto c1t0g;
       u1t0H: // global
           call _c1t0f(R1) args: 0, res: 0, upd: 0;
       c1t0g: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fOrdRatio_$s$c>_info" {
     GHC.Real.$fOrdRatio_$s$c>_info:
         const GHC.Real.$fOrdRatio_$s$c>_entry;
         const 0;
         const 38654705678;
         const 8589934607;
         const S1sVz_srt+24;
 },
 _c1t0f() //  [R1]
         { []
         }
     {offset
       c1t0f: // global
           I64[Sp - 8] = block_c1t0l_info;
           _s1seV::P64 = P64[R1 + 7];
           _s1seW::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s1seW::P64;
           P64[Sp + 8] = _s1seV::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1t0G; else goto c1t0p;
       u1t0G: // global
           call _c1t0l(R1) args: 0, res: 0, upd: 0;
       c1t0p: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1t0f_info" {
     block_c1t0f_info:
         const _c1t0f;
         const 1;
         const 4294967326;
         const S1sVz_srt+24;
 },
 _c1t0l() //  [R1]
         { []
         }
     {offset
       c1t0l: // global
           _s1seV::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c1t0t_info;
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = P64[Sp + 8];
           R2 = _s1seV::P64;
           Sp = Sp + 16;
           call GHC.Real.$w$s$ccompare_entry(R5,
                                             R4,
                                             R3,
                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1t0l_info" {
     block_c1t0l_info:
         const _c1t0l;
         const 2;
         const 4294967326;
         const S1sVz_srt+24;
 },
 _c1t0t() //  [R1]
         { []
         }
     {offset
       c1t0t: // global
           if (R1 & 7 == 3) goto c1t0E; else goto c1t0A;
       c1t0E: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1t0A: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1t0t_info" {
     block_c1t0t_info:
         const _c1t0t;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.2361235 UTC

[section ""data" . GHC.Real.$fOrdRatio_$s$cmin_closure" {
     GHC.Real.$fOrdRatio_$s$cmin_closure:
         const GHC.Real.$fOrdRatio_$s$cmin_info;
         const 0;
 },
 GHC.Real.$fOrdRatio_$s$cmin_entry() //  [R2, R3]
         { []
         }
     {offset
       c1t1e: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1t1r; else goto c1t1s;
       c1t1r: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fOrdRatio_$s$cmin_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1t1s: // global
           I64[Sp - 16] = block_c1t1b_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1t1M; else goto c1t1c;
       u1t1M: // global
           call _c1t1b(R1) args: 0, res: 0, upd: 0;
       c1t1c: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fOrdRatio_$s$cmin_info" {
     GHC.Real.$fOrdRatio_$s$cmin_info:
         const GHC.Real.$fOrdRatio_$s$cmin_entry;
         const 0;
         const 554050781198;
         const 8589934607;
         const S1sVz_srt;
 },
 _c1t1b() //  [R1]
         { []
         }
     {offset
       c1t1b: // global
           I64[Sp - 16] = block_c1t1h_info;
           _s1sf3::P64 = R1;
           _s1sf4::P64 = P64[R1 + 7];
           _s1sf5::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp - 8] = _s1sf5::P64;
           P64[Sp] = _s1sf4::P64;
           P64[Sp + 8] = _s1sf3::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1t1L; else goto c1t1i;
       u1t1L: // global
           call _c1t1h(R1) args: 0, res: 0, upd: 0;
       c1t1i: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1t1b_info" {
     block_c1t1b_info:
         const _c1t1b;
         const 1;
         const 4294967326;
         const S1sVz_srt;
 },
 _c1t1h() //  [R1]
         { []
         }
     {offset
       c1t1h: // global
           I64[Sp - 8] = block_c1t1m_info;
           R3 = P64[Sp + 8];
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           P64[Sp + 8] = R1;
           Sp = Sp - 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1t1h_info" {
     block_c1t1h_info:
         const _c1t1h;
         const 3;
         const 4294967326;
         const S1sVz_srt;
 },
 _c1t1m() //  [R1]
         { []
         }
     {offset
       c1t1m: // global
           _s1sf8::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1t1q_info;
           R3 = _s1sf8::P64;
           R2 = P64[Sp + 24];
           P64[Sp + 24] = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1t1m_info" {
     block_c1t1m_info:
         const _c1t1m;
         const 4;
         const 4294967326;
         const S1sVz_srt;
 },
 _c1t1q() //  [R1]
         { []
         }
     {offset
       c1t1q: // global
           I64[Sp] = block_c1t1z_info;
           R3 = P64[Sp + 16];
           R2 = R1;
           call GHC.Integer.Type.leInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1t1q_info" {
     block_c1t1q_info:
         const _c1t1q;
         const 3;
         const 30;
 },
 _c1t1z() //  [R1]
         { []
         }
     {offset
       c1t1z: // global
           if (R1 == 1) goto c1t1K; else goto c1t1G;
       c1t1K: // global
           R1 = P64[Sp + 24] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c1t1G: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1t1z_info" {
     block_c1t1z_info:
         const _c1t1z;
         const 131;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.250033164 UTC

[section ""data" . GHC.Real.$fOrdRatio_$s$cmax_closure" {
     GHC.Real.$fOrdRatio_$s$cmax_closure:
         const GHC.Real.$fOrdRatio_$s$cmax_info;
         const 0;
 },
 GHC.Real.$fOrdRatio_$s$cmax_entry() //  [R2, R3]
         { []
         }
     {offset
       c1t2q: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1t2D; else goto c1t2E;
       c1t2D: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fOrdRatio_$s$cmax_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1t2E: // global
           I64[Sp - 16] = block_c1t2n_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1t2Y; else goto c1t2o;
       u1t2Y: // global
           call _c1t2n(R1) args: 0, res: 0, upd: 0;
       c1t2o: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fOrdRatio_$s$cmax_info" {
     GHC.Real.$fOrdRatio_$s$cmax_info:
         const GHC.Real.$fOrdRatio_$s$cmax_entry;
         const 0;
         const 1103806595086;
         const 8589934607;
         const S1sVz_srt;
 },
 _c1t2n() //  [R1]
         { []
         }
     {offset
       c1t2n: // global
           I64[Sp - 16] = block_c1t2t_info;
           _s1sfe::P64 = R1;
           _s1sff::P64 = P64[R1 + 7];
           _s1sfg::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp - 8] = _s1sfg::P64;
           P64[Sp] = _s1sff::P64;
           P64[Sp + 8] = _s1sfe::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1t2X; else goto c1t2u;
       u1t2X: // global
           call _c1t2t(R1) args: 0, res: 0, upd: 0;
       c1t2u: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1t2n_info" {
     block_c1t2n_info:
         const _c1t2n;
         const 1;
         const 4294967326;
         const S1sVz_srt;
 },
 _c1t2t() //  [R1]
         { []
         }
     {offset
       c1t2t: // global
           I64[Sp - 8] = block_c1t2y_info;
           R3 = P64[Sp + 8];
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           P64[Sp + 8] = R1;
           Sp = Sp - 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1t2t_info" {
     block_c1t2t_info:
         const _c1t2t;
         const 3;
         const 4294967326;
         const S1sVz_srt;
 },
 _c1t2y() //  [R1]
         { []
         }
     {offset
       c1t2y: // global
           _s1sfj::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1t2C_info;
           R3 = _s1sfj::P64;
           R2 = P64[Sp + 24];
           P64[Sp + 24] = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1t2y_info" {
     block_c1t2y_info:
         const _c1t2y;
         const 4;
         const 4294967326;
         const S1sVz_srt;
 },
 _c1t2C() //  [R1]
         { []
         }
     {offset
       c1t2C: // global
           I64[Sp] = block_c1t2L_info;
           R3 = P64[Sp + 16];
           R2 = R1;
           call GHC.Integer.Type.leInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1t2C_info" {
     block_c1t2C_info:
         const _c1t2C;
         const 3;
         const 30;
 },
 _c1t2L() //  [R1]
         { []
         }
     {offset
       c1t2L: // global
           if (R1 == 1) goto c1t2W; else goto c1t2S;
       c1t2W: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c1t2S: // global
           R1 = P64[Sp + 24] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1t2L_info" {
     block_c1t2L_info:
         const _c1t2L;
         const 131;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.261943098 UTC

[section ""data" . GHC.Real.$fFractionalRatio_$s$cnegate_closure" {
     GHC.Real.$fFractionalRatio_$s$cnegate_closure:
         const GHC.Real.$fFractionalRatio_$s$cnegate_info;
 },
 GHC.Real.$fFractionalRatio_$s$cnegate_entry() //  [R2]
         { []
         }
     {offset
       c1t3C: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1t3K; else goto c1t3L;
       c1t3K: // global
           R2 = R2;
           R1 = GHC.Real.$fFractionalRatio_$s$cnegate_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1t3L: // global
           I64[Sp - 8] = block_c1t3z_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1t3Q; else goto c1t3A;
       u1t3Q: // global
           call _c1t3z(R1) args: 0, res: 0, upd: 0;
       c1t3A: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fFractionalRatio_$s$cnegate_info" {
     GHC.Real.$fFractionalRatio_$s$cnegate_info:
         const GHC.Real.$fFractionalRatio_$s$cnegate_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1t3z() //  [R1]
         { []
         }
     {offset
       c1t3z: // global
           I64[Sp - 8] = block_c1t3F_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Integer.Type.negateInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1t3z_info" {
     block_c1t3z_info:
         const _c1t3z;
         const 0;
         const 30;
 },
 _c1t3F() //  [R1]
         { []
         }
     {offset
       c1t3F: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1t3P; else goto c1t3O;
       c1t3P: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1t3O: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1t3F_info" {
     block_c1t3F_info:
         const _c1t3F;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.26962976 UTC

[section ""data" . GHC.Real.$fFractionalRatio_$s$cabs_closure" {
     GHC.Real.$fFractionalRatio_$s$cabs_closure:
         const GHC.Real.$fFractionalRatio_$s$cabs_info;
 },
 GHC.Real.$fFractionalRatio_$s$cabs_entry() //  [R2]
         { []
         }
     {offset
       c1t4g: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1t4o; else goto c1t4p;
       c1t4o: // global
           R2 = R2;
           R1 = GHC.Real.$fFractionalRatio_$s$cabs_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1t4p: // global
           I64[Sp - 8] = block_c1t4d_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1t4u; else goto c1t4e;
       u1t4u: // global
           call _c1t4d(R1) args: 0, res: 0, upd: 0;
       c1t4e: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fFractionalRatio_$s$cabs_info" {
     GHC.Real.$fFractionalRatio_$s$cabs_info:
         const GHC.Real.$fFractionalRatio_$s$cabs_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1t4d() //  [R1]
         { []
         }
     {offset
       c1t4d: // global
           I64[Sp - 8] = block_c1t4j_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Integer.Type.absInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1t4d_info" {
     block_c1t4d_info:
         const _c1t4d;
         const 0;
         const 30;
 },
 _c1t4j() //  [R1]
         { []
         }
     {offset
       c1t4j: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1t4t; else goto c1t4s;
       c1t4t: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1t4s: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1t4j_info" {
     block_c1t4j_info:
         const _c1t4j;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.276068827 UTC

[section ""data" . sat_s1sfx_closure" {
     sat_s1sfx_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.277863989 UTC

[section ""data" . sat_s1sfy_closure" {
     sat_s1sfy_closure:
         const :_con_info;
         const sat_s1sfx_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.280283295 UTC

[section ""data" . GHC.Real.$fEnumRatio1_closure" {
     GHC.Real.$fEnumRatio1_closure:
         const GHC.Real.$fEnumRatio1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Real.$fEnumRatio1_entry() //  [R1]
         { []
         }
     {offset
       c1t4V: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1t4W; else goto c1t4X;
       c1t4W: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1t4X: // global
           (_c1t4S::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c1t4S::I64 == 0) goto c1t4U; else goto c1t4T;
       c1t4U: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c1t4T: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c1t4S::I64;
           R3 = sat_s1sfy_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Real.$fEnumRatio1_info" {
     GHC.Real.$fEnumRatio1_info:
         const GHC.Real.$fEnumRatio1_entry;
         const 0;
         const 4294967317;
         const S1sVz_srt+72;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.285732808 UTC

[section ""data" . GHC.Real.$fFractionalRatio_$s$csignum_closure" {
     GHC.Real.$fFractionalRatio_$s$csignum_closure:
         const GHC.Real.$fFractionalRatio_$s$csignum_info;
         const 0;
 },
 GHC.Real.$fFractionalRatio_$s$csignum_entry() //  [R2]
         { []
         }
     {offset
       c1t5e: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1t5m; else goto c1t5n;
       c1t5m: // global
           R2 = R2;
           R1 = GHC.Real.$fFractionalRatio_$s$csignum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1t5n: // global
           I64[Sp - 8] = block_c1t5b_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1t5s; else goto c1t5c;
       u1t5s: // global
           call _c1t5b(R1) args: 0, res: 0, upd: 0;
       c1t5c: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fFractionalRatio_$s$csignum_info" {
     GHC.Real.$fFractionalRatio_$s$csignum_info:
         const GHC.Real.$fFractionalRatio_$s$csignum_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S1sVz_srt+80;
 },
 _c1t5b() //  [R1]
         { []
         }
     {offset
       c1t5b: // global
           I64[Sp] = block_c1t5h_info;
           R2 = P64[R1 + 7];
           call GHC.Integer.Type.signumInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1t5b_info" {
     block_c1t5b_info:
         const _c1t5b;
         const 0;
         const 4294967326;
         const S1sVz_srt+80;
 },
 _c1t5h() //  [R1]
         { []
         }
     {offset
       c1t5h: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1t5r; else goto c1t5q;
       c1t5r: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1t5q: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = GHC.Real.$fEnumRatio1_closure;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1t5h_info" {
     block_c1t5h_info:
         const _c1t5h;
         const 0;
         const 4294967326;
         const S1sVz_srt+80;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.292834692 UTC

[section ""data" . GHC.Real.$fFractionalRatio_$s$cfromInteger_closure" {
     GHC.Real.$fFractionalRatio_$s$cfromInteger_closure:
         const GHC.Real.$fFractionalRatio_$s$cfromInteger_info;
         const 0;
 },
 GHC.Real.$fFractionalRatio_$s$cfromInteger_entry() //  [R2]
         { []
         }
     {offset
       c1t5R: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1t5V; else goto c1t5W;
       c1t5V: // global
           R2 = R2;
           R1 = GHC.Real.$fFractionalRatio_$s$cfromInteger_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1t5W: // global
           I64[Sp - 8] = block_c1t5O_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1t60; else goto c1t5P;
       u1t60: // global
           call _c1t5O(R1) args: 0, res: 0, upd: 0;
       c1t5P: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fFractionalRatio_$s$cfromInteger_info" {
     GHC.Real.$fFractionalRatio_$s$cfromInteger_info:
         const GHC.Real.$fFractionalRatio_$s$cfromInteger_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const S1sVz_srt+80;
 },
 _c1t5O() //  [R1]
         { []
         }
     {offset
       c1t5O: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1t5Z; else goto c1t5Y;
       c1t5Z: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1t5Y: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = GHC.Real.$fEnumRatio1_closure;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1t5O_info" {
     block_c1t5O_info:
         const _c1t5O;
         const 0;
         const 4294967326;
         const S1sVz_srt+80;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.298505946 UTC

[section ""data" . GHC.Real.$fRealInteger_closure" {
     GHC.Real.$fRealInteger_closure:
         const GHC.Real.C:Real_con_info;
         const GHC.Num.$fNumInteger_closure;
         const GHC.Integer.Type.$fOrdInteger_closure;
         const GHC.Real.$fFractionalRatio_$s$cfromInteger_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.300937207 UTC

[section ""data" . GHC.Real.$fIntegralInt_$ctoInteger_closure" {
     GHC.Real.$fIntegralInt_$ctoInteger_closure:
         const GHC.Real.$fIntegralInt_$ctoInteger_info;
 },
 GHC.Real.$fIntegralInt_$ctoInteger_entry() //  [R2]
         { []
         }
     {offset
       c1t6m: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1t6n; else goto c1t6o;
       c1t6n: // global
           R2 = R2;
           R1 = GHC.Real.$fIntegralInt_$ctoInteger_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1t6o: // global
           I64[Sp - 8] = block_c1t6j_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1t6s; else goto c1t6k;
       u1t6s: // global
           call _c1t6j(R1) args: 0, res: 0, upd: 0;
       c1t6k: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fIntegralInt_$ctoInteger_info" {
     GHC.Real.$fIntegralInt_$ctoInteger_info:
         const GHC.Real.$fIntegralInt_$ctoInteger_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1t6j() //  [R1]
         { []
         }
     {offset
       c1t6j: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1t6j_info" {
     block_c1t6j_info:
         const _c1t6j;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.306823933 UTC

[section ""data" . GHC.Real.$fEnumRatio_$ctoRational_closure" {
     GHC.Real.$fEnumRatio_$ctoRational_closure:
         const GHC.Real.$fEnumRatio_$ctoRational_info;
         const 0;
 },
 GHC.Real.$fEnumRatio_$ctoRational_entry() //  [R2]
         { []
         }
     {offset
       c1t6K: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1t6S; else goto c1t6T;
       c1t6S: // global
           R2 = R2;
           R1 = GHC.Real.$fEnumRatio_$ctoRational_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1t6T: // global
           I64[Sp - 8] = block_c1t6H_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1t6Y; else goto c1t6I;
       u1t6Y: // global
           call _c1t6H(R1) args: 0, res: 0, upd: 0;
       c1t6I: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fEnumRatio_$ctoRational_info" {
     GHC.Real.$fEnumRatio_$ctoRational_info:
         const GHC.Real.$fEnumRatio_$ctoRational_entry;
         const 0;
         const 38654705678;
         const 4294967301;
         const S1sVz_srt+80;
 },
 _c1t6H() //  [R1]
         { []
         }
     {offset
       c1t6H: // global
           I64[Sp] = block_c1t6N_info;
           R2 = I64[R1 + 7];
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1t6H_info" {
     block_c1t6H_info:
         const _c1t6H;
         const 0;
         const 4294967326;
         const S1sVz_srt+80;
 },
 _c1t6N() //  [R1]
         { []
         }
     {offset
       c1t6N: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1t6X; else goto c1t6W;
       c1t6X: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1t6W: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = GHC.Real.$fEnumRatio1_closure;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1t6N_info" {
     block_c1t6N_info:
         const _c1t6N;
         const 0;
         const 4294967326;
         const S1sVz_srt+80;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.313952602 UTC

[section ""data" . GHC.Real.$fRealInt_closure" {
     GHC.Real.$fRealInt_closure:
         const GHC.Real.C:Real_con_info;
         const GHC.Num.$fNumInt_closure;
         const GHC.Classes.$fOrdInt_closure;
         const GHC.Real.$fEnumRatio_$ctoRational_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.316434713 UTC

[section ""data" . GHC.Real.$fIntegralWord_$ctoInteger_closure" {
     GHC.Real.$fIntegralWord_$ctoInteger_closure:
         const GHC.Real.$fIntegralWord_$ctoInteger_info;
 },
 GHC.Real.$fIntegralWord_$ctoInteger_entry() //  [R2]
         { []
         }
     {offset
       c1t7o: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1t7p; else goto c1t7q;
       c1t7p: // global
           R2 = R2;
           R1 = GHC.Real.$fIntegralWord_$ctoInteger_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1t7q: // global
           I64[Sp - 8] = block_c1t7l_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1t7u; else goto c1t7m;
       u1t7u: // global
           call _c1t7l(R1) args: 0, res: 0, upd: 0;
       c1t7m: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fIntegralWord_$ctoInteger_info" {
     GHC.Real.$fIntegralWord_$ctoInteger_info:
         const GHC.Real.$fIntegralWord_$ctoInteger_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1t7l() //  [R1]
         { []
         }
     {offset
       c1t7l: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Integer.Type.wordToInteger_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1t7l_info" {
     block_c1t7l_info:
         const _c1t7l;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.321889444 UTC

[section ""data" . GHC.Real.$fIntegralInteger_$ctoInteger_closure" {
     GHC.Real.$fIntegralInteger_$ctoInteger_closure:
         const GHC.Real.$fIntegralInteger_$ctoInteger_info;
 },
 GHC.Real.$fIntegralInteger_$ctoInteger_entry() //  [R2]
         { []
         }
     {offset
       c1t7J: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fIntegralInteger_$ctoInteger_info" {
     GHC.Real.$fIntegralInteger_$ctoInteger_info:
         const GHC.Real.$fIntegralInteger_$ctoInteger_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.326604192 UTC

[section ""data" . GHC.Real.$fEqRatio_$s$c==_closure" {
     GHC.Real.$fEqRatio_$s$c==_closure:
         const GHC.Real.$fEqRatio_$s$c==_info;
 },
 GHC.Real.$fEqRatio_$s$c==_entry() //  [R2, R3]
         { []
         }
     {offset
       c1t7Z: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1t83; else goto c1t84;
       c1t83: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fEqRatio_$s$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1t84: // global
           I64[Sp - 16] = block_c1t7W_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1t8s; else goto c1t7X;
       u1t8s: // global
           call _c1t7W(R1) args: 0, res: 0, upd: 0;
       c1t7X: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fEqRatio_$s$c==_info" {
     GHC.Real.$fEqRatio_$s$c==_info:
         const GHC.Real.$fEqRatio_$s$c==_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1t7W() //  [R1]
         { []
         }
     {offset
       c1t7W: // global
           I64[Sp - 8] = block_c1t82_info;
           _s1sfU::P64 = P64[R1 + 7];
           _s1sfV::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s1sfV::P64;
           P64[Sp + 8] = _s1sfU::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1t8r; else goto c1t86;
       u1t8r: // global
           call _c1t82(R1) args: 0, res: 0, upd: 0;
       c1t86: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1t7W_info" {
     block_c1t7W_info:
         const _c1t7W;
         const 1;
         const 30;
 },
 _c1t82() //  [R1]
         { []
         }
     {offset
       c1t82: // global
           I64[Sp] = block_c1t8a_info;
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 16];
           P64[Sp + 16] = P64[R1 + 15];
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1t82_info" {
     block_c1t82_info:
         const _c1t82;
         const 2;
         const 30;
 },
 _c1t8a() //  [R1]
         { []
         }
     {offset
       c1t8a: // global
           if (R1 == 1) goto c1t8m; else goto c1t8h;
       c1t8m: // global
           _s1sfY::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c1t8k_info;
           R3 = _s1sfY::P64;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
       c1t8h: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1t8a_info" {
     block_c1t8a_info:
         const _c1t8a;
         const 2;
         const 30;
 },
 _c1t8k() //  [R1]
         { []
         }
     {offset
       c1t8k: // global
           R1 = I64[(R1 << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1t8k_info" {
     block_c1t8k_info:
         const _c1t8k;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.337746238 UTC

[section ""data" . GHC.Real.$fEqRatio_$c==_closure" {
     GHC.Real.$fEqRatio_$c==_closure:
         const GHC.Real.$fEqRatio_$c==_info;
 },
 GHC.Real.$fEqRatio_$c==_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1t93: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c1t97; else goto c1t98;
       c1t97: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fEqRatio_$c==_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1t98: // global
           I64[Sp - 24] = block_c1t90_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u1t9s; else goto c1t91;
       u1t9s: // global
           call _c1t90(R1) args: 0, res: 0, upd: 0;
       c1t91: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fEqRatio_$c==_info" {
     GHC.Real.$fEqRatio_$c==_info:
         const GHC.Real.$fEqRatio_$c==_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c1t90() //  [R1]
         { []
         }
     {offset
       c1t90: // global
           I64[Sp - 8] = block_c1t96_info;
           _s1sg5::P64 = P64[R1 + 7];
           _s1sg6::P64 = P64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp] = _s1sg6::P64;
           P64[Sp + 16] = _s1sg5::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1t9r; else goto c1t9a;
       u1t9r: // global
           call _c1t96(R1) args: 0, res: 0, upd: 0;
       c1t9a: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1t90_info" {
     block_c1t90_info:
         const _c1t90;
         const 2;
         const 30;
 },
 _c1t96() //  [R1]
         { []
         }
     {offset
       c1t96: // global
           I64[Sp] = block_c1t9e_info;
           R2 = P64[Sp + 16];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 24];
           P64[Sp - 8] = P64[R1 + 7];
           P64[Sp + 24] = P64[R1 + 15];
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1t96_info" {
     block_c1t96_info:
         const _c1t96;
         const 3;
         const 30;
 },
 _c1t9e() //  [R1]
         { []
         }
     {offset
       c1t9e: // global
           if (R1 & 7 == 1) goto c1t9l; else goto c1t9p;
       c1t9l: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1t9p: // global
           R2 = P64[Sp + 16];
           _s1sg6::P64 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_pp_info;
           P64[Sp + 16] = _s1sg6::P64;
           Sp = Sp + 8;
           call GHC.Classes.==_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1t9e_info" {
     block_c1t9e_info:
         const _c1t9e;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.348288834 UTC

[section ""data" . GHC.Real.$fOrdRatio_$s$c/=_closure" {
     GHC.Real.$fOrdRatio_$s$c/=_closure:
         const GHC.Real.$fOrdRatio_$s$c/=_info;
 },
 GHC.Real.$fOrdRatio_$s$c/=_entry() //  [R2, R3]
         { []
         }
     {offset
       c1ta2: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1ta6; else goto c1ta7;
       c1ta6: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fOrdRatio_$s$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1ta7: // global
           I64[Sp - 16] = block_c1t9Z_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1taD; else goto c1ta0;
       u1taD: // global
           call _c1t9Z(R1) args: 0, res: 0, upd: 0;
       c1ta0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fOrdRatio_$s$c/=_info" {
     GHC.Real.$fOrdRatio_$s$c/=_info:
         const GHC.Real.$fOrdRatio_$s$c/=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1t9Z() //  [R1]
         { []
         }
     {offset
       c1t9Z: // global
           I64[Sp - 8] = block_c1ta5_info;
           _s1sge::P64 = P64[R1 + 7];
           _s1sgf::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s1sgf::P64;
           P64[Sp + 8] = _s1sge::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1taC; else goto c1ta9;
       u1taC: // global
           call _c1ta5(R1) args: 0, res: 0, upd: 0;
       c1ta9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1t9Z_info" {
     block_c1t9Z_info:
         const _c1t9Z;
         const 1;
         const 30;
 },
 _c1ta5() //  [R1]
         { []
         }
     {offset
       c1ta5: // global
           I64[Sp] = block_c1tad_info;
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 16];
           P64[Sp + 16] = P64[R1 + 15];
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1ta5_info" {
     block_c1ta5_info:
         const _c1ta5;
         const 2;
         const 30;
 },
 _c1tad() //  [R1]
         { []
         }
     {offset
       c1tad: // global
           if (R1 == 1) goto c1tap; else goto u1taA;
       c1tap: // global
           _s1sgi::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c1tan_info;
           R3 = _s1sgi::P64;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
       u1taA: // global
           Sp = Sp + 24;
           call _c1tav() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1tad_info" {
     block_c1tad_info:
         const _c1tad;
         const 2;
         const 30;
 },
 _c1tan() //  [R1]
         { []
         }
     {offset
       c1tan: // global
           if (R1 == 1) goto c1taz; else goto u1taB;
       c1taz: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u1taB: // global
           Sp = Sp + 8;
           call _c1tav() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1tan_info" {
     block_c1tan_info:
         const _c1tan;
         const 0;
         const 30;
 },
 _c1tav() //  []
         { []
         }
     {offset
       c1tav: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.360405624 UTC

[section ""data" . GHC.Real.$fEqRatio_$c/=_closure" {
     GHC.Real.$fEqRatio_$c/=_closure:
         const GHC.Real.$fEqRatio_$c/=_info;
 },
 GHC.Real.$fEqRatio_$c/=_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1tbh: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c1tbl; else goto c1tbm;
       c1tbl: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fEqRatio_$c/=_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1tbm: // global
           I64[Sp - 24] = block_c1tbe_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u1tbU; else goto c1tbf;
       u1tbU: // global
           call _c1tbe(R1) args: 0, res: 0, upd: 0;
       c1tbf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fEqRatio_$c/=_info" {
     GHC.Real.$fEqRatio_$c/=_info:
         const GHC.Real.$fEqRatio_$c/=_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c1tbe() //  [R1]
         { []
         }
     {offset
       c1tbe: // global
           I64[Sp - 8] = block_c1tbk_info;
           _s1sgp::P64 = P64[R1 + 7];
           _s1sgq::P64 = P64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp] = _s1sgq::P64;
           P64[Sp + 16] = _s1sgp::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1tbT; else goto c1tbo;
       u1tbT: // global
           call _c1tbk(R1) args: 0, res: 0, upd: 0;
       c1tbo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tbe_info" {
     block_c1tbe_info:
         const _c1tbe;
         const 2;
         const 30;
 },
 _c1tbk() //  [R1]
         { []
         }
     {offset
       c1tbk: // global
           I64[Sp] = block_c1tbs_info;
           R2 = P64[Sp + 16];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 24];
           P64[Sp - 8] = P64[R1 + 7];
           P64[Sp + 24] = P64[R1 + 15];
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tbk_info" {
     block_c1tbk_info:
         const _c1tbk;
         const 3;
         const 30;
 },
 _c1tbs() //  [R1]
         { []
         }
     {offset
       c1tbs: // global
           if (R1 & 7 == 1) goto u1tbR; else goto c1tbE;
       u1tbR: // global
           Sp = Sp + 32;
           call _c1tbK() args: 0, res: 0, upd: 0;
       c1tbE: // global
           _s1sgt::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_c1tbC_info;
           R2 = P64[Sp + 16];
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 16] = _s1sgt::P64;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tbs_info" {
     block_c1tbs_info:
         const _c1tbs;
         const 3;
         const 30;
 },
 _c1tbC() //  [R1]
         { []
         }
     {offset
       c1tbC: // global
           if (R1 & 7 == 1) goto u1tbS; else goto c1tbO;
       u1tbS: // global
           Sp = Sp + 8;
           call _c1tbK() args: 0, res: 0, upd: 0;
       c1tbO: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tbC_info" {
     block_c1tbC_info:
         const _c1tbC;
         const 0;
         const 30;
 },
 _c1tbK() //  []
         { []
         }
     {offset
       c1tbK: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.371269564 UTC

[section ""data" . GHC.Real.$fOrdRatio_$s$fEqRatio_closure" {
     GHC.Real.$fOrdRatio_$s$fEqRatio_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Real.$fEqRatio_$s$c==_closure+2;
         const GHC.Real.$fOrdRatio_$s$c/=_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.374687892 UTC

[section ""data" . GHC.Real.$fEqRatio_closure" {
     GHC.Real.$fEqRatio_closure:
         const GHC.Real.$fEqRatio_info;
 },
 sat_s1sgy_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c1tcJ: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Real.$fEqRatio_$c/=_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1sgy_info" {
     sat_s1sgy_info:
         const sat_s1sgy_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s1sgx_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c1tcR: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Real.$fEqRatio_$c==_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1sgx_info" {
     sat_s1sgx_info:
         const sat_s1sgx_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 GHC.Real.$fEqRatio_entry() //  [R2]
         { []
         }
     {offset
       c1tcV: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c1tcZ; else goto c1tcY;
       c1tcZ: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = GHC.Real.$fEqRatio_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1tcY: // global
           I64[Hp - 48] = sat_s1sgy_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = sat_s1sgx_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = GHC.Classes.C:Eq_con_info;
           P64[Hp - 8] = Hp - 30;
           P64[Hp] = Hp - 46;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fEqRatio_info" {
     GHC.Real.$fEqRatio_info:
         const GHC.Real.$fEqRatio_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.381726809 UTC

[section ""data" . GHC.Real.$fOrdRatio_$s$fOrdRatio_closure" {
     GHC.Real.$fOrdRatio_$s$fOrdRatio_closure:
         const GHC.Classes.C:Ord_con_info;
         const GHC.Real.$fOrdRatio_$s$fEqRatio_closure+1;
         const GHC.Real.$fEnumRatio_$s$ccompare_closure+2;
         const GHC.Real.$fOrdRatio_$s$c<_closure+2;
         const GHC.Real.$fEnumRatio_$s$c<=_closure+2;
         const GHC.Real.$fOrdRatio_$s$c>_closure+2;
         const GHC.Real.$fEnumRatio_$s$c>=_closure+2;
         const GHC.Real.$fOrdRatio_$s$cmax_closure+2;
         const GHC.Real.$fOrdRatio_$s$cmin_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.384828592 UTC

[section ""data" . GHC.Real.$fOrdRatio_$cp1Ord_closure" {
     GHC.Real.$fOrdRatio_$cp1Ord_closure:
         const GHC.Real.$fOrdRatio_$cp1Ord_info;
 },
 sat_s1sgC_entry() //  [R1]
         { []
         }
     {offset
       c1tdr: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1tdv; else goto c1tdw;
       c1tdv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1tdw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c1tdp_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sgC_info" {
     sat_s1sgC_info:
         const sat_s1sgC_entry;
         const 1;
         const 16;
 },
 _c1tdp() //  [R1]
         { []
         }
     {offset
       c1tdp: // global
           I64[Sp] = block_c1tdu_info;
           R2 = R1;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c1tdp_info" {
     block_c1tdp_info:
         const _c1tdp;
         const 0;
         const 30;
 },
 _c1tdu() //  [R1]
         { []
         }
     {offset
       c1tdu: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Classes.$p1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1tdu_info" {
     block_c1tdu_info:
         const _c1tdu;
         const 0;
         const 30;
 },
 GHC.Real.$fOrdRatio_$cp1Ord_entry() //  [R2]
         { []
         }
     {offset
       c1tdC: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1tdG; else goto c1tdF;
       c1tdG: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Real.$fOrdRatio_$cp1Ord_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1tdF: // global
           I64[Hp - 16] = sat_s1sgC_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call GHC.Real.$fEqRatio_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fOrdRatio_$cp1Ord_info" {
     GHC.Real.$fOrdRatio_$cp1Ord_info:
         const GHC.Real.$fOrdRatio_$cp1Ord_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.393332592 UTC

[section ""data" . GHC.Real.even1_closure" {
     GHC.Real.even1_closure:
         const GHC.Real.even1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Real.even1_entry() //  [R1]
         { []
         }
     {offset
       c1te5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1te6; else goto c1te7;
       c1te6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1te7: // global
           (_c1te2::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c1te2::I64 == 0) goto c1te4; else goto c1te3;
       c1te4: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c1te3: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c1te2::I64;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Real.even1_info" {
     GHC.Real.even1_info:
         const GHC.Real.even1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.40052006 UTC

[section ""data" . GHC.Real.$dmfloor_closure" {
     GHC.Real.$dmfloor_closure:
         const GHC.Real.$dmfloor_info;
         const 0;
 },
 ds_s1sgG_entry() //  [R1]
         { []
         }
     {offset
       c1teq: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1ter; else goto c1tes;
       c1ter: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1tes: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call GHC.Real.properFraction_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds_s1sgG_info" {
     ds_s1sgG_info:
         const ds_s1sgG_entry;
         const 3;
         const 15;
 },
 sat_s1sgO_entry() //  [R1]
         { []
         }
     {offset
       c1teD: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1teE; else goto c1teF;
       c1teE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1teF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c1teB_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sgO_info" {
     sat_s1sgO_info:
         const sat_s1sgO_entry;
         const 1;
         const 4294967312;
         const S1sVz_srt+112;
 },
 _c1teB() //  [R1]
         { []
         }
     {offset
       c1teB: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = GHC.Real.even1_closure;
           Sp = Sp - 8;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1teB_info" {
     block_c1teB_info:
         const _c1teB;
         const 0;
         const 4294967326;
         const S1sVz_srt+112;
 },
 sat_s1sgZ_entry() //  [R1]
         { []
         }
     {offset
       c1tf5: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1tf6; else goto c1tf7;
       c1tf6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1tf7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Real.$fEnumRatio1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sgZ_info" {
     sat_s1sgZ_info:
         const sat_s1sgZ_entry;
         const 1;
         const 4294967312;
         const S1sVz_srt+80;
 },
 GHC.Real.$dmfloor_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1tf8: // global
           _s1sgF::P64 = R4;
           _s1sgE::P64 = R3;
           _s1sgD::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto c1tf9; else goto c1tfa;
       c1tfa: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c1tfc; else goto c1tfb;
       c1tfc: // global
           HpAlloc = 40;
           goto c1tf9;
       c1tf9: // global
           R4 = _s1sgF::P64;
           R3 = _s1sgE::P64;
           R2 = _s1sgD::P64;
           R1 = GHC.Real.$dmfloor_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1tfb: // global
           I64[Hp - 32] = ds_s1sgG_info;
           P64[Hp - 16] = _s1sgD::P64;
           P64[Hp - 8] = _s1sgE::P64;
           P64[Hp] = _s1sgF::P64;
           I64[Sp - 24] = block_c1tet_info;
           R2 = _s1sgD::P64;
           P64[Sp - 16] = Hp - 32;
           P64[Sp - 8] = _s1sgE::P64;
           Sp = Sp - 24;
           call GHC.Real.$p1RealFrac_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$dmfloor_info" {
     GHC.Real.$dmfloor_info:
         const GHC.Real.$dmfloor_entry;
         const 0;
         const 210453397518;
         const 12884901911;
         const S1sVz_srt+80;
 },
 _c1tet() //  [R1]
         { []
         }
     {offset
       c1tet: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c1tff; else goto c1tfe;
       c1tff: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1tfe: // global
           I64[Hp - 40] = sat_s1sgO_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = stg_sel_1_upd_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp - 16] = block_c1teK_info;
           R2 = R1;
           P64[Sp - 8] = Hp - 16;
           P64[Sp] = Hp - 40;
           Sp = Sp - 16;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tet_info" {
     block_c1tet_info:
         const _c1tet;
         const 2;
         const 73014444062;
         const S1sVz_srt+80;
 },
 _c1teK() //  [R1]
         { []
         }
     {offset
       c1teK: // global
           _c1tex::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c1teO_info;
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = P64[Sp + 8];
           P64[Sp + 8] = _c1tex::P64;
           Sp = Sp - 8;
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1teK_info" {
     block_c1teK_info:
         const _c1teK;
         const 4;
         const 4294967326;
         const S1sVz_srt+80;
 },
 _c1teO() //  [R1]
         { []
         }
     {offset
       c1teO: // global
           if (R1 & 7 == 1) goto c1tfl; else goto c1tfs;
       c1tfl: // global
           I64[Sp + 16] = block_c1tfi_info;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto u1tfz; else goto c1tfm;
       u1tfz: // global
           call _c1tfi(R1) args: 0, res: 0, upd: 0;
       c1tfm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c1tfs: // global
           I64[Sp] = block_c1teT_info;
           R2 = P64[Sp + 16];
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1teO_info" {
     block_c1teO_info:
         const _c1teO;
         const 2;
         const 4294967326;
         const S1sVz_srt+80;
 },
 _c1tfi() //  [R1]
         { []
         }
     {offset
       c1tfi: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tfi_info" {
     block_c1tfi_info:
         const _c1tfi;
         const 0;
         const 30;
 },
 _c1teT() //  [R1]
         { []
         }
     {offset
       c1teT: // global
           I64[Sp] = block_c1teX_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1teT_info" {
     block_c1teT_info:
         const _c1teT;
         const 130;
         const 4294967326;
         const S1sVz_srt+80;
 },
 _c1teX() //  [R1]
         { []
         }
     {offset
       c1teX: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c1tfw; else goto c1tfv;
       c1tfw: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1tfv: // global
           I64[Hp - 40] = sat_s1sgZ_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = P64[Sp + 8];
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 8] = Hp - 16;
           P64[Sp + 16] = Hp - 40;
           call GHC.Num.-_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1teX_info" {
     block_c1teX_info:
         const _c1teX;
         const 130;
         const 4294967326;
         const S1sVz_srt+80;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.425200613 UTC

[section ""data" . GHC.Real.$dmceiling_closure" {
     GHC.Real.$dmceiling_closure:
         const GHC.Real.$dmceiling_info;
         const 0;
 },
 ds_s1sh3_entry() //  [R1]
         { []
         }
     {offset
       c1tgT: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1tgU; else goto c1tgV;
       c1tgU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1tgV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call GHC.Real.properFraction_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds_s1sh3_info" {
     ds_s1sh3_info:
         const ds_s1sh3_entry;
         const 3;
         const 15;
 },
 sat_s1shb_entry() //  [R1]
         { []
         }
     {offset
       c1th6: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1th7; else goto c1th8;
       c1th7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1th8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c1th4_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1shb_info" {
     sat_s1shb_info:
         const sat_s1shb_entry;
         const 1;
         const 4294967312;
         const S1sVz_srt+112;
 },
 _c1th4() //  [R1]
         { []
         }
     {offset
       c1th4: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = GHC.Real.even1_closure;
           Sp = Sp - 8;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1th4_info" {
     block_c1th4_info:
         const _c1th4;
         const 0;
         const 4294967326;
         const S1sVz_srt+112;
 },
 sat_s1shm_entry() //  [R1]
         { []
         }
     {offset
       c1thy: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1thz; else goto c1thA;
       c1thz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1thA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Real.$fEnumRatio1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1shm_info" {
     sat_s1shm_info:
         const sat_s1shm_entry;
         const 1;
         const 4294967312;
         const S1sVz_srt+80;
 },
 GHC.Real.$dmceiling_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1thB: // global
           _s1sh2::P64 = R4;
           _s1sh1::P64 = R3;
           _s1sh0::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto c1thC; else goto c1thD;
       c1thD: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c1thF; else goto c1thE;
       c1thF: // global
           HpAlloc = 40;
           goto c1thC;
       c1thC: // global
           R4 = _s1sh2::P64;
           R3 = _s1sh1::P64;
           R2 = _s1sh0::P64;
           R1 = GHC.Real.$dmceiling_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1thE: // global
           I64[Hp - 32] = ds_s1sh3_info;
           P64[Hp - 16] = _s1sh0::P64;
           P64[Hp - 8] = _s1sh1::P64;
           P64[Hp] = _s1sh2::P64;
           I64[Sp - 24] = block_c1tgW_info;
           R2 = _s1sh0::P64;
           P64[Sp - 16] = Hp - 32;
           P64[Sp - 8] = _s1sh1::P64;
           Sp = Sp - 24;
           call GHC.Real.$p1RealFrac_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$dmceiling_info" {
     GHC.Real.$dmceiling_info:
         const GHC.Real.$dmceiling_entry;
         const 0;
         const 347892350990;
         const 12884901911;
         const S1sVz_srt+80;
 },
 _c1tgW() //  [R1]
         { []
         }
     {offset
       c1tgW: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c1thI; else goto c1thH;
       c1thI: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1thH: // global
           I64[Hp - 40] = sat_s1shb_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = stg_sel_1_upd_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp - 16] = block_c1thd_info;
           R2 = R1;
           P64[Sp - 8] = Hp - 16;
           P64[Sp] = Hp - 40;
           Sp = Sp - 16;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tgW_info" {
     block_c1tgW_info:
         const _c1tgW;
         const 2;
         const 73014444062;
         const S1sVz_srt+80;
 },
 _c1thd() //  [R1]
         { []
         }
     {offset
       c1thd: // global
           _c1th0::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c1thh_info;
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = P64[Sp + 8];
           P64[Sp + 8] = _c1th0::P64;
           Sp = Sp - 8;
           call GHC.Classes.>_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1thd_info" {
     block_c1thd_info:
         const _c1thd;
         const 4;
         const 4294967326;
         const S1sVz_srt+80;
 },
 _c1thh() //  [R1]
         { []
         }
     {offset
       c1thh: // global
           if (R1 & 7 == 1) goto c1thO; else goto c1thV;
       c1thO: // global
           I64[Sp + 16] = block_c1thL_info;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto u1ti2; else goto c1thP;
       u1ti2: // global
           call _c1thL(R1) args: 0, res: 0, upd: 0;
       c1thP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c1thV: // global
           I64[Sp] = block_c1thm_info;
           R2 = P64[Sp + 16];
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1thh_info" {
     block_c1thh_info:
         const _c1thh;
         const 2;
         const 4294967326;
         const S1sVz_srt+80;
 },
 _c1thL() //  [R1]
         { []
         }
     {offset
       c1thL: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1thL_info" {
     block_c1thL_info:
         const _c1thL;
         const 0;
         const 30;
 },
 _c1thm() //  [R1]
         { []
         }
     {offset
       c1thm: // global
           I64[Sp] = block_c1thq_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1thm_info" {
     block_c1thm_info:
         const _c1thm;
         const 130;
         const 4294967326;
         const S1sVz_srt+80;
 },
 _c1thq() //  [R1]
         { []
         }
     {offset
       c1thq: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c1thZ; else goto c1thY;
       c1thZ: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1thY: // global
           I64[Hp - 40] = sat_s1shm_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = P64[Sp + 8];
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 8] = Hp - 16;
           P64[Sp + 16] = Hp - 40;
           call GHC.Num.+_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1thq_info" {
     block_c1thq_info:
         const _c1thq;
         const 130;
         const 4294967326;
         const S1sVz_srt+80;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.446234227 UTC

[section ""data" . GHC.Real.$dmtruncate_closure" {
     GHC.Real.$dmtruncate_closure:
         const GHC.Real.$dmtruncate_info;
 },
 GHC.Real.$dmtruncate_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1tjk: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1tjl; else goto c1tjm;
       c1tjl: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$dmtruncate_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1tjm: // global
           I64[Sp - 8] = block_c1tji_info;
           R2 = R2;
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           Sp = Sp - 32;
           call GHC.Real.properFraction_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$dmtruncate_info" {
     GHC.Real.$dmtruncate_info:
         const GHC.Real.$dmtruncate_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c1tji() //  [R1]
         { []
         }
     {offset
       c1tji: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tji_info" {
     block_c1tji_info:
         const _c1tji;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.451997416 UTC

[section ""data" . GHC.Real.$dmrecip_closure" {
     GHC.Real.$dmrecip_closure:
         const GHC.Real.$dmrecip_info;
         const 0;
 },
 sat_s1shw_entry() //  [R1]
         { []
         }
     {offset
       c1tjK: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1tjL; else goto c1tjM;
       c1tjL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1tjM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c1tjI_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Real.$p1Fractional_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1shw_info" {
     sat_s1shw_info:
         const sat_s1shw_entry;
         const 1;
         const 4294967312;
         const S1sVz_srt+80;
 },
 _c1tjI() //  [R1]
         { []
         }
     {offset
       c1tjI: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = GHC.Real.$fEnumRatio1_closure;
           Sp = Sp - 8;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1tjI_info" {
     block_c1tjI_info:
         const _c1tjI;
         const 0;
         const 4294967326;
         const S1sVz_srt+80;
 },
 GHC.Real.$dmrecip_entry() //  [R2, R3]
         { []
         }
     {offset
       c1tjQ: // global
           _s1shu::P64 = R3;
           _s1sht::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c1tjR; else goto c1tjS;
       c1tjS: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1tjU; else goto c1tjT;
       c1tjU: // global
           HpAlloc = 24;
           goto c1tjR;
       c1tjR: // global
           R3 = _s1shu::P64;
           R2 = _s1sht::P64;
           R1 = GHC.Real.$dmrecip_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1tjT: // global
           I64[Hp - 16] = sat_s1shw_info;
           P64[Hp] = _s1sht::P64;
           R2 = _s1sht::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = _s1shu::P64;
           Sp = Sp - 24;
           call GHC.Real./_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$dmrecip_info" {
     GHC.Real.$dmrecip_info:
         const GHC.Real.$dmrecip_entry;
         const 0;
         const 554050781198;
         const 8589934607;
         const S1sVz_srt+80;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.460047395 UTC

[section ""data" . GHC.Real.$dm/_closure" {
     GHC.Real.$dm/_closure:
         const GHC.Real.$dm/_info;
 },
 sat_s1shB_entry() //  [R1]
         { []
         }
     {offset
       c1tkm: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1tkn; else goto c1tko;
       c1tkn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1tko: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Real.recip_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1shB_info" {
     sat_s1shB_info:
         const sat_s1shB_entry;
         const 2;
         const 18;
 },
 GHC.Real.$dm/_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1tkr: // global
           _s1shz::P64 = R4;
           _s1shy::P64 = R3;
           _s1shx::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c1tks; else goto c1tkt;
       c1tkt: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1tkv; else goto c1tku;
       c1tkv: // global
           HpAlloc = 32;
           goto c1tks;
       c1tks: // global
           R4 = _s1shz::P64;
           R3 = _s1shy::P64;
           R2 = _s1shx::P64;
           R1 = GHC.Real.$dm/_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1tku: // global
           I64[Hp - 24] = sat_s1shB_info;
           P64[Hp - 8] = _s1shx::P64;
           P64[Hp] = _s1shz::P64;
           I64[Sp - 24] = block_c1tkp_info;
           R2 = _s1shx::P64;
           P64[Sp - 16] = Hp - 24;
           P64[Sp - 8] = _s1shy::P64;
           Sp = Sp - 24;
           call GHC.Real.$p1Fractional_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$dm/_info" {
     GHC.Real.$dm/_info:
         const GHC.Real.$dm/_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c1tkp() //  [R1]
         { []
         }
     {offset
       c1tkp: // global
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           _c1tki::P64 = P64[Sp + 8];
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = _c1tki::P64;
           call GHC.Num.*_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tkp_info" {
     block_c1tkp_info:
         const _c1tkp;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.473053345 UTC

[section ""data" . GHC.Real.$dmdivMod_closure" {
     GHC.Real.$dmdivMod_closure:
         const GHC.Real.$dmdivMod_info;
         const 0;
 },
 $dNum_s1shG_entry() //  [R1]
         { []
         }
     {offset
       c1tl5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1tl6; else goto c1tl7;
       c1tl6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1tl7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dNum_s1shG_info" {
     $dNum_s1shG_info:
         const $dNum_s1shG_entry;
         const 1;
         const 16;
 },
 ds_s1shH_entry() //  [R1]
         { []
         }
     {offset
       c1tle: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c1tli; else goto c1tlj;
       c1tli: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1tlj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c1tlc_info;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_pp_info;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = P64[R1 + 32];
           Sp = Sp - 48;
           call GHC.Real.quotRem_entry(R2) args: 32, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds_s1shH_info" {
     ds_s1shH_info:
         const ds_s1shH_entry;
         const 3;
         const 15;
 },
 _c1tlc() //  [R1]
         { []
         }
     {offset
       c1tlc: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1tlm; else goto c1tll;
       c1tlm: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c1tll: // global
           _s1shJ::P64 = P64[R1 + 7];
           _s1shK::P64 = P64[R1 + 15];
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = R1;
           P64[Hp - 8] = _s1shJ::P64;
           P64[Hp] = _s1shK::P64;
           R1 = Hp - 23;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1tlc_info" {
     block_c1tlc_info:
         const _c1tlc;
         const 0;
         const 30;
 },
 sat_s1shT_entry() //  [R1]
         { []
         }
     {offset
       c1tlw: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1tlx; else goto c1tly;
       c1tlx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1tly: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Num.signum_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1shT_info" {
     sat_s1shT_info:
         const sat_s1shT_entry;
         const 2;
         const 18;
 },
 sat_s1shU_entry() //  [R1]
         { []
         }
     {offset
       c1tlz: // global
           _s1shU::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c1tlA; else goto c1tlB;
       c1tlB: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1tlD; else goto c1tlC;
       c1tlD: // global
           HpAlloc = 32;
           goto c1tlA;
       c1tlA: // global
           R1 = _s1shU::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1tlC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1shU::P64;
           _s1shE::P64 = P64[_s1shU::P64 + 16];
           _s1shG::P64 = P64[_s1shU::P64 + 24];
           I64[Hp - 24] = sat_s1shT_info;
           P64[Hp - 8] = _s1shE::P64;
           P64[Hp] = _s1shG::P64;
           R2 = _s1shG::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 24;
           Sp = Sp - 32;
           call GHC.Num.negate_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1shU_info" {
     sat_s1shU_info:
         const sat_s1shU_entry;
         const 2;
         const 18;
 },
 sat_s1shS_entry() //  [R1]
         { []
         }
     {offset
       c1tlI: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1tlJ; else goto c1tlK;
       c1tlJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1tlK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Num.signum_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1shS_info" {
     sat_s1shS_info:
         const sat_s1shS_entry;
         const 2;
         const 18;
 },
 sat_s1si7_entry() //  [R1]
         { []
         }
     {offset
       c1tm2: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1tm3; else goto c1tm4;
       c1tm3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1tm4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 40;
           call GHC.Num.+_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1si7_info" {
     sat_s1si7_info:
         const sat_s1si7_entry;
         const 3;
         const 15;
 },
 sat_s1si5_entry() //  [R1]
         { []
         }
     {offset
       c1tmd: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1tme; else goto c1tmf;
       c1tme: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1tmf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Real.$fEnumRatio1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1si5_info" {
     sat_s1si5_info:
         const sat_s1si5_entry;
         const 1;
         const 4294967312;
         const S1sVz_srt+80;
 },
 sat_s1si6_entry() //  [R1]
         { []
         }
     {offset
       c1tmh: // global
           _s1si6::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c1tmi; else goto c1tmj;
       c1tmj: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c1tml; else goto c1tmk;
       c1tml: // global
           HpAlloc = 48;
           goto c1tmi;
       c1tmi: // global
           R1 = _s1si6::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1tmk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1si6::P64;
           _s1shG::P64 = P64[_s1si6::P64 + 16];
           _s1shH::P64 = P64[_s1si6::P64 + 24];
           I64[Hp - 40] = sat_s1si5_info;
           P64[Hp - 24] = _s1shG::P64;
           I64[Hp - 16] = stg_sel_1_upd_info;
           P64[Hp] = _s1shH::P64;
           R2 = _s1shG::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 16;
           P64[Sp - 24] = Hp - 40;
           Sp = Sp - 40;
           call GHC.Num.-_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1si6_info" {
     sat_s1si6_info:
         const sat_s1si6_entry;
         const 2;
         const 4294967314;
         const S1sVz_srt+80;
 },
 GHC.Real.$dmdivMod_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1tmm: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c1tmn; else goto c1tmo;
       c1tmn: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$dmdivMod_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1tmo: // global
           I64[Sp - 32] = block_c1tkX_info;
           _s1shC::P64 = R2;
           R2 = R2;
           P64[Sp - 24] = _s1shC::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$dmdivMod_info" {
     GHC.Real.$dmdivMod_info:
         const GHC.Real.$dmdivMod_entry;
         const 0;
         const 1103806595086;
         const 12884901911;
         const S1sVz_srt+80;
 },
 _c1tkX() //  [R1]
         { []
         }
     {offset
       c1tkX: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto c1tmr; else goto c1tmq;
       c1tmr: // global
           HpAlloc = 152;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1tmq: // global
           I64[Hp - 144] = $dNum_s1shG_info;
           P64[Hp - 128] = R1;
           I64[Hp - 120] = ds_s1shH_info;
           P64[Hp - 104] = P64[Sp + 8];
           P64[Hp - 96] = P64[Sp + 16];
           _s1shE::P64 = P64[Sp + 24];
           P64[Hp - 88] = _s1shE::P64;
           I64[Hp - 80] = stg_sel_2_upd_info;
           _c1tl8::P64 = Hp - 120;
           P64[Hp - 64] = _c1tl8::P64;
           I64[Hp - 56] = sat_s1shU_info;
           P64[Hp - 40] = _s1shE::P64;
           _c1tl1::P64 = Hp - 144;
           P64[Hp - 32] = _c1tl1::P64;
           I64[Hp - 24] = sat_s1shS_info;
           P64[Hp - 8] = _c1tl1::P64;
           _c1tln::P64 = Hp - 80;
           P64[Hp] = _c1tln::P64;
           I64[Sp - 24] = block_c1tlL_info;
           R2 = R1;
           P64[Sp - 16] = Hp - 56;
           P64[Sp - 8] = Hp - 24;
           P64[Sp] = _c1tln::P64;
           P64[Sp + 8] = _c1tl8::P64;
           P64[Sp + 16] = _c1tl1::P64;
           Sp = Sp - 24;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tkX_info" {
     block_c1tkX_info:
         const _c1tkX;
         const 3;
         const 4294967326;
         const S1sVz_srt+80;
 },
 _c1tlL() //  [R1]
         { []
         }
     {offset
       c1tlL: // global
           I64[Sp] = block_c1tlP_info;
           R2 = R1;
           call GHC.Classes.$p1Ord_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tlL_info" {
     block_c1tlL_info:
         const _c1tlL;
         const 6;
         const 4294967326;
         const S1sVz_srt+80;
 },
 _c1tlP() //  [R1]
         { []
         }
     {offset
       c1tlP: // global
           _c1tlE::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c1tlT_info;
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = _c1tlE::P64;
           Sp = Sp - 8;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tlP_info" {
     block_c1tlP_info:
         const _c1tlP;
         const 6;
         const 4294967326;
         const S1sVz_srt+80;
 },
 _c1tlT() //  [R1]
         { []
         }
     {offset
       c1tlT: // global
           _c1tl8::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c1tmy; else goto c1tmF;
       c1tmy: // global
           I64[Sp + 32] = block_c1tmv_info;
           R1 = _c1tl8::P64;
           Sp = Sp + 32;
           if (R1 & 7 != 0) goto u1tmK; else goto c1tmz;
       u1tmK: // global
           call _c1tmv(R1) args: 0, res: 0, upd: 0;
       c1tmz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c1tmF: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c1tmI; else goto c1tmH;
       c1tmI: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1tmH: // global
           I64[Hp - 88] = sat_s1si7_info;
           P64[Hp - 72] = P64[Sp + 32];
           _c1tl1::P64 = P64[Sp + 24];
           P64[Hp - 64] = _c1tl1::P64;
           P64[Hp - 56] = P64[Sp + 8];
           I64[Hp - 48] = sat_s1si6_info;
           P64[Hp - 32] = _c1tl1::P64;
           P64[Hp - 24] = _c1tl8::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 88;
           R1 = Hp - 15;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tlT_info" {
     block_c1tlT_info:
         const _c1tlT;
         const 4;
         const 4294967326;
         const S1sVz_srt+80;
 },
 _c1tmv() //  [R1]
         { []
         }
     {offset
       c1tmv: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tmv_info" {
     block_c1tmv_info:
         const _c1tmv;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.502032762 UTC

[section ""data" . GHC.Real.$dmmod_closure" {
     GHC.Real.$dmmod_closure:
         const GHC.Real.$dmmod_info;
 },
 GHC.Real.$dmmod_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1toH: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1toI; else goto c1toJ;
       c1toI: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$dmmod_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1toJ: // global
           I64[Sp - 8] = block_c1toF_info;
           R2 = R2;
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           Sp = Sp - 32;
           call GHC.Real.divMod_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$dmmod_info" {
     GHC.Real.$dmmod_info:
         const GHC.Real.$dmmod_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c1toF() //  [R1]
         { []
         }
     {offset
       c1toF: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1toF_info" {
     block_c1toF_info:
         const _c1toF;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.508151075 UTC

[section ""data" . GHC.Real.$dmdiv_closure" {
     GHC.Real.$dmdiv_closure:
         const GHC.Real.$dmdiv_info;
 },
 GHC.Real.$dmdiv_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1tp3: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1tp4; else goto c1tp5;
       c1tp4: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$dmdiv_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1tp5: // global
           I64[Sp - 8] = block_c1tp1_info;
           R2 = R2;
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           Sp = Sp - 32;
           call GHC.Real.divMod_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$dmdiv_info" {
     GHC.Real.$dmdiv_info:
         const GHC.Real.$dmdiv_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c1tp1() //  [R1]
         { []
         }
     {offset
       c1tp1: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tp1_info" {
     block_c1tp1_info:
         const _c1tp1;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.513739433 UTC

[section ""data" . GHC.Real.$dmrem_closure" {
     GHC.Real.$dmrem_closure:
         const GHC.Real.$dmrem_info;
 },
 GHC.Real.$dmrem_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1tpp: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1tpq; else goto c1tpr;
       c1tpq: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$dmrem_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1tpr: // global
           I64[Sp - 8] = block_c1tpn_info;
           R2 = R2;
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           Sp = Sp - 32;
           call GHC.Real.quotRem_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$dmrem_info" {
     GHC.Real.$dmrem_info:
         const GHC.Real.$dmrem_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c1tpn() //  [R1]
         { []
         }
     {offset
       c1tpn: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tpn_info" {
     block_c1tpn_info:
         const _c1tpn;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.519189843 UTC

[section ""data" . GHC.Real.$dmquot_closure" {
     GHC.Real.$dmquot_closure:
         const GHC.Real.$dmquot_info;
 },
 GHC.Real.$dmquot_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1tpL: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1tpM; else goto c1tpN;
       c1tpM: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$dmquot_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1tpN: // global
           I64[Sp - 8] = block_c1tpJ_info;
           R2 = R2;
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           Sp = Sp - 32;
           call GHC.Real.quotRem_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$dmquot_info" {
     GHC.Real.$dmquot_info:
         const GHC.Real.$dmquot_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c1tpJ() //  [R1]
         { []
         }
     {offset
       c1tpJ: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tpJ_info" {
     block_c1tpJ_info:
         const _c1tpJ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.524573485 UTC

[section ""data" . GHC.Real.divZeroError_closure" {
     GHC.Real.divZeroError_closure:
         const GHC.Real.divZeroError_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Real.divZeroError_entry() //  [R1]
         { []
         }
     {offset
       c1tq7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1tq8; else goto c1tq9;
       c1tq8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1tq9: // global
           (_c1tq4::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c1tq4::I64 == 0) goto c1tq6; else goto c1tq5;
       c1tq6: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c1tq5: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c1tq4::I64;
           R1 = GHC.Exception.divZeroException_closure;
           Sp = Sp - 16;
           call stg_raise#(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Real.divZeroError_info" {
     GHC.Real.divZeroError_info:
         const GHC.Real.divZeroError_entry;
         const 0;
         const 4294967317;
         const S1sVz_srt+152;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.52929185 UTC

[section ""data" . GHC.Real.$fIntegralInt1_closure" {
     GHC.Real.$fIntegralInt1_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.532673754 UTC

[section ""data" . GHC.Real.$fIntegralInt_$cmod_closure" {
     GHC.Real.$fIntegralInt_$cmod_closure:
         const GHC.Real.$fIntegralInt_$cmod_info;
         const 0;
 },
 GHC.Real.$fIntegralInt_$cmod_entry() //  [R2, R3]
         { []
         }
     {offset
       c1tqq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1tqr; else goto c1tqs;
       c1tqr: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fIntegralInt_$cmod_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1tqs: // global
           I64[Sp - 16] = block_c1tqn_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1tqS; else goto c1tqo;
       u1tqS: // global
           call _c1tqn(R1) args: 0, res: 0, upd: 0;
       c1tqo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fIntegralInt_$cmod_info" {
     GHC.Real.$fIntegralInt_$cmod_info:
         const GHC.Real.$fIntegralInt_$cmod_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S1sVz_srt+160;
 },
 _c1tqn() //  [R1]
         { []
         }
     {offset
       c1tqn: // global
           _s1siA::I64 = I64[R1 + 7];
           if (_s1siA::I64 != (-1)) goto u1tqQ; else goto c1tqO;
       u1tqQ: // global
           if (_s1siA::I64 != 0) goto c1tqJ; else goto c1tqP;
       c1tqJ: // global
           I64[Sp] = block_c1tqy_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1siA::I64;
           if (R1 & 7 != 0) goto u1tqR; else goto c1tqz;
       u1tqR: // global
           call _c1tqy(R1) args: 0, res: 0, upd: 0;
       c1tqz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c1tqP: // global
           R1 = GHC.Real.divZeroError_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c1tqO: // global
           R1 = GHC.Real.$fIntegralInt1_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tqn_info" {
     block_c1tqn_info:
         const _c1tqn;
         const 1;
         const 4294967326;
         const S1sVz_srt+160;
 },
 _c1tqy() //  [R1]
         { []
         }
     {offset
       c1tqy: // global
           _s1siA::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_c1tqD_info;
           R3 = _s1siA::I64;
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Classes.modInt#_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tqy_info" {
     block_c1tqy_info:
         const _c1tqy;
         const 65;
         const 30;
 },
 _c1tqD() //  [R1]
         { []
         }
     {offset
       c1tqD: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1tqN; else goto c1tqM;
       c1tqN: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c1tqM: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tqD_info" {
     block_c1tqD_info:
         const _c1tqD;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.544377677 UTC

[section ""data" . GHC.Real.$fIntegralInt_$crem_closure" {
     GHC.Real.$fIntegralInt_$crem_closure:
         const GHC.Real.$fIntegralInt_$crem_info;
         const 0;
 },
 GHC.Real.$fIntegralInt_$crem_entry() //  [R2, R3]
         { []
         }
     {offset
       c1trm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1trn; else goto c1tro;
       c1trn: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fIntegralInt_$crem_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1tro: // global
           I64[Sp - 16] = block_c1trj_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1trM; else goto c1trk;
       u1trM: // global
           call _c1trj(R1) args: 0, res: 0, upd: 0;
       c1trk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fIntegralInt_$crem_info" {
     GHC.Real.$fIntegralInt_$crem_info:
         const GHC.Real.$fIntegralInt_$crem_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const S1sVz_srt+160;
 },
 _c1trj() //  [R1]
         { []
         }
     {offset
       c1trj: // global
           _s1siJ::I64 = I64[R1 + 7];
           if (_s1siJ::I64 != (-1)) goto u1trK; else goto c1trI;
       u1trK: // global
           if (_s1siJ::I64 != 0) goto c1trE; else goto c1trJ;
       c1trE: // global
           I64[Sp] = block_c1tru_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1siJ::I64;
           if (R1 & 7 != 0) goto u1trL; else goto c1trv;
       u1trL: // global
           call _c1tru(R1) args: 0, res: 0, upd: 0;
       c1trv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c1trJ: // global
           R1 = GHC.Real.divZeroError_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c1trI: // global
           R1 = GHC.Real.$fIntegralInt1_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1trj_info" {
     block_c1trj_info:
         const _c1trj;
         const 1;
         const 4294967326;
         const S1sVz_srt+160;
 },
 _c1tru() //  [R1]
         { []
         }
     {offset
       c1tru: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1trH; else goto c1trG;
       c1trH: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1trG: // global
           _s1siM::I64 = %MO_S_Rem_W64(I64[R1 + 7], I64[Sp + 8]);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s1siM::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tru_info" {
     block_c1tru_info:
         const _c1tru;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.55227788 UTC

[section ""data" . GHC.Real.$fIntegralInteger_$cquot_closure" {
     GHC.Real.$fIntegralInteger_$cquot_closure:
         const GHC.Real.$fIntegralInteger_$cquot_info;
         const 0;
 },
 GHC.Real.$fIntegralInteger_$cquot_entry() //  [R2, R3]
         { []
         }
     {offset
       c1tse: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1tsf; else goto c1tsg;
       c1tsf: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fIntegralInteger_$cquot_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1tsg: // global
           I64[Sp - 24] = block_c1ts9_info;
           _s1siO::P64 = R3;
           R3 = GHC.Real.even1_closure;
           _s1siN::P64 = R2;
           R2 = _s1siO::P64;
           P64[Sp - 16] = _s1siN::P64;
           P64[Sp - 8] = _s1siO::P64;
           Sp = Sp - 24;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fIntegralInteger_$cquot_info" {
     GHC.Real.$fIntegralInteger_$cquot_info:
         const GHC.Real.$fIntegralInteger_$cquot_entry;
         const 0;
         const 2478196129806;
         const 8589934607;
         const S1sVz_srt+112;
 },
 _c1ts9() //  [R1]
         { []
         }
     {offset
       c1ts9: // global
           if (R1 == 1) goto c1tsd; else goto c1tsc;
       c1tsd: // global
           R1 = GHC.Real.divZeroError_closure;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c1tsc: // global
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Integer.Type.quotInteger_entry(R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1ts9_info" {
     block_c1ts9_info:
         const _c1ts9;
         const 2;
         const 4294967326;
         const S1sVz_srt+160;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.558330815 UTC

[section ""data" . GHC.Real.$fIntegralInteger_$crem_closure" {
     GHC.Real.$fIntegralInteger_$crem_closure:
         const GHC.Real.$fIntegralInteger_$crem_info;
         const 0;
 },
 GHC.Real.$fIntegralInteger_$crem_entry() //  [R2, R3]
         { []
         }
     {offset
       c1tsF: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1tsG; else goto c1tsH;
       c1tsG: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fIntegralInteger_$crem_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1tsH: // global
           I64[Sp - 24] = block_c1tsA_info;
           _s1siR::P64 = R3;
           R3 = GHC.Real.even1_closure;
           _s1siQ::P64 = R2;
           R2 = _s1siR::P64;
           P64[Sp - 16] = _s1siQ::P64;
           P64[Sp - 8] = _s1siR::P64;
           Sp = Sp - 24;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fIntegralInteger_$crem_info" {
     GHC.Real.$fIntegralInteger_$crem_info:
         const GHC.Real.$fIntegralInteger_$crem_entry;
         const 0;
         const 4677219385358;
         const 8589934607;
         const S1sVz_srt+112;
 },
 _c1tsA() //  [R1]
         { []
         }
     {offset
       c1tsA: // global
           if (R1 == 1) goto c1tsE; else goto c1tsD;
       c1tsE: // global
           R1 = GHC.Real.divZeroError_closure;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c1tsD: // global
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Integer.Type.remInteger_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tsA_info" {
     block_c1tsA_info:
         const _c1tsA;
         const 2;
         const 4294967326;
         const S1sVz_srt+160;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.564448383 UTC

[section ""data" . GHC.Real.$fIntegralInteger_$cdiv_closure" {
     GHC.Real.$fIntegralInteger_$cdiv_closure:
         const GHC.Real.$fIntegralInteger_$cdiv_info;
         const 0;
 },
 GHC.Real.$fIntegralInteger_$cdiv_entry() //  [R2, R3]
         { []
         }
     {offset
       c1tt6: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1tt7; else goto c1tt8;
       c1tt7: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fIntegralInteger_$cdiv_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1tt8: // global
           I64[Sp - 24] = block_c1tt1_info;
           _s1siU::P64 = R3;
           R3 = GHC.Real.even1_closure;
           _s1siT::P64 = R2;
           R2 = _s1siU::P64;
           P64[Sp - 16] = _s1siT::P64;
           P64[Sp - 8] = _s1siU::P64;
           Sp = Sp - 24;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fIntegralInteger_$cdiv_info" {
     GHC.Real.$fIntegralInteger_$cdiv_info:
         const GHC.Real.$fIntegralInteger_$cdiv_entry;
         const 0;
         const 26667451940878;
         const 8589934607;
         const S1sVz_srt+112;
 },
 _c1tt1() //  [R1]
         { []
         }
     {offset
       c1tt1: // global
           if (R1 == 1) goto c1tt5; else goto c1tt4;
       c1tt5: // global
           R1 = GHC.Real.divZeroError_closure;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c1tt4: // global
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Integer.Type.divInteger_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tt1_info" {
     block_c1tt1_info:
         const _c1tt1;
         const 2;
         const 141733920798;
         const S1sVz_srt+160;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.570664237 UTC

[section ""data" . GHC.Real.$fIntegralInteger_$cmod_closure" {
     GHC.Real.$fIntegralInteger_$cmod_closure:
         const GHC.Real.$fIntegralInteger_$cmod_info;
         const 0;
 },
 GHC.Real.$fIntegralInteger_$cmod_entry() //  [R2, R3]
         { []
         }
     {offset
       c1ttx: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1tty; else goto c1ttz;
       c1tty: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fIntegralInteger_$cmod_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1ttz: // global
           I64[Sp - 24] = block_c1tts_info;
           _s1siX::P64 = R3;
           R3 = GHC.Real.even1_closure;
           _s1siW::P64 = R2;
           R2 = _s1siX::P64;
           P64[Sp - 16] = _s1siW::P64;
           P64[Sp - 8] = _s1siX::P64;
           Sp = Sp - 24;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fIntegralInteger_$cmod_info" {
     GHC.Real.$fIntegralInteger_$cmod_info:
         const GHC.Real.$fIntegralInteger_$cmod_entry;
         const 0;
         const 105832289140750;
         const 8589934607;
         const S1sVz_srt+112;
 },
 _c1tts() //  [R1]
         { []
         }
     {offset
       c1tts: // global
           if (R1 == 1) goto c1ttw; else goto c1ttv;
       c1ttw: // global
           R1 = GHC.Real.divZeroError_closure;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c1ttv: // global
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Integer.Type.modInteger_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tts_info" {
     block_c1tts_info:
         const _c1tts;
         const 2;
         const 554050781214;
         const S1sVz_srt+160;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.579871416 UTC

[section ""data" . GHC.Real.$fIntegralInteger_$cquotRem_closure" {
     GHC.Real.$fIntegralInteger_$cquotRem_closure:
         const GHC.Real.$fIntegralInteger_$cquotRem_info;
         const 0;
 },
 GHC.Real.$fIntegralInteger_$cquotRem_entry() //  [R2, R3]
         { []
         }
     {offset
       c1ttY: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1ttZ; else goto c1tu0;
       c1ttZ: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fIntegralInteger_$cquotRem_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1tu0: // global
           I64[Sp - 24] = block_c1ttT_info;
           _s1sj0::P64 = R3;
           R3 = GHC.Real.even1_closure;
           _s1siZ::P64 = R2;
           R2 = _s1sj0::P64;
           P64[Sp - 16] = _s1siZ::P64;
           P64[Sp - 8] = _s1sj0::P64;
           Sp = Sp - 24;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fIntegralInteger_$cquotRem_info" {
     GHC.Real.$fIntegralInteger_$cquotRem_info:
         const GHC.Real.$fIntegralInteger_$cquotRem_entry;
         const 0;
         const 141016661229582;
         const 8589934607;
         const S1sVz_srt+112;
 },
 _c1ttT() //  [R1]
         { []
         }
     {offset
       c1ttT: // global
           if (R1 == 1) goto c1ttX; else goto c1ttW;
       c1ttX: // global
           R1 = GHC.Real.divZeroError_closure;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c1ttW: // global
           _s1sj0::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c1tu3_info;
           R3 = _s1sj0::P64;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Integer.Type.quotRemInteger_entry(R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1ttT_info" {
     block_c1ttT_info:
         const _c1ttT;
         const 2;
         const 4294967326;
         const S1sVz_srt+160;
 },
 _c1tu3() //  [R1, R2]
         { []
         }
     {offset
       c1tu3: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1tu9; else goto c1tu8;
       c1tu9: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c1tu8: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tu3_info" {
     block_c1tu3_info:
         const _c1tu3;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.588605397 UTC

[section ""data" . GHC.Real.$fIntegralInteger_$cdivMod_closure" {
     GHC.Real.$fIntegralInteger_$cdivMod_closure:
         const GHC.Real.$fIntegralInteger_$cdivMod_info;
         const 0;
 },
 GHC.Real.$fIntegralInteger_$cdivMod_entry() //  [R2, R3]
         { []
         }
     {offset
       c1tuB: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1tuC; else goto c1tuD;
       c1tuC: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fIntegralInteger_$cdivMod_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1tuD: // global
           I64[Sp - 24] = block_c1tuw_info;
           _s1sj6::P64 = R3;
           R3 = GHC.Real.even1_closure;
           _s1sj5::P64 = R2;
           R2 = _s1sj6::P64;
           P64[Sp - 16] = _s1sj5::P64;
           P64[Sp - 8] = _s1sj6::P64;
           Sp = Sp - 24;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fIntegralInteger_$cdivMod_info" {
     GHC.Real.$fIntegralInteger_$cdivMod_info:
         const GHC.Real.$fIntegralInteger_$cdivMod_entry;
         const 0;
         const 844704103006222;
         const 8589934607;
         const S1sVz_srt+112;
 },
 _c1tuw() //  [R1]
         { []
         }
     {offset
       c1tuw: // global
           if (R1 == 1) goto c1tuA; else goto c1tuz;
       c1tuA: // global
           R1 = GHC.Real.divZeroError_closure;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c1tuz: // global
           _s1sj6::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c1tuG_info;
           R3 = _s1sj6::P64;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Integer.Type.divModInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tuw_info" {
     block_c1tuw_info:
         const _c1tuw;
         const 2;
         const 4402341478430;
         const S1sVz_srt+160;
 },
 _c1tuG() //  [R1, R2]
         { []
         }
     {offset
       c1tuG: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1tuM; else goto c1tuL;
       c1tuM: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c1tuL: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tuG_info" {
     block_c1tuG_info:
         const _c1tuG;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.596196715 UTC

[section ""data" . GHC.Real.$fIntegralInteger_closure" {
     GHC.Real.$fIntegralInteger_closure:
         const GHC.Real.C:Integral_con_info;
         const GHC.Real.$fRealInteger_closure+1;
         const GHC.Enum.$fEnumInteger_closure;
         const GHC.Real.$fIntegralInteger_$cquot_closure+2;
         const GHC.Real.$fIntegralInteger_$crem_closure+2;
         const GHC.Real.$fIntegralInteger_$cdiv_closure+2;
         const GHC.Real.$fIntegralInteger_$cmod_closure+2;
         const GHC.Real.$fIntegralInteger_$cquotRem_closure+2;
         const GHC.Real.$fIntegralInteger_$cdivMod_closure+2;
         const GHC.Real.$fIntegralInteger_$ctoInteger_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.599758811 UTC

[section ""data" . GHC.Real.$fIntegralWord_$cquot_closure" {
     GHC.Real.$fIntegralWord_$cquot_closure:
         const GHC.Real.$fIntegralWord_$cquot_info;
         const 0;
 },
 GHC.Real.$fIntegralWord_$cquot_entry() //  [R2, R3]
         { []
         }
     {offset
       c1tvd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1tvh; else goto c1tvi;
       c1tvh: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fIntegralWord_$cquot_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1tvi: // global
           I64[Sp - 16] = block_c1tva_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1tvB; else goto c1tvb;
       u1tvB: // global
           call _c1tva(R1) args: 0, res: 0, upd: 0;
       c1tvb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fIntegralWord_$cquot_info" {
     GHC.Real.$fIntegralWord_$cquot_info:
         const GHC.Real.$fIntegralWord_$cquot_entry;
         const 0;
         const 17596481011726;
         const 8589934607;
         const S1sVz_srt+160;
 },
 _c1tva() //  [R1]
         { []
         }
     {offset
       c1tva: // global
           I64[Sp] = block_c1tvg_info;
           _s1sje::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1sje::I64;
           if (R1 & 7 != 0) goto u1tvA; else goto c1tvk;
       u1tvA: // global
           call _c1tvg(R1) args: 0, res: 0, upd: 0;
       c1tvk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tva_info" {
     block_c1tva_info:
         const _c1tva;
         const 1;
         const 4294967326;
         const S1sVz_srt+160;
 },
 _c1tvg() //  [R1]
         { []
         }
     {offset
       c1tvg: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1tvq; else goto c1tvp;
       c1tvq: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1tvp: // global
           _s1sjh::I64 = I64[R1 + 7];
           if (_s1sjh::I64 != 0) goto c1tvy; else goto c1tvz;
       c1tvy: // global
           I64[Hp - 8] = GHC.Types.W#_con_info;
           I64[Hp] = I64[Sp + 8] / _s1sjh::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1tvz: // global
           Hp = Hp - 16;
           R1 = GHC.Real.divZeroError_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tvg_info" {
     block_c1tvg_info:
         const _c1tvg;
         const 65;
         const 4294967326;
         const S1sVz_srt+160;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.60979764 UTC

[section ""data" . GHC.Real.$fIntegralWord_$crem_closure" {
     GHC.Real.$fIntegralWord_$crem_closure:
         const GHC.Real.$fIntegralWord_$crem_info;
         const 0;
 },
 GHC.Real.$fIntegralWord_$crem_entry() //  [R2, R3]
         { []
         }
     {offset
       c1tw1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1tw5; else goto c1tw6;
       c1tw5: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fIntegralWord_$crem_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1tw6: // global
           I64[Sp - 16] = block_c1tvY_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1twp; else goto c1tvZ;
       u1twp: // global
           call _c1tvY(R1) args: 0, res: 0, upd: 0;
       c1tvZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fIntegralWord_$crem_info" {
     GHC.Real.$fIntegralWord_$crem_info:
         const GHC.Real.$fIntegralWord_$crem_entry;
         const 0;
         const 35188667056142;
         const 8589934607;
         const S1sVz_srt+160;
 },
 _c1tvY() //  [R1]
         { []
         }
     {offset
       c1tvY: // global
           I64[Sp] = block_c1tw4_info;
           _s1sjm::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1sjm::I64;
           if (R1 & 7 != 0) goto u1two; else goto c1tw8;
       u1two: // global
           call _c1tw4(R1) args: 0, res: 0, upd: 0;
       c1tw8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tvY_info" {
     block_c1tvY_info:
         const _c1tvY;
         const 1;
         const 4294967326;
         const S1sVz_srt+160;
 },
 _c1tw4() //  [R1]
         { []
         }
     {offset
       c1tw4: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1twe; else goto c1twd;
       c1twe: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1twd: // global
           _s1sjp::I64 = I64[R1 + 7];
           if (_s1sjp::I64 != 0) goto c1twm; else goto c1twn;
       c1twm: // global
           I64[Hp - 8] = GHC.Types.W#_con_info;
           I64[Hp] = I64[Sp + 8] % _s1sjp::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1twn: // global
           Hp = Hp - 16;
           R1 = GHC.Real.divZeroError_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tw4_info" {
     block_c1tw4_info:
         const _c1tw4;
         const 65;
         const 4294967326;
         const S1sVz_srt+160;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.618342611 UTC

[section ""data" . GHC.Real.$fIntegralWord_$cquotRem_closure" {
     GHC.Real.$fIntegralWord_$cquotRem_closure:
         const GHC.Real.$fIntegralWord_$cquotRem_info;
         const 0;
 },
 GHC.Real.$fIntegralWord_$cquotRem_entry() //  [R2, R3]
         { []
         }
     {offset
       c1twP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1twT; else goto c1twU;
       c1twT: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fIntegralWord_$cquotRem_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1twU: // global
           I64[Sp - 16] = block_c1twM_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1txc; else goto c1twN;
       u1txc: // global
           call _c1twM(R1) args: 0, res: 0, upd: 0;
       c1twN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fIntegralWord_$cquotRem_info" {
     GHC.Real.$fIntegralWord_$cquotRem_info:
         const GHC.Real.$fIntegralWord_$cquotRem_entry;
         const 0;
         const 70373039144974;
         const 8589934607;
         const S1sVz_srt+160;
 },
 _c1twM() //  [R1]
         { []
         }
     {offset
       c1twM: // global
           I64[Sp] = block_c1twS_info;
           _s1sju::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1sju::I64;
           if (R1 & 7 != 0) goto u1txb; else goto c1twW;
       u1txb: // global
           call _c1twS(R1) args: 0, res: 0, upd: 0;
       c1twW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1twM_info" {
     block_c1twM_info:
         const _c1twM;
         const 1;
         const 4294967326;
         const S1sVz_srt+160;
 },
 _c1twS() //  [R1]
         { []
         }
     {offset
       c1twS: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c1tx2; else goto c1tx1;
       c1tx2: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1tx1: // global
           _s1sjx::I64 = I64[R1 + 7];
           if (_s1sjx::I64 != 0) goto c1tx9; else goto c1txa;
       c1tx9: // global
           (_s1sjz::I64, _s1sjA::I64) = call MO_U_QuotRem W64(I64[Sp + 8], _s1sjx::I64);
           I64[Hp - 48] = GHC.Types.W#_con_info;
           I64[Hp - 40] = _s1sjA::I64;
           I64[Hp - 32] = GHC.Types.W#_con_info;
           I64[Hp - 24] = _s1sjz::I64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1txa: // global
           Hp = Hp - 56;
           R1 = GHC.Real.divZeroError_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1twS_info" {
     block_c1twS_info:
         const _c1twS;
         const 65;
         const 4294967326;
         const S1sVz_srt+160;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.628975394 UTC

[section ""data" . GHC.Real.$fIntegralWord_$cdivMod_closure" {
     GHC.Real.$fIntegralWord_$cdivMod_closure:
         const GHC.Real.$fIntegralWord_$cdivMod_info;
         const 0;
 },
 sat_s1sjN_entry() //  [R1]
         { []
         }
     {offset
       c1txU: // global
           _s1sjN::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1txX; else goto c1txY;
       c1txY: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1ty0; else goto c1txZ;
       c1ty0: // global
           HpAlloc = 16;
           goto c1txX;
       c1txX: // global
           R1 = _s1sjN::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1txZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1sjN::P64;
           _s1sjM::I64 = I64[_s1sjN::P64 + 16] % I64[_s1sjN::P64 + 24];
           I64[Hp - 8] = GHC.Types.W#_con_info;
           I64[Hp] = _s1sjM::I64;
           R1 = Hp - 7;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sjN_info" {
     sat_s1sjN_info:
         const sat_s1sjN_entry;
         const 8589934592;
         const 20;
 },
 sat_s1sjL_entry() //  [R1]
         { []
         }
     {offset
       c1ty7: // global
           _s1sjL::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1tya; else goto c1tyb;
       c1tyb: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1tyd; else goto c1tyc;
       c1tyd: // global
           HpAlloc = 16;
           goto c1tya;
       c1tya: // global
           R1 = _s1sjL::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1tyc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1sjL::P64;
           _s1sjK::I64 = I64[_s1sjL::P64 + 16] / I64[_s1sjL::P64 + 24];
           I64[Hp - 8] = GHC.Types.W#_con_info;
           I64[Hp] = _s1sjK::I64;
           R1 = Hp - 7;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sjL_info" {
     sat_s1sjL_info:
         const sat_s1sjL_entry;
         const 8589934592;
         const 20;
 },
 GHC.Real.$fIntegralWord_$cdivMod_entry() //  [R2, R3]
         { []
         }
     {offset
       c1tye: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1tyf; else goto c1tyg;
       c1tyf: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fIntegralWord_$cdivMod_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1tyg: // global
           I64[Sp - 16] = block_c1txC_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1tyq; else goto c1txD;
       u1tyq: // global
           call _c1txC(R1) args: 0, res: 0, upd: 0;
       c1txD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fIntegralWord_$cdivMod_info" {
     GHC.Real.$fIntegralWord_$cdivMod_info:
         const GHC.Real.$fIntegralWord_$cdivMod_entry;
         const 0;
         const 140741783322638;
         const 8589934607;
         const S1sVz_srt+160;
 },
 _c1txC() //  [R1]
         { []
         }
     {offset
       c1txC: // global
           I64[Sp] = block_c1txH_info;
           _s1sjG::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1sjG::I64;
           if (R1 & 7 != 0) goto u1typ; else goto c1txI;
       u1typ: // global
           call _c1txH(R1) args: 0, res: 0, upd: 0;
       c1txI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1txC_info" {
     block_c1txC_info:
         const _c1txC;
         const 1;
         const 4294967326;
         const S1sVz_srt+160;
 },
 _c1txH() //  [R1]
         { []
         }
     {offset
       c1txH: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c1tyk; else goto c1tyj;
       c1tyk: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1tyj: // global
           _s1sjJ::I64 = I64[R1 + 7];
           if (_s1sjJ::I64 != 0) goto c1tyn; else goto c1tyo;
       c1tyn: // global
           I64[Hp - 80] = sat_s1sjN_info;
           _s1sjG::I64 = I64[Sp + 8];
           I64[Hp - 64] = _s1sjG::I64;
           I64[Hp - 56] = _s1sjJ::I64;
           I64[Hp - 48] = sat_s1sjL_info;
           I64[Hp - 32] = _s1sjG::I64;
           I64[Hp - 24] = _s1sjJ::I64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 80;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1tyo: // global
           Hp = Hp - 88;
           R1 = GHC.Real.divZeroError_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1txH_info" {
     block_c1txH_info:
         const _c1txH;
         const 65;
         const 4294967326;
         const S1sVz_srt+160;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.641391375 UTC

[section ""data" . GHC.Real.ratioZeroDenominatorError_closure" {
     GHC.Real.ratioZeroDenominatorError_closure:
         const GHC.Real.ratioZeroDenominatorError_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Real.ratioZeroDenominatorError_entry() //  [R1]
         { []
         }
     {offset
       c1tz6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1tz7; else goto c1tz8;
       c1tz7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1tz8: // global
           (_c1tz3::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c1tz3::I64 == 0) goto c1tz5; else goto c1tz4;
       c1tz5: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c1tz4: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c1tz3::I64;
           R1 = GHC.Exception.ratioZeroDenomException_closure;
           Sp = Sp - 16;
           call stg_raise#(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Real.ratioZeroDenominatorError_info" {
     GHC.Real.ratioZeroDenominatorError_info:
         const GHC.Real.ratioZeroDenominatorError_entry;
         const 0;
         const 4294967317;
         const S1sVz_srt+288;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.647031719 UTC

[section ""data" . GHC.Real.$fFractionalRatio_$s$crecip_closure" {
     GHC.Real.$fFractionalRatio_$s$crecip_closure:
         const GHC.Real.$fFractionalRatio_$s$crecip_info;
         const 0;
 },
 GHC.Real.$fFractionalRatio_$s$crecip_entry() //  [R2]
         { []
         }
     {offset
       c1tzo: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1tzp; else goto c1tzq;
       c1tzp: // global
           R2 = R2;
           R1 = GHC.Real.$fFractionalRatio_$s$crecip_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1tzq: // global
           I64[Sp - 8] = block_c1tzl_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1tA6; else goto c1tzm;
       u1tA6: // global
           call _c1tzl(R1) args: 0, res: 0, upd: 0;
       c1tzm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fFractionalRatio_$s$crecip_info" {
     GHC.Real.$fFractionalRatio_$s$crecip_info:
         const GHC.Real.$fFractionalRatio_$s$crecip_entry;
         const 0;
         const 108086395351859214;
         const 4294967301;
         const S1sVz_srt+112;
 },
 _c1tzl() //  [R1]
         { []
         }
     {offset
       c1tzl: // global
           I64[Sp - 16] = block_c1tzt_info;
           R3 = GHC.Real.even1_closure;
           _s1sjQ::P64 = P64[R1 + 7];
           R2 = _s1sjQ::P64;
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp] = _s1sjQ::P64;
           Sp = Sp - 16;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tzl_info" {
     block_c1tzl_info:
         const _c1tzl;
         const 0;
         const 36028801313931294;
         const S1sVz_srt+112;
 },
 _c1tzt() //  [R1]
         { []
         }
     {offset
       c1tzt: // global
           if (R1 == 1) goto c1tA5; else goto c1tzB;
       c1tA5: // global
           R1 = GHC.Real.ratioZeroDenominatorError_closure;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c1tzB: // global
           I64[Sp] = block_c1tzy_info;
           R3 = GHC.Real.even1_closure;
           R2 = P64[Sp + 16];
           call GHC.Integer.Type.ltInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tzt_info" {
     block_c1tzt_info:
         const _c1tzt;
         const 2;
         const 36028801313931294;
         const S1sVz_srt+112;
 },
 _c1tzy() //  [R1]
         { []
         }
     {offset
       c1tzy: // global
           _s1sjR::P64 = P64[Sp + 8];
           if (R1 == 1) goto c1tzX; else goto c1tzH;
       c1tzX: // global
           I64[Sp + 8] = block_c1tzN_info;
           R2 = _s1sjR::P64;
           Sp = Sp + 8;
           call GHC.Integer.Type.negateInteger_entry(R2) args: 8, res: 8, upd: 8;
       c1tzH: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1tzK; else goto c1tzJ;
       c1tzK: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c1tzJ: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = _s1sjR::P64;
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tzy_info" {
     block_c1tzy_info:
         const _c1tzy;
         const 2;
         const 30;
 },
 _c1tzN() //  [R1]
         { []
         }
     {offset
       c1tzN: // global
           I64[Sp] = block_c1tzR_info;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Integer.Type.negateInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tzN_info" {
     block_c1tzN_info:
         const _c1tzN;
         const 1;
         const 30;
 },
 _c1tzR() //  [R1]
         { []
         }
     {offset
       c1tzR: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1tA1; else goto c1tA0;
       c1tA1: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1tA0: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tzR_info" {
     block_c1tzR_info:
         const _c1tzR;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.659465896 UTC

[section ""data" . GHC.Real.overflowError_closure" {
     GHC.Real.overflowError_closure:
         const GHC.Real.overflowError_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Real.overflowError_entry() //  [R1]
         { []
         }
     {offset
       c1tAK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1tAL; else goto c1tAM;
       c1tAL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1tAM: // global
           (_c1tAH::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c1tAH::I64 == 0) goto c1tAJ; else goto c1tAI;
       c1tAJ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c1tAI: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c1tAH::I64;
           R1 = GHC.Exception.overflowException_closure;
           Sp = Sp - 16;
           call stg_raise#(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Real.overflowError_info" {
     GHC.Real.overflowError_info:
         const GHC.Real.overflowError_entry;
         const 0;
         const 4294967317;
         const S1sVz_srt+312;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.663236865 UTC

[section ""data" . lvl_r1j38_closure" {
     lvl_r1j38_closure:
         const (,)_con_info;
         const GHC.Real.overflowError_closure;
         const GHC.Real.$fIntegralInt1_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.669091568 UTC

[section ""data" . GHC.Real.$fIntegralInt_$cdivMod_closure" {
     GHC.Real.$fIntegralInt_$cdivMod_closure:
         const GHC.Real.$fIntegralInt_$cdivMod_info;
         const 0;
 },
 GHC.Real.$fIntegralInt_$cdivMod_entry() //  [R2, R3]
         { []
         }
     {offset
       c1tB3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1tB7; else goto c1tB8;
       c1tB7: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fIntegralInt_$cdivMod_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1tB8: // global
           I64[Sp - 16] = block_c1tB0_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1tDv; else goto c1tB1;
       u1tDv: // global
           call _c1tB0(R1) args: 0, res: 0, upd: 0;
       c1tB1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fIntegralInt_$cdivMod_info" {
     GHC.Real.$fIntegralInt_$cdivMod_info:
         const GHC.Real.$fIntegralInt_$cdivMod_entry;
         const 0;
         const 13510803177078798;
         const 8589934607;
         const S1sVz_srt+160;
 },
 _c1tB0() //  [R1]
         { []
         }
     {offset
       c1tB0: // global
           I64[Sp] = block_c1tB6_info;
           _s1sk0::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1sk0::I64;
           if (R1 & 7 != 0) goto u1tDu; else goto c1tBa;
       u1tDu: // global
           call _c1tB6(R1) args: 0, res: 0, upd: 0;
       c1tBa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tB0_info" {
     block_c1tB0_info:
         const _c1tB0;
         const 1;
         const 9007203549708318;
         const S1sVz_srt+160;
 },
 _c1tB6() //  [R1]
         { []
         }
     {offset
       c1tB6: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c1tBg; else goto c1tBf;
       c1tBg: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1tBf: // global
           _s1sk0::I64 = I64[Sp + 8];
           _s1sk3::I64 = I64[R1 + 7];
           if (_s1sk3::I64 != (-1)) goto u1tDt; else goto c1tDr;
       u1tDt: // global
           if (_s1sk3::I64 != 0) goto c1tCV; else goto c1tDs;
       c1tCV: // global
           if (%MO_S_Le_W64(_s1sk0::I64, 0)) goto c1tBW; else goto c1tCT;
       c1tBW: // global
           if (%MO_S_Ge_W64(_s1sk0::I64, 0)) goto c1tBt; else goto c1tBU;
       c1tBt: // global
           (_s1sk7::I64, _s1sk8::I64) = call MO_S_QuotRem W64(_s1sk0::I64, _s1sk3::I64);
           I64[Hp - 48] = GHC.Types.I#_con_info;
           I64[Hp - 40] = _s1sk8::I64;
           I64[Hp - 32] = GHC.Types.I#_con_info;
           I64[Hp - 24] = _s1sk7::I64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1tBU: // global
           if (%MO_S_Le_W64(_s1sk3::I64, 0)) goto c1tBC; else goto c1tBT;
       c1tBC: // global
           (_s1skd::I64, _s1ske::I64) = call MO_S_QuotRem W64(_s1sk0::I64, _s1sk3::I64);
           I64[Hp - 48] = GHC.Types.I#_con_info;
           I64[Hp - 40] = _s1ske::I64;
           I64[Hp - 32] = GHC.Types.I#_con_info;
           I64[Hp - 24] = _s1skd::I64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1tBT: // global
           (_s1skj::I64, _s1skk::I64) = call MO_S_QuotRem W64(_s1sk0::I64 + 1, _s1sk3::I64);
           I64[Hp - 48] = GHC.Types.I#_con_info;
           I64[Hp - 40] = _s1skk::I64 + _s1sk3::I64 - 1;
           I64[Hp - 32] = GHC.Types.I#_con_info;
           I64[Hp - 24] = _s1skj::I64 - 1;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1tCT: // global
           if (%MO_S_Ge_W64(_s1sk3::I64, 0)) goto c1tCB; else goto c1tCS;
       c1tCB: // global
           if (%MO_S_Ge_W64(_s1sk0::I64, 0)) goto c1tC8; else goto c1tCz;
       c1tC8: // global
           (_s1skt::I64, _s1sku::I64) = call MO_S_QuotRem W64(_s1sk0::I64, _s1sk3::I64);
           I64[Hp - 48] = GHC.Types.I#_con_info;
           I64[Hp - 40] = _s1sku::I64;
           I64[Hp - 32] = GHC.Types.I#_con_info;
           I64[Hp - 24] = _s1skt::I64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1tCz: // global
           if (%MO_S_Le_W64(_s1sk3::I64, 0)) goto c1tCh; else goto c1tCy;
       c1tCh: // global
           (_s1skz::I64, _s1skA::I64) = call MO_S_QuotRem W64(_s1sk0::I64, _s1sk3::I64);
           I64[Hp - 48] = GHC.Types.I#_con_info;
           I64[Hp - 40] = _s1skA::I64;
           I64[Hp - 32] = GHC.Types.I#_con_info;
           I64[Hp - 24] = _s1skz::I64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1tCy: // global
           (_s1skF::I64, _s1skG::I64) = call MO_S_QuotRem W64(_s1sk0::I64 + 1, _s1sk3::I64);
           I64[Hp - 48] = GHC.Types.I#_con_info;
           I64[Hp - 40] = _s1skG::I64 + _s1sk3::I64 - 1;
           I64[Hp - 32] = GHC.Types.I#_con_info;
           I64[Hp - 24] = _s1skF::I64 - 1;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1tCS: // global
           (_s1skO::I64, _s1skP::I64) = call MO_S_QuotRem W64(_s1sk0::I64 - 1, _s1sk3::I64);
           I64[Hp - 48] = GHC.Types.I#_con_info;
           I64[Hp - 40] = _s1skP::I64 + _s1sk3::I64 + 1;
           I64[Hp - 32] = GHC.Types.I#_con_info;
           I64[Hp - 24] = _s1skO::I64 - 1;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1tDs: // global
           Hp = Hp - 56;
           R1 = GHC.Real.divZeroError_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c1tDr: // global
           if (_s1sk0::I64 == (-9223372036854775808)) goto c1tDq; else goto c1tDp;
       c1tDq: // global
           Hp = Hp - 56;
           R1 = lvl_r1j38_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1tDp: // global
           if (%MO_S_Le_W64(_s1sk0::I64, 0)) goto c1tD6; else goto c1tDn;
       c1tD6: // global
           (_s1skY::I64, _s1skZ::I64) = call MO_S_QuotRem W64(_s1sk0::I64, (-1));
           I64[Hp - 48] = GHC.Types.I#_con_info;
           I64[Hp - 40] = _s1skZ::I64;
           I64[Hp - 32] = GHC.Types.I#_con_info;
           I64[Hp - 24] = _s1skY::I64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1tDn: // global
           (_s1sl4::I64, _s1sl5::I64) = call MO_S_QuotRem W64(_s1sk0::I64 - 1, (-1));
           I64[Hp - 48] = GHC.Types.I#_con_info;
           I64[Hp - 40] = _s1sl5::I64;
           I64[Hp - 32] = GHC.Types.I#_con_info;
           I64[Hp - 24] = _s1sl4::I64 - 1;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tB6_info" {
     block_c1tB6_info:
         const _c1tB6;
         const 65;
         const 9007203549708318;
         const S1sVz_srt+160;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.682597101 UTC

[section ""data" . GHC.Real.$fIntegralInt_$cquotRem_closure" {
     GHC.Real.$fIntegralInt_$cquotRem_closure:
         const GHC.Real.$fIntegralInt_$cquotRem_info;
         const 0;
 },
 GHC.Real.$fIntegralInt_$cquotRem_entry() //  [R2, R3]
         { []
         }
     {offset
       c1tF1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1tF5; else goto c1tF6;
       c1tF5: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fIntegralInt_$cquotRem_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1tF6: // global
           I64[Sp - 16] = block_c1tEY_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1tFz; else goto c1tEZ;
       u1tFz: // global
           call _c1tEY(R1) args: 0, res: 0, upd: 0;
       c1tEZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fIntegralInt_$cquotRem_info" {
     GHC.Real.$fIntegralInt_$cquotRem_info:
         const GHC.Real.$fIntegralInt_$cquotRem_entry;
         const 0;
         const 27021602059190286;
         const 8589934607;
         const S1sVz_srt+160;
 },
 _c1tEY() //  [R1]
         { []
         }
     {offset
       c1tEY: // global
           I64[Sp] = block_c1tF4_info;
           _s1slf::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1slf::I64;
           if (R1 & 7 != 0) goto u1tFy; else goto c1tF8;
       u1tFy: // global
           call _c1tF4(R1) args: 0, res: 0, upd: 0;
       c1tF8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tEY_info" {
     block_c1tEY_info:
         const _c1tEY;
         const 1;
         const 9007203549708318;
         const S1sVz_srt+160;
 },
 _c1tF4() //  [R1]
         { []
         }
     {offset
       c1tF4: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c1tFe; else goto c1tFd;
       c1tFe: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1tFd: // global
           _s1slf::I64 = I64[Sp + 8];
           _s1sli::I64 = I64[R1 + 7];
           if (_s1sli::I64 != (-1)) goto u1tFx; else goto c1tFv;
       u1tFx: // global
           if (_s1sli::I64 != 0) goto c1tFl; else goto c1tFw;
       c1tFl: // global
           (_s1slk::I64, _s1sll::I64) = call MO_S_QuotRem W64(_s1slf::I64, _s1sli::I64);
           I64[Hp - 48] = GHC.Types.I#_con_info;
           I64[Hp - 40] = _s1sll::I64;
           I64[Hp - 32] = GHC.Types.I#_con_info;
           I64[Hp - 24] = _s1slk::I64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1tFw: // global
           Hp = Hp - 56;
           R1 = GHC.Real.divZeroError_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c1tFv: // global
           if (_s1slf::I64 == (-9223372036854775808)) goto c1tFu; else goto c1tFt;
       c1tFu: // global
           Hp = Hp - 56;
           R1 = lvl_r1j38_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1tFt: // global
           (_s1slq::I64, _s1slr::I64) = call MO_S_QuotRem W64(_s1slf::I64, (-1));
           I64[Hp - 48] = GHC.Types.I#_con_info;
           I64[Hp - 40] = _s1slr::I64;
           I64[Hp - 32] = GHC.Types.I#_con_info;
           I64[Hp - 24] = _s1slq::I64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tF4_info" {
     block_c1tF4_info:
         const _c1tF4;
         const 65;
         const 9007203549708318;
         const S1sVz_srt+160;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.691053381 UTC

[section ""data" . GHC.Real.$w$cdiv_closure" {
     GHC.Real.$w$cdiv_closure:
         const GHC.Real.$w$cdiv_info;
         const 0;
 },
 GHC.Real.$w$cdiv_entry() //  [R2, R3]
         { []
         }
     {offset
       c1tGd: // global
           if (R3 == (-1)) goto c1tGb; else goto u1tGm;
       c1tGb: // global
           if (R2 == (-9223372036854775808)) goto c1tGl; else goto c1tGk;
       c1tGl: // global
           R1 = GHC.Real.overflowError_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c1tGk: // global
           R3 = (-1);
           R2 = R2;
           call GHC.Classes.divInt#_entry(R3, R2) args: 8, res: 0, upd: 8;
       u1tGm: // global
           if (R3 == 0) goto c1tGc; else goto c1tGa;
       c1tGc: // global
           R1 = GHC.Real.divZeroError_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c1tGa: // global
           R3 = R3;
           R2 = R2;
           call GHC.Classes.divInt#_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$w$cdiv_info" {
     GHC.Real.$w$cdiv_info:
         const GHC.Real.$w$cdiv_entry;
         const 0;
         const 36028801313931278;
         const 8589934604;
         const S1sVz_srt+160;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.696245025 UTC

[section ""data" . GHC.Real.$fIntegralInt_$cdiv_closure" {
     GHC.Real.$fIntegralInt_$cdiv_closure:
         const GHC.Real.$fIntegralInt_$cdiv_info;
         const 0;
 },
 GHC.Real.$fIntegralInt_$cdiv_entry() //  [R2, R3]
         { []
         }
     {offset
       c1tGz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1tGM; else goto c1tGN;
       c1tGM: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fIntegralInt_$cdiv_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1tGN: // global
           I64[Sp - 16] = block_c1tGw_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1tGU; else goto c1tGx;
       u1tGU: // global
           call _c1tGw(R1) args: 0, res: 0, upd: 0;
       c1tGx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fIntegralInt_$cdiv_info" {
     GHC.Real.$fIntegralInt_$cdiv_info:
         const GHC.Real.$fIntegralInt_$cdiv_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S1sVz_srt+352;
 },
 _c1tGw() //  [R1]
         { []
         }
     {offset
       c1tGw: // global
           I64[Sp] = block_c1tGC_info;
           _s1slE::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1slE::I64;
           if (R1 & 7 != 0) goto u1tGT; else goto c1tGD;
       u1tGT: // global
           call _c1tGC(R1) args: 0, res: 0, upd: 0;
       c1tGD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tGw_info" {
     block_c1tGw_info:
         const _c1tGw;
         const 1;
         const 4294967326;
         const S1sVz_srt+360;
 },
 _c1tGC() //  [R1]
         { []
         }
     {offset
       c1tGC: // global
           _s1slE::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_c1tGH_info;
           R3 = I64[R1 + 7];
           R2 = _s1slE::I64;
           Sp = Sp + 8;
           call GHC.Real.$w$cdiv_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tGC_info" {
     block_c1tGC_info:
         const _c1tGC;
         const 65;
         const 4294967326;
         const S1sVz_srt+360;
 },
 _c1tGH() //  [R1]
         { []
         }
     {offset
       c1tGH: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1tGS; else goto c1tGR;
       c1tGS: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c1tGR: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tGH_info" {
     block_c1tGH_info:
         const _c1tGH;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.706731124 UTC

[section ""data" . GHC.Real.$fIntegralInt_$cquot_closure" {
     GHC.Real.$fIntegralInt_$cquot_closure:
         const GHC.Real.$fIntegralInt_$cquot_info;
         const 0;
 },
 GHC.Real.$fIntegralInt_$cquot_entry() //  [R2, R3]
         { []
         }
     {offset
       c1tHn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1tHr; else goto c1tHs;
       c1tHr: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fIntegralInt_$cquot_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1tHs: // global
           I64[Sp - 16] = block_c1tHk_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1tHX; else goto c1tHl;
       u1tHX: // global
           call _c1tHk(R1) args: 0, res: 0, upd: 0;
       c1tHl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fIntegralInt_$cquot_info" {
     GHC.Real.$fIntegralInt_$cquot_info:
         const GHC.Real.$fIntegralInt_$cquot_entry;
         const 0;
         const 324259177465643022;
         const 8589934607;
         const S1sVz_srt+160;
 },
 _c1tHk() //  [R1]
         { []
         }
     {offset
       c1tHk: // global
           I64[Sp] = block_c1tHq_info;
           _s1slL::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1slL::I64;
           if (R1 & 7 != 0) goto u1tHW; else goto c1tHu;
       u1tHW: // global
           call _c1tHq(R1) args: 0, res: 0, upd: 0;
       c1tHu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tHk_info" {
     block_c1tHk_info:
         const _c1tHk;
         const 1;
         const 36028801313931294;
         const S1sVz_srt+160;
 },
 _c1tHq() //  [R1]
         { []
         }
     {offset
       c1tHq: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1tHA; else goto c1tHz;
       c1tHA: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1tHz: // global
           _s1slL::I64 = I64[Sp + 8];
           _s1slO::I64 = I64[R1 + 7];
           if (_s1slO::I64 != (-1)) goto u1tHV; else goto c1tHT;
       u1tHV: // global
           if (_s1slO::I64 != 0) goto c1tHI; else goto c1tHU;
       c1tHI: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = %MO_S_Quot_W64(_s1slL::I64, _s1slO::I64);
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1tHU: // global
           Hp = Hp - 16;
           R1 = GHC.Real.divZeroError_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c1tHT: // global
           if (_s1slL::I64 == (-9223372036854775808)) goto c1tHS; else goto c1tHR;
       c1tHS: // global
           Hp = Hp - 16;
           R1 = GHC.Real.overflowError_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c1tHR: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = %MO_S_Quot_W64(_s1slL::I64, (-1));
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tHq_info" {
     block_c1tHq_info:
         const _c1tHq;
         const 65;
         const 36028801313931294;
         const S1sVz_srt+160;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.714164957 UTC

[section ""data" . GHC.Real.$fIntegralInt_closure" {
     GHC.Real.$fIntegralInt_closure:
         const GHC.Real.C:Integral_con_info;
         const GHC.Real.$fRealInt_closure+1;
         const GHC.Enum.$fEnumInt_closure;
         const GHC.Real.$fIntegralInt_$cquot_closure+2;
         const GHC.Real.$fIntegralInt_$crem_closure+2;
         const GHC.Real.$fIntegralInt_$cdiv_closure+2;
         const GHC.Real.$fIntegralInt_$cmod_closure+2;
         const GHC.Real.$fIntegralInt_$cquotRem_closure+2;
         const GHC.Real.$fIntegralInt_$cdivMod_closure+2;
         const GHC.Real.$fIntegralInt_$ctoInteger_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.715999592 UTC

[section ""data" . lvl1_r1j39_closure" {
     lvl1_r1j39_closure:
         const GHC.Types.I#_con_info;
         const (-1);
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.71974837 UTC

[section ""data" . lvl2_r1j3a_closure" {
     lvl2_r1j3a_closure:
         const lvl2_r1j3a_info;
         const 0;
         const 0;
         const 0;
 },
 lvl2_r1j3a_entry() //  [R1]
         { []
         }
     {offset
       c1tII: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1tIJ; else goto c1tIK;
       c1tIJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1tIK: // global
           (_c1tIF::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c1tIF::I64 == 0) goto c1tIH; else goto c1tIG;
       c1tIH: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c1tIG: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c1tIF::I64;
           R3 = 0;
           R2 = lvl1_r1j39_closure+1;
           Sp = Sp - 16;
           call GHC.Real.$wgcd'_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl2_r1j3a_info" {
     lvl2_r1j3a_info:
         const lvl2_r1j3a_entry;
         const 0;
         const 4294967317;
         const S1sVz_srt+376;
 },
 section ""data" . GHC.Real.$wgcd'_closure" {
     GHC.Real.$wgcd'_closure:
         const GHC.Real.$wgcd'_info;
         const 0;
 },
 GHC.Real.$wgcd'_entry() //  [R2, R3]
         { []
         }
     {offset
       c1tIP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1tIQ; else goto u1tIW;
       c1tIQ: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$wgcd'_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       u1tIW: // global
           P64[Sp - 16] = R2;
           I64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _c1tIp() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . GHC.Real.$wgcd'_info" {
     GHC.Real.$wgcd'_info:
         const GHC.Real.$wgcd'_entry;
         const 0;
         const 12884901902;
         const 8589934606;
         const S1sVz_srt+376;
 },
 _c1tIp() //  []
         { []
         }
     {offset
       c1tIp: // global
           _s1slW::I64 = I64[Sp + 8];
           if (_s1slW::I64 != (-1)) goto u1tIV; else goto c1tIN;
       u1tIV: // global
           _s1slU::P64 = P64[Sp];
           if (_s1slW::I64 != 0) goto c1tIM; else goto c1tIO;
       c1tIM: // global
           I64[Sp] = block_c1tIu_info;
           R1 = _s1slU::P64;
           I64[Sp + 8] = _s1slW::I64;
           if (R1 & 7 != 0) goto u1tIY; else goto c1tIv;
       u1tIY: // global
           call _c1tIu(R1) args: 0, res: 0, upd: 0;
       c1tIv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c1tIO: // global
           R1 = _s1slU::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c1tIN: // global
           R1 = lvl2_r1j3a_closure;
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c1tIu() //  [R1]
         { []
         }
     {offset
       c1tIu: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1tIU; else goto c1tIT;
       c1tIU: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1tIT: // global
           _s1slW::I64 = I64[Sp + 8];
           _s1slZ::I64 = %MO_S_Rem_W64(I64[R1 + 7], _s1slW::I64);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s1slW::I64;
           P64[Sp] = Hp - 7;
           I64[Sp + 8] = _s1slZ::I64;
           call _c1tIp() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1tIu_info" {
     block_c1tIu_info:
         const _c1tIu;
         const 65;
         const 4294967326;
         const S1sVz_srt+384;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.730134654 UTC

[section ""data" . GHC.Real.$fEnumRatio_gcd'_closure" {
     GHC.Real.$fEnumRatio_gcd'_closure:
         const GHC.Real.$fEnumRatio_gcd'_info;
         const 0;
 },
 GHC.Real.$fEnumRatio_gcd'_entry() //  [R2, R3]
         { []
         }
     {offset
       c1tJz: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1tJA; else goto u1tJN;
       c1tJA: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fEnumRatio_gcd'_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       u1tJN: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _c1tJr() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . GHC.Real.$fEnumRatio_gcd'_info" {
     GHC.Real.$fEnumRatio_gcd'_info:
         const GHC.Real.$fEnumRatio_gcd'_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S1sVz_srt+392;
 },
 _c1tJr() //  []
         { []
         }
     {offset
       c1tJr: // global
           I64[Sp - 8] = block_c1tJu_info;
           R3 = GHC.Real.even1_closure;
           R2 = P64[Sp + 8];
           Sp = Sp - 8;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 _c1tJu() //  [R1]
         { []
         }
     {offset
       c1tJu: // global
           _s1sm1::P64 = P64[Sp + 8];
           if (R1 == 1) goto c1tJy; else goto c1tJx;
       c1tJy: // global
           R1 = _s1sm1::P64 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c1tJx: // global
           I64[Sp + 8] = block_c1tJE_info;
           R3 = P64[Sp + 16];
           R2 = _s1sm1::P64;
           Sp = Sp + 8;
           call GHC.Integer.Type.remInteger_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tJu_info" {
     block_c1tJu_info:
         const _c1tJu;
         const 2;
         const 4294967326;
         const S1sVz_srt+400;
 },
 _c1tJE() //  [R1]
         { []
         }
     {offset
       c1tJE: // global
           P64[Sp] = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call _c1tJr() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1tJE_info" {
     block_c1tJE_info:
         const _c1tJE;
         const 1;
         const 4294967326;
         const S1sVz_srt+400;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.742582832 UTC

[section ""data" . GHC.Real.gcd_closure" {
     GHC.Real.gcd_closure:
         const GHC.Real.gcd_info;
         const 0;
 },
 lvl8_s1sm9_entry() //  [R1]
         { []
         }
     {offset
       c1tKL: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1tKM; else goto c1tKN;
       c1tKM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1tKN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c1tKJ_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl8_s1sm9_info" {
     lvl8_s1sm9_info:
         const lvl8_s1sm9_entry;
         const 1;
         const 4294967312;
         const S1sVz_srt+400;
 },
 _c1tKJ() //  [R1]
         { []
         }
     {offset
       c1tKJ: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = GHC.Real.even1_closure;
           Sp = Sp - 8;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1tKJ_info" {
     block_c1tKJ_info:
         const _c1tKJ;
         const 0;
         const 4294967326;
         const S1sVz_srt+400;
 },
 $dNum_s1smd_entry() //  [R1]
         { []
         }
     {offset
       c1tKT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1tKU; else goto c1tKV;
       c1tKU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1tKV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dNum_s1smd_info" {
     $dNum_s1smd_info:
         const $dNum_s1smd_entry;
         const 1;
         const 16;
 },
 sat_s1smk_entry() //  [R1]
         { []
         }
     {offset
       c1tKY: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1tKZ; else goto c1tL0;
       c1tKZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1tL0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Num.abs_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1smk_info" {
     sat_s1smk_info:
         const sat_s1smk_entry;
         const 2;
         const 18;
 },
 sat_s1smj_entry() //  [R1]
         { []
         }
     {offset
       c1tL3: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1tL4; else goto c1tL5;
       c1tL4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1tL5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Num.abs_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1smj_info" {
     sat_s1smj_info:
         const sat_s1smj_entry;
         const 2;
         const 18;
 },
 sat_s1smi_entry() //  [R1]
         { []
         }
     {offset
       c1tL9: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1tLa; else goto c1tLb;
       c1tLa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1tLb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call GHC.Real.rem_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1smi_info" {
     sat_s1smi_info:
         const sat_s1smi_entry;
         const 3;
         const 15;
 },
 GHC.Real.gcd_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1tLc: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c1tLd; else goto c1tLe;
       c1tLd: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.gcd_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1tLe: // global
           I64[Sp - 32] = block_c1tKd_info;
           _s1sm5::P64 = R2;
           R2 = R2;
           P64[Sp - 24] = _s1sm5::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.gcd_info" {
     GHC.Real.gcd_info:
         const GHC.Real.gcd_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S1sVz_srt+400;
 },
 _c1tKd() //  [R1]
         { []
         }
     {offset
       c1tKd: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1tLh; else goto c1tLg;
       c1tLh: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1tLg: // global
           I64[Hp - 16] = lvl8_s1sm9_info;
           P64[Hp] = R1;
           I64[Sp - 16] = block_c1tKj_info;
           R2 = R1;
           P64[Sp - 8] = R1;
           P64[Sp] = Hp - 16;
           Sp = Sp - 16;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tKd_info" {
     block_c1tKd_info:
         const _c1tKd;
         const 3;
         const 4294967326;
         const S1sVz_srt+400;
 },
 _c1tKj() //  [R1]
         { []
         }
     {offset
       c1tKj: // global
           I64[Sp] = block_c1tKn_info;
           R2 = R1;
           call GHC.Classes.$p1Ord_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tKj_info" {
     block_c1tKj_info:
         const _c1tKj;
         const 5;
         const 30;
 },
 _c1tKn() //  [R1]
         { []
         }
     {offset
       c1tKn: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c1tLl; else goto c1tLk;
       c1tLl: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1tLk: // global
           I64[Hp - 80] = $dNum_s1smd_info;
           P64[Hp - 64] = P64[Sp + 8];
           I64[Hp - 56] = sat_s1smk_info;
           P64[Hp - 40] = P64[Sp + 40];
           _c1tKr::P64 = Hp - 80;
           P64[Hp - 32] = _c1tKr::P64;
           I64[Hp - 24] = sat_s1smj_info;
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = _c1tKr::P64;
           P64[Sp + 8] = Hp - 56;
           P64[Sp + 32] = Hp - 24;
           P64[Sp + 40] = R1;
           Sp = Sp + 8;
           call _c1tKA() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1tKn_info" {
     block_c1tKn_info:
         const _c1tKn;
         const 5;
         const 30;
 },
 _c1tKA() //  []
         { []
         }
     {offset
       c1tKA: // global
           I64[Sp - 8] = block_c1tKC_info;
           R2 = P64[Sp + 32];
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = P64[Sp];
           P64[Sp - 16] = P64[Sp + 8];
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c1tKC() //  [R1]
         { []
         }
     {offset
       c1tKC: // global
           _s1smf::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto c1tLo; else goto c1tLv;
       c1tLo: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c1tLr; else goto c1tLq;
       c1tLr: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1tLq: // global
           I64[Hp - 32] = sat_s1smi_info;
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = _s1smf::P64;
           _s1smg::P64 = P64[Sp + 8];
           P64[Hp] = _s1smg::P64;
           _s1smf::P64 = _s1smg::P64;
           P64[Sp + 32] = _s1smf::P64;
           P64[Sp + 8] = Hp - 32;
           Sp = Sp + 8;
           call _c1tKA() args: 0, res: 0, upd: 0;
       c1tLv: // global
           R1 = _s1smf::P64;
           Sp = Sp + 48;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tKC_info" {
     block_c1tKC_info:
         const _c1tKC;
         const 5;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.766812102 UTC

[section ""data" . GHC.Real.$w$sreduce_closure" {
     GHC.Real.$w$sreduce_closure:
         const GHC.Real.$w$sreduce_info;
         const 0;
 },
 section ""relreadonly" . u1tNK_srtd" {
     u1tNK_srtd:
         const S1sVz_srt+160;
         const 33;
         const 5905711105;
 },
 GHC.Real.$w$sreduce_entry() //  [R2, R3]
         { []
         }
     {offset
       c1tN1: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1tN2; else goto c1tN3;
       c1tN2: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$w$sreduce_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1tN3: // global
           I64[Sp - 24] = block_c1tMW_info;
           _s1smm::P64 = R3;
           R3 = GHC.Real.even1_closure;
           _s1sml::P64 = R2;
           R2 = _s1smm::P64;
           P64[Sp - 16] = _s1sml::P64;
           P64[Sp - 8] = _s1smm::P64;
           Sp = Sp - 24;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$w$sreduce_info" {
     GHC.Real.$w$sreduce_info:
         const GHC.Real.$w$sreduce_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const u1tNK_srtd;
 },
 _c1tMW() //  [R1]
         { []
         }
     {offset
       c1tMW: // global
           if (R1 == 1) goto c1tN0; else goto c1tMZ;
       c1tN0: // global
           R1 = GHC.Real.ratioZeroDenominatorError_closure;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c1tMZ: // global
           I64[Sp] = block_c1tN6_info;
           R2 = P64[Sp + 16];
           call GHC.Integer.Type.absInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tMW_info" {
     block_c1tMW_info:
         const _c1tMW;
         const 2;
         const 6918091981889470494;
         const S1sVz_srt+160;
 },
 _c1tN6() //  [R1]
         { []
         }
     {offset
       c1tN6: // global
           I64[Sp - 8] = block_c1tNa_info;
           R2 = P64[Sp + 8];
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Integer.Type.absInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tN6_info" {
     block_c1tN6_info:
         const _c1tN6;
         const 2;
         const 6917529031936049182;
         const S1sVz_srt+160;
 },
 _c1tNa() //  [R1]
         { []
         }
     {offset
       c1tNa: // global
           _s1smq::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1tNe_info;
           R3 = _s1smq::P64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Real.$fEnumRatio_gcd'_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tNa_info" {
     block_c1tNa_info:
         const _c1tNa;
         const 3;
         const 6917529031936049182;
         const S1sVz_srt+160;
 },
 _c1tNe() //  [R1]
         { []
         }
     {offset
       c1tNe: // global
           I64[Sp - 8] = block_c1tNl_info;
           R3 = GHC.Real.even1_closure;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tNe_info" {
     block_c1tNe_info:
         const _c1tNe;
         const 2;
         const 4611686022722355230;
         const S1sVz_srt+160;
 },
 _c1tNl() //  [R1]
         { []
         }
     {offset
       c1tNl: // global
           if (R1 == 1) goto c1tNG; else goto c1tNx;
       c1tNG: // global
           R1 = GHC.Real.divZeroError_closure;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c1tNx: // global
           I64[Sp] = block_c1tNq_info;
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 16];
           call GHC.Integer.Type.quotInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tNl_info" {
     block_c1tNl_info:
         const _c1tNl;
         const 3;
         const 4294967326;
         const S1sVz_srt+424;
 },
 _c1tNq() //  [R1]
         { []
         }
     {offset
       c1tNq: // global
           I64[Sp + 16] = block_c1tNu_info;
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 24];
           P64[Sp + 24] = R1;
           Sp = Sp + 16;
           call GHC.Integer.Type.quotInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tNq_info" {
     block_c1tNq_info:
         const _c1tNq;
         const 131;
         const 30;
 },
 _c1tNu() //  [R1]
         { []
         }
     {offset
       c1tNu: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tNu_info" {
     block_c1tNu_info:
         const _c1tNu;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.783247919 UTC

[section ""data" . GHC.Real.reduce_$sreduce_closure" {
     GHC.Real.reduce_$sreduce_closure:
         const GHC.Real.reduce_$sreduce_info;
         const 0;
 },
 GHC.Real.reduce_$sreduce_entry() //  [R2, R3]
         { []
         }
     {offset
       c1tOr: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1tOs; else goto c1tOt;
       c1tOs: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.reduce_$sreduce_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1tOt: // global
           I64[Sp - 8] = block_c1tOo_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Real.$w$sreduce_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.reduce_$sreduce_info" {
     GHC.Real.reduce_$sreduce_info:
         const GHC.Real.reduce_$sreduce_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const S1sVz_srt+416;
 },
 _c1tOo() //  [R1, R2]
         { []
         }
     {offset
       c1tOo: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1tOw; else goto c1tOv;
       c1tOw: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c1tOv: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tOo_info" {
     block_c1tOo_info:
         const _c1tOo;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.789838362 UTC

[section ""data" . GHC.Real.$fRealWord_$ctoRational_closure" {
     GHC.Real.$fRealWord_$ctoRational_closure:
         const GHC.Real.$fRealWord_$ctoRational_info;
         const 0;
 },
 section ""relreadonly" . u1tPc_srtd" {
     u1tPc_srtd:
         const S1sVz_srt;
         const 56;
         const 40532396646335489;
 },
 GHC.Real.$fRealWord_$ctoRational_entry() //  [R2]
         { []
         }
     {offset
       c1tOP: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1tP3; else goto c1tP4;
       c1tP3: // global
           R2 = R2;
           R1 = GHC.Real.$fRealWord_$ctoRational_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1tP4: // global
           I64[Sp - 8] = block_c1tOM_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1tPb; else goto c1tON;
       u1tPb: // global
           call _c1tOM(R1) args: 0, res: 0, upd: 0;
       c1tON: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fRealWord_$ctoRational_info" {
     GHC.Real.$fRealWord_$ctoRational_info:
         const GHC.Real.$fRealWord_$ctoRational_entry;
         const 0;
         const 18446744069414584334;
         const 4294967301;
         const u1tPc_srtd;
 },
 section ""relreadonly" . u1tPd_srtd" {
     u1tPd_srtd:
         const S1sVz_srt;
         const 53;
         const 4503599627371521;
 },
 _c1tOM() //  [R1]
         { []
         }
     {offset
       c1tOM: // global
           I64[Sp] = block_c1tOS_info;
           R2 = I64[R1 + 7];
           call GHC.Integer.Type.wordToInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tOM_info" {
     block_c1tOM_info:
         const _c1tOM;
         const 0;
         const 18446744069414584350;
         const u1tPd_srtd;
 },
 section ""relreadonly" . u1tPe_srtd" {
     u1tPe_srtd:
         const S1sVz_srt;
         const 53;
         const 4503599627371521;
 },
 _c1tOS() //  [R1]
         { []
         }
     {offset
       c1tOS: // global
           I64[Sp] = block_c1tOW_info;
           R3 = GHC.Real.$fEnumRatio1_closure;
           R2 = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tOS_info" {
     block_c1tOS_info:
         const _c1tOS;
         const 0;
         const 18446744069414584350;
         const u1tPe_srtd;
 },
 section ""relreadonly" . u1tPf_srtd" {
     u1tPf_srtd:
         const S1sVz_srt+80;
         const 43;
         const 4398046511105;
 },
 _c1tOW() //  [R1]
         { []
         }
     {offset
       c1tOW: // global
           I64[Sp] = block_c1tP0_info;
           R3 = GHC.Real.$fEnumRatio1_closure;
           R2 = R1;
           call GHC.Real.$w$sreduce_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tOW_info" {
     block_c1tOW_info:
         const _c1tOW;
         const 0;
         const 18446744069414584350;
         const u1tPf_srtd;
 },
 _c1tP0() //  [R1, R2]
         { []
         }
     {offset
       c1tP0: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1tPa; else goto c1tP9;
       c1tPa: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c1tP9: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tP0_info" {
     block_c1tP0_info:
         const _c1tP0;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.802365911 UTC

[section ""data" . GHC.Real.$fRealWord_closure" {
     GHC.Real.$fRealWord_closure:
         const GHC.Real.C:Real_con_info;
         const GHC.Num.$fNumWord_closure;
         const GHC.Classes.$fOrdWord_closure;
         const GHC.Real.$fRealWord_$ctoRational_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.804088752 UTC

[section ""data" . GHC.Real.$fIntegralWord_closure" {
     GHC.Real.$fIntegralWord_closure:
         const GHC.Real.C:Integral_con_info;
         const GHC.Real.$fRealWord_closure+1;
         const GHC.Enum.$fEnumWord_closure;
         const GHC.Real.$fIntegralWord_$cquot_closure+2;
         const GHC.Real.$fIntegralWord_$crem_closure+2;
         const GHC.Real.$fIntegralWord_$cquot_closure+2;
         const GHC.Real.$fIntegralWord_$crem_closure+2;
         const GHC.Real.$fIntegralWord_$cquotRem_closure+2;
         const GHC.Real.$fIntegralWord_$cdivMod_closure+2;
         const GHC.Real.$fIntegralWord_$ctoInteger_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.807992376 UTC

[section ""data" . GHC.Real.$fFractionalRatio_$s$c*_closure" {
     GHC.Real.$fFractionalRatio_$s$c*_closure:
         const GHC.Real.$fFractionalRatio_$s$c*_info;
         const 0;
 },
 section ""relreadonly" . u1tQl_srtd" {
     u1tQl_srtd:
         const S1sVz_srt;
         const 57;
         const 76561193665298433;
 },
 GHC.Real.$fFractionalRatio_$s$c*_entry() //  [R2, R3]
         { []
         }
     {offset
       c1tPR: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1tQa; else goto c1tQb;
       c1tQa: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fFractionalRatio_$s$c*_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1tQb: // global
           I64[Sp - 16] = block_c1tPO_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1tQk; else goto c1tPP;
       u1tQk: // global
           call _c1tPO(R1) args: 0, res: 0, upd: 0;
       c1tPP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fFractionalRatio_$s$c*_info" {
     GHC.Real.$fFractionalRatio_$s$c*_info:
         const GHC.Real.$fFractionalRatio_$s$c*_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const u1tQl_srtd;
 },
 section ""relreadonly" . u1tQm_srtd" {
     u1tQm_srtd:
         const S1sVz_srt;
         const 53;
         const 4503599627370497;
 },
 _c1tPO() //  [R1]
         { []
         }
     {offset
       c1tPO: // global
           I64[Sp - 8] = block_c1tPU_info;
           _s1smM::P64 = P64[R1 + 7];
           _s1smN::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s1smN::P64;
           P64[Sp + 8] = _s1smM::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1tQj; else goto c1tPV;
       u1tQj: // global
           call _c1tPU(R1) args: 0, res: 0, upd: 0;
       c1tPV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tPO_info" {
     block_c1tPO_info:
         const _c1tPO;
         const 1;
         const 18446744069414584350;
         const u1tQm_srtd;
 },
 section ""relreadonly" . u1tQn_srtd" {
     u1tQn_srtd:
         const S1sVz_srt;
         const 53;
         const 4503599627370497;
 },
 _c1tPU() //  [R1]
         { []
         }
     {offset
       c1tPU: // global
           I64[Sp] = block_c1tPZ_info;
           R3 = P64[R1 + 15];
           R2 = P64[Sp + 8];
           P64[Sp + 8] = P64[R1 + 7];
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tPU_info" {
     block_c1tPU_info:
         const _c1tPU;
         const 2;
         const 18446744069414584350;
         const u1tQn_srtd;
 },
 section ""relreadonly" . u1tQo_srtd" {
     u1tQo_srtd:
         const S1sVz_srt;
         const 53;
         const 4503599627370497;
 },
 _c1tPZ() //  [R1]
         { []
         }
     {offset
       c1tPZ: // global
           _s1smP::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1tQ3_info;
           R3 = _s1smP::P64;
           R2 = P64[Sp + 16];
           P64[Sp + 16] = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tPZ_info" {
     block_c1tPZ_info:
         const _c1tPZ;
         const 2;
         const 18446744069414584350;
         const u1tQo_srtd;
 },
 _c1tQ3() //  [R1]
         { []
         }
     {offset
       c1tQ3: // global
           _s1smS::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1tQ7_info;
           R3 = _s1smS::P64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Real.$w$sreduce_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tQ3_info" {
     block_c1tQ3_info:
         const _c1tQ3;
         const 1;
         const 4294967326;
         const S1sVz_srt+416;
 },
 _c1tQ7() //  [R1, R2]
         { []
         }
     {offset
       c1tQ7: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1tQi; else goto c1tQh;
       c1tQi: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c1tQh: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tQ7_info" {
     block_c1tQ7_info:
         const _c1tQ7;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.823819517 UTC

[section ""data" . GHC.Real.$w$s$c-_closure" {
     GHC.Real.$w$s$c-_closure:
         const GHC.Real.$w$s$c-_info;
         const 0;
 },
 section ""relreadonly" . u1tRo_srtd" {
     u1tRo_srtd:
         const S1sVz_srt;
         const 59;
         const 436849163854938113;
 },
 GHC.Real.$w$s$c-_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c1tR3: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1tRf; else goto c1tRg;
       c1tRf: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$w$s$c-_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1tRg: // global
           I64[Sp - 40] = block_c1tR1_info;
           _s1smX::P64 = R3;
           R3 = R5;
           _s1smW::P64 = R2;
           R2 = _s1smX::P64;
           P64[Sp - 32] = _s1smW::P64;
           P64[Sp - 24] = _s1smX::P64;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$w$s$c-_info" {
     GHC.Real.$w$s$c-_info:
         const GHC.Real.$w$s$c-_entry;
         const 0;
         const 18446744069414584334;
         const 17179869208;
         const u1tRo_srtd;
 },
 section ""relreadonly" . u1tRp_srtd" {
     u1tRp_srtd:
         const S1sVz_srt;
         const 58;
         const 148618787703226369;
 },
 _c1tR1() //  [R1]
         { []
         }
     {offset
       c1tR1: // global
           I64[Sp] = block_c1tR6_info;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 24];
           P64[Sp + 24] = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tR1_info" {
     block_c1tR1_info:
         const _c1tR1;
         const 4;
         const 18446744069414584350;
         const u1tRp_srtd;
 },
 section ""relreadonly" . u1tRq_srtd" {
     u1tRq_srtd:
         const S1sVz_srt;
         const 58;
         const 148618787703226369;
 },
 _c1tR6() //  [R1]
         { []
         }
     {offset
       c1tR6: // global
           I64[Sp + 16] = block_c1tRa_info;
           R3 = P64[Sp + 32];
           R2 = P64[Sp + 8];
           P64[Sp + 32] = R1;
           Sp = Sp + 16;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tR6_info" {
     block_c1tR6_info:
         const _c1tR6;
         const 132;
         const 18446744069414584350;
         const u1tRq_srtd;
 },
 _c1tRa() //  [R1]
         { []
         }
     {offset
       c1tRa: // global
           I64[Sp] = block_c1tRe_info;
           R3 = P64[Sp + 16];
           R2 = R1;
           call GHC.Integer.Type.minusInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tRa_info" {
     block_c1tRa_info:
         const _c1tRa;
         const 2;
         const 141733920798;
         const S1sVz_srt+416;
 },
 _c1tRe() //  [R1]
         { []
         }
     {offset
       c1tRe: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 24;
           call GHC.Real.$w$sreduce_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tRe_info" {
     block_c1tRe_info:
         const _c1tRe;
         const 130;
         const 4294967326;
         const S1sVz_srt+416;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.837303568 UTC

[section ""data" . GHC.Real.$fEnumRatio_$s$c-_closure" {
     GHC.Real.$fEnumRatio_$s$c-_closure:
         const GHC.Real.$fEnumRatio_$s$c-_info;
         const 0;
 },
 GHC.Real.$fEnumRatio_$s$c-_entry() //  [R2, R3]
         { []
         }
     {offset
       c1tRW: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1tS7; else goto c1tS8;
       c1tS7: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fEnumRatio_$s$c-_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1tS8: // global
           I64[Sp - 16] = block_c1tRT_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1tSf; else goto c1tRU;
       u1tSf: // global
           call _c1tRT(R1) args: 0, res: 0, upd: 0;
       c1tRU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fEnumRatio_$s$c-_info" {
     GHC.Real.$fEnumRatio_$s$c-_info:
         const GHC.Real.$fEnumRatio_$s$c-_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S1sVz_srt+464;
 },
 _c1tRT() //  [R1]
         { []
         }
     {offset
       c1tRT: // global
           I64[Sp - 8] = block_c1tRZ_info;
           _s1sn7::P64 = P64[R1 + 7];
           _s1sn8::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s1sn8::P64;
           P64[Sp + 8] = _s1sn7::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1tSe; else goto c1tS0;
       u1tSe: // global
           call _c1tRZ(R1) args: 0, res: 0, upd: 0;
       c1tS0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tRT_info" {
     block_c1tRT_info:
         const _c1tRT;
         const 1;
         const 4294967326;
         const S1sVz_srt+464;
 },
 _c1tRZ() //  [R1]
         { []
         }
     {offset
       c1tRZ: // global
           _s1sn7::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c1tS4_info;
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = P64[Sp + 8];
           R2 = _s1sn7::P64;
           Sp = Sp + 16;
           call GHC.Real.$w$s$c-_entry(R5,
                                       R4,
                                       R3,
                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tRZ_info" {
     block_c1tRZ_info:
         const _c1tRZ;
         const 2;
         const 4294967326;
         const S1sVz_srt+464;
 },
 _c1tS4() //  [R1, R2]
         { []
         }
     {offset
       c1tS4: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1tSd; else goto c1tSc;
       c1tSd: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c1tSc: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tS4_info" {
     block_c1tS4_info:
         const _c1tS4;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.847159579 UTC

[section ""data" . GHC.Real.$w$s$c+_closure" {
     GHC.Real.$w$s$c+_closure:
         const GHC.Real.$w$s$c+_info;
         const 0;
 },
 section ""relreadonly" . u1tT2_srtd" {
     u1tT2_srtd:
         const S1sVz_srt;
         const 62;
         const 3463268113447911425;
 },
 GHC.Real.$w$s$c+_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c1tSH: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1tST; else goto c1tSU;
       c1tST: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$w$s$c+_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1tSU: // global
           I64[Sp - 40] = block_c1tSF_info;
           _s1sng::P64 = R3;
           R3 = R5;
           _s1snf::P64 = R2;
           R2 = _s1sng::P64;
           P64[Sp - 32] = _s1snf::P64;
           P64[Sp - 24] = _s1sng::P64;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$w$s$c+_info" {
     GHC.Real.$w$s$c+_info:
         const GHC.Real.$w$s$c+_entry;
         const 0;
         const 18446744069414584334;
         const 17179869208;
         const u1tT2_srtd;
 },
 section ""relreadonly" . u1tT3_srtd" {
     u1tT3_srtd:
         const S1sVz_srt;
         const 61;
         const 1157425104234217473;
 },
 _c1tSF() //  [R1]
         { []
         }
     {offset
       c1tSF: // global
           I64[Sp] = block_c1tSK_info;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 24];
           P64[Sp + 24] = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tSF_info" {
     block_c1tSF_info:
         const _c1tSF;
         const 4;
         const 18446744069414584350;
         const u1tT3_srtd;
 },
 section ""relreadonly" . u1tT4_srtd" {
     u1tT4_srtd:
         const S1sVz_srt;
         const 61;
         const 1157425104234217473;
 },
 _c1tSK() //  [R1]
         { []
         }
     {offset
       c1tSK: // global
           I64[Sp + 16] = block_c1tSO_info;
           R3 = P64[Sp + 32];
           R2 = P64[Sp + 8];
           P64[Sp + 32] = R1;
           Sp = Sp + 16;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tSK_info" {
     block_c1tSK_info:
         const _c1tSK;
         const 132;
         const 18446744069414584350;
         const u1tT4_srtd;
 },
 _c1tSO() //  [R1]
         { []
         }
     {offset
       c1tSO: // global
           I64[Sp] = block_c1tSS_info;
           R3 = P64[Sp + 16];
           R2 = R1;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tSO_info" {
     block_c1tSO_info:
         const _c1tSO;
         const 2;
         const 1103806595102;
         const S1sVz_srt+416;
 },
 _c1tSS() //  [R1]
         { []
         }
     {offset
       c1tSS: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 24;
           call GHC.Real.$w$sreduce_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tSS_info" {
     block_c1tSS_info:
         const _c1tSS;
         const 130;
         const 4294967326;
         const S1sVz_srt+416;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.860491118 UTC

[section ""data" . GHC.Real.$fEnumRatio_$s$c+_closure" {
     GHC.Real.$fEnumRatio_$s$c+_closure:
         const GHC.Real.$fEnumRatio_$s$c+_info;
         const 0;
 },
 GHC.Real.$fEnumRatio_$s$c+_entry() //  [R2, R3]
         { []
         }
     {offset
       c1tTA: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1tTL; else goto c1tTM;
       c1tTL: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fEnumRatio_$s$c+_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1tTM: // global
           I64[Sp - 16] = block_c1tTx_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1tTT; else goto c1tTy;
       u1tTT: // global
           call _c1tTx(R1) args: 0, res: 0, upd: 0;
       c1tTy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fEnumRatio_$s$c+_info" {
     GHC.Real.$fEnumRatio_$s$c+_info:
         const GHC.Real.$fEnumRatio_$s$c+_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S1sVz_srt+488;
 },
 _c1tTx() //  [R1]
         { []
         }
     {offset
       c1tTx: // global
           I64[Sp - 8] = block_c1tTD_info;
           _s1snq::P64 = P64[R1 + 7];
           _s1snr::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s1snr::P64;
           P64[Sp + 8] = _s1snq::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1tTS; else goto c1tTE;
       u1tTS: // global
           call _c1tTD(R1) args: 0, res: 0, upd: 0;
       c1tTE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tTx_info" {
     block_c1tTx_info:
         const _c1tTx;
         const 1;
         const 4294967326;
         const S1sVz_srt+488;
 },
 _c1tTD() //  [R1]
         { []
         }
     {offset
       c1tTD: // global
           _s1snq::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c1tTI_info;
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = P64[Sp + 8];
           R2 = _s1snq::P64;
           Sp = Sp + 16;
           call GHC.Real.$w$s$c+_entry(R5,
                                       R4,
                                       R3,
                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tTD_info" {
     block_c1tTD_info:
         const _c1tTD;
         const 2;
         const 4294967326;
         const S1sVz_srt+488;
 },
 _c1tTI() //  [R1, R2]
         { []
         }
     {offset
       c1tTI: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1tTR; else goto c1tTQ;
       c1tTR: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c1tTQ: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tTI_info" {
     block_c1tTI_info:
         const _c1tTI;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.869224163 UTC

[section ""data" . GHC.Real.$fFractionalRatio_$s$fNumRatio_closure" {
     GHC.Real.$fFractionalRatio_$s$fNumRatio_closure:
         const GHC.Num.C:Num_con_info;
         const GHC.Real.$fEnumRatio_$s$c+_closure+2;
         const GHC.Real.$fEnumRatio_$s$c-_closure+2;
         const GHC.Real.$fFractionalRatio_$s$c*_closure+2;
         const GHC.Real.$fFractionalRatio_$s$cnegate_closure+1;
         const GHC.Real.$fFractionalRatio_$s$cabs_closure+1;
         const GHC.Real.$fFractionalRatio_$s$csignum_closure+1;
         const GHC.Real.$fFractionalRatio_$s$cfromInteger_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.872278402 UTC

[section ""data" . GHC.Real.$w$s$cfromRational_closure" {
     GHC.Real.$w$s$cfromRational_closure:
         const GHC.Real.$w$s$cfromRational_info;
         const 0;
 },
 section ""relreadonly" . u1tUC_srtd" {
     u1tUC_srtd:
         const S1sVz_srt;
         const 64;
         const 9227875636482146305;
 },
 GHC.Real.$w$s$cfromRational_entry() //  [R2, R3]
         { []
         }
     {offset
       c1tUm: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1tUu; else goto c1tUv;
       c1tUu: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$w$s$cfromRational_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1tUv: // global
           I64[Sp - 24] = block_c1tUk_info;
           _s1sny::P64 = R2;
           R2 = R3;
           P64[Sp - 16] = _s1sny::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call GHC.Integer.Type.absInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$w$s$cfromRational_info" {
     GHC.Real.$w$s$cfromRational_info:
         const GHC.Real.$w$s$cfromRational_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const u1tUC_srtd;
 },
 section ""relreadonly" . u1tUD_srtd" {
     u1tUD_srtd:
         const S1sVz_srt;
         const 53;
         const 4503599627370497;
 },
 _c1tUk() //  [R1]
         { []
         }
     {offset
       c1tUk: // global
           I64[Sp] = block_c1tUp_info;
           R2 = P64[Sp + 16];
           P64[Sp + 16] = R1;
           call GHC.Integer.Type.signumInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tUk_info" {
     block_c1tUk_info:
         const _c1tUk;
         const 2;
         const 18446744069414584350;
         const u1tUD_srtd;
 },
 section ""relreadonly" . u1tUE_srtd" {
     u1tUE_srtd:
         const S1sVz_srt;
         const 53;
         const 4503599627370497;
 },
 _c1tUp() //  [R1]
         { []
         }
     {offset
       c1tUp: // global
           _s1sny::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1tUt_info;
           R3 = R1;
           R2 = _s1sny::P64;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tUp_info" {
     block_c1tUp_info:
         const _c1tUp;
         const 2;
         const 18446744069414584350;
         const u1tUE_srtd;
 },
 _c1tUt() //  [R1]
         { []
         }
     {offset
       c1tUt: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Real.$w$sreduce_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tUt_info" {
     block_c1tUt_info:
         const _c1tUt;
         const 1;
         const 4294967326;
         const S1sVz_srt+416;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.883075211 UTC

[section ""data" . GHC.Real.$fFractionalRatio_$s$cfromRational_closure" {
     GHC.Real.$fFractionalRatio_$s$cfromRational_closure:
         const GHC.Real.$fFractionalRatio_$s$cfromRational_info;
         const 0;
 },
 GHC.Real.$fFractionalRatio_$s$cfromRational_entry() //  [R2]
         { []
         }
     {offset
       c1tV6: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1tVc; else goto c1tVd;
       c1tVc: // global
           R2 = R2;
           R1 = GHC.Real.$fFractionalRatio_$s$cfromRational_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1tVd: // global
           I64[Sp - 8] = block_c1tV3_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1tVi; else goto c1tV4;
       u1tVi: // global
           call _c1tV3(R1) args: 0, res: 0, upd: 0;
       c1tV4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fFractionalRatio_$s$cfromRational_info" {
     GHC.Real.$fFractionalRatio_$s$cfromRational_info:
         const GHC.Real.$fFractionalRatio_$s$cfromRational_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S1sVz_srt+504;
 },
 _c1tV3() //  [R1]
         { []
         }
     {offset
       c1tV3: // global
           I64[Sp] = block_c1tV9_info;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Real.$w$s$cfromRational_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tV3_info" {
     block_c1tV3_info:
         const _c1tV3;
         const 0;
         const 4294967326;
         const S1sVz_srt+504;
 },
 _c1tV9() //  [R1, R2]
         { []
         }
     {offset
       c1tV9: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1tVh; else goto c1tVg;
       c1tVh: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c1tVg: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tV9_info" {
     block_c1tV9_info:
         const _c1tV9;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.891526192 UTC

[section ""data" . GHC.Real.$w$s$c/_closure" {
     GHC.Real.$w$s$c/_closure:
         const GHC.Real.$w$s$c/_info;
         const 0;
 },
 section ""relreadonly" . u1tW5_srtd" {
     u1tW5_srtd:
         const S1sVz_srt;
         const 66;
         const 4503599627370497;
         const 2;
 },
 GHC.Real.$w$s$c/_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c1tVF: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1tVV; else goto c1tVW;
       c1tVV: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$w$s$c/_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1tVW: // global
           I64[Sp - 24] = block_c1tVD_info;
           _s1snL::P64 = R3;
           R3 = R4;
           _s1snK::P64 = R2;
           R2 = _s1snL::P64;
           P64[Sp - 16] = _s1snK::P64;
           P64[Sp - 8] = R5;
           Sp = Sp - 24;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$w$s$c/_info" {
     GHC.Real.$w$s$c/_info:
         const GHC.Real.$w$s$c/_entry;
         const 0;
         const 18446744069414584334;
         const 17179869208;
         const u1tW5_srtd;
 },
 section ""relreadonly" . u1tW6_srtd" {
     u1tW6_srtd:
         const S1sVz_srt;
         const 53;
         const 4503599627370497;
 },
 _c1tVD() //  [R1]
         { []
         }
     {offset
       c1tVD: // global
           I64[Sp - 8] = block_c1tVI_info;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Integer.Type.absInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tVD_info" {
     block_c1tVD_info:
         const _c1tVD;
         const 2;
         const 18446744069414584350;
         const u1tW6_srtd;
 },
 section ""relreadonly" . u1tW7_srtd" {
     u1tW7_srtd:
         const S1sVz_srt;
         const 53;
         const 4503599627370497;
 },
 _c1tVI() //  [R1]
         { []
         }
     {offset
       c1tVI: // global
           I64[Sp] = block_c1tVM_info;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Integer.Type.signumInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tVI_info" {
     block_c1tVI_info:
         const _c1tVI;
         const 3;
         const 18446744069414584350;
         const u1tW7_srtd;
 },
 section ""relreadonly" . u1tW8_srtd" {
     u1tW8_srtd:
         const S1sVz_srt;
         const 53;
         const 4503599627370497;
 },
 _c1tVM() //  [R1]
         { []
         }
     {offset
       c1tVM: // global
           I64[Sp] = block_c1tVQ_info;
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 16];
           P64[Sp + 24] = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tVM_info" {
     block_c1tVM_info:
         const _c1tVM;
         const 3;
         const 18446744069414584350;
         const u1tW8_srtd;
 },
 section ""relreadonly" . u1tW9_srtd" {
     u1tW9_srtd:
         const S1sVz_srt;
         const 53;
         const 4503599627370497;
 },
 _c1tVQ() //  [R1]
         { []
         }
     {offset
       c1tVQ: // global
           I64[Sp] = block_c1tVU_info;
           R3 = P64[Sp + 24];
           R2 = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tVQ_info" {
     block_c1tVQ_info:
         const _c1tVQ;
         const 131;
         const 18446744069414584350;
         const u1tW9_srtd;
 },
 _c1tVU() //  [R1]
         { []
         }
     {offset
       c1tVU: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 32;
           call GHC.Real.$w$sreduce_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tVU_info" {
     block_c1tVU_info:
         const _c1tVU;
         const 387;
         const 4294967326;
         const S1sVz_srt+416;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.907414105 UTC

[section ""data" . GHC.Real.$fFractionalRatio_$s$c/_closure" {
     GHC.Real.$fFractionalRatio_$s$c/_closure:
         const GHC.Real.$fFractionalRatio_$s$c/_info;
         const 0;
 },
 GHC.Real.$fFractionalRatio_$s$c/_entry() //  [R2, R3]
         { []
         }
     {offset
       c1tWL: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1tWW; else goto c1tWX;
       c1tWW: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fFractionalRatio_$s$c/_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1tWX: // global
           I64[Sp - 16] = block_c1tWI_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1tX4; else goto c1tWJ;
       u1tX4: // global
           call _c1tWI(R1) args: 0, res: 0, upd: 0;
       c1tWJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fFractionalRatio_$s$c/_info" {
     GHC.Real.$fFractionalRatio_$s$c/_info:
         const GHC.Real.$fFractionalRatio_$s$c/_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S1sVz_srt+520;
 },
 _c1tWI() //  [R1]
         { []
         }
     {offset
       c1tWI: // global
           I64[Sp - 8] = block_c1tWO_info;
           _s1snW::P64 = P64[R1 + 7];
           _s1snX::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s1snX::P64;
           P64[Sp + 8] = _s1snW::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1tX3; else goto c1tWP;
       u1tX3: // global
           call _c1tWO(R1) args: 0, res: 0, upd: 0;
       c1tWP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tWI_info" {
     block_c1tWI_info:
         const _c1tWI;
         const 1;
         const 4294967326;
         const S1sVz_srt+520;
 },
 _c1tWO() //  [R1]
         { []
         }
     {offset
       c1tWO: // global
           _s1snW::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c1tWT_info;
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = P64[Sp + 8];
           R2 = _s1snW::P64;
           Sp = Sp + 16;
           call GHC.Real.$w$s$c/_entry(R5,
                                       R4,
                                       R3,
                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tWO_info" {
     block_c1tWO_info:
         const _c1tWO;
         const 2;
         const 4294967326;
         const S1sVz_srt+520;
 },
 _c1tWT() //  [R1, R2]
         { []
         }
     {offset
       c1tWT: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1tX2; else goto c1tX1;
       c1tX2: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c1tX1: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tWT_info" {
     block_c1tWT_info:
         const _c1tWT;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.915581055 UTC

[section ""data" . GHC.Real.$fFractionalRatio_$s$fFractionalRatio_closure" {
     GHC.Real.$fFractionalRatio_$s$fFractionalRatio_closure:
         const GHC.Real.C:Fractional_con_info;
         const GHC.Real.$fFractionalRatio_$s$fNumRatio_closure+1;
         const GHC.Real.$fFractionalRatio_$s$c/_closure+2;
         const GHC.Real.$fFractionalRatio_$s$crecip_closure+1;
         const GHC.Real.$fFractionalRatio_$s$cfromRational_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.917340423 UTC

[section ""data" . GHC.Real.ratioPrec_closure" {
     GHC.Real.ratioPrec_closure:
         const GHC.Types.I#_con_info;
         const 7;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.919059352 UTC

[section ""data" . GHC.Real.infinity_closure" {
     GHC.Real.infinity_closure:
         const GHC.Real.:%_con_info;
         const GHC.Real.$fEnumRatio1_closure;
         const GHC.Real.even1_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.920742773 UTC

[section ""data" . GHC.Real.notANumber_closure" {
     GHC.Real.notANumber_closure:
         const GHC.Real.:%_con_info;
         const GHC.Real.even1_closure;
         const GHC.Real.even1_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.923707179 UTC

[section ""data" . GHC.Real.numerator_closure" {
     GHC.Real.numerator_closure:
         const GHC.Real.numerator_info;
 },
 GHC.Real.numerator_entry() //  [R2]
         { []
         }
     {offset
       c1tXB: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1tXC; else goto c1tXD;
       c1tXC: // global
           R2 = R2;
           R1 = GHC.Real.numerator_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1tXD: // global
           I64[Sp - 8] = block_c1tXy_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1tXH; else goto c1tXz;
       u1tXH: // global
           call _c1tXy(R1) args: 0, res: 0, upd: 0;
       c1tXz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.numerator_info" {
     GHC.Real.numerator_info:
         const GHC.Real.numerator_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1tXy() //  [R1]
         { []
         }
     {offset
       c1tXy: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tXy_info" {
     block_c1tXy_info:
         const _c1tXy;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.930117806 UTC

[section ""data" . GHC.Real.denominator_closure" {
     GHC.Real.denominator_closure:
         const GHC.Real.denominator_info;
 },
 GHC.Real.denominator_entry() //  [R2]
         { []
         }
     {offset
       c1tXZ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1tY0; else goto c1tY1;
       c1tY0: // global
           R2 = R2;
           R1 = GHC.Real.denominator_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1tY1: // global
           I64[Sp - 8] = block_c1tXW_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1tY5; else goto c1tXX;
       u1tY5: // global
           call _c1tXW(R1) args: 0, res: 0, upd: 0;
       c1tXX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.denominator_info" {
     GHC.Real.denominator_info:
         const GHC.Real.denominator_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1tXW() //  [R1]
         { []
         }
     {offset
       c1tXW: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tXW_info" {
     block_c1tXW_info:
         const _c1tXW;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.936506085 UTC

[section ""data" . GHC.Real.$w$snumericEnumFrom_closure" {
     GHC.Real.$w$snumericEnumFrom_closure:
         const GHC.Real.$w$snumericEnumFrom_info;
         const 0;
 },
 section ""relreadonly" . u1tYG_srtd" {
     u1tYG_srtd:
         const S1sVz_srt+80;
         const 58;
         const 146366987889541121;
 },
 sat_s1sol_entry() //  [R1]
         { []
         }
     {offset
       c1tYt: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1tYu; else goto c1tYv;
       c1tYu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1tYv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c1tYo_info;
           R5 = GHC.Real.$fEnumRatio1_closure;
           R4 = GHC.Real.$fEnumRatio1_closure;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Real.$w$s$c+_entry(R5,
                                       R4,
                                       R3,
                                       R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sol_info" {
     sat_s1sol_info:
         const sat_s1sol_entry;
         const 2;
         const 18446744069414584338;
         const u1tYG_srtd;
 },
 _c1tYo() //  [R1, R2]
         { []
         }
     {offset
       c1tYo: // global
           I64[Sp] = block_c1tYq_info;
           R3 = R2;
           R2 = R1;
           call GHC.Real.$w$snumericEnumFrom_entry(R3,
                                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c1tYo_info" {
     block_c1tYo_info:
         const _c1tYo;
         const 0;
         const 4294967326;
         const S1sVz_srt+536;
 },
 _c1tYq() //  [R1, R2]
         { []
         }
     {offset
       c1tYq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1tYz; else goto c1tYy;
       c1tYz: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c1tYy: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1tYq_info" {
     block_c1tYq_info:
         const _c1tYq;
         const 0;
         const 30;
 },
 section ""relreadonly" . u1tYH_srtd" {
     u1tYH_srtd:
         const S1sVz_srt+80;
         const 58;
         const 146366987889541121;
 },
 GHC.Real.$w$snumericEnumFrom_entry() //  [R2, R3]
         { []
         }
     {offset
       c1tYB: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c1tYF; else goto c1tYE;
       c1tYF: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$w$snumericEnumFrom_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1tYE: // global
           I64[Hp - 48] = sat_s1sol_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 48;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$w$snumericEnumFrom_info" {
     GHC.Real.$w$snumericEnumFrom_info:
         const GHC.Real.$w$snumericEnumFrom_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const u1tYH_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.947770104 UTC

[section ""data" . GHC.Real.$fEnumRatio_$snumericEnumFrom_closure" {
     GHC.Real.$fEnumRatio_$snumericEnumFrom_closure:
         const GHC.Real.$fEnumRatio_$snumericEnumFrom_info;
         const 0;
 },
 GHC.Real.$fEnumRatio_$snumericEnumFrom_entry() //  [R2]
         { []
         }
     {offset
       c1tZd: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1tZj; else goto c1tZk;
       c1tZj: // global
           R2 = R2;
           R1 = GHC.Real.$fEnumRatio_$snumericEnumFrom_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1tZk: // global
           I64[Sp - 8] = block_c1tZa_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1tZp; else goto c1tZb;
       u1tZp: // global
           call _c1tZa(R1) args: 0, res: 0, upd: 0;
       c1tZb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fEnumRatio_$snumericEnumFrom_info" {
     GHC.Real.$fEnumRatio_$snumericEnumFrom_info:
         const GHC.Real.$fEnumRatio_$snumericEnumFrom_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S1sVz_srt+536;
 },
 _c1tZa() //  [R1]
         { []
         }
     {offset
       c1tZa: // global
           I64[Sp] = block_c1tZg_info;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Real.$w$snumericEnumFrom_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tZa_info" {
     block_c1tZa_info:
         const _c1tZa;
         const 0;
         const 4294967326;
         const S1sVz_srt+536;
 },
 _c1tZg() //  [R1, R2]
         { []
         }
     {offset
       c1tZg: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1tZo; else goto c1tZn;
       c1tZo: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c1tZn: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tZg_info" {
     block_c1tZg_info:
         const _c1tZg;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.957105249 UTC

[section ""data" . GHC.Real.$wnumericEnumFrom_closure" {
     GHC.Real.$wnumericEnumFrom_closure:
         const GHC.Real.$wnumericEnumFrom_info;
         const 0;
 },
 sat_s1sox_entry() //  [R1]
         { []
         }
     {offset
       c1tZY: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1tZZ; else goto c1u00;
       c1tZZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1u00: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Real.$fEnumRatio1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sox_info" {
     sat_s1sox_info:
         const sat_s1sox_entry;
         const 1;
         const 4294967312;
         const S1sVz_srt+552;
 },
 sat_s1soC_entry() //  [R1]
         { []
         }
     {offset
       c1u01: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c1u07; else goto c1u08;
       c1u07: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1u08: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c1tZQ_info;
           _s1sot::P64 = P64[R1 + 16];
           R2 = _s1sot::P64;
           P64[Sp - 32] = _s1sot::P64;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Real.$p1Fractional_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1soC_info" {
     sat_s1soC_info:
         const sat_s1soC_entry;
         const 2;
         const 12884901906;
         const S1sVz_srt+552;
 },
 _c1tZQ() //  [R1]
         { []
         }
     {offset
       c1tZQ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1u0b; else goto c1u0a;
       c1u0b: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c1u0a: // global
           I64[Hp - 16] = sat_s1sox_info;
           P64[Hp] = R1;
           I64[Sp] = block_c1u02_info;
           R2 = R1;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 16];
           P64[Sp - 8] = Hp - 16;
           Sp = Sp - 24;
           call GHC.Num.+_entry(R2) args: 32, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c1tZQ_info" {
     block_c1tZQ_info:
         const _c1tZQ;
         const 2;
         const 12884901918;
         const S1sVz_srt+552;
 },
 _c1u02() //  [R1]
         { []
         }
     {offset
       c1u02: // global
           I64[Sp + 16] = block_c1u04_info;
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Real.$wnumericEnumFrom_entry(R3,
                                                 R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c1u02_info" {
     block_c1u02_info:
         const _c1u02;
         const 130;
         const 4294967326;
         const S1sVz_srt+560;
 },
 _c1u04() //  [R1, R2]
         { []
         }
     {offset
       c1u04: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1u0f; else goto c1u0e;
       c1u0f: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c1u0e: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1u04_info" {
     block_c1u04_info:
         const _c1u04;
         const 0;
         const 30;
 },
 GHC.Real.$wnumericEnumFrom_entry() //  [R2, R3]
         { []
         }
     {offset
       c1u0g: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1u0h; else goto c1u0i;
       c1u0h: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$wnumericEnumFrom_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1u0i: // global
           I64[Sp - 16] = block_c1tZK_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$wnumericEnumFrom_info" {
     GHC.Real.$wnumericEnumFrom_info:
         const GHC.Real.$wnumericEnumFrom_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S1sVz_srt+552;
 },
 _c1tZK() //  [R1]
         { []
         }
     {offset
       c1tZK: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1u0l; else goto c1u0k;
       c1u0l: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1u0k: // global
           I64[Hp - 24] = sat_s1soC_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R2 = Hp - 24;
           R1 = R1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1tZK_info" {
     block_c1tZK_info:
         const _c1tZK;
         const 1;
         const 12884901918;
         const S1sVz_srt+552;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.971819892 UTC

[section ""data" . GHC.Real.numericEnumFrom_closure" {
     GHC.Real.numericEnumFrom_closure:
         const GHC.Real.numericEnumFrom_info;
         const 0;
 },
 GHC.Real.numericEnumFrom_entry() //  [R2, R3]
         { []
         }
     {offset
       c1u1a: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1u1b; else goto c1u1c;
       c1u1b: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.numericEnumFrom_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1u1c: // global
           I64[Sp - 8] = block_c1u17_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Real.$wnumericEnumFrom_entry(R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.numericEnumFrom_info" {
     GHC.Real.numericEnumFrom_info:
         const GHC.Real.numericEnumFrom_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S1sVz_srt+560;
 },
 _c1u17() //  [R1, R2]
         { []
         }
     {offset
       c1u17: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1u1f; else goto c1u1e;
       c1u1f: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c1u1e: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1u17_info" {
     block_c1u17_info:
         const _c1u17;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.976710737 UTC

[section ""data" . sat_s1soI_closure" {
     sat_s1soI_closure:
         const GHC.Types.I#_con_info;
         const 2;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.978753236 UTC

[section ""data" . sat_s1soJ_closure" {
     sat_s1soJ_closure:
         const :_con_info;
         const sat_s1soI_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.981068658 UTC

[section ""data" . GHC.Real.even2_closure" {
     GHC.Real.even2_closure:
         const GHC.Real.even2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Real.even2_entry() //  [R1]
         { []
         }
     {offset
       c1u1z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1u1A; else goto c1u1B;
       c1u1A: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1u1B: // global
           (_c1u1w::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c1u1w::I64 == 0) goto c1u1y; else goto c1u1x;
       c1u1y: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c1u1x: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c1u1w::I64;
           R3 = sat_s1soJ_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Real.even2_info" {
     GHC.Real.even2_info:
         const GHC.Real.even2_entry;
         const 0;
         const 4294967317;
         const S1sVz_srt+576;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.985906838 UTC

[section ""data" . GHC.Real.$fEnumRatio2_closure" {
     GHC.Real.$fEnumRatio2_closure:
         const GHC.Real.$fEnumRatio2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Real.$fEnumRatio2_entry() //  [R1]
         { []
         }
     {offset
       c1u1U: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1u1V; else goto c1u1W;
       c1u1V: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1u1W: // global
           (_c1u1O::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c1u1O::I64 == 0) goto c1u1Q; else goto c1u1P;
       c1u1Q: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c1u1P: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c1u1O::I64;
           I64[Sp - 24] = block_c1u1R_info;
           R5 = GHC.Real.$fEnumRatio1_closure;
           R4 = GHC.Real.even2_closure;
           R3 = GHC.Real.$fEnumRatio1_closure;
           R2 = GHC.Real.$fEnumRatio1_closure;
           Sp = Sp - 24;
           call GHC.Real.$w$s$c/_entry(R5,
                                       R4,
                                       R3,
                                       R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Real.$fEnumRatio2_info" {
     GHC.Real.$fEnumRatio2_info:
         const GHC.Real.$fEnumRatio2_entry;
         const 0;
         const 1172526071829;
         const S1sVz_srt+520;
 },
 _c1u1R() //  [R1, R2]
         { []
         }
     {offset
       c1u1R: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1u1Z; else goto c1u1Y;
       c1u1Z: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c1u1Y: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1u1R_info" {
     block_c1u1R_info:
         const _c1u1R;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:16.994694376 UTC

[section ""data" . GHC.Real.$w$snumericEnumFromTo_closure" {
     GHC.Real.$w$snumericEnumFromTo_closure:
         const GHC.Real.$w$snumericEnumFromTo_info;
         const 0;
 },
 ds_s1soT_entry() //  [R1]
         { []
         }
     {offset
       c1u2s: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1u2D; else goto c1u2E;
       c1u2D: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1u2E: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c1u2p_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u1u2L; else goto c1u2q;
       u1u2L: // global
           call _c1u2p(R1) args: 0, res: 0, upd: 0;
       c1u2q: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds_s1soT_info" {
     ds_s1soT_info:
         const ds_s1soT_entry;
         const 1;
         const 35188667056144;
         const S1sVz_srt+488;
 },
 _c1u2p() //  [R1]
         { []
         }
     {offset
       c1u2p: // global
           I64[Sp - 16] = block_c1u2v_info;
           _s1soV::P64 = P64[R1 + 7];
           _s1soW::P64 = P64[R1 + 15];
           R1 = GHC.Real.$fEnumRatio2_closure;
           P64[Sp - 8] = _s1soW::P64;
           P64[Sp] = _s1soV::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1u2K; else goto c1u2w;
       u1u2K: // global
           call _c1u2v(R1) args: 0, res: 0, upd: 0;
       c1u2w: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c1u2p_info" {
     block_c1u2p_info:
         const _c1u2p;
         const 0;
         const 35188667056158;
         const S1sVz_srt+488;
 },
 _c1u2v() //  [R1]
         { []
         }
     {offset
       c1u2v: // global
           _s1soV::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c1u2A_info;
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = P64[Sp + 8];
           R2 = _s1soV::P64;
           Sp = Sp + 16;
           call GHC.Real.$w$s$c+_entry(R5,
                                       R4,
                                       R3,
                                       R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c1u2v_info" {
     block_c1u2v_info:
         const _c1u2v;
         const 2;
         const 4294967326;
         const S1sVz_srt+488;
 },
 _c1u2A() //  [R1, R2]
         { []
         }
     {offset
       c1u2A: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1u2J; else goto c1u2I;
       c1u2J: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c1u2I: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1u2A_info" {
     block_c1u2A_info:
         const _c1u2A;
         const 0;
         const 30;
 },
 sat_s1sp4_entry() //  [R1, R2]
         { []
         }
     {offset
       c1u2R: // global
           R3 = P64[R1 + 7];
           R2 = R2;
           call GHC.Real.$fEnumRatio_$s$c<=_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1sp4_info" {
     sat_s1sp4_info:
         const sat_s1sp4_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S1sVz_srt+600;
 },
 GHC.Real.$w$snumericEnumFromTo_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1u2U: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1u2V; else goto c1u2W;
       c1u2V: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$w$snumericEnumFromTo_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1u2W: // global
           I64[Sp - 16] = block_c1u2i_info;
           R3 = R3;
           R2 = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           call GHC.Real.$w$snumericEnumFrom_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$w$snumericEnumFromTo_info" {
     GHC.Real.$w$snumericEnumFromTo_info:
         const GHC.Real.$w$snumericEnumFromTo_entry;
         const 0;
         const 246569777496078;
         const 12884901911;
         const S1sVz_srt+488;
 },
 _c1u2i() //  [R1, R2]
         { []
         }
     {offset
       c1u2i: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c1u2Z; else goto c1u2Y;
       c1u2Z: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c1u2Y: // global
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = R1;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = ds_s1soT_info;
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = sat_s1sp4_info;
           P64[Hp] = Hp - 32;
           R3 = Hp - 54;
           R2 = Hp - 7;
           Sp = Sp + 16;
           call GHC.List.takeWhile_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1u2i_info" {
     block_c1u2i_info:
         const _c1u2i;
         const 1;
         const 105557411233822;
         const S1sVz_srt+488;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.008477969 UTC

[section ""data" . GHC.Real.$fEnumRatio_$snumericEnumFromTo_closure" {
     GHC.Real.$fEnumRatio_$snumericEnumFromTo_closure:
         const GHC.Real.$fEnumRatio_$snumericEnumFromTo_info;
         const 0;
 },
 GHC.Real.$fEnumRatio_$snumericEnumFromTo_entry() //  [R2, R3]
         { []
         }
     {offset
       c1u3J: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1u3K; else goto c1u3L;
       c1u3K: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fEnumRatio_$snumericEnumFromTo_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1u3L: // global
           I64[Sp - 16] = block_c1u3G_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1u3P; else goto c1u3H;
       u1u3P: // global
           call _c1u3G(R1) args: 0, res: 0, upd: 0;
       c1u3H: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fEnumRatio_$snumericEnumFromTo_info" {
     GHC.Real.$fEnumRatio_$snumericEnumFromTo_info:
         const GHC.Real.$fEnumRatio_$snumericEnumFromTo_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S1sVz_srt+608;
 },
 _c1u3G() //  [R1]
         { []
         }
     {offset
       c1u3G: // global
           R4 = P64[Sp + 8];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 16;
           call GHC.Real.$w$snumericEnumFromTo_entry(R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1u3G_info" {
     block_c1u3G_info:
         const _c1u3G;
         const 1;
         const 4294967326;
         const S1sVz_srt+608;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.017867596 UTC

[section ""data" . GHC.Real.numericEnumFromTo_closure" {
     GHC.Real.numericEnumFromTo_closure:
         const GHC.Real.numericEnumFromTo_info;
         const 0;
 },
 $dNum_s1spi_entry() //  [R1]
         { []
         }
     {offset
       c1u4a: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1u4b; else goto c1u4c;
       c1u4b: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1u4c: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Fractional_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dNum_s1spi_info" {
     $dNum_s1spi_info:
         const $dNum_s1spi_entry;
         const 1;
         const 16;
 },
 sat_s1spl_entry() //  [R1]
         { []
         }
     {offset
       c1u4q: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1u4r; else goto c1u4s;
       c1u4r: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1u4s: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Real.even2_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1spl_info" {
     sat_s1spl_info:
         const sat_s1spl_entry;
         const 1;
         const 4294967312;
         const S1sVz_srt+584;
 },
 sat_s1spk_entry() //  [R1]
         { []
         }
     {offset
       c1u4x: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1u4y; else goto c1u4z;
       c1u4y: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1u4z: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Real.$fEnumRatio1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1spk_info" {
     sat_s1spk_info:
         const sat_s1spk_entry;
         const 1;
         const 4294967312;
         const S1sVz_srt+552;
 },
 sat_s1spm_entry() //  [R1]
         { []
         }
     {offset
       c1u4A: // global
           _s1spm::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c1u4B; else goto c1u4C;
       c1u4C: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c1u4E; else goto c1u4D;
       c1u4E: // global
           HpAlloc = 48;
           goto c1u4B;
       c1u4B: // global
           R1 = _s1spm::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1u4D: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1spm::P64;
           _s1spc::P64 = P64[_s1spm::P64 + 16];
           _s1spi::P64 = P64[_s1spm::P64 + 24];
           I64[Hp - 40] = sat_s1spl_info;
           P64[Hp - 24] = _s1spi::P64;
           I64[Hp - 16] = sat_s1spk_info;
           P64[Hp] = _s1spi::P64;
           R2 = _s1spc::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 16;
           P64[Sp - 24] = Hp - 40;
           Sp = Sp - 40;
           call GHC.Real./_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1spm_info" {
     sat_s1spm_info:
         const sat_s1spm_entry;
         const 2;
         const 73014444050;
         const S1sVz_srt+552;
 },
 ds_s1spj_entry() //  [R1]
         { []
         }
     {offset
       c1u4F: // global
           _s1spj::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c1u4G; else goto c1u4H;
       c1u4H: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1u4J; else goto c1u4I;
       c1u4J: // global
           HpAlloc = 32;
           goto c1u4G;
       c1u4G: // global
           R1 = _s1spj::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1u4I: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1spj::P64;
           _s1spc::P64 = P64[_s1spj::P64 + 16];
           _s1spe::P64 = P64[_s1spj::P64 + 24];
           _s1spi::P64 = P64[_s1spj::P64 + 32];
           I64[Hp - 24] = sat_s1spm_info;
           P64[Hp - 8] = _s1spc::P64;
           P64[Hp] = _s1spi::P64;
           R2 = _s1spi::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _s1spe::P64;
           P64[Sp - 24] = Hp - 24;
           Sp = Sp - 40;
           call GHC.Num.+_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds_s1spj_info" {
     ds_s1spj_info:
         const ds_s1spj_entry;
         const 3;
         const 73014444047;
         const S1sVz_srt+552;
 },
 sat_s1spo_entry() //  [R1, R2]
         { []
         }
     {offset
       c1u4P: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1u4Q; else goto c1u4R;
       c1u4Q: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1u4R: // global
           _s1spn::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _s1spn::P64;
           P64[Sp - 8] = P64[R1 + 15];
           Sp = Sp - 24;
           call GHC.Classes.<=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1spo_info" {
     sat_s1spo_info:
         const sat_s1spo_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 GHC.Real.numericEnumFromTo_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c1u4S: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1u4T; else goto c1u4U;
       c1u4T: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.numericEnumFromTo_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1u4U: // global
           I64[Sp - 32] = block_c1u44_info;
           _s1spc::P64 = R3;
           R3 = R4;
           _s1spb::P64 = R2;
           R2 = _s1spc::P64;
           P64[Sp - 24] = _s1spb::P64;
           P64[Sp - 16] = _s1spc::P64;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call GHC.Real.$wnumericEnumFrom_entry(R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.numericEnumFromTo_info" {
     GHC.Real.numericEnumFromTo_info:
         const GHC.Real.numericEnumFromTo_entry;
         const 0;
         const 2280627634190;
         const 17179869208;
         const S1sVz_srt+552;
 },
 _c1u44() //  [R1, R2]
         { []
         }
     {offset
       c1u44: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto c1u4X; else goto c1u4W;
       c1u4X: // global
           HpAlloc = 112;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c1u4W: // global
           I64[Hp - 104] = $dNum_s1spi_info;
           _s1spc::P64 = P64[Sp + 16];
           P64[Hp - 88] = _s1spc::P64;
           I64[Hp - 80] = :_con_info;
           P64[Hp - 72] = R1;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = ds_s1spj_info;
           P64[Hp - 40] = _s1spc::P64;
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = Hp - 104;
           I64[Hp - 16] = sat_s1spo_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = Hp - 56;
           R3 = Hp - 78;
           R2 = Hp - 15;
           Sp = Sp + 32;
           call GHC.List.takeWhile_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1u44_info" {
     block_c1u44_info:
         const _c1u44;
         const 3;
         const 73014444062;
         const S1sVz_srt+552;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.036748739 UTC

[section ""data" . GHC.Real.$w$snumericEnumFromThen_closure" {
     GHC.Real.$w$snumericEnumFromThen_closure:
         const GHC.Real.$w$snumericEnumFromThen_info;
         const 0;
 },
 sat_s1spE_entry() //  [R1]
         { []
         }
     {offset
       c1u6b: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c1u6c; else goto c1u6d;
       c1u6c: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1u6d: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 56] = block_c1u64_info;
           _s1spt::P64 = P64[R1 + 40];
           R5 = _s1spt::P64;
           _s1sps::P64 = P64[R1 + 32];
           R4 = _s1sps::P64;
           R3 = _s1spt::P64;
           R2 = _s1sps::P64;
           P64[Sp - 48] = P64[R1 + 16];
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = _s1sps::P64;
           P64[Sp - 24] = _s1spt::P64;
           Sp = Sp - 56;
           call GHC.Real.$w$s$c+_entry(R5,
                                       R4,
                                       R3,
                                       R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1spE_info" {
     sat_s1spE_info:
         const sat_s1spE_entry;
         const 4;
         const 9007237909446671;
         const S1sVz_srt+464;
 },
 _c1u64() //  [R1, R2]
         { []
         }
     {offset
       c1u64: // global
           _s1spr::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c1u66_info;
           R5 = _s1spr::P64;
           R4 = P64[Sp + 8];
           R3 = R2;
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Real.$w$s$c-_entry(R5,
                                       R4,
                                       R3,
                                       R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c1u64_info" {
     block_c1u64_info:
         const _c1u64;
         const 4;
         const 9007203549708318;
         const S1sVz_srt+464;
 },
 _c1u66() //  [R1, R2]
         { []
         }
     {offset
       c1u66: // global
           _s1spt::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c1u68_info;
           R5 = R2;
           R4 = R1;
           R3 = _s1spt::P64;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Real.$w$snumericEnumFromThen_entry(R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c1u66_info" {
     block_c1u66_info:
         const _c1u66;
         const 2;
         const 4294967326;
         const S1sVz_srt+632;
 },
 _c1u68() //  [R1, R2]
         { []
         }
     {offset
       c1u68: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1u6i; else goto c1u6h;
       c1u6i: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c1u6h: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1u68_info" {
     block_c1u68_info:
         const _c1u68;
         const 0;
         const 30;
 },
 GHC.Real.$w$snumericEnumFromThen_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c1u6k: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c1u6o; else goto c1u6n;
       c1u6o: // global
           HpAlloc = 72;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$w$snumericEnumFromThen_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1u6n: // global
           I64[Hp - 64] = sat_s1spE_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R5;
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$w$snumericEnumFromThen_info" {
     GHC.Real.$w$snumericEnumFromThen_info:
         const GHC.Real.$w$snumericEnumFromThen_entry;
         const 0;
         const 9007237909446670;
         const 17179869208;
         const S1sVz_srt+464;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.048617693 UTC

[section ""data" . GHC.Real.$fEnumRatio_$snumericEnumFromThen_closure" {
     GHC.Real.$fEnumRatio_$snumericEnumFromThen_closure:
         const GHC.Real.$fEnumRatio_$snumericEnumFromThen_info;
         const 0;
 },
 GHC.Real.$fEnumRatio_$snumericEnumFromThen_entry() //  [R2, R3]
         { []
         }
     {offset
       c1u6Y: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1u79; else goto c1u7a;
       c1u79: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fEnumRatio_$snumericEnumFromThen_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1u7a: // global
           I64[Sp - 16] = block_c1u6V_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1u7h; else goto c1u6W;
       u1u7h: // global
           call _c1u6V(R1) args: 0, res: 0, upd: 0;
       c1u6W: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fEnumRatio_$snumericEnumFromThen_info" {
     GHC.Real.$fEnumRatio_$snumericEnumFromThen_info:
         const GHC.Real.$fEnumRatio_$snumericEnumFromThen_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S1sVz_srt+632;
 },
 _c1u6V() //  [R1]
         { []
         }
     {offset
       c1u6V: // global
           I64[Sp - 8] = block_c1u71_info;
           _s1spI::P64 = P64[R1 + 7];
           _s1spJ::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s1spJ::P64;
           P64[Sp + 8] = _s1spI::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1u7g; else goto c1u72;
       u1u7g: // global
           call _c1u71(R1) args: 0, res: 0, upd: 0;
       c1u72: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1u6V_info" {
     block_c1u6V_info:
         const _c1u6V;
         const 1;
         const 4294967326;
         const S1sVz_srt+632;
 },
 _c1u71() //  [R1]
         { []
         }
     {offset
       c1u71: // global
           _s1spI::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c1u76_info;
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = P64[Sp + 8];
           R2 = _s1spI::P64;
           Sp = Sp + 16;
           call GHC.Real.$w$snumericEnumFromThen_entry(R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1u71_info" {
     block_c1u71_info:
         const _c1u71;
         const 2;
         const 4294967326;
         const S1sVz_srt+632;
 },
 _c1u76() //  [R1, R2]
         { []
         }
     {offset
       c1u76: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1u7f; else goto c1u7e;
       c1u7f: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c1u7e: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1u76_info" {
     block_c1u76_info:
         const _c1u76;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.060543915 UTC

[section ""data" . GHC.Real.$wnumericEnumFromThen_closure" {
     GHC.Real.$wnumericEnumFromThen_closure:
         const GHC.Real.$wnumericEnumFromThen_info;
 },
 sat_s1spW_entry() //  [R1]
         { []
         }
     {offset
       c1u7X: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1u7Y; else goto c1u7Z;
       c1u7Y: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1u7Z: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 40] = stg_ap_pp_info;
           _s1spU::P64 = P64[R1 + 16];
           P64[Sp - 32] = _s1spU::P64;
           P64[Sp - 24] = _s1spU::P64;
           Sp = Sp - 40;
           call GHC.Num.+_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1spW_info" {
     sat_s1spW_info:
         const sat_s1spW_entry;
         const 2;
         const 18;
 },
 sat_s1sq1_entry() //  [R1]
         { []
         }
     {offset
       c1u80: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c1u86; else goto c1u87;
       c1u86: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1u87: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_c1u7P_info;
           _s1spQ::P64 = P64[R1 + 16];
           R2 = _s1spQ::P64;
           P64[Sp - 40] = _s1spQ::P64;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 48;
           call GHC.Real.$p1Fractional_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sq1_info" {
     sat_s1sq1_info:
         const sat_s1sq1_entry;
         const 3;
         const 15;
 },
 _c1u7P() //  [R1]
         { []
         }
     {offset
       c1u7P: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1u8a; else goto c1u89;
       c1u8a: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c1u89: // global
           I64[Hp - 24] = sat_s1spW_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = R1;
           I64[Sp] = block_c1u81_info;
           R2 = R1;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 24;
           P64[Sp - 8] = P64[Sp + 16];
           Sp = Sp - 24;
           call GHC.Num.-_entry(R2) args: 32, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c1u7P_info" {
     block_c1u7P_info:
         const _c1u7P;
         const 3;
         const 30;
 },
 _c1u81() //  [R1]
         { []
         }
     {offset
       c1u81: // global
           _s1spU::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_c1u83_info;
           R4 = R1;
           R3 = _s1spU::P64;
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Real.$wnumericEnumFromThen_entry(R4,
                                                     R3,
                                                     R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c1u81_info" {
     block_c1u81_info:
         const _c1u81;
         const 131;
         const 30;
 },
 _c1u83() //  [R1, R2]
         { []
         }
     {offset
       c1u83: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1u8e; else goto c1u8d;
       c1u8e: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c1u8d: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1u83_info" {
     block_c1u83_info:
         const _c1u83;
         const 0;
         const 30;
 },
 GHC.Real.$wnumericEnumFromThen_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1u8f: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1u8g; else goto c1u8h;
       c1u8g: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$wnumericEnumFromThen_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1u8h: // global
           I64[Sp - 24] = block_c1u7H_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$wnumericEnumFromThen_info" {
     GHC.Real.$wnumericEnumFromThen_info:
         const GHC.Real.$wnumericEnumFromThen_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c1u7H() //  [R1]
         { []
         }
     {offset
       c1u7H: // global
           I64[Sp] = block_c1u7J_info;
           _s1spT::P64 = R1;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s1spT::P64;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1u7H_info" {
     block_c1u7H_info:
         const _c1u7H;
         const 2;
         const 30;
 },
 _c1u7J() //  [R1]
         { []
         }
     {offset
       c1u7J: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c1u8l; else goto c1u8k;
       c1u8l: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1u8k: // global
           I64[Hp - 32] = sat_s1sq1_info;
           P64[Hp - 16] = P64[Sp + 8];
           _s1spT::P64 = P64[Sp + 16];
           P64[Hp - 8] = _s1spT::P64;
           P64[Hp] = R1;
           R2 = Hp - 32;
           R1 = _s1spT::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1u7J_info" {
     block_c1u7J_info:
         const _c1u7J;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.075886237 UTC

[section ""data" . GHC.Real.numericEnumFromThen_closure" {
     GHC.Real.numericEnumFromThen_closure:
         const GHC.Real.numericEnumFromThen_info;
 },
 GHC.Real.numericEnumFromThen_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1u9f: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1u9g; else goto c1u9h;
       c1u9g: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.numericEnumFromThen_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1u9h: // global
           I64[Sp - 8] = block_c1u9c_info;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Real.$wnumericEnumFromThen_entry(R4,
                                                     R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.numericEnumFromThen_info" {
     GHC.Real.numericEnumFromThen_info:
         const GHC.Real.numericEnumFromThen_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c1u9c() //  [R1, R2]
         { []
         }
     {offset
       c1u9c: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1u9k; else goto c1u9j;
       c1u9k: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c1u9j: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1u9c_info" {
     block_c1u9c_info:
         const _c1u9c;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.087634959 UTC

[section ""data" . GHC.Real.$w$snumericEnumFromThenTo_closure" {
     GHC.Real.$w$snumericEnumFromThenTo_closure:
         const GHC.Real.$w$snumericEnumFromThenTo_info;
         const 0;
 },
 ds_s1sqh_entry() //  [R1]
         { []
         }
     {offset
       c1u9S: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c1ua2; else goto c1ua3;
       c1ua2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1ua3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 56] = block_c1u9P_info;
           _s1sq8::P64 = P64[R1 + 16];
           _s1sq9::P64 = P64[R1 + 24];
           _s1sqa::P64 = P64[R1 + 32];
           _s1sqb::P64 = P64[R1 + 40];
           R1 = P64[R1 + 48];
           P64[Sp - 48] = _s1sq8::P64;
           P64[Sp - 40] = _s1sq9::P64;
           P64[Sp - 32] = _s1sqa::P64;
           P64[Sp - 24] = _s1sqb::P64;
           Sp = Sp - 56;
           if (R1 & 7 != 0) goto u1uaa; else goto c1u9Q;
       u1uaa: // global
           call _c1u9P(R1) args: 0, res: 0, upd: 0;
       c1u9Q: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds_s1sqh_info" {
     ds_s1sqh_info:
         const ds_s1sqh_entry;
         const 5;
         const 150121991897103;
         const S1sVz_srt+464;
 },
 _c1u9P() //  [R1]
         { []
         }
     {offset
       c1u9P: // global
           _s1sq9::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c1u9V_info;
           R5 = _s1sq9::P64;
           R4 = P64[Sp + 8];
           R3 = P64[Sp + 32];
           R2 = P64[Sp + 24];
           P64[Sp + 24] = P64[R1 + 15];
           P64[Sp + 32] = P64[R1 + 7];
           Sp = Sp + 16;
           call GHC.Real.$w$s$c-_entry(R5,
                                       R4,
                                       R3,
                                       R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c1u9P_info" {
     block_c1u9P_info:
         const _c1u9P;
         const 4;
         const 150121991897118;
         const S1sVz_srt+464;
 },
 _c1u9V() //  [R1, R2]
         { []
         }
     {offset
       c1u9V: // global
           I64[Sp] = block_c1u9X_info;
           R5 = GHC.Real.$fEnumRatio1_closure;
           R4 = GHC.Real.even2_closure;
           R3 = R2;
           R2 = R1;
           call GHC.Real.$w$s$c/_entry(R5,
                                       R4,
                                       R3,
                                       R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c1u9V_info" {
     block_c1u9V_info:
         const _c1u9V;
         const 2;
         const 18764712116254;
         const S1sVz_srt+488;
 },
 _c1u9X() //  [R1, R2]
         { []
         }
     {offset
       c1u9X: // global
           _s1sqj::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c1u9Z_info;
           R5 = R2;
           R4 = R1;
           R3 = P64[Sp + 8];
           R2 = _s1sqj::P64;
           Sp = Sp + 16;
           call GHC.Real.$w$s$c+_entry(R5,
                                       R4,
                                       R3,
                                       R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c1u9X_info" {
     block_c1u9X_info:
         const _c1u9X;
         const 2;
         const 4294967326;
         const S1sVz_srt+488;
 },
 _c1u9Z() //  [R1, R2]
         { []
         }
     {offset
       c1u9Z: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1ua9; else goto c1ua8;
       c1ua9: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c1ua8: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1u9Z_info" {
     block_c1u9Z_info:
         const _c1u9Z;
         const 0;
         const 30;
 },
 sat_s1sqv_entry() //  [R1, R2]
         { []
         }
     {offset
       c1uag: // global
           R3 = P64[R1 + 7];
           R2 = R2;
           call GHC.Real.$fEnumRatio_$s$c<=_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1sqv_info" {
     sat_s1sqv_info:
         const sat_s1sqv_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S1sVz_srt+600;
 },
 ds_s1sqw_entry() //  [R1]
         { []
         }
     {offset
       c1uas: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c1uaC; else goto c1uaD;
       c1uaC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1uaD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 56] = block_c1uap_info;
           _s1sq8::P64 = P64[R1 + 16];
           _s1sq9::P64 = P64[R1 + 24];
           _s1sqa::P64 = P64[R1 + 32];
           _s1sqb::P64 = P64[R1 + 40];
           R1 = P64[R1 + 48];
           P64[Sp - 48] = _s1sq8::P64;
           P64[Sp - 40] = _s1sq9::P64;
           P64[Sp - 32] = _s1sqa::P64;
           P64[Sp - 24] = _s1sqb::P64;
           Sp = Sp - 56;
           if (R1 & 7 != 0) goto u1uaK; else goto c1uaq;
       u1uaK: // global
           call _c1uap(R1) args: 0, res: 0, upd: 0;
       c1uaq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds_s1sqw_info" {
     ds_s1sqw_info:
         const ds_s1sqw_entry;
         const 5;
         const 150121991897103;
         const S1sVz_srt+464;
 },
 _c1uap() //  [R1]
         { []
         }
     {offset
       c1uap: // global
           _s1sq9::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c1uav_info;
           R5 = _s1sq9::P64;
           R4 = P64[Sp + 8];
           R3 = P64[Sp + 32];
           R2 = P64[Sp + 24];
           P64[Sp + 24] = P64[R1 + 15];
           P64[Sp + 32] = P64[R1 + 7];
           Sp = Sp + 16;
           call GHC.Real.$w$s$c-_entry(R5,
                                       R4,
                                       R3,
                                       R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c1uap_info" {
     block_c1uap_info:
         const _c1uap;
         const 4;
         const 150121991897118;
         const S1sVz_srt+464;
 },
 _c1uav() //  [R1, R2]
         { []
         }
     {offset
       c1uav: // global
           I64[Sp] = block_c1uax_info;
           R5 = GHC.Real.$fEnumRatio1_closure;
           R4 = GHC.Real.even2_closure;
           R3 = R2;
           R2 = R1;
           call GHC.Real.$w$s$c/_entry(R5,
                                       R4,
                                       R3,
                                       R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c1uav_info" {
     block_c1uav_info:
         const _c1uav;
         const 2;
         const 18764712116254;
         const S1sVz_srt+488;
 },
 _c1uax() //  [R1, R2]
         { []
         }
     {offset
       c1uax: // global
           _s1sqy::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c1uaz_info;
           R5 = R2;
           R4 = R1;
           R3 = P64[Sp + 8];
           R2 = _s1sqy::P64;
           Sp = Sp + 16;
           call GHC.Real.$w$s$c+_entry(R5,
                                       R4,
                                       R3,
                                       R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c1uax_info" {
     block_c1uax_info:
         const _c1uax;
         const 2;
         const 4294967326;
         const S1sVz_srt+488;
 },
 _c1uaz() //  [R1, R2]
         { []
         }
     {offset
       c1uaz: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1uaJ; else goto c1uaI;
       c1uaJ: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c1uaI: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1uaz_info" {
     block_c1uaz_info:
         const _c1uaz;
         const 0;
         const 30;
 },
 sat_s1sqK_entry() //  [R1, R2]
         { []
         }
     {offset
       c1uaQ: // global
           R3 = P64[R1 + 7];
           R2 = R2;
           call GHC.Real.$fEnumRatio_$s$c>=_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1sqK_info" {
     sat_s1sqK_info:
         const sat_s1sqK_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S1sVz_srt+648;
 },
 section ""relreadonly" . u1ubc_srtd" {
     u1ubc_srtd:
         const S1sVz_srt+24;
         const 79;
         const 4935945191598063617;
         const 16708;
 },
 sat_s1sqL_entry() //  [R1]
         { []
         }
     {offset
       c1uaX: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c1uaY; else goto c1uaZ;
       c1uaY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1uaZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 64] = block_c1u9H_info;
           _s1sq9::P64 = P64[R1 + 24];
           R5 = _s1sq9::P64;
           _s1sq8::P64 = P64[R1 + 16];
           R4 = _s1sq8::P64;
           _s1sqb::P64 = P64[R1 + 40];
           R3 = _s1sqb::P64;
           _s1sqa::P64 = P64[R1 + 32];
           R2 = _s1sqa::P64;
           P64[Sp - 56] = _s1sq8::P64;
           P64[Sp - 48] = _s1sq9::P64;
           P64[Sp - 40] = _s1sqa::P64;
           P64[Sp - 32] = _s1sqb::P64;
           P64[Sp - 24] = P64[R1 + 48];
           Sp = Sp - 64;
           call GHC.Real.$w$s$ccompare_entry(R5,
                                             R4,
                                             R3,
                                             R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sqL_info" {
     sat_s1sqL_info:
         const sat_s1sqL_entry;
         const 5;
         const 18446744069414584335;
         const u1ubc_srtd;
 },
 _c1u9H() //  [R1]
         { []
         }
     {offset
       c1u9H: // global
           _s1sq8::P64 = P64[Sp + 8];
           _s1sq9::P64 = P64[Sp + 16];
           _s1sqa::P64 = P64[Sp + 24];
           _s1sqb::P64 = P64[Sp + 32];
           _s1sqc::P64 = P64[Sp + 40];
           if (R1 & 7 == 1) goto c1uaV; else goto c1uaU;
       c1uaV: // global
           Hp = Hp + 72;
           _s1sqg::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c1ub5; else goto c1ub4;
       c1ub4: // global
           I64[Hp - 64] = ds_s1sqw_info;
           P64[Hp - 48] = _s1sq8::P64;
           P64[Hp - 40] = _s1sq9::P64;
           P64[Hp - 32] = _s1sqa::P64;
           P64[Hp - 24] = _s1sqb::P64;
           P64[Hp - 16] = _s1sqc::P64;
           I64[Hp - 8] = sat_s1sqK_info;
           P64[Hp] = Hp - 64;
           R1 = Hp - 7;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c1uaU: // global
           Hp = Hp + 72;
           _s1sqg::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c1ub5; else goto c1ub1;
       c1ub5: // global
           HpAlloc = 72;
           R1 = _s1sqg::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c1ub1: // global
           I64[Hp - 64] = ds_s1sqh_info;
           P64[Hp - 48] = _s1sq8::P64;
           P64[Hp - 40] = _s1sq9::P64;
           P64[Hp - 32] = _s1sqa::P64;
           P64[Hp - 24] = _s1sqb::P64;
           P64[Hp - 16] = _s1sqc::P64;
           I64[Hp - 8] = sat_s1sqv_info;
           P64[Hp] = Hp - 64;
           R1 = Hp - 7;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1u9H_info" {
     block_c1u9H_info:
         const _c1u9H;
         const 5;
         const 36741868964282398;
         const S1sVz_srt+464;
 },
 section ""relreadonly" . u1ubd_srtd" {
     u1ubd_srtd:
         const S1sVz_srt+24;
         const 80;
         const 4935945191598063617;
         const 53572;
 },
 GHC.Real.$w$snumericEnumFromThenTo_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c1ub6: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c1ub7; else goto c1ub8;
       c1ub7: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$w$snumericEnumFromThenTo_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1ub8: // global
           I64[Sp - 48] = block_c1u9A_info;
           _s1sqb::P64 = R5;
           R5 = R5;
           _s1sqa::P64 = R4;
           R4 = R4;
           _s1sq9::P64 = R3;
           R3 = R3;
           _s1sq8::P64 = R2;
           R2 = R2;
           P64[Sp - 40] = _s1sq8::P64;
           P64[Sp - 32] = _s1sq9::P64;
           P64[Sp - 24] = _s1sqa::P64;
           P64[Sp - 16] = _s1sqb::P64;
           P64[Sp - 8] = R6;
           Sp = Sp - 48;
           call GHC.Real.$w$snumericEnumFromThen_entry(R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$w$snumericEnumFromThenTo_info" {
     GHC.Real.$w$snumericEnumFromThenTo_info:
         const GHC.Real.$w$snumericEnumFromThenTo_entry;
         const 0;
         const 18446744069414584334;
         const 21474836505;
         const u1ubd_srtd;
 },
 section ""relreadonly" . u1ube_srtd" {
     u1ube_srtd:
         const S1sVz_srt+24;
         const 79;
         const 4935945191598063617;
         const 16708;
 },
 _c1u9A() //  [R1, R2]
         { []
         }
     {offset
       c1u9A: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c1ubb; else goto c1uba;
       c1ubb: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c1uba: // global
           I64[Hp - 72] = :_con_info;
           P64[Hp - 64] = R1;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = sat_s1sqL_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = P64[Sp + 40];
           R3 = Hp - 70;
           R2 = Hp - 48;
           Sp = Sp + 48;
           call GHC.List.takeWhile_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1u9A_info" {
     block_c1u9A_info:
         const _c1u9A;
         const 5;
         const 18446744069414584350;
         const u1ube_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.120023392 UTC

[section ""data" . GHC.Real.$fEnumRatio_$snumericEnumFromThenTo_closure" {
     GHC.Real.$fEnumRatio_$snumericEnumFromThenTo_closure:
         const GHC.Real.$fEnumRatio_$snumericEnumFromThenTo_info;
         const 0;
 },
 GHC.Real.$fEnumRatio_$snumericEnumFromThenTo_entry() //  [R2, R3,
                                                           R4]
         { []
         }
     {offset
       c1ucV: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1ucZ; else goto c1ud0;
       c1ucZ: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fEnumRatio_$snumericEnumFromThenTo_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1ud0: // global
           I64[Sp - 24] = block_c1ucS_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u1ud8; else goto c1ucT;
       u1ud8: // global
           call _c1ucS(R1) args: 0, res: 0, upd: 0;
       c1ucT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fEnumRatio_$snumericEnumFromThenTo_info" {
     GHC.Real.$fEnumRatio_$snumericEnumFromThenTo_info:
         const GHC.Real.$fEnumRatio_$snumericEnumFromThenTo_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S1sVz_srt+656;
 },
 _c1ucS() //  [R1]
         { []
         }
     {offset
       c1ucS: // global
           I64[Sp - 8] = block_c1ucY_info;
           _s1sqR::P64 = P64[R1 + 7];
           _s1sqS::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s1sqS::P64;
           P64[Sp + 8] = _s1sqR::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1ud7; else goto c1ud2;
       u1ud7: // global
           call _c1ucY(R1) args: 0, res: 0, upd: 0;
       c1ud2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1ucS_info" {
     block_c1ucS_info:
         const _c1ucS;
         const 2;
         const 4294967326;
         const S1sVz_srt+656;
 },
 _c1ucY() //  [R1]
         { []
         }
     {offset
       c1ucY: // global
           R6 = P64[Sp + 24];
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 16];
           Sp = Sp + 32;
           call GHC.Real.$w$snumericEnumFromThenTo_entry(R6,
                                                         R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1ucY_info" {
     block_c1ucY_info:
         const _c1ucY;
         const 3;
         const 4294967326;
         const S1sVz_srt+656;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.133381379 UTC

[section ""data" . GHC.Real.numericEnumFromThenTo_closure" {
     GHC.Real.numericEnumFromThenTo_closure:
         const GHC.Real.numericEnumFromThenTo_info;
         const 0;
 },
 $dNum_s1sr4_entry() //  [R1]
         { []
         }
     {offset
       c1udD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1udE; else goto c1udF;
       c1udE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1udF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Fractional_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dNum_s1sr4_info" {
     $dNum_s1sr4_info:
         const $dNum_s1sr4_entry;
         const 1;
         const 16;
 },
 sat_s1sr7_entry() //  [R1]
         { []
         }
     {offset
       c1udO: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1udP; else goto c1udQ;
       c1udP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1udQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Real.even2_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sr7_info" {
     sat_s1sr7_info:
         const sat_s1sr7_entry;
         const 1;
         const 4294967312;
         const S1sVz_srt+584;
 },
 sat_s1sr6_entry() //  [R1]
         { []
         }
     {offset
       c1udV: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1udW; else goto c1udX;
       c1udW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1udX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 32];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 40;
           call GHC.Num.-_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sr6_info" {
     sat_s1sr6_info:
         const sat_s1sr6_entry;
         const 3;
         const 15;
 },
 mid_s1sr5_entry() //  [R1]
         { []
         }
     {offset
       c1udY: // global
           _s1sr5::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c1udZ; else goto c1ue0;
       c1ue0: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c1ue2; else goto c1ue1;
       c1ue2: // global
           HpAlloc = 64;
           goto c1udZ;
       c1udZ: // global
           R1 = _s1sr5::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1ue1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1sr5::P64;
           _s1sqX::P64 = P64[_s1sr5::P64 + 16];
           _s1sqY::P64 = P64[_s1sr5::P64 + 24];
           _s1sqZ::P64 = P64[_s1sr5::P64 + 32];
           _s1sr4::P64 = P64[_s1sr5::P64 + 40];
           I64[Hp - 56] = sat_s1sr7_info;
           P64[Hp - 40] = _s1sr4::P64;
           I64[Hp - 32] = sat_s1sr6_info;
           P64[Hp - 16] = _s1sqY::P64;
           P64[Hp - 8] = _s1sqZ::P64;
           P64[Hp] = _s1sr4::P64;
           R2 = _s1sqX::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 32;
           P64[Sp - 24] = Hp - 56;
           Sp = Sp - 40;
           call GHC.Real./_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . mid_s1sr5_info" {
     mid_s1sr5_info:
         const mid_s1sr5_entry;
         const 4;
         const 4294967311;
         const S1sVz_srt+584;
 },
 ds_s1sr9_entry() //  [R1]
         { []
         }
     {offset
       c1ueb: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1uec; else goto c1ued;
       c1uec: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1ued: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call GHC.Num.+_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds_s1sr9_info" {
     ds_s1sr9_info:
         const ds_s1sr9_entry;
         const 3;
         const 15;
 },
 sat_s1srb_entry() //  [R1, R2]
         { []
         }
     {offset
       c1uej: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1uek; else goto c1uel;
       c1uek: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1uel: // global
           _s1sra::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _s1sra::P64;
           P64[Sp - 8] = P64[R1 + 15];
           Sp = Sp - 24;
           call GHC.Classes.>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1srb_info" {
     sat_s1srb_info:
         const sat_s1srb_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 ds_s1src_entry() //  [R1]
         { []
         }
     {offset
       c1ues: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1uet; else goto c1ueu;
       c1uet: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1ueu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call GHC.Num.+_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds_s1src_info" {
     ds_s1src_info:
         const ds_s1src_entry;
         const 3;
         const 15;
 },
 sat_s1sre_entry() //  [R1, R2]
         { []
         }
     {offset
       c1ueA: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1ueB; else goto c1ueC;
       c1ueB: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1ueC: // global
           _s1srd::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _s1srd::P64;
           P64[Sp - 8] = P64[R1 + 15];
           Sp = Sp - 24;
           call GHC.Classes.<=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1sre_info" {
     sat_s1sre_info:
         const sat_s1sre_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s1srf_entry() //  [R1]
         { []
         }
     {offset
       c1ueH: // global
           _s1srf::P64 = R1;
           if ((Sp + -80) < SpLim) (likely: False) goto c1ueI; else goto c1ueJ;
       c1ueJ: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c1ueL; else goto c1ueK;
       c1ueL: // global
           HpAlloc = 72;
           goto c1ueI;
       c1ueI: // global
           R1 = _s1srf::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1ueK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1srf::P64;
           _s1sqW::P64 = P64[_s1srf::P64 + 16];
           _s1sqX::P64 = P64[_s1srf::P64 + 24];
           _s1sqY::P64 = P64[_s1srf::P64 + 32];
           _s1sqZ::P64 = P64[_s1srf::P64 + 40];
           _s1sr0::P64 = P64[_s1srf::P64 + 48];
           I64[Hp - 64] = $dNum_s1sr4_info;
           P64[Hp - 48] = _s1sqX::P64;
           I64[Hp - 40] = mid_s1sr5_info;
           P64[Hp - 24] = _s1sqX::P64;
           P64[Hp - 16] = _s1sqY::P64;
           P64[Hp - 8] = _s1sqZ::P64;
           _c1udz::P64 = Hp - 64;
           P64[Hp] = _c1udz::P64;
           I64[Sp - 56] = block_c1ue3_info;
           R2 = _s1sqW::P64;
           I64[Sp - 80] = stg_ap_pp_info;
           P64[Sp - 72] = _s1sqZ::P64;
           P64[Sp - 64] = _s1sqY::P64;
           P64[Sp - 48] = _c1udz::P64;
           P64[Sp - 40] = Hp - 40;
           P64[Sp - 32] = _s1sqW::P64;
           P64[Sp - 24] = _s1sr0::P64;
           Sp = Sp - 80;
           call GHC.Classes.>=_entry(R2) args: 32, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1srf_info" {
     sat_s1srf_info:
         const sat_s1srf_entry;
         const 5;
         const 4294967311;
         const S1sVz_srt+584;
 },
 _c1ue3() //  [R1]
         { []
         }
     {offset
       c1ue3: // global
           _c1udz::P64 = P64[Sp + 8];
           _c1udG::P64 = P64[Sp + 16];
           _s1sqW::P64 = P64[Sp + 24];
           _s1sr0::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto c1ueE; else goto c1ueF;
       c1ueE: // global
           Hp = Hp + 64;
           _s1sr8::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c1ueR; else goto c1ueN;
       c1ueN: // global
           I64[Hp - 56] = ds_s1sr9_info;
           P64[Hp - 40] = _s1sr0::P64;
           P64[Hp - 32] = _c1udz::P64;
           P64[Hp - 24] = _c1udG::P64;
           I64[Hp - 16] = sat_s1srb_info;
           P64[Hp - 8] = _s1sqW::P64;
           P64[Hp] = Hp - 56;
           R1 = Hp - 15;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c1ueF: // global
           Hp = Hp + 64;
           _s1sr8::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c1ueR; else goto c1ueQ;
       c1ueR: // global
           HpAlloc = 64;
           R1 = _s1sr8::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c1ueQ: // global
           I64[Hp - 56] = ds_s1src_info;
           P64[Hp - 40] = _s1sr0::P64;
           P64[Hp - 32] = _c1udz::P64;
           P64[Hp - 24] = _c1udG::P64;
           I64[Hp - 16] = sat_s1sre_info;
           P64[Hp - 8] = _s1sqW::P64;
           P64[Hp] = Hp - 56;
           R1 = Hp - 15;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1ue3_info" {
     block_c1ue3_info:
         const _c1ue3;
         const 4;
         const 30;
 },
 GHC.Real.numericEnumFromThenTo_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c1ueS: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c1ueT; else goto c1ueU;
       c1ueT: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.numericEnumFromThenTo_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1ueU: // global
           I64[Sp - 48] = block_c1uds_info;
           _s1sqY::P64 = R4;
           R4 = R5;
           _s1sqX::P64 = R3;
           R3 = _s1sqY::P64;
           _s1sqW::P64 = R2;
           R2 = _s1sqX::P64;
           P64[Sp - 40] = _s1sqW::P64;
           P64[Sp - 32] = _s1sqX::P64;
           P64[Sp - 24] = _s1sqY::P64;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 48;
           call GHC.Real.$wnumericEnumFromThen_entry(R4,
                                                     R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.numericEnumFromThenTo_info" {
     GHC.Real.numericEnumFromThenTo_info:
         const GHC.Real.numericEnumFromThenTo_entry;
         const 0;
         const 8800387989518;
         const 21474836505;
         const S1sVz_srt+584;
 },
 _c1uds() //  [R1, R2]
         { []
         }
     {offset
       c1uds: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c1ueX; else goto c1ueW;
       c1ueX: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c1ueW: // global
           I64[Hp - 72] = :_con_info;
           P64[Hp - 64] = R1;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = sat_s1srf_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = P64[Sp + 40];
           R3 = Hp - 70;
           R2 = Hp - 48;
           Sp = Sp + 48;
           call GHC.List.takeWhile_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1uds_info" {
     block_c1uds_info:
         const _c1uds;
         const 5;
         const 4294967326;
         const S1sVz_srt+584;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.15841566 UTC

[section ""data" . GHC.Real.fromIntegral_closure" {
     GHC.Real.fromIntegral_closure:
         const GHC.Real.fromIntegral_info;
 },
 sat_s1srk_entry() //  [R1]
         { []
         }
     {offset
       c1ugF: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1ugG; else goto c1ugH;
       c1ugG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1ugH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Real.toInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1srk_info" {
     sat_s1srk_info:
         const sat_s1srk_entry;
         const 2;
         const 18;
 },
 GHC.Real.fromIntegral_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1ugI: // global
           _s1srj::P64 = R4;
           _s1sri::P64 = R3;
           _s1srh::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c1ugJ; else goto c1ugK;
       c1ugK: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1ugM; else goto c1ugL;
       c1ugM: // global
           HpAlloc = 32;
           goto c1ugJ;
       c1ugJ: // global
           R4 = _s1srj::P64;
           R3 = _s1sri::P64;
           R2 = _s1srh::P64;
           R1 = GHC.Real.fromIntegral_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1ugL: // global
           I64[Hp - 24] = sat_s1srk_info;
           P64[Hp - 8] = _s1srh::P64;
           P64[Hp] = _s1srj::P64;
           R2 = _s1sri::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Num.fromInteger_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.fromIntegral_info" {
     GHC.Real.fromIntegral_info:
         const GHC.Real.fromIntegral_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.164404201 UTC

[section ""data" . GHC.Real.realToFrac_closure" {
     GHC.Real.realToFrac_closure:
         const GHC.Real.realToFrac_info;
 },
 sat_s1sro_entry() //  [R1]
         { []
         }
     {offset
       c1uha: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1uhb; else goto c1uhc;
       c1uhb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1uhc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Real.toRational_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sro_info" {
     sat_s1sro_info:
         const sat_s1sro_entry;
         const 2;
         const 18;
 },
 GHC.Real.realToFrac_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1uhd: // global
           _s1srn::P64 = R4;
           _s1srm::P64 = R3;
           _s1srl::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c1uhe; else goto c1uhf;
       c1uhf: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1uhh; else goto c1uhg;
       c1uhh: // global
           HpAlloc = 32;
           goto c1uhe;
       c1uhe: // global
           R4 = _s1srn::P64;
           R3 = _s1srm::P64;
           R2 = _s1srl::P64;
           R1 = GHC.Real.realToFrac_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1uhg: // global
           I64[Hp - 24] = sat_s1sro_info;
           P64[Hp - 8] = _s1srl::P64;
           P64[Hp] = _s1srn::P64;
           R2 = _s1srm::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call GHC.Real.fromRational_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.realToFrac_info" {
     GHC.Real.realToFrac_info:
         const GHC.Real.realToFrac_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.169435747 UTC

[section ""data" . GHC.Real.showSigned1_closure" {
     GHC.Real.showSigned1_closure:
         const GHC.Types.C#_con_info;
         const 45;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.176625841 UTC

[section ""data" . GHC.Real.showSigned_closure" {
     GHC.Real.showSigned_closure:
         const GHC.Real.showSigned_info;
         const 0;
 },
 $dNum_s1srt_entry() //  [R1]
         { []
         }
     {offset
       c1uhG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1uhH; else goto c1uhI;
       c1uhH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1uhI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dNum_s1srt_info" {
     $dNum_s1srt_info:
         const $dNum_s1srt_entry;
         const 1;
         const 16;
 },
 sat_s1srv_entry() //  [R1]
         { []
         }
     {offset
       c1uhN: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1uhO; else goto c1uhP;
       c1uhO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1uhP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Real.even1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1srv_info" {
     sat_s1srv_info:
         const sat_s1srv_entry;
         const 1;
         const 4294967312;
         const S1sVz_srt+680;
 },
 sat_s1srA_entry() //  [R1]
         { []
         }
     {offset
       c1uic: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1uid; else goto c1uie;
       c1uid: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1uie: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Num.negate_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1srA_info" {
     sat_s1srA_info:
         const sat_s1srA_entry;
         const 2;
         const 18;
 },
 g1_s1srz_entry() //  [R1]
         { []
         }
     {offset
       c1uif: // global
           _s1srz::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1uig; else goto c1uih;
       c1uih: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1uij; else goto c1uii;
       c1uij: // global
           HpAlloc = 32;
           goto c1uig;
       c1uig: // global
           R1 = _s1srz::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1uii: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1srz::P64;
           _s1srq::P64 = P64[_s1srz::P64 + 16];
           _s1srs::P64 = P64[_s1srz::P64 + 24];
           _s1srt::P64 = P64[_s1srz::P64 + 32];
           I64[Hp - 24] = sat_s1srA_info;
           P64[Hp - 8] = _s1srs::P64;
           P64[Hp] = _s1srt::P64;
           R2 = Hp - 24;
           R1 = _s1srq::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . g1_s1srz_info" {
     g1_s1srz_info:
         const g1_s1srz_entry;
         const 3;
         const 15;
 },
 sat_s1srE_entry() //  [R1, R2]
         { []
         }
     {offset
       c1uiu: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c1uiy; else goto c1uix;
       c1uiy: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1uix: // global
           _s1srz::P64 = P64[R1 + 7];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _s1srz::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Real.showSigned1_closure+1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1srE_info" {
     sat_s1srE_info:
         const sat_s1srE_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s1srH_entry() //  [R1]
         { []
         }
     {offset
       c1uiK: // global
           _s1srH::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1uiL; else goto c1uiM;
       c1uiM: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1uiO; else goto c1uiN;
       c1uiO: // global
           HpAlloc = 24;
           goto c1uiL;
       c1uiL: // global
           R1 = _s1srH::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1uiN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1srH::P64;
           _s1srz::P64 = P64[_s1srH::P64 + 16];
           _s1srF::P64 = P64[_s1srH::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s1srF::P64;
           R2 = Hp - 14;
           R1 = _s1srz::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1srH_info" {
     sat_s1srH_info:
         const sat_s1srH_entry;
         const 2;
         const 18;
 },
 sat_s1srJ_entry() //  [R1, R2]
         { []
         }
     {offset
       c1uiR: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c1uiV; else goto c1uiU;
       c1uiV: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1uiU: // global
           _s1srz::P64 = P64[R1 + 7];
           I64[Hp - 72] = sat_s1srH_info;
           P64[Hp - 56] = _s1srz::P64;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = GHC.Real.showSigned1_closure+1;
           P64[Hp - 24] = Hp - 72;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 38;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1srJ_info" {
     sat_s1srJ_info:
         const sat_s1srJ_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 GHC.Real.showSigned_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c1uiW: // global
           _s1srs::P64 = R5;
           _s1srr::P64 = R4;
           _s1srq::P64 = R3;
           _s1srp::P64 = R2;
           if ((Sp + -72) < SpLim) (likely: False) goto c1uiX; else goto c1uiY;
       c1uiY: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c1uj0; else goto c1uiZ;
       c1uj0: // global
           HpAlloc = 48;
           goto c1uiX;
       c1uiX: // global
           R5 = _s1srs::P64;
           R4 = _s1srr::P64;
           R3 = _s1srq::P64;
           R2 = _s1srp::P64;
           R1 = GHC.Real.showSigned_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1uiZ: // global
           I64[Hp - 40] = $dNum_s1srt_info;
           P64[Hp - 24] = _s1srp::P64;
           I64[Hp - 16] = sat_s1srv_info;
           _c1uhC::P64 = Hp - 40;
           P64[Hp] = _c1uhC::P64;
           I64[Sp - 48] = block_c1uhQ_info;
           R2 = _s1srp::P64;
           P64[Sp - 40] = _c1uhC::P64;
           P64[Sp - 32] = Hp - 16;
           P64[Sp - 24] = _s1srq::P64;
           P64[Sp - 16] = _s1srr::P64;
           P64[Sp - 8] = _s1srs::P64;
           Sp = Sp - 48;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.showSigned_info" {
     GHC.Real.showSigned_info:
         const GHC.Real.showSigned_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const S1sVz_srt+680;
 },
 _c1uhQ() //  [R1]
         { []
         }
     {offset
       c1uhQ: // global
           I64[Sp] = block_c1uhU_info;
           R2 = R1;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 40];
           P64[Sp - 8] = P64[Sp + 16];
           Sp = Sp - 24;
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1uhQ_info" {
     block_c1uhQ_info:
         const _c1uhQ;
         const 5;
         const 30;
 },
 _c1uhU() //  [R1]
         { []
         }
     {offset
       c1uhU: // global
           if (R1 & 7 == 1) goto c1uj5; else goto c1uj7;
       c1uj5: // global
           R2 = P64[Sp + 40];
           R1 = P64[Sp + 24];
           Sp = Sp + 48;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       c1uj7: // global
           I64[Sp] = block_c1uhZ_info;
           R1 = P64[Sp + 32];
           if (R1 & 7 != 0) goto u1ujf; else goto c1ui0;
       u1ujf: // global
           call _c1uhZ(R1) args: 0, res: 0, upd: 0;
       c1ui0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1uhU_info" {
     block_c1uhU_info:
         const _c1uhU;
         const 133;
         const 30;
 },
 _c1uhZ() //  [R1]
         { []
         }
     {offset
       c1uhZ: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c1uja; else goto c1uj9;
       c1uja: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1uj9: // global
           _s1sry::I64 = I64[R1 + 7];
           I64[Hp - 48] = g1_s1srz_info;
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = P64[Sp + 40];
           P64[Hp - 16] = P64[Sp + 8];
           _c1ui4::P64 = Hp - 48;
           if (%MO_S_Le_W64(_s1sry::I64, 6)) goto c1ujc; else goto c1ujd;
       c1ujc: // global
           I64[Hp - 8] = sat_s1srE_info;
           P64[Hp] = _c1ui4::P64;
           R1 = Hp - 7;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1ujd: // global
           I64[Hp - 8] = sat_s1srJ_info;
           P64[Hp] = _c1ui4::P64;
           R1 = Hp - 7;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1uhZ_info" {
     block_c1uhZ_info:
         const _c1uhZ;
         const 645;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.201303851 UTC

[section ""data" . GHC.Real.even_closure" {
     GHC.Real.even_closure:
         const GHC.Real.even_info;
         const 0;
 },
 $dNum_s1srN_entry() //  [R1]
         { []
         }
     {offset
       c1ukP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1ukQ; else goto c1ukR;
       c1ukQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1ukR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dNum_s1srN_info" {
     $dNum_s1srN_info:
         const $dNum_s1srN_entry;
         const 1;
         const 16;
 },
 sat_s1srS_entry() //  [R1]
         { []
         }
     {offset
       c1ukW: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1ukX; else goto c1ukY;
       c1ukX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1ukY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Real.even1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1srS_info" {
     sat_s1srS_info:
         const sat_s1srS_entry;
         const 1;
         const 4294967312;
         const S1sVz_srt+680;
 },
 sat_s1srQ_entry() //  [R1]
         { []
         }
     {offset
       c1ul7: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1ul8; else goto c1ul9;
       c1ul8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1ul9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Real.even2_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1srQ_info" {
     sat_s1srQ_info:
         const sat_s1srQ_entry;
         const 1;
         const 4294967312;
         const S1sVz_srt+584;
 },
 sat_s1srR_entry() //  [R1]
         { []
         }
     {offset
       c1ula: // global
           _s1srR::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c1ulb; else goto c1ulc;
       c1ulc: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1ule; else goto c1uld;
       c1ule: // global
           HpAlloc = 24;
           goto c1ulb;
       c1ulb: // global
           R1 = _s1srR::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1uld: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1srR::P64;
           _s1srK::P64 = P64[_s1srR::P64 + 16];
           _s1srL::P64 = P64[_s1srR::P64 + 24];
           _s1srN::P64 = P64[_s1srR::P64 + 32];
           I64[Hp - 16] = sat_s1srQ_info;
           P64[Hp] = _s1srN::P64;
           R2 = _s1srK::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _s1srL::P64;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 40;
           call GHC.Real.rem_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1srR_info" {
     sat_s1srR_info:
         const sat_s1srR_entry;
         const 3;
         const 4294967311;
         const S1sVz_srt+584;
 },
 GHC.Real.even_entry() //  [R2, R3]
         { []
         }
     {offset
       c1ulf: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1ull; else goto c1ulm;
       c1ull: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.even_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1ulm: // global
           I64[Sp - 24] = block_c1ukH_info;
           _s1srK::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = _s1srK::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.even_info" {
     GHC.Real.even_info:
         const GHC.Real.even_entry;
         const 0;
         const 87965225189390;
         const 8589934607;
         const S1sVz_srt+584;
 },
 _c1ukH() //  [R1]
         { []
         }
     {offset
       c1ukH: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c1ulp; else goto c1ulo;
       c1ulp: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1ulo: // global
           I64[Hp - 80] = $dNum_s1srN_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = sat_s1srS_info;
           _c1ukL::P64 = Hp - 80;
           P64[Hp - 40] = _c1ukL::P64;
           I64[Hp - 32] = sat_s1srR_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = _c1ukL::P64;
           I64[Sp] = block_c1ulg_info;
           R2 = R1;
           P64[Sp + 8] = Hp - 32;
           P64[Sp + 16] = Hp - 56;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1ukH_info" {
     block_c1ukH_info:
         const _c1ukH;
         const 2;
         const 17596481011742;
         const S1sVz_srt+584;
 },
 _c1ulg() //  [R1]
         { []
         }
     {offset
       c1ulg: // global
           I64[Sp] = block_c1ulk_info;
           R2 = R1;
           call GHC.Classes.$p1Ord_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1ulg_info" {
     block_c1ulg_info:
         const _c1ulg;
         const 2;
         const 30;
 },
 _c1ulk() //  [R1]
         { []
         }
     {offset
       c1ulk: // global
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           call GHC.Classes.==_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1ulk_info" {
     block_c1ulk_info:
         const _c1ulk;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.21740344 UTC

[section ""data" . GHC.Real.odd_closure" {
     GHC.Real.odd_closure:
         const GHC.Real.odd_info;
         const 0;
 },
 GHC.Real.odd_entry() //  [R2, R3]
         { []
         }
     {offset
       c1umv: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1umw; else goto c1umx;
       c1umw: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.odd_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1umx: // global
           I64[Sp - 8] = block_c1ump_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Real.even_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.odd_info" {
     GHC.Real.odd_info:
         const GHC.Real.odd_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S1sVz_srt+696;
 },
 _c1ump() //  [R1]
         { []
         }
     {offset
       c1ump: // global
           if (R1 & 7 == 1) goto c1ums; else goto c1umt;
       c1ums: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1umt: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1ump_info" {
     block_c1ump_info:
         const _c1ump;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.22288648 UTC

[section ""data" . lvl3_r1j3b_closure" {
     lvl3_r1j3b_closure:
         const GHC.Real.:%_con_info;
         const GHC.Real.$fEnumRatio1_closure;
         const GHC.Real.even2_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.224433408 UTC

[section ""cstring" . lvl4_r1j3c_bytes" {
     lvl4_r1j3c_bytes:
         I8[] [114,111,117,110,100,32,100,101,102,97,117,108,116,32,100,101,102,110,58,32,66,97,100,32,118,97,108,117,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.227145933 UTC

[section ""data" . GHC.Real.$fRealFracRatio1_closure" {
     GHC.Real.$fRealFracRatio1_closure:
         const GHC.Real.$fRealFracRatio1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Real.$fRealFracRatio1_entry() //  [R1]
         { []
         }
     {offset
       c1un3: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1un4; else goto c1un5;
       c1un4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1un5: // global
           (_c1umY::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c1umY::I64 == 0) goto c1un0; else goto c1umZ;
       c1un0: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c1umZ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c1umY::I64;
           I64[Sp - 24] = block_c1un1_info;
           R2 = lvl4_r1j3c_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Real.$fRealFracRatio1_info" {
     GHC.Real.$fRealFracRatio1_info:
         const GHC.Real.$fRealFracRatio1_entry;
         const 0;
         const 4294967317;
         const S1sVz_srt+712;
 },
 _c1un1() //  [R1]
         { []
         }
     {offset
       c1un1: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1un1_info" {
     block_c1un1_info:
         const _c1un1;
         const 0;
         const 4294967326;
         const S1sVz_srt+712;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.242533604 UTC

[section ""data" . GHC.Real.$dmround_closure" {
     GHC.Real.$dmround_closure:
         const GHC.Real.$dmround_info;
         const 0;
 },
 ds_s1ss0_entry() //  [R1]
         { []
         }
     {offset
       c1unt: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1unu; else goto c1unv;
       c1unu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1unv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call GHC.Real.properFraction_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds_s1ss0_info" {
     ds_s1ss0_info:
         const ds_s1ss0_entry;
         const 3;
         const 15;
 },
 $dNum_s1ss4_entry() //  [R1]
         { []
         }
     {offset
       c1unM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1unN; else goto c1unO;
       c1unN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1unO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dNum_s1ss4_info" {
     $dNum_s1ss4_info:
         const $dNum_s1ss4_entry;
         const 1;
         const 16;
 },
 sat_s1ssc_entry() //  [R1]
         { []
         }
     {offset
       c1uo4: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1uo5; else goto c1uo6;
       c1uo5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1uo6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c1uo2_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Real.$p2RealFrac_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1ssc_info" {
     sat_s1ssc_info:
         const sat_s1ssc_entry;
         const 1;
         const 4294967312;
         const S1sVz_srt+720;
 },
 _c1uo2() //  [R1]
         { []
         }
     {offset
       c1uo2: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = lvl3_r1j3b_closure+1;
           Sp = Sp - 8;
           call GHC.Real.fromRational_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1uo2_info" {
     block_c1uo2_info:
         const _c1uo2;
         const 0;
         const 4294967326;
         const S1sVz_srt+720;
 },
 sat_s1ssa_entry() //  [R1]
         { []
         }
     {offset
       c1uoe: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1uof; else goto c1uog;
       c1uof: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1uog: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Num.abs_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1ssa_info" {
     sat_s1ssa_info:
         const sat_s1ssa_entry;
         const 2;
         const 18;
 },
 sat_s1ssd_entry() //  [R1]
         { []
         }
     {offset
       c1uoh: // global
           _s1ssd::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c1uoi; else goto c1uoj;
       c1uoj: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c1uol; else goto c1uok;
       c1uol: // global
           HpAlloc = 56;
           goto c1uoi;
       c1uoi: // global
           R1 = _s1ssd::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1uok: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1ssd::P64;
           _s1srX::P64 = P64[_s1ssd::P64 + 16];
           _s1ss4::P64 = P64[_s1ssd::P64 + 24];
           _s1ss5::P64 = P64[_s1ssd::P64 + 32];
           I64[Hp - 48] = sat_s1ssc_info;
           P64[Hp - 32] = _s1srX::P64;
           I64[Hp - 24] = sat_s1ssa_info;
           P64[Hp - 8] = _s1ss4::P64;
           P64[Hp] = _s1ss5::P64;
           R2 = _s1ss4::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 24;
           P64[Sp - 24] = Hp - 48;
           Sp = Sp - 40;
           call GHC.Num.-_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1ssd_info" {
     sat_s1ssd_info:
         const sat_s1ssd_entry;
         const 3;
         const 4294967311;
         const S1sVz_srt+720;
 },
 ds1_s1ss9_entry() //  [R1]
         { []
         }
     {offset
       c1uom: // global
           _s1ss9::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c1uon; else goto c1uoo;
       c1uoo: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c1uoq; else goto c1uop;
       c1uoq: // global
           HpAlloc = 40;
           goto c1uon;
       c1uon: // global
           R1 = _s1ss9::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1uop: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1ss9::P64;
           _s1srX::P64 = P64[_s1ss9::P64 + 16];
           _s1ss4::P64 = P64[_s1ss9::P64 + 24];
           _s1ss5::P64 = P64[_s1ss9::P64 + 32];
           I64[Hp - 32] = sat_s1ssd_info;
           P64[Hp - 16] = _s1srX::P64;
           P64[Hp - 8] = _s1ss4::P64;
           P64[Hp] = _s1ss5::P64;
           R2 = _s1ss4::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 32;
           Sp = Sp - 32;
           call GHC.Num.signum_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds1_s1ss9_info" {
     ds1_s1ss9_info:
         const ds1_s1ss9_entry;
         const 3;
         const 4294967311;
         const S1sVz_srt+720;
 },
 sat_s1ssi_entry() //  [R1]
         { []
         }
     {offset
       c1uoA: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1uoB; else goto c1uoC;
       c1uoB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1uoC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Real.$fEnumRatio1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1ssi_info" {
     sat_s1ssi_info:
         const sat_s1ssi_entry;
         const 1;
         const 4294967312;
         const S1sVz_srt+552;
 },
 sat_s1ssj_entry() //  [R1]
         { []
         }
     {offset
       c1uoD: // global
           _s1ssj::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c1uoE; else goto c1uoF;
       c1uoF: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1uoH; else goto c1uoG;
       c1uoH: // global
           HpAlloc = 24;
           goto c1uoE;
       c1uoE: // global
           R1 = _s1ssj::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1uoG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1ssj::P64;
           _s1ss4::P64 = P64[_s1ssj::P64 + 16];
           I64[Hp - 16] = sat_s1ssi_info;
           P64[Hp] = _s1ss4::P64;
           R2 = _s1ss4::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 32;
           call GHC.Num.negate_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1ssj_info" {
     sat_s1ssj_info:
         const sat_s1ssj_entry;
         const 1;
         const 4294967312;
         const S1sVz_srt+552;
 },
 sat_s1sss_entry() //  [R1]
         { []
         }
     {offset
       c1uoQ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1uoR; else goto c1uoS;
       c1uoR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1uoS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Real.even1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sss_info" {
     sat_s1sss_info:
         const sat_s1sss_entry;
         const 1;
         const 4294967312;
         const S1sVz_srt+680;
 },
 sat_s1sso_entry() //  [R1]
         { []
         }
     {offset
       c1upa: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1upb; else goto c1upc;
       c1upb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1upc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Real.even1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sso_info" {
     sat_s1sso_info:
         const sat_s1sso_entry;
         const 1;
         const 4294967312;
         const S1sVz_srt+680;
 },
 sat_s1ssq_entry() //  [R1]
         { []
         }
     {offset
       c1upl: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1upm; else goto c1upn;
       c1upm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1upn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Real.$fEnumRatio1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1ssq_info" {
     sat_s1ssq_info:
         const sat_s1ssq_entry;
         const 1;
         const 4294967312;
         const S1sVz_srt+552;
 },
 sat_s1ssr_entry() //  [R1]
         { []
         }
     {offset
       c1upu: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1upv; else goto c1upw;
       c1upv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1upw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Real.$fEnumRatio1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1ssr_info" {
     sat_s1ssr_info:
         const sat_s1ssr_entry;
         const 1;
         const 4294967312;
         const S1sVz_srt+552;
 },
 sat_s1ssu_entry() //  [R1]
         { []
         }
     {offset
       c1upF: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1upG; else goto c1upH;
       c1upG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1upH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Real.$fEnumRatio1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1ssu_info" {
     sat_s1ssu_info:
         const sat_s1ssu_entry;
         const 1;
         const 4294967312;
         const S1sVz_srt+552;
 },
 GHC.Real.$dmround_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1upI: // global
           _s1srZ::P64 = R4;
           _s1srY::P64 = R3;
           _s1srX::P64 = R2;
           if ((Sp + -88) < SpLim) (likely: False) goto c1upJ; else goto c1upK;
       c1upK: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c1upM; else goto c1upL;
       c1upM: // global
           HpAlloc = 40;
           goto c1upJ;
       c1upJ: // global
           R4 = _s1srZ::P64;
           R3 = _s1srY::P64;
           R2 = _s1srX::P64;
           R1 = GHC.Real.$dmround_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1upL: // global
           I64[Hp - 32] = ds_s1ss0_info;
           P64[Hp - 16] = _s1srX::P64;
           P64[Hp - 8] = _s1srY::P64;
           P64[Hp] = _s1srZ::P64;
           I64[Sp - 32] = block_c1unw_info;
           R2 = _s1srX::P64;
           P64[Sp - 24] = Hp - 32;
           P64[Sp - 16] = _s1srX::P64;
           P64[Sp - 8] = _s1srY::P64;
           Sp = Sp - 32;
           call GHC.Real.$p1RealFrac_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$dmround_info" {
     GHC.Real.$dmround_info:
         const GHC.Real.$dmround_entry;
         const 0;
         const 64457773961707534;
         const 12884901911;
         const S1sVz_srt+552;
 },
 _c1unw() //  [R1]
         { []
         }
     {offset
       c1unw: // global
           I64[Sp - 8] = block_c1unA_info;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1unw_info" {
     block_c1unw_info:
         const _c1unw;
         const 3;
         const 46443375452225566;
         const S1sVz_srt+552;
 },
 _c1unA() //  [R1]
         { []
         }
     {offset
       c1unA: // global
           I64[Sp - 8] = block_c1unE_info;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Classes.$p1Ord_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1unA_info" {
     block_c1unA_info:
         const _c1unA;
         const 4;
         const 46443375452225566;
         const S1sVz_srt+552;
 },
 _c1unE() //  [R1]
         { []
         }
     {offset
       c1unE: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c1upR; else goto c1upQ;
       c1upR: // global
           HpAlloc = 136;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1upQ: // global
           I64[Hp - 128] = $dNum_s1ss4_info;
           P64[Hp - 112] = P64[Sp + 16];
           I64[Hp - 104] = stg_sel_1_upd_info;
           _c1unp::P64 = P64[Sp + 24];
           P64[Hp - 88] = _c1unp::P64;
           I64[Hp - 80] = ds1_s1ss9_info;
           P64[Hp - 64] = P64[Sp + 32];
           _c1unI::P64 = Hp - 128;
           P64[Hp - 56] = _c1unI::P64;
           _c1unP::P64 = Hp - 104;
           P64[Hp - 48] = _c1unP::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _c1unp::P64;
           I64[Hp - 16] = sat_s1ssj_info;
           P64[Hp] = _c1unI::P64;
           I64[Sp - 16] = block_c1uoI_info;
           R2 = R1;
           I64[Sp - 40] = stg_ap_pp_info;
           _c1unQ::P64 = Hp - 80;
           P64[Sp - 32] = _c1unQ::P64;
           P64[Sp - 24] = Hp - 16;
           P64[Sp - 8] = R1;
           P64[Sp] = Hp - 40;
           P64[Sp + 16] = _c1unQ::P64;
           P64[Sp + 24] = _c1unP::P64;
           P64[Sp + 32] = _c1unI::P64;
           Sp = Sp - 40;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1unE_info" {
     block_c1unE_info:
         const _c1unE;
         const 5;
         const 46443375452225566;
         const S1sVz_srt+552;
 },
 _c1uoI() //  [R1]
         { []
         }
     {offset
       c1uoI: // global
           if (R1 & 7 == 1) goto c1upT; else goto u1uqP;
       c1upT: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1upW; else goto c1upV;
       c1upW: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1upV: // global
           I64[Hp - 16] = sat_s1sss_info;
           P64[Hp] = P64[Sp + 48];
           I64[Sp] = block_c1upx_info;
           R2 = P64[Sp + 8];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 32];
           P64[Sp - 8] = Hp - 16;
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
       u1uqP: // global
           Sp = Sp + 16;
           call _c1uqJ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1uoI_info" {
     block_c1uoI_info:
         const _c1uoI;
         const 7;
         const 37436176197484574;
         const S1sVz_srt+552;
 },
 _c1upx() //  [R1]
         { []
         }
     {offset
       c1upx: // global
           if (R1 & 7 == 1) goto c1uqd; else goto c1uqv;
       c1uqd: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1uqg; else goto c1uqf;
       c1uqg: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1uqf: // global
           I64[Hp - 16] = sat_s1ssu_info;
           P64[Hp] = P64[Sp + 48];
           _s1ss3::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1uqb_info;
           R2 = _s1ss3::P64;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = P64[Sp + 32];
           P64[Sp] = Hp - 16;
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
       c1uqv: // global
           I64[Sp + 8] = block_c1uqt_info;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 56];
           Sp = Sp + 8;
           call GHC.Real.even_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1upx_info" {
     block_c1upx_info:
         const _c1upx;
         const 7;
         const 37436176197484574;
         const S1sVz_srt+552;
 },
 _c1uqb() //  [R1]
         { []
         }
     {offset
       c1uqb: // global
           if (R1 & 7 == 1) goto c1uqm; else goto u1uqS;
       c1uqm: // global
           R1 = GHC.Real.$fRealFracRatio1_closure;
           Sp = Sp + 56;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       u1uqS: // global
           Sp = Sp + 8;
           call _s1ssl() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1uqb_info" {
     block_c1uqb_info:
         const _c1uqb;
         const 262;
         const 36310276290641950;
         const S1sVz_srt+552;
 },
 _c1uqt() //  [R1]
         { []
         }
     {offset
       c1uqt: // global
           if (R1 & 7 == 1) goto u1uqQ; else goto u1uqR;
       u1uqQ: // global
           Sp = Sp + 8;
           call _s1ssl() args: 0, res: 0, upd: 0;
       u1uqR: // global
           Sp = Sp + 8;
           call _c1uqJ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1uqt_info" {
     block_c1uqt_info:
         const _c1uqt;
         const 262;
         const 281479271677982;
         const S1sVz_srt+552;
 },
 _s1ssl() //  []
         { []
         }
     {offset
       s1ssl: // global
           I64[Sp - 8] = block_c1uoY_info;
           R2 = P64[Sp + 40];
           Sp = Sp - 8;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c1uoY() //  [R1]
         { []
         }
     {offset
       c1uoY: // global
           I64[Sp] = block_c1up2_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1uoY_info" {
     block_c1uoY_info:
         const _c1uoY;
         const 2310;
         const 281479271677982;
         const S1sVz_srt+552;
 },
 _c1up2() //  [R1]
         { []
         }
     {offset
       c1up2: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1uq1; else goto c1uq0;
       c1uq1: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1uq0: // global
           I64[Hp - 16] = sat_s1sso_info;
           P64[Hp] = P64[Sp + 40];
           I64[Sp] = block_c1upd_info;
           R2 = P64[Sp + 16];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 32];
           P64[Sp - 8] = Hp - 16;
           P64[Sp + 48] = R1;
           Sp = Sp - 24;
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1up2_info" {
     block_c1up2_info:
         const _c1up2;
         const 2310;
         const 281479271677982;
         const S1sVz_srt+552;
 },
 _c1upd() //  [R1]
         { []
         }
     {offset
       c1upd: // global
           _c1uor::P64 = P64[Sp + 8];
           _s1ssn::P64 = P64[Sp + 48];
           if (R1 & 7 == 1) goto c1uq3; else goto c1uq7;
       c1uq3: // global
           Hp = Hp + 24;
           _s1ssp::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c1uqa; else goto c1uq5;
       c1uq5: // global
           I64[Hp - 16] = sat_s1ssq_info;
           P64[Hp] = _s1ssn::P64;
           R2 = _s1ssn::P64;
           I64[Sp + 32] = stg_ap_pp_info;
           P64[Sp + 40] = _c1uor::P64;
           P64[Sp + 48] = Hp - 16;
           Sp = Sp + 32;
           call GHC.Num.+_entry(R2) args: 32, res: 0, upd: 8;
       c1uq7: // global
           Hp = Hp + 24;
           _s1ssp::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c1uqa; else goto c1uq9;
       c1uqa: // global
           HpAlloc = 24;
           R1 = _s1ssp::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1uq9: // global
           I64[Hp - 16] = sat_s1ssr_info;
           P64[Hp] = _s1ssn::P64;
           R2 = _s1ssn::P64;
           I64[Sp + 32] = stg_ap_pp_info;
           P64[Sp + 40] = _c1uor::P64;
           P64[Sp + 48] = Hp - 16;
           Sp = Sp + 32;
           call GHC.Num.-_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1upd_info" {
     block_c1upd_info:
         const _c1upd;
         const 1926;
         const 4294967326;
         const S1sVz_srt+552;
 },
 _c1uqJ() //  []
         { []
         }
     {offset
       c1uqJ: // global
           R1 = P64[Sp];
           Sp = Sp + 48;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.294447803 UTC

[section ""data" . GHC.Real.integralEnumFrom_closure" {
     GHC.Real.integralEnumFrom_closure:
         const GHC.Real.integralEnumFrom_info;
         const 0;
 },
 f_s1ssA_entry() //  [R1]
         { []
         }
     {offset
       c1uua: // global
           R2 = P64[R1 + 16];
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . f_s1ssA_info" {
     f_s1ssA_info:
         const f_s1ssA_entry;
         const 1;
         const 16;
 },
 f1_s1ssB_entry() //  [R1]
         { []
         }
     {offset
       c1uuh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1uui; else goto c1uuj;
       c1uui: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1uuj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f1_s1ssB_info" {
     f1_s1ssB_info:
         const f1_s1ssB_entry;
         const 1;
         const 16;
 },
 sat_s1ssD_entry() //  [R1]
         { []
         }
     {offset
       c1uuo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1uup; else goto c1uuq;
       c1uup: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1uuq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1ssD_info" {
     sat_s1ssD_info:
         const sat_s1ssD_entry;
         const 1;
         const 16;
 },
 sat_s1ssJ_entry() //  [R1]
         { []
         }
     {offset
       c1uuK: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1uuL; else goto c1uuM;
       c1uuL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1uuM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c1uuI_info;
           R3 = GHC.Real.$fEnumRatio1_closure;
           R2 = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1ssJ_info" {
     sat_s1ssJ_info:
         const sat_s1ssJ_entry;
         const 2;
         const 2203318222866;
         const S1sVz_srt+480;
 },
 _c1uuI() //  [R1]
         { []
         }
     {offset
       c1uuI: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_s1ssE_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1uuI_info" {
     block_c1uuI_info:
         const _c1uuI;
         const 1;
         const 2203318222878;
         const S1sVz_srt+480;
 },
 sat_s1ssH_entry() //  [R1]
         { []
         }
     {offset
       c1uuU: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1uuV; else goto c1uuW;
       c1uuV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1uuW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1ssH_info" {
     sat_s1ssH_info:
         const sat_s1ssH_entry;
         const 2;
         const 18;
 },
 go_s1ssE_entry() //  [R1, R2]
         { []
         }
     {offset
       c1uv0: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1uv1; else goto c1uv2;
       c1uv1: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1uv2: // global
           I64[Sp - 32] = block_c1uuA_info;
           R3 = P64[R1 + 15];
           _s1ssF::P64 = R2;
           R2 = R2;
           P64[Sp - 24] = P64[R1 + 7];
           P64[Sp - 16] = R1;
           P64[Sp - 8] = _s1ssF::P64;
           Sp = Sp - 32;
           call GHC.Integer.Type.gtInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s1ssE_info" {
     go_s1ssE_info:
         const go_s1ssE_entry;
         const 2;
         const 2203318222859;
         const 4294967301;
         const S1sVz_srt+480;
 },
 _c1uuA() //  [R1]
         { []
         }
     {offset
       c1uuA: // global
           if (R1 == 1) goto c1uuZ; else goto c1uuY;
       c1uuZ: // global
           R1 = []_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1uuY: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c1uv6; else goto c1uv5;
       c1uv6: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c1uv5: // global
           I64[Hp - 80] = sat_s1ssJ_info;
           P64[Hp - 64] = P64[Sp + 16];
           _s1ssF::P64 = P64[Sp + 24];
           P64[Hp - 56] = _s1ssF::P64;
           I64[Hp - 48] = sat_s1ssH_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = _s1ssF::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1uuA_info" {
     block_c1uuA_info:
         const _c1uuA;
         const 3;
         const 2203318222878;
         const S1sVz_srt+480;
 },
 section ""relreadonly" . u1uvn_srtd" {
     u1uvn_srtd:
         const S1sVz_srt+480;
         const 34;
         const 8589935105;
 },
 GHC.Real.integralEnumFrom_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1uva: // global
           _s1ssz::P64 = R4;
           _s1ssy::P64 = R3;
           _s1ssx::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto c1uvc; else goto c1uvd;
       c1uvd: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c1uvf; else goto c1uve;
       c1uvf: // global
           HpAlloc = 72;
           goto c1uvc;
       c1uvc: // global
           R4 = _s1ssz::P64;
           R3 = _s1ssy::P64;
           R2 = _s1ssx::P64;
           R1 = GHC.Real.integralEnumFrom_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1uve: // global
           I64[Hp - 64] = f_s1ssA_info;
           P64[Hp - 48] = _s1ssx::P64;
           I64[Hp - 40] = f1_s1ssB_info;
           P64[Hp - 24] = Hp - 64;
           I64[Hp - 16] = sat_s1ssD_info;
           P64[Hp] = _s1ssy::P64;
           I64[Sp - 32] = block_c1uur_info;
           R2 = _s1ssx::P64;
           I64[Sp - 48] = stg_ap_p_info;
           P64[Sp - 40] = Hp - 16;
           P64[Sp - 24] = Hp - 40;
           P64[Sp - 16] = _s1ssx::P64;
           P64[Sp - 8] = _s1ssz::P64;
           Sp = Sp - 48;
           call GHC.Real.toInteger_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.integralEnumFrom_info" {
     GHC.Real.integralEnumFrom_info:
         const GHC.Real.integralEnumFrom_entry;
         const 0;
         const 18446744069414584334;
         const 12884901911;
         const u1uvn_srtd;
 },
 _c1uur() //  [R1]
         { []
         }
     {offset
       c1uur: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1uvi; else goto c1uvh;
       c1uvi: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1uvh: // global
           I64[Hp - 16] = go_s1ssE_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           _s1ssx::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c1uvb_info;
           R2 = _s1ssx::P64;
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = P64[Sp + 24];
           P64[Sp + 24] = Hp - 15;
           call GHC.Real.toInteger_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1uur_info" {
     block_c1uur_info:
         const _c1uur;
         const 3;
         const 2203318222878;
         const S1sVz_srt+480;
 },
 _c1uvb() //  [R1]
         { []
         }
     {offset
       c1uvb: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_s1ssE_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1uvb_info" {
     block_c1uvb_info:
         const _c1uvb;
         const 1;
         const 2203318222878;
         const S1sVz_srt+480;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.331862758 UTC

[section ""data" . GHC.Real.integralEnumFromThen_closure" {
     GHC.Real.integralEnumFromThen_closure:
         const GHC.Real.integralEnumFromThen_info;
         const 0;
 },
 f_s1ssT_entry() //  [R1]
         { []
         }
     {offset
       c1uwZ: // global
           R2 = P64[R1 + 16];
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . f_s1ssT_info" {
     f_s1ssT_info:
         const f_s1ssT_entry;
         const 1;
         const 16;
 },
 f1_s1ssU_entry() //  [R1]
         { []
         }
     {offset
       c1ux6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1ux7; else goto c1ux8;
       c1ux7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1ux8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f1_s1ssU_info" {
     f1_s1ssU_info:
         const f1_s1ssU_entry;
         const 1;
         const 16;
 },
 sat_s1ssX_entry() //  [R1]
         { []
         }
     {offset
       c1uxh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1uxi; else goto c1uxj;
       c1uxi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1uxj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1ssX_info" {
     sat_s1ssX_info:
         const sat_s1ssX_entry;
         const 1;
         const 16;
 },
 sat_s1st3_entry() //  [R1]
         { []
         }
     {offset
       c1uxD: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1uxE; else goto c1uxF;
       c1uxE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1uxF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c1uxB_info;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1st3_info" {
     sat_s1st3_info:
         const sat_s1st3_entry;
         const 3;
         const 4294967311;
         const S1sVz_srt+752;
 },
 _c1uxB() //  [R1]
         { []
         }
     {offset
       c1uxB: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_s1ssY_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1uxB_info" {
     block_c1uxB_info:
         const _c1uxB;
         const 1;
         const 4294967326;
         const S1sVz_srt+752;
 },
 sat_s1st1_entry() //  [R1]
         { []
         }
     {offset
       c1uxN: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1uxO; else goto c1uxP;
       c1uxO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1uxP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1st1_info" {
     sat_s1st1_info:
         const sat_s1st1_entry;
         const 2;
         const 18;
 },
 go_s1ssY_entry() //  [R1, R2]
         { []
         }
     {offset
       c1uxT: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1uxU; else goto c1uxV;
       c1uxU: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1uxV: // global
           I64[Sp - 40] = block_c1uxt_info;
           R3 = P64[R1 + 23];
           _s1ssZ::P64 = R2;
           R2 = R2;
           P64[Sp - 32] = P64[R1 + 7];
           P64[Sp - 24] = P64[R1 + 15];
           P64[Sp - 16] = R1;
           P64[Sp - 8] = _s1ssZ::P64;
           Sp = Sp - 40;
           call GHC.Integer.Type.ltInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s1ssY_info" {
     go_s1ssY_info:
         const go_s1ssY_entry;
         const 3;
         const 4294967304;
         const 4294967301;
         const S1sVz_srt+752;
 },
 _c1uxt() //  [R1]
         { []
         }
     {offset
       c1uxt: // global
           if (R1 == 1) goto c1uxS; else goto c1uxR;
       c1uxS: // global
           R1 = []_closure+1;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1uxR: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c1uxZ; else goto c1uxY;
       c1uxZ: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c1uxY: // global
           I64[Hp - 88] = sat_s1st3_info;
           P64[Hp - 72] = P64[Sp + 8];
           P64[Hp - 64] = P64[Sp + 24];
           _s1ssZ::P64 = P64[Sp + 32];
           P64[Hp - 56] = _s1ssZ::P64;
           I64[Hp - 48] = sat_s1st1_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = _s1ssZ::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 88;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1uxt_info" {
     block_c1uxt_info:
         const _c1uxt;
         const 4;
         const 4294967326;
         const S1sVz_srt+752;
 },
 sat_s1st5_entry() //  [R1]
         { []
         }
     {offset
       c1uy9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1uya; else goto c1uyb;
       c1uya: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1uyb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.minBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1st5_info" {
     sat_s1st5_info:
         const sat_s1st5_entry;
         const 1;
         const 16;
 },
 sat_s1stb_entry() //  [R1]
         { []
         }
     {offset
       c1uyv: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1uyw; else goto c1uyx;
       c1uyw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1uyx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c1uyt_info;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1stb_info" {
     sat_s1stb_info:
         const sat_s1stb_entry;
         const 3;
         const 4294967311;
         const S1sVz_srt+752;
 },
 _c1uyt() //  [R1]
         { []
         }
     {offset
       c1uyt: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_s1st6_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1uyt_info" {
     block_c1uyt_info:
         const _c1uyt;
         const 1;
         const 4294967326;
         const S1sVz_srt+752;
 },
 sat_s1st9_entry() //  [R1]
         { []
         }
     {offset
       c1uyF: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1uyG; else goto c1uyH;
       c1uyG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1uyH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1st9_info" {
     sat_s1st9_info:
         const sat_s1st9_entry;
         const 2;
         const 18;
 },
 go_s1st6_entry() //  [R1, R2]
         { []
         }
     {offset
       c1uyL: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1uyM; else goto c1uyN;
       c1uyM: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1uyN: // global
           I64[Sp - 40] = block_c1uyl_info;
           R3 = P64[R1 + 23];
           _s1st7::P64 = R2;
           R2 = R2;
           P64[Sp - 32] = P64[R1 + 7];
           P64[Sp - 24] = P64[R1 + 15];
           P64[Sp - 16] = R1;
           P64[Sp - 8] = _s1st7::P64;
           Sp = Sp - 40;
           call GHC.Integer.Type.gtInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s1st6_info" {
     go_s1st6_info:
         const go_s1st6_entry;
         const 3;
         const 4294967304;
         const 4294967301;
         const S1sVz_srt+752;
 },
 _c1uyl() //  [R1]
         { []
         }
     {offset
       c1uyl: // global
           if (R1 == 1) goto c1uyK; else goto c1uyJ;
       c1uyK: // global
           R1 = []_closure+1;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1uyJ: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c1uyR; else goto c1uyQ;
       c1uyR: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c1uyQ: // global
           I64[Hp - 88] = sat_s1stb_info;
           P64[Hp - 72] = P64[Sp + 8];
           P64[Hp - 64] = P64[Sp + 24];
           _s1st7::P64 = P64[Sp + 32];
           P64[Hp - 56] = _s1st7::P64;
           I64[Hp - 48] = sat_s1st9_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = _s1st7::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 88;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1uyl_info" {
     block_c1uyl_info:
         const _c1uyl;
         const 4;
         const 4294967326;
         const S1sVz_srt+752;
 },
 f_s1std_entry() //  [R1]
         { []
         }
     {offset
       c1uz5: // global
           R2 = P64[R1 + 16];
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . f_s1std_info" {
     f_s1std_info:
         const f_s1std_entry;
         const 1;
         const 16;
 },
 f1_s1ste_entry() //  [R1]
         { []
         }
     {offset
       c1uzc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1uzd; else goto c1uze;
       c1uzd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1uze: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f1_s1ste_info" {
     f1_s1ste_info:
         const f1_s1ste_entry;
         const 1;
         const 16;
 },
 sat_s1sth_entry() //  [R1]
         { []
         }
     {offset
       c1uzn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1uzo; else goto c1uzp;
       c1uzo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1uzp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sth_info" {
     sat_s1sth_info:
         const sat_s1sth_entry;
         const 1;
         const 16;
 },
 sat_s1stn_entry() //  [R1]
         { []
         }
     {offset
       c1uzJ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1uzK; else goto c1uzL;
       c1uzK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1uzL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c1uzH_info;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1stn_info" {
     sat_s1stn_info:
         const sat_s1stn_entry;
         const 3;
         const 4294967311;
         const S1sVz_srt+752;
 },
 _c1uzH() //  [R1]
         { []
         }
     {offset
       c1uzH: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_s1sti_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1uzH_info" {
     block_c1uzH_info:
         const _c1uzH;
         const 1;
         const 4294967326;
         const S1sVz_srt+752;
 },
 sat_s1stl_entry() //  [R1]
         { []
         }
     {offset
       c1uzT: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1uzU; else goto c1uzV;
       c1uzU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1uzV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1stl_info" {
     sat_s1stl_info:
         const sat_s1stl_entry;
         const 2;
         const 18;
 },
 go_s1sti_entry() //  [R1, R2]
         { []
         }
     {offset
       c1uzZ: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1uA0; else goto c1uA1;
       c1uA0: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1uA1: // global
           I64[Sp - 40] = block_c1uzz_info;
           R3 = P64[R1 + 23];
           _s1stj::P64 = R2;
           R2 = R2;
           P64[Sp - 32] = P64[R1 + 7];
           P64[Sp - 24] = P64[R1 + 15];
           P64[Sp - 16] = R1;
           P64[Sp - 8] = _s1stj::P64;
           Sp = Sp - 40;
           call GHC.Integer.Type.ltInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s1sti_info" {
     go_s1sti_info:
         const go_s1sti_entry;
         const 3;
         const 4294967304;
         const 4294967301;
         const S1sVz_srt+752;
 },
 _c1uzz() //  [R1]
         { []
         }
     {offset
       c1uzz: // global
           if (R1 == 1) goto c1uzY; else goto c1uzX;
       c1uzY: // global
           R1 = []_closure+1;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1uzX: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c1uA5; else goto c1uA4;
       c1uA5: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c1uA4: // global
           I64[Hp - 88] = sat_s1stn_info;
           P64[Hp - 72] = P64[Sp + 8];
           P64[Hp - 64] = P64[Sp + 24];
           _s1stj::P64 = P64[Sp + 32];
           P64[Hp - 56] = _s1stj::P64;
           I64[Hp - 48] = sat_s1stl_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = _s1stj::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 88;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1uzz_info" {
     block_c1uzz_info:
         const _c1uzz;
         const 4;
         const 4294967326;
         const S1sVz_srt+752;
 },
 sat_s1stp_entry() //  [R1]
         { []
         }
     {offset
       c1uAf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1uAg; else goto c1uAh;
       c1uAg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1uAh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Enum.maxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1stp_info" {
     sat_s1stp_info:
         const sat_s1stp_entry;
         const 1;
         const 16;
 },
 sat_s1stv_entry() //  [R1]
         { []
         }
     {offset
       c1uAB: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1uAC; else goto c1uAD;
       c1uAC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1uAD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c1uAz_info;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1stv_info" {
     sat_s1stv_info:
         const sat_s1stv_entry;
         const 3;
         const 4294967311;
         const S1sVz_srt+752;
 },
 _c1uAz() //  [R1]
         { []
         }
     {offset
       c1uAz: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_s1stq_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1uAz_info" {
     block_c1uAz_info:
         const _c1uAz;
         const 1;
         const 4294967326;
         const S1sVz_srt+752;
 },
 sat_s1stt_entry() //  [R1]
         { []
         }
     {offset
       c1uAL: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1uAM; else goto c1uAN;
       c1uAM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1uAN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1stt_info" {
     sat_s1stt_info:
         const sat_s1stt_entry;
         const 2;
         const 18;
 },
 go_s1stq_entry() //  [R1, R2]
         { []
         }
     {offset
       c1uAR: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1uAS; else goto c1uAT;
       c1uAS: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1uAT: // global
           I64[Sp - 40] = block_c1uAr_info;
           R3 = P64[R1 + 23];
           _s1str::P64 = R2;
           R2 = R2;
           P64[Sp - 32] = P64[R1 + 7];
           P64[Sp - 24] = P64[R1 + 15];
           P64[Sp - 16] = R1;
           P64[Sp - 8] = _s1str::P64;
           Sp = Sp - 40;
           call GHC.Integer.Type.gtInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s1stq_info" {
     go_s1stq_info:
         const go_s1stq_entry;
         const 3;
         const 4294967304;
         const 4294967301;
         const S1sVz_srt+752;
 },
 _c1uAr() //  [R1]
         { []
         }
     {offset
       c1uAr: // global
           if (R1 == 1) goto c1uAQ; else goto c1uAP;
       c1uAQ: // global
           R1 = []_closure+1;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1uAP: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c1uAX; else goto c1uAW;
       c1uAX: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c1uAW: // global
           I64[Hp - 88] = sat_s1stv_info;
           P64[Hp - 72] = P64[Sp + 8];
           P64[Hp - 64] = P64[Sp + 24];
           _s1str::P64 = P64[Sp + 32];
           P64[Hp - 56] = _s1str::P64;
           I64[Hp - 48] = sat_s1stt_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = _s1str::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 88;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1uAr_info" {
     block_c1uAr_info:
         const _c1uAr;
         const 4;
         const 4294967326;
         const S1sVz_srt+752;
 },
 section ""relreadonly" . u1uBL_srtd" {
     u1uBL_srtd:
         const S1sVz_srt+456;
         const 39;
         const 412585295873;
 },
 GHC.Real.integralEnumFromThen_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c1uB1: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c1uB2; else goto c1uB3;
       c1uB2: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.integralEnumFromThen_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1uB3: // global
           I64[Sp - 32] = block_c1uwF_info;
           _s1ssL::P64 = R2;
           R2 = R2;
           I64[Sp - 48] = stg_ap_p_info;
           P64[Sp - 40] = R5;
           P64[Sp - 24] = _s1ssL::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 48;
           call GHC.Real.toInteger_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.integralEnumFromThen_info" {
     GHC.Real.integralEnumFromThen_info:
         const GHC.Real.integralEnumFromThen_entry;
         const 0;
         const 18446744069414584334;
         const 17179869208;
         const u1uBL_srtd;
 },
 section ""relreadonly" . u1uBM_srtd" {
     u1uBM_srtd:
         const S1sVz_srt+456;
         const 38;
         const 137707388929;
 },
 _c1uwF() //  [R1]
         { []
         }
     {offset
       c1uwF: // global
           I64[Sp] = block_c1uwJ_info;
           R2 = P64[Sp + 8];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 24];
           P64[Sp + 24] = R1;
           Sp = Sp - 16;
           call GHC.Real.toInteger_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1uwF_info" {
     block_c1uwF_info:
         const _c1uwF;
         const 3;
         const 18446744069414584350;
         const u1uBM_srtd;
 },
 section ""relreadonly" . u1uBN_srtd" {
     u1uBN_srtd:
         const S1sVz_srt+456;
         const 38;
         const 137707388929;
 },
 _c1uwJ() //  [R1]
         { []
         }
     {offset
       c1uwJ: // global
           I64[Sp - 8] = block_c1uwN_info;
           R3 = R1;
           R2 = P64[Sp + 24];
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Integer.Type.geInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1uwJ_info" {
     block_c1uwJ_info:
         const _c1uwJ;
         const 3;
         const 18446744069414584350;
         const u1uBN_srtd;
 },
 section ""relreadonly" . u1uBO_srtd" {
     u1uBO_srtd:
         const S1sVz_srt+456;
         const 38;
         const 137707388929;
 },
 _c1uwN() //  [R1]
         { []
         }
     {offset
       c1uwN: // global
           _s1ssP::P64 = P64[Sp + 32];
           _s1ssQ::P64 = P64[Sp + 8];
           if (R1 == 1) goto c1uBs; else goto c1uB8;
       c1uBs: // global
           I64[Sp] = block_c1uyX_info;
           R3 = _s1ssQ::P64;
           R2 = _s1ssP::P64;
           call GHC.Integer.Type.minusInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
       c1uB8: // global
           I64[Sp] = block_c1uwR_info;
           R3 = _s1ssQ::P64;
           R2 = _s1ssP::P64;
           call GHC.Integer.Type.minusInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1uwN_info" {
     block_c1uwN_info:
         const _c1uwN;
         const 4;
         const 18446744069414584350;
         const u1uBO_srtd;
 },
 _c1uyX() //  [R1]
         { []
         }
     {offset
       c1uyX: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c1uBv; else goto c1uBu;
       c1uBv: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1uBu: // global
           I64[Hp - 40] = f_s1std_info;
           P64[Hp - 24] = P64[Sp + 16];
           I64[Hp - 16] = f1_s1ste_info;
           P64[Hp] = Hp - 40;
           I64[Sp - 8] = block_c1uzf_info;
           R3 = GHC.Real.even1_closure;
           R2 = R1;
           P64[Sp] = R1;
           P64[Sp + 32] = Hp - 16;
           Sp = Sp - 8;
           call GHC.Integer.Type.geInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1uyX_info" {
     block_c1uyX_info:
         const _c1uyX;
         const 516;
         const 2203318222878;
         const S1sVz_srt+680;
 },
 _c1uzf() //  [R1]
         { []
         }
     {offset
       c1uzf: // global
           _s1ssL::P64 = P64[Sp + 24];
           _s1ssM::P64 = P64[Sp + 32];
           if (R1 == 1) goto c1uBE; else goto c1uBx;
       c1uBE: // global
           Hp = Hp + 24;
           _s1stf::I64 = R1;
           if (Hp > HpLim) (likely: False) goto c1uBH; else goto c1uBG;
       c1uBG: // global
           I64[Hp - 16] = sat_s1stp_info;
           P64[Hp] = _s1ssM::P64;
           I64[Sp] = block_c1uAi_info;
           R2 = _s1ssL::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 16;
           Sp = Sp - 16;
           call GHC.Real.toInteger_entry(R2) args: 24, res: 8, upd: 8;
       c1uBx: // global
           Hp = Hp + 24;
           _s1stf::I64 = R1;
           if (Hp > HpLim) (likely: False) goto c1uBH; else goto c1uBz;
       c1uBH: // global
           HpAlloc = 24;
           R1 = _s1stf::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c1uBz: // global
           I64[Hp - 16] = sat_s1sth_info;
           P64[Hp] = _s1ssM::P64;
           I64[Sp] = block_c1uzq_info;
           R2 = _s1ssL::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 16;
           Sp = Sp - 16;
           call GHC.Real.toInteger_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1uzf_info" {
     block_c1uzf_info:
         const _c1uzf;
         const 5;
         const 4294967326;
         const S1sVz_srt+752;
 },
 _c1uAi() //  [R1]
         { []
         }
     {offset
       c1uAi: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1uBK; else goto c1uBJ;
       c1uBK: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1uBJ: // global
           I64[Hp - 24] = go_s1stq_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = R1;
           R2 = P64[Sp + 16];
           R1 = Hp - 23;
           Sp = Sp + 48;
           call go_s1stq_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1uAi_info" {
     block_c1uAi_info:
         const _c1uAi;
         const 773;
         const 4294967326;
         const S1sVz_srt+752;
 },
 _c1uzq() //  [R1]
         { []
         }
     {offset
       c1uzq: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1uBD; else goto c1uBC;
       c1uBD: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1uBC: // global
           I64[Hp - 24] = go_s1sti_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = R1;
           R2 = P64[Sp + 16];
           R1 = Hp - 23;
           Sp = Sp + 48;
           call go_s1sti_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1uzq_info" {
     block_c1uzq_info:
         const _c1uzq;
         const 773;
         const 4294967326;
         const S1sVz_srt+752;
 },
 _c1uwR() //  [R1]
         { []
         }
     {offset
       c1uwR: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c1uBb; else goto c1uBa;
       c1uBb: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1uBa: // global
           I64[Hp - 40] = f_s1ssT_info;
           P64[Hp - 24] = P64[Sp + 16];
           I64[Hp - 16] = f1_s1ssU_info;
           P64[Hp] = Hp - 40;
           I64[Sp - 8] = block_c1ux9_info;
           R3 = GHC.Real.even1_closure;
           R2 = R1;
           P64[Sp] = R1;
           P64[Sp + 32] = Hp - 16;
           Sp = Sp - 8;
           call GHC.Integer.Type.geInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1uwR_info" {
     block_c1uwR_info:
         const _c1uwR;
         const 516;
         const 2203318222878;
         const S1sVz_srt+680;
 },
 _c1ux9() //  [R1]
         { []
         }
     {offset
       c1ux9: // global
           _s1ssL::P64 = P64[Sp + 24];
           _s1ssM::P64 = P64[Sp + 32];
           if (R1 == 1) goto c1uBk; else goto c1uBd;
       c1uBk: // global
           Hp = Hp + 24;
           _s1ssV::I64 = R1;
           if (Hp > HpLim) (likely: False) goto c1uBn; else goto c1uBm;
       c1uBm: // global
           I64[Hp - 16] = sat_s1st5_info;
           P64[Hp] = _s1ssM::P64;
           I64[Sp] = block_c1uyc_info;
           R2 = _s1ssL::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 16;
           Sp = Sp - 16;
           call GHC.Real.toInteger_entry(R2) args: 24, res: 8, upd: 8;
       c1uBd: // global
           Hp = Hp + 24;
           _s1ssV::I64 = R1;
           if (Hp > HpLim) (likely: False) goto c1uBn; else goto c1uBf;
       c1uBn: // global
           HpAlloc = 24;
           R1 = _s1ssV::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c1uBf: // global
           I64[Hp - 16] = sat_s1ssX_info;
           P64[Hp] = _s1ssM::P64;
           I64[Sp] = block_c1uxk_info;
           R2 = _s1ssL::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 16;
           Sp = Sp - 16;
           call GHC.Real.toInteger_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1ux9_info" {
     block_c1ux9_info:
         const _c1ux9;
         const 5;
         const 4294967326;
         const S1sVz_srt+752;
 },
 _c1uyc() //  [R1]
         { []
         }
     {offset
       c1uyc: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1uBq; else goto c1uBp;
       c1uBq: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1uBp: // global
           I64[Hp - 24] = go_s1st6_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = R1;
           R2 = P64[Sp + 16];
           R1 = Hp - 23;
           Sp = Sp + 48;
           call go_s1st6_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1uyc_info" {
     block_c1uyc_info:
         const _c1uyc;
         const 773;
         const 4294967326;
         const S1sVz_srt+752;
 },
 _c1uxk() //  [R1]
         { []
         }
     {offset
       c1uxk: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1uBj; else goto c1uBi;
       c1uBj: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1uBi: // global
           I64[Hp - 24] = go_s1ssY_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = R1;
           R2 = P64[Sp + 16];
           R1 = Hp - 23;
           Sp = Sp + 48;
           call go_s1ssY_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1uxk_info" {
     block_c1uxk_info:
         const _c1uxk;
         const 773;
         const 4294967326;
         const S1sVz_srt+752;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.408560495 UTC

[section ""data" . GHC.Real.integralEnumFromTo_closure" {
     GHC.Real.integralEnumFromTo_closure:
         const GHC.Real.integralEnumFromTo_info;
         const 0;
 },
 f_s1stz_entry() //  [R1]
         { []
         }
     {offset
       c1uGr: // global
           R2 = P64[R1 + 16];
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . f_s1stz_info" {
     f_s1stz_info:
         const f_s1stz_entry;
         const 1;
         const 16;
 },
 f1_s1stA_entry() //  [R1]
         { []
         }
     {offset
       c1uGy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1uGz; else goto c1uGA;
       c1uGz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1uGA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f1_s1stA_info" {
     f1_s1stA_info:
         const f1_s1stA_entry;
         const 1;
         const 16;
 },
 sat_s1stH_entry() //  [R1]
         { []
         }
     {offset
       c1uGU: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1uGV; else goto c1uGW;
       c1uGV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1uGW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c1uGS_info;
           R3 = GHC.Real.$fEnumRatio1_closure;
           R2 = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1stH_info" {
     sat_s1stH_info:
         const sat_s1stH_entry;
         const 2;
         const 144115192370823186;
         const S1sVz_srt+552;
 },
 _c1uGS() //  [R1]
         { []
         }
     {offset
       c1uGS: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_s1stC_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1uGS_info" {
     block_c1uGS_info:
         const _c1uGS;
         const 1;
         const 144115192370823198;
         const S1sVz_srt+552;
 },
 sat_s1stF_entry() //  [R1]
         { []
         }
     {offset
       c1uH4: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1uH5; else goto c1uH6;
       c1uH5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1uH6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1stF_info" {
     sat_s1stF_info:
         const sat_s1stF_entry;
         const 2;
         const 18;
 },
 go_s1stC_entry() //  [R1, R2]
         { []
         }
     {offset
       c1uHa: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1uHb; else goto c1uHc;
       c1uHb: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1uHc: // global
           I64[Sp - 32] = block_c1uGK_info;
           R3 = P64[R1 + 15];
           _s1stD::P64 = R2;
           R2 = R2;
           P64[Sp - 24] = P64[R1 + 7];
           P64[Sp - 16] = R1;
           P64[Sp - 8] = _s1stD::P64;
           Sp = Sp - 32;
           call GHC.Integer.Type.gtInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s1stC_info" {
     go_s1stC_info:
         const go_s1stC_entry;
         const 2;
         const 144115192370823179;
         const 4294967301;
         const S1sVz_srt+552;
 },
 _c1uGK() //  [R1]
         { []
         }
     {offset
       c1uGK: // global
           if (R1 == 1) goto c1uH9; else goto c1uH8;
       c1uH9: // global
           R1 = []_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1uH8: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c1uHg; else goto c1uHf;
       c1uHg: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c1uHf: // global
           I64[Hp - 80] = sat_s1stH_info;
           P64[Hp - 64] = P64[Sp + 16];
           _s1stD::P64 = P64[Sp + 24];
           P64[Hp - 56] = _s1stD::P64;
           I64[Hp - 48] = sat_s1stF_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = _s1stD::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1uGK_info" {
     block_c1uGK_info:
         const _c1uGK;
         const 3;
         const 144115192370823198;
         const S1sVz_srt+552;
 },
 GHC.Real.integralEnumFromTo_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1uHk: // global
           _s1sty::P64 = R4;
           _s1stx::P64 = R3;
           _s1stw::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto c1uHm; else goto c1uHn;
       c1uHn: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c1uHp; else goto c1uHo;
       c1uHp: // global
           HpAlloc = 48;
           goto c1uHm;
       c1uHm: // global
           R4 = _s1sty::P64;
           R3 = _s1stx::P64;
           R2 = _s1stw::P64;
           R1 = GHC.Real.integralEnumFromTo_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1uHo: // global
           I64[Hp - 40] = f_s1stz_info;
           P64[Hp - 24] = _s1stw::P64;
           I64[Hp - 16] = f1_s1stA_info;
           P64[Hp] = Hp - 40;
           I64[Sp - 32] = block_c1uGB_info;
           R2 = _s1stw::P64;
           I64[Sp - 48] = stg_ap_p_info;
           P64[Sp - 40] = _s1sty::P64;
           P64[Sp - 24] = Hp - 16;
           P64[Sp - 16] = _s1stw::P64;
           P64[Sp - 8] = _s1stx::P64;
           Sp = Sp - 48;
           call GHC.Real.toInteger_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.integralEnumFromTo_info" {
     GHC.Real.integralEnumFromTo_info:
         const GHC.Real.integralEnumFromTo_entry;
         const 0;
         const 720575944674246670;
         const 12884901911;
         const S1sVz_srt+552;
 },
 _c1uGB() //  [R1]
         { []
         }
     {offset
       c1uGB: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1uHs; else goto c1uHr;
       c1uHs: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1uHr: // global
           I64[Hp - 16] = go_s1stC_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           _s1stw::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c1uHl_info;
           R2 = _s1stw::P64;
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = P64[Sp + 24];
           P64[Sp + 24] = Hp - 15;
           call GHC.Real.toInteger_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1uGB_info" {
     block_c1uGB_info:
         const _c1uGB;
         const 3;
         const 144115192370823198;
         const S1sVz_srt+552;
 },
 _c1uHl() //  [R1]
         { []
         }
     {offset
       c1uHl: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_s1stC_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1uHl_info" {
     block_c1uHl_info:
         const _c1uHl;
         const 1;
         const 144115192370823198;
         const S1sVz_srt+552;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.441739431 UTC

[section ""data" . GHC.Real.integralEnumFromThenTo_closure" {
     GHC.Real.integralEnumFromThenTo_closure:
         const GHC.Real.integralEnumFromThenTo_info;
         const 0;
 },
 f_s1stQ_entry() //  [R1]
         { []
         }
     {offset
       c1uIW: // global
           R2 = P64[R1 + 16];
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . f_s1stQ_info" {
     f_s1stQ_info:
         const f_s1stQ_entry;
         const 1;
         const 16;
 },
 f1_s1stR_entry() //  [R1]
         { []
         }
     {offset
       c1uJ3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1uJ4; else goto c1uJ5;
       c1uJ4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1uJ5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f1_s1stR_info" {
     f1_s1stR_info:
         const f1_s1stR_entry;
         const 1;
         const 16;
 },
 sat_s1stZ_entry() //  [R1]
         { []
         }
     {offset
       c1uJt: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1uJu; else goto c1uJv;
       c1uJu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1uJv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c1uJr_info;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1stZ_info" {
     sat_s1stZ_info:
         const sat_s1stZ_entry;
         const 3;
         const 4294967311;
         const S1sVz_srt+752;
 },
 _c1uJr() //  [R1]
         { []
         }
     {offset
       c1uJr: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_s1stU_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1uJr_info" {
     block_c1uJr_info:
         const _c1uJr;
         const 1;
         const 4294967326;
         const S1sVz_srt+752;
 },
 sat_s1stX_entry() //  [R1]
         { []
         }
     {offset
       c1uJD: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1uJE; else goto c1uJF;
       c1uJE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1uJF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1stX_info" {
     sat_s1stX_info:
         const sat_s1stX_entry;
         const 2;
         const 18;
 },
 go_s1stU_entry() //  [R1, R2]
         { []
         }
     {offset
       c1uJJ: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1uJK; else goto c1uJL;
       c1uJK: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1uJL: // global
           I64[Sp - 40] = block_c1uJj_info;
           R3 = P64[R1 + 23];
           _s1stV::P64 = R2;
           R2 = R2;
           P64[Sp - 32] = P64[R1 + 7];
           P64[Sp - 24] = P64[R1 + 15];
           P64[Sp - 16] = R1;
           P64[Sp - 8] = _s1stV::P64;
           Sp = Sp - 40;
           call GHC.Integer.Type.ltInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s1stU_info" {
     go_s1stU_info:
         const go_s1stU_entry;
         const 3;
         const 4294967304;
         const 4294967301;
         const S1sVz_srt+752;
 },
 _c1uJj() //  [R1]
         { []
         }
     {offset
       c1uJj: // global
           if (R1 == 1) goto c1uJI; else goto c1uJH;
       c1uJI: // global
           R1 = []_closure+1;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1uJH: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c1uJP; else goto c1uJO;
       c1uJP: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c1uJO: // global
           I64[Hp - 88] = sat_s1stZ_info;
           P64[Hp - 72] = P64[Sp + 8];
           P64[Hp - 64] = P64[Sp + 24];
           _s1stV::P64 = P64[Sp + 32];
           P64[Hp - 56] = _s1stV::P64;
           I64[Hp - 48] = sat_s1stX_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = _s1stV::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 88;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1uJj_info" {
     block_c1uJj_info:
         const _c1uJj;
         const 4;
         const 4294967326;
         const S1sVz_srt+752;
 },
 sat_s1su6_entry() //  [R1]
         { []
         }
     {offset
       c1uKe: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1uKf; else goto c1uKg;
       c1uKf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1uKg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c1uKc_info;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1su6_info" {
     sat_s1su6_info:
         const sat_s1su6_entry;
         const 3;
         const 4294967311;
         const S1sVz_srt+752;
 },
 _c1uKc() //  [R1]
         { []
         }
     {offset
       c1uKc: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_s1su1_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1uKc_info" {
     block_c1uKc_info:
         const _c1uKc;
         const 1;
         const 4294967326;
         const S1sVz_srt+752;
 },
 sat_s1su4_entry() //  [R1]
         { []
         }
     {offset
       c1uKo: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1uKp; else goto c1uKq;
       c1uKp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1uKq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1su4_info" {
     sat_s1su4_info:
         const sat_s1su4_entry;
         const 2;
         const 18;
 },
 go_s1su1_entry() //  [R1, R2]
         { []
         }
     {offset
       c1uKu: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1uKv; else goto c1uKw;
       c1uKv: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1uKw: // global
           I64[Sp - 40] = block_c1uK4_info;
           R3 = P64[R1 + 23];
           _s1su2::P64 = R2;
           R2 = R2;
           P64[Sp - 32] = P64[R1 + 7];
           P64[Sp - 24] = P64[R1 + 15];
           P64[Sp - 16] = R1;
           P64[Sp - 8] = _s1su2::P64;
           Sp = Sp - 40;
           call GHC.Integer.Type.gtInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s1su1_info" {
     go_s1su1_info:
         const go_s1su1_entry;
         const 3;
         const 4294967304;
         const 4294967301;
         const S1sVz_srt+752;
 },
 _c1uK4() //  [R1]
         { []
         }
     {offset
       c1uK4: // global
           if (R1 == 1) goto c1uKt; else goto c1uKs;
       c1uKt: // global
           R1 = []_closure+1;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1uKs: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c1uKA; else goto c1uKz;
       c1uKA: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c1uKz: // global
           I64[Hp - 88] = sat_s1su6_info;
           P64[Hp - 72] = P64[Sp + 8];
           P64[Hp - 64] = P64[Sp + 24];
           _s1su2::P64 = P64[Sp + 32];
           P64[Hp - 56] = _s1su2::P64;
           I64[Hp - 48] = sat_s1su4_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = _s1su2::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 88;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1uK4_info" {
     block_c1uK4_info:
         const _c1uK4;
         const 4;
         const 4294967326;
         const S1sVz_srt+752;
 },
 section ""relreadonly" . u1uKX_srtd" {
     u1uKX_srtd:
         const S1sVz_srt+456;
         const 41;
         const 1237219016705;
 },
 GHC.Real.integralEnumFromThenTo_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c1uKE: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c1uKF; else goto c1uKG;
       c1uKF: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.integralEnumFromThenTo_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1uKG: // global
           I64[Sp - 32] = block_c1uIG_info;
           _s1stJ::P64 = R2;
           R2 = R2;
           I64[Sp - 48] = stg_ap_p_info;
           P64[Sp - 40] = R3;
           P64[Sp - 24] = _s1stJ::P64;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 48;
           call GHC.Real.toInteger_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.integralEnumFromThenTo_info" {
     GHC.Real.integralEnumFromThenTo_info:
         const GHC.Real.integralEnumFromThenTo_entry;
         const 0;
         const 18446744069414584334;
         const 17179869208;
         const u1uKX_srtd;
 },
 section ""relreadonly" . u1uKY_srtd" {
     u1uKY_srtd:
         const S1sVz_srt+456;
         const 38;
         const 137707388929;
 },
 _c1uIG() //  [R1]
         { []
         }
     {offset
       c1uIG: // global
           I64[Sp] = block_c1uIK_info;
           R2 = P64[Sp + 8];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 16];
           P64[Sp + 16] = R1;
           Sp = Sp - 16;
           call GHC.Real.toInteger_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1uIG_info" {
     block_c1uIG_info:
         const _c1uIG;
         const 3;
         const 18446744069414584350;
         const u1uKY_srtd;
 },
 section ""relreadonly" . u1uKZ_srtd" {
     u1uKZ_srtd:
         const S1sVz_srt+456;
         const 38;
         const 137707388929;
 },
 _c1uIK() //  [R1]
         { []
         }
     {offset
       c1uIK: // global
           I64[Sp] = block_c1uIO_info;
           R3 = P64[Sp + 16];
           R2 = R1;
           call GHC.Integer.Type.minusInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1uIK_info" {
     block_c1uIK_info:
         const _c1uIK;
         const 3;
         const 18446744069414584350;
         const u1uKZ_srtd;
 },
 _c1uIO() //  [R1]
         { []
         }
     {offset
       c1uIO: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c1uKL; else goto c1uKK;
       c1uKL: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1uKK: // global
           I64[Hp - 40] = f_s1stQ_info;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = f1_s1stR_info;
           P64[Hp] = Hp - 40;
           I64[Sp - 16] = block_c1uJ6_info;
           R3 = GHC.Real.even1_closure;
           R2 = R1;
           P64[Sp - 8] = R1;
           P64[Sp] = Hp - 16;
           Sp = Sp - 16;
           call GHC.Integer.Type.geInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1uIO_info" {
     block_c1uIO_info:
         const _c1uIO;
         const 3;
         const 2203318222878;
         const S1sVz_srt+680;
 },
 _c1uJ6() //  [R1]
         { []
         }
     {offset
       c1uJ6: // global
           _s1stJ::P64 = P64[Sp + 24];
           _s1stM::P64 = P64[Sp + 40];
           if (R1 == 1) goto c1uKT; else goto c1uKO;
       c1uKT: // global
           I64[Sp] = block_c1uJV_info;
           R2 = _s1stJ::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _s1stM::P64;
           Sp = Sp - 16;
           call GHC.Real.toInteger_entry(R2) args: 24, res: 8, upd: 8;
       c1uKO: // global
           I64[Sp] = block_c1uJa_info;
           R2 = _s1stJ::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _s1stM::P64;
           Sp = Sp - 16;
           call GHC.Real.toInteger_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1uJ6_info" {
     block_c1uJ6_info:
         const _c1uJ6;
         const 5;
         const 4294967326;
         const S1sVz_srt+752;
 },
 _c1uJV() //  [R1]
         { []
         }
     {offset
       c1uJV: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1uKW; else goto c1uKV;
       c1uKW: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1uKV: // global
           I64[Hp - 24] = go_s1su1_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = R1;
           R2 = P64[Sp + 32];
           R1 = Hp - 23;
           Sp = Sp + 48;
           call go_s1su1_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1uJV_info" {
     block_c1uJV_info:
         const _c1uJV;
         const 1285;
         const 4294967326;
         const S1sVz_srt+752;
 },
 _c1uJa() //  [R1]
         { []
         }
     {offset
       c1uJa: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1uKR; else goto c1uKQ;
       c1uKR: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1uKQ: // global
           I64[Hp - 24] = go_s1stU_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = R1;
           R2 = P64[Sp + 32];
           R1 = Hp - 23;
           Sp = Sp + 48;
           call go_s1stU_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1uJa_info" {
     block_c1uJa_info:
         const _c1uJa;
         const 1285;
         const 4294967326;
         const S1sVz_srt+752;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.487870111 UTC

[section ""cstring" . GHC.Real.$trModule4_bytes" {
     GHC.Real.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.489688686 UTC

[section ""data" . GHC.Real.$trModule3_closure" {
     GHC.Real.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Real.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.49137036 UTC

[section ""cstring" . GHC.Real.$trModule2_bytes" {
     GHC.Real.$trModule2_bytes:
         I8[] [71,72,67,46,82,101,97,108]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.493977881 UTC

[section ""data" . GHC.Real.$trModule1_closure" {
     GHC.Real.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Real.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.495614318 UTC

[section ""data" . GHC.Real.$trModule_closure" {
     GHC.Real.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Real.$trModule3_closure+1;
         const GHC.Real.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.497347597 UTC

[section ""data" . $krep_r1j3d_closure" {
     $krep_r1j3d_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Integer.Type.$tcInteger_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.49896031 UTC

[section ""data" . $krep1_r1j3e_closure" {
     $krep1_r1j3e_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcConstraint_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.500450368 UTC

[section ""data" . GHC.Real.$tcFractional1_closure" {
     GHC.Real.$tcFractional1_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Types.krep$*_closure;
         const $krep1_r1j3e_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.502188724 UTC

[section ""data" . $krep2_r1j3f_closure" {
     $krep2_r1j3f_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.503808869 UTC

[section ""data" . $krep3_r1j3g_closure" {
     $krep3_r1j3g_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r1j3f_closure+2;
         const $krep2_r1j3f_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.505504698 UTC

[section ""data" . $krep4_r1j3h_closure" {
     $krep4_r1j3h_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r1j3f_closure+2;
         const $krep3_r1j3g_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.507181067 UTC

[section ""data" . $krep5_r1j3i_closure" {
     $krep5_r1j3i_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r1j3f_closure+2;
         const $krep_r1j3d_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.508928181 UTC

[section ""data" . $krep6_r1j3j_closure" {
     $krep6_r1j3j_closure:
         const :_con_info;
         const $krep2_r1j3f_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.510813803 UTC

[section ""data" . $krep7_r1j3k_closure" {
     $krep7_r1j3k_closure:
         const :_con_info;
         const $krep2_r1j3f_closure+2;
         const $krep6_r1j3j_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.51249327 UTC

[section ""data" . $krep8_r1j3l_closure" {
     $krep8_r1j3l_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc(,)_closure;
         const $krep7_r1j3k_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.514277562 UTC

[section ""data" . $krep9_r1j3m_closure" {
     $krep9_r1j3m_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r1j3f_closure+2;
         const $krep8_r1j3l_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.516020373 UTC

[section ""data" . $krep10_r1j3n_closure" {
     $krep10_r1j3n_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r1j3f_closure+2;
         const $krep9_r1j3m_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.518295079 UTC

[section ""data" . $krep11_r1j3o_closure" {
     $krep11_r1j3o_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Num.$tcNum_closure;
         const $krep6_r1j3j_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.520043476 UTC

[section ""data" . $krep12_r1j3p_closure" {
     $krep12_r1j3p_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Enum.$tcEnum_closure;
         const $krep6_r1j3j_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.52217739 UTC

[section ""data" . $krep13_r1j3q_closure" {
     $krep13_r1j3q_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Classes.$tcOrd_closure;
         const $krep6_r1j3j_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.523802712 UTC

[section ""cstring" . GHC.Real.$tcRatio2_bytes" {
     GHC.Real.$tcRatio2_bytes:
         I8[] [82,97,116,105,111]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.525479761 UTC

[section ""data" . GHC.Real.$tcRatio1_closure" {
     GHC.Real.$tcRatio1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Real.$tcRatio2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.527263741 UTC

[section ""data" . GHC.Real.$tcRatio_closure" {
     GHC.Real.$tcRatio_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Real.$trModule_closure+1;
         const GHC.Real.$tcRatio1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 17658523810845794968;
         const 1271393732863050253;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.529044163 UTC

[section ""data" . $krep14_r1j3r_closure" {
     $krep14_r1j3r_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Real.$tcRatio_closure+1;
         const $krep6_r1j3j_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.530774117 UTC

[section ""data" . $krep15_r1j3s_closure" {
     $krep15_r1j3s_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r1j3f_closure+2;
         const $krep14_r1j3r_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.532494652 UTC

[section ""data" . GHC.Real.$tc':%1_closure" {
     GHC.Real.$tc':%1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r1j3f_closure+2;
         const $krep15_r1j3s_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.534222669 UTC

[section ""cstring" . GHC.Real.$tc':%3_bytes" {
     GHC.Real.$tc':%3_bytes:
         I8[] [39,58,37]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.535865237 UTC

[section ""data" . GHC.Real.$tc':%2_closure" {
     GHC.Real.$tc':%2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Real.$tc':%3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.538076227 UTC

[section ""data" . GHC.Real.$tc':%_closure" {
     GHC.Real.$tc':%_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Real.$trModule_closure+1;
         const GHC.Real.$tc':%2_closure+1;
         const GHC.Real.$tc':%1_closure+4;
         const 11952989868638128372;
         const 6861245286732044789;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.53981038 UTC

[section ""data" . $krep16_r1j3t_closure" {
     $krep16_r1j3t_closure:
         const :_con_info;
         const $krep_r1j3d_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.541642225 UTC

[section ""data" . $krep17_r1j3u_closure" {
     $krep17_r1j3u_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Real.$tcRatio_closure+1;
         const $krep16_r1j3t_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.543409458 UTC

[section ""data" . $krep18_r1j3v_closure" {
     $krep18_r1j3v_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r1j3f_closure+2;
         const $krep17_r1j3u_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.545801941 UTC

[section ""data" . $krep19_r1j3w_closure" {
     $krep19_r1j3w_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep17_r1j3u_closure+1;
         const $krep2_r1j3f_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.547509228 UTC

[section ""cstring" . GHC.Real.$tcReal2_bytes" {
     GHC.Real.$tcReal2_bytes:
         I8[] [82,101,97,108]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.549198084 UTC

[section ""data" . GHC.Real.$tcReal1_closure" {
     GHC.Real.$tcReal1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Real.$tcReal2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.551320819 UTC

[section ""data" . GHC.Real.$tcReal_closure" {
     GHC.Real.$tcReal_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Real.$trModule_closure+1;
         const GHC.Real.$tcReal1_closure+1;
         const GHC.Real.$tcFractional1_closure+4;
         const 1826502536394630182;
         const 14487785779892251413;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.553185965 UTC

[section ""data" . $krep20_r1j3x_closure" {
     $krep20_r1j3x_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Real.$tcReal_closure+1;
         const $krep6_r1j3j_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.554959242 UTC

[section ""data" . $krep21_r1j3y_closure" {
     $krep21_r1j3y_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep18_r1j3v_closure+4;
         const $krep20_r1j3x_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.556607607 UTC

[section ""data" . $krep22_r1j3z_closure" {
     $krep22_r1j3z_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep13_r1j3q_closure+1;
         const $krep21_r1j3y_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.558446575 UTC

[section ""data" . GHC.Real.$tc'C:Real1_closure" {
     GHC.Real.$tc'C:Real1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep11_r1j3o_closure+1;
         const $krep22_r1j3z_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.560138727 UTC

[section ""cstring" . GHC.Real.$tc'C:Real3_bytes" {
     GHC.Real.$tc'C:Real3_bytes:
         I8[] [39,67,58,82,101,97,108]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.562395718 UTC

[section ""data" . GHC.Real.$tc'C:Real2_closure" {
     GHC.Real.$tc'C:Real2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Real.$tc'C:Real3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.564183968 UTC

[section ""data" . GHC.Real.$tc'C:Real_closure" {
     GHC.Real.$tc'C:Real_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Real.$trModule_closure+1;
         const GHC.Real.$tc'C:Real2_closure+1;
         const GHC.Real.$tc'C:Real1_closure+4;
         const 5938283050841830427;
         const 8926187074226767634;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.565967142 UTC

[section ""cstring" . GHC.Real.$tcIntegral2_bytes" {
     GHC.Real.$tcIntegral2_bytes:
         I8[] [73,110,116,101,103,114,97,108]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.56770949 UTC

[section ""data" . GHC.Real.$tcIntegral1_closure" {
     GHC.Real.$tcIntegral1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Real.$tcIntegral2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.569532138 UTC

[section ""data" . GHC.Real.$tcIntegral_closure" {
     GHC.Real.$tcIntegral_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Real.$trModule_closure+1;
         const GHC.Real.$tcIntegral1_closure+1;
         const GHC.Real.$tcFractional1_closure+4;
         const 16601157811546713973;
         const 3304955164956033666;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.571858173 UTC

[section ""data" . $krep23_r1j3A_closure" {
     $krep23_r1j3A_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Real.$tcIntegral_closure+1;
         const $krep6_r1j3j_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.573598051 UTC

[section ""data" . $krep24_r1j3B_closure" {
     $krep24_r1j3B_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_r1j3i_closure+4;
         const $krep23_r1j3A_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.575364125 UTC

[section ""data" . $krep25_r1j3C_closure" {
     $krep25_r1j3C_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_r1j3n_closure+4;
         const $krep24_r1j3B_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.57702796 UTC

[section ""data" . $krep26_r1j3D_closure" {
     $krep26_r1j3D_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_r1j3n_closure+4;
         const $krep25_r1j3C_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.578795409 UTC

[section ""data" . $krep27_r1j3E_closure" {
     $krep27_r1j3E_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_r1j3h_closure+4;
         const $krep26_r1j3D_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.580513365 UTC

[section ""data" . $krep28_r1j3F_closure" {
     $krep28_r1j3F_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_r1j3h_closure+4;
         const $krep27_r1j3E_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.582353313 UTC

[section ""data" . $krep29_r1j3G_closure" {
     $krep29_r1j3G_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_r1j3h_closure+4;
         const $krep28_r1j3F_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.584057172 UTC

[section ""data" . $krep30_r1j3H_closure" {
     $krep30_r1j3H_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_r1j3h_closure+4;
         const $krep29_r1j3G_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.586195194 UTC

[section ""data" . $krep31_r1j3I_closure" {
     $krep31_r1j3I_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep12_r1j3p_closure+1;
         const $krep30_r1j3H_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.587947213 UTC

[section ""data" . GHC.Real.$tc'C:Integral1_closure" {
     GHC.Real.$tc'C:Integral1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep20_r1j3x_closure+1;
         const $krep31_r1j3I_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.589687272 UTC

[section ""cstring" . GHC.Real.$tc'C:Integral3_bytes" {
     GHC.Real.$tc'C:Integral3_bytes:
         I8[] [39,67,58,73,110,116,101,103,114,97,108]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.591343964 UTC

[section ""data" . GHC.Real.$tc'C:Integral2_closure" {
     GHC.Real.$tc'C:Integral2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Real.$tc'C:Integral3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.593101681 UTC

[section ""data" . GHC.Real.$tc'C:Integral_closure" {
     GHC.Real.$tc'C:Integral_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Real.$trModule_closure+1;
         const GHC.Real.$tc'C:Integral2_closure+1;
         const GHC.Real.$tc'C:Integral1_closure+4;
         const 12141017740256829283;
         const 17564033539811245778;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.594950588 UTC

[section ""cstring" . GHC.Real.$tcFractional3_bytes" {
     GHC.Real.$tcFractional3_bytes:
         I8[] [70,114,97,99,116,105,111,110,97,108]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.59711496 UTC

[section ""data" . GHC.Real.$tcFractional2_closure" {
     GHC.Real.$tcFractional2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Real.$tcFractional3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.59888104 UTC

[section ""data" . GHC.Real.$tcFractional_closure" {
     GHC.Real.$tcFractional_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Real.$trModule_closure+1;
         const GHC.Real.$tcFractional2_closure+1;
         const GHC.Real.$tcFractional1_closure+4;
         const 14968870971062750857;
         const 13774835939651899219;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.600628017 UTC

[section ""data" . $krep32_r1j3J_closure" {
     $krep32_r1j3J_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Real.$tcFractional_closure+1;
         const $krep6_r1j3j_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.602705415 UTC

[section ""data" . $krep33_r1j3K_closure" {
     $krep33_r1j3K_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep19_r1j3w_closure+4;
         const $krep32_r1j3J_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.604415398 UTC

[section ""data" . $krep34_r1j3L_closure" {
     $krep34_r1j3L_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r1j3g_closure+4;
         const $krep33_r1j3K_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.606228408 UTC

[section ""data" . $krep35_r1j3M_closure" {
     $krep35_r1j3M_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_r1j3h_closure+4;
         const $krep34_r1j3L_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.608009085 UTC

[section ""data" . GHC.Real.$tc'C:Fractional1_closure" {
     GHC.Real.$tc'C:Fractional1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep11_r1j3o_closure+1;
         const $krep35_r1j3M_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.610465877 UTC

[section ""cstring" . GHC.Real.$tc'C:Fractional3_bytes" {
     GHC.Real.$tc'C:Fractional3_bytes:
         I8[] [39,67,58,70,114,97,99,116,105,111,110,97,108]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.61213858 UTC

[section ""data" . GHC.Real.$tc'C:Fractional2_closure" {
     GHC.Real.$tc'C:Fractional2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Real.$tc'C:Fractional3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.613951861 UTC

[section ""data" . GHC.Real.$tc'C:Fractional_closure" {
     GHC.Real.$tc'C:Fractional_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Real.$trModule_closure+1;
         const GHC.Real.$tc'C:Fractional2_closure+1;
         const GHC.Real.$tc'C:Fractional1_closure+4;
         const 15706435530565718930;
         const 11021884564355505453;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.615769725 UTC

[section ""cstring" . GHC.Real.$tcRealFrac2_bytes" {
     GHC.Real.$tcRealFrac2_bytes:
         I8[] [82,101,97,108,70,114,97,99]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.617469583 UTC

[section ""data" . GHC.Real.$tcRealFrac1_closure" {
     GHC.Real.$tcRealFrac1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Real.$tcRealFrac2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.619236876 UTC

[section ""data" . GHC.Real.$tcRealFrac_closure" {
     GHC.Real.$tcRealFrac_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Real.$trModule_closure+1;
         const GHC.Real.$tcRealFrac1_closure+1;
         const GHC.Real.$tcFractional1_closure+4;
         const 2318913099678420819;
         const 6373121509494083706;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.623726164 UTC

[section ""data" . GHC.Real.$w$c<_closure" {
     GHC.Real.$w$c<_closure:
         const GHC.Real.$w$c<_info;
 },
 $dNum_s1sud_entry() //  [R1]
         { []
         }
     {offset
       c1uOv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1uOw; else goto c1uOx;
       c1uOw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1uOx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dNum_s1sud_info" {
     $dNum_s1sud_info:
         const $dNum_s1sud_entry;
         const 1;
         const 16;
 },
 sat_s1sug_entry() //  [R1]
         { []
         }
     {offset
       c1uOC: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1uOD; else goto c1uOE;
       c1uOD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1uOE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 32];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sug_info" {
     sat_s1sug_info:
         const sat_s1sug_entry;
         const 3;
         const 15;
 },
 sat_s1suf_entry() //  [R1]
         { []
         }
     {offset
       c1uOJ: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1uOK; else goto c1uOL;
       c1uOK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1uOL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 32];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1suf_info" {
     sat_s1suf_info:
         const sat_s1suf_entry;
         const 3;
         const 15;
 },
 GHC.Real.$w$c<_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c1uOM: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1uOO; else goto c1uOP;
       c1uOO: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$w$c<_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1uOP: // global
           I64[Sp - 40] = block_c1uOn_info;
           R2 = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$w$c<_info" {
     GHC.Real.$w$c<_info:
         const GHC.Real.$w$c<_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _c1uOn() //  [R1]
         { []
         }
     {offset
       c1uOn: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c1uOS; else goto c1uOR;
       c1uOS: // global
           HpAlloc = 104;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1uOR: // global
           I64[Hp - 96] = $dNum_s1sud_info;
           P64[Hp - 80] = R1;
           I64[Hp - 72] = sat_s1sug_info;
           P64[Hp - 56] = P64[Sp + 16];
           P64[Hp - 48] = P64[Sp + 24];
           _c1uOr::P64 = Hp - 96;
           P64[Hp - 40] = _c1uOr::P64;
           I64[Hp - 32] = sat_s1suf_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = _c1uOr::P64;
           I64[Sp + 16] = block_c1uON_info;
           R2 = R1;
           P64[Sp + 24] = Hp - 32;
           P64[Sp + 32] = Hp - 72;
           Sp = Sp + 16;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1uOn_info" {
     block_c1uOn_info:
         const _c1uOn;
         const 4;
         const 30;
 },
 _c1uON() //  [R1]
         { []
         }
     {offset
       c1uON: // global
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           call GHC.Classes.<_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1uON_info" {
     block_c1uON_info:
         const _c1uON;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.637932634 UTC

[section ""data" . GHC.Real.$fOrdRatio_$c<_closure" {
     GHC.Real.$fOrdRatio_$c<_closure:
         const GHC.Real.$fOrdRatio_$c<_info;
 },
 GHC.Real.$fOrdRatio_$c<_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1uPM: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1uPQ; else goto c1uPR;
       c1uPQ: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fOrdRatio_$c<_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1uPR: // global
           I64[Sp - 24] = block_c1uPJ_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u1uPZ; else goto c1uPK;
       u1uPZ: // global
           call _c1uPJ(R1) args: 0, res: 0, upd: 0;
       c1uPK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fOrdRatio_$c<_info" {
     GHC.Real.$fOrdRatio_$c<_info:
         const GHC.Real.$fOrdRatio_$c<_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c1uPJ() //  [R1]
         { []
         }
     {offset
       c1uPJ: // global
           I64[Sp - 8] = block_c1uPP_info;
           _s1sul::P64 = P64[R1 + 7];
           _s1sum::P64 = P64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp] = _s1sum::P64;
           P64[Sp + 16] = _s1sul::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1uPY; else goto c1uPT;
       u1uPY: // global
           call _c1uPP(R1) args: 0, res: 0, upd: 0;
       c1uPT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1uPJ_info" {
     block_c1uPJ_info:
         const _c1uPJ;
         const 2;
         const 30;
 },
 _c1uPP() //  [R1]
         { []
         }
     {offset
       c1uPP: // global
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = P64[Sp + 8];
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 16];
           Sp = Sp + 32;
           call GHC.Real.$w$c<_entry(R6,
                                     R5,
                                     R4,
                                     R3,
                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1uPP_info" {
     block_c1uPP_info:
         const _c1uPP;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.647040789 UTC

[section ""data" . GHC.Real.$w$c<=_closure" {
     GHC.Real.$w$c<=_closure:
         const GHC.Real.$w$c<=_info;
 },
 $dNum_s1suw_entry() //  [R1]
         { []
         }
     {offset
       c1uQr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1uQs; else goto c1uQt;
       c1uQs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1uQt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dNum_s1suw_info" {
     $dNum_s1suw_info:
         const $dNum_s1suw_entry;
         const 1;
         const 16;
 },
 sat_s1suz_entry() //  [R1]
         { []
         }
     {offset
       c1uQy: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1uQz; else goto c1uQA;
       c1uQz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1uQA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 32];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1suz_info" {
     sat_s1suz_info:
         const sat_s1suz_entry;
         const 3;
         const 15;
 },
 sat_s1suy_entry() //  [R1]
         { []
         }
     {offset
       c1uQF: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1uQG; else goto c1uQH;
       c1uQG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1uQH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 32];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1suy_info" {
     sat_s1suy_info:
         const sat_s1suy_entry;
         const 3;
         const 15;
 },
 GHC.Real.$w$c<=_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c1uQI: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1uQK; else goto c1uQL;
       c1uQK: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$w$c<=_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1uQL: // global
           I64[Sp - 40] = block_c1uQj_info;
           R2 = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$w$c<=_info" {
     GHC.Real.$w$c<=_info:
         const GHC.Real.$w$c<=_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _c1uQj() //  [R1]
         { []
         }
     {offset
       c1uQj: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c1uQO; else goto c1uQN;
       c1uQO: // global
           HpAlloc = 104;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1uQN: // global
           I64[Hp - 96] = $dNum_s1suw_info;
           P64[Hp - 80] = R1;
           I64[Hp - 72] = sat_s1suz_info;
           P64[Hp - 56] = P64[Sp + 16];
           P64[Hp - 48] = P64[Sp + 24];
           _c1uQn::P64 = Hp - 96;
           P64[Hp - 40] = _c1uQn::P64;
           I64[Hp - 32] = sat_s1suy_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = _c1uQn::P64;
           I64[Sp + 16] = block_c1uQJ_info;
           R2 = R1;
           P64[Sp + 24] = Hp - 32;
           P64[Sp + 32] = Hp - 72;
           Sp = Sp + 16;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1uQj_info" {
     block_c1uQj_info:
         const _c1uQj;
         const 4;
         const 30;
 },
 _c1uQJ() //  [R1]
         { []
         }
     {offset
       c1uQJ: // global
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           call GHC.Classes.<=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1uQJ_info" {
     block_c1uQJ_info:
         const _c1uQJ;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.660871911 UTC

[section ""data" . GHC.Real.$fOrdRatio_$c<=_closure" {
     GHC.Real.$fOrdRatio_$c<=_closure:
         const GHC.Real.$fOrdRatio_$c<=_info;
 },
 GHC.Real.$fOrdRatio_$c<=_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1uRI: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1uRM; else goto c1uRN;
       c1uRM: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fOrdRatio_$c<=_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1uRN: // global
           I64[Sp - 24] = block_c1uRF_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u1uRV; else goto c1uRG;
       u1uRV: // global
           call _c1uRF(R1) args: 0, res: 0, upd: 0;
       c1uRG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fOrdRatio_$c<=_info" {
     GHC.Real.$fOrdRatio_$c<=_info:
         const GHC.Real.$fOrdRatio_$c<=_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c1uRF() //  [R1]
         { []
         }
     {offset
       c1uRF: // global
           I64[Sp - 8] = block_c1uRL_info;
           _s1suE::P64 = P64[R1 + 7];
           _s1suF::P64 = P64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp] = _s1suF::P64;
           P64[Sp + 16] = _s1suE::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1uRU; else goto c1uRP;
       u1uRU: // global
           call _c1uRL(R1) args: 0, res: 0, upd: 0;
       c1uRP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1uRF_info" {
     block_c1uRF_info:
         const _c1uRF;
         const 2;
         const 30;
 },
 _c1uRL() //  [R1]
         { []
         }
     {offset
       c1uRL: // global
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = P64[Sp + 8];
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 16];
           Sp = Sp + 32;
           call GHC.Real.$w$c<=_entry(R6,
                                      R5,
                                      R4,
                                      R3,
                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1uRL_info" {
     block_c1uRL_info:
         const _c1uRL;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.668939146 UTC

[section ""data" . GHC.Real.$fOrdRatio_$cmax_closure" {
     GHC.Real.$fOrdRatio_$cmax_closure:
         const GHC.Real.$fOrdRatio_$cmax_info;
 },
 GHC.Real.$fOrdRatio_$cmax_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1uSi: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1uSm; else goto c1uSn;
       c1uSm: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fOrdRatio_$cmax_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1uSn: // global
           I64[Sp - 24] = block_c1uSf_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u1uSH; else goto c1uSg;
       u1uSH: // global
           call _c1uSf(R1) args: 0, res: 0, upd: 0;
       c1uSg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fOrdRatio_$cmax_info" {
     GHC.Real.$fOrdRatio_$cmax_info:
         const GHC.Real.$fOrdRatio_$cmax_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c1uSf() //  [R1]
         { []
         }
     {offset
       c1uSf: // global
           I64[Sp - 16] = block_c1uSl_info;
           _s1suM::P64 = R1;
           _s1suN::P64 = P64[R1 + 7];
           _s1suO::P64 = P64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp - 8] = _s1suO::P64;
           P64[Sp] = _s1suN::P64;
           P64[Sp + 16] = _s1suM::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1uSG; else goto c1uSp;
       u1uSG: // global
           call _c1uSl(R1) args: 0, res: 0, upd: 0;
       c1uSp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1uSf_info" {
     block_c1uSf_info:
         const _c1uSf;
         const 2;
         const 30;
 },
 _c1uSl() //  [R1]
         { []
         }
     {offset
       c1uSl: // global
           _s1suN::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c1uSt_info;
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = P64[Sp + 8];
           R3 = _s1suN::P64;
           R2 = P64[Sp + 24];
           P64[Sp + 24] = R1;
           Sp = Sp + 16;
           call GHC.Real.$w$c<=_entry(R6,
                                      R5,
                                      R4,
                                      R3,
                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1uSl_info" {
     block_c1uSl_info:
         const _c1uSl;
         const 4;
         const 30;
 },
 _c1uSt() //  [R1]
         { []
         }
     {offset
       c1uSt: // global
           if (R1 & 7 == 1) goto c1uSA; else goto c1uSE;
       c1uSA: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c1uSE: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1uSt_info" {
     block_c1uSt_info:
         const _c1uSt;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.678789603 UTC

[section ""data" . GHC.Real.$fOrdRatio_$cmin_closure" {
     GHC.Real.$fOrdRatio_$cmin_closure:
         const GHC.Real.$fOrdRatio_$cmin_info;
 },
 GHC.Real.$fOrdRatio_$cmin_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1uTe: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1uTi; else goto c1uTj;
       c1uTi: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fOrdRatio_$cmin_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1uTj: // global
           I64[Sp - 24] = block_c1uTb_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u1uTD; else goto c1uTc;
       u1uTD: // global
           call _c1uTb(R1) args: 0, res: 0, upd: 0;
       c1uTc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fOrdRatio_$cmin_info" {
     GHC.Real.$fOrdRatio_$cmin_info:
         const GHC.Real.$fOrdRatio_$cmin_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c1uTb() //  [R1]
         { []
         }
     {offset
       c1uTb: // global
           I64[Sp - 16] = block_c1uTh_info;
           _s1suW::P64 = R1;
           _s1suX::P64 = P64[R1 + 7];
           _s1suY::P64 = P64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp - 8] = _s1suY::P64;
           P64[Sp] = _s1suX::P64;
           P64[Sp + 16] = _s1suW::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1uTC; else goto c1uTl;
       u1uTC: // global
           call _c1uTh(R1) args: 0, res: 0, upd: 0;
       c1uTl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1uTb_info" {
     block_c1uTb_info:
         const _c1uTb;
         const 2;
         const 30;
 },
 _c1uTh() //  [R1]
         { []
         }
     {offset
       c1uTh: // global
           _s1suX::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c1uTp_info;
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = P64[Sp + 8];
           R3 = _s1suX::P64;
           R2 = P64[Sp + 24];
           P64[Sp + 24] = R1;
           Sp = Sp + 16;
           call GHC.Real.$w$c<=_entry(R6,
                                      R5,
                                      R4,
                                      R3,
                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1uTh_info" {
     block_c1uTh_info:
         const _c1uTh;
         const 4;
         const 30;
 },
 _c1uTp() //  [R1]
         { []
         }
     {offset
       c1uTp: // global
           if (R1 & 7 == 1) goto c1uTw; else goto c1uTA;
       c1uTw: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c1uTA: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1uTp_info" {
     block_c1uTp_info:
         const _c1uTp;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.690189744 UTC

[section ""data" . GHC.Real.$w$ccompare_closure" {
     GHC.Real.$w$ccompare_closure:
         const GHC.Real.$w$ccompare_info;
 },
 GHC.Real.$w$ccompare_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c1uU9: // global
           if ((Sp + -80) < SpLim) (likely: False) goto c1uUh; else goto c1uUi;
       c1uUh: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$w$ccompare_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1uUi: // global
           I64[Sp - 48] = block_c1uU7_info;
           _s1sv3::P64 = R2;
           R2 = R2;
           P64[Sp - 40] = _s1sv3::P64;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 48;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$w$ccompare_info" {
     GHC.Real.$w$ccompare_info:
         const GHC.Real.$w$ccompare_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _c1uU7() //  [R1]
         { []
         }
     {offset
       c1uU7: // global
           I64[Sp] = block_c1uUc_info;
           R2 = R1;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1uU7_info" {
     block_c1uU7_info:
         const _c1uU7;
         const 5;
         const 30;
 },
 _c1uUc() //  [R1]
         { []
         }
     {offset
       c1uUc: // global
           I64[Sp] = block_c1uUg_info;
           R2 = R1;
           call GHC.Classes.$p1Ord_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1uUc_info" {
     block_c1uUc_info:
         const _c1uUc;
         const 5;
         const 30;
 },
 _c1uUg() //  [R1]
         { []
         }
     {offset
       c1uUg: // global
           I64[Sp - 8] = block_c1uUo_info;
           R2 = R1;
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = P64[Sp + 16];
           P64[Sp - 16] = P64[Sp + 32];
           P64[Sp] = R1;
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1uUg_info" {
     block_c1uUg_info:
         const _c1uUg;
         const 5;
         const 30;
 },
 _c1uUo() //  [R1]
         { []
         }
     {offset
       c1uUo: // global
           _s1sv5::P64 = P64[Sp + 32];
           _s1sv7::P64 = P64[Sp + 48];
           if (R1 & 7 == 1) goto c1uUw; else goto c1uUL;
       c1uUw: // global
           I64[Sp + 48] = block_c1uUt_info;
           R6 = _s1sv7::P64;
           R5 = P64[Sp + 40];
           R4 = _s1sv5::P64;
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 16];
           Sp = Sp + 48;
           call GHC.Real.$w$c<=_entry(R6,
                                      R5,
                                      R4,
                                      R3,
                                      R2) args: 8, res: 8, upd: 8;
       c1uUL: // global
           _s1sva::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1uUJ_info;
           R2 = _s1sva::P64;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = _s1sv5::P64;
           P64[Sp] = _s1sv7::P64;
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1uUo_info" {
     block_c1uUo_info:
         const _c1uUo;
         const 6;
         const 30;
 },
 _c1uUt() //  [R1]
         { []
         }
     {offset
       c1uUt: // global
           if (R1 & 7 == 1) goto u1uVd; else goto u1uVe;
       u1uVd: // global
           Sp = Sp + 8;
           call _c1uUY() args: 0, res: 0, upd: 0;
       u1uVe: // global
           Sp = Sp + 8;
           call _c1uV2() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1uUt_info" {
     block_c1uUt_info:
         const _c1uUt;
         const 0;
         const 30;
 },
 _c1uUJ() //  [R1]
         { []
         }
     {offset
       c1uUJ: // global
           if (R1 & 7 == 1) goto c1uUS; else goto c1uV6;
       c1uUS: // global
           _s1sv7::P64 = P64[Sp + 40];
           I64[Sp + 40] = block_c1uUP_info;
           R6 = _s1sv7::P64;
           R5 = P64[Sp + 32];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 40;
           call GHC.Real.$w$c<=_entry(R6,
                                      R5,
                                      R4,
                                      R3,
                                      R2) args: 8, res: 8, upd: 8;
       c1uV6: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1uUJ_info" {
     block_c1uUJ_info:
         const _c1uUJ;
         const 5;
         const 30;
 },
 _c1uUP() //  [R1]
         { []
         }
     {offset
       c1uUP: // global
           if (R1 & 7 == 1) goto u1uVb; else goto u1uVc;
       u1uVb: // global
           Sp = Sp + 8;
           call _c1uUY() args: 0, res: 0, upd: 0;
       u1uVc: // global
           Sp = Sp + 8;
           call _c1uV2() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1uUP_info" {
     block_c1uUP_info:
         const _c1uUP;
         const 0;
         const 30;
 },
 _c1uUY() //  []
         { []
         }
     {offset
       c1uUY: // global
           R1 = GHC.Types.GT_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c1uV2() //  []
         { []
         }
     {offset
       c1uV2: // global
           R1 = GHC.Types.LT_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.708944253 UTC

[section ""data" . GHC.Real.$fOrdRatio_$ccompare_closure" {
     GHC.Real.$fOrdRatio_$ccompare_closure:
         const GHC.Real.$fOrdRatio_$ccompare_info;
 },
 GHC.Real.$fOrdRatio_$ccompare_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1uWj: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1uWn; else goto c1uWo;
       c1uWn: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fOrdRatio_$ccompare_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1uWo: // global
           I64[Sp - 24] = block_c1uWg_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u1uWw; else goto c1uWh;
       u1uWw: // global
           call _c1uWg(R1) args: 0, res: 0, upd: 0;
       c1uWh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fOrdRatio_$ccompare_info" {
     GHC.Real.$fOrdRatio_$ccompare_info:
         const GHC.Real.$fOrdRatio_$ccompare_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c1uWg() //  [R1]
         { []
         }
     {offset
       c1uWg: // global
           I64[Sp - 8] = block_c1uWm_info;
           _s1svj::P64 = P64[R1 + 7];
           _s1svk::P64 = P64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp] = _s1svk::P64;
           P64[Sp + 16] = _s1svj::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1uWv; else goto c1uWq;
       u1uWv: // global
           call _c1uWm(R1) args: 0, res: 0, upd: 0;
       c1uWq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1uWg_info" {
     block_c1uWg_info:
         const _c1uWg;
         const 2;
         const 30;
 },
 _c1uWm() //  [R1]
         { []
         }
     {offset
       c1uWm: // global
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = P64[Sp + 8];
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 16];
           Sp = Sp + 32;
           call GHC.Real.$w$ccompare_entry(R6,
                                           R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1uWm_info" {
     block_c1uWm_info:
         const _c1uWm;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.717692524 UTC

[section ""data" . GHC.Real.$fOrdRatio_$c>_closure" {
     GHC.Real.$fOrdRatio_$c>_closure:
         const GHC.Real.$fOrdRatio_$c>_info;
 },
 GHC.Real.$fOrdRatio_$c>_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1uWT: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1uWX; else goto c1uWY;
       c1uWX: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fOrdRatio_$c>_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1uWY: // global
           I64[Sp - 24] = block_c1uWQ_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u1uXi; else goto c1uWR;
       u1uXi: // global
           call _c1uWQ(R1) args: 0, res: 0, upd: 0;
       c1uWR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fOrdRatio_$c>_info" {
     GHC.Real.$fOrdRatio_$c>_info:
         const GHC.Real.$fOrdRatio_$c>_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c1uWQ() //  [R1]
         { []
         }
     {offset
       c1uWQ: // global
           I64[Sp - 8] = block_c1uWW_info;
           _s1svs::P64 = P64[R1 + 7];
           _s1svt::P64 = P64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp] = _s1svt::P64;
           P64[Sp + 16] = _s1svs::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1uXh; else goto c1uX0;
       u1uXh: // global
           call _c1uWW(R1) args: 0, res: 0, upd: 0;
       c1uX0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1uWQ_info" {
     block_c1uWQ_info:
         const _c1uWQ;
         const 2;
         const 30;
 },
 _c1uWW() //  [R1]
         { []
         }
     {offset
       c1uWW: // global
           _s1svs::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_c1uX4_info;
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = P64[Sp + 8];
           R3 = _s1svs::P64;
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call GHC.Real.$w$ccompare_entry(R6,
                                           R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1uWW_info" {
     block_c1uWW_info:
         const _c1uWW;
         const 3;
         const 30;
 },
 _c1uX4() //  [R1]
         { []
         }
     {offset
       c1uX4: // global
           if (R1 & 7 == 3) goto c1uXf; else goto c1uXb;
       c1uXf: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1uXb: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1uX4_info" {
     block_c1uX4_info:
         const _c1uX4;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.728338099 UTC

[section ""data" . GHC.Real.$fOrdRatio_$c>=_closure" {
     GHC.Real.$fOrdRatio_$c>=_closure:
         const GHC.Real.$fOrdRatio_$c>=_info;
 },
 GHC.Real.$fOrdRatio_$c>=_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1uXP: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1uXT; else goto c1uXU;
       c1uXT: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fOrdRatio_$c>=_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1uXU: // global
           I64[Sp - 24] = block_c1uXM_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u1uYe; else goto c1uXN;
       u1uYe: // global
           call _c1uXM(R1) args: 0, res: 0, upd: 0;
       c1uXN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fOrdRatio_$c>=_info" {
     GHC.Real.$fOrdRatio_$c>=_info:
         const GHC.Real.$fOrdRatio_$c>=_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c1uXM() //  [R1]
         { []
         }
     {offset
       c1uXM: // global
           I64[Sp - 8] = block_c1uXS_info;
           _s1svC::P64 = P64[R1 + 7];
           _s1svD::P64 = P64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp] = _s1svD::P64;
           P64[Sp + 16] = _s1svC::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1uYd; else goto c1uXW;
       u1uYd: // global
           call _c1uXS(R1) args: 0, res: 0, upd: 0;
       c1uXW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1uXM_info" {
     block_c1uXM_info:
         const _c1uXM;
         const 2;
         const 30;
 },
 _c1uXS() //  [R1]
         { []
         }
     {offset
       c1uXS: // global
           _s1svC::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_c1uY0_info;
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = P64[Sp + 8];
           R3 = _s1svC::P64;
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call GHC.Real.$w$ccompare_entry(R6,
                                           R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1uXS_info" {
     block_c1uXS_info:
         const _c1uXS;
         const 3;
         const 30;
 },
 _c1uY0() //  [R1]
         { []
         }
     {offset
       c1uY0: // global
           if (R1 & 7 == 1) goto c1uYb; else goto c1uY7;
       c1uYb: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1uY7: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1uY0_info" {
     block_c1uY0_info:
         const _c1uY0;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.740075666 UTC

[section ""data" . GHC.Real.$fOrdRatio_closure" {
     GHC.Real.$fOrdRatio_closure:
         const GHC.Real.$fOrdRatio_info;
 },
 sat_s1svQ_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c1uYN: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Real.$fOrdRatio_$cmin_entry(R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1svQ_info" {
     sat_s1svQ_info:
         const sat_s1svQ_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s1svP_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c1uYV: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Real.$fOrdRatio_$cmax_entry(R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1svP_info" {
     sat_s1svP_info:
         const sat_s1svP_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s1svO_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c1uZ3: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Real.$fOrdRatio_$c>=_entry(R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1svO_info" {
     sat_s1svO_info:
         const sat_s1svO_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s1svN_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c1uZb: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Real.$fOrdRatio_$c>_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1svN_info" {
     sat_s1svN_info:
         const sat_s1svN_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s1svM_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c1uZj: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Real.$fOrdRatio_$c<=_entry(R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1svM_info" {
     sat_s1svM_info:
         const sat_s1svM_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s1svL_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c1uZr: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Real.$fOrdRatio_$c<_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1svL_info" {
     sat_s1svL_info:
         const sat_s1svL_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s1svK_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c1uZz: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Real.$fOrdRatio_$ccompare_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1svK_info" {
     sat_s1svK_info:
         const sat_s1svK_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s1svJ_entry() //  [R1]
         { []
         }
     {offset
       c1uZG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1uZH; else goto c1uZI;
       c1uZH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1uZI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$fOrdRatio_$cp1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1svJ_info" {
     sat_s1svJ_info:
         const sat_s1svJ_entry;
         const 1;
         const 16;
 },
 GHC.Real.$fOrdRatio_entry() //  [R2]
         { []
         }
     {offset
       c1uZK: // global
           Hp = Hp + 208;
           if (Hp > HpLim) (likely: False) goto c1uZO; else goto c1uZN;
       c1uZO: // global
           HpAlloc = 208;
           R2 = R2;
           R1 = GHC.Real.$fOrdRatio_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1uZN: // global
           I64[Hp - 200] = sat_s1svQ_info;
           P64[Hp - 192] = R2;
           I64[Hp - 184] = sat_s1svP_info;
           P64[Hp - 176] = R2;
           I64[Hp - 168] = sat_s1svO_info;
           P64[Hp - 160] = R2;
           I64[Hp - 152] = sat_s1svN_info;
           P64[Hp - 144] = R2;
           I64[Hp - 136] = sat_s1svM_info;
           P64[Hp - 128] = R2;
           I64[Hp - 120] = sat_s1svL_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_s1svK_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_s1svJ_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = GHC.Classes.C:Ord_con_info;
           P64[Hp - 56] = Hp - 88;
           P64[Hp - 48] = Hp - 102;
           P64[Hp - 40] = Hp - 118;
           P64[Hp - 32] = Hp - 134;
           P64[Hp - 24] = Hp - 150;
           P64[Hp - 16] = Hp - 166;
           P64[Hp - 8] = Hp - 182;
           P64[Hp] = Hp - 198;
           R1 = Hp - 63;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fOrdRatio_info" {
     GHC.Real.$fOrdRatio_info:
         const GHC.Real.$fOrdRatio_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.758917385 UTC

[section ""data" . GHC.Real.$fNumRatio_$cnegate_closure" {
     GHC.Real.$fNumRatio_$cnegate_closure:
         const GHC.Real.$fNumRatio_$cnegate_info;
 },
 GHC.Real.$fNumRatio_$cnegate_entry() //  [R2, R3]
         { []
         }
     {offset
       c1v0I: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1v0W; else goto c1v0X;
       c1v0W: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fNumRatio_$cnegate_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1v0X: // global
           I64[Sp - 16] = block_c1v0F_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1v14; else goto c1v0G;
       u1v14: // global
           call _c1v0F(R1) args: 0, res: 0, upd: 0;
       c1v0G: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fNumRatio_$cnegate_info" {
     GHC.Real.$fNumRatio_$cnegate_info:
         const GHC.Real.$fNumRatio_$cnegate_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1v0F() //  [R1]
         { []
         }
     {offset
       c1v0F: // global
           I64[Sp - 8] = block_c1v0L_info;
           R2 = P64[Sp + 8];
           P64[Sp] = P64[R1 + 15];
           P64[Sp + 8] = P64[R1 + 7];
           Sp = Sp - 8;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1v0F_info" {
     block_c1v0F_info:
         const _c1v0F;
         const 1;
         const 30;
 },
 _c1v0L() //  [R1]
         { []
         }
     {offset
       c1v0L: // global
           I64[Sp] = block_c1v0P_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1v0L_info" {
     block_c1v0L_info:
         const _c1v0L;
         const 2;
         const 30;
 },
 _c1v0P() //  [R1]
         { []
         }
     {offset
       c1v0P: // global
           I64[Sp] = block_c1v0T_info;
           R2 = R1;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 16];
           Sp = Sp - 16;
           call GHC.Num.negate_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1v0P_info" {
     block_c1v0P_info:
         const _c1v0P;
         const 2;
         const 30;
 },
 _c1v0T() //  [R1]
         { []
         }
     {offset
       c1v0T: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1v13; else goto c1v12;
       c1v13: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1v12: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1v0T_info" {
     block_c1v0T_info:
         const _c1v0T;
         const 130;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.770091601 UTC

[section ""data" . GHC.Real.$fNumRatio_$cabs_closure" {
     GHC.Real.$fNumRatio_$cabs_closure:
         const GHC.Real.$fNumRatio_$cabs_info;
 },
 GHC.Real.$fNumRatio_$cabs_entry() //  [R2, R3]
         { []
         }
     {offset
       c1v1F: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1v1T; else goto c1v1U;
       c1v1T: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fNumRatio_$cabs_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1v1U: // global
           I64[Sp - 16] = block_c1v1C_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1v21; else goto c1v1D;
       u1v21: // global
           call _c1v1C(R1) args: 0, res: 0, upd: 0;
       c1v1D: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fNumRatio_$cabs_info" {
     GHC.Real.$fNumRatio_$cabs_info:
         const GHC.Real.$fNumRatio_$cabs_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1v1C() //  [R1]
         { []
         }
     {offset
       c1v1C: // global
           I64[Sp - 8] = block_c1v1I_info;
           R2 = P64[Sp + 8];
           P64[Sp] = P64[R1 + 15];
           P64[Sp + 8] = P64[R1 + 7];
           Sp = Sp - 8;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1v1C_info" {
     block_c1v1C_info:
         const _c1v1C;
         const 1;
         const 30;
 },
 _c1v1I() //  [R1]
         { []
         }
     {offset
       c1v1I: // global
           I64[Sp] = block_c1v1M_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1v1I_info" {
     block_c1v1I_info:
         const _c1v1I;
         const 2;
         const 30;
 },
 _c1v1M() //  [R1]
         { []
         }
     {offset
       c1v1M: // global
           I64[Sp] = block_c1v1Q_info;
           R2 = R1;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 16];
           Sp = Sp - 16;
           call GHC.Num.abs_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1v1M_info" {
     block_c1v1M_info:
         const _c1v1M;
         const 2;
         const 30;
 },
 _c1v1Q() //  [R1]
         { []
         }
     {offset
       c1v1Q: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1v20; else goto c1v1Z;
       c1v20: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1v1Z: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1v1Q_info" {
     block_c1v1Q_info:
         const _c1v1Q;
         const 130;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.781116025 UTC

[section ""data" . GHC.Real.$w$csignum_closure" {
     GHC.Real.$w$csignum_closure:
         const GHC.Real.$w$csignum_info;
         const 0;
 },
 GHC.Real.$w$csignum_entry() //  [R2, R3]
         { []
         }
     {offset
       c1v2B: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1v2L; else goto c1v2M;
       c1v2L: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$w$csignum_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1v2M: // global
           I64[Sp - 16] = block_c1v2z_info;
           R2 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$w$csignum_info" {
     GHC.Real.$w$csignum_info:
         const GHC.Real.$w$csignum_entry;
         const 0;
         const 2305843013508661262;
         const 8589934607;
         const S1sVz_srt+552;
 },
 _c1v2z() //  [R1]
         { []
         }
     {offset
       c1v2z: // global
           I64[Sp] = block_c1v2E_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1v2z_info" {
     block_c1v2z_info:
         const _c1v2z;
         const 1;
         const 4294967326;
         const S1sVz_srt+552;
 },
 _c1v2E() //  [R1]
         { []
         }
     {offset
       c1v2E: // global
           I64[Sp] = block_c1v2I_info;
           R2 = R1;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 8];
           P64[Sp + 8] = R1;
           Sp = Sp - 16;
           call GHC.Num.signum_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1v2E_info" {
     block_c1v2E_info:
         const _c1v2E;
         const 1;
         const 4294967326;
         const S1sVz_srt+552;
 },
 _c1v2I() //  [R1]
         { []
         }
     {offset
       c1v2I: // global
           I64[Sp] = block_c1v2K_info;
           R2 = P64[Sp + 8];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = GHC.Real.$fEnumRatio1_closure;
           P64[Sp + 8] = R1;
           Sp = Sp - 16;
           call GHC.Num.fromInteger_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1v2I_info" {
     block_c1v2I_info:
         const _c1v2I;
         const 1;
         const 4294967326;
         const S1sVz_srt+552;
 },
 _c1v2K() //  [R1]
         { []
         }
     {offset
       c1v2K: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1v2K_info" {
     block_c1v2K_info:
         const _c1v2K;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.792782469 UTC

[section ""data" . GHC.Real.$fNumRatio_$csignum_closure" {
     GHC.Real.$fNumRatio_$csignum_closure:
         const GHC.Real.$fNumRatio_$csignum_info;
         const 0;
 },
 GHC.Real.$fNumRatio_$csignum_entry() //  [R2, R3]
         { []
         }
     {offset
       c1v3p: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1v3v; else goto c1v3w;
       c1v3v: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fNumRatio_$csignum_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1v3w: // global
           I64[Sp - 16] = block_c1v3m_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1v3B; else goto c1v3n;
       u1v3B: // global
           call _c1v3m(R1) args: 0, res: 0, upd: 0;
       c1v3n: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fNumRatio_$csignum_info" {
     GHC.Real.$fNumRatio_$csignum_info:
         const GHC.Real.$fNumRatio_$csignum_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S1sVz_srt+784;
 },
 _c1v3m() //  [R1]
         { []
         }
     {offset
       c1v3m: // global
           _s1swd::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1v3s_info;
           R3 = P64[R1 + 7];
           R2 = _s1swd::P64;
           Sp = Sp + 8;
           call GHC.Real.$w$csignum_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1v3m_info" {
     block_c1v3m_info:
         const _c1v3m;
         const 1;
         const 4294967326;
         const S1sVz_srt+784;
 },
 _c1v3s() //  [R1, R2]
         { []
         }
     {offset
       c1v3s: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1v3A; else goto c1v3z;
       c1v3A: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c1v3z: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1v3s_info" {
     block_c1v3s_info:
         const _c1v3s;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.800947788 UTC

[section ""data" . GHC.Real.$w$cfromInteger_closure" {
     GHC.Real.$w$cfromInteger_closure:
         const GHC.Real.$w$cfromInteger_info;
         const 0;
 },
 GHC.Real.$w$cfromInteger_entry() //  [R2, R3]
         { []
         }
     {offset
       c1v3Y: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1v48; else goto c1v49;
       c1v48: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$w$cfromInteger_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1v49: // global
           I64[Sp - 16] = block_c1v3W_info;
           R2 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$w$cfromInteger_info" {
     GHC.Real.$w$cfromInteger_info:
         const GHC.Real.$w$cfromInteger_entry;
         const 0;
         const 9223372041149743118;
         const 8589934607;
         const S1sVz_srt+552;
 },
 _c1v3W() //  [R1]
         { []
         }
     {offset
       c1v3W: // global
           I64[Sp] = block_c1v41_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1v3W_info" {
     block_c1v3W_info:
         const _c1v3W;
         const 1;
         const 4294967326;
         const S1sVz_srt+552;
 },
 _c1v41() //  [R1]
         { []
         }
     {offset
       c1v41: // global
           I64[Sp] = block_c1v45_info;
           R2 = R1;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 8];
           P64[Sp + 8] = R1;
           Sp = Sp - 16;
           call GHC.Num.fromInteger_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1v41_info" {
     block_c1v41_info:
         const _c1v41;
         const 1;
         const 4294967326;
         const S1sVz_srt+552;
 },
 _c1v45() //  [R1]
         { []
         }
     {offset
       c1v45: // global
           I64[Sp] = block_c1v47_info;
           R2 = P64[Sp + 8];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = GHC.Real.$fEnumRatio1_closure;
           P64[Sp + 8] = R1;
           Sp = Sp - 16;
           call GHC.Num.fromInteger_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1v45_info" {
     block_c1v45_info:
         const _c1v45;
         const 1;
         const 4294967326;
         const S1sVz_srt+552;
 },
 _c1v47() //  [R1]
         { []
         }
     {offset
       c1v47: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1v47_info" {
     block_c1v47_info:
         const _c1v47;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.811523704 UTC

[section ""data" . GHC.Real.$fNumRatio_$cfromInteger_closure" {
     GHC.Real.$fNumRatio_$cfromInteger_closure:
         const GHC.Real.$fNumRatio_$cfromInteger_info;
         const 0;
 },
 GHC.Real.$fNumRatio_$cfromInteger_entry() //  [R2, R3]
         { []
         }
     {offset
       c1v4M: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1v4N; else goto c1v4O;
       c1v4N: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fNumRatio_$cfromInteger_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1v4O: // global
           I64[Sp - 8] = block_c1v4J_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Real.$w$cfromInteger_entry(R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fNumRatio_$cfromInteger_info" {
     GHC.Real.$fNumRatio_$cfromInteger_info:
         const GHC.Real.$fNumRatio_$cfromInteger_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S1sVz_srt+800;
 },
 _c1v4J() //  [R1, R2]
         { []
         }
     {offset
       c1v4J: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1v4R; else goto c1v4Q;
       c1v4R: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c1v4Q: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1v4J_info" {
     block_c1v4J_info:
         const _c1v4J;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.817068674 UTC

[section ""data" . GHC.Real.$fRealRatio_$s$ctoRational_closure" {
     GHC.Real.$fRealRatio_$s$ctoRational_closure:
         const GHC.Real.$fRealRatio_$s$ctoRational_info;
 },
 GHC.Real.$fRealRatio_$s$ctoRational_entry() //  [R2]
         { []
         }
     {offset
       c1v57: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fRealRatio_$s$ctoRational_info" {
     GHC.Real.$fRealRatio_$s$ctoRational_info:
         const GHC.Real.$fRealRatio_$s$ctoRational_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.822700249 UTC

[section ""data" . GHC.Real.$fRealRatio_$ctoRational_closure" {
     GHC.Real.$fRealRatio_$ctoRational_closure:
         const GHC.Real.$fRealRatio_$ctoRational_info;
 },
 GHC.Real.$fRealRatio_$ctoRational_entry() //  [R2, R3]
         { []
         }
     {offset
       c1v5n: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1v5z; else goto c1v5A;
       c1v5z: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fRealRatio_$ctoRational_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1v5A: // global
           I64[Sp - 16] = block_c1v5k_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1v5G; else goto c1v5l;
       u1v5G: // global
           call _c1v5k(R1) args: 0, res: 0, upd: 0;
       c1v5l: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fRealRatio_$ctoRational_info" {
     GHC.Real.$fRealRatio_$ctoRational_info:
         const GHC.Real.$fRealRatio_$ctoRational_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1v5k() //  [R1]
         { []
         }
     {offset
       c1v5k: // global
           I64[Sp - 8] = block_c1v5q_info;
           R2 = P64[Sp + 8];
           I64[Sp - 24] = stg_ap_p_info;
           P64[Sp - 16] = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 24;
           call GHC.Real.toInteger_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1v5k_info" {
     block_c1v5k_info:
         const _c1v5k;
         const 1;
         const 30;
 },
 _c1v5q() //  [R1]
         { []
         }
     {offset
       c1v5q: // global
           _s1swB::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1v5u_info;
           R2 = P64[Sp + 16];
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = _s1swB::P64;
           P64[Sp + 16] = R1;
           Sp = Sp - 8;
           call GHC.Real.toInteger_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1v5q_info" {
     block_c1v5q_info:
         const _c1v5q;
         const 2;
         const 30;
 },
 _c1v5u() //  [R1]
         { []
         }
     {offset
       c1v5u: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1v5F; else goto c1v5E;
       c1v5F: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1v5E: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1v5u_info" {
     block_c1v5u_info:
         const _c1v5u;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.835178026 UTC

[section ""data" . GHC.Real.$w$crecip_closure" {
     GHC.Real.$w$crecip_closure:
         const GHC.Real.$w$crecip_info;
         const 0;
 },
 $dNum_s1swI_entry() //  [R1]
         { []
         }
     {offset
       c1v6i: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1v6j; else goto c1v6k;
       c1v6j: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1v6k: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dNum_s1swI_info" {
     $dNum_s1swI_info:
         const $dNum_s1swI_entry;
         const 1;
         const 16;
 },
 sat_s1swL_entry() //  [R1]
         { []
         }
     {offset
       c1v6t: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1v6u; else goto c1v6v;
       c1v6u: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1v6v: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Real.even1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1swL_info" {
     sat_s1swL_info:
         const sat_s1swL_entry;
         const 1;
         const 4294967312;
         const S1sVz_srt+680;
 },
 sat_s1swN_entry() //  [R1]
         { []
         }
     {offset
       c1v6I: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1v6J; else goto c1v6K;
       c1v6J: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1v6K: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Real.even1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1swN_info" {
     sat_s1swN_info:
         const sat_s1swN_entry;
         const 1;
         const 4294967312;
         const S1sVz_srt+680;
 },
 section ""relreadonly" . u1v7n_srtd" {
     u1v7n_srtd:
         const S1sVz_srt+296;
         const 66;
         const 281474976710657;
         const 2;
 },
 GHC.Real.$w$crecip_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1v6L: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c1v6M; else goto c1v6N;
       c1v6M: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$w$crecip_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1v6N: // global
           I64[Sp - 24] = block_c1v6a_info;
           R2 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$w$crecip_info" {
     GHC.Real.$w$crecip_info:
         const GHC.Real.$w$crecip_entry;
         const 0;
         const 18446744069414584334;
         const 12884901911;
         const u1v7n_srtd;
 },
 section ""relreadonly" . u1v7o_srtd" {
     u1v7o_srtd:
         const S1sVz_srt+296;
         const 49;
         const 281474976710657;
 },
 _c1v6a() //  [R1]
         { []
         }
     {offset
       c1v6a: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1v6Q; else goto c1v6P;
       c1v6Q: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1v6P: // global
           I64[Hp - 16] = $dNum_s1swI_info;
           P64[Hp] = R1;
           I64[Sp - 8] = block_c1v6l_info;
           R2 = R1;
           P64[Sp] = Hp - 16;
           Sp = Sp - 8;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1v6a_info" {
     block_c1v6a_info:
         const _c1v6a;
         const 2;
         const 18446744069414584350;
         const u1v7o_srtd;
 },
 section ""relreadonly" . u1v7p_srtd" {
     u1v7p_srtd:
         const S1sVz_srt+296;
         const 49;
         const 281474976710657;
 },
 _c1v6l() //  [R1]
         { []
         }
     {offset
       c1v6l: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1v6T; else goto c1v6S;
       c1v6T: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1v6S: // global
           I64[Hp - 16] = sat_s1swL_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp - 16] = block_c1v6w_info;
           R2 = R1;
           P64[Sp - 8] = R1;
           P64[Sp] = Hp - 16;
           Sp = Sp - 16;
           call GHC.Classes.$p1Ord_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1v6l_info" {
     block_c1v6l_info:
         const _c1v6l;
         const 3;
         const 18446744069414584350;
         const u1v7p_srtd;
 },
 section ""relreadonly" . u1v7q_srtd" {
     u1v7q_srtd:
         const S1sVz_srt+296;
         const 49;
         const 281474976710657;
 },
 _c1v6w() //  [R1]
         { []
         }
     {offset
       c1v6w: // global
           I64[Sp] = block_c1v6A_info;
           R2 = R1;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 32];
           P64[Sp - 8] = P64[Sp + 16];
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1v6w_info" {
     block_c1v6w_info:
         const _c1v6w;
         const 5;
         const 18446744069414584350;
         const u1v7q_srtd;
 },
 section ""relreadonly" . u1v7r_srtd" {
     u1v7r_srtd:
         const S1sVz_srt+296;
         const 49;
         const 281474976710657;
 },
 _c1v6A() //  [R1]
         { []
         }
     {offset
       c1v6A: // global
           if (R1 & 7 == 1) goto c1v6X; else goto c1v7k;
       c1v6X: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1v70; else goto c1v6Z;
       c1v70: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1v6Z: // global
           I64[Hp - 16] = sat_s1swN_info;
           P64[Hp] = P64[Sp + 24];
           I64[Sp + 16] = block_c1v6V_info;
           R2 = P64[Sp + 8];
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = P64[Sp + 32];
           P64[Sp + 8] = Hp - 16;
           Sp = Sp - 8;
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
       c1v7k: // global
           R1 = GHC.Real.ratioZeroDenominatorError_closure;
           Sp = Sp + 48;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1v6A_info" {
     block_c1v6A_info:
         const _c1v6A;
         const 133;
         const 18446744069414584350;
         const u1v7r_srtd;
 },
 _c1v6V() //  [R1]
         { []
         }
     {offset
       c1v6V: // global
           _s1swG::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c1v76; else goto c1v7d;
       c1v76: // global
           R2 = P64[Sp + 16];
           R1 = _s1swG::P64;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c1v7d: // global
           I64[Sp] = block_c1v79_info;
           R2 = P64[Sp + 8];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _s1swG::P64;
           Sp = Sp - 16;
           call GHC.Num.negate_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1v6V_info" {
     block_c1v6V_info:
         const _c1v6V;
         const 3;
         const 30;
 },
 _c1v79() //  [R1]
         { []
         }
     {offset
       c1v79: // global
           _s1swF::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c1v7b_info;
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = _s1swF::P64;
           P64[Sp + 24] = R1;
           call GHC.Num.negate_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1v79_info" {
     block_c1v79_info:
         const _c1v79;
         const 259;
         const 30;
 },
 _c1v7b() //  [R1]
         { []
         }
     {offset
       c1v7b: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1v7b_info" {
     block_c1v7b_info:
         const _c1v7b;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.860675947 UTC

[section ""data" . GHC.Real.$fFractionalRatio_$crecip_closure" {
     GHC.Real.$fFractionalRatio_$crecip_closure:
         const GHC.Real.$fFractionalRatio_$crecip_info;
         const 0;
 },
 GHC.Real.$fFractionalRatio_$crecip_entry() //  [R2, R3]
         { []
         }
     {offset
       c1v8P: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1v8V; else goto c1v8W;
       c1v8V: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fFractionalRatio_$crecip_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1v8W: // global
           I64[Sp - 16] = block_c1v8M_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1v91; else goto c1v8N;
       u1v91: // global
           call _c1v8M(R1) args: 0, res: 0, upd: 0;
       c1v8N: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fFractionalRatio_$crecip_info" {
     GHC.Real.$fFractionalRatio_$crecip_info:
         const GHC.Real.$fFractionalRatio_$crecip_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S1sVz_srt+816;
 },
 _c1v8M() //  [R1]
         { []
         }
     {offset
       c1v8M: // global
           _s1swS::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1v8S_info;
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = _s1swS::P64;
           Sp = Sp + 8;
           call GHC.Real.$w$crecip_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1v8M_info" {
     block_c1v8M_info:
         const _c1v8M;
         const 1;
         const 4294967326;
         const S1sVz_srt+816;
 },
 _c1v8S() //  [R1, R2]
         { []
         }
     {offset
       c1v8S: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1v90; else goto c1v8Z;
       c1v90: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c1v8Z: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1v8S_info" {
     block_c1v8S_info:
         const _c1v8S;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.871303566 UTC

[section ""data" . GHC.Real.$w$s$cproperFraction_closure" {
     GHC.Real.$w$s$cproperFraction_closure:
         const GHC.Real.$w$s$cproperFraction_info;
         const 0;
 },
 section ""relreadonly" . u1vax_srtd" {
     u1vax_srtd:
         const S1sVz_srt+424;
         const 33;
         const 4294967297;
 },
 ds_s1sx3_entry() //  [R1]
         { []
         }
     {offset
       c1v9v: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1v9w; else goto c1v9x;
       c1v9w: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1v9x: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c1v9q_info;
           R3 = GHC.Real.even1_closure;
           _s1sx2::P64 = P64[R1 + 24];
           R2 = _s1sx2::P64;
           P64[Sp - 32] = P64[R1 + 16];
           P64[Sp - 24] = _s1sx2::P64;
           Sp = Sp - 40;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds_s1sx3_info" {
     ds_s1sx3_info:
         const ds_s1sx3_entry;
         const 2;
         const 18446744069414584338;
         const u1vax_srtd;
 },
 _c1v9q() //  [R1]
         { []
         }
     {offset
       c1v9q: // global
           if (R1 == 1) goto c1v9u; else goto c1v9t;
       c1v9u: // global
           R1 = GHC.Real.divZeroError_closure;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       c1v9t: // global
           _s1sx2::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c1v9A_info;
           R3 = _s1sx2::P64;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Integer.Type.quotRemInteger_entry(R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c1v9q_info" {
     block_c1v9q_info:
         const _c1v9q;
         const 2;
         const 4294967326;
         const S1sVz_srt+832;
 },
 _c1v9A() //  [R1, R2]
         { []
         }
     {offset
       c1v9A: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1v9G; else goto c1v9F;
       c1v9G: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c1v9F: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1v9A_info" {
     block_c1v9A_info:
         const _c1v9A;
         const 0;
         const 30;
 },
 sat_s1sxj_entry() //  [R1]
         { []
         }
     {offset
       c1v9R: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1va0; else goto c1va1;
       c1va0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1va1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c1v9O_info;
           _s1sx2::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _s1sx2::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u1va7; else goto c1v9P;
       u1va7: // global
           call _c1v9O(R1) args: 0, res: 0, upd: 0;
       c1v9P: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sxj_info" {
     sat_s1sxj_info:
         const sat_s1sxj_entry;
         const 2;
         const 18;
 },
 _c1v9O() //  [R1]
         { []
         }
     {offset
       c1v9O: // global
           I64[Sp] = block_c1v9U_info;
           R1 = P64[R1 + 15];
           if (R1 & 7 != 0) goto u1va6; else goto c1v9V;
       u1va6: // global
           call _c1v9U(R1) args: 0, res: 0, upd: 0;
       c1v9V: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c1v9O_info" {
     block_c1v9O_info:
         const _c1v9O;
         const 1;
         const 30;
 },
 _c1v9U() //  [R1]
         { []
         }
     {offset
       c1v9U: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1va5; else goto c1va4;
       c1va5: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c1va4: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1v9U_info" {
     block_c1v9U_info:
         const _c1v9U;
         const 1;
         const 30;
 },
 sat_s1sxe_entry() //  [R1]
         { []
         }
     {offset
       c1vaf: // global
           _s1sxe::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c1vaj; else goto c1vak;
       c1vak: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1vam; else goto c1val;
       c1vam: // global
           HpAlloc = 24;
           goto c1vaj;
       c1vaj: // global
           R1 = _s1sxe::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1val: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1sxe::P64;
           _s1sx0::P64 = P64[_s1sxe::P64 + 16];
           _s1sx3::P64 = P64[_s1sxe::P64 + 24];
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _s1sx3::P64;
           I64[Sp - 32] = block_c1vad_info;
           R2 = _s1sx0::P64;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 32;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sxe_info" {
     sat_s1sxe_info:
         const sat_s1sxe_entry;
         const 2;
         const 18;
 },
 _c1vad() //  [R1]
         { []
         }
     {offset
       c1vad: // global
           I64[Sp] = block_c1vai_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c1vad_info" {
     block_c1vad_info:
         const _c1vad;
         const 1;
         const 30;
 },
 _c1vai() //  [R1]
         { []
         }
     {offset
       c1vai: // global
           R2 = R1;
           I64[Sp] = stg_ap_p_info;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1vai_info" {
     block_c1vai_info:
         const _c1vai;
         const 1;
         const 30;
 },
 GHC.Real.$w$s$cproperFraction_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1vas: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c1vaw; else goto c1vav;
       c1vaw: // global
           HpAlloc = 96;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$w$s$cproperFraction_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1vav: // global
           I64[Hp - 88] = ds_s1sx3_info;
           P64[Hp - 72] = R3;
           P64[Hp - 64] = R4;
           I64[Hp - 56] = sat_s1sxj_info;
           P64[Hp - 40] = R4;
           _c1v9m::P64 = Hp - 88;
           P64[Hp - 32] = _c1v9m::P64;
           I64[Hp - 24] = sat_s1sxe_info;
           P64[Hp - 8] = R2;
           P64[Hp] = _c1v9m::P64;
           R2 = Hp - 56;
           R1 = Hp - 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$w$s$cproperFraction_info" {
     GHC.Real.$w$s$cproperFraction_info:
         const GHC.Real.$w$s$cproperFraction_entry;
         const 0;
         const 6755403736023054;
         const 12884901911;
         const S1sVz_srt+680;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.892892104 UTC

[section ""data" . GHC.Real.$fEnumRatio_$s$cproperFraction_closure" {
     GHC.Real.$fEnumRatio_$s$cproperFraction_closure:
         const GHC.Real.$fEnumRatio_$s$cproperFraction_info;
         const 0;
 },
 GHC.Real.$fEnumRatio_$s$cproperFraction_entry() //  [R2, R3]
         { []
         }
     {offset
       c1vbC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1vbI; else goto c1vbJ;
       c1vbI: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fEnumRatio_$s$cproperFraction_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1vbJ: // global
           I64[Sp - 16] = block_c1vbz_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1vbO; else goto c1vbA;
       u1vbO: // global
           call _c1vbz(R1) args: 0, res: 0, upd: 0;
       c1vbA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fEnumRatio_$s$cproperFraction_info" {
     GHC.Real.$fEnumRatio_$s$cproperFraction_info:
         const GHC.Real.$fEnumRatio_$s$cproperFraction_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S1sVz_srt+840;
 },
 _c1vbz() //  [R1]
         { []
         }
     {offset
       c1vbz: // global
           _s1sxk::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1vbF_info;
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = _s1sxk::P64;
           Sp = Sp + 8;
           call GHC.Real.$w$s$cproperFraction_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vbz_info" {
     block_c1vbz_info:
         const _c1vbz;
         const 1;
         const 4294967326;
         const S1sVz_srt+840;
 },
 _c1vbF() //  [R1, R2]
         { []
         }
     {offset
       c1vbF: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1vbN; else goto c1vbM;
       c1vbN: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c1vbM: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vbF_info" {
     block_c1vbF_info:
         const _c1vbF;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.903757455 UTC

[section ""data" . GHC.Real.$w$cproperFraction_closure" {
     GHC.Real.$w$cproperFraction_closure:
         const GHC.Real.$w$cproperFraction_info;
 },
 ds_s1sxw_entry() //  [R1]
         { []
         }
     {offset
       c1vcd: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1vce; else goto c1vcf;
       c1vce: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1vcf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call GHC.Real.quotRem_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds_s1sxw_info" {
     ds_s1sxw_info:
         const ds_s1sxw_entry;
         const 3;
         const 15;
 },
 sat_s1sxJ_entry() //  [R1]
         { []
         }
     {offset
       c1vcn: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1vct; else goto c1vcu;
       c1vct: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1vcu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c1vck_info;
           _s1sxv::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _s1sxv::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u1vcz; else goto c1vcl;
       u1vcz: // global
           call _c1vck(R1) args: 0, res: 0, upd: 0;
       c1vcl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sxJ_info" {
     sat_s1sxJ_info:
         const sat_s1sxJ_entry;
         const 2;
         const 18;
 },
 _c1vck() //  [R1]
         { []
         }
     {offset
       c1vck: // global
           I64[Sp] = block_c1vcq_info;
           R1 = P64[R1 + 15];
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c1vck_info" {
     block_c1vck_info:
         const _c1vck;
         const 1;
         const 30;
 },
 _c1vcq() //  [R1]
         { []
         }
     {offset
       c1vcq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1vcy; else goto c1vcx;
       c1vcy: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c1vcx: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1vcq_info" {
     block_c1vcq_info:
         const _c1vcq;
         const 1;
         const 30;
 },
 sat_s1sxD_entry() //  [R1]
         { []
         }
     {offset
       c1vcJ: // global
           _s1sxD::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c1vcK; else goto c1vcL;
       c1vcL: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1vcN; else goto c1vcM;
       c1vcN: // global
           HpAlloc = 24;
           goto c1vcK;
       c1vcK: // global
           R1 = _s1sxD::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1vcM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1sxD::P64;
           _s1sxs::P64 = P64[_s1sxD::P64 + 16];
           _s1sxw::P64 = P64[_s1sxD::P64 + 24];
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _s1sxw::P64;
           R2 = _s1sxs::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 32;
           call GHC.Real.toInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sxD_info" {
     sat_s1sxD_info:
         const sat_s1sxD_entry;
         const 2;
         const 18;
 },
 sat_s1sxE_entry() //  [R1]
         { []
         }
     {offset
       c1vcQ: // global
           _s1sxE::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c1vcU; else goto c1vcV;
       c1vcV: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1vcX; else goto c1vcW;
       c1vcX: // global
           HpAlloc = 32;
           goto c1vcU;
       c1vcU: // global
           R1 = _s1sxE::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1vcW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1sxE::P64;
           _s1sxs::P64 = P64[_s1sxE::P64 + 16];
           _s1sxt::P64 = P64[_s1sxE::P64 + 24];
           _s1sxw::P64 = P64[_s1sxE::P64 + 32];
           I64[Hp - 24] = sat_s1sxD_info;
           P64[Hp - 8] = _s1sxs::P64;
           P64[Hp] = _s1sxw::P64;
           I64[Sp - 32] = block_c1vcO_info;
           R2 = _s1sxt::P64;
           P64[Sp - 24] = Hp - 24;
           Sp = Sp - 32;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sxE_info" {
     sat_s1sxE_info:
         const sat_s1sxE_entry;
         const 3;
         const 15;
 },
 _c1vcO() //  [R1]
         { []
         }
     {offset
       c1vcO: // global
           I64[Sp] = block_c1vcT_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c1vcO_info" {
     block_c1vcO_info:
         const _c1vcO;
         const 1;
         const 30;
 },
 _c1vcT() //  [R1]
         { []
         }
     {offset
       c1vcT: // global
           R2 = R1;
           I64[Sp] = stg_ap_p_info;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1vcT_info" {
     block_c1vcT_info:
         const _c1vcT;
         const 1;
         const 30;
 },
 GHC.Real.$w$cproperFraction_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c1vd3: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto c1vd7; else goto c1vd6;
       c1vd7: // global
           HpAlloc = 112;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$w$cproperFraction_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1vd6: // global
           I64[Hp - 104] = ds_s1sxw_info;
           P64[Hp - 88] = R2;
           P64[Hp - 80] = R4;
           P64[Hp - 72] = R5;
           I64[Hp - 64] = sat_s1sxJ_info;
           P64[Hp - 48] = R5;
           _c1vc9::P64 = Hp - 104;
           P64[Hp - 40] = _c1vc9::P64;
           I64[Hp - 32] = sat_s1sxE_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = _c1vc9::P64;
           R2 = Hp - 64;
           R1 = Hp - 32;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$w$cproperFraction_info" {
     GHC.Real.$w$cproperFraction_info:
         const GHC.Real.$w$cproperFraction_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.923225608 UTC

[section ""data" . GHC.Real.$fEnumRatio_$cproperFraction_closure" {
     GHC.Real.$fEnumRatio_$cproperFraction_closure:
         const GHC.Real.$fEnumRatio_$cproperFraction_info;
 },
 GHC.Real.$fEnumRatio_$cproperFraction_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1vea: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1veg; else goto c1veh;
       c1veg: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fEnumRatio_$cproperFraction_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1veh: // global
           I64[Sp - 24] = block_c1ve7_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u1vem; else goto c1ve8;
       u1vem: // global
           call _c1ve7(R1) args: 0, res: 0, upd: 0;
       c1ve8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fEnumRatio_$cproperFraction_info" {
     GHC.Real.$fEnumRatio_$cproperFraction_info:
         const GHC.Real.$fEnumRatio_$cproperFraction_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c1ve7() //  [R1]
         { []
         }
     {offset
       c1ve7: // global
           _s1sxL::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c1ved_info;
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = _s1sxL::P64;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Real.$w$cproperFraction_entry(R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1ve7_info" {
     block_c1ve7_info:
         const _c1ve7;
         const 2;
         const 30;
 },
 _c1ved() //  [R1, R2]
         { []
         }
     {offset
       c1ved: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1vel; else goto c1vek;
       c1vel: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c1vek: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1ved_info" {
     block_c1ved_info:
         const _c1ved;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.933707233 UTC

[section ""data" . GHC.Real.$wreduce_closure" {
     GHC.Real.$wreduce_closure:
         const GHC.Real.$wreduce_info;
         const 0;
 },
 sat_s1sy0_entry() //  [R1]
         { []
         }
     {offset
       c1veR: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1veS; else goto c1veT;
       c1veS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1veT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c1veP_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sy0_info" {
     sat_s1sy0_info:
         const sat_s1sy0_entry;
         const 1;
         const 4294967312;
         const S1sVz_srt+680;
 },
 _c1veP() //  [R1]
         { []
         }
     {offset
       c1veP: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = GHC.Real.even1_closure;
           Sp = Sp - 8;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1veP_info" {
     block_c1veP_info:
         const _c1veP;
         const 0;
         const 4294967326;
         const S1sVz_srt+680;
 },
 d_s1sy2_entry() //  [R1]
         { []
         }
     {offset
       c1vfd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1vfe; else goto c1vff;
       c1vfe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1vff: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.gcd_entry(R4, R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . d_s1sy2_info" {
     d_s1sy2_info:
         const d_s1sy2_entry;
         const 3;
         const 4294967311;
         const S1sVz_srt+856;
 },
 section ""relreadonly" . u1vfE_srtd" {
     u1vfE_srtd:
         const S1sVz_srt+296;
         const 72;
         const 281474976710657;
         const 192;
 },
 GHC.Real.$wreduce_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1vfg: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c1vfh; else goto c1vfi;
       c1vfh: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$wreduce_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1vfi: // global
           I64[Sp - 32] = block_c1veH_info;
           _s1sxT::P64 = R2;
           R2 = R2;
           P64[Sp - 24] = _s1sxT::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$wreduce_info" {
     GHC.Real.$wreduce_info:
         const GHC.Real.$wreduce_entry;
         const 0;
         const 18446744069414584334;
         const 12884901911;
         const u1vfE_srtd;
 },
 section ""relreadonly" . u1vfF_srtd" {
     u1vfF_srtd:
         const S1sVz_srt+296;
         const 71;
         const 281474976710657;
         const 64;
 },
 _c1veH() //  [R1]
         { []
         }
     {offset
       c1veH: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1vfl; else goto c1vfk;
       c1vfl: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1vfk: // global
           I64[Hp - 16] = sat_s1sy0_info;
           P64[Hp] = R1;
           I64[Sp - 8] = block_c1veX_info;
           R2 = R1;
           P64[Sp] = Hp - 16;
           Sp = Sp - 8;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1veH_info" {
     block_c1veH_info:
         const _c1veH;
         const 3;
         const 18446744069414584350;
         const u1vfF_srtd;
 },
 section ""relreadonly" . u1vfG_srtd" {
     u1vfG_srtd:
         const S1sVz_srt+296;
         const 71;
         const 1;
         const 64;
 },
 _c1veX() //  [R1]
         { []
         }
     {offset
       c1veX: // global
           I64[Sp] = block_c1vf1_info;
           R2 = R1;
           call GHC.Classes.$p1Ord_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1veX_info" {
     block_c1veX_info:
         const _c1veX;
         const 4;
         const 18446744069414584350;
         const u1vfG_srtd;
 },
 section ""relreadonly" . u1vfH_srtd" {
     u1vfH_srtd:
         const S1sVz_srt+296;
         const 71;
         const 1;
         const 64;
 },
 _c1vf1() //  [R1]
         { []
         }
     {offset
       c1vf1: // global
           _c1veL::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1vf5_info;
           R2 = R1;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = P64[Sp + 32];
           P64[Sp] = _c1veL::P64;
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vf1_info" {
     block_c1vf1_info:
         const _c1vf1;
         const 4;
         const 18446744069414584350;
         const u1vfH_srtd;
 },
 section ""relreadonly" . u1vfI_srtd" {
     u1vfI_srtd:
         const S1sVz_srt+296;
         const 71;
         const 1;
         const 64;
 },
 _c1vf5() //  [R1]
         { []
         }
     {offset
       c1vf5: // global
           if (R1 & 7 == 1) goto c1vfs; else goto c1vfC;
       c1vfs: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c1vfv; else goto c1vfu;
       c1vfv: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1vfu: // global
           I64[Hp - 32] = d_s1sy2_info;
           _s1sxT::P64 = P64[Sp + 8];
           P64[Hp - 16] = _s1sxT::P64;
           _s1sxU::P64 = P64[Sp + 16];
           P64[Hp - 8] = _s1sxU::P64;
           P64[Hp] = P64[Sp + 24];
           I64[Sp] = block_c1vfo_info;
           R2 = _s1sxT::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _s1sxU::P64;
           _c1vf9::P64 = Hp - 32;
           P64[Sp - 8] = _c1vf9::P64;
           P64[Sp + 16] = _c1vf9::P64;
           Sp = Sp - 24;
           call GHC.Real.quot_entry(R2) args: 32, res: 8, upd: 8;
       c1vfC: // global
           R1 = GHC.Real.ratioZeroDenominatorError_closure;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vf5_info" {
     block_c1vf5_info:
         const _c1vf5;
         const 3;
         const 18446744069414584350;
         const u1vfI_srtd;
 },
 _c1vfo() //  [R1]
         { []
         }
     {offset
       c1vfo: // global
           _c1vf9::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c1vfq_info;
           R2 = P64[Sp + 8];
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = P64[Sp + 24];
           P64[Sp + 8] = _c1vf9::P64;
           P64[Sp + 24] = R1;
           Sp = Sp - 8;
           call GHC.Real.quot_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vfo_info" {
     block_c1vfo_info:
         const _c1vfo;
         const 3;
         const 30;
 },
 _c1vfq() //  [R1]
         { []
         }
     {offset
       c1vfq: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vfq_info" {
     block_c1vfq_info:
         const _c1vfq;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.956237104 UTC

[section ""data" . GHC.Real.reduce_closure" {
     GHC.Real.reduce_closure:
         const GHC.Real.reduce_info;
         const 0;
 },
 GHC.Real.reduce_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1vgQ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1vgR; else goto c1vgS;
       c1vgR: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.reduce_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1vgS: // global
           I64[Sp - 8] = block_c1vgN_info;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Real.$wreduce_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.reduce_info" {
     GHC.Real.reduce_info:
         const GHC.Real.reduce_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S1sVz_srt+864;
 },
 _c1vgN() //  [R1, R2]
         { []
         }
     {offset
       c1vgN: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1vgV; else goto c1vgU;
       c1vgV: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c1vgU: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vgN_info" {
     block_c1vgN_info:
         const _c1vgN;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.962558328 UTC

[section ""data" . GHC.Real.%_$s%_closure" {
     GHC.Real.%_$s%_closure:
         const GHC.Real.%_$s%_info;
         const 0;
 },
 GHC.Real.%_$s%_entry() //  [R2, R3]
         { []
         }
     {offset
       c1vhe: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1vhf; else goto c1vhg;
       c1vhf: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.%_$s%_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1vhg: // global
           I64[Sp - 8] = block_c1vhb_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Real.$w$s$cfromRational_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.%_$s%_info" {
     GHC.Real.%_$s%_info:
         const GHC.Real.%_$s%_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S1sVz_srt+880;
 },
 _c1vhb() //  [R1, R2]
         { []
         }
     {offset
       c1vhb: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1vhj; else goto c1vhi;
       c1vhj: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c1vhi: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vhb_info" {
     block_c1vhb_info:
         const _c1vhb;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.970443878 UTC

[section ""data" . GHC.Real.$w%_closure" {
     GHC.Real.$w%_closure:
         const GHC.Real.$w%_info;
         const 0;
 },
 $dReal_s1syk_entry() //  [R1]
         { []
         }
     {offset
       c1vhD: // global
           R2 = P64[R1 + 16];
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $dReal_s1syk_info" {
     $dReal_s1syk_info:
         const $dReal_s1syk_entry;
         const 1;
         const 16;
 },
 $dNum_s1syl_entry() //  [R1]
         { []
         }
     {offset
       c1vhK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1vhL; else goto c1vhM;
       c1vhL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1vhM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dNum_s1syl_info" {
     $dNum_s1syl_info:
         const $dNum_s1syl_entry;
         const 1;
         const 16;
 },
 sat_s1syo_entry() //  [R1]
         { []
         }
     {offset
       c1vhR: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1vhS; else goto c1vhT;
       c1vhS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1vhT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Num.abs_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1syo_info" {
     sat_s1syo_info:
         const sat_s1syo_entry;
         const 2;
         const 18;
 },
 sat_s1sym_entry() //  [R1]
         { []
         }
     {offset
       c1vi2: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1vi3; else goto c1vi4;
       c1vi3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1vi4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Num.signum_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sym_info" {
     sat_s1sym_info:
         const sat_s1sym_entry;
         const 2;
         const 18;
 },
 sat_s1syn_entry() //  [R1]
         { []
         }
     {offset
       c1vi5: // global
           _s1syn::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c1vi6; else goto c1vi7;
       c1vi7: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1vi9; else goto c1vi8;
       c1vi9: // global
           HpAlloc = 32;
           goto c1vi6;
       c1vi6: // global
           R1 = _s1syn::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1vi8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1syn::P64;
           _s1syi::P64 = P64[_s1syn::P64 + 16];
           _s1syj::P64 = P64[_s1syn::P64 + 24];
           _s1syl::P64 = P64[_s1syn::P64 + 32];
           I64[Hp - 24] = sat_s1sym_info;
           P64[Hp - 8] = _s1syj::P64;
           P64[Hp] = _s1syl::P64;
           R2 = _s1syl::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _s1syi::P64;
           P64[Sp - 24] = Hp - 24;
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1syn_info" {
     sat_s1syn_info:
         const sat_s1syn_entry;
         const 3;
         const 15;
 },
 GHC.Real.$w%_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1via: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto c1vie; else goto c1vid;
       c1vie: // global
           HpAlloc = 120;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$w%_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1vid: // global
           I64[Hp - 112] = $dReal_s1syk_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = $dNum_s1syl_info;
           P64[Hp - 72] = Hp - 112;
           I64[Hp - 64] = sat_s1syo_info;
           P64[Hp - 48] = R4;
           _c1vhG::P64 = Hp - 88;
           P64[Hp - 40] = _c1vhG::P64;
           I64[Hp - 32] = sat_s1syn_info;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = _c1vhG::P64;
           R4 = Hp - 64;
           R3 = Hp - 32;
           R2 = R2;
           call GHC.Real.$wreduce_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$w%_info" {
     GHC.Real.$w%_info:
         const GHC.Real.$w%_entry;
         const 0;
         const 73014444046;
         const 12884901911;
         const S1sVz_srt+864;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.983483265 UTC

[section ""data" . GHC.Real.%_closure" {
     GHC.Real.%_closure:
         const GHC.Real.%_info;
         const 0;
 },
 GHC.Real.%_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1viZ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1vj0; else goto c1vj1;
       c1vj0: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.%_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1vj1: // global
           I64[Sp - 8] = block_c1viW_info;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Real.$w%_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.%_info" {
     GHC.Real.%_info:
         const GHC.Real.%_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S1sVz_srt+896;
 },
 _c1viW() //  [R1, R2]
         { []
         }
     {offset
       c1viW: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1vj4; else goto c1vj3;
       c1vj4: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c1vj3: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1viW_info" {
     block_c1viW_info:
         const _c1viW;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:17.991185782 UTC

[section ""data" . GHC.Real.$w$c/_closure" {
     GHC.Real.$w$c/_closure:
         const GHC.Real.$w$c/_info;
         const 0;
 },
 $dReal_s1syA_entry() //  [R1]
         { []
         }
     {offset
       c1vjo: // global
           R2 = P64[R1 + 16];
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $dReal_s1syA_info" {
     $dReal_s1syA_info:
         const $dReal_s1syA_entry;
         const 1;
         const 16;
 },
 $dNum_s1syB_entry() //  [R1]
         { []
         }
     {offset
       c1vjv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1vjw; else goto c1vjx;
       c1vjw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1vjx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dNum_s1syB_info" {
     $dNum_s1syB_info:
         const $dNum_s1syB_entry;
         const 1;
         const 16;
 },
 sat_s1syD_entry() //  [R1]
         { []
         }
     {offset
       c1vjC: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1vjD; else goto c1vjE;
       c1vjD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1vjE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 32];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1syD_info" {
     sat_s1syD_info:
         const sat_s1syD_entry;
         const 3;
         const 15;
 },
 sat_s1syC_entry() //  [R1]
         { []
         }
     {offset
       c1vjJ: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1vjK; else goto c1vjL;
       c1vjK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1vjL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 32];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1syC_info" {
     sat_s1syC_info:
         const sat_s1syC_entry;
         const 3;
         const 15;
 },
 GHC.Real.$w$c/_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c1vjM: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto c1vjQ; else goto c1vjP;
       c1vjQ: // global
           HpAlloc = 128;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$w$c/_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1vjP: // global
           I64[Hp - 120] = $dReal_s1syA_info;
           P64[Hp - 104] = R2;
           I64[Hp - 96] = $dNum_s1syB_info;
           P64[Hp - 80] = Hp - 120;
           I64[Hp - 72] = sat_s1syD_info;
           P64[Hp - 56] = R4;
           P64[Hp - 48] = R5;
           _c1vjr::P64 = Hp - 96;
           P64[Hp - 40] = _c1vjr::P64;
           I64[Hp - 32] = sat_s1syC_info;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R6;
           P64[Hp] = _c1vjr::P64;
           R4 = Hp - 72;
           R3 = Hp - 32;
           R2 = R2;
           call GHC.Real.$w%_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$w$c/_info" {
     GHC.Real.$w$c/_info:
         const GHC.Real.$w$c/_entry;
         const 0;
         const 21474836494;
         const 21474836505;
         const S1sVz_srt+896;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:18.00289358 UTC

[section ""data" . GHC.Real.$fFractionalRatio_$c/_closure" {
     GHC.Real.$fFractionalRatio_$c/_closure:
         const GHC.Real.$fFractionalRatio_$c/_info;
         const 0;
 },
 GHC.Real.$fFractionalRatio_$c/_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1vkv: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1vkG; else goto c1vkH;
       c1vkG: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fFractionalRatio_$c/_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1vkH: // global
           I64[Sp - 24] = block_c1vks_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u1vkO; else goto c1vkt;
       u1vkO: // global
           call _c1vks(R1) args: 0, res: 0, upd: 0;
       c1vkt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fFractionalRatio_$c/_info" {
     GHC.Real.$fFractionalRatio_$c/_info:
         const GHC.Real.$fFractionalRatio_$c/_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S1sVz_srt+912;
 },
 _c1vks() //  [R1]
         { []
         }
     {offset
       c1vks: // global
           I64[Sp - 8] = block_c1vky_info;
           _s1syI::P64 = P64[R1 + 7];
           _s1syJ::P64 = P64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp] = _s1syJ::P64;
           P64[Sp + 16] = _s1syI::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1vkN; else goto c1vkz;
       u1vkN: // global
           call _c1vky(R1) args: 0, res: 0, upd: 0;
       c1vkz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vks_info" {
     block_c1vks_info:
         const _c1vks;
         const 2;
         const 4294967326;
         const S1sVz_srt+912;
 },
 _c1vky() //  [R1]
         { []
         }
     {offset
       c1vky: // global
           _s1syI::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_c1vkD_info;
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = P64[Sp + 8];
           R3 = _s1syI::P64;
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call GHC.Real.$w$c/_entry(R6,
                                     R5,
                                     R4,
                                     R3,
                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vky_info" {
     block_c1vky_info:
         const _c1vky;
         const 3;
         const 4294967326;
         const S1sVz_srt+912;
 },
 _c1vkD() //  [R1, R2]
         { []
         }
     {offset
       c1vkD: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1vkM; else goto c1vkL;
       c1vkM: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c1vkL: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vkD_info" {
     block_c1vkD_info:
         const _c1vkD;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:18.013182413 UTC

[section ""data" . GHC.Real.$w$cfromRational_closure" {
     GHC.Real.$w$cfromRational_closure:
         const GHC.Real.$w$cfromRational_info;
         const 0;
 },
 $dReal_s1syT_entry() //  [R1]
         { []
         }
     {offset
       c1vli: // global
           R2 = P64[R1 + 16];
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $dReal_s1syT_info" {
     $dReal_s1syT_info:
         const $dReal_s1syT_entry;
         const 1;
         const 16;
 },
 $dNum_s1syU_entry() //  [R1]
         { []
         }
     {offset
       c1vlp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1vlq; else goto c1vlr;
       c1vlq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1vlr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dNum_s1syU_info" {
     $dNum_s1syU_info:
         const $dNum_s1syU_entry;
         const 1;
         const 16;
 },
 sat_s1syW_entry() //  [R1]
         { []
         }
     {offset
       c1vlw: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1vlx; else goto c1vly;
       c1vlx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1vly: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1syW_info" {
     sat_s1syW_info:
         const sat_s1syW_entry;
         const 2;
         const 18;
 },
 sat_s1syV_entry() //  [R1]
         { []
         }
     {offset
       c1vlD: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1vlE; else goto c1vlF;
       c1vlE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1vlF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1syV_info" {
     sat_s1syV_info:
         const sat_s1syV_entry;
         const 2;
         const 18;
 },
 GHC.Real.$w$cfromRational_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1vlG: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto c1vlK; else goto c1vlJ;
       c1vlK: // global
           HpAlloc = 112;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$w$cfromRational_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1vlJ: // global
           I64[Hp - 104] = $dReal_s1syT_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = $dNum_s1syU_info;
           P64[Hp - 64] = Hp - 104;
           I64[Hp - 56] = sat_s1syW_info;
           P64[Hp - 40] = R4;
           _c1vll::P64 = Hp - 80;
           P64[Hp - 32] = _c1vll::P64;
           I64[Hp - 24] = sat_s1syV_info;
           P64[Hp - 8] = R3;
           P64[Hp] = _c1vll::P64;
           R4 = Hp - 56;
           R3 = Hp - 24;
           R2 = R2;
           call GHC.Real.$w%_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$w$cfromRational_info" {
     GHC.Real.$w$cfromRational_info:
         const GHC.Real.$w$cfromRational_entry;
         const 0;
         const 73014444046;
         const 12884901911;
         const S1sVz_srt+896;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:18.024848804 UTC

[section ""data" . GHC.Real.$fFractionalRatio_$cfromRational_closure" {
     GHC.Real.$fFractionalRatio_$cfromRational_closure:
         const GHC.Real.$fFractionalRatio_$cfromRational_info;
         const 0;
 },
 GHC.Real.$fFractionalRatio_$cfromRational_entry() //  [R2, R3]
         { []
         }
     {offset
       c1vmn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1vmt; else goto c1vmu;
       c1vmt: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fFractionalRatio_$cfromRational_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1vmu: // global
           I64[Sp - 16] = block_c1vmk_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1vmz; else goto c1vml;
       u1vmz: // global
           call _c1vmk(R1) args: 0, res: 0, upd: 0;
       c1vml: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fFractionalRatio_$cfromRational_info" {
     GHC.Real.$fFractionalRatio_$cfromRational_info:
         const GHC.Real.$fFractionalRatio_$cfromRational_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S1sVz_srt+928;
 },
 _c1vmk() //  [R1]
         { []
         }
     {offset
       c1vmk: // global
           _s1syX::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1vmq_info;
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = _s1syX::P64;
           Sp = Sp + 8;
           call GHC.Real.$w$cfromRational_entry(R4,
                                                R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vmk_info" {
     block_c1vmk_info:
         const _c1vmk;
         const 1;
         const 4294967326;
         const S1sVz_srt+928;
 },
 _c1vmq() //  [R1, R2]
         { []
         }
     {offset
       c1vmq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1vmy; else goto c1vmx;
       c1vmy: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c1vmx: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vmq_info" {
     block_c1vmq_info:
         const _c1vmq;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:18.03941869 UTC

[section ""data" . GHC.Real.$w$c+_closure" {
     GHC.Real.$w$c+_closure:
         const GHC.Real.$w$c+_info;
         const 0;
 },
 $dReal_s1sza_entry() //  [R1]
         { []
         }
     {offset
       c1vmY: // global
           R2 = P64[R1 + 16];
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $dReal_s1sza_info" {
     $dReal_s1sza_info:
         const $dReal_s1sza_entry;
         const 1;
         const 16;
 },
 $dNum_s1szb_entry() //  [R1]
         { []
         }
     {offset
       c1vn5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1vn6; else goto c1vn7;
       c1vn6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1vn7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dNum_s1szb_info" {
     $dNum_s1szb_info:
         const $dNum_s1szb_entry;
         const 1;
         const 16;
 },
 sat_s1szf_entry() //  [R1]
         { []
         }
     {offset
       c1vnc: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1vnd; else goto c1vne;
       c1vnd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1vne: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 32];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1szf_info" {
     sat_s1szf_info:
         const sat_s1szf_entry;
         const 3;
         const 15;
 },
 sat_s1szd_entry() //  [R1]
         { []
         }
     {offset
       c1vnn: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1vno; else goto c1vnp;
       c1vno: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1vnp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 32];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1szd_info" {
     sat_s1szd_info:
         const sat_s1szd_entry;
         const 3;
         const 15;
 },
 sat_s1szc_entry() //  [R1]
         { []
         }
     {offset
       c1vnu: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1vnv; else goto c1vnw;
       c1vnv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1vnw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 32];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1szc_info" {
     sat_s1szc_info:
         const sat_s1szc_entry;
         const 3;
         const 15;
 },
 sat_s1sze_entry() //  [R1]
         { []
         }
     {offset
       c1vnx: // global
           _s1sze::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c1vny; else goto c1vnz;
       c1vnz: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c1vnB; else goto c1vnA;
       c1vnB: // global
           HpAlloc = 80;
           goto c1vny;
       c1vny: // global
           R1 = _s1sze::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1vnA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1sze::P64;
           _s1sz6::P64 = P64[_s1sze::P64 + 16];
           _s1sz7::P64 = P64[_s1sze::P64 + 24];
           _s1sz8::P64 = P64[_s1sze::P64 + 32];
           _s1sz9::P64 = P64[_s1sze::P64 + 40];
           _s1szb::P64 = P64[_s1sze::P64 + 48];
           I64[Hp - 72] = sat_s1szd_info;
           P64[Hp - 56] = _s1sz7::P64;
           P64[Hp - 48] = _s1sz8::P64;
           P64[Hp - 40] = _s1szb::P64;
           I64[Hp - 32] = sat_s1szc_info;
           P64[Hp - 16] = _s1sz6::P64;
           P64[Hp - 8] = _s1sz9::P64;
           P64[Hp] = _s1szb::P64;
           R2 = _s1szb::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 32;
           P64[Sp - 24] = Hp - 72;
           Sp = Sp - 40;
           call GHC.Num.+_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sze_info" {
     sat_s1sze_info:
         const sat_s1sze_entry;
         const 5;
         const 15;
 },
 GHC.Real.$w$c+_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c1vnC: // global
           Hp = Hp + 144;
           if (Hp > HpLim) (likely: False) goto c1vnG; else goto c1vnF;
       c1vnG: // global
           HpAlloc = 144;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$w$c+_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1vnF: // global
           I64[Hp - 136] = $dReal_s1sza_info;
           P64[Hp - 120] = R2;
           I64[Hp - 112] = $dNum_s1szb_info;
           P64[Hp - 96] = Hp - 136;
           I64[Hp - 88] = sat_s1szf_info;
           P64[Hp - 72] = R4;
           P64[Hp - 64] = R6;
           _c1vn1::P64 = Hp - 112;
           P64[Hp - 56] = _c1vn1::P64;
           I64[Hp - 48] = sat_s1sze_info;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           P64[Hp - 16] = R5;
           P64[Hp - 8] = R6;
           P64[Hp] = _c1vn1::P64;
           R4 = Hp - 88;
           R3 = Hp - 48;
           R2 = R2;
           call GHC.Real.$wreduce_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$w$c+_info" {
     GHC.Real.$w$c+_info:
         const GHC.Real.$w$c+_entry;
         const 0;
         const 4402341478414;
         const 21474836505;
         const S1sVz_srt+864;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:18.058907875 UTC

[section ""data" . GHC.Real.$fNumRatio_$c+_closure" {
     GHC.Real.$fNumRatio_$c+_closure:
         const GHC.Real.$fNumRatio_$c+_info;
         const 0;
 },
 GHC.Real.$fNumRatio_$c+_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1voD: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1voO; else goto c1voP;
       c1voO: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fNumRatio_$c+_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1voP: // global
           I64[Sp - 24] = block_c1voA_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u1voW; else goto c1voB;
       u1voW: // global
           call _c1voA(R1) args: 0, res: 0, upd: 0;
       c1voB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fNumRatio_$c+_info" {
     GHC.Real.$fNumRatio_$c+_info:
         const GHC.Real.$fNumRatio_$c+_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S1sVz_srt+944;
 },
 _c1voA() //  [R1]
         { []
         }
     {offset
       c1voA: // global
           I64[Sp - 8] = block_c1voG_info;
           _s1szk::P64 = P64[R1 + 7];
           _s1szl::P64 = P64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp] = _s1szl::P64;
           P64[Sp + 16] = _s1szk::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1voV; else goto c1voH;
       u1voV: // global
           call _c1voG(R1) args: 0, res: 0, upd: 0;
       c1voH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1voA_info" {
     block_c1voA_info:
         const _c1voA;
         const 2;
         const 4294967326;
         const S1sVz_srt+944;
 },
 _c1voG() //  [R1]
         { []
         }
     {offset
       c1voG: // global
           _s1szk::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_c1voL_info;
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = P64[Sp + 8];
           R3 = _s1szk::P64;
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call GHC.Real.$w$c+_entry(R6,
                                     R5,
                                     R4,
                                     R3,
                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1voG_info" {
     block_c1voG_info:
         const _c1voG;
         const 3;
         const 4294967326;
         const S1sVz_srt+944;
 },
 _c1voL() //  [R1, R2]
         { []
         }
     {offset
       c1voL: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1voU; else goto c1voT;
       c1voU: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c1voT: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1voL_info" {
     block_c1voL_info:
         const _c1voL;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:18.07114683 UTC

[section ""data" . GHC.Real.$w$c-_closure" {
     GHC.Real.$w$c-_closure:
         const GHC.Real.$w$c-_info;
         const 0;
 },
 $dReal_s1szx_entry() //  [R1]
         { []
         }
     {offset
       c1vpq: // global
           R2 = P64[R1 + 16];
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $dReal_s1szx_info" {
     $dReal_s1szx_info:
         const $dReal_s1szx_entry;
         const 1;
         const 16;
 },
 $dNum_s1szy_entry() //  [R1]
         { []
         }
     {offset
       c1vpx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1vpy; else goto c1vpz;
       c1vpy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1vpz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dNum_s1szy_info" {
     $dNum_s1szy_info:
         const $dNum_s1szy_entry;
         const 1;
         const 16;
 },
 sat_s1szC_entry() //  [R1]
         { []
         }
     {offset
       c1vpE: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1vpF; else goto c1vpG;
       c1vpF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1vpG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 32];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1szC_info" {
     sat_s1szC_info:
         const sat_s1szC_entry;
         const 3;
         const 15;
 },
 sat_s1szA_entry() //  [R1]
         { []
         }
     {offset
       c1vpP: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1vpQ; else goto c1vpR;
       c1vpQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1vpR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 32];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1szA_info" {
     sat_s1szA_info:
         const sat_s1szA_entry;
         const 3;
         const 15;
 },
 sat_s1szz_entry() //  [R1]
         { []
         }
     {offset
       c1vpW: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1vpX; else goto c1vpY;
       c1vpX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1vpY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 32];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1szz_info" {
     sat_s1szz_info:
         const sat_s1szz_entry;
         const 3;
         const 15;
 },
 sat_s1szB_entry() //  [R1]
         { []
         }
     {offset
       c1vpZ: // global
           _s1szB::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c1vq0; else goto c1vq1;
       c1vq1: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c1vq3; else goto c1vq2;
       c1vq3: // global
           HpAlloc = 80;
           goto c1vq0;
       c1vq0: // global
           R1 = _s1szB::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1vq2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1szB::P64;
           _s1szt::P64 = P64[_s1szB::P64 + 16];
           _s1szu::P64 = P64[_s1szB::P64 + 24];
           _s1szv::P64 = P64[_s1szB::P64 + 32];
           _s1szw::P64 = P64[_s1szB::P64 + 40];
           _s1szy::P64 = P64[_s1szB::P64 + 48];
           I64[Hp - 72] = sat_s1szA_info;
           P64[Hp - 56] = _s1szu::P64;
           P64[Hp - 48] = _s1szv::P64;
           P64[Hp - 40] = _s1szy::P64;
           I64[Hp - 32] = sat_s1szz_info;
           P64[Hp - 16] = _s1szt::P64;
           P64[Hp - 8] = _s1szw::P64;
           P64[Hp] = _s1szy::P64;
           R2 = _s1szy::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 32;
           P64[Sp - 24] = Hp - 72;
           Sp = Sp - 40;
           call GHC.Num.-_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1szB_info" {
     sat_s1szB_info:
         const sat_s1szB_entry;
         const 5;
         const 15;
 },
 GHC.Real.$w$c-_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c1vq4: // global
           Hp = Hp + 144;
           if (Hp > HpLim) (likely: False) goto c1vq8; else goto c1vq7;
       c1vq8: // global
           HpAlloc = 144;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$w$c-_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1vq7: // global
           I64[Hp - 136] = $dReal_s1szx_info;
           P64[Hp - 120] = R2;
           I64[Hp - 112] = $dNum_s1szy_info;
           P64[Hp - 96] = Hp - 136;
           I64[Hp - 88] = sat_s1szC_info;
           P64[Hp - 72] = R4;
           P64[Hp - 64] = R6;
           _c1vpt::P64 = Hp - 112;
           P64[Hp - 56] = _c1vpt::P64;
           I64[Hp - 48] = sat_s1szB_info;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           P64[Hp - 16] = R5;
           P64[Hp - 8] = R6;
           P64[Hp] = _c1vpt::P64;
           R4 = Hp - 88;
           R3 = Hp - 48;
           R2 = R2;
           call GHC.Real.$wreduce_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$w$c-_info" {
     GHC.Real.$w$c-_info:
         const GHC.Real.$w$c-_entry;
         const 0;
         const 17596481011726;
         const 21474836505;
         const S1sVz_srt+864;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:18.086900623 UTC

[section ""data" . GHC.Real.$fNumRatio_$c-_closure" {
     GHC.Real.$fNumRatio_$c-_closure:
         const GHC.Real.$fNumRatio_$c-_info;
         const 0;
 },
 GHC.Real.$fNumRatio_$c-_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1vr5: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1vrg; else goto c1vrh;
       c1vrg: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fNumRatio_$c-_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1vrh: // global
           I64[Sp - 24] = block_c1vr2_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u1vro; else goto c1vr3;
       u1vro: // global
           call _c1vr2(R1) args: 0, res: 0, upd: 0;
       c1vr3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fNumRatio_$c-_info" {
     GHC.Real.$fNumRatio_$c-_info:
         const GHC.Real.$fNumRatio_$c-_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S1sVz_srt+960;
 },
 _c1vr2() //  [R1]
         { []
         }
     {offset
       c1vr2: // global
           I64[Sp - 8] = block_c1vr8_info;
           _s1szH::P64 = P64[R1 + 7];
           _s1szI::P64 = P64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp] = _s1szI::P64;
           P64[Sp + 16] = _s1szH::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1vrn; else goto c1vr9;
       u1vrn: // global
           call _c1vr8(R1) args: 0, res: 0, upd: 0;
       c1vr9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vr2_info" {
     block_c1vr2_info:
         const _c1vr2;
         const 2;
         const 4294967326;
         const S1sVz_srt+960;
 },
 _c1vr8() //  [R1]
         { []
         }
     {offset
       c1vr8: // global
           _s1szH::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_c1vrd_info;
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = P64[Sp + 8];
           R3 = _s1szH::P64;
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call GHC.Real.$w$c-_entry(R6,
                                     R5,
                                     R4,
                                     R3,
                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vr8_info" {
     block_c1vr8_info:
         const _c1vr8;
         const 3;
         const 4294967326;
         const S1sVz_srt+960;
 },
 _c1vrd() //  [R1, R2]
         { []
         }
     {offset
       c1vrd: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1vrm; else goto c1vrl;
       c1vrm: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c1vrl: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vrd_info" {
     block_c1vrd_info:
         const _c1vrd;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:18.098549859 UTC

[section ""data" . GHC.Real.$w$c*_closure" {
     GHC.Real.$w$c*_closure:
         const GHC.Real.$w$c*_info;
         const 0;
 },
 $dReal_s1szU_entry() //  [R1]
         { []
         }
     {offset
       c1vrS: // global
           R2 = P64[R1 + 16];
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $dReal_s1szU_info" {
     $dReal_s1szU_info:
         const $dReal_s1szU_entry;
         const 1;
         const 16;
 },
 $dNum_s1szV_entry() //  [R1]
         { []
         }
     {offset
       c1vrZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1vs0; else goto c1vs1;
       c1vs0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1vs1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dNum_s1szV_info" {
     $dNum_s1szV_info:
         const $dNum_s1szV_entry;
         const 1;
         const 16;
 },
 sat_s1szX_entry() //  [R1]
         { []
         }
     {offset
       c1vs6: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1vs7; else goto c1vs8;
       c1vs7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1vs8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 32];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1szX_info" {
     sat_s1szX_info:
         const sat_s1szX_entry;
         const 3;
         const 15;
 },
 sat_s1szW_entry() //  [R1]
         { []
         }
     {offset
       c1vsd: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1vse; else goto c1vsf;
       c1vse: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1vsf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 32];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1szW_info" {
     sat_s1szW_info:
         const sat_s1szW_entry;
         const 3;
         const 15;
 },
 GHC.Real.$w$c*_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c1vsg: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto c1vsk; else goto c1vsj;
       c1vsk: // global
           HpAlloc = 128;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$w$c*_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1vsj: // global
           I64[Hp - 120] = $dReal_s1szU_info;
           P64[Hp - 104] = R2;
           I64[Hp - 96] = $dNum_s1szV_info;
           P64[Hp - 80] = Hp - 120;
           I64[Hp - 72] = sat_s1szX_info;
           P64[Hp - 56] = R4;
           P64[Hp - 48] = R6;
           _c1vrV::P64 = Hp - 96;
           P64[Hp - 40] = _c1vrV::P64;
           I64[Hp - 32] = sat_s1szW_info;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R5;
           P64[Hp] = _c1vrV::P64;
           R4 = Hp - 72;
           R3 = Hp - 32;
           R2 = R2;
           call GHC.Real.$wreduce_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$w$c*_info" {
     GHC.Real.$w$c*_info:
         const GHC.Real.$w$c*_entry;
         const 0;
         const 70373039144974;
         const 21474836505;
         const S1sVz_srt+864;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:18.110120728 UTC

[section ""data" . GHC.Real.$fNumRatio_$c*_closure" {
     GHC.Real.$fNumRatio_$c*_closure:
         const GHC.Real.$fNumRatio_$c*_info;
         const 0;
 },
 GHC.Real.$fNumRatio_$c*_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1vsZ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1vta; else goto c1vtb;
       c1vta: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fNumRatio_$c*_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1vtb: // global
           I64[Sp - 24] = block_c1vsW_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u1vti; else goto c1vsX;
       u1vti: // global
           call _c1vsW(R1) args: 0, res: 0, upd: 0;
       c1vsX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fNumRatio_$c*_info" {
     GHC.Real.$fNumRatio_$c*_info:
         const GHC.Real.$fNumRatio_$c*_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S1sVz_srt+976;
 },
 _c1vsW() //  [R1]
         { []
         }
     {offset
       c1vsW: // global
           I64[Sp - 8] = block_c1vt2_info;
           _s1sA2::P64 = P64[R1 + 7];
           _s1sA3::P64 = P64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp] = _s1sA3::P64;
           P64[Sp + 16] = _s1sA2::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1vth; else goto c1vt3;
       u1vth: // global
           call _c1vt2(R1) args: 0, res: 0, upd: 0;
       c1vt3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vsW_info" {
     block_c1vsW_info:
         const _c1vsW;
         const 2;
         const 4294967326;
         const S1sVz_srt+976;
 },
 _c1vt2() //  [R1]
         { []
         }
     {offset
       c1vt2: // global
           _s1sA2::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_c1vt7_info;
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = P64[Sp + 8];
           R3 = _s1sA2::P64;
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call GHC.Real.$w$c*_entry(R6,
                                     R5,
                                     R4,
                                     R3,
                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vt2_info" {
     block_c1vt2_info:
         const _c1vt2;
         const 3;
         const 4294967326;
         const S1sVz_srt+976;
 },
 _c1vt7() //  [R1, R2]
         { []
         }
     {offset
       c1vt7: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1vtg; else goto c1vtf;
       c1vtg: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c1vtf: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vt7_info" {
     block_c1vt7_info:
         const _c1vt7;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:18.120924194 UTC

[section ""data" . GHC.Real.$fNumRatio_closure" {
     GHC.Real.$fNumRatio_closure:
         const GHC.Real.$fNumRatio_info;
         const 0;
 },
 sat_s1sAh_entry() //  [R1, R2]
         { []
         }
     {offset
       c1vtN: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call GHC.Real.$fNumRatio_$cfromInteger_entry(R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1sAh_info" {
     sat_s1sAh_info:
         const sat_s1sAh_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S1sVz_srt+808;
 },
 sat_s1sAg_entry() //  [R1, R2]
         { []
         }
     {offset
       c1vtV: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call GHC.Real.$fNumRatio_$csignum_entry(R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1sAg_info" {
     sat_s1sAg_info:
         const sat_s1sAg_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S1sVz_srt+792;
 },
 sat_s1sAf_entry() //  [R1, R2]
         { []
         }
     {offset
       c1vu3: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call GHC.Real.$fNumRatio_$cabs_entry(R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1sAf_info" {
     sat_s1sAf_info:
         const sat_s1sAf_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s1sAe_entry() //  [R1, R2]
         { []
         }
     {offset
       c1vub: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call GHC.Real.$fNumRatio_$cnegate_entry(R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1sAe_info" {
     sat_s1sAe_info:
         const sat_s1sAe_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s1sAd_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c1vuj: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Real.$fNumRatio_$c*_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1sAd_info" {
     sat_s1sAd_info:
         const sat_s1sAd_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const S1sVz_srt+984;
 },
 sat_s1sAc_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c1vur: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Real.$fNumRatio_$c-_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1sAc_info" {
     sat_s1sAc_info:
         const sat_s1sAc_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const S1sVz_srt+968;
 },
 sat_s1sAb_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c1vuz: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Real.$fNumRatio_$c+_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1sAb_info" {
     sat_s1sAb_info:
         const sat_s1sAb_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const S1sVz_srt+952;
 },
 GHC.Real.$fNumRatio_entry() //  [R2]
         { []
         }
     {offset
       c1vuD: // global
           Hp = Hp + 176;
           if (Hp > HpLim) (likely: False) goto c1vuH; else goto c1vuG;
       c1vuH: // global
           HpAlloc = 176;
           R2 = R2;
           R1 = GHC.Real.$fNumRatio_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1vuG: // global
           I64[Hp - 168] = sat_s1sAh_info;
           P64[Hp - 160] = R2;
           I64[Hp - 152] = sat_s1sAg_info;
           P64[Hp - 144] = R2;
           I64[Hp - 136] = sat_s1sAf_info;
           P64[Hp - 128] = R2;
           I64[Hp - 120] = sat_s1sAe_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_s1sAd_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_s1sAc_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_s1sAb_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = GHC.Num.C:Num_con_info;
           P64[Hp - 48] = Hp - 70;
           P64[Hp - 40] = Hp - 86;
           P64[Hp - 32] = Hp - 102;
           P64[Hp - 24] = Hp - 119;
           P64[Hp - 16] = Hp - 135;
           P64[Hp - 8] = Hp - 151;
           P64[Hp] = Hp - 167;
           R1 = Hp - 55;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fNumRatio_info" {
     GHC.Real.$fNumRatio_info:
         const GHC.Real.$fNumRatio_entry;
         const 0;
         const 238690801725472782;
         const 4294967301;
         const S1sVz_srt+792;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:18.135476081 UTC

[section ""data" . GHC.Real.$fEnumRatio3_closure" {
     GHC.Real.$fEnumRatio3_closure:
         const GHC.Real.:%_con_info;
         const GHC.Real.$fEnumRatio1_closure;
         const GHC.Real.$fEnumRatio1_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:18.138413736 UTC

[section ""data" . GHC.Real.$fEnumRatio_$s$csucc_closure" {
     GHC.Real.$fEnumRatio_$s$csucc_closure:
         const GHC.Real.$fEnumRatio_$s$csucc_info;
         const 0;
 },
 GHC.Real.$fEnumRatio_$s$csucc_entry() //  [R2]
         { []
         }
     {offset
       c1vvv: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1vvB; else goto c1vvC;
       c1vvB: // global
           R2 = R2;
           R1 = GHC.Real.$fEnumRatio_$s$csucc_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1vvC: // global
           I64[Sp - 8] = block_c1vvs_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1vvH; else goto c1vvt;
       u1vvH: // global
           call _c1vvs(R1) args: 0, res: 0, upd: 0;
       c1vvt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fEnumRatio_$s$csucc_info" {
     GHC.Real.$fEnumRatio_$s$csucc_info:
         const GHC.Real.$fEnumRatio_$s$csucc_entry;
         const 0;
         const 30064771086;
         const 4294967301;
         const S1sVz_srt+1000;
 },
 _c1vvs() //  [R1]
         { []
         }
     {offset
       c1vvs: // global
           I64[Sp] = block_c1vvy_info;
           R5 = GHC.Real.$fEnumRatio1_closure;
           R4 = GHC.Real.$fEnumRatio1_closure;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Real.$w$s$c+_entry(R5,
                                       R4,
                                       R3,
                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vvs_info" {
     block_c1vvs_info:
         const _c1vvs;
         const 0;
         const 12884901918;
         const S1sVz_srt+1008;
 },
 _c1vvy() //  [R1, R2]
         { []
         }
     {offset
       c1vvy: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1vvG; else goto c1vvF;
       c1vvG: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c1vvF: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vvy_info" {
     block_c1vvy_info:
         const _c1vvy;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:18.146847363 UTC

[section ""data" . GHC.Real.$fEnumRatio_$csucc_closure" {
     GHC.Real.$fEnumRatio_$csucc_closure:
         const GHC.Real.$fEnumRatio_$csucc_info;
         const 0;
 },
 GHC.Real.$fEnumRatio_$csucc_entry() //  [R2, R3]
         { []
         }
     {offset
       c1vw5: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1vwd; else goto c1vwe;
       c1vwd: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fEnumRatio_$csucc_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1vwe: // global
           I64[Sp - 16] = block_c1vw2_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1vwk; else goto c1vw3;
       u1vwk: // global
           call _c1vw2(R1) args: 0, res: 0, upd: 0;
       c1vw3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fEnumRatio_$csucc_info" {
     GHC.Real.$fEnumRatio_$csucc_info:
         const GHC.Real.$fEnumRatio_$csucc_entry;
         const 0;
         const 1442277784960368654;
         const 8589934607;
         const S1sVz_srt+800;
 },
 _c1vw2() //  [R1]
         { []
         }
     {offset
       c1vw2: // global
           I64[Sp - 16] = block_c1vw8_info;
           R3 = GHC.Real.$fEnumRatio1_closure;
           R2 = P64[Sp + 8];
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp] = P64[R1 + 7];
           Sp = Sp - 16;
           call GHC.Real.$w$cfromInteger_entry(R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vw2_info" {
     block_c1vw2_info:
         const _c1vw2;
         const 1;
         const 289356280353521694;
         const S1sVz_srt+800;
 },
 _c1vw8() //  [R1, R2]
         { []
         }
     {offset
       c1vw8: // global
           _s1sAp::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_c1vwa_info;
           R6 = R2;
           R5 = R1;
           R4 = P64[Sp + 8];
           R3 = P64[Sp + 16];
           R2 = _s1sAp::P64;
           Sp = Sp + 24;
           call GHC.Real.$w$c+_entry(R6,
                                     R5,
                                     R4,
                                     R3,
                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vw8_info" {
     block_c1vw8_info:
         const _c1vw8;
         const 3;
         const 4294967326;
         const S1sVz_srt+944;
 },
 _c1vwa() //  [R1, R2]
         { []
         }
     {offset
       c1vwa: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1vwj; else goto c1vwi;
       c1vwj: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c1vwi: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vwa_info" {
     block_c1vwa_info:
         const _c1vwa;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:18.15649825 UTC

[section ""data" . GHC.Real.$fEnumRatio_$s$cpred_closure" {
     GHC.Real.$fEnumRatio_$s$cpred_closure:
         const GHC.Real.$fEnumRatio_$s$cpred_info;
         const 0;
 },
 section ""relreadonly" . u1vx1_srtd" {
     u1vx1_srtd:
         const S1sVz_srt+464;
         const 72;
         const 1;
         const 144;
 },
 GHC.Real.$fEnumRatio_$s$cpred_entry() //  [R2]
         { []
         }
     {offset
       c1vwO: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1vwU; else goto c1vwV;
       c1vwU: // global
           R2 = R2;
           R1 = GHC.Real.$fEnumRatio_$s$cpred_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1vwV: // global
           I64[Sp - 8] = block_c1vwL_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1vx0; else goto c1vwM;
       u1vx0: // global
           call _c1vwL(R1) args: 0, res: 0, upd: 0;
       c1vwM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fEnumRatio_$s$cpred_info" {
     GHC.Real.$fEnumRatio_$s$cpred_info:
         const GHC.Real.$fEnumRatio_$s$cpred_entry;
         const 0;
         const 18446744069414584334;
         const 4294967301;
         const u1vx1_srtd;
 },
 section ""relreadonly" . u1vx2_srtd" {
     u1vx2_srtd:
         const S1sVz_srt+464;
         const 69;
         const 1;
         const 16;
 },
 _c1vwL() //  [R1]
         { []
         }
     {offset
       c1vwL: // global
           I64[Sp] = block_c1vwR_info;
           R5 = GHC.Real.$fEnumRatio1_closure;
           R4 = GHC.Real.$fEnumRatio1_closure;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Real.$w$s$c-_entry(R5,
                                       R4,
                                       R3,
                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vwL_info" {
     block_c1vwL_info:
         const _c1vwL;
         const 0;
         const 18446744069414584350;
         const u1vx2_srtd;
 },
 _c1vwR() //  [R1, R2]
         { []
         }
     {offset
       c1vwR: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1vwZ; else goto c1vwY;
       c1vwZ: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c1vwY: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vwR_info" {
     block_c1vwR_info:
         const _c1vwR;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:18.166797619 UTC

[section ""data" . GHC.Real.$fEnumRatio_$cpred_closure" {
     GHC.Real.$fEnumRatio_$cpred_closure:
         const GHC.Real.$fEnumRatio_$cpred_info;
         const 0;
 },
 GHC.Real.$fEnumRatio_$cpred_entry() //  [R2, R3]
         { []
         }
     {offset
       c1vxs: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1vxA; else goto c1vxB;
       c1vxA: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fEnumRatio_$cpred_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1vxB: // global
           I64[Sp - 16] = block_c1vxp_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1vxH; else goto c1vxq;
       u1vxH: // global
           call _c1vxp(R1) args: 0, res: 0, upd: 0;
       c1vxq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fEnumRatio_$cpred_info" {
     GHC.Real.$fEnumRatio_$cpred_info:
         const GHC.Real.$fEnumRatio_$cpred_entry;
         const 0;
         const 4904419998501437454;
         const 8589934607;
         const S1sVz_srt+800;
 },
 _c1vxp() //  [R1]
         { []
         }
     {offset
       c1vxp: // global
           I64[Sp - 16] = block_c1vxv_info;
           R3 = GHC.Real.$fEnumRatio1_closure;
           R2 = P64[Sp + 8];
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp] = P64[R1 + 7];
           Sp = Sp - 16;
           call GHC.Real.$w$cfromInteger_entry(R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vxp_info" {
     block_c1vxp_info:
         const _c1vxp;
         const 1;
         const 292733980074049566;
         const S1sVz_srt+800;
 },
 _c1vxv() //  [R1, R2]
         { []
         }
     {offset
       c1vxv: // global
           _s1sAH::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_c1vxx_info;
           R6 = R2;
           R5 = R1;
           R4 = P64[Sp + 8];
           R3 = P64[Sp + 16];
           R2 = _s1sAH::P64;
           Sp = Sp + 24;
           call GHC.Real.$w$c-_entry(R6,
                                     R5,
                                     R4,
                                     R3,
                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vxv_info" {
     block_c1vxv_info:
         const _c1vxv;
         const 3;
         const 4294967326;
         const S1sVz_srt+960;
 },
 _c1vxx() //  [R1, R2]
         { []
         }
     {offset
       c1vxx: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1vxG; else goto c1vxF;
       c1vxG: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c1vxF: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vxx_info" {
     block_c1vxx_info:
         const _c1vxx;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:18.176857115 UTC

[section ""data" . GHC.Real.$fFractionalRatio_closure" {
     GHC.Real.$fFractionalRatio_closure:
         const GHC.Real.$fFractionalRatio_info;
         const 0;
 },
 sat_s1sAW_entry() //  [R1, R2]
         { []
         }
     {offset
       c1vyd: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call GHC.Real.$fFractionalRatio_$cfromRational_entry(R3,
                                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1sAW_info" {
     sat_s1sAW_info:
         const sat_s1sAW_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S1sVz_srt+936;
 },
 sat_s1sAV_entry() //  [R1, R2]
         { []
         }
     {offset
       c1vyl: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call GHC.Real.$fFractionalRatio_$crecip_entry(R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1sAV_info" {
     sat_s1sAV_info:
         const sat_s1sAV_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S1sVz_srt+824;
 },
 sat_s1sAU_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c1vyt: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Real.$fFractionalRatio_$c/_entry(R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1sAU_info" {
     sat_s1sAU_info:
         const sat_s1sAU_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const S1sVz_srt+920;
 },
 sat_s1sAT_entry() //  [R1]
         { []
         }
     {offset
       c1vyA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1vyB; else goto c1vyC;
       c1vyB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1vyC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$fNumRatio_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sAT_info" {
     sat_s1sAT_info:
         const sat_s1sAT_entry;
         const 1;
         const 4294967312;
         const S1sVz_srt+992;
 },
 GHC.Real.$fFractionalRatio_entry() //  [R2]
         { []
         }
     {offset
       c1vyE: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto c1vyI; else goto c1vyH;
       c1vyI: // global
           HpAlloc = 112;
           R2 = R2;
           R1 = GHC.Real.$fFractionalRatio_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1vyH: // global
           I64[Hp - 104] = sat_s1sAW_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_s1sAV_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_s1sAU_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_s1sAT_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Real.C:Fractional_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 70;
           P64[Hp - 8] = Hp - 87;
           P64[Hp] = Hp - 103;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fFractionalRatio_info" {
     GHC.Real.$fFractionalRatio_info:
         const GHC.Real.$fFractionalRatio_entry;
         const 0;
         const 1162016669086777358;
         const 4294967301;
         const S1sVz_srt+824;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:18.188439582 UTC

[section ""data" . GHC.Real.$fEnumRatio_$cenumFrom_closure" {
     GHC.Real.$fEnumRatio_$cenumFrom_closure:
         const GHC.Real.$fEnumRatio_$cenumFrom_info;
         const 0;
 },
 w_s1sAY_entry() //  [R1]
         { []
         }
     {offset
       c1vzj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1vzk; else goto c1vzl;
       c1vzk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1vzl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$fFractionalRatio_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . w_s1sAY_info" {
     w_s1sAY_info:
         const w_s1sAY_entry;
         const 1;
         const 4294967312;
         const S1sVz_srt+1048;
 },
 sat_s1sB3_entry() //  [R1, R2]
         { []
         }
     {offset
       c1vzu: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1vzv; else goto c1vzw;
       c1vzv: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1vzw: // global
           I64[Sp - 8] = block_c1vzr_info;
           R3 = R2;
           R2 = P64[R1 + 7];
           Sp = Sp - 8;
           call GHC.Real.$wnumericEnumFrom_entry(R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1sB3_info" {
     sat_s1sB3_info:
         const sat_s1sB3_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S1sVz_srt+1056;
 },
 _c1vzr() //  [R1, R2]
         { []
         }
     {offset
       c1vzr: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1vzz; else goto c1vzy;
       c1vzz: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c1vzy: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vzr_info" {
     block_c1vzr_info:
         const _c1vzr;
         const 0;
         const 30;
 },
 GHC.Real.$fEnumRatio_$cenumFrom_entry() //  [R2]
         { []
         }
     {offset
       c1vzA: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c1vzE; else goto c1vzD;
       c1vzE: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = GHC.Real.$fEnumRatio_$cenumFrom_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1vzD: // global
           I64[Hp - 32] = w_s1sAY_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s1sB3_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fEnumRatio_$cenumFrom_info" {
     GHC.Real.$fEnumRatio_$cenumFrom_info:
         const GHC.Real.$fEnumRatio_$cenumFrom_entry;
         const 0;
         const 30064771086;
         const 4294967301;
         const S1sVz_srt+1048;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:18.199382998 UTC

[section ""data" . GHC.Real.$fEnumRatio_$cenumFromThen_closure" {
     GHC.Real.$fEnumRatio_$cenumFromThen_closure:
         const GHC.Real.$fEnumRatio_$cenumFromThen_info;
         const 0;
 },
 w_s1sB5_entry() //  [R1]
         { []
         }
     {offset
       c1vAa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1vAb; else goto c1vAc;
       c1vAb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1vAc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$fFractionalRatio_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . w_s1sB5_info" {
     w_s1sB5_info:
         const w_s1sB5_entry;
         const 1;
         const 4294967312;
         const S1sVz_srt+1048;
 },
 sat_s1sBb_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c1vAl: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1vAm; else goto c1vAn;
       c1vAm: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1vAn: // global
           I64[Sp - 8] = block_c1vAi_info;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           Sp = Sp - 8;
           call GHC.Real.$wnumericEnumFromThen_entry(R4,
                                                     R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1sBb_info" {
     sat_s1sBb_info:
         const sat_s1sBb_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _c1vAi() //  [R1, R2]
         { []
         }
     {offset
       c1vAi: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1vAq; else goto c1vAp;
       c1vAq: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c1vAp: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vAi_info" {
     block_c1vAi_info:
         const _c1vAi;
         const 0;
         const 30;
 },
 GHC.Real.$fEnumRatio_$cenumFromThen_entry() //  [R2]
         { []
         }
     {offset
       c1vAr: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c1vAv; else goto c1vAu;
       c1vAv: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = GHC.Real.$fEnumRatio_$cenumFromThen_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1vAu: // global
           I64[Hp - 32] = w_s1sB5_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s1sBb_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fEnumRatio_$cenumFromThen_info" {
     GHC.Real.$fEnumRatio_$cenumFromThen_info:
         const GHC.Real.$fEnumRatio_$cenumFromThen_entry;
         const 0;
         const 38654705678;
         const 4294967301;
         const S1sVz_srt+1048;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:18.209194802 UTC

[section ""data" . GHC.Real.$fEnumRatio_$cenumFromTo_closure" {
     GHC.Real.$fEnumRatio_$cenumFromTo_closure:
         const GHC.Real.$fEnumRatio_$cenumFromTo_info;
         const 0;
 },
 sat_s1sBe_entry() //  [R1]
         { []
         }
     {offset
       c1vB1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1vB2; else goto c1vB3;
       c1vB2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1vB3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$fFractionalRatio_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sBe_info" {
     sat_s1sBe_info:
         const sat_s1sBe_entry;
         const 1;
         const 4294967312;
         const S1sVz_srt+1048;
 },
 sat_s1sBd_entry() //  [R1]
         { []
         }
     {offset
       c1vB8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1vB9; else goto c1vBa;
       c1vB9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1vBa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$fOrdRatio_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sBd_info" {
     sat_s1sBd_info:
         const sat_s1sBd_entry;
         const 1;
         const 16;
 },
 section ""relreadonly" . u1vBg_srtd" {
     u1vBg_srtd:
         const S1sVz_srt+624;
         const 58;
         const 153122387330596865;
 },
 GHC.Real.$fEnumRatio_$cenumFromTo_entry() //  [R2]
         { []
         }
     {offset
       c1vBb: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c1vBf; else goto c1vBe;
       c1vBf: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = GHC.Real.$fEnumRatio_$cenumFromTo_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1vBe: // global
           I64[Hp - 40] = sat_s1sBe_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = sat_s1sBd_info;
           P64[Hp] = R2;
           R3 = Hp - 40;
           R2 = Hp - 16;
           R1 = GHC.Real.numericEnumFromTo_closure+4;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fEnumRatio_$cenumFromTo_info" {
     GHC.Real.$fEnumRatio_$cenumFromTo_info:
         const GHC.Real.$fEnumRatio_$cenumFromTo_entry;
         const 0;
         const 18446744069414584334;
         const 4294967301;
         const u1vBg_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:18.218083628 UTC

[section ""data" . GHC.Real.$fEnumRatio_$cenumFromThenTo_closure" {
     GHC.Real.$fEnumRatio_$cenumFromThenTo_closure:
         const GHC.Real.$fEnumRatio_$cenumFromThenTo_info;
         const 0;
 },
 sat_s1sBh_entry() //  [R1]
         { []
         }
     {offset
       c1vBG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1vBH; else goto c1vBI;
       c1vBH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1vBI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$fFractionalRatio_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sBh_info" {
     sat_s1sBh_info:
         const sat_s1sBh_entry;
         const 1;
         const 4294967312;
         const S1sVz_srt+1048;
 },
 sat_s1sBg_entry() //  [R1]
         { []
         }
     {offset
       c1vBN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1vBO; else goto c1vBP;
       c1vBO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1vBP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$fOrdRatio_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sBg_info" {
     sat_s1sBg_info:
         const sat_s1sBg_entry;
         const 1;
         const 16;
 },
 section ""relreadonly" . u1vBV_srtd" {
     u1vBV_srtd:
         const S1sVz_srt+672;
         const 53;
         const 4644337115725825;
 },
 GHC.Real.$fEnumRatio_$cenumFromThenTo_entry() //  [R2]
         { []
         }
     {offset
       c1vBQ: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c1vBU; else goto c1vBT;
       c1vBU: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = GHC.Real.$fEnumRatio_$cenumFromThenTo_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1vBT: // global
           I64[Hp - 40] = sat_s1sBh_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = sat_s1sBg_info;
           P64[Hp] = R2;
           R3 = Hp - 40;
           R2 = Hp - 16;
           R1 = GHC.Real.numericEnumFromThenTo_closure+5;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fEnumRatio_$cenumFromThenTo_info" {
     GHC.Real.$fEnumRatio_$cenumFromThenTo_info:
         const GHC.Real.$fEnumRatio_$cenumFromThenTo_entry;
         const 0;
         const 18446744069414584334;
         const 4294967301;
         const u1vBV_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:18.226278559 UTC

[section ""data" . GHC.Real.$fRealFracRatio_$s$fRealRatio_closure" {
     GHC.Real.$fRealFracRatio_$s$fRealRatio_closure:
         const GHC.Real.C:Real_con_info;
         const GHC.Real.$fFractionalRatio_$s$fNumRatio_closure+1;
         const GHC.Real.$fOrdRatio_$s$fOrdRatio_closure+1;
         const GHC.Real.$fRealRatio_$s$ctoRational_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:18.229708988 UTC

[section ""data" . GHC.Real.$fRealRatio_closure" {
     GHC.Real.$fRealRatio_closure:
         const GHC.Real.$fRealRatio_info;
         const 0;
 },
 sat_s1sBl_entry() //  [R1, R2]
         { []
         }
     {offset
       c1vCn: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call GHC.Real.$fRealRatio_$ctoRational_entry(R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1sBl_info" {
     sat_s1sBl_info:
         const sat_s1sBl_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s1sBk_entry() //  [R1]
         { []
         }
     {offset
       c1vCu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1vCv; else goto c1vCw;
       c1vCv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1vCw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$fOrdRatio_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sBk_info" {
     sat_s1sBk_info:
         const sat_s1sBk_entry;
         const 1;
         const 16;
 },
 sat_s1sBj_entry() //  [R1]
         { []
         }
     {offset
       c1vCB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1vCC; else goto c1vCD;
       c1vCC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1vCD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$fNumRatio_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sBj_info" {
     sat_s1sBj_info:
         const sat_s1sBj_entry;
         const 1;
         const 4294967312;
         const S1sVz_srt+992;
 },
 GHC.Real.$fRealRatio_entry() //  [R2]
         { []
         }
     {offset
       c1vCF: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c1vCJ; else goto c1vCI;
       c1vCJ: // global
           HpAlloc = 96;
           R2 = R2;
           R1 = GHC.Real.$fRealRatio_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1vCI: // global
           I64[Hp - 88] = sat_s1sBl_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_s1sBk_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = sat_s1sBj_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = GHC.Real.C:Real_con_info;
           P64[Hp - 16] = Hp - 48;
           P64[Hp - 8] = Hp - 72;
           P64[Hp] = Hp - 87;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fRealRatio_info" {
     GHC.Real.$fRealRatio_info:
         const GHC.Real.$fRealRatio_entry;
         const 0;
         const 35188667056142;
         const 4294967301;
         const S1sVz_srt+992;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:18.240184473 UTC

[section ""data" . GHC.Real.$w$s$cceiling_closure" {
     GHC.Real.$w$s$cceiling_closure:
         const GHC.Real.$w$s$cceiling_info;
         const 0;
 },
 sat_s1sBy_entry() //  [R1]
         { []
         }
     {offset
       c1vDB: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1vDC; else goto c1vDD;
       c1vDC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1vDD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Real.$fEnumRatio1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sBy_info" {
     sat_s1sBy_info:
         const sat_s1sBy_entry;
         const 1;
         const 4294967312;
         const S1sVz_srt+1008;
 },
 section ""relreadonly" . u1vDV_srtd" {
     u1vDV_srtd:
         const S1sVz_srt+24;
         const 136;
         const 1;
         const 576461027181592576;
         const 128;
 },
 GHC.Real.$w$s$cceiling_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1vDE: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1vDF; else goto c1vDG;
       c1vDF: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$w$s$cceiling_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1vDG: // global
           I64[Sp - 16] = block_c1vDd_info;
           R4 = R4;
           R3 = R3;
           _s1sBm::P64 = R2;
           R2 = R2;
           P64[Sp - 8] = _s1sBm::P64;
           Sp = Sp - 16;
           call GHC.Real.$w$s$cproperFraction_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$w$s$cceiling_info" {
     GHC.Real.$w$s$cceiling_info:
         const GHC.Real.$w$s$cceiling_entry;
         const 0;
         const 18446744069414584334;
         const 12884901911;
         const u1vDV_srtd;
 },
 section ""relreadonly" . u1vDW_srtd" {
     u1vDW_srtd:
         const S1sVz_srt+24;
         const 124;
         const 1;
         const 576460752303685632;
 },
 _c1vDd() //  [R1, R2]
         { []
         }
     {offset
       c1vDd: // global
           I64[Sp - 8] = block_c1vDf_info;
           _s1sBq::P64 = R1;
           R1 = R2;
           P64[Sp] = _s1sBq::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1vDU; else goto c1vDg;
       u1vDU: // global
           call _c1vDf(R1) args: 0, res: 0, upd: 0;
       c1vDg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vDd_info" {
     block_c1vDd_info:
         const _c1vDd;
         const 1;
         const 18446744069414584350;
         const u1vDW_srtd;
 },
 section ""relreadonly" . u1vDX_srtd" {
     u1vDX_srtd:
         const S1sVz_srt+24;
         const 124;
         const 1;
         const 576460752303685632;
 },
 _c1vDf() //  [R1]
         { []
         }
     {offset
       c1vDf: // global
           I64[Sp] = block_c1vDk_info;
           R5 = GHC.Real.$fEnumRatio1_closure;
           R4 = GHC.Real.even1_closure;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Real.$w$s$ccompare_entry(R5,
                                             R4,
                                             R3,
                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vDf_info" {
     block_c1vDf_info:
         const _c1vDf;
         const 2;
         const 18446744069414584350;
         const u1vDX_srtd;
 },
 _c1vDk() //  [R1]
         { []
         }
     {offset
       c1vDk: // global
           if (R1 & 7 == 3) goto c1vDO; else goto c1vDM;
       c1vDO: // global
           I64[Sp] = block_c1vDp_info;
           R2 = P64[Sp + 16];
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
       c1vDM: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vDk_info" {
     block_c1vDk_info:
         const _c1vDk;
         const 2;
         const 4294967326;
         const S1sVz_srt+1008;
 },
 _c1vDp() //  [R1]
         { []
         }
     {offset
       c1vDp: // global
           I64[Sp] = block_c1vDt_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vDp_info" {
     block_c1vDp_info:
         const _c1vDp;
         const 130;
         const 4294967326;
         const S1sVz_srt+1008;
 },
 _c1vDt() //  [R1]
         { []
         }
     {offset
       c1vDt: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1vDS; else goto c1vDR;
       c1vDS: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1vDR: // global
           I64[Hp - 16] = sat_s1sBy_info;
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 16] = Hp - 16;
           call GHC.Num.+_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vDt_info" {
     block_c1vDt_info:
         const _c1vDt;
         const 130;
         const 4294967326;
         const S1sVz_srt+1008;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:18.255501827 UTC

[section ""data" . GHC.Real.$fRealFracRatio_$s$cceiling_closure" {
     GHC.Real.$fRealFracRatio_$s$cceiling_closure:
         const GHC.Real.$fRealFracRatio_$s$cceiling_info;
         const 0;
 },
 GHC.Real.$fRealFracRatio_$s$cceiling_entry() //  [R2, R3]
         { []
         }
     {offset
       c1vEK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1vEL; else goto c1vEM;
       c1vEL: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fRealFracRatio_$s$cceiling_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1vEM: // global
           I64[Sp - 16] = block_c1vEH_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1vEQ; else goto c1vEI;
       u1vEQ: // global
           call _c1vEH(R1) args: 0, res: 0, upd: 0;
       c1vEI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fRealFracRatio_$s$cceiling_info" {
     GHC.Real.$fRealFracRatio_$s$cceiling_info:
         const GHC.Real.$fRealFracRatio_$s$cceiling_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S1sVz_srt+1104;
 },
 _c1vEH() //  [R1]
         { []
         }
     {offset
       c1vEH: // global
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Real.$w$s$cceiling_entry(R4,
                                             R3,
                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vEH_info" {
     block_c1vEH_info:
         const _c1vEH;
         const 1;
         const 4294967326;
         const S1sVz_srt+1104;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:18.263715866 UTC

[section ""data" . GHC.Real.$w$cceiling_closure" {
     GHC.Real.$w$cceiling_closure:
         const GHC.Real.$w$cceiling_info;
         const 0;
 },
 sat_s1sBU_entry() //  [R1]
         { []
         }
     {offset
       c1vFv: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1vFw; else goto c1vFx;
       c1vFw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1vFx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Real.$fEnumRatio1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sBU_info" {
     sat_s1sBU_info:
         const sat_s1sBU_entry;
         const 1;
         const 4294967312;
         const S1sVz_srt+1008;
 },
 section ""relreadonly" . u1vFQ_srtd" {
     u1vFQ_srtd:
         const S1sVz_srt+680;
         const 56;
         const 36030996042252289;
 },
 GHC.Real.$w$cceiling_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c1vFy: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c1vFz; else goto c1vFA;
       c1vFz: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$w$cceiling_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1vFA: // global
           I64[Sp - 24] = block_c1vF5_info;
           R5 = R5;
           R4 = R4;
           _s1sBF::P64 = R3;
           R3 = R3;
           _s1sBE::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = _s1sBE::P64;
           P64[Sp - 8] = _s1sBF::P64;
           Sp = Sp - 24;
           call GHC.Real.$w$cproperFraction_entry(R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$w$cceiling_info" {
     GHC.Real.$w$cceiling_info:
         const GHC.Real.$w$cceiling_entry;
         const 0;
         const 18446744069414584334;
         const 17179869208;
         const u1vFQ_srtd;
 },
 section ""relreadonly" . u1vFR_srtd" {
     u1vFR_srtd:
         const S1sVz_srt+680;
         const 42;
         const 2199023288321;
 },
 _c1vF5() //  [R1, R2]
         { []
         }
     {offset
       c1vF5: // global
           I64[Sp - 8] = block_c1vF7_info;
           _s1sBJ::P64 = R1;
           R1 = R2;
           P64[Sp] = _s1sBJ::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1vFP; else goto c1vF8;
       u1vFP: // global
           call _c1vF7(R1) args: 0, res: 0, upd: 0;
       c1vF8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vF5_info" {
     block_c1vF5_info:
         const _c1vF5;
         const 2;
         const 18446744069414584350;
         const u1vFR_srtd;
 },
 section ""relreadonly" . u1vFS_srtd" {
     u1vFS_srtd:
         const S1sVz_srt+680;
         const 42;
         const 2199023288321;
 },
 _c1vF7() //  [R1]
         { []
         }
     {offset
       c1vF7: // global
           I64[Sp - 16] = block_c1vFc_info;
           R3 = GHC.Real.even1_closure;
           R2 = P64[Sp + 16];
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp] = P64[R1 + 7];
           Sp = Sp - 16;
           call GHC.Real.$w$cfromInteger_entry(R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vF7_info" {
     block_c1vF7_info:
         const _c1vF7;
         const 3;
         const 18446744069414584350;
         const u1vFS_srtd;
 },
 _c1vFc() //  [R1, R2]
         { []
         }
     {offset
       c1vFc: // global
           _s1sBM::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c1vFe_info;
           R6 = R2;
           R5 = R1;
           R4 = P64[Sp + 8];
           R3 = _s1sBM::P64;
           R2 = P64[Sp + 32];
           Sp = Sp + 16;
           call GHC.Real.$w$ccompare_entry(R6,
                                           R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vFc_info" {
     block_c1vFc_info:
         const _c1vFc;
         const 5;
         const 4294967326;
         const S1sVz_srt+1008;
 },
 _c1vFe() //  [R1]
         { []
         }
     {offset
       c1vFe: // global
           if (R1 & 7 == 3) goto c1vFJ; else goto c1vFH;
       c1vFJ: // global
           I64[Sp] = block_c1vFj_info;
           R2 = P64[Sp + 24];
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
       c1vFH: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vFe_info" {
     block_c1vFe_info:
         const _c1vFe;
         const 131;
         const 4294967326;
         const S1sVz_srt+1008;
 },
 _c1vFj() //  [R1]
         { []
         }
     {offset
       c1vFj: // global
           I64[Sp] = block_c1vFn_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vFj_info" {
     block_c1vFj_info:
         const _c1vFj;
         const 387;
         const 4294967326;
         const S1sVz_srt+1008;
 },
 _c1vFn() //  [R1]
         { []
         }
     {offset
       c1vFn: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1vFN; else goto c1vFM;
       c1vFN: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1vFM: // global
           I64[Hp - 16] = sat_s1sBU_info;
           P64[Hp] = R1;
           R2 = R1;
           _s1sBJ::P64 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_pp_info;
           P64[Sp + 16] = _s1sBJ::P64;
           P64[Sp + 24] = Hp - 16;
           Sp = Sp + 8;
           call GHC.Num.+_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vFn_info" {
     block_c1vFn_info:
         const _c1vFn;
         const 387;
         const 4294967326;
         const S1sVz_srt+1008;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:18.281055174 UTC

[section ""data" . GHC.Real.$fRealFracRatio_$cceiling_closure" {
     GHC.Real.$fRealFracRatio_$cceiling_closure:
         const GHC.Real.$fRealFracRatio_$cceiling_info;
         const 0;
 },
 GHC.Real.$fRealFracRatio_$cceiling_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1vGL: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1vGM; else goto c1vGN;
       c1vGM: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fRealFracRatio_$cceiling_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1vGN: // global
           I64[Sp - 24] = block_c1vGI_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u1vGR; else goto c1vGJ;
       u1vGR: // global
           call _c1vGI(R1) args: 0, res: 0, upd: 0;
       c1vGJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fRealFracRatio_$cceiling_info" {
     GHC.Real.$fRealFracRatio_$cceiling_info:
         const GHC.Real.$fRealFracRatio_$cceiling_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S1sVz_srt+1120;
 },
 _c1vGI() //  [R1]
         { []
         }
     {offset
       c1vGI: // global
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Real.$w$cceiling_entry(R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vGI_info" {
     block_c1vGI_info:
         const _c1vGI;
         const 2;
         const 4294967326;
         const S1sVz_srt+1120;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:18.291463571 UTC

[section ""data" . GHC.Real.$w$s$cfloor_closure" {
     GHC.Real.$w$s$cfloor_closure:
         const GHC.Real.$w$s$cfloor_info;
         const 0;
 },
 sat_s1sCf_entry() //  [R1]
         { []
         }
     {offset
       c1vHC: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1vHD; else goto c1vHE;
       c1vHD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1vHE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Real.$fEnumRatio1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sCf_info" {
     sat_s1sCf_info:
         const sat_s1sCf_entry;
         const 1;
         const 4294967312;
         const S1sVz_srt+1008;
 },
 section ""relreadonly" . u1vHX_srtd" {
     u1vHX_srtd:
         const S1sVz_srt;
         const 143;
         const 1;
         const 4611688217452740608;
         const 16384;
 },
 GHC.Real.$w$s$cfloor_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1vHF: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1vHG; else goto c1vHH;
       c1vHG: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$w$s$cfloor_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1vHH: // global
           I64[Sp - 16] = block_c1vH6_info;
           R4 = R4;
           R3 = R3;
           _s1sC1::P64 = R2;
           R2 = R2;
           P64[Sp - 8] = _s1sC1::P64;
           Sp = Sp - 16;
           call GHC.Real.$w$s$cproperFraction_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$w$s$cfloor_info" {
     GHC.Real.$w$s$cfloor_info:
         const GHC.Real.$w$s$cfloor_entry;
         const 0;
         const 18446744069414584334;
         const 12884901911;
         const u1vHX_srtd;
 },
 section ""relreadonly" . u1vHY_srtd" {
     u1vHY_srtd:
         const S1sVz_srt;
         const 127;
         const 1;
         const 4611686018429485056;
 },
 _c1vH6() //  [R1, R2]
         { []
         }
     {offset
       c1vH6: // global
           I64[Sp - 8] = block_c1vH8_info;
           _s1sC5::P64 = R1;
           R1 = R2;
           P64[Sp] = _s1sC5::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1vHW; else goto c1vH9;
       u1vHW: // global
           call _c1vH8(R1) args: 0, res: 0, upd: 0;
       c1vH9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vH6_info" {
     block_c1vH6_info:
         const _c1vH6;
         const 1;
         const 18446744069414584350;
         const u1vHY_srtd;
 },
 section ""relreadonly" . u1vHZ_srtd" {
     u1vHZ_srtd:
         const S1sVz_srt;
         const 127;
         const 1;
         const 4611686018429485056;
 },
 _c1vH8() //  [R1]
         { []
         }
     {offset
       c1vH8: // global
           I64[Sp - 8] = block_c1vHd_info;
           R3 = P64[R1 + 15];
           R2 = GHC.Real.even1_closure;
           P64[Sp] = P64[R1 + 7];
           Sp = Sp - 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vH8_info" {
     block_c1vH8_info:
         const _c1vH8;
         const 2;
         const 18446744069414584350;
         const u1vHZ_srtd;
 },
 section ""relreadonly" . u1vI0_srtd" {
     u1vI0_srtd:
         const S1sVz_srt;
         const 127;
         const 1;
         const 4611686018427387904;
 },
 _c1vHd() //  [R1]
         { []
         }
     {offset
       c1vHd: // global
           I64[Sp] = block_c1vHh_info;
           R3 = GHC.Real.$fEnumRatio1_closure;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vHd_info" {
     block_c1vHd_info:
         const _c1vHd;
         const 3;
         const 18446744069414584350;
         const u1vI0_srtd;
 },
 _c1vHh() //  [R1]
         { []
         }
     {offset
       c1vHh: // global
           _s1sCb::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1vHl_info;
           R3 = _s1sCb::P64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.ltInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vHh_info" {
     block_c1vHh_info:
         const _c1vHh;
         const 3;
         const 4294967326;
         const S1sVz_srt+1008;
 },
 _c1vHl() //  [R1]
         { []
         }
     {offset
       c1vHl: // global
           if (R1 == 1) goto c1vHR; else goto c1vHP;
       c1vHR: // global
           I64[Sp] = block_c1vHq_info;
           R2 = P64[Sp + 16];
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
       c1vHP: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vHl_info" {
     block_c1vHl_info:
         const _c1vHl;
         const 2;
         const 4294967326;
         const S1sVz_srt+1008;
 },
 _c1vHq() //  [R1]
         { []
         }
     {offset
       c1vHq: // global
           I64[Sp] = block_c1vHu_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vHq_info" {
     block_c1vHq_info:
         const _c1vHq;
         const 130;
         const 4294967326;
         const S1sVz_srt+1008;
 },
 _c1vHu() //  [R1]
         { []
         }
     {offset
       c1vHu: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1vHV; else goto c1vHU;
       c1vHV: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1vHU: // global
           I64[Hp - 16] = sat_s1sCf_info;
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 16] = Hp - 16;
           call GHC.Num.-_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vHu_info" {
     block_c1vHu_info:
         const _c1vHu;
         const 130;
         const 4294967326;
         const S1sVz_srt+1008;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:18.311439114 UTC

[section ""data" . GHC.Real.$fRealFracRatio_$s$cfloor_closure" {
     GHC.Real.$fRealFracRatio_$s$cfloor_closure:
         const GHC.Real.$fRealFracRatio_$s$cfloor_info;
         const 0;
 },
 GHC.Real.$fRealFracRatio_$s$cfloor_entry() //  [R2, R3]
         { []
         }
     {offset
       c1vIV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1vIW; else goto c1vIX;
       c1vIW: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fRealFracRatio_$s$cfloor_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1vIX: // global
           I64[Sp - 16] = block_c1vIS_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1vJ1; else goto c1vIT;
       u1vJ1: // global
           call _c1vIS(R1) args: 0, res: 0, upd: 0;
       c1vIT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fRealFracRatio_$s$cfloor_info" {
     GHC.Real.$fRealFracRatio_$s$cfloor_info:
         const GHC.Real.$fRealFracRatio_$s$cfloor_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S1sVz_srt+1136;
 },
 _c1vIS() //  [R1]
         { []
         }
     {offset
       c1vIS: // global
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Real.$w$s$cfloor_entry(R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vIS_info" {
     block_c1vIS_info:
         const _c1vIS;
         const 1;
         const 4294967326;
         const S1sVz_srt+1136;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:18.319366565 UTC

[section ""data" . GHC.Real.$w$cfloor_closure" {
     GHC.Real.$w$cfloor_closure:
         const GHC.Real.$w$cfloor_info;
         const 0;
 },
 sat_s1sCB_entry() //  [R1]
         { []
         }
     {offset
       c1vJG: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1vJH; else goto c1vJI;
       c1vJH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1vJI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Real.$fEnumRatio1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sCB_info" {
     sat_s1sCB_info:
         const sat_s1sCB_entry;
         const 1;
         const 4294967312;
         const S1sVz_srt+1008;
 },
 section ""relreadonly" . u1vK1_srtd" {
     u1vK1_srtd:
         const S1sVz_srt+680;
         const 60;
         const 576462951326711809;
 },
 GHC.Real.$w$cfloor_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c1vJJ: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c1vJK; else goto c1vJL;
       c1vJK: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$w$cfloor_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1vJL: // global
           I64[Sp - 24] = block_c1vJg_info;
           R5 = R5;
           R4 = R4;
           _s1sCm::P64 = R3;
           R3 = R3;
           _s1sCl::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = _s1sCl::P64;
           P64[Sp - 8] = _s1sCm::P64;
           Sp = Sp - 24;
           call GHC.Real.$w$cproperFraction_entry(R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$w$cfloor_info" {
     GHC.Real.$w$cfloor_info:
         const GHC.Real.$w$cfloor_entry;
         const 0;
         const 18446744069414584334;
         const 17179869208;
         const u1vK1_srtd;
 },
 section ""relreadonly" . u1vK2_srtd" {
     u1vK2_srtd:
         const S1sVz_srt+680;
         const 42;
         const 2199023288321;
 },
 _c1vJg() //  [R1, R2]
         { []
         }
     {offset
       c1vJg: // global
           I64[Sp - 8] = block_c1vJi_info;
           _s1sCq::P64 = R1;
           R1 = R2;
           P64[Sp] = _s1sCq::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1vK0; else goto c1vJj;
       u1vK0: // global
           call _c1vJi(R1) args: 0, res: 0, upd: 0;
       c1vJj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vJg_info" {
     block_c1vJg_info:
         const _c1vJg;
         const 2;
         const 18446744069414584350;
         const u1vK2_srtd;
 },
 section ""relreadonly" . u1vK3_srtd" {
     u1vK3_srtd:
         const S1sVz_srt+680;
         const 42;
         const 2199023288321;
 },
 _c1vJi() //  [R1]
         { []
         }
     {offset
       c1vJi: // global
           I64[Sp - 16] = block_c1vJn_info;
           R3 = GHC.Real.even1_closure;
           R2 = P64[Sp + 16];
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp] = P64[R1 + 7];
           Sp = Sp - 16;
           call GHC.Real.$w$cfromInteger_entry(R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vJi_info" {
     block_c1vJi_info:
         const _c1vJi;
         const 3;
         const 18446744069414584350;
         const u1vK3_srtd;
 },
 _c1vJn() //  [R1, R2]
         { []
         }
     {offset
       c1vJn: // global
           _s1sCt::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c1vJp_info;
           R6 = R2;
           R5 = R1;
           R4 = P64[Sp + 8];
           R3 = _s1sCt::P64;
           R2 = P64[Sp + 32];
           Sp = Sp + 16;
           call GHC.Real.$w$c<_entry(R6,
                                     R5,
                                     R4,
                                     R3,
                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vJn_info" {
     block_c1vJn_info:
         const _c1vJn;
         const 5;
         const 4294967326;
         const S1sVz_srt+1008;
 },
 _c1vJp() //  [R1]
         { []
         }
     {offset
       c1vJp: // global
           if (R1 & 7 == 1) goto c1vJS; else goto c1vJU;
       c1vJS: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c1vJU: // global
           I64[Sp] = block_c1vJu_info;
           R2 = P64[Sp + 24];
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vJp_info" {
     block_c1vJp_info:
         const _c1vJp;
         const 131;
         const 4294967326;
         const S1sVz_srt+1008;
 },
 _c1vJu() //  [R1]
         { []
         }
     {offset
       c1vJu: // global
           I64[Sp] = block_c1vJy_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vJu_info" {
     block_c1vJu_info:
         const _c1vJu;
         const 387;
         const 4294967326;
         const S1sVz_srt+1008;
 },
 _c1vJy() //  [R1]
         { []
         }
     {offset
       c1vJy: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1vJY; else goto c1vJX;
       c1vJY: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1vJX: // global
           I64[Hp - 16] = sat_s1sCB_info;
           P64[Hp] = R1;
           R2 = R1;
           _s1sCq::P64 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_pp_info;
           P64[Sp + 16] = _s1sCq::P64;
           P64[Sp + 24] = Hp - 16;
           Sp = Sp + 8;
           call GHC.Num.-_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vJy_info" {
     block_c1vJy_info:
         const _c1vJy;
         const 387;
         const 4294967326;
         const S1sVz_srt+1008;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:18.337588158 UTC

[section ""data" . GHC.Real.$fRealFracRatio_$cfloor_closure" {
     GHC.Real.$fRealFracRatio_$cfloor_closure:
         const GHC.Real.$fRealFracRatio_$cfloor_info;
         const 0;
 },
 GHC.Real.$fRealFracRatio_$cfloor_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1vKW: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1vKX; else goto c1vKY;
       c1vKX: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fRealFracRatio_$cfloor_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1vKY: // global
           I64[Sp - 24] = block_c1vKT_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u1vL2; else goto c1vKU;
       u1vL2: // global
           call _c1vKT(R1) args: 0, res: 0, upd: 0;
       c1vKU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fRealFracRatio_$cfloor_info" {
     GHC.Real.$fRealFracRatio_$cfloor_info:
         const GHC.Real.$fRealFracRatio_$cfloor_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S1sVz_srt+1152;
 },
 _c1vKT() //  [R1]
         { []
         }
     {offset
       c1vKT: // global
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Real.$w$cfloor_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vKT_info" {
     block_c1vKT_info:
         const _c1vKT;
         const 2;
         const 4294967326;
         const S1sVz_srt+1152;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:18.342833466 UTC

[section ""data" . sat_s1sCI_closure" {
     sat_s1sCI_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:18.344475819 UTC

[section ""data" . sat_s1sCJ_closure" {
     sat_s1sCJ_closure:
         const :_con_info;
         const sat_s1sCI_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:18.346998635 UTC

[section ""data" . GHC.Real.$fRealFracRatio2_closure" {
     GHC.Real.$fRealFracRatio2_closure:
         const GHC.Real.$fRealFracRatio2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Real.$fRealFracRatio2_entry() //  [R1]
         { []
         }
     {offset
       c1vLl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1vLm; else goto c1vLn;
       c1vLm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1vLn: // global
           (_c1vLi::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c1vLi::I64 == 0) goto c1vLk; else goto c1vLj;
       c1vLk: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c1vLj: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c1vLi::I64;
           R3 = sat_s1sCJ_closure+2;
           R2 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Real.$fRealFracRatio2_info" {
     GHC.Real.$fRealFracRatio2_info:
         const GHC.Real.$fRealFracRatio2_entry;
         const 0;
         const 4294967317;
         const S1sVz_srt+1168;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:18.358117872 UTC

[section ""data" . GHC.Real.$w$s$cround_closure" {
     GHC.Real.$w$s$cround_closure:
         const GHC.Real.$w$s$cround_info;
         const 0;
 },
 sat_s1sD5_entry() //  [R1]
         { []
         }
     {offset
       c1vMp: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1vMq; else goto c1vMr;
       c1vMq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1vMr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Real.$fEnumRatio1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sD5_info" {
     sat_s1sD5_info:
         const sat_s1sD5_entry;
         const 1;
         const 4294967312;
         const S1sVz_srt+1008;
 },
 sat_s1sD6_entry() //  [R1]
         { []
         }
     {offset
       c1vMy: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1vMz; else goto c1vMA;
       c1vMz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1vMA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Real.$fEnumRatio1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sD6_info" {
     sat_s1sD6_info:
         const sat_s1sD6_entry;
         const 1;
         const 4294967312;
         const S1sVz_srt+1008;
 },
 section ""relreadonly" . u1vNL_srtd" {
     u1vNL_srtd:
         const S1sVz_srt;
         const 149;
         const 288230376151711745;
         const 4611688217729565184;
         const 1572864;
 },
 GHC.Real.$w$s$cround_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1vMB: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c1vMC; else goto c1vMD;
       c1vMC: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$w$s$cround_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1vMD: // global
           I64[Sp - 16] = block_c1vLB_info;
           R4 = R4;
           R3 = R3;
           _s1sCK::P64 = R2;
           R2 = R2;
           P64[Sp - 8] = _s1sCK::P64;
           Sp = Sp - 16;
           call GHC.Real.$w$s$cproperFraction_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$w$s$cround_info" {
     GHC.Real.$w$s$cround_info:
         const GHC.Real.$w$s$cround_entry;
         const 0;
         const 18446744069414584334;
         const 12884901911;
         const u1vNL_srtd;
 },
 section ""relreadonly" . u1vNM_srtd" {
     u1vNM_srtd:
         const S1sVz_srt;
         const 149;
         const 288230376151711745;
         const 4611686018706309632;
         const 1048576;
 },
 _c1vLB() //  [R1, R2]
         { []
         }
     {offset
       c1vLB: // global
           I64[Sp - 8] = block_c1vLD_info;
           _s1sCO::P64 = R1;
           R1 = R2;
           P64[Sp] = _s1sCO::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1vNG; else goto c1vLE;
       u1vNG: // global
           call _c1vLD(R1) args: 0, res: 0, upd: 0;
       c1vLE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vLB_info" {
     block_c1vLB_info:
         const _c1vLB;
         const 1;
         const 18446744069414584350;
         const u1vNM_srtd;
 },
 section ""relreadonly" . u1vNN_srtd" {
     u1vNN_srtd:
         const S1sVz_srt;
         const 149;
         const 288230376151711745;
         const 4611686018706309632;
         const 1048576;
 },
 _c1vLD() //  [R1]
         { []
         }
     {offset
       c1vLD: // global
           I64[Sp - 16] = block_c1vLI_info;
           _s1sCR::P64 = P64[R1 + 7];
           R2 = _s1sCR::P64;
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp] = _s1sCR::P64;
           Sp = Sp - 16;
           call GHC.Integer.Type.absInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vLD_info" {
     block_c1vLD_info:
         const _c1vLD;
         const 2;
         const 18446744069414584350;
         const u1vNN_srtd;
 },
 section ""relreadonly" . u1vNO_srtd" {
     u1vNO_srtd:
         const S1sVz_srt;
         const 149;
         const 288230376151711745;
         const 4611686018706309632;
         const 1048576;
 },
 _c1vLI() //  [R1]
         { []
         }
     {offset
       c1vLI: // global
           I64[Sp] = block_c1vLM_info;
           R5 = GHC.Real.even2_closure;
           R4 = GHC.Real.$fEnumRatio1_closure;
           R3 = P64[Sp + 8];
           R2 = R1;
           call GHC.Real.$w$s$c-_entry(R5,
                                       R4,
                                       R3,
                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vLI_info" {
     block_c1vLI_info:
         const _c1vLI;
         const 4;
         const 18446744069414584350;
         const u1vNO_srtd;
 },
 section ""relreadonly" . u1vNP_srtd" {
     u1vNP_srtd:
         const S1sVz_srt;
         const 149;
         const 1;
         const 4611686018706309120;
         const 1048576;
 },
 _c1vLM() //  [R1]
         { []
         }
     {offset
       c1vLM: // global
           I64[Sp] = block_c1vLO_info;
           R2 = R1;
           call GHC.Integer.Type.signumInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vLM_info" {
     block_c1vLM_info:
         const _c1vLM;
         const 4;
         const 18446744069414584350;
         const u1vNP_srtd;
 },
 section ""relreadonly" . u1vNQ_srtd" {
     u1vNQ_srtd:
         const S1sVz_srt;
         const 149;
         const 1;
         const 4611686018706309120;
         const 1048576;
 },
 _c1vLO() //  [R1]
         { []
         }
     {offset
       c1vLO: // global
           I64[Sp - 8] = block_c1vLS_info;
           R3 = GHC.Real.$fRealFracRatio2_closure;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vLO_info" {
     block_c1vLO_info:
         const _c1vLO;
         const 4;
         const 18446744069414584350;
         const u1vNQ_srtd;
 },
 section ""relreadonly" . u1vNR_srtd" {
     u1vNR_srtd:
         const S1sVz_srt;
         const 127;
         const 1;
         const 4611686018706309120;
 },
 _c1vLS() //  [R1]
         { []
         }
     {offset
       c1vLS: // global
           if (R1 == 1) goto u1vNC; else goto c1vN0;
       u1vNC: // global
           Sp = Sp + 32;
           call _c1vNA() args: 0, res: 0, upd: 0;
       c1vN0: // global
           I64[Sp] = block_c1vMJ_info;
           R3 = GHC.Real.even1_closure;
           R2 = P64[Sp + 8];
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vLS_info" {
     block_c1vLS_info:
         const _c1vLS;
         const 5;
         const 18446744069414584350;
         const u1vNR_srtd;
 },
 section ""relreadonly" . u1vNS_srtd" {
     u1vNS_srtd:
         const S1sVz_srt;
         const 127;
         const 1;
         const 4611686018706309120;
 },
 _c1vMJ() //  [R1]
         { []
         }
     {offset
       c1vMJ: // global
           if (R1 == 1) goto c1vNm; else goto c1vN7;
       c1vNm: // global
           I64[Sp + 8] = block_c1vNk_info;
           R3 = P64[Sp + 32];
           R2 = P64[Sp + 40];
           Sp = Sp + 8;
           call GHC.Real.even_entry(R3, R2) args: 8, res: 8, upd: 8;
       c1vN7: // global
           _s1sCX::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1vN4_info;
           R3 = GHC.Real.$fEnumRatio1_closure;
           R2 = _s1sCX::P64;
           Sp = Sp + 8;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vMJ_info" {
     block_c1vMJ_info:
         const _c1vMJ;
         const 5;
         const 18446744069414584350;
         const u1vNS_srtd;
 },
 section ""relreadonly" . u1vNT_srtd" {
     u1vNT_srtd:
         const S1sVz_srt;
         const 127;
         const 1;
         const 4611686018429485056;
 },
 _c1vNk() //  [R1]
         { []
         }
     {offset
       c1vNk: // global
           if (R1 & 7 == 1) goto u1vNE; else goto u1vNF;
       u1vNE: // global
           Sp = Sp + 8;
           call _s1sCZ() args: 0, res: 0, upd: 0;
       u1vNF: // global
           Sp = Sp + 24;
           call _c1vNA() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1vNk_info" {
     block_c1vNk_info:
         const _c1vNk;
         const 4;
         const 18446744069414584350;
         const u1vNT_srtd;
 },
 _c1vNA() //  []
         { []
         }
     {offset
       c1vNA: // global
           R1 = P64[Sp];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . u1vNU_srtd" {
     u1vNU_srtd:
         const S1sVz_srt;
         const 127;
         const 1;
         const 4611686018697920512;
 },
 _c1vN4() //  [R1]
         { []
         }
     {offset
       c1vN4: // global
           if (R1 == 1) goto u1vND; else goto c1vNd;
       u1vND: // global
           Sp = Sp + 8;
           call _s1sCZ() args: 0, res: 0, upd: 0;
       c1vNd: // global
           R1 = GHC.Real.$fRealFracRatio1_closure;
           Sp = Sp + 40;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vN4_info" {
     block_c1vN4_info:
         const _c1vN4;
         const 4;
         const 18446744069414584350;
         const u1vNU_srtd;
 },
 _s1sCZ() //  []
         { []
         }
     {offset
       s1sCZ: // global
           I64[Sp - 8] = block_c1vM1_info;
           R2 = P64[Sp + 24];
           Sp = Sp - 8;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . u1vNV_srtd" {
     u1vNV_srtd:
         const S1sVz_srt;
         const 127;
         const 1;
         const 4611686018429485056;
 },
 _c1vM1() //  [R1]
         { []
         }
     {offset
       c1vM1: // global
           I64[Sp] = block_c1vM5_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vM1_info" {
     block_c1vM1_info:
         const _c1vM1;
         const 516;
         const 18446744069414584350;
         const u1vNV_srtd;
 },
 section ""relreadonly" . u1vNW_srtd" {
     u1vNW_srtd:
         const S1sVz_srt;
         const 127;
         const 1;
         const 4611686018429485056;
 },
 _c1vM5() //  [R1]
         { []
         }
     {offset
       c1vM5: // global
           _s1sCS::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1vM9_info;
           R3 = _s1sCS::P64;
           R2 = GHC.Real.even1_closure;
           P64[Sp + 32] = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vM5_info" {
     block_c1vM5_info:
         const _c1vM5;
         const 516;
         const 18446744069414584350;
         const u1vNW_srtd;
 },
 section ""relreadonly" . u1vNX_srtd" {
     u1vNX_srtd:
         const S1sVz_srt;
         const 127;
         const 1;
         const 4611686018427387904;
 },
 _c1vM9() //  [R1]
         { []
         }
     {offset
       c1vM9: // global
           I64[Sp] = block_c1vMd_info;
           R3 = GHC.Real.$fEnumRatio1_closure;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vM9_info" {
     block_c1vM9_info:
         const _c1vM9;
         const 3;
         const 18446744069414584350;
         const u1vNX_srtd;
 },
 _c1vMd() //  [R1]
         { []
         }
     {offset
       c1vMd: // global
           _s1sD3::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1vMh_info;
           R3 = _s1sD3::P64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.ltInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vMd_info" {
     block_c1vMd_info:
         const _c1vMd;
         const 3;
         const 4294967326;
         const S1sVz_srt+1008;
 },
 _c1vMh() //  [R1]
         { []
         }
     {offset
       c1vMh: // global
           _s1sD1::P64 = P64[Sp + 16];
           if (R1 == 1) goto c1vMV; else goto c1vMR;
       c1vMV: // global
           Hp = Hp + 24;
           _s1sD4::I64 = R1;
           if (Hp > HpLim) (likely: False) goto c1vMY; else goto c1vMX;
       c1vMX: // global
           I64[Hp - 16] = sat_s1sD6_info;
           P64[Hp] = _s1sD1::P64;
           R2 = _s1sD1::P64;
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 16] = Hp - 16;
           call GHC.Num.-_entry(R2) args: 32, res: 0, upd: 8;
       c1vMR: // global
           Hp = Hp + 24;
           _s1sD4::I64 = R1;
           if (Hp > HpLim) (likely: False) goto c1vMY; else goto c1vMT;
       c1vMY: // global
           HpAlloc = 24;
           R1 = _s1sD4::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c1vMT: // global
           I64[Hp - 16] = sat_s1sD5_info;
           P64[Hp] = _s1sD1::P64;
           R2 = _s1sD1::P64;
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 16] = Hp - 16;
           call GHC.Num.+_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vMh_info" {
     block_c1vMh_info:
         const _c1vMh;
         const 2;
         const 4294967326;
         const S1sVz_srt+1008;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:18.3980031 UTC

[section ""data" . GHC.Real.$fRealFracRatio_$s$cround_closure" {
     GHC.Real.$fRealFracRatio_$s$cround_closure:
         const GHC.Real.$fRealFracRatio_$s$cround_info;
         const 0;
 },
 GHC.Real.$fRealFracRatio_$s$cround_entry() //  [R2, R3]
         { []
         }
     {offset
       c1vPJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1vPK; else goto c1vPL;
       c1vPK: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fRealFracRatio_$s$cround_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1vPL: // global
           I64[Sp - 16] = block_c1vPG_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1vPP; else goto c1vPH;
       u1vPP: // global
           call _c1vPG(R1) args: 0, res: 0, upd: 0;
       c1vPH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fRealFracRatio_$s$cround_info" {
     GHC.Real.$fRealFracRatio_$s$cround_info:
         const GHC.Real.$fRealFracRatio_$s$cround_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const S1sVz_srt+1176;
 },
 _c1vPG() //  [R1]
         { []
         }
     {offset
       c1vPG: // global
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Real.$w$s$cround_entry(R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vPG_info" {
     block_c1vPG_info:
         const _c1vPG;
         const 1;
         const 4294967326;
         const S1sVz_srt+1176;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:18.41336407 UTC

[section ""data" . GHC.Real.$w$cround_closure" {
     GHC.Real.$w$cround_closure:
         const GHC.Real.$w$cround_info;
         const 0;
 },
 sat_s1sDS_entry() //  [R1]
         { []
         }
     {offset
       c1vRh: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1vRi; else goto c1vRj;
       c1vRi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1vRj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Real.$fEnumRatio1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sDS_info" {
     sat_s1sDS_info:
         const sat_s1sDS_entry;
         const 1;
         const 4294967312;
         const S1sVz_srt+1008;
 },
 sat_s1sDT_entry() //  [R1]
         { []
         }
     {offset
       c1vRq: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1vRr; else goto c1vRs;
       c1vRr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1vRs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Real.$fEnumRatio1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sDT_info" {
     sat_s1sDT_info:
         const sat_s1sDT_entry;
         const 1;
         const 4294967312;
         const S1sVz_srt+1008;
 },
 section ""relreadonly" . u1vTN_srtd" {
     u1vTN_srtd:
         const S1sVz_srt+584;
         const 78;
         const 9156733004435457;
         const 8192;
 },
 GHC.Real.$w$cround_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c1vRt: // global
           if ((Sp + -128) < SpLim) (likely: False) goto c1vRu; else goto c1vRv;
       c1vRu: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$w$cround_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1vRv: // global
           I64[Sp - 24] = block_c1vQ4_info;
           R5 = R5;
           R4 = R4;
           _s1sDg::P64 = R3;
           R3 = R3;
           _s1sDf::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = _s1sDf::P64;
           P64[Sp - 8] = _s1sDg::P64;
           Sp = Sp - 24;
           call GHC.Real.$w$cproperFraction_entry(R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$w$cround_info" {
     GHC.Real.$w$cround_info:
         const GHC.Real.$w$cround_entry;
         const 0;
         const 18446744069414584334;
         const 17179869208;
         const u1vTN_srtd;
 },
 section ""relreadonly" . u1vTO_srtd" {
     u1vTO_srtd:
         const S1sVz_srt+584;
         const 54;
         const 9156733004435457;
 },
 _c1vQ4() //  [R1, R2]
         { []
         }
     {offset
       c1vQ4: // global
           I64[Sp - 8] = block_c1vQ6_info;
           _s1sDk::P64 = R1;
           R1 = R2;
           P64[Sp] = _s1sDk::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1vTC; else goto c1vQ7;
       u1vTC: // global
           call _c1vQ6(R1) args: 0, res: 0, upd: 0;
       c1vQ7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vQ4_info" {
     block_c1vQ4_info:
         const _c1vQ4;
         const 2;
         const 18446744069414584350;
         const u1vTO_srtd;
 },
 section ""relreadonly" . u1vTP_srtd" {
     u1vTP_srtd:
         const S1sVz_srt+584;
         const 54;
         const 9156733004435457;
 },
 _c1vQ6() //  [R1]
         { []
         }
     {offset
       c1vQ6: // global
           I64[Sp - 16] = block_c1vQb_info;
           R2 = P64[Sp + 16];
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp] = P64[R1 + 7];
           Sp = Sp - 16;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vQ6_info" {
     block_c1vQ6_info:
         const _c1vQ6;
         const 3;
         const 18446744069414584350;
         const u1vTP_srtd;
 },
 section ""relreadonly" . u1vTQ_srtd" {
     u1vTQ_srtd:
         const S1sVz_srt+584;
         const 54;
         const 9156733004435457;
 },
 _c1vQb() //  [R1]
         { []
         }
     {offset
       c1vQb: // global
           I64[Sp] = block_c1vQf_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vQb_info" {
     block_c1vQb_info:
         const _c1vQb;
         const 5;
         const 18446744069414584350;
         const u1vTQ_srtd;
 },
 section ""relreadonly" . u1vTR_srtd" {
     u1vTR_srtd:
         const S1sVz_srt+584;
         const 54;
         const 9156733004435457;
 },
 _c1vQf() //  [R1]
         { []
         }
     {offset
       c1vQf: // global
           I64[Sp] = block_c1vQj_info;
           R2 = R1;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 16];
           Sp = Sp - 16;
           call GHC.Num.abs_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vQf_info" {
     block_c1vQf_info:
         const _c1vQf;
         const 5;
         const 18446744069414584350;
         const u1vTR_srtd;
 },
 section ""relreadonly" . u1vTS_srtd" {
     u1vTS_srtd:
         const S1sVz_srt+584;
         const 54;
         const 9156733004435457;
 },
 _c1vQj() //  [R1]
         { []
         }
     {offset
       c1vQj: // global
           I64[Sp - 8] = block_c1vQl_info;
           R4 = GHC.Real.even2_closure;
           R3 = GHC.Real.$fEnumRatio1_closure;
           R2 = P64[Sp + 32];
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Real.$w$cfromRational_entry(R4,
                                                R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vQj_info" {
     block_c1vQj_info:
         const _c1vQj;
         const 5;
         const 18446744069414584350;
         const u1vTS_srtd;
 },
 section ""relreadonly" . u1vTT_srtd" {
     u1vTT_srtd:
         const S1sVz_srt+680;
         const 42;
         const 2233383035013;
 },
 _c1vQl() //  [R1, R2]
         { []
         }
     {offset
       c1vQl: // global
           _s1sDr::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1vQn_info;
           R6 = R2;
           R5 = R1;
           R4 = P64[Sp + 16];
           R3 = _s1sDr::P64;
           R2 = P64[Sp + 40];
           Sp = Sp + 8;
           call GHC.Real.$w$c-_entry(R6,
                                     R5,
                                     R4,
                                     R3,
                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vQl_info" {
     block_c1vQl_info:
         const _c1vQl;
         const 6;
         const 18446744069414584350;
         const u1vTT_srtd;
 },
 section ""relreadonly" . u1vTU_srtd" {
     u1vTU_srtd:
         const S1sVz_srt+680;
         const 42;
         const 2199023296645;
 },
 _c1vQn() //  [R1]
         { []
         }
     {offset
       c1vQn: // global
           I64[Sp] = block_c1vQp_info;
           R3 = R1;
           R2 = P64[Sp + 32];
           call GHC.Real.$w$csignum_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vQn_info" {
     block_c1vQn_info:
         const _c1vQn;
         const 5;
         const 18446744069414584350;
         const u1vTU_srtd;
 },
 section ""relreadonly" . u1vTV_srtd" {
     u1vTV_srtd:
         const S1sVz_srt+680;
         const 42;
         const 2199023288453;
 },
 _c1vQp() //  [R1, R2]
         { []
         }
     {offset
       c1vQp: // global
           I64[Sp - 16] = block_c1vQr_info;
           R3 = GHC.Real.$fEnumRatio1_closure;
           _s1sDA::P64 = R2;
           R2 = P64[Sp + 32];
           P64[Sp - 8] = _s1sDA::P64;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call GHC.Real.$w$cfromInteger_entry(R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vQp_info" {
     block_c1vQp_info:
         const _c1vQp;
         const 5;
         const 18446744069414584350;
         const u1vTV_srtd;
 },
 section ""relreadonly" . u1vTW_srtd" {
     u1vTW_srtd:
         const S1sVz_srt+680;
         const 42;
         const 2199023288453;
 },
 _c1vQr() //  [R1, R2]
         { []
         }
     {offset
       c1vQr: // global
           I64[Sp - 16] = block_c1vQt_info;
           _s1sDD::P64 = R2;
           R2 = P64[Sp + 48];
           P64[Sp - 8] = _s1sDD::P64;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vQr_info" {
     block_c1vQr_info:
         const _c1vQr;
         const 7;
         const 18446744069414584350;
         const u1vTW_srtd;
 },
 section ""relreadonly" . u1vTX_srtd" {
     u1vTX_srtd:
         const S1sVz_srt+680;
         const 42;
         const 2199023288453;
 },
 _c1vQt() //  [R1]
         { []
         }
     {offset
       c1vQt: // global
           I64[Sp] = block_c1vQx_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vQt_info" {
     block_c1vQt_info:
         const _c1vQt;
         const 9;
         const 18446744069414584350;
         const u1vTX_srtd;
 },
 section ""relreadonly" . u1vTY_srtd" {
     u1vTY_srtd:
         const S1sVz_srt+680;
         const 42;
         const 2199023288453;
 },
 _c1vQx() //  [R1]
         { []
         }
     {offset
       c1vQx: // global
           I64[Sp] = block_c1vQB_info;
           R2 = R1;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 16];
           Sp = Sp - 16;
           call GHC.Num.negate_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vQx_info" {
     block_c1vQx_info:
         const _c1vQx;
         const 9;
         const 18446744069414584350;
         const u1vTY_srtd;
 },
 section ""relreadonly" . u1vTZ_srtd" {
     u1vTZ_srtd:
         const S1sVz_srt+680;
         const 42;
         const 2199023288453;
 },
 _c1vQB() //  [R1]
         { []
         }
     {offset
       c1vQB: // global
           I64[Sp - 8] = block_c1vQD_info;
           R2 = P64[Sp + 64];
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vQB_info" {
     block_c1vQB_info:
         const _c1vQB;
         const 9;
         const 18446744069414584350;
         const u1vTZ_srtd;
 },
 section ""relreadonly" . u1vU0_srtd" {
     u1vU0_srtd:
         const S1sVz_srt+680;
         const 42;
         const 2199023288453;
 },
 _c1vQD() //  [R1]
         { []
         }
     {offset
       c1vQD: // global
           I64[Sp] = block_c1vQH_info;
           R2 = R1;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vQD_info" {
     block_c1vQD_info:
         const _c1vQD;
         const 10;
         const 18446744069414584350;
         const u1vU0_srtd;
 },
 section ""relreadonly" . u1vU1_srtd" {
     u1vU1_srtd:
         const S1sVz_srt+680;
         const 42;
         const 2199023288453;
 },
 _c1vQH() //  [R1]
         { []
         }
     {offset
       c1vQH: // global
           I64[Sp] = block_c1vQL_info;
           R2 = R1;
           call GHC.Classes.$p1Ord_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vQH_info" {
     block_c1vQH_info:
         const _c1vQH;
         const 10;
         const 18446744069414584350;
         const u1vU1_srtd;
 },
 section ""relreadonly" . u1vU2_srtd" {
     u1vU2_srtd:
         const S1sVz_srt+680;
         const 42;
         const 2199023288453;
 },
 _c1vQL() //  [R1]
         { []
         }
     {offset
       c1vQL: // global
           I64[Sp] = block_c1vRK_info;
           R2 = R1;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 40];
           P64[Sp - 8] = P64[Sp + 8];
           P64[Sp + 8] = R1;
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vQL_info" {
     block_c1vQL_info:
         const _c1vQL;
         const 10;
         const 18446744069414584350;
         const u1vU2_srtd;
 },
 section ""relreadonly" . u1vU3_srtd" {
     u1vU3_srtd:
         const S1sVz_srt+680;
         const 42;
         const 2199023288453;
 },
 _c1vRK() //  [R1]
         { []
         }
     {offset
       c1vRK: // global
           if (R1 & 7 == 1) goto u1vTs; else goto c1vT9;
       u1vTs: // global
           Sp = Sp + 8;
           call _s1sDK() args: 0, res: 0, upd: 0;
       c1vT9: // global
           I64[Sp] = block_c1vT7_info;
           R2 = P64[Sp + 8];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 32];
           P64[Sp - 8] = P64[Sp + 16];
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vRK_info" {
     block_c1vRK_info:
         const _c1vRK;
         const 10;
         const 18446744069414584350;
         const u1vU3_srtd;
 },
 section ""relreadonly" . u1vU4_srtd" {
     u1vU4_srtd:
         const S1sVz_srt+680;
         const 42;
         const 2199023288453;
 },
 _c1vT7() //  [R1]
         { []
         }
     {offset
       c1vT7: // global
           if (R1 & 7 == 1) goto u1vTt; else goto u1vTu;
       u1vTt: // global
           Sp = Sp + 8;
           call _s1sDK() args: 0, res: 0, upd: 0;
       u1vTu: // global
           Sp = Sp + 64;
           call _c1vTj() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1vT7_info" {
     block_c1vT7_info:
         const _c1vT7;
         const 10;
         const 18446744069414584350;
         const u1vU4_srtd;
 },
 _s1sDK() //  []
         { []
         }
     {offset
       s1sDK: // global
           I64[Sp - 8] = block_c1vQU_info;
           R3 = GHC.Real.even1_closure;
           R2 = P64[Sp + 64];
           Sp = Sp - 8;
           call GHC.Real.$w$cfromInteger_entry(R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . u1vU5_srtd" {
     u1vU5_srtd:
         const S1sVz_srt+696;
         const 40;
         const 549755813921;
 },
 _c1vQU() //  [R1, R2]
         { []
         }
     {offset
       c1vQU: // global
           I64[Sp - 16] = block_c1vRO_info;
           _s1sDN::P64 = R2;
           R2 = P64[Sp + 8];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[Sp + 40];
           P64[Sp - 24] = R1;
           P64[Sp - 8] = _s1sDN::P64;
           P64[Sp] = R1;
           Sp = Sp - 40;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vQU_info" {
     block_c1vQU_info:
         const _c1vQU;
         const 10;
         const 18446744069414584350;
         const u1vU5_srtd;
 },
 section ""relreadonly" . u1vU6_srtd" {
     u1vU6_srtd:
         const S1sVz_srt+696;
         const 40;
         const 549755813921;
 },
 _c1vRO() //  [R1]
         { []
         }
     {offset
       c1vRO: // global
           if (R1 & 7 == 1) goto u1vTv; else goto c1vSD;
       u1vTv: // global
           Sp = Sp + 8;
           call _s1sDU() args: 0, res: 0, upd: 0;
       c1vSD: // global
           I64[Sp] = block_c1vSB_info;
           R2 = P64[Sp + 24];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 48];
           P64[Sp - 8] = P64[Sp + 8];
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vRO_info" {
     block_c1vRO_info:
         const _c1vRO;
         const 12;
         const 18446744069414584350;
         const u1vU6_srtd;
 },
 section ""relreadonly" . u1vU7_srtd" {
     u1vU7_srtd:
         const S1sVz_srt+696;
         const 40;
         const 549755813921;
 },
 _c1vSB() //  [R1]
         { []
         }
     {offset
       c1vSB: // global
           if (R1 & 7 == 1) goto u1vTw; else goto c1vSO;
       u1vTw: // global
           Sp = Sp + 8;
           call _s1sDU() args: 0, res: 0, upd: 0;
       c1vSO: // global
           I64[Sp] = block_c1vSM_info;
           R3 = P64[Sp + 80];
           R2 = P64[Sp + 96];
           call GHC.Real.even_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vSB_info" {
     block_c1vSB_info:
         const _c1vSB;
         const 12;
         const 18446744069414584350;
         const u1vU7_srtd;
 },
 _s1sDU() //  []
         { []
         }
     {offset
       s1sDU: // global
           I64[Sp - 8] = block_c1vS6_info;
           R2 = P64[Sp + 16];
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = P64[Sp + 48];
           P64[Sp - 16] = P64[Sp + 32];
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . u1vU8_srtd" {
     u1vU8_srtd:
         const S1sVz_srt+736;
         const 35;
         const 17179869185;
 },
 _c1vS6() //  [R1]
         { []
         }
     {offset
       c1vS6: // global
           if (R1 & 7 == 1) goto u1vTz; else goto c1vSi;
       u1vTz: // global
           Sp = Sp + 104;
           call _c1vSo() args: 0, res: 0, upd: 0;
       c1vSi: // global
           I64[Sp] = block_c1vSg_info;
           R2 = P64[Sp + 24];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 48];
           P64[Sp - 8] = P64[Sp + 32];
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vS6_info" {
     block_c1vS6_info:
         const _c1vS6;
         const 5132;
         const 18446744069414584350;
         const u1vU8_srtd;
 },
 section ""relreadonly" . u1vU9_srtd" {
     u1vU9_srtd:
         const S1sVz_srt+736;
         const 35;
         const 17179869185;
 },
 _c1vSg() //  [R1]
         { []
         }
     {offset
       c1vSg: // global
           if (R1 & 7 == 1) goto u1vTA; else goto u1vTB;
       u1vTA: // global
           Sp = Sp + 104;
           call _c1vSo() args: 0, res: 0, upd: 0;
       u1vTB: // global
           Sp = Sp + 8;
           call _s1sDO() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1vSg_info" {
     block_c1vSg_info:
         const _c1vSg;
         const 7948;
         const 18446744069414584350;
         const u1vU9_srtd;
 },
 _c1vSo() //  []
         { []
         }
     {offset
       c1vSo: // global
           R1 = GHC.Real.$fRealFracRatio1_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c1vSM() //  [R1]
         { []
         }
     {offset
       c1vSM: // global
           if (R1 & 7 == 1) goto u1vTx; else goto u1vTy;
       u1vTx: // global
           Sp = Sp + 8;
           call _s1sDO() args: 0, res: 0, upd: 0;
       u1vTy: // global
           Sp = Sp + 80;
           call _c1vTj() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1vSM_info" {
     block_c1vSM_info:
         const _c1vSM;
         const 7948;
         const 4294967326;
         const S1sVz_srt+1008;
 },
 _s1sDO() //  []
         { []
         }
     {offset
       s1sDO: // global
           I64[Sp - 8] = block_c1vR1_info;
           R2 = P64[Sp + 88];
           Sp = Sp - 8;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c1vR1() //  [R1]
         { []
         }
     {offset
       c1vR1: // global
           I64[Sp] = block_c1vR5_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vR1_info" {
     block_c1vR1_info:
         const _c1vR1;
         const 139020;
         const 4294967326;
         const S1sVz_srt+1008;
 },
 _c1vR5() //  [R1]
         { []
         }
     {offset
       c1vR5: // global
           _s1sDn::P64 = P64[Sp + 72];
           I64[Sp + 72] = block_c1vR9_info;
           R6 = P64[Sp + 8];
           R5 = P64[Sp + 16];
           R4 = P64[Sp + 64];
           R3 = _s1sDn::P64;
           R2 = P64[Sp + 88];
           P64[Sp + 96] = R1;
           Sp = Sp + 72;
           call GHC.Real.$w$c<_entry(R6,
                                     R5,
                                     R4,
                                     R3,
                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vR5_info" {
     block_c1vR5_info:
         const _c1vR5;
         const 139020;
         const 4294967326;
         const S1sVz_srt+1008;
 },
 _c1vR9() //  [R1]
         { []
         }
     {offset
       c1vR9: // global
           _s1sDk::P64 = P64[Sp + 8];
           _s1sDQ::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c1vRV; else goto c1vRZ;
       c1vRV: // global
           Hp = Hp + 24;
           _s1sDR::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c1vS2; else goto c1vRX;
       c1vRX: // global
           I64[Hp - 16] = sat_s1sDS_info;
           P64[Hp] = _s1sDQ::P64;
           R2 = _s1sDQ::P64;
           I64[Sp + 8] = stg_ap_pp_info;
           P64[Sp + 16] = _s1sDk::P64;
           P64[Sp + 24] = Hp - 16;
           Sp = Sp + 8;
           call GHC.Num.+_entry(R2) args: 32, res: 0, upd: 8;
       c1vRZ: // global
           Hp = Hp + 24;
           _s1sDR::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c1vS2; else goto c1vS1;
       c1vS2: // global
           HpAlloc = 24;
           R1 = _s1sDR::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1vS1: // global
           I64[Hp - 16] = sat_s1sDT_info;
           P64[Hp] = _s1sDQ::P64;
           R2 = _s1sDQ::P64;
           I64[Sp + 8] = stg_ap_pp_info;
           P64[Sp + 16] = _s1sDk::P64;
           P64[Sp + 24] = Hp - 16;
           Sp = Sp + 8;
           call GHC.Num.-_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vR9_info" {
     block_c1vR9_info:
         const _c1vR9;
         const 131;
         const 4294967326;
         const S1sVz_srt+1008;
 },
 _c1vTj() //  []
         { []
         }
     {offset
       c1vTj: // global
           R1 = P64[Sp];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:18.480132292 UTC

[section ""data" . GHC.Real.$fRealFracRatio_$cround_closure" {
     GHC.Real.$fRealFracRatio_$cround_closure:
         const GHC.Real.$fRealFracRatio_$cround_info;
         const 0;
 },
 GHC.Real.$fRealFracRatio_$cround_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1vXx: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1vXy; else goto c1vXz;
       c1vXy: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fRealFracRatio_$cround_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1vXz: // global
           I64[Sp - 24] = block_c1vXu_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u1vXD; else goto c1vXv;
       u1vXD: // global
           call _c1vXu(R1) args: 0, res: 0, upd: 0;
       c1vXv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fRealFracRatio_$cround_info" {
     GHC.Real.$fRealFracRatio_$cround_info:
         const GHC.Real.$fRealFracRatio_$cround_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S1sVz_srt+1200;
 },
 _c1vXu() //  [R1]
         { []
         }
     {offset
       c1vXu: // global
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Real.$w$cround_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vXu_info" {
     block_c1vXu_info:
         const _c1vXu;
         const 2;
         const 4294967326;
         const S1sVz_srt+1200;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:18.487941088 UTC

[section ""data" . GHC.Real.$fRealFracRatio_$s$ctruncate_closure" {
     GHC.Real.$fRealFracRatio_$s$ctruncate_closure:
         const GHC.Real.$fRealFracRatio_$s$ctruncate_info;
         const 0;
 },
 sat_s1sEk_entry() //  [R1]
         { []
         }
     {offset
       c1vY6: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1vY7; else goto c1vY8;
       c1vY7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1vY8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c1vY1_info;
           R3 = GHC.Real.even1_closure;
           _s1sEc::P64 = P64[R1 + 24];
           R2 = _s1sEc::P64;
           P64[Sp - 32] = P64[R1 + 16];
           P64[Sp - 24] = _s1sEc::P64;
           Sp = Sp - 40;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sEk_info" {
     sat_s1sEk_info:
         const sat_s1sEk_entry;
         const 2;
         const 12884901906;
         const S1sVz_srt+1216;
 },
 _c1vY1() //  [R1]
         { []
         }
     {offset
       c1vY1: // global
           if (R1 == 1) goto c1vY5; else goto c1vY4;
       c1vY5: // global
           R1 = GHC.Real.divZeroError_closure;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       c1vY4: // global
           _s1sEc::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c1vYb_info;
           R3 = _s1sEc::P64;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Integer.Type.quotRemInteger_entry(R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c1vY1_info" {
     block_c1vY1_info:
         const _c1vY1;
         const 2;
         const 4294967326;
         const S1sVz_srt+1216;
 },
 _c1vYb() //  [R1]
         { []
         }
     {offset
       c1vYb: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1vYb_info" {
     block_c1vYb_info:
         const _c1vYb;
         const 0;
         const 30;
 },
 GHC.Real.$fRealFracRatio_$s$ctruncate_entry() //  [R2, R3]
         { []
         }
     {offset
       c1vYi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1vYo; else goto c1vYp;
       c1vYo: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fRealFracRatio_$s$ctruncate_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1vYp: // global
           I64[Sp - 16] = block_c1vXS_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1vYy; else goto c1vXT;
       u1vYy: // global
           call _c1vXS(R1) args: 0, res: 0, upd: 0;
       c1vXT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fRealFracRatio_$s$ctruncate_info" {
     GHC.Real.$fRealFracRatio_$s$ctruncate_info:
         const GHC.Real.$fRealFracRatio_$s$ctruncate_entry;
         const 0;
         const 30064771086;
         const 8589934607;
         const S1sVz_srt+1216;
 },
 _c1vXS() //  [R1]
         { []
         }
     {offset
       c1vXS: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1vYs; else goto c1vYr;
       c1vYs: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1vYr: // global
           _s1sEb::P64 = P64[R1 + 7];
           _s1sEc::P64 = P64[R1 + 15];
           I64[Hp - 24] = sat_s1sEk_info;
           P64[Hp - 8] = _s1sEb::P64;
           P64[Hp] = _s1sEc::P64;
           I64[Sp] = block_c1vYj_info;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = Hp - 24;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vXS_info" {
     block_c1vXS_info:
         const _c1vXS;
         const 1;
         const 12884901918;
         const S1sVz_srt+1216;
 },
 _c1vYj() //  [R1]
         { []
         }
     {offset
       c1vYj: // global
           I64[Sp] = block_c1vYn_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vYj_info" {
     block_c1vYj_info:
         const _c1vYj;
         const 1;
         const 30;
 },
 _c1vYn() //  [R1]
         { []
         }
     {offset
       c1vYn: // global
           R2 = R1;
           I64[Sp] = stg_ap_p_info;
           call GHC.Num.fromInteger_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vYn_info" {
     block_c1vYn_info:
         const _c1vYn;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:18.501179716 UTC

[section ""data" . GHC.Real.$fRealFracRatio_$ctruncate_closure" {
     GHC.Real.$fRealFracRatio_$ctruncate_closure:
         const GHC.Real.$fRealFracRatio_$ctruncate_info;
 },
 GHC.Real.$fRealFracRatio_$ctruncate_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1vZh: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1vZl; else goto c1vZm;
       c1vZl: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fRealFracRatio_$ctruncate_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1vZm: // global
           I64[Sp - 24] = block_c1vZe_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u1vZq; else goto c1vZf;
       u1vZq: // global
           call _c1vZe(R1) args: 0, res: 0, upd: 0;
       c1vZf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fRealFracRatio_$ctruncate_info" {
     GHC.Real.$fRealFracRatio_$ctruncate_info:
         const GHC.Real.$fRealFracRatio_$ctruncate_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c1vZe() //  [R1]
         { []
         }
     {offset
       c1vZe: // global
           _s1sEm::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c1vZk_info;
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = _s1sEm::P64;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Real.$w$cproperFraction_entry(R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vZe_info" {
     block_c1vZe_info:
         const _c1vZe;
         const 2;
         const 30;
 },
 _c1vZk() //  [R1]
         { []
         }
     {offset
       c1vZk: // global
           R1 = R1;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1vZk_info" {
     block_c1vZk_info:
         const _c1vZk;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:18.508059235 UTC

[section ""data" . GHC.Real.$fRealFracRatio_$s$fRealFracRatio_closure" {
     GHC.Real.$fRealFracRatio_$s$fRealFracRatio_closure:
         const GHC.Real.C:RealFrac_con_info;
         const GHC.Real.$fRealFracRatio_$s$fRealRatio_closure+1;
         const GHC.Real.$fFractionalRatio_$s$fFractionalRatio_closure+1;
         const GHC.Real.$fEnumRatio_$s$cproperFraction_closure+2;
         const GHC.Real.$fRealFracRatio_$s$ctruncate_closure+2;
         const GHC.Real.$fRealFracRatio_$s$cround_closure+2;
         const GHC.Real.$fRealFracRatio_$s$cceiling_closure+2;
         const GHC.Real.$fRealFracRatio_$s$cfloor_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:18.513571264 UTC

[section ""data" . GHC.Real.$fRealFracRatio_closure" {
     GHC.Real.$fRealFracRatio_closure:
         const GHC.Real.$fRealFracRatio_info;
         const 0;
 },
 sat_s1sEB_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c1vZP: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Real.$fRealFracRatio_$cfloor_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1sEB_info" {
     sat_s1sEB_info:
         const sat_s1sEB_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const S1sVz_srt+1160;
 },
 sat_s1sEA_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c1vZX: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Real.$fRealFracRatio_$cceiling_entry(R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1sEA_info" {
     sat_s1sEA_info:
         const sat_s1sEA_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const S1sVz_srt+1128;
 },
 sat_s1sEz_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c1w05: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Real.$fRealFracRatio_$cround_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1sEz_info" {
     sat_s1sEz_info:
         const sat_s1sEz_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const S1sVz_srt+1208;
 },
 sat_s1sEy_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c1w0d: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Real.$fRealFracRatio_$ctruncate_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1sEy_info" {
     sat_s1sEy_info:
         const sat_s1sEy_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s1sEx_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c1w0l: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Real.$fEnumRatio_$cproperFraction_entry(R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1sEx_info" {
     sat_s1sEx_info:
         const sat_s1sEx_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s1sEw_entry() //  [R1]
         { []
         }
     {offset
       c1w0s: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1w0t; else goto c1w0u;
       c1w0t: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1w0u: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$fFractionalRatio_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sEw_info" {
     sat_s1sEw_info:
         const sat_s1sEw_entry;
         const 1;
         const 4294967312;
         const S1sVz_srt+1048;
 },
 sat_s1sEv_entry() //  [R1]
         { []
         }
     {offset
       c1w0z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1w0A; else goto c1w0B;
       c1w0A: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1w0B: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$fRealRatio_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sEv_info" {
     sat_s1sEv_info:
         const sat_s1sEv_entry;
         const 1;
         const 4294967312;
         const S1sVz_srt+1096;
 },
 GHC.Real.$fRealFracRatio_entry() //  [R2]
         { []
         }
     {offset
       c1w0D: // global
           Hp = Hp + 192;
           if (Hp > HpLim) (likely: False) goto c1w0H; else goto c1w0G;
       c1w0H: // global
           HpAlloc = 192;
           R2 = R2;
           R1 = GHC.Real.$fRealFracRatio_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1w0G: // global
           I64[Hp - 184] = sat_s1sEB_info;
           P64[Hp - 176] = R2;
           I64[Hp - 168] = sat_s1sEA_info;
           P64[Hp - 160] = R2;
           I64[Hp - 152] = sat_s1sEz_info;
           P64[Hp - 144] = R2;
           I64[Hp - 136] = sat_s1sEy_info;
           P64[Hp - 128] = R2;
           I64[Hp - 120] = sat_s1sEx_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_s1sEw_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_s1sEv_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = GHC.Real.C:RealFrac_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = Hp - 104;
           P64[Hp - 32] = Hp - 118;
           P64[Hp - 24] = Hp - 134;
           P64[Hp - 16] = Hp - 150;
           P64[Hp - 8] = Hp - 166;
           P64[Hp] = Hp - 182;
           R1 = Hp - 55;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fRealFracRatio_info" {
     GHC.Real.$fRealFracRatio_info:
         const GHC.Real.$fRealFracRatio_entry;
         const 0;
         const 76636239628861454;
         const 4294967301;
         const S1sVz_srt+1048;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:18.530944882 UTC

[section ""data" . g_r1j3N_closure" {
     g_r1j3N_closure:
         const g_r1j3N_info;
         const 0;
 },
 section ""relreadonly" . u1w2u_srtd" {
     u1w2u_srtd:
         const S1sVz_srt;
         const 157;
         const 1;
         const 4611686018427388416;
         const 301989888;
 },
 g_r1j3N_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1w1x: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1w1y; else goto u1w2o;
       c1w1y: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = g_r1j3N_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       u1w2o: // global
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call _c1w1s() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . g_r1j3N_info" {
     g_r1j3N_info:
         const g_r1j3N_entry;
         const 0;
         const 18446744069414584334;
         const 12884901911;
         const u1w2u_srtd;
 },
 _c1w1s() //  []
         { []
         }
     {offset
       c1w1s: // global
           I64[Sp - 8] = block_c1w1v_info;
           R3 = GHC.Real.even2_closure;
           R2 = P64[Sp + 8];
           Sp = Sp - 8;
           call GHC.Integer.Type.remInteger_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . u1w2v_srtd" {
     u1w2v_srtd:
         const S1sVz_srt;
         const 154;
         const 1;
         const 4611686018427388416;
         const 33554432;
 },
 _c1w1v() //  [R1]
         { []
         }
     {offset
       c1w1v: // global
           I64[Sp] = block_c1w1C_info;
           R3 = GHC.Real.even1_closure;
           R2 = R1;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1w1v_info" {
     block_c1w1v_info:
         const _c1w1v;
         const 3;
         const 18446744069414584350;
         const u1w2v_srtd;
 },
 section ""relreadonly" . u1w2w_srtd" {
     u1w2w_srtd:
         const S1sVz_srt;
         const 154;
         const 1;
         const 4611686018427388416;
         const 33554432;
 },
 _c1w1C() //  [R1]
         { []
         }
     {offset
       c1w1C: // global
           _s1sED::P64 = P64[Sp + 16];
           if (R1 == 1) goto c1w2i; else goto c1w1K;
       c1w2i: // global
           I64[Sp] = block_c1w2c_info;
           R3 = GHC.Real.even2_closure;
           R2 = _s1sED::P64;
           call GHC.Integer.Type.quotInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
       c1w1K: // global
           I64[Sp] = block_c1w1H_info;
           R3 = GHC.Real.$fEnumRatio1_closure;
           R2 = _s1sED::P64;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1w1C_info" {
     block_c1w1C_info:
         const _c1w1C;
         const 3;
         const 18446744069414584350;
         const u1w2w_srtd;
 },
 section ""relreadonly" . u1w2x_srtd" {
     u1w2x_srtd:
         const S1sVz_srt;
         const 154;
         const 1;
         const 4611686018427388416;
         const 33554432;
 },
 _c1w2c() //  [R1]
         { []
         }
     {offset
       c1w2c: // global
           _s1sEC::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1w2g_info;
           R3 = _s1sEC::P64;
           R2 = _s1sEC::P64;
           P64[Sp + 16] = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1w2c_info" {
     block_c1w2c_info:
         const _c1w2c;
         const 131;
         const 18446744069414584350;
         const u1w2x_srtd;
 },
 section ""relreadonly" . u1w2y_srtd" {
     u1w2y_srtd:
         const S1sVz_srt;
         const 154;
         const 1;
         const 4611686018427388416;
         const 33554432;
 },
 _c1w2g() //  [R1]
         { []
         }
     {offset
       c1w2g: // global
           P64[Sp] = R1;
           P64[Sp + 8] = P64[Sp + 8];
           P64[Sp + 16] = P64[Sp + 16];
           call _c1w1s() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1w2g_info" {
     block_c1w2g_info:
         const _c1w2g;
         const 2;
         const 18446744069414584350;
         const u1w2y_srtd;
 },
 section ""relreadonly" . u1w2z_srtd" {
     u1w2z_srtd:
         const S1sVz_srt;
         const 154;
         const 1;
         const 4611686018427388416;
         const 33554432;
 },
 _c1w1H() //  [R1]
         { []
         }
     {offset
       c1w1H: // global
           _s1sEC::P64 = P64[Sp + 8];
           _s1sEE::P64 = P64[Sp + 24];
           if (R1 == 1) goto c1w29; else goto c1w1Z;
       c1w29: // global
           R3 = _s1sEE::P64;
           R2 = _s1sEC::P64;
           Sp = Sp + 32;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 0, upd: 8;
       c1w1Z: // global
           I64[Sp] = block_c1w1O_info;
           R3 = _s1sEE::P64;
           R2 = _s1sEC::P64;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1w1H_info" {
     block_c1w1H_info:
         const _c1w1H;
         const 3;
         const 18446744069414584350;
         const u1w2z_srtd;
 },
 section ""relreadonly" . u1w2A_srtd" {
     u1w2A_srtd:
         const S1sVz_srt;
         const 154;
         const 1;
         const 4611686018427388416;
         const 33554432;
 },
 _c1w1O() //  [R1]
         { []
         }
     {offset
       c1w1O: // global
           I64[Sp] = block_c1w1S_info;
           R3 = GHC.Real.even2_closure;
           R2 = P64[Sp + 16];
           P64[Sp + 24] = R1;
           call GHC.Integer.Type.quotInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1w1O_info" {
     block_c1w1O_info:
         const _c1w1O;
         const 259;
         const 18446744069414584350;
         const u1w2A_srtd;
 },
 section ""relreadonly" . u1w2B_srtd" {
     u1w2B_srtd:
         const S1sVz_srt;
         const 154;
         const 1;
         const 4611686018427388416;
         const 33554432;
 },
 _c1w1S() //  [R1]
         { []
         }
     {offset
       c1w1S: // global
           _s1sEC::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1w1W_info;
           R3 = _s1sEC::P64;
           R2 = _s1sEC::P64;
           P64[Sp + 16] = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1w1S_info" {
     block_c1w1S_info:
         const _c1w1S;
         const 131;
         const 18446744069414584350;
         const u1w2B_srtd;
 },
 section ""relreadonly" . u1w2C_srtd" {
     u1w2C_srtd:
         const S1sVz_srt;
         const 154;
         const 1;
         const 4611686018427388416;
         const 33554432;
 },
 _c1w1W() //  [R1]
         { []
         }
     {offset
       c1w1W: // global
           P64[Sp] = R1;
           P64[Sp + 8] = P64[Sp + 8];
           P64[Sp + 16] = P64[Sp + 16];
           call _c1w1s() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1w1W_info" {
     block_c1w1W_info:
         const _c1w1W;
         const 2;
         const 18446744069414584350;
         const u1w2C_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:18.556141876 UTC

[section ""data" . GHC.Real.^_f_closure" {
     GHC.Real.^_f_closure:
         const GHC.Real.^_f_info;
         const 0;
 },
 section ""relreadonly" . u1w4p_srtd" {
     u1w4p_srtd:
         const S1sVz_srt;
         const 158;
         const 1;
         const 4611686018427388416;
         const 838860800;
 },
 GHC.Real.^_f_entry() //  [R2, R3]
         { []
         }
     {offset
       c1w3z: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1w3A; else goto u1w4l;
       c1w3A: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.^_f_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       u1w4l: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _c1w3u() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . GHC.Real.^_f_info" {
     GHC.Real.^_f_info:
         const GHC.Real.^_f_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const u1w4p_srtd;
 },
 _c1w3u() //  []
         { []
         }
     {offset
       c1w3u: // global
           I64[Sp - 8] = block_c1w3x_info;
           R3 = GHC.Real.even2_closure;
           R2 = P64[Sp + 8];
           Sp = Sp - 8;
           call GHC.Integer.Type.remInteger_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . u1w4q_srtd" {
     u1w4q_srtd:
         const S1sVz_srt;
         const 157;
         const 1;
         const 4611686018427388416;
         const 301989888;
 },
 _c1w3x() //  [R1]
         { []
         }
     {offset
       c1w3x: // global
           I64[Sp] = block_c1w3E_info;
           R3 = GHC.Real.even1_closure;
           R2 = R1;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1w3x_info" {
     block_c1w3x_info:
         const _c1w3x;
         const 2;
         const 18446744069414584350;
         const u1w4q_srtd;
 },
 section ""relreadonly" . u1w4r_srtd" {
     u1w4r_srtd:
         const S1sVz_srt;
         const 157;
         const 1;
         const 4611686018427388416;
         const 301989888;
 },
 _c1w3E() //  [R1]
         { []
         }
     {offset
       c1w3E: // global
           _s1sEO::P64 = P64[Sp + 16];
           if (R1 == 1) goto c1w4f; else goto c1w3M;
       c1w4f: // global
           I64[Sp] = block_c1w49_info;
           R3 = GHC.Real.even2_closure;
           R2 = _s1sEO::P64;
           call GHC.Integer.Type.quotInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
       c1w3M: // global
           I64[Sp] = block_c1w3J_info;
           R3 = GHC.Real.$fEnumRatio1_closure;
           R2 = _s1sEO::P64;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1w3E_info" {
     block_c1w3E_info:
         const _c1w3E;
         const 2;
         const 18446744069414584350;
         const u1w4r_srtd;
 },
 section ""relreadonly" . u1w4s_srtd" {
     u1w4s_srtd:
         const S1sVz_srt;
         const 157;
         const 1;
         const 4611686018427388416;
         const 301989888;
 },
 _c1w49() //  [R1]
         { []
         }
     {offset
       c1w49: // global
           _s1sEN::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1w4d_info;
           R3 = _s1sEN::P64;
           R2 = _s1sEN::P64;
           P64[Sp + 16] = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1w49_info" {
     block_c1w49_info:
         const _c1w49;
         const 130;
         const 18446744069414584350;
         const u1w4s_srtd;
 },
 section ""relreadonly" . u1w4t_srtd" {
     u1w4t_srtd:
         const S1sVz_srt;
         const 157;
         const 1;
         const 4611686018427388416;
         const 301989888;
 },
 _c1w4d() //  [R1]
         { []
         }
     {offset
       c1w4d: // global
           P64[Sp] = R1;
           P64[Sp + 8] = P64[Sp + 8];
           call _c1w3u() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1w4d_info" {
     block_c1w4d_info:
         const _c1w4d;
         const 1;
         const 18446744069414584350;
         const u1w4t_srtd;
 },
 section ""relreadonly" . u1w4u_srtd" {
     u1w4u_srtd:
         const S1sVz_srt;
         const 157;
         const 1;
         const 512;
         const 268435456;
 },
 _c1w3J() //  [R1]
         { []
         }
     {offset
       c1w3J: // global
           if (R1 == 1) goto c1w46; else goto c1w3X;
       c1w46: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c1w3X: // global
           I64[Sp] = block_c1w3Q_info;
           R3 = GHC.Real.even2_closure;
           R2 = P64[Sp + 16];
           call GHC.Integer.Type.quotInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1w3J_info" {
     block_c1w3J_info:
         const _c1w3J;
         const 2;
         const 18446744069414584350;
         const u1w4u_srtd;
 },
 section ""relreadonly" . u1w4v_srtd" {
     u1w4v_srtd:
         const S1sVz_srt;
         const 157;
         const 1;
         const 0;
         const 268435456;
 },
 _c1w3Q() //  [R1]
         { []
         }
     {offset
       c1w3Q: // global
           I64[Sp] = block_c1w3U_info;
           _s1sEN::P64 = P64[Sp + 8];
           R3 = _s1sEN::P64;
           R2 = _s1sEN::P64;
           P64[Sp + 16] = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1w3Q_info" {
     block_c1w3Q_info:
         const _c1w3Q;
         const 130;
         const 18446744069414584350;
         const u1w4v_srtd;
 },
 _c1w3U() //  [R1]
         { []
         }
     {offset
       c1w3U: // global
           R4 = P64[Sp + 8];
           R3 = P64[Sp + 16];
           R2 = R1;
           Sp = Sp + 24;
           call g_r1j3N_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1w3U_info" {
     block_c1w3U_info:
         const _c1w3U;
         const 2;
         const 4294967326;
         const S1sVz_srt+1248;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:18.576259649 UTC

[section ""cstring" . lvl5_r1j3O_bytes" {
     lvl5_r1j3O_bytes:
         I8[] [78,101,103,97,116,105,118,101,32,101,120,112,111,110,101,110,116]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:18.578869577 UTC

[section ""data" . GHC.Real.^1_closure" {
     GHC.Real.^1_closure:
         const GHC.Real.^1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Real.^1_entry() //  [R1]
         { []
         }
     {offset
       c1w5o: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1w5p; else goto c1w5q;
       c1w5p: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1w5q: // global
           (_c1w5j::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c1w5j::I64 == 0) goto c1w5l; else goto c1w5k;
       c1w5l: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c1w5k: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c1w5j::I64;
           I64[Sp - 24] = block_c1w5m_info;
           R2 = lvl5_r1j3O_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Real.^1_info" {
     GHC.Real.^1_info:
         const GHC.Real.^1_entry;
         const 0;
         const 4294967317;
         const S1sVz_srt+1264;
 },
 _c1w5m() //  [R1]
         { []
         }
     {offset
       c1w5m: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1w5m_info" {
     block_c1w5m_info:
         const _c1w5m;
         const 0;
         const 4294967326;
         const S1sVz_srt+1264;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:18.585506939 UTC

[section ""data" . GHC.Real.^_$s^_closure" {
     GHC.Real.^_$s^_closure:
         const GHC.Real.^_$s^_info;
         const 0;
 },
 section ""relreadonly" . u1w69_srtd" {
     u1w69_srtd:
         const S1sVz_srt+1008;
         const 35;
         const 28051505153;
 },
 GHC.Real.^_$s^_entry() //  [R2, R3]
         { []
         }
     {offset
       c1w5P: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1w5Q; else goto c1w5R;
       c1w5Q: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.^_$s^_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1w5R: // global
           I64[Sp - 24] = block_c1w5K_info;
           _s1sEY::P64 = R3;
           R3 = GHC.Real.even1_closure;
           _s1sEX::P64 = R2;
           R2 = _s1sEY::P64;
           P64[Sp - 16] = _s1sEX::P64;
           P64[Sp - 8] = _s1sEY::P64;
           Sp = Sp - 24;
           call GHC.Integer.Type.ltInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.^_$s^_info" {
     GHC.Real.^_$s^_info:
         const GHC.Real.^_$s^_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const u1w69_srtd;
 },
 section ""relreadonly" . u1w6a_srtd" {
     u1w6a_srtd:
         const S1sVz_srt+1008;
         const 35;
         const 19461570561;
 },
 _c1w5K() //  [R1]
         { []
         }
     {offset
       c1w5K: // global
           if (R1 == 1) goto c1w5O; else goto c1w5N;
       c1w5O: // global
           R1 = GHC.Real.^1_closure;
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c1w5N: // global
           I64[Sp] = block_c1w5U_info;
           R3 = GHC.Real.even1_closure;
           R2 = P64[Sp + 16];
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1w5K_info" {
     block_c1w5K_info:
         const _c1w5K;
         const 2;
         const 18446744069414584350;
         const u1w6a_srtd;
 },
 _c1w5U() //  [R1]
         { []
         }
     {offset
       c1w5U: // global
           if (R1 == 1) goto c1w65; else goto c1w61;
       c1w65: // global
           R1 = GHC.Real.$fEnumRatio1_closure;
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c1w61: // global
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Real.^_f_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1w5U_info" {
     block_c1w5U_info:
         const _c1w5U;
         const 2;
         const 9223372041149743134;
         const S1sVz_srt+1008;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:18.594456197 UTC

[section ""data" . GHC.Real.$w$s$cfromEnum_closure" {
     GHC.Real.$w$s$cfromEnum_closure:
         const GHC.Real.$w$s$cfromEnum_info;
         const 0;
 },
 GHC.Real.$w$s$cfromEnum_entry() //  [R2, R3]
         { []
         }
     {offset
       c1w6B: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1w6C; else goto c1w6D;
       c1w6C: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$w$s$cfromEnum_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1w6D: // global
           I64[Sp - 24] = block_c1w6w_info;
           _s1sF2::P64 = R3;
           R3 = GHC.Real.even1_closure;
           _s1sF1::P64 = R2;
           R2 = _s1sF2::P64;
           P64[Sp - 16] = _s1sF1::P64;
           P64[Sp - 8] = _s1sF2::P64;
           Sp = Sp - 24;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$w$s$cfromEnum_info" {
     GHC.Real.$w$s$cfromEnum_info:
         const GHC.Real.$w$s$cfromEnum_entry;
         const 0;
         const 2211908157454;
         const 8589934607;
         const S1sVz_srt+1216;
 },
 _c1w6w() //  [R1]
         { []
         }
     {offset
       c1w6w: // global
           if (R1 == 1) goto c1w6A; else goto c1w6z;
       c1w6A: // global
           R1 = GHC.Real.divZeroError_closure;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c1w6z: // global
           _s1sF2::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c1w6G_info;
           R3 = _s1sF2::P64;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Integer.Type.quotRemInteger_entry(R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1w6w_info" {
     block_c1w6w_info:
         const _c1w6w;
         const 2;
         const 4294967326;
         const S1sVz_srt+1216;
 },
 _c1w6G() //  [R1]
         { []
         }
     {offset
       c1w6G: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1w6G_info" {
     block_c1w6G_info:
         const _c1w6G;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:18.602566059 UTC

[section ""data" . GHC.Real.$fEnumRatio_$s$cfromEnum_closure" {
     GHC.Real.$fEnumRatio_$s$cfromEnum_closure:
         const GHC.Real.$fEnumRatio_$s$cfromEnum_info;
         const 0;
 },
 GHC.Real.$fEnumRatio_$s$cfromEnum_entry() //  [R2]
         { []
         }
     {offset
       c1w77: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1w7f; else goto c1w7g;
       c1w7f: // global
           R2 = R2;
           R1 = GHC.Real.$fEnumRatio_$s$cfromEnum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1w7g: // global
           I64[Sp - 8] = block_c1w74_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1w7l; else goto c1w75;
       u1w7l: // global
           call _c1w74(R1) args: 0, res: 0, upd: 0;
       c1w75: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fEnumRatio_$s$cfromEnum_info" {
     GHC.Real.$fEnumRatio_$s$cfromEnum_info:
         const GHC.Real.$fEnumRatio_$s$cfromEnum_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S1sVz_srt+1288;
 },
 _c1w74() //  [R1]
         { []
         }
     {offset
       c1w74: // global
           I64[Sp] = block_c1w7a_info;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Real.$w$s$cfromEnum_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1w74_info" {
     block_c1w74_info:
         const _c1w74;
         const 0;
         const 4294967326;
         const S1sVz_srt+1288;
 },
 _c1w7a() //  [R1]
         { []
         }
     {offset
       c1w7a: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1w7k; else goto c1w7j;
       c1w7k: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c1w7j: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1w7a_info" {
     block_c1w7a_info:
         const _c1w7a;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:18.611934276 UTC

[section ""data" . GHC.Real.$fEnumRatio_$cfromEnum_closure" {
     GHC.Real.$fEnumRatio_$cfromEnum_closure:
         const GHC.Real.$fEnumRatio_$cfromEnum_info;
 },
 sat_s1sFl_entry() //  [R1]
         { []
         }
     {offset
       c1w7R: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c1w7S; else goto c1w7T;
       c1w7S: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1w7T: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c1w7P_info;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_pp_info;
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = P64[R1 + 32];
           Sp = Sp - 48;
           call GHC.Real.quotRem_entry(R2) args: 32, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sFl_info" {
     sat_s1sFl_info:
         const sat_s1sFl_entry;
         const 3;
         const 15;
 },
 _c1w7P() //  [R1]
         { []
         }
     {offset
       c1w7P: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1w7P_info" {
     block_c1w7P_info:
         const _c1w7P;
         const 0;
         const 30;
 },
 GHC.Real.$fEnumRatio_$cfromEnum_entry() //  [R2, R3]
         { []
         }
     {offset
       c1w7X: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1w87; else goto c1w88;
       c1w87: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fEnumRatio_$cfromEnum_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1w88: // global
           I64[Sp - 16] = block_c1w7G_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1w8g; else goto c1w7H;
       u1w8g: // global
           call _c1w7G(R1) args: 0, res: 0, upd: 0;
       c1w7H: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fEnumRatio_$cfromEnum_info" {
     GHC.Real.$fEnumRatio_$cfromEnum_info:
         const GHC.Real.$fEnumRatio_$cfromEnum_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1w7G() //  [R1]
         { []
         }
     {offset
       c1w7G: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c1w8b; else goto c1w8a;
       c1w8b: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1w8a: // global
           _s1sFg::P64 = P64[R1 + 7];
           _s1sFh::P64 = P64[R1 + 15];
           I64[Hp - 32] = sat_s1sFl_info;
           _s1sFd::P64 = P64[Sp + 8];
           P64[Hp - 16] = _s1sFd::P64;
           P64[Hp - 8] = _s1sFg::P64;
           P64[Hp] = _s1sFh::P64;
           I64[Sp + 8] = block_c1w7Y_info;
           R2 = _s1sFd::P64;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = Hp - 32;
           Sp = Sp - 8;
           call GHC.Real.toInteger_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1w7G_info" {
     block_c1w7G_info:
         const _c1w7G;
         const 1;
         const 30;
 },
 _c1w7Y() //  [R1]
         { []
         }
     {offset
       c1w7Y: // global
           I64[Sp] = block_c1w82_info;
           R2 = R1;
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1w7Y_info" {
     block_c1w7Y_info:
         const _c1w7Y;
         const 0;
         const 30;
 },
 _c1w82() //  [R1]
         { []
         }
     {offset
       c1w82: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1w8f; else goto c1w8e;
       c1w8f: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c1w8e: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1w82_info" {
     block_c1w82_info:
         const _c1w82;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:18.623175331 UTC

[section ""data" . GHC.Real.ratioPrec1_closure" {
     GHC.Real.ratioPrec1_closure:
         const GHC.Types.I#_con_info;
         const 8;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:18.624852009 UTC

[section ""cstring" . GHC.Real.$fShowRatio2_bytes" {
     GHC.Real.$fShowRatio2_bytes:
         I8[] [32,37,32]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:18.631849787 UTC

[section ""data" . GHC.Real.$w$s$cshowsPrec_closure" {
     GHC.Real.$w$s$cshowsPrec_closure:
         const GHC.Real.$w$s$cshowsPrec_info;
         const 0;
 },
 GHC.Real.$w$s$cshowsPrec_slow() //  [R1]
         { []
         }
     {offset
       c1w8T: // global
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call GHC.Real.$w$s$cshowsPrec_entry(R5,
                                               R4,
                                               R3,
                                               R2,
                                               R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s1sFw_entry() //  [R1]
         { []
         }
     {offset
       c1w9b: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1w9c; else goto c1w9d;
       c1w9c: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1w9d: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c1w98_info;
           R4 = P64[R1 + 24];
           R3 = P64[R1 + 16];
           R2 = 8;
           Sp = Sp - 24;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sFw_info" {
     sat_s1sFw_info:
         const sat_s1sFw_entry;
         const 2;
         const 4294967314;
         const S1sVz_srt+1304;
 },
 _c1w98() //  [R1, R2]
         { []
         }
     {offset
       c1w98: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1w9g; else goto c1w9f;
       c1w9g: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c1w9f: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1w98_info" {
     block_c1w98_info:
         const _c1w98;
         const 0;
         const 30;
 },
 sat_s1sFx_entry() //  [R1]
         { []
         }
     {offset
       c1w9h: // global
           _s1sFx::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1w9i; else goto c1w9j;
       c1w9j: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1w9l; else goto c1w9k;
       c1w9l: // global
           HpAlloc = 32;
           goto c1w9i;
       c1w9i: // global
           R1 = _s1sFx::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1w9k: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1sFx::P64;
           _s1sFq::P64 = P64[_s1sFx::P64 + 16];
           _s1sFr::P64 = P64[_s1sFx::P64 + 24];
           I64[Hp - 24] = sat_s1sFw_info;
           P64[Hp - 8] = _s1sFq::P64;
           P64[Hp] = _s1sFr::P64;
           R3 = Hp - 24;
           R2 = GHC.Real.$fShowRatio2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sFx_info" {
     sat_s1sFx_info:
         const sat_s1sFx_entry;
         const 2;
         const 4294967314;
         const S1sVz_srt+1304;
 },
 sat_s1sFC_entry() //  [R1]
         { []
         }
     {offset
       c1w9D: // global
           _s1sFC::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c1w9E; else goto c1w9F;
       c1w9F: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1w9H; else goto c1w9G;
       c1w9H: // global
           HpAlloc = 24;
           goto c1w9E;
       c1w9E: // global
           R1 = _s1sFC::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1w9G: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1sFC::P64;
           _s1sFq::P64 = P64[_s1sFC::P64 + 16];
           _s1sFr::P64 = P64[_s1sFC::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s1sFr::P64;
           I64[Sp - 24] = block_c1w9A_info;
           R4 = Hp - 14;
           R3 = _s1sFq::P64;
           R2 = 8;
           Sp = Sp - 24;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sFC_info" {
     sat_s1sFC_info:
         const sat_s1sFC_entry;
         const 2;
         const 4294967314;
         const S1sVz_srt+1304;
 },
 _c1w9A() //  [R1, R2]
         { []
         }
     {offset
       c1w9A: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1w9K; else goto c1w9J;
       c1w9K: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c1w9J: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1w9A_info" {
     block_c1w9A_info:
         const _c1w9A;
         const 0;
         const 30;
 },
 sat_s1sFD_entry() //  [R1]
         { []
         }
     {offset
       c1w9L: // global
           _s1sFD::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1w9M; else goto c1w9N;
       c1w9N: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1w9P; else goto c1w9O;
       c1w9P: // global
           HpAlloc = 32;
           goto c1w9M;
       c1w9M: // global
           R1 = _s1sFD::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1w9O: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1sFD::P64;
           _s1sFq::P64 = P64[_s1sFD::P64 + 16];
           _s1sFr::P64 = P64[_s1sFD::P64 + 24];
           I64[Hp - 24] = sat_s1sFC_info;
           P64[Hp - 8] = _s1sFq::P64;
           P64[Hp] = _s1sFr::P64;
           R3 = Hp - 24;
           R2 = GHC.Real.$fShowRatio2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sFD_info" {
     sat_s1sFD_info:
         const sat_s1sFD_entry;
         const 2;
         const 4294967314;
         const S1sVz_srt+1304;
 },
 sat_s1sFH_entry() //  [R1]
         { []
         }
     {offset
       c1w9T: // global
           _s1sFH::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c1w9U; else goto c1w9V;
       c1w9V: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1w9X; else goto c1w9W;
       c1w9X: // global
           HpAlloc = 32;
           goto c1w9U;
       c1w9U: // global
           R1 = _s1sFH::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1w9W: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1sFH::P64;
           _s1sFp::P64 = P64[_s1sFH::P64 + 16];
           _s1sFq::P64 = P64[_s1sFH::P64 + 24];
           _s1sFr::P64 = P64[_s1sFH::P64 + 32];
           I64[Hp - 24] = sat_s1sFD_info;
           P64[Hp - 8] = _s1sFq::P64;
           P64[Hp] = _s1sFr::P64;
           I64[Sp - 24] = block_c1w9Q_info;
           R4 = Hp - 24;
           R3 = _s1sFp::P64;
           R2 = 8;
           Sp = Sp - 24;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sFH_info" {
     sat_s1sFH_info:
         const sat_s1sFH_entry;
         const 3;
         const 4294967311;
         const S1sVz_srt+1304;
 },
 _c1w9Q() //  [R1, R2]
         { []
         }
     {offset
       c1w9Q: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1wa0; else goto c1w9Z;
       c1wa0: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c1w9Z: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1w9Q_info" {
     block_c1w9Q_info:
         const _c1w9Q;
         const 0;
         const 30;
 },
 GHC.Real.$w$s$cshowsPrec_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c1wa4: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c1wa8; else goto c1wa7;
       c1wa8: // global
           HpAlloc = 40;
           R1 = GHC.Real.$w$s$cshowsPrec_closure;
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       c1wa7: // global
           if (%MO_S_Le_W64(R2, 7)) goto c1wa2; else goto c1wa3;
       c1wa2: // global
           I64[Hp - 32] = sat_s1sFx_info;
           P64[Hp - 16] = R4;
           P64[Hp - 8] = R5;
           _c1w90::P64 = Hp - 32;
           Hp = Hp - 8;
           R4 = _c1w90::P64;
           R3 = R3;
           R2 = 8;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
       c1wa3: // global
           I64[Hp - 32] = sat_s1sFH_info;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = R5;
           R2 = Hp - 32;
           R1 = GHC.Show.$fShow(,)4_closure;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$w$s$cshowsPrec_info" {
     GHC.Real.$w$s$cshowsPrec_info:
         const GHC.Real.$w$s$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 17179869184;
         const S1sVz_srt+1304;
         const 68;
         const GHC.Real.$w$s$cshowsPrec_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:18.653620652 UTC

[section ""data" . GHC.Real.$fShowRatio_$s$cshowsPrec_closure" {
     GHC.Real.$fShowRatio_$s$cshowsPrec_closure:
         const GHC.Real.$fShowRatio_$s$cshowsPrec_info;
         const 0;
 },
 GHC.Real.$fShowRatio_$s$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1wbb: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1wbm; else goto c1wbn;
       c1wbm: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fShowRatio_$s$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1wbn: // global
           I64[Sp - 24] = block_c1wb8_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u1wbu; else goto c1wb9;
       u1wbu: // global
           call _c1wb8(R1) args: 0, res: 0, upd: 0;
       c1wb9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fShowRatio_$s$cshowsPrec_info" {
     GHC.Real.$fShowRatio_$s$cshowsPrec_info:
         const GHC.Real.$fShowRatio_$s$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S1sVz_srt+1312;
 },
 _c1wb8() //  [R1]
         { []
         }
     {offset
       c1wb8: // global
           I64[Sp] = block_c1wbe_info;
           _s1sFM::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1sFM::I64;
           if (R1 & 7 != 0) goto u1wbt; else goto c1wbf;
       u1wbt: // global
           call _c1wbe(R1) args: 0, res: 0, upd: 0;
       c1wbf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1wb8_info" {
     block_c1wb8_info:
         const _c1wb8;
         const 2;
         const 4294967326;
         const S1sVz_srt+1312;
 },
 _c1wbe() //  [R1]
         { []
         }
     {offset
       c1wbe: // global
           _s1sFK::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c1wbj_info;
           R5 = _s1sFK::P64;
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = I64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Real.$w$s$cshowsPrec_entry(R5,
                                               R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1wbe_info" {
     block_c1wbe_info:
         const _c1wbe;
         const 66;
         const 4294967326;
         const S1sVz_srt+1312;
 },
 _c1wbj() //  [R1, R2]
         { []
         }
     {offset
       c1wbj: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1wbs; else goto c1wbr;
       c1wbs: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c1wbr: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1wbj_info" {
     block_c1wbj_info:
         const _c1wbj;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:18.667207343 UTC

[section ""data" . GHC.Real.$w$cshowsPrec_closure" {
     GHC.Real.$w$cshowsPrec_closure:
         const GHC.Real.$w$cshowsPrec_info;
 },
 GHC.Real.$w$cshowsPrec_slow() //  [R1]
         { []
         }
     {offset
       c1wbR: // global
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = I64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call GHC.Real.$w$cshowsPrec_entry(R5,
                                             R4,
                                             R3,
                                             R2,
                                             R1) args: 8, res: 0, upd: 8;
     }
 },
 f_s1sFX_entry() //  [R1]
         { []
         }
     {offset
       c1wbZ: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1wc0; else goto c1wc1;
       c1wc0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1wc1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Real.ratioPrec1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f_s1sFX_info" {
     f_s1sFX_info:
         const f_s1sFX_entry;
         const 2;
         const 18;
 },
 g1_s1sFY_entry() //  [R1]
         { []
         }
     {offset
       c1wc6: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1wc7; else goto c1wc8;
       c1wc7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1wc8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Real.ratioPrec1_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . g1_s1sFY_info" {
     g1_s1sFY_info:
         const g1_s1sFY_entry;
         const 2;
         const 18;
 },
 sat_s1sG2_entry() //  [R1]
         { []
         }
     {offset
       c1wcm: // global
           _s1sG2::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1wcn; else goto c1wco;
       c1wco: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1wcq; else goto c1wcp;
       c1wcq: // global
           HpAlloc = 32;
           goto c1wcn;
       c1wcn: // global
           R1 = _s1sG2::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1wcp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1sG2::P64;
           _s1sFY::P64 = P64[_s1sG2::P64 + 16];
           _s1sG0::P64 = P64[_s1sG2::P64 + 24];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s1sFY::P64;
           P64[Hp] = _s1sG0::P64;
           R3 = Hp - 24;
           R2 = GHC.Real.$fShowRatio2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sG2_info" {
     sat_s1sG2_info:
         const sat_s1sG2_entry;
         const 2;
         const 18;
 },
 sat_s1sG3_entry() //  [R1, R2]
         { []
         }
     {offset
       c1wcr: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1wcv; else goto c1wcu;
       c1wcv: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1wcu: // global
           _s1sFX::P64 = P64[R1 + 7];
           _s1sFY::P64 = P64[R1 + 15];
           I64[Hp - 24] = sat_s1sG2_info;
           P64[Hp - 8] = _s1sFY::P64;
           P64[Hp] = R2;
           R2 = Hp - 24;
           R1 = _s1sFX::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1sG3_info" {
     sat_s1sG3_info:
         const sat_s1sG3_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s1sG6_entry() //  [R1]
         { []
         }
     {offset
       c1wcP: // global
           _s1sG6::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1wcQ; else goto c1wcR;
       c1wcR: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1wcT; else goto c1wcS;
       c1wcT: // global
           HpAlloc = 24;
           goto c1wcQ;
       c1wcQ: // global
           R1 = _s1sG6::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1wcS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1sG6::P64;
           _s1sFY::P64 = P64[_s1sG6::P64 + 16];
           _s1sG4::P64 = P64[_s1sG6::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s1sG4::P64;
           R2 = Hp - 14;
           R1 = _s1sFY::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sG6_info" {
     sat_s1sG6_info:
         const sat_s1sG6_entry;
         const 2;
         const 18;
 },
 sat_s1sG7_entry() //  [R1]
         { []
         }
     {offset
       c1wcU: // global
           _s1sG7::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1wcV; else goto c1wcW;
       c1wcW: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1wcY; else goto c1wcX;
       c1wcY: // global
           HpAlloc = 32;
           goto c1wcV;
       c1wcV: // global
           R1 = _s1sG7::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1wcX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1sG7::P64;
           _s1sFY::P64 = P64[_s1sG7::P64 + 16];
           _s1sG4::P64 = P64[_s1sG7::P64 + 24];
           I64[Hp - 24] = sat_s1sG6_info;
           P64[Hp - 8] = _s1sFY::P64;
           P64[Hp] = _s1sG4::P64;
           R3 = Hp - 24;
           R2 = GHC.Real.$fShowRatio2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sG7_info" {
     sat_s1sG7_info:
         const sat_s1sG7_entry;
         const 2;
         const 18;
 },
 sat_s1sG8_entry() //  [R1]
         { []
         }
     {offset
       c1wcZ: // global
           _s1sG8::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1wd0; else goto c1wd1;
       c1wd1: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1wd3; else goto c1wd2;
       c1wd3: // global
           HpAlloc = 32;
           goto c1wd0;
       c1wd0: // global
           R1 = _s1sG8::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1wd2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1sG8::P64;
           _s1sFX::P64 = P64[_s1sG8::P64 + 16];
           _s1sFY::P64 = P64[_s1sG8::P64 + 24];
           _s1sG4::P64 = P64[_s1sG8::P64 + 32];
           I64[Hp - 24] = sat_s1sG7_info;
           P64[Hp - 8] = _s1sFY::P64;
           P64[Hp] = _s1sG4::P64;
           R2 = Hp - 24;
           R1 = _s1sFX::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sG8_info" {
     sat_s1sG8_info:
         const sat_s1sG8_entry;
         const 3;
         const 15;
 },
 sat_s1sG9_entry() //  [R1, R2]
         { []
         }
     {offset
       c1wd5: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c1wd9; else goto c1wd8;
       c1wd9: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1wd8: // global
           _s1sFX::P64 = P64[R1 + 7];
           _s1sFY::P64 = P64[R1 + 15];
           I64[Hp - 56] = sat_s1sG8_info;
           P64[Hp - 40] = _s1sFX::P64;
           P64[Hp - 32] = _s1sFY::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1sG9_info" {
     sat_s1sG9_info:
         const sat_s1sG9_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 GHC.Real.$w$cshowsPrec_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c1wdd: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c1wdh; else goto c1wdg;
       c1wdh: // global
           HpAlloc = 88;
           R1 = GHC.Real.$w$cshowsPrec_closure;
           P64[Sp - 32] = R2;
           I64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       c1wdg: // global
           I64[Hp - 80] = f_s1sFX_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R4;
           I64[Hp - 48] = g1_s1sFY_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R5;
           _c1wbV::P64 = Hp - 80;
           _c1wc2::P64 = Hp - 48;
           if (%MO_S_Le_W64(R3, 7)) goto c1wdb; else goto c1wdc;
       c1wdb: // global
           I64[Hp - 16] = sat_s1sG3_info;
           P64[Hp - 8] = _c1wbV::P64;
           P64[Hp] = _c1wc2::P64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1wdc: // global
           I64[Hp - 16] = sat_s1sG9_info;
           P64[Hp - 8] = _c1wbV::P64;
           P64[Hp] = _c1wc2::P64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$w$cshowsPrec_info" {
     GHC.Real.$w$cshowsPrec_info:
         const GHC.Real.$w$cshowsPrec_entry;
         const 0;
         const 14;
         const 17179869184;
         const 0;
         const 132;
         const GHC.Real.$w$cshowsPrec_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:18.688301794 UTC

[section ""data" . GHC.Real.$fShowRatio_$cshowsPrec_closure" {
     GHC.Real.$fShowRatio_$cshowsPrec_closure:
         const GHC.Real.$fShowRatio_$cshowsPrec_info;
 },
 GHC.Real.$fShowRatio_$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1wes: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1wew; else goto c1wex;
       c1wew: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fShowRatio_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1wex: // global
           I64[Sp - 24] = block_c1wep_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u1weF; else goto c1weq;
       u1weF: // global
           call _c1wep(R1) args: 0, res: 0, upd: 0;
       c1weq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fShowRatio_$cshowsPrec_info" {
     GHC.Real.$fShowRatio_$cshowsPrec_info:
         const GHC.Real.$fShowRatio_$cshowsPrec_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c1wep() //  [R1]
         { []
         }
     {offset
       c1wep: // global
           I64[Sp] = block_c1wev_info;
           _s1sGe::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s1sGe::I64;
           if (R1 & 7 != 0) goto u1weE; else goto c1wez;
       u1weE: // global
           call _c1wev(R1) args: 0, res: 0, upd: 0;
       c1wez: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1wep_info" {
     block_c1wep_info:
         const _c1wep;
         const 2;
         const 30;
 },
 _c1wev() //  [R1]
         { []
         }
     {offset
       c1wev: // global
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = I64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Real.$w$cshowsPrec_entry(R5,
                                             R4,
                                             R3,
                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1wev_info" {
     block_c1wev_info:
         const _c1wev;
         const 130;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:18.696260896 UTC

[section ""data" . GHC.Real.$fShowRatio1_closure" {
     GHC.Real.$fShowRatio1_closure:
         const GHC.Real.$fShowRatio1_info;
         const 0;
 },
 GHC.Real.$fShowRatio1_entry() //  [R2, R3]
         { []
         }
     {offset
       c1wf2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1wf8; else goto c1wf9;
       c1wf8: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fShowRatio1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1wf9: // global
           I64[Sp - 16] = block_c1weZ_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1wfe; else goto c1wf0;
       u1wfe: // global
           call _c1weZ(R1) args: 0, res: 0, upd: 0;
       c1wf0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fShowRatio1_info" {
     GHC.Real.$fShowRatio1_info:
         const GHC.Real.$fShowRatio1_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const S1sVz_srt+1312;
 },
 _c1weZ() //  [R1]
         { []
         }
     {offset
       c1weZ: // global
           _s1sGj::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1wf5_info;
           R5 = _s1sGj::P64;
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = 0;
           Sp = Sp + 8;
           call GHC.Real.$w$s$cshowsPrec_entry(R5,
                                               R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1weZ_info" {
     block_c1weZ_info:
         const _c1weZ;
         const 1;
         const 4294967326;
         const S1sVz_srt+1312;
 },
 _c1wf5() //  [R1, R2]
         { []
         }
     {offset
       c1wf5: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1wfd; else goto c1wfc;
       c1wfd: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c1wfc: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1wf5_info" {
     block_c1wf5_info:
         const _c1wf5;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:18.704185115 UTC

[section ""data" . GHC.Real.$fShowRatio_$s$cshowList_closure" {
     GHC.Real.$fShowRatio_$s$cshowList_closure:
         const GHC.Real.$fShowRatio_$s$cshowList_info;
         const 0;
 },
 GHC.Real.$fShowRatio_$s$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       c1wfz: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Real.$fShowRatio1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fShowRatio_$s$cshowList_info" {
     GHC.Real.$fShowRatio_$s$cshowList_info:
         const GHC.Real.$fShowRatio_$s$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S1sVz_srt+1328;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:18.708641649 UTC

[section ""data" . GHC.Real.$fShowRatio_$cshowList_closure" {
     GHC.Real.$fShowRatio_$cshowList_closure:
         const GHC.Real.$fShowRatio_$cshowList_info;
 },
 sat_s1sGz_entry() //  [R1, R2]
         { []
         }
     {offset
       c1wfS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1wfT; else goto c1wfU;
       c1wfT: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1wfU: // global
           I64[Sp - 16] = block_c1wfP_info;
           _s1sGs::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s1sGs::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1wfY; else goto c1wfQ;
       u1wfY: // global
           call _c1wfP(R1) args: 0, res: 0, upd: 0;
       c1wfQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1sGz_info" {
     sat_s1sGz_info:
         const sat_s1sGz_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c1wfP() //  [R1]
         { []
         }
     {offset
       c1wfP: // global
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = 0;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Real.$w$cshowsPrec_entry(R5,
                                             R4,
                                             R3,
                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1wfP_info" {
     block_c1wfP_info:
         const _c1wfP;
         const 1;
         const 30;
 },
 GHC.Real.$fShowRatio_$cshowList_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1wfZ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1wg3; else goto c1wg2;
       c1wg3: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fShowRatio_$cshowList_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1wg2: // global
           I64[Hp - 8] = sat_s1sGz_info;
           P64[Hp] = R2;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 7;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fShowRatio_$cshowList_info" {
     GHC.Real.$fShowRatio_$cshowList_info:
         const GHC.Real.$fShowRatio_$cshowList_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:18.717401038 UTC

[section ""data" . GHC.Real.$w$s$cshow_closure" {
     GHC.Real.$w$s$cshow_closure:
         const GHC.Real.$w$s$cshow_info;
         const 0;
 },
 sat_s1sGF_entry() //  [R1]
         { []
         }
     {offset
       c1wgx: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1wgy; else goto c1wgz;
       c1wgy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1wgz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c1wgu_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = P64[R1 + 16];
           R2 = 8;
           Sp = Sp - 24;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sGF_info" {
     sat_s1sGF_info:
         const sat_s1sGF_entry;
         const 1;
         const 4294967312;
         const S1sVz_srt+1304;
 },
 _c1wgu() //  [R1, R2]
         { []
         }
     {offset
       c1wgu: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1wgC; else goto c1wgB;
       c1wgC: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c1wgB: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1wgu_info" {
     block_c1wgu_info:
         const _c1wgu;
         const 0;
         const 30;
 },
 sat_s1sGG_entry() //  [R1]
         { []
         }
     {offset
       c1wgD: // global
           _s1sGG::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1wgE; else goto c1wgF;
       c1wgF: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1wgH; else goto c1wgG;
       c1wgH: // global
           HpAlloc = 24;
           goto c1wgE;
       c1wgE: // global
           R1 = _s1sGG::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1wgG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1sGG::P64;
           _s1sGB::P64 = P64[_s1sGG::P64 + 16];
           I64[Hp - 16] = sat_s1sGF_info;
           P64[Hp] = _s1sGB::P64;
           R3 = Hp - 16;
           R2 = GHC.Real.$fShowRatio2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sGG_info" {
     sat_s1sGG_info:
         const sat_s1sGG_entry;
         const 1;
         const 4294967312;
         const S1sVz_srt+1304;
 },
 GHC.Real.$w$s$cshow_entry() //  [R2, R3]
         { []
         }
     {offset
       c1wgI: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1wgM; else goto c1wgL;
       c1wgM: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$w$s$cshow_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1wgL: // global
           I64[Hp - 16] = sat_s1sGG_info;
           P64[Hp] = R3;
           R4 = Hp - 16;
           R3 = R2;
           R2 = 8;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$w$s$cshow_info" {
     GHC.Real.$w$s$cshow_info:
         const GHC.Real.$w$s$cshow_entry;
         const 0;
         const 73014444046;
         const 8589934607;
         const S1sVz_srt+1304;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:18.727800963 UTC

[section ""data" . GHC.Real.$fShowRatio_$s$cshow_closure" {
     GHC.Real.$fShowRatio_$s$cshow_closure:
         const GHC.Real.$fShowRatio_$s$cshow_info;
         const 0;
 },
 GHC.Real.$fShowRatio_$s$cshow_entry() //  [R2]
         { []
         }
     {offset
       c1whh: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1whn; else goto c1who;
       c1whn: // global
           R2 = R2;
           R1 = GHC.Real.$fShowRatio_$s$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1who: // global
           I64[Sp - 8] = block_c1whe_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1wht; else goto c1whf;
       u1wht: // global
           call _c1whe(R1) args: 0, res: 0, upd: 0;
       c1whf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fShowRatio_$s$cshow_info" {
     GHC.Real.$fShowRatio_$s$cshow_info:
         const GHC.Real.$fShowRatio_$s$cshow_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S1sVz_srt+1336;
 },
 _c1whe() //  [R1]
         { []
         }
     {offset
       c1whe: // global
           I64[Sp] = block_c1whk_info;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Real.$w$s$cshow_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1whe_info" {
     block_c1whe_info:
         const _c1whe;
         const 0;
         const 4294967326;
         const S1sVz_srt+1336;
 },
 _c1whk() //  [R1, R2]
         { []
         }
     {offset
       c1whk: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1whs; else goto c1whr;
       c1whs: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c1whr: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1whk_info" {
     block_c1whk_info:
         const _c1whk;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:18.73701695 UTC

[section ""data" . GHC.Real.$w$cshow_closure" {
     GHC.Real.$w$cshow_closure:
         const GHC.Real.$w$cshow_info;
 },
 sat_s1sGR_entry() //  [R1]
         { []
         }
     {offset
       c1whW: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c1whX; else goto c1whY;
       c1whX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1whY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = GHC.Real.ratioPrec1_closure+1;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = GHC.Types.[]_closure+1;
           Sp = Sp - 48;
           call GHC.Show.showsPrec_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sGR_info" {
     sat_s1sGR_info:
         const sat_s1sGR_entry;
         const 2;
         const 18;
 },
 sat_s1sGS_entry() //  [R1]
         { []
         }
     {offset
       c1whZ: // global
           _s1sGS::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1wi0; else goto c1wi1;
       c1wi1: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1wi3; else goto c1wi2;
       c1wi3: // global
           HpAlloc = 32;
           goto c1wi0;
       c1wi0: // global
           R1 = _s1sGS::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1wi2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1sGS::P64;
           _s1sGO::P64 = P64[_s1sGS::P64 + 16];
           _s1sGQ::P64 = P64[_s1sGS::P64 + 24];
           I64[Hp - 24] = sat_s1sGR_info;
           P64[Hp - 8] = _s1sGO::P64;
           P64[Hp] = _s1sGQ::P64;
           R3 = Hp - 24;
           R2 = GHC.Real.$fShowRatio2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sGS_info" {
     sat_s1sGS_info:
         const sat_s1sGS_entry;
         const 2;
         const 18;
 },
 GHC.Real.$w$cshow_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1wi4: // global
           _s1sGQ::P64 = R4;
           _s1sGP::P64 = R3;
           _s1sGO::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto c1wi5; else goto c1wi6;
       c1wi6: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1wi8; else goto c1wi7;
       c1wi8: // global
           HpAlloc = 32;
           goto c1wi5;
       c1wi5: // global
           R4 = _s1sGQ::P64;
           R3 = _s1sGP::P64;
           R2 = _s1sGO::P64;
           R1 = GHC.Real.$w$cshow_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1wi7: // global
           I64[Hp - 24] = sat_s1sGS_info;
           P64[Hp - 8] = _s1sGO::P64;
           P64[Hp] = _s1sGQ::P64;
           R2 = _s1sGO::P64;
           I64[Sp - 32] = stg_ap_ppp_info;
           P64[Sp - 24] = GHC.Real.ratioPrec1_closure+1;
           P64[Sp - 16] = _s1sGP::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 32;
           call GHC.Show.showsPrec_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$w$cshow_info" {
     GHC.Real.$w$cshow_info:
         const GHC.Real.$w$cshow_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:18.74555832 UTC

[section ""data" . GHC.Real.$fShowRatio_$cshow_closure" {
     GHC.Real.$fShowRatio_$cshow_closure:
         const GHC.Real.$fShowRatio_$cshow_info;
 },
 GHC.Real.$fShowRatio_$cshow_entry() //  [R2, R3]
         { []
         }
     {offset
       c1wiF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1wiG; else goto c1wiH;
       c1wiG: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fShowRatio_$cshow_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1wiH: // global
           I64[Sp - 16] = block_c1wiC_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1wiL; else goto c1wiD;
       u1wiL: // global
           call _c1wiC(R1) args: 0, res: 0, upd: 0;
       c1wiD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fShowRatio_$cshow_info" {
     GHC.Real.$fShowRatio_$cshow_info:
         const GHC.Real.$fShowRatio_$cshow_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1wiC() //  [R1]
         { []
         }
     {offset
       c1wiC: // global
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Real.$w$cshow_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1wiC_info" {
     block_c1wiC_info:
         const _c1wiC;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:18.750175414 UTC

[section ""data" . GHC.Real.$fShowRatio_$s$fShowRatio_closure" {
     GHC.Real.$fShowRatio_$s$fShowRatio_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Real.$fShowRatio_$s$cshowsPrec_closure+3;
         const GHC.Real.$fShowRatio_$s$cshow_closure+1;
         const GHC.Real.$fShowRatio_$s$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:18.753726186 UTC

[section ""data" . GHC.Real.$fShowRatio_closure" {
     GHC.Real.$fShowRatio_closure:
         const GHC.Real.$fShowRatio_info;
 },
 sat_s1sH1_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c1wj6: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Real.$fShowRatio_$cshowList_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1sH1_info" {
     sat_s1sH1_info:
         const sat_s1sH1_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_s1sH0_entry() //  [R1, R2]
         { []
         }
     {offset
       c1wje: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call GHC.Real.$fShowRatio_$cshow_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1sH0_info" {
     sat_s1sH0_info:
         const sat_s1sH0_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s1sGZ_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c1wjm: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Real.$fShowRatio_$cshowsPrec_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1sGZ_info" {
     sat_s1sGZ_info:
         const sat_s1sGZ_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 GHC.Real.$fShowRatio_entry() //  [R2]
         { []
         }
     {offset
       c1wjq: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c1wju; else goto c1wjt;
       c1wju: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = GHC.Real.$fShowRatio_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1wjt: // global
           I64[Hp - 72] = sat_s1sH1_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_s1sH0_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s1sGZ_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 38;
           P64[Hp - 8] = Hp - 55;
           P64[Hp] = Hp - 70;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fShowRatio_info" {
     GHC.Real.$fShowRatio_info:
         const GHC.Real.$fShowRatio_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:18.763219029 UTC

[section ""data" . GHC.Real.$w$slcm_closure" {
     GHC.Real.$w$slcm_closure:
         const GHC.Real.$w$slcm_info;
         const 0;
 },
 section ""relreadonly" . u1wkv_srtd" {
     u1wkv_srtd:
         const S1sVz_srt+856;
         const 64;
         const 13835093239654252545;
 },
 GHC.Real.$w$slcm_entry() //  [R2, R3]
         { []
         }
     {offset
       c1wjY: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1wjZ; else goto c1wk0;
       c1wjZ: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$w$slcm_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1wk0: // global
           if (R3 == 0) goto c1wjX; else goto c1wjW;
       c1wjX: // global
           R1 = 0;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1wjW: // global
           I64[Sp - 16] = block_c1wk2_info;
           R1 = R2;
           I64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1wku; else goto c1wk3;
       u1wku: // global
           call _c1wk2(R1) args: 0, res: 0, upd: 0;
       c1wk3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$w$slcm_info" {
     GHC.Real.$w$slcm_info:
         const GHC.Real.$w$slcm_entry;
         const 0;
         const 18446744069414584334;
         const 8589934606;
         const u1wkv_srtd;
 },
 section ""relreadonly" . u1wkw_srtd" {
     u1wkw_srtd:
         const S1sVz_srt+856;
         const 63;
         const 4611721202799476737;
 },
 _c1wk2() //  [R1]
         { []
         }
     {offset
       c1wk2: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1wk9; else goto c1wk8;
       c1wk9: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1wk8: // global
           _s1sH7::I64 = I64[R1 + 7];
           if (_s1sH7::I64 == 0) goto c1wkt; else goto c1wkf;
       c1wkt: // global
           Hp = Hp - 16;
           R1 = 0;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1wkf: // global
           I64[Hp - 8] = GHC.Types.W#_con_info;
           I64[Hp] = I64[Sp + 8];
           I64[Sp - 8] = block_c1wkd_info;
           R4 = Hp - 7;
           R3 = R1;
           R2 = GHC.Real.$fIntegralWord_closure+1;
           I64[Sp] = _s1sH7::I64;
           Sp = Sp - 8;
           call GHC.Real.gcd_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1wk2_info" {
     block_c1wk2_info:
         const _c1wk2;
         const 65;
         const 18446744069414584350;
         const u1wkw_srtd;
 },
 _c1wkd() //  [R1]
         { []
         }
     {offset
       c1wkd: // global
           _s1sHb::I64 = I64[R1 + 7];
           if (_s1sHb::I64 != 0) goto c1wkr; else goto c1wks;
       c1wkr: // global
           R1 = I64[Sp + 8] / _s1sHb::I64 * I64[Sp + 16];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1wks: // global
           R1 = GHC.Real.divZeroError_closure;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1wkd_info" {
     block_c1wkd_info:
         const _c1wkd;
         const 194;
         const 4294967326;
         const S1sVz_srt+1216;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:18.773501759 UTC

[section ""data" . GHC.Real.lcm_$slcm_closure" {
     GHC.Real.lcm_$slcm_closure:
         const GHC.Real.lcm_$slcm_info;
         const 0;
 },
 GHC.Real.lcm_$slcm_entry() //  [R2, R3]
         { []
         }
     {offset
       c1wl0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1wl8; else goto c1wl9;
       c1wl8: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.lcm_$slcm_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1wl9: // global
           I64[Sp - 16] = block_c1wkX_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1wle; else goto c1wkY;
       u1wle: // global
           call _c1wkX(R1) args: 0, res: 0, upd: 0;
       c1wkY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.lcm_$slcm_info" {
     GHC.Real.lcm_$slcm_info:
         const GHC.Real.lcm_$slcm_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S1sVz_srt+1360;
 },
 _c1wkX() //  [R1]
         { []
         }
     {offset
       c1wkX: // global
           _s1sHe::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1wl3_info;
           R3 = I64[R1 + 7];
           R2 = _s1sHe::P64;
           Sp = Sp + 8;
           call GHC.Real.$w$slcm_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1wkX_info" {
     block_c1wkX_info:
         const _c1wkX;
         const 1;
         const 4294967326;
         const S1sVz_srt+1360;
 },
 _c1wl3() //  [R1]
         { []
         }
     {offset
       c1wl3: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1wld; else goto c1wlc;
       c1wld: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c1wlc: // global
           I64[Hp - 8] = GHC.Types.W#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1wl3_info" {
     block_c1wl3_info:
         const _c1wl3;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:18.784130412 UTC

[section ""data" . GHC.Real.$w$slcm1_closure" {
     GHC.Real.$w$slcm1_closure:
         const GHC.Real.$w$slcm1_info;
         const 0;
 },
 sat_s1sHt_entry() //  [R1]
         { []
         }
     {offset
       c1wlW: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1wm0; else goto c1wlZ;
       c1wm0: // global
           HpAlloc = 16;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1wlZ: // global
           _s1sHo::I64 = I64[R1 + 24];
           if (%MO_S_Lt_W64(_s1sHo::I64, 0)) goto c1wlU; else goto c1wlV;
       c1wlU: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = -_s1sHo::I64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1wlV: // global
           _s1sHm::P64 = P64[R1 + 16];
           Hp = Hp - 16;
           R1 = _s1sHm::P64 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1sHt_info" {
     sat_s1sHt_info:
         const sat_s1sHt_entry;
         const 4294967297;
         const 19;
 },
 section ""relreadonly" . u1wni_srtd" {
     u1wni_srtd:
         const S1sVz_srt+344;
         const 130;
         const 17;
         const 35184372088832;
         const 2;
 },
 GHC.Real.$w$slcm1_entry() //  [R2, R3]
         { []
         }
     {offset
       c1wm9: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1wma; else goto c1wmb;
       c1wma: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$w$slcm1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1wmb: // global
           if (R3 == 0) goto u1wnh; else goto c1wm7;
       u1wnh: // global
           call _c1wm8() args: 0, res: 0, upd: 0;
       c1wm7: // global
           I64[Sp - 16] = block_c1wlB_info;
           R1 = R2;
           I64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1wng; else goto c1wlC;
       u1wng: // global
           call _c1wlB(R1) args: 0, res: 0, upd: 0;
       c1wlC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$w$slcm1_info" {
     GHC.Real.$w$slcm1_info:
         const GHC.Real.$w$slcm1_entry;
         const 0;
         const 18446744069414584334;
         const 8589934606;
         const u1wni_srtd;
 },
 section ""relreadonly" . u1wnj_srtd" {
     u1wnj_srtd:
         const S1sVz_srt+344;
         const 110;
         const 17;
         const 35184372088832;
 },
 _c1wlB() //  [R1]
         { []
         }
     {offset
       c1wlB: // global
           _s1sHo::I64 = I64[R1 + 7];
           if (_s1sHo::I64 == 0) goto u1wn8; else goto c1wn3;
       u1wn8: // global
           Sp = Sp + 16;
           call _c1wm8() args: 0, res: 0, upd: 0;
       c1wn3: // global
           _s1sHl::I64 = I64[Sp + 8];
           if (%MO_S_Lt_W64(_s1sHl::I64, 0)) goto c1wn0; else goto c1wn1;
       c1wn0: // global
           I64[Sp - 16] = _s1sHo::I64;
           I64[Sp - 8] = -_s1sHl::I64;
           P64[Sp] = R1;
           Sp = Sp - 16;
           goto u1wne;
       c1wn1: // global
           P64[Sp] = R1;
           I64[Sp - 16] = _s1sHo::I64;
           I64[Sp - 8] = _s1sHl::I64;
           Sp = Sp - 16;
           goto u1wne;
       u1wne: // global
           call _c1wlL() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1wlB_info" {
     block_c1wlB_info:
         const _c1wlB;
         const 65;
         const 18446744069414584350;
         const u1wnj_srtd;
 },
 _c1wm8() //  []
         { []
         }
     {offset
       c1wm8: // global
           R1 = 0;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c1wlL() //  []
         { []
         }
     {offset
       c1wlL: // global
           Hp = Hp + 32;
           _s1sHq::I64 = I64[Sp + 8];
           if (Hp > HpLim) (likely: False) goto c1wmg; else goto c1wmf;
       c1wmg: // global
           HpAlloc = 32;
           I64[Sp - 8] = block_c1wlK_info;
           R1 = _s1sHq::I64;
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c1wmf: // global
           I64[Hp - 24] = sat_s1sHt_info;
           P64[Hp - 8] = P64[Sp + 16];
           I64[Hp] = I64[Sp];
           I64[Sp - 8] = block_c1wmd_info;
           R3 = _s1sHq::I64;
           R2 = Hp - 24;
           Sp = Sp - 8;
           call GHC.Real.$wgcd'_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . u1wnk_srtd" {
     u1wnk_srtd:
         const S1sVz_srt+344;
         const 110;
         const 17;
         const 35184372088832;
 },
 _c1wlK() //  [R1]
         { []
         }
     {offset
       c1wlK: // global
           I64[Sp + 16] = R1;
           Sp = Sp + 8;
           call _c1wlL() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1wlK_info" {
     block_c1wlK_info:
         const _c1wlK;
         const 708;
         const 18446744069414584350;
         const u1wnk_srtd;
 },
 section ""relreadonly" . u1wnl_srtd" {
     u1wnl_srtd:
         const S1sVz_srt+344;
         const 110;
         const 1;
         const 35184372088832;
 },
 _c1wmd() //  [R1]
         { []
         }
     {offset
       c1wmd: // global
           _s1sHl::I64 = I64[Sp + 32];
           _s1sHo::I64 = I64[Sp + 8];
           _s1sHw::I64 = I64[R1 + 7];
           if (_s1sHw::I64 != (-1)) goto u1wn7; else goto c1wmV;
       u1wn7: // global
           if (_s1sHw::I64 != 0) goto c1wmB; else goto c1wmW;
       c1wmB: // global
           _s1sHy::I64 = %MO_S_Quot_W64(_s1sHo::I64,
                                        _s1sHw::I64) * _s1sHl::I64;
           if (%MO_S_Lt_W64(_s1sHy::I64, 0)) goto c1wmy; else goto c1wmz;
       c1wmy: // global
           R1 = -_s1sHy::I64;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1wmz: // global
           R1 = _s1sHy::I64;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1wmW: // global
           R1 = GHC.Real.divZeroError_closure;
           Sp = Sp + 40;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c1wmV: // global
           if (_s1sHo::I64 == (-9223372036854775808)) goto c1wmU; else goto c1wmT;
       c1wmU: // global
           R1 = GHC.Real.overflowError_closure;
           Sp = Sp + 40;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c1wmT: // global
           _s1sHB::I64 = %MO_S_Quot_W64(_s1sHo::I64, (-1)) * _s1sHl::I64;
           if (%MO_S_Lt_W64(_s1sHB::I64, 0)) goto c1wmQ; else goto c1wmR;
       c1wmQ: // global
           R1 = -_s1sHB::I64;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1wmR: // global
           R1 = _s1sHB::I64;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1wmd_info" {
     block_c1wmd_info:
         const _c1wmd;
         const 964;
         const 18446744069414584350;
         const u1wnl_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:18.801531816 UTC

[section ""data" . GHC.Real.lcm_$slcm1_closure" {
     GHC.Real.lcm_$slcm1_closure:
         const GHC.Real.lcm_$slcm1_info;
         const 0;
 },
 GHC.Real.lcm_$slcm1_entry() //  [R2, R3]
         { []
         }
     {offset
       c1woe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1wom; else goto c1won;
       c1wom: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.lcm_$slcm1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1won: // global
           I64[Sp - 16] = block_c1wob_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1wos; else goto c1woc;
       u1wos: // global
           call _c1wob(R1) args: 0, res: 0, upd: 0;
       c1woc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.lcm_$slcm1_info" {
     GHC.Real.lcm_$slcm1_info:
         const GHC.Real.lcm_$slcm1_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S1sVz_srt+1376;
 },
 _c1wob() //  [R1]
         { []
         }
     {offset
       c1wob: // global
           _s1sHI::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1woh_info;
           R3 = I64[R1 + 7];
           R2 = _s1sHI::P64;
           Sp = Sp + 8;
           call GHC.Real.$w$slcm1_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1wob_info" {
     block_c1wob_info:
         const _c1wob;
         const 1;
         const 4294967326;
         const S1sVz_srt+1376;
 },
 _c1woh() //  [R1]
         { []
         }
     {offset
       c1woh: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1wor; else goto c1woq;
       c1wor: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c1woq: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1woh_info" {
     block_c1woh_info:
         const _c1woh;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:18.813478423 UTC

[section ""data" . GHC.Real.lcm_closure" {
     GHC.Real.lcm_closure:
         const GHC.Real.lcm_info;
         const 0;
 },
 sat_s1sHU_entry() //  [R1]
         { []
         }
     {offset
       c1wp7: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1wp8; else goto c1wp9;
       c1wp8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1wp9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Real.even1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sHU_info" {
     sat_s1sHU_info:
         const sat_s1sHU_entry;
         const 1;
         const 4294967312;
         const S1sVz_srt+1224;
 },
 sat_s1sHW_entry() //  [R1]
         { []
         }
     {offset
       c1wpi: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1wpj; else goto c1wpk;
       c1wpj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1wpk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Real.even1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sHW_info" {
     sat_s1sHW_info:
         const sat_s1sHW_entry;
         const 1;
         const 4294967312;
         const S1sVz_srt+1224;
 },
 sat_s1sHY_entry() //  [R1]
         { []
         }
     {offset
       c1wpB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1wpC; else goto c1wpD;
       c1wpC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1wpD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.gcd_entry(R4, R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sHY_info" {
     sat_s1sHY_info:
         const sat_s1sHY_entry;
         const 3;
         const 4294967311;
         const S1sVz_srt+1392;
 },
 sat_s1sHZ_entry() //  [R1]
         { []
         }
     {offset
       c1wpE: // global
           _s1sHZ::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c1wpF; else goto c1wpG;
       c1wpG: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c1wpI; else goto c1wpH;
       c1wpI: // global
           HpAlloc = 40;
           goto c1wpF;
       c1wpF: // global
           R1 = _s1sHZ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1wpH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1sHZ::P64;
           _s1sHN::P64 = P64[_s1sHZ::P64 + 16];
           _s1sHO::P64 = P64[_s1sHZ::P64 + 24];
           _s1sHP::P64 = P64[_s1sHZ::P64 + 32];
           I64[Hp - 32] = sat_s1sHY_info;
           P64[Hp - 16] = _s1sHN::P64;
           P64[Hp - 8] = _s1sHO::P64;
           P64[Hp] = _s1sHP::P64;
           R2 = _s1sHN::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _s1sHO::P64;
           P64[Sp - 24] = Hp - 32;
           Sp = Sp - 40;
           call GHC.Real.quot_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sHZ_info" {
     sat_s1sHZ_info:
         const sat_s1sHZ_entry;
         const 3;
         const 4294967311;
         const S1sVz_srt+1392;
 },
 sat_s1sI0_entry() //  [R1]
         { []
         }
     {offset
       c1wpJ: // global
           _s1sI0::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto c1wpK; else goto c1wpL;
       c1wpL: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c1wpN; else goto c1wpM;
       c1wpN: // global
           HpAlloc = 40;
           goto c1wpK;
       c1wpK: // global
           R1 = _s1sI0::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1wpM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1sI0::P64;
           _s1sHN::P64 = P64[_s1sI0::P64 + 16];
           _s1sHO::P64 = P64[_s1sI0::P64 + 24];
           _s1sHP::P64 = P64[_s1sI0::P64 + 32];
           _s1sHR::P64 = P64[_s1sI0::P64 + 40];
           I64[Hp - 32] = sat_s1sHZ_info;
           P64[Hp - 16] = _s1sHN::P64;
           P64[Hp - 8] = _s1sHO::P64;
           P64[Hp] = _s1sHP::P64;
           R2 = _s1sHR::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 32;
           P64[Sp - 24] = _s1sHP::P64;
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sI0_info" {
     sat_s1sI0_info:
         const sat_s1sI0_entry;
         const 4;
         const 4294967311;
         const S1sVz_srt+1392;
 },
 GHC.Real.lcm_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1wpO: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c1wpP; else goto c1wpQ;
       c1wpP: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.lcm_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1wpQ: // global
           I64[Sp - 32] = block_c1woN_info;
           _s1sHN::P64 = R2;
           R2 = R2;
           P64[Sp - 24] = _s1sHN::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.lcm_info" {
     GHC.Real.lcm_info:
         const GHC.Real.lcm_entry;
         const 0;
         const 27021602059190286;
         const 12884901911;
         const S1sVz_srt+1224;
 },
 _c1woN() //  [R1]
         { []
         }
     {offset
       c1woN: // global
           I64[Sp - 8] = block_c1woR_info;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1woN_info" {
     block_c1woN_info:
         const _c1woN;
         const 3;
         const 9007203549708318;
         const S1sVz_srt+1224;
 },
 _c1woR() //  [R1]
         { []
         }
     {offset
       c1woR: // global
           I64[Sp] = block_c1woV_info;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1woR_info" {
     block_c1woR_info:
         const _c1woR;
         const 4;
         const 9007203549708318;
         const S1sVz_srt+1224;
 },
 _c1woV() //  [R1]
         { []
         }
     {offset
       c1woV: // global
           I64[Sp] = block_c1woZ_info;
           R2 = R1;
           call GHC.Classes.$p1Ord_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1woV_info" {
     block_c1woV_info:
         const _c1woV;
         const 4;
         const 9007203549708318;
         const S1sVz_srt+1224;
 },
 _c1woZ() //  [R1]
         { []
         }
     {offset
       c1woZ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1wpW; else goto c1wpV;
       c1wpW: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1wpV: // global
           I64[Hp - 16] = sat_s1sHU_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp - 8] = block_c1wpa_info;
           R2 = R1;
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = P64[Sp + 32];
           P64[Sp - 16] = Hp - 16;
           P64[Sp] = R1;
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1woZ_info" {
     block_c1woZ_info:
         const _c1woZ;
         const 4;
         const 9007203549708318;
         const S1sVz_srt+1224;
 },
 _c1wpa() //  [R1]
         { []
         }
     {offset
       c1wpa: // global
           if (R1 & 7 == 1) goto c1wpY; else goto u1wqh;
       c1wpY: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1wq1; else goto c1wq0;
       c1wq1: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1wq0: // global
           I64[Hp - 16] = sat_s1sHW_info;
           P64[Hp] = P64[Sp + 16];
           _s1sHT::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1wpl_info;
           R2 = _s1sHT::P64;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = P64[Sp + 32];
           P64[Sp] = Hp - 16;
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
       u1wqh: // global
           Sp = Sp + 16;
           call _c1wqe() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1wpa_info" {
     block_c1wpa_info:
         const _c1wpa;
         const 5;
         const 9007203549708318;
         const S1sVz_srt+1224;
 },
 _c1wpl() //  [R1]
         { []
         }
     {offset
       c1wpl: // global
           if (R1 & 7 == 1) goto c1wq3; else goto u1wqi;
       c1wq3: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c1wq6; else goto c1wq5;
       c1wq6: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1wq5: // global
           I64[Hp - 40] = sat_s1sI0_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = P64[Sp + 32];
           _s1sHR::P64 = P64[Sp + 8];
           P64[Hp] = _s1sHR::P64;
           R2 = _s1sHR::P64;
           I64[Sp + 24] = stg_ap_p_info;
           P64[Sp + 32] = Hp - 40;
           Sp = Sp + 24;
           call GHC.Num.abs_entry(R2) args: 24, res: 0, upd: 8;
       u1wqi: // global
           Sp = Sp + 8;
           call _c1wqe() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1wpl_info" {
     block_c1wpl_info:
         const _c1wpl;
         const 4;
         const 9007203549708318;
         const S1sVz_srt+1224;
 },
 _c1wqe() //  []
         { []
         }
     {offset
       c1wqe: // global
           R2 = P64[Sp];
           I64[Sp + 16] = stg_ap_p_info;
           P64[Sp + 24] = GHC.Real.even1_closure;
           Sp = Sp + 16;
           call GHC.Num.fromInteger_entry(R2) args: 24, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:18.839327387 UTC

[section ""data" . GHC.Real.$w$ctoEnum_closure" {
     GHC.Real.$w$ctoEnum_closure:
         const GHC.Real.$w$ctoEnum_info;
         const 0;
 },
 sat_s1sI7_entry() //  [R1]
         { []
         }
     {offset
       c1ws4: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1ws5; else goto c1ws6;
       c1ws5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1ws6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c1ws1_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u1wsa; else goto c1ws2;
       u1wsa: // global
           call _c1ws1(R1) args: 0, res: 0, upd: 0;
       c1ws2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sI7_info" {
     sat_s1sI7_info:
         const sat_s1sI7_entry;
         const 1;
         const 16;
 },
 _c1ws1() //  [R1]
         { []
         }
     {offset
       c1ws1: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1ws1_info" {
     block_c1ws1_info:
         const _c1ws1;
         const 0;
         const 30;
 },
 GHC.Real.$w$ctoEnum_entry() //  [R2, R3]
         { []
         }
     {offset
       c1wsb: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1wsf; else goto c1wsg;
       c1wsf: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$w$ctoEnum_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1wsg: // global
           I64[Sp - 16] = block_c1wrP_info;
           R2 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$w$ctoEnum_info" {
     GHC.Real.$w$ctoEnum_info:
         const GHC.Real.$w$ctoEnum_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S1sVz_srt+1408;
 },
 _c1wrP() //  [R1]
         { []
         }
     {offset
       c1wrP: // global
           I64[Sp] = block_c1wrT_info;
           R2 = R1;
           call GHC.Real.$p1Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1wrP_info" {
     block_c1wrP_info:
         const _c1wrP;
         const 1;
         const 4294967326;
         const S1sVz_srt+1416;
 },
 _c1wrT() //  [R1]
         { []
         }
     {offset
       c1wrT: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1wsk; else goto c1wsj;
       c1wsk: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1wsj: // global
           I64[Hp - 16] = sat_s1sI7_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp] = block_c1wsc_info;
           R2 = R1;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 16;
           P64[Sp + 8] = R1;
           Sp = Sp - 16;
           call GHC.Num.fromInteger_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1wrT_info" {
     block_c1wrT_info:
         const _c1wrT;
         const 1;
         const 4294967326;
         const S1sVz_srt+1416;
 },
 _c1wsc() //  [R1]
         { []
         }
     {offset
       c1wsc: // global
           I64[Sp] = block_c1wse_info;
           R2 = P64[Sp + 8];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = GHC.Real.$fEnumRatio1_closure;
           P64[Sp + 8] = R1;
           Sp = Sp - 16;
           call GHC.Num.fromInteger_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1wsc_info" {
     block_c1wsc_info:
         const _c1wsc;
         const 1;
         const 4294967326;
         const S1sVz_srt+1416;
 },
 _c1wse() //  [R1]
         { []
         }
     {offset
       c1wse: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1wse_info" {
     block_c1wse_info:
         const _c1wse;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:18.852709626 UTC

[section ""data" . GHC.Real.$fEnumRatio_$ctoEnum_closure" {
     GHC.Real.$fEnumRatio_$ctoEnum_closure:
         const GHC.Real.$fEnumRatio_$ctoEnum_info;
         const 0;
 },
 GHC.Real.$fEnumRatio_$ctoEnum_entry() //  [R2, R3]
         { []
         }
     {offset
       c1wt7: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1wt8; else goto c1wt9;
       c1wt8: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$fEnumRatio_$ctoEnum_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1wt9: // global
           I64[Sp - 8] = block_c1wt4_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Real.$w$ctoEnum_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fEnumRatio_$ctoEnum_info" {
     GHC.Real.$fEnumRatio_$ctoEnum_info:
         const GHC.Real.$fEnumRatio_$ctoEnum_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const S1sVz_srt+1408;
 },
 _c1wt4() //  [R1, R2]
         { []
         }
     {offset
       c1wt4: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1wtc; else goto c1wtb;
       c1wtc: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c1wtb: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1wt4_info" {
     block_c1wt4_info:
         const _c1wt4;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:18.858065521 UTC

[section ""data" . GHC.Real.$fEnumRatio_$s$fEnumRatio_closure" {
     GHC.Real.$fEnumRatio_$s$fEnumRatio_closure:
         const GHC.Enum.C:Enum_con_info;
         const GHC.Real.$fEnumRatio_$s$csucc_closure+1;
         const GHC.Real.$fEnumRatio_$s$cpred_closure+1;
         const GHC.Real.$fEnumRatio_$ctoRational_closure+1;
         const GHC.Real.$fEnumRatio_$s$cfromEnum_closure+1;
         const GHC.Real.$fEnumRatio_$snumericEnumFrom_closure+1;
         const GHC.Real.$fEnumRatio_$snumericEnumFromThen_closure+2;
         const GHC.Real.$fEnumRatio_$snumericEnumFromTo_closure+2;
         const GHC.Real.$fEnumRatio_$snumericEnumFromThenTo_closure+3;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:18.863764093 UTC

[section ""data" . GHC.Real.$fEnumRatio_closure" {
     GHC.Real.$fEnumRatio_closure:
         const GHC.Real.$fEnumRatio_info;
         const 0;
 },
 sat_s1sIn_entry() //  [R1]
         { []
         }
     {offset
       c1wtx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1wty; else goto c1wtz;
       c1wty: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1wtz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$fEnumRatio_$cenumFromThenTo_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sIn_info" {
     sat_s1sIn_info:
         const sat_s1sIn_entry;
         const 1;
         const 4294967312;
         const S1sVz_srt+1432;
 },
 sat_s1sIm_entry() //  [R1]
         { []
         }
     {offset
       c1wtE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1wtF; else goto c1wtG;
       c1wtF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1wtG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$fEnumRatio_$cenumFromTo_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sIm_info" {
     sat_s1sIm_info:
         const sat_s1sIm_entry;
         const 1;
         const 4294967312;
         const S1sVz_srt+1440;
 },
 sat_s1sIl_entry() //  [R1]
         { []
         }
     {offset
       c1wtL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1wtM; else goto c1wtN;
       c1wtM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1wtN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$fEnumRatio_$cenumFromThen_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sIl_info" {
     sat_s1sIl_info:
         const sat_s1sIl_entry;
         const 1;
         const 4294967312;
         const S1sVz_srt+1448;
 },
 sat_s1sIk_entry() //  [R1]
         { []
         }
     {offset
       c1wtS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1wtT; else goto c1wtU;
       c1wtT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1wtU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$fEnumRatio_$cenumFrom_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sIk_info" {
     sat_s1sIk_info:
         const sat_s1sIk_entry;
         const 1;
         const 4294967312;
         const S1sVz_srt+1456;
 },
 sat_s1sIj_entry() //  [R1, R2]
         { []
         }
     {offset
       c1wu0: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call GHC.Real.$fEnumRatio_$cfromEnum_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1sIj_info" {
     sat_s1sIj_info:
         const sat_s1sIj_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s1sIi_entry() //  [R1, R2]
         { []
         }
     {offset
       c1wu8: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call GHC.Real.$fEnumRatio_$ctoEnum_entry(R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1sIi_info" {
     sat_s1sIi_info:
         const sat_s1sIi_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S1sVz_srt+1424;
 },
 sat_s1sIh_entry() //  [R1, R2]
         { []
         }
     {offset
       c1wug: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call GHC.Real.$fEnumRatio_$cpred_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1sIh_info" {
     sat_s1sIh_info:
         const sat_s1sIh_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S1sVz_srt+1464;
 },
 sat_s1sIg_entry() //  [R1, R2]
         { []
         }
     {offset
       c1wuo: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call GHC.Real.$fEnumRatio_$csucc_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1sIg_info" {
     sat_s1sIg_info:
         const sat_s1sIg_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S1sVz_srt+1472;
 },
 GHC.Real.$fEnumRatio_entry() //  [R2]
         { []
         }
     {offset
       c1wus: // global
           Hp = Hp + 232;
           if (Hp > HpLim) (likely: False) goto c1wuw; else goto c1wuv;
       c1wuw: // global
           HpAlloc = 232;
           R2 = R2;
           R1 = GHC.Real.$fEnumRatio_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1wuv: // global
           I64[Hp - 224] = sat_s1sIn_info;
           P64[Hp - 208] = R2;
           I64[Hp - 200] = sat_s1sIm_info;
           P64[Hp - 184] = R2;
           I64[Hp - 176] = sat_s1sIl_info;
           P64[Hp - 160] = R2;
           I64[Hp - 152] = sat_s1sIk_info;
           P64[Hp - 136] = R2;
           I64[Hp - 128] = sat_s1sIj_info;
           P64[Hp - 120] = R2;
           I64[Hp - 112] = sat_s1sIi_info;
           P64[Hp - 104] = R2;
           I64[Hp - 96] = sat_s1sIh_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_s1sIg_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = GHC.Enum.C:Enum_con_info;
           P64[Hp - 56] = Hp - 79;
           P64[Hp - 48] = Hp - 95;
           P64[Hp - 40] = Hp - 111;
           P64[Hp - 32] = Hp - 127;
           P64[Hp - 24] = Hp - 152;
           P64[Hp - 16] = Hp - 176;
           P64[Hp - 8] = Hp - 200;
           P64[Hp] = Hp - 224;
           R1 = Hp - 63;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$fEnumRatio_info" {
     GHC.Real.$fEnumRatio_info:
         const GHC.Real.$fEnumRatio_entry;
         const 0;
         const 1095216660494;
         const 4294967301;
         const S1sVz_srt+1424;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:18.880958571 UTC

[section ""data" . $wg_r1j3P_closure" {
     $wg_r1j3P_closure:
         const $wg_r1j3P_info;
 },
 $wg_r1j3P_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1wvy: // global
           _s1sIq::I64 = R4;
           _s1sIp::I64 = R3;
           _s1sIo::I64 = R2;
           goto c1wvq;
       c1wvq: // global
           if (_s1sIp::I64 - (_s1sIp::I64 + (_s1sIp::I64 >> 63)) & (-2) == 0) goto c1wvx; else goto c1wvw;
       c1wvx: // global
           _s1sIp::I64 = %MO_S_Shr_W64(_s1sIp::I64 + (_s1sIp::I64 >> 63), 1);
           _s1sIo::I64 = _s1sIo::I64 * _s1sIo::I64;
           goto c1wvq;
       c1wvw: // global
           if (_s1sIp::I64 == 1) goto c1wvM; else goto c1wvI;
       c1wvM: // global
           R1 = _s1sIo::I64 * _s1sIq::I64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1wvI: // global
           _s1sIq::I64 = _s1sIo::I64 * _s1sIq::I64;
           _s1sIp::I64 = %MO_S_Shr_W64(_s1sIp::I64 + (_s1sIp::I64 >> 63), 1);
           _s1sIo::I64 = _s1sIo::I64 * _s1sIo::I64;
           goto c1wvq;
     }
 },
 section ""relreadonly" . $wg_r1j3P_info" {
     $wg_r1j3P_info:
         const $wg_r1j3P_entry;
         const 0;
         const 14;
         const 12884901904;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:18.885624315 UTC

[section ""data" . GHC.Real.$wf1_closure" {
     GHC.Real.$wf1_closure:
         const GHC.Real.$wf1_info;
 },
 GHC.Real.$wf1_entry() //  [R2, R3]
         { []
         }
     {offset
       c1www: // global
           _s1sIz::I64 = R3;
           _s1sIy::I64 = R2;
           goto c1wwo;
       c1wwo: // global
           if (_s1sIz::I64 - (_s1sIz::I64 + (_s1sIz::I64 >> 63)) & (-2) == 0) goto c1wwv; else goto c1wwu;
       c1wwv: // global
           _s1sIz::I64 = %MO_S_Shr_W64(_s1sIz::I64 + (_s1sIz::I64 >> 63), 1);
           _s1sIy::I64 = _s1sIy::I64 * _s1sIy::I64;
           goto c1wwo;
       c1wwu: // global
           if (_s1sIz::I64 == 1) goto c1wwH; else goto c1wwG;
       c1wwH: // global
           R1 = _s1sIy::I64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1wwG: // global
           R4 = _s1sIy::I64;
           R3 = %MO_S_Shr_W64(_s1sIz::I64 + (_s1sIz::I64 >> 63), 1);
           R2 = _s1sIy::I64 * _s1sIy::I64;
           call $wg_r1j3P_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$wf1_info" {
     GHC.Real.$wf1_info:
         const GHC.Real.$wf1_entry;
         const 0;
         const 14;
         const 8589934604;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:18.890729003 UTC

[section ""data" . GHC.Real.^_f2_closure" {
     GHC.Real.^_f2_closure:
         const GHC.Real.^_f2_info;
 },
 GHC.Real.^_f2_entry() //  [R2, R3]
         { []
         }
     {offset
       c1wxk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1wxx; else goto c1wxy;
       c1wxx: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.^_f2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1wxy: // global
           I64[Sp - 16] = block_c1wxh_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1wxF; else goto c1wxi;
       u1wxF: // global
           call _c1wxh(R1) args: 0, res: 0, upd: 0;
       c1wxi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.^_f2_info" {
     GHC.Real.^_f2_info:
         const GHC.Real.^_f2_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c1wxh() //  [R1]
         { []
         }
     {offset
       c1wxh: // global
           I64[Sp] = block_c1wxn_info;
           _s1sIJ::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1sIJ::I64;
           if (R1 & 7 != 0) goto u1wxE; else goto c1wxo;
       u1wxE: // global
           call _c1wxn(R1) args: 0, res: 0, upd: 0;
       c1wxo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1wxh_info" {
     block_c1wxh_info:
         const _c1wxh;
         const 1;
         const 30;
 },
 _c1wxn() //  [R1]
         { []
         }
     {offset
       c1wxn: // global
           _s1sIJ::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_c1wxs_info;
           R3 = I64[R1 + 7];
           R2 = _s1sIJ::I64;
           Sp = Sp + 8;
           call GHC.Real.$wf1_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1wxn_info" {
     block_c1wxn_info:
         const _c1wxn;
         const 65;
         const 30;
 },
 _c1wxs() //  [R1]
         { []
         }
     {offset
       c1wxs: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1wxD; else goto c1wxC;
       c1wxD: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c1wxC: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1wxs_info" {
     block_c1wxs_info:
         const _c1wxs;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:18.899642758 UTC

[section ""data" . GHC.Real.^3_closure" {
     GHC.Real.^3_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:18.902224728 UTC

[section ""data" . GHC.Real.^2_closure" {
     GHC.Real.^2_closure:
         const GHC.Real.^2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Real.^2_entry() //  [R1]
         { []
         }
     {offset
       c1wya: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1wyb; else goto c1wyc;
       c1wyb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1wyc: // global
           (_c1wy5::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c1wy5::I64 == 0) goto c1wy7; else goto c1wy6;
       c1wy7: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c1wy6: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c1wy5::I64;
           I64[Sp - 24] = block_c1wy8_info;
           R2 = lvl5_r1j3O_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Real.^2_info" {
     GHC.Real.^2_info:
         const GHC.Real.^2_entry;
         const 0;
         const 4294967317;
         const S1sVz_srt+1264;
 },
 _c1wy8() //  [R1]
         { []
         }
     {offset
       c1wy8: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1wy8_info" {
     block_c1wy8_info:
         const _c1wy8;
         const 0;
         const 4294967326;
         const S1sVz_srt+1264;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:18.909000544 UTC

[section ""data" . GHC.Real.^_$s^2_closure" {
     GHC.Real.^_$s^2_closure:
         const GHC.Real.^_$s^2_info;
         const 0;
 },
 GHC.Real.^_$s^2_entry() //  [R2, R3]
         { []
         }
     {offset
       c1wyz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1wyA; else goto c1wyB;
       c1wyA: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.^_$s^2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1wyB: // global
           I64[Sp - 16] = block_c1wyw_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1wz5; else goto c1wyx;
       u1wz5: // global
           call _c1wyw(R1) args: 0, res: 0, upd: 0;
       c1wyx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.^_$s^2_info" {
     GHC.Real.^_$s^2_info:
         const GHC.Real.^_$s^2_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S1sVz_srt+1488;
 },
 _c1wyw() //  [R1]
         { []
         }
     {offset
       c1wyw: // global
           _s1sIR::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s1sIR::I64, 0)) goto c1wz2; else goto c1wz3;
       c1wz2: // global
           if (_s1sIR::I64 == 0) goto c1wz0; else goto c1wyV;
       c1wz0: // global
           R1 = GHC.Real.^3_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1wyV: // global
           I64[Sp] = block_c1wyK_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1sIR::I64;
           if (R1 & 7 != 0) goto u1wz4; else goto c1wyL;
       u1wz4: // global
           call _c1wyK(R1) args: 0, res: 0, upd: 0;
       c1wyL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c1wz3: // global
           R1 = GHC.Real.^2_closure;
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1wyw_info" {
     block_c1wyw_info:
         const _c1wyw;
         const 1;
         const 4294967326;
         const S1sVz_srt+1496;
 },
 _c1wyK() //  [R1]
         { []
         }
     {offset
       c1wyK: // global
           _s1sIT::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_c1wyP_info;
           R3 = _s1sIT::I64;
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Real.$wf1_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1wyK_info" {
     block_c1wyK_info:
         const _c1wyK;
         const 65;
         const 30;
 },
 _c1wyP() //  [R1]
         { []
         }
     {offset
       c1wyP: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1wyZ; else goto c1wyY;
       c1wyZ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c1wyY: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1wyP_info" {
     block_c1wyP_info:
         const _c1wyP;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:18.919996833 UTC

[section ""data" . $wg1_r1j3Q_closure" {
     $wg1_r1j3Q_closure:
         const $wg1_r1j3Q_info;
         const 0;
 },
 $wg1_r1j3Q_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1wzC: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1wzD; else goto u1wAf;
       c1wzD: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = $wg1_r1j3Q_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       u1wAf: // global
           P64[Sp - 24] = R2;
           I64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call _c1wzu() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . $wg1_r1j3Q_info" {
     $wg1_r1j3Q_info:
         const $wg1_r1j3Q_entry;
         const 0;
         const 12884901902;
         const 12884901909;
         const S1sVz_srt+1504;
 },
 _c1wzu() //  []
         { []
         }
     {offset
       c1wzu: // global
           _s1sIX::P64 = P64[Sp];
           _s1sIY::I64 = I64[Sp + 8];
           if (_s1sIY::I64 - (_s1sIY::I64 + (_s1sIY::I64 >> 63)) & (-2) == 0) goto c1wzB; else goto c1wzA;
       c1wzB: // global
           I64[Sp] = block_c1wA9_info;
           R3 = _s1sIX::P64;
           R2 = _s1sIX::P64;
           I64[Sp + 8] = %MO_S_Shr_W64(_s1sIY::I64 + (_s1sIY::I64 >> 63), 1);
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
       c1wzA: // global
           _s1sIZ::P64 = P64[Sp + 16];
           if (_s1sIY::I64 == 1) goto c1wA1; else goto c1wzV;
       c1wA1: // global
           R3 = _s1sIZ::P64;
           R2 = _s1sIX::P64;
           Sp = Sp + 24;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 0, upd: 8;
       c1wzV: // global
           I64[Sp - 8] = block_c1wzM_info;
           R3 = _s1sIZ::P64;
           R2 = _s1sIX::P64;
           I64[Sp + 16] = _s1sIY::I64;
           Sp = Sp - 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c1wA9() //  [R1]
         { []
         }
     {offset
       c1wA9: // global
           P64[Sp] = R1;
           I64[Sp + 8] = I64[Sp + 8];
           P64[Sp + 16] = P64[Sp + 16];
           call _c1wzu() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1wA9_info" {
     block_c1wA9_info:
         const _c1wA9;
         const 66;
         const 4294967326;
         const S1sVz_srt+1512;
 },
 _c1wzM() //  [R1]
         { []
         }
     {offset
       c1wzM: // global
           _s1sIX::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1wzT_info;
           R3 = _s1sIX::P64;
           R2 = _s1sIX::P64;
           P64[Sp + 16] = R1;
           _s1sJ1::I64 = I64[Sp + 24];
           I64[Sp + 24] = %MO_S_Shr_W64(_s1sJ1::I64 + (_s1sJ1::I64 >> 63), 1);
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1wzM_info" {
     block_c1wzM_info:
         const _c1wzM;
         const 387;
         const 4294967326;
         const S1sVz_srt+1512;
 },
 _c1wzT() //  [R1]
         { []
         }
     {offset
       c1wzT: // global
           P64[Sp] = R1;
           _s1sIZ::P64 = P64[Sp + 8];
           I64[Sp + 8] = I64[Sp + 16];
           P64[Sp + 16] = _s1sIZ::P64;
           call _c1wzu() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1wzT_info" {
     block_c1wzT_info:
         const _c1wzT;
         const 130;
         const 4294967326;
         const S1sVz_srt+1512;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:18.931929298 UTC

[section ""data" . GHC.Real.$wf_closure" {
     GHC.Real.$wf_closure:
         const GHC.Real.$wf_info;
         const 0;
 },
 GHC.Real.$wf_entry() //  [R2, R3]
         { []
         }
     {offset
       c1wB2: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1wB3; else goto u1wBA;
       c1wB3: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$wf_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       u1wBA: // global
           P64[Sp - 16] = R2;
           I64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _c1wAU() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . GHC.Real.$wf_info" {
     GHC.Real.$wf_info:
         const GHC.Real.$wf_entry;
         const 0;
         const 30064771086;
         const 8589934606;
         const S1sVz_srt+1504;
 },
 _c1wAU() //  []
         { []
         }
     {offset
       c1wAU: // global
           _s1sJ7::P64 = P64[Sp];
           _s1sJ8::I64 = I64[Sp + 8];
           if (_s1sJ8::I64 - (_s1sJ8::I64 + (_s1sJ8::I64 >> 63)) & (-2) == 0) goto c1wB1; else goto c1wB0;
       c1wB1: // global
           I64[Sp] = block_c1wBu_info;
           R3 = _s1sJ7::P64;
           R2 = _s1sJ7::P64;
           I64[Sp + 8] = %MO_S_Shr_W64(_s1sJ8::I64 + (_s1sJ8::I64 >> 63), 1);
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
       c1wB0: // global
           if (_s1sJ8::I64 == 1) goto c1wBm; else goto c1wBh;
       c1wBm: // global
           R1 = _s1sJ7::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c1wBh: // global
           I64[Sp - 8] = block_c1wBf_info;
           R3 = _s1sJ7::P64;
           R2 = _s1sJ7::P64;
           I64[Sp + 8] = %MO_S_Shr_W64(_s1sJ8::I64 + (_s1sJ8::I64 >> 63), 1);
           Sp = Sp - 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c1wBu() //  [R1]
         { []
         }
     {offset
       c1wBu: // global
           P64[Sp] = R1;
           I64[Sp + 8] = I64[Sp + 8];
           call _c1wAU() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1wBu_info" {
     block_c1wBu_info:
         const _c1wBu;
         const 65;
         const 12884901918;
         const S1sVz_srt+1504;
 },
 _c1wBf() //  [R1]
         { []
         }
     {offset
       c1wBf: // global
           R4 = P64[Sp + 8];
           R3 = I64[Sp + 16];
           R2 = R1;
           Sp = Sp + 24;
           call $wg1_r1j3Q_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1wBf_info" {
     block_c1wBf_info:
         const _c1wBf;
         const 130;
         const 4294967326;
         const S1sVz_srt+1504;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:18.940023029 UTC

[section ""data" . GHC.Real.^_f1_closure" {
     GHC.Real.^_f1_closure:
         const GHC.Real.^_f1_info;
         const 0;
 },
 GHC.Real.^_f1_entry() //  [R2, R3]
         { []
         }
     {offset
       c1wCf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1wCg; else goto c1wCh;
       c1wCg: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.^_f1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1wCh: // global
           I64[Sp - 16] = block_c1wCc_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1wCl; else goto c1wCd;
       u1wCl: // global
           call _c1wCc(R1) args: 0, res: 0, upd: 0;
       c1wCd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.^_f1_info" {
     GHC.Real.^_f1_info:
         const GHC.Real.^_f1_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S1sVz_srt+1520;
 },
 _c1wCc() //  [R1]
         { []
         }
     {offset
       c1wCc: // global
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Real.$wf_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1wCc_info" {
     block_c1wCc_info:
         const _c1wCc;
         const 1;
         const 4294967326;
         const S1sVz_srt+1520;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:18.945885684 UTC

[section ""data" . GHC.Real.^_$s^1_closure" {
     GHC.Real.^_$s^1_closure:
         const GHC.Real.^_$s^1_info;
         const 0;
 },
 section ""relreadonly" . u1wCU_srtd" {
     u1wCU_srtd:
         const S1sVz_srt+1280;
         const 33;
         const 5368840193;
 },
 GHC.Real.^_$s^1_entry() //  [R2, R3]
         { []
         }
     {offset
       c1wCD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1wCE; else goto c1wCF;
       c1wCE: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.^_$s^1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1wCF: // global
           I64[Sp - 16] = block_c1wCA_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1wCT; else goto c1wCB;
       u1wCT: // global
           call _c1wCA(R1) args: 0, res: 0, upd: 0;
       c1wCB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.^_$s^1_info" {
     GHC.Real.^_$s^1_info:
         const GHC.Real.^_$s^1_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const u1wCU_srtd;
 },
 _c1wCA() //  [R1]
         { []
         }
     {offset
       c1wCA: // global
           _s1sJm::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s1sJm::I64, 0)) goto c1wCR; else goto c1wCS;
       c1wCR: // global
           if (_s1sJm::I64 == 0) goto c1wCP; else goto c1wCO;
       c1wCP: // global
           R1 = GHC.Real.$fEnumRatio1_closure;
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c1wCO: // global
           R3 = _s1sJm::I64;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Real.$wf_entry(R3, R2) args: 8, res: 0, upd: 8;
       c1wCS: // global
           R1 = GHC.Real.^1_closure;
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1wCA_info" {
     block_c1wCA_info:
         const _c1wCA;
         const 1;
         const 4612248972675776542;
         const S1sVz_srt+1280;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:18.952396929 UTC

[section ""data" . lvl6_r1j3R_closure" {
     lvl6_r1j3R_closure:
         const lvl6_r1j3R_info;
         const 0;
         const 0;
         const 0;
 },
 lvl6_r1j3R_entry() //  [R1]
         { []
         }
     {offset
       c1wDg: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1wDh; else goto c1wDi;
       c1wDh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1wDi: // global
           (_c1wDb::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c1wDb::I64 == 0) goto c1wDd; else goto c1wDc;
       c1wDd: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c1wDc: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c1wDb::I64;
           I64[Sp - 24] = block_c1wDe_info;
           R2 = lvl5_r1j3O_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl6_r1j3R_info" {
     lvl6_r1j3R_info:
         const lvl6_r1j3R_entry;
         const 0;
         const 4294967317;
         const S1sVz_srt+1544;
 },
 _c1wDe() //  [R1]
         { []
         }
     {offset
       c1wDe: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1wDe_info" {
     block_c1wDe_info:
         const _c1wDe;
         const 0;
         const 4294967326;
         const S1sVz_srt+1544;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:18.958409375 UTC

[section ""data" . lvl7_r1j3S_closure" {
     lvl7_r1j3S_closure:
         const lvl7_r1j3S_info;
         const 0;
         const 0;
         const 0;
 },
 lvl7_r1j3S_entry() //  [R1]
         { []
         }
     {offset
       c1wDG: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1wDH; else goto c1wDI;
       c1wDH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1wDI: // global
           (_c1wDB::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c1wDB::I64 == 0) goto c1wDD; else goto c1wDC;
       c1wDD: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c1wDC: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c1wDB::I64;
           I64[Sp - 24] = block_c1wDE_info;
           R2 = lvl5_r1j3O_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl7_r1j3S_info" {
     lvl7_r1j3S_info:
         const lvl7_r1j3S_entry;
         const 0;
         const 4294967317;
         const S1sVz_srt+1544;
 },
 _c1wDE() //  [R1]
         { []
         }
     {offset
       c1wDE: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1wDE_info" {
     block_c1wDE_info:
         const _c1wDE;
         const 0;
         const 4294967326;
         const S1sVz_srt+1544;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:18.980941529 UTC

[section ""data" . GHC.Real.^_closure" {
     GHC.Real.^_closure:
         const GHC.Real.^_info;
         const 0;
 },
 $dNum1_s1sJw_entry() //  [R1]
         { []
         }
     {offset
       c1wFr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1wFs; else goto c1wFt;
       c1wFs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1wFt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dNum1_s1sJw_info" {
     $dNum1_s1sJw_info:
         const $dNum1_s1sJw_entry;
         const 1;
         const 16;
 },
 sat_s1sJy_entry() //  [R1]
         { []
         }
     {offset
       c1wFw: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1wFx; else goto c1wFy;
       c1wFx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1wFy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Real.even1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sJy_info" {
     sat_s1sJy_info:
         const sat_s1sJy_entry;
         const 1;
         const 4294967312;
         const S1sVz_srt+1552;
 },
 sat_s1sJB_entry() //  [R1]
         { []
         }
     {offset
       c1wFB: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1wFC; else goto c1wFD;
       c1wFC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1wFD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Real.even1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sJB_info" {
     sat_s1sJB_info:
         const sat_s1sJB_entry;
         const 1;
         const 4294967312;
         const S1sVz_srt+1552;
 },
 lvl8_s1sJD_entry() //  [R1]
         { []
         }
     {offset
       c1wFG: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1wFH; else goto c1wFI;
       c1wFH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1wFI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Real.even2_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl8_s1sJD_info" {
     lvl8_s1sJD_info:
         const lvl8_s1sJD_entry;
         const 1;
         const 4294967312;
         const S1sVz_srt+1560;
 },
 lvl9_s1sJI_entry() //  [R1]
         { []
         }
     {offset
       c1wFL: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1wFM; else goto c1wFN;
       c1wFM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1wFN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Real.$fEnumRatio1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl9_s1sJI_info" {
     lvl9_s1sJI_info:
         const lvl9_s1sJI_entry;
         const 1;
         const 4294967312;
         const S1sVz_srt+1416;
 },
 sat_s1sJZ_entry() //  [R1]
         { []
         }
     {offset
       c1wFQ: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1wFR; else goto c1wFS;
       c1wFR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1wFS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Real.quot_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sJZ_info" {
     sat_s1sJZ_info:
         const sat_s1sJZ_entry;
         const 3;
         const 15;
 },
 sat_s1sJY_entry() //  [R1]
         { []
         }
     {offset
       c1wFV: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1wFW; else goto c1wFX;
       c1wFW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1wFX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           _s1sJF::P64 = P64[R1 + 24];
           P64[Sp - 32] = _s1sJF::P64;
           P64[Sp - 24] = _s1sJF::P64;
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sJY_info" {
     sat_s1sJY_info:
         const sat_s1sJY_entry;
         const 2;
         const 18;
 },
 sat_s1sJV_entry() //  [R1]
         { []
         }
     {offset
       c1wG0: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1wG1; else goto c1wG2;
       c1wG1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1wG2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sJV_info" {
     sat_s1sJV_info:
         const sat_s1sJV_entry;
         const 3;
         const 15;
 },
 sat_s1sJU_entry() //  [R1]
         { []
         }
     {offset
       c1wG5: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1wG6; else goto c1wG7;
       c1wG6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1wG7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Real.quot_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sJU_info" {
     sat_s1sJU_info:
         const sat_s1sJU_entry;
         const 3;
         const 15;
 },
 sat_s1sJT_entry() //  [R1]
         { []
         }
     {offset
       c1wGb: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1wGc; else goto c1wGd;
       c1wGc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1wGd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           _s1sJO::P64 = P64[R1 + 24];
           P64[Sp - 32] = _s1sJO::P64;
           P64[Sp - 24] = _s1sJO::P64;
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sJT_info" {
     sat_s1sJT_info:
         const sat_s1sJT_entry;
         const 2;
         const 18;
 },
 sat_s1sJX_entry() //  [R1]
         { []
         }
     {offset
       c1wGg: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1wGh; else goto c1wGi;
       c1wGh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1wGi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Real.quot_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sJX_info" {
     sat_s1sJX_info:
         const sat_s1sJX_entry;
         const 3;
         const 15;
 },
 sat_s1sJW_entry() //  [R1]
         { []
         }
     {offset
       c1wGm: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1wGn; else goto c1wGo;
       c1wGn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1wGo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           _s1sJO::P64 = P64[R1 + 24];
           P64[Sp - 32] = _s1sJO::P64;
           P64[Sp - 24] = _s1sJO::P64;
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sJW_info" {
     sat_s1sJW_info:
         const sat_s1sJW_entry;
         const 2;
         const 18;
 },
 sat_s1sK5_entry() //  [R1]
         { []
         }
     {offset
       c1wGr: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1wGs; else goto c1wGt;
       c1wGs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1wGt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Real.quot_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sK5_info" {
     sat_s1sK5_info:
         const sat_s1sK5_entry;
         const 3;
         const 15;
 },
 sat_s1sK4_entry() //  [R1]
         { []
         }
     {offset
       c1wGx: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1wGy; else goto c1wGz;
       c1wGy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1wGz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           _s1sK1::P64 = P64[R1 + 24];
           P64[Sp - 32] = _s1sK1::P64;
           P64[Sp - 24] = _s1sK1::P64;
           Sp = Sp - 40;
           call GHC.Num.*_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sK4_info" {
     sat_s1sK4_info:
         const sat_s1sK4_entry;
         const 2;
         const 18;
 },
 section ""relreadonly" . u1wJE_srtd" {
     u1wJE_srtd:
         const S1sVz_srt+696;
         const 111;
         const 1;
         const 131941462441984;
 },
 GHC.Real.^_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c1wGA: // global
           if ((Sp + -96) < SpLim) (likely: False) goto c1wGB; else goto c1wGC;
       c1wGB: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.^_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1wGC: // global
           I64[Sp - 40] = block_c1wE2_info;
           _s1sJr::P64 = R2;
           R2 = R3;
           P64[Sp - 32] = _s1sJr::P64;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.^_info" {
     GHC.Real.^_info:
         const GHC.Real.^_entry;
         const 0;
         const 18446744069414584334;
         const 17179869208;
         const u1wJE_srtd;
 },
 section ""relreadonly" . u1wJF_srtd" {
     u1wJF_srtd:
         const S1sVz_srt+696;
         const 111;
         const 1;
         const 96757090353152;
 },
 _c1wE2() //  [R1]
         { []
         }
     {offset
       c1wE2: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1wGF; else goto c1wGE;
       c1wGF: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1wGE: // global
           I64[Hp - 16] = $dNum1_s1sJw_info;
           P64[Hp] = R1;
           I64[Sp - 8] = block_c1wE8_info;
           R2 = R1;
           P64[Sp] = Hp - 16;
           Sp = Sp - 8;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1wE2_info" {
     block_c1wE2_info:
         const _c1wE2;
         const 4;
         const 18446744069414584350;
         const u1wJF_srtd;
 },
 section ""relreadonly" . u1wJG_srtd" {
     u1wJG_srtd:
         const S1sVz_srt+696;
         const 111;
         const 1;
         const 96757090353152;
 },
 _c1wE8() //  [R1]
         { []
         }
     {offset
       c1wE8: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1wGI; else goto c1wGH;
       c1wGI: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1wGH: // global
           I64[Hp - 16] = sat_s1sJy_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp - 8] = block_c1wEe_info;
           R2 = R1;
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = P64[Sp + 40];
           P64[Sp - 16] = Hp - 16;
           P64[Sp] = R1;
           Sp = Sp - 32;
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1wE8_info" {
     block_c1wE8_info:
         const _c1wE8;
         const 5;
         const 18446744069414584350;
         const u1wJG_srtd;
 },
 section ""relreadonly" . u1wJH_srtd" {
     u1wJH_srtd:
         const S1sVz_srt+696;
         const 111;
         const 1;
         const 96757090353152;
 },
 _c1wEe() //  [R1]
         { []
         }
     {offset
       c1wEe: // global
           if (R1 & 7 == 1) goto c1wGK; else goto c1wHI;
       c1wGK: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1wGN; else goto c1wGM;
       c1wGN: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1wGM: // global
           I64[Hp - 16] = sat_s1sJB_info;
           P64[Hp] = P64[Sp + 16];
           I64[Sp - 8] = block_c1wEk_info;
           R2 = P64[Sp + 8];
           P64[Sp] = Hp - 16;
           Sp = Sp - 8;
           call GHC.Classes.$p1Ord_entry(R2) args: 8, res: 8, upd: 8;
       c1wHI: // global
           R1 = lvl7_r1j3S_closure;
           Sp = Sp + 56;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1wEe_info" {
     block_c1wEe_info:
         const _c1wEe;
         const 6;
         const 18446744069414584350;
         const u1wJH_srtd;
 },
 section ""relreadonly" . u1wJI_srtd" {
     u1wJI_srtd:
         const S1sVz_srt+696;
         const 109;
         const 1;
         const 17592253153280;
 },
 _c1wEk() //  [R1]
         { []
         }
     {offset
       c1wEk: // global
           _c1wEi::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1wEo_info;
           R2 = R1;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = P64[Sp + 56];
           P64[Sp] = _c1wEi::P64;
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1wEk_info" {
     block_c1wEk_info:
         const _c1wEk;
         const 7;
         const 18446744069414584350;
         const u1wJI_srtd;
 },
 section ""relreadonly" . u1wJJ_srtd" {
     u1wJJ_srtd:
         const S1sVz_srt+696;
         const 109;
         const 1;
         const 17592253153280;
 },
 _c1wEo() //  [R1]
         { []
         }
     {offset
       c1wEo: // global
           if (R1 & 7 == 1) goto c1wGQ; else goto c1wHE;
       c1wGQ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1wGT; else goto c1wGS;
       c1wGT: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1wGS: // global
           I64[Hp - 16] = lvl8_s1sJD_info;
           P64[Hp] = P64[Sp + 16];
           P64[Sp] = P64[Sp + 48];
           P64[Sp + 40] = P64[Sp + 40];
           P64[Sp + 48] = Hp - 16;
           call _c1wFf() args: 0, res: 0, upd: 0;
       c1wHE: // global
           R2 = P64[Sp + 24];
           I64[Sp + 40] = stg_ap_p_info;
           P64[Sp + 48] = GHC.Real.$fEnumRatio1_closure;
           Sp = Sp + 40;
           call GHC.Num.fromInteger_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1wEo_info" {
     block_c1wEo_info:
         const _c1wEo;
         const 6;
         const 18446744069414584350;
         const u1wJJ_srtd;
 },
 _c1wFf() //  []
         { []
         }
     {offset
       c1wFf: // global
           I64[Sp - 8] = block_c1wFh_info;
           R3 = P64[Sp];
           R2 = P64[Sp + 32];
           Sp = Sp - 8;
           call GHC.Real.even_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . u1wJK_srtd" {
     u1wJK_srtd:
         const S1sVz_srt+696;
         const 91;
         const 1;
         const 67108864;
 },
 _c1wFh() //  [R1]
         { []
         }
     {offset
       c1wFh: // global
           _s1sK1::P64 = P64[Sp + 48];
           _s1sK2::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c1wHw; else goto c1wHx;
       c1wHw: // global
           I64[Sp + 8] = block_c1wEz_info;
           R2 = P64[Sp + 16];
           P64[Sp + 16] = _s1sK2::P64;
           P64[Sp + 48] = _s1sK1::P64;
           Sp = Sp + 8;
           call GHC.Classes.$p1Ord_entry(R2) args: 8, res: 8, upd: 8;
       c1wHx: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c1wHA; else goto c1wHz;
       c1wHA: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1wHz: // global
           I64[Hp - 64] = sat_s1sK5_info;
           P64[Hp - 48] = P64[Sp + 40];
           P64[Hp - 40] = P64[Sp + 56];
           P64[Hp - 32] = _s1sK2::P64;
           I64[Hp - 24] = sat_s1sK4_info;
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = _s1sK1::P64;
           P64[Sp + 48] = Hp - 24;
           P64[Sp + 8] = Hp - 64;
           Sp = Sp + 8;
           call _c1wFf() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1wFh_info" {
     block_c1wFh_info:
         const _c1wFh;
         const 7;
         const 18446744069414584350;
         const u1wJK_srtd;
 },
 section ""relreadonly" . u1wJL_srtd" {
     u1wJL_srtd:
         const S1sVz_srt+696;
         const 91;
         const 1;
         const 67108864;
 },
 _c1wEz() //  [R1]
         { []
         }
     {offset
       c1wEz: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1wGX; else goto c1wGW;
       c1wGX: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1wGW: // global
           I64[Hp - 16] = lvl9_s1sJI_info;
           P64[Hp] = P64[Sp + 16];
           I64[Sp - 8] = block_c1wEF_info;
           R2 = R1;
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = P64[Sp + 8];
           _c1wED::P64 = Hp - 16;
           P64[Sp - 16] = _c1wED::P64;
           P64[Sp] = R1;
           P64[Sp + 16] = _c1wED::P64;
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1wEz_info" {
     block_c1wEz_info:
         const _c1wEz;
         const 6;
         const 18446744069414584350;
         const u1wJL_srtd;
 },
 _c1wEF() //  [R1]
         { []
         }
     {offset
       c1wEF: // global
           _s1sJF::P64 = P64[Sp + 48];
           if (R1 & 7 == 1) goto c1wGZ; else goto c1wHr;
       c1wGZ: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c1wH2; else goto c1wH1;
       c1wH2: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1wH1: // global
           I64[Hp - 64] = sat_s1sJZ_info;
           P64[Hp - 48] = P64[Sp + 40];
           P64[Hp - 40] = P64[Sp + 56];
           P64[Hp - 32] = P64[Sp + 16];
           I64[Hp - 24] = sat_s1sJY_info;
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = _s1sJF::P64;
           P64[Sp] = _s1sJF::P64;
           P64[Sp + 16] = Hp - 64;
           P64[Sp + 48] = Hp - 24;
           call _c1wES() args: 0, res: 0, upd: 0;
       c1wHr: // global
           R1 = _s1sJF::P64;
           Sp = Sp + 64;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1wEF_info" {
     block_c1wEF_info:
         const _c1wEF;
         const 7;
         const 4294967326;
         const S1sVz_srt+1584;
 },
 _c1wES() //  []
         { []
         }
     {offset
       c1wES: // global
           I64[Sp - 8] = block_c1wEU_info;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 40];
           Sp = Sp - 8;
           call GHC.Real.even_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c1wEU() //  [R1]
         { []
         }
     {offset
       c1wEU: // global
           _s1sJP::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c1wHa; else goto c1wHk;
       c1wHa: // global
           I64[Sp] = block_c1wEY_info;
           R2 = P64[Sp + 16];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _s1sJP::P64;
           P64[Sp - 8] = P64[Sp + 32];
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
       c1wHk: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c1wHn; else goto c1wHm;
       c1wHn: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1wHm: // global
           I64[Hp - 64] = sat_s1sJX_info;
           P64[Hp - 48] = P64[Sp + 48];
           P64[Hp - 40] = P64[Sp + 64];
           P64[Hp - 32] = _s1sJP::P64;
           I64[Hp - 24] = sat_s1sJW_info;
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = P64[Sp + 56];
           P64[Sp + 56] = Hp - 24;
           P64[Sp + 24] = Hp - 64;
           P64[Sp + 8] = P64[Sp + 8];
           Sp = Sp + 8;
           call _c1wES() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c1wEU_info" {
     block_c1wEU_info:
         const _c1wEU;
         const 8;
         const 4294967326;
         const S1sVz_srt+1584;
 },
 _c1wEY() //  [R1]
         { []
         }
     {offset
       c1wEY: // global
           _s1sJr::P64 = P64[Sp + 40];
           _s1sJO::P64 = P64[Sp + 56];
           _s1sJQ::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c1wHc; else goto c1wHj;
       c1wHc: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto c1wHf; else goto c1wHe;
       c1wHf: // global
           HpAlloc = 112;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1wHe: // global
           I64[Hp - 104] = sat_s1sJV_info;
           P64[Hp - 88] = _s1sJr::P64;
           P64[Hp - 80] = _s1sJO::P64;
           P64[Hp - 72] = _s1sJQ::P64;
           I64[Hp - 64] = sat_s1sJU_info;
           P64[Hp - 48] = P64[Sp + 48];
           P64[Hp - 40] = P64[Sp + 64];
           P64[Hp - 32] = P64[Sp + 24];
           I64[Hp - 24] = sat_s1sJT_info;
           P64[Hp - 8] = _s1sJr::P64;
           P64[Hp] = _s1sJO::P64;
           P64[Sp + 56] = Hp - 24;
           P64[Sp + 24] = Hp - 64;
           P64[Sp + 8] = Hp - 104;
           Sp = Sp + 8;
           call _c1wES() args: 0, res: 0, upd: 0;
       c1wHj: // global
           R2 = _s1sJr::P64;
           I64[Sp + 48] = stg_ap_pp_info;
           P64[Sp + 56] = _s1sJO::P64;
           P64[Sp + 64] = _s1sJQ::P64;
           Sp = Sp + 48;
           call GHC.Num.*_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1wEY_info" {
     block_c1wEY_info:
         const _c1wEY;
         const 8;
         const 4294967326;
         const S1sVz_srt+1584;
 },
 section ""data" . GHC.Real.^%^_closure" {
     GHC.Real.^%^_closure:
         const GHC.Real.^%^_info;
         const 0;
 },
 GHC.Real.^%^_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1wI6: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1wIc; else goto c1wId;
       c1wIc: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.^%^_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1wId: // global
           I64[Sp - 24] = block_c1wI3_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u1wIi; else goto c1wI4;
       u1wIi: // global
           call _c1wI3(R1) args: 0, res: 0, upd: 0;
       c1wI4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.^%^_info" {
     GHC.Real.^%^_info:
         const GHC.Real.^%^_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S1sVz_srt+1592;
 },
 _c1wI3() //  [R1]
         { []
         }
     {offset
       c1wI3: // global
           _s1sK8::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c1wI9_info;
           R5 = _s1sK8::P64;
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Real.$w^%^_entry(R5, R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1wI3_info" {
     block_c1wI3_info:
         const _c1wI3;
         const 2;
         const 4294967326;
         const S1sVz_srt+1600;
 },
 _c1wI9() //  [R1, R2]
         { []
         }
     {offset
       c1wI9: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1wIh; else goto c1wIg;
       c1wIh: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c1wIg: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1wI9_info" {
     block_c1wI9_info:
         const _c1wI9;
         const 0;
         const 30;
 },
 section ""data" . GHC.Real.$w^%^_closure" {
     GHC.Real.$w^%^_closure:
         const GHC.Real.$w^%^_info;
         const 0;
 },
 $dNum_s1sKk_entry() //  [R1]
         { []
         }
     {offset
       c1wIv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1wIw; else goto c1wIx;
       c1wIw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1wIx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dNum_s1sKk_info" {
     $dNum_s1sKk_info:
         const $dNum_s1sKk_entry;
         const 1;
         const 16;
 },
 sat_s1sKm_entry() //  [R1]
         { []
         }
     {offset
       c1wIG: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1wIH; else goto c1wII;
       c1wIH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1wII: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Real.even1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sKm_info" {
     sat_s1sKm_info:
         const sat_s1sKm_entry;
         const 1;
         const 4294967312;
         const S1sVz_srt+1552;
 },
 sat_s1sKp_entry() //  [R1]
         { []
         }
     {offset
       c1wIR: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1wIS; else goto c1wIT;
       c1wIS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1wIT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Real.even1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sKp_info" {
     sat_s1sKp_info:
         const sat_s1sKp_entry;
         const 1;
         const 4294967312;
         const S1sVz_srt+1552;
 },
 GHC.Real.$w^%^_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c1wIU: // global
           if ((Sp + -80) < SpLim) (likely: False) goto c1wIV; else goto c1wIW;
       c1wIV: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$w^%^_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1wIW: // global
           I64[Sp - 40] = block_c1wIn_info;
           _s1sKf::P64 = R2;
           R2 = R2;
           P64[Sp - 32] = _s1sKf::P64;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$w^%^_info" {
     GHC.Real.$w^%^_info:
         const GHC.Real.$w^%^_entry;
         const 0;
         const 255016333194821646;
         const 17179869208;
         const S1sVz_srt+1416;
 },
 _c1wIn() //  [R1]
         { []
         }
     {offset
       c1wIn: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1wIZ; else goto c1wIY;
       c1wIZ: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1wIY: // global
           I64[Hp - 16] = $dNum_s1sKk_info;
           P64[Hp] = R1;
           I64[Sp - 8] = block_c1wIy_info;
           R2 = R1;
           P64[Sp] = Hp - 16;
           Sp = Sp - 8;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1wIn_info" {
     block_c1wIn_info:
         const _c1wIn;
         const 4;
         const 218987536175857694;
         const S1sVz_srt+1416;
 },
 _c1wIy() //  [R1]
         { []
         }
     {offset
       c1wIy: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1wJ2; else goto c1wJ1;
       c1wJ2: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1wJ1: // global
           I64[Hp - 16] = sat_s1sKm_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp - 8] = block_c1wIJ_info;
           R2 = R1;
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = P64[Sp + 40];
           P64[Sp - 16] = Hp - 16;
           P64[Sp] = R1;
           Sp = Sp - 32;
           call GHC.Classes.<_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1wIy_info" {
     block_c1wIy_info:
         const _c1wIy;
         const 5;
         const 218987536175857694;
         const S1sVz_srt+1416;
 },
 _c1wIJ() //  [R1]
         { []
         }
     {offset
       c1wIJ: // global
           if (R1 & 7 == 1) goto c1wJ5; else goto c1wJB;
       c1wJ5: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1wJ8; else goto c1wJ7;
       c1wJ8: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1wJ7: // global
           I64[Hp - 16] = sat_s1sKp_info;
           P64[Hp] = P64[Sp + 16];
           _s1sKl::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1wJ3_info;
           R2 = _s1sKl::P64;
           P64[Sp + 16] = Hp - 16;
           Sp = Sp + 8;
           call GHC.Classes.$p1Ord_entry(R2) args: 8, res: 8, upd: 8;
       c1wJB: // global
           R1 = lvl6_r1j3R_closure;
           Sp = Sp + 56;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1wIJ_info" {
     block_c1wIJ_info:
         const _c1wIJ;
         const 6;
         const 218987536175857694;
         const S1sVz_srt+1416;
 },
 _c1wJ3() //  [R1]
         { []
         }
     {offset
       c1wJ3: // global
           _c1wIN::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1wJc_info;
           R2 = R1;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = P64[Sp + 40];
           P64[Sp] = _c1wIN::P64;
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1wJ3_info" {
     block_c1wJ3_info:
         const _c1wJ3;
         const 5;
         const 74309398146580510;
         const S1sVz_srt+1416;
 },
 _c1wJc() //  [R1]
         { []
         }
     {offset
       c1wJc: // global
           if (R1 & 7 == 1) goto c1wJo; else goto c1wJx;
       c1wJo: // global
           I64[Sp] = block_c1wJh_info;
           R5 = P64[Sp + 32];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = GHC.Num.$fNumInteger_closure;
           call GHC.Real.^_entry(R5, R4, R3, R2) args: 8, res: 8, upd: 8;
       c1wJx: // global
           R2 = GHC.Real.$fEnumRatio1_closure;
           R1 = GHC.Real.$fEnumRatio1_closure;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1wJc_info" {
     block_c1wJc_info:
         const _c1wJc;
         const 4;
         const 74309398146580510;
         const S1sVz_srt+1416;
 },
 _c1wJh() //  [R1]
         { []
         }
     {offset
       c1wJh: // global
           _s1sKh::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_c1wJl_info;
           R5 = P64[Sp + 32];
           R4 = _s1sKh::P64;
           R3 = P64[Sp + 8];
           R2 = GHC.Num.$fNumInteger_closure;
           P64[Sp + 32] = R1;
           Sp = Sp + 24;
           call GHC.Real.^_entry(R5, R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1wJh_info" {
     block_c1wJh_info:
         const _c1wJh;
         const 132;
         const 141733920798;
         const S1sVz_srt+1568;
 },
 _c1wJl() //  [R1]
         { []
         }
     {offset
       c1wJl: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1wJl_info" {
     block_c1wJl_info:
         const _c1wJl;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:19.06795562 UTC

[section ""data" . GHC.Real.$w^^%^^_closure" {
     GHC.Real.$w^^%^^_closure:
         const GHC.Real.$w^^%^^_info;
         const 0;
 },
 $dNum_s1sKz_entry() //  [R1]
         { []
         }
     {offset
       c1wP0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1wP1; else goto c1wP2;
       c1wP1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1wP2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dNum_s1sKz_info" {
     $dNum_s1sKz_info:
         const $dNum_s1sKz_entry;
         const 1;
         const 16;
 },
 sat_s1sKB_entry() //  [R1]
         { []
         }
     {offset
       c1wPb: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1wPc; else goto c1wPd;
       c1wPc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1wPd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Real.even1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sKB_info" {
     sat_s1sKB_info:
         const sat_s1sKB_entry;
         const 1;
         const 4294967312;
         const S1sVz_srt+1552;
 },
 sat_s1sKE_entry() //  [R1]
         { []
         }
     {offset
       c1wPm: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1wPn; else goto c1wPo;
       c1wPn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1wPo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Real.even1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sKE_info" {
     sat_s1sKE_info:
         const sat_s1sKE_entry;
         const 1;
         const 4294967312;
         const S1sVz_srt+1552;
 },
 sat_s1sKK_entry() //  [R1]
         { []
         }
     {offset
       c1wPJ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1wPK; else goto c1wPL;
       c1wPK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1wPL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Num.negate_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sKK_info" {
     sat_s1sKK_info:
         const sat_s1sKK_entry;
         const 2;
         const 18;
 },
 sat_s1sKJ_entry() //  [R1]
         { []
         }
     {offset
       c1wPQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1wPR; else goto c1wPS;
       c1wPR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1wPS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Integer.Type.negateInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sKJ_info" {
     sat_s1sKJ_info:
         const sat_s1sKJ_entry;
         const 1;
         const 16;
 },
 sat_s1sKM_entry() //  [R1]
         { []
         }
     {offset
       c1wQ1: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1wQ2; else goto c1wQ3;
       c1wQ2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1wQ3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Num.negate_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sKM_info" {
     sat_s1sKM_info:
         const sat_s1sKM_entry;
         const 2;
         const 18;
 },
 sat_s1sKT_entry() //  [R1]
         { []
         }
     {offset
       c1wQa: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1wQb; else goto c1wQc;
       c1wQb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1wQc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Num.negate_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sKT_info" {
     sat_s1sKT_info:
         const sat_s1sKT_entry;
         const 2;
         const 18;
 },
 sat_s1sKV_entry() //  [R1]
         { []
         }
     {offset
       c1wQl: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1wQm; else goto c1wQn;
       c1wQm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1wQn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Num.negate_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sKV_info" {
     sat_s1sKV_info:
         const sat_s1sKV_entry;
         const 2;
         const 18;
 },
 section ""relreadonly" . u1wS8_srtd" {
     u1wS8_srtd:
         const S1sVz_srt+296;
         const 167;
         const 1;
         const 0;
         const 354871676928;
 },
 GHC.Real.$w^^%^^_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c1wQo: // global
           if ((Sp + -80) < SpLim) (likely: False) goto c1wQp; else goto c1wQq;
       c1wQp: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.$w^^%^^_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1wQq: // global
           I64[Sp - 40] = block_c1wOS_info;
           _s1sKu::P64 = R2;
           R2 = R2;
           P64[Sp - 32] = _s1sKu::P64;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.$w^^%^^_info" {
     GHC.Real.$w^^%^^_info:
         const GHC.Real.$w^^%^^_entry;
         const 0;
         const 18446744069414584334;
         const 17179869208;
         const u1wS8_srtd;
 },
 section ""relreadonly" . u1wS9_srtd" {
     u1wS9_srtd:
         const S1sVz_srt+296;
         const 165;
         const 1;
         const 0;
         const 79993769984;
 },
 _c1wOS() //  [R1]
         { []
         }
     {offset
       c1wOS: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1wQt; else goto c1wQs;
       c1wQt: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1wQs: // global
           I64[Hp - 16] = $dNum_s1sKz_info;
           P64[Hp] = R1;
           I64[Sp - 8] = block_c1wP3_info;
           R2 = R1;
           P64[Sp] = Hp - 16;
           Sp = Sp - 8;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1wOS_info" {
     block_c1wOS_info:
         const _c1wOS;
         const 4;
         const 18446744069414584350;
         const u1wS9_srtd;
 },
 section ""relreadonly" . u1wSa_srtd" {
     u1wSa_srtd:
         const S1sVz_srt+296;
         const 165;
         const 1;
         const 0;
         const 79993769984;
 },
 _c1wP3() //  [R1]
         { []
         }
     {offset
       c1wP3: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1wQw; else goto c1wQv;
       c1wQw: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1wQv: // global
           I64[Hp - 16] = sat_s1sKB_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp - 8] = block_c1wPe_info;
           R2 = R1;
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = P64[Sp + 40];
           P64[Sp - 16] = Hp - 16;
           P64[Sp] = R1;
           Sp = Sp - 32;
           call GHC.Classes.>_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1wP3_info" {
     block_c1wP3_info:
         const _c1wP3;
         const 5;
         const 18446744069414584350;
         const u1wSa_srtd;
 },
 section ""relreadonly" . u1wSb_srtd" {
     u1wSb_srtd:
         const S1sVz_srt+296;
         const 165;
         const 1;
         const 0;
         const 79993769984;
 },
 _c1wPe() //  [R1]
         { []
         }
     {offset
       c1wPe: // global
           if (R1 & 7 == 1) goto c1wQy; else goto c1wRW;
       c1wQy: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1wQB; else goto c1wQA;
       c1wQB: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1wQA: // global
           I64[Hp - 16] = sat_s1sKE_info;
           P64[Hp] = P64[Sp + 16];
           I64[Sp] = block_c1wPp_info;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = Hp - 16;
           call GHC.Classes.$p1Ord_entry(R2) args: 8, res: 8, upd: 8;
       c1wRW: // global
           I64[Sp + 16] = block_c1wRQ_info;
           R5 = P64[Sp + 48];
           R4 = P64[Sp + 32];
           R3 = P64[Sp + 24];
           R2 = GHC.Num.$fNumInteger_closure;
           Sp = Sp + 16;
           call GHC.Real.^_entry(R5, R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1wPe_info" {
     block_c1wPe_info:
         const _c1wPe;
         const 6;
         const 18446744069414584350;
         const u1wSb_srtd;
 },
 section ""relreadonly" . u1wSc_srtd" {
     u1wSc_srtd:
         const S1sVz_srt+296;
         const 165;
         const 1;
         const 0;
         const 79993769984;
 },
 _c1wPp() //  [R1]
         { []
         }
     {offset
       c1wPp: // global
           _c1wPi::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1wPt_info;
           R2 = R1;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = P64[Sp + 48];
           P64[Sp] = _c1wPi::P64;
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1wPp_info" {
     block_c1wPp_info:
         const _c1wPp;
         const 6;
         const 18446744069414584350;
         const u1wSc_srtd;
 },
 section ""relreadonly" . u1wSd_srtd" {
     u1wSd_srtd:
         const S1sVz_srt+296;
         const 165;
         const 1;
         const 0;
         const 79993769984;
 },
 _c1wPt() //  [R1]
         { []
         }
     {offset
       c1wPt: // global
           if (R1 & 7 == 1) goto c1wQF; else goto c1wRN;
       c1wQF: // global
           I64[Sp] = block_c1wPx_info;
           R3 = GHC.Real.even1_closure;
           R2 = P64[Sp + 24];
           call GHC.Integer.Type.gtInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
       c1wRN: // global
           R2 = GHC.Real.$fEnumRatio1_closure;
           R1 = GHC.Real.$fEnumRatio1_closure;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1wPt_info" {
     block_c1wPt_info:
         const _c1wPt;
         const 5;
         const 18446744069414584350;
         const u1wSd_srtd;
 },
 section ""relreadonly" . u1wSe_srtd" {
     u1wSe_srtd:
         const S1sVz_srt+296;
         const 165;
         const 1;
         const 0;
         const 79993765888;
 },
 _c1wPx() //  [R1]
         { []
         }
     {offset
       c1wPx: // global
           if (R1 == 1) goto c1wRz; else goto c1wQI;
       c1wRz: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1wRC; else goto c1wRB;
       c1wRC: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c1wRB: // global
           I64[Hp - 24] = sat_s1sKT_info;
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = P64[Sp + 8];
           I64[Sp] = block_c1wQd_info;
           R5 = Hp - 24;
           R4 = P64[Sp + 32];
           R3 = P64[Sp + 16];
           R2 = GHC.Num.$fNumInteger_closure;
           call GHC.Real.^_entry(R5, R4, R3, R2) args: 8, res: 8, upd: 8;
       c1wQI: // global
           I64[Sp] = block_c1wPB_info;
           R3 = GHC.Real.even1_closure;
           R2 = P64[Sp + 24];
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1wPx_info" {
     block_c1wPx_info:
         const _c1wPx;
         const 5;
         const 18446744069414584350;
         const u1wSe_srtd;
 },
 _c1wQd() //  [R1]
         { []
         }
     {offset
       c1wQd: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1wRF; else goto c1wRE;
       c1wRF: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1wRE: // global
           I64[Hp - 24] = sat_s1sKV_info;
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 32] = block_c1wRy_info;
           R5 = Hp - 24;
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = GHC.Num.$fNumInteger_closure;
           P64[Sp + 40] = R1;
           Sp = Sp + 32;
           call GHC.Real.^_entry(R5, R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1wQd_info" {
     block_c1wQd_info:
         const _c1wQd;
         const 517;
         const 141733920798;
         const S1sVz_srt+1568;
 },
 _c1wRy() //  [R1]
         { []
         }
     {offset
       c1wRy: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1wRy_info" {
     block_c1wRy_info:
         const _c1wRy;
         const 1;
         const 30;
 },
 section ""relreadonly" . u1wSf_srtd" {
     u1wSf_srtd:
         const S1sVz_srt+296;
         const 165;
         const 1;
         const 0;
         const 79456894976;
 },
 _c1wPB() //  [R1]
         { []
         }
     {offset
       c1wPB: // global
           if (R1 == 1) goto c1wRx; else goto c1wQL;
       c1wRx: // global
           R1 = GHC.Real.ratioZeroDenominatorError_closure;
           Sp = Sp + 48;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c1wQL: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c1wQO; else goto c1wQN;
       c1wQO: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c1wQN: // global
           I64[Hp - 48] = sat_s1sKK_info;
           P64[Hp - 32] = P64[Sp + 40];
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = sat_s1sKJ_info;
           P64[Hp] = P64[Sp + 24];
           I64[Sp] = block_c1wPT_info;
           R5 = Hp - 48;
           R4 = Hp - 16;
           R3 = P64[Sp + 16];
           R2 = GHC.Num.$fNumInteger_closure;
           call GHC.Real.^_entry(R5, R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1wPB_info" {
     block_c1wPB_info:
         const _c1wPB;
         const 5;
         const 18446744069414584350;
         const u1wSf_srtd;
 },
 _c1wPT() //  [R1]
         { []
         }
     {offset
       c1wPT: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1wQR; else goto c1wQQ;
       c1wQR: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1wQQ: // global
           I64[Hp - 24] = sat_s1sKM_info;
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_c1wQJ_info;
           R5 = Hp - 24;
           R4 = P64[Sp + 32];
           R3 = P64[Sp + 16];
           R2 = GHC.Num.$fNumInteger_closure;
           P64[Sp + 32] = R1;
           Sp = Sp + 8;
           call GHC.Real.^_entry(R5, R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1wPT_info" {
     block_c1wPT_info:
         const _c1wPT;
         const 261;
         const 158913789982;
         const S1sVz_srt+1568;
 },
 _c1wQJ() //  [R1]
         { []
         }
     {offset
       c1wQJ: // global
           I64[Sp + 16] = block_c1wQV_info;
           R3 = P64[Sp + 32];
           R2 = P64[Sp + 8];
           P64[Sp + 32] = R1;
           Sp = Sp + 16;
           call GHC.Real.even_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1wQJ_info" {
     block_c1wQJ_info:
         const _c1wQJ;
         const 132;
         const 4294967326;
         const S1sVz_srt+1584;
 },
 _c1wQV() //  [R1]
         { []
         }
     {offset
       c1wQV: // global
           _s1sKL::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c1wR7; else goto c1wRn;
       c1wR7: // global
           I64[Sp] = block_c1wR0_info;
           R2 = _s1sKL::P64;
           call GHC.Integer.Type.negateInteger_entry(R2) args: 8, res: 8, upd: 8;
       c1wRn: // global
           I64[Sp] = block_c1wRg_info;
           R1 = _s1sKL::P64;
           if (R1 & 7 != 0) goto u1wS5; else goto c1wRh;
       u1wS5: // global
           call _c1wRg(R1) args: 0, res: 0, upd: 0;
       c1wRh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1wQV_info" {
     block_c1wQV_info:
         const _c1wQV;
         const 2;
         const 30;
 },
 _c1wR0() //  [R1]
         { []
         }
     {offset
       c1wR0: // global
           _s1sKI::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1wR4_info;
           _s1sKO::P64 = R1;
           R1 = _s1sKI::P64;
           P64[Sp + 16] = _s1sKO::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u1wS6; else goto c1wR9;
       u1wS6: // global
           call _c1wR4(R1) args: 0, res: 0, upd: 0;
       c1wR9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1wR0_info" {
     block_c1wR0_info:
         const _c1wR0;
         const 130;
         const 30;
 },
 _c1wR4() //  [R1]
         { []
         }
     {offset
       c1wR4: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1wR4_info" {
     block_c1wR4_info:
         const _c1wR4;
         const 1;
         const 30;
 },
 _c1wRg() //  [R1]
         { []
         }
     {offset
       c1wRg: // global
           _s1sKI::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1wRl_info;
           _s1sKQ::P64 = R1;
           R1 = _s1sKI::P64;
           P64[Sp + 16] = _s1sKQ::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u1wS7; else goto c1wRp;
       u1wS7: // global
           call _c1wRl(R1) args: 0, res: 0, upd: 0;
       c1wRp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1wRg_info" {
     block_c1wRg_info:
         const _c1wRg;
         const 130;
         const 30;
 },
 _c1wRl() //  [R1]
         { []
         }
     {offset
       c1wRl: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1wRl_info" {
     block_c1wRl_info:
         const _c1wRl;
         const 1;
         const 30;
 },
 _c1wRQ() //  [R1]
         { []
         }
     {offset
       c1wRQ: // global
           _s1sKw::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_c1wRU_info;
           R5 = P64[Sp + 32];
           R4 = _s1sKw::P64;
           R3 = P64[Sp + 8];
           R2 = GHC.Num.$fNumInteger_closure;
           P64[Sp + 32] = R1;
           Sp = Sp + 24;
           call GHC.Real.^_entry(R5, R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1wRQ_info" {
     block_c1wRQ_info:
         const _c1wRQ;
         const 132;
         const 141733920798;
         const S1sVz_srt+1568;
 },
 _c1wRU() //  [R1]
         { []
         }
     {offset
       c1wRU: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1wRU_info" {
     block_c1wRU_info:
         const _c1wRU;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:19.120794062 UTC

[section ""data" . GHC.Real.^^%^^_closure" {
     GHC.Real.^^%^^_closure:
         const GHC.Real.^^%^^_info;
         const 0;
 },
 GHC.Real.^^%^^_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1wVe: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1wVk; else goto c1wVl;
       c1wVk: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.^^%^^_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1wVl: // global
           I64[Sp - 24] = block_c1wVb_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u1wVq; else goto c1wVc;
       u1wVq: // global
           call _c1wVb(R1) args: 0, res: 0, upd: 0;
       c1wVc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.^^%^^_info" {
     GHC.Real.^^%^^_info:
         const GHC.Real.^^%^^_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S1sVz_srt+1624;
 },
 _c1wVb() //  [R1]
         { []
         }
     {offset
       c1wVb: // global
           _s1sL1::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c1wVh_info;
           R5 = _s1sL1::P64;
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Real.$w^^%^^_entry(R5,
                                       R4,
                                       R3,
                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1wVb_info" {
     block_c1wVb_info:
         const _c1wVb;
         const 2;
         const 4294967326;
         const S1sVz_srt+1624;
 },
 _c1wVh() //  [R1, R2]
         { []
         }
     {offset
       c1wVh: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1wVp; else goto c1wVo;
       c1wVp: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c1wVo: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1wVh_info" {
     block_c1wVh_info:
         const _c1wVh;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:19.131983273 UTC

[section ""data" . GHC.Real.^^_closure" {
     GHC.Real.^^_closure:
         const GHC.Real.^^_info;
         const 0;
 },
 $dNum_s1sLd_entry() //  [R1]
         { []
         }
     {offset
       c1wVT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1wVU; else goto c1wVV;
       c1wVU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1wVV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Real_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dNum_s1sLd_info" {
     $dNum_s1sLd_info:
         const $dNum_s1sLd_entry;
         const 1;
         const 16;
 },
 sat_s1sLf_entry() //  [R1]
         { []
         }
     {offset
       c1wW0: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1wW1; else goto c1wW2;
       c1wW1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1wW2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Real.even1_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sLf_info" {
     sat_s1sLf_info:
         const sat_s1sLf_entry;
         const 1;
         const 4294967312;
         const S1sVz_srt+1552;
 },
 sat_s1sLi_entry() //  [R1]
         { []
         }
     {offset
       c1wWj: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1wWk; else goto c1wWl;
       c1wWk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1wWl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 24];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Num.negate_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sLi_info" {
     sat_s1sLi_info:
         const sat_s1sLi_entry;
         const 2;
         const 18;
 },
 sat_s1sLh_entry() //  [R1]
         { []
         }
     {offset
       c1wWq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1wWr; else goto c1wWs;
       c1wWr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1wWs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Fractional_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sLh_info" {
     sat_s1sLh_info:
         const sat_s1sLh_entry;
         const 1;
         const 16;
 },
 sat_s1sLj_entry() //  [R1]
         { []
         }
     {offset
       c1wWt: // global
           _s1sLj::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c1wWu; else goto c1wWv;
       c1wWv: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c1wWx; else goto c1wWw;
       c1wWx: // global
           HpAlloc = 56;
           goto c1wWu;
       c1wWu: // global
           R1 = _s1sLj::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1wWw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1sLj::P64;
           _s1sL8::P64 = P64[_s1sLj::P64 + 16];
           _s1sL9::P64 = P64[_s1sLj::P64 + 24];
           _s1sLa::P64 = P64[_s1sLj::P64 + 32];
           _s1sLb::P64 = P64[_s1sLj::P64 + 40];
           _s1sLd::P64 = P64[_s1sLj::P64 + 48];
           I64[Hp - 48] = sat_s1sLi_info;
           P64[Hp - 32] = _s1sLb::P64;
           P64[Hp - 24] = _s1sLd::P64;
           I64[Hp - 16] = sat_s1sLh_info;
           P64[Hp] = _s1sL8::P64;
           R5 = Hp - 48;
           R4 = _s1sLa::P64;
           R3 = _s1sL9::P64;
           R2 = Hp - 16;
           Sp = Sp - 16;
           call GHC.Real.^_entry(R5, R4, R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sLj_info" {
     sat_s1sLj_info:
         const sat_s1sLj_entry;
         const 5;
         const 4294967311;
         const S1sVz_srt+1568;
 },
 sat_s1sLk_entry() //  [R1]
         { []
         }
     {offset
       c1wWE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1wWF; else goto c1wWG;
       c1wWF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1wWG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Real.$p1Fractional_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1sLk_info" {
     sat_s1sLk_info:
         const sat_s1sLk_entry;
         const 1;
         const 16;
 },
 GHC.Real.^^_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c1wWH: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c1wWI; else goto c1wWJ;
       c1wWI: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.^^_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1wWJ: // global
           I64[Sp - 40] = block_c1wVL_info;
           _s1sL8::P64 = R2;
           R2 = R3;
           P64[Sp - 32] = _s1sL8::P64;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           call GHC.Real.$p1Integral_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.^^_info" {
     GHC.Real.^^_info:
         const GHC.Real.^^_entry;
         const 0;
         const 8817567858702;
         const 17179869208;
         const S1sVz_srt+1552;
 },
 _c1wVL() //  [R1]
         { []
         }
     {offset
       c1wVL: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c1wWM; else goto c1wWL;
       c1wWM: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1wWL: // global
           I64[Hp - 40] = $dNum_s1sLd_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = sat_s1sLf_info;
           _c1wVP::P64 = Hp - 40;
           P64[Hp] = _c1wVP::P64;
           I64[Sp - 16] = block_c1wW3_info;
           R2 = R1;
           P64[Sp - 8] = Hp - 16;
           P64[Sp] = _c1wVP::P64;
           Sp = Sp - 16;
           call GHC.Real.$p2Real_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1wVL_info" {
     block_c1wVL_info:
         const _c1wVL;
         const 4;
         const 21474836510;
         const S1sVz_srt+1552;
 },
 _c1wW3() //  [R1]
         { []
         }
     {offset
       c1wW3: // global
           _c1wVW::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1wW7_info;
           R2 = R1;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = P64[Sp + 48];
           P64[Sp] = _c1wVW::P64;
           Sp = Sp - 16;
           call GHC.Classes.>=_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1wW3_info" {
     block_c1wW3_info:
         const _c1wW3;
         const 6;
         const 4294967326;
         const S1sVz_srt+1568;
 },
 _c1wW7() //  [R1]
         { []
         }
     {offset
       c1wW7: // global
           _s1sL8::P64 = P64[Sp + 16];
           _s1sL9::P64 = P64[Sp + 24];
           _s1sLa::P64 = P64[Sp + 32];
           _s1sLb::P64 = P64[Sp + 40];
           if (R1 & 7 == 1) goto c1wWP; else goto c1wWT;
       c1wWP: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c1wWS; else goto c1wWR;
       c1wWS: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1wWR: // global
           I64[Hp - 48] = sat_s1sLj_info;
           P64[Hp - 32] = _s1sL8::P64;
           P64[Hp - 24] = _s1sL9::P64;
           P64[Hp - 16] = _s1sLa::P64;
           P64[Hp - 8] = _s1sLb::P64;
           P64[Hp] = P64[Sp + 8];
           R2 = _s1sL8::P64;
           I64[Sp + 32] = stg_ap_p_info;
           P64[Sp + 40] = Hp - 48;
           Sp = Sp + 32;
           call GHC.Real.recip_entry(R2) args: 24, res: 0, upd: 8;
       c1wWT: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1wWW; else goto c1wWV;
       c1wWW: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1wWV: // global
           I64[Hp - 16] = sat_s1sLk_info;
           P64[Hp] = _s1sL8::P64;
           R5 = _s1sLb::P64;
           R4 = _s1sLa::P64;
           R3 = _s1sL9::P64;
           R2 = Hp - 16;
           Sp = Sp + 48;
           call GHC.Real.^_entry(R5, R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1wW7_info" {
     block_c1wW7_info:
         const _c1wW7;
         const 5;
         const 4294967326;
         const S1sVz_srt+1568;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:19.154521082 UTC

[section ""data" . GHC.Real.C:Fractional_closure" {
     GHC.Real.C:Fractional_closure:
         const GHC.Real.C:Fractional_info;
 },
 GHC.Real.C:Fractional_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c1wY6: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c1wYa; else goto c1wY9;
       c1wYa: // global
           HpAlloc = 40;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.C:Fractional_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1wY9: // global
           I64[Hp - 32] = GHC.Real.C:Fractional_con_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = R5;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.C:Fractional_info" {
     GHC.Real.C:Fractional_info:
         const GHC.Real.C:Fractional_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:19.159264607 UTC

[section ""data" . GHC.Real.C:Integral_closure" {
     GHC.Real.C:Integral_closure:
         const GHC.Real.C:Integral_info;
 },
 GHC.Real.C:Integral_slow() //  [R1]
         { []
         }
     {offset
       c1wYi: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Real.C:Integral_entry(R6,
                                          R5,
                                          R4,
                                          R3,
                                          R2,
                                          R1) args: 40, res: 0, upd: 8;
     }
 },
 GHC.Real.C:Integral_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c1wYn: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c1wYr; else goto c1wYq;
       c1wYr: // global
           HpAlloc = 80;
           R1 = GHC.Real.C:Integral_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 80, res: 0, upd: 8;
       c1wYq: // global
           I64[Hp - 72] = GHC.Real.C:Integral_con_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R3;
           P64[Hp - 48] = R4;
           P64[Hp - 40] = R5;
           P64[Hp - 32] = R6;
           P64[Hp - 24] = P64[Sp];
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 24];
           R1 = Hp - 71;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.C:Integral_info" {
     GHC.Real.C:Integral_info:
         const GHC.Real.C:Integral_entry;
         const 0;
         const 14;
         const 38654705664;
         const 0;
         const 9;
         const GHC.Real.C:Integral_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:19.16490638 UTC

[section ""data" . GHC.Real.C:Real_closure" {
     GHC.Real.C:Real_closure:
         const GHC.Real.C:Real_info;
 },
 GHC.Real.C:Real_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1wYJ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1wYN; else goto c1wYM;
       c1wYN: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.C:Real_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1wYM: // global
           I64[Hp - 24] = GHC.Real.C:Real_con_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.C:Real_info" {
     GHC.Real.C:Real_info:
         const GHC.Real.C:Real_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:19.169540857 UTC

[section ""data" . GHC.Real.C:RealFrac_closure" {
     GHC.Real.C:RealFrac_closure:
         const GHC.Real.C:RealFrac_info;
 },
 GHC.Real.C:RealFrac_slow() //  [R1]
         { []
         }
     {offset
       c1wYV: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Real.C:RealFrac_entry(R6,
                                          R5,
                                          R4,
                                          R3,
                                          R2,
                                          R1) args: 24, res: 0, upd: 8;
     }
 },
 GHC.Real.C:RealFrac_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c1wZ0: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c1wZ4; else goto c1wZ3;
       c1wZ4: // global
           HpAlloc = 64;
           R1 = GHC.Real.C:RealFrac_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       c1wZ3: // global
           I64[Hp - 56] = GHC.Real.C:RealFrac_con_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R5;
           P64[Hp - 16] = R6;
           P64[Hp - 8] = P64[Sp];
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 55;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.C:RealFrac_info" {
     GHC.Real.C:RealFrac_info:
         const GHC.Real.C:RealFrac_entry;
         const 0;
         const 14;
         const 30064771072;
         const 0;
         const 7;
         const GHC.Real.C:RealFrac_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:19.174758862 UTC

[section ""data" . GHC.Real.:%_closure" {
     GHC.Real.:%_closure:
         const GHC.Real.:%_info;
 },
 GHC.Real.:%_entry() //  [R2, R3]
         { []
         }
     {offset
       c1wZk: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1wZo; else goto c1wZn;
       c1wZo: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Real.:%_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1wZn: // global
           I64[Hp - 16] = GHC.Real.:%_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.:%_info" {
     GHC.Real.:%_info:
         const GHC.Real.:%_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:19.17898607 UTC

[section ""cstring" . i1wZw_str" {
     i1wZw_str:
         I8[] [98,97,115,101,58,71,72,67,46,82,101,97,108,46,67,58,70,114,97,99,116,105,111,110,97,108]
 },
 GHC.Real.C:Fractional_con_entry() //  [R1]
         { []
         }
     {offset
       c1wZv: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.C:Fractional_con_info" {
     GHC.Real.C:Fractional_con_info:
         const GHC.Real.C:Fractional_con_entry;
         const 4;
         const 1;
         const i1wZw_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:19.18223487 UTC

[section ""cstring" . i1wZD_str" {
     i1wZD_str:
         I8[] [98,97,115,101,58,71,72,67,46,82,101,97,108,46,67,58,73,110,116,101,103,114,97,108]
 },
 GHC.Real.C:Integral_con_entry() //  [R1]
         { []
         }
     {offset
       c1wZC: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.C:Integral_con_info" {
     GHC.Real.C:Integral_con_info:
         const GHC.Real.C:Integral_con_entry;
         const 9;
         const 1;
         const i1wZD_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:19.186506909 UTC

[section ""cstring" . i1wZK_str" {
     i1wZK_str:
         I8[] [98,97,115,101,58,71,72,67,46,82,101,97,108,46,67,58,82,101,97,108]
 },
 GHC.Real.C:Real_con_entry() //  [R1]
         { []
         }
     {offset
       c1wZJ: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.C:Real_con_info" {
     GHC.Real.C:Real_con_info:
         const GHC.Real.C:Real_con_entry;
         const 3;
         const 1;
         const i1wZK_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:19.189813771 UTC

[section ""cstring" . i1wZR_str" {
     i1wZR_str:
         I8[] [98,97,115,101,58,71,72,67,46,82,101,97,108,46,67,58,82,101,97,108,70,114,97,99]
 },
 GHC.Real.C:RealFrac_con_entry() //  [R1]
         { []
         }
     {offset
       c1wZQ: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.C:RealFrac_con_info" {
     GHC.Real.C:RealFrac_con_info:
         const GHC.Real.C:RealFrac_con_entry;
         const 7;
         const 1;
         const i1wZR_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:19.192931297 UTC

[section ""cstring" . i1wZY_str" {
     i1wZY_str:
         I8[] [98,97,115,101,58,71,72,67,46,82,101,97,108,46,58,37]
 },
 GHC.Real.:%_con_entry() //  [R1]
         { []
         }
     {offset
       c1wZX: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Real.:%_con_info" {
     GHC.Real.:%_con_info:
         const GHC.Real.:%_con_entry;
         const 2;
         const 4;
         const i1wZY_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:19.197076912 UTC

[section ""relreadonly" . S1sVz_srt" {
     S1sVz_srt:
         const GHC.Integer.Type.timesInteger_closure;
         const GHC.Real.$fOrdRatio_$s$c<_closure;
         const GHC.Real.$fEnumRatio_$s$c<=_closure;
         const GHC.Real.$w$s$ccompare_closure;
         const GHC.Real.$fEnumRatio_$s$ccompare_closure;
         const GHC.Real.$fEnumRatio_$s$c>=_closure;
         const GHC.Real.$fOrdRatio_$s$c>_closure;
         const GHC.Real.$fOrdRatio_$s$cmin_closure;
         const GHC.Real.$fOrdRatio_$s$cmax_closure;
         const sat_s1sfy_closure;
         const GHC.Real.$fEnumRatio1_closure;
         const GHC.Real.$fFractionalRatio_$s$csignum_closure;
         const GHC.Real.$fFractionalRatio_$s$cfromInteger_closure;
         const GHC.Real.$fEnumRatio_$ctoRational_closure;
         const GHC.Real.even1_closure;
         const GHC.Real.$dmfloor_closure;
         const GHC.Real.$dmceiling_closure;
         const GHC.Real.$dmrecip_closure;
         const GHC.Real.$dmdivMod_closure;
         const GHC.Exception.divZeroException_closure;
         const GHC.Real.divZeroError_closure;
         const GHC.Real.$fIntegralInt_$cmod_closure;
         const GHC.Real.$fIntegralInt_$crem_closure;
         const GHC.Real.$fIntegralInteger_$cquot_closure;
         const GHC.Real.$fIntegralInteger_$crem_closure;
         const GHC.Integer.Type.divInteger_closure;
         const GHC.Real.$fIntegralInteger_$cdiv_closure;
         const GHC.Integer.Type.modInteger_closure;
         const GHC.Real.$fIntegralInteger_$cmod_closure;
         const GHC.Real.$fIntegralInteger_$cquotRem_closure;
         const GHC.Integer.Type.divModInteger_closure;
         const GHC.Real.$fIntegralInteger_$cdivMod_closure;
         const GHC.Real.$fIntegralWord_$cquot_closure;
         const GHC.Real.$fIntegralWord_$crem_closure;
         const GHC.Real.$fIntegralWord_$cquotRem_closure;
         const GHC.Real.$fIntegralWord_$cdivMod_closure;
         const GHC.Exception.ratioZeroDenomException_closure;
         const GHC.Real.ratioZeroDenominatorError_closure;
         const GHC.Real.$fFractionalRatio_$s$crecip_closure;
         const GHC.Exception.overflowException_closure;
         const GHC.Real.$fIntegralInt_$cdivMod_closure;
         const lvl_r1j38_closure;
         const GHC.Real.$fIntegralInt_$cquotRem_closure;
         const GHC.Real.overflowError_closure;
         const GHC.Real.$fIntegralInt_$cdiv_closure;
         const GHC.Real.$w$cdiv_closure;
         const GHC.Real.$fIntegralInt_$cquot_closure;
         const GHC.Real.$wgcd'_closure;
         const lvl2_r1j3a_closure;
         const GHC.Real.$fEnumRatio_gcd'_closure;
         const GHC.Real.even1_closure;
         const GHC.Real.gcd_closure;
         const GHC.Real.$w$sreduce_closure;
         const GHC.Real.divZeroError_closure;
         const GHC.Real.reduce_$sreduce_closure;
         const GHC.Real.$fRealWord_$ctoRational_closure;
         const GHC.Real.$fFractionalRatio_$s$c*_closure;
         const GHC.Integer.Type.minusInteger_closure;
         const GHC.Real.$w$s$c-_closure;
         const GHC.Real.$fEnumRatio_$s$c-_closure;
         const GHC.Integer.Type.plusInteger_closure;
         const GHC.Real.$w$s$c+_closure;
         const GHC.Real.$fEnumRatio_$s$c+_closure;
         const GHC.Real.$w$s$cfromRational_closure;
         const GHC.Real.$fFractionalRatio_$s$cfromRational_closure;
         const GHC.Real.$w$s$c/_closure;
         const GHC.Real.$fFractionalRatio_$s$c/_closure;
         const GHC.Real.$w$snumericEnumFrom_closure;
         const GHC.Real.$fEnumRatio_$snumericEnumFrom_closure;
         const GHC.Real.$fEnumRatio1_closure;
         const GHC.Real.$wnumericEnumFrom_closure;
         const GHC.Real.numericEnumFrom_closure;
         const sat_s1soJ_closure;
         const GHC.Real.even2_closure;
         const GHC.Real.$fEnumRatio2_closure;
         const GHC.Real.$fEnumRatio_$s$c<=_closure;
         const GHC.Real.$w$snumericEnumFromTo_closure;
         const GHC.Real.$fEnumRatio_$snumericEnumFromTo_closure;
         const GHC.Real.numericEnumFromTo_closure;
         const GHC.Real.$w$snumericEnumFromThen_closure;
         const GHC.Real.$fEnumRatio_$snumericEnumFromThen_closure;
         const GHC.Real.$fEnumRatio_$s$c>=_closure;
         const GHC.Real.$w$snumericEnumFromThenTo_closure;
         const GHC.Real.$fEnumRatio_$snumericEnumFromThenTo_closure;
         const GHC.Real.numericEnumFromThenTo_closure;
         const GHC.Real.even1_closure;
         const GHC.Real.showSigned_closure;
         const GHC.Real.even_closure;
         const GHC.Real.odd_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const lvl3_r1j3b_closure;
         const GHC.Real.$dmround_closure;
         const GHC.Real.$fRealFracRatio1_closure;
         const GHC.Real.integralEnumFrom_closure;
         const GHC.Integer.Type.plusInteger_closure;
         const GHC.Real.integralEnumFromThen_closure;
         const GHC.Real.integralEnumFromTo_closure;
         const GHC.Real.integralEnumFromThenTo_closure;
         const GHC.Real.$w$csignum_closure;
         const GHC.Real.$fNumRatio_$csignum_closure;
         const GHC.Real.$w$cfromInteger_closure;
         const GHC.Real.$fNumRatio_$cfromInteger_closure;
         const GHC.Real.$w$crecip_closure;
         const GHC.Real.$fFractionalRatio_$crecip_closure;
         const GHC.Real.divZeroError_closure;
         const GHC.Real.$w$s$cproperFraction_closure;
         const GHC.Real.$fEnumRatio_$s$cproperFraction_closure;
         const GHC.Real.gcd_closure;
         const GHC.Real.$wreduce_closure;
         const GHC.Real.reduce_closure;
         const GHC.Real.%_$s%_closure;
         const GHC.Real.$w$s$cfromRational_closure;
         const GHC.Real.$w%_closure;
         const GHC.Real.%_closure;
         const GHC.Real.$w$c/_closure;
         const GHC.Real.$fFractionalRatio_$c/_closure;
         const GHC.Real.$w$cfromRational_closure;
         const GHC.Real.$fFractionalRatio_$cfromRational_closure;
         const GHC.Real.$w$c+_closure;
         const GHC.Real.$fNumRatio_$c+_closure;
         const GHC.Real.$w$c-_closure;
         const GHC.Real.$fNumRatio_$c-_closure;
         const GHC.Real.$w$c*_closure;
         const GHC.Real.$fNumRatio_$c*_closure;
         const GHC.Real.$fNumRatio_closure;
         const GHC.Real.$fEnumRatio_$s$csucc_closure;
         const GHC.Real.$fEnumRatio1_closure;
         const GHC.Real.$w$s$c+_closure;
         const GHC.Real.$fEnumRatio_$csucc_closure;
         const GHC.Real.$fEnumRatio_$s$cpred_closure;
         const GHC.Real.$fEnumRatio_$cpred_closure;
         const GHC.Real.$fFractionalRatio_closure;
         const GHC.Real.$wnumericEnumFrom_closure;
         const GHC.Real.$fEnumRatio_$cenumFrom_closure;
         const GHC.Real.$fEnumRatio_$cenumFromThen_closure;
         const GHC.Real.$fEnumRatio_$cenumFromTo_closure;
         const GHC.Real.$fEnumRatio_$cenumFromThenTo_closure;
         const GHC.Real.$fRealRatio_closure;
         const GHC.Real.$w$s$cceiling_closure;
         const GHC.Real.$fRealFracRatio_$s$cceiling_closure;
         const GHC.Real.$w$cceiling_closure;
         const GHC.Real.$fRealFracRatio_$cceiling_closure;
         const GHC.Real.$w$s$cfloor_closure;
         const GHC.Real.$fRealFracRatio_$s$cfloor_closure;
         const GHC.Real.$w$cfloor_closure;
         const GHC.Real.$fRealFracRatio_$cfloor_closure;
         const sat_s1sCJ_closure;
         const GHC.Real.$w$s$cround_closure;
         const GHC.Real.$fRealFracRatio2_closure;
         const GHC.Real.$fRealFracRatio_$s$cround_closure;
         const GHC.Real.$w$cround_closure;
         const GHC.Real.$fRealFracRatio_$cround_closure;
         const GHC.Real.divZeroError_closure;
         const GHC.Real.even1_closure;
         const GHC.Real.$fRealFracRatio_$s$ctruncate_closure;
         const GHC.Real.$fRealFracRatio_closure;
         const g_r1j3N_closure;
         const GHC.Real.^_f_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const GHC.Real.^_$s^_closure;
         const GHC.Real.^1_closure;
         const GHC.Real.$w$s$cfromEnum_closure;
         const GHC.Real.$fEnumRatio_$s$cfromEnum_closure;
         const GHC.Show.$w$cshowsPrec4_closure;
         const GHC.Real.$w$s$cshowsPrec_closure;
         const GHC.Real.$fShowRatio_$s$cshowsPrec_closure;
         const GHC.Real.$fShowRatio1_closure;
         const GHC.Real.$w$s$cshow_closure;
         const GHC.Real.$fShowRatio_$s$cshow_closure;
         const GHC.Real.$fIntegralWord_closure;
         const GHC.Real.$w$slcm_closure;
         const GHC.Real.lcm_$slcm_closure;
         const GHC.Real.$w$slcm1_closure;
         const GHC.Real.lcm_$slcm1_closure;
         const GHC.Real.gcd_closure;
         const GHC.Real.lcm_closure;
         const GHC.Real.$w$ctoEnum_closure;
         const GHC.Real.$fEnumRatio1_closure;
         const GHC.Real.$fEnumRatio_$ctoEnum_closure;
         const GHC.Real.$fEnumRatio_$cenumFromThenTo_closure;
         const GHC.Real.$fEnumRatio_$cenumFromTo_closure;
         const GHC.Real.$fEnumRatio_$cenumFromThen_closure;
         const GHC.Real.$fEnumRatio_$cenumFrom_closure;
         const GHC.Real.$fEnumRatio_$cpred_closure;
         const GHC.Real.$fEnumRatio_$csucc_closure;
         const GHC.Real.$fEnumRatio_closure;
         const GHC.Real.^_$s^2_closure;
         const GHC.Real.^2_closure;
         const $wg1_r1j3Q_closure;
         const GHC.Integer.Type.timesInteger_closure;
         const GHC.Real.$wf_closure;
         const GHC.Real.^_f1_closure;
         const GHC.Real.^_$s^1_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const GHC.Real.even1_closure;
         const GHC.Real.even2_closure;
         const GHC.Real.^_closure;
         const lvl7_r1j3S_closure;
         const GHC.Real.even_closure;
         const GHC.Real.^%^_closure;
         const GHC.Real.$w^%^_closure;
         const GHC.Num.$fNumInteger_closure;
         const lvl6_r1j3R_closure;
         const GHC.Real.$w^^%^^_closure;
         const GHC.Real.^^%^^_closure;
         const GHC.Real.^^_closure;
 }]

