
==================== Pre unarise: ====================
2018-03-16 15:54:59.654445668 UTC

GHC.Num.+ :: forall a. GHC.Num.Num a => a -> a -> a
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SLLLLLL),U(U,A,A,A,A,A,A)>] =
    [] \r [v_slUo]
        case v_slUo of {
          GHC.Num.C:Num v_slUq [Occ=Once]
                        _ [Occ=Dead]
                        _ [Occ=Dead]
                        _ [Occ=Dead]
                        _ [Occ=Dead]
                        _ [Occ=Dead]
                        _ [Occ=Dead] ->
              v_slUq;
        };

GHC.Num.- :: forall a. GHC.Num.Num a => a -> a -> a
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LSLLLLL),U(A,U,A,A,A,A,A)>] =
    [] \r [v_slUx]
        case v_slUx of {
          GHC.Num.C:Num _ [Occ=Dead]
                        v_slUA [Occ=Once]
                        _ [Occ=Dead]
                        _ [Occ=Dead]
                        _ [Occ=Dead]
                        _ [Occ=Dead]
                        _ [Occ=Dead] ->
              v_slUA;
        };

GHC.Num.* :: forall a. GHC.Num.Num a => a -> a -> a
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLSLLLL),U(A,A,U,A,A,A,A)>] =
    [] \r [v_slUG]
        case v_slUG of {
          GHC.Num.C:Num _ [Occ=Dead]
                        _ [Occ=Dead]
                        v_slUK [Occ=Once]
                        _ [Occ=Dead]
                        _ [Occ=Dead]
                        _ [Occ=Dead]
                        _ [Occ=Dead] ->
              v_slUK;
        };

GHC.Num.negate :: forall a. GHC.Num.Num a => a -> a
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLSLLL),U(A,A,A,U,A,A,A)>] =
    [] \r [v_slUP]
        case v_slUP of {
          GHC.Num.C:Num _ [Occ=Dead]
                        _ [Occ=Dead]
                        _ [Occ=Dead]
                        v_slUU [Occ=Once]
                        _ [Occ=Dead]
                        _ [Occ=Dead]
                        _ [Occ=Dead] ->
              v_slUU;
        };

GHC.Num.abs :: forall a. GHC.Num.Num a => a -> a
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLSLL),U(A,A,A,A,U,A,A)>] =
    [] \r [v_slUY]
        case v_slUY of {
          GHC.Num.C:Num _ [Occ=Dead]
                        _ [Occ=Dead]
                        _ [Occ=Dead]
                        _ [Occ=Dead]
                        v_slV4 [Occ=Once]
                        _ [Occ=Dead]
                        _ [Occ=Dead] ->
              v_slV4;
        };

GHC.Num.signum :: forall a. GHC.Num.Num a => a -> a
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLSL),U(A,A,A,A,A,U,A)>] =
    [] \r [v_slV7]
        case v_slV7 of {
          GHC.Num.C:Num _ [Occ=Dead]
                        _ [Occ=Dead]
                        _ [Occ=Dead]
                        _ [Occ=Dead]
                        _ [Occ=Dead]
                        v_slVe [Occ=Once]
                        _ [Occ=Dead] ->
              v_slVe;
        };

GHC.Num.fromInteger
  :: forall a. GHC.Num.Num a => GHC.Integer.Type.Integer -> a
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLS),U(A,A,A,A,A,A,U)>] =
    [] \r [v_slVg]
        case v_slVg of {
          GHC.Num.C:Num _ [Occ=Dead]
                        _ [Occ=Dead]
                        _ [Occ=Dead]
                        _ [Occ=Dead]
                        _ [Occ=Dead]
                        _ [Occ=Dead]
                        v_slVo [Occ=Once] ->
              v_slVo;
        };

GHC.Num.$fNumInt_$cfromInteger [InlPrag=INLINE (sat-args=1)]
  :: GHC.Integer.Type.Integer -> GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [i_slVp]
        case GHC.Integer.Type.integerToInt i_slVp of wild_slVq {
          __DEFAULT -> GHC.Types.I# [wild_slVq];
        };

GHC.Num.$fNumInt_$cnegate :: GHC.Types.Int -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_slVr]
        case ds_slVr of {
          GHC.Types.I# x_slVt [Occ=Once] ->
              case negateInt# [x_slVt] of sat_slVu {
                __DEFAULT -> GHC.Types.I# [sat_slVu];
              };
        };

GHC.Num.$fNumInt_$c*
  :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_slVv ds1_slVw]
        case ds_slVv of {
          GHC.Types.I# x_slVy [Occ=Once] ->
              case ds1_slVw of {
                GHC.Types.I# y_slVA [Occ=Once] ->
                    case *# [x_slVy y_slVA] of sat_slVB {
                      __DEFAULT -> GHC.Types.I# [sat_slVB];
                    };
              };
        };

GHC.Num.$fNumInt_$c-
  :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_slVC ds1_slVD]
        case ds_slVC of {
          GHC.Types.I# x_slVF [Occ=Once] ->
              case ds1_slVD of {
                GHC.Types.I# y_slVH [Occ=Once] ->
                    case -# [x_slVF y_slVH] of sat_slVI {
                      __DEFAULT -> GHC.Types.I# [sat_slVI];
                    };
              };
        };

GHC.Num.$fNumInt_$c+
  :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_slVJ ds1_slVK]
        case ds_slVJ of {
          GHC.Types.I# x_slVM [Occ=Once] ->
              case ds1_slVK of {
                GHC.Types.I# y_slVO [Occ=Once] ->
                    case +# [x_slVM y_slVO] of sat_slVP {
                      __DEFAULT -> GHC.Types.I# [sat_slVP];
                    };
              };
        };

GHC.Num.$fNumInt_$cabs :: GHC.Types.Int -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [n_slVQ]
        case n_slVQ of wild_slVR {
          GHC.Types.I# x_slVS ->
              case >=# [x_slVS 0#] of {
                __DEFAULT ->
                    case negateInt# [x_slVS] of sat_slVU {
                      __DEFAULT -> GHC.Types.I# [sat_slVU];
                    };
                1# -> wild_slVR;
              };
        };

GHC.Num.$fNumInt3 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [1#];

GHC.Num.$fNumInt2 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

GHC.Num.$fNumInt1 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [-1#];

GHC.Num.$fNumInt_$csignum :: GHC.Types.Int -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [n_slVV]
        case n_slVV of {
          GHC.Types.I# x_slVX ->
              case <# [x_slVX 0#] of {
                __DEFAULT ->
                    case x_slVX of {
                      __DEFAULT -> GHC.Num.$fNumInt3;
                      0# -> GHC.Num.$fNumInt2;
                    };
                1# -> GHC.Num.$fNumInt1;
              };
        };

GHC.Num.$fNumInt [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Num.Num GHC.Types.Int
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Num.C:Num! [GHC.Num.$fNumInt_$c+
                                  GHC.Num.$fNumInt_$c-
                                  GHC.Num.$fNumInt_$c*
                                  GHC.Num.$fNumInt_$cnegate
                                  GHC.Num.$fNumInt_$cabs
                                  GHC.Num.$fNumInt_$csignum
                                  GHC.Num.$fNumInt_$cfromInteger];

GHC.Num.$fNumWord_$cfromInteger
  :: GHC.Integer.Type.Integer -> GHC.Types.Word
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [i_slW0]
        case GHC.Integer.Type.integerToWord i_slW0 of wild_slW1 {
          __DEFAULT -> GHC.Types.W# [wild_slW1];
        };

GHC.Num.$fNumWord2 :: GHC.Types.Word
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.W#! [1##];

GHC.Num.$fNumWord1 :: GHC.Types.Word
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.W#! [0##];

GHC.Num.$fNumWord_$csignum :: GHC.Types.Word -> GHC.Types.Word
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [ds_slW2]
        case ds_slW2 of {
          GHC.Types.W# ds1_slW4 [Occ=Once!] ->
              case ds1_slW4 of {
                __DEFAULT -> GHC.Num.$fNumWord2;
                0## -> GHC.Num.$fNumWord1;
              };
        };

GHC.Num.$fNumWord_$cabs :: GHC.Types.Word -> GHC.Types.Word
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U(U)>m, Unf=OtherCon []] =
    [] \r [x_slW6] x_slW6;

GHC.Num.$fNumWord_$cnegate :: GHC.Types.Word -> GHC.Types.Word
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_slW7]
        case ds_slW7 of {
          GHC.Types.W# x#_slW9 [Occ=Once] ->
              case word2Int# [x#_slW9] of sat_slWa {
                __DEFAULT ->
                    case negateInt# [sat_slWa] of sat_slWb {
                      __DEFAULT ->
                          case int2Word# [sat_slWb] of sat_slWc {
                            __DEFAULT -> GHC.Types.W# [sat_slWc];
                          };
                    };
              };
        };

GHC.Num.$fNumWord_$c*
  :: GHC.Types.Word -> GHC.Types.Word -> GHC.Types.Word
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_slWd ds1_slWe]
        case ds_slWd of {
          GHC.Types.W# x#_slWg [Occ=Once] ->
              case ds1_slWe of {
                GHC.Types.W# y#_slWi [Occ=Once] ->
                    case timesWord# [x#_slWg y#_slWi] of sat_slWj {
                      __DEFAULT -> GHC.Types.W# [sat_slWj];
                    };
              };
        };

GHC.Num.$fNumWord_$c-
  :: GHC.Types.Word -> GHC.Types.Word -> GHC.Types.Word
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_slWk ds1_slWl]
        case ds_slWk of {
          GHC.Types.W# x#_slWn [Occ=Once] ->
              case ds1_slWl of {
                GHC.Types.W# y#_slWp [Occ=Once] ->
                    case minusWord# [x#_slWn y#_slWp] of sat_slWq {
                      __DEFAULT -> GHC.Types.W# [sat_slWq];
                    };
              };
        };

GHC.Num.$fNumWord_$c+
  :: GHC.Types.Word -> GHC.Types.Word -> GHC.Types.Word
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_slWr ds1_slWs]
        case ds_slWr of {
          GHC.Types.W# x#_slWu [Occ=Once] ->
              case ds1_slWs of {
                GHC.Types.W# y#_slWw [Occ=Once] ->
                    case plusWord# [x#_slWu y#_slWw] of sat_slWx {
                      __DEFAULT -> GHC.Types.W# [sat_slWx];
                    };
              };
        };

GHC.Num.$fNumWord [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Num.Num GHC.Types.Word
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Num.C:Num! [GHC.Num.$fNumWord_$c+
                                  GHC.Num.$fNumWord_$c-
                                  GHC.Num.$fNumWord_$c*
                                  GHC.Num.$fNumWord_$cnegate
                                  GHC.Num.$fNumWord_$cabs
                                  GHC.Num.$fNumWord_$csignum
                                  GHC.Num.$fNumWord_$cfromInteger];

GHC.Num.$fNumInteger_$cfromInteger
  :: GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_slWy] x_slWy;

GHC.Num.$fNumInteger [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Num.Num GHC.Integer.Type.Integer
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Num.C:Num! [GHC.Integer.Type.plusInteger
                                  GHC.Integer.Type.minusInteger
                                  GHC.Integer.Type.timesInteger
                                  GHC.Integer.Type.negateInteger
                                  GHC.Integer.Type.absInteger
                                  GHC.Integer.Type.signumInteger
                                  GHC.Num.$fNumInteger_$cfromInteger];

lvl_rlU7 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True GHC.Types.[];

GHC.Num.$dmnegate [InlPrag=INLINE (sat-args=1)]
  :: forall a. GHC.Num.Num a => a -> a
[GblId,
 Arity=2,
 Str=<S(LC(C(S))LLLLL),U(A,1*C1(C1(U)),A,A,A,A,1*C1(U))><L,U>,
 Unf=OtherCon []] =
    [] \r [$dNum_slWG x_slWH]
        let {
          sat_slWI [Occ=Once] :: a_alGX
          [LclId] =
              [$dNum_slWG] \u [] GHC.Num.fromInteger $dNum_slWG lvl_rlU7;
        } in  GHC.Num.- $dNum_slWG sat_slWI x_slWH;

GHC.Num.$dm- [InlPrag=INLINE (sat-args=2)]
  :: forall a. GHC.Num.Num a => a -> a -> a
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(C(C(S))LLLLLL),U(1*C1(C1(U)),A,A,1*C1(U),A,A,A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dNum_slWJ x_slWK y_slWL]
        let {
          sat_slWM [Occ=Once] :: a_alGX
          [LclId] =
              [$dNum_slWJ y_slWL] \u [] GHC.Num.negate $dNum_slWJ y_slWL;
        } in  GHC.Num.+ $dNum_slWJ x_slWK sat_slWM;

GHC.Num.subtract [InlPrag=INLINE (sat-args=2)]
  :: forall a. GHC.Num.Num a => a -> a -> a
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LC(C(S))LLLLL),1*U(A,1*C1(C1(U)),A,A,A,A,A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dNum_slWN eta_slWO eta1_slWP]
        GHC.Num.- $dNum_slWN eta1_slWP eta_slWO;

GHC.Num.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.Num.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Num.$trModule4];

GHC.Num.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.Num"#;

GHC.Num.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Num.$trModule2];

GHC.Num.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.Num.$trModule3
                                     GHC.Num.$trModule1];

$krep_rlU8 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Integer.Type.$tcInteger
                                              GHC.Types.[]];

$krep1_rlU9 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcConstraint
                                              GHC.Types.[]];

GHC.Num.$tcNum1 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.Types.krep$* $krep1_rlU9];

$krep2_rlUa :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [0#];

$krep3_rlUb :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep2_rlUa $krep2_rlUa];

$krep4_rlUc :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep2_rlUa $krep3_rlUb];

$krep5_rlUd :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_rlU8 $krep2_rlUa];

GHC.Num.$tcNum3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Num"#;

GHC.Num.$tcNum2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Num.$tcNum3];

GHC.Num.$tcNum :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [4789207468288702218##
                                    12287762746798050066##
                                    GHC.Num.$trModule
                                    GHC.Num.$tcNum2
                                    0#
                                    GHC.Num.$tcNum1];

$krep6_rlUe :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep2_rlUa GHC.Types.[]];

$krep7_rlUf :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Num.$tcNum
                                              $krep6_rlUe];

$krep8_rlUg :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep5_rlUd $krep7_rlUf];

$krep9_rlUh :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep3_rlUb $krep8_rlUg];

$krep10_rlUi :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep3_rlUb $krep9_rlUh];

$krep11_rlUj :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep3_rlUb $krep10_rlUi];

$krep12_rlUk :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep4_rlUc $krep11_rlUj];

$krep13_rlUl :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep4_rlUc $krep12_rlUk];

GHC.Num.$tc'C:Num1 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep4_rlUc $krep13_rlUl];

GHC.Num.$tc'C:Num3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'C:Num"#;

GHC.Num.$tc'C:Num2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Num.$tc'C:Num3];

GHC.Num.$tc'C:Num :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [277567704124416124##
                                    17341550453118006986##
                                    GHC.Num.$trModule
                                    GHC.Num.$tc'C:Num2
                                    1#
                                    GHC.Num.$tc'C:Num1];

GHC.Num.C:Num
  :: forall a.
     (a -> a -> a)
     -> (a -> a -> a)
     -> (a -> a -> a)
     -> (a -> a)
     -> (a -> a)
     -> (a -> a)
     -> (GHC.Integer.Type.Integer -> a)
     -> GHC.Num.Num a
[GblId[DataCon],
 Arity=7,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U><L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B7 eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        GHC.Num.C:Num [eta_B7 eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1];


==================== STG syntax: ====================
2018-03-16 15:54:59.662127124 UTC

GHC.Num.+ :: forall a. GHC.Num.Num a => a -> a -> a
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SLLLLLL),U(U,A,A,A,A,A,A)>] =
    [] \r [v_slUo]
        case v_slUo of {
          GHC.Num.C:Num v_slUq [Occ=Once]
                        _ [Occ=Dead]
                        _ [Occ=Dead]
                        _ [Occ=Dead]
                        _ [Occ=Dead]
                        _ [Occ=Dead]
                        _ [Occ=Dead] ->
              v_slUq;
        };

GHC.Num.- :: forall a. GHC.Num.Num a => a -> a -> a
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LSLLLLL),U(A,U,A,A,A,A,A)>] =
    [] \r [v_slUx]
        case v_slUx of {
          GHC.Num.C:Num _ [Occ=Dead]
                        v_slUA [Occ=Once]
                        _ [Occ=Dead]
                        _ [Occ=Dead]
                        _ [Occ=Dead]
                        _ [Occ=Dead]
                        _ [Occ=Dead] ->
              v_slUA;
        };

GHC.Num.* :: forall a. GHC.Num.Num a => a -> a -> a
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLSLLLL),U(A,A,U,A,A,A,A)>] =
    [] \r [v_slUG]
        case v_slUG of {
          GHC.Num.C:Num _ [Occ=Dead]
                        _ [Occ=Dead]
                        v_slUK [Occ=Once]
                        _ [Occ=Dead]
                        _ [Occ=Dead]
                        _ [Occ=Dead]
                        _ [Occ=Dead] ->
              v_slUK;
        };

GHC.Num.negate :: forall a. GHC.Num.Num a => a -> a
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLSLLL),U(A,A,A,U,A,A,A)>] =
    [] \r [v_slUP]
        case v_slUP of {
          GHC.Num.C:Num _ [Occ=Dead]
                        _ [Occ=Dead]
                        _ [Occ=Dead]
                        v_slUU [Occ=Once]
                        _ [Occ=Dead]
                        _ [Occ=Dead]
                        _ [Occ=Dead] ->
              v_slUU;
        };

GHC.Num.abs :: forall a. GHC.Num.Num a => a -> a
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLSLL),U(A,A,A,A,U,A,A)>] =
    [] \r [v_slUY]
        case v_slUY of {
          GHC.Num.C:Num _ [Occ=Dead]
                        _ [Occ=Dead]
                        _ [Occ=Dead]
                        _ [Occ=Dead]
                        v_slV4 [Occ=Once]
                        _ [Occ=Dead]
                        _ [Occ=Dead] ->
              v_slV4;
        };

GHC.Num.signum :: forall a. GHC.Num.Num a => a -> a
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLSL),U(A,A,A,A,A,U,A)>] =
    [] \r [v_slV7]
        case v_slV7 of {
          GHC.Num.C:Num _ [Occ=Dead]
                        _ [Occ=Dead]
                        _ [Occ=Dead]
                        _ [Occ=Dead]
                        _ [Occ=Dead]
                        v_slVe [Occ=Once]
                        _ [Occ=Dead] ->
              v_slVe;
        };

GHC.Num.fromInteger
  :: forall a. GHC.Num.Num a => GHC.Integer.Type.Integer -> a
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLS),U(A,A,A,A,A,A,U)>] =
    [] \r [v_slVg]
        case v_slVg of {
          GHC.Num.C:Num _ [Occ=Dead]
                        _ [Occ=Dead]
                        _ [Occ=Dead]
                        _ [Occ=Dead]
                        _ [Occ=Dead]
                        _ [Occ=Dead]
                        v_slVo [Occ=Once] ->
              v_slVo;
        };

GHC.Num.$fNumInt_$cfromInteger [InlPrag=INLINE (sat-args=1)]
  :: GHC.Integer.Type.Integer -> GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [i_slVp]
        case GHC.Integer.Type.integerToInt i_slVp of wild_slVq {
          __DEFAULT -> GHC.Types.I# [wild_slVq];
        };

GHC.Num.$fNumInt_$cnegate :: GHC.Types.Int -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_slVr]
        case ds_slVr of {
          GHC.Types.I# x_slVt [Occ=Once] ->
              case negateInt# [x_slVt] of sat_slVu {
                __DEFAULT -> GHC.Types.I# [sat_slVu];
              };
        };

GHC.Num.$fNumInt_$c*
  :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_slVv ds1_slVw]
        case ds_slVv of {
          GHC.Types.I# x_slVy [Occ=Once] ->
              case ds1_slVw of {
                GHC.Types.I# y_slVA [Occ=Once] ->
                    case *# [x_slVy y_slVA] of sat_slVB {
                      __DEFAULT -> GHC.Types.I# [sat_slVB];
                    };
              };
        };

GHC.Num.$fNumInt_$c-
  :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_slVC ds1_slVD]
        case ds_slVC of {
          GHC.Types.I# x_slVF [Occ=Once] ->
              case ds1_slVD of {
                GHC.Types.I# y_slVH [Occ=Once] ->
                    case -# [x_slVF y_slVH] of sat_slVI {
                      __DEFAULT -> GHC.Types.I# [sat_slVI];
                    };
              };
        };

GHC.Num.$fNumInt_$c+
  :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_slVJ ds1_slVK]
        case ds_slVJ of {
          GHC.Types.I# x_slVM [Occ=Once] ->
              case ds1_slVK of {
                GHC.Types.I# y_slVO [Occ=Once] ->
                    case +# [x_slVM y_slVO] of sat_slVP {
                      __DEFAULT -> GHC.Types.I# [sat_slVP];
                    };
              };
        };

GHC.Num.$fNumInt_$cabs :: GHC.Types.Int -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [n_slVQ]
        case n_slVQ of wild_slVR {
          GHC.Types.I# x_slVS ->
              case >=# [x_slVS 0#] of {
                __DEFAULT ->
                    case negateInt# [x_slVS] of sat_slVU {
                      __DEFAULT -> GHC.Types.I# [sat_slVU];
                    };
                1# -> wild_slVR;
              };
        };

GHC.Num.$fNumInt3 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [1#];

GHC.Num.$fNumInt2 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

GHC.Num.$fNumInt1 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [-1#];

GHC.Num.$fNumInt_$csignum :: GHC.Types.Int -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [n_slVV]
        case n_slVV of {
          GHC.Types.I# x_slVX ->
              case <# [x_slVX 0#] of {
                __DEFAULT ->
                    case x_slVX of {
                      __DEFAULT -> GHC.Num.$fNumInt3;
                      0# -> GHC.Num.$fNumInt2;
                    };
                1# -> GHC.Num.$fNumInt1;
              };
        };

GHC.Num.$fNumInt [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Num.Num GHC.Types.Int
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Num.C:Num! [GHC.Num.$fNumInt_$c+
                                  GHC.Num.$fNumInt_$c-
                                  GHC.Num.$fNumInt_$c*
                                  GHC.Num.$fNumInt_$cnegate
                                  GHC.Num.$fNumInt_$cabs
                                  GHC.Num.$fNumInt_$csignum
                                  GHC.Num.$fNumInt_$cfromInteger];

GHC.Num.$fNumWord_$cfromInteger
  :: GHC.Integer.Type.Integer -> GHC.Types.Word
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [i_slW0]
        case GHC.Integer.Type.integerToWord i_slW0 of wild_slW1 {
          __DEFAULT -> GHC.Types.W# [wild_slW1];
        };

GHC.Num.$fNumWord2 :: GHC.Types.Word
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.W#! [1##];

GHC.Num.$fNumWord1 :: GHC.Types.Word
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.W#! [0##];

GHC.Num.$fNumWord_$csignum :: GHC.Types.Word -> GHC.Types.Word
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [ds_slW2]
        case ds_slW2 of {
          GHC.Types.W# ds1_slW4 [Occ=Once!] ->
              case ds1_slW4 of {
                __DEFAULT -> GHC.Num.$fNumWord2;
                0## -> GHC.Num.$fNumWord1;
              };
        };

GHC.Num.$fNumWord_$cabs :: GHC.Types.Word -> GHC.Types.Word
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U(U)>m, Unf=OtherCon []] =
    [] \r [x_slW6] x_slW6;

GHC.Num.$fNumWord_$cnegate :: GHC.Types.Word -> GHC.Types.Word
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_slW7]
        case ds_slW7 of {
          GHC.Types.W# x#_slW9 [Occ=Once] ->
              case word2Int# [x#_slW9] of sat_slWa {
                __DEFAULT ->
                    case negateInt# [sat_slWa] of sat_slWb {
                      __DEFAULT ->
                          case int2Word# [sat_slWb] of sat_slWc {
                            __DEFAULT -> GHC.Types.W# [sat_slWc];
                          };
                    };
              };
        };

GHC.Num.$fNumWord_$c*
  :: GHC.Types.Word -> GHC.Types.Word -> GHC.Types.Word
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_slWd ds1_slWe]
        case ds_slWd of {
          GHC.Types.W# x#_slWg [Occ=Once] ->
              case ds1_slWe of {
                GHC.Types.W# y#_slWi [Occ=Once] ->
                    case timesWord# [x#_slWg y#_slWi] of sat_slWj {
                      __DEFAULT -> GHC.Types.W# [sat_slWj];
                    };
              };
        };

GHC.Num.$fNumWord_$c-
  :: GHC.Types.Word -> GHC.Types.Word -> GHC.Types.Word
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_slWk ds1_slWl]
        case ds_slWk of {
          GHC.Types.W# x#_slWn [Occ=Once] ->
              case ds1_slWl of {
                GHC.Types.W# y#_slWp [Occ=Once] ->
                    case minusWord# [x#_slWn y#_slWp] of sat_slWq {
                      __DEFAULT -> GHC.Types.W# [sat_slWq];
                    };
              };
        };

GHC.Num.$fNumWord_$c+
  :: GHC.Types.Word -> GHC.Types.Word -> GHC.Types.Word
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_slWr ds1_slWs]
        case ds_slWr of {
          GHC.Types.W# x#_slWu [Occ=Once] ->
              case ds1_slWs of {
                GHC.Types.W# y#_slWw [Occ=Once] ->
                    case plusWord# [x#_slWu y#_slWw] of sat_slWx {
                      __DEFAULT -> GHC.Types.W# [sat_slWx];
                    };
              };
        };

GHC.Num.$fNumWord [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Num.Num GHC.Types.Word
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Num.C:Num! [GHC.Num.$fNumWord_$c+
                                  GHC.Num.$fNumWord_$c-
                                  GHC.Num.$fNumWord_$c*
                                  GHC.Num.$fNumWord_$cnegate
                                  GHC.Num.$fNumWord_$cabs
                                  GHC.Num.$fNumWord_$csignum
                                  GHC.Num.$fNumWord_$cfromInteger];

GHC.Num.$fNumInteger_$cfromInteger
  :: GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_slWy] x_slWy;

GHC.Num.$fNumInteger [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Num.Num GHC.Integer.Type.Integer
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Num.C:Num! [GHC.Integer.Type.plusInteger
                                  GHC.Integer.Type.minusInteger
                                  GHC.Integer.Type.timesInteger
                                  GHC.Integer.Type.negateInteger
                                  GHC.Integer.Type.absInteger
                                  GHC.Integer.Type.signumInteger
                                  GHC.Num.$fNumInteger_$cfromInteger];

lvl_rlU7 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True GHC.Types.[];

GHC.Num.$dmnegate [InlPrag=INLINE (sat-args=1)]
  :: forall a. GHC.Num.Num a => a -> a
[GblId,
 Arity=2,
 Str=<S(LC(C(S))LLLLL),U(A,1*C1(C1(U)),A,A,A,A,1*C1(U))><L,U>,
 Unf=OtherCon []] =
    [] \r [$dNum_slWG x_slWH]
        let {
          sat_slWI [Occ=Once] :: a_alGX
          [LclId] =
              [$dNum_slWG] \u [] GHC.Num.fromInteger $dNum_slWG lvl_rlU7;
        } in  GHC.Num.- $dNum_slWG sat_slWI x_slWH;

GHC.Num.$dm- [InlPrag=INLINE (sat-args=2)]
  :: forall a. GHC.Num.Num a => a -> a -> a
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(C(C(S))LLLLLL),U(1*C1(C1(U)),A,A,1*C1(U),A,A,A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dNum_slWJ x_slWK y_slWL]
        let {
          sat_slWM [Occ=Once] :: a_alGX
          [LclId] =
              [$dNum_slWJ y_slWL] \u [] GHC.Num.negate $dNum_slWJ y_slWL;
        } in  GHC.Num.+ $dNum_slWJ x_slWK sat_slWM;

GHC.Num.subtract [InlPrag=INLINE (sat-args=2)]
  :: forall a. GHC.Num.Num a => a -> a -> a
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LC(C(S))LLLLL),1*U(A,1*C1(C1(U)),A,A,A,A,A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dNum_slWN eta_slWO eta1_slWP]
        GHC.Num.- $dNum_slWN eta1_slWP eta_slWO;

GHC.Num.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.Num.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Num.$trModule4];

GHC.Num.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.Num"#;

GHC.Num.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Num.$trModule2];

GHC.Num.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.Num.$trModule3
                                     GHC.Num.$trModule1];

$krep_rlU8 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Integer.Type.$tcInteger
                                              GHC.Types.[]];

$krep1_rlU9 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcConstraint
                                              GHC.Types.[]];

GHC.Num.$tcNum1 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.Types.krep$* $krep1_rlU9];

$krep2_rlUa :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [0#];

$krep3_rlUb :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep2_rlUa $krep2_rlUa];

$krep4_rlUc :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep2_rlUa $krep3_rlUb];

$krep5_rlUd :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_rlU8 $krep2_rlUa];

GHC.Num.$tcNum3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Num"#;

GHC.Num.$tcNum2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Num.$tcNum3];

GHC.Num.$tcNum :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [4789207468288702218##
                                    12287762746798050066##
                                    GHC.Num.$trModule
                                    GHC.Num.$tcNum2
                                    0#
                                    GHC.Num.$tcNum1];

$krep6_rlUe :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep2_rlUa GHC.Types.[]];

$krep7_rlUf :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Num.$tcNum
                                              $krep6_rlUe];

$krep8_rlUg :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep5_rlUd $krep7_rlUf];

$krep9_rlUh :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep3_rlUb $krep8_rlUg];

$krep10_rlUi :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep3_rlUb $krep9_rlUh];

$krep11_rlUj :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep3_rlUb $krep10_rlUi];

$krep12_rlUk :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep4_rlUc $krep11_rlUj];

$krep13_rlUl :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep4_rlUc $krep12_rlUk];

GHC.Num.$tc'C:Num1 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep4_rlUc $krep13_rlUl];

GHC.Num.$tc'C:Num3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'C:Num"#;

GHC.Num.$tc'C:Num2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Num.$tc'C:Num3];

GHC.Num.$tc'C:Num :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [277567704124416124##
                                    17341550453118006986##
                                    GHC.Num.$trModule
                                    GHC.Num.$tc'C:Num2
                                    1#
                                    GHC.Num.$tc'C:Num1];

GHC.Num.C:Num
  :: forall a.
     (a -> a -> a)
     -> (a -> a -> a)
     -> (a -> a -> a)
     -> (a -> a)
     -> (a -> a)
     -> (a -> a)
     -> (GHC.Integer.Type.Integer -> a)
     -> GHC.Num.Num a
[GblId[DataCon],
 Arity=7,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U><L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B7 eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        GHC.Num.C:Num [eta_B7 eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1];


==================== Pre unarise: ====================
2018-03-16 15:55:00.321943182 UTC

GHC.Num.+ :: forall a. GHC.Num.Num a => a -> a -> a
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SLLLLLL),U(U,A,A,A,A,A,A)>] =
    [] \r [v_smpi]
        case v_smpi of {
          GHC.Num.C:Num v_smpk [Occ=Once]
                        _ [Occ=Dead]
                        _ [Occ=Dead]
                        _ [Occ=Dead]
                        _ [Occ=Dead]
                        _ [Occ=Dead]
                        _ [Occ=Dead] ->
              v_smpk;
        };

GHC.Num.- :: forall a. GHC.Num.Num a => a -> a -> a
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LSLLLLL),U(A,U,A,A,A,A,A)>] =
    [] \r [v_smpr]
        case v_smpr of {
          GHC.Num.C:Num _ [Occ=Dead]
                        v_smpu [Occ=Once]
                        _ [Occ=Dead]
                        _ [Occ=Dead]
                        _ [Occ=Dead]
                        _ [Occ=Dead]
                        _ [Occ=Dead] ->
              v_smpu;
        };

GHC.Num.* :: forall a. GHC.Num.Num a => a -> a -> a
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLSLLLL),U(A,A,U,A,A,A,A)>] =
    [] \r [v_smpA]
        case v_smpA of {
          GHC.Num.C:Num _ [Occ=Dead]
                        _ [Occ=Dead]
                        v_smpE [Occ=Once]
                        _ [Occ=Dead]
                        _ [Occ=Dead]
                        _ [Occ=Dead]
                        _ [Occ=Dead] ->
              v_smpE;
        };

GHC.Num.negate :: forall a. GHC.Num.Num a => a -> a
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLSLLL),U(A,A,A,U,A,A,A)>] =
    [] \r [v_smpJ]
        case v_smpJ of {
          GHC.Num.C:Num _ [Occ=Dead]
                        _ [Occ=Dead]
                        _ [Occ=Dead]
                        v_smpO [Occ=Once]
                        _ [Occ=Dead]
                        _ [Occ=Dead]
                        _ [Occ=Dead] ->
              v_smpO;
        };

GHC.Num.abs :: forall a. GHC.Num.Num a => a -> a
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLSLL),U(A,A,A,A,U,A,A)>] =
    [] \r [v_smpS]
        case v_smpS of {
          GHC.Num.C:Num _ [Occ=Dead]
                        _ [Occ=Dead]
                        _ [Occ=Dead]
                        _ [Occ=Dead]
                        v_smpY [Occ=Once]
                        _ [Occ=Dead]
                        _ [Occ=Dead] ->
              v_smpY;
        };

GHC.Num.signum :: forall a. GHC.Num.Num a => a -> a
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLSL),U(A,A,A,A,A,U,A)>] =
    [] \r [v_smq1]
        case v_smq1 of {
          GHC.Num.C:Num _ [Occ=Dead]
                        _ [Occ=Dead]
                        _ [Occ=Dead]
                        _ [Occ=Dead]
                        _ [Occ=Dead]
                        v_smq8 [Occ=Once]
                        _ [Occ=Dead] ->
              v_smq8;
        };

GHC.Num.fromInteger
  :: forall a. GHC.Num.Num a => GHC.Integer.Type.Integer -> a
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLS),U(A,A,A,A,A,A,U)>] =
    [] \r [v_smqa]
        case v_smqa of {
          GHC.Num.C:Num _ [Occ=Dead]
                        _ [Occ=Dead]
                        _ [Occ=Dead]
                        _ [Occ=Dead]
                        _ [Occ=Dead]
                        _ [Occ=Dead]
                        v_smqi [Occ=Once] ->
              v_smqi;
        };

GHC.Num.$fNumInt_$cfromInteger [InlPrag=INLINE (sat-args=1)]
  :: GHC.Integer.Type.Integer -> GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [i_smqj]
        case GHC.Integer.Type.integerToInt i_smqj of wild_smqk {
          __DEFAULT -> GHC.Types.I# [wild_smqk];
        };

GHC.Num.$fNumInt_$cnegate :: GHC.Types.Int -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_smql]
        case ds_smql of {
          GHC.Types.I# x_smqn [Occ=Once] ->
              case negateInt# [x_smqn] of sat_smqo {
                __DEFAULT -> GHC.Types.I# [sat_smqo];
              };
        };

GHC.Num.$fNumInt_$c*
  :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_smqp ds1_smqq]
        case ds_smqp of {
          GHC.Types.I# x_smqs [Occ=Once] ->
              case ds1_smqq of {
                GHC.Types.I# y_smqu [Occ=Once] ->
                    case *# [x_smqs y_smqu] of sat_smqv {
                      __DEFAULT -> GHC.Types.I# [sat_smqv];
                    };
              };
        };

GHC.Num.$fNumInt_$c-
  :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_smqw ds1_smqx]
        case ds_smqw of {
          GHC.Types.I# x_smqz [Occ=Once] ->
              case ds1_smqx of {
                GHC.Types.I# y_smqB [Occ=Once] ->
                    case -# [x_smqz y_smqB] of sat_smqC {
                      __DEFAULT -> GHC.Types.I# [sat_smqC];
                    };
              };
        };

GHC.Num.$fNumInt_$c+
  :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_smqD ds1_smqE]
        case ds_smqD of {
          GHC.Types.I# x_smqG [Occ=Once] ->
              case ds1_smqE of {
                GHC.Types.I# y_smqI [Occ=Once] ->
                    case +# [x_smqG y_smqI] of sat_smqJ {
                      __DEFAULT -> GHC.Types.I# [sat_smqJ];
                    };
              };
        };

GHC.Num.$fNumInt_$cabs :: GHC.Types.Int -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [n_smqK]
        case n_smqK of wild_smqL {
          GHC.Types.I# x_smqM ->
              case >=# [x_smqM 0#] of {
                __DEFAULT ->
                    case negateInt# [x_smqM] of sat_smqO {
                      __DEFAULT -> GHC.Types.I# [sat_smqO];
                    };
                1# -> wild_smqL;
              };
        };

GHC.Num.$fNumInt3 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [1#];

GHC.Num.$fNumInt2 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

GHC.Num.$fNumInt1 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [-1#];

GHC.Num.$fNumInt_$csignum :: GHC.Types.Int -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [n_smqP]
        case n_smqP of {
          GHC.Types.I# x_smqR ->
              case <# [x_smqR 0#] of {
                __DEFAULT ->
                    case x_smqR of {
                      __DEFAULT -> GHC.Num.$fNumInt3;
                      0# -> GHC.Num.$fNumInt2;
                    };
                1# -> GHC.Num.$fNumInt1;
              };
        };

GHC.Num.$fNumInt [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Num.Num GHC.Types.Int
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Num.C:Num! [GHC.Num.$fNumInt_$c+
                                  GHC.Num.$fNumInt_$c-
                                  GHC.Num.$fNumInt_$c*
                                  GHC.Num.$fNumInt_$cnegate
                                  GHC.Num.$fNumInt_$cabs
                                  GHC.Num.$fNumInt_$csignum
                                  GHC.Num.$fNumInt_$cfromInteger];

GHC.Num.$fNumWord_$cfromInteger
  :: GHC.Integer.Type.Integer -> GHC.Types.Word
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [i_smqU]
        case GHC.Integer.Type.integerToWord i_smqU of wild_smqV {
          __DEFAULT -> GHC.Types.W# [wild_smqV];
        };

GHC.Num.$fNumWord2 :: GHC.Types.Word
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.W#! [1##];

GHC.Num.$fNumWord1 :: GHC.Types.Word
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.W#! [0##];

GHC.Num.$fNumWord_$csignum :: GHC.Types.Word -> GHC.Types.Word
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [ds_smqW]
        case ds_smqW of {
          GHC.Types.W# ds1_smqY [Occ=Once!] ->
              case ds1_smqY of {
                __DEFAULT -> GHC.Num.$fNumWord2;
                0## -> GHC.Num.$fNumWord1;
              };
        };

GHC.Num.$fNumWord_$cabs :: GHC.Types.Word -> GHC.Types.Word
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U(U)>m, Unf=OtherCon []] =
    [] \r [x_smr0] x_smr0;

GHC.Num.$fNumWord_$cnegate :: GHC.Types.Word -> GHC.Types.Word
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_smr1]
        case ds_smr1 of {
          GHC.Types.W# x#_smr3 [Occ=Once] ->
              case word2Int# [x#_smr3] of sat_smr4 {
                __DEFAULT ->
                    case negateInt# [sat_smr4] of sat_smr5 {
                      __DEFAULT ->
                          case int2Word# [sat_smr5] of sat_smr6 {
                            __DEFAULT -> GHC.Types.W# [sat_smr6];
                          };
                    };
              };
        };

GHC.Num.$fNumWord_$c*
  :: GHC.Types.Word -> GHC.Types.Word -> GHC.Types.Word
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_smr7 ds1_smr8]
        case ds_smr7 of {
          GHC.Types.W# x#_smra [Occ=Once] ->
              case ds1_smr8 of {
                GHC.Types.W# y#_smrc [Occ=Once] ->
                    case timesWord# [x#_smra y#_smrc] of sat_smrd {
                      __DEFAULT -> GHC.Types.W# [sat_smrd];
                    };
              };
        };

GHC.Num.$fNumWord_$c-
  :: GHC.Types.Word -> GHC.Types.Word -> GHC.Types.Word
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_smre ds1_smrf]
        case ds_smre of {
          GHC.Types.W# x#_smrh [Occ=Once] ->
              case ds1_smrf of {
                GHC.Types.W# y#_smrj [Occ=Once] ->
                    case minusWord# [x#_smrh y#_smrj] of sat_smrk {
                      __DEFAULT -> GHC.Types.W# [sat_smrk];
                    };
              };
        };

GHC.Num.$fNumWord_$c+
  :: GHC.Types.Word -> GHC.Types.Word -> GHC.Types.Word
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_smrl ds1_smrm]
        case ds_smrl of {
          GHC.Types.W# x#_smro [Occ=Once] ->
              case ds1_smrm of {
                GHC.Types.W# y#_smrq [Occ=Once] ->
                    case plusWord# [x#_smro y#_smrq] of sat_smrr {
                      __DEFAULT -> GHC.Types.W# [sat_smrr];
                    };
              };
        };

GHC.Num.$fNumWord [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Num.Num GHC.Types.Word
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Num.C:Num! [GHC.Num.$fNumWord_$c+
                                  GHC.Num.$fNumWord_$c-
                                  GHC.Num.$fNumWord_$c*
                                  GHC.Num.$fNumWord_$cnegate
                                  GHC.Num.$fNumWord_$cabs
                                  GHC.Num.$fNumWord_$csignum
                                  GHC.Num.$fNumWord_$cfromInteger];

GHC.Num.$fNumInteger_$cfromInteger
  :: GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_smrs] x_smrs;

GHC.Num.$fNumInteger [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Num.Num GHC.Integer.Type.Integer
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Num.C:Num! [GHC.Integer.Type.plusInteger
                                  GHC.Integer.Type.minusInteger
                                  GHC.Integer.Type.timesInteger
                                  GHC.Integer.Type.negateInteger
                                  GHC.Integer.Type.absInteger
                                  GHC.Integer.Type.signumInteger
                                  GHC.Num.$fNumInteger_$cfromInteger];

lvl_rlU7 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True GHC.Types.[];

GHC.Num.$dmnegate [InlPrag=INLINE (sat-args=1)]
  :: forall a. GHC.Num.Num a => a -> a
[GblId,
 Arity=2,
 Str=<S(LC(C(S))LLLLL),U(A,1*C1(C1(U)),A,A,A,A,1*C1(U))><L,U>,
 Unf=OtherCon []] =
    [] \r [$dNum_smrt x_smru]
        let {
          sat_smrv [Occ=Once] :: a_alGX
          [LclId] =
              [$dNum_smrt] \u [] GHC.Num.fromInteger $dNum_smrt lvl_rlU7;
        } in  GHC.Num.- $dNum_smrt sat_smrv x_smru;

GHC.Num.$dm- [InlPrag=INLINE (sat-args=2)]
  :: forall a. GHC.Num.Num a => a -> a -> a
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(C(C(S))LLLLLL),U(1*C1(C1(U)),A,A,1*C1(U),A,A,A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dNum_smrw x_smrx y_smry]
        let {
          sat_smrz [Occ=Once] :: a_alGX
          [LclId] =
              [$dNum_smrw y_smry] \u [] GHC.Num.negate $dNum_smrw y_smry;
        } in  GHC.Num.+ $dNum_smrw x_smrx sat_smrz;

GHC.Num.subtract [InlPrag=INLINE (sat-args=2)]
  :: forall a. GHC.Num.Num a => a -> a -> a
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LC(C(S))LLLLL),1*U(A,1*C1(C1(U)),A,A,A,A,A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dNum_smrA eta_smrB eta1_smrC]
        GHC.Num.- $dNum_smrA eta1_smrC eta_smrB;

GHC.Num.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.Num.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Num.$trModule4];

GHC.Num.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.Num"#;

GHC.Num.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Num.$trModule2];

GHC.Num.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.Num.$trModule3
                                     GHC.Num.$trModule1];

$krep_rlU8 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Integer.Type.$tcInteger
                                              GHC.Types.[]];

$krep1_rlU9 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcConstraint
                                              GHC.Types.[]];

GHC.Num.$tcNum1 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.Types.krep$* $krep1_rlU9];

$krep2_rlUa :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [0#];

$krep3_rlUb :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep2_rlUa $krep2_rlUa];

$krep4_rlUc :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep2_rlUa $krep3_rlUb];

$krep5_rlUd :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_rlU8 $krep2_rlUa];

GHC.Num.$tcNum3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Num"#;

GHC.Num.$tcNum2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Num.$tcNum3];

GHC.Num.$tcNum :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [4789207468288702218##
                                    12287762746798050066##
                                    GHC.Num.$trModule
                                    GHC.Num.$tcNum2
                                    0#
                                    GHC.Num.$tcNum1];

$krep6_rlUe :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep2_rlUa GHC.Types.[]];

$krep7_rlUf :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Num.$tcNum
                                              $krep6_rlUe];

$krep8_rlUg :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep5_rlUd $krep7_rlUf];

$krep9_rlUh :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep3_rlUb $krep8_rlUg];

$krep10_rlUi :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep3_rlUb $krep9_rlUh];

$krep11_rlUj :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep3_rlUb $krep10_rlUi];

$krep12_rlUk :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep4_rlUc $krep11_rlUj];

$krep13_rlUl :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep4_rlUc $krep12_rlUk];

GHC.Num.$tc'C:Num1 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep4_rlUc $krep13_rlUl];

GHC.Num.$tc'C:Num3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'C:Num"#;

GHC.Num.$tc'C:Num2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Num.$tc'C:Num3];

GHC.Num.$tc'C:Num :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [277567704124416124##
                                    17341550453118006986##
                                    GHC.Num.$trModule
                                    GHC.Num.$tc'C:Num2
                                    1#
                                    GHC.Num.$tc'C:Num1];

GHC.Num.C:Num
  :: forall a.
     (a -> a -> a)
     -> (a -> a -> a)
     -> (a -> a -> a)
     -> (a -> a)
     -> (a -> a)
     -> (a -> a)
     -> (GHC.Integer.Type.Integer -> a)
     -> GHC.Num.Num a
[GblId[DataCon],
 Arity=7,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U><L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B7 eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        GHC.Num.C:Num [eta_B7 eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1];


==================== STG syntax: ====================
2018-03-16 15:55:00.330445719 UTC

GHC.Num.+ :: forall a. GHC.Num.Num a => a -> a -> a
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SLLLLLL),U(U,A,A,A,A,A,A)>] =
    [] \r [v_smpi]
        case v_smpi of {
          GHC.Num.C:Num v_smpk [Occ=Once]
                        _ [Occ=Dead]
                        _ [Occ=Dead]
                        _ [Occ=Dead]
                        _ [Occ=Dead]
                        _ [Occ=Dead]
                        _ [Occ=Dead] ->
              v_smpk;
        };

GHC.Num.- :: forall a. GHC.Num.Num a => a -> a -> a
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LSLLLLL),U(A,U,A,A,A,A,A)>] =
    [] \r [v_smpr]
        case v_smpr of {
          GHC.Num.C:Num _ [Occ=Dead]
                        v_smpu [Occ=Once]
                        _ [Occ=Dead]
                        _ [Occ=Dead]
                        _ [Occ=Dead]
                        _ [Occ=Dead]
                        _ [Occ=Dead] ->
              v_smpu;
        };

GHC.Num.* :: forall a. GHC.Num.Num a => a -> a -> a
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLSLLLL),U(A,A,U,A,A,A,A)>] =
    [] \r [v_smpA]
        case v_smpA of {
          GHC.Num.C:Num _ [Occ=Dead]
                        _ [Occ=Dead]
                        v_smpE [Occ=Once]
                        _ [Occ=Dead]
                        _ [Occ=Dead]
                        _ [Occ=Dead]
                        _ [Occ=Dead] ->
              v_smpE;
        };

GHC.Num.negate :: forall a. GHC.Num.Num a => a -> a
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLSLLL),U(A,A,A,U,A,A,A)>] =
    [] \r [v_smpJ]
        case v_smpJ of {
          GHC.Num.C:Num _ [Occ=Dead]
                        _ [Occ=Dead]
                        _ [Occ=Dead]
                        v_smpO [Occ=Once]
                        _ [Occ=Dead]
                        _ [Occ=Dead]
                        _ [Occ=Dead] ->
              v_smpO;
        };

GHC.Num.abs :: forall a. GHC.Num.Num a => a -> a
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLSLL),U(A,A,A,A,U,A,A)>] =
    [] \r [v_smpS]
        case v_smpS of {
          GHC.Num.C:Num _ [Occ=Dead]
                        _ [Occ=Dead]
                        _ [Occ=Dead]
                        _ [Occ=Dead]
                        v_smpY [Occ=Once]
                        _ [Occ=Dead]
                        _ [Occ=Dead] ->
              v_smpY;
        };

GHC.Num.signum :: forall a. GHC.Num.Num a => a -> a
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLSL),U(A,A,A,A,A,U,A)>] =
    [] \r [v_smq1]
        case v_smq1 of {
          GHC.Num.C:Num _ [Occ=Dead]
                        _ [Occ=Dead]
                        _ [Occ=Dead]
                        _ [Occ=Dead]
                        _ [Occ=Dead]
                        v_smq8 [Occ=Once]
                        _ [Occ=Dead] ->
              v_smq8;
        };

GHC.Num.fromInteger
  :: forall a. GHC.Num.Num a => GHC.Integer.Type.Integer -> a
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLS),U(A,A,A,A,A,A,U)>] =
    [] \r [v_smqa]
        case v_smqa of {
          GHC.Num.C:Num _ [Occ=Dead]
                        _ [Occ=Dead]
                        _ [Occ=Dead]
                        _ [Occ=Dead]
                        _ [Occ=Dead]
                        _ [Occ=Dead]
                        v_smqi [Occ=Once] ->
              v_smqi;
        };

GHC.Num.$fNumInt_$cfromInteger [InlPrag=INLINE (sat-args=1)]
  :: GHC.Integer.Type.Integer -> GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [i_smqj]
        case GHC.Integer.Type.integerToInt i_smqj of wild_smqk {
          __DEFAULT -> GHC.Types.I# [wild_smqk];
        };

GHC.Num.$fNumInt_$cnegate :: GHC.Types.Int -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_smql]
        case ds_smql of {
          GHC.Types.I# x_smqn [Occ=Once] ->
              case negateInt# [x_smqn] of sat_smqo {
                __DEFAULT -> GHC.Types.I# [sat_smqo];
              };
        };

GHC.Num.$fNumInt_$c*
  :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_smqp ds1_smqq]
        case ds_smqp of {
          GHC.Types.I# x_smqs [Occ=Once] ->
              case ds1_smqq of {
                GHC.Types.I# y_smqu [Occ=Once] ->
                    case *# [x_smqs y_smqu] of sat_smqv {
                      __DEFAULT -> GHC.Types.I# [sat_smqv];
                    };
              };
        };

GHC.Num.$fNumInt_$c-
  :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_smqw ds1_smqx]
        case ds_smqw of {
          GHC.Types.I# x_smqz [Occ=Once] ->
              case ds1_smqx of {
                GHC.Types.I# y_smqB [Occ=Once] ->
                    case -# [x_smqz y_smqB] of sat_smqC {
                      __DEFAULT -> GHC.Types.I# [sat_smqC];
                    };
              };
        };

GHC.Num.$fNumInt_$c+
  :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_smqD ds1_smqE]
        case ds_smqD of {
          GHC.Types.I# x_smqG [Occ=Once] ->
              case ds1_smqE of {
                GHC.Types.I# y_smqI [Occ=Once] ->
                    case +# [x_smqG y_smqI] of sat_smqJ {
                      __DEFAULT -> GHC.Types.I# [sat_smqJ];
                    };
              };
        };

GHC.Num.$fNumInt_$cabs :: GHC.Types.Int -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [n_smqK]
        case n_smqK of wild_smqL {
          GHC.Types.I# x_smqM ->
              case >=# [x_smqM 0#] of {
                __DEFAULT ->
                    case negateInt# [x_smqM] of sat_smqO {
                      __DEFAULT -> GHC.Types.I# [sat_smqO];
                    };
                1# -> wild_smqL;
              };
        };

GHC.Num.$fNumInt3 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [1#];

GHC.Num.$fNumInt2 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

GHC.Num.$fNumInt1 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [-1#];

GHC.Num.$fNumInt_$csignum :: GHC.Types.Int -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [n_smqP]
        case n_smqP of {
          GHC.Types.I# x_smqR ->
              case <# [x_smqR 0#] of {
                __DEFAULT ->
                    case x_smqR of {
                      __DEFAULT -> GHC.Num.$fNumInt3;
                      0# -> GHC.Num.$fNumInt2;
                    };
                1# -> GHC.Num.$fNumInt1;
              };
        };

GHC.Num.$fNumInt [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Num.Num GHC.Types.Int
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Num.C:Num! [GHC.Num.$fNumInt_$c+
                                  GHC.Num.$fNumInt_$c-
                                  GHC.Num.$fNumInt_$c*
                                  GHC.Num.$fNumInt_$cnegate
                                  GHC.Num.$fNumInt_$cabs
                                  GHC.Num.$fNumInt_$csignum
                                  GHC.Num.$fNumInt_$cfromInteger];

GHC.Num.$fNumWord_$cfromInteger
  :: GHC.Integer.Type.Integer -> GHC.Types.Word
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [i_smqU]
        case GHC.Integer.Type.integerToWord i_smqU of wild_smqV {
          __DEFAULT -> GHC.Types.W# [wild_smqV];
        };

GHC.Num.$fNumWord2 :: GHC.Types.Word
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.W#! [1##];

GHC.Num.$fNumWord1 :: GHC.Types.Word
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.W#! [0##];

GHC.Num.$fNumWord_$csignum :: GHC.Types.Word -> GHC.Types.Word
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [ds_smqW]
        case ds_smqW of {
          GHC.Types.W# ds1_smqY [Occ=Once!] ->
              case ds1_smqY of {
                __DEFAULT -> GHC.Num.$fNumWord2;
                0## -> GHC.Num.$fNumWord1;
              };
        };

GHC.Num.$fNumWord_$cabs :: GHC.Types.Word -> GHC.Types.Word
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U(U)>m, Unf=OtherCon []] =
    [] \r [x_smr0] x_smr0;

GHC.Num.$fNumWord_$cnegate :: GHC.Types.Word -> GHC.Types.Word
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_smr1]
        case ds_smr1 of {
          GHC.Types.W# x#_smr3 [Occ=Once] ->
              case word2Int# [x#_smr3] of sat_smr4 {
                __DEFAULT ->
                    case negateInt# [sat_smr4] of sat_smr5 {
                      __DEFAULT ->
                          case int2Word# [sat_smr5] of sat_smr6 {
                            __DEFAULT -> GHC.Types.W# [sat_smr6];
                          };
                    };
              };
        };

GHC.Num.$fNumWord_$c*
  :: GHC.Types.Word -> GHC.Types.Word -> GHC.Types.Word
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_smr7 ds1_smr8]
        case ds_smr7 of {
          GHC.Types.W# x#_smra [Occ=Once] ->
              case ds1_smr8 of {
                GHC.Types.W# y#_smrc [Occ=Once] ->
                    case timesWord# [x#_smra y#_smrc] of sat_smrd {
                      __DEFAULT -> GHC.Types.W# [sat_smrd];
                    };
              };
        };

GHC.Num.$fNumWord_$c-
  :: GHC.Types.Word -> GHC.Types.Word -> GHC.Types.Word
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_smre ds1_smrf]
        case ds_smre of {
          GHC.Types.W# x#_smrh [Occ=Once] ->
              case ds1_smrf of {
                GHC.Types.W# y#_smrj [Occ=Once] ->
                    case minusWord# [x#_smrh y#_smrj] of sat_smrk {
                      __DEFAULT -> GHC.Types.W# [sat_smrk];
                    };
              };
        };

GHC.Num.$fNumWord_$c+
  :: GHC.Types.Word -> GHC.Types.Word -> GHC.Types.Word
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_smrl ds1_smrm]
        case ds_smrl of {
          GHC.Types.W# x#_smro [Occ=Once] ->
              case ds1_smrm of {
                GHC.Types.W# y#_smrq [Occ=Once] ->
                    case plusWord# [x#_smro y#_smrq] of sat_smrr {
                      __DEFAULT -> GHC.Types.W# [sat_smrr];
                    };
              };
        };

GHC.Num.$fNumWord [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Num.Num GHC.Types.Word
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Num.C:Num! [GHC.Num.$fNumWord_$c+
                                  GHC.Num.$fNumWord_$c-
                                  GHC.Num.$fNumWord_$c*
                                  GHC.Num.$fNumWord_$cnegate
                                  GHC.Num.$fNumWord_$cabs
                                  GHC.Num.$fNumWord_$csignum
                                  GHC.Num.$fNumWord_$cfromInteger];

GHC.Num.$fNumInteger_$cfromInteger
  :: GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_smrs] x_smrs;

GHC.Num.$fNumInteger [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Num.Num GHC.Integer.Type.Integer
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Num.C:Num! [GHC.Integer.Type.plusInteger
                                  GHC.Integer.Type.minusInteger
                                  GHC.Integer.Type.timesInteger
                                  GHC.Integer.Type.negateInteger
                                  GHC.Integer.Type.absInteger
                                  GHC.Integer.Type.signumInteger
                                  GHC.Num.$fNumInteger_$cfromInteger];

lvl_rlU7 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True GHC.Types.[];

GHC.Num.$dmnegate [InlPrag=INLINE (sat-args=1)]
  :: forall a. GHC.Num.Num a => a -> a
[GblId,
 Arity=2,
 Str=<S(LC(C(S))LLLLL),U(A,1*C1(C1(U)),A,A,A,A,1*C1(U))><L,U>,
 Unf=OtherCon []] =
    [] \r [$dNum_smrt x_smru]
        let {
          sat_smrv [Occ=Once] :: a_alGX
          [LclId] =
              [$dNum_smrt] \u [] GHC.Num.fromInteger $dNum_smrt lvl_rlU7;
        } in  GHC.Num.- $dNum_smrt sat_smrv x_smru;

GHC.Num.$dm- [InlPrag=INLINE (sat-args=2)]
  :: forall a. GHC.Num.Num a => a -> a -> a
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(C(C(S))LLLLLL),U(1*C1(C1(U)),A,A,1*C1(U),A,A,A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dNum_smrw x_smrx y_smry]
        let {
          sat_smrz [Occ=Once] :: a_alGX
          [LclId] =
              [$dNum_smrw y_smry] \u [] GHC.Num.negate $dNum_smrw y_smry;
        } in  GHC.Num.+ $dNum_smrw x_smrx sat_smrz;

GHC.Num.subtract [InlPrag=INLINE (sat-args=2)]
  :: forall a. GHC.Num.Num a => a -> a -> a
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LC(C(S))LLLLL),1*U(A,1*C1(C1(U)),A,A,A,A,A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dNum_smrA eta_smrB eta1_smrC]
        GHC.Num.- $dNum_smrA eta1_smrC eta_smrB;

GHC.Num.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.Num.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Num.$trModule4];

GHC.Num.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.Num"#;

GHC.Num.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Num.$trModule2];

GHC.Num.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.Num.$trModule3
                                     GHC.Num.$trModule1];

$krep_rlU8 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Integer.Type.$tcInteger
                                              GHC.Types.[]];

$krep1_rlU9 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcConstraint
                                              GHC.Types.[]];

GHC.Num.$tcNum1 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.Types.krep$* $krep1_rlU9];

$krep2_rlUa :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [0#];

$krep3_rlUb :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep2_rlUa $krep2_rlUa];

$krep4_rlUc :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep2_rlUa $krep3_rlUb];

$krep5_rlUd :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_rlU8 $krep2_rlUa];

GHC.Num.$tcNum3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Num"#;

GHC.Num.$tcNum2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Num.$tcNum3];

GHC.Num.$tcNum :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [4789207468288702218##
                                    12287762746798050066##
                                    GHC.Num.$trModule
                                    GHC.Num.$tcNum2
                                    0#
                                    GHC.Num.$tcNum1];

$krep6_rlUe :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep2_rlUa GHC.Types.[]];

$krep7_rlUf :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Num.$tcNum
                                              $krep6_rlUe];

$krep8_rlUg :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep5_rlUd $krep7_rlUf];

$krep9_rlUh :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep3_rlUb $krep8_rlUg];

$krep10_rlUi :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep3_rlUb $krep9_rlUh];

$krep11_rlUj :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep3_rlUb $krep10_rlUi];

$krep12_rlUk :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep4_rlUc $krep11_rlUj];

$krep13_rlUl :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep4_rlUc $krep12_rlUk];

GHC.Num.$tc'C:Num1 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep4_rlUc $krep13_rlUl];

GHC.Num.$tc'C:Num3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'C:Num"#;

GHC.Num.$tc'C:Num2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Num.$tc'C:Num3];

GHC.Num.$tc'C:Num :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [277567704124416124##
                                    17341550453118006986##
                                    GHC.Num.$trModule
                                    GHC.Num.$tc'C:Num2
                                    1#
                                    GHC.Num.$tc'C:Num1];

GHC.Num.C:Num
  :: forall a.
     (a -> a -> a)
     -> (a -> a -> a)
     -> (a -> a -> a)
     -> (a -> a)
     -> (a -> a)
     -> (a -> a)
     -> (GHC.Integer.Type.Integer -> a)
     -> GHC.Num.Num a
[GblId[DataCon],
 Arity=7,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U><L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B7 eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        GHC.Num.C:Num [eta_B7 eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1];

