
==================== Pre unarise: ====================
2018-03-16 15:59:07.831746326 UTC

GHC.Int.$fEnumInt8_$cfromEnum :: GHC.Int.Int8 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4kPH]
        case ds_s4kPH of {
          GHC.Int.I8# x#_s4kPJ [Occ=Once] -> GHC.Types.I# [x#_s4kPJ];
        };

GHC.Int.$fEnumInt16_$cfromEnum :: GHC.Int.Int16 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4kPK]
        case ds_s4kPK of {
          GHC.Int.I16# x#_s4kPM [Occ=Once] -> GHC.Types.I# [x#_s4kPM];
        };

GHC.Int.$fEnumInt32_$cfromEnum :: GHC.Int.Int32 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4kPN]
        case ds_s4kPN of {
          GHC.Int.I32# x#_s4kPP [Occ=Once] -> GHC.Types.I# [x#_s4kPP];
        };

GHC.Int.$fEnumInt64_$cfromEnum :: GHC.Int.Int64 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4kPQ]
        case ds_s4kPQ of {
          GHC.Int.I64# x#_s4kPS [Occ=Once] -> GHC.Types.I# [x#_s4kPS];
        };

GHC.Int.$fEnumInt64_$ctoEnum :: GHC.Types.Int -> GHC.Int.Int64
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4kPT]
        case ds_s4kPT of {
          GHC.Types.I# i#_s4kPV [Occ=Once] -> GHC.Int.I64# [i#_s4kPV];
        };

GHC.Int.$w$cenumFromThenTo2 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int#
     -> GHC.Prim.Int# -> GHC.Prim.Int# -> [GHC.Int.Int64]
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S,U><S,U><S,U>,
 Unf=OtherCon []] =
    [] \r [ww_s4kPW ww1_s4kPX ww2_s4kPY]
        case >=# [ww1_s4kPX ww_s4kPW] of {
          __DEFAULT ->
              case ># [ww2_s4kPY ww1_s4kPX] of {
                __DEFAULT ->
                    let {
                      sat_s4kQb [Occ=Once] :: [GHC.Int.Int64]
                      [LclId] =
                          [ww_s4kPW ww1_s4kPX ww2_s4kPY] \u []
                              case -# [ww1_s4kPX ww_s4kPW] of delta_s4kQ2 [Dmd=<S,U>] {
                                __DEFAULT ->
                                    case -# [ww2_s4kPY delta_s4kQ2] of y'_s4kQ3 [Dmd=<S,U>] {
                                      __DEFAULT ->
                                          let {
                                            go_dn_s4kQ4 [Occ=LoopBreaker]
                                              :: GHC.Prim.Int# -> [GHC.Int.Int64]
                                            [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                                sat-only [delta_s4kQ2
                                                          y'_s4kQ3
                                                          go_dn_s4kQ4] \r [x_s4kQ5]
                                                    case <# [x_s4kQ5 y'_s4kQ3] of {
                                                      __DEFAULT ->
                                                          let {
                                                            sat_s4kQ9 [Occ=Once] :: [GHC.Int.Int64]
                                                            [LclId] =
                                                                [delta_s4kQ2
                                                                 go_dn_s4kQ4
                                                                 x_s4kQ5] \u []
                                                                    case
                                                                        +# [x_s4kQ5 delta_s4kQ2]
                                                                    of
                                                                    sat_s4kQ8
                                                                    { __DEFAULT ->
                                                                          go_dn_s4kQ4 sat_s4kQ8;
                                                                    }; } in
                                                          let {
                                                            sat_s4kQ7 [Occ=Once] :: GHC.Int.Int64
                                                            [LclId] =
                                                                CCCS GHC.Int.I64#! [x_s4kQ5];
                                                          } in  : [sat_s4kQ7 sat_s4kQ9];
                                                      1# ->
                                                          let {
                                                            sat_s4kQa [Occ=Once] :: GHC.Int.Int64
                                                            [LclId] =
                                                                CCCS GHC.Int.I64#! [x_s4kQ5];
                                                          } in  : [sat_s4kQa GHC.Types.[]];
                                                    };
                                          } in  go_dn_s4kQ4 ww1_s4kPX;
                                    };
                              }; } in
                    let {
                      sat_s4kQ1 [Occ=Once] :: GHC.Int.Int64
                      [LclId] =
                          CCCS GHC.Int.I64#! [ww_s4kPW];
                    } in  : [sat_s4kQ1 sat_s4kQb];
                1# ->
                    case ># [ww2_s4kPY ww_s4kPW] of {
                      __DEFAULT ->
                          let {
                            sat_s4kQd [Occ=Once] :: GHC.Int.Int64
                            [LclId] =
                                CCCS GHC.Int.I64#! [ww_s4kPW];
                          } in  : [sat_s4kQd GHC.Types.[]];
                      1# -> [] [];
                    };
              };
          1# ->
              case <# [ww2_s4kPY ww1_s4kPX] of {
                __DEFAULT ->
                    let {
                      sat_s4kQp [Occ=Once] :: [GHC.Int.Int64]
                      [LclId] =
                          [ww_s4kPW ww1_s4kPX ww2_s4kPY] \u []
                              case -# [ww1_s4kPX ww_s4kPW] of delta_s4kQg [Dmd=<S,U>] {
                                __DEFAULT ->
                                    case -# [ww2_s4kPY delta_s4kQg] of y'_s4kQh [Dmd=<S,U>] {
                                      __DEFAULT ->
                                          let {
                                            go_up_s4kQi [Occ=LoopBreaker]
                                              :: GHC.Prim.Int# -> [GHC.Int.Int64]
                                            [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                                sat-only [delta_s4kQg
                                                          y'_s4kQh
                                                          go_up_s4kQi] \r [x_s4kQj]
                                                    case ># [x_s4kQj y'_s4kQh] of {
                                                      __DEFAULT ->
                                                          let {
                                                            sat_s4kQn [Occ=Once] :: [GHC.Int.Int64]
                                                            [LclId] =
                                                                [delta_s4kQg
                                                                 go_up_s4kQi
                                                                 x_s4kQj] \u []
                                                                    case
                                                                        +# [x_s4kQj delta_s4kQg]
                                                                    of
                                                                    sat_s4kQm
                                                                    { __DEFAULT ->
                                                                          go_up_s4kQi sat_s4kQm;
                                                                    }; } in
                                                          let {
                                                            sat_s4kQl [Occ=Once] :: GHC.Int.Int64
                                                            [LclId] =
                                                                CCCS GHC.Int.I64#! [x_s4kQj];
                                                          } in  : [sat_s4kQl sat_s4kQn];
                                                      1# ->
                                                          let {
                                                            sat_s4kQo [Occ=Once] :: GHC.Int.Int64
                                                            [LclId] =
                                                                CCCS GHC.Int.I64#! [x_s4kQj];
                                                          } in  : [sat_s4kQo GHC.Types.[]];
                                                    };
                                          } in  go_up_s4kQi ww1_s4kPX;
                                    };
                              }; } in
                    let {
                      sat_s4kQf [Occ=Once] :: GHC.Int.Int64
                      [LclId] =
                          CCCS GHC.Int.I64#! [ww_s4kPW];
                    } in  : [sat_s4kQf sat_s4kQp];
                1# ->
                    case <# [ww2_s4kPY ww_s4kPW] of {
                      __DEFAULT ->
                          let {
                            sat_s4kQr [Occ=Once] :: GHC.Int.Int64
                            [LclId] =
                                CCCS GHC.Int.I64#! [ww_s4kPW];
                          } in  : [sat_s4kQr GHC.Types.[]];
                      1# -> [] [];
                    };
              };
        };

GHC.Int.$fEnumInt64_$cenumFromThenTo [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int64
     -> GHC.Int.Int64 -> GHC.Int.Int64 -> [GHC.Int.Int64]
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [w_s4kQs w1_s4kQt w2_s4kQu]
        case w_s4kQs of {
          GHC.Int.I64# ww1_s4kQw [Occ=Once] ->
              case w1_s4kQt of {
                GHC.Int.I64# ww3_s4kQy [Occ=Once] ->
                    case w2_s4kQu of {
                      GHC.Int.I64# ww5_s4kQA [Occ=Once] ->
                          GHC.Int.$w$cenumFromThenTo2 ww1_s4kQw ww3_s4kQy ww5_s4kQA;
                    };
              };
        };

GHC.Int.$w$cenumFromTo2 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> [GHC.Int.Int64]
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s4kQB ww1_s4kQC]
        case ># [ww_s4kQB ww1_s4kQC] of {
          __DEFAULT ->
              let {
                go_s4kQE [Occ=LoopBreaker] :: GHC.Prim.Int# -> [GHC.Int.Int64]
                [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
                    sat-only [ww1_s4kQC go_s4kQE] \r [x_s4kQF]
                        let {
                          sat_s4kQJ [Occ=Once] :: [GHC.Int.Int64]
                          [LclId] =
                              [ww1_s4kQC go_s4kQE x_s4kQF] \u []
                                  case ==# [x_s4kQF ww1_s4kQC] of {
                                    __DEFAULT ->
                                        case +# [x_s4kQF 1#] of sat_s4kQI {
                                          __DEFAULT -> go_s4kQE sat_s4kQI;
                                        };
                                    1# -> [] [];
                                  }; } in
                        let {
                          sat_s4kQG [Occ=Once] :: GHC.Int.Int64
                          [LclId] =
                              CCCS GHC.Int.I64#! [x_s4kQF];
                        } in  : [sat_s4kQG sat_s4kQJ];
              } in  go_s4kQE ww_s4kQB;
          1# -> [] [];
        };

GHC.Int.$fEnumInt64_$cenumFromTo [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> [GHC.Int.Int64]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [w_s4kQK w1_s4kQL]
        case w_s4kQK of {
          GHC.Int.I64# ww1_s4kQN [Occ=Once] ->
              case w1_s4kQL of {
                GHC.Int.I64# ww3_s4kQP [Occ=Once] ->
                    GHC.Int.$w$cenumFromTo2 ww1_s4kQN ww3_s4kQP;
              };
        };

GHC.Int.$tcInt9 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Int8"#;

GHC.Int.$fEnumInt7 :: GHC.Int.Int8
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# GHC.Int.$tcInt9 of sat_s4kQQ {
          __DEFAULT -> GHC.Enum.predError sat_s4kQQ;
        };

GHC.Int.$fEnumInt9 :: GHC.Int.Int8
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# GHC.Int.$tcInt9 of sat_s4kQR {
          __DEFAULT -> GHC.Enum.succError sat_s4kQR;
        };

GHC.Int.neInt8 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4kQS ds1_s4kQT]
        case ds_s4kQS of {
          GHC.Int.I8# x_s4kQV [Occ=Once] ->
              case ds1_s4kQT of {
                GHC.Int.I8# y_s4kQX [Occ=Once] ->
                    case /=# [x_s4kQV y_s4kQX] of sat_s4kQY {
                      __DEFAULT -> tagToEnum# [sat_s4kQY];
                    };
              };
        };

lvl_r4kPr :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Int.$tcInt9;

GHC.Int.$fBoundedInt8_$cminBound :: GHC.Int.Int8
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I8#! [-128#];

GHC.Int.$fEnumInt8_$cpred :: GHC.Int.Int8 -> GHC.Int.Int8
[GblId, Arity=1, Str=<S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [x_s4kQZ]
        case x_s4kQZ of {
          GHC.Int.I8# x1_s4kR1 [Occ=Once!] ->
              case x1_s4kR1 of wild1_s4kR2 {
                __DEFAULT ->
                    case -# [wild1_s4kR2 1#] of sat_s4kR3 {
                      __DEFAULT ->
                          case narrow8Int# [sat_s4kR3] of sat_s4kR4 {
                            __DEFAULT -> GHC.Int.I8# [sat_s4kR4];
                          };
                    };
                -128# -> GHC.Int.$fEnumInt7;
              };
        };

GHC.Int.$fBoundedInt8_$cmaxBound :: GHC.Int.Int8
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I8#! [127#];

GHC.Int.$fBoundedInt8 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Bounded GHC.Int.Int8
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Bounded! [GHC.Int.$fBoundedInt8_$cminBound
                                       GHC.Int.$fBoundedInt8_$cmaxBound];

GHC.Int.$fEnumInt8_$csucc :: GHC.Int.Int8 -> GHC.Int.Int8
[GblId, Arity=1, Str=<S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [x_s4kR5]
        case x_s4kR5 of {
          GHC.Int.I8# x1_s4kR7 [Occ=Once!] ->
              case x1_s4kR7 of wild1_s4kR8 {
                __DEFAULT ->
                    case +# [wild1_s4kR8 1#] of sat_s4kR9 {
                      __DEFAULT ->
                          case narrow8Int# [sat_s4kR9] of sat_s4kRa {
                            __DEFAULT -> GHC.Int.I8# [sat_s4kRa];
                          };
                    };
                127# -> GHC.Int.$fEnumInt9;
              };
        };

GHC.Int.$fShowInt8_$cshowsPrec
  :: GHC.Types.Int -> GHC.Int.Int8 -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [p_s4kRb x_s4kRc eta_s4kRd]
        case x_s4kRc of {
          GHC.Int.I8# x#_s4kRf [Occ=Once] ->
              case p_s4kRb of {
                GHC.Types.I# ww1_s4kRh [Occ=Once] ->
                    case GHC.Show.$wshowSignedInt ww1_s4kRh x#_s4kRf eta_s4kRd of {
                      (#,#) ww5_s4kRj [Occ=Once] ww6_s4kRk [Occ=Once] ->
                          : [ww5_s4kRj ww6_s4kRk];
                    };
              };
        };

GHC.Int.$fShowInt8_$cshow :: GHC.Int.Int8 -> GHC.Base.String
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m2,
 Unf=OtherCon []] =
    [] \r [x_s4kRl]
        case x_s4kRl of {
          GHC.Int.I8# x#_s4kRn [Occ=Once] ->
              case GHC.Show.$wshowSignedInt 0# x#_s4kRn GHC.Types.[] of {
                (#,#) ww5_s4kRp [Occ=Once] ww6_s4kRq [Occ=Once] ->
                    : [ww5_s4kRp ww6_s4kRq];
              };
        };

GHC.Int.$fShowInt4
  :: GHC.Int.Int8 -> GHC.Base.String -> GHC.Base.String
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [x_s4kRr eta_s4kRs]
        case x_s4kRr of {
          GHC.Int.I8# x#_s4kRu [Occ=Once] ->
              case GHC.Show.$wshowSignedInt 0# x#_s4kRu eta_s4kRs of {
                (#,#) ww5_s4kRw [Occ=Once] ww6_s4kRx [Occ=Once] ->
                    : [ww5_s4kRw ww6_s4kRx];
              };
        };

GHC.Int.$fShowInt8_$cshowList :: [GHC.Int.Int8] -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ls_s4kRy s_s4kRz]
        GHC.Show.showList__ GHC.Int.$fShowInt4 ls_s4kRy s_s4kRz;

GHC.Int.$fShowInt8 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Int.Int8
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Int.$fShowInt8_$cshowsPrec
                                    GHC.Int.$fShowInt8_$cshow
                                    GHC.Int.$fShowInt8_$cshowList];

GHC.Int.$wlvl2 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Int.Int8
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [ww_s4kRA]
        GHC.Enum.$wtoEnumError
            GHC.Int.$fShowInt8
            lvl_r4kPr
            ww_s4kRA
            GHC.Int.$fBoundedInt8_$cminBound
            GHC.Int.$fBoundedInt8_$cmaxBound;

GHC.Int.$w$ctoEnum2 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [ww_s4kRB]
        case >=# [ww_s4kRB -128#] of {
          __DEFAULT -> GHC.Int.$wlvl2 ww_s4kRB;
          1# ->
              case <=# [ww_s4kRB 127#] of {
                __DEFAULT -> GHC.Int.$wlvl2 ww_s4kRB;
                1# -> ww_s4kRB;
              };
        };

GHC.Int.$fEnumInt8_$ctoEnum [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.Int.Int8
[GblId, Arity=1, Str=<S(S),1*U(U)>m, Unf=OtherCon []] =
    [] \r [w_s4kRG]
        case w_s4kRG of {
          GHC.Types.I# ww1_s4kRI [Occ=Once] ->
              case GHC.Int.$w$ctoEnum2 ww1_s4kRI of ww2_s4kRJ {
                __DEFAULT -> GHC.Int.I8# [ww2_s4kRJ];
              };
        };

GHC.Int.$w$cenumFromThenTo3 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int#
     -> GHC.Prim.Int# -> GHC.Prim.Int# -> [GHC.Int.Int8]
[GblId, Arity=3, Str=<S,U><S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s4kRK ww1_s4kRL ww2_s4kRM]
        case >=# [ww1_s4kRL ww_s4kRK] of {
          __DEFAULT ->
              case ># [ww2_s4kRM ww1_s4kRL] of {
                __DEFAULT ->
                    let {
                      sat_s4kS5 [Occ=Once] :: [GHC.Int.Int8]
                      [LclId] =
                          [ww_s4kRK ww1_s4kRL ww2_s4kRM] \u []
                              case -# [ww1_s4kRL ww_s4kRK] of delta_s4kRS [Dmd=<S,U>] {
                                __DEFAULT ->
                                    case -# [ww2_s4kRM delta_s4kRS] of y'_s4kRT [Dmd=<S,U>] {
                                      __DEFAULT ->
                                          let {
                                            go_dn_s4kRU [Occ=LoopBreaker]
                                              :: GHC.Prim.Int# -> [GHC.Int.Int8]
                                            [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                                sat-only [delta_s4kRS
                                                          y'_s4kRT
                                                          go_dn_s4kRU] \r [x_s4kRV]
                                                    case <# [x_s4kRV y'_s4kRT] of {
                                                      __DEFAULT ->
                                                          let {
                                                            sat_s4kS1 [Occ=Once] :: [GHC.Int.Int8]
                                                            [LclId] =
                                                                [delta_s4kRS
                                                                 go_dn_s4kRU
                                                                 x_s4kRV] \u []
                                                                    case
                                                                        +# [x_s4kRV delta_s4kRS]
                                                                    of
                                                                    sat_s4kS0
                                                                    { __DEFAULT ->
                                                                          go_dn_s4kRU sat_s4kS0;
                                                                    }; } in
                                                          let {
                                                            sat_s4kRZ [Occ=Once] :: GHC.Int.Int8
                                                            [LclId] =
                                                                [x_s4kRV] \u []
                                                                    case >=# [x_s4kRV -128#] of {
                                                                      __DEFAULT ->
                                                                          GHC.Int.$wlvl2 x_s4kRV;
                                                                      1# ->
                                                                          case
                                                                              <=# [x_s4kRV 127#]
                                                                          of
                                                                          { __DEFAULT ->
                                                                                GHC.Int.$wlvl2
                                                                                    x_s4kRV;
                                                                            1# ->
                                                                                GHC.Int.I8# [x_s4kRV];
                                                                          };
                                                                    };
                                                          } in  : [sat_s4kRZ sat_s4kS1];
                                                      1# ->
                                                          let {
                                                            sat_s4kS4 [Occ=Once] :: GHC.Int.Int8
                                                            [LclId] =
                                                                [x_s4kRV] \u []
                                                                    case >=# [x_s4kRV -128#] of {
                                                                      __DEFAULT ->
                                                                          GHC.Int.$wlvl2 x_s4kRV;
                                                                      1# ->
                                                                          case
                                                                              <=# [x_s4kRV 127#]
                                                                          of
                                                                          { __DEFAULT ->
                                                                                GHC.Int.$wlvl2
                                                                                    x_s4kRV;
                                                                            1# ->
                                                                                GHC.Int.I8# [x_s4kRV];
                                                                          };
                                                                    };
                                                          } in  : [sat_s4kS4 GHC.Types.[]];
                                                    };
                                          } in  go_dn_s4kRU ww1_s4kRL;
                                    };
                              }; } in
                    let {
                      sat_s4kRR [Occ=Once] :: GHC.Int.Int8
                      [LclId] =
                          [ww_s4kRK] \u []
                              case >=# [ww_s4kRK -128#] of {
                                __DEFAULT -> GHC.Int.$wlvl2 ww_s4kRK;
                                1# ->
                                    case <=# [ww_s4kRK 127#] of {
                                      __DEFAULT -> GHC.Int.$wlvl2 ww_s4kRK;
                                      1# -> GHC.Int.I8# [ww_s4kRK];
                                    };
                              };
                    } in  : [sat_s4kRR sat_s4kS5];
                1# ->
                    case ># [ww2_s4kRM ww_s4kRK] of {
                      __DEFAULT ->
                          let {
                            sat_s4kS9 [Occ=Once] :: GHC.Int.Int8
                            [LclId] =
                                [ww_s4kRK] \u []
                                    case >=# [ww_s4kRK -128#] of {
                                      __DEFAULT -> GHC.Int.$wlvl2 ww_s4kRK;
                                      1# ->
                                          case <=# [ww_s4kRK 127#] of {
                                            __DEFAULT -> GHC.Int.$wlvl2 ww_s4kRK;
                                            1# -> GHC.Int.I8# [ww_s4kRK];
                                          };
                                    };
                          } in  : [sat_s4kS9 GHC.Types.[]];
                      1# -> [] [];
                    };
              };
          1# ->
              case <# [ww2_s4kRM ww1_s4kRL] of {
                __DEFAULT ->
                    let {
                      sat_s4kSr [Occ=Once] :: [GHC.Int.Int8]
                      [LclId] =
                          [ww_s4kRK ww1_s4kRL ww2_s4kRM] \u []
                              case -# [ww1_s4kRL ww_s4kRK] of delta_s4kSe [Dmd=<S,U>] {
                                __DEFAULT ->
                                    case -# [ww2_s4kRM delta_s4kSe] of y'_s4kSf [Dmd=<S,U>] {
                                      __DEFAULT ->
                                          let {
                                            go_up_s4kSg [Occ=LoopBreaker]
                                              :: GHC.Prim.Int# -> [GHC.Int.Int8]
                                            [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                                sat-only [delta_s4kSe
                                                          y'_s4kSf
                                                          go_up_s4kSg] \r [x_s4kSh]
                                                    case ># [x_s4kSh y'_s4kSf] of {
                                                      __DEFAULT ->
                                                          let {
                                                            sat_s4kSn [Occ=Once] :: [GHC.Int.Int8]
                                                            [LclId] =
                                                                [delta_s4kSe
                                                                 go_up_s4kSg
                                                                 x_s4kSh] \u []
                                                                    case
                                                                        +# [x_s4kSh delta_s4kSe]
                                                                    of
                                                                    sat_s4kSm
                                                                    { __DEFAULT ->
                                                                          go_up_s4kSg sat_s4kSm;
                                                                    }; } in
                                                          let {
                                                            sat_s4kSl [Occ=Once] :: GHC.Int.Int8
                                                            [LclId] =
                                                                [x_s4kSh] \u []
                                                                    case >=# [x_s4kSh -128#] of {
                                                                      __DEFAULT ->
                                                                          GHC.Int.$wlvl2 x_s4kSh;
                                                                      1# ->
                                                                          case
                                                                              <=# [x_s4kSh 127#]
                                                                          of
                                                                          { __DEFAULT ->
                                                                                GHC.Int.$wlvl2
                                                                                    x_s4kSh;
                                                                            1# ->
                                                                                GHC.Int.I8# [x_s4kSh];
                                                                          };
                                                                    };
                                                          } in  : [sat_s4kSl sat_s4kSn];
                                                      1# ->
                                                          let {
                                                            sat_s4kSq [Occ=Once] :: GHC.Int.Int8
                                                            [LclId] =
                                                                [x_s4kSh] \u []
                                                                    case >=# [x_s4kSh -128#] of {
                                                                      __DEFAULT ->
                                                                          GHC.Int.$wlvl2 x_s4kSh;
                                                                      1# ->
                                                                          case
                                                                              <=# [x_s4kSh 127#]
                                                                          of
                                                                          { __DEFAULT ->
                                                                                GHC.Int.$wlvl2
                                                                                    x_s4kSh;
                                                                            1# ->
                                                                                GHC.Int.I8# [x_s4kSh];
                                                                          };
                                                                    };
                                                          } in  : [sat_s4kSq GHC.Types.[]];
                                                    };
                                          } in  go_up_s4kSg ww1_s4kRL;
                                    };
                              }; } in
                    let {
                      sat_s4kSd [Occ=Once] :: GHC.Int.Int8
                      [LclId] =
                          [ww_s4kRK] \u []
                              case >=# [ww_s4kRK -128#] of {
                                __DEFAULT -> GHC.Int.$wlvl2 ww_s4kRK;
                                1# ->
                                    case <=# [ww_s4kRK 127#] of {
                                      __DEFAULT -> GHC.Int.$wlvl2 ww_s4kRK;
                                      1# -> GHC.Int.I8# [ww_s4kRK];
                                    };
                              };
                    } in  : [sat_s4kSd sat_s4kSr];
                1# ->
                    case <# [ww2_s4kRM ww_s4kRK] of {
                      __DEFAULT ->
                          let {
                            sat_s4kSv [Occ=Once] :: GHC.Int.Int8
                            [LclId] =
                                [ww_s4kRK] \u []
                                    case >=# [ww_s4kRK -128#] of {
                                      __DEFAULT -> GHC.Int.$wlvl2 ww_s4kRK;
                                      1# ->
                                          case <=# [ww_s4kRK 127#] of {
                                            __DEFAULT -> GHC.Int.$wlvl2 ww_s4kRK;
                                            1# -> GHC.Int.I8# [ww_s4kRK];
                                          };
                                    };
                          } in  : [sat_s4kSv GHC.Types.[]];
                      1# -> [] [];
                    };
              };
        };

GHC.Int.$fEnumInt8_$cenumFromThenTo [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> GHC.Int.Int8 -> [GHC.Int.Int8]
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [w_s4kSw w1_s4kSx w2_s4kSy]
        case w_s4kSw of {
          GHC.Int.I8# ww1_s4kSA [Occ=Once] ->
              case w1_s4kSx of {
                GHC.Int.I8# ww3_s4kSC [Occ=Once] ->
                    case w2_s4kSy of {
                      GHC.Int.I8# ww5_s4kSE [Occ=Once] ->
                          GHC.Int.$w$cenumFromThenTo3 ww1_s4kSA ww3_s4kSC ww5_s4kSE;
                    };
              };
        };

GHC.Int.$w$cenumFromTo3 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> [GHC.Int.Int8]
[GblId, Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s4kSF ww1_s4kSG]
        case ># [ww_s4kSF ww1_s4kSG] of {
          __DEFAULT ->
              let {
                go_s4kSI [Occ=LoopBreaker] :: GHC.Prim.Int# -> [GHC.Int.Int8]
                [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
                    sat-only [ww1_s4kSG go_s4kSI] \r [x_s4kSJ]
                        let {
                          sat_s4kSP [Occ=Once] :: [GHC.Int.Int8]
                          [LclId] =
                              [ww1_s4kSG go_s4kSI x_s4kSJ] \u []
                                  case ==# [x_s4kSJ ww1_s4kSG] of {
                                    __DEFAULT ->
                                        case +# [x_s4kSJ 1#] of sat_s4kSO {
                                          __DEFAULT -> go_s4kSI sat_s4kSO;
                                        };
                                    1# -> [] [];
                                  }; } in
                        let {
                          sat_s4kSM [Occ=Once] :: GHC.Int.Int8
                          [LclId] =
                              [x_s4kSJ] \u []
                                  case >=# [x_s4kSJ -128#] of {
                                    __DEFAULT -> GHC.Int.$wlvl2 x_s4kSJ;
                                    1# ->
                                        case <=# [x_s4kSJ 127#] of {
                                          __DEFAULT -> GHC.Int.$wlvl2 x_s4kSJ;
                                          1# -> GHC.Int.I8# [x_s4kSJ];
                                        };
                                  };
                        } in  : [sat_s4kSM sat_s4kSP];
              } in  go_s4kSI ww_s4kSF;
          1# -> [] [];
        };

GHC.Int.$fEnumInt8_$cenumFromTo [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> [GHC.Int.Int8]
[GblId, Arity=2, Str=<S(S),1*U(U)><S(S),1*U(U)>, Unf=OtherCon []] =
    [] \r [w_s4kSQ w1_s4kSR]
        case w_s4kSQ of {
          GHC.Int.I8# ww1_s4kST [Occ=Once] ->
              case w1_s4kSR of {
                GHC.Int.I8# ww3_s4kSV [Occ=Once] ->
                    GHC.Int.$w$cenumFromTo3 ww1_s4kST ww3_s4kSV;
              };
        };

GHC.Int.$wgo3 [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: GHC.Prim.Int# -> (# GHC.Int.Int8, [GHC.Int.Int8] #)
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [w_s4kSW]
        let {
          sat_s4kT5 [Occ=Once] :: [GHC.Int.Int8]
          [LclId] =
              [w_s4kSW] \u []
                  case w_s4kSW of wild_s4kT0 {
                    __DEFAULT ->
                        case +# [wild_s4kT0 1#] of sat_s4kT1 {
                          __DEFAULT ->
                              case GHC.Int.$wgo3 sat_s4kT1 of {
                                (#,#) ww1_s4kT3 [Occ=Once] ww2_s4kT4 [Occ=Once] ->
                                    : [ww1_s4kT3 ww2_s4kT4];
                              };
                        };
                    127# -> [] [];
                  }; } in
        let {
          sat_s4kSZ [Occ=Once] :: GHC.Int.Int8
          [LclId] =
              [w_s4kSW] \u []
                  case >=# [w_s4kSW -128#] of {
                    __DEFAULT -> GHC.Int.$wlvl2 w_s4kSW;
                    1# ->
                        case <=# [w_s4kSW 127#] of {
                          __DEFAULT -> GHC.Int.$wlvl2 w_s4kSW;
                          1# -> GHC.Int.I8# [w_s4kSW];
                        };
                  };
        } in  (#,#) [sat_s4kSZ sat_s4kT5];

GHC.Int.$fEnumInt8_go [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> [GHC.Int.Int8]
[GblId, Arity=1, Str=<S,U>m2, Unf=OtherCon []] =
    [] \r [w_s4kT6]
        case GHC.Int.$wgo3 w_s4kT6 of {
          (#,#) ww1_s4kT8 [Occ=Once] ww2_s4kT9 [Occ=Once] ->
              : [ww1_s4kT8 ww2_s4kT9];
        };

GHC.Int.$fEnumInt8_$cenumFrom :: GHC.Int.Int8 -> [GHC.Int.Int8]
[GblId, Arity=1, Str=<S(S),1*U(U)>, Unf=OtherCon []] =
    [] \r [n_s4kTa]
        case n_s4kTa of {
          GHC.Int.I8# x#_s4kTc ->
              case ># [x#_s4kTc 127#] of {
                __DEFAULT -> GHC.Int.$fEnumInt8_go x#_s4kTc;
                1# -> [] [];
              };
        };

GHC.Int.$fEnumInt8 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Enum GHC.Int.Int8
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Enum! [GHC.Int.$fEnumInt8_$csucc
                                    GHC.Int.$fEnumInt8_$cpred
                                    GHC.Int.$fEnumInt8_$ctoEnum
                                    GHC.Int.$fEnumInt8_$cfromEnum
                                    GHC.Int.$fEnumInt8_$cenumFrom
                                    GHC.Int.$fEnumInt8_$cenumFromThen
                                    GHC.Int.$fEnumInt8_$cenumFromTo
                                    GHC.Int.$fEnumInt8_$cenumFromThenTo];
GHC.Int.$fEnumInt8_$cenumFromThen [Occ=LoopBreaker]
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> [GHC.Int.Int8]
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Enum.boundedEnumFromThen
            GHC.Int.$fEnumInt8 GHC.Int.$fBoundedInt8 eta_B2 eta_B1;

GHC.Int.$tcInt2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Int16"#;

GHC.Int.$fEnumInt1 :: GHC.Int.Int16
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# GHC.Int.$tcInt2 of sat_s4kTe {
          __DEFAULT -> GHC.Enum.predError sat_s4kTe;
        };

GHC.Int.$fEnumInt2 :: GHC.Int.Int16
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# GHC.Int.$tcInt2 of sat_s4kTf {
          __DEFAULT -> GHC.Enum.succError sat_s4kTf;
        };

GHC.Int.neInt16 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4kTg ds1_s4kTh]
        case ds_s4kTg of {
          GHC.Int.I16# x_s4kTj [Occ=Once] ->
              case ds1_s4kTh of {
                GHC.Int.I16# y_s4kTl [Occ=Once] ->
                    case /=# [x_s4kTj y_s4kTl] of sat_s4kTm {
                      __DEFAULT -> tagToEnum# [sat_s4kTm];
                    };
              };
        };

lvl2_r4kPt :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Int.$tcInt2;

GHC.Int.$fBoundedInt16_$cminBound :: GHC.Int.Int16
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I16#! [-32768#];

GHC.Int.$fEnumInt16_$cpred :: GHC.Int.Int16 -> GHC.Int.Int16
[GblId, Arity=1, Str=<S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [x_s4kTn]
        case x_s4kTn of {
          GHC.Int.I16# x1_s4kTp [Occ=Once!] ->
              case x1_s4kTp of wild1_s4kTq {
                __DEFAULT ->
                    case -# [wild1_s4kTq 1#] of sat_s4kTr {
                      __DEFAULT ->
                          case narrow16Int# [sat_s4kTr] of sat_s4kTs {
                            __DEFAULT -> GHC.Int.I16# [sat_s4kTs];
                          };
                    };
                -32768# -> GHC.Int.$fEnumInt1;
              };
        };

GHC.Int.$fBoundedInt16_$cmaxBound :: GHC.Int.Int16
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I16#! [32767#];

GHC.Int.$fBoundedInt16 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Bounded GHC.Int.Int16
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Bounded! [GHC.Int.$fBoundedInt16_$cminBound
                                       GHC.Int.$fBoundedInt16_$cmaxBound];

GHC.Int.$fEnumInt16_$csucc :: GHC.Int.Int16 -> GHC.Int.Int16
[GblId, Arity=1, Str=<S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [x_s4kTt]
        case x_s4kTt of {
          GHC.Int.I16# x1_s4kTv [Occ=Once!] ->
              case x1_s4kTv of wild1_s4kTw {
                __DEFAULT ->
                    case +# [wild1_s4kTw 1#] of sat_s4kTx {
                      __DEFAULT ->
                          case narrow16Int# [sat_s4kTx] of sat_s4kTy {
                            __DEFAULT -> GHC.Int.I16# [sat_s4kTy];
                          };
                    };
                32767# -> GHC.Int.$fEnumInt2;
              };
        };

GHC.Int.$fShowInt16_$cshowsPrec
  :: GHC.Types.Int -> GHC.Int.Int16 -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [p_s4kTz x_s4kTA eta_s4kTB]
        case x_s4kTA of {
          GHC.Int.I16# x#_s4kTD [Occ=Once] ->
              case p_s4kTz of {
                GHC.Types.I# ww1_s4kTF [Occ=Once] ->
                    case GHC.Show.$wshowSignedInt ww1_s4kTF x#_s4kTD eta_s4kTB of {
                      (#,#) ww5_s4kTH [Occ=Once] ww6_s4kTI [Occ=Once] ->
                          : [ww5_s4kTH ww6_s4kTI];
                    };
              };
        };

GHC.Int.$fShowInt16_$cshow :: GHC.Int.Int16 -> GHC.Base.String
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m2,
 Unf=OtherCon []] =
    [] \r [x_s4kTJ]
        case x_s4kTJ of {
          GHC.Int.I16# x#_s4kTL [Occ=Once] ->
              case GHC.Show.$wshowSignedInt 0# x#_s4kTL GHC.Types.[] of {
                (#,#) ww5_s4kTN [Occ=Once] ww6_s4kTO [Occ=Once] ->
                    : [ww5_s4kTN ww6_s4kTO];
              };
        };

GHC.Int.$fShowInt1
  :: GHC.Int.Int16 -> GHC.Base.String -> GHC.Base.String
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [x_s4kTP eta_s4kTQ]
        case x_s4kTP of {
          GHC.Int.I16# x#_s4kTS [Occ=Once] ->
              case GHC.Show.$wshowSignedInt 0# x#_s4kTS eta_s4kTQ of {
                (#,#) ww5_s4kTU [Occ=Once] ww6_s4kTV [Occ=Once] ->
                    : [ww5_s4kTU ww6_s4kTV];
              };
        };

GHC.Int.$fShowInt16_$cshowList :: [GHC.Int.Int16] -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ls_s4kTW s_s4kTX]
        GHC.Show.showList__ GHC.Int.$fShowInt1 ls_s4kTW s_s4kTX;

GHC.Int.$fShowInt16 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Int.Int16
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Int.$fShowInt16_$cshowsPrec
                                    GHC.Int.$fShowInt16_$cshow
                                    GHC.Int.$fShowInt16_$cshowList];

GHC.Int.$wlvl [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Int.Int16
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [ww_s4kTY]
        GHC.Enum.$wtoEnumError
            GHC.Int.$fShowInt16
            lvl2_r4kPt
            ww_s4kTY
            GHC.Int.$fBoundedInt16_$cminBound
            GHC.Int.$fBoundedInt16_$cmaxBound;

GHC.Int.$w$ctoEnum [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [ww_s4kTZ]
        case >=# [ww_s4kTZ -32768#] of {
          __DEFAULT -> GHC.Int.$wlvl ww_s4kTZ;
          1# ->
              case <=# [ww_s4kTZ 32767#] of {
                __DEFAULT -> GHC.Int.$wlvl ww_s4kTZ;
                1# -> ww_s4kTZ;
              };
        };

GHC.Int.$fEnumInt16_$ctoEnum [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.Int.Int16
[GblId, Arity=1, Str=<S(S),1*U(U)>m, Unf=OtherCon []] =
    [] \r [w_s4kU4]
        case w_s4kU4 of {
          GHC.Types.I# ww1_s4kU6 [Occ=Once] ->
              case GHC.Int.$w$ctoEnum ww1_s4kU6 of ww2_s4kU7 {
                __DEFAULT -> GHC.Int.I16# [ww2_s4kU7];
              };
        };

GHC.Int.$w$cenumFromThenTo [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int#
     -> GHC.Prim.Int# -> GHC.Prim.Int# -> [GHC.Int.Int16]
[GblId, Arity=3, Str=<S,U><S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s4kU8 ww1_s4kU9 ww2_s4kUa]
        case >=# [ww1_s4kU9 ww_s4kU8] of {
          __DEFAULT ->
              case ># [ww2_s4kUa ww1_s4kU9] of {
                __DEFAULT ->
                    let {
                      sat_s4kUt [Occ=Once] :: [GHC.Int.Int16]
                      [LclId] =
                          [ww_s4kU8 ww1_s4kU9 ww2_s4kUa] \u []
                              case -# [ww1_s4kU9 ww_s4kU8] of delta_s4kUg [Dmd=<S,U>] {
                                __DEFAULT ->
                                    case -# [ww2_s4kUa delta_s4kUg] of y'_s4kUh [Dmd=<S,U>] {
                                      __DEFAULT ->
                                          let {
                                            go_dn_s4kUi [Occ=LoopBreaker]
                                              :: GHC.Prim.Int# -> [GHC.Int.Int16]
                                            [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                                sat-only [delta_s4kUg
                                                          y'_s4kUh
                                                          go_dn_s4kUi] \r [x_s4kUj]
                                                    case <# [x_s4kUj y'_s4kUh] of {
                                                      __DEFAULT ->
                                                          let {
                                                            sat_s4kUp [Occ=Once] :: [GHC.Int.Int16]
                                                            [LclId] =
                                                                [delta_s4kUg
                                                                 go_dn_s4kUi
                                                                 x_s4kUj] \u []
                                                                    case
                                                                        +# [x_s4kUj delta_s4kUg]
                                                                    of
                                                                    sat_s4kUo
                                                                    { __DEFAULT ->
                                                                          go_dn_s4kUi sat_s4kUo;
                                                                    }; } in
                                                          let {
                                                            sat_s4kUn [Occ=Once] :: GHC.Int.Int16
                                                            [LclId] =
                                                                [x_s4kUj] \u []
                                                                    case >=# [x_s4kUj -32768#] of {
                                                                      __DEFAULT ->
                                                                          GHC.Int.$wlvl x_s4kUj;
                                                                      1# ->
                                                                          case
                                                                              <=# [x_s4kUj 32767#]
                                                                          of
                                                                          { __DEFAULT ->
                                                                                GHC.Int.$wlvl
                                                                                    x_s4kUj;
                                                                            1# ->
                                                                                GHC.Int.I16# [x_s4kUj];
                                                                          };
                                                                    };
                                                          } in  : [sat_s4kUn sat_s4kUp];
                                                      1# ->
                                                          let {
                                                            sat_s4kUs [Occ=Once] :: GHC.Int.Int16
                                                            [LclId] =
                                                                [x_s4kUj] \u []
                                                                    case >=# [x_s4kUj -32768#] of {
                                                                      __DEFAULT ->
                                                                          GHC.Int.$wlvl x_s4kUj;
                                                                      1# ->
                                                                          case
                                                                              <=# [x_s4kUj 32767#]
                                                                          of
                                                                          { __DEFAULT ->
                                                                                GHC.Int.$wlvl
                                                                                    x_s4kUj;
                                                                            1# ->
                                                                                GHC.Int.I16# [x_s4kUj];
                                                                          };
                                                                    };
                                                          } in  : [sat_s4kUs GHC.Types.[]];
                                                    };
                                          } in  go_dn_s4kUi ww1_s4kU9;
                                    };
                              }; } in
                    let {
                      sat_s4kUf [Occ=Once] :: GHC.Int.Int16
                      [LclId] =
                          [ww_s4kU8] \u []
                              case >=# [ww_s4kU8 -32768#] of {
                                __DEFAULT -> GHC.Int.$wlvl ww_s4kU8;
                                1# ->
                                    case <=# [ww_s4kU8 32767#] of {
                                      __DEFAULT -> GHC.Int.$wlvl ww_s4kU8;
                                      1# -> GHC.Int.I16# [ww_s4kU8];
                                    };
                              };
                    } in  : [sat_s4kUf sat_s4kUt];
                1# ->
                    case ># [ww2_s4kUa ww_s4kU8] of {
                      __DEFAULT ->
                          let {
                            sat_s4kUx [Occ=Once] :: GHC.Int.Int16
                            [LclId] =
                                [ww_s4kU8] \u []
                                    case >=# [ww_s4kU8 -32768#] of {
                                      __DEFAULT -> GHC.Int.$wlvl ww_s4kU8;
                                      1# ->
                                          case <=# [ww_s4kU8 32767#] of {
                                            __DEFAULT -> GHC.Int.$wlvl ww_s4kU8;
                                            1# -> GHC.Int.I16# [ww_s4kU8];
                                          };
                                    };
                          } in  : [sat_s4kUx GHC.Types.[]];
                      1# -> [] [];
                    };
              };
          1# ->
              case <# [ww2_s4kUa ww1_s4kU9] of {
                __DEFAULT ->
                    let {
                      sat_s4kUP [Occ=Once] :: [GHC.Int.Int16]
                      [LclId] =
                          [ww_s4kU8 ww1_s4kU9 ww2_s4kUa] \u []
                              case -# [ww1_s4kU9 ww_s4kU8] of delta_s4kUC [Dmd=<S,U>] {
                                __DEFAULT ->
                                    case -# [ww2_s4kUa delta_s4kUC] of y'_s4kUD [Dmd=<S,U>] {
                                      __DEFAULT ->
                                          let {
                                            go_up_s4kUE [Occ=LoopBreaker]
                                              :: GHC.Prim.Int# -> [GHC.Int.Int16]
                                            [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                                sat-only [delta_s4kUC
                                                          y'_s4kUD
                                                          go_up_s4kUE] \r [x_s4kUF]
                                                    case ># [x_s4kUF y'_s4kUD] of {
                                                      __DEFAULT ->
                                                          let {
                                                            sat_s4kUL [Occ=Once] :: [GHC.Int.Int16]
                                                            [LclId] =
                                                                [delta_s4kUC
                                                                 go_up_s4kUE
                                                                 x_s4kUF] \u []
                                                                    case
                                                                        +# [x_s4kUF delta_s4kUC]
                                                                    of
                                                                    sat_s4kUK
                                                                    { __DEFAULT ->
                                                                          go_up_s4kUE sat_s4kUK;
                                                                    }; } in
                                                          let {
                                                            sat_s4kUJ [Occ=Once] :: GHC.Int.Int16
                                                            [LclId] =
                                                                [x_s4kUF] \u []
                                                                    case >=# [x_s4kUF -32768#] of {
                                                                      __DEFAULT ->
                                                                          GHC.Int.$wlvl x_s4kUF;
                                                                      1# ->
                                                                          case
                                                                              <=# [x_s4kUF 32767#]
                                                                          of
                                                                          { __DEFAULT ->
                                                                                GHC.Int.$wlvl
                                                                                    x_s4kUF;
                                                                            1# ->
                                                                                GHC.Int.I16# [x_s4kUF];
                                                                          };
                                                                    };
                                                          } in  : [sat_s4kUJ sat_s4kUL];
                                                      1# ->
                                                          let {
                                                            sat_s4kUO [Occ=Once] :: GHC.Int.Int16
                                                            [LclId] =
                                                                [x_s4kUF] \u []
                                                                    case >=# [x_s4kUF -32768#] of {
                                                                      __DEFAULT ->
                                                                          GHC.Int.$wlvl x_s4kUF;
                                                                      1# ->
                                                                          case
                                                                              <=# [x_s4kUF 32767#]
                                                                          of
                                                                          { __DEFAULT ->
                                                                                GHC.Int.$wlvl
                                                                                    x_s4kUF;
                                                                            1# ->
                                                                                GHC.Int.I16# [x_s4kUF];
                                                                          };
                                                                    };
                                                          } in  : [sat_s4kUO GHC.Types.[]];
                                                    };
                                          } in  go_up_s4kUE ww1_s4kU9;
                                    };
                              }; } in
                    let {
                      sat_s4kUB [Occ=Once] :: GHC.Int.Int16
                      [LclId] =
                          [ww_s4kU8] \u []
                              case >=# [ww_s4kU8 -32768#] of {
                                __DEFAULT -> GHC.Int.$wlvl ww_s4kU8;
                                1# ->
                                    case <=# [ww_s4kU8 32767#] of {
                                      __DEFAULT -> GHC.Int.$wlvl ww_s4kU8;
                                      1# -> GHC.Int.I16# [ww_s4kU8];
                                    };
                              };
                    } in  : [sat_s4kUB sat_s4kUP];
                1# ->
                    case <# [ww2_s4kUa ww_s4kU8] of {
                      __DEFAULT ->
                          let {
                            sat_s4kUT [Occ=Once] :: GHC.Int.Int16
                            [LclId] =
                                [ww_s4kU8] \u []
                                    case >=# [ww_s4kU8 -32768#] of {
                                      __DEFAULT -> GHC.Int.$wlvl ww_s4kU8;
                                      1# ->
                                          case <=# [ww_s4kU8 32767#] of {
                                            __DEFAULT -> GHC.Int.$wlvl ww_s4kU8;
                                            1# -> GHC.Int.I16# [ww_s4kU8];
                                          };
                                    };
                          } in  : [sat_s4kUT GHC.Types.[]];
                      1# -> [] [];
                    };
              };
        };

GHC.Int.$fEnumInt16_$cenumFromThenTo [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int16
     -> GHC.Int.Int16 -> GHC.Int.Int16 -> [GHC.Int.Int16]
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [w_s4kUU w1_s4kUV w2_s4kUW]
        case w_s4kUU of {
          GHC.Int.I16# ww1_s4kUY [Occ=Once] ->
              case w1_s4kUV of {
                GHC.Int.I16# ww3_s4kV0 [Occ=Once] ->
                    case w2_s4kUW of {
                      GHC.Int.I16# ww5_s4kV2 [Occ=Once] ->
                          GHC.Int.$w$cenumFromThenTo ww1_s4kUY ww3_s4kV0 ww5_s4kV2;
                    };
              };
        };

GHC.Int.$w$cenumFromTo [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> [GHC.Int.Int16]
[GblId, Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s4kV3 ww1_s4kV4]
        case ># [ww_s4kV3 ww1_s4kV4] of {
          __DEFAULT ->
              let {
                go_s4kV6 [Occ=LoopBreaker] :: GHC.Prim.Int# -> [GHC.Int.Int16]
                [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
                    sat-only [ww1_s4kV4 go_s4kV6] \r [x_s4kV7]
                        let {
                          sat_s4kVd [Occ=Once] :: [GHC.Int.Int16]
                          [LclId] =
                              [ww1_s4kV4 go_s4kV6 x_s4kV7] \u []
                                  case ==# [x_s4kV7 ww1_s4kV4] of {
                                    __DEFAULT ->
                                        case +# [x_s4kV7 1#] of sat_s4kVc {
                                          __DEFAULT -> go_s4kV6 sat_s4kVc;
                                        };
                                    1# -> [] [];
                                  }; } in
                        let {
                          sat_s4kVa [Occ=Once] :: GHC.Int.Int16
                          [LclId] =
                              [x_s4kV7] \u []
                                  case >=# [x_s4kV7 -32768#] of {
                                    __DEFAULT -> GHC.Int.$wlvl x_s4kV7;
                                    1# ->
                                        case <=# [x_s4kV7 32767#] of {
                                          __DEFAULT -> GHC.Int.$wlvl x_s4kV7;
                                          1# -> GHC.Int.I16# [x_s4kV7];
                                        };
                                  };
                        } in  : [sat_s4kVa sat_s4kVd];
              } in  go_s4kV6 ww_s4kV3;
          1# -> [] [];
        };

GHC.Int.$fEnumInt16_$cenumFromTo [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> [GHC.Int.Int16]
[GblId, Arity=2, Str=<S(S),1*U(U)><S(S),1*U(U)>, Unf=OtherCon []] =
    [] \r [w_s4kVe w1_s4kVf]
        case w_s4kVe of {
          GHC.Int.I16# ww1_s4kVh [Occ=Once] ->
              case w1_s4kVf of {
                GHC.Int.I16# ww3_s4kVj [Occ=Once] ->
                    GHC.Int.$w$cenumFromTo ww1_s4kVh ww3_s4kVj;
              };
        };

GHC.Int.$wgo [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: GHC.Prim.Int# -> (# GHC.Int.Int16, [GHC.Int.Int16] #)
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [w_s4kVk]
        let {
          sat_s4kVt [Occ=Once] :: [GHC.Int.Int16]
          [LclId] =
              [w_s4kVk] \u []
                  case w_s4kVk of wild_s4kVo {
                    __DEFAULT ->
                        case +# [wild_s4kVo 1#] of sat_s4kVp {
                          __DEFAULT ->
                              case GHC.Int.$wgo sat_s4kVp of {
                                (#,#) ww1_s4kVr [Occ=Once] ww2_s4kVs [Occ=Once] ->
                                    : [ww1_s4kVr ww2_s4kVs];
                              };
                        };
                    32767# -> [] [];
                  }; } in
        let {
          sat_s4kVn [Occ=Once] :: GHC.Int.Int16
          [LclId] =
              [w_s4kVk] \u []
                  case >=# [w_s4kVk -32768#] of {
                    __DEFAULT -> GHC.Int.$wlvl w_s4kVk;
                    1# ->
                        case <=# [w_s4kVk 32767#] of {
                          __DEFAULT -> GHC.Int.$wlvl w_s4kVk;
                          1# -> GHC.Int.I16# [w_s4kVk];
                        };
                  };
        } in  (#,#) [sat_s4kVn sat_s4kVt];

GHC.Int.$fEnumInt16_go [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> [GHC.Int.Int16]
[GblId, Arity=1, Str=<S,U>m2, Unf=OtherCon []] =
    [] \r [w_s4kVu]
        case GHC.Int.$wgo w_s4kVu of {
          (#,#) ww1_s4kVw [Occ=Once] ww2_s4kVx [Occ=Once] ->
              : [ww1_s4kVw ww2_s4kVx];
        };

GHC.Int.$fEnumInt16_$cenumFrom :: GHC.Int.Int16 -> [GHC.Int.Int16]
[GblId, Arity=1, Str=<S(S),1*U(U)>, Unf=OtherCon []] =
    [] \r [n_s4kVy]
        case n_s4kVy of {
          GHC.Int.I16# x#_s4kVA ->
              case ># [x#_s4kVA 32767#] of {
                __DEFAULT -> GHC.Int.$fEnumInt16_go x#_s4kVA;
                1# -> [] [];
              };
        };

GHC.Int.$fEnumInt16 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Enum GHC.Int.Int16
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Enum! [GHC.Int.$fEnumInt16_$csucc
                                    GHC.Int.$fEnumInt16_$cpred
                                    GHC.Int.$fEnumInt16_$ctoEnum
                                    GHC.Int.$fEnumInt16_$cfromEnum
                                    GHC.Int.$fEnumInt16_$cenumFrom
                                    GHC.Int.$fEnumInt16_$cenumFromThen
                                    GHC.Int.$fEnumInt16_$cenumFromTo
                                    GHC.Int.$fEnumInt16_$cenumFromThenTo];
GHC.Int.$fEnumInt16_$cenumFromThen [Occ=LoopBreaker]
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> [GHC.Int.Int16]
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Enum.boundedEnumFromThen
            GHC.Int.$fEnumInt16 GHC.Int.$fBoundedInt16 eta_B2 eta_B1;

GHC.Int.$tcInt4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Int32"#;

GHC.Int.$fEnumInt3 :: GHC.Int.Int32
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# GHC.Int.$tcInt4 of sat_s4kVC {
          __DEFAULT -> GHC.Enum.predError sat_s4kVC;
        };

GHC.Int.$fEnumInt4 :: GHC.Int.Int32
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# GHC.Int.$tcInt4 of sat_s4kVD {
          __DEFAULT -> GHC.Enum.succError sat_s4kVD;
        };

GHC.Int.neInt32 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4kVE ds1_s4kVF]
        case ds_s4kVE of {
          GHC.Int.I32# x_s4kVH [Occ=Once] ->
              case ds1_s4kVF of {
                GHC.Int.I32# y_s4kVJ [Occ=Once] ->
                    case /=# [x_s4kVH y_s4kVJ] of sat_s4kVK {
                      __DEFAULT -> tagToEnum# [sat_s4kVK];
                    };
              };
        };

lvl4_r4kPv :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Int.$tcInt4;

GHC.Int.$fBoundedInt32_$cminBound :: GHC.Int.Int32
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I32#! [-2147483648#];

GHC.Int.$fEnumInt32_$cpred :: GHC.Int.Int32 -> GHC.Int.Int32
[GblId, Arity=1, Str=<S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [x_s4kVL]
        case x_s4kVL of {
          GHC.Int.I32# x1_s4kVN [Occ=Once!] ->
              case x1_s4kVN of wild1_s4kVO {
                __DEFAULT ->
                    case -# [wild1_s4kVO 1#] of sat_s4kVP {
                      __DEFAULT ->
                          case narrow32Int# [sat_s4kVP] of sat_s4kVQ {
                            __DEFAULT -> GHC.Int.I32# [sat_s4kVQ];
                          };
                    };
                -2147483648# -> GHC.Int.$fEnumInt3;
              };
        };

GHC.Int.$fBoundedInt32_$cmaxBound :: GHC.Int.Int32
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I32#! [2147483647#];

GHC.Int.$fBoundedInt32 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Bounded GHC.Int.Int32
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Bounded! [GHC.Int.$fBoundedInt32_$cminBound
                                       GHC.Int.$fBoundedInt32_$cmaxBound];

GHC.Int.$fEnumInt32_$csucc :: GHC.Int.Int32 -> GHC.Int.Int32
[GblId, Arity=1, Str=<S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [x_s4kVR]
        case x_s4kVR of {
          GHC.Int.I32# x1_s4kVT [Occ=Once!] ->
              case x1_s4kVT of wild1_s4kVU {
                __DEFAULT ->
                    case +# [wild1_s4kVU 1#] of sat_s4kVV {
                      __DEFAULT ->
                          case narrow32Int# [sat_s4kVV] of sat_s4kVW {
                            __DEFAULT -> GHC.Int.I32# [sat_s4kVW];
                          };
                    };
                2147483647# -> GHC.Int.$fEnumInt4;
              };
        };

GHC.Int.$fShowInt32_$cshowsPrec
  :: GHC.Types.Int -> GHC.Int.Int32 -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [p_s4kVX x_s4kVY eta_s4kVZ]
        case x_s4kVY of {
          GHC.Int.I32# x#_s4kW1 [Occ=Once] ->
              case p_s4kVX of {
                GHC.Types.I# ww1_s4kW3 [Occ=Once] ->
                    case GHC.Show.$wshowSignedInt ww1_s4kW3 x#_s4kW1 eta_s4kVZ of {
                      (#,#) ww5_s4kW5 [Occ=Once] ww6_s4kW6 [Occ=Once] ->
                          : [ww5_s4kW5 ww6_s4kW6];
                    };
              };
        };

GHC.Int.$fShowInt32_$cshow :: GHC.Int.Int32 -> GHC.Base.String
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m2,
 Unf=OtherCon []] =
    [] \r [x_s4kW7]
        case x_s4kW7 of {
          GHC.Int.I32# x#_s4kW9 [Occ=Once] ->
              case GHC.Show.$wshowSignedInt 0# x#_s4kW9 GHC.Types.[] of {
                (#,#) ww5_s4kWb [Occ=Once] ww6_s4kWc [Occ=Once] ->
                    : [ww5_s4kWb ww6_s4kWc];
              };
        };

GHC.Int.$fShowInt2
  :: GHC.Int.Int32 -> GHC.Base.String -> GHC.Base.String
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [x_s4kWd eta_s4kWe]
        case x_s4kWd of {
          GHC.Int.I32# x#_s4kWg [Occ=Once] ->
              case GHC.Show.$wshowSignedInt 0# x#_s4kWg eta_s4kWe of {
                (#,#) ww5_s4kWi [Occ=Once] ww6_s4kWj [Occ=Once] ->
                    : [ww5_s4kWi ww6_s4kWj];
              };
        };

GHC.Int.$fShowInt32_$cshowList :: [GHC.Int.Int32] -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ls_s4kWk s_s4kWl]
        GHC.Show.showList__ GHC.Int.$fShowInt2 ls_s4kWk s_s4kWl;

GHC.Int.$fShowInt32 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Int.Int32
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Int.$fShowInt32_$cshowsPrec
                                    GHC.Int.$fShowInt32_$cshow
                                    GHC.Int.$fShowInt32_$cshowList];

GHC.Int.$wlvl1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Int.Int32
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [ww_s4kWm]
        GHC.Enum.$wtoEnumError
            GHC.Int.$fShowInt32
            lvl4_r4kPv
            ww_s4kWm
            GHC.Int.$fBoundedInt32_$cminBound
            GHC.Int.$fBoundedInt32_$cmaxBound;

GHC.Int.$w$ctoEnum1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [ww_s4kWn]
        case >=# [ww_s4kWn -2147483648#] of {
          __DEFAULT -> GHC.Int.$wlvl1 ww_s4kWn;
          1# ->
              case <=# [ww_s4kWn 2147483647#] of {
                __DEFAULT -> GHC.Int.$wlvl1 ww_s4kWn;
                1# -> ww_s4kWn;
              };
        };

GHC.Int.$fEnumInt32_$ctoEnum [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.Int.Int32
[GblId, Arity=1, Str=<S(S),1*U(U)>m, Unf=OtherCon []] =
    [] \r [w_s4kWs]
        case w_s4kWs of {
          GHC.Types.I# ww1_s4kWu [Occ=Once] ->
              case GHC.Int.$w$ctoEnum1 ww1_s4kWu of ww2_s4kWv {
                __DEFAULT -> GHC.Int.I32# [ww2_s4kWv];
              };
        };

GHC.Int.$w$cenumFromTo1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> [GHC.Int.Int32]
[GblId, Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s4kWw ww1_s4kWx]
        case ># [ww_s4kWw ww1_s4kWx] of {
          __DEFAULT ->
              let {
                go_s4kWz [Occ=LoopBreaker] :: GHC.Prim.Int# -> [GHC.Int.Int32]
                [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
                    sat-only [ww1_s4kWx go_s4kWz] \r [x_s4kWA]
                        let {
                          sat_s4kWG [Occ=Once] :: [GHC.Int.Int32]
                          [LclId] =
                              [ww1_s4kWx go_s4kWz x_s4kWA] \u []
                                  case ==# [x_s4kWA ww1_s4kWx] of {
                                    __DEFAULT ->
                                        case +# [x_s4kWA 1#] of sat_s4kWF {
                                          __DEFAULT -> go_s4kWz sat_s4kWF;
                                        };
                                    1# -> [] [];
                                  }; } in
                        let {
                          sat_s4kWD [Occ=Once] :: GHC.Int.Int32
                          [LclId] =
                              [x_s4kWA] \u []
                                  case >=# [x_s4kWA -2147483648#] of {
                                    __DEFAULT -> GHC.Int.$wlvl1 x_s4kWA;
                                    1# ->
                                        case <=# [x_s4kWA 2147483647#] of {
                                          __DEFAULT -> GHC.Int.$wlvl1 x_s4kWA;
                                          1# -> GHC.Int.I32# [x_s4kWA];
                                        };
                                  };
                        } in  : [sat_s4kWD sat_s4kWG];
              } in  go_s4kWz ww_s4kWw;
          1# -> [] [];
        };

GHC.Int.$fEnumInt32_$cenumFromTo [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> [GHC.Int.Int32]
[GblId, Arity=2, Str=<S(S),1*U(U)><S(S),1*U(U)>, Unf=OtherCon []] =
    [] \r [w_s4kWH w1_s4kWI]
        case w_s4kWH of {
          GHC.Int.I32# ww1_s4kWK [Occ=Once] ->
              case w1_s4kWI of {
                GHC.Int.I32# ww3_s4kWM [Occ=Once] ->
                    GHC.Int.$w$cenumFromTo1 ww1_s4kWK ww3_s4kWM;
              };
        };

GHC.Int.$wgo1 [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: GHC.Prim.Int# -> (# GHC.Int.Int32, [GHC.Int.Int32] #)
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [w_s4kWN]
        let {
          sat_s4kWW [Occ=Once] :: [GHC.Int.Int32]
          [LclId] =
              [w_s4kWN] \u []
                  case w_s4kWN of wild_s4kWR {
                    __DEFAULT ->
                        case +# [wild_s4kWR 1#] of sat_s4kWS {
                          __DEFAULT ->
                              case GHC.Int.$wgo1 sat_s4kWS of {
                                (#,#) ww1_s4kWU [Occ=Once] ww2_s4kWV [Occ=Once] ->
                                    : [ww1_s4kWU ww2_s4kWV];
                              };
                        };
                    2147483647# -> [] [];
                  }; } in
        let {
          sat_s4kWQ [Occ=Once] :: GHC.Int.Int32
          [LclId] =
              [w_s4kWN] \u []
                  case >=# [w_s4kWN -2147483648#] of {
                    __DEFAULT -> GHC.Int.$wlvl1 w_s4kWN;
                    1# ->
                        case <=# [w_s4kWN 2147483647#] of {
                          __DEFAULT -> GHC.Int.$wlvl1 w_s4kWN;
                          1# -> GHC.Int.I32# [w_s4kWN];
                        };
                  };
        } in  (#,#) [sat_s4kWQ sat_s4kWW];

GHC.Int.$fEnumInt32_go [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> [GHC.Int.Int32]
[GblId, Arity=1, Str=<S,U>m2, Unf=OtherCon []] =
    [] \r [w_s4kWX]
        case GHC.Int.$wgo1 w_s4kWX of {
          (#,#) ww1_s4kWZ [Occ=Once] ww2_s4kX0 [Occ=Once] ->
              : [ww1_s4kWZ ww2_s4kX0];
        };

GHC.Int.$fEnumInt32_$cenumFrom :: GHC.Int.Int32 -> [GHC.Int.Int32]
[GblId, Arity=1, Str=<S(S),1*U(U)>, Unf=OtherCon []] =
    [] \r [n_s4kX1]
        case n_s4kX1 of {
          GHC.Int.I32# x#_s4kX3 ->
              case ># [x#_s4kX3 2147483647#] of {
                __DEFAULT -> GHC.Int.$fEnumInt32_go x#_s4kX3;
                1# -> [] [];
              };
        };

GHC.Int.$w$cenumFromThenTo1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int#
     -> GHC.Prim.Int# -> GHC.Prim.Int# -> [GHC.Int.Int32]
[GblId, Arity=3, Str=<S,U><S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s4kX5 ww1_s4kX6 ww2_s4kX7]
        case >=# [ww1_s4kX6 ww_s4kX5] of {
          __DEFAULT ->
              case ># [ww2_s4kX7 ww1_s4kX6] of {
                __DEFAULT ->
                    let {
                      sat_s4kXq [Occ=Once] :: [GHC.Int.Int32]
                      [LclId] =
                          [ww_s4kX5 ww1_s4kX6 ww2_s4kX7] \u []
                              case -# [ww1_s4kX6 ww_s4kX5] of delta_s4kXd [Dmd=<S,U>] {
                                __DEFAULT ->
                                    case -# [ww2_s4kX7 delta_s4kXd] of y'_s4kXe [Dmd=<S,U>] {
                                      __DEFAULT ->
                                          let {
                                            go_dn_s4kXf [Occ=LoopBreaker]
                                              :: GHC.Prim.Int# -> [GHC.Int.Int32]
                                            [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                                sat-only [delta_s4kXd
                                                          y'_s4kXe
                                                          go_dn_s4kXf] \r [x_s4kXg]
                                                    case <# [x_s4kXg y'_s4kXe] of {
                                                      __DEFAULT ->
                                                          let {
                                                            sat_s4kXm [Occ=Once] :: [GHC.Int.Int32]
                                                            [LclId] =
                                                                [delta_s4kXd
                                                                 go_dn_s4kXf
                                                                 x_s4kXg] \u []
                                                                    case
                                                                        +# [x_s4kXg delta_s4kXd]
                                                                    of
                                                                    sat_s4kXl
                                                                    { __DEFAULT ->
                                                                          go_dn_s4kXf sat_s4kXl;
                                                                    }; } in
                                                          let {
                                                            sat_s4kXk [Occ=Once] :: GHC.Int.Int32
                                                            [LclId] =
                                                                [x_s4kXg] \u []
                                                                    case
                                                                        >=# [x_s4kXg -2147483648#]
                                                                    of
                                                                    { __DEFAULT ->
                                                                          GHC.Int.$wlvl1 x_s4kXg;
                                                                      1# ->
                                                                          case
                                                                              <=# [x_s4kXg
                                                                                   2147483647#]
                                                                          of
                                                                          { __DEFAULT ->
                                                                                GHC.Int.$wlvl1
                                                                                    x_s4kXg;
                                                                            1# ->
                                                                                GHC.Int.I32# [x_s4kXg];
                                                                          };
                                                                    };
                                                          } in  : [sat_s4kXk sat_s4kXm];
                                                      1# ->
                                                          let {
                                                            sat_s4kXp [Occ=Once] :: GHC.Int.Int32
                                                            [LclId] =
                                                                [x_s4kXg] \u []
                                                                    case
                                                                        >=# [x_s4kXg -2147483648#]
                                                                    of
                                                                    { __DEFAULT ->
                                                                          GHC.Int.$wlvl1 x_s4kXg;
                                                                      1# ->
                                                                          case
                                                                              <=# [x_s4kXg
                                                                                   2147483647#]
                                                                          of
                                                                          { __DEFAULT ->
                                                                                GHC.Int.$wlvl1
                                                                                    x_s4kXg;
                                                                            1# ->
                                                                                GHC.Int.I32# [x_s4kXg];
                                                                          };
                                                                    };
                                                          } in  : [sat_s4kXp GHC.Types.[]];
                                                    };
                                          } in  go_dn_s4kXf ww1_s4kX6;
                                    };
                              }; } in
                    let {
                      sat_s4kXc [Occ=Once] :: GHC.Int.Int32
                      [LclId] =
                          [ww_s4kX5] \u []
                              case >=# [ww_s4kX5 -2147483648#] of {
                                __DEFAULT -> GHC.Int.$wlvl1 ww_s4kX5;
                                1# ->
                                    case <=# [ww_s4kX5 2147483647#] of {
                                      __DEFAULT -> GHC.Int.$wlvl1 ww_s4kX5;
                                      1# -> GHC.Int.I32# [ww_s4kX5];
                                    };
                              };
                    } in  : [sat_s4kXc sat_s4kXq];
                1# ->
                    case ># [ww2_s4kX7 ww_s4kX5] of {
                      __DEFAULT ->
                          let {
                            sat_s4kXu [Occ=Once] :: GHC.Int.Int32
                            [LclId] =
                                [ww_s4kX5] \u []
                                    case >=# [ww_s4kX5 -2147483648#] of {
                                      __DEFAULT -> GHC.Int.$wlvl1 ww_s4kX5;
                                      1# ->
                                          case <=# [ww_s4kX5 2147483647#] of {
                                            __DEFAULT -> GHC.Int.$wlvl1 ww_s4kX5;
                                            1# -> GHC.Int.I32# [ww_s4kX5];
                                          };
                                    };
                          } in  : [sat_s4kXu GHC.Types.[]];
                      1# -> [] [];
                    };
              };
          1# ->
              case <# [ww2_s4kX7 ww1_s4kX6] of {
                __DEFAULT ->
                    let {
                      sat_s4kXM [Occ=Once] :: [GHC.Int.Int32]
                      [LclId] =
                          [ww_s4kX5 ww1_s4kX6 ww2_s4kX7] \u []
                              case -# [ww1_s4kX6 ww_s4kX5] of delta_s4kXz [Dmd=<S,U>] {
                                __DEFAULT ->
                                    case -# [ww2_s4kX7 delta_s4kXz] of y'_s4kXA [Dmd=<S,U>] {
                                      __DEFAULT ->
                                          let {
                                            go_up_s4kXB [Occ=LoopBreaker]
                                              :: GHC.Prim.Int# -> [GHC.Int.Int32]
                                            [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                                sat-only [delta_s4kXz
                                                          y'_s4kXA
                                                          go_up_s4kXB] \r [x_s4kXC]
                                                    case ># [x_s4kXC y'_s4kXA] of {
                                                      __DEFAULT ->
                                                          let {
                                                            sat_s4kXI [Occ=Once] :: [GHC.Int.Int32]
                                                            [LclId] =
                                                                [delta_s4kXz
                                                                 go_up_s4kXB
                                                                 x_s4kXC] \u []
                                                                    case
                                                                        +# [x_s4kXC delta_s4kXz]
                                                                    of
                                                                    sat_s4kXH
                                                                    { __DEFAULT ->
                                                                          go_up_s4kXB sat_s4kXH;
                                                                    }; } in
                                                          let {
                                                            sat_s4kXG [Occ=Once] :: GHC.Int.Int32
                                                            [LclId] =
                                                                [x_s4kXC] \u []
                                                                    case
                                                                        >=# [x_s4kXC -2147483648#]
                                                                    of
                                                                    { __DEFAULT ->
                                                                          GHC.Int.$wlvl1 x_s4kXC;
                                                                      1# ->
                                                                          case
                                                                              <=# [x_s4kXC
                                                                                   2147483647#]
                                                                          of
                                                                          { __DEFAULT ->
                                                                                GHC.Int.$wlvl1
                                                                                    x_s4kXC;
                                                                            1# ->
                                                                                GHC.Int.I32# [x_s4kXC];
                                                                          };
                                                                    };
                                                          } in  : [sat_s4kXG sat_s4kXI];
                                                      1# ->
                                                          let {
                                                            sat_s4kXL [Occ=Once] :: GHC.Int.Int32
                                                            [LclId] =
                                                                [x_s4kXC] \u []
                                                                    case
                                                                        >=# [x_s4kXC -2147483648#]
                                                                    of
                                                                    { __DEFAULT ->
                                                                          GHC.Int.$wlvl1 x_s4kXC;
                                                                      1# ->
                                                                          case
                                                                              <=# [x_s4kXC
                                                                                   2147483647#]
                                                                          of
                                                                          { __DEFAULT ->
                                                                                GHC.Int.$wlvl1
                                                                                    x_s4kXC;
                                                                            1# ->
                                                                                GHC.Int.I32# [x_s4kXC];
                                                                          };
                                                                    };
                                                          } in  : [sat_s4kXL GHC.Types.[]];
                                                    };
                                          } in  go_up_s4kXB ww1_s4kX6;
                                    };
                              }; } in
                    let {
                      sat_s4kXy [Occ=Once] :: GHC.Int.Int32
                      [LclId] =
                          [ww_s4kX5] \u []
                              case >=# [ww_s4kX5 -2147483648#] of {
                                __DEFAULT -> GHC.Int.$wlvl1 ww_s4kX5;
                                1# ->
                                    case <=# [ww_s4kX5 2147483647#] of {
                                      __DEFAULT -> GHC.Int.$wlvl1 ww_s4kX5;
                                      1# -> GHC.Int.I32# [ww_s4kX5];
                                    };
                              };
                    } in  : [sat_s4kXy sat_s4kXM];
                1# ->
                    case <# [ww2_s4kX7 ww_s4kX5] of {
                      __DEFAULT ->
                          let {
                            sat_s4kXQ [Occ=Once] :: GHC.Int.Int32
                            [LclId] =
                                [ww_s4kX5] \u []
                                    case >=# [ww_s4kX5 -2147483648#] of {
                                      __DEFAULT -> GHC.Int.$wlvl1 ww_s4kX5;
                                      1# ->
                                          case <=# [ww_s4kX5 2147483647#] of {
                                            __DEFAULT -> GHC.Int.$wlvl1 ww_s4kX5;
                                            1# -> GHC.Int.I32# [ww_s4kX5];
                                          };
                                    };
                          } in  : [sat_s4kXQ GHC.Types.[]];
                      1# -> [] [];
                    };
              };
        };

GHC.Int.$fEnumInt32_$cenumFromThenTo [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int32
     -> GHC.Int.Int32 -> GHC.Int.Int32 -> [GHC.Int.Int32]
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [w_s4kXR w1_s4kXS w2_s4kXT]
        case w_s4kXR of {
          GHC.Int.I32# ww1_s4kXV [Occ=Once] ->
              case w1_s4kXS of {
                GHC.Int.I32# ww3_s4kXX [Occ=Once] ->
                    case w2_s4kXT of {
                      GHC.Int.I32# ww5_s4kXZ [Occ=Once] ->
                          GHC.Int.$w$cenumFromThenTo1 ww1_s4kXV ww3_s4kXX ww5_s4kXZ;
                    };
              };
        };

GHC.Int.$fEnumInt32 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Enum GHC.Int.Int32
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Enum! [GHC.Int.$fEnumInt32_$csucc
                                    GHC.Int.$fEnumInt32_$cpred
                                    GHC.Int.$fEnumInt32_$ctoEnum
                                    GHC.Int.$fEnumInt32_$cfromEnum
                                    GHC.Int.$fEnumInt32_$cenumFrom
                                    GHC.Int.$fEnumInt32_$cenumFromThen
                                    GHC.Int.$fEnumInt32_$cenumFromTo
                                    GHC.Int.$fEnumInt32_$cenumFromThenTo];
GHC.Int.$fEnumInt32_$cenumFromThen [Occ=LoopBreaker]
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> [GHC.Int.Int32]
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Enum.boundedEnumFromThen
            GHC.Int.$fEnumInt32 GHC.Int.$fBoundedInt32 eta_B2 eta_B1;

GHC.Int.$tcInt6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Int64"#;

GHC.Int.$fEnumInt5 :: GHC.Int.Int64
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# GHC.Int.$tcInt6 of sat_s4kY0 {
          __DEFAULT -> GHC.Enum.predError sat_s4kY0;
        };

GHC.Int.$fEnumInt6 :: GHC.Int.Int64
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# GHC.Int.$tcInt6 of sat_s4kY1 {
          __DEFAULT -> GHC.Enum.succError sat_s4kY1;
        };

GHC.Int.neInt64 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4kY2 ds1_s4kY3]
        case ds_s4kY2 of {
          GHC.Int.I64# x_s4kY5 [Occ=Once] ->
              case ds1_s4kY3 of {
                GHC.Int.I64# y_s4kY7 [Occ=Once] ->
                    case /=# [x_s4kY5 y_s4kY7] of sat_s4kY8 {
                      __DEFAULT -> tagToEnum# [sat_s4kY8];
                    };
              };
        };

GHC.Int.$fBoundedInt64_$cminBound :: GHC.Int.Int64
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I64#! [-9223372036854775808#];

GHC.Int.$fEnumInt64_$cpred :: GHC.Int.Int64 -> GHC.Int.Int64
[GblId, Arity=1, Str=<S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [x_s4kY9]
        case x_s4kY9 of {
          GHC.Int.I64# x1_s4kYb [Occ=Once!] ->
              case x1_s4kYb of wild1_s4kYc {
                __DEFAULT ->
                    case -# [wild1_s4kYc 1#] of sat_s4kYd {
                      __DEFAULT -> GHC.Int.I64# [sat_s4kYd];
                    };
                -9223372036854775808# -> GHC.Int.$fEnumInt5;
              };
        };

GHC.Int.$fBoundedInt64_$cmaxBound :: GHC.Int.Int64
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I64#! [9223372036854775807#];

GHC.Int.$fBoundedInt64 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Bounded GHC.Int.Int64
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Bounded! [GHC.Int.$fBoundedInt64_$cminBound
                                       GHC.Int.$fBoundedInt64_$cmaxBound];

GHC.Int.$fEnumInt64_$csucc :: GHC.Int.Int64 -> GHC.Int.Int64
[GblId, Arity=1, Str=<S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [x_s4kYe]
        case x_s4kYe of {
          GHC.Int.I64# x1_s4kYg [Occ=Once!] ->
              case x1_s4kYg of wild1_s4kYh {
                __DEFAULT ->
                    case +# [wild1_s4kYh 1#] of sat_s4kYi {
                      __DEFAULT -> GHC.Int.I64# [sat_s4kYi];
                    };
                9223372036854775807# -> GHC.Int.$fEnumInt6;
              };
        };

GHC.Int.$wgo2 [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: GHC.Prim.Int# -> (# GHC.Int.Int64, [GHC.Int.Int64] #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [w_s4kYj]
        let {
          sat_s4kYq [Occ=Once] :: [GHC.Int.Int64]
          [LclId] =
              [w_s4kYj] \u []
                  case w_s4kYj of wild_s4kYl {
                    __DEFAULT ->
                        case +# [wild_s4kYl 1#] of sat_s4kYm {
                          __DEFAULT ->
                              case GHC.Int.$wgo2 sat_s4kYm of {
                                (#,#) ww1_s4kYo [Occ=Once] ww2_s4kYp [Occ=Once] ->
                                    : [ww1_s4kYo ww2_s4kYp];
                              };
                        };
                    9223372036854775807# -> [] [];
                  }; } in
        let {
          sat_s4kYk [Occ=Once] :: GHC.Int.Int64
          [LclId] =
              CCCS GHC.Int.I64#! [w_s4kYj];
        } in  (#,#) [sat_s4kYk sat_s4kYq];

GHC.Int.$fEnumInt64_go [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> [GHC.Int.Int64]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>m2, Unf=OtherCon []] =
    [] \r [w_s4kYr]
        case GHC.Int.$wgo2 w_s4kYr of {
          (#,#) ww1_s4kYt [Occ=Once] ww2_s4kYu [Occ=Once] ->
              : [ww1_s4kYt ww2_s4kYu];
        };

GHC.Int.$fEnumInt64_$cenumFrom :: GHC.Int.Int64 -> [GHC.Int.Int64]
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m2,
 Unf=OtherCon []] =
    [] \r [n_s4kYv]
        case n_s4kYv of {
          GHC.Int.I64# x#_s4kYx [Occ=Once] ->
              GHC.Int.$fEnumInt64_go x#_s4kYx;
        };

GHC.Int.$fEnumInt64 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Enum GHC.Int.Int64
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Enum! [GHC.Int.$fEnumInt64_$csucc
                                    GHC.Int.$fEnumInt64_$cpred
                                    GHC.Int.$fEnumInt64_$ctoEnum
                                    GHC.Int.$fEnumInt64_$cfromEnum
                                    GHC.Int.$fEnumInt64_$cenumFrom
                                    GHC.Int.$fEnumInt64_$cenumFromThen
                                    GHC.Int.$fEnumInt64_$cenumFromTo
                                    GHC.Int.$fEnumInt64_$cenumFromThenTo];
GHC.Int.$fEnumInt64_$cenumFromThen [Occ=LoopBreaker]
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> [GHC.Int.Int64]
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Enum.boundedEnumFromThen
            GHC.Int.$fEnumInt64 GHC.Int.$fBoundedInt64 eta_B2 eta_B1;

GHC.Int.$fNumInt8_$cfromInteger
  :: GHC.Integer.Type.Integer -> GHC.Int.Int8
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [i_s4kYy]
        case GHC.Integer.Type.integerToInt i_s4kYy of wild_s4kYz {
          __DEFAULT ->
              case narrow8Int# [wild_s4kYz] of sat_s4kYA {
                __DEFAULT -> GHC.Int.I8# [sat_s4kYA];
              };
        };

GHC.Int.$fNumInt8_$cnegate :: GHC.Int.Int8 -> GHC.Int.Int8
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4kYB]
        case ds_s4kYB of {
          GHC.Int.I8# x#_s4kYD [Occ=Once] ->
              case negateInt# [x#_s4kYD] of sat_s4kYE {
                __DEFAULT ->
                    case narrow8Int# [sat_s4kYE] of sat_s4kYF {
                      __DEFAULT -> GHC.Int.I8# [sat_s4kYF];
                    };
              };
        };

GHC.Int.$fNumInt8_$c*
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> GHC.Int.Int8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4kYG ds1_s4kYH]
        case ds_s4kYG of {
          GHC.Int.I8# x#_s4kYJ [Occ=Once] ->
              case ds1_s4kYH of {
                GHC.Int.I8# y#_s4kYL [Occ=Once] ->
                    case *# [x#_s4kYJ y#_s4kYL] of sat_s4kYM {
                      __DEFAULT ->
                          case narrow8Int# [sat_s4kYM] of sat_s4kYN {
                            __DEFAULT -> GHC.Int.I8# [sat_s4kYN];
                          };
                    };
              };
        };

GHC.Int.$fNumInt8_$c-
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> GHC.Int.Int8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4kYO ds1_s4kYP]
        case ds_s4kYO of {
          GHC.Int.I8# x#_s4kYR [Occ=Once] ->
              case ds1_s4kYP of {
                GHC.Int.I8# y#_s4kYT [Occ=Once] ->
                    case -# [x#_s4kYR y#_s4kYT] of sat_s4kYU {
                      __DEFAULT ->
                          case narrow8Int# [sat_s4kYU] of sat_s4kYV {
                            __DEFAULT -> GHC.Int.I8# [sat_s4kYV];
                          };
                    };
              };
        };

GHC.Int.$fNumInt8_$c+
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> GHC.Int.Int8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4kYW ds1_s4kYX]
        case ds_s4kYW of {
          GHC.Int.I8# x#_s4kYZ [Occ=Once] ->
              case ds1_s4kYX of {
                GHC.Int.I8# y#_s4kZ1 [Occ=Once] ->
                    case +# [x#_s4kYZ y#_s4kZ1] of sat_s4kZ2 {
                      __DEFAULT ->
                          case narrow8Int# [sat_s4kZ2] of sat_s4kZ3 {
                            __DEFAULT -> GHC.Int.I8# [sat_s4kZ3];
                          };
                    };
              };
        };

GHC.Int.$fIntegralInt8_$ctoInteger
  :: GHC.Int.Int8 -> GHC.Integer.Type.Integer
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4kZ4]
        case ds_s4kZ4 of {
          GHC.Int.I8# x#_s4kZ6 [Occ=Once] ->
              GHC.Integer.Type.smallInteger x#_s4kZ6;
        };

GHC.Int.$fBitsInt8_$cpopCount :: GHC.Int.Int8 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4kZ7]
        case ds_s4kZ7 of {
          GHC.Int.I8# x#_s4kZ9 [Occ=Once] ->
              case int2Word# [x#_s4kZ9] of sat_s4kZa {
                __DEFAULT ->
                    case popCnt8# [sat_s4kZa] of sat_s4kZb {
                      __DEFAULT ->
                          case word2Int# [sat_s4kZb] of sat_s4kZc {
                            __DEFAULT -> GHC.Types.I# [sat_s4kZc];
                          };
                    };
              };
        };

GHC.Int.$fBitsInt8_$cunsafeShiftR
  :: GHC.Int.Int8 -> GHC.Types.Int -> GHC.Int.Int8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4kZd ds1_s4kZe]
        case ds_s4kZd of {
          GHC.Int.I8# x#_s4kZg [Occ=Once] ->
              case ds1_s4kZe of {
                GHC.Types.I# i#_s4kZi [Occ=Once] ->
                    case uncheckedIShiftRA# [x#_s4kZg i#_s4kZi] of sat_s4kZj {
                      __DEFAULT -> GHC.Int.I8# [sat_s4kZj];
                    };
              };
        };

GHC.Int.$fBitsInt13 :: GHC.Int.Int8
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I8#! [0#];

GHC.Int.$fNumInt9 :: GHC.Int.Int8
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I8#! [-1#];

GHC.Int.$fBitsInt8_$cshiftR [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int8 -> GHC.Types.Int -> GHC.Int.Int8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4kZk w1_s4kZl]
        case w_s4kZk of {
          GHC.Int.I8# ww1_s4kZn [Occ=Once*] ->
              case w1_s4kZl of {
                GHC.Types.I# ww3_s4kZp ->
                    case >=# [ww3_s4kZp 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftRA# [ww1_s4kZn ww3_s4kZp] of sat_s4kZr {
                            __DEFAULT -> GHC.Int.I8# [sat_s4kZr];
                          };
                      1# ->
                          case <# [ww1_s4kZn 0#] of {
                            __DEFAULT -> GHC.Int.$fBitsInt13;
                            1# -> GHC.Int.$fNumInt9;
                          };
                    };
              };
        };

GHC.Int.$fBitsInt8_$cunsafeShiftL
  :: GHC.Int.Int8 -> GHC.Types.Int -> GHC.Int.Int8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4kZt ds1_s4kZu]
        case ds_s4kZt of {
          GHC.Int.I8# x#_s4kZw [Occ=Once] ->
              case ds1_s4kZu of {
                GHC.Types.I# i#_s4kZy [Occ=Once] ->
                    case uncheckedIShiftL# [x#_s4kZw i#_s4kZy] of sat_s4kZz {
                      __DEFAULT ->
                          case narrow8Int# [sat_s4kZz] of sat_s4kZA {
                            __DEFAULT -> GHC.Int.I8# [sat_s4kZA];
                          };
                    };
              };
        };

GHC.Int.$fBitsInt8_$cshiftL
  :: GHC.Int.Int8 -> GHC.Types.Int -> GHC.Int.Int8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4kZB ds1_s4kZC]
        case ds_s4kZB of {
          GHC.Int.I8# x#_s4kZE [Occ=Once] ->
              case ds1_s4kZC of {
                GHC.Types.I# i#_s4kZG ->
                    case >=# [i#_s4kZG 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftL# [x#_s4kZE i#_s4kZG] of sat_s4kZI {
                            __DEFAULT ->
                                case narrow8Int# [sat_s4kZI] of sat_s4kZJ {
                                  __DEFAULT -> GHC.Int.I8# [sat_s4kZJ];
                                };
                          };
                      1# -> GHC.Int.$fBitsInt13;
                    };
              };
        };

GHC.Int.$fBitsInt8_$cisSigned :: GHC.Int.Int8 -> GHC.Types.Bool
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>, Unf=OtherCon []] =
    [] \r [ds_s4kZK] GHC.Types.True [];

GHC.Int.$fBitsInt8_$crotate
  :: GHC.Int.Int8 -> GHC.Types.Int -> GHC.Int.Int8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4kZL ds1_s4kZM]
        case ds_s4kZL of wild_s4kZN {
          GHC.Int.I8# x#_s4kZO [Occ=Once] ->
              case ds1_s4kZM of {
                GHC.Types.I# i#_s4kZQ [Occ=Once] ->
                    case int2Word# [i#_s4kZQ] of sat_s4kZR {
                      __DEFAULT ->
                          case and# [sat_s4kZR 7##] of sat_s4kZS {
                            __DEFAULT ->
                                case word2Int# [sat_s4kZS] of wild2_s4kZT {
                                  __DEFAULT ->
                                      case int2Word# [x#_s4kZO] of sat_s4kZV {
                                        __DEFAULT ->
                                            case narrow8Word# [sat_s4kZV] of x'#_s4kZU [Dmd=<S,U>] {
                                              __DEFAULT ->
                                                  case -# [8# wild2_s4kZT] of sat_s4kZX {
                                                    __DEFAULT ->
                                                        case
                                                            uncheckedShiftRL# [x'#_s4kZU sat_s4kZX]
                                                        of
                                                        sat_s4kZY
                                                        { __DEFAULT ->
                                                              case
                                                                  uncheckedShiftL# [x'#_s4kZU
                                                                                    wild2_s4kZT]
                                                              of
                                                              sat_s4kZW
                                                              { __DEFAULT ->
                                                                    case
                                                                        or# [sat_s4kZW sat_s4kZY]
                                                                    of
                                                                    sat_s4kZZ
                                                                    { __DEFAULT ->
                                                                          case
                                                                              word2Int# [sat_s4kZZ]
                                                                          of
                                                                          sat_s4l00
                                                                          { __DEFAULT ->
                                                                                case
                                                                                    narrow8Int# [sat_s4l00]
                                                                                of
                                                                                sat_s4l01
                                                                                { __DEFAULT ->
                                                                                      GHC.Int.I8# [sat_s4l01];
                                                                                };
                                                                          };
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                  0# -> wild_s4kZN;
                                };
                          };
                    };
              };
        };

GHC.Int.$fBitsInt8_$cshift [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int8 -> GHC.Types.Int -> GHC.Int.Int8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l02 ds1_s4l03]
        case ds_s4l02 of {
          GHC.Int.I8# x#_s4l05 [Occ=Once*] ->
              case ds1_s4l03 of {
                GHC.Types.I# i#_s4l07 ->
                    case >=# [i#_s4l07 0#] of {
                      __DEFAULT ->
                          case negateInt# [i#_s4l07] of b_s4l09 [Dmd=<S,U>] {
                            __DEFAULT ->
                                case >=# [b_s4l09 64#] of {
                                  __DEFAULT ->
                                      case uncheckedIShiftRA# [x#_s4l05 b_s4l09] of sat_s4l0b {
                                        __DEFAULT -> GHC.Int.I8# [sat_s4l0b];
                                      };
                                  1# ->
                                      case <# [x#_s4l05 0#] of {
                                        __DEFAULT -> GHC.Int.$fBitsInt13;
                                        1# -> GHC.Int.$fNumInt9;
                                      };
                                };
                          };
                      1# ->
                          case >=# [i#_s4l07 64#] of {
                            __DEFAULT ->
                                case uncheckedIShiftL# [x#_s4l05 i#_s4l07] of sat_s4l0e {
                                  __DEFAULT ->
                                      case narrow8Int# [sat_s4l0e] of sat_s4l0f {
                                        __DEFAULT -> GHC.Int.I8# [sat_s4l0f];
                                      };
                                };
                            1# -> GHC.Int.$fBitsInt13;
                          };
                    };
              };
        };

GHC.Int.$fBitsInt8_$ccomplement :: GHC.Int.Int8 -> GHC.Int.Int8
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l0g]
        case ds_s4l0g of {
          GHC.Int.I8# x#_s4l0i [Occ=Once] ->
              case int2Word# [x#_s4l0i] of sat_s4l0j {
                __DEFAULT ->
                    case not# [sat_s4l0j] of sat_s4l0k {
                      __DEFAULT ->
                          case word2Int# [sat_s4l0k] of sat_s4l0l {
                            __DEFAULT -> GHC.Int.I8# [sat_s4l0l];
                          };
                    };
              };
        };

GHC.Int.$fBitsInt8_$cxor
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> GHC.Int.Int8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l0m ds1_s4l0n]
        case ds_s4l0m of {
          GHC.Int.I8# x#_s4l0p [Occ=Once] ->
              case ds1_s4l0n of {
                GHC.Int.I8# y#_s4l0r [Occ=Once] ->
                    case int2Word# [y#_s4l0r] of sat_s4l0t {
                      __DEFAULT ->
                          case int2Word# [x#_s4l0p] of sat_s4l0s {
                            __DEFAULT ->
                                case xor# [sat_s4l0s sat_s4l0t] of sat_s4l0u {
                                  __DEFAULT ->
                                      case word2Int# [sat_s4l0u] of sat_s4l0v {
                                        __DEFAULT -> GHC.Int.I8# [sat_s4l0v];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fBitsInt8_$c.|.
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> GHC.Int.Int8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l0w ds1_s4l0x]
        case ds_s4l0w of {
          GHC.Int.I8# x#_s4l0z [Occ=Once] ->
              case ds1_s4l0x of {
                GHC.Int.I8# y#_s4l0B [Occ=Once] ->
                    case int2Word# [y#_s4l0B] of sat_s4l0D {
                      __DEFAULT ->
                          case int2Word# [x#_s4l0z] of sat_s4l0C {
                            __DEFAULT ->
                                case or# [sat_s4l0C sat_s4l0D] of sat_s4l0E {
                                  __DEFAULT ->
                                      case word2Int# [sat_s4l0E] of sat_s4l0F {
                                        __DEFAULT -> GHC.Int.I8# [sat_s4l0F];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fBitsInt8_$c.&.
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> GHC.Int.Int8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l0G ds1_s4l0H]
        case ds_s4l0G of {
          GHC.Int.I8# x#_s4l0J [Occ=Once] ->
              case ds1_s4l0H of {
                GHC.Int.I8# y#_s4l0L [Occ=Once] ->
                    case int2Word# [y#_s4l0L] of sat_s4l0N {
                      __DEFAULT ->
                          case int2Word# [x#_s4l0J] of sat_s4l0M {
                            __DEFAULT ->
                                case and# [sat_s4l0M sat_s4l0N] of sat_s4l0O {
                                  __DEFAULT ->
                                      case word2Int# [sat_s4l0O] of sat_s4l0P {
                                        __DEFAULT -> GHC.Int.I8# [sat_s4l0P];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fFiniteBitsInt8_$ccountTrailingZeros
  :: GHC.Int.Int8 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l0Q]
        case ds_s4l0Q of {
          GHC.Int.I8# x#_s4l0S [Occ=Once] ->
              case int2Word# [x#_s4l0S] of sat_s4l0T {
                __DEFAULT ->
                    case ctz8# [sat_s4l0T] of sat_s4l0U {
                      __DEFAULT ->
                          case word2Int# [sat_s4l0U] of sat_s4l0V {
                            __DEFAULT -> GHC.Types.I# [sat_s4l0V];
                          };
                    };
              };
        };

GHC.Int.$fFiniteBitsInt8_$ccountLeadingZeros
  :: GHC.Int.Int8 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l0W]
        case ds_s4l0W of {
          GHC.Int.I8# x#_s4l0Y [Occ=Once] ->
              case int2Word# [x#_s4l0Y] of sat_s4l0Z {
                __DEFAULT ->
                    case clz8# [sat_s4l0Z] of sat_s4l10 {
                      __DEFAULT ->
                          case word2Int# [sat_s4l10] of sat_s4l11 {
                            __DEFAULT -> GHC.Types.I# [sat_s4l11];
                          };
                    };
              };
        };

GHC.Int.$fBitsInt11 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [8#];

GHC.Int.$fBitsInt8_$cfiniteBitSize :: GHC.Int.Int8 -> GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>m, Unf=OtherCon []] =
    [] \r [ds_s4l12] GHC.Int.$fBitsInt11;

GHC.Int.$fNumInt16_$cfromInteger
  :: GHC.Integer.Type.Integer -> GHC.Int.Int16
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [i_s4l13]
        case GHC.Integer.Type.integerToInt i_s4l13 of wild_s4l14 {
          __DEFAULT ->
              case narrow16Int# [wild_s4l14] of sat_s4l15 {
                __DEFAULT -> GHC.Int.I16# [sat_s4l15];
              };
        };

GHC.Int.$fNumInt16_$cnegate :: GHC.Int.Int16 -> GHC.Int.Int16
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l16]
        case ds_s4l16 of {
          GHC.Int.I16# x#_s4l18 [Occ=Once] ->
              case negateInt# [x#_s4l18] of sat_s4l19 {
                __DEFAULT ->
                    case narrow16Int# [sat_s4l19] of sat_s4l1a {
                      __DEFAULT -> GHC.Int.I16# [sat_s4l1a];
                    };
              };
        };

GHC.Int.$fNumInt16_$c*
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Int.Int16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l1b ds1_s4l1c]
        case ds_s4l1b of {
          GHC.Int.I16# x#_s4l1e [Occ=Once] ->
              case ds1_s4l1c of {
                GHC.Int.I16# y#_s4l1g [Occ=Once] ->
                    case *# [x#_s4l1e y#_s4l1g] of sat_s4l1h {
                      __DEFAULT ->
                          case narrow16Int# [sat_s4l1h] of sat_s4l1i {
                            __DEFAULT -> GHC.Int.I16# [sat_s4l1i];
                          };
                    };
              };
        };

GHC.Int.$fNumInt16_$c-
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Int.Int16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l1j ds1_s4l1k]
        case ds_s4l1j of {
          GHC.Int.I16# x#_s4l1m [Occ=Once] ->
              case ds1_s4l1k of {
                GHC.Int.I16# y#_s4l1o [Occ=Once] ->
                    case -# [x#_s4l1m y#_s4l1o] of sat_s4l1p {
                      __DEFAULT ->
                          case narrow16Int# [sat_s4l1p] of sat_s4l1q {
                            __DEFAULT -> GHC.Int.I16# [sat_s4l1q];
                          };
                    };
              };
        };

GHC.Int.$fNumInt16_$c+
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Int.Int16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l1r ds1_s4l1s]
        case ds_s4l1r of {
          GHC.Int.I16# x#_s4l1u [Occ=Once] ->
              case ds1_s4l1s of {
                GHC.Int.I16# y#_s4l1w [Occ=Once] ->
                    case +# [x#_s4l1u y#_s4l1w] of sat_s4l1x {
                      __DEFAULT ->
                          case narrow16Int# [sat_s4l1x] of sat_s4l1y {
                            __DEFAULT -> GHC.Int.I16# [sat_s4l1y];
                          };
                    };
              };
        };

GHC.Int.$fIntegralInt16_$ctoInteger
  :: GHC.Int.Int16 -> GHC.Integer.Type.Integer
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4l1z]
        case ds_s4l1z of {
          GHC.Int.I16# x#_s4l1B [Occ=Once] ->
              GHC.Integer.Type.smallInteger x#_s4l1B;
        };

GHC.Int.$fBitsInt16_$cpopCount :: GHC.Int.Int16 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l1C]
        case ds_s4l1C of {
          GHC.Int.I16# x#_s4l1E [Occ=Once] ->
              case int2Word# [x#_s4l1E] of sat_s4l1F {
                __DEFAULT ->
                    case popCnt16# [sat_s4l1F] of sat_s4l1G {
                      __DEFAULT ->
                          case word2Int# [sat_s4l1G] of sat_s4l1H {
                            __DEFAULT -> GHC.Types.I# [sat_s4l1H];
                          };
                    };
              };
        };

GHC.Int.$fBitsInt16_$cunsafeShiftR
  :: GHC.Int.Int16 -> GHC.Types.Int -> GHC.Int.Int16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l1I ds1_s4l1J]
        case ds_s4l1I of {
          GHC.Int.I16# x#_s4l1L [Occ=Once] ->
              case ds1_s4l1J of {
                GHC.Types.I# i#_s4l1N [Occ=Once] ->
                    case uncheckedIShiftRA# [x#_s4l1L i#_s4l1N] of sat_s4l1O {
                      __DEFAULT -> GHC.Int.I16# [sat_s4l1O];
                    };
              };
        };

GHC.Int.$fBitsInt3 :: GHC.Int.Int16
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I16#! [0#];

GHC.Int.$fNumInt2 :: GHC.Int.Int16
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I16#! [-1#];

GHC.Int.$fBitsInt16_$cshiftR [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int16 -> GHC.Types.Int -> GHC.Int.Int16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4l1P w1_s4l1Q]
        case w_s4l1P of {
          GHC.Int.I16# ww1_s4l1S [Occ=Once*] ->
              case w1_s4l1Q of {
                GHC.Types.I# ww3_s4l1U ->
                    case >=# [ww3_s4l1U 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftRA# [ww1_s4l1S ww3_s4l1U] of sat_s4l1W {
                            __DEFAULT -> GHC.Int.I16# [sat_s4l1W];
                          };
                      1# ->
                          case <# [ww1_s4l1S 0#] of {
                            __DEFAULT -> GHC.Int.$fBitsInt3;
                            1# -> GHC.Int.$fNumInt2;
                          };
                    };
              };
        };

GHC.Int.$fBitsInt16_$cunsafeShiftL
  :: GHC.Int.Int16 -> GHC.Types.Int -> GHC.Int.Int16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l1Y ds1_s4l1Z]
        case ds_s4l1Y of {
          GHC.Int.I16# x#_s4l21 [Occ=Once] ->
              case ds1_s4l1Z of {
                GHC.Types.I# i#_s4l23 [Occ=Once] ->
                    case uncheckedIShiftL# [x#_s4l21 i#_s4l23] of sat_s4l24 {
                      __DEFAULT ->
                          case narrow16Int# [sat_s4l24] of sat_s4l25 {
                            __DEFAULT -> GHC.Int.I16# [sat_s4l25];
                          };
                    };
              };
        };

GHC.Int.$fBitsInt16_$cshiftL
  :: GHC.Int.Int16 -> GHC.Types.Int -> GHC.Int.Int16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l26 ds1_s4l27]
        case ds_s4l26 of {
          GHC.Int.I16# x#_s4l29 [Occ=Once] ->
              case ds1_s4l27 of {
                GHC.Types.I# i#_s4l2b ->
                    case >=# [i#_s4l2b 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftL# [x#_s4l29 i#_s4l2b] of sat_s4l2d {
                            __DEFAULT ->
                                case narrow16Int# [sat_s4l2d] of sat_s4l2e {
                                  __DEFAULT -> GHC.Int.I16# [sat_s4l2e];
                                };
                          };
                      1# -> GHC.Int.$fBitsInt3;
                    };
              };
        };

GHC.Int.$fBitsInt16_$cisSigned :: GHC.Int.Int16 -> GHC.Types.Bool
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>, Unf=OtherCon []] =
    [] \r [ds_s4l2f] GHC.Types.True [];

GHC.Int.$fBitsInt16_$crotate
  :: GHC.Int.Int16 -> GHC.Types.Int -> GHC.Int.Int16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l2g ds1_s4l2h]
        case ds_s4l2g of wild_s4l2i {
          GHC.Int.I16# x#_s4l2j [Occ=Once] ->
              case ds1_s4l2h of {
                GHC.Types.I# i#_s4l2l [Occ=Once] ->
                    case int2Word# [i#_s4l2l] of sat_s4l2m {
                      __DEFAULT ->
                          case and# [sat_s4l2m 15##] of sat_s4l2n {
                            __DEFAULT ->
                                case word2Int# [sat_s4l2n] of wild2_s4l2o {
                                  __DEFAULT ->
                                      case int2Word# [x#_s4l2j] of sat_s4l2q {
                                        __DEFAULT ->
                                            case
                                                narrow16Word# [sat_s4l2q]
                                            of
                                            x'#_s4l2p [Dmd=<S,U>]
                                            { __DEFAULT ->
                                                  case -# [16# wild2_s4l2o] of sat_s4l2s {
                                                    __DEFAULT ->
                                                        case
                                                            uncheckedShiftRL# [x'#_s4l2p sat_s4l2s]
                                                        of
                                                        sat_s4l2t
                                                        { __DEFAULT ->
                                                              case
                                                                  uncheckedShiftL# [x'#_s4l2p
                                                                                    wild2_s4l2o]
                                                              of
                                                              sat_s4l2r
                                                              { __DEFAULT ->
                                                                    case
                                                                        or# [sat_s4l2r sat_s4l2t]
                                                                    of
                                                                    sat_s4l2u
                                                                    { __DEFAULT ->
                                                                          case
                                                                              word2Int# [sat_s4l2u]
                                                                          of
                                                                          sat_s4l2v
                                                                          { __DEFAULT ->
                                                                                case
                                                                                    narrow16Int# [sat_s4l2v]
                                                                                of
                                                                                sat_s4l2w
                                                                                { __DEFAULT ->
                                                                                      GHC.Int.I16# [sat_s4l2w];
                                                                                };
                                                                          };
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                  0# -> wild_s4l2i;
                                };
                          };
                    };
              };
        };

GHC.Int.$fBitsInt16_$cshift [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int16 -> GHC.Types.Int -> GHC.Int.Int16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l2x ds1_s4l2y]
        case ds_s4l2x of {
          GHC.Int.I16# x#_s4l2A [Occ=Once*] ->
              case ds1_s4l2y of {
                GHC.Types.I# i#_s4l2C ->
                    case >=# [i#_s4l2C 0#] of {
                      __DEFAULT ->
                          case negateInt# [i#_s4l2C] of b_s4l2E [Dmd=<S,U>] {
                            __DEFAULT ->
                                case >=# [b_s4l2E 64#] of {
                                  __DEFAULT ->
                                      case uncheckedIShiftRA# [x#_s4l2A b_s4l2E] of sat_s4l2G {
                                        __DEFAULT -> GHC.Int.I16# [sat_s4l2G];
                                      };
                                  1# ->
                                      case <# [x#_s4l2A 0#] of {
                                        __DEFAULT -> GHC.Int.$fBitsInt3;
                                        1# -> GHC.Int.$fNumInt2;
                                      };
                                };
                          };
                      1# ->
                          case >=# [i#_s4l2C 64#] of {
                            __DEFAULT ->
                                case uncheckedIShiftL# [x#_s4l2A i#_s4l2C] of sat_s4l2J {
                                  __DEFAULT ->
                                      case narrow16Int# [sat_s4l2J] of sat_s4l2K {
                                        __DEFAULT -> GHC.Int.I16# [sat_s4l2K];
                                      };
                                };
                            1# -> GHC.Int.$fBitsInt3;
                          };
                    };
              };
        };

GHC.Int.$fBitsInt16_$ccomplement :: GHC.Int.Int16 -> GHC.Int.Int16
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l2L]
        case ds_s4l2L of {
          GHC.Int.I16# x#_s4l2N [Occ=Once] ->
              case int2Word# [x#_s4l2N] of sat_s4l2O {
                __DEFAULT ->
                    case not# [sat_s4l2O] of sat_s4l2P {
                      __DEFAULT ->
                          case word2Int# [sat_s4l2P] of sat_s4l2Q {
                            __DEFAULT -> GHC.Int.I16# [sat_s4l2Q];
                          };
                    };
              };
        };

GHC.Int.$fBitsInt16_$cxor
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Int.Int16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l2R ds1_s4l2S]
        case ds_s4l2R of {
          GHC.Int.I16# x#_s4l2U [Occ=Once] ->
              case ds1_s4l2S of {
                GHC.Int.I16# y#_s4l2W [Occ=Once] ->
                    case int2Word# [y#_s4l2W] of sat_s4l2Y {
                      __DEFAULT ->
                          case int2Word# [x#_s4l2U] of sat_s4l2X {
                            __DEFAULT ->
                                case xor# [sat_s4l2X sat_s4l2Y] of sat_s4l2Z {
                                  __DEFAULT ->
                                      case word2Int# [sat_s4l2Z] of sat_s4l30 {
                                        __DEFAULT -> GHC.Int.I16# [sat_s4l30];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fBitsInt16_$c.|.
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Int.Int16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l31 ds1_s4l32]
        case ds_s4l31 of {
          GHC.Int.I16# x#_s4l34 [Occ=Once] ->
              case ds1_s4l32 of {
                GHC.Int.I16# y#_s4l36 [Occ=Once] ->
                    case int2Word# [y#_s4l36] of sat_s4l38 {
                      __DEFAULT ->
                          case int2Word# [x#_s4l34] of sat_s4l37 {
                            __DEFAULT ->
                                case or# [sat_s4l37 sat_s4l38] of sat_s4l39 {
                                  __DEFAULT ->
                                      case word2Int# [sat_s4l39] of sat_s4l3a {
                                        __DEFAULT -> GHC.Int.I16# [sat_s4l3a];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fBitsInt16_$c.&.
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Int.Int16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l3b ds1_s4l3c]
        case ds_s4l3b of {
          GHC.Int.I16# x#_s4l3e [Occ=Once] ->
              case ds1_s4l3c of {
                GHC.Int.I16# y#_s4l3g [Occ=Once] ->
                    case int2Word# [y#_s4l3g] of sat_s4l3i {
                      __DEFAULT ->
                          case int2Word# [x#_s4l3e] of sat_s4l3h {
                            __DEFAULT ->
                                case and# [sat_s4l3h sat_s4l3i] of sat_s4l3j {
                                  __DEFAULT ->
                                      case word2Int# [sat_s4l3j] of sat_s4l3k {
                                        __DEFAULT -> GHC.Int.I16# [sat_s4l3k];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fFiniteBitsInt16_$ccountTrailingZeros
  :: GHC.Int.Int16 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l3l]
        case ds_s4l3l of {
          GHC.Int.I16# x#_s4l3n [Occ=Once] ->
              case int2Word# [x#_s4l3n] of sat_s4l3o {
                __DEFAULT ->
                    case ctz16# [sat_s4l3o] of sat_s4l3p {
                      __DEFAULT ->
                          case word2Int# [sat_s4l3p] of sat_s4l3q {
                            __DEFAULT -> GHC.Types.I# [sat_s4l3q];
                          };
                    };
              };
        };

GHC.Int.$fFiniteBitsInt16_$ccountLeadingZeros
  :: GHC.Int.Int16 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l3r]
        case ds_s4l3r of {
          GHC.Int.I16# x#_s4l3t [Occ=Once] ->
              case int2Word# [x#_s4l3t] of sat_s4l3u {
                __DEFAULT ->
                    case clz16# [sat_s4l3u] of sat_s4l3v {
                      __DEFAULT ->
                          case word2Int# [sat_s4l3v] of sat_s4l3w {
                            __DEFAULT -> GHC.Types.I# [sat_s4l3w];
                          };
                    };
              };
        };

GHC.Int.$fBitsInt1 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [16#];

GHC.Int.$fBitsInt16_$cfiniteBitSize
  :: GHC.Int.Int16 -> GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>m, Unf=OtherCon []] =
    [] \r [ds_s4l3x] GHC.Int.$fBitsInt1;

GHC.Int.$fNumInt32_$cfromInteger
  :: GHC.Integer.Type.Integer -> GHC.Int.Int32
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [i_s4l3y]
        case GHC.Integer.Type.integerToInt i_s4l3y of wild_s4l3z {
          __DEFAULT ->
              case narrow32Int# [wild_s4l3z] of sat_s4l3A {
                __DEFAULT -> GHC.Int.I32# [sat_s4l3A];
              };
        };

GHC.Int.$fNumInt32_$cnegate :: GHC.Int.Int32 -> GHC.Int.Int32
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l3B]
        case ds_s4l3B of {
          GHC.Int.I32# x#_s4l3D [Occ=Once] ->
              case negateInt# [x#_s4l3D] of sat_s4l3E {
                __DEFAULT ->
                    case narrow32Int# [sat_s4l3E] of sat_s4l3F {
                      __DEFAULT -> GHC.Int.I32# [sat_s4l3F];
                    };
              };
        };

GHC.Int.$fNumInt32_$c*
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> GHC.Int.Int32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l3G ds1_s4l3H]
        case ds_s4l3G of {
          GHC.Int.I32# x#_s4l3J [Occ=Once] ->
              case ds1_s4l3H of {
                GHC.Int.I32# y#_s4l3L [Occ=Once] ->
                    case *# [x#_s4l3J y#_s4l3L] of sat_s4l3M {
                      __DEFAULT ->
                          case narrow32Int# [sat_s4l3M] of sat_s4l3N {
                            __DEFAULT -> GHC.Int.I32# [sat_s4l3N];
                          };
                    };
              };
        };

GHC.Int.$fNumInt32_$c-
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> GHC.Int.Int32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l3O ds1_s4l3P]
        case ds_s4l3O of {
          GHC.Int.I32# x#_s4l3R [Occ=Once] ->
              case ds1_s4l3P of {
                GHC.Int.I32# y#_s4l3T [Occ=Once] ->
                    case -# [x#_s4l3R y#_s4l3T] of sat_s4l3U {
                      __DEFAULT ->
                          case narrow32Int# [sat_s4l3U] of sat_s4l3V {
                            __DEFAULT -> GHC.Int.I32# [sat_s4l3V];
                          };
                    };
              };
        };

GHC.Int.$fNumInt32_$c+
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> GHC.Int.Int32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l3W ds1_s4l3X]
        case ds_s4l3W of {
          GHC.Int.I32# x#_s4l3Z [Occ=Once] ->
              case ds1_s4l3X of {
                GHC.Int.I32# y#_s4l41 [Occ=Once] ->
                    case +# [x#_s4l3Z y#_s4l41] of sat_s4l42 {
                      __DEFAULT ->
                          case narrow32Int# [sat_s4l42] of sat_s4l43 {
                            __DEFAULT -> GHC.Int.I32# [sat_s4l43];
                          };
                    };
              };
        };

GHC.Int.$fIntegralInt32_$ctoInteger
  :: GHC.Int.Int32 -> GHC.Integer.Type.Integer
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4l44]
        case ds_s4l44 of {
          GHC.Int.I32# x#_s4l46 [Occ=Once] ->
              GHC.Integer.Type.smallInteger x#_s4l46;
        };

GHC.Int.$fBitsInt32_$cpopCount :: GHC.Int.Int32 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l47]
        case ds_s4l47 of {
          GHC.Int.I32# x#_s4l49 [Occ=Once] ->
              case int2Word# [x#_s4l49] of sat_s4l4a {
                __DEFAULT ->
                    case popCnt32# [sat_s4l4a] of sat_s4l4b {
                      __DEFAULT ->
                          case word2Int# [sat_s4l4b] of sat_s4l4c {
                            __DEFAULT -> GHC.Types.I# [sat_s4l4c];
                          };
                    };
              };
        };

GHC.Int.$fBitsInt32_$cunsafeShiftR
  :: GHC.Int.Int32 -> GHC.Types.Int -> GHC.Int.Int32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l4d ds1_s4l4e]
        case ds_s4l4d of {
          GHC.Int.I32# x#_s4l4g [Occ=Once] ->
              case ds1_s4l4e of {
                GHC.Types.I# i#_s4l4i [Occ=Once] ->
                    case uncheckedIShiftRA# [x#_s4l4g i#_s4l4i] of sat_s4l4j {
                      __DEFAULT -> GHC.Int.I32# [sat_s4l4j];
                    };
              };
        };

GHC.Int.$fBitsInt6 :: GHC.Int.Int32
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I32#! [0#];

GHC.Int.$fNumInt4 :: GHC.Int.Int32
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I32#! [-1#];

GHC.Int.$fBitsInt32_$cshiftR [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int32 -> GHC.Types.Int -> GHC.Int.Int32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4l4k w1_s4l4l]
        case w_s4l4k of {
          GHC.Int.I32# ww1_s4l4n [Occ=Once*] ->
              case w1_s4l4l of {
                GHC.Types.I# ww3_s4l4p ->
                    case >=# [ww3_s4l4p 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftRA# [ww1_s4l4n ww3_s4l4p] of sat_s4l4r {
                            __DEFAULT -> GHC.Int.I32# [sat_s4l4r];
                          };
                      1# ->
                          case <# [ww1_s4l4n 0#] of {
                            __DEFAULT -> GHC.Int.$fBitsInt6;
                            1# -> GHC.Int.$fNumInt4;
                          };
                    };
              };
        };

GHC.Int.$fBitsInt32_$cunsafeShiftL
  :: GHC.Int.Int32 -> GHC.Types.Int -> GHC.Int.Int32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l4t ds1_s4l4u]
        case ds_s4l4t of {
          GHC.Int.I32# x#_s4l4w [Occ=Once] ->
              case ds1_s4l4u of {
                GHC.Types.I# i#_s4l4y [Occ=Once] ->
                    case uncheckedIShiftL# [x#_s4l4w i#_s4l4y] of sat_s4l4z {
                      __DEFAULT ->
                          case narrow32Int# [sat_s4l4z] of sat_s4l4A {
                            __DEFAULT -> GHC.Int.I32# [sat_s4l4A];
                          };
                    };
              };
        };

GHC.Int.$fBitsInt32_$cshiftL
  :: GHC.Int.Int32 -> GHC.Types.Int -> GHC.Int.Int32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l4B ds1_s4l4C]
        case ds_s4l4B of {
          GHC.Int.I32# x#_s4l4E [Occ=Once] ->
              case ds1_s4l4C of {
                GHC.Types.I# i#_s4l4G ->
                    case >=# [i#_s4l4G 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftL# [x#_s4l4E i#_s4l4G] of sat_s4l4I {
                            __DEFAULT ->
                                case narrow32Int# [sat_s4l4I] of sat_s4l4J {
                                  __DEFAULT -> GHC.Int.I32# [sat_s4l4J];
                                };
                          };
                      1# -> GHC.Int.$fBitsInt6;
                    };
              };
        };

GHC.Int.$fBitsInt32_$cisSigned :: GHC.Int.Int32 -> GHC.Types.Bool
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>, Unf=OtherCon []] =
    [] \r [ds_s4l4K] GHC.Types.True [];

GHC.Int.$fBitsInt32_$crotate
  :: GHC.Int.Int32 -> GHC.Types.Int -> GHC.Int.Int32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l4L ds1_s4l4M]
        case ds_s4l4L of wild_s4l4N {
          GHC.Int.I32# x#_s4l4O [Occ=Once] ->
              case ds1_s4l4M of {
                GHC.Types.I# i#_s4l4Q [Occ=Once] ->
                    case int2Word# [i#_s4l4Q] of sat_s4l4R {
                      __DEFAULT ->
                          case and# [sat_s4l4R 31##] of sat_s4l4S {
                            __DEFAULT ->
                                case word2Int# [sat_s4l4S] of wild2_s4l4T {
                                  __DEFAULT ->
                                      case int2Word# [x#_s4l4O] of sat_s4l4V {
                                        __DEFAULT ->
                                            case
                                                narrow32Word# [sat_s4l4V]
                                            of
                                            x'#_s4l4U [Dmd=<S,U>]
                                            { __DEFAULT ->
                                                  case -# [32# wild2_s4l4T] of sat_s4l4X {
                                                    __DEFAULT ->
                                                        case
                                                            uncheckedShiftRL# [x'#_s4l4U sat_s4l4X]
                                                        of
                                                        sat_s4l4Y
                                                        { __DEFAULT ->
                                                              case
                                                                  uncheckedShiftL# [x'#_s4l4U
                                                                                    wild2_s4l4T]
                                                              of
                                                              sat_s4l4W
                                                              { __DEFAULT ->
                                                                    case
                                                                        or# [sat_s4l4W sat_s4l4Y]
                                                                    of
                                                                    sat_s4l4Z
                                                                    { __DEFAULT ->
                                                                          case
                                                                              word2Int# [sat_s4l4Z]
                                                                          of
                                                                          sat_s4l50
                                                                          { __DEFAULT ->
                                                                                case
                                                                                    narrow32Int# [sat_s4l50]
                                                                                of
                                                                                sat_s4l51
                                                                                { __DEFAULT ->
                                                                                      GHC.Int.I32# [sat_s4l51];
                                                                                };
                                                                          };
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                  0# -> wild_s4l4N;
                                };
                          };
                    };
              };
        };

GHC.Int.$fBitsInt32_$cshift [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int32 -> GHC.Types.Int -> GHC.Int.Int32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l52 ds1_s4l53]
        case ds_s4l52 of {
          GHC.Int.I32# x#_s4l55 [Occ=Once*] ->
              case ds1_s4l53 of {
                GHC.Types.I# i#_s4l57 ->
                    case >=# [i#_s4l57 0#] of {
                      __DEFAULT ->
                          case negateInt# [i#_s4l57] of b_s4l59 [Dmd=<S,U>] {
                            __DEFAULT ->
                                case >=# [b_s4l59 64#] of {
                                  __DEFAULT ->
                                      case uncheckedIShiftRA# [x#_s4l55 b_s4l59] of sat_s4l5b {
                                        __DEFAULT -> GHC.Int.I32# [sat_s4l5b];
                                      };
                                  1# ->
                                      case <# [x#_s4l55 0#] of {
                                        __DEFAULT -> GHC.Int.$fBitsInt6;
                                        1# -> GHC.Int.$fNumInt4;
                                      };
                                };
                          };
                      1# ->
                          case >=# [i#_s4l57 64#] of {
                            __DEFAULT ->
                                case uncheckedIShiftL# [x#_s4l55 i#_s4l57] of sat_s4l5e {
                                  __DEFAULT ->
                                      case narrow32Int# [sat_s4l5e] of sat_s4l5f {
                                        __DEFAULT -> GHC.Int.I32# [sat_s4l5f];
                                      };
                                };
                            1# -> GHC.Int.$fBitsInt6;
                          };
                    };
              };
        };

GHC.Int.$fBitsInt32_$ccomplement :: GHC.Int.Int32 -> GHC.Int.Int32
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l5g]
        case ds_s4l5g of {
          GHC.Int.I32# x#_s4l5i [Occ=Once] ->
              case int2Word# [x#_s4l5i] of sat_s4l5j {
                __DEFAULT ->
                    case not# [sat_s4l5j] of sat_s4l5k {
                      __DEFAULT ->
                          case word2Int# [sat_s4l5k] of sat_s4l5l {
                            __DEFAULT -> GHC.Int.I32# [sat_s4l5l];
                          };
                    };
              };
        };

GHC.Int.$fBitsInt32_$cxor
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> GHC.Int.Int32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l5m ds1_s4l5n]
        case ds_s4l5m of {
          GHC.Int.I32# x#_s4l5p [Occ=Once] ->
              case ds1_s4l5n of {
                GHC.Int.I32# y#_s4l5r [Occ=Once] ->
                    case int2Word# [y#_s4l5r] of sat_s4l5t {
                      __DEFAULT ->
                          case int2Word# [x#_s4l5p] of sat_s4l5s {
                            __DEFAULT ->
                                case xor# [sat_s4l5s sat_s4l5t] of sat_s4l5u {
                                  __DEFAULT ->
                                      case word2Int# [sat_s4l5u] of sat_s4l5v {
                                        __DEFAULT -> GHC.Int.I32# [sat_s4l5v];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fBitsInt32_$c.|.
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> GHC.Int.Int32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l5w ds1_s4l5x]
        case ds_s4l5w of {
          GHC.Int.I32# x#_s4l5z [Occ=Once] ->
              case ds1_s4l5x of {
                GHC.Int.I32# y#_s4l5B [Occ=Once] ->
                    case int2Word# [y#_s4l5B] of sat_s4l5D {
                      __DEFAULT ->
                          case int2Word# [x#_s4l5z] of sat_s4l5C {
                            __DEFAULT ->
                                case or# [sat_s4l5C sat_s4l5D] of sat_s4l5E {
                                  __DEFAULT ->
                                      case word2Int# [sat_s4l5E] of sat_s4l5F {
                                        __DEFAULT -> GHC.Int.I32# [sat_s4l5F];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fBitsInt32_$c.&.
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> GHC.Int.Int32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l5G ds1_s4l5H]
        case ds_s4l5G of {
          GHC.Int.I32# x#_s4l5J [Occ=Once] ->
              case ds1_s4l5H of {
                GHC.Int.I32# y#_s4l5L [Occ=Once] ->
                    case int2Word# [y#_s4l5L] of sat_s4l5N {
                      __DEFAULT ->
                          case int2Word# [x#_s4l5J] of sat_s4l5M {
                            __DEFAULT ->
                                case and# [sat_s4l5M sat_s4l5N] of sat_s4l5O {
                                  __DEFAULT ->
                                      case word2Int# [sat_s4l5O] of sat_s4l5P {
                                        __DEFAULT -> GHC.Int.I32# [sat_s4l5P];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fFiniteBitsInt32_$ccountTrailingZeros
  :: GHC.Int.Int32 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l5Q]
        case ds_s4l5Q of {
          GHC.Int.I32# x#_s4l5S [Occ=Once] ->
              case int2Word# [x#_s4l5S] of sat_s4l5T {
                __DEFAULT ->
                    case ctz32# [sat_s4l5T] of sat_s4l5U {
                      __DEFAULT ->
                          case word2Int# [sat_s4l5U] of sat_s4l5V {
                            __DEFAULT -> GHC.Types.I# [sat_s4l5V];
                          };
                    };
              };
        };

GHC.Int.$fFiniteBitsInt32_$ccountLeadingZeros
  :: GHC.Int.Int32 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l5W]
        case ds_s4l5W of {
          GHC.Int.I32# x#_s4l5Y [Occ=Once] ->
              case int2Word# [x#_s4l5Y] of sat_s4l5Z {
                __DEFAULT ->
                    case clz32# [sat_s4l5Z] of sat_s4l60 {
                      __DEFAULT ->
                          case word2Int# [sat_s4l60] of sat_s4l61 {
                            __DEFAULT -> GHC.Types.I# [sat_s4l61];
                          };
                    };
              };
        };

GHC.Int.$fBitsInt4 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [32#];

GHC.Int.$fBitsInt32_$cfiniteBitSize
  :: GHC.Int.Int32 -> GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>m, Unf=OtherCon []] =
    [] \r [ds_s4l62] GHC.Int.$fBitsInt4;

GHC.Int.$fNumInt64_$cfromInteger
  :: GHC.Integer.Type.Integer -> GHC.Int.Int64
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [i_s4l63]
        case GHC.Integer.Type.integerToInt i_s4l63 of wild_s4l64 {
          __DEFAULT -> GHC.Int.I64# [wild_s4l64];
        };

GHC.Int.$fNumInt64_$cnegate :: GHC.Int.Int64 -> GHC.Int.Int64
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l65]
        case ds_s4l65 of {
          GHC.Int.I64# x#_s4l67 [Occ=Once] ->
              case negateInt# [x#_s4l67] of sat_s4l68 {
                __DEFAULT -> GHC.Int.I64# [sat_s4l68];
              };
        };

GHC.Int.$fNumInt64_$c*
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> GHC.Int.Int64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l69 ds1_s4l6a]
        case ds_s4l69 of {
          GHC.Int.I64# x#_s4l6c [Occ=Once] ->
              case ds1_s4l6a of {
                GHC.Int.I64# y#_s4l6e [Occ=Once] ->
                    case *# [x#_s4l6c y#_s4l6e] of sat_s4l6f {
                      __DEFAULT -> GHC.Int.I64# [sat_s4l6f];
                    };
              };
        };

GHC.Int.$fNumInt64_$c-
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> GHC.Int.Int64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l6g ds1_s4l6h]
        case ds_s4l6g of {
          GHC.Int.I64# x#_s4l6j [Occ=Once] ->
              case ds1_s4l6h of {
                GHC.Int.I64# y#_s4l6l [Occ=Once] ->
                    case -# [x#_s4l6j y#_s4l6l] of sat_s4l6m {
                      __DEFAULT -> GHC.Int.I64# [sat_s4l6m];
                    };
              };
        };

GHC.Int.$fNumInt64_$c+
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> GHC.Int.Int64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l6n ds1_s4l6o]
        case ds_s4l6n of {
          GHC.Int.I64# x#_s4l6q [Occ=Once] ->
              case ds1_s4l6o of {
                GHC.Int.I64# y#_s4l6s [Occ=Once] ->
                    case +# [x#_s4l6q y#_s4l6s] of sat_s4l6t {
                      __DEFAULT -> GHC.Int.I64# [sat_s4l6t];
                    };
              };
        };

GHC.Int.$fIntegralInt64_$ctoInteger
  :: GHC.Int.Int64 -> GHC.Integer.Type.Integer
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4l6u]
        case ds_s4l6u of {
          GHC.Int.I64# x#_s4l6w [Occ=Once] ->
              GHC.Integer.Type.smallInteger x#_s4l6w;
        };

GHC.Int.$fBitsInt64_$cpopCount :: GHC.Int.Int64 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l6x]
        case ds_s4l6x of {
          GHC.Int.I64# x#_s4l6z [Occ=Once] ->
              case int2Word# [x#_s4l6z] of sat_s4l6A {
                __DEFAULT ->
                    case popCnt64# [sat_s4l6A] of sat_s4l6B {
                      __DEFAULT ->
                          case word2Int# [sat_s4l6B] of sat_s4l6C {
                            __DEFAULT -> GHC.Types.I# [sat_s4l6C];
                          };
                    };
              };
        };

GHC.Int.$fBitsInt64_$cunsafeShiftR
  :: GHC.Int.Int64 -> GHC.Types.Int -> GHC.Int.Int64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l6D ds1_s4l6E]
        case ds_s4l6D of {
          GHC.Int.I64# x#_s4l6G [Occ=Once] ->
              case ds1_s4l6E of {
                GHC.Types.I# i#_s4l6I [Occ=Once] ->
                    case uncheckedIShiftRA# [x#_s4l6G i#_s4l6I] of sat_s4l6J {
                      __DEFAULT -> GHC.Int.I64# [sat_s4l6J];
                    };
              };
        };

GHC.Int.$fBitsInt10 :: GHC.Int.Int64
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I64#! [0#];

GHC.Int.$fNumInt6 :: GHC.Int.Int64
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I64#! [-1#];

GHC.Int.$fBitsInt64_$cshiftR [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int64 -> GHC.Types.Int -> GHC.Int.Int64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4l6K w1_s4l6L]
        case w_s4l6K of {
          GHC.Int.I64# ww1_s4l6N [Occ=Once*] ->
              case w1_s4l6L of {
                GHC.Types.I# ww3_s4l6P ->
                    case >=# [ww3_s4l6P 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftRA# [ww1_s4l6N ww3_s4l6P] of sat_s4l6R {
                            __DEFAULT -> GHC.Int.I64# [sat_s4l6R];
                          };
                      1# ->
                          case <# [ww1_s4l6N 0#] of {
                            __DEFAULT -> GHC.Int.$fBitsInt10;
                            1# -> GHC.Int.$fNumInt6;
                          };
                    };
              };
        };

GHC.Int.$fBitsInt64_$cunsafeShiftL
  :: GHC.Int.Int64 -> GHC.Types.Int -> GHC.Int.Int64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l6T ds1_s4l6U]
        case ds_s4l6T of {
          GHC.Int.I64# x#_s4l6W [Occ=Once] ->
              case ds1_s4l6U of {
                GHC.Types.I# i#_s4l6Y [Occ=Once] ->
                    case uncheckedIShiftL# [x#_s4l6W i#_s4l6Y] of sat_s4l6Z {
                      __DEFAULT -> GHC.Int.I64# [sat_s4l6Z];
                    };
              };
        };

GHC.Int.$fBitsInt64_$cshiftL
  :: GHC.Int.Int64 -> GHC.Types.Int -> GHC.Int.Int64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l70 ds1_s4l71]
        case ds_s4l70 of {
          GHC.Int.I64# x#_s4l73 [Occ=Once] ->
              case ds1_s4l71 of {
                GHC.Types.I# i#_s4l75 ->
                    case >=# [i#_s4l75 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftL# [x#_s4l73 i#_s4l75] of sat_s4l77 {
                            __DEFAULT -> GHC.Int.I64# [sat_s4l77];
                          };
                      1# -> GHC.Int.$fBitsInt10;
                    };
              };
        };

GHC.Int.$fBitsInt64_$cisSigned :: GHC.Int.Int64 -> GHC.Types.Bool
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>, Unf=OtherCon []] =
    [] \r [ds_s4l78] GHC.Types.True [];

GHC.Int.$fBitsInt64_$crotate
  :: GHC.Int.Int64 -> GHC.Types.Int -> GHC.Int.Int64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l79 ds1_s4l7a]
        case ds_s4l79 of wild_s4l7b {
          GHC.Int.I64# x#_s4l7c [Occ=Once] ->
              case ds1_s4l7a of {
                GHC.Types.I# i#_s4l7e [Occ=Once] ->
                    case int2Word# [i#_s4l7e] of sat_s4l7f {
                      __DEFAULT ->
                          case and# [sat_s4l7f 63##] of sat_s4l7g {
                            __DEFAULT ->
                                case word2Int# [sat_s4l7g] of wild2_s4l7h {
                                  __DEFAULT ->
                                      case int2Word# [x#_s4l7c] of x'#_s4l7i [Dmd=<S,U>] {
                                        __DEFAULT ->
                                            case -# [64# wild2_s4l7h] of sat_s4l7k {
                                              __DEFAULT ->
                                                  case
                                                      uncheckedShiftRL# [x'#_s4l7i sat_s4l7k]
                                                  of
                                                  sat_s4l7l
                                                  { __DEFAULT ->
                                                        case
                                                            uncheckedShiftL# [x'#_s4l7i wild2_s4l7h]
                                                        of
                                                        sat_s4l7j
                                                        { __DEFAULT ->
                                                              case
                                                                  or# [sat_s4l7j sat_s4l7l]
                                                              of
                                                              sat_s4l7m
                                                              { __DEFAULT ->
                                                                    case
                                                                        word2Int# [sat_s4l7m]
                                                                    of
                                                                    sat_s4l7n
                                                                    { __DEFAULT ->
                                                                          GHC.Int.I64# [sat_s4l7n];
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                  0# -> wild_s4l7b;
                                };
                          };
                    };
              };
        };

GHC.Int.$fBitsInt64_$cshift [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int64 -> GHC.Types.Int -> GHC.Int.Int64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l7o ds1_s4l7p]
        case ds_s4l7o of {
          GHC.Int.I64# x#_s4l7r [Occ=Once*] ->
              case ds1_s4l7p of {
                GHC.Types.I# i#_s4l7t ->
                    case >=# [i#_s4l7t 0#] of {
                      __DEFAULT ->
                          case negateInt# [i#_s4l7t] of b_s4l7v [Dmd=<S,U>] {
                            __DEFAULT ->
                                case >=# [b_s4l7v 64#] of {
                                  __DEFAULT ->
                                      case uncheckedIShiftRA# [x#_s4l7r b_s4l7v] of sat_s4l7x {
                                        __DEFAULT -> GHC.Int.I64# [sat_s4l7x];
                                      };
                                  1# ->
                                      case <# [x#_s4l7r 0#] of {
                                        __DEFAULT -> GHC.Int.$fBitsInt10;
                                        1# -> GHC.Int.$fNumInt6;
                                      };
                                };
                          };
                      1# ->
                          case >=# [i#_s4l7t 64#] of {
                            __DEFAULT ->
                                case uncheckedIShiftL# [x#_s4l7r i#_s4l7t] of sat_s4l7A {
                                  __DEFAULT -> GHC.Int.I64# [sat_s4l7A];
                                };
                            1# -> GHC.Int.$fBitsInt10;
                          };
                    };
              };
        };

GHC.Int.$fBitsInt64_$ccomplement :: GHC.Int.Int64 -> GHC.Int.Int64
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l7B]
        case ds_s4l7B of {
          GHC.Int.I64# x#_s4l7D [Occ=Once] ->
              case int2Word# [x#_s4l7D] of sat_s4l7E {
                __DEFAULT ->
                    case xor# [sat_s4l7E 18446744073709551615##] of sat_s4l7F {
                      __DEFAULT ->
                          case word2Int# [sat_s4l7F] of sat_s4l7G {
                            __DEFAULT -> GHC.Int.I64# [sat_s4l7G];
                          };
                    };
              };
        };

GHC.Int.$fBitsInt64_$cxor
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> GHC.Int.Int64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l7H ds1_s4l7I]
        case ds_s4l7H of {
          GHC.Int.I64# x#_s4l7K [Occ=Once] ->
              case ds1_s4l7I of {
                GHC.Int.I64# y#_s4l7M [Occ=Once] ->
                    case int2Word# [y#_s4l7M] of sat_s4l7O {
                      __DEFAULT ->
                          case int2Word# [x#_s4l7K] of sat_s4l7N {
                            __DEFAULT ->
                                case xor# [sat_s4l7N sat_s4l7O] of sat_s4l7P {
                                  __DEFAULT ->
                                      case word2Int# [sat_s4l7P] of sat_s4l7Q {
                                        __DEFAULT -> GHC.Int.I64# [sat_s4l7Q];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fBitsInt64_$c.|.
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> GHC.Int.Int64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l7R ds1_s4l7S]
        case ds_s4l7R of {
          GHC.Int.I64# x#_s4l7U [Occ=Once] ->
              case ds1_s4l7S of {
                GHC.Int.I64# y#_s4l7W [Occ=Once] ->
                    case int2Word# [y#_s4l7W] of sat_s4l7Y {
                      __DEFAULT ->
                          case int2Word# [x#_s4l7U] of sat_s4l7X {
                            __DEFAULT ->
                                case or# [sat_s4l7X sat_s4l7Y] of sat_s4l7Z {
                                  __DEFAULT ->
                                      case word2Int# [sat_s4l7Z] of sat_s4l80 {
                                        __DEFAULT -> GHC.Int.I64# [sat_s4l80];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fBitsInt64_$c.&.
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> GHC.Int.Int64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l81 ds1_s4l82]
        case ds_s4l81 of {
          GHC.Int.I64# x#_s4l84 [Occ=Once] ->
              case ds1_s4l82 of {
                GHC.Int.I64# y#_s4l86 [Occ=Once] ->
                    case int2Word# [y#_s4l86] of sat_s4l88 {
                      __DEFAULT ->
                          case int2Word# [x#_s4l84] of sat_s4l87 {
                            __DEFAULT ->
                                case and# [sat_s4l87 sat_s4l88] of sat_s4l89 {
                                  __DEFAULT ->
                                      case word2Int# [sat_s4l89] of sat_s4l8a {
                                        __DEFAULT -> GHC.Int.I64# [sat_s4l8a];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fFiniteBitsInt64_$ccountTrailingZeros
  :: GHC.Int.Int64 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l8b]
        case ds_s4l8b of {
          GHC.Int.I64# x#_s4l8d [Occ=Once] ->
              case int2Word# [x#_s4l8d] of sat_s4l8e {
                __DEFAULT ->
                    case ctz64# [sat_s4l8e] of sat_s4l8f {
                      __DEFAULT ->
                          case word2Int# [sat_s4l8f] of sat_s4l8g {
                            __DEFAULT -> GHC.Types.I# [sat_s4l8g];
                          };
                    };
              };
        };

GHC.Int.$fFiniteBitsInt64_$ccountLeadingZeros
  :: GHC.Int.Int64 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l8h]
        case ds_s4l8h of {
          GHC.Int.I64# x#_s4l8j [Occ=Once] ->
              case int2Word# [x#_s4l8j] of sat_s4l8k {
                __DEFAULT ->
                    case clz64# [sat_s4l8k] of sat_s4l8l {
                      __DEFAULT ->
                          case word2Int# [sat_s4l8l] of sat_s4l8m {
                            __DEFAULT -> GHC.Types.I# [sat_s4l8m];
                          };
                    };
              };
        };

GHC.Int.$fBitsInt7 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [64#];

GHC.Int.$fBitsInt64_$cfiniteBitSize
  :: GHC.Int.Int64 -> GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>m, Unf=OtherCon []] =
    [] \r [ds_s4l8n] GHC.Int.$fBitsInt7;

GHC.Int.eqInt8 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4l8o ds1_s4l8p]
        case ds_s4l8o of {
          GHC.Int.I8# x_s4l8r [Occ=Once] ->
              case ds1_s4l8p of {
                GHC.Int.I8# y_s4l8t [Occ=Once] ->
                    case ==# [x_s4l8r y_s4l8t] of sat_s4l8u {
                      __DEFAULT -> tagToEnum# [sat_s4l8u];
                    };
              };
        };

GHC.Int.$fEqInt8 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.Int.Int8
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.Int.eqInt8 GHC.Int.neInt8];

GHC.Int.gtInt8 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4l8v ds1_s4l8w]
        case ds_s4l8v of {
          GHC.Int.I8# x_s4l8y [Occ=Once] ->
              case ds1_s4l8w of {
                GHC.Int.I8# y_s4l8A [Occ=Once] ->
                    case ># [x_s4l8y y_s4l8A] of sat_s4l8B {
                      __DEFAULT -> tagToEnum# [sat_s4l8B];
                    };
              };
        };

GHC.Int.geInt8 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4l8C ds1_s4l8D]
        case ds_s4l8C of {
          GHC.Int.I8# x_s4l8F [Occ=Once] ->
              case ds1_s4l8D of {
                GHC.Int.I8# y_s4l8H [Occ=Once] ->
                    case >=# [x_s4l8F y_s4l8H] of sat_s4l8I {
                      __DEFAULT -> tagToEnum# [sat_s4l8I];
                    };
              };
        };

GHC.Int.ltInt8 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4l8J ds1_s4l8K]
        case ds_s4l8J of {
          GHC.Int.I8# x_s4l8M [Occ=Once] ->
              case ds1_s4l8K of {
                GHC.Int.I8# y_s4l8O [Occ=Once] ->
                    case <# [x_s4l8M y_s4l8O] of sat_s4l8P {
                      __DEFAULT -> tagToEnum# [sat_s4l8P];
                    };
              };
        };

GHC.Int.leInt8 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4l8Q ds1_s4l8R]
        case ds_s4l8Q of {
          GHC.Int.I8# x_s4l8T [Occ=Once] ->
              case ds1_s4l8R of {
                GHC.Int.I8# y_s4l8V [Occ=Once] ->
                    case <=# [x_s4l8T y_s4l8V] of sat_s4l8W {
                      __DEFAULT -> tagToEnum# [sat_s4l8W];
                    };
              };
        };

GHC.Int.$fOrdInt8_$ccompare
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [x_s4l8X y_s4l8Y]
        case x_s4l8X of {
          GHC.Int.I8# x1_s4l90 ->
              case y_s4l8Y of {
                GHC.Int.I8# y1_s4l92 ->
                    case ==# [x1_s4l90 y1_s4l92] of {
                      __DEFAULT ->
                          case <=# [x1_s4l90 y1_s4l92] of {
                            __DEFAULT -> GHC.Types.GT [];
                            1# -> GHC.Types.LT [];
                          };
                      1# -> GHC.Types.EQ [];
                    };
              };
        };

GHC.Int.$fOrdInt8_$cmax
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> GHC.Int.Int8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s4l95 y_s4l96]
        case x_s4l95 of wild_s4l97 {
          GHC.Int.I8# x1_s4l98 [Occ=Once] ->
              case y_s4l96 of wild1_s4l99 {
                GHC.Int.I8# y1_s4l9a [Occ=Once] ->
                    case <=# [x1_s4l98 y1_s4l9a] of {
                      __DEFAULT -> wild_s4l97;
                      1# -> wild1_s4l99;
                    };
              };
        };

GHC.Int.$fOrdInt8_$cmin
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> GHC.Int.Int8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s4l9c y_s4l9d]
        case x_s4l9c of wild_s4l9e {
          GHC.Int.I8# x1_s4l9f [Occ=Once] ->
              case y_s4l9d of wild1_s4l9g {
                GHC.Int.I8# y1_s4l9h [Occ=Once] ->
                    case <=# [x1_s4l9f y1_s4l9h] of {
                      __DEFAULT -> wild1_s4l9g;
                      1# -> wild_s4l9e;
                    };
              };
        };

GHC.Int.$fOrdInt8 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord GHC.Int.Int8
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.Int.$fEqInt8
                                      GHC.Int.$fOrdInt8_$ccompare
                                      GHC.Int.ltInt8
                                      GHC.Int.leInt8
                                      GHC.Int.gtInt8
                                      GHC.Int.geInt8
                                      GHC.Int.$fOrdInt8_$cmax
                                      GHC.Int.$fOrdInt8_$cmin];

GHC.Int.$fIxInt8_$cinRange
  :: (GHC.Int.Int8, GHC.Int.Int8) -> GHC.Int.Int8 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S(S)L),1*U(1*U(U),1*U(U))><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4l9j i_s4l9k]
        case ds_s4l9j of {
          (,) m_s4l9m [Occ=Once!] n_s4l9n [Occ=Once!] ->
              case m_s4l9m of {
                GHC.Int.I8# x_s4l9p [Occ=Once] ->
                    case i_s4l9k of {
                      GHC.Int.I8# y_s4l9r ->
                          case <=# [x_s4l9p y_s4l9r] of {
                            __DEFAULT -> GHC.Types.False [];
                            1# ->
                                case n_s4l9n of {
                                  GHC.Int.I8# y1_s4l9u [Occ=Once] ->
                                      case <=# [y_s4l9r y1_s4l9u] of sat_s4l9v {
                                        __DEFAULT -> tagToEnum# [sat_s4l9v];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fNumInt7 :: GHC.Int.Int8
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I8#! [1#];

GHC.Int.$fNumInt8_$csignum :: GHC.Int.Int8 -> GHC.Int.Int8
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s4l9w]
        case x_s4l9w of {
          GHC.Int.I8# x1_s4l9y ->
              case ># [x1_s4l9y 0#] of {
                __DEFAULT ->
                    case x1_s4l9y of {
                      __DEFAULT -> GHC.Int.$fNumInt9;
                      0# -> GHC.Int.$fBitsInt13;
                    };
                1# -> GHC.Int.$fNumInt7;
              };
        };

GHC.Int.$fNumInt8_$cabs :: GHC.Int.Int8 -> GHC.Int.Int8
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s4l9B]
        case x_s4l9B of wild_s4l9C {
          GHC.Int.I8# x1_s4l9D ->
              case >=# [x1_s4l9D 0#] of {
                __DEFAULT ->
                    case negateInt# [x1_s4l9D] of sat_s4l9F {
                      __DEFAULT ->
                          case narrow8Int# [sat_s4l9F] of sat_s4l9G {
                            __DEFAULT -> GHC.Int.I8# [sat_s4l9G];
                          };
                    };
                1# -> wild_s4l9C;
              };
        };

GHC.Int.$fNumInt8 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Num.Num GHC.Int.Int8
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Num.C:Num! [GHC.Int.$fNumInt8_$c+
                                  GHC.Int.$fNumInt8_$c-
                                  GHC.Int.$fNumInt8_$c*
                                  GHC.Int.$fNumInt8_$cnegate
                                  GHC.Int.$fNumInt8_$cabs
                                  GHC.Int.$fNumInt8_$csignum
                                  GHC.Int.$fNumInt8_$cfromInteger];

GHC.Int.$fBitsInt12 :: GHC.Base.Maybe GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [GHC.Int.$fBitsInt11];

GHC.Int.$fBitsInt8_$cbitSizeMaybe
  :: GHC.Int.Int8 -> GHC.Base.Maybe GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>m2, Unf=OtherCon []] =
    [] \r [i_s4l9H] GHC.Int.$fBitsInt12;

GHC.Int.$fBitsInt8_$cbit [InlPrag=INLINE (sat-args=0)]
  :: GHC.Types.Int -> GHC.Int.Int8
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [i_s4l9I]
        case i_s4l9I of {
          GHC.Types.I# i#_s4l9K ->
              case >=# [i#_s4l9K 64#] of {
                __DEFAULT ->
                    case uncheckedIShiftL# [1# i#_s4l9K] of sat_s4l9M {
                      __DEFAULT ->
                          case narrow8Int# [sat_s4l9M] of sat_s4l9N {
                            __DEFAULT -> GHC.Int.I8# [sat_s4l9N];
                          };
                    };
                1# -> GHC.Int.$fBitsInt13;
              };
        };

GHC.Int.$fBitsInt8_$ctestBit [InlPrag=INLINE (sat-args=0)]
  :: GHC.Int.Int8 -> GHC.Types.Int -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [x_s4l9O i_s4l9P]
        case x_s4l9O of {
          GHC.Int.I8# x#_s4l9R [Occ=Once] ->
              case i_s4l9P of {
                GHC.Types.I# i#_s4l9T ->
                    case >=# [i#_s4l9T 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftL# [1# i#_s4l9T] of sat_s4l9W {
                            __DEFAULT ->
                                case narrow8Int# [sat_s4l9W] of sat_s4l9X {
                                  __DEFAULT ->
                                      case int2Word# [sat_s4l9X] of sat_s4l9Y {
                                        __DEFAULT ->
                                            case int2Word# [x#_s4l9R] of sat_s4l9V {
                                              __DEFAULT ->
                                                  case and# [sat_s4l9V sat_s4l9Y] of sat_s4l9Z {
                                                    __DEFAULT ->
                                                        case word2Int# [sat_s4l9Z] of {
                                                          __DEFAULT -> GHC.Types.True [];
                                                          0# -> GHC.Types.False [];
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                      1# -> GHC.Types.False [];
                    };
              };
        };

GHC.Int.$fBitsInt8_$crotateR [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int8 -> GHC.Types.Int -> GHC.Int.Int8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s4la1 eta1_s4la2]
        case eta_s4la1 of wild_s4la3 {
          GHC.Int.I8# x#_s4la4 [Occ=Once] ->
              case eta1_s4la2 of {
                GHC.Types.I# x1_s4la6 [Occ=Once] ->
                    case negateInt# [x1_s4la6] of sat_s4la7 {
                      __DEFAULT ->
                          case int2Word# [sat_s4la7] of sat_s4la8 {
                            __DEFAULT ->
                                case and# [sat_s4la8 7##] of sat_s4la9 {
                                  __DEFAULT ->
                                      case word2Int# [sat_s4la9] of wild2_s4laa {
                                        __DEFAULT ->
                                            case int2Word# [x#_s4la4] of sat_s4lac {
                                              __DEFAULT ->
                                                  case
                                                      narrow8Word# [sat_s4lac]
                                                  of
                                                  x'#_s4lab [Dmd=<S,U>]
                                                  { __DEFAULT ->
                                                        case -# [8# wild2_s4laa] of sat_s4lae {
                                                          __DEFAULT ->
                                                              case
                                                                  uncheckedShiftRL# [x'#_s4lab
                                                                                     sat_s4lae]
                                                              of
                                                              sat_s4laf
                                                              { __DEFAULT ->
                                                                    case
                                                                        uncheckedShiftL# [x'#_s4lab
                                                                                          wild2_s4laa]
                                                                    of
                                                                    sat_s4lad
                                                                    { __DEFAULT ->
                                                                          case
                                                                              or# [sat_s4lad
                                                                                   sat_s4laf]
                                                                          of
                                                                          sat_s4lag
                                                                          { __DEFAULT ->
                                                                                case
                                                                                    word2Int# [sat_s4lag]
                                                                                of
                                                                                sat_s4lah
                                                                                { __DEFAULT ->
                                                                                      case
                                                                                          narrow8Int# [sat_s4lah]
                                                                                      of
                                                                                      sat_s4lai
                                                                                      { __DEFAULT ->
                                                                                            GHC.Int.I8# [sat_s4lai];
                                                                                      };
                                                                                };
                                                                          };
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                        0# -> wild_s4la3;
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fBitsInt8_$ccomplementBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int8 -> GHC.Types.Int -> GHC.Int.Int8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s4laj eta1_s4lak]
        case eta_s4laj of wild_s4lal {
          GHC.Int.I8# x#_s4lam [Occ=Once] ->
              case eta1_s4lak of {
                GHC.Types.I# i#_s4lao ->
                    case >=# [i#_s4lao 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftL# [1# i#_s4lao] of sat_s4lar {
                            __DEFAULT ->
                                case narrow8Int# [sat_s4lar] of sat_s4las {
                                  __DEFAULT ->
                                      case int2Word# [sat_s4las] of sat_s4lat {
                                        __DEFAULT ->
                                            case int2Word# [x#_s4lam] of sat_s4laq {
                                              __DEFAULT ->
                                                  case xor# [sat_s4laq sat_s4lat] of sat_s4lau {
                                                    __DEFAULT ->
                                                        case word2Int# [sat_s4lau] of sat_s4lav {
                                                          __DEFAULT -> GHC.Int.I8# [sat_s4lav];
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                      1# -> wild_s4lal;
                    };
              };
        };

GHC.Int.$fBitsInt8_$cclearBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int8 -> GHC.Types.Int -> GHC.Int.Int8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s4law eta1_s4lax]
        case eta_s4law of {
          GHC.Int.I8# x#_s4laz [Occ=Once*] ->
              case eta1_s4lax of {
                GHC.Types.I# i#_s4laB ->
                    case >=# [i#_s4laB 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftL# [1# i#_s4laB] of sat_s4laE {
                            __DEFAULT ->
                                case narrow8Int# [sat_s4laE] of sat_s4laF {
                                  __DEFAULT ->
                                      case int2Word# [sat_s4laF] of sat_s4laG {
                                        __DEFAULT ->
                                            case not# [sat_s4laG] of sat_s4laH {
                                              __DEFAULT ->
                                                  case int2Word# [x#_s4laz] of sat_s4laD {
                                                    __DEFAULT ->
                                                        case
                                                            and# [sat_s4laD sat_s4laH]
                                                        of
                                                        sat_s4laI
                                                        { __DEFAULT ->
                                                              case
                                                                  word2Int# [sat_s4laI]
                                                              of
                                                              sat_s4laJ
                                                              { __DEFAULT ->
                                                                    GHC.Int.I8# [sat_s4laJ];
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                      1# ->
                          case int2Word# [x#_s4laz] of sat_s4laK {
                            __DEFAULT ->
                                case and# [sat_s4laK 18446744073709551615##] of sat_s4laL {
                                  __DEFAULT ->
                                      case word2Int# [sat_s4laL] of sat_s4laM {
                                        __DEFAULT -> GHC.Int.I8# [sat_s4laM];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fBitsInt8_$csetBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int8 -> GHC.Types.Int -> GHC.Int.Int8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s4laN eta1_s4laO]
        case eta_s4laN of wild_s4laP {
          GHC.Int.I8# x#_s4laQ [Occ=Once] ->
              case eta1_s4laO of {
                GHC.Types.I# i#_s4laS ->
                    case >=# [i#_s4laS 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftL# [1# i#_s4laS] of sat_s4laV {
                            __DEFAULT ->
                                case narrow8Int# [sat_s4laV] of sat_s4laW {
                                  __DEFAULT ->
                                      case int2Word# [sat_s4laW] of sat_s4laX {
                                        __DEFAULT ->
                                            case int2Word# [x#_s4laQ] of sat_s4laU {
                                              __DEFAULT ->
                                                  case or# [sat_s4laU sat_s4laX] of sat_s4laY {
                                                    __DEFAULT ->
                                                        case word2Int# [sat_s4laY] of sat_s4laZ {
                                                          __DEFAULT -> GHC.Int.I8# [sat_s4laZ];
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                      1# -> wild_s4laP;
                    };
              };
        };

GHC.Int.$fBitsInt8_$crotateL [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int8 -> GHC.Types.Int -> GHC.Int.Int8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Int.$fBitsInt8_$crotate eta_B2 eta_B1;

GHC.Int.$fBitsInt8 [InlPrag=NOUSERINLINE CONLIKE]
  :: Data.Bits.Bits GHC.Int.Int8
[GblId[DFunId], Caf=NoCafRefs] =
    CCS_DONT_CARE Data.Bits.C:Bits! [GHC.Int.$fEqInt8
                                     GHC.Int.$fBitsInt8_$c.&.
                                     GHC.Int.$fBitsInt8_$c.|.
                                     GHC.Int.$fBitsInt8_$cxor
                                     GHC.Int.$fBitsInt8_$ccomplement
                                     GHC.Int.$fBitsInt8_$cshift
                                     GHC.Int.$fBitsInt8_$crotate
                                     GHC.Int.$fBitsInt13
                                     GHC.Int.$fBitsInt8_$cbit
                                     GHC.Int.$fBitsInt8_$csetBit
                                     GHC.Int.$fBitsInt8_$cclearBit
                                     GHC.Int.$fBitsInt8_$ccomplementBit
                                     GHC.Int.$fBitsInt8_$ctestBit
                                     GHC.Int.$fBitsInt8_$cbitSizeMaybe
                                     GHC.Int.$fBitsInt8_$cfiniteBitSize
                                     GHC.Int.$fBitsInt8_$cisSigned
                                     GHC.Int.$fBitsInt8_$cshiftL
                                     GHC.Int.$fBitsInt8_$cunsafeShiftL
                                     GHC.Int.$fBitsInt8_$cshiftR
                                     GHC.Int.$fBitsInt8_$cunsafeShiftR
                                     GHC.Int.$fBitsInt8_$crotateL
                                     GHC.Int.$fBitsInt8_$crotateR
                                     GHC.Int.$fBitsInt8_$cpopCount];

GHC.Int.$fFiniteBitsInt8 [InlPrag=NOUSERINLINE CONLIKE]
  :: Data.Bits.FiniteBits GHC.Int.Int8
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE Data.Bits.C:FiniteBits! [GHC.Int.$fBitsInt8
                                           GHC.Int.$fBitsInt8_$cfiniteBitSize
                                           GHC.Int.$fFiniteBitsInt8_$ccountLeadingZeros
                                           GHC.Int.$fFiniteBitsInt8_$ccountTrailingZeros];

GHC.Int.$fReadInt8_go [Occ=LoopBreaker]
  :: [(GHC.Types.Int, GHC.Base.String)]
     -> [(GHC.Int.Int8, GHC.Base.String)]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s4lb0]
        case ds_s4lb0 of {
          [] -> [] [];
          : y_s4lb2 [Occ=Once!] ys_s4lb3 [Occ=Once] ->
              case y_s4lb2 of {
                (,) x_s4lb5 [Occ=Once!] r_s4lb6 [Occ=Once] ->
                    let {
                      sat_s4lbc [Occ=Once] :: [(GHC.Int.Int8, GHC.Base.String)]
                      [LclId] =
                          [ys_s4lb3] \u [] GHC.Int.$fReadInt8_go ys_s4lb3; } in
                    let {
                      sat_s4lba [Occ=Once] :: GHC.Int.Int8
                      [LclId] =
                          [x_s4lb5] \u []
                              case x_s4lb5 of {
                                GHC.Types.I# x#_s4lb8 [Occ=Once] ->
                                    case narrow8Int# [x#_s4lb8] of sat_s4lb9 {
                                      __DEFAULT -> GHC.Int.I8# [sat_s4lb9];
                                    };
                              }; } in
                    let {
                      sat_s4lbb [Occ=Once] :: (GHC.Int.Int8, GHC.Base.String)
                      [LclId] =
                          CCCS (,)! [sat_s4lba r_s4lb6];
                    } in  : [sat_s4lbb sat_s4lbc];
              };
        };

GHC.Int.$fReadInt8_$creadsPrec
  :: GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS GHC.Int.Int8
[GblId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [p_s4lbd s_s4lbe]
        case
            GHC.Read.$fReadInt_$sreadNumber
                GHC.Read.$fReadInt2
                p_s4lbd
                Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
        of
        sat_s4lbf
        { __DEFAULT ->
              case
                  Text.ParserCombinators.ReadP.run sat_s4lbf s_s4lbe
              of
              sat_s4lbg
              { __DEFAULT -> GHC.Int.$fReadInt8_go sat_s4lbg;
              };
        };

GHC.Int.$fReadInt13
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Int.Int8 -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,U><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [n_s4lbh eta_s4lbi]
        let {
          sat_s4lbj [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS GHC.Int.Int8
          [LclId] =
              [n_s4lbh] \r [eta_B1]
                  GHC.Int.$fReadInt8_$creadsPrec n_s4lbh eta_B1;
        } in 
          case
              Text.ParserCombinators.ReadP.$wreadS_to_P sat_s4lbj eta_s4lbi
          of
          { Unit# ww1_s4lbl [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s4lbl];
          };

GHC.Int.$fIxInt1 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

GHC.Int.$fReadInt12
  :: Text.ParserCombinators.ReadP.P [GHC.Int.Int8]
[GblId] =
    [] \u []
        GHC.Read.list
            GHC.Int.$fReadInt13
            GHC.Int.$fIxInt1
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Int.$fReadInt8_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.Int.Int8]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Int.$fReadInt12 eta_B1;

GHC.Int.$fReadInt11
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        ([GHC.Int.Int8] -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,A><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [n_s4lbm w1_s4lbn]
        case
            Text.ParserCombinators.ReadP.$wreadS_to_P
                GHC.Int.$fReadInt8_$creadList w1_s4lbn
        of
        { Unit# ww1_s4lbp [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s4lbp];
        };

GHC.Int.$fReadInt8 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.Int.Int8
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Int.$fReadInt8_$creadsPrec
                                    GHC.Int.$fReadInt8_$creadList
                                    GHC.Int.$fReadInt13
                                    GHC.Int.$fReadInt11];

GHC.Int.$fIntegralInt8_$cquot [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> GHC.Int.Int8
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4lbq w1_s4lbr]
        case w_s4lbq of {
          GHC.Int.I8# ww1_s4lbt [Occ=Once*] ->
              case w1_s4lbr of {
                GHC.Int.I8# ww3_s4lbv [Occ=Once!] ->
                    case ww3_s4lbv of wild_s4lbw {
                      __DEFAULT ->
                          case quotInt# [ww1_s4lbt wild_s4lbw] of wild1_s4lbx {
                            __DEFAULT ->
                                case narrow8Int# [wild1_s4lbx] of sat_s4lby {
                                  __DEFAULT -> GHC.Int.I8# [sat_s4lby];
                                };
                          };
                      -1# ->
                          case ww1_s4lbt of wild1_s4lbz {
                            __DEFAULT ->
                                case quotInt# [wild1_s4lbz -1#] of sat_s4lbA {
                                  __DEFAULT ->
                                      case narrow8Int# [sat_s4lbA] of sat_s4lbB {
                                        __DEFAULT -> GHC.Int.I8# [sat_s4lbB];
                                      };
                                };
                            -128# -> GHC.Real.overflowError;
                          };
                      0# -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Int.$fIntegralInt8_$crem
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> GHC.Int.Int8
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4lbE y_s4lbF]
        case ds_s4lbE of {
          GHC.Int.I8# x#_s4lbH [Occ=Once] ->
              case y_s4lbF of {
                GHC.Int.I8# y#_s4lbJ [Occ=Once!] ->
                    case y#_s4lbJ of wild2_s4lbK {
                      __DEFAULT ->
                          case remInt# [x#_s4lbH wild2_s4lbK] of wild3_s4lbL {
                            __DEFAULT ->
                                case narrow8Int# [wild3_s4lbL] of sat_s4lbM {
                                  __DEFAULT -> GHC.Int.I8# [sat_s4lbM];
                                };
                          };
                      0# -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Int.$w$cdiv3 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Str=<S,U><S,1*U>, Unf=OtherCon []] =
    [] \r [ww_s4lbN ww1_s4lbO]
        case ww1_s4lbO of wild_s4lbP {
          __DEFAULT ->
              case GHC.Classes.divInt# ww_s4lbN wild_s4lbP of wild1_s4lbQ {
                __DEFAULT -> narrow8Int# [wild1_s4lbQ];
              };
          -1# ->
              case ww_s4lbN of wild1_s4lbR {
                __DEFAULT ->
                    case GHC.Classes.divInt# wild1_s4lbR -1# of wild2_s4lbS {
                      __DEFAULT -> narrow8Int# [wild2_s4lbS];
                    };
                -128# -> GHC.Real.overflowError;
              };
          0# -> GHC.Real.divZeroError;
        };

GHC.Int.$fIntegralInt8_$cdiv [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> GHC.Int.Int8
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4lbV w1_s4lbW]
        case w_s4lbV of {
          GHC.Int.I8# ww1_s4lbY [Occ=Once] ->
              case w1_s4lbW of {
                GHC.Int.I8# ww3_s4lc0 [Occ=Once] ->
                    case GHC.Int.$w$cdiv3 ww1_s4lbY ww3_s4lc0 of ww4_s4lc1 {
                      __DEFAULT -> GHC.Int.I8# [ww4_s4lc1];
                    };
              };
        };

GHC.Int.$fIntegralInt8_$cmod [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> GHC.Int.Int8
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4lc2 w1_s4lc3]
        case w_s4lc2 of {
          GHC.Int.I8# ww1_s4lc5 [Occ=Once] ->
              case w1_s4lc3 of {
                GHC.Int.I8# ww3_s4lc7 [Occ=Once!] ->
                    case ww3_s4lc7 of wild_s4lc8 {
                      __DEFAULT ->
                          case GHC.Classes.modInt# ww1_s4lc5 wild_s4lc8 of wild1_s4lc9 {
                            __DEFAULT ->
                                case narrow8Int# [wild1_s4lc9] of sat_s4lca {
                                  __DEFAULT -> GHC.Int.I8# [sat_s4lca];
                                };
                          };
                      0# -> GHC.Real.divZeroError;
                    };
              };
        };

lvl6_r4kPx :: (GHC.Int.Int8, GHC.Int.Int8)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Real.overflowError GHC.Int.$fBitsInt13];

GHC.Int.$fIntegralInt8_$cquotRem [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> (GHC.Int.Int8, GHC.Int.Int8)
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4lcc w1_s4lcd]
        case w_s4lcc of {
          GHC.Int.I8# ww1_s4lcf [Occ=Once*] ->
              case w1_s4lcd of {
                GHC.Int.I8# ww3_s4lch [Occ=Once!] ->
                    case ww3_s4lch of wild_s4lci {
                      __DEFAULT ->
                          case quotRemInt# [ww1_s4lcf wild_s4lci] of {
                            (#,#) ipv_s4lck [Occ=Once] ipv1_s4lcl [Occ=Once] ->
                                case narrow8Int# [ipv1_s4lcl] of sat_s4lco {
                                  __DEFAULT ->
                                      let {
                                        sat_s4lcp [Occ=Once] :: GHC.Int.Int8
                                        [LclId] =
                                            CCCS GHC.Int.I8#! [sat_s4lco];
                                      } in 
                                        case narrow8Int# [ipv_s4lck] of sat_s4lcm {
                                          __DEFAULT ->
                                              let {
                                                sat_s4lcn [Occ=Once] :: GHC.Int.Int8
                                                [LclId] =
                                                    CCCS GHC.Int.I8#! [sat_s4lcm];
                                              } in  (,) [sat_s4lcn sat_s4lcp];
                                        };
                                };
                          };
                      -1# ->
                          case ww1_s4lcf of wild1_s4lcq {
                            __DEFAULT ->
                                case quotRemInt# [wild1_s4lcq -1#] of {
                                  (#,#) ipv_s4lcs [Occ=Once] ipv1_s4lct [Occ=Once] ->
                                      case narrow8Int# [ipv1_s4lct] of sat_s4lcw {
                                        __DEFAULT ->
                                            let {
                                              sat_s4lcx [Occ=Once] :: GHC.Int.Int8
                                              [LclId] =
                                                  CCCS GHC.Int.I8#! [sat_s4lcw];
                                            } in 
                                              case narrow8Int# [ipv_s4lcs] of sat_s4lcu {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s4lcv [Occ=Once] :: GHC.Int.Int8
                                                      [LclId] =
                                                          CCCS GHC.Int.I8#! [sat_s4lcu];
                                                    } in  (,) [sat_s4lcv sat_s4lcx];
                                              };
                                      };
                                };
                            -128# -> lvl6_r4kPx;
                          };
                      0# -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Int.$w$cdivMod3 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int#
     -> GHC.Prim.Int# -> (# GHC.Int.Int8, GHC.Int.Int8 #)
[GblId, Arity=2, Str=<S,U><S,1*U>, Unf=OtherCon []] =
    [] \r [ww_s4lcz ww1_s4lcA]
        case ww1_s4lcA of wild_s4lcB {
          __DEFAULT ->
              let-no-escape {
                $j_s4lcC [Occ=Once*T[0], Dmd=<L,1*U(U,U)>]
                  :: (# GHC.Int.Int8, GHC.Int.Int8 #)
                [LclId[JoinId(0)], Unf=OtherCon []] =
                    [ww_s4lcz wild_s4lcB] \r []
                        case ># [ww_s4lcz 0#] of {
                          __DEFAULT ->
                              case <# [ww_s4lcz 0#] of {
                                __DEFAULT ->
                                    case quotRemInt# [ww_s4lcz wild_s4lcB] of {
                                      (#,#) ipv_s4lcG [Occ=Once] ipv1_s4lcH [Occ=Once] ->
                                          case narrow8Int# [ipv1_s4lcH] of sat_s4lcK {
                                            __DEFAULT ->
                                                let {
                                                  sat_s4lcL [Occ=Once] :: GHC.Int.Int8
                                                  [LclId] =
                                                      CCCS GHC.Int.I8#! [sat_s4lcK];
                                                } in 
                                                  case narrow8Int# [ipv_s4lcG] of sat_s4lcI {
                                                    __DEFAULT ->
                                                        let {
                                                          sat_s4lcJ [Occ=Once] :: GHC.Int.Int8
                                                          [LclId] =
                                                              CCCS GHC.Int.I8#! [sat_s4lcI];
                                                        } in  (#,#) [sat_s4lcJ sat_s4lcL];
                                                  };
                                          };
                                    };
                                1# ->
                                    case ># [wild_s4lcB 0#] of {
                                      __DEFAULT ->
                                          case quotRemInt# [ww_s4lcz wild_s4lcB] of {
                                            (#,#) ipv_s4lcO [Occ=Once] ipv1_s4lcP [Occ=Once] ->
                                                case narrow8Int# [ipv1_s4lcP] of sat_s4lcS {
                                                  __DEFAULT ->
                                                      let {
                                                        sat_s4lcT [Occ=Once] :: GHC.Int.Int8
                                                        [LclId] =
                                                            CCCS GHC.Int.I8#! [sat_s4lcS];
                                                      } in 
                                                        case narrow8Int# [ipv_s4lcO] of sat_s4lcQ {
                                                          __DEFAULT ->
                                                              let {
                                                                sat_s4lcR [Occ=Once] :: GHC.Int.Int8
                                                                [LclId] =
                                                                    CCCS GHC.Int.I8#! [sat_s4lcQ];
                                                              } in  (#,#) [sat_s4lcR sat_s4lcT];
                                                        };
                                                };
                                          };
                                      1# ->
                                          case +# [ww_s4lcz 1#] of sat_s4lcU {
                                            __DEFAULT ->
                                                case quotRemInt# [sat_s4lcU wild_s4lcB] of {
                                                  (#,#) ipv_s4lcW [Occ=Once]
                                                        ipv1_s4lcX [Occ=Once] ->
                                                      case +# [ipv1_s4lcX wild_s4lcB] of sat_s4ld1 {
                                                        __DEFAULT ->
                                                            case -# [sat_s4ld1 1#] of sat_s4ld2 {
                                                              __DEFAULT ->
                                                                  case
                                                                      narrow8Int# [sat_s4ld2]
                                                                  of
                                                                  sat_s4ld3
                                                                  { __DEFAULT ->
                                                                        let {
                                                                          sat_s4ld4 [Occ=Once]
                                                                            :: GHC.Int.Int8
                                                                          [LclId] =
                                                                              CCCS GHC.Int.I8#! [sat_s4ld3];
                                                                        } in 
                                                                          case
                                                                              -# [ipv_s4lcW 1#]
                                                                          of
                                                                          sat_s4lcY
                                                                          { __DEFAULT ->
                                                                                case
                                                                                    narrow8Int# [sat_s4lcY]
                                                                                of
                                                                                sat_s4lcZ
                                                                                { __DEFAULT ->
                                                                                      let {
                                                                                        sat_s4ld0 [Occ=Once]
                                                                                          :: GHC.Int.Int8
                                                                                        [LclId] =
                                                                                            CCCS GHC.Int.I8#! [sat_s4lcZ];
                                                                                      } in 
                                                                                        (#,#) [sat_s4ld0
                                                                                               sat_s4ld4];
                                                                                };
                                                                          };
                                                                  };
                                                            };
                                                      };
                                                };
                                          };
                                    };
                              };
                          1# ->
                              case <# [wild_s4lcB 0#] of {
                                __DEFAULT ->
                                    case <# [ww_s4lcz 0#] of {
                                      __DEFAULT ->
                                          case quotRemInt# [ww_s4lcz wild_s4lcB] of {
                                            (#,#) ipv_s4ld8 [Occ=Once] ipv1_s4ld9 [Occ=Once] ->
                                                case narrow8Int# [ipv1_s4ld9] of sat_s4ldc {
                                                  __DEFAULT ->
                                                      let {
                                                        sat_s4ldd [Occ=Once] :: GHC.Int.Int8
                                                        [LclId] =
                                                            CCCS GHC.Int.I8#! [sat_s4ldc];
                                                      } in 
                                                        case narrow8Int# [ipv_s4ld8] of sat_s4lda {
                                                          __DEFAULT ->
                                                              let {
                                                                sat_s4ldb [Occ=Once] :: GHC.Int.Int8
                                                                [LclId] =
                                                                    CCCS GHC.Int.I8#! [sat_s4lda];
                                                              } in  (#,#) [sat_s4ldb sat_s4ldd];
                                                        };
                                                };
                                          };
                                      1# ->
                                          case ># [wild_s4lcB 0#] of {
                                            __DEFAULT ->
                                                case quotRemInt# [ww_s4lcz wild_s4lcB] of {
                                                  (#,#) ipv_s4ldg [Occ=Once]
                                                        ipv1_s4ldh [Occ=Once] ->
                                                      case narrow8Int# [ipv1_s4ldh] of sat_s4ldk {
                                                        __DEFAULT ->
                                                            let {
                                                              sat_s4ldl [Occ=Once] :: GHC.Int.Int8
                                                              [LclId] =
                                                                  CCCS GHC.Int.I8#! [sat_s4ldk];
                                                            } in 
                                                              case
                                                                  narrow8Int# [ipv_s4ldg]
                                                              of
                                                              sat_s4ldi
                                                              { __DEFAULT ->
                                                                    let {
                                                                      sat_s4ldj [Occ=Once]
                                                                        :: GHC.Int.Int8
                                                                      [LclId] =
                                                                          CCCS GHC.Int.I8#! [sat_s4ldi];
                                                                    } in 
                                                                      (#,#) [sat_s4ldj sat_s4ldl];
                                                              };
                                                      };
                                                };
                                            1# ->
                                                case +# [ww_s4lcz 1#] of sat_s4ldm {
                                                  __DEFAULT ->
                                                      case quotRemInt# [sat_s4ldm wild_s4lcB] of {
                                                        (#,#) ipv_s4ldo [Occ=Once]
                                                              ipv1_s4ldp [Occ=Once] ->
                                                            case
                                                                +# [ipv1_s4ldp wild_s4lcB]
                                                            of
                                                            sat_s4ldt
                                                            { __DEFAULT ->
                                                                  case
                                                                      -# [sat_s4ldt 1#]
                                                                  of
                                                                  sat_s4ldu
                                                                  { __DEFAULT ->
                                                                        case
                                                                            narrow8Int# [sat_s4ldu]
                                                                        of
                                                                        sat_s4ldv
                                                                        { __DEFAULT ->
                                                                              let {
                                                                                sat_s4ldw [Occ=Once]
                                                                                  :: GHC.Int.Int8
                                                                                [LclId] =
                                                                                    CCCS GHC.Int.I8#! [sat_s4ldv];
                                                                              } in 
                                                                                case
                                                                                    -# [ipv_s4ldo
                                                                                        1#]
                                                                                of
                                                                                sat_s4ldq
                                                                                { __DEFAULT ->
                                                                                      case
                                                                                          narrow8Int# [sat_s4ldq]
                                                                                      of
                                                                                      sat_s4ldr
                                                                                      { __DEFAULT ->
                                                                                            let {
                                                                                              sat_s4lds [Occ=Once]
                                                                                                :: GHC.Int.Int8
                                                                                              [LclId] =
                                                                                                  CCCS GHC.Int.I8#! [sat_s4ldr];
                                                                                            } in 
                                                                                              (#,#) [sat_s4lds
                                                                                                     sat_s4ldw];
                                                                                      };
                                                                                };
                                                                        };
                                                                  };
                                                            };
                                                      };
                                                };
                                          };
                                    };
                                1# ->
                                    case -# [ww_s4lcz 1#] of sat_s4ldx {
                                      __DEFAULT ->
                                          case quotRemInt# [sat_s4ldx wild_s4lcB] of {
                                            (#,#) ipv_s4ldz [Occ=Once] ipv1_s4ldA [Occ=Once] ->
                                                case +# [ipv1_s4ldA wild_s4lcB] of sat_s4ldE {
                                                  __DEFAULT ->
                                                      case +# [sat_s4ldE 1#] of sat_s4ldF {
                                                        __DEFAULT ->
                                                            case
                                                                narrow8Int# [sat_s4ldF]
                                                            of
                                                            sat_s4ldG
                                                            { __DEFAULT ->
                                                                  let {
                                                                    sat_s4ldH [Occ=Once]
                                                                      :: GHC.Int.Int8
                                                                    [LclId] =
                                                                        CCCS GHC.Int.I8#! [sat_s4ldG];
                                                                  } in 
                                                                    case
                                                                        -# [ipv_s4ldz 1#]
                                                                    of
                                                                    sat_s4ldB
                                                                    { __DEFAULT ->
                                                                          case
                                                                              narrow8Int# [sat_s4ldB]
                                                                          of
                                                                          sat_s4ldC
                                                                          { __DEFAULT ->
                                                                                let {
                                                                                  sat_s4ldD [Occ=Once]
                                                                                    :: GHC.Int.Int8
                                                                                  [LclId] =
                                                                                      CCCS GHC.Int.I8#! [sat_s4ldC];
                                                                                } in 
                                                                                  (#,#) [sat_s4ldD
                                                                                         sat_s4ldH];
                                                                          };
                                                                    };
                                                            };
                                                      };
                                                };
                                          };
                                    };
                              };
                        };
              } in 
                case wild_s4lcB of {
                  __DEFAULT -> $j_s4lcC;
                  -1# ->
                      case ww_s4lcz of {
                        __DEFAULT -> $j_s4lcC;
                        -128# -> (#,#) [GHC.Real.overflowError GHC.Int.$fBitsInt13];
                      };
                };
          0# -> GHC.Real.divZeroError;
        };

GHC.Int.$fIntegralInt8_$cdivMod [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> (GHC.Int.Int8, GHC.Int.Int8)
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4ldL w1_s4ldM]
        case w_s4ldL of {
          GHC.Int.I8# ww1_s4ldO [Occ=Once] ->
              case w1_s4ldM of {
                GHC.Int.I8# ww3_s4ldQ [Occ=Once] ->
                    case GHC.Int.$w$cdivMod3 ww1_s4ldO ww3_s4ldQ of {
                      (#,#) ww5_s4ldS [Occ=Once] ww6_s4ldT [Occ=Once] ->
                          (,) [ww5_s4ldS ww6_s4ldT];
                    };
              };
        };

sat_s4ldU :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [1#];

sat_s4ldV :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_s4ldU GHC.Types.[]];

GHC.Int.$fRealInt1 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True sat_s4ldV;

GHC.Int.$fRealInt8_$ctoRational [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int8 -> GHC.Real.Rational
[GblId, Arity=1, Str=<S(S),1*U(U)>m, Unf=OtherCon []] =
    [] \r [w_s4ldW]
        case w_s4ldW of {
          GHC.Int.I8# ww1_s4ldY [Occ=Once] ->
              case GHC.Integer.Type.smallInteger ww1_s4ldY of sat_s4ldZ {
                __DEFAULT ->
                    case
                        GHC.Integer.Type.timesInteger sat_s4ldZ GHC.Int.$fRealInt1
                    of
                    sat_s4le0
                    { __DEFAULT ->
                          case GHC.Real.$w$sreduce sat_s4le0 GHC.Int.$fRealInt1 of {
                            (#,#) ww3_s4le2 [Occ=Once] ww4_s4le3 [Occ=Once] ->
                                GHC.Real.:% [ww3_s4le2 ww4_s4le3];
                          };
                    };
              };
        };

GHC.Int.$fRealInt8 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Real.Real GHC.Int.Int8
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Real.C:Real! [GHC.Int.$fNumInt8
                                    GHC.Int.$fOrdInt8
                                    GHC.Int.$fRealInt8_$ctoRational];

GHC.Int.$fIntegralInt8 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Real.Integral GHC.Int.Int8
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Real.C:Integral! [GHC.Int.$fRealInt8
                                        GHC.Int.$fEnumInt8
                                        GHC.Int.$fIntegralInt8_$cquot
                                        GHC.Int.$fIntegralInt8_$crem
                                        GHC.Int.$fIntegralInt8_$cdiv
                                        GHC.Int.$fIntegralInt8_$cmod
                                        GHC.Int.$fIntegralInt8_$cquotRem
                                        GHC.Int.$fIntegralInt8_$cdivMod
                                        GHC.Int.$fIntegralInt8_$ctoInteger];

GHC.Int.$fIxInt8_$cunsafeIndex
  :: (GHC.Int.Int8, GHC.Int.Int8) -> GHC.Int.Int8 -> GHC.Types.Int
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S(S)L),1*U(1*U(U),A)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4le4 i_s4le5]
        case ds_s4le4 of {
          (,) m_s4le7 [Occ=Once!] _ [Occ=Dead] ->
              case i_s4le5 of {
                GHC.Int.I8# x#_s4lea [Occ=Once] ->
                    case m_s4le7 of {
                      GHC.Int.I8# x#1_s4lec [Occ=Once] ->
                          case -# [x#_s4lea x#1_s4lec] of sat_s4led {
                            __DEFAULT -> GHC.Types.I# [sat_s4led];
                          };
                    };
              };
        };

GHC.Int.$fIxInt8_$crange
  :: (GHC.Int.Int8, GHC.Int.Int8) -> [GHC.Int.Int8]
[GblId,
 Arity=1,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>,
 Unf=OtherCon []] =
    [] \r [ds_s4lee]
        case ds_s4lee of {
          (,) m_s4leg [Occ=Once] n_s4leh [Occ=Once] ->
              GHC.Int.$fEnumInt8_$cenumFromTo m_s4leg n_s4leh;
        };

GHC.Int.$fIxInt8_$crangeSize
  :: (GHC.Int.Int8, GHC.Int.Int8) -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>m,
 Unf=OtherCon []] =
    [] \r [b_s4lei]
        case b_s4lei of {
          (,) _l_s4lek [Occ=Once!] h_s4lel [Occ=Once!] ->
              case _l_s4lek of {
                GHC.Int.I8# x_s4len ->
                    case h_s4lel of {
                      GHC.Int.I8# y_s4lep ->
                          case <=# [x_s4len y_s4lep] of {
                            __DEFAULT -> GHC.Int.$fIxInt1;
                            1# ->
                                case -# [y_s4lep x_s4len] of sat_s4ler {
                                  __DEFAULT ->
                                      case +# [sat_s4ler 1#] of sat_s4les {
                                        __DEFAULT -> GHC.Types.I# [sat_s4les];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fIxInt8_$cunsafeRangeSize
  :: (GHC.Int.Int8, GHC.Int.Int8) -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>m,
 Unf=OtherCon []] =
    [] \r [b_s4let]
        case b_s4let of {
          (,) _l_s4lev [Occ=Once!] h_s4lew [Occ=Once!] ->
              case h_s4lew of {
                GHC.Int.I8# x#_s4ley [Occ=Once] ->
                    case _l_s4lev of {
                      GHC.Int.I8# x#1_s4leA [Occ=Once] ->
                          case -# [x#_s4ley x#1_s4leA] of sat_s4leB {
                            __DEFAULT ->
                                case +# [sat_s4leB 1#] of sat_s4leC {
                                  __DEFAULT -> GHC.Types.I# [sat_s4leC];
                                };
                          };
                    };
              };
        };

GHC.Int.$fIxInt8_$cindex [InlPrag=INLINE (sat-args=2)]
  :: (GHC.Int.Int8, GHC.Int.Int8) -> GHC.Int.Int8 -> GHC.Types.Int
[GblId,
 Arity=2,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s4leD eta1_s4leE]
        case eta_s4leD of {
          (,) m_s4leG [Occ=Once!] n_s4leH [Occ=Once!] ->
              case m_s4leG of {
                GHC.Int.I8# x_s4leJ ->
                    case eta1_s4leE of {
                      GHC.Int.I8# y_s4leL ->
                          case <=# [x_s4leJ y_s4leL] of {
                            __DEFAULT -> GHC.Arr.hopelessIndexError;
                            1# ->
                                case n_s4leH of {
                                  GHC.Int.I8# y1_s4leO [Occ=Once] ->
                                      case <=# [y_s4leL y1_s4leO] of {
                                        __DEFAULT -> GHC.Arr.hopelessIndexError;
                                        1# ->
                                            case -# [y_s4leL x_s4leJ] of sat_s4leQ {
                                              __DEFAULT -> GHC.Types.I# [sat_s4leQ];
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fIxInt8 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Arr.Ix GHC.Int.Int8
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Arr.C:Ix! [GHC.Int.$fOrdInt8
                                 GHC.Int.$fIxInt8_$crange
                                 GHC.Int.$fIxInt8_$cindex
                                 GHC.Int.$fIxInt8_$cunsafeIndex
                                 GHC.Int.$fIxInt8_$cinRange
                                 GHC.Int.$fIxInt8_$crangeSize
                                 GHC.Int.$fIxInt8_$cunsafeRangeSize];

GHC.Int.eqInt16 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4leR ds1_s4leS]
        case ds_s4leR of {
          GHC.Int.I16# x_s4leU [Occ=Once] ->
              case ds1_s4leS of {
                GHC.Int.I16# y_s4leW [Occ=Once] ->
                    case ==# [x_s4leU y_s4leW] of sat_s4leX {
                      __DEFAULT -> tagToEnum# [sat_s4leX];
                    };
              };
        };

GHC.Int.$fEqInt16 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.Int.Int16
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.Int.eqInt16 GHC.Int.neInt16];

GHC.Int.gtInt16 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4leY ds1_s4leZ]
        case ds_s4leY of {
          GHC.Int.I16# x_s4lf1 [Occ=Once] ->
              case ds1_s4leZ of {
                GHC.Int.I16# y_s4lf3 [Occ=Once] ->
                    case ># [x_s4lf1 y_s4lf3] of sat_s4lf4 {
                      __DEFAULT -> tagToEnum# [sat_s4lf4];
                    };
              };
        };

GHC.Int.geInt16 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4lf5 ds1_s4lf6]
        case ds_s4lf5 of {
          GHC.Int.I16# x_s4lf8 [Occ=Once] ->
              case ds1_s4lf6 of {
                GHC.Int.I16# y_s4lfa [Occ=Once] ->
                    case >=# [x_s4lf8 y_s4lfa] of sat_s4lfb {
                      __DEFAULT -> tagToEnum# [sat_s4lfb];
                    };
              };
        };

GHC.Int.ltInt16 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4lfc ds1_s4lfd]
        case ds_s4lfc of {
          GHC.Int.I16# x_s4lff [Occ=Once] ->
              case ds1_s4lfd of {
                GHC.Int.I16# y_s4lfh [Occ=Once] ->
                    case <# [x_s4lff y_s4lfh] of sat_s4lfi {
                      __DEFAULT -> tagToEnum# [sat_s4lfi];
                    };
              };
        };

GHC.Int.leInt16 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4lfj ds1_s4lfk]
        case ds_s4lfj of {
          GHC.Int.I16# x_s4lfm [Occ=Once] ->
              case ds1_s4lfk of {
                GHC.Int.I16# y_s4lfo [Occ=Once] ->
                    case <=# [x_s4lfm y_s4lfo] of sat_s4lfp {
                      __DEFAULT -> tagToEnum# [sat_s4lfp];
                    };
              };
        };

GHC.Int.$fOrdInt16_$ccompare
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [x_s4lfq y_s4lfr]
        case x_s4lfq of {
          GHC.Int.I16# x1_s4lft ->
              case y_s4lfr of {
                GHC.Int.I16# y1_s4lfv ->
                    case ==# [x1_s4lft y1_s4lfv] of {
                      __DEFAULT ->
                          case <=# [x1_s4lft y1_s4lfv] of {
                            __DEFAULT -> GHC.Types.GT [];
                            1# -> GHC.Types.LT [];
                          };
                      1# -> GHC.Types.EQ [];
                    };
              };
        };

GHC.Int.$fOrdInt16_$cmax
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Int.Int16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s4lfy y_s4lfz]
        case x_s4lfy of wild_s4lfA {
          GHC.Int.I16# x1_s4lfB [Occ=Once] ->
              case y_s4lfz of wild1_s4lfC {
                GHC.Int.I16# y1_s4lfD [Occ=Once] ->
                    case <=# [x1_s4lfB y1_s4lfD] of {
                      __DEFAULT -> wild_s4lfA;
                      1# -> wild1_s4lfC;
                    };
              };
        };

GHC.Int.$fOrdInt16_$cmin
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Int.Int16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s4lfF y_s4lfG]
        case x_s4lfF of wild_s4lfH {
          GHC.Int.I16# x1_s4lfI [Occ=Once] ->
              case y_s4lfG of wild1_s4lfJ {
                GHC.Int.I16# y1_s4lfK [Occ=Once] ->
                    case <=# [x1_s4lfI y1_s4lfK] of {
                      __DEFAULT -> wild1_s4lfJ;
                      1# -> wild_s4lfH;
                    };
              };
        };

GHC.Int.$fOrdInt16 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord GHC.Int.Int16
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.Int.$fEqInt16
                                      GHC.Int.$fOrdInt16_$ccompare
                                      GHC.Int.ltInt16
                                      GHC.Int.leInt16
                                      GHC.Int.gtInt16
                                      GHC.Int.geInt16
                                      GHC.Int.$fOrdInt16_$cmax
                                      GHC.Int.$fOrdInt16_$cmin];

GHC.Int.$fIxInt16_$cinRange
  :: (GHC.Int.Int16, GHC.Int.Int16)
     -> GHC.Int.Int16 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S(S)L),1*U(1*U(U),1*U(U))><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4lfM i_s4lfN]
        case ds_s4lfM of {
          (,) m_s4lfP [Occ=Once!] n_s4lfQ [Occ=Once!] ->
              case m_s4lfP of {
                GHC.Int.I16# x_s4lfS [Occ=Once] ->
                    case i_s4lfN of {
                      GHC.Int.I16# y_s4lfU ->
                          case <=# [x_s4lfS y_s4lfU] of {
                            __DEFAULT -> GHC.Types.False [];
                            1# ->
                                case n_s4lfQ of {
                                  GHC.Int.I16# y1_s4lfX [Occ=Once] ->
                                      case <=# [y_s4lfU y1_s4lfX] of sat_s4lfY {
                                        __DEFAULT -> tagToEnum# [sat_s4lfY];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fNumInt1 :: GHC.Int.Int16
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I16#! [1#];

GHC.Int.$fNumInt16_$csignum :: GHC.Int.Int16 -> GHC.Int.Int16
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s4lfZ]
        case x_s4lfZ of {
          GHC.Int.I16# x1_s4lg1 ->
              case ># [x1_s4lg1 0#] of {
                __DEFAULT ->
                    case x1_s4lg1 of {
                      __DEFAULT -> GHC.Int.$fNumInt2;
                      0# -> GHC.Int.$fBitsInt3;
                    };
                1# -> GHC.Int.$fNumInt1;
              };
        };

GHC.Int.$fNumInt16_$cabs :: GHC.Int.Int16 -> GHC.Int.Int16
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s4lg4]
        case x_s4lg4 of wild_s4lg5 {
          GHC.Int.I16# x1_s4lg6 ->
              case >=# [x1_s4lg6 0#] of {
                __DEFAULT ->
                    case negateInt# [x1_s4lg6] of sat_s4lg8 {
                      __DEFAULT ->
                          case narrow16Int# [sat_s4lg8] of sat_s4lg9 {
                            __DEFAULT -> GHC.Int.I16# [sat_s4lg9];
                          };
                    };
                1# -> wild_s4lg5;
              };
        };

GHC.Int.$fNumInt16 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Num.Num GHC.Int.Int16
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Num.C:Num! [GHC.Int.$fNumInt16_$c+
                                  GHC.Int.$fNumInt16_$c-
                                  GHC.Int.$fNumInt16_$c*
                                  GHC.Int.$fNumInt16_$cnegate
                                  GHC.Int.$fNumInt16_$cabs
                                  GHC.Int.$fNumInt16_$csignum
                                  GHC.Int.$fNumInt16_$cfromInteger];

GHC.Int.$fBitsInt2 :: GHC.Base.Maybe GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [GHC.Int.$fBitsInt1];

GHC.Int.$fBitsInt16_$cbitSizeMaybe
  :: GHC.Int.Int16 -> GHC.Base.Maybe GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>m2, Unf=OtherCon []] =
    [] \r [i_s4lga] GHC.Int.$fBitsInt2;

GHC.Int.$fBitsInt16_$cbit [InlPrag=INLINE (sat-args=0)]
  :: GHC.Types.Int -> GHC.Int.Int16
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [i_s4lgb]
        case i_s4lgb of {
          GHC.Types.I# i#_s4lgd ->
              case >=# [i#_s4lgd 64#] of {
                __DEFAULT ->
                    case uncheckedIShiftL# [1# i#_s4lgd] of sat_s4lgf {
                      __DEFAULT ->
                          case narrow16Int# [sat_s4lgf] of sat_s4lgg {
                            __DEFAULT -> GHC.Int.I16# [sat_s4lgg];
                          };
                    };
                1# -> GHC.Int.$fBitsInt3;
              };
        };

GHC.Int.$fBitsInt16_$ctestBit [InlPrag=INLINE (sat-args=0)]
  :: GHC.Int.Int16 -> GHC.Types.Int -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [x_s4lgh i_s4lgi]
        case x_s4lgh of {
          GHC.Int.I16# x#_s4lgk [Occ=Once] ->
              case i_s4lgi of {
                GHC.Types.I# i#_s4lgm ->
                    case >=# [i#_s4lgm 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftL# [1# i#_s4lgm] of sat_s4lgp {
                            __DEFAULT ->
                                case narrow16Int# [sat_s4lgp] of sat_s4lgq {
                                  __DEFAULT ->
                                      case int2Word# [sat_s4lgq] of sat_s4lgr {
                                        __DEFAULT ->
                                            case int2Word# [x#_s4lgk] of sat_s4lgo {
                                              __DEFAULT ->
                                                  case and# [sat_s4lgo sat_s4lgr] of sat_s4lgs {
                                                    __DEFAULT ->
                                                        case word2Int# [sat_s4lgs] of {
                                                          __DEFAULT -> GHC.Types.True [];
                                                          0# -> GHC.Types.False [];
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                      1# -> GHC.Types.False [];
                    };
              };
        };

GHC.Int.$fBitsInt16_$crotateR [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int16 -> GHC.Types.Int -> GHC.Int.Int16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s4lgu eta1_s4lgv]
        case eta_s4lgu of wild_s4lgw {
          GHC.Int.I16# x#_s4lgx [Occ=Once] ->
              case eta1_s4lgv of {
                GHC.Types.I# x1_s4lgz [Occ=Once] ->
                    case negateInt# [x1_s4lgz] of sat_s4lgA {
                      __DEFAULT ->
                          case int2Word# [sat_s4lgA] of sat_s4lgB {
                            __DEFAULT ->
                                case and# [sat_s4lgB 15##] of sat_s4lgC {
                                  __DEFAULT ->
                                      case word2Int# [sat_s4lgC] of wild2_s4lgD {
                                        __DEFAULT ->
                                            case int2Word# [x#_s4lgx] of sat_s4lgF {
                                              __DEFAULT ->
                                                  case
                                                      narrow16Word# [sat_s4lgF]
                                                  of
                                                  x'#_s4lgE [Dmd=<S,U>]
                                                  { __DEFAULT ->
                                                        case -# [16# wild2_s4lgD] of sat_s4lgH {
                                                          __DEFAULT ->
                                                              case
                                                                  uncheckedShiftRL# [x'#_s4lgE
                                                                                     sat_s4lgH]
                                                              of
                                                              sat_s4lgI
                                                              { __DEFAULT ->
                                                                    case
                                                                        uncheckedShiftL# [x'#_s4lgE
                                                                                          wild2_s4lgD]
                                                                    of
                                                                    sat_s4lgG
                                                                    { __DEFAULT ->
                                                                          case
                                                                              or# [sat_s4lgG
                                                                                   sat_s4lgI]
                                                                          of
                                                                          sat_s4lgJ
                                                                          { __DEFAULT ->
                                                                                case
                                                                                    word2Int# [sat_s4lgJ]
                                                                                of
                                                                                sat_s4lgK
                                                                                { __DEFAULT ->
                                                                                      case
                                                                                          narrow16Int# [sat_s4lgK]
                                                                                      of
                                                                                      sat_s4lgL
                                                                                      { __DEFAULT ->
                                                                                            GHC.Int.I16# [sat_s4lgL];
                                                                                      };
                                                                                };
                                                                          };
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                        0# -> wild_s4lgw;
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fBitsInt16_$ccomplementBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int16 -> GHC.Types.Int -> GHC.Int.Int16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s4lgM eta1_s4lgN]
        case eta_s4lgM of wild_s4lgO {
          GHC.Int.I16# x#_s4lgP [Occ=Once] ->
              case eta1_s4lgN of {
                GHC.Types.I# i#_s4lgR ->
                    case >=# [i#_s4lgR 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftL# [1# i#_s4lgR] of sat_s4lgU {
                            __DEFAULT ->
                                case narrow16Int# [sat_s4lgU] of sat_s4lgV {
                                  __DEFAULT ->
                                      case int2Word# [sat_s4lgV] of sat_s4lgW {
                                        __DEFAULT ->
                                            case int2Word# [x#_s4lgP] of sat_s4lgT {
                                              __DEFAULT ->
                                                  case xor# [sat_s4lgT sat_s4lgW] of sat_s4lgX {
                                                    __DEFAULT ->
                                                        case word2Int# [sat_s4lgX] of sat_s4lgY {
                                                          __DEFAULT -> GHC.Int.I16# [sat_s4lgY];
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                      1# -> wild_s4lgO;
                    };
              };
        };

GHC.Int.$fBitsInt16_$cclearBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int16 -> GHC.Types.Int -> GHC.Int.Int16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s4lgZ eta1_s4lh0]
        case eta_s4lgZ of {
          GHC.Int.I16# x#_s4lh2 [Occ=Once*] ->
              case eta1_s4lh0 of {
                GHC.Types.I# i#_s4lh4 ->
                    case >=# [i#_s4lh4 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftL# [1# i#_s4lh4] of sat_s4lh7 {
                            __DEFAULT ->
                                case narrow16Int# [sat_s4lh7] of sat_s4lh8 {
                                  __DEFAULT ->
                                      case int2Word# [sat_s4lh8] of sat_s4lh9 {
                                        __DEFAULT ->
                                            case not# [sat_s4lh9] of sat_s4lha {
                                              __DEFAULT ->
                                                  case int2Word# [x#_s4lh2] of sat_s4lh6 {
                                                    __DEFAULT ->
                                                        case
                                                            and# [sat_s4lh6 sat_s4lha]
                                                        of
                                                        sat_s4lhb
                                                        { __DEFAULT ->
                                                              case
                                                                  word2Int# [sat_s4lhb]
                                                              of
                                                              sat_s4lhc
                                                              { __DEFAULT ->
                                                                    GHC.Int.I16# [sat_s4lhc];
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                      1# ->
                          case int2Word# [x#_s4lh2] of sat_s4lhd {
                            __DEFAULT ->
                                case and# [sat_s4lhd 18446744073709551615##] of sat_s4lhe {
                                  __DEFAULT ->
                                      case word2Int# [sat_s4lhe] of sat_s4lhf {
                                        __DEFAULT -> GHC.Int.I16# [sat_s4lhf];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fBitsInt16_$csetBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int16 -> GHC.Types.Int -> GHC.Int.Int16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s4lhg eta1_s4lhh]
        case eta_s4lhg of wild_s4lhi {
          GHC.Int.I16# x#_s4lhj [Occ=Once] ->
              case eta1_s4lhh of {
                GHC.Types.I# i#_s4lhl ->
                    case >=# [i#_s4lhl 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftL# [1# i#_s4lhl] of sat_s4lho {
                            __DEFAULT ->
                                case narrow16Int# [sat_s4lho] of sat_s4lhp {
                                  __DEFAULT ->
                                      case int2Word# [sat_s4lhp] of sat_s4lhq {
                                        __DEFAULT ->
                                            case int2Word# [x#_s4lhj] of sat_s4lhn {
                                              __DEFAULT ->
                                                  case or# [sat_s4lhn sat_s4lhq] of sat_s4lhr {
                                                    __DEFAULT ->
                                                        case word2Int# [sat_s4lhr] of sat_s4lhs {
                                                          __DEFAULT -> GHC.Int.I16# [sat_s4lhs];
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                      1# -> wild_s4lhi;
                    };
              };
        };

GHC.Int.$fBitsInt16_$crotateL [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int16 -> GHC.Types.Int -> GHC.Int.Int16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Int.$fBitsInt16_$crotate eta_B2 eta_B1;

GHC.Int.$fBitsInt16 [InlPrag=NOUSERINLINE CONLIKE]
  :: Data.Bits.Bits GHC.Int.Int16
[GblId[DFunId], Caf=NoCafRefs] =
    CCS_DONT_CARE Data.Bits.C:Bits! [GHC.Int.$fEqInt16
                                     GHC.Int.$fBitsInt16_$c.&.
                                     GHC.Int.$fBitsInt16_$c.|.
                                     GHC.Int.$fBitsInt16_$cxor
                                     GHC.Int.$fBitsInt16_$ccomplement
                                     GHC.Int.$fBitsInt16_$cshift
                                     GHC.Int.$fBitsInt16_$crotate
                                     GHC.Int.$fBitsInt3
                                     GHC.Int.$fBitsInt16_$cbit
                                     GHC.Int.$fBitsInt16_$csetBit
                                     GHC.Int.$fBitsInt16_$cclearBit
                                     GHC.Int.$fBitsInt16_$ccomplementBit
                                     GHC.Int.$fBitsInt16_$ctestBit
                                     GHC.Int.$fBitsInt16_$cbitSizeMaybe
                                     GHC.Int.$fBitsInt16_$cfiniteBitSize
                                     GHC.Int.$fBitsInt16_$cisSigned
                                     GHC.Int.$fBitsInt16_$cshiftL
                                     GHC.Int.$fBitsInt16_$cunsafeShiftL
                                     GHC.Int.$fBitsInt16_$cshiftR
                                     GHC.Int.$fBitsInt16_$cunsafeShiftR
                                     GHC.Int.$fBitsInt16_$crotateL
                                     GHC.Int.$fBitsInt16_$crotateR
                                     GHC.Int.$fBitsInt16_$cpopCount];

GHC.Int.$fFiniteBitsInt16 [InlPrag=NOUSERINLINE CONLIKE]
  :: Data.Bits.FiniteBits GHC.Int.Int16
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE Data.Bits.C:FiniteBits! [GHC.Int.$fBitsInt16
                                           GHC.Int.$fBitsInt16_$cfiniteBitSize
                                           GHC.Int.$fFiniteBitsInt16_$ccountLeadingZeros
                                           GHC.Int.$fFiniteBitsInt16_$ccountTrailingZeros];

GHC.Int.$fReadInt16_go [Occ=LoopBreaker]
  :: [(GHC.Types.Int, GHC.Base.String)]
     -> [(GHC.Int.Int16, GHC.Base.String)]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s4lht]
        case ds_s4lht of {
          [] -> [] [];
          : y_s4lhv [Occ=Once!] ys_s4lhw [Occ=Once] ->
              case y_s4lhv of {
                (,) x_s4lhy [Occ=Once!] r_s4lhz [Occ=Once] ->
                    let {
                      sat_s4lhF [Occ=Once] :: [(GHC.Int.Int16, GHC.Base.String)]
                      [LclId] =
                          [ys_s4lhw] \u [] GHC.Int.$fReadInt16_go ys_s4lhw; } in
                    let {
                      sat_s4lhD [Occ=Once] :: GHC.Int.Int16
                      [LclId] =
                          [x_s4lhy] \u []
                              case x_s4lhy of {
                                GHC.Types.I# x#_s4lhB [Occ=Once] ->
                                    case narrow16Int# [x#_s4lhB] of sat_s4lhC {
                                      __DEFAULT -> GHC.Int.I16# [sat_s4lhC];
                                    };
                              }; } in
                    let {
                      sat_s4lhE [Occ=Once] :: (GHC.Int.Int16, GHC.Base.String)
                      [LclId] =
                          CCCS (,)! [sat_s4lhD r_s4lhz];
                    } in  : [sat_s4lhE sat_s4lhF];
              };
        };

GHC.Int.$fReadInt16_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS GHC.Int.Int16
[GblId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [p_s4lhG s_s4lhH]
        case
            GHC.Read.$fReadInt_$sreadNumber
                GHC.Read.$fReadInt2
                p_s4lhG
                Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
        of
        sat_s4lhI
        { __DEFAULT ->
              case
                  Text.ParserCombinators.ReadP.run sat_s4lhI s_s4lhH
              of
              sat_s4lhJ
              { __DEFAULT -> GHC.Int.$fReadInt16_go sat_s4lhJ;
              };
        };

GHC.Int.$fReadInt3
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Int.Int16 -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,U><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [n_s4lhK eta_s4lhL]
        let {
          sat_s4lhM [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS GHC.Int.Int16
          [LclId] =
              [n_s4lhK] \r [eta_B1]
                  GHC.Int.$fReadInt16_$creadsPrec n_s4lhK eta_B1;
        } in 
          case
              Text.ParserCombinators.ReadP.$wreadS_to_P sat_s4lhM eta_s4lhL
          of
          { Unit# ww1_s4lhO [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s4lhO];
          };

GHC.Int.$fReadInt2
  :: Text.ParserCombinators.ReadP.P [GHC.Int.Int16]
[GblId] =
    [] \u []
        GHC.Read.list
            GHC.Int.$fReadInt3
            GHC.Int.$fIxInt1
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Int.$fReadInt16_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.Int.Int16]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Int.$fReadInt2 eta_B1;

GHC.Int.$fReadInt1
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        ([GHC.Int.Int16] -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,A><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [n_s4lhP w1_s4lhQ]
        case
            Text.ParserCombinators.ReadP.$wreadS_to_P
                GHC.Int.$fReadInt16_$creadList w1_s4lhQ
        of
        { Unit# ww1_s4lhS [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s4lhS];
        };

GHC.Int.$fReadInt16 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.Int.Int16
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Int.$fReadInt16_$creadsPrec
                                    GHC.Int.$fReadInt16_$creadList
                                    GHC.Int.$fReadInt3
                                    GHC.Int.$fReadInt1];

GHC.Int.$fIntegralInt16_$cquot [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Int.Int16
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4lhT w1_s4lhU]
        case w_s4lhT of {
          GHC.Int.I16# ww1_s4lhW [Occ=Once*] ->
              case w1_s4lhU of {
                GHC.Int.I16# ww3_s4lhY [Occ=Once!] ->
                    case ww3_s4lhY of wild_s4lhZ {
                      __DEFAULT ->
                          case quotInt# [ww1_s4lhW wild_s4lhZ] of wild1_s4li0 {
                            __DEFAULT ->
                                case narrow16Int# [wild1_s4li0] of sat_s4li1 {
                                  __DEFAULT -> GHC.Int.I16# [sat_s4li1];
                                };
                          };
                      -1# ->
                          case ww1_s4lhW of wild1_s4li2 {
                            __DEFAULT ->
                                case quotInt# [wild1_s4li2 -1#] of sat_s4li3 {
                                  __DEFAULT ->
                                      case narrow16Int# [sat_s4li3] of sat_s4li4 {
                                        __DEFAULT -> GHC.Int.I16# [sat_s4li4];
                                      };
                                };
                            -32768# -> GHC.Real.overflowError;
                          };
                      0# -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Int.$fIntegralInt16_$crem
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Int.Int16
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4li7 y_s4li8]
        case ds_s4li7 of {
          GHC.Int.I16# x#_s4lia [Occ=Once] ->
              case y_s4li8 of {
                GHC.Int.I16# y#_s4lic [Occ=Once!] ->
                    case y#_s4lic of wild2_s4lid {
                      __DEFAULT ->
                          case remInt# [x#_s4lia wild2_s4lid] of wild3_s4lie {
                            __DEFAULT ->
                                case narrow16Int# [wild3_s4lie] of sat_s4lif {
                                  __DEFAULT -> GHC.Int.I16# [sat_s4lif];
                                };
                          };
                      0# -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Int.$w$cdiv [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Str=<S,U><S,1*U>, Unf=OtherCon []] =
    [] \r [ww_s4lig ww1_s4lih]
        case ww1_s4lih of wild_s4lii {
          __DEFAULT ->
              case GHC.Classes.divInt# ww_s4lig wild_s4lii of wild1_s4lij {
                __DEFAULT -> narrow16Int# [wild1_s4lij];
              };
          -1# ->
              case ww_s4lig of wild1_s4lik {
                __DEFAULT ->
                    case GHC.Classes.divInt# wild1_s4lik -1# of wild2_s4lil {
                      __DEFAULT -> narrow16Int# [wild2_s4lil];
                    };
                -32768# -> GHC.Real.overflowError;
              };
          0# -> GHC.Real.divZeroError;
        };

GHC.Int.$fIntegralInt16_$cdiv [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Int.Int16
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4lio w1_s4lip]
        case w_s4lio of {
          GHC.Int.I16# ww1_s4lir [Occ=Once] ->
              case w1_s4lip of {
                GHC.Int.I16# ww3_s4lit [Occ=Once] ->
                    case GHC.Int.$w$cdiv ww1_s4lir ww3_s4lit of ww4_s4liu {
                      __DEFAULT -> GHC.Int.I16# [ww4_s4liu];
                    };
              };
        };

GHC.Int.$fIntegralInt16_$cmod [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Int.Int16
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4liv w1_s4liw]
        case w_s4liv of {
          GHC.Int.I16# ww1_s4liy [Occ=Once] ->
              case w1_s4liw of {
                GHC.Int.I16# ww3_s4liA [Occ=Once!] ->
                    case ww3_s4liA of wild_s4liB {
                      __DEFAULT ->
                          case GHC.Classes.modInt# ww1_s4liy wild_s4liB of wild1_s4liC {
                            __DEFAULT ->
                                case narrow16Int# [wild1_s4liC] of sat_s4liD {
                                  __DEFAULT -> GHC.Int.I16# [sat_s4liD];
                                };
                          };
                      0# -> GHC.Real.divZeroError;
                    };
              };
        };

lvl7_r4kPy :: (GHC.Int.Int16, GHC.Int.Int16)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Real.overflowError GHC.Int.$fBitsInt3];

GHC.Int.$fIntegralInt16_$cquotRem [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> (GHC.Int.Int16, GHC.Int.Int16)
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4liF w1_s4liG]
        case w_s4liF of {
          GHC.Int.I16# ww1_s4liI [Occ=Once*] ->
              case w1_s4liG of {
                GHC.Int.I16# ww3_s4liK [Occ=Once!] ->
                    case ww3_s4liK of wild_s4liL {
                      __DEFAULT ->
                          case quotRemInt# [ww1_s4liI wild_s4liL] of {
                            (#,#) ipv_s4liN [Occ=Once] ipv1_s4liO [Occ=Once] ->
                                case narrow16Int# [ipv1_s4liO] of sat_s4liR {
                                  __DEFAULT ->
                                      let {
                                        sat_s4liS [Occ=Once] :: GHC.Int.Int16
                                        [LclId] =
                                            CCCS GHC.Int.I16#! [sat_s4liR];
                                      } in 
                                        case narrow16Int# [ipv_s4liN] of sat_s4liP {
                                          __DEFAULT ->
                                              let {
                                                sat_s4liQ [Occ=Once] :: GHC.Int.Int16
                                                [LclId] =
                                                    CCCS GHC.Int.I16#! [sat_s4liP];
                                              } in  (,) [sat_s4liQ sat_s4liS];
                                        };
                                };
                          };
                      -1# ->
                          case ww1_s4liI of wild1_s4liT {
                            __DEFAULT ->
                                case quotRemInt# [wild1_s4liT -1#] of {
                                  (#,#) ipv_s4liV [Occ=Once] ipv1_s4liW [Occ=Once] ->
                                      case narrow16Int# [ipv1_s4liW] of sat_s4liZ {
                                        __DEFAULT ->
                                            let {
                                              sat_s4lj0 [Occ=Once] :: GHC.Int.Int16
                                              [LclId] =
                                                  CCCS GHC.Int.I16#! [sat_s4liZ];
                                            } in 
                                              case narrow16Int# [ipv_s4liV] of sat_s4liX {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s4liY [Occ=Once] :: GHC.Int.Int16
                                                      [LclId] =
                                                          CCCS GHC.Int.I16#! [sat_s4liX];
                                                    } in  (,) [sat_s4liY sat_s4lj0];
                                              };
                                      };
                                };
                            -32768# -> lvl7_r4kPy;
                          };
                      0# -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Int.$w$cdivMod [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int#
     -> GHC.Prim.Int# -> (# GHC.Int.Int16, GHC.Int.Int16 #)
[GblId, Arity=2, Str=<S,U><S,1*U>, Unf=OtherCon []] =
    [] \r [ww_s4lj2 ww1_s4lj3]
        case ww1_s4lj3 of wild_s4lj4 {
          __DEFAULT ->
              let-no-escape {
                $j_s4lj5 [Occ=Once*T[0], Dmd=<L,1*U(U,U)>]
                  :: (# GHC.Int.Int16, GHC.Int.Int16 #)
                [LclId[JoinId(0)], Unf=OtherCon []] =
                    [ww_s4lj2 wild_s4lj4] \r []
                        case ># [ww_s4lj2 0#] of {
                          __DEFAULT ->
                              case <# [ww_s4lj2 0#] of {
                                __DEFAULT ->
                                    case quotRemInt# [ww_s4lj2 wild_s4lj4] of {
                                      (#,#) ipv_s4lj9 [Occ=Once] ipv1_s4lja [Occ=Once] ->
                                          case narrow16Int# [ipv1_s4lja] of sat_s4ljd {
                                            __DEFAULT ->
                                                let {
                                                  sat_s4lje [Occ=Once] :: GHC.Int.Int16
                                                  [LclId] =
                                                      CCCS GHC.Int.I16#! [sat_s4ljd];
                                                } in 
                                                  case narrow16Int# [ipv_s4lj9] of sat_s4ljb {
                                                    __DEFAULT ->
                                                        let {
                                                          sat_s4ljc [Occ=Once] :: GHC.Int.Int16
                                                          [LclId] =
                                                              CCCS GHC.Int.I16#! [sat_s4ljb];
                                                        } in  (#,#) [sat_s4ljc sat_s4lje];
                                                  };
                                          };
                                    };
                                1# ->
                                    case ># [wild_s4lj4 0#] of {
                                      __DEFAULT ->
                                          case quotRemInt# [ww_s4lj2 wild_s4lj4] of {
                                            (#,#) ipv_s4ljh [Occ=Once] ipv1_s4lji [Occ=Once] ->
                                                case narrow16Int# [ipv1_s4lji] of sat_s4ljl {
                                                  __DEFAULT ->
                                                      let {
                                                        sat_s4ljm [Occ=Once] :: GHC.Int.Int16
                                                        [LclId] =
                                                            CCCS GHC.Int.I16#! [sat_s4ljl];
                                                      } in 
                                                        case narrow16Int# [ipv_s4ljh] of sat_s4ljj {
                                                          __DEFAULT ->
                                                              let {
                                                                sat_s4ljk [Occ=Once]
                                                                  :: GHC.Int.Int16
                                                                [LclId] =
                                                                    CCCS GHC.Int.I16#! [sat_s4ljj];
                                                              } in  (#,#) [sat_s4ljk sat_s4ljm];
                                                        };
                                                };
                                          };
                                      1# ->
                                          case +# [ww_s4lj2 1#] of sat_s4ljn {
                                            __DEFAULT ->
                                                case quotRemInt# [sat_s4ljn wild_s4lj4] of {
                                                  (#,#) ipv_s4ljp [Occ=Once]
                                                        ipv1_s4ljq [Occ=Once] ->
                                                      case +# [ipv1_s4ljq wild_s4lj4] of sat_s4lju {
                                                        __DEFAULT ->
                                                            case -# [sat_s4lju 1#] of sat_s4ljv {
                                                              __DEFAULT ->
                                                                  case
                                                                      narrow16Int# [sat_s4ljv]
                                                                  of
                                                                  sat_s4ljw
                                                                  { __DEFAULT ->
                                                                        let {
                                                                          sat_s4ljx [Occ=Once]
                                                                            :: GHC.Int.Int16
                                                                          [LclId] =
                                                                              CCCS GHC.Int.I16#! [sat_s4ljw];
                                                                        } in 
                                                                          case
                                                                              -# [ipv_s4ljp 1#]
                                                                          of
                                                                          sat_s4ljr
                                                                          { __DEFAULT ->
                                                                                case
                                                                                    narrow16Int# [sat_s4ljr]
                                                                                of
                                                                                sat_s4ljs
                                                                                { __DEFAULT ->
                                                                                      let {
                                                                                        sat_s4ljt [Occ=Once]
                                                                                          :: GHC.Int.Int16
                                                                                        [LclId] =
                                                                                            CCCS GHC.Int.I16#! [sat_s4ljs];
                                                                                      } in 
                                                                                        (#,#) [sat_s4ljt
                                                                                               sat_s4ljx];
                                                                                };
                                                                          };
                                                                  };
                                                            };
                                                      };
                                                };
                                          };
                                    };
                              };
                          1# ->
                              case <# [wild_s4lj4 0#] of {
                                __DEFAULT ->
                                    case <# [ww_s4lj2 0#] of {
                                      __DEFAULT ->
                                          case quotRemInt# [ww_s4lj2 wild_s4lj4] of {
                                            (#,#) ipv_s4ljB [Occ=Once] ipv1_s4ljC [Occ=Once] ->
                                                case narrow16Int# [ipv1_s4ljC] of sat_s4ljF {
                                                  __DEFAULT ->
                                                      let {
                                                        sat_s4ljG [Occ=Once] :: GHC.Int.Int16
                                                        [LclId] =
                                                            CCCS GHC.Int.I16#! [sat_s4ljF];
                                                      } in 
                                                        case narrow16Int# [ipv_s4ljB] of sat_s4ljD {
                                                          __DEFAULT ->
                                                              let {
                                                                sat_s4ljE [Occ=Once]
                                                                  :: GHC.Int.Int16
                                                                [LclId] =
                                                                    CCCS GHC.Int.I16#! [sat_s4ljD];
                                                              } in  (#,#) [sat_s4ljE sat_s4ljG];
                                                        };
                                                };
                                          };
                                      1# ->
                                          case ># [wild_s4lj4 0#] of {
                                            __DEFAULT ->
                                                case quotRemInt# [ww_s4lj2 wild_s4lj4] of {
                                                  (#,#) ipv_s4ljJ [Occ=Once]
                                                        ipv1_s4ljK [Occ=Once] ->
                                                      case narrow16Int# [ipv1_s4ljK] of sat_s4ljN {
                                                        __DEFAULT ->
                                                            let {
                                                              sat_s4ljO [Occ=Once] :: GHC.Int.Int16
                                                              [LclId] =
                                                                  CCCS GHC.Int.I16#! [sat_s4ljN];
                                                            } in 
                                                              case
                                                                  narrow16Int# [ipv_s4ljJ]
                                                              of
                                                              sat_s4ljL
                                                              { __DEFAULT ->
                                                                    let {
                                                                      sat_s4ljM [Occ=Once]
                                                                        :: GHC.Int.Int16
                                                                      [LclId] =
                                                                          CCCS GHC.Int.I16#! [sat_s4ljL];
                                                                    } in 
                                                                      (#,#) [sat_s4ljM sat_s4ljO];
                                                              };
                                                      };
                                                };
                                            1# ->
                                                case +# [ww_s4lj2 1#] of sat_s4ljP {
                                                  __DEFAULT ->
                                                      case quotRemInt# [sat_s4ljP wild_s4lj4] of {
                                                        (#,#) ipv_s4ljR [Occ=Once]
                                                              ipv1_s4ljS [Occ=Once] ->
                                                            case
                                                                +# [ipv1_s4ljS wild_s4lj4]
                                                            of
                                                            sat_s4ljW
                                                            { __DEFAULT ->
                                                                  case
                                                                      -# [sat_s4ljW 1#]
                                                                  of
                                                                  sat_s4ljX
                                                                  { __DEFAULT ->
                                                                        case
                                                                            narrow16Int# [sat_s4ljX]
                                                                        of
                                                                        sat_s4ljY
                                                                        { __DEFAULT ->
                                                                              let {
                                                                                sat_s4ljZ [Occ=Once]
                                                                                  :: GHC.Int.Int16
                                                                                [LclId] =
                                                                                    CCCS GHC.Int.I16#! [sat_s4ljY];
                                                                              } in 
                                                                                case
                                                                                    -# [ipv_s4ljR
                                                                                        1#]
                                                                                of
                                                                                sat_s4ljT
                                                                                { __DEFAULT ->
                                                                                      case
                                                                                          narrow16Int# [sat_s4ljT]
                                                                                      of
                                                                                      sat_s4ljU
                                                                                      { __DEFAULT ->
                                                                                            let {
                                                                                              sat_s4ljV [Occ=Once]
                                                                                                :: GHC.Int.Int16
                                                                                              [LclId] =
                                                                                                  CCCS GHC.Int.I16#! [sat_s4ljU];
                                                                                            } in 
                                                                                              (#,#) [sat_s4ljV
                                                                                                     sat_s4ljZ];
                                                                                      };
                                                                                };
                                                                        };
                                                                  };
                                                            };
                                                      };
                                                };
                                          };
                                    };
                                1# ->
                                    case -# [ww_s4lj2 1#] of sat_s4lk0 {
                                      __DEFAULT ->
                                          case quotRemInt# [sat_s4lk0 wild_s4lj4] of {
                                            (#,#) ipv_s4lk2 [Occ=Once] ipv1_s4lk3 [Occ=Once] ->
                                                case +# [ipv1_s4lk3 wild_s4lj4] of sat_s4lk7 {
                                                  __DEFAULT ->
                                                      case +# [sat_s4lk7 1#] of sat_s4lk8 {
                                                        __DEFAULT ->
                                                            case
                                                                narrow16Int# [sat_s4lk8]
                                                            of
                                                            sat_s4lk9
                                                            { __DEFAULT ->
                                                                  let {
                                                                    sat_s4lka [Occ=Once]
                                                                      :: GHC.Int.Int16
                                                                    [LclId] =
                                                                        CCCS GHC.Int.I16#! [sat_s4lk9];
                                                                  } in 
                                                                    case
                                                                        -# [ipv_s4lk2 1#]
                                                                    of
                                                                    sat_s4lk4
                                                                    { __DEFAULT ->
                                                                          case
                                                                              narrow16Int# [sat_s4lk4]
                                                                          of
                                                                          sat_s4lk5
                                                                          { __DEFAULT ->
                                                                                let {
                                                                                  sat_s4lk6 [Occ=Once]
                                                                                    :: GHC.Int.Int16
                                                                                  [LclId] =
                                                                                      CCCS GHC.Int.I16#! [sat_s4lk5];
                                                                                } in 
                                                                                  (#,#) [sat_s4lk6
                                                                                         sat_s4lka];
                                                                          };
                                                                    };
                                                            };
                                                      };
                                                };
                                          };
                                    };
                              };
                        };
              } in 
                case wild_s4lj4 of {
                  __DEFAULT -> $j_s4lj5;
                  -1# ->
                      case ww_s4lj2 of {
                        __DEFAULT -> $j_s4lj5;
                        -32768# -> (#,#) [GHC.Real.overflowError GHC.Int.$fBitsInt3];
                      };
                };
          0# -> GHC.Real.divZeroError;
        };

GHC.Int.$fIntegralInt16_$cdivMod [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> (GHC.Int.Int16, GHC.Int.Int16)
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4lke w1_s4lkf]
        case w_s4lke of {
          GHC.Int.I16# ww1_s4lkh [Occ=Once] ->
              case w1_s4lkf of {
                GHC.Int.I16# ww3_s4lkj [Occ=Once] ->
                    case GHC.Int.$w$cdivMod ww1_s4lkh ww3_s4lkj of {
                      (#,#) ww5_s4lkl [Occ=Once] ww6_s4lkm [Occ=Once] ->
                          (,) [ww5_s4lkl ww6_s4lkm];
                    };
              };
        };

GHC.Int.$fRealInt16_$ctoRational [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int16 -> GHC.Real.Rational
[GblId, Arity=1, Str=<S(S),1*U(U)>m, Unf=OtherCon []] =
    [] \r [w_s4lkn]
        case w_s4lkn of {
          GHC.Int.I16# ww1_s4lkp [Occ=Once] ->
              case GHC.Integer.Type.smallInteger ww1_s4lkp of sat_s4lkq {
                __DEFAULT ->
                    case
                        GHC.Integer.Type.timesInteger sat_s4lkq GHC.Int.$fRealInt1
                    of
                    sat_s4lkr
                    { __DEFAULT ->
                          case GHC.Real.$w$sreduce sat_s4lkr GHC.Int.$fRealInt1 of {
                            (#,#) ww3_s4lkt [Occ=Once] ww4_s4lku [Occ=Once] ->
                                GHC.Real.:% [ww3_s4lkt ww4_s4lku];
                          };
                    };
              };
        };

GHC.Int.$fRealInt16 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Real.Real GHC.Int.Int16
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Real.C:Real! [GHC.Int.$fNumInt16
                                    GHC.Int.$fOrdInt16
                                    GHC.Int.$fRealInt16_$ctoRational];

GHC.Int.$fIntegralInt16 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Real.Integral GHC.Int.Int16
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Real.C:Integral! [GHC.Int.$fRealInt16
                                        GHC.Int.$fEnumInt16
                                        GHC.Int.$fIntegralInt16_$cquot
                                        GHC.Int.$fIntegralInt16_$crem
                                        GHC.Int.$fIntegralInt16_$cdiv
                                        GHC.Int.$fIntegralInt16_$cmod
                                        GHC.Int.$fIntegralInt16_$cquotRem
                                        GHC.Int.$fIntegralInt16_$cdivMod
                                        GHC.Int.$fIntegralInt16_$ctoInteger];

GHC.Int.$fIxInt16_$cunsafeIndex
  :: (GHC.Int.Int16, GHC.Int.Int16) -> GHC.Int.Int16 -> GHC.Types.Int
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S(S)L),1*U(1*U(U),A)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4lkv i_s4lkw]
        case ds_s4lkv of {
          (,) m_s4lky [Occ=Once!] _ [Occ=Dead] ->
              case i_s4lkw of {
                GHC.Int.I16# x#_s4lkB [Occ=Once] ->
                    case m_s4lky of {
                      GHC.Int.I16# x#1_s4lkD [Occ=Once] ->
                          case -# [x#_s4lkB x#1_s4lkD] of sat_s4lkE {
                            __DEFAULT -> GHC.Types.I# [sat_s4lkE];
                          };
                    };
              };
        };

GHC.Int.$fIxInt16_$crange
  :: (GHC.Int.Int16, GHC.Int.Int16) -> [GHC.Int.Int16]
[GblId,
 Arity=1,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>,
 Unf=OtherCon []] =
    [] \r [ds_s4lkF]
        case ds_s4lkF of {
          (,) m_s4lkH [Occ=Once] n_s4lkI [Occ=Once] ->
              GHC.Int.$fEnumInt16_$cenumFromTo m_s4lkH n_s4lkI;
        };

GHC.Int.$fIxInt16_$crangeSize
  :: (GHC.Int.Int16, GHC.Int.Int16) -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>m,
 Unf=OtherCon []] =
    [] \r [b_s4lkJ]
        case b_s4lkJ of {
          (,) _l_s4lkL [Occ=Once!] h_s4lkM [Occ=Once!] ->
              case _l_s4lkL of {
                GHC.Int.I16# x_s4lkO ->
                    case h_s4lkM of {
                      GHC.Int.I16# y_s4lkQ ->
                          case <=# [x_s4lkO y_s4lkQ] of {
                            __DEFAULT -> GHC.Int.$fIxInt1;
                            1# ->
                                case -# [y_s4lkQ x_s4lkO] of sat_s4lkS {
                                  __DEFAULT ->
                                      case +# [sat_s4lkS 1#] of sat_s4lkT {
                                        __DEFAULT -> GHC.Types.I# [sat_s4lkT];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fIxInt16_$cunsafeRangeSize
  :: (GHC.Int.Int16, GHC.Int.Int16) -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>m,
 Unf=OtherCon []] =
    [] \r [b_s4lkU]
        case b_s4lkU of {
          (,) _l_s4lkW [Occ=Once!] h_s4lkX [Occ=Once!] ->
              case h_s4lkX of {
                GHC.Int.I16# x#_s4lkZ [Occ=Once] ->
                    case _l_s4lkW of {
                      GHC.Int.I16# x#1_s4ll1 [Occ=Once] ->
                          case -# [x#_s4lkZ x#1_s4ll1] of sat_s4ll2 {
                            __DEFAULT ->
                                case +# [sat_s4ll2 1#] of sat_s4ll3 {
                                  __DEFAULT -> GHC.Types.I# [sat_s4ll3];
                                };
                          };
                    };
              };
        };

GHC.Int.$fIxInt16_$cindex [InlPrag=INLINE (sat-args=2)]
  :: (GHC.Int.Int16, GHC.Int.Int16) -> GHC.Int.Int16 -> GHC.Types.Int
[GblId,
 Arity=2,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s4ll4 eta1_s4ll5]
        case eta_s4ll4 of {
          (,) m_s4ll7 [Occ=Once!] n_s4ll8 [Occ=Once!] ->
              case m_s4ll7 of {
                GHC.Int.I16# x_s4lla ->
                    case eta1_s4ll5 of {
                      GHC.Int.I16# y_s4llc ->
                          case <=# [x_s4lla y_s4llc] of {
                            __DEFAULT -> GHC.Arr.hopelessIndexError;
                            1# ->
                                case n_s4ll8 of {
                                  GHC.Int.I16# y1_s4llf [Occ=Once] ->
                                      case <=# [y_s4llc y1_s4llf] of {
                                        __DEFAULT -> GHC.Arr.hopelessIndexError;
                                        1# ->
                                            case -# [y_s4llc x_s4lla] of sat_s4llh {
                                              __DEFAULT -> GHC.Types.I# [sat_s4llh];
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fIxInt16 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Arr.Ix GHC.Int.Int16
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Arr.C:Ix! [GHC.Int.$fOrdInt16
                                 GHC.Int.$fIxInt16_$crange
                                 GHC.Int.$fIxInt16_$cindex
                                 GHC.Int.$fIxInt16_$cunsafeIndex
                                 GHC.Int.$fIxInt16_$cinRange
                                 GHC.Int.$fIxInt16_$crangeSize
                                 GHC.Int.$fIxInt16_$cunsafeRangeSize];

GHC.Int.eqInt32 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4lli ds1_s4llj]
        case ds_s4lli of {
          GHC.Int.I32# x_s4lll [Occ=Once] ->
              case ds1_s4llj of {
                GHC.Int.I32# y_s4lln [Occ=Once] ->
                    case ==# [x_s4lll y_s4lln] of sat_s4llo {
                      __DEFAULT -> tagToEnum# [sat_s4llo];
                    };
              };
        };

GHC.Int.$fEqInt32 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.Int.Int32
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.Int.eqInt32 GHC.Int.neInt32];

GHC.Int.gtInt32 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4llp ds1_s4llq]
        case ds_s4llp of {
          GHC.Int.I32# x_s4lls [Occ=Once] ->
              case ds1_s4llq of {
                GHC.Int.I32# y_s4llu [Occ=Once] ->
                    case ># [x_s4lls y_s4llu] of sat_s4llv {
                      __DEFAULT -> tagToEnum# [sat_s4llv];
                    };
              };
        };

GHC.Int.geInt32 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4llw ds1_s4llx]
        case ds_s4llw of {
          GHC.Int.I32# x_s4llz [Occ=Once] ->
              case ds1_s4llx of {
                GHC.Int.I32# y_s4llB [Occ=Once] ->
                    case >=# [x_s4llz y_s4llB] of sat_s4llC {
                      __DEFAULT -> tagToEnum# [sat_s4llC];
                    };
              };
        };

GHC.Int.ltInt32 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4llD ds1_s4llE]
        case ds_s4llD of {
          GHC.Int.I32# x_s4llG [Occ=Once] ->
              case ds1_s4llE of {
                GHC.Int.I32# y_s4llI [Occ=Once] ->
                    case <# [x_s4llG y_s4llI] of sat_s4llJ {
                      __DEFAULT -> tagToEnum# [sat_s4llJ];
                    };
              };
        };

GHC.Int.leInt32 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4llK ds1_s4llL]
        case ds_s4llK of {
          GHC.Int.I32# x_s4llN [Occ=Once] ->
              case ds1_s4llL of {
                GHC.Int.I32# y_s4llP [Occ=Once] ->
                    case <=# [x_s4llN y_s4llP] of sat_s4llQ {
                      __DEFAULT -> tagToEnum# [sat_s4llQ];
                    };
              };
        };

GHC.Int.$fOrdInt32_$ccompare
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [x_s4llR y_s4llS]
        case x_s4llR of {
          GHC.Int.I32# x1_s4llU ->
              case y_s4llS of {
                GHC.Int.I32# y1_s4llW ->
                    case ==# [x1_s4llU y1_s4llW] of {
                      __DEFAULT ->
                          case <=# [x1_s4llU y1_s4llW] of {
                            __DEFAULT -> GHC.Types.GT [];
                            1# -> GHC.Types.LT [];
                          };
                      1# -> GHC.Types.EQ [];
                    };
              };
        };

GHC.Int.$fOrdInt32_$cmax
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> GHC.Int.Int32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s4llZ y_s4lm0]
        case x_s4llZ of wild_s4lm1 {
          GHC.Int.I32# x1_s4lm2 [Occ=Once] ->
              case y_s4lm0 of wild1_s4lm3 {
                GHC.Int.I32# y1_s4lm4 [Occ=Once] ->
                    case <=# [x1_s4lm2 y1_s4lm4] of {
                      __DEFAULT -> wild_s4lm1;
                      1# -> wild1_s4lm3;
                    };
              };
        };

GHC.Int.$fOrdInt32_$cmin
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> GHC.Int.Int32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s4lm6 y_s4lm7]
        case x_s4lm6 of wild_s4lm8 {
          GHC.Int.I32# x1_s4lm9 [Occ=Once] ->
              case y_s4lm7 of wild1_s4lma {
                GHC.Int.I32# y1_s4lmb [Occ=Once] ->
                    case <=# [x1_s4lm9 y1_s4lmb] of {
                      __DEFAULT -> wild1_s4lma;
                      1# -> wild_s4lm8;
                    };
              };
        };

GHC.Int.$fOrdInt32 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord GHC.Int.Int32
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.Int.$fEqInt32
                                      GHC.Int.$fOrdInt32_$ccompare
                                      GHC.Int.ltInt32
                                      GHC.Int.leInt32
                                      GHC.Int.gtInt32
                                      GHC.Int.geInt32
                                      GHC.Int.$fOrdInt32_$cmax
                                      GHC.Int.$fOrdInt32_$cmin];

GHC.Int.$fIxInt32_$cinRange
  :: (GHC.Int.Int32, GHC.Int.Int32)
     -> GHC.Int.Int32 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S(S)L),1*U(1*U(U),1*U(U))><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4lmd i_s4lme]
        case ds_s4lmd of {
          (,) m_s4lmg [Occ=Once!] n_s4lmh [Occ=Once!] ->
              case m_s4lmg of {
                GHC.Int.I32# x_s4lmj [Occ=Once] ->
                    case i_s4lme of {
                      GHC.Int.I32# y_s4lml ->
                          case <=# [x_s4lmj y_s4lml] of {
                            __DEFAULT -> GHC.Types.False [];
                            1# ->
                                case n_s4lmh of {
                                  GHC.Int.I32# y1_s4lmo [Occ=Once] ->
                                      case <=# [y_s4lml y1_s4lmo] of sat_s4lmp {
                                        __DEFAULT -> tagToEnum# [sat_s4lmp];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fNumInt3 :: GHC.Int.Int32
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I32#! [1#];

GHC.Int.$fNumInt32_$csignum :: GHC.Int.Int32 -> GHC.Int.Int32
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s4lmq]
        case x_s4lmq of {
          GHC.Int.I32# x1_s4lms ->
              case ># [x1_s4lms 0#] of {
                __DEFAULT ->
                    case x1_s4lms of {
                      __DEFAULT -> GHC.Int.$fNumInt4;
                      0# -> GHC.Int.$fBitsInt6;
                    };
                1# -> GHC.Int.$fNumInt3;
              };
        };

GHC.Int.$fNumInt32_$cabs :: GHC.Int.Int32 -> GHC.Int.Int32
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s4lmv]
        case x_s4lmv of wild_s4lmw {
          GHC.Int.I32# x1_s4lmx ->
              case >=# [x1_s4lmx 0#] of {
                __DEFAULT ->
                    case negateInt# [x1_s4lmx] of sat_s4lmz {
                      __DEFAULT ->
                          case narrow32Int# [sat_s4lmz] of sat_s4lmA {
                            __DEFAULT -> GHC.Int.I32# [sat_s4lmA];
                          };
                    };
                1# -> wild_s4lmw;
              };
        };

GHC.Int.$fNumInt32 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Num.Num GHC.Int.Int32
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Num.C:Num! [GHC.Int.$fNumInt32_$c+
                                  GHC.Int.$fNumInt32_$c-
                                  GHC.Int.$fNumInt32_$c*
                                  GHC.Int.$fNumInt32_$cnegate
                                  GHC.Int.$fNumInt32_$cabs
                                  GHC.Int.$fNumInt32_$csignum
                                  GHC.Int.$fNumInt32_$cfromInteger];

GHC.Int.$fBitsInt5 :: GHC.Base.Maybe GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [GHC.Int.$fBitsInt4];

GHC.Int.$fBitsInt32_$cbitSizeMaybe
  :: GHC.Int.Int32 -> GHC.Base.Maybe GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>m2, Unf=OtherCon []] =
    [] \r [i_s4lmB] GHC.Int.$fBitsInt5;

GHC.Int.$fBitsInt32_$cbit [InlPrag=INLINE (sat-args=0)]
  :: GHC.Types.Int -> GHC.Int.Int32
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [i_s4lmC]
        case i_s4lmC of {
          GHC.Types.I# i#_s4lmE ->
              case >=# [i#_s4lmE 64#] of {
                __DEFAULT ->
                    case uncheckedIShiftL# [1# i#_s4lmE] of sat_s4lmG {
                      __DEFAULT ->
                          case narrow32Int# [sat_s4lmG] of sat_s4lmH {
                            __DEFAULT -> GHC.Int.I32# [sat_s4lmH];
                          };
                    };
                1# -> GHC.Int.$fBitsInt6;
              };
        };

GHC.Int.$fBitsInt32_$ctestBit [InlPrag=INLINE (sat-args=0)]
  :: GHC.Int.Int32 -> GHC.Types.Int -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [x_s4lmI i_s4lmJ]
        case x_s4lmI of {
          GHC.Int.I32# x#_s4lmL [Occ=Once] ->
              case i_s4lmJ of {
                GHC.Types.I# i#_s4lmN ->
                    case >=# [i#_s4lmN 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftL# [1# i#_s4lmN] of sat_s4lmQ {
                            __DEFAULT ->
                                case narrow32Int# [sat_s4lmQ] of sat_s4lmR {
                                  __DEFAULT ->
                                      case int2Word# [sat_s4lmR] of sat_s4lmS {
                                        __DEFAULT ->
                                            case int2Word# [x#_s4lmL] of sat_s4lmP {
                                              __DEFAULT ->
                                                  case and# [sat_s4lmP sat_s4lmS] of sat_s4lmT {
                                                    __DEFAULT ->
                                                        case word2Int# [sat_s4lmT] of {
                                                          __DEFAULT -> GHC.Types.True [];
                                                          0# -> GHC.Types.False [];
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                      1# -> GHC.Types.False [];
                    };
              };
        };

GHC.Int.$fBitsInt32_$crotateR [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int32 -> GHC.Types.Int -> GHC.Int.Int32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s4lmV eta1_s4lmW]
        case eta_s4lmV of wild_s4lmX {
          GHC.Int.I32# x#_s4lmY [Occ=Once] ->
              case eta1_s4lmW of {
                GHC.Types.I# x1_s4ln0 [Occ=Once] ->
                    case negateInt# [x1_s4ln0] of sat_s4ln1 {
                      __DEFAULT ->
                          case int2Word# [sat_s4ln1] of sat_s4ln2 {
                            __DEFAULT ->
                                case and# [sat_s4ln2 31##] of sat_s4ln3 {
                                  __DEFAULT ->
                                      case word2Int# [sat_s4ln3] of wild2_s4ln4 {
                                        __DEFAULT ->
                                            case int2Word# [x#_s4lmY] of sat_s4ln6 {
                                              __DEFAULT ->
                                                  case
                                                      narrow32Word# [sat_s4ln6]
                                                  of
                                                  x'#_s4ln5 [Dmd=<S,U>]
                                                  { __DEFAULT ->
                                                        case -# [32# wild2_s4ln4] of sat_s4ln8 {
                                                          __DEFAULT ->
                                                              case
                                                                  uncheckedShiftRL# [x'#_s4ln5
                                                                                     sat_s4ln8]
                                                              of
                                                              sat_s4ln9
                                                              { __DEFAULT ->
                                                                    case
                                                                        uncheckedShiftL# [x'#_s4ln5
                                                                                          wild2_s4ln4]
                                                                    of
                                                                    sat_s4ln7
                                                                    { __DEFAULT ->
                                                                          case
                                                                              or# [sat_s4ln7
                                                                                   sat_s4ln9]
                                                                          of
                                                                          sat_s4lna
                                                                          { __DEFAULT ->
                                                                                case
                                                                                    word2Int# [sat_s4lna]
                                                                                of
                                                                                sat_s4lnb
                                                                                { __DEFAULT ->
                                                                                      case
                                                                                          narrow32Int# [sat_s4lnb]
                                                                                      of
                                                                                      sat_s4lnc
                                                                                      { __DEFAULT ->
                                                                                            GHC.Int.I32# [sat_s4lnc];
                                                                                      };
                                                                                };
                                                                          };
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                        0# -> wild_s4lmX;
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fBitsInt32_$ccomplementBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int32 -> GHC.Types.Int -> GHC.Int.Int32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s4lnd eta1_s4lne]
        case eta_s4lnd of wild_s4lnf {
          GHC.Int.I32# x#_s4lng [Occ=Once] ->
              case eta1_s4lne of {
                GHC.Types.I# i#_s4lni ->
                    case >=# [i#_s4lni 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftL# [1# i#_s4lni] of sat_s4lnl {
                            __DEFAULT ->
                                case narrow32Int# [sat_s4lnl] of sat_s4lnm {
                                  __DEFAULT ->
                                      case int2Word# [sat_s4lnm] of sat_s4lnn {
                                        __DEFAULT ->
                                            case int2Word# [x#_s4lng] of sat_s4lnk {
                                              __DEFAULT ->
                                                  case xor# [sat_s4lnk sat_s4lnn] of sat_s4lno {
                                                    __DEFAULT ->
                                                        case word2Int# [sat_s4lno] of sat_s4lnp {
                                                          __DEFAULT -> GHC.Int.I32# [sat_s4lnp];
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                      1# -> wild_s4lnf;
                    };
              };
        };

GHC.Int.$fBitsInt32_$cclearBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int32 -> GHC.Types.Int -> GHC.Int.Int32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s4lnq eta1_s4lnr]
        case eta_s4lnq of {
          GHC.Int.I32# x#_s4lnt [Occ=Once*] ->
              case eta1_s4lnr of {
                GHC.Types.I# i#_s4lnv ->
                    case >=# [i#_s4lnv 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftL# [1# i#_s4lnv] of sat_s4lny {
                            __DEFAULT ->
                                case narrow32Int# [sat_s4lny] of sat_s4lnz {
                                  __DEFAULT ->
                                      case int2Word# [sat_s4lnz] of sat_s4lnA {
                                        __DEFAULT ->
                                            case not# [sat_s4lnA] of sat_s4lnB {
                                              __DEFAULT ->
                                                  case int2Word# [x#_s4lnt] of sat_s4lnx {
                                                    __DEFAULT ->
                                                        case
                                                            and# [sat_s4lnx sat_s4lnB]
                                                        of
                                                        sat_s4lnC
                                                        { __DEFAULT ->
                                                              case
                                                                  word2Int# [sat_s4lnC]
                                                              of
                                                              sat_s4lnD
                                                              { __DEFAULT ->
                                                                    GHC.Int.I32# [sat_s4lnD];
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                      1# ->
                          case int2Word# [x#_s4lnt] of sat_s4lnE {
                            __DEFAULT ->
                                case and# [sat_s4lnE 18446744073709551615##] of sat_s4lnF {
                                  __DEFAULT ->
                                      case word2Int# [sat_s4lnF] of sat_s4lnG {
                                        __DEFAULT -> GHC.Int.I32# [sat_s4lnG];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fBitsInt32_$csetBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int32 -> GHC.Types.Int -> GHC.Int.Int32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s4lnH eta1_s4lnI]
        case eta_s4lnH of wild_s4lnJ {
          GHC.Int.I32# x#_s4lnK [Occ=Once] ->
              case eta1_s4lnI of {
                GHC.Types.I# i#_s4lnM ->
                    case >=# [i#_s4lnM 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftL# [1# i#_s4lnM] of sat_s4lnP {
                            __DEFAULT ->
                                case narrow32Int# [sat_s4lnP] of sat_s4lnQ {
                                  __DEFAULT ->
                                      case int2Word# [sat_s4lnQ] of sat_s4lnR {
                                        __DEFAULT ->
                                            case int2Word# [x#_s4lnK] of sat_s4lnO {
                                              __DEFAULT ->
                                                  case or# [sat_s4lnO sat_s4lnR] of sat_s4lnS {
                                                    __DEFAULT ->
                                                        case word2Int# [sat_s4lnS] of sat_s4lnT {
                                                          __DEFAULT -> GHC.Int.I32# [sat_s4lnT];
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                      1# -> wild_s4lnJ;
                    };
              };
        };

GHC.Int.$fBitsInt32_$crotateL [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int32 -> GHC.Types.Int -> GHC.Int.Int32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Int.$fBitsInt32_$crotate eta_B2 eta_B1;

GHC.Int.$fBitsInt32 [InlPrag=NOUSERINLINE CONLIKE]
  :: Data.Bits.Bits GHC.Int.Int32
[GblId[DFunId], Caf=NoCafRefs] =
    CCS_DONT_CARE Data.Bits.C:Bits! [GHC.Int.$fEqInt32
                                     GHC.Int.$fBitsInt32_$c.&.
                                     GHC.Int.$fBitsInt32_$c.|.
                                     GHC.Int.$fBitsInt32_$cxor
                                     GHC.Int.$fBitsInt32_$ccomplement
                                     GHC.Int.$fBitsInt32_$cshift
                                     GHC.Int.$fBitsInt32_$crotate
                                     GHC.Int.$fBitsInt6
                                     GHC.Int.$fBitsInt32_$cbit
                                     GHC.Int.$fBitsInt32_$csetBit
                                     GHC.Int.$fBitsInt32_$cclearBit
                                     GHC.Int.$fBitsInt32_$ccomplementBit
                                     GHC.Int.$fBitsInt32_$ctestBit
                                     GHC.Int.$fBitsInt32_$cbitSizeMaybe
                                     GHC.Int.$fBitsInt32_$cfiniteBitSize
                                     GHC.Int.$fBitsInt32_$cisSigned
                                     GHC.Int.$fBitsInt32_$cshiftL
                                     GHC.Int.$fBitsInt32_$cunsafeShiftL
                                     GHC.Int.$fBitsInt32_$cshiftR
                                     GHC.Int.$fBitsInt32_$cunsafeShiftR
                                     GHC.Int.$fBitsInt32_$crotateL
                                     GHC.Int.$fBitsInt32_$crotateR
                                     GHC.Int.$fBitsInt32_$cpopCount];

GHC.Int.$fFiniteBitsInt32 [InlPrag=NOUSERINLINE CONLIKE]
  :: Data.Bits.FiniteBits GHC.Int.Int32
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE Data.Bits.C:FiniteBits! [GHC.Int.$fBitsInt32
                                           GHC.Int.$fBitsInt32_$cfiniteBitSize
                                           GHC.Int.$fFiniteBitsInt32_$ccountLeadingZeros
                                           GHC.Int.$fFiniteBitsInt32_$ccountTrailingZeros];

GHC.Int.$fReadInt32_go [Occ=LoopBreaker]
  :: [(GHC.Types.Int, GHC.Base.String)]
     -> [(GHC.Int.Int32, GHC.Base.String)]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s4lnU]
        case ds_s4lnU of {
          [] -> [] [];
          : y_s4lnW [Occ=Once!] ys_s4lnX [Occ=Once] ->
              case y_s4lnW of {
                (,) x_s4lnZ [Occ=Once!] r_s4lo0 [Occ=Once] ->
                    let {
                      sat_s4lo6 [Occ=Once] :: [(GHC.Int.Int32, GHC.Base.String)]
                      [LclId] =
                          [ys_s4lnX] \u [] GHC.Int.$fReadInt32_go ys_s4lnX; } in
                    let {
                      sat_s4lo4 [Occ=Once] :: GHC.Int.Int32
                      [LclId] =
                          [x_s4lnZ] \u []
                              case x_s4lnZ of {
                                GHC.Types.I# x#_s4lo2 [Occ=Once] ->
                                    case narrow32Int# [x#_s4lo2] of sat_s4lo3 {
                                      __DEFAULT -> GHC.Int.I32# [sat_s4lo3];
                                    };
                              }; } in
                    let {
                      sat_s4lo5 [Occ=Once] :: (GHC.Int.Int32, GHC.Base.String)
                      [LclId] =
                          CCCS (,)! [sat_s4lo4 r_s4lo0];
                    } in  : [sat_s4lo5 sat_s4lo6];
              };
        };

GHC.Int.$fReadInt32_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS GHC.Int.Int32
[GblId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [p_s4lo7 s_s4lo8]
        case
            GHC.Read.$fReadInt_$sreadNumber
                GHC.Read.$fReadInt2
                p_s4lo7
                Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
        of
        sat_s4lo9
        { __DEFAULT ->
              case
                  Text.ParserCombinators.ReadP.run sat_s4lo9 s_s4lo8
              of
              sat_s4loa
              { __DEFAULT -> GHC.Int.$fReadInt32_go sat_s4loa;
              };
        };

GHC.Int.$fReadInt6
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Int.Int32 -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,U><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [n_s4lob eta_s4loc]
        let {
          sat_s4lod [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS GHC.Int.Int32
          [LclId] =
              [n_s4lob] \r [eta_B1]
                  GHC.Int.$fReadInt32_$creadsPrec n_s4lob eta_B1;
        } in 
          case
              Text.ParserCombinators.ReadP.$wreadS_to_P sat_s4lod eta_s4loc
          of
          { Unit# ww1_s4lof [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s4lof];
          };

GHC.Int.$fReadInt5
  :: Text.ParserCombinators.ReadP.P [GHC.Int.Int32]
[GblId] =
    [] \u []
        GHC.Read.list
            GHC.Int.$fReadInt6
            GHC.Int.$fIxInt1
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Int.$fReadInt32_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.Int.Int32]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Int.$fReadInt5 eta_B1;

GHC.Int.$fReadInt4
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        ([GHC.Int.Int32] -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,A><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [n_s4log w1_s4loh]
        case
            Text.ParserCombinators.ReadP.$wreadS_to_P
                GHC.Int.$fReadInt32_$creadList w1_s4loh
        of
        { Unit# ww1_s4loj [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s4loj];
        };

GHC.Int.$fReadInt32 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.Int.Int32
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Int.$fReadInt32_$creadsPrec
                                    GHC.Int.$fReadInt32_$creadList
                                    GHC.Int.$fReadInt6
                                    GHC.Int.$fReadInt4];

GHC.Int.$fIntegralInt32_$cquot [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> GHC.Int.Int32
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4lok w1_s4lol]
        case w_s4lok of {
          GHC.Int.I32# ww1_s4lon [Occ=Once*] ->
              case w1_s4lol of {
                GHC.Int.I32# ww3_s4lop [Occ=Once!] ->
                    case ww3_s4lop of wild_s4loq {
                      __DEFAULT ->
                          case quotInt# [ww1_s4lon wild_s4loq] of wild1_s4lor {
                            __DEFAULT ->
                                case narrow32Int# [wild1_s4lor] of sat_s4los {
                                  __DEFAULT -> GHC.Int.I32# [sat_s4los];
                                };
                          };
                      -1# ->
                          case ww1_s4lon of wild1_s4lot {
                            __DEFAULT ->
                                case quotInt# [wild1_s4lot -1#] of sat_s4lou {
                                  __DEFAULT ->
                                      case narrow32Int# [sat_s4lou] of sat_s4lov {
                                        __DEFAULT -> GHC.Int.I32# [sat_s4lov];
                                      };
                                };
                            -2147483648# -> GHC.Real.overflowError;
                          };
                      0# -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Int.$fIntegralInt32_$crem
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> GHC.Int.Int32
[GblId, Arity=2, Str=<S,1*U(U)><S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [ds_s4loy y_s4loz]
        case ds_s4loy of {
          GHC.Int.I32# x#_s4loB [Occ=Once] ->
              case y_s4loz of {
                GHC.Int.I32# y#_s4loD [Occ=Once!] ->
                    case y#_s4loD of wild2_s4loE {
                      __DEFAULT ->
                          case remInt# [x#_s4loB wild2_s4loE] of wild3_s4loF {
                            __DEFAULT ->
                                case narrow32Int# [wild3_s4loF] of sat_s4loG {
                                  __DEFAULT -> GHC.Int.I32# [sat_s4loG];
                                };
                          };
                      -1# -> GHC.Int.$fBitsInt6;
                      0# -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Int.$w$cdiv1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Str=<S,U><S,1*U>, Unf=OtherCon []] =
    [] \r [ww_s4loH ww1_s4loI]
        case ww1_s4loI of wild_s4loJ {
          __DEFAULT ->
              case GHC.Classes.divInt# ww_s4loH wild_s4loJ of wild1_s4loK {
                __DEFAULT -> narrow32Int# [wild1_s4loK];
              };
          -1# ->
              case ww_s4loH of wild1_s4loL {
                __DEFAULT ->
                    case GHC.Classes.divInt# wild1_s4loL -1# of wild2_s4loM {
                      __DEFAULT -> narrow32Int# [wild2_s4loM];
                    };
                -2147483648# -> GHC.Real.overflowError;
              };
          0# -> GHC.Real.divZeroError;
        };

GHC.Int.$fIntegralInt32_$cdiv [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> GHC.Int.Int32
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4loP w1_s4loQ]
        case w_s4loP of {
          GHC.Int.I32# ww1_s4loS [Occ=Once] ->
              case w1_s4loQ of {
                GHC.Int.I32# ww3_s4loU [Occ=Once] ->
                    case GHC.Int.$w$cdiv1 ww1_s4loS ww3_s4loU of ww4_s4loV {
                      __DEFAULT -> GHC.Int.I32# [ww4_s4loV];
                    };
              };
        };

GHC.Int.$fIntegralInt32_$cmod [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> GHC.Int.Int32
[GblId, Arity=2, Str=<S,1*U(U)><S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [w_s4loW w1_s4loX]
        case w_s4loW of {
          GHC.Int.I32# ww1_s4loZ [Occ=Once] ->
              case w1_s4loX of {
                GHC.Int.I32# ww3_s4lp1 [Occ=Once!] ->
                    case ww3_s4lp1 of wild_s4lp2 {
                      __DEFAULT ->
                          case GHC.Classes.modInt# ww1_s4loZ wild_s4lp2 of wild1_s4lp3 {
                            __DEFAULT ->
                                case narrow32Int# [wild1_s4lp3] of sat_s4lp4 {
                                  __DEFAULT -> GHC.Int.I32# [sat_s4lp4];
                                };
                          };
                      -1# -> GHC.Int.$fBitsInt6;
                      0# -> GHC.Real.divZeroError;
                    };
              };
        };

lvl8_r4kPz :: (GHC.Int.Int32, GHC.Int.Int32)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Real.overflowError GHC.Int.$fBitsInt6];

GHC.Int.$fIntegralInt32_$cquotRem [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> (GHC.Int.Int32, GHC.Int.Int32)
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4lp6 w1_s4lp7]
        case w_s4lp6 of {
          GHC.Int.I32# ww1_s4lp9 [Occ=Once*] ->
              case w1_s4lp7 of {
                GHC.Int.I32# ww3_s4lpb [Occ=Once!] ->
                    case ww3_s4lpb of wild_s4lpc {
                      __DEFAULT ->
                          case quotRemInt# [ww1_s4lp9 wild_s4lpc] of {
                            (#,#) ipv_s4lpe [Occ=Once] ipv1_s4lpf [Occ=Once] ->
                                case narrow32Int# [ipv1_s4lpf] of sat_s4lpi {
                                  __DEFAULT ->
                                      let {
                                        sat_s4lpj [Occ=Once] :: GHC.Int.Int32
                                        [LclId] =
                                            CCCS GHC.Int.I32#! [sat_s4lpi];
                                      } in 
                                        case narrow32Int# [ipv_s4lpe] of sat_s4lpg {
                                          __DEFAULT ->
                                              let {
                                                sat_s4lph [Occ=Once] :: GHC.Int.Int32
                                                [LclId] =
                                                    CCCS GHC.Int.I32#! [sat_s4lpg];
                                              } in  (,) [sat_s4lph sat_s4lpj];
                                        };
                                };
                          };
                      -1# ->
                          case ww1_s4lp9 of wild1_s4lpk {
                            __DEFAULT ->
                                case quotRemInt# [wild1_s4lpk -1#] of {
                                  (#,#) ipv_s4lpm [Occ=Once] ipv1_s4lpn [Occ=Once] ->
                                      case narrow32Int# [ipv1_s4lpn] of sat_s4lpq {
                                        __DEFAULT ->
                                            let {
                                              sat_s4lpr [Occ=Once] :: GHC.Int.Int32
                                              [LclId] =
                                                  CCCS GHC.Int.I32#! [sat_s4lpq];
                                            } in 
                                              case narrow32Int# [ipv_s4lpm] of sat_s4lpo {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s4lpp [Occ=Once] :: GHC.Int.Int32
                                                      [LclId] =
                                                          CCCS GHC.Int.I32#! [sat_s4lpo];
                                                    } in  (,) [sat_s4lpp sat_s4lpr];
                                              };
                                      };
                                };
                            -2147483648# -> lvl8_r4kPz;
                          };
                      0# -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Int.$w$cdivMod1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int#
     -> GHC.Prim.Int# -> (# GHC.Int.Int32, GHC.Int.Int32 #)
[GblId, Arity=2, Str=<S,U><S,1*U>, Unf=OtherCon []] =
    [] \r [ww_s4lpt ww1_s4lpu]
        case ww1_s4lpu of wild_s4lpv {
          __DEFAULT ->
              let-no-escape {
                $j_s4lpw [Occ=Once*T[0], Dmd=<L,1*U(U,U)>]
                  :: (# GHC.Int.Int32, GHC.Int.Int32 #)
                [LclId[JoinId(0)], Unf=OtherCon []] =
                    [ww_s4lpt wild_s4lpv] \r []
                        case ># [ww_s4lpt 0#] of {
                          __DEFAULT ->
                              case <# [ww_s4lpt 0#] of {
                                __DEFAULT ->
                                    case quotRemInt# [ww_s4lpt wild_s4lpv] of {
                                      (#,#) ipv_s4lpA [Occ=Once] ipv1_s4lpB [Occ=Once] ->
                                          case narrow32Int# [ipv1_s4lpB] of sat_s4lpE {
                                            __DEFAULT ->
                                                let {
                                                  sat_s4lpF [Occ=Once] :: GHC.Int.Int32
                                                  [LclId] =
                                                      CCCS GHC.Int.I32#! [sat_s4lpE];
                                                } in 
                                                  case narrow32Int# [ipv_s4lpA] of sat_s4lpC {
                                                    __DEFAULT ->
                                                        let {
                                                          sat_s4lpD [Occ=Once] :: GHC.Int.Int32
                                                          [LclId] =
                                                              CCCS GHC.Int.I32#! [sat_s4lpC];
                                                        } in  (#,#) [sat_s4lpD sat_s4lpF];
                                                  };
                                          };
                                    };
                                1# ->
                                    case ># [wild_s4lpv 0#] of {
                                      __DEFAULT ->
                                          case quotRemInt# [ww_s4lpt wild_s4lpv] of {
                                            (#,#) ipv_s4lpI [Occ=Once] ipv1_s4lpJ [Occ=Once] ->
                                                case narrow32Int# [ipv1_s4lpJ] of sat_s4lpM {
                                                  __DEFAULT ->
                                                      let {
                                                        sat_s4lpN [Occ=Once] :: GHC.Int.Int32
                                                        [LclId] =
                                                            CCCS GHC.Int.I32#! [sat_s4lpM];
                                                      } in 
                                                        case narrow32Int# [ipv_s4lpI] of sat_s4lpK {
                                                          __DEFAULT ->
                                                              let {
                                                                sat_s4lpL [Occ=Once]
                                                                  :: GHC.Int.Int32
                                                                [LclId] =
                                                                    CCCS GHC.Int.I32#! [sat_s4lpK];
                                                              } in  (#,#) [sat_s4lpL sat_s4lpN];
                                                        };
                                                };
                                          };
                                      1# ->
                                          case +# [ww_s4lpt 1#] of sat_s4lpO {
                                            __DEFAULT ->
                                                case quotRemInt# [sat_s4lpO wild_s4lpv] of {
                                                  (#,#) ipv_s4lpQ [Occ=Once]
                                                        ipv1_s4lpR [Occ=Once] ->
                                                      case +# [ipv1_s4lpR wild_s4lpv] of sat_s4lpV {
                                                        __DEFAULT ->
                                                            case -# [sat_s4lpV 1#] of sat_s4lpW {
                                                              __DEFAULT ->
                                                                  case
                                                                      narrow32Int# [sat_s4lpW]
                                                                  of
                                                                  sat_s4lpX
                                                                  { __DEFAULT ->
                                                                        let {
                                                                          sat_s4lpY [Occ=Once]
                                                                            :: GHC.Int.Int32
                                                                          [LclId] =
                                                                              CCCS GHC.Int.I32#! [sat_s4lpX];
                                                                        } in 
                                                                          case
                                                                              -# [ipv_s4lpQ 1#]
                                                                          of
                                                                          sat_s4lpS
                                                                          { __DEFAULT ->
                                                                                case
                                                                                    narrow32Int# [sat_s4lpS]
                                                                                of
                                                                                sat_s4lpT
                                                                                { __DEFAULT ->
                                                                                      let {
                                                                                        sat_s4lpU [Occ=Once]
                                                                                          :: GHC.Int.Int32
                                                                                        [LclId] =
                                                                                            CCCS GHC.Int.I32#! [sat_s4lpT];
                                                                                      } in 
                                                                                        (#,#) [sat_s4lpU
                                                                                               sat_s4lpY];
                                                                                };
                                                                          };
                                                                  };
                                                            };
                                                      };
                                                };
                                          };
                                    };
                              };
                          1# ->
                              case <# [wild_s4lpv 0#] of {
                                __DEFAULT ->
                                    case <# [ww_s4lpt 0#] of {
                                      __DEFAULT ->
                                          case quotRemInt# [ww_s4lpt wild_s4lpv] of {
                                            (#,#) ipv_s4lq2 [Occ=Once] ipv1_s4lq3 [Occ=Once] ->
                                                case narrow32Int# [ipv1_s4lq3] of sat_s4lq6 {
                                                  __DEFAULT ->
                                                      let {
                                                        sat_s4lq7 [Occ=Once] :: GHC.Int.Int32
                                                        [LclId] =
                                                            CCCS GHC.Int.I32#! [sat_s4lq6];
                                                      } in 
                                                        case narrow32Int# [ipv_s4lq2] of sat_s4lq4 {
                                                          __DEFAULT ->
                                                              let {
                                                                sat_s4lq5 [Occ=Once]
                                                                  :: GHC.Int.Int32
                                                                [LclId] =
                                                                    CCCS GHC.Int.I32#! [sat_s4lq4];
                                                              } in  (#,#) [sat_s4lq5 sat_s4lq7];
                                                        };
                                                };
                                          };
                                      1# ->
                                          case ># [wild_s4lpv 0#] of {
                                            __DEFAULT ->
                                                case quotRemInt# [ww_s4lpt wild_s4lpv] of {
                                                  (#,#) ipv_s4lqa [Occ=Once]
                                                        ipv1_s4lqb [Occ=Once] ->
                                                      case narrow32Int# [ipv1_s4lqb] of sat_s4lqe {
                                                        __DEFAULT ->
                                                            let {
                                                              sat_s4lqf [Occ=Once] :: GHC.Int.Int32
                                                              [LclId] =
                                                                  CCCS GHC.Int.I32#! [sat_s4lqe];
                                                            } in 
                                                              case
                                                                  narrow32Int# [ipv_s4lqa]
                                                              of
                                                              sat_s4lqc
                                                              { __DEFAULT ->
                                                                    let {
                                                                      sat_s4lqd [Occ=Once]
                                                                        :: GHC.Int.Int32
                                                                      [LclId] =
                                                                          CCCS GHC.Int.I32#! [sat_s4lqc];
                                                                    } in 
                                                                      (#,#) [sat_s4lqd sat_s4lqf];
                                                              };
                                                      };
                                                };
                                            1# ->
                                                case +# [ww_s4lpt 1#] of sat_s4lqg {
                                                  __DEFAULT ->
                                                      case quotRemInt# [sat_s4lqg wild_s4lpv] of {
                                                        (#,#) ipv_s4lqi [Occ=Once]
                                                              ipv1_s4lqj [Occ=Once] ->
                                                            case
                                                                +# [ipv1_s4lqj wild_s4lpv]
                                                            of
                                                            sat_s4lqn
                                                            { __DEFAULT ->
                                                                  case
                                                                      -# [sat_s4lqn 1#]
                                                                  of
                                                                  sat_s4lqo
                                                                  { __DEFAULT ->
                                                                        case
                                                                            narrow32Int# [sat_s4lqo]
                                                                        of
                                                                        sat_s4lqp
                                                                        { __DEFAULT ->
                                                                              let {
                                                                                sat_s4lqq [Occ=Once]
                                                                                  :: GHC.Int.Int32
                                                                                [LclId] =
                                                                                    CCCS GHC.Int.I32#! [sat_s4lqp];
                                                                              } in 
                                                                                case
                                                                                    -# [ipv_s4lqi
                                                                                        1#]
                                                                                of
                                                                                sat_s4lqk
                                                                                { __DEFAULT ->
                                                                                      case
                                                                                          narrow32Int# [sat_s4lqk]
                                                                                      of
                                                                                      sat_s4lql
                                                                                      { __DEFAULT ->
                                                                                            let {
                                                                                              sat_s4lqm [Occ=Once]
                                                                                                :: GHC.Int.Int32
                                                                                              [LclId] =
                                                                                                  CCCS GHC.Int.I32#! [sat_s4lql];
                                                                                            } in 
                                                                                              (#,#) [sat_s4lqm
                                                                                                     sat_s4lqq];
                                                                                      };
                                                                                };
                                                                        };
                                                                  };
                                                            };
                                                      };
                                                };
                                          };
                                    };
                                1# ->
                                    case -# [ww_s4lpt 1#] of sat_s4lqr {
                                      __DEFAULT ->
                                          case quotRemInt# [sat_s4lqr wild_s4lpv] of {
                                            (#,#) ipv_s4lqt [Occ=Once] ipv1_s4lqu [Occ=Once] ->
                                                case +# [ipv1_s4lqu wild_s4lpv] of sat_s4lqy {
                                                  __DEFAULT ->
                                                      case +# [sat_s4lqy 1#] of sat_s4lqz {
                                                        __DEFAULT ->
                                                            case
                                                                narrow32Int# [sat_s4lqz]
                                                            of
                                                            sat_s4lqA
                                                            { __DEFAULT ->
                                                                  let {
                                                                    sat_s4lqB [Occ=Once]
                                                                      :: GHC.Int.Int32
                                                                    [LclId] =
                                                                        CCCS GHC.Int.I32#! [sat_s4lqA];
                                                                  } in 
                                                                    case
                                                                        -# [ipv_s4lqt 1#]
                                                                    of
                                                                    sat_s4lqv
                                                                    { __DEFAULT ->
                                                                          case
                                                                              narrow32Int# [sat_s4lqv]
                                                                          of
                                                                          sat_s4lqw
                                                                          { __DEFAULT ->
                                                                                let {
                                                                                  sat_s4lqx [Occ=Once]
                                                                                    :: GHC.Int.Int32
                                                                                  [LclId] =
                                                                                      CCCS GHC.Int.I32#! [sat_s4lqw];
                                                                                } in 
                                                                                  (#,#) [sat_s4lqx
                                                                                         sat_s4lqB];
                                                                          };
                                                                    };
                                                            };
                                                      };
                                                };
                                          };
                                    };
                              };
                        };
              } in 
                case wild_s4lpv of {
                  __DEFAULT -> $j_s4lpw;
                  -1# ->
                      case ww_s4lpt of {
                        __DEFAULT -> $j_s4lpw;
                        -2147483648# -> (#,#) [GHC.Real.overflowError GHC.Int.$fBitsInt6];
                      };
                };
          0# -> GHC.Real.divZeroError;
        };

GHC.Int.$fIntegralInt32_$cdivMod [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> (GHC.Int.Int32, GHC.Int.Int32)
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4lqF w1_s4lqG]
        case w_s4lqF of {
          GHC.Int.I32# ww1_s4lqI [Occ=Once] ->
              case w1_s4lqG of {
                GHC.Int.I32# ww3_s4lqK [Occ=Once] ->
                    case GHC.Int.$w$cdivMod1 ww1_s4lqI ww3_s4lqK of {
                      (#,#) ww5_s4lqM [Occ=Once] ww6_s4lqN [Occ=Once] ->
                          (,) [ww5_s4lqM ww6_s4lqN];
                    };
              };
        };

GHC.Int.$fRealInt32_$ctoRational [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int32 -> GHC.Real.Rational
[GblId, Arity=1, Str=<S(S),1*U(U)>m, Unf=OtherCon []] =
    [] \r [w_s4lqO]
        case w_s4lqO of {
          GHC.Int.I32# ww1_s4lqQ [Occ=Once] ->
              case GHC.Integer.Type.smallInteger ww1_s4lqQ of sat_s4lqR {
                __DEFAULT ->
                    case
                        GHC.Integer.Type.timesInteger sat_s4lqR GHC.Int.$fRealInt1
                    of
                    sat_s4lqS
                    { __DEFAULT ->
                          case GHC.Real.$w$sreduce sat_s4lqS GHC.Int.$fRealInt1 of {
                            (#,#) ww3_s4lqU [Occ=Once] ww4_s4lqV [Occ=Once] ->
                                GHC.Real.:% [ww3_s4lqU ww4_s4lqV];
                          };
                    };
              };
        };

GHC.Int.$fRealInt32 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Real.Real GHC.Int.Int32
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Real.C:Real! [GHC.Int.$fNumInt32
                                    GHC.Int.$fOrdInt32
                                    GHC.Int.$fRealInt32_$ctoRational];

GHC.Int.$fIntegralInt32 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Real.Integral GHC.Int.Int32
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Real.C:Integral! [GHC.Int.$fRealInt32
                                        GHC.Int.$fEnumInt32
                                        GHC.Int.$fIntegralInt32_$cquot
                                        GHC.Int.$fIntegralInt32_$crem
                                        GHC.Int.$fIntegralInt32_$cdiv
                                        GHC.Int.$fIntegralInt32_$cmod
                                        GHC.Int.$fIntegralInt32_$cquotRem
                                        GHC.Int.$fIntegralInt32_$cdivMod
                                        GHC.Int.$fIntegralInt32_$ctoInteger];

GHC.Int.$fIxInt32_$crange
  :: (GHC.Int.Int32, GHC.Int.Int32) -> [GHC.Int.Int32]
[GblId,
 Arity=1,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>,
 Unf=OtherCon []] =
    [] \r [ds_s4lqW]
        case ds_s4lqW of {
          (,) m_s4lqY [Occ=Once] n_s4lqZ [Occ=Once] ->
              GHC.Int.$fEnumInt32_$cenumFromTo m_s4lqY n_s4lqZ;
        };

GHC.Int.$fIxInt32_$cunsafeIndex
  :: (GHC.Int.Int32, GHC.Int.Int32) -> GHC.Int.Int32 -> GHC.Types.Int
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S(S)L),1*U(1*U(U),A)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4lr0 i_s4lr1]
        case ds_s4lr0 of {
          (,) m_s4lr3 [Occ=Once!] _ [Occ=Dead] ->
              case i_s4lr1 of {
                GHC.Int.I32# x#_s4lr6 [Occ=Once] ->
                    case m_s4lr3 of {
                      GHC.Int.I32# x#1_s4lr8 [Occ=Once] ->
                          case -# [x#_s4lr6 x#1_s4lr8] of sat_s4lr9 {
                            __DEFAULT -> GHC.Types.I# [sat_s4lr9];
                          };
                    };
              };
        };

GHC.Int.$fIxInt32_$crangeSize
  :: (GHC.Int.Int32, GHC.Int.Int32) -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>m,
 Unf=OtherCon []] =
    [] \r [b_s4lra]
        case b_s4lra of {
          (,) _l_s4lrc [Occ=Once!] h_s4lrd [Occ=Once!] ->
              case _l_s4lrc of {
                GHC.Int.I32# x_s4lrf ->
                    case h_s4lrd of {
                      GHC.Int.I32# y_s4lrh ->
                          case <=# [x_s4lrf y_s4lrh] of {
                            __DEFAULT -> GHC.Int.$fIxInt1;
                            1# ->
                                case -# [y_s4lrh x_s4lrf] of sat_s4lrj {
                                  __DEFAULT ->
                                      case +# [sat_s4lrj 1#] of sat_s4lrk {
                                        __DEFAULT -> GHC.Types.I# [sat_s4lrk];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fIxInt32_$cunsafeRangeSize
  :: (GHC.Int.Int32, GHC.Int.Int32) -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>m,
 Unf=OtherCon []] =
    [] \r [b_s4lrl]
        case b_s4lrl of {
          (,) _l_s4lrn [Occ=Once!] h_s4lro [Occ=Once!] ->
              case h_s4lro of {
                GHC.Int.I32# x#_s4lrq [Occ=Once] ->
                    case _l_s4lrn of {
                      GHC.Int.I32# x#1_s4lrs [Occ=Once] ->
                          case -# [x#_s4lrq x#1_s4lrs] of sat_s4lrt {
                            __DEFAULT ->
                                case +# [sat_s4lrt 1#] of sat_s4lru {
                                  __DEFAULT -> GHC.Types.I# [sat_s4lru];
                                };
                          };
                    };
              };
        };

GHC.Int.$fIxInt32_$cindex [InlPrag=INLINE (sat-args=2)]
  :: (GHC.Int.Int32, GHC.Int.Int32) -> GHC.Int.Int32 -> GHC.Types.Int
[GblId,
 Arity=2,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s4lrv eta1_s4lrw]
        case eta_s4lrv of {
          (,) m_s4lry [Occ=Once!] n_s4lrz [Occ=Once!] ->
              case m_s4lry of {
                GHC.Int.I32# x_s4lrB ->
                    case eta1_s4lrw of {
                      GHC.Int.I32# y_s4lrD ->
                          case <=# [x_s4lrB y_s4lrD] of {
                            __DEFAULT -> GHC.Arr.hopelessIndexError;
                            1# ->
                                case n_s4lrz of {
                                  GHC.Int.I32# y1_s4lrG [Occ=Once] ->
                                      case <=# [y_s4lrD y1_s4lrG] of {
                                        __DEFAULT -> GHC.Arr.hopelessIndexError;
                                        1# ->
                                            case -# [y_s4lrD x_s4lrB] of sat_s4lrI {
                                              __DEFAULT -> GHC.Types.I# [sat_s4lrI];
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fIxInt32 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Arr.Ix GHC.Int.Int32
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Arr.C:Ix! [GHC.Int.$fOrdInt32
                                 GHC.Int.$fIxInt32_$crange
                                 GHC.Int.$fIxInt32_$cindex
                                 GHC.Int.$fIxInt32_$cunsafeIndex
                                 GHC.Int.$fIxInt32_$cinRange
                                 GHC.Int.$fIxInt32_$crangeSize
                                 GHC.Int.$fIxInt32_$cunsafeRangeSize];

GHC.Int.eqInt64 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4lrJ ds1_s4lrK]
        case ds_s4lrJ of {
          GHC.Int.I64# x_s4lrM [Occ=Once] ->
              case ds1_s4lrK of {
                GHC.Int.I64# y_s4lrO [Occ=Once] ->
                    case ==# [x_s4lrM y_s4lrO] of sat_s4lrP {
                      __DEFAULT -> tagToEnum# [sat_s4lrP];
                    };
              };
        };

GHC.Int.$fEqInt64 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.Int.Int64
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.Int.eqInt64 GHC.Int.neInt64];

GHC.Int.gtInt64 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4lrQ ds1_s4lrR]
        case ds_s4lrQ of {
          GHC.Int.I64# x_s4lrT [Occ=Once] ->
              case ds1_s4lrR of {
                GHC.Int.I64# y_s4lrV [Occ=Once] ->
                    case ># [x_s4lrT y_s4lrV] of sat_s4lrW {
                      __DEFAULT -> tagToEnum# [sat_s4lrW];
                    };
              };
        };

GHC.Int.geInt64 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4lrX ds1_s4lrY]
        case ds_s4lrX of {
          GHC.Int.I64# x_s4ls0 [Occ=Once] ->
              case ds1_s4lrY of {
                GHC.Int.I64# y_s4ls2 [Occ=Once] ->
                    case >=# [x_s4ls0 y_s4ls2] of sat_s4ls3 {
                      __DEFAULT -> tagToEnum# [sat_s4ls3];
                    };
              };
        };

GHC.Int.ltInt64 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4ls4 ds1_s4ls5]
        case ds_s4ls4 of {
          GHC.Int.I64# x_s4ls7 [Occ=Once] ->
              case ds1_s4ls5 of {
                GHC.Int.I64# y_s4ls9 [Occ=Once] ->
                    case <# [x_s4ls7 y_s4ls9] of sat_s4lsa {
                      __DEFAULT -> tagToEnum# [sat_s4lsa];
                    };
              };
        };

GHC.Int.leInt64 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4lsb ds1_s4lsc]
        case ds_s4lsb of {
          GHC.Int.I64# x_s4lse [Occ=Once] ->
              case ds1_s4lsc of {
                GHC.Int.I64# y_s4lsg [Occ=Once] ->
                    case <=# [x_s4lse y_s4lsg] of sat_s4lsh {
                      __DEFAULT -> tagToEnum# [sat_s4lsh];
                    };
              };
        };

GHC.Int.$fOrdInt64_$ccompare
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [x_s4lsi y_s4lsj]
        case x_s4lsi of {
          GHC.Int.I64# x1_s4lsl ->
              case y_s4lsj of {
                GHC.Int.I64# y1_s4lsn ->
                    case ==# [x1_s4lsl y1_s4lsn] of {
                      __DEFAULT ->
                          case <=# [x1_s4lsl y1_s4lsn] of {
                            __DEFAULT -> GHC.Types.GT [];
                            1# -> GHC.Types.LT [];
                          };
                      1# -> GHC.Types.EQ [];
                    };
              };
        };

GHC.Int.$fOrdInt64_$cmax
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> GHC.Int.Int64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s4lsq y_s4lsr]
        case x_s4lsq of wild_s4lss {
          GHC.Int.I64# x1_s4lst [Occ=Once] ->
              case y_s4lsr of wild1_s4lsu {
                GHC.Int.I64# y1_s4lsv [Occ=Once] ->
                    case <=# [x1_s4lst y1_s4lsv] of {
                      __DEFAULT -> wild_s4lss;
                      1# -> wild1_s4lsu;
                    };
              };
        };

GHC.Int.$fOrdInt64_$cmin
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> GHC.Int.Int64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s4lsx y_s4lsy]
        case x_s4lsx of wild_s4lsz {
          GHC.Int.I64# x1_s4lsA [Occ=Once] ->
              case y_s4lsy of wild1_s4lsB {
                GHC.Int.I64# y1_s4lsC [Occ=Once] ->
                    case <=# [x1_s4lsA y1_s4lsC] of {
                      __DEFAULT -> wild1_s4lsB;
                      1# -> wild_s4lsz;
                    };
              };
        };

GHC.Int.$fOrdInt64 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord GHC.Int.Int64
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.Int.$fEqInt64
                                      GHC.Int.$fOrdInt64_$ccompare
                                      GHC.Int.ltInt64
                                      GHC.Int.leInt64
                                      GHC.Int.gtInt64
                                      GHC.Int.geInt64
                                      GHC.Int.$fOrdInt64_$cmax
                                      GHC.Int.$fOrdInt64_$cmin];

GHC.Int.$fIxInt64_$cinRange
  :: (GHC.Int.Int64, GHC.Int.Int64)
     -> GHC.Int.Int64 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S(S)L),1*U(1*U(U),1*U(U))><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4lsE i_s4lsF]
        case ds_s4lsE of {
          (,) m_s4lsH [Occ=Once!] n_s4lsI [Occ=Once!] ->
              case m_s4lsH of {
                GHC.Int.I64# x_s4lsK [Occ=Once] ->
                    case i_s4lsF of {
                      GHC.Int.I64# y_s4lsM ->
                          case <=# [x_s4lsK y_s4lsM] of {
                            __DEFAULT -> GHC.Types.False [];
                            1# ->
                                case n_s4lsI of {
                                  GHC.Int.I64# y1_s4lsP [Occ=Once] ->
                                      case <=# [y_s4lsM y1_s4lsP] of sat_s4lsQ {
                                        __DEFAULT -> tagToEnum# [sat_s4lsQ];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fNumInt5 :: GHC.Int.Int64
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I64#! [1#];

GHC.Int.$fNumInt64_$csignum :: GHC.Int.Int64 -> GHC.Int.Int64
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s4lsR]
        case x_s4lsR of {
          GHC.Int.I64# x1_s4lsT ->
              case ># [x1_s4lsT 0#] of {
                __DEFAULT ->
                    case x1_s4lsT of {
                      __DEFAULT -> GHC.Int.$fNumInt6;
                      0# -> GHC.Int.$fBitsInt10;
                    };
                1# -> GHC.Int.$fNumInt5;
              };
        };

GHC.Int.$fNumInt64_$cabs :: GHC.Int.Int64 -> GHC.Int.Int64
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s4lsW]
        case x_s4lsW of wild_s4lsX {
          GHC.Int.I64# x1_s4lsY ->
              case >=# [x1_s4lsY 0#] of {
                __DEFAULT ->
                    case negateInt# [x1_s4lsY] of sat_s4lt0 {
                      __DEFAULT -> GHC.Int.I64# [sat_s4lt0];
                    };
                1# -> wild_s4lsX;
              };
        };

GHC.Int.$fNumInt64 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Num.Num GHC.Int.Int64
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Num.C:Num! [GHC.Int.$fNumInt64_$c+
                                  GHC.Int.$fNumInt64_$c-
                                  GHC.Int.$fNumInt64_$c*
                                  GHC.Int.$fNumInt64_$cnegate
                                  GHC.Int.$fNumInt64_$cabs
                                  GHC.Int.$fNumInt64_$csignum
                                  GHC.Int.$fNumInt64_$cfromInteger];

GHC.Int.$fBitsInt9 :: GHC.Base.Maybe GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [GHC.Int.$fBitsInt7];

GHC.Int.$fBitsInt64_$cbitSizeMaybe
  :: GHC.Int.Int64 -> GHC.Base.Maybe GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>m2, Unf=OtherCon []] =
    [] \r [i_s4lt1] GHC.Int.$fBitsInt9;

GHC.Int.$fBitsInt64_$cbit [InlPrag=INLINE (sat-args=0)]
  :: GHC.Types.Int -> GHC.Int.Int64
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [i_s4lt2]
        case i_s4lt2 of {
          GHC.Types.I# i#_s4lt4 ->
              case >=# [i#_s4lt4 64#] of {
                __DEFAULT ->
                    case uncheckedIShiftL# [1# i#_s4lt4] of sat_s4lt6 {
                      __DEFAULT -> GHC.Int.I64# [sat_s4lt6];
                    };
                1# -> GHC.Int.$fBitsInt10;
              };
        };

GHC.Int.$fBitsInt64_$ctestBit [InlPrag=INLINE (sat-args=0)]
  :: GHC.Int.Int64 -> GHC.Types.Int -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [x_s4lt7 i_s4lt8]
        case x_s4lt7 of {
          GHC.Int.I64# x#_s4lta [Occ=Once] ->
              case i_s4lt8 of {
                GHC.Types.I# i#_s4ltc ->
                    case >=# [i#_s4ltc 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftL# [1# i#_s4ltc] of sat_s4ltf {
                            __DEFAULT ->
                                case int2Word# [sat_s4ltf] of sat_s4ltg {
                                  __DEFAULT ->
                                      case int2Word# [x#_s4lta] of sat_s4lte {
                                        __DEFAULT ->
                                            case and# [sat_s4lte sat_s4ltg] of sat_s4lth {
                                              __DEFAULT ->
                                                  case word2Int# [sat_s4lth] of {
                                                    __DEFAULT -> GHC.Types.True [];
                                                    0# -> GHC.Types.False [];
                                                  };
                                            };
                                      };
                                };
                          };
                      1# -> GHC.Types.False [];
                    };
              };
        };

GHC.Int.$fBitsInt64_$crotateR [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int64 -> GHC.Types.Int -> GHC.Int.Int64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s4ltj eta1_s4ltk]
        case eta_s4ltj of wild_s4ltl {
          GHC.Int.I64# x#_s4ltm [Occ=Once] ->
              case eta1_s4ltk of {
                GHC.Types.I# x1_s4lto [Occ=Once] ->
                    case negateInt# [x1_s4lto] of sat_s4ltp {
                      __DEFAULT ->
                          case int2Word# [sat_s4ltp] of sat_s4ltq {
                            __DEFAULT ->
                                case and# [sat_s4ltq 63##] of sat_s4ltr {
                                  __DEFAULT ->
                                      case word2Int# [sat_s4ltr] of wild2_s4lts {
                                        __DEFAULT ->
                                            case int2Word# [x#_s4ltm] of x'#_s4ltt [Dmd=<S,U>] {
                                              __DEFAULT ->
                                                  case -# [64# wild2_s4lts] of sat_s4ltv {
                                                    __DEFAULT ->
                                                        case
                                                            uncheckedShiftRL# [x'#_s4ltt sat_s4ltv]
                                                        of
                                                        sat_s4ltw
                                                        { __DEFAULT ->
                                                              case
                                                                  uncheckedShiftL# [x'#_s4ltt
                                                                                    wild2_s4lts]
                                                              of
                                                              sat_s4ltu
                                                              { __DEFAULT ->
                                                                    case
                                                                        or# [sat_s4ltu sat_s4ltw]
                                                                    of
                                                                    sat_s4ltx
                                                                    { __DEFAULT ->
                                                                          case
                                                                              word2Int# [sat_s4ltx]
                                                                          of
                                                                          sat_s4lty
                                                                          { __DEFAULT ->
                                                                                GHC.Int.I64# [sat_s4lty];
                                                                          };
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                        0# -> wild_s4ltl;
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fBitsInt64_$ccomplementBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int64 -> GHC.Types.Int -> GHC.Int.Int64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s4ltz eta1_s4ltA]
        case eta_s4ltz of wild_s4ltB {
          GHC.Int.I64# x#_s4ltC [Occ=Once] ->
              case eta1_s4ltA of {
                GHC.Types.I# i#_s4ltE ->
                    case >=# [i#_s4ltE 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftL# [1# i#_s4ltE] of sat_s4ltH {
                            __DEFAULT ->
                                case int2Word# [sat_s4ltH] of sat_s4ltI {
                                  __DEFAULT ->
                                      case int2Word# [x#_s4ltC] of sat_s4ltG {
                                        __DEFAULT ->
                                            case xor# [sat_s4ltG sat_s4ltI] of sat_s4ltJ {
                                              __DEFAULT ->
                                                  case word2Int# [sat_s4ltJ] of sat_s4ltK {
                                                    __DEFAULT -> GHC.Int.I64# [sat_s4ltK];
                                                  };
                                            };
                                      };
                                };
                          };
                      1# -> wild_s4ltB;
                    };
              };
        };

GHC.Int.$fBitsInt64_$cclearBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int64 -> GHC.Types.Int -> GHC.Int.Int64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s4ltL eta1_s4ltM]
        case eta_s4ltL of {
          GHC.Int.I64# x#_s4ltO [Occ=Once*] ->
              case eta1_s4ltM of {
                GHC.Types.I# i#_s4ltQ ->
                    case >=# [i#_s4ltQ 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftL# [1# i#_s4ltQ] of sat_s4ltT {
                            __DEFAULT ->
                                case int2Word# [sat_s4ltT] of sat_s4ltU {
                                  __DEFAULT ->
                                      case xor# [sat_s4ltU 18446744073709551615##] of sat_s4ltV {
                                        __DEFAULT ->
                                            case int2Word# [x#_s4ltO] of sat_s4ltS {
                                              __DEFAULT ->
                                                  case and# [sat_s4ltS sat_s4ltV] of sat_s4ltW {
                                                    __DEFAULT ->
                                                        case word2Int# [sat_s4ltW] of sat_s4ltX {
                                                          __DEFAULT -> GHC.Int.I64# [sat_s4ltX];
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                      1# ->
                          case int2Word# [x#_s4ltO] of sat_s4ltY {
                            __DEFAULT ->
                                case and# [sat_s4ltY 18446744073709551615##] of sat_s4ltZ {
                                  __DEFAULT ->
                                      case word2Int# [sat_s4ltZ] of sat_s4lu0 {
                                        __DEFAULT -> GHC.Int.I64# [sat_s4lu0];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fBitsInt64_$csetBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int64 -> GHC.Types.Int -> GHC.Int.Int64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s4lu1 eta1_s4lu2]
        case eta_s4lu1 of wild_s4lu3 {
          GHC.Int.I64# x#_s4lu4 [Occ=Once] ->
              case eta1_s4lu2 of {
                GHC.Types.I# i#_s4lu6 ->
                    case >=# [i#_s4lu6 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftL# [1# i#_s4lu6] of sat_s4lu9 {
                            __DEFAULT ->
                                case int2Word# [sat_s4lu9] of sat_s4lua {
                                  __DEFAULT ->
                                      case int2Word# [x#_s4lu4] of sat_s4lu8 {
                                        __DEFAULT ->
                                            case or# [sat_s4lu8 sat_s4lua] of sat_s4lub {
                                              __DEFAULT ->
                                                  case word2Int# [sat_s4lub] of sat_s4luc {
                                                    __DEFAULT -> GHC.Int.I64# [sat_s4luc];
                                                  };
                                            };
                                      };
                                };
                          };
                      1# -> wild_s4lu3;
                    };
              };
        };

GHC.Int.$fBitsInt64_$crotateL [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int64 -> GHC.Types.Int -> GHC.Int.Int64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Int.$fBitsInt64_$crotate eta_B2 eta_B1;

GHC.Int.$fBitsInt64 [InlPrag=NOUSERINLINE CONLIKE]
  :: Data.Bits.Bits GHC.Int.Int64
[GblId[DFunId], Caf=NoCafRefs] =
    CCS_DONT_CARE Data.Bits.C:Bits! [GHC.Int.$fEqInt64
                                     GHC.Int.$fBitsInt64_$c.&.
                                     GHC.Int.$fBitsInt64_$c.|.
                                     GHC.Int.$fBitsInt64_$cxor
                                     GHC.Int.$fBitsInt64_$ccomplement
                                     GHC.Int.$fBitsInt64_$cshift
                                     GHC.Int.$fBitsInt64_$crotate
                                     GHC.Int.$fBitsInt10
                                     GHC.Int.$fBitsInt64_$cbit
                                     GHC.Int.$fBitsInt64_$csetBit
                                     GHC.Int.$fBitsInt64_$cclearBit
                                     GHC.Int.$fBitsInt64_$ccomplementBit
                                     GHC.Int.$fBitsInt64_$ctestBit
                                     GHC.Int.$fBitsInt64_$cbitSizeMaybe
                                     GHC.Int.$fBitsInt64_$cfiniteBitSize
                                     GHC.Int.$fBitsInt64_$cisSigned
                                     GHC.Int.$fBitsInt64_$cshiftL
                                     GHC.Int.$fBitsInt64_$cunsafeShiftL
                                     GHC.Int.$fBitsInt64_$cshiftR
                                     GHC.Int.$fBitsInt64_$cunsafeShiftR
                                     GHC.Int.$fBitsInt64_$crotateL
                                     GHC.Int.$fBitsInt64_$crotateR
                                     GHC.Int.$fBitsInt64_$cpopCount];

GHC.Int.$fFiniteBitsInt64 [InlPrag=NOUSERINLINE CONLIKE]
  :: Data.Bits.FiniteBits GHC.Int.Int64
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE Data.Bits.C:FiniteBits! [GHC.Int.$fBitsInt64
                                           GHC.Int.$fBitsInt64_$cfiniteBitSize
                                           GHC.Int.$fFiniteBitsInt64_$ccountLeadingZeros
                                           GHC.Int.$fFiniteBitsInt64_$ccountTrailingZeros];

GHC.Int.$fReadInt64_go [Occ=LoopBreaker]
  :: [(GHC.Types.Int, GHC.Base.String)]
     -> [(GHC.Int.Int64, GHC.Base.String)]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s4lud]
        case ds_s4lud of {
          [] -> [] [];
          : y_s4luf [Occ=Once!] ys_s4lug [Occ=Once] ->
              case y_s4luf of {
                (,) x_s4lui [Occ=Once!] r_s4luj [Occ=Once] ->
                    let {
                      sat_s4luo [Occ=Once] :: [(GHC.Int.Int64, GHC.Base.String)]
                      [LclId] =
                          [ys_s4lug] \u [] GHC.Int.$fReadInt64_go ys_s4lug; } in
                    let {
                      sat_s4lum [Occ=Once] :: GHC.Int.Int64
                      [LclId] =
                          [x_s4lui] \u []
                              case x_s4lui of {
                                GHC.Types.I# x#_s4lul [Occ=Once] -> GHC.Int.I64# [x#_s4lul];
                              }; } in
                    let {
                      sat_s4lun [Occ=Once] :: (GHC.Int.Int64, GHC.Base.String)
                      [LclId] =
                          CCCS (,)! [sat_s4lum r_s4luj];
                    } in  : [sat_s4lun sat_s4luo];
              };
        };

GHC.Int.$fReadInt64_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS GHC.Int.Int64
[GblId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [p_s4lup s_s4luq]
        case
            GHC.Read.$fReadInt_$sreadNumber
                GHC.Read.$fReadInt2
                p_s4lup
                Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
        of
        sat_s4lur
        { __DEFAULT ->
              case
                  Text.ParserCombinators.ReadP.run sat_s4lur s_s4luq
              of
              sat_s4lus
              { __DEFAULT -> GHC.Int.$fReadInt64_go sat_s4lus;
              };
        };

GHC.Int.$fReadInt10
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Int.Int64 -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,U><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [n_s4lut eta_s4luu]
        let {
          sat_s4luv [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS GHC.Int.Int64
          [LclId] =
              [n_s4lut] \r [eta_B1]
                  GHC.Int.$fReadInt64_$creadsPrec n_s4lut eta_B1;
        } in 
          case
              Text.ParserCombinators.ReadP.$wreadS_to_P sat_s4luv eta_s4luu
          of
          { Unit# ww1_s4lux [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s4lux];
          };

GHC.Int.$fReadInt9
  :: Text.ParserCombinators.ReadP.P [GHC.Int.Int64]
[GblId] =
    [] \u []
        GHC.Read.list
            GHC.Int.$fReadInt10
            GHC.Int.$fIxInt1
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Int.$fReadInt64_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.Int.Int64]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Int.$fReadInt9 eta_B1;

GHC.Int.$fReadInt7
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        ([GHC.Int.Int64] -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,A><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [n_s4luy w1_s4luz]
        case
            Text.ParserCombinators.ReadP.$wreadS_to_P
                GHC.Int.$fReadInt64_$creadList w1_s4luz
        of
        { Unit# ww1_s4luB [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s4luB];
        };

GHC.Int.$fReadInt64 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.Int.Int64
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Int.$fReadInt64_$creadsPrec
                                    GHC.Int.$fReadInt64_$creadList
                                    GHC.Int.$fReadInt10
                                    GHC.Int.$fReadInt7];

GHC.Int.$fIntegralInt64_$cquot [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> GHC.Int.Int64
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4luC w1_s4luD]
        case w_s4luC of {
          GHC.Int.I64# ww1_s4luF [Occ=Once*] ->
              case w1_s4luD of {
                GHC.Int.I64# ww3_s4luH [Occ=Once!] ->
                    case ww3_s4luH of wild_s4luI {
                      __DEFAULT ->
                          case quotInt# [ww1_s4luF wild_s4luI] of ww4_s4luJ {
                            __DEFAULT -> GHC.Int.I64# [ww4_s4luJ];
                          };
                      -1# ->
                          case ww1_s4luF of wild1_s4luK {
                            __DEFAULT ->
                                case quotInt# [wild1_s4luK -1#] of sat_s4luL {
                                  __DEFAULT -> GHC.Int.I64# [sat_s4luL];
                                };
                            -9223372036854775808# -> GHC.Real.overflowError;
                          };
                      0# -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Int.$fIntegralInt64_$crem
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> GHC.Int.Int64
[GblId, Arity=2, Str=<S,1*U(U)><S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [ds_s4luO y_s4luP]
        case ds_s4luO of {
          GHC.Int.I64# x#_s4luR [Occ=Once] ->
              case y_s4luP of {
                GHC.Int.I64# y#_s4luT [Occ=Once!] ->
                    case y#_s4luT of wild2_s4luU {
                      __DEFAULT ->
                          case remInt# [x#_s4luR wild2_s4luU] of wild3_s4luV {
                            __DEFAULT -> GHC.Int.I64# [wild3_s4luV];
                          };
                      -1# -> GHC.Int.$fBitsInt10;
                      0# -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Int.$w$cdiv2 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Str=<S,U><S,1*U>, Unf=OtherCon []] =
    [] \r [ww_s4luW ww1_s4luX]
        case ww1_s4luX of wild_s4luY {
          __DEFAULT -> GHC.Classes.divInt# ww_s4luW wild_s4luY;
          -1# ->
              case ww_s4luW of wild1_s4luZ {
                __DEFAULT -> GHC.Classes.divInt# wild1_s4luZ -1#;
                -9223372036854775808# -> GHC.Real.overflowError;
              };
          0# -> GHC.Real.divZeroError;
        };

GHC.Int.$fIntegralInt64_$cdiv [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> GHC.Int.Int64
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4lv2 w1_s4lv3]
        case w_s4lv2 of {
          GHC.Int.I64# ww1_s4lv5 [Occ=Once] ->
              case w1_s4lv3 of {
                GHC.Int.I64# ww3_s4lv7 [Occ=Once] ->
                    case GHC.Int.$w$cdiv2 ww1_s4lv5 ww3_s4lv7 of ww4_s4lv8 {
                      __DEFAULT -> GHC.Int.I64# [ww4_s4lv8];
                    };
              };
        };

GHC.Int.$fIntegralInt64_$cmod [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> GHC.Int.Int64
[GblId, Arity=2, Str=<S,1*U(U)><S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [w_s4lv9 w1_s4lva]
        case w_s4lv9 of {
          GHC.Int.I64# ww1_s4lvc [Occ=Once] ->
              case w1_s4lva of {
                GHC.Int.I64# ww3_s4lve [Occ=Once!] ->
                    case ww3_s4lve of wild_s4lvf {
                      __DEFAULT ->
                          case GHC.Classes.modInt# ww1_s4lvc wild_s4lvf of ww4_s4lvg {
                            __DEFAULT -> GHC.Int.I64# [ww4_s4lvg];
                          };
                      -1# -> GHC.Int.$fBitsInt10;
                      0# -> GHC.Real.divZeroError;
                    };
              };
        };

lvl9_r4kPA :: (GHC.Int.Int64, GHC.Int.Int64)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Real.overflowError GHC.Int.$fBitsInt10];

GHC.Int.$fIntegralInt64_$cquotRem [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> (GHC.Int.Int64, GHC.Int.Int64)
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4lvi w1_s4lvj]
        case w_s4lvi of {
          GHC.Int.I64# ww1_s4lvl [Occ=Once*] ->
              case w1_s4lvj of {
                GHC.Int.I64# ww3_s4lvn [Occ=Once!] ->
                    case ww3_s4lvn of wild_s4lvo {
                      __DEFAULT ->
                          case quotRemInt# [ww1_s4lvl wild_s4lvo] of {
                            (#,#) ipv_s4lvq [Occ=Once] ipv1_s4lvr [Occ=Once] ->
                                let {
                                  sat_s4lvt [Occ=Once] :: GHC.Int.Int64
                                  [LclId] =
                                      CCCS GHC.Int.I64#! [ipv1_s4lvr]; } in
                                let {
                                  sat_s4lvs [Occ=Once] :: GHC.Int.Int64
                                  [LclId] =
                                      CCCS GHC.Int.I64#! [ipv_s4lvq];
                                } in  (,) [sat_s4lvs sat_s4lvt];
                          };
                      -1# ->
                          case ww1_s4lvl of wild1_s4lvu {
                            __DEFAULT ->
                                case quotRemInt# [wild1_s4lvu -1#] of {
                                  (#,#) ipv_s4lvw [Occ=Once] ipv1_s4lvx [Occ=Once] ->
                                      let {
                                        sat_s4lvz [Occ=Once] :: GHC.Int.Int64
                                        [LclId] =
                                            CCCS GHC.Int.I64#! [ipv1_s4lvx]; } in
                                      let {
                                        sat_s4lvy [Occ=Once] :: GHC.Int.Int64
                                        [LclId] =
                                            CCCS GHC.Int.I64#! [ipv_s4lvw];
                                      } in  (,) [sat_s4lvy sat_s4lvz];
                                };
                            -9223372036854775808# -> lvl9_r4kPA;
                          };
                      0# -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Int.$w$cdivMod2 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int#
     -> GHC.Prim.Int# -> (# GHC.Int.Int64, GHC.Int.Int64 #)
[GblId, Arity=2, Str=<S,U><S,1*U>, Unf=OtherCon []] =
    [] \r [ww_s4lvB ww1_s4lvC]
        case ww1_s4lvC of wild_s4lvD {
          __DEFAULT ->
              let-no-escape {
                $j_s4lvE [Occ=Once*T[0], Dmd=<L,1*U(U,U)>]
                  :: (# GHC.Int.Int64, GHC.Int.Int64 #)
                [LclId[JoinId(0)], Unf=OtherCon []] =
                    [ww_s4lvB wild_s4lvD] \r []
                        case ># [ww_s4lvB 0#] of {
                          __DEFAULT ->
                              case <# [ww_s4lvB 0#] of {
                                __DEFAULT ->
                                    case quotRemInt# [ww_s4lvB wild_s4lvD] of {
                                      (#,#) ipv_s4lvI [Occ=Once] ipv1_s4lvJ [Occ=Once] ->
                                          let {
                                            sat_s4lvL [Occ=Once] :: GHC.Int.Int64
                                            [LclId] =
                                                CCCS GHC.Int.I64#! [ipv1_s4lvJ]; } in
                                          let {
                                            sat_s4lvK [Occ=Once] :: GHC.Int.Int64
                                            [LclId] =
                                                CCCS GHC.Int.I64#! [ipv_s4lvI];
                                          } in  (#,#) [sat_s4lvK sat_s4lvL];
                                    };
                                1# ->
                                    case ># [wild_s4lvD 0#] of {
                                      __DEFAULT ->
                                          case quotRemInt# [ww_s4lvB wild_s4lvD] of {
                                            (#,#) ipv_s4lvO [Occ=Once] ipv1_s4lvP [Occ=Once] ->
                                                let {
                                                  sat_s4lvR [Occ=Once] :: GHC.Int.Int64
                                                  [LclId] =
                                                      CCCS GHC.Int.I64#! [ipv1_s4lvP]; } in
                                                let {
                                                  sat_s4lvQ [Occ=Once] :: GHC.Int.Int64
                                                  [LclId] =
                                                      CCCS GHC.Int.I64#! [ipv_s4lvO];
                                                } in  (#,#) [sat_s4lvQ sat_s4lvR];
                                          };
                                      1# ->
                                          case +# [ww_s4lvB 1#] of sat_s4lvS {
                                            __DEFAULT ->
                                                case quotRemInt# [sat_s4lvS wild_s4lvD] of {
                                                  (#,#) ipv_s4lvU [Occ=Once]
                                                        ipv1_s4lvV [Occ=Once] ->
                                                      case +# [ipv1_s4lvV wild_s4lvD] of sat_s4lvY {
                                                        __DEFAULT ->
                                                            case -# [sat_s4lvY 1#] of sat_s4lvZ {
                                                              __DEFAULT ->
                                                                  let {
                                                                    sat_s4lw0 [Occ=Once]
                                                                      :: GHC.Int.Int64
                                                                    [LclId] =
                                                                        CCCS GHC.Int.I64#! [sat_s4lvZ];
                                                                  } in 
                                                                    case
                                                                        -# [ipv_s4lvU 1#]
                                                                    of
                                                                    sat_s4lvW
                                                                    { __DEFAULT ->
                                                                          let {
                                                                            sat_s4lvX [Occ=Once]
                                                                              :: GHC.Int.Int64
                                                                            [LclId] =
                                                                                CCCS GHC.Int.I64#! [sat_s4lvW];
                                                                          } in 
                                                                            (#,#) [sat_s4lvX
                                                                                   sat_s4lw0];
                                                                    };
                                                            };
                                                      };
                                                };
                                          };
                                    };
                              };
                          1# ->
                              case <# [wild_s4lvD 0#] of {
                                __DEFAULT ->
                                    case <# [ww_s4lvB 0#] of {
                                      __DEFAULT ->
                                          case quotRemInt# [ww_s4lvB wild_s4lvD] of {
                                            (#,#) ipv_s4lw4 [Occ=Once] ipv1_s4lw5 [Occ=Once] ->
                                                let {
                                                  sat_s4lw7 [Occ=Once] :: GHC.Int.Int64
                                                  [LclId] =
                                                      CCCS GHC.Int.I64#! [ipv1_s4lw5]; } in
                                                let {
                                                  sat_s4lw6 [Occ=Once] :: GHC.Int.Int64
                                                  [LclId] =
                                                      CCCS GHC.Int.I64#! [ipv_s4lw4];
                                                } in  (#,#) [sat_s4lw6 sat_s4lw7];
                                          };
                                      1# ->
                                          case ># [wild_s4lvD 0#] of {
                                            __DEFAULT ->
                                                case quotRemInt# [ww_s4lvB wild_s4lvD] of {
                                                  (#,#) ipv_s4lwa [Occ=Once]
                                                        ipv1_s4lwb [Occ=Once] ->
                                                      let {
                                                        sat_s4lwd [Occ=Once] :: GHC.Int.Int64
                                                        [LclId] =
                                                            CCCS GHC.Int.I64#! [ipv1_s4lwb]; } in
                                                      let {
                                                        sat_s4lwc [Occ=Once] :: GHC.Int.Int64
                                                        [LclId] =
                                                            CCCS GHC.Int.I64#! [ipv_s4lwa];
                                                      } in  (#,#) [sat_s4lwc sat_s4lwd];
                                                };
                                            1# ->
                                                case +# [ww_s4lvB 1#] of sat_s4lwe {
                                                  __DEFAULT ->
                                                      case quotRemInt# [sat_s4lwe wild_s4lvD] of {
                                                        (#,#) ipv_s4lwg [Occ=Once]
                                                              ipv1_s4lwh [Occ=Once] ->
                                                            case
                                                                +# [ipv1_s4lwh wild_s4lvD]
                                                            of
                                                            sat_s4lwk
                                                            { __DEFAULT ->
                                                                  case
                                                                      -# [sat_s4lwk 1#]
                                                                  of
                                                                  sat_s4lwl
                                                                  { __DEFAULT ->
                                                                        let {
                                                                          sat_s4lwm [Occ=Once]
                                                                            :: GHC.Int.Int64
                                                                          [LclId] =
                                                                              CCCS GHC.Int.I64#! [sat_s4lwl];
                                                                        } in 
                                                                          case
                                                                              -# [ipv_s4lwg 1#]
                                                                          of
                                                                          sat_s4lwi
                                                                          { __DEFAULT ->
                                                                                let {
                                                                                  sat_s4lwj [Occ=Once]
                                                                                    :: GHC.Int.Int64
                                                                                  [LclId] =
                                                                                      CCCS GHC.Int.I64#! [sat_s4lwi];
                                                                                } in 
                                                                                  (#,#) [sat_s4lwj
                                                                                         sat_s4lwm];
                                                                          };
                                                                  };
                                                            };
                                                      };
                                                };
                                          };
                                    };
                                1# ->
                                    case -# [ww_s4lvB 1#] of sat_s4lwn {
                                      __DEFAULT ->
                                          case quotRemInt# [sat_s4lwn wild_s4lvD] of {
                                            (#,#) ipv_s4lwp [Occ=Once] ipv1_s4lwq [Occ=Once] ->
                                                case +# [ipv1_s4lwq wild_s4lvD] of sat_s4lwt {
                                                  __DEFAULT ->
                                                      case +# [sat_s4lwt 1#] of sat_s4lwu {
                                                        __DEFAULT ->
                                                            let {
                                                              sat_s4lwv [Occ=Once] :: GHC.Int.Int64
                                                              [LclId] =
                                                                  CCCS GHC.Int.I64#! [sat_s4lwu];
                                                            } in 
                                                              case -# [ipv_s4lwp 1#] of sat_s4lwr {
                                                                __DEFAULT ->
                                                                    let {
                                                                      sat_s4lws [Occ=Once]
                                                                        :: GHC.Int.Int64
                                                                      [LclId] =
                                                                          CCCS GHC.Int.I64#! [sat_s4lwr];
                                                                    } in 
                                                                      (#,#) [sat_s4lws sat_s4lwv];
                                                              };
                                                      };
                                                };
                                          };
                                    };
                              };
                        };
              } in 
                case wild_s4lvD of {
                  __DEFAULT -> $j_s4lvE;
                  -1# ->
                      case ww_s4lvB of {
                        __DEFAULT -> $j_s4lvE;
                        -9223372036854775808# ->
                            (#,#) [GHC.Real.overflowError GHC.Int.$fBitsInt10];
                      };
                };
          0# -> GHC.Real.divZeroError;
        };

GHC.Int.$fIntegralInt64_$cdivMod [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> (GHC.Int.Int64, GHC.Int.Int64)
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4lwz w1_s4lwA]
        case w_s4lwz of {
          GHC.Int.I64# ww1_s4lwC [Occ=Once] ->
              case w1_s4lwA of {
                GHC.Int.I64# ww3_s4lwE [Occ=Once] ->
                    case GHC.Int.$w$cdivMod2 ww1_s4lwC ww3_s4lwE of {
                      (#,#) ww5_s4lwG [Occ=Once] ww6_s4lwH [Occ=Once] ->
                          (,) [ww5_s4lwG ww6_s4lwH];
                    };
              };
        };

GHC.Int.$fIxInt64_$crange
  :: (GHC.Int.Int64, GHC.Int.Int64) -> [GHC.Int.Int64]
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>,
 Unf=OtherCon []] =
    [] \r [ds_s4lwI]
        case ds_s4lwI of {
          (,) m_s4lwK [Occ=Once] n_s4lwL [Occ=Once] ->
              GHC.Int.$fEnumInt64_$cenumFromTo m_s4lwK n_s4lwL;
        };

GHC.Int.$fRealInt64_$ctoRational [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int64 -> GHC.Real.Rational
[GblId, Arity=1, Str=<S(S),1*U(U)>m, Unf=OtherCon []] =
    [] \r [w_s4lwM]
        case w_s4lwM of {
          GHC.Int.I64# ww1_s4lwO [Occ=Once] ->
              case GHC.Integer.Type.smallInteger ww1_s4lwO of sat_s4lwP {
                __DEFAULT ->
                    case
                        GHC.Integer.Type.timesInteger sat_s4lwP GHC.Int.$fRealInt1
                    of
                    sat_s4lwQ
                    { __DEFAULT ->
                          case GHC.Real.$w$sreduce sat_s4lwQ GHC.Int.$fRealInt1 of {
                            (#,#) ww3_s4lwS [Occ=Once] ww4_s4lwT [Occ=Once] ->
                                GHC.Real.:% [ww3_s4lwS ww4_s4lwT];
                          };
                    };
              };
        };

GHC.Int.$fRealInt64 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Real.Real GHC.Int.Int64
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Real.C:Real! [GHC.Int.$fNumInt64
                                    GHC.Int.$fOrdInt64
                                    GHC.Int.$fRealInt64_$ctoRational];

GHC.Int.$fIntegralInt64 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Real.Integral GHC.Int.Int64
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Real.C:Integral! [GHC.Int.$fRealInt64
                                        GHC.Int.$fEnumInt64
                                        GHC.Int.$fIntegralInt64_$cquot
                                        GHC.Int.$fIntegralInt64_$crem
                                        GHC.Int.$fIntegralInt64_$cdiv
                                        GHC.Int.$fIntegralInt64_$cmod
                                        GHC.Int.$fIntegralInt64_$cquotRem
                                        GHC.Int.$fIntegralInt64_$cdivMod
                                        GHC.Int.$fIntegralInt64_$ctoInteger];

GHC.Int.$fIxInt64_$cunsafeIndex
  :: (GHC.Int.Int64, GHC.Int.Int64) -> GHC.Int.Int64 -> GHC.Types.Int
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S(S)L),1*U(1*U(U),A)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4lwU i_s4lwV]
        case ds_s4lwU of {
          (,) m_s4lwX [Occ=Once!] _ [Occ=Dead] ->
              case i_s4lwV of {
                GHC.Int.I64# x#_s4lx0 [Occ=Once] ->
                    case m_s4lwX of {
                      GHC.Int.I64# x#1_s4lx2 [Occ=Once] ->
                          case -# [x#_s4lx0 x#1_s4lx2] of sat_s4lx3 {
                            __DEFAULT -> GHC.Types.I# [sat_s4lx3];
                          };
                    };
              };
        };

GHC.Int.$fIxInt64_$crangeSize
  :: (GHC.Int.Int64, GHC.Int.Int64) -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>m,
 Unf=OtherCon []] =
    [] \r [b_s4lx4]
        case b_s4lx4 of {
          (,) _l_s4lx6 [Occ=Once!] h_s4lx7 [Occ=Once!] ->
              case _l_s4lx6 of {
                GHC.Int.I64# x_s4lx9 ->
                    case h_s4lx7 of {
                      GHC.Int.I64# y_s4lxb ->
                          case <=# [x_s4lx9 y_s4lxb] of {
                            __DEFAULT -> GHC.Int.$fIxInt1;
                            1# ->
                                case -# [y_s4lxb x_s4lx9] of sat_s4lxd {
                                  __DEFAULT ->
                                      case +# [sat_s4lxd 1#] of sat_s4lxe {
                                        __DEFAULT -> GHC.Types.I# [sat_s4lxe];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fIxInt64_$cunsafeRangeSize
  :: (GHC.Int.Int64, GHC.Int.Int64) -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>m,
 Unf=OtherCon []] =
    [] \r [b_s4lxf]
        case b_s4lxf of {
          (,) _l_s4lxh [Occ=Once!] h_s4lxi [Occ=Once!] ->
              case h_s4lxi of {
                GHC.Int.I64# x#_s4lxk [Occ=Once] ->
                    case _l_s4lxh of {
                      GHC.Int.I64# x#1_s4lxm [Occ=Once] ->
                          case -# [x#_s4lxk x#1_s4lxm] of sat_s4lxn {
                            __DEFAULT ->
                                case +# [sat_s4lxn 1#] of sat_s4lxo {
                                  __DEFAULT -> GHC.Types.I# [sat_s4lxo];
                                };
                          };
                    };
              };
        };

GHC.Int.$fIxInt64_$cindex [InlPrag=INLINE (sat-args=2)]
  :: (GHC.Int.Int64, GHC.Int.Int64) -> GHC.Int.Int64 -> GHC.Types.Int
[GblId,
 Arity=2,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s4lxp eta1_s4lxq]
        case eta_s4lxp of {
          (,) m_s4lxs [Occ=Once!] n_s4lxt [Occ=Once!] ->
              case m_s4lxs of {
                GHC.Int.I64# x_s4lxv ->
                    case eta1_s4lxq of {
                      GHC.Int.I64# y_s4lxx ->
                          case <=# [x_s4lxv y_s4lxx] of {
                            __DEFAULT -> GHC.Arr.hopelessIndexError;
                            1# ->
                                case n_s4lxt of {
                                  GHC.Int.I64# y1_s4lxA [Occ=Once] ->
                                      case <=# [y_s4lxx y1_s4lxA] of {
                                        __DEFAULT -> GHC.Arr.hopelessIndexError;
                                        1# ->
                                            case -# [y_s4lxx x_s4lxv] of sat_s4lxC {
                                              __DEFAULT -> GHC.Types.I# [sat_s4lxC];
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fIxInt64 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Arr.Ix GHC.Int.Int64
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Arr.C:Ix! [GHC.Int.$fOrdInt64
                                 GHC.Int.$fIxInt64_$crange
                                 GHC.Int.$fIxInt64_$cindex
                                 GHC.Int.$fIxInt64_$cunsafeIndex
                                 GHC.Int.$fIxInt64_$cinRange
                                 GHC.Int.$fIxInt64_$crangeSize
                                 GHC.Int.$fIxInt64_$cunsafeRangeSize];

GHC.Int.$fShowInt64_$cshowsPrec
  :: GHC.Types.Int -> GHC.Int.Int64 -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [p_s4lxD x_s4lxE eta_s4lxF]
        case x_s4lxE of {
          GHC.Int.I64# x#_s4lxH [Occ=Once] ->
              case p_s4lxD of {
                GHC.Types.I# ww1_s4lxJ [Occ=Once] ->
                    case GHC.Show.$wshowSignedInt ww1_s4lxJ x#_s4lxH eta_s4lxF of {
                      (#,#) ww5_s4lxL [Occ=Once] ww6_s4lxM [Occ=Once] ->
                          : [ww5_s4lxL ww6_s4lxM];
                    };
              };
        };

GHC.Int.$fShowInt64_$cshow :: GHC.Int.Int64 -> GHC.Base.String
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m2,
 Unf=OtherCon []] =
    [] \r [x_s4lxN]
        case x_s4lxN of {
          GHC.Int.I64# x#_s4lxP [Occ=Once] ->
              case GHC.Show.$wshowSignedInt 0# x#_s4lxP GHC.Types.[] of {
                (#,#) ww5_s4lxR [Occ=Once] ww6_s4lxS [Occ=Once] ->
                    : [ww5_s4lxR ww6_s4lxS];
              };
        };

GHC.Int.$fShowInt3
  :: GHC.Int.Int64 -> GHC.Base.String -> GHC.Base.String
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [x_s4lxT eta_s4lxU]
        case x_s4lxT of {
          GHC.Int.I64# x#_s4lxW [Occ=Once] ->
              case GHC.Show.$wshowSignedInt 0# x#_s4lxW eta_s4lxU of {
                (#,#) ww5_s4lxY [Occ=Once] ww6_s4lxZ [Occ=Once] ->
                    : [ww5_s4lxY ww6_s4lxZ];
              };
        };

GHC.Int.$fShowInt64_$cshowList :: [GHC.Int.Int64] -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ls_s4ly0 s_s4ly1]
        GHC.Show.showList__ GHC.Int.$fShowInt3 ls_s4ly0 s_s4ly1;

GHC.Int.$fShowInt64 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Int.Int64
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Int.$fShowInt64_$cshowsPrec
                                    GHC.Int.$fShowInt64_$cshow
                                    GHC.Int.$fShowInt64_$cshowList];

GHC.Int.uncheckedIShiftL64#
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] uncheckedIShiftL# [eta_B2 eta_B1];

GHC.Int.uncheckedIShiftRA64#
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] uncheckedIShiftRA# [eta_B2 eta_B1];

GHC.Int.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.Int.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Int.$trModule4];

GHC.Int.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.Int"#;

GHC.Int.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Int.$trModule2];

GHC.Int.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.Int.$trModule3
                                     GHC.Int.$trModule1];

$krep_r4kPB :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcInt#
                                              GHC.Types.[]];

GHC.Int.$tcInt7 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Int.$tcInt9];

GHC.Int.$tcInt8 :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [1422706860619545536##
                                    2126344328513082648##
                                    GHC.Int.$trModule
                                    GHC.Int.$tcInt7
                                    0#
                                    GHC.Types.krep$*];

$krep1_r4kPC :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Int.$tcInt8
                                              GHC.Types.[]];

GHC.Int.$tc'I8#1 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_r4kPB $krep1_r4kPC];

GHC.Int.$tc'I8#3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'I8#"#;

GHC.Int.$tc'I8#2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Int.$tc'I8#3];

GHC.Int.$tc'I8# :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [5349338056284818619##
                                    13298037281129101406##
                                    GHC.Int.$trModule
                                    GHC.Int.$tc'I8#2
                                    0#
                                    GHC.Int.$tc'I8#1];

GHC.Int.$tcInt1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Int.$tcInt2];

GHC.Int.$tcInt16 :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [16329117591681623238##
                                    13363230803330610095##
                                    GHC.Int.$trModule
                                    GHC.Int.$tcInt1
                                    0#
                                    GHC.Types.krep$*];

$krep2_r4kPD :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Int.$tcInt16
                                              GHC.Types.[]];

GHC.Int.$tc'I16#1 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_r4kPB $krep2_r4kPD];

GHC.Int.$tc'I16#3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'I16#"#;

GHC.Int.$tc'I16#2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Int.$tc'I16#3];

GHC.Int.$tc'I16# :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [1077432500071562197##
                                    13676251251348512601##
                                    GHC.Int.$trModule
                                    GHC.Int.$tc'I16#2
                                    0#
                                    GHC.Int.$tc'I16#1];

GHC.Int.$tcInt3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Int.$tcInt4];

GHC.Int.$tcInt32 :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [5115671124548181797##
                                    6203735229629729265##
                                    GHC.Int.$trModule
                                    GHC.Int.$tcInt3
                                    0#
                                    GHC.Types.krep$*];

$krep3_r4kPE :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Int.$tcInt32
                                              GHC.Types.[]];

GHC.Int.$tc'I32#1 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_r4kPB $krep3_r4kPE];

GHC.Int.$tc'I32#3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'I32#"#;

GHC.Int.$tc'I32#2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Int.$tc'I32#3];

GHC.Int.$tc'I32# :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [14037617528454219662##
                                    2752255350980319305##
                                    GHC.Int.$trModule
                                    GHC.Int.$tc'I32#2
                                    0#
                                    GHC.Int.$tc'I32#1];

GHC.Int.$tcInt5 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Int.$tcInt6];

GHC.Int.$tcInt64 :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [15049343324344240059##
                                    14445320765379163718##
                                    GHC.Int.$trModule
                                    GHC.Int.$tcInt5
                                    0#
                                    GHC.Types.krep$*];

$krep4_r4kPF :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Int.$tcInt64
                                              GHC.Types.[]];

GHC.Int.$tc'I64#1 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_r4kPB $krep4_r4kPF];

GHC.Int.$tc'I64#3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'I64#"#;

GHC.Int.$tc'I64#2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Int.$tc'I64#3];

GHC.Int.$tc'I64# :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [7755385358338959724##
                                    8520529638322167079##
                                    GHC.Int.$trModule
                                    GHC.Int.$tc'I64#2
                                    0#
                                    GHC.Int.$tc'I64#1];

GHC.Int.I8# :: GHC.Prim.Int# -> GHC.Int.Int8
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Int.I8# [eta_B1];

GHC.Int.I16# :: GHC.Prim.Int# -> GHC.Int.Int16
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Int.I16# [eta_B1];

GHC.Int.I32# :: GHC.Prim.Int# -> GHC.Int.Int32
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Int.I32# [eta_B1];

GHC.Int.I64# :: GHC.Prim.Int# -> GHC.Int.Int64
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Int.I64# [eta_B1];


==================== STG syntax: ====================
2018-03-16 15:59:08.259950366 UTC

GHC.Int.$fEnumInt8_$cfromEnum :: GHC.Int.Int8 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4kPH]
        case ds_s4kPH of {
          GHC.Int.I8# x#_s4kPJ [Occ=Once] -> GHC.Types.I# [x#_s4kPJ];
        };

GHC.Int.$fEnumInt16_$cfromEnum :: GHC.Int.Int16 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4kPK]
        case ds_s4kPK of {
          GHC.Int.I16# x#_s4kPM [Occ=Once] -> GHC.Types.I# [x#_s4kPM];
        };

GHC.Int.$fEnumInt32_$cfromEnum :: GHC.Int.Int32 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4kPN]
        case ds_s4kPN of {
          GHC.Int.I32# x#_s4kPP [Occ=Once] -> GHC.Types.I# [x#_s4kPP];
        };

GHC.Int.$fEnumInt64_$cfromEnum :: GHC.Int.Int64 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4kPQ]
        case ds_s4kPQ of {
          GHC.Int.I64# x#_s4kPS [Occ=Once] -> GHC.Types.I# [x#_s4kPS];
        };

GHC.Int.$fEnumInt64_$ctoEnum :: GHC.Types.Int -> GHC.Int.Int64
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4kPT]
        case ds_s4kPT of {
          GHC.Types.I# i#_s4kPV [Occ=Once] -> GHC.Int.I64# [i#_s4kPV];
        };

GHC.Int.$w$cenumFromThenTo2 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int#
     -> GHC.Prim.Int# -> GHC.Prim.Int# -> [GHC.Int.Int64]
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S,U><S,U><S,U>,
 Unf=OtherCon []] =
    [] \r [ww_s4kPW ww1_s4kPX ww2_s4kPY]
        case >=# [ww1_s4kPX ww_s4kPW] of {
          __DEFAULT ->
              case ># [ww2_s4kPY ww1_s4kPX] of {
                __DEFAULT ->
                    let {
                      sat_s4kQb [Occ=Once] :: [GHC.Int.Int64]
                      [LclId] =
                          [ww_s4kPW ww1_s4kPX ww2_s4kPY] \u []
                              case -# [ww1_s4kPX ww_s4kPW] of delta_s4kQ2 [Dmd=<S,U>] {
                                __DEFAULT ->
                                    case -# [ww2_s4kPY delta_s4kQ2] of y'_s4kQ3 [Dmd=<S,U>] {
                                      __DEFAULT ->
                                          let {
                                            go_dn_s4kQ4 [Occ=LoopBreaker]
                                              :: GHC.Prim.Int# -> [GHC.Int.Int64]
                                            [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                                sat-only [delta_s4kQ2
                                                          y'_s4kQ3
                                                          go_dn_s4kQ4] \r [x_s4kQ5]
                                                    case <# [x_s4kQ5 y'_s4kQ3] of {
                                                      __DEFAULT ->
                                                          let {
                                                            sat_s4kQ9 [Occ=Once] :: [GHC.Int.Int64]
                                                            [LclId] =
                                                                [delta_s4kQ2
                                                                 go_dn_s4kQ4
                                                                 x_s4kQ5] \u []
                                                                    case
                                                                        +# [x_s4kQ5 delta_s4kQ2]
                                                                    of
                                                                    sat_s4kQ8
                                                                    { __DEFAULT ->
                                                                          go_dn_s4kQ4 sat_s4kQ8;
                                                                    }; } in
                                                          let {
                                                            sat_s4kQ7 [Occ=Once] :: GHC.Int.Int64
                                                            [LclId] =
                                                                CCCS GHC.Int.I64#! [x_s4kQ5];
                                                          } in  : [sat_s4kQ7 sat_s4kQ9];
                                                      1# ->
                                                          let {
                                                            sat_s4kQa [Occ=Once] :: GHC.Int.Int64
                                                            [LclId] =
                                                                CCCS GHC.Int.I64#! [x_s4kQ5];
                                                          } in  : [sat_s4kQa GHC.Types.[]];
                                                    };
                                          } in  go_dn_s4kQ4 ww1_s4kPX;
                                    };
                              }; } in
                    let {
                      sat_s4kQ1 [Occ=Once] :: GHC.Int.Int64
                      [LclId] =
                          CCCS GHC.Int.I64#! [ww_s4kPW];
                    } in  : [sat_s4kQ1 sat_s4kQb];
                1# ->
                    case ># [ww2_s4kPY ww_s4kPW] of {
                      __DEFAULT ->
                          let {
                            sat_s4kQd [Occ=Once] :: GHC.Int.Int64
                            [LclId] =
                                CCCS GHC.Int.I64#! [ww_s4kPW];
                          } in  : [sat_s4kQd GHC.Types.[]];
                      1# -> [] [];
                    };
              };
          1# ->
              case <# [ww2_s4kPY ww1_s4kPX] of {
                __DEFAULT ->
                    let {
                      sat_s4kQp [Occ=Once] :: [GHC.Int.Int64]
                      [LclId] =
                          [ww_s4kPW ww1_s4kPX ww2_s4kPY] \u []
                              case -# [ww1_s4kPX ww_s4kPW] of delta_s4kQg [Dmd=<S,U>] {
                                __DEFAULT ->
                                    case -# [ww2_s4kPY delta_s4kQg] of y'_s4kQh [Dmd=<S,U>] {
                                      __DEFAULT ->
                                          let {
                                            go_up_s4kQi [Occ=LoopBreaker]
                                              :: GHC.Prim.Int# -> [GHC.Int.Int64]
                                            [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                                sat-only [delta_s4kQg
                                                          y'_s4kQh
                                                          go_up_s4kQi] \r [x_s4kQj]
                                                    case ># [x_s4kQj y'_s4kQh] of {
                                                      __DEFAULT ->
                                                          let {
                                                            sat_s4kQn [Occ=Once] :: [GHC.Int.Int64]
                                                            [LclId] =
                                                                [delta_s4kQg
                                                                 go_up_s4kQi
                                                                 x_s4kQj] \u []
                                                                    case
                                                                        +# [x_s4kQj delta_s4kQg]
                                                                    of
                                                                    sat_s4kQm
                                                                    { __DEFAULT ->
                                                                          go_up_s4kQi sat_s4kQm;
                                                                    }; } in
                                                          let {
                                                            sat_s4kQl [Occ=Once] :: GHC.Int.Int64
                                                            [LclId] =
                                                                CCCS GHC.Int.I64#! [x_s4kQj];
                                                          } in  : [sat_s4kQl sat_s4kQn];
                                                      1# ->
                                                          let {
                                                            sat_s4kQo [Occ=Once] :: GHC.Int.Int64
                                                            [LclId] =
                                                                CCCS GHC.Int.I64#! [x_s4kQj];
                                                          } in  : [sat_s4kQo GHC.Types.[]];
                                                    };
                                          } in  go_up_s4kQi ww1_s4kPX;
                                    };
                              }; } in
                    let {
                      sat_s4kQf [Occ=Once] :: GHC.Int.Int64
                      [LclId] =
                          CCCS GHC.Int.I64#! [ww_s4kPW];
                    } in  : [sat_s4kQf sat_s4kQp];
                1# ->
                    case <# [ww2_s4kPY ww_s4kPW] of {
                      __DEFAULT ->
                          let {
                            sat_s4kQr [Occ=Once] :: GHC.Int.Int64
                            [LclId] =
                                CCCS GHC.Int.I64#! [ww_s4kPW];
                          } in  : [sat_s4kQr GHC.Types.[]];
                      1# -> [] [];
                    };
              };
        };

GHC.Int.$fEnumInt64_$cenumFromThenTo [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int64
     -> GHC.Int.Int64 -> GHC.Int.Int64 -> [GHC.Int.Int64]
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [w_s4kQs w1_s4kQt w2_s4kQu]
        case w_s4kQs of {
          GHC.Int.I64# ww1_s4kQw [Occ=Once] ->
              case w1_s4kQt of {
                GHC.Int.I64# ww3_s4kQy [Occ=Once] ->
                    case w2_s4kQu of {
                      GHC.Int.I64# ww5_s4kQA [Occ=Once] ->
                          GHC.Int.$w$cenumFromThenTo2 ww1_s4kQw ww3_s4kQy ww5_s4kQA;
                    };
              };
        };

GHC.Int.$w$cenumFromTo2 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> [GHC.Int.Int64]
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s4kQB ww1_s4kQC]
        case ># [ww_s4kQB ww1_s4kQC] of {
          __DEFAULT ->
              let {
                go_s4kQE [Occ=LoopBreaker] :: GHC.Prim.Int# -> [GHC.Int.Int64]
                [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
                    sat-only [ww1_s4kQC go_s4kQE] \r [x_s4kQF]
                        let {
                          sat_s4kQJ [Occ=Once] :: [GHC.Int.Int64]
                          [LclId] =
                              [ww1_s4kQC go_s4kQE x_s4kQF] \u []
                                  case ==# [x_s4kQF ww1_s4kQC] of {
                                    __DEFAULT ->
                                        case +# [x_s4kQF 1#] of sat_s4kQI {
                                          __DEFAULT -> go_s4kQE sat_s4kQI;
                                        };
                                    1# -> [] [];
                                  }; } in
                        let {
                          sat_s4kQG [Occ=Once] :: GHC.Int.Int64
                          [LclId] =
                              CCCS GHC.Int.I64#! [x_s4kQF];
                        } in  : [sat_s4kQG sat_s4kQJ];
              } in  go_s4kQE ww_s4kQB;
          1# -> [] [];
        };

GHC.Int.$fEnumInt64_$cenumFromTo [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> [GHC.Int.Int64]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [w_s4kQK w1_s4kQL]
        case w_s4kQK of {
          GHC.Int.I64# ww1_s4kQN [Occ=Once] ->
              case w1_s4kQL of {
                GHC.Int.I64# ww3_s4kQP [Occ=Once] ->
                    GHC.Int.$w$cenumFromTo2 ww1_s4kQN ww3_s4kQP;
              };
        };

GHC.Int.$tcInt9 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Int8"#;

GHC.Int.$fEnumInt7 :: GHC.Int.Int8
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# GHC.Int.$tcInt9 of sat_s4kQQ {
          __DEFAULT -> GHC.Enum.predError sat_s4kQQ;
        };

GHC.Int.$fEnumInt9 :: GHC.Int.Int8
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# GHC.Int.$tcInt9 of sat_s4kQR {
          __DEFAULT -> GHC.Enum.succError sat_s4kQR;
        };

GHC.Int.neInt8 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4kQS ds1_s4kQT]
        case ds_s4kQS of {
          GHC.Int.I8# x_s4kQV [Occ=Once] ->
              case ds1_s4kQT of {
                GHC.Int.I8# y_s4kQX [Occ=Once] ->
                    case /=# [x_s4kQV y_s4kQX] of sat_s4kQY {
                      __DEFAULT -> tagToEnum# [sat_s4kQY];
                    };
              };
        };

lvl_r4kPr :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Int.$tcInt9;

GHC.Int.$fBoundedInt8_$cminBound :: GHC.Int.Int8
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I8#! [-128#];

GHC.Int.$fEnumInt8_$cpred :: GHC.Int.Int8 -> GHC.Int.Int8
[GblId, Arity=1, Str=<S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [x_s4kQZ]
        case x_s4kQZ of {
          GHC.Int.I8# x1_s4kR1 [Occ=Once!] ->
              case x1_s4kR1 of wild1_s4kR2 {
                __DEFAULT ->
                    case -# [wild1_s4kR2 1#] of sat_s4kR3 {
                      __DEFAULT ->
                          case narrow8Int# [sat_s4kR3] of sat_s4kR4 {
                            __DEFAULT -> GHC.Int.I8# [sat_s4kR4];
                          };
                    };
                -128# -> GHC.Int.$fEnumInt7;
              };
        };

GHC.Int.$fBoundedInt8_$cmaxBound :: GHC.Int.Int8
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I8#! [127#];

GHC.Int.$fBoundedInt8 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Bounded GHC.Int.Int8
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Bounded! [GHC.Int.$fBoundedInt8_$cminBound
                                       GHC.Int.$fBoundedInt8_$cmaxBound];

GHC.Int.$fEnumInt8_$csucc :: GHC.Int.Int8 -> GHC.Int.Int8
[GblId, Arity=1, Str=<S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [x_s4kR5]
        case x_s4kR5 of {
          GHC.Int.I8# x1_s4kR7 [Occ=Once!] ->
              case x1_s4kR7 of wild1_s4kR8 {
                __DEFAULT ->
                    case +# [wild1_s4kR8 1#] of sat_s4kR9 {
                      __DEFAULT ->
                          case narrow8Int# [sat_s4kR9] of sat_s4kRa {
                            __DEFAULT -> GHC.Int.I8# [sat_s4kRa];
                          };
                    };
                127# -> GHC.Int.$fEnumInt9;
              };
        };

GHC.Int.$fShowInt8_$cshowsPrec
  :: GHC.Types.Int -> GHC.Int.Int8 -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [p_s4kRb x_s4kRc eta_s4kRd]
        case x_s4kRc of {
          GHC.Int.I8# x#_s4kRf [Occ=Once] ->
              case p_s4kRb of {
                GHC.Types.I# ww1_s4kRh [Occ=Once] ->
                    case GHC.Show.$wshowSignedInt ww1_s4kRh x#_s4kRf eta_s4kRd of {
                      (#,#) ww5_s4kRj [Occ=Once] ww6_s4kRk [Occ=Once] ->
                          : [ww5_s4kRj ww6_s4kRk];
                    };
              };
        };

GHC.Int.$fShowInt8_$cshow :: GHC.Int.Int8 -> GHC.Base.String
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m2,
 Unf=OtherCon []] =
    [] \r [x_s4kRl]
        case x_s4kRl of {
          GHC.Int.I8# x#_s4kRn [Occ=Once] ->
              case GHC.Show.$wshowSignedInt 0# x#_s4kRn GHC.Types.[] of {
                (#,#) ww5_s4kRp [Occ=Once] ww6_s4kRq [Occ=Once] ->
                    : [ww5_s4kRp ww6_s4kRq];
              };
        };

GHC.Int.$fShowInt4
  :: GHC.Int.Int8 -> GHC.Base.String -> GHC.Base.String
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [x_s4kRr eta_s4kRs]
        case x_s4kRr of {
          GHC.Int.I8# x#_s4kRu [Occ=Once] ->
              case GHC.Show.$wshowSignedInt 0# x#_s4kRu eta_s4kRs of {
                (#,#) ww5_s4kRw [Occ=Once] ww6_s4kRx [Occ=Once] ->
                    : [ww5_s4kRw ww6_s4kRx];
              };
        };

GHC.Int.$fShowInt8_$cshowList :: [GHC.Int.Int8] -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ls_s4kRy s_s4kRz]
        GHC.Show.showList__ GHC.Int.$fShowInt4 ls_s4kRy s_s4kRz;

GHC.Int.$fShowInt8 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Int.Int8
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Int.$fShowInt8_$cshowsPrec
                                    GHC.Int.$fShowInt8_$cshow
                                    GHC.Int.$fShowInt8_$cshowList];

GHC.Int.$wlvl2 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Int.Int8
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [ww_s4kRA]
        GHC.Enum.$wtoEnumError
            GHC.Int.$fShowInt8
            lvl_r4kPr
            ww_s4kRA
            GHC.Int.$fBoundedInt8_$cminBound
            GHC.Int.$fBoundedInt8_$cmaxBound;

GHC.Int.$w$ctoEnum2 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [ww_s4kRB]
        case >=# [ww_s4kRB -128#] of {
          __DEFAULT -> GHC.Int.$wlvl2 ww_s4kRB;
          1# ->
              case <=# [ww_s4kRB 127#] of {
                __DEFAULT -> GHC.Int.$wlvl2 ww_s4kRB;
                1# -> ww_s4kRB;
              };
        };

GHC.Int.$fEnumInt8_$ctoEnum [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.Int.Int8
[GblId, Arity=1, Str=<S(S),1*U(U)>m, Unf=OtherCon []] =
    [] \r [w_s4kRG]
        case w_s4kRG of {
          GHC.Types.I# ww1_s4kRI [Occ=Once] ->
              case GHC.Int.$w$ctoEnum2 ww1_s4kRI of ww2_s4kRJ {
                __DEFAULT -> GHC.Int.I8# [ww2_s4kRJ];
              };
        };

GHC.Int.$w$cenumFromThenTo3 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int#
     -> GHC.Prim.Int# -> GHC.Prim.Int# -> [GHC.Int.Int8]
[GblId, Arity=3, Str=<S,U><S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s4kRK ww1_s4kRL ww2_s4kRM]
        case >=# [ww1_s4kRL ww_s4kRK] of {
          __DEFAULT ->
              case ># [ww2_s4kRM ww1_s4kRL] of {
                __DEFAULT ->
                    let {
                      sat_s4kS5 [Occ=Once] :: [GHC.Int.Int8]
                      [LclId] =
                          [ww_s4kRK ww1_s4kRL ww2_s4kRM] \u []
                              case -# [ww1_s4kRL ww_s4kRK] of delta_s4kRS [Dmd=<S,U>] {
                                __DEFAULT ->
                                    case -# [ww2_s4kRM delta_s4kRS] of y'_s4kRT [Dmd=<S,U>] {
                                      __DEFAULT ->
                                          let {
                                            go_dn_s4kRU [Occ=LoopBreaker]
                                              :: GHC.Prim.Int# -> [GHC.Int.Int8]
                                            [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                                sat-only [delta_s4kRS
                                                          y'_s4kRT
                                                          go_dn_s4kRU] \r [x_s4kRV]
                                                    case <# [x_s4kRV y'_s4kRT] of {
                                                      __DEFAULT ->
                                                          let {
                                                            sat_s4kS1 [Occ=Once] :: [GHC.Int.Int8]
                                                            [LclId] =
                                                                [delta_s4kRS
                                                                 go_dn_s4kRU
                                                                 x_s4kRV] \u []
                                                                    case
                                                                        +# [x_s4kRV delta_s4kRS]
                                                                    of
                                                                    sat_s4kS0
                                                                    { __DEFAULT ->
                                                                          go_dn_s4kRU sat_s4kS0;
                                                                    }; } in
                                                          let {
                                                            sat_s4kRZ [Occ=Once] :: GHC.Int.Int8
                                                            [LclId] =
                                                                [x_s4kRV] \u []
                                                                    case >=# [x_s4kRV -128#] of {
                                                                      __DEFAULT ->
                                                                          GHC.Int.$wlvl2 x_s4kRV;
                                                                      1# ->
                                                                          case
                                                                              <=# [x_s4kRV 127#]
                                                                          of
                                                                          { __DEFAULT ->
                                                                                GHC.Int.$wlvl2
                                                                                    x_s4kRV;
                                                                            1# ->
                                                                                GHC.Int.I8# [x_s4kRV];
                                                                          };
                                                                    };
                                                          } in  : [sat_s4kRZ sat_s4kS1];
                                                      1# ->
                                                          let {
                                                            sat_s4kS4 [Occ=Once] :: GHC.Int.Int8
                                                            [LclId] =
                                                                [x_s4kRV] \u []
                                                                    case >=# [x_s4kRV -128#] of {
                                                                      __DEFAULT ->
                                                                          GHC.Int.$wlvl2 x_s4kRV;
                                                                      1# ->
                                                                          case
                                                                              <=# [x_s4kRV 127#]
                                                                          of
                                                                          { __DEFAULT ->
                                                                                GHC.Int.$wlvl2
                                                                                    x_s4kRV;
                                                                            1# ->
                                                                                GHC.Int.I8# [x_s4kRV];
                                                                          };
                                                                    };
                                                          } in  : [sat_s4kS4 GHC.Types.[]];
                                                    };
                                          } in  go_dn_s4kRU ww1_s4kRL;
                                    };
                              }; } in
                    let {
                      sat_s4kRR [Occ=Once] :: GHC.Int.Int8
                      [LclId] =
                          [ww_s4kRK] \u []
                              case >=# [ww_s4kRK -128#] of {
                                __DEFAULT -> GHC.Int.$wlvl2 ww_s4kRK;
                                1# ->
                                    case <=# [ww_s4kRK 127#] of {
                                      __DEFAULT -> GHC.Int.$wlvl2 ww_s4kRK;
                                      1# -> GHC.Int.I8# [ww_s4kRK];
                                    };
                              };
                    } in  : [sat_s4kRR sat_s4kS5];
                1# ->
                    case ># [ww2_s4kRM ww_s4kRK] of {
                      __DEFAULT ->
                          let {
                            sat_s4kS9 [Occ=Once] :: GHC.Int.Int8
                            [LclId] =
                                [ww_s4kRK] \u []
                                    case >=# [ww_s4kRK -128#] of {
                                      __DEFAULT -> GHC.Int.$wlvl2 ww_s4kRK;
                                      1# ->
                                          case <=# [ww_s4kRK 127#] of {
                                            __DEFAULT -> GHC.Int.$wlvl2 ww_s4kRK;
                                            1# -> GHC.Int.I8# [ww_s4kRK];
                                          };
                                    };
                          } in  : [sat_s4kS9 GHC.Types.[]];
                      1# -> [] [];
                    };
              };
          1# ->
              case <# [ww2_s4kRM ww1_s4kRL] of {
                __DEFAULT ->
                    let {
                      sat_s4kSr [Occ=Once] :: [GHC.Int.Int8]
                      [LclId] =
                          [ww_s4kRK ww1_s4kRL ww2_s4kRM] \u []
                              case -# [ww1_s4kRL ww_s4kRK] of delta_s4kSe [Dmd=<S,U>] {
                                __DEFAULT ->
                                    case -# [ww2_s4kRM delta_s4kSe] of y'_s4kSf [Dmd=<S,U>] {
                                      __DEFAULT ->
                                          let {
                                            go_up_s4kSg [Occ=LoopBreaker]
                                              :: GHC.Prim.Int# -> [GHC.Int.Int8]
                                            [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                                sat-only [delta_s4kSe
                                                          y'_s4kSf
                                                          go_up_s4kSg] \r [x_s4kSh]
                                                    case ># [x_s4kSh y'_s4kSf] of {
                                                      __DEFAULT ->
                                                          let {
                                                            sat_s4kSn [Occ=Once] :: [GHC.Int.Int8]
                                                            [LclId] =
                                                                [delta_s4kSe
                                                                 go_up_s4kSg
                                                                 x_s4kSh] \u []
                                                                    case
                                                                        +# [x_s4kSh delta_s4kSe]
                                                                    of
                                                                    sat_s4kSm
                                                                    { __DEFAULT ->
                                                                          go_up_s4kSg sat_s4kSm;
                                                                    }; } in
                                                          let {
                                                            sat_s4kSl [Occ=Once] :: GHC.Int.Int8
                                                            [LclId] =
                                                                [x_s4kSh] \u []
                                                                    case >=# [x_s4kSh -128#] of {
                                                                      __DEFAULT ->
                                                                          GHC.Int.$wlvl2 x_s4kSh;
                                                                      1# ->
                                                                          case
                                                                              <=# [x_s4kSh 127#]
                                                                          of
                                                                          { __DEFAULT ->
                                                                                GHC.Int.$wlvl2
                                                                                    x_s4kSh;
                                                                            1# ->
                                                                                GHC.Int.I8# [x_s4kSh];
                                                                          };
                                                                    };
                                                          } in  : [sat_s4kSl sat_s4kSn];
                                                      1# ->
                                                          let {
                                                            sat_s4kSq [Occ=Once] :: GHC.Int.Int8
                                                            [LclId] =
                                                                [x_s4kSh] \u []
                                                                    case >=# [x_s4kSh -128#] of {
                                                                      __DEFAULT ->
                                                                          GHC.Int.$wlvl2 x_s4kSh;
                                                                      1# ->
                                                                          case
                                                                              <=# [x_s4kSh 127#]
                                                                          of
                                                                          { __DEFAULT ->
                                                                                GHC.Int.$wlvl2
                                                                                    x_s4kSh;
                                                                            1# ->
                                                                                GHC.Int.I8# [x_s4kSh];
                                                                          };
                                                                    };
                                                          } in  : [sat_s4kSq GHC.Types.[]];
                                                    };
                                          } in  go_up_s4kSg ww1_s4kRL;
                                    };
                              }; } in
                    let {
                      sat_s4kSd [Occ=Once] :: GHC.Int.Int8
                      [LclId] =
                          [ww_s4kRK] \u []
                              case >=# [ww_s4kRK -128#] of {
                                __DEFAULT -> GHC.Int.$wlvl2 ww_s4kRK;
                                1# ->
                                    case <=# [ww_s4kRK 127#] of {
                                      __DEFAULT -> GHC.Int.$wlvl2 ww_s4kRK;
                                      1# -> GHC.Int.I8# [ww_s4kRK];
                                    };
                              };
                    } in  : [sat_s4kSd sat_s4kSr];
                1# ->
                    case <# [ww2_s4kRM ww_s4kRK] of {
                      __DEFAULT ->
                          let {
                            sat_s4kSv [Occ=Once] :: GHC.Int.Int8
                            [LclId] =
                                [ww_s4kRK] \u []
                                    case >=# [ww_s4kRK -128#] of {
                                      __DEFAULT -> GHC.Int.$wlvl2 ww_s4kRK;
                                      1# ->
                                          case <=# [ww_s4kRK 127#] of {
                                            __DEFAULT -> GHC.Int.$wlvl2 ww_s4kRK;
                                            1# -> GHC.Int.I8# [ww_s4kRK];
                                          };
                                    };
                          } in  : [sat_s4kSv GHC.Types.[]];
                      1# -> [] [];
                    };
              };
        };

GHC.Int.$fEnumInt8_$cenumFromThenTo [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> GHC.Int.Int8 -> [GHC.Int.Int8]
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [w_s4kSw w1_s4kSx w2_s4kSy]
        case w_s4kSw of {
          GHC.Int.I8# ww1_s4kSA [Occ=Once] ->
              case w1_s4kSx of {
                GHC.Int.I8# ww3_s4kSC [Occ=Once] ->
                    case w2_s4kSy of {
                      GHC.Int.I8# ww5_s4kSE [Occ=Once] ->
                          GHC.Int.$w$cenumFromThenTo3 ww1_s4kSA ww3_s4kSC ww5_s4kSE;
                    };
              };
        };

GHC.Int.$w$cenumFromTo3 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> [GHC.Int.Int8]
[GblId, Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s4kSF ww1_s4kSG]
        case ># [ww_s4kSF ww1_s4kSG] of {
          __DEFAULT ->
              let {
                go_s4kSI [Occ=LoopBreaker] :: GHC.Prim.Int# -> [GHC.Int.Int8]
                [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
                    sat-only [ww1_s4kSG go_s4kSI] \r [x_s4kSJ]
                        let {
                          sat_s4kSP [Occ=Once] :: [GHC.Int.Int8]
                          [LclId] =
                              [ww1_s4kSG go_s4kSI x_s4kSJ] \u []
                                  case ==# [x_s4kSJ ww1_s4kSG] of {
                                    __DEFAULT ->
                                        case +# [x_s4kSJ 1#] of sat_s4kSO {
                                          __DEFAULT -> go_s4kSI sat_s4kSO;
                                        };
                                    1# -> [] [];
                                  }; } in
                        let {
                          sat_s4kSM [Occ=Once] :: GHC.Int.Int8
                          [LclId] =
                              [x_s4kSJ] \u []
                                  case >=# [x_s4kSJ -128#] of {
                                    __DEFAULT -> GHC.Int.$wlvl2 x_s4kSJ;
                                    1# ->
                                        case <=# [x_s4kSJ 127#] of {
                                          __DEFAULT -> GHC.Int.$wlvl2 x_s4kSJ;
                                          1# -> GHC.Int.I8# [x_s4kSJ];
                                        };
                                  };
                        } in  : [sat_s4kSM sat_s4kSP];
              } in  go_s4kSI ww_s4kSF;
          1# -> [] [];
        };

GHC.Int.$fEnumInt8_$cenumFromTo [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> [GHC.Int.Int8]
[GblId, Arity=2, Str=<S(S),1*U(U)><S(S),1*U(U)>, Unf=OtherCon []] =
    [] \r [w_s4kSQ w1_s4kSR]
        case w_s4kSQ of {
          GHC.Int.I8# ww1_s4kST [Occ=Once] ->
              case w1_s4kSR of {
                GHC.Int.I8# ww3_s4kSV [Occ=Once] ->
                    GHC.Int.$w$cenumFromTo3 ww1_s4kST ww3_s4kSV;
              };
        };

GHC.Int.$wgo3 [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: GHC.Prim.Int# -> (# GHC.Int.Int8, [GHC.Int.Int8] #)
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [w_s4kSW]
        let {
          sat_s4kT5 [Occ=Once] :: [GHC.Int.Int8]
          [LclId] =
              [w_s4kSW] \u []
                  case w_s4kSW of wild_s4kT0 {
                    __DEFAULT ->
                        case +# [wild_s4kT0 1#] of sat_s4kT1 {
                          __DEFAULT ->
                              case GHC.Int.$wgo3 sat_s4kT1 of {
                                (#,#) ww1_s4kT3 [Occ=Once] ww2_s4kT4 [Occ=Once] ->
                                    : [ww1_s4kT3 ww2_s4kT4];
                              };
                        };
                    127# -> [] [];
                  }; } in
        let {
          sat_s4kSZ [Occ=Once] :: GHC.Int.Int8
          [LclId] =
              [w_s4kSW] \u []
                  case >=# [w_s4kSW -128#] of {
                    __DEFAULT -> GHC.Int.$wlvl2 w_s4kSW;
                    1# ->
                        case <=# [w_s4kSW 127#] of {
                          __DEFAULT -> GHC.Int.$wlvl2 w_s4kSW;
                          1# -> GHC.Int.I8# [w_s4kSW];
                        };
                  };
        } in  (#,#) [sat_s4kSZ sat_s4kT5];

GHC.Int.$fEnumInt8_go [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> [GHC.Int.Int8]
[GblId, Arity=1, Str=<S,U>m2, Unf=OtherCon []] =
    [] \r [w_s4kT6]
        case GHC.Int.$wgo3 w_s4kT6 of {
          (#,#) ww1_s4kT8 [Occ=Once] ww2_s4kT9 [Occ=Once] ->
              : [ww1_s4kT8 ww2_s4kT9];
        };

GHC.Int.$fEnumInt8_$cenumFrom :: GHC.Int.Int8 -> [GHC.Int.Int8]
[GblId, Arity=1, Str=<S(S),1*U(U)>, Unf=OtherCon []] =
    [] \r [n_s4kTa]
        case n_s4kTa of {
          GHC.Int.I8# x#_s4kTc ->
              case ># [x#_s4kTc 127#] of {
                __DEFAULT -> GHC.Int.$fEnumInt8_go x#_s4kTc;
                1# -> [] [];
              };
        };

GHC.Int.$fEnumInt8 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Enum GHC.Int.Int8
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Enum! [GHC.Int.$fEnumInt8_$csucc
                                    GHC.Int.$fEnumInt8_$cpred
                                    GHC.Int.$fEnumInt8_$ctoEnum
                                    GHC.Int.$fEnumInt8_$cfromEnum
                                    GHC.Int.$fEnumInt8_$cenumFrom
                                    GHC.Int.$fEnumInt8_$cenumFromThen
                                    GHC.Int.$fEnumInt8_$cenumFromTo
                                    GHC.Int.$fEnumInt8_$cenumFromThenTo];
GHC.Int.$fEnumInt8_$cenumFromThen [Occ=LoopBreaker]
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> [GHC.Int.Int8]
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Enum.boundedEnumFromThen
            GHC.Int.$fEnumInt8 GHC.Int.$fBoundedInt8 eta_B2 eta_B1;

GHC.Int.$tcInt2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Int16"#;

GHC.Int.$fEnumInt1 :: GHC.Int.Int16
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# GHC.Int.$tcInt2 of sat_s4kTe {
          __DEFAULT -> GHC.Enum.predError sat_s4kTe;
        };

GHC.Int.$fEnumInt2 :: GHC.Int.Int16
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# GHC.Int.$tcInt2 of sat_s4kTf {
          __DEFAULT -> GHC.Enum.succError sat_s4kTf;
        };

GHC.Int.neInt16 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4kTg ds1_s4kTh]
        case ds_s4kTg of {
          GHC.Int.I16# x_s4kTj [Occ=Once] ->
              case ds1_s4kTh of {
                GHC.Int.I16# y_s4kTl [Occ=Once] ->
                    case /=# [x_s4kTj y_s4kTl] of sat_s4kTm {
                      __DEFAULT -> tagToEnum# [sat_s4kTm];
                    };
              };
        };

lvl2_r4kPt :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Int.$tcInt2;

GHC.Int.$fBoundedInt16_$cminBound :: GHC.Int.Int16
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I16#! [-32768#];

GHC.Int.$fEnumInt16_$cpred :: GHC.Int.Int16 -> GHC.Int.Int16
[GblId, Arity=1, Str=<S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [x_s4kTn]
        case x_s4kTn of {
          GHC.Int.I16# x1_s4kTp [Occ=Once!] ->
              case x1_s4kTp of wild1_s4kTq {
                __DEFAULT ->
                    case -# [wild1_s4kTq 1#] of sat_s4kTr {
                      __DEFAULT ->
                          case narrow16Int# [sat_s4kTr] of sat_s4kTs {
                            __DEFAULT -> GHC.Int.I16# [sat_s4kTs];
                          };
                    };
                -32768# -> GHC.Int.$fEnumInt1;
              };
        };

GHC.Int.$fBoundedInt16_$cmaxBound :: GHC.Int.Int16
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I16#! [32767#];

GHC.Int.$fBoundedInt16 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Bounded GHC.Int.Int16
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Bounded! [GHC.Int.$fBoundedInt16_$cminBound
                                       GHC.Int.$fBoundedInt16_$cmaxBound];

GHC.Int.$fEnumInt16_$csucc :: GHC.Int.Int16 -> GHC.Int.Int16
[GblId, Arity=1, Str=<S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [x_s4kTt]
        case x_s4kTt of {
          GHC.Int.I16# x1_s4kTv [Occ=Once!] ->
              case x1_s4kTv of wild1_s4kTw {
                __DEFAULT ->
                    case +# [wild1_s4kTw 1#] of sat_s4kTx {
                      __DEFAULT ->
                          case narrow16Int# [sat_s4kTx] of sat_s4kTy {
                            __DEFAULT -> GHC.Int.I16# [sat_s4kTy];
                          };
                    };
                32767# -> GHC.Int.$fEnumInt2;
              };
        };

GHC.Int.$fShowInt16_$cshowsPrec
  :: GHC.Types.Int -> GHC.Int.Int16 -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [p_s4kTz x_s4kTA eta_s4kTB]
        case x_s4kTA of {
          GHC.Int.I16# x#_s4kTD [Occ=Once] ->
              case p_s4kTz of {
                GHC.Types.I# ww1_s4kTF [Occ=Once] ->
                    case GHC.Show.$wshowSignedInt ww1_s4kTF x#_s4kTD eta_s4kTB of {
                      (#,#) ww5_s4kTH [Occ=Once] ww6_s4kTI [Occ=Once] ->
                          : [ww5_s4kTH ww6_s4kTI];
                    };
              };
        };

GHC.Int.$fShowInt16_$cshow :: GHC.Int.Int16 -> GHC.Base.String
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m2,
 Unf=OtherCon []] =
    [] \r [x_s4kTJ]
        case x_s4kTJ of {
          GHC.Int.I16# x#_s4kTL [Occ=Once] ->
              case GHC.Show.$wshowSignedInt 0# x#_s4kTL GHC.Types.[] of {
                (#,#) ww5_s4kTN [Occ=Once] ww6_s4kTO [Occ=Once] ->
                    : [ww5_s4kTN ww6_s4kTO];
              };
        };

GHC.Int.$fShowInt1
  :: GHC.Int.Int16 -> GHC.Base.String -> GHC.Base.String
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [x_s4kTP eta_s4kTQ]
        case x_s4kTP of {
          GHC.Int.I16# x#_s4kTS [Occ=Once] ->
              case GHC.Show.$wshowSignedInt 0# x#_s4kTS eta_s4kTQ of {
                (#,#) ww5_s4kTU [Occ=Once] ww6_s4kTV [Occ=Once] ->
                    : [ww5_s4kTU ww6_s4kTV];
              };
        };

GHC.Int.$fShowInt16_$cshowList :: [GHC.Int.Int16] -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ls_s4kTW s_s4kTX]
        GHC.Show.showList__ GHC.Int.$fShowInt1 ls_s4kTW s_s4kTX;

GHC.Int.$fShowInt16 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Int.Int16
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Int.$fShowInt16_$cshowsPrec
                                    GHC.Int.$fShowInt16_$cshow
                                    GHC.Int.$fShowInt16_$cshowList];

GHC.Int.$wlvl [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Int.Int16
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [ww_s4kTY]
        GHC.Enum.$wtoEnumError
            GHC.Int.$fShowInt16
            lvl2_r4kPt
            ww_s4kTY
            GHC.Int.$fBoundedInt16_$cminBound
            GHC.Int.$fBoundedInt16_$cmaxBound;

GHC.Int.$w$ctoEnum [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [ww_s4kTZ]
        case >=# [ww_s4kTZ -32768#] of {
          __DEFAULT -> GHC.Int.$wlvl ww_s4kTZ;
          1# ->
              case <=# [ww_s4kTZ 32767#] of {
                __DEFAULT -> GHC.Int.$wlvl ww_s4kTZ;
                1# -> ww_s4kTZ;
              };
        };

GHC.Int.$fEnumInt16_$ctoEnum [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.Int.Int16
[GblId, Arity=1, Str=<S(S),1*U(U)>m, Unf=OtherCon []] =
    [] \r [w_s4kU4]
        case w_s4kU4 of {
          GHC.Types.I# ww1_s4kU6 [Occ=Once] ->
              case GHC.Int.$w$ctoEnum ww1_s4kU6 of ww2_s4kU7 {
                __DEFAULT -> GHC.Int.I16# [ww2_s4kU7];
              };
        };

GHC.Int.$w$cenumFromThenTo [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int#
     -> GHC.Prim.Int# -> GHC.Prim.Int# -> [GHC.Int.Int16]
[GblId, Arity=3, Str=<S,U><S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s4kU8 ww1_s4kU9 ww2_s4kUa]
        case >=# [ww1_s4kU9 ww_s4kU8] of {
          __DEFAULT ->
              case ># [ww2_s4kUa ww1_s4kU9] of {
                __DEFAULT ->
                    let {
                      sat_s4kUt [Occ=Once] :: [GHC.Int.Int16]
                      [LclId] =
                          [ww_s4kU8 ww1_s4kU9 ww2_s4kUa] \u []
                              case -# [ww1_s4kU9 ww_s4kU8] of delta_s4kUg [Dmd=<S,U>] {
                                __DEFAULT ->
                                    case -# [ww2_s4kUa delta_s4kUg] of y'_s4kUh [Dmd=<S,U>] {
                                      __DEFAULT ->
                                          let {
                                            go_dn_s4kUi [Occ=LoopBreaker]
                                              :: GHC.Prim.Int# -> [GHC.Int.Int16]
                                            [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                                sat-only [delta_s4kUg
                                                          y'_s4kUh
                                                          go_dn_s4kUi] \r [x_s4kUj]
                                                    case <# [x_s4kUj y'_s4kUh] of {
                                                      __DEFAULT ->
                                                          let {
                                                            sat_s4kUp [Occ=Once] :: [GHC.Int.Int16]
                                                            [LclId] =
                                                                [delta_s4kUg
                                                                 go_dn_s4kUi
                                                                 x_s4kUj] \u []
                                                                    case
                                                                        +# [x_s4kUj delta_s4kUg]
                                                                    of
                                                                    sat_s4kUo
                                                                    { __DEFAULT ->
                                                                          go_dn_s4kUi sat_s4kUo;
                                                                    }; } in
                                                          let {
                                                            sat_s4kUn [Occ=Once] :: GHC.Int.Int16
                                                            [LclId] =
                                                                [x_s4kUj] \u []
                                                                    case >=# [x_s4kUj -32768#] of {
                                                                      __DEFAULT ->
                                                                          GHC.Int.$wlvl x_s4kUj;
                                                                      1# ->
                                                                          case
                                                                              <=# [x_s4kUj 32767#]
                                                                          of
                                                                          { __DEFAULT ->
                                                                                GHC.Int.$wlvl
                                                                                    x_s4kUj;
                                                                            1# ->
                                                                                GHC.Int.I16# [x_s4kUj];
                                                                          };
                                                                    };
                                                          } in  : [sat_s4kUn sat_s4kUp];
                                                      1# ->
                                                          let {
                                                            sat_s4kUs [Occ=Once] :: GHC.Int.Int16
                                                            [LclId] =
                                                                [x_s4kUj] \u []
                                                                    case >=# [x_s4kUj -32768#] of {
                                                                      __DEFAULT ->
                                                                          GHC.Int.$wlvl x_s4kUj;
                                                                      1# ->
                                                                          case
                                                                              <=# [x_s4kUj 32767#]
                                                                          of
                                                                          { __DEFAULT ->
                                                                                GHC.Int.$wlvl
                                                                                    x_s4kUj;
                                                                            1# ->
                                                                                GHC.Int.I16# [x_s4kUj];
                                                                          };
                                                                    };
                                                          } in  : [sat_s4kUs GHC.Types.[]];
                                                    };
                                          } in  go_dn_s4kUi ww1_s4kU9;
                                    };
                              }; } in
                    let {
                      sat_s4kUf [Occ=Once] :: GHC.Int.Int16
                      [LclId] =
                          [ww_s4kU8] \u []
                              case >=# [ww_s4kU8 -32768#] of {
                                __DEFAULT -> GHC.Int.$wlvl ww_s4kU8;
                                1# ->
                                    case <=# [ww_s4kU8 32767#] of {
                                      __DEFAULT -> GHC.Int.$wlvl ww_s4kU8;
                                      1# -> GHC.Int.I16# [ww_s4kU8];
                                    };
                              };
                    } in  : [sat_s4kUf sat_s4kUt];
                1# ->
                    case ># [ww2_s4kUa ww_s4kU8] of {
                      __DEFAULT ->
                          let {
                            sat_s4kUx [Occ=Once] :: GHC.Int.Int16
                            [LclId] =
                                [ww_s4kU8] \u []
                                    case >=# [ww_s4kU8 -32768#] of {
                                      __DEFAULT -> GHC.Int.$wlvl ww_s4kU8;
                                      1# ->
                                          case <=# [ww_s4kU8 32767#] of {
                                            __DEFAULT -> GHC.Int.$wlvl ww_s4kU8;
                                            1# -> GHC.Int.I16# [ww_s4kU8];
                                          };
                                    };
                          } in  : [sat_s4kUx GHC.Types.[]];
                      1# -> [] [];
                    };
              };
          1# ->
              case <# [ww2_s4kUa ww1_s4kU9] of {
                __DEFAULT ->
                    let {
                      sat_s4kUP [Occ=Once] :: [GHC.Int.Int16]
                      [LclId] =
                          [ww_s4kU8 ww1_s4kU9 ww2_s4kUa] \u []
                              case -# [ww1_s4kU9 ww_s4kU8] of delta_s4kUC [Dmd=<S,U>] {
                                __DEFAULT ->
                                    case -# [ww2_s4kUa delta_s4kUC] of y'_s4kUD [Dmd=<S,U>] {
                                      __DEFAULT ->
                                          let {
                                            go_up_s4kUE [Occ=LoopBreaker]
                                              :: GHC.Prim.Int# -> [GHC.Int.Int16]
                                            [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                                sat-only [delta_s4kUC
                                                          y'_s4kUD
                                                          go_up_s4kUE] \r [x_s4kUF]
                                                    case ># [x_s4kUF y'_s4kUD] of {
                                                      __DEFAULT ->
                                                          let {
                                                            sat_s4kUL [Occ=Once] :: [GHC.Int.Int16]
                                                            [LclId] =
                                                                [delta_s4kUC
                                                                 go_up_s4kUE
                                                                 x_s4kUF] \u []
                                                                    case
                                                                        +# [x_s4kUF delta_s4kUC]
                                                                    of
                                                                    sat_s4kUK
                                                                    { __DEFAULT ->
                                                                          go_up_s4kUE sat_s4kUK;
                                                                    }; } in
                                                          let {
                                                            sat_s4kUJ [Occ=Once] :: GHC.Int.Int16
                                                            [LclId] =
                                                                [x_s4kUF] \u []
                                                                    case >=# [x_s4kUF -32768#] of {
                                                                      __DEFAULT ->
                                                                          GHC.Int.$wlvl x_s4kUF;
                                                                      1# ->
                                                                          case
                                                                              <=# [x_s4kUF 32767#]
                                                                          of
                                                                          { __DEFAULT ->
                                                                                GHC.Int.$wlvl
                                                                                    x_s4kUF;
                                                                            1# ->
                                                                                GHC.Int.I16# [x_s4kUF];
                                                                          };
                                                                    };
                                                          } in  : [sat_s4kUJ sat_s4kUL];
                                                      1# ->
                                                          let {
                                                            sat_s4kUO [Occ=Once] :: GHC.Int.Int16
                                                            [LclId] =
                                                                [x_s4kUF] \u []
                                                                    case >=# [x_s4kUF -32768#] of {
                                                                      __DEFAULT ->
                                                                          GHC.Int.$wlvl x_s4kUF;
                                                                      1# ->
                                                                          case
                                                                              <=# [x_s4kUF 32767#]
                                                                          of
                                                                          { __DEFAULT ->
                                                                                GHC.Int.$wlvl
                                                                                    x_s4kUF;
                                                                            1# ->
                                                                                GHC.Int.I16# [x_s4kUF];
                                                                          };
                                                                    };
                                                          } in  : [sat_s4kUO GHC.Types.[]];
                                                    };
                                          } in  go_up_s4kUE ww1_s4kU9;
                                    };
                              }; } in
                    let {
                      sat_s4kUB [Occ=Once] :: GHC.Int.Int16
                      [LclId] =
                          [ww_s4kU8] \u []
                              case >=# [ww_s4kU8 -32768#] of {
                                __DEFAULT -> GHC.Int.$wlvl ww_s4kU8;
                                1# ->
                                    case <=# [ww_s4kU8 32767#] of {
                                      __DEFAULT -> GHC.Int.$wlvl ww_s4kU8;
                                      1# -> GHC.Int.I16# [ww_s4kU8];
                                    };
                              };
                    } in  : [sat_s4kUB sat_s4kUP];
                1# ->
                    case <# [ww2_s4kUa ww_s4kU8] of {
                      __DEFAULT ->
                          let {
                            sat_s4kUT [Occ=Once] :: GHC.Int.Int16
                            [LclId] =
                                [ww_s4kU8] \u []
                                    case >=# [ww_s4kU8 -32768#] of {
                                      __DEFAULT -> GHC.Int.$wlvl ww_s4kU8;
                                      1# ->
                                          case <=# [ww_s4kU8 32767#] of {
                                            __DEFAULT -> GHC.Int.$wlvl ww_s4kU8;
                                            1# -> GHC.Int.I16# [ww_s4kU8];
                                          };
                                    };
                          } in  : [sat_s4kUT GHC.Types.[]];
                      1# -> [] [];
                    };
              };
        };

GHC.Int.$fEnumInt16_$cenumFromThenTo [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int16
     -> GHC.Int.Int16 -> GHC.Int.Int16 -> [GHC.Int.Int16]
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [w_s4kUU w1_s4kUV w2_s4kUW]
        case w_s4kUU of {
          GHC.Int.I16# ww1_s4kUY [Occ=Once] ->
              case w1_s4kUV of {
                GHC.Int.I16# ww3_s4kV0 [Occ=Once] ->
                    case w2_s4kUW of {
                      GHC.Int.I16# ww5_s4kV2 [Occ=Once] ->
                          GHC.Int.$w$cenumFromThenTo ww1_s4kUY ww3_s4kV0 ww5_s4kV2;
                    };
              };
        };

GHC.Int.$w$cenumFromTo [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> [GHC.Int.Int16]
[GblId, Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s4kV3 ww1_s4kV4]
        case ># [ww_s4kV3 ww1_s4kV4] of {
          __DEFAULT ->
              let {
                go_s4kV6 [Occ=LoopBreaker] :: GHC.Prim.Int# -> [GHC.Int.Int16]
                [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
                    sat-only [ww1_s4kV4 go_s4kV6] \r [x_s4kV7]
                        let {
                          sat_s4kVd [Occ=Once] :: [GHC.Int.Int16]
                          [LclId] =
                              [ww1_s4kV4 go_s4kV6 x_s4kV7] \u []
                                  case ==# [x_s4kV7 ww1_s4kV4] of {
                                    __DEFAULT ->
                                        case +# [x_s4kV7 1#] of sat_s4kVc {
                                          __DEFAULT -> go_s4kV6 sat_s4kVc;
                                        };
                                    1# -> [] [];
                                  }; } in
                        let {
                          sat_s4kVa [Occ=Once] :: GHC.Int.Int16
                          [LclId] =
                              [x_s4kV7] \u []
                                  case >=# [x_s4kV7 -32768#] of {
                                    __DEFAULT -> GHC.Int.$wlvl x_s4kV7;
                                    1# ->
                                        case <=# [x_s4kV7 32767#] of {
                                          __DEFAULT -> GHC.Int.$wlvl x_s4kV7;
                                          1# -> GHC.Int.I16# [x_s4kV7];
                                        };
                                  };
                        } in  : [sat_s4kVa sat_s4kVd];
              } in  go_s4kV6 ww_s4kV3;
          1# -> [] [];
        };

GHC.Int.$fEnumInt16_$cenumFromTo [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> [GHC.Int.Int16]
[GblId, Arity=2, Str=<S(S),1*U(U)><S(S),1*U(U)>, Unf=OtherCon []] =
    [] \r [w_s4kVe w1_s4kVf]
        case w_s4kVe of {
          GHC.Int.I16# ww1_s4kVh [Occ=Once] ->
              case w1_s4kVf of {
                GHC.Int.I16# ww3_s4kVj [Occ=Once] ->
                    GHC.Int.$w$cenumFromTo ww1_s4kVh ww3_s4kVj;
              };
        };

GHC.Int.$wgo [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: GHC.Prim.Int# -> (# GHC.Int.Int16, [GHC.Int.Int16] #)
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [w_s4kVk]
        let {
          sat_s4kVt [Occ=Once] :: [GHC.Int.Int16]
          [LclId] =
              [w_s4kVk] \u []
                  case w_s4kVk of wild_s4kVo {
                    __DEFAULT ->
                        case +# [wild_s4kVo 1#] of sat_s4kVp {
                          __DEFAULT ->
                              case GHC.Int.$wgo sat_s4kVp of {
                                (#,#) ww1_s4kVr [Occ=Once] ww2_s4kVs [Occ=Once] ->
                                    : [ww1_s4kVr ww2_s4kVs];
                              };
                        };
                    32767# -> [] [];
                  }; } in
        let {
          sat_s4kVn [Occ=Once] :: GHC.Int.Int16
          [LclId] =
              [w_s4kVk] \u []
                  case >=# [w_s4kVk -32768#] of {
                    __DEFAULT -> GHC.Int.$wlvl w_s4kVk;
                    1# ->
                        case <=# [w_s4kVk 32767#] of {
                          __DEFAULT -> GHC.Int.$wlvl w_s4kVk;
                          1# -> GHC.Int.I16# [w_s4kVk];
                        };
                  };
        } in  (#,#) [sat_s4kVn sat_s4kVt];

GHC.Int.$fEnumInt16_go [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> [GHC.Int.Int16]
[GblId, Arity=1, Str=<S,U>m2, Unf=OtherCon []] =
    [] \r [w_s4kVu]
        case GHC.Int.$wgo w_s4kVu of {
          (#,#) ww1_s4kVw [Occ=Once] ww2_s4kVx [Occ=Once] ->
              : [ww1_s4kVw ww2_s4kVx];
        };

GHC.Int.$fEnumInt16_$cenumFrom :: GHC.Int.Int16 -> [GHC.Int.Int16]
[GblId, Arity=1, Str=<S(S),1*U(U)>, Unf=OtherCon []] =
    [] \r [n_s4kVy]
        case n_s4kVy of {
          GHC.Int.I16# x#_s4kVA ->
              case ># [x#_s4kVA 32767#] of {
                __DEFAULT -> GHC.Int.$fEnumInt16_go x#_s4kVA;
                1# -> [] [];
              };
        };

GHC.Int.$fEnumInt16 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Enum GHC.Int.Int16
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Enum! [GHC.Int.$fEnumInt16_$csucc
                                    GHC.Int.$fEnumInt16_$cpred
                                    GHC.Int.$fEnumInt16_$ctoEnum
                                    GHC.Int.$fEnumInt16_$cfromEnum
                                    GHC.Int.$fEnumInt16_$cenumFrom
                                    GHC.Int.$fEnumInt16_$cenumFromThen
                                    GHC.Int.$fEnumInt16_$cenumFromTo
                                    GHC.Int.$fEnumInt16_$cenumFromThenTo];
GHC.Int.$fEnumInt16_$cenumFromThen [Occ=LoopBreaker]
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> [GHC.Int.Int16]
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Enum.boundedEnumFromThen
            GHC.Int.$fEnumInt16 GHC.Int.$fBoundedInt16 eta_B2 eta_B1;

GHC.Int.$tcInt4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Int32"#;

GHC.Int.$fEnumInt3 :: GHC.Int.Int32
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# GHC.Int.$tcInt4 of sat_s4kVC {
          __DEFAULT -> GHC.Enum.predError sat_s4kVC;
        };

GHC.Int.$fEnumInt4 :: GHC.Int.Int32
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# GHC.Int.$tcInt4 of sat_s4kVD {
          __DEFAULT -> GHC.Enum.succError sat_s4kVD;
        };

GHC.Int.neInt32 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4kVE ds1_s4kVF]
        case ds_s4kVE of {
          GHC.Int.I32# x_s4kVH [Occ=Once] ->
              case ds1_s4kVF of {
                GHC.Int.I32# y_s4kVJ [Occ=Once] ->
                    case /=# [x_s4kVH y_s4kVJ] of sat_s4kVK {
                      __DEFAULT -> tagToEnum# [sat_s4kVK];
                    };
              };
        };

lvl4_r4kPv :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Int.$tcInt4;

GHC.Int.$fBoundedInt32_$cminBound :: GHC.Int.Int32
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I32#! [-2147483648#];

GHC.Int.$fEnumInt32_$cpred :: GHC.Int.Int32 -> GHC.Int.Int32
[GblId, Arity=1, Str=<S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [x_s4kVL]
        case x_s4kVL of {
          GHC.Int.I32# x1_s4kVN [Occ=Once!] ->
              case x1_s4kVN of wild1_s4kVO {
                __DEFAULT ->
                    case -# [wild1_s4kVO 1#] of sat_s4kVP {
                      __DEFAULT ->
                          case narrow32Int# [sat_s4kVP] of sat_s4kVQ {
                            __DEFAULT -> GHC.Int.I32# [sat_s4kVQ];
                          };
                    };
                -2147483648# -> GHC.Int.$fEnumInt3;
              };
        };

GHC.Int.$fBoundedInt32_$cmaxBound :: GHC.Int.Int32
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I32#! [2147483647#];

GHC.Int.$fBoundedInt32 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Bounded GHC.Int.Int32
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Bounded! [GHC.Int.$fBoundedInt32_$cminBound
                                       GHC.Int.$fBoundedInt32_$cmaxBound];

GHC.Int.$fEnumInt32_$csucc :: GHC.Int.Int32 -> GHC.Int.Int32
[GblId, Arity=1, Str=<S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [x_s4kVR]
        case x_s4kVR of {
          GHC.Int.I32# x1_s4kVT [Occ=Once!] ->
              case x1_s4kVT of wild1_s4kVU {
                __DEFAULT ->
                    case +# [wild1_s4kVU 1#] of sat_s4kVV {
                      __DEFAULT ->
                          case narrow32Int# [sat_s4kVV] of sat_s4kVW {
                            __DEFAULT -> GHC.Int.I32# [sat_s4kVW];
                          };
                    };
                2147483647# -> GHC.Int.$fEnumInt4;
              };
        };

GHC.Int.$fShowInt32_$cshowsPrec
  :: GHC.Types.Int -> GHC.Int.Int32 -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [p_s4kVX x_s4kVY eta_s4kVZ]
        case x_s4kVY of {
          GHC.Int.I32# x#_s4kW1 [Occ=Once] ->
              case p_s4kVX of {
                GHC.Types.I# ww1_s4kW3 [Occ=Once] ->
                    case GHC.Show.$wshowSignedInt ww1_s4kW3 x#_s4kW1 eta_s4kVZ of {
                      (#,#) ww5_s4kW5 [Occ=Once] ww6_s4kW6 [Occ=Once] ->
                          : [ww5_s4kW5 ww6_s4kW6];
                    };
              };
        };

GHC.Int.$fShowInt32_$cshow :: GHC.Int.Int32 -> GHC.Base.String
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m2,
 Unf=OtherCon []] =
    [] \r [x_s4kW7]
        case x_s4kW7 of {
          GHC.Int.I32# x#_s4kW9 [Occ=Once] ->
              case GHC.Show.$wshowSignedInt 0# x#_s4kW9 GHC.Types.[] of {
                (#,#) ww5_s4kWb [Occ=Once] ww6_s4kWc [Occ=Once] ->
                    : [ww5_s4kWb ww6_s4kWc];
              };
        };

GHC.Int.$fShowInt2
  :: GHC.Int.Int32 -> GHC.Base.String -> GHC.Base.String
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [x_s4kWd eta_s4kWe]
        case x_s4kWd of {
          GHC.Int.I32# x#_s4kWg [Occ=Once] ->
              case GHC.Show.$wshowSignedInt 0# x#_s4kWg eta_s4kWe of {
                (#,#) ww5_s4kWi [Occ=Once] ww6_s4kWj [Occ=Once] ->
                    : [ww5_s4kWi ww6_s4kWj];
              };
        };

GHC.Int.$fShowInt32_$cshowList :: [GHC.Int.Int32] -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ls_s4kWk s_s4kWl]
        GHC.Show.showList__ GHC.Int.$fShowInt2 ls_s4kWk s_s4kWl;

GHC.Int.$fShowInt32 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Int.Int32
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Int.$fShowInt32_$cshowsPrec
                                    GHC.Int.$fShowInt32_$cshow
                                    GHC.Int.$fShowInt32_$cshowList];

GHC.Int.$wlvl1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Int.Int32
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [ww_s4kWm]
        GHC.Enum.$wtoEnumError
            GHC.Int.$fShowInt32
            lvl4_r4kPv
            ww_s4kWm
            GHC.Int.$fBoundedInt32_$cminBound
            GHC.Int.$fBoundedInt32_$cmaxBound;

GHC.Int.$w$ctoEnum1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [ww_s4kWn]
        case >=# [ww_s4kWn -2147483648#] of {
          __DEFAULT -> GHC.Int.$wlvl1 ww_s4kWn;
          1# ->
              case <=# [ww_s4kWn 2147483647#] of {
                __DEFAULT -> GHC.Int.$wlvl1 ww_s4kWn;
                1# -> ww_s4kWn;
              };
        };

GHC.Int.$fEnumInt32_$ctoEnum [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.Int.Int32
[GblId, Arity=1, Str=<S(S),1*U(U)>m, Unf=OtherCon []] =
    [] \r [w_s4kWs]
        case w_s4kWs of {
          GHC.Types.I# ww1_s4kWu [Occ=Once] ->
              case GHC.Int.$w$ctoEnum1 ww1_s4kWu of ww2_s4kWv {
                __DEFAULT -> GHC.Int.I32# [ww2_s4kWv];
              };
        };

GHC.Int.$w$cenumFromTo1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> [GHC.Int.Int32]
[GblId, Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s4kWw ww1_s4kWx]
        case ># [ww_s4kWw ww1_s4kWx] of {
          __DEFAULT ->
              let {
                go_s4kWz [Occ=LoopBreaker] :: GHC.Prim.Int# -> [GHC.Int.Int32]
                [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
                    sat-only [ww1_s4kWx go_s4kWz] \r [x_s4kWA]
                        let {
                          sat_s4kWG [Occ=Once] :: [GHC.Int.Int32]
                          [LclId] =
                              [ww1_s4kWx go_s4kWz x_s4kWA] \u []
                                  case ==# [x_s4kWA ww1_s4kWx] of {
                                    __DEFAULT ->
                                        case +# [x_s4kWA 1#] of sat_s4kWF {
                                          __DEFAULT -> go_s4kWz sat_s4kWF;
                                        };
                                    1# -> [] [];
                                  }; } in
                        let {
                          sat_s4kWD [Occ=Once] :: GHC.Int.Int32
                          [LclId] =
                              [x_s4kWA] \u []
                                  case >=# [x_s4kWA -2147483648#] of {
                                    __DEFAULT -> GHC.Int.$wlvl1 x_s4kWA;
                                    1# ->
                                        case <=# [x_s4kWA 2147483647#] of {
                                          __DEFAULT -> GHC.Int.$wlvl1 x_s4kWA;
                                          1# -> GHC.Int.I32# [x_s4kWA];
                                        };
                                  };
                        } in  : [sat_s4kWD sat_s4kWG];
              } in  go_s4kWz ww_s4kWw;
          1# -> [] [];
        };

GHC.Int.$fEnumInt32_$cenumFromTo [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> [GHC.Int.Int32]
[GblId, Arity=2, Str=<S(S),1*U(U)><S(S),1*U(U)>, Unf=OtherCon []] =
    [] \r [w_s4kWH w1_s4kWI]
        case w_s4kWH of {
          GHC.Int.I32# ww1_s4kWK [Occ=Once] ->
              case w1_s4kWI of {
                GHC.Int.I32# ww3_s4kWM [Occ=Once] ->
                    GHC.Int.$w$cenumFromTo1 ww1_s4kWK ww3_s4kWM;
              };
        };

GHC.Int.$wgo1 [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: GHC.Prim.Int# -> (# GHC.Int.Int32, [GHC.Int.Int32] #)
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [w_s4kWN]
        let {
          sat_s4kWW [Occ=Once] :: [GHC.Int.Int32]
          [LclId] =
              [w_s4kWN] \u []
                  case w_s4kWN of wild_s4kWR {
                    __DEFAULT ->
                        case +# [wild_s4kWR 1#] of sat_s4kWS {
                          __DEFAULT ->
                              case GHC.Int.$wgo1 sat_s4kWS of {
                                (#,#) ww1_s4kWU [Occ=Once] ww2_s4kWV [Occ=Once] ->
                                    : [ww1_s4kWU ww2_s4kWV];
                              };
                        };
                    2147483647# -> [] [];
                  }; } in
        let {
          sat_s4kWQ [Occ=Once] :: GHC.Int.Int32
          [LclId] =
              [w_s4kWN] \u []
                  case >=# [w_s4kWN -2147483648#] of {
                    __DEFAULT -> GHC.Int.$wlvl1 w_s4kWN;
                    1# ->
                        case <=# [w_s4kWN 2147483647#] of {
                          __DEFAULT -> GHC.Int.$wlvl1 w_s4kWN;
                          1# -> GHC.Int.I32# [w_s4kWN];
                        };
                  };
        } in  (#,#) [sat_s4kWQ sat_s4kWW];

GHC.Int.$fEnumInt32_go [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> [GHC.Int.Int32]
[GblId, Arity=1, Str=<S,U>m2, Unf=OtherCon []] =
    [] \r [w_s4kWX]
        case GHC.Int.$wgo1 w_s4kWX of {
          (#,#) ww1_s4kWZ [Occ=Once] ww2_s4kX0 [Occ=Once] ->
              : [ww1_s4kWZ ww2_s4kX0];
        };

GHC.Int.$fEnumInt32_$cenumFrom :: GHC.Int.Int32 -> [GHC.Int.Int32]
[GblId, Arity=1, Str=<S(S),1*U(U)>, Unf=OtherCon []] =
    [] \r [n_s4kX1]
        case n_s4kX1 of {
          GHC.Int.I32# x#_s4kX3 ->
              case ># [x#_s4kX3 2147483647#] of {
                __DEFAULT -> GHC.Int.$fEnumInt32_go x#_s4kX3;
                1# -> [] [];
              };
        };

GHC.Int.$w$cenumFromThenTo1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int#
     -> GHC.Prim.Int# -> GHC.Prim.Int# -> [GHC.Int.Int32]
[GblId, Arity=3, Str=<S,U><S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s4kX5 ww1_s4kX6 ww2_s4kX7]
        case >=# [ww1_s4kX6 ww_s4kX5] of {
          __DEFAULT ->
              case ># [ww2_s4kX7 ww1_s4kX6] of {
                __DEFAULT ->
                    let {
                      sat_s4kXq [Occ=Once] :: [GHC.Int.Int32]
                      [LclId] =
                          [ww_s4kX5 ww1_s4kX6 ww2_s4kX7] \u []
                              case -# [ww1_s4kX6 ww_s4kX5] of delta_s4kXd [Dmd=<S,U>] {
                                __DEFAULT ->
                                    case -# [ww2_s4kX7 delta_s4kXd] of y'_s4kXe [Dmd=<S,U>] {
                                      __DEFAULT ->
                                          let {
                                            go_dn_s4kXf [Occ=LoopBreaker]
                                              :: GHC.Prim.Int# -> [GHC.Int.Int32]
                                            [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                                sat-only [delta_s4kXd
                                                          y'_s4kXe
                                                          go_dn_s4kXf] \r [x_s4kXg]
                                                    case <# [x_s4kXg y'_s4kXe] of {
                                                      __DEFAULT ->
                                                          let {
                                                            sat_s4kXm [Occ=Once] :: [GHC.Int.Int32]
                                                            [LclId] =
                                                                [delta_s4kXd
                                                                 go_dn_s4kXf
                                                                 x_s4kXg] \u []
                                                                    case
                                                                        +# [x_s4kXg delta_s4kXd]
                                                                    of
                                                                    sat_s4kXl
                                                                    { __DEFAULT ->
                                                                          go_dn_s4kXf sat_s4kXl;
                                                                    }; } in
                                                          let {
                                                            sat_s4kXk [Occ=Once] :: GHC.Int.Int32
                                                            [LclId] =
                                                                [x_s4kXg] \u []
                                                                    case
                                                                        >=# [x_s4kXg -2147483648#]
                                                                    of
                                                                    { __DEFAULT ->
                                                                          GHC.Int.$wlvl1 x_s4kXg;
                                                                      1# ->
                                                                          case
                                                                              <=# [x_s4kXg
                                                                                   2147483647#]
                                                                          of
                                                                          { __DEFAULT ->
                                                                                GHC.Int.$wlvl1
                                                                                    x_s4kXg;
                                                                            1# ->
                                                                                GHC.Int.I32# [x_s4kXg];
                                                                          };
                                                                    };
                                                          } in  : [sat_s4kXk sat_s4kXm];
                                                      1# ->
                                                          let {
                                                            sat_s4kXp [Occ=Once] :: GHC.Int.Int32
                                                            [LclId] =
                                                                [x_s4kXg] \u []
                                                                    case
                                                                        >=# [x_s4kXg -2147483648#]
                                                                    of
                                                                    { __DEFAULT ->
                                                                          GHC.Int.$wlvl1 x_s4kXg;
                                                                      1# ->
                                                                          case
                                                                              <=# [x_s4kXg
                                                                                   2147483647#]
                                                                          of
                                                                          { __DEFAULT ->
                                                                                GHC.Int.$wlvl1
                                                                                    x_s4kXg;
                                                                            1# ->
                                                                                GHC.Int.I32# [x_s4kXg];
                                                                          };
                                                                    };
                                                          } in  : [sat_s4kXp GHC.Types.[]];
                                                    };
                                          } in  go_dn_s4kXf ww1_s4kX6;
                                    };
                              }; } in
                    let {
                      sat_s4kXc [Occ=Once] :: GHC.Int.Int32
                      [LclId] =
                          [ww_s4kX5] \u []
                              case >=# [ww_s4kX5 -2147483648#] of {
                                __DEFAULT -> GHC.Int.$wlvl1 ww_s4kX5;
                                1# ->
                                    case <=# [ww_s4kX5 2147483647#] of {
                                      __DEFAULT -> GHC.Int.$wlvl1 ww_s4kX5;
                                      1# -> GHC.Int.I32# [ww_s4kX5];
                                    };
                              };
                    } in  : [sat_s4kXc sat_s4kXq];
                1# ->
                    case ># [ww2_s4kX7 ww_s4kX5] of {
                      __DEFAULT ->
                          let {
                            sat_s4kXu [Occ=Once] :: GHC.Int.Int32
                            [LclId] =
                                [ww_s4kX5] \u []
                                    case >=# [ww_s4kX5 -2147483648#] of {
                                      __DEFAULT -> GHC.Int.$wlvl1 ww_s4kX5;
                                      1# ->
                                          case <=# [ww_s4kX5 2147483647#] of {
                                            __DEFAULT -> GHC.Int.$wlvl1 ww_s4kX5;
                                            1# -> GHC.Int.I32# [ww_s4kX5];
                                          };
                                    };
                          } in  : [sat_s4kXu GHC.Types.[]];
                      1# -> [] [];
                    };
              };
          1# ->
              case <# [ww2_s4kX7 ww1_s4kX6] of {
                __DEFAULT ->
                    let {
                      sat_s4kXM [Occ=Once] :: [GHC.Int.Int32]
                      [LclId] =
                          [ww_s4kX5 ww1_s4kX6 ww2_s4kX7] \u []
                              case -# [ww1_s4kX6 ww_s4kX5] of delta_s4kXz [Dmd=<S,U>] {
                                __DEFAULT ->
                                    case -# [ww2_s4kX7 delta_s4kXz] of y'_s4kXA [Dmd=<S,U>] {
                                      __DEFAULT ->
                                          let {
                                            go_up_s4kXB [Occ=LoopBreaker]
                                              :: GHC.Prim.Int# -> [GHC.Int.Int32]
                                            [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                                sat-only [delta_s4kXz
                                                          y'_s4kXA
                                                          go_up_s4kXB] \r [x_s4kXC]
                                                    case ># [x_s4kXC y'_s4kXA] of {
                                                      __DEFAULT ->
                                                          let {
                                                            sat_s4kXI [Occ=Once] :: [GHC.Int.Int32]
                                                            [LclId] =
                                                                [delta_s4kXz
                                                                 go_up_s4kXB
                                                                 x_s4kXC] \u []
                                                                    case
                                                                        +# [x_s4kXC delta_s4kXz]
                                                                    of
                                                                    sat_s4kXH
                                                                    { __DEFAULT ->
                                                                          go_up_s4kXB sat_s4kXH;
                                                                    }; } in
                                                          let {
                                                            sat_s4kXG [Occ=Once] :: GHC.Int.Int32
                                                            [LclId] =
                                                                [x_s4kXC] \u []
                                                                    case
                                                                        >=# [x_s4kXC -2147483648#]
                                                                    of
                                                                    { __DEFAULT ->
                                                                          GHC.Int.$wlvl1 x_s4kXC;
                                                                      1# ->
                                                                          case
                                                                              <=# [x_s4kXC
                                                                                   2147483647#]
                                                                          of
                                                                          { __DEFAULT ->
                                                                                GHC.Int.$wlvl1
                                                                                    x_s4kXC;
                                                                            1# ->
                                                                                GHC.Int.I32# [x_s4kXC];
                                                                          };
                                                                    };
                                                          } in  : [sat_s4kXG sat_s4kXI];
                                                      1# ->
                                                          let {
                                                            sat_s4kXL [Occ=Once] :: GHC.Int.Int32
                                                            [LclId] =
                                                                [x_s4kXC] \u []
                                                                    case
                                                                        >=# [x_s4kXC -2147483648#]
                                                                    of
                                                                    { __DEFAULT ->
                                                                          GHC.Int.$wlvl1 x_s4kXC;
                                                                      1# ->
                                                                          case
                                                                              <=# [x_s4kXC
                                                                                   2147483647#]
                                                                          of
                                                                          { __DEFAULT ->
                                                                                GHC.Int.$wlvl1
                                                                                    x_s4kXC;
                                                                            1# ->
                                                                                GHC.Int.I32# [x_s4kXC];
                                                                          };
                                                                    };
                                                          } in  : [sat_s4kXL GHC.Types.[]];
                                                    };
                                          } in  go_up_s4kXB ww1_s4kX6;
                                    };
                              }; } in
                    let {
                      sat_s4kXy [Occ=Once] :: GHC.Int.Int32
                      [LclId] =
                          [ww_s4kX5] \u []
                              case >=# [ww_s4kX5 -2147483648#] of {
                                __DEFAULT -> GHC.Int.$wlvl1 ww_s4kX5;
                                1# ->
                                    case <=# [ww_s4kX5 2147483647#] of {
                                      __DEFAULT -> GHC.Int.$wlvl1 ww_s4kX5;
                                      1# -> GHC.Int.I32# [ww_s4kX5];
                                    };
                              };
                    } in  : [sat_s4kXy sat_s4kXM];
                1# ->
                    case <# [ww2_s4kX7 ww_s4kX5] of {
                      __DEFAULT ->
                          let {
                            sat_s4kXQ [Occ=Once] :: GHC.Int.Int32
                            [LclId] =
                                [ww_s4kX5] \u []
                                    case >=# [ww_s4kX5 -2147483648#] of {
                                      __DEFAULT -> GHC.Int.$wlvl1 ww_s4kX5;
                                      1# ->
                                          case <=# [ww_s4kX5 2147483647#] of {
                                            __DEFAULT -> GHC.Int.$wlvl1 ww_s4kX5;
                                            1# -> GHC.Int.I32# [ww_s4kX5];
                                          };
                                    };
                          } in  : [sat_s4kXQ GHC.Types.[]];
                      1# -> [] [];
                    };
              };
        };

GHC.Int.$fEnumInt32_$cenumFromThenTo [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int32
     -> GHC.Int.Int32 -> GHC.Int.Int32 -> [GHC.Int.Int32]
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [w_s4kXR w1_s4kXS w2_s4kXT]
        case w_s4kXR of {
          GHC.Int.I32# ww1_s4kXV [Occ=Once] ->
              case w1_s4kXS of {
                GHC.Int.I32# ww3_s4kXX [Occ=Once] ->
                    case w2_s4kXT of {
                      GHC.Int.I32# ww5_s4kXZ [Occ=Once] ->
                          GHC.Int.$w$cenumFromThenTo1 ww1_s4kXV ww3_s4kXX ww5_s4kXZ;
                    };
              };
        };

GHC.Int.$fEnumInt32 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Enum GHC.Int.Int32
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Enum! [GHC.Int.$fEnumInt32_$csucc
                                    GHC.Int.$fEnumInt32_$cpred
                                    GHC.Int.$fEnumInt32_$ctoEnum
                                    GHC.Int.$fEnumInt32_$cfromEnum
                                    GHC.Int.$fEnumInt32_$cenumFrom
                                    GHC.Int.$fEnumInt32_$cenumFromThen
                                    GHC.Int.$fEnumInt32_$cenumFromTo
                                    GHC.Int.$fEnumInt32_$cenumFromThenTo];
GHC.Int.$fEnumInt32_$cenumFromThen [Occ=LoopBreaker]
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> [GHC.Int.Int32]
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Enum.boundedEnumFromThen
            GHC.Int.$fEnumInt32 GHC.Int.$fBoundedInt32 eta_B2 eta_B1;

GHC.Int.$tcInt6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Int64"#;

GHC.Int.$fEnumInt5 :: GHC.Int.Int64
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# GHC.Int.$tcInt6 of sat_s4kY0 {
          __DEFAULT -> GHC.Enum.predError sat_s4kY0;
        };

GHC.Int.$fEnumInt6 :: GHC.Int.Int64
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# GHC.Int.$tcInt6 of sat_s4kY1 {
          __DEFAULT -> GHC.Enum.succError sat_s4kY1;
        };

GHC.Int.neInt64 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4kY2 ds1_s4kY3]
        case ds_s4kY2 of {
          GHC.Int.I64# x_s4kY5 [Occ=Once] ->
              case ds1_s4kY3 of {
                GHC.Int.I64# y_s4kY7 [Occ=Once] ->
                    case /=# [x_s4kY5 y_s4kY7] of sat_s4kY8 {
                      __DEFAULT -> tagToEnum# [sat_s4kY8];
                    };
              };
        };

GHC.Int.$fBoundedInt64_$cminBound :: GHC.Int.Int64
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I64#! [-9223372036854775808#];

GHC.Int.$fEnumInt64_$cpred :: GHC.Int.Int64 -> GHC.Int.Int64
[GblId, Arity=1, Str=<S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [x_s4kY9]
        case x_s4kY9 of {
          GHC.Int.I64# x1_s4kYb [Occ=Once!] ->
              case x1_s4kYb of wild1_s4kYc {
                __DEFAULT ->
                    case -# [wild1_s4kYc 1#] of sat_s4kYd {
                      __DEFAULT -> GHC.Int.I64# [sat_s4kYd];
                    };
                -9223372036854775808# -> GHC.Int.$fEnumInt5;
              };
        };

GHC.Int.$fBoundedInt64_$cmaxBound :: GHC.Int.Int64
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I64#! [9223372036854775807#];

GHC.Int.$fBoundedInt64 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Bounded GHC.Int.Int64
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Bounded! [GHC.Int.$fBoundedInt64_$cminBound
                                       GHC.Int.$fBoundedInt64_$cmaxBound];

GHC.Int.$fEnumInt64_$csucc :: GHC.Int.Int64 -> GHC.Int.Int64
[GblId, Arity=1, Str=<S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [x_s4kYe]
        case x_s4kYe of {
          GHC.Int.I64# x1_s4kYg [Occ=Once!] ->
              case x1_s4kYg of wild1_s4kYh {
                __DEFAULT ->
                    case +# [wild1_s4kYh 1#] of sat_s4kYi {
                      __DEFAULT -> GHC.Int.I64# [sat_s4kYi];
                    };
                9223372036854775807# -> GHC.Int.$fEnumInt6;
              };
        };

GHC.Int.$wgo2 [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: GHC.Prim.Int# -> (# GHC.Int.Int64, [GHC.Int.Int64] #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [w_s4kYj]
        let {
          sat_s4kYq [Occ=Once] :: [GHC.Int.Int64]
          [LclId] =
              [w_s4kYj] \u []
                  case w_s4kYj of wild_s4kYl {
                    __DEFAULT ->
                        case +# [wild_s4kYl 1#] of sat_s4kYm {
                          __DEFAULT ->
                              case GHC.Int.$wgo2 sat_s4kYm of {
                                (#,#) ww1_s4kYo [Occ=Once] ww2_s4kYp [Occ=Once] ->
                                    : [ww1_s4kYo ww2_s4kYp];
                              };
                        };
                    9223372036854775807# -> [] [];
                  }; } in
        let {
          sat_s4kYk [Occ=Once] :: GHC.Int.Int64
          [LclId] =
              CCCS GHC.Int.I64#! [w_s4kYj];
        } in  (#,#) [sat_s4kYk sat_s4kYq];

GHC.Int.$fEnumInt64_go [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> [GHC.Int.Int64]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>m2, Unf=OtherCon []] =
    [] \r [w_s4kYr]
        case GHC.Int.$wgo2 w_s4kYr of {
          (#,#) ww1_s4kYt [Occ=Once] ww2_s4kYu [Occ=Once] ->
              : [ww1_s4kYt ww2_s4kYu];
        };

GHC.Int.$fEnumInt64_$cenumFrom :: GHC.Int.Int64 -> [GHC.Int.Int64]
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m2,
 Unf=OtherCon []] =
    [] \r [n_s4kYv]
        case n_s4kYv of {
          GHC.Int.I64# x#_s4kYx [Occ=Once] ->
              GHC.Int.$fEnumInt64_go x#_s4kYx;
        };

GHC.Int.$fEnumInt64 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Enum GHC.Int.Int64
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Enum! [GHC.Int.$fEnumInt64_$csucc
                                    GHC.Int.$fEnumInt64_$cpred
                                    GHC.Int.$fEnumInt64_$ctoEnum
                                    GHC.Int.$fEnumInt64_$cfromEnum
                                    GHC.Int.$fEnumInt64_$cenumFrom
                                    GHC.Int.$fEnumInt64_$cenumFromThen
                                    GHC.Int.$fEnumInt64_$cenumFromTo
                                    GHC.Int.$fEnumInt64_$cenumFromThenTo];
GHC.Int.$fEnumInt64_$cenumFromThen [Occ=LoopBreaker]
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> [GHC.Int.Int64]
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Enum.boundedEnumFromThen
            GHC.Int.$fEnumInt64 GHC.Int.$fBoundedInt64 eta_B2 eta_B1;

GHC.Int.$fNumInt8_$cfromInteger
  :: GHC.Integer.Type.Integer -> GHC.Int.Int8
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [i_s4kYy]
        case GHC.Integer.Type.integerToInt i_s4kYy of wild_s4kYz {
          __DEFAULT ->
              case narrow8Int# [wild_s4kYz] of sat_s4kYA {
                __DEFAULT -> GHC.Int.I8# [sat_s4kYA];
              };
        };

GHC.Int.$fNumInt8_$cnegate :: GHC.Int.Int8 -> GHC.Int.Int8
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4kYB]
        case ds_s4kYB of {
          GHC.Int.I8# x#_s4kYD [Occ=Once] ->
              case negateInt# [x#_s4kYD] of sat_s4kYE {
                __DEFAULT ->
                    case narrow8Int# [sat_s4kYE] of sat_s4kYF {
                      __DEFAULT -> GHC.Int.I8# [sat_s4kYF];
                    };
              };
        };

GHC.Int.$fNumInt8_$c*
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> GHC.Int.Int8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4kYG ds1_s4kYH]
        case ds_s4kYG of {
          GHC.Int.I8# x#_s4kYJ [Occ=Once] ->
              case ds1_s4kYH of {
                GHC.Int.I8# y#_s4kYL [Occ=Once] ->
                    case *# [x#_s4kYJ y#_s4kYL] of sat_s4kYM {
                      __DEFAULT ->
                          case narrow8Int# [sat_s4kYM] of sat_s4kYN {
                            __DEFAULT -> GHC.Int.I8# [sat_s4kYN];
                          };
                    };
              };
        };

GHC.Int.$fNumInt8_$c-
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> GHC.Int.Int8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4kYO ds1_s4kYP]
        case ds_s4kYO of {
          GHC.Int.I8# x#_s4kYR [Occ=Once] ->
              case ds1_s4kYP of {
                GHC.Int.I8# y#_s4kYT [Occ=Once] ->
                    case -# [x#_s4kYR y#_s4kYT] of sat_s4kYU {
                      __DEFAULT ->
                          case narrow8Int# [sat_s4kYU] of sat_s4kYV {
                            __DEFAULT -> GHC.Int.I8# [sat_s4kYV];
                          };
                    };
              };
        };

GHC.Int.$fNumInt8_$c+
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> GHC.Int.Int8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4kYW ds1_s4kYX]
        case ds_s4kYW of {
          GHC.Int.I8# x#_s4kYZ [Occ=Once] ->
              case ds1_s4kYX of {
                GHC.Int.I8# y#_s4kZ1 [Occ=Once] ->
                    case +# [x#_s4kYZ y#_s4kZ1] of sat_s4kZ2 {
                      __DEFAULT ->
                          case narrow8Int# [sat_s4kZ2] of sat_s4kZ3 {
                            __DEFAULT -> GHC.Int.I8# [sat_s4kZ3];
                          };
                    };
              };
        };

GHC.Int.$fIntegralInt8_$ctoInteger
  :: GHC.Int.Int8 -> GHC.Integer.Type.Integer
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4kZ4]
        case ds_s4kZ4 of {
          GHC.Int.I8# x#_s4kZ6 [Occ=Once] ->
              GHC.Integer.Type.smallInteger x#_s4kZ6;
        };

GHC.Int.$fBitsInt8_$cpopCount :: GHC.Int.Int8 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4kZ7]
        case ds_s4kZ7 of {
          GHC.Int.I8# x#_s4kZ9 [Occ=Once] ->
              case int2Word# [x#_s4kZ9] of sat_s4kZa {
                __DEFAULT ->
                    case popCnt8# [sat_s4kZa] of sat_s4kZb {
                      __DEFAULT ->
                          case word2Int# [sat_s4kZb] of sat_s4kZc {
                            __DEFAULT -> GHC.Types.I# [sat_s4kZc];
                          };
                    };
              };
        };

GHC.Int.$fBitsInt8_$cunsafeShiftR
  :: GHC.Int.Int8 -> GHC.Types.Int -> GHC.Int.Int8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4kZd ds1_s4kZe]
        case ds_s4kZd of {
          GHC.Int.I8# x#_s4kZg [Occ=Once] ->
              case ds1_s4kZe of {
                GHC.Types.I# i#_s4kZi [Occ=Once] ->
                    case uncheckedIShiftRA# [x#_s4kZg i#_s4kZi] of sat_s4kZj {
                      __DEFAULT -> GHC.Int.I8# [sat_s4kZj];
                    };
              };
        };

GHC.Int.$fBitsInt13 :: GHC.Int.Int8
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I8#! [0#];

GHC.Int.$fNumInt9 :: GHC.Int.Int8
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I8#! [-1#];

GHC.Int.$fBitsInt8_$cshiftR [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int8 -> GHC.Types.Int -> GHC.Int.Int8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4kZk w1_s4kZl]
        case w_s4kZk of {
          GHC.Int.I8# ww1_s4kZn [Occ=Once*] ->
              case w1_s4kZl of {
                GHC.Types.I# ww3_s4kZp ->
                    case >=# [ww3_s4kZp 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftRA# [ww1_s4kZn ww3_s4kZp] of sat_s4kZr {
                            __DEFAULT -> GHC.Int.I8# [sat_s4kZr];
                          };
                      1# ->
                          case <# [ww1_s4kZn 0#] of {
                            __DEFAULT -> GHC.Int.$fBitsInt13;
                            1# -> GHC.Int.$fNumInt9;
                          };
                    };
              };
        };

GHC.Int.$fBitsInt8_$cunsafeShiftL
  :: GHC.Int.Int8 -> GHC.Types.Int -> GHC.Int.Int8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4kZt ds1_s4kZu]
        case ds_s4kZt of {
          GHC.Int.I8# x#_s4kZw [Occ=Once] ->
              case ds1_s4kZu of {
                GHC.Types.I# i#_s4kZy [Occ=Once] ->
                    case uncheckedIShiftL# [x#_s4kZw i#_s4kZy] of sat_s4kZz {
                      __DEFAULT ->
                          case narrow8Int# [sat_s4kZz] of sat_s4kZA {
                            __DEFAULT -> GHC.Int.I8# [sat_s4kZA];
                          };
                    };
              };
        };

GHC.Int.$fBitsInt8_$cshiftL
  :: GHC.Int.Int8 -> GHC.Types.Int -> GHC.Int.Int8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4kZB ds1_s4kZC]
        case ds_s4kZB of {
          GHC.Int.I8# x#_s4kZE [Occ=Once] ->
              case ds1_s4kZC of {
                GHC.Types.I# i#_s4kZG ->
                    case >=# [i#_s4kZG 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftL# [x#_s4kZE i#_s4kZG] of sat_s4kZI {
                            __DEFAULT ->
                                case narrow8Int# [sat_s4kZI] of sat_s4kZJ {
                                  __DEFAULT -> GHC.Int.I8# [sat_s4kZJ];
                                };
                          };
                      1# -> GHC.Int.$fBitsInt13;
                    };
              };
        };

GHC.Int.$fBitsInt8_$cisSigned :: GHC.Int.Int8 -> GHC.Types.Bool
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>, Unf=OtherCon []] =
    [] \r [ds_s4kZK] GHC.Types.True [];

GHC.Int.$fBitsInt8_$crotate
  :: GHC.Int.Int8 -> GHC.Types.Int -> GHC.Int.Int8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4kZL ds1_s4kZM]
        case ds_s4kZL of wild_s4kZN {
          GHC.Int.I8# x#_s4kZO [Occ=Once] ->
              case ds1_s4kZM of {
                GHC.Types.I# i#_s4kZQ [Occ=Once] ->
                    case int2Word# [i#_s4kZQ] of sat_s4kZR {
                      __DEFAULT ->
                          case and# [sat_s4kZR 7##] of sat_s4kZS {
                            __DEFAULT ->
                                case word2Int# [sat_s4kZS] of wild2_s4kZT {
                                  __DEFAULT ->
                                      case int2Word# [x#_s4kZO] of sat_s4kZV {
                                        __DEFAULT ->
                                            case narrow8Word# [sat_s4kZV] of x'#_s4kZU [Dmd=<S,U>] {
                                              __DEFAULT ->
                                                  case -# [8# wild2_s4kZT] of sat_s4kZX {
                                                    __DEFAULT ->
                                                        case
                                                            uncheckedShiftRL# [x'#_s4kZU sat_s4kZX]
                                                        of
                                                        sat_s4kZY
                                                        { __DEFAULT ->
                                                              case
                                                                  uncheckedShiftL# [x'#_s4kZU
                                                                                    wild2_s4kZT]
                                                              of
                                                              sat_s4kZW
                                                              { __DEFAULT ->
                                                                    case
                                                                        or# [sat_s4kZW sat_s4kZY]
                                                                    of
                                                                    sat_s4kZZ
                                                                    { __DEFAULT ->
                                                                          case
                                                                              word2Int# [sat_s4kZZ]
                                                                          of
                                                                          sat_s4l00
                                                                          { __DEFAULT ->
                                                                                case
                                                                                    narrow8Int# [sat_s4l00]
                                                                                of
                                                                                sat_s4l01
                                                                                { __DEFAULT ->
                                                                                      GHC.Int.I8# [sat_s4l01];
                                                                                };
                                                                          };
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                  0# -> wild_s4kZN;
                                };
                          };
                    };
              };
        };

GHC.Int.$fBitsInt8_$cshift [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int8 -> GHC.Types.Int -> GHC.Int.Int8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l02 ds1_s4l03]
        case ds_s4l02 of {
          GHC.Int.I8# x#_s4l05 [Occ=Once*] ->
              case ds1_s4l03 of {
                GHC.Types.I# i#_s4l07 ->
                    case >=# [i#_s4l07 0#] of {
                      __DEFAULT ->
                          case negateInt# [i#_s4l07] of b_s4l09 [Dmd=<S,U>] {
                            __DEFAULT ->
                                case >=# [b_s4l09 64#] of {
                                  __DEFAULT ->
                                      case uncheckedIShiftRA# [x#_s4l05 b_s4l09] of sat_s4l0b {
                                        __DEFAULT -> GHC.Int.I8# [sat_s4l0b];
                                      };
                                  1# ->
                                      case <# [x#_s4l05 0#] of {
                                        __DEFAULT -> GHC.Int.$fBitsInt13;
                                        1# -> GHC.Int.$fNumInt9;
                                      };
                                };
                          };
                      1# ->
                          case >=# [i#_s4l07 64#] of {
                            __DEFAULT ->
                                case uncheckedIShiftL# [x#_s4l05 i#_s4l07] of sat_s4l0e {
                                  __DEFAULT ->
                                      case narrow8Int# [sat_s4l0e] of sat_s4l0f {
                                        __DEFAULT -> GHC.Int.I8# [sat_s4l0f];
                                      };
                                };
                            1# -> GHC.Int.$fBitsInt13;
                          };
                    };
              };
        };

GHC.Int.$fBitsInt8_$ccomplement :: GHC.Int.Int8 -> GHC.Int.Int8
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l0g]
        case ds_s4l0g of {
          GHC.Int.I8# x#_s4l0i [Occ=Once] ->
              case int2Word# [x#_s4l0i] of sat_s4l0j {
                __DEFAULT ->
                    case not# [sat_s4l0j] of sat_s4l0k {
                      __DEFAULT ->
                          case word2Int# [sat_s4l0k] of sat_s4l0l {
                            __DEFAULT -> GHC.Int.I8# [sat_s4l0l];
                          };
                    };
              };
        };

GHC.Int.$fBitsInt8_$cxor
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> GHC.Int.Int8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l0m ds1_s4l0n]
        case ds_s4l0m of {
          GHC.Int.I8# x#_s4l0p [Occ=Once] ->
              case ds1_s4l0n of {
                GHC.Int.I8# y#_s4l0r [Occ=Once] ->
                    case int2Word# [y#_s4l0r] of sat_s4l0t {
                      __DEFAULT ->
                          case int2Word# [x#_s4l0p] of sat_s4l0s {
                            __DEFAULT ->
                                case xor# [sat_s4l0s sat_s4l0t] of sat_s4l0u {
                                  __DEFAULT ->
                                      case word2Int# [sat_s4l0u] of sat_s4l0v {
                                        __DEFAULT -> GHC.Int.I8# [sat_s4l0v];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fBitsInt8_$c.|.
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> GHC.Int.Int8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l0w ds1_s4l0x]
        case ds_s4l0w of {
          GHC.Int.I8# x#_s4l0z [Occ=Once] ->
              case ds1_s4l0x of {
                GHC.Int.I8# y#_s4l0B [Occ=Once] ->
                    case int2Word# [y#_s4l0B] of sat_s4l0D {
                      __DEFAULT ->
                          case int2Word# [x#_s4l0z] of sat_s4l0C {
                            __DEFAULT ->
                                case or# [sat_s4l0C sat_s4l0D] of sat_s4l0E {
                                  __DEFAULT ->
                                      case word2Int# [sat_s4l0E] of sat_s4l0F {
                                        __DEFAULT -> GHC.Int.I8# [sat_s4l0F];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fBitsInt8_$c.&.
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> GHC.Int.Int8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l0G ds1_s4l0H]
        case ds_s4l0G of {
          GHC.Int.I8# x#_s4l0J [Occ=Once] ->
              case ds1_s4l0H of {
                GHC.Int.I8# y#_s4l0L [Occ=Once] ->
                    case int2Word# [y#_s4l0L] of sat_s4l0N {
                      __DEFAULT ->
                          case int2Word# [x#_s4l0J] of sat_s4l0M {
                            __DEFAULT ->
                                case and# [sat_s4l0M sat_s4l0N] of sat_s4l0O {
                                  __DEFAULT ->
                                      case word2Int# [sat_s4l0O] of sat_s4l0P {
                                        __DEFAULT -> GHC.Int.I8# [sat_s4l0P];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fFiniteBitsInt8_$ccountTrailingZeros
  :: GHC.Int.Int8 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l0Q]
        case ds_s4l0Q of {
          GHC.Int.I8# x#_s4l0S [Occ=Once] ->
              case int2Word# [x#_s4l0S] of sat_s4l0T {
                __DEFAULT ->
                    case ctz8# [sat_s4l0T] of sat_s4l0U {
                      __DEFAULT ->
                          case word2Int# [sat_s4l0U] of sat_s4l0V {
                            __DEFAULT -> GHC.Types.I# [sat_s4l0V];
                          };
                    };
              };
        };

GHC.Int.$fFiniteBitsInt8_$ccountLeadingZeros
  :: GHC.Int.Int8 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l0W]
        case ds_s4l0W of {
          GHC.Int.I8# x#_s4l0Y [Occ=Once] ->
              case int2Word# [x#_s4l0Y] of sat_s4l0Z {
                __DEFAULT ->
                    case clz8# [sat_s4l0Z] of sat_s4l10 {
                      __DEFAULT ->
                          case word2Int# [sat_s4l10] of sat_s4l11 {
                            __DEFAULT -> GHC.Types.I# [sat_s4l11];
                          };
                    };
              };
        };

GHC.Int.$fBitsInt11 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [8#];

GHC.Int.$fBitsInt8_$cfiniteBitSize :: GHC.Int.Int8 -> GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>m, Unf=OtherCon []] =
    [] \r [ds_s4l12] GHC.Int.$fBitsInt11;

GHC.Int.$fNumInt16_$cfromInteger
  :: GHC.Integer.Type.Integer -> GHC.Int.Int16
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [i_s4l13]
        case GHC.Integer.Type.integerToInt i_s4l13 of wild_s4l14 {
          __DEFAULT ->
              case narrow16Int# [wild_s4l14] of sat_s4l15 {
                __DEFAULT -> GHC.Int.I16# [sat_s4l15];
              };
        };

GHC.Int.$fNumInt16_$cnegate :: GHC.Int.Int16 -> GHC.Int.Int16
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l16]
        case ds_s4l16 of {
          GHC.Int.I16# x#_s4l18 [Occ=Once] ->
              case negateInt# [x#_s4l18] of sat_s4l19 {
                __DEFAULT ->
                    case narrow16Int# [sat_s4l19] of sat_s4l1a {
                      __DEFAULT -> GHC.Int.I16# [sat_s4l1a];
                    };
              };
        };

GHC.Int.$fNumInt16_$c*
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Int.Int16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l1b ds1_s4l1c]
        case ds_s4l1b of {
          GHC.Int.I16# x#_s4l1e [Occ=Once] ->
              case ds1_s4l1c of {
                GHC.Int.I16# y#_s4l1g [Occ=Once] ->
                    case *# [x#_s4l1e y#_s4l1g] of sat_s4l1h {
                      __DEFAULT ->
                          case narrow16Int# [sat_s4l1h] of sat_s4l1i {
                            __DEFAULT -> GHC.Int.I16# [sat_s4l1i];
                          };
                    };
              };
        };

GHC.Int.$fNumInt16_$c-
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Int.Int16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l1j ds1_s4l1k]
        case ds_s4l1j of {
          GHC.Int.I16# x#_s4l1m [Occ=Once] ->
              case ds1_s4l1k of {
                GHC.Int.I16# y#_s4l1o [Occ=Once] ->
                    case -# [x#_s4l1m y#_s4l1o] of sat_s4l1p {
                      __DEFAULT ->
                          case narrow16Int# [sat_s4l1p] of sat_s4l1q {
                            __DEFAULT -> GHC.Int.I16# [sat_s4l1q];
                          };
                    };
              };
        };

GHC.Int.$fNumInt16_$c+
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Int.Int16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l1r ds1_s4l1s]
        case ds_s4l1r of {
          GHC.Int.I16# x#_s4l1u [Occ=Once] ->
              case ds1_s4l1s of {
                GHC.Int.I16# y#_s4l1w [Occ=Once] ->
                    case +# [x#_s4l1u y#_s4l1w] of sat_s4l1x {
                      __DEFAULT ->
                          case narrow16Int# [sat_s4l1x] of sat_s4l1y {
                            __DEFAULT -> GHC.Int.I16# [sat_s4l1y];
                          };
                    };
              };
        };

GHC.Int.$fIntegralInt16_$ctoInteger
  :: GHC.Int.Int16 -> GHC.Integer.Type.Integer
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4l1z]
        case ds_s4l1z of {
          GHC.Int.I16# x#_s4l1B [Occ=Once] ->
              GHC.Integer.Type.smallInteger x#_s4l1B;
        };

GHC.Int.$fBitsInt16_$cpopCount :: GHC.Int.Int16 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l1C]
        case ds_s4l1C of {
          GHC.Int.I16# x#_s4l1E [Occ=Once] ->
              case int2Word# [x#_s4l1E] of sat_s4l1F {
                __DEFAULT ->
                    case popCnt16# [sat_s4l1F] of sat_s4l1G {
                      __DEFAULT ->
                          case word2Int# [sat_s4l1G] of sat_s4l1H {
                            __DEFAULT -> GHC.Types.I# [sat_s4l1H];
                          };
                    };
              };
        };

GHC.Int.$fBitsInt16_$cunsafeShiftR
  :: GHC.Int.Int16 -> GHC.Types.Int -> GHC.Int.Int16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l1I ds1_s4l1J]
        case ds_s4l1I of {
          GHC.Int.I16# x#_s4l1L [Occ=Once] ->
              case ds1_s4l1J of {
                GHC.Types.I# i#_s4l1N [Occ=Once] ->
                    case uncheckedIShiftRA# [x#_s4l1L i#_s4l1N] of sat_s4l1O {
                      __DEFAULT -> GHC.Int.I16# [sat_s4l1O];
                    };
              };
        };

GHC.Int.$fBitsInt3 :: GHC.Int.Int16
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I16#! [0#];

GHC.Int.$fNumInt2 :: GHC.Int.Int16
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I16#! [-1#];

GHC.Int.$fBitsInt16_$cshiftR [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int16 -> GHC.Types.Int -> GHC.Int.Int16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4l1P w1_s4l1Q]
        case w_s4l1P of {
          GHC.Int.I16# ww1_s4l1S [Occ=Once*] ->
              case w1_s4l1Q of {
                GHC.Types.I# ww3_s4l1U ->
                    case >=# [ww3_s4l1U 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftRA# [ww1_s4l1S ww3_s4l1U] of sat_s4l1W {
                            __DEFAULT -> GHC.Int.I16# [sat_s4l1W];
                          };
                      1# ->
                          case <# [ww1_s4l1S 0#] of {
                            __DEFAULT -> GHC.Int.$fBitsInt3;
                            1# -> GHC.Int.$fNumInt2;
                          };
                    };
              };
        };

GHC.Int.$fBitsInt16_$cunsafeShiftL
  :: GHC.Int.Int16 -> GHC.Types.Int -> GHC.Int.Int16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l1Y ds1_s4l1Z]
        case ds_s4l1Y of {
          GHC.Int.I16# x#_s4l21 [Occ=Once] ->
              case ds1_s4l1Z of {
                GHC.Types.I# i#_s4l23 [Occ=Once] ->
                    case uncheckedIShiftL# [x#_s4l21 i#_s4l23] of sat_s4l24 {
                      __DEFAULT ->
                          case narrow16Int# [sat_s4l24] of sat_s4l25 {
                            __DEFAULT -> GHC.Int.I16# [sat_s4l25];
                          };
                    };
              };
        };

GHC.Int.$fBitsInt16_$cshiftL
  :: GHC.Int.Int16 -> GHC.Types.Int -> GHC.Int.Int16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l26 ds1_s4l27]
        case ds_s4l26 of {
          GHC.Int.I16# x#_s4l29 [Occ=Once] ->
              case ds1_s4l27 of {
                GHC.Types.I# i#_s4l2b ->
                    case >=# [i#_s4l2b 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftL# [x#_s4l29 i#_s4l2b] of sat_s4l2d {
                            __DEFAULT ->
                                case narrow16Int# [sat_s4l2d] of sat_s4l2e {
                                  __DEFAULT -> GHC.Int.I16# [sat_s4l2e];
                                };
                          };
                      1# -> GHC.Int.$fBitsInt3;
                    };
              };
        };

GHC.Int.$fBitsInt16_$cisSigned :: GHC.Int.Int16 -> GHC.Types.Bool
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>, Unf=OtherCon []] =
    [] \r [ds_s4l2f] GHC.Types.True [];

GHC.Int.$fBitsInt16_$crotate
  :: GHC.Int.Int16 -> GHC.Types.Int -> GHC.Int.Int16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l2g ds1_s4l2h]
        case ds_s4l2g of wild_s4l2i {
          GHC.Int.I16# x#_s4l2j [Occ=Once] ->
              case ds1_s4l2h of {
                GHC.Types.I# i#_s4l2l [Occ=Once] ->
                    case int2Word# [i#_s4l2l] of sat_s4l2m {
                      __DEFAULT ->
                          case and# [sat_s4l2m 15##] of sat_s4l2n {
                            __DEFAULT ->
                                case word2Int# [sat_s4l2n] of wild2_s4l2o {
                                  __DEFAULT ->
                                      case int2Word# [x#_s4l2j] of sat_s4l2q {
                                        __DEFAULT ->
                                            case
                                                narrow16Word# [sat_s4l2q]
                                            of
                                            x'#_s4l2p [Dmd=<S,U>]
                                            { __DEFAULT ->
                                                  case -# [16# wild2_s4l2o] of sat_s4l2s {
                                                    __DEFAULT ->
                                                        case
                                                            uncheckedShiftRL# [x'#_s4l2p sat_s4l2s]
                                                        of
                                                        sat_s4l2t
                                                        { __DEFAULT ->
                                                              case
                                                                  uncheckedShiftL# [x'#_s4l2p
                                                                                    wild2_s4l2o]
                                                              of
                                                              sat_s4l2r
                                                              { __DEFAULT ->
                                                                    case
                                                                        or# [sat_s4l2r sat_s4l2t]
                                                                    of
                                                                    sat_s4l2u
                                                                    { __DEFAULT ->
                                                                          case
                                                                              word2Int# [sat_s4l2u]
                                                                          of
                                                                          sat_s4l2v
                                                                          { __DEFAULT ->
                                                                                case
                                                                                    narrow16Int# [sat_s4l2v]
                                                                                of
                                                                                sat_s4l2w
                                                                                { __DEFAULT ->
                                                                                      GHC.Int.I16# [sat_s4l2w];
                                                                                };
                                                                          };
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                  0# -> wild_s4l2i;
                                };
                          };
                    };
              };
        };

GHC.Int.$fBitsInt16_$cshift [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int16 -> GHC.Types.Int -> GHC.Int.Int16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l2x ds1_s4l2y]
        case ds_s4l2x of {
          GHC.Int.I16# x#_s4l2A [Occ=Once*] ->
              case ds1_s4l2y of {
                GHC.Types.I# i#_s4l2C ->
                    case >=# [i#_s4l2C 0#] of {
                      __DEFAULT ->
                          case negateInt# [i#_s4l2C] of b_s4l2E [Dmd=<S,U>] {
                            __DEFAULT ->
                                case >=# [b_s4l2E 64#] of {
                                  __DEFAULT ->
                                      case uncheckedIShiftRA# [x#_s4l2A b_s4l2E] of sat_s4l2G {
                                        __DEFAULT -> GHC.Int.I16# [sat_s4l2G];
                                      };
                                  1# ->
                                      case <# [x#_s4l2A 0#] of {
                                        __DEFAULT -> GHC.Int.$fBitsInt3;
                                        1# -> GHC.Int.$fNumInt2;
                                      };
                                };
                          };
                      1# ->
                          case >=# [i#_s4l2C 64#] of {
                            __DEFAULT ->
                                case uncheckedIShiftL# [x#_s4l2A i#_s4l2C] of sat_s4l2J {
                                  __DEFAULT ->
                                      case narrow16Int# [sat_s4l2J] of sat_s4l2K {
                                        __DEFAULT -> GHC.Int.I16# [sat_s4l2K];
                                      };
                                };
                            1# -> GHC.Int.$fBitsInt3;
                          };
                    };
              };
        };

GHC.Int.$fBitsInt16_$ccomplement :: GHC.Int.Int16 -> GHC.Int.Int16
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l2L]
        case ds_s4l2L of {
          GHC.Int.I16# x#_s4l2N [Occ=Once] ->
              case int2Word# [x#_s4l2N] of sat_s4l2O {
                __DEFAULT ->
                    case not# [sat_s4l2O] of sat_s4l2P {
                      __DEFAULT ->
                          case word2Int# [sat_s4l2P] of sat_s4l2Q {
                            __DEFAULT -> GHC.Int.I16# [sat_s4l2Q];
                          };
                    };
              };
        };

GHC.Int.$fBitsInt16_$cxor
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Int.Int16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l2R ds1_s4l2S]
        case ds_s4l2R of {
          GHC.Int.I16# x#_s4l2U [Occ=Once] ->
              case ds1_s4l2S of {
                GHC.Int.I16# y#_s4l2W [Occ=Once] ->
                    case int2Word# [y#_s4l2W] of sat_s4l2Y {
                      __DEFAULT ->
                          case int2Word# [x#_s4l2U] of sat_s4l2X {
                            __DEFAULT ->
                                case xor# [sat_s4l2X sat_s4l2Y] of sat_s4l2Z {
                                  __DEFAULT ->
                                      case word2Int# [sat_s4l2Z] of sat_s4l30 {
                                        __DEFAULT -> GHC.Int.I16# [sat_s4l30];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fBitsInt16_$c.|.
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Int.Int16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l31 ds1_s4l32]
        case ds_s4l31 of {
          GHC.Int.I16# x#_s4l34 [Occ=Once] ->
              case ds1_s4l32 of {
                GHC.Int.I16# y#_s4l36 [Occ=Once] ->
                    case int2Word# [y#_s4l36] of sat_s4l38 {
                      __DEFAULT ->
                          case int2Word# [x#_s4l34] of sat_s4l37 {
                            __DEFAULT ->
                                case or# [sat_s4l37 sat_s4l38] of sat_s4l39 {
                                  __DEFAULT ->
                                      case word2Int# [sat_s4l39] of sat_s4l3a {
                                        __DEFAULT -> GHC.Int.I16# [sat_s4l3a];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fBitsInt16_$c.&.
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Int.Int16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l3b ds1_s4l3c]
        case ds_s4l3b of {
          GHC.Int.I16# x#_s4l3e [Occ=Once] ->
              case ds1_s4l3c of {
                GHC.Int.I16# y#_s4l3g [Occ=Once] ->
                    case int2Word# [y#_s4l3g] of sat_s4l3i {
                      __DEFAULT ->
                          case int2Word# [x#_s4l3e] of sat_s4l3h {
                            __DEFAULT ->
                                case and# [sat_s4l3h sat_s4l3i] of sat_s4l3j {
                                  __DEFAULT ->
                                      case word2Int# [sat_s4l3j] of sat_s4l3k {
                                        __DEFAULT -> GHC.Int.I16# [sat_s4l3k];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fFiniteBitsInt16_$ccountTrailingZeros
  :: GHC.Int.Int16 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l3l]
        case ds_s4l3l of {
          GHC.Int.I16# x#_s4l3n [Occ=Once] ->
              case int2Word# [x#_s4l3n] of sat_s4l3o {
                __DEFAULT ->
                    case ctz16# [sat_s4l3o] of sat_s4l3p {
                      __DEFAULT ->
                          case word2Int# [sat_s4l3p] of sat_s4l3q {
                            __DEFAULT -> GHC.Types.I# [sat_s4l3q];
                          };
                    };
              };
        };

GHC.Int.$fFiniteBitsInt16_$ccountLeadingZeros
  :: GHC.Int.Int16 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l3r]
        case ds_s4l3r of {
          GHC.Int.I16# x#_s4l3t [Occ=Once] ->
              case int2Word# [x#_s4l3t] of sat_s4l3u {
                __DEFAULT ->
                    case clz16# [sat_s4l3u] of sat_s4l3v {
                      __DEFAULT ->
                          case word2Int# [sat_s4l3v] of sat_s4l3w {
                            __DEFAULT -> GHC.Types.I# [sat_s4l3w];
                          };
                    };
              };
        };

GHC.Int.$fBitsInt1 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [16#];

GHC.Int.$fBitsInt16_$cfiniteBitSize
  :: GHC.Int.Int16 -> GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>m, Unf=OtherCon []] =
    [] \r [ds_s4l3x] GHC.Int.$fBitsInt1;

GHC.Int.$fNumInt32_$cfromInteger
  :: GHC.Integer.Type.Integer -> GHC.Int.Int32
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [i_s4l3y]
        case GHC.Integer.Type.integerToInt i_s4l3y of wild_s4l3z {
          __DEFAULT ->
              case narrow32Int# [wild_s4l3z] of sat_s4l3A {
                __DEFAULT -> GHC.Int.I32# [sat_s4l3A];
              };
        };

GHC.Int.$fNumInt32_$cnegate :: GHC.Int.Int32 -> GHC.Int.Int32
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l3B]
        case ds_s4l3B of {
          GHC.Int.I32# x#_s4l3D [Occ=Once] ->
              case negateInt# [x#_s4l3D] of sat_s4l3E {
                __DEFAULT ->
                    case narrow32Int# [sat_s4l3E] of sat_s4l3F {
                      __DEFAULT -> GHC.Int.I32# [sat_s4l3F];
                    };
              };
        };

GHC.Int.$fNumInt32_$c*
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> GHC.Int.Int32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l3G ds1_s4l3H]
        case ds_s4l3G of {
          GHC.Int.I32# x#_s4l3J [Occ=Once] ->
              case ds1_s4l3H of {
                GHC.Int.I32# y#_s4l3L [Occ=Once] ->
                    case *# [x#_s4l3J y#_s4l3L] of sat_s4l3M {
                      __DEFAULT ->
                          case narrow32Int# [sat_s4l3M] of sat_s4l3N {
                            __DEFAULT -> GHC.Int.I32# [sat_s4l3N];
                          };
                    };
              };
        };

GHC.Int.$fNumInt32_$c-
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> GHC.Int.Int32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l3O ds1_s4l3P]
        case ds_s4l3O of {
          GHC.Int.I32# x#_s4l3R [Occ=Once] ->
              case ds1_s4l3P of {
                GHC.Int.I32# y#_s4l3T [Occ=Once] ->
                    case -# [x#_s4l3R y#_s4l3T] of sat_s4l3U {
                      __DEFAULT ->
                          case narrow32Int# [sat_s4l3U] of sat_s4l3V {
                            __DEFAULT -> GHC.Int.I32# [sat_s4l3V];
                          };
                    };
              };
        };

GHC.Int.$fNumInt32_$c+
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> GHC.Int.Int32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l3W ds1_s4l3X]
        case ds_s4l3W of {
          GHC.Int.I32# x#_s4l3Z [Occ=Once] ->
              case ds1_s4l3X of {
                GHC.Int.I32# y#_s4l41 [Occ=Once] ->
                    case +# [x#_s4l3Z y#_s4l41] of sat_s4l42 {
                      __DEFAULT ->
                          case narrow32Int# [sat_s4l42] of sat_s4l43 {
                            __DEFAULT -> GHC.Int.I32# [sat_s4l43];
                          };
                    };
              };
        };

GHC.Int.$fIntegralInt32_$ctoInteger
  :: GHC.Int.Int32 -> GHC.Integer.Type.Integer
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4l44]
        case ds_s4l44 of {
          GHC.Int.I32# x#_s4l46 [Occ=Once] ->
              GHC.Integer.Type.smallInteger x#_s4l46;
        };

GHC.Int.$fBitsInt32_$cpopCount :: GHC.Int.Int32 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l47]
        case ds_s4l47 of {
          GHC.Int.I32# x#_s4l49 [Occ=Once] ->
              case int2Word# [x#_s4l49] of sat_s4l4a {
                __DEFAULT ->
                    case popCnt32# [sat_s4l4a] of sat_s4l4b {
                      __DEFAULT ->
                          case word2Int# [sat_s4l4b] of sat_s4l4c {
                            __DEFAULT -> GHC.Types.I# [sat_s4l4c];
                          };
                    };
              };
        };

GHC.Int.$fBitsInt32_$cunsafeShiftR
  :: GHC.Int.Int32 -> GHC.Types.Int -> GHC.Int.Int32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l4d ds1_s4l4e]
        case ds_s4l4d of {
          GHC.Int.I32# x#_s4l4g [Occ=Once] ->
              case ds1_s4l4e of {
                GHC.Types.I# i#_s4l4i [Occ=Once] ->
                    case uncheckedIShiftRA# [x#_s4l4g i#_s4l4i] of sat_s4l4j {
                      __DEFAULT -> GHC.Int.I32# [sat_s4l4j];
                    };
              };
        };

GHC.Int.$fBitsInt6 :: GHC.Int.Int32
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I32#! [0#];

GHC.Int.$fNumInt4 :: GHC.Int.Int32
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I32#! [-1#];

GHC.Int.$fBitsInt32_$cshiftR [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int32 -> GHC.Types.Int -> GHC.Int.Int32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4l4k w1_s4l4l]
        case w_s4l4k of {
          GHC.Int.I32# ww1_s4l4n [Occ=Once*] ->
              case w1_s4l4l of {
                GHC.Types.I# ww3_s4l4p ->
                    case >=# [ww3_s4l4p 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftRA# [ww1_s4l4n ww3_s4l4p] of sat_s4l4r {
                            __DEFAULT -> GHC.Int.I32# [sat_s4l4r];
                          };
                      1# ->
                          case <# [ww1_s4l4n 0#] of {
                            __DEFAULT -> GHC.Int.$fBitsInt6;
                            1# -> GHC.Int.$fNumInt4;
                          };
                    };
              };
        };

GHC.Int.$fBitsInt32_$cunsafeShiftL
  :: GHC.Int.Int32 -> GHC.Types.Int -> GHC.Int.Int32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l4t ds1_s4l4u]
        case ds_s4l4t of {
          GHC.Int.I32# x#_s4l4w [Occ=Once] ->
              case ds1_s4l4u of {
                GHC.Types.I# i#_s4l4y [Occ=Once] ->
                    case uncheckedIShiftL# [x#_s4l4w i#_s4l4y] of sat_s4l4z {
                      __DEFAULT ->
                          case narrow32Int# [sat_s4l4z] of sat_s4l4A {
                            __DEFAULT -> GHC.Int.I32# [sat_s4l4A];
                          };
                    };
              };
        };

GHC.Int.$fBitsInt32_$cshiftL
  :: GHC.Int.Int32 -> GHC.Types.Int -> GHC.Int.Int32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l4B ds1_s4l4C]
        case ds_s4l4B of {
          GHC.Int.I32# x#_s4l4E [Occ=Once] ->
              case ds1_s4l4C of {
                GHC.Types.I# i#_s4l4G ->
                    case >=# [i#_s4l4G 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftL# [x#_s4l4E i#_s4l4G] of sat_s4l4I {
                            __DEFAULT ->
                                case narrow32Int# [sat_s4l4I] of sat_s4l4J {
                                  __DEFAULT -> GHC.Int.I32# [sat_s4l4J];
                                };
                          };
                      1# -> GHC.Int.$fBitsInt6;
                    };
              };
        };

GHC.Int.$fBitsInt32_$cisSigned :: GHC.Int.Int32 -> GHC.Types.Bool
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>, Unf=OtherCon []] =
    [] \r [ds_s4l4K] GHC.Types.True [];

GHC.Int.$fBitsInt32_$crotate
  :: GHC.Int.Int32 -> GHC.Types.Int -> GHC.Int.Int32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l4L ds1_s4l4M]
        case ds_s4l4L of wild_s4l4N {
          GHC.Int.I32# x#_s4l4O [Occ=Once] ->
              case ds1_s4l4M of {
                GHC.Types.I# i#_s4l4Q [Occ=Once] ->
                    case int2Word# [i#_s4l4Q] of sat_s4l4R {
                      __DEFAULT ->
                          case and# [sat_s4l4R 31##] of sat_s4l4S {
                            __DEFAULT ->
                                case word2Int# [sat_s4l4S] of wild2_s4l4T {
                                  __DEFAULT ->
                                      case int2Word# [x#_s4l4O] of sat_s4l4V {
                                        __DEFAULT ->
                                            case
                                                narrow32Word# [sat_s4l4V]
                                            of
                                            x'#_s4l4U [Dmd=<S,U>]
                                            { __DEFAULT ->
                                                  case -# [32# wild2_s4l4T] of sat_s4l4X {
                                                    __DEFAULT ->
                                                        case
                                                            uncheckedShiftRL# [x'#_s4l4U sat_s4l4X]
                                                        of
                                                        sat_s4l4Y
                                                        { __DEFAULT ->
                                                              case
                                                                  uncheckedShiftL# [x'#_s4l4U
                                                                                    wild2_s4l4T]
                                                              of
                                                              sat_s4l4W
                                                              { __DEFAULT ->
                                                                    case
                                                                        or# [sat_s4l4W sat_s4l4Y]
                                                                    of
                                                                    sat_s4l4Z
                                                                    { __DEFAULT ->
                                                                          case
                                                                              word2Int# [sat_s4l4Z]
                                                                          of
                                                                          sat_s4l50
                                                                          { __DEFAULT ->
                                                                                case
                                                                                    narrow32Int# [sat_s4l50]
                                                                                of
                                                                                sat_s4l51
                                                                                { __DEFAULT ->
                                                                                      GHC.Int.I32# [sat_s4l51];
                                                                                };
                                                                          };
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                  0# -> wild_s4l4N;
                                };
                          };
                    };
              };
        };

GHC.Int.$fBitsInt32_$cshift [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int32 -> GHC.Types.Int -> GHC.Int.Int32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l52 ds1_s4l53]
        case ds_s4l52 of {
          GHC.Int.I32# x#_s4l55 [Occ=Once*] ->
              case ds1_s4l53 of {
                GHC.Types.I# i#_s4l57 ->
                    case >=# [i#_s4l57 0#] of {
                      __DEFAULT ->
                          case negateInt# [i#_s4l57] of b_s4l59 [Dmd=<S,U>] {
                            __DEFAULT ->
                                case >=# [b_s4l59 64#] of {
                                  __DEFAULT ->
                                      case uncheckedIShiftRA# [x#_s4l55 b_s4l59] of sat_s4l5b {
                                        __DEFAULT -> GHC.Int.I32# [sat_s4l5b];
                                      };
                                  1# ->
                                      case <# [x#_s4l55 0#] of {
                                        __DEFAULT -> GHC.Int.$fBitsInt6;
                                        1# -> GHC.Int.$fNumInt4;
                                      };
                                };
                          };
                      1# ->
                          case >=# [i#_s4l57 64#] of {
                            __DEFAULT ->
                                case uncheckedIShiftL# [x#_s4l55 i#_s4l57] of sat_s4l5e {
                                  __DEFAULT ->
                                      case narrow32Int# [sat_s4l5e] of sat_s4l5f {
                                        __DEFAULT -> GHC.Int.I32# [sat_s4l5f];
                                      };
                                };
                            1# -> GHC.Int.$fBitsInt6;
                          };
                    };
              };
        };

GHC.Int.$fBitsInt32_$ccomplement :: GHC.Int.Int32 -> GHC.Int.Int32
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l5g]
        case ds_s4l5g of {
          GHC.Int.I32# x#_s4l5i [Occ=Once] ->
              case int2Word# [x#_s4l5i] of sat_s4l5j {
                __DEFAULT ->
                    case not# [sat_s4l5j] of sat_s4l5k {
                      __DEFAULT ->
                          case word2Int# [sat_s4l5k] of sat_s4l5l {
                            __DEFAULT -> GHC.Int.I32# [sat_s4l5l];
                          };
                    };
              };
        };

GHC.Int.$fBitsInt32_$cxor
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> GHC.Int.Int32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l5m ds1_s4l5n]
        case ds_s4l5m of {
          GHC.Int.I32# x#_s4l5p [Occ=Once] ->
              case ds1_s4l5n of {
                GHC.Int.I32# y#_s4l5r [Occ=Once] ->
                    case int2Word# [y#_s4l5r] of sat_s4l5t {
                      __DEFAULT ->
                          case int2Word# [x#_s4l5p] of sat_s4l5s {
                            __DEFAULT ->
                                case xor# [sat_s4l5s sat_s4l5t] of sat_s4l5u {
                                  __DEFAULT ->
                                      case word2Int# [sat_s4l5u] of sat_s4l5v {
                                        __DEFAULT -> GHC.Int.I32# [sat_s4l5v];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fBitsInt32_$c.|.
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> GHC.Int.Int32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l5w ds1_s4l5x]
        case ds_s4l5w of {
          GHC.Int.I32# x#_s4l5z [Occ=Once] ->
              case ds1_s4l5x of {
                GHC.Int.I32# y#_s4l5B [Occ=Once] ->
                    case int2Word# [y#_s4l5B] of sat_s4l5D {
                      __DEFAULT ->
                          case int2Word# [x#_s4l5z] of sat_s4l5C {
                            __DEFAULT ->
                                case or# [sat_s4l5C sat_s4l5D] of sat_s4l5E {
                                  __DEFAULT ->
                                      case word2Int# [sat_s4l5E] of sat_s4l5F {
                                        __DEFAULT -> GHC.Int.I32# [sat_s4l5F];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fBitsInt32_$c.&.
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> GHC.Int.Int32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l5G ds1_s4l5H]
        case ds_s4l5G of {
          GHC.Int.I32# x#_s4l5J [Occ=Once] ->
              case ds1_s4l5H of {
                GHC.Int.I32# y#_s4l5L [Occ=Once] ->
                    case int2Word# [y#_s4l5L] of sat_s4l5N {
                      __DEFAULT ->
                          case int2Word# [x#_s4l5J] of sat_s4l5M {
                            __DEFAULT ->
                                case and# [sat_s4l5M sat_s4l5N] of sat_s4l5O {
                                  __DEFAULT ->
                                      case word2Int# [sat_s4l5O] of sat_s4l5P {
                                        __DEFAULT -> GHC.Int.I32# [sat_s4l5P];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fFiniteBitsInt32_$ccountTrailingZeros
  :: GHC.Int.Int32 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l5Q]
        case ds_s4l5Q of {
          GHC.Int.I32# x#_s4l5S [Occ=Once] ->
              case int2Word# [x#_s4l5S] of sat_s4l5T {
                __DEFAULT ->
                    case ctz32# [sat_s4l5T] of sat_s4l5U {
                      __DEFAULT ->
                          case word2Int# [sat_s4l5U] of sat_s4l5V {
                            __DEFAULT -> GHC.Types.I# [sat_s4l5V];
                          };
                    };
              };
        };

GHC.Int.$fFiniteBitsInt32_$ccountLeadingZeros
  :: GHC.Int.Int32 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l5W]
        case ds_s4l5W of {
          GHC.Int.I32# x#_s4l5Y [Occ=Once] ->
              case int2Word# [x#_s4l5Y] of sat_s4l5Z {
                __DEFAULT ->
                    case clz32# [sat_s4l5Z] of sat_s4l60 {
                      __DEFAULT ->
                          case word2Int# [sat_s4l60] of sat_s4l61 {
                            __DEFAULT -> GHC.Types.I# [sat_s4l61];
                          };
                    };
              };
        };

GHC.Int.$fBitsInt4 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [32#];

GHC.Int.$fBitsInt32_$cfiniteBitSize
  :: GHC.Int.Int32 -> GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>m, Unf=OtherCon []] =
    [] \r [ds_s4l62] GHC.Int.$fBitsInt4;

GHC.Int.$fNumInt64_$cfromInteger
  :: GHC.Integer.Type.Integer -> GHC.Int.Int64
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [i_s4l63]
        case GHC.Integer.Type.integerToInt i_s4l63 of wild_s4l64 {
          __DEFAULT -> GHC.Int.I64# [wild_s4l64];
        };

GHC.Int.$fNumInt64_$cnegate :: GHC.Int.Int64 -> GHC.Int.Int64
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l65]
        case ds_s4l65 of {
          GHC.Int.I64# x#_s4l67 [Occ=Once] ->
              case negateInt# [x#_s4l67] of sat_s4l68 {
                __DEFAULT -> GHC.Int.I64# [sat_s4l68];
              };
        };

GHC.Int.$fNumInt64_$c*
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> GHC.Int.Int64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l69 ds1_s4l6a]
        case ds_s4l69 of {
          GHC.Int.I64# x#_s4l6c [Occ=Once] ->
              case ds1_s4l6a of {
                GHC.Int.I64# y#_s4l6e [Occ=Once] ->
                    case *# [x#_s4l6c y#_s4l6e] of sat_s4l6f {
                      __DEFAULT -> GHC.Int.I64# [sat_s4l6f];
                    };
              };
        };

GHC.Int.$fNumInt64_$c-
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> GHC.Int.Int64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l6g ds1_s4l6h]
        case ds_s4l6g of {
          GHC.Int.I64# x#_s4l6j [Occ=Once] ->
              case ds1_s4l6h of {
                GHC.Int.I64# y#_s4l6l [Occ=Once] ->
                    case -# [x#_s4l6j y#_s4l6l] of sat_s4l6m {
                      __DEFAULT -> GHC.Int.I64# [sat_s4l6m];
                    };
              };
        };

GHC.Int.$fNumInt64_$c+
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> GHC.Int.Int64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l6n ds1_s4l6o]
        case ds_s4l6n of {
          GHC.Int.I64# x#_s4l6q [Occ=Once] ->
              case ds1_s4l6o of {
                GHC.Int.I64# y#_s4l6s [Occ=Once] ->
                    case +# [x#_s4l6q y#_s4l6s] of sat_s4l6t {
                      __DEFAULT -> GHC.Int.I64# [sat_s4l6t];
                    };
              };
        };

GHC.Int.$fIntegralInt64_$ctoInteger
  :: GHC.Int.Int64 -> GHC.Integer.Type.Integer
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4l6u]
        case ds_s4l6u of {
          GHC.Int.I64# x#_s4l6w [Occ=Once] ->
              GHC.Integer.Type.smallInteger x#_s4l6w;
        };

GHC.Int.$fBitsInt64_$cpopCount :: GHC.Int.Int64 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l6x]
        case ds_s4l6x of {
          GHC.Int.I64# x#_s4l6z [Occ=Once] ->
              case int2Word# [x#_s4l6z] of sat_s4l6A {
                __DEFAULT ->
                    case popCnt64# [sat_s4l6A] of sat_s4l6B {
                      __DEFAULT ->
                          case word2Int# [sat_s4l6B] of sat_s4l6C {
                            __DEFAULT -> GHC.Types.I# [sat_s4l6C];
                          };
                    };
              };
        };

GHC.Int.$fBitsInt64_$cunsafeShiftR
  :: GHC.Int.Int64 -> GHC.Types.Int -> GHC.Int.Int64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l6D ds1_s4l6E]
        case ds_s4l6D of {
          GHC.Int.I64# x#_s4l6G [Occ=Once] ->
              case ds1_s4l6E of {
                GHC.Types.I# i#_s4l6I [Occ=Once] ->
                    case uncheckedIShiftRA# [x#_s4l6G i#_s4l6I] of sat_s4l6J {
                      __DEFAULT -> GHC.Int.I64# [sat_s4l6J];
                    };
              };
        };

GHC.Int.$fBitsInt10 :: GHC.Int.Int64
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I64#! [0#];

GHC.Int.$fNumInt6 :: GHC.Int.Int64
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I64#! [-1#];

GHC.Int.$fBitsInt64_$cshiftR [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int64 -> GHC.Types.Int -> GHC.Int.Int64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4l6K w1_s4l6L]
        case w_s4l6K of {
          GHC.Int.I64# ww1_s4l6N [Occ=Once*] ->
              case w1_s4l6L of {
                GHC.Types.I# ww3_s4l6P ->
                    case >=# [ww3_s4l6P 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftRA# [ww1_s4l6N ww3_s4l6P] of sat_s4l6R {
                            __DEFAULT -> GHC.Int.I64# [sat_s4l6R];
                          };
                      1# ->
                          case <# [ww1_s4l6N 0#] of {
                            __DEFAULT -> GHC.Int.$fBitsInt10;
                            1# -> GHC.Int.$fNumInt6;
                          };
                    };
              };
        };

GHC.Int.$fBitsInt64_$cunsafeShiftL
  :: GHC.Int.Int64 -> GHC.Types.Int -> GHC.Int.Int64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l6T ds1_s4l6U]
        case ds_s4l6T of {
          GHC.Int.I64# x#_s4l6W [Occ=Once] ->
              case ds1_s4l6U of {
                GHC.Types.I# i#_s4l6Y [Occ=Once] ->
                    case uncheckedIShiftL# [x#_s4l6W i#_s4l6Y] of sat_s4l6Z {
                      __DEFAULT -> GHC.Int.I64# [sat_s4l6Z];
                    };
              };
        };

GHC.Int.$fBitsInt64_$cshiftL
  :: GHC.Int.Int64 -> GHC.Types.Int -> GHC.Int.Int64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l70 ds1_s4l71]
        case ds_s4l70 of {
          GHC.Int.I64# x#_s4l73 [Occ=Once] ->
              case ds1_s4l71 of {
                GHC.Types.I# i#_s4l75 ->
                    case >=# [i#_s4l75 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftL# [x#_s4l73 i#_s4l75] of sat_s4l77 {
                            __DEFAULT -> GHC.Int.I64# [sat_s4l77];
                          };
                      1# -> GHC.Int.$fBitsInt10;
                    };
              };
        };

GHC.Int.$fBitsInt64_$cisSigned :: GHC.Int.Int64 -> GHC.Types.Bool
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>, Unf=OtherCon []] =
    [] \r [ds_s4l78] GHC.Types.True [];

GHC.Int.$fBitsInt64_$crotate
  :: GHC.Int.Int64 -> GHC.Types.Int -> GHC.Int.Int64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l79 ds1_s4l7a]
        case ds_s4l79 of wild_s4l7b {
          GHC.Int.I64# x#_s4l7c [Occ=Once] ->
              case ds1_s4l7a of {
                GHC.Types.I# i#_s4l7e [Occ=Once] ->
                    case int2Word# [i#_s4l7e] of sat_s4l7f {
                      __DEFAULT ->
                          case and# [sat_s4l7f 63##] of sat_s4l7g {
                            __DEFAULT ->
                                case word2Int# [sat_s4l7g] of wild2_s4l7h {
                                  __DEFAULT ->
                                      case int2Word# [x#_s4l7c] of x'#_s4l7i [Dmd=<S,U>] {
                                        __DEFAULT ->
                                            case -# [64# wild2_s4l7h] of sat_s4l7k {
                                              __DEFAULT ->
                                                  case
                                                      uncheckedShiftRL# [x'#_s4l7i sat_s4l7k]
                                                  of
                                                  sat_s4l7l
                                                  { __DEFAULT ->
                                                        case
                                                            uncheckedShiftL# [x'#_s4l7i wild2_s4l7h]
                                                        of
                                                        sat_s4l7j
                                                        { __DEFAULT ->
                                                              case
                                                                  or# [sat_s4l7j sat_s4l7l]
                                                              of
                                                              sat_s4l7m
                                                              { __DEFAULT ->
                                                                    case
                                                                        word2Int# [sat_s4l7m]
                                                                    of
                                                                    sat_s4l7n
                                                                    { __DEFAULT ->
                                                                          GHC.Int.I64# [sat_s4l7n];
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                  0# -> wild_s4l7b;
                                };
                          };
                    };
              };
        };

GHC.Int.$fBitsInt64_$cshift [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int64 -> GHC.Types.Int -> GHC.Int.Int64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l7o ds1_s4l7p]
        case ds_s4l7o of {
          GHC.Int.I64# x#_s4l7r [Occ=Once*] ->
              case ds1_s4l7p of {
                GHC.Types.I# i#_s4l7t ->
                    case >=# [i#_s4l7t 0#] of {
                      __DEFAULT ->
                          case negateInt# [i#_s4l7t] of b_s4l7v [Dmd=<S,U>] {
                            __DEFAULT ->
                                case >=# [b_s4l7v 64#] of {
                                  __DEFAULT ->
                                      case uncheckedIShiftRA# [x#_s4l7r b_s4l7v] of sat_s4l7x {
                                        __DEFAULT -> GHC.Int.I64# [sat_s4l7x];
                                      };
                                  1# ->
                                      case <# [x#_s4l7r 0#] of {
                                        __DEFAULT -> GHC.Int.$fBitsInt10;
                                        1# -> GHC.Int.$fNumInt6;
                                      };
                                };
                          };
                      1# ->
                          case >=# [i#_s4l7t 64#] of {
                            __DEFAULT ->
                                case uncheckedIShiftL# [x#_s4l7r i#_s4l7t] of sat_s4l7A {
                                  __DEFAULT -> GHC.Int.I64# [sat_s4l7A];
                                };
                            1# -> GHC.Int.$fBitsInt10;
                          };
                    };
              };
        };

GHC.Int.$fBitsInt64_$ccomplement :: GHC.Int.Int64 -> GHC.Int.Int64
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l7B]
        case ds_s4l7B of {
          GHC.Int.I64# x#_s4l7D [Occ=Once] ->
              case int2Word# [x#_s4l7D] of sat_s4l7E {
                __DEFAULT ->
                    case xor# [sat_s4l7E 18446744073709551615##] of sat_s4l7F {
                      __DEFAULT ->
                          case word2Int# [sat_s4l7F] of sat_s4l7G {
                            __DEFAULT -> GHC.Int.I64# [sat_s4l7G];
                          };
                    };
              };
        };

GHC.Int.$fBitsInt64_$cxor
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> GHC.Int.Int64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l7H ds1_s4l7I]
        case ds_s4l7H of {
          GHC.Int.I64# x#_s4l7K [Occ=Once] ->
              case ds1_s4l7I of {
                GHC.Int.I64# y#_s4l7M [Occ=Once] ->
                    case int2Word# [y#_s4l7M] of sat_s4l7O {
                      __DEFAULT ->
                          case int2Word# [x#_s4l7K] of sat_s4l7N {
                            __DEFAULT ->
                                case xor# [sat_s4l7N sat_s4l7O] of sat_s4l7P {
                                  __DEFAULT ->
                                      case word2Int# [sat_s4l7P] of sat_s4l7Q {
                                        __DEFAULT -> GHC.Int.I64# [sat_s4l7Q];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fBitsInt64_$c.|.
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> GHC.Int.Int64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l7R ds1_s4l7S]
        case ds_s4l7R of {
          GHC.Int.I64# x#_s4l7U [Occ=Once] ->
              case ds1_s4l7S of {
                GHC.Int.I64# y#_s4l7W [Occ=Once] ->
                    case int2Word# [y#_s4l7W] of sat_s4l7Y {
                      __DEFAULT ->
                          case int2Word# [x#_s4l7U] of sat_s4l7X {
                            __DEFAULT ->
                                case or# [sat_s4l7X sat_s4l7Y] of sat_s4l7Z {
                                  __DEFAULT ->
                                      case word2Int# [sat_s4l7Z] of sat_s4l80 {
                                        __DEFAULT -> GHC.Int.I64# [sat_s4l80];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fBitsInt64_$c.&.
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> GHC.Int.Int64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l81 ds1_s4l82]
        case ds_s4l81 of {
          GHC.Int.I64# x#_s4l84 [Occ=Once] ->
              case ds1_s4l82 of {
                GHC.Int.I64# y#_s4l86 [Occ=Once] ->
                    case int2Word# [y#_s4l86] of sat_s4l88 {
                      __DEFAULT ->
                          case int2Word# [x#_s4l84] of sat_s4l87 {
                            __DEFAULT ->
                                case and# [sat_s4l87 sat_s4l88] of sat_s4l89 {
                                  __DEFAULT ->
                                      case word2Int# [sat_s4l89] of sat_s4l8a {
                                        __DEFAULT -> GHC.Int.I64# [sat_s4l8a];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fFiniteBitsInt64_$ccountTrailingZeros
  :: GHC.Int.Int64 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l8b]
        case ds_s4l8b of {
          GHC.Int.I64# x#_s4l8d [Occ=Once] ->
              case int2Word# [x#_s4l8d] of sat_s4l8e {
                __DEFAULT ->
                    case ctz64# [sat_s4l8e] of sat_s4l8f {
                      __DEFAULT ->
                          case word2Int# [sat_s4l8f] of sat_s4l8g {
                            __DEFAULT -> GHC.Types.I# [sat_s4l8g];
                          };
                    };
              };
        };

GHC.Int.$fFiniteBitsInt64_$ccountLeadingZeros
  :: GHC.Int.Int64 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4l8h]
        case ds_s4l8h of {
          GHC.Int.I64# x#_s4l8j [Occ=Once] ->
              case int2Word# [x#_s4l8j] of sat_s4l8k {
                __DEFAULT ->
                    case clz64# [sat_s4l8k] of sat_s4l8l {
                      __DEFAULT ->
                          case word2Int# [sat_s4l8l] of sat_s4l8m {
                            __DEFAULT -> GHC.Types.I# [sat_s4l8m];
                          };
                    };
              };
        };

GHC.Int.$fBitsInt7 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [64#];

GHC.Int.$fBitsInt64_$cfiniteBitSize
  :: GHC.Int.Int64 -> GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>m, Unf=OtherCon []] =
    [] \r [ds_s4l8n] GHC.Int.$fBitsInt7;

GHC.Int.eqInt8 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4l8o ds1_s4l8p]
        case ds_s4l8o of {
          GHC.Int.I8# x_s4l8r [Occ=Once] ->
              case ds1_s4l8p of {
                GHC.Int.I8# y_s4l8t [Occ=Once] ->
                    case ==# [x_s4l8r y_s4l8t] of sat_s4l8u {
                      __DEFAULT -> tagToEnum# [sat_s4l8u];
                    };
              };
        };

GHC.Int.$fEqInt8 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.Int.Int8
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.Int.eqInt8 GHC.Int.neInt8];

GHC.Int.gtInt8 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4l8v ds1_s4l8w]
        case ds_s4l8v of {
          GHC.Int.I8# x_s4l8y [Occ=Once] ->
              case ds1_s4l8w of {
                GHC.Int.I8# y_s4l8A [Occ=Once] ->
                    case ># [x_s4l8y y_s4l8A] of sat_s4l8B {
                      __DEFAULT -> tagToEnum# [sat_s4l8B];
                    };
              };
        };

GHC.Int.geInt8 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4l8C ds1_s4l8D]
        case ds_s4l8C of {
          GHC.Int.I8# x_s4l8F [Occ=Once] ->
              case ds1_s4l8D of {
                GHC.Int.I8# y_s4l8H [Occ=Once] ->
                    case >=# [x_s4l8F y_s4l8H] of sat_s4l8I {
                      __DEFAULT -> tagToEnum# [sat_s4l8I];
                    };
              };
        };

GHC.Int.ltInt8 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4l8J ds1_s4l8K]
        case ds_s4l8J of {
          GHC.Int.I8# x_s4l8M [Occ=Once] ->
              case ds1_s4l8K of {
                GHC.Int.I8# y_s4l8O [Occ=Once] ->
                    case <# [x_s4l8M y_s4l8O] of sat_s4l8P {
                      __DEFAULT -> tagToEnum# [sat_s4l8P];
                    };
              };
        };

GHC.Int.leInt8 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4l8Q ds1_s4l8R]
        case ds_s4l8Q of {
          GHC.Int.I8# x_s4l8T [Occ=Once] ->
              case ds1_s4l8R of {
                GHC.Int.I8# y_s4l8V [Occ=Once] ->
                    case <=# [x_s4l8T y_s4l8V] of sat_s4l8W {
                      __DEFAULT -> tagToEnum# [sat_s4l8W];
                    };
              };
        };

GHC.Int.$fOrdInt8_$ccompare
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [x_s4l8X y_s4l8Y]
        case x_s4l8X of {
          GHC.Int.I8# x1_s4l90 ->
              case y_s4l8Y of {
                GHC.Int.I8# y1_s4l92 ->
                    case ==# [x1_s4l90 y1_s4l92] of {
                      __DEFAULT ->
                          case <=# [x1_s4l90 y1_s4l92] of {
                            __DEFAULT -> GHC.Types.GT [];
                            1# -> GHC.Types.LT [];
                          };
                      1# -> GHC.Types.EQ [];
                    };
              };
        };

GHC.Int.$fOrdInt8_$cmax
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> GHC.Int.Int8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s4l95 y_s4l96]
        case x_s4l95 of wild_s4l97 {
          GHC.Int.I8# x1_s4l98 [Occ=Once] ->
              case y_s4l96 of wild1_s4l99 {
                GHC.Int.I8# y1_s4l9a [Occ=Once] ->
                    case <=# [x1_s4l98 y1_s4l9a] of {
                      __DEFAULT -> wild_s4l97;
                      1# -> wild1_s4l99;
                    };
              };
        };

GHC.Int.$fOrdInt8_$cmin
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> GHC.Int.Int8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s4l9c y_s4l9d]
        case x_s4l9c of wild_s4l9e {
          GHC.Int.I8# x1_s4l9f [Occ=Once] ->
              case y_s4l9d of wild1_s4l9g {
                GHC.Int.I8# y1_s4l9h [Occ=Once] ->
                    case <=# [x1_s4l9f y1_s4l9h] of {
                      __DEFAULT -> wild1_s4l9g;
                      1# -> wild_s4l9e;
                    };
              };
        };

GHC.Int.$fOrdInt8 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord GHC.Int.Int8
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.Int.$fEqInt8
                                      GHC.Int.$fOrdInt8_$ccompare
                                      GHC.Int.ltInt8
                                      GHC.Int.leInt8
                                      GHC.Int.gtInt8
                                      GHC.Int.geInt8
                                      GHC.Int.$fOrdInt8_$cmax
                                      GHC.Int.$fOrdInt8_$cmin];

GHC.Int.$fIxInt8_$cinRange
  :: (GHC.Int.Int8, GHC.Int.Int8) -> GHC.Int.Int8 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S(S)L),1*U(1*U(U),1*U(U))><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4l9j i_s4l9k]
        case ds_s4l9j of {
          (,) m_s4l9m [Occ=Once!] n_s4l9n [Occ=Once!] ->
              case m_s4l9m of {
                GHC.Int.I8# x_s4l9p [Occ=Once] ->
                    case i_s4l9k of {
                      GHC.Int.I8# y_s4l9r ->
                          case <=# [x_s4l9p y_s4l9r] of {
                            __DEFAULT -> GHC.Types.False [];
                            1# ->
                                case n_s4l9n of {
                                  GHC.Int.I8# y1_s4l9u [Occ=Once] ->
                                      case <=# [y_s4l9r y1_s4l9u] of sat_s4l9v {
                                        __DEFAULT -> tagToEnum# [sat_s4l9v];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fNumInt7 :: GHC.Int.Int8
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I8#! [1#];

GHC.Int.$fNumInt8_$csignum :: GHC.Int.Int8 -> GHC.Int.Int8
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s4l9w]
        case x_s4l9w of {
          GHC.Int.I8# x1_s4l9y ->
              case ># [x1_s4l9y 0#] of {
                __DEFAULT ->
                    case x1_s4l9y of {
                      __DEFAULT -> GHC.Int.$fNumInt9;
                      0# -> GHC.Int.$fBitsInt13;
                    };
                1# -> GHC.Int.$fNumInt7;
              };
        };

GHC.Int.$fNumInt8_$cabs :: GHC.Int.Int8 -> GHC.Int.Int8
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s4l9B]
        case x_s4l9B of wild_s4l9C {
          GHC.Int.I8# x1_s4l9D ->
              case >=# [x1_s4l9D 0#] of {
                __DEFAULT ->
                    case negateInt# [x1_s4l9D] of sat_s4l9F {
                      __DEFAULT ->
                          case narrow8Int# [sat_s4l9F] of sat_s4l9G {
                            __DEFAULT -> GHC.Int.I8# [sat_s4l9G];
                          };
                    };
                1# -> wild_s4l9C;
              };
        };

GHC.Int.$fNumInt8 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Num.Num GHC.Int.Int8
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Num.C:Num! [GHC.Int.$fNumInt8_$c+
                                  GHC.Int.$fNumInt8_$c-
                                  GHC.Int.$fNumInt8_$c*
                                  GHC.Int.$fNumInt8_$cnegate
                                  GHC.Int.$fNumInt8_$cabs
                                  GHC.Int.$fNumInt8_$csignum
                                  GHC.Int.$fNumInt8_$cfromInteger];

GHC.Int.$fBitsInt12 :: GHC.Base.Maybe GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [GHC.Int.$fBitsInt11];

GHC.Int.$fBitsInt8_$cbitSizeMaybe
  :: GHC.Int.Int8 -> GHC.Base.Maybe GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>m2, Unf=OtherCon []] =
    [] \r [i_s4l9H] GHC.Int.$fBitsInt12;

GHC.Int.$fBitsInt8_$cbit [InlPrag=INLINE (sat-args=0)]
  :: GHC.Types.Int -> GHC.Int.Int8
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [i_s4l9I]
        case i_s4l9I of {
          GHC.Types.I# i#_s4l9K ->
              case >=# [i#_s4l9K 64#] of {
                __DEFAULT ->
                    case uncheckedIShiftL# [1# i#_s4l9K] of sat_s4l9M {
                      __DEFAULT ->
                          case narrow8Int# [sat_s4l9M] of sat_s4l9N {
                            __DEFAULT -> GHC.Int.I8# [sat_s4l9N];
                          };
                    };
                1# -> GHC.Int.$fBitsInt13;
              };
        };

GHC.Int.$fBitsInt8_$ctestBit [InlPrag=INLINE (sat-args=0)]
  :: GHC.Int.Int8 -> GHC.Types.Int -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [x_s4l9O i_s4l9P]
        case x_s4l9O of {
          GHC.Int.I8# x#_s4l9R [Occ=Once] ->
              case i_s4l9P of {
                GHC.Types.I# i#_s4l9T ->
                    case >=# [i#_s4l9T 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftL# [1# i#_s4l9T] of sat_s4l9W {
                            __DEFAULT ->
                                case narrow8Int# [sat_s4l9W] of sat_s4l9X {
                                  __DEFAULT ->
                                      case int2Word# [sat_s4l9X] of sat_s4l9Y {
                                        __DEFAULT ->
                                            case int2Word# [x#_s4l9R] of sat_s4l9V {
                                              __DEFAULT ->
                                                  case and# [sat_s4l9V sat_s4l9Y] of sat_s4l9Z {
                                                    __DEFAULT ->
                                                        case word2Int# [sat_s4l9Z] of {
                                                          __DEFAULT -> GHC.Types.True [];
                                                          0# -> GHC.Types.False [];
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                      1# -> GHC.Types.False [];
                    };
              };
        };

GHC.Int.$fBitsInt8_$crotateR [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int8 -> GHC.Types.Int -> GHC.Int.Int8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s4la1 eta1_s4la2]
        case eta_s4la1 of wild_s4la3 {
          GHC.Int.I8# x#_s4la4 [Occ=Once] ->
              case eta1_s4la2 of {
                GHC.Types.I# x1_s4la6 [Occ=Once] ->
                    case negateInt# [x1_s4la6] of sat_s4la7 {
                      __DEFAULT ->
                          case int2Word# [sat_s4la7] of sat_s4la8 {
                            __DEFAULT ->
                                case and# [sat_s4la8 7##] of sat_s4la9 {
                                  __DEFAULT ->
                                      case word2Int# [sat_s4la9] of wild2_s4laa {
                                        __DEFAULT ->
                                            case int2Word# [x#_s4la4] of sat_s4lac {
                                              __DEFAULT ->
                                                  case
                                                      narrow8Word# [sat_s4lac]
                                                  of
                                                  x'#_s4lab [Dmd=<S,U>]
                                                  { __DEFAULT ->
                                                        case -# [8# wild2_s4laa] of sat_s4lae {
                                                          __DEFAULT ->
                                                              case
                                                                  uncheckedShiftRL# [x'#_s4lab
                                                                                     sat_s4lae]
                                                              of
                                                              sat_s4laf
                                                              { __DEFAULT ->
                                                                    case
                                                                        uncheckedShiftL# [x'#_s4lab
                                                                                          wild2_s4laa]
                                                                    of
                                                                    sat_s4lad
                                                                    { __DEFAULT ->
                                                                          case
                                                                              or# [sat_s4lad
                                                                                   sat_s4laf]
                                                                          of
                                                                          sat_s4lag
                                                                          { __DEFAULT ->
                                                                                case
                                                                                    word2Int# [sat_s4lag]
                                                                                of
                                                                                sat_s4lah
                                                                                { __DEFAULT ->
                                                                                      case
                                                                                          narrow8Int# [sat_s4lah]
                                                                                      of
                                                                                      sat_s4lai
                                                                                      { __DEFAULT ->
                                                                                            GHC.Int.I8# [sat_s4lai];
                                                                                      };
                                                                                };
                                                                          };
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                        0# -> wild_s4la3;
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fBitsInt8_$ccomplementBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int8 -> GHC.Types.Int -> GHC.Int.Int8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s4laj eta1_s4lak]
        case eta_s4laj of wild_s4lal {
          GHC.Int.I8# x#_s4lam [Occ=Once] ->
              case eta1_s4lak of {
                GHC.Types.I# i#_s4lao ->
                    case >=# [i#_s4lao 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftL# [1# i#_s4lao] of sat_s4lar {
                            __DEFAULT ->
                                case narrow8Int# [sat_s4lar] of sat_s4las {
                                  __DEFAULT ->
                                      case int2Word# [sat_s4las] of sat_s4lat {
                                        __DEFAULT ->
                                            case int2Word# [x#_s4lam] of sat_s4laq {
                                              __DEFAULT ->
                                                  case xor# [sat_s4laq sat_s4lat] of sat_s4lau {
                                                    __DEFAULT ->
                                                        case word2Int# [sat_s4lau] of sat_s4lav {
                                                          __DEFAULT -> GHC.Int.I8# [sat_s4lav];
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                      1# -> wild_s4lal;
                    };
              };
        };

GHC.Int.$fBitsInt8_$cclearBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int8 -> GHC.Types.Int -> GHC.Int.Int8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s4law eta1_s4lax]
        case eta_s4law of {
          GHC.Int.I8# x#_s4laz [Occ=Once*] ->
              case eta1_s4lax of {
                GHC.Types.I# i#_s4laB ->
                    case >=# [i#_s4laB 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftL# [1# i#_s4laB] of sat_s4laE {
                            __DEFAULT ->
                                case narrow8Int# [sat_s4laE] of sat_s4laF {
                                  __DEFAULT ->
                                      case int2Word# [sat_s4laF] of sat_s4laG {
                                        __DEFAULT ->
                                            case not# [sat_s4laG] of sat_s4laH {
                                              __DEFAULT ->
                                                  case int2Word# [x#_s4laz] of sat_s4laD {
                                                    __DEFAULT ->
                                                        case
                                                            and# [sat_s4laD sat_s4laH]
                                                        of
                                                        sat_s4laI
                                                        { __DEFAULT ->
                                                              case
                                                                  word2Int# [sat_s4laI]
                                                              of
                                                              sat_s4laJ
                                                              { __DEFAULT ->
                                                                    GHC.Int.I8# [sat_s4laJ];
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                      1# ->
                          case int2Word# [x#_s4laz] of sat_s4laK {
                            __DEFAULT ->
                                case and# [sat_s4laK 18446744073709551615##] of sat_s4laL {
                                  __DEFAULT ->
                                      case word2Int# [sat_s4laL] of sat_s4laM {
                                        __DEFAULT -> GHC.Int.I8# [sat_s4laM];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fBitsInt8_$csetBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int8 -> GHC.Types.Int -> GHC.Int.Int8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s4laN eta1_s4laO]
        case eta_s4laN of wild_s4laP {
          GHC.Int.I8# x#_s4laQ [Occ=Once] ->
              case eta1_s4laO of {
                GHC.Types.I# i#_s4laS ->
                    case >=# [i#_s4laS 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftL# [1# i#_s4laS] of sat_s4laV {
                            __DEFAULT ->
                                case narrow8Int# [sat_s4laV] of sat_s4laW {
                                  __DEFAULT ->
                                      case int2Word# [sat_s4laW] of sat_s4laX {
                                        __DEFAULT ->
                                            case int2Word# [x#_s4laQ] of sat_s4laU {
                                              __DEFAULT ->
                                                  case or# [sat_s4laU sat_s4laX] of sat_s4laY {
                                                    __DEFAULT ->
                                                        case word2Int# [sat_s4laY] of sat_s4laZ {
                                                          __DEFAULT -> GHC.Int.I8# [sat_s4laZ];
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                      1# -> wild_s4laP;
                    };
              };
        };

GHC.Int.$fBitsInt8_$crotateL [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int8 -> GHC.Types.Int -> GHC.Int.Int8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Int.$fBitsInt8_$crotate eta_B2 eta_B1;

GHC.Int.$fBitsInt8 [InlPrag=NOUSERINLINE CONLIKE]
  :: Data.Bits.Bits GHC.Int.Int8
[GblId[DFunId], Caf=NoCafRefs] =
    CCS_DONT_CARE Data.Bits.C:Bits! [GHC.Int.$fEqInt8
                                     GHC.Int.$fBitsInt8_$c.&.
                                     GHC.Int.$fBitsInt8_$c.|.
                                     GHC.Int.$fBitsInt8_$cxor
                                     GHC.Int.$fBitsInt8_$ccomplement
                                     GHC.Int.$fBitsInt8_$cshift
                                     GHC.Int.$fBitsInt8_$crotate
                                     GHC.Int.$fBitsInt13
                                     GHC.Int.$fBitsInt8_$cbit
                                     GHC.Int.$fBitsInt8_$csetBit
                                     GHC.Int.$fBitsInt8_$cclearBit
                                     GHC.Int.$fBitsInt8_$ccomplementBit
                                     GHC.Int.$fBitsInt8_$ctestBit
                                     GHC.Int.$fBitsInt8_$cbitSizeMaybe
                                     GHC.Int.$fBitsInt8_$cfiniteBitSize
                                     GHC.Int.$fBitsInt8_$cisSigned
                                     GHC.Int.$fBitsInt8_$cshiftL
                                     GHC.Int.$fBitsInt8_$cunsafeShiftL
                                     GHC.Int.$fBitsInt8_$cshiftR
                                     GHC.Int.$fBitsInt8_$cunsafeShiftR
                                     GHC.Int.$fBitsInt8_$crotateL
                                     GHC.Int.$fBitsInt8_$crotateR
                                     GHC.Int.$fBitsInt8_$cpopCount];

GHC.Int.$fFiniteBitsInt8 [InlPrag=NOUSERINLINE CONLIKE]
  :: Data.Bits.FiniteBits GHC.Int.Int8
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE Data.Bits.C:FiniteBits! [GHC.Int.$fBitsInt8
                                           GHC.Int.$fBitsInt8_$cfiniteBitSize
                                           GHC.Int.$fFiniteBitsInt8_$ccountLeadingZeros
                                           GHC.Int.$fFiniteBitsInt8_$ccountTrailingZeros];

GHC.Int.$fReadInt8_go [Occ=LoopBreaker]
  :: [(GHC.Types.Int, GHC.Base.String)]
     -> [(GHC.Int.Int8, GHC.Base.String)]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s4lb0]
        case ds_s4lb0 of {
          [] -> [] [];
          : y_s4lb2 [Occ=Once!] ys_s4lb3 [Occ=Once] ->
              case y_s4lb2 of {
                (,) x_s4lb5 [Occ=Once!] r_s4lb6 [Occ=Once] ->
                    let {
                      sat_s4lbc [Occ=Once] :: [(GHC.Int.Int8, GHC.Base.String)]
                      [LclId] =
                          [ys_s4lb3] \u [] GHC.Int.$fReadInt8_go ys_s4lb3; } in
                    let {
                      sat_s4lba [Occ=Once] :: GHC.Int.Int8
                      [LclId] =
                          [x_s4lb5] \u []
                              case x_s4lb5 of {
                                GHC.Types.I# x#_s4lb8 [Occ=Once] ->
                                    case narrow8Int# [x#_s4lb8] of sat_s4lb9 {
                                      __DEFAULT -> GHC.Int.I8# [sat_s4lb9];
                                    };
                              }; } in
                    let {
                      sat_s4lbb [Occ=Once] :: (GHC.Int.Int8, GHC.Base.String)
                      [LclId] =
                          CCCS (,)! [sat_s4lba r_s4lb6];
                    } in  : [sat_s4lbb sat_s4lbc];
              };
        };

GHC.Int.$fReadInt8_$creadsPrec
  :: GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS GHC.Int.Int8
[GblId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [p_s4lbd s_s4lbe]
        case
            GHC.Read.$fReadInt_$sreadNumber
                GHC.Read.$fReadInt2
                p_s4lbd
                Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
        of
        sat_s4lbf
        { __DEFAULT ->
              case
                  Text.ParserCombinators.ReadP.run sat_s4lbf s_s4lbe
              of
              sat_s4lbg
              { __DEFAULT -> GHC.Int.$fReadInt8_go sat_s4lbg;
              };
        };

GHC.Int.$fReadInt13
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Int.Int8 -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,U><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [n_s4lbh eta_s4lbi]
        let {
          sat_s4lbj [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS GHC.Int.Int8
          [LclId] =
              [n_s4lbh] \r [eta_B1]
                  GHC.Int.$fReadInt8_$creadsPrec n_s4lbh eta_B1;
        } in 
          case
              Text.ParserCombinators.ReadP.$wreadS_to_P sat_s4lbj eta_s4lbi
          of
          { Unit# ww1_s4lbl [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s4lbl];
          };

GHC.Int.$fIxInt1 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

GHC.Int.$fReadInt12
  :: Text.ParserCombinators.ReadP.P [GHC.Int.Int8]
[GblId] =
    [] \u []
        GHC.Read.list
            GHC.Int.$fReadInt13
            GHC.Int.$fIxInt1
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Int.$fReadInt8_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.Int.Int8]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Int.$fReadInt12 eta_B1;

GHC.Int.$fReadInt11
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        ([GHC.Int.Int8] -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,A><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [n_s4lbm w1_s4lbn]
        case
            Text.ParserCombinators.ReadP.$wreadS_to_P
                GHC.Int.$fReadInt8_$creadList w1_s4lbn
        of
        { Unit# ww1_s4lbp [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s4lbp];
        };

GHC.Int.$fReadInt8 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.Int.Int8
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Int.$fReadInt8_$creadsPrec
                                    GHC.Int.$fReadInt8_$creadList
                                    GHC.Int.$fReadInt13
                                    GHC.Int.$fReadInt11];

GHC.Int.$fIntegralInt8_$cquot [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> GHC.Int.Int8
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4lbq w1_s4lbr]
        case w_s4lbq of {
          GHC.Int.I8# ww1_s4lbt [Occ=Once*] ->
              case w1_s4lbr of {
                GHC.Int.I8# ww3_s4lbv [Occ=Once!] ->
                    case ww3_s4lbv of wild_s4lbw {
                      __DEFAULT ->
                          case quotInt# [ww1_s4lbt wild_s4lbw] of wild1_s4lbx {
                            __DEFAULT ->
                                case narrow8Int# [wild1_s4lbx] of sat_s4lby {
                                  __DEFAULT -> GHC.Int.I8# [sat_s4lby];
                                };
                          };
                      -1# ->
                          case ww1_s4lbt of wild1_s4lbz {
                            __DEFAULT ->
                                case quotInt# [wild1_s4lbz -1#] of sat_s4lbA {
                                  __DEFAULT ->
                                      case narrow8Int# [sat_s4lbA] of sat_s4lbB {
                                        __DEFAULT -> GHC.Int.I8# [sat_s4lbB];
                                      };
                                };
                            -128# -> GHC.Real.overflowError;
                          };
                      0# -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Int.$fIntegralInt8_$crem
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> GHC.Int.Int8
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4lbE y_s4lbF]
        case ds_s4lbE of {
          GHC.Int.I8# x#_s4lbH [Occ=Once] ->
              case y_s4lbF of {
                GHC.Int.I8# y#_s4lbJ [Occ=Once!] ->
                    case y#_s4lbJ of wild2_s4lbK {
                      __DEFAULT ->
                          case remInt# [x#_s4lbH wild2_s4lbK] of wild3_s4lbL {
                            __DEFAULT ->
                                case narrow8Int# [wild3_s4lbL] of sat_s4lbM {
                                  __DEFAULT -> GHC.Int.I8# [sat_s4lbM];
                                };
                          };
                      0# -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Int.$w$cdiv3 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Str=<S,U><S,1*U>, Unf=OtherCon []] =
    [] \r [ww_s4lbN ww1_s4lbO]
        case ww1_s4lbO of wild_s4lbP {
          __DEFAULT ->
              case GHC.Classes.divInt# ww_s4lbN wild_s4lbP of wild1_s4lbQ {
                __DEFAULT -> narrow8Int# [wild1_s4lbQ];
              };
          -1# ->
              case ww_s4lbN of wild1_s4lbR {
                __DEFAULT ->
                    case GHC.Classes.divInt# wild1_s4lbR -1# of wild2_s4lbS {
                      __DEFAULT -> narrow8Int# [wild2_s4lbS];
                    };
                -128# -> GHC.Real.overflowError;
              };
          0# -> GHC.Real.divZeroError;
        };

GHC.Int.$fIntegralInt8_$cdiv [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> GHC.Int.Int8
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4lbV w1_s4lbW]
        case w_s4lbV of {
          GHC.Int.I8# ww1_s4lbY [Occ=Once] ->
              case w1_s4lbW of {
                GHC.Int.I8# ww3_s4lc0 [Occ=Once] ->
                    case GHC.Int.$w$cdiv3 ww1_s4lbY ww3_s4lc0 of ww4_s4lc1 {
                      __DEFAULT -> GHC.Int.I8# [ww4_s4lc1];
                    };
              };
        };

GHC.Int.$fIntegralInt8_$cmod [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> GHC.Int.Int8
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4lc2 w1_s4lc3]
        case w_s4lc2 of {
          GHC.Int.I8# ww1_s4lc5 [Occ=Once] ->
              case w1_s4lc3 of {
                GHC.Int.I8# ww3_s4lc7 [Occ=Once!] ->
                    case ww3_s4lc7 of wild_s4lc8 {
                      __DEFAULT ->
                          case GHC.Classes.modInt# ww1_s4lc5 wild_s4lc8 of wild1_s4lc9 {
                            __DEFAULT ->
                                case narrow8Int# [wild1_s4lc9] of sat_s4lca {
                                  __DEFAULT -> GHC.Int.I8# [sat_s4lca];
                                };
                          };
                      0# -> GHC.Real.divZeroError;
                    };
              };
        };

lvl6_r4kPx :: (GHC.Int.Int8, GHC.Int.Int8)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Real.overflowError GHC.Int.$fBitsInt13];

GHC.Int.$fIntegralInt8_$cquotRem [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> (GHC.Int.Int8, GHC.Int.Int8)
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4lcc w1_s4lcd]
        case w_s4lcc of {
          GHC.Int.I8# ww1_s4lcf [Occ=Once*] ->
              case w1_s4lcd of {
                GHC.Int.I8# ww3_s4lch [Occ=Once!] ->
                    case ww3_s4lch of wild_s4lci {
                      __DEFAULT ->
                          case quotRemInt# [ww1_s4lcf wild_s4lci] of {
                            (#,#) ipv_s4lck [Occ=Once] ipv1_s4lcl [Occ=Once] ->
                                case narrow8Int# [ipv1_s4lcl] of sat_s4lco {
                                  __DEFAULT ->
                                      let {
                                        sat_s4lcp [Occ=Once] :: GHC.Int.Int8
                                        [LclId] =
                                            CCCS GHC.Int.I8#! [sat_s4lco];
                                      } in 
                                        case narrow8Int# [ipv_s4lck] of sat_s4lcm {
                                          __DEFAULT ->
                                              let {
                                                sat_s4lcn [Occ=Once] :: GHC.Int.Int8
                                                [LclId] =
                                                    CCCS GHC.Int.I8#! [sat_s4lcm];
                                              } in  (,) [sat_s4lcn sat_s4lcp];
                                        };
                                };
                          };
                      -1# ->
                          case ww1_s4lcf of wild1_s4lcq {
                            __DEFAULT ->
                                case quotRemInt# [wild1_s4lcq -1#] of {
                                  (#,#) ipv_s4lcs [Occ=Once] ipv1_s4lct [Occ=Once] ->
                                      case narrow8Int# [ipv1_s4lct] of sat_s4lcw {
                                        __DEFAULT ->
                                            let {
                                              sat_s4lcx [Occ=Once] :: GHC.Int.Int8
                                              [LclId] =
                                                  CCCS GHC.Int.I8#! [sat_s4lcw];
                                            } in 
                                              case narrow8Int# [ipv_s4lcs] of sat_s4lcu {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s4lcv [Occ=Once] :: GHC.Int.Int8
                                                      [LclId] =
                                                          CCCS GHC.Int.I8#! [sat_s4lcu];
                                                    } in  (,) [sat_s4lcv sat_s4lcx];
                                              };
                                      };
                                };
                            -128# -> lvl6_r4kPx;
                          };
                      0# -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Int.$w$cdivMod3 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int#
     -> GHC.Prim.Int# -> (# GHC.Int.Int8, GHC.Int.Int8 #)
[GblId, Arity=2, Str=<S,U><S,1*U>, Unf=OtherCon []] =
    [] \r [ww_s4lcz ww1_s4lcA]
        case ww1_s4lcA of wild_s4lcB {
          __DEFAULT ->
              let-no-escape {
                $j_s4lcC [Occ=Once*T[0], Dmd=<L,1*U(U,U)>]
                  :: (# GHC.Int.Int8, GHC.Int.Int8 #)
                [LclId[JoinId(0)], Unf=OtherCon []] =
                    [ww_s4lcz wild_s4lcB] \r []
                        case ># [ww_s4lcz 0#] of {
                          __DEFAULT ->
                              case <# [ww_s4lcz 0#] of {
                                __DEFAULT ->
                                    case quotRemInt# [ww_s4lcz wild_s4lcB] of {
                                      (#,#) ipv_s4lcG [Occ=Once] ipv1_s4lcH [Occ=Once] ->
                                          case narrow8Int# [ipv1_s4lcH] of sat_s4lcK {
                                            __DEFAULT ->
                                                let {
                                                  sat_s4lcL [Occ=Once] :: GHC.Int.Int8
                                                  [LclId] =
                                                      CCCS GHC.Int.I8#! [sat_s4lcK];
                                                } in 
                                                  case narrow8Int# [ipv_s4lcG] of sat_s4lcI {
                                                    __DEFAULT ->
                                                        let {
                                                          sat_s4lcJ [Occ=Once] :: GHC.Int.Int8
                                                          [LclId] =
                                                              CCCS GHC.Int.I8#! [sat_s4lcI];
                                                        } in  (#,#) [sat_s4lcJ sat_s4lcL];
                                                  };
                                          };
                                    };
                                1# ->
                                    case ># [wild_s4lcB 0#] of {
                                      __DEFAULT ->
                                          case quotRemInt# [ww_s4lcz wild_s4lcB] of {
                                            (#,#) ipv_s4lcO [Occ=Once] ipv1_s4lcP [Occ=Once] ->
                                                case narrow8Int# [ipv1_s4lcP] of sat_s4lcS {
                                                  __DEFAULT ->
                                                      let {
                                                        sat_s4lcT [Occ=Once] :: GHC.Int.Int8
                                                        [LclId] =
                                                            CCCS GHC.Int.I8#! [sat_s4lcS];
                                                      } in 
                                                        case narrow8Int# [ipv_s4lcO] of sat_s4lcQ {
                                                          __DEFAULT ->
                                                              let {
                                                                sat_s4lcR [Occ=Once] :: GHC.Int.Int8
                                                                [LclId] =
                                                                    CCCS GHC.Int.I8#! [sat_s4lcQ];
                                                              } in  (#,#) [sat_s4lcR sat_s4lcT];
                                                        };
                                                };
                                          };
                                      1# ->
                                          case +# [ww_s4lcz 1#] of sat_s4lcU {
                                            __DEFAULT ->
                                                case quotRemInt# [sat_s4lcU wild_s4lcB] of {
                                                  (#,#) ipv_s4lcW [Occ=Once]
                                                        ipv1_s4lcX [Occ=Once] ->
                                                      case +# [ipv1_s4lcX wild_s4lcB] of sat_s4ld1 {
                                                        __DEFAULT ->
                                                            case -# [sat_s4ld1 1#] of sat_s4ld2 {
                                                              __DEFAULT ->
                                                                  case
                                                                      narrow8Int# [sat_s4ld2]
                                                                  of
                                                                  sat_s4ld3
                                                                  { __DEFAULT ->
                                                                        let {
                                                                          sat_s4ld4 [Occ=Once]
                                                                            :: GHC.Int.Int8
                                                                          [LclId] =
                                                                              CCCS GHC.Int.I8#! [sat_s4ld3];
                                                                        } in 
                                                                          case
                                                                              -# [ipv_s4lcW 1#]
                                                                          of
                                                                          sat_s4lcY
                                                                          { __DEFAULT ->
                                                                                case
                                                                                    narrow8Int# [sat_s4lcY]
                                                                                of
                                                                                sat_s4lcZ
                                                                                { __DEFAULT ->
                                                                                      let {
                                                                                        sat_s4ld0 [Occ=Once]
                                                                                          :: GHC.Int.Int8
                                                                                        [LclId] =
                                                                                            CCCS GHC.Int.I8#! [sat_s4lcZ];
                                                                                      } in 
                                                                                        (#,#) [sat_s4ld0
                                                                                               sat_s4ld4];
                                                                                };
                                                                          };
                                                                  };
                                                            };
                                                      };
                                                };
                                          };
                                    };
                              };
                          1# ->
                              case <# [wild_s4lcB 0#] of {
                                __DEFAULT ->
                                    case <# [ww_s4lcz 0#] of {
                                      __DEFAULT ->
                                          case quotRemInt# [ww_s4lcz wild_s4lcB] of {
                                            (#,#) ipv_s4ld8 [Occ=Once] ipv1_s4ld9 [Occ=Once] ->
                                                case narrow8Int# [ipv1_s4ld9] of sat_s4ldc {
                                                  __DEFAULT ->
                                                      let {
                                                        sat_s4ldd [Occ=Once] :: GHC.Int.Int8
                                                        [LclId] =
                                                            CCCS GHC.Int.I8#! [sat_s4ldc];
                                                      } in 
                                                        case narrow8Int# [ipv_s4ld8] of sat_s4lda {
                                                          __DEFAULT ->
                                                              let {
                                                                sat_s4ldb [Occ=Once] :: GHC.Int.Int8
                                                                [LclId] =
                                                                    CCCS GHC.Int.I8#! [sat_s4lda];
                                                              } in  (#,#) [sat_s4ldb sat_s4ldd];
                                                        };
                                                };
                                          };
                                      1# ->
                                          case ># [wild_s4lcB 0#] of {
                                            __DEFAULT ->
                                                case quotRemInt# [ww_s4lcz wild_s4lcB] of {
                                                  (#,#) ipv_s4ldg [Occ=Once]
                                                        ipv1_s4ldh [Occ=Once] ->
                                                      case narrow8Int# [ipv1_s4ldh] of sat_s4ldk {
                                                        __DEFAULT ->
                                                            let {
                                                              sat_s4ldl [Occ=Once] :: GHC.Int.Int8
                                                              [LclId] =
                                                                  CCCS GHC.Int.I8#! [sat_s4ldk];
                                                            } in 
                                                              case
                                                                  narrow8Int# [ipv_s4ldg]
                                                              of
                                                              sat_s4ldi
                                                              { __DEFAULT ->
                                                                    let {
                                                                      sat_s4ldj [Occ=Once]
                                                                        :: GHC.Int.Int8
                                                                      [LclId] =
                                                                          CCCS GHC.Int.I8#! [sat_s4ldi];
                                                                    } in 
                                                                      (#,#) [sat_s4ldj sat_s4ldl];
                                                              };
                                                      };
                                                };
                                            1# ->
                                                case +# [ww_s4lcz 1#] of sat_s4ldm {
                                                  __DEFAULT ->
                                                      case quotRemInt# [sat_s4ldm wild_s4lcB] of {
                                                        (#,#) ipv_s4ldo [Occ=Once]
                                                              ipv1_s4ldp [Occ=Once] ->
                                                            case
                                                                +# [ipv1_s4ldp wild_s4lcB]
                                                            of
                                                            sat_s4ldt
                                                            { __DEFAULT ->
                                                                  case
                                                                      -# [sat_s4ldt 1#]
                                                                  of
                                                                  sat_s4ldu
                                                                  { __DEFAULT ->
                                                                        case
                                                                            narrow8Int# [sat_s4ldu]
                                                                        of
                                                                        sat_s4ldv
                                                                        { __DEFAULT ->
                                                                              let {
                                                                                sat_s4ldw [Occ=Once]
                                                                                  :: GHC.Int.Int8
                                                                                [LclId] =
                                                                                    CCCS GHC.Int.I8#! [sat_s4ldv];
                                                                              } in 
                                                                                case
                                                                                    -# [ipv_s4ldo
                                                                                        1#]
                                                                                of
                                                                                sat_s4ldq
                                                                                { __DEFAULT ->
                                                                                      case
                                                                                          narrow8Int# [sat_s4ldq]
                                                                                      of
                                                                                      sat_s4ldr
                                                                                      { __DEFAULT ->
                                                                                            let {
                                                                                              sat_s4lds [Occ=Once]
                                                                                                :: GHC.Int.Int8
                                                                                              [LclId] =
                                                                                                  CCCS GHC.Int.I8#! [sat_s4ldr];
                                                                                            } in 
                                                                                              (#,#) [sat_s4lds
                                                                                                     sat_s4ldw];
                                                                                      };
                                                                                };
                                                                        };
                                                                  };
                                                            };
                                                      };
                                                };
                                          };
                                    };
                                1# ->
                                    case -# [ww_s4lcz 1#] of sat_s4ldx {
                                      __DEFAULT ->
                                          case quotRemInt# [sat_s4ldx wild_s4lcB] of {
                                            (#,#) ipv_s4ldz [Occ=Once] ipv1_s4ldA [Occ=Once] ->
                                                case +# [ipv1_s4ldA wild_s4lcB] of sat_s4ldE {
                                                  __DEFAULT ->
                                                      case +# [sat_s4ldE 1#] of sat_s4ldF {
                                                        __DEFAULT ->
                                                            case
                                                                narrow8Int# [sat_s4ldF]
                                                            of
                                                            sat_s4ldG
                                                            { __DEFAULT ->
                                                                  let {
                                                                    sat_s4ldH [Occ=Once]
                                                                      :: GHC.Int.Int8
                                                                    [LclId] =
                                                                        CCCS GHC.Int.I8#! [sat_s4ldG];
                                                                  } in 
                                                                    case
                                                                        -# [ipv_s4ldz 1#]
                                                                    of
                                                                    sat_s4ldB
                                                                    { __DEFAULT ->
                                                                          case
                                                                              narrow8Int# [sat_s4ldB]
                                                                          of
                                                                          sat_s4ldC
                                                                          { __DEFAULT ->
                                                                                let {
                                                                                  sat_s4ldD [Occ=Once]
                                                                                    :: GHC.Int.Int8
                                                                                  [LclId] =
                                                                                      CCCS GHC.Int.I8#! [sat_s4ldC];
                                                                                } in 
                                                                                  (#,#) [sat_s4ldD
                                                                                         sat_s4ldH];
                                                                          };
                                                                    };
                                                            };
                                                      };
                                                };
                                          };
                                    };
                              };
                        };
              } in 
                case wild_s4lcB of {
                  __DEFAULT -> $j_s4lcC;
                  -1# ->
                      case ww_s4lcz of {
                        __DEFAULT -> $j_s4lcC;
                        -128# -> (#,#) [GHC.Real.overflowError GHC.Int.$fBitsInt13];
                      };
                };
          0# -> GHC.Real.divZeroError;
        };

GHC.Int.$fIntegralInt8_$cdivMod [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> (GHC.Int.Int8, GHC.Int.Int8)
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4ldL w1_s4ldM]
        case w_s4ldL of {
          GHC.Int.I8# ww1_s4ldO [Occ=Once] ->
              case w1_s4ldM of {
                GHC.Int.I8# ww3_s4ldQ [Occ=Once] ->
                    case GHC.Int.$w$cdivMod3 ww1_s4ldO ww3_s4ldQ of {
                      (#,#) ww5_s4ldS [Occ=Once] ww6_s4ldT [Occ=Once] ->
                          (,) [ww5_s4ldS ww6_s4ldT];
                    };
              };
        };

sat_s4ldU :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [1#];

sat_s4ldV :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_s4ldU GHC.Types.[]];

GHC.Int.$fRealInt1 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True sat_s4ldV;

GHC.Int.$fRealInt8_$ctoRational [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int8 -> GHC.Real.Rational
[GblId, Arity=1, Str=<S(S),1*U(U)>m, Unf=OtherCon []] =
    [] \r [w_s4ldW]
        case w_s4ldW of {
          GHC.Int.I8# ww1_s4ldY [Occ=Once] ->
              case GHC.Integer.Type.smallInteger ww1_s4ldY of sat_s4ldZ {
                __DEFAULT ->
                    case
                        GHC.Integer.Type.timesInteger sat_s4ldZ GHC.Int.$fRealInt1
                    of
                    sat_s4le0
                    { __DEFAULT ->
                          case GHC.Real.$w$sreduce sat_s4le0 GHC.Int.$fRealInt1 of {
                            (#,#) ww3_s4le2 [Occ=Once] ww4_s4le3 [Occ=Once] ->
                                GHC.Real.:% [ww3_s4le2 ww4_s4le3];
                          };
                    };
              };
        };

GHC.Int.$fRealInt8 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Real.Real GHC.Int.Int8
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Real.C:Real! [GHC.Int.$fNumInt8
                                    GHC.Int.$fOrdInt8
                                    GHC.Int.$fRealInt8_$ctoRational];

GHC.Int.$fIntegralInt8 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Real.Integral GHC.Int.Int8
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Real.C:Integral! [GHC.Int.$fRealInt8
                                        GHC.Int.$fEnumInt8
                                        GHC.Int.$fIntegralInt8_$cquot
                                        GHC.Int.$fIntegralInt8_$crem
                                        GHC.Int.$fIntegralInt8_$cdiv
                                        GHC.Int.$fIntegralInt8_$cmod
                                        GHC.Int.$fIntegralInt8_$cquotRem
                                        GHC.Int.$fIntegralInt8_$cdivMod
                                        GHC.Int.$fIntegralInt8_$ctoInteger];

GHC.Int.$fIxInt8_$cunsafeIndex
  :: (GHC.Int.Int8, GHC.Int.Int8) -> GHC.Int.Int8 -> GHC.Types.Int
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S(S)L),1*U(1*U(U),A)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4le4 i_s4le5]
        case ds_s4le4 of {
          (,) m_s4le7 [Occ=Once!] _ [Occ=Dead] ->
              case i_s4le5 of {
                GHC.Int.I8# x#_s4lea [Occ=Once] ->
                    case m_s4le7 of {
                      GHC.Int.I8# x#1_s4lec [Occ=Once] ->
                          case -# [x#_s4lea x#1_s4lec] of sat_s4led {
                            __DEFAULT -> GHC.Types.I# [sat_s4led];
                          };
                    };
              };
        };

GHC.Int.$fIxInt8_$crange
  :: (GHC.Int.Int8, GHC.Int.Int8) -> [GHC.Int.Int8]
[GblId,
 Arity=1,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>,
 Unf=OtherCon []] =
    [] \r [ds_s4lee]
        case ds_s4lee of {
          (,) m_s4leg [Occ=Once] n_s4leh [Occ=Once] ->
              GHC.Int.$fEnumInt8_$cenumFromTo m_s4leg n_s4leh;
        };

GHC.Int.$fIxInt8_$crangeSize
  :: (GHC.Int.Int8, GHC.Int.Int8) -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>m,
 Unf=OtherCon []] =
    [] \r [b_s4lei]
        case b_s4lei of {
          (,) _l_s4lek [Occ=Once!] h_s4lel [Occ=Once!] ->
              case _l_s4lek of {
                GHC.Int.I8# x_s4len ->
                    case h_s4lel of {
                      GHC.Int.I8# y_s4lep ->
                          case <=# [x_s4len y_s4lep] of {
                            __DEFAULT -> GHC.Int.$fIxInt1;
                            1# ->
                                case -# [y_s4lep x_s4len] of sat_s4ler {
                                  __DEFAULT ->
                                      case +# [sat_s4ler 1#] of sat_s4les {
                                        __DEFAULT -> GHC.Types.I# [sat_s4les];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fIxInt8_$cunsafeRangeSize
  :: (GHC.Int.Int8, GHC.Int.Int8) -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>m,
 Unf=OtherCon []] =
    [] \r [b_s4let]
        case b_s4let of {
          (,) _l_s4lev [Occ=Once!] h_s4lew [Occ=Once!] ->
              case h_s4lew of {
                GHC.Int.I8# x#_s4ley [Occ=Once] ->
                    case _l_s4lev of {
                      GHC.Int.I8# x#1_s4leA [Occ=Once] ->
                          case -# [x#_s4ley x#1_s4leA] of sat_s4leB {
                            __DEFAULT ->
                                case +# [sat_s4leB 1#] of sat_s4leC {
                                  __DEFAULT -> GHC.Types.I# [sat_s4leC];
                                };
                          };
                    };
              };
        };

GHC.Int.$fIxInt8_$cindex [InlPrag=INLINE (sat-args=2)]
  :: (GHC.Int.Int8, GHC.Int.Int8) -> GHC.Int.Int8 -> GHC.Types.Int
[GblId,
 Arity=2,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s4leD eta1_s4leE]
        case eta_s4leD of {
          (,) m_s4leG [Occ=Once!] n_s4leH [Occ=Once!] ->
              case m_s4leG of {
                GHC.Int.I8# x_s4leJ ->
                    case eta1_s4leE of {
                      GHC.Int.I8# y_s4leL ->
                          case <=# [x_s4leJ y_s4leL] of {
                            __DEFAULT -> GHC.Arr.hopelessIndexError;
                            1# ->
                                case n_s4leH of {
                                  GHC.Int.I8# y1_s4leO [Occ=Once] ->
                                      case <=# [y_s4leL y1_s4leO] of {
                                        __DEFAULT -> GHC.Arr.hopelessIndexError;
                                        1# ->
                                            case -# [y_s4leL x_s4leJ] of sat_s4leQ {
                                              __DEFAULT -> GHC.Types.I# [sat_s4leQ];
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fIxInt8 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Arr.Ix GHC.Int.Int8
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Arr.C:Ix! [GHC.Int.$fOrdInt8
                                 GHC.Int.$fIxInt8_$crange
                                 GHC.Int.$fIxInt8_$cindex
                                 GHC.Int.$fIxInt8_$cunsafeIndex
                                 GHC.Int.$fIxInt8_$cinRange
                                 GHC.Int.$fIxInt8_$crangeSize
                                 GHC.Int.$fIxInt8_$cunsafeRangeSize];

GHC.Int.eqInt16 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4leR ds1_s4leS]
        case ds_s4leR of {
          GHC.Int.I16# x_s4leU [Occ=Once] ->
              case ds1_s4leS of {
                GHC.Int.I16# y_s4leW [Occ=Once] ->
                    case ==# [x_s4leU y_s4leW] of sat_s4leX {
                      __DEFAULT -> tagToEnum# [sat_s4leX];
                    };
              };
        };

GHC.Int.$fEqInt16 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.Int.Int16
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.Int.eqInt16 GHC.Int.neInt16];

GHC.Int.gtInt16 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4leY ds1_s4leZ]
        case ds_s4leY of {
          GHC.Int.I16# x_s4lf1 [Occ=Once] ->
              case ds1_s4leZ of {
                GHC.Int.I16# y_s4lf3 [Occ=Once] ->
                    case ># [x_s4lf1 y_s4lf3] of sat_s4lf4 {
                      __DEFAULT -> tagToEnum# [sat_s4lf4];
                    };
              };
        };

GHC.Int.geInt16 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4lf5 ds1_s4lf6]
        case ds_s4lf5 of {
          GHC.Int.I16# x_s4lf8 [Occ=Once] ->
              case ds1_s4lf6 of {
                GHC.Int.I16# y_s4lfa [Occ=Once] ->
                    case >=# [x_s4lf8 y_s4lfa] of sat_s4lfb {
                      __DEFAULT -> tagToEnum# [sat_s4lfb];
                    };
              };
        };

GHC.Int.ltInt16 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4lfc ds1_s4lfd]
        case ds_s4lfc of {
          GHC.Int.I16# x_s4lff [Occ=Once] ->
              case ds1_s4lfd of {
                GHC.Int.I16# y_s4lfh [Occ=Once] ->
                    case <# [x_s4lff y_s4lfh] of sat_s4lfi {
                      __DEFAULT -> tagToEnum# [sat_s4lfi];
                    };
              };
        };

GHC.Int.leInt16 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4lfj ds1_s4lfk]
        case ds_s4lfj of {
          GHC.Int.I16# x_s4lfm [Occ=Once] ->
              case ds1_s4lfk of {
                GHC.Int.I16# y_s4lfo [Occ=Once] ->
                    case <=# [x_s4lfm y_s4lfo] of sat_s4lfp {
                      __DEFAULT -> tagToEnum# [sat_s4lfp];
                    };
              };
        };

GHC.Int.$fOrdInt16_$ccompare
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [x_s4lfq y_s4lfr]
        case x_s4lfq of {
          GHC.Int.I16# x1_s4lft ->
              case y_s4lfr of {
                GHC.Int.I16# y1_s4lfv ->
                    case ==# [x1_s4lft y1_s4lfv] of {
                      __DEFAULT ->
                          case <=# [x1_s4lft y1_s4lfv] of {
                            __DEFAULT -> GHC.Types.GT [];
                            1# -> GHC.Types.LT [];
                          };
                      1# -> GHC.Types.EQ [];
                    };
              };
        };

GHC.Int.$fOrdInt16_$cmax
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Int.Int16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s4lfy y_s4lfz]
        case x_s4lfy of wild_s4lfA {
          GHC.Int.I16# x1_s4lfB [Occ=Once] ->
              case y_s4lfz of wild1_s4lfC {
                GHC.Int.I16# y1_s4lfD [Occ=Once] ->
                    case <=# [x1_s4lfB y1_s4lfD] of {
                      __DEFAULT -> wild_s4lfA;
                      1# -> wild1_s4lfC;
                    };
              };
        };

GHC.Int.$fOrdInt16_$cmin
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Int.Int16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s4lfF y_s4lfG]
        case x_s4lfF of wild_s4lfH {
          GHC.Int.I16# x1_s4lfI [Occ=Once] ->
              case y_s4lfG of wild1_s4lfJ {
                GHC.Int.I16# y1_s4lfK [Occ=Once] ->
                    case <=# [x1_s4lfI y1_s4lfK] of {
                      __DEFAULT -> wild1_s4lfJ;
                      1# -> wild_s4lfH;
                    };
              };
        };

GHC.Int.$fOrdInt16 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord GHC.Int.Int16
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.Int.$fEqInt16
                                      GHC.Int.$fOrdInt16_$ccompare
                                      GHC.Int.ltInt16
                                      GHC.Int.leInt16
                                      GHC.Int.gtInt16
                                      GHC.Int.geInt16
                                      GHC.Int.$fOrdInt16_$cmax
                                      GHC.Int.$fOrdInt16_$cmin];

GHC.Int.$fIxInt16_$cinRange
  :: (GHC.Int.Int16, GHC.Int.Int16)
     -> GHC.Int.Int16 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S(S)L),1*U(1*U(U),1*U(U))><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4lfM i_s4lfN]
        case ds_s4lfM of {
          (,) m_s4lfP [Occ=Once!] n_s4lfQ [Occ=Once!] ->
              case m_s4lfP of {
                GHC.Int.I16# x_s4lfS [Occ=Once] ->
                    case i_s4lfN of {
                      GHC.Int.I16# y_s4lfU ->
                          case <=# [x_s4lfS y_s4lfU] of {
                            __DEFAULT -> GHC.Types.False [];
                            1# ->
                                case n_s4lfQ of {
                                  GHC.Int.I16# y1_s4lfX [Occ=Once] ->
                                      case <=# [y_s4lfU y1_s4lfX] of sat_s4lfY {
                                        __DEFAULT -> tagToEnum# [sat_s4lfY];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fNumInt1 :: GHC.Int.Int16
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I16#! [1#];

GHC.Int.$fNumInt16_$csignum :: GHC.Int.Int16 -> GHC.Int.Int16
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s4lfZ]
        case x_s4lfZ of {
          GHC.Int.I16# x1_s4lg1 ->
              case ># [x1_s4lg1 0#] of {
                __DEFAULT ->
                    case x1_s4lg1 of {
                      __DEFAULT -> GHC.Int.$fNumInt2;
                      0# -> GHC.Int.$fBitsInt3;
                    };
                1# -> GHC.Int.$fNumInt1;
              };
        };

GHC.Int.$fNumInt16_$cabs :: GHC.Int.Int16 -> GHC.Int.Int16
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s4lg4]
        case x_s4lg4 of wild_s4lg5 {
          GHC.Int.I16# x1_s4lg6 ->
              case >=# [x1_s4lg6 0#] of {
                __DEFAULT ->
                    case negateInt# [x1_s4lg6] of sat_s4lg8 {
                      __DEFAULT ->
                          case narrow16Int# [sat_s4lg8] of sat_s4lg9 {
                            __DEFAULT -> GHC.Int.I16# [sat_s4lg9];
                          };
                    };
                1# -> wild_s4lg5;
              };
        };

GHC.Int.$fNumInt16 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Num.Num GHC.Int.Int16
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Num.C:Num! [GHC.Int.$fNumInt16_$c+
                                  GHC.Int.$fNumInt16_$c-
                                  GHC.Int.$fNumInt16_$c*
                                  GHC.Int.$fNumInt16_$cnegate
                                  GHC.Int.$fNumInt16_$cabs
                                  GHC.Int.$fNumInt16_$csignum
                                  GHC.Int.$fNumInt16_$cfromInteger];

GHC.Int.$fBitsInt2 :: GHC.Base.Maybe GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [GHC.Int.$fBitsInt1];

GHC.Int.$fBitsInt16_$cbitSizeMaybe
  :: GHC.Int.Int16 -> GHC.Base.Maybe GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>m2, Unf=OtherCon []] =
    [] \r [i_s4lga] GHC.Int.$fBitsInt2;

GHC.Int.$fBitsInt16_$cbit [InlPrag=INLINE (sat-args=0)]
  :: GHC.Types.Int -> GHC.Int.Int16
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [i_s4lgb]
        case i_s4lgb of {
          GHC.Types.I# i#_s4lgd ->
              case >=# [i#_s4lgd 64#] of {
                __DEFAULT ->
                    case uncheckedIShiftL# [1# i#_s4lgd] of sat_s4lgf {
                      __DEFAULT ->
                          case narrow16Int# [sat_s4lgf] of sat_s4lgg {
                            __DEFAULT -> GHC.Int.I16# [sat_s4lgg];
                          };
                    };
                1# -> GHC.Int.$fBitsInt3;
              };
        };

GHC.Int.$fBitsInt16_$ctestBit [InlPrag=INLINE (sat-args=0)]
  :: GHC.Int.Int16 -> GHC.Types.Int -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [x_s4lgh i_s4lgi]
        case x_s4lgh of {
          GHC.Int.I16# x#_s4lgk [Occ=Once] ->
              case i_s4lgi of {
                GHC.Types.I# i#_s4lgm ->
                    case >=# [i#_s4lgm 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftL# [1# i#_s4lgm] of sat_s4lgp {
                            __DEFAULT ->
                                case narrow16Int# [sat_s4lgp] of sat_s4lgq {
                                  __DEFAULT ->
                                      case int2Word# [sat_s4lgq] of sat_s4lgr {
                                        __DEFAULT ->
                                            case int2Word# [x#_s4lgk] of sat_s4lgo {
                                              __DEFAULT ->
                                                  case and# [sat_s4lgo sat_s4lgr] of sat_s4lgs {
                                                    __DEFAULT ->
                                                        case word2Int# [sat_s4lgs] of {
                                                          __DEFAULT -> GHC.Types.True [];
                                                          0# -> GHC.Types.False [];
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                      1# -> GHC.Types.False [];
                    };
              };
        };

GHC.Int.$fBitsInt16_$crotateR [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int16 -> GHC.Types.Int -> GHC.Int.Int16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s4lgu eta1_s4lgv]
        case eta_s4lgu of wild_s4lgw {
          GHC.Int.I16# x#_s4lgx [Occ=Once] ->
              case eta1_s4lgv of {
                GHC.Types.I# x1_s4lgz [Occ=Once] ->
                    case negateInt# [x1_s4lgz] of sat_s4lgA {
                      __DEFAULT ->
                          case int2Word# [sat_s4lgA] of sat_s4lgB {
                            __DEFAULT ->
                                case and# [sat_s4lgB 15##] of sat_s4lgC {
                                  __DEFAULT ->
                                      case word2Int# [sat_s4lgC] of wild2_s4lgD {
                                        __DEFAULT ->
                                            case int2Word# [x#_s4lgx] of sat_s4lgF {
                                              __DEFAULT ->
                                                  case
                                                      narrow16Word# [sat_s4lgF]
                                                  of
                                                  x'#_s4lgE [Dmd=<S,U>]
                                                  { __DEFAULT ->
                                                        case -# [16# wild2_s4lgD] of sat_s4lgH {
                                                          __DEFAULT ->
                                                              case
                                                                  uncheckedShiftRL# [x'#_s4lgE
                                                                                     sat_s4lgH]
                                                              of
                                                              sat_s4lgI
                                                              { __DEFAULT ->
                                                                    case
                                                                        uncheckedShiftL# [x'#_s4lgE
                                                                                          wild2_s4lgD]
                                                                    of
                                                                    sat_s4lgG
                                                                    { __DEFAULT ->
                                                                          case
                                                                              or# [sat_s4lgG
                                                                                   sat_s4lgI]
                                                                          of
                                                                          sat_s4lgJ
                                                                          { __DEFAULT ->
                                                                                case
                                                                                    word2Int# [sat_s4lgJ]
                                                                                of
                                                                                sat_s4lgK
                                                                                { __DEFAULT ->
                                                                                      case
                                                                                          narrow16Int# [sat_s4lgK]
                                                                                      of
                                                                                      sat_s4lgL
                                                                                      { __DEFAULT ->
                                                                                            GHC.Int.I16# [sat_s4lgL];
                                                                                      };
                                                                                };
                                                                          };
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                        0# -> wild_s4lgw;
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fBitsInt16_$ccomplementBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int16 -> GHC.Types.Int -> GHC.Int.Int16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s4lgM eta1_s4lgN]
        case eta_s4lgM of wild_s4lgO {
          GHC.Int.I16# x#_s4lgP [Occ=Once] ->
              case eta1_s4lgN of {
                GHC.Types.I# i#_s4lgR ->
                    case >=# [i#_s4lgR 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftL# [1# i#_s4lgR] of sat_s4lgU {
                            __DEFAULT ->
                                case narrow16Int# [sat_s4lgU] of sat_s4lgV {
                                  __DEFAULT ->
                                      case int2Word# [sat_s4lgV] of sat_s4lgW {
                                        __DEFAULT ->
                                            case int2Word# [x#_s4lgP] of sat_s4lgT {
                                              __DEFAULT ->
                                                  case xor# [sat_s4lgT sat_s4lgW] of sat_s4lgX {
                                                    __DEFAULT ->
                                                        case word2Int# [sat_s4lgX] of sat_s4lgY {
                                                          __DEFAULT -> GHC.Int.I16# [sat_s4lgY];
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                      1# -> wild_s4lgO;
                    };
              };
        };

GHC.Int.$fBitsInt16_$cclearBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int16 -> GHC.Types.Int -> GHC.Int.Int16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s4lgZ eta1_s4lh0]
        case eta_s4lgZ of {
          GHC.Int.I16# x#_s4lh2 [Occ=Once*] ->
              case eta1_s4lh0 of {
                GHC.Types.I# i#_s4lh4 ->
                    case >=# [i#_s4lh4 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftL# [1# i#_s4lh4] of sat_s4lh7 {
                            __DEFAULT ->
                                case narrow16Int# [sat_s4lh7] of sat_s4lh8 {
                                  __DEFAULT ->
                                      case int2Word# [sat_s4lh8] of sat_s4lh9 {
                                        __DEFAULT ->
                                            case not# [sat_s4lh9] of sat_s4lha {
                                              __DEFAULT ->
                                                  case int2Word# [x#_s4lh2] of sat_s4lh6 {
                                                    __DEFAULT ->
                                                        case
                                                            and# [sat_s4lh6 sat_s4lha]
                                                        of
                                                        sat_s4lhb
                                                        { __DEFAULT ->
                                                              case
                                                                  word2Int# [sat_s4lhb]
                                                              of
                                                              sat_s4lhc
                                                              { __DEFAULT ->
                                                                    GHC.Int.I16# [sat_s4lhc];
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                      1# ->
                          case int2Word# [x#_s4lh2] of sat_s4lhd {
                            __DEFAULT ->
                                case and# [sat_s4lhd 18446744073709551615##] of sat_s4lhe {
                                  __DEFAULT ->
                                      case word2Int# [sat_s4lhe] of sat_s4lhf {
                                        __DEFAULT -> GHC.Int.I16# [sat_s4lhf];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fBitsInt16_$csetBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int16 -> GHC.Types.Int -> GHC.Int.Int16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s4lhg eta1_s4lhh]
        case eta_s4lhg of wild_s4lhi {
          GHC.Int.I16# x#_s4lhj [Occ=Once] ->
              case eta1_s4lhh of {
                GHC.Types.I# i#_s4lhl ->
                    case >=# [i#_s4lhl 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftL# [1# i#_s4lhl] of sat_s4lho {
                            __DEFAULT ->
                                case narrow16Int# [sat_s4lho] of sat_s4lhp {
                                  __DEFAULT ->
                                      case int2Word# [sat_s4lhp] of sat_s4lhq {
                                        __DEFAULT ->
                                            case int2Word# [x#_s4lhj] of sat_s4lhn {
                                              __DEFAULT ->
                                                  case or# [sat_s4lhn sat_s4lhq] of sat_s4lhr {
                                                    __DEFAULT ->
                                                        case word2Int# [sat_s4lhr] of sat_s4lhs {
                                                          __DEFAULT -> GHC.Int.I16# [sat_s4lhs];
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                      1# -> wild_s4lhi;
                    };
              };
        };

GHC.Int.$fBitsInt16_$crotateL [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int16 -> GHC.Types.Int -> GHC.Int.Int16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Int.$fBitsInt16_$crotate eta_B2 eta_B1;

GHC.Int.$fBitsInt16 [InlPrag=NOUSERINLINE CONLIKE]
  :: Data.Bits.Bits GHC.Int.Int16
[GblId[DFunId], Caf=NoCafRefs] =
    CCS_DONT_CARE Data.Bits.C:Bits! [GHC.Int.$fEqInt16
                                     GHC.Int.$fBitsInt16_$c.&.
                                     GHC.Int.$fBitsInt16_$c.|.
                                     GHC.Int.$fBitsInt16_$cxor
                                     GHC.Int.$fBitsInt16_$ccomplement
                                     GHC.Int.$fBitsInt16_$cshift
                                     GHC.Int.$fBitsInt16_$crotate
                                     GHC.Int.$fBitsInt3
                                     GHC.Int.$fBitsInt16_$cbit
                                     GHC.Int.$fBitsInt16_$csetBit
                                     GHC.Int.$fBitsInt16_$cclearBit
                                     GHC.Int.$fBitsInt16_$ccomplementBit
                                     GHC.Int.$fBitsInt16_$ctestBit
                                     GHC.Int.$fBitsInt16_$cbitSizeMaybe
                                     GHC.Int.$fBitsInt16_$cfiniteBitSize
                                     GHC.Int.$fBitsInt16_$cisSigned
                                     GHC.Int.$fBitsInt16_$cshiftL
                                     GHC.Int.$fBitsInt16_$cunsafeShiftL
                                     GHC.Int.$fBitsInt16_$cshiftR
                                     GHC.Int.$fBitsInt16_$cunsafeShiftR
                                     GHC.Int.$fBitsInt16_$crotateL
                                     GHC.Int.$fBitsInt16_$crotateR
                                     GHC.Int.$fBitsInt16_$cpopCount];

GHC.Int.$fFiniteBitsInt16 [InlPrag=NOUSERINLINE CONLIKE]
  :: Data.Bits.FiniteBits GHC.Int.Int16
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE Data.Bits.C:FiniteBits! [GHC.Int.$fBitsInt16
                                           GHC.Int.$fBitsInt16_$cfiniteBitSize
                                           GHC.Int.$fFiniteBitsInt16_$ccountLeadingZeros
                                           GHC.Int.$fFiniteBitsInt16_$ccountTrailingZeros];

GHC.Int.$fReadInt16_go [Occ=LoopBreaker]
  :: [(GHC.Types.Int, GHC.Base.String)]
     -> [(GHC.Int.Int16, GHC.Base.String)]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s4lht]
        case ds_s4lht of {
          [] -> [] [];
          : y_s4lhv [Occ=Once!] ys_s4lhw [Occ=Once] ->
              case y_s4lhv of {
                (,) x_s4lhy [Occ=Once!] r_s4lhz [Occ=Once] ->
                    let {
                      sat_s4lhF [Occ=Once] :: [(GHC.Int.Int16, GHC.Base.String)]
                      [LclId] =
                          [ys_s4lhw] \u [] GHC.Int.$fReadInt16_go ys_s4lhw; } in
                    let {
                      sat_s4lhD [Occ=Once] :: GHC.Int.Int16
                      [LclId] =
                          [x_s4lhy] \u []
                              case x_s4lhy of {
                                GHC.Types.I# x#_s4lhB [Occ=Once] ->
                                    case narrow16Int# [x#_s4lhB] of sat_s4lhC {
                                      __DEFAULT -> GHC.Int.I16# [sat_s4lhC];
                                    };
                              }; } in
                    let {
                      sat_s4lhE [Occ=Once] :: (GHC.Int.Int16, GHC.Base.String)
                      [LclId] =
                          CCCS (,)! [sat_s4lhD r_s4lhz];
                    } in  : [sat_s4lhE sat_s4lhF];
              };
        };

GHC.Int.$fReadInt16_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS GHC.Int.Int16
[GblId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [p_s4lhG s_s4lhH]
        case
            GHC.Read.$fReadInt_$sreadNumber
                GHC.Read.$fReadInt2
                p_s4lhG
                Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
        of
        sat_s4lhI
        { __DEFAULT ->
              case
                  Text.ParserCombinators.ReadP.run sat_s4lhI s_s4lhH
              of
              sat_s4lhJ
              { __DEFAULT -> GHC.Int.$fReadInt16_go sat_s4lhJ;
              };
        };

GHC.Int.$fReadInt3
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Int.Int16 -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,U><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [n_s4lhK eta_s4lhL]
        let {
          sat_s4lhM [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS GHC.Int.Int16
          [LclId] =
              [n_s4lhK] \r [eta_B1]
                  GHC.Int.$fReadInt16_$creadsPrec n_s4lhK eta_B1;
        } in 
          case
              Text.ParserCombinators.ReadP.$wreadS_to_P sat_s4lhM eta_s4lhL
          of
          { Unit# ww1_s4lhO [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s4lhO];
          };

GHC.Int.$fReadInt2
  :: Text.ParserCombinators.ReadP.P [GHC.Int.Int16]
[GblId] =
    [] \u []
        GHC.Read.list
            GHC.Int.$fReadInt3
            GHC.Int.$fIxInt1
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Int.$fReadInt16_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.Int.Int16]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Int.$fReadInt2 eta_B1;

GHC.Int.$fReadInt1
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        ([GHC.Int.Int16] -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,A><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [n_s4lhP w1_s4lhQ]
        case
            Text.ParserCombinators.ReadP.$wreadS_to_P
                GHC.Int.$fReadInt16_$creadList w1_s4lhQ
        of
        { Unit# ww1_s4lhS [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s4lhS];
        };

GHC.Int.$fReadInt16 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.Int.Int16
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Int.$fReadInt16_$creadsPrec
                                    GHC.Int.$fReadInt16_$creadList
                                    GHC.Int.$fReadInt3
                                    GHC.Int.$fReadInt1];

GHC.Int.$fIntegralInt16_$cquot [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Int.Int16
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4lhT w1_s4lhU]
        case w_s4lhT of {
          GHC.Int.I16# ww1_s4lhW [Occ=Once*] ->
              case w1_s4lhU of {
                GHC.Int.I16# ww3_s4lhY [Occ=Once!] ->
                    case ww3_s4lhY of wild_s4lhZ {
                      __DEFAULT ->
                          case quotInt# [ww1_s4lhW wild_s4lhZ] of wild1_s4li0 {
                            __DEFAULT ->
                                case narrow16Int# [wild1_s4li0] of sat_s4li1 {
                                  __DEFAULT -> GHC.Int.I16# [sat_s4li1];
                                };
                          };
                      -1# ->
                          case ww1_s4lhW of wild1_s4li2 {
                            __DEFAULT ->
                                case quotInt# [wild1_s4li2 -1#] of sat_s4li3 {
                                  __DEFAULT ->
                                      case narrow16Int# [sat_s4li3] of sat_s4li4 {
                                        __DEFAULT -> GHC.Int.I16# [sat_s4li4];
                                      };
                                };
                            -32768# -> GHC.Real.overflowError;
                          };
                      0# -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Int.$fIntegralInt16_$crem
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Int.Int16
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4li7 y_s4li8]
        case ds_s4li7 of {
          GHC.Int.I16# x#_s4lia [Occ=Once] ->
              case y_s4li8 of {
                GHC.Int.I16# y#_s4lic [Occ=Once!] ->
                    case y#_s4lic of wild2_s4lid {
                      __DEFAULT ->
                          case remInt# [x#_s4lia wild2_s4lid] of wild3_s4lie {
                            __DEFAULT ->
                                case narrow16Int# [wild3_s4lie] of sat_s4lif {
                                  __DEFAULT -> GHC.Int.I16# [sat_s4lif];
                                };
                          };
                      0# -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Int.$w$cdiv [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Str=<S,U><S,1*U>, Unf=OtherCon []] =
    [] \r [ww_s4lig ww1_s4lih]
        case ww1_s4lih of wild_s4lii {
          __DEFAULT ->
              case GHC.Classes.divInt# ww_s4lig wild_s4lii of wild1_s4lij {
                __DEFAULT -> narrow16Int# [wild1_s4lij];
              };
          -1# ->
              case ww_s4lig of wild1_s4lik {
                __DEFAULT ->
                    case GHC.Classes.divInt# wild1_s4lik -1# of wild2_s4lil {
                      __DEFAULT -> narrow16Int# [wild2_s4lil];
                    };
                -32768# -> GHC.Real.overflowError;
              };
          0# -> GHC.Real.divZeroError;
        };

GHC.Int.$fIntegralInt16_$cdiv [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Int.Int16
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4lio w1_s4lip]
        case w_s4lio of {
          GHC.Int.I16# ww1_s4lir [Occ=Once] ->
              case w1_s4lip of {
                GHC.Int.I16# ww3_s4lit [Occ=Once] ->
                    case GHC.Int.$w$cdiv ww1_s4lir ww3_s4lit of ww4_s4liu {
                      __DEFAULT -> GHC.Int.I16# [ww4_s4liu];
                    };
              };
        };

GHC.Int.$fIntegralInt16_$cmod [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Int.Int16
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4liv w1_s4liw]
        case w_s4liv of {
          GHC.Int.I16# ww1_s4liy [Occ=Once] ->
              case w1_s4liw of {
                GHC.Int.I16# ww3_s4liA [Occ=Once!] ->
                    case ww3_s4liA of wild_s4liB {
                      __DEFAULT ->
                          case GHC.Classes.modInt# ww1_s4liy wild_s4liB of wild1_s4liC {
                            __DEFAULT ->
                                case narrow16Int# [wild1_s4liC] of sat_s4liD {
                                  __DEFAULT -> GHC.Int.I16# [sat_s4liD];
                                };
                          };
                      0# -> GHC.Real.divZeroError;
                    };
              };
        };

lvl7_r4kPy :: (GHC.Int.Int16, GHC.Int.Int16)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Real.overflowError GHC.Int.$fBitsInt3];

GHC.Int.$fIntegralInt16_$cquotRem [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> (GHC.Int.Int16, GHC.Int.Int16)
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4liF w1_s4liG]
        case w_s4liF of {
          GHC.Int.I16# ww1_s4liI [Occ=Once*] ->
              case w1_s4liG of {
                GHC.Int.I16# ww3_s4liK [Occ=Once!] ->
                    case ww3_s4liK of wild_s4liL {
                      __DEFAULT ->
                          case quotRemInt# [ww1_s4liI wild_s4liL] of {
                            (#,#) ipv_s4liN [Occ=Once] ipv1_s4liO [Occ=Once] ->
                                case narrow16Int# [ipv1_s4liO] of sat_s4liR {
                                  __DEFAULT ->
                                      let {
                                        sat_s4liS [Occ=Once] :: GHC.Int.Int16
                                        [LclId] =
                                            CCCS GHC.Int.I16#! [sat_s4liR];
                                      } in 
                                        case narrow16Int# [ipv_s4liN] of sat_s4liP {
                                          __DEFAULT ->
                                              let {
                                                sat_s4liQ [Occ=Once] :: GHC.Int.Int16
                                                [LclId] =
                                                    CCCS GHC.Int.I16#! [sat_s4liP];
                                              } in  (,) [sat_s4liQ sat_s4liS];
                                        };
                                };
                          };
                      -1# ->
                          case ww1_s4liI of wild1_s4liT {
                            __DEFAULT ->
                                case quotRemInt# [wild1_s4liT -1#] of {
                                  (#,#) ipv_s4liV [Occ=Once] ipv1_s4liW [Occ=Once] ->
                                      case narrow16Int# [ipv1_s4liW] of sat_s4liZ {
                                        __DEFAULT ->
                                            let {
                                              sat_s4lj0 [Occ=Once] :: GHC.Int.Int16
                                              [LclId] =
                                                  CCCS GHC.Int.I16#! [sat_s4liZ];
                                            } in 
                                              case narrow16Int# [ipv_s4liV] of sat_s4liX {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s4liY [Occ=Once] :: GHC.Int.Int16
                                                      [LclId] =
                                                          CCCS GHC.Int.I16#! [sat_s4liX];
                                                    } in  (,) [sat_s4liY sat_s4lj0];
                                              };
                                      };
                                };
                            -32768# -> lvl7_r4kPy;
                          };
                      0# -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Int.$w$cdivMod [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int#
     -> GHC.Prim.Int# -> (# GHC.Int.Int16, GHC.Int.Int16 #)
[GblId, Arity=2, Str=<S,U><S,1*U>, Unf=OtherCon []] =
    [] \r [ww_s4lj2 ww1_s4lj3]
        case ww1_s4lj3 of wild_s4lj4 {
          __DEFAULT ->
              let-no-escape {
                $j_s4lj5 [Occ=Once*T[0], Dmd=<L,1*U(U,U)>]
                  :: (# GHC.Int.Int16, GHC.Int.Int16 #)
                [LclId[JoinId(0)], Unf=OtherCon []] =
                    [ww_s4lj2 wild_s4lj4] \r []
                        case ># [ww_s4lj2 0#] of {
                          __DEFAULT ->
                              case <# [ww_s4lj2 0#] of {
                                __DEFAULT ->
                                    case quotRemInt# [ww_s4lj2 wild_s4lj4] of {
                                      (#,#) ipv_s4lj9 [Occ=Once] ipv1_s4lja [Occ=Once] ->
                                          case narrow16Int# [ipv1_s4lja] of sat_s4ljd {
                                            __DEFAULT ->
                                                let {
                                                  sat_s4lje [Occ=Once] :: GHC.Int.Int16
                                                  [LclId] =
                                                      CCCS GHC.Int.I16#! [sat_s4ljd];
                                                } in 
                                                  case narrow16Int# [ipv_s4lj9] of sat_s4ljb {
                                                    __DEFAULT ->
                                                        let {
                                                          sat_s4ljc [Occ=Once] :: GHC.Int.Int16
                                                          [LclId] =
                                                              CCCS GHC.Int.I16#! [sat_s4ljb];
                                                        } in  (#,#) [sat_s4ljc sat_s4lje];
                                                  };
                                          };
                                    };
                                1# ->
                                    case ># [wild_s4lj4 0#] of {
                                      __DEFAULT ->
                                          case quotRemInt# [ww_s4lj2 wild_s4lj4] of {
                                            (#,#) ipv_s4ljh [Occ=Once] ipv1_s4lji [Occ=Once] ->
                                                case narrow16Int# [ipv1_s4lji] of sat_s4ljl {
                                                  __DEFAULT ->
                                                      let {
                                                        sat_s4ljm [Occ=Once] :: GHC.Int.Int16
                                                        [LclId] =
                                                            CCCS GHC.Int.I16#! [sat_s4ljl];
                                                      } in 
                                                        case narrow16Int# [ipv_s4ljh] of sat_s4ljj {
                                                          __DEFAULT ->
                                                              let {
                                                                sat_s4ljk [Occ=Once]
                                                                  :: GHC.Int.Int16
                                                                [LclId] =
                                                                    CCCS GHC.Int.I16#! [sat_s4ljj];
                                                              } in  (#,#) [sat_s4ljk sat_s4ljm];
                                                        };
                                                };
                                          };
                                      1# ->
                                          case +# [ww_s4lj2 1#] of sat_s4ljn {
                                            __DEFAULT ->
                                                case quotRemInt# [sat_s4ljn wild_s4lj4] of {
                                                  (#,#) ipv_s4ljp [Occ=Once]
                                                        ipv1_s4ljq [Occ=Once] ->
                                                      case +# [ipv1_s4ljq wild_s4lj4] of sat_s4lju {
                                                        __DEFAULT ->
                                                            case -# [sat_s4lju 1#] of sat_s4ljv {
                                                              __DEFAULT ->
                                                                  case
                                                                      narrow16Int# [sat_s4ljv]
                                                                  of
                                                                  sat_s4ljw
                                                                  { __DEFAULT ->
                                                                        let {
                                                                          sat_s4ljx [Occ=Once]
                                                                            :: GHC.Int.Int16
                                                                          [LclId] =
                                                                              CCCS GHC.Int.I16#! [sat_s4ljw];
                                                                        } in 
                                                                          case
                                                                              -# [ipv_s4ljp 1#]
                                                                          of
                                                                          sat_s4ljr
                                                                          { __DEFAULT ->
                                                                                case
                                                                                    narrow16Int# [sat_s4ljr]
                                                                                of
                                                                                sat_s4ljs
                                                                                { __DEFAULT ->
                                                                                      let {
                                                                                        sat_s4ljt [Occ=Once]
                                                                                          :: GHC.Int.Int16
                                                                                        [LclId] =
                                                                                            CCCS GHC.Int.I16#! [sat_s4ljs];
                                                                                      } in 
                                                                                        (#,#) [sat_s4ljt
                                                                                               sat_s4ljx];
                                                                                };
                                                                          };
                                                                  };
                                                            };
                                                      };
                                                };
                                          };
                                    };
                              };
                          1# ->
                              case <# [wild_s4lj4 0#] of {
                                __DEFAULT ->
                                    case <# [ww_s4lj2 0#] of {
                                      __DEFAULT ->
                                          case quotRemInt# [ww_s4lj2 wild_s4lj4] of {
                                            (#,#) ipv_s4ljB [Occ=Once] ipv1_s4ljC [Occ=Once] ->
                                                case narrow16Int# [ipv1_s4ljC] of sat_s4ljF {
                                                  __DEFAULT ->
                                                      let {
                                                        sat_s4ljG [Occ=Once] :: GHC.Int.Int16
                                                        [LclId] =
                                                            CCCS GHC.Int.I16#! [sat_s4ljF];
                                                      } in 
                                                        case narrow16Int# [ipv_s4ljB] of sat_s4ljD {
                                                          __DEFAULT ->
                                                              let {
                                                                sat_s4ljE [Occ=Once]
                                                                  :: GHC.Int.Int16
                                                                [LclId] =
                                                                    CCCS GHC.Int.I16#! [sat_s4ljD];
                                                              } in  (#,#) [sat_s4ljE sat_s4ljG];
                                                        };
                                                };
                                          };
                                      1# ->
                                          case ># [wild_s4lj4 0#] of {
                                            __DEFAULT ->
                                                case quotRemInt# [ww_s4lj2 wild_s4lj4] of {
                                                  (#,#) ipv_s4ljJ [Occ=Once]
                                                        ipv1_s4ljK [Occ=Once] ->
                                                      case narrow16Int# [ipv1_s4ljK] of sat_s4ljN {
                                                        __DEFAULT ->
                                                            let {
                                                              sat_s4ljO [Occ=Once] :: GHC.Int.Int16
                                                              [LclId] =
                                                                  CCCS GHC.Int.I16#! [sat_s4ljN];
                                                            } in 
                                                              case
                                                                  narrow16Int# [ipv_s4ljJ]
                                                              of
                                                              sat_s4ljL
                                                              { __DEFAULT ->
                                                                    let {
                                                                      sat_s4ljM [Occ=Once]
                                                                        :: GHC.Int.Int16
                                                                      [LclId] =
                                                                          CCCS GHC.Int.I16#! [sat_s4ljL];
                                                                    } in 
                                                                      (#,#) [sat_s4ljM sat_s4ljO];
                                                              };
                                                      };
                                                };
                                            1# ->
                                                case +# [ww_s4lj2 1#] of sat_s4ljP {
                                                  __DEFAULT ->
                                                      case quotRemInt# [sat_s4ljP wild_s4lj4] of {
                                                        (#,#) ipv_s4ljR [Occ=Once]
                                                              ipv1_s4ljS [Occ=Once] ->
                                                            case
                                                                +# [ipv1_s4ljS wild_s4lj4]
                                                            of
                                                            sat_s4ljW
                                                            { __DEFAULT ->
                                                                  case
                                                                      -# [sat_s4ljW 1#]
                                                                  of
                                                                  sat_s4ljX
                                                                  { __DEFAULT ->
                                                                        case
                                                                            narrow16Int# [sat_s4ljX]
                                                                        of
                                                                        sat_s4ljY
                                                                        { __DEFAULT ->
                                                                              let {
                                                                                sat_s4ljZ [Occ=Once]
                                                                                  :: GHC.Int.Int16
                                                                                [LclId] =
                                                                                    CCCS GHC.Int.I16#! [sat_s4ljY];
                                                                              } in 
                                                                                case
                                                                                    -# [ipv_s4ljR
                                                                                        1#]
                                                                                of
                                                                                sat_s4ljT
                                                                                { __DEFAULT ->
                                                                                      case
                                                                                          narrow16Int# [sat_s4ljT]
                                                                                      of
                                                                                      sat_s4ljU
                                                                                      { __DEFAULT ->
                                                                                            let {
                                                                                              sat_s4ljV [Occ=Once]
                                                                                                :: GHC.Int.Int16
                                                                                              [LclId] =
                                                                                                  CCCS GHC.Int.I16#! [sat_s4ljU];
                                                                                            } in 
                                                                                              (#,#) [sat_s4ljV
                                                                                                     sat_s4ljZ];
                                                                                      };
                                                                                };
                                                                        };
                                                                  };
                                                            };
                                                      };
                                                };
                                          };
                                    };
                                1# ->
                                    case -# [ww_s4lj2 1#] of sat_s4lk0 {
                                      __DEFAULT ->
                                          case quotRemInt# [sat_s4lk0 wild_s4lj4] of {
                                            (#,#) ipv_s4lk2 [Occ=Once] ipv1_s4lk3 [Occ=Once] ->
                                                case +# [ipv1_s4lk3 wild_s4lj4] of sat_s4lk7 {
                                                  __DEFAULT ->
                                                      case +# [sat_s4lk7 1#] of sat_s4lk8 {
                                                        __DEFAULT ->
                                                            case
                                                                narrow16Int# [sat_s4lk8]
                                                            of
                                                            sat_s4lk9
                                                            { __DEFAULT ->
                                                                  let {
                                                                    sat_s4lka [Occ=Once]
                                                                      :: GHC.Int.Int16
                                                                    [LclId] =
                                                                        CCCS GHC.Int.I16#! [sat_s4lk9];
                                                                  } in 
                                                                    case
                                                                        -# [ipv_s4lk2 1#]
                                                                    of
                                                                    sat_s4lk4
                                                                    { __DEFAULT ->
                                                                          case
                                                                              narrow16Int# [sat_s4lk4]
                                                                          of
                                                                          sat_s4lk5
                                                                          { __DEFAULT ->
                                                                                let {
                                                                                  sat_s4lk6 [Occ=Once]
                                                                                    :: GHC.Int.Int16
                                                                                  [LclId] =
                                                                                      CCCS GHC.Int.I16#! [sat_s4lk5];
                                                                                } in 
                                                                                  (#,#) [sat_s4lk6
                                                                                         sat_s4lka];
                                                                          };
                                                                    };
                                                            };
                                                      };
                                                };
                                          };
                                    };
                              };
                        };
              } in 
                case wild_s4lj4 of {
                  __DEFAULT -> $j_s4lj5;
                  -1# ->
                      case ww_s4lj2 of {
                        __DEFAULT -> $j_s4lj5;
                        -32768# -> (#,#) [GHC.Real.overflowError GHC.Int.$fBitsInt3];
                      };
                };
          0# -> GHC.Real.divZeroError;
        };

GHC.Int.$fIntegralInt16_$cdivMod [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> (GHC.Int.Int16, GHC.Int.Int16)
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4lke w1_s4lkf]
        case w_s4lke of {
          GHC.Int.I16# ww1_s4lkh [Occ=Once] ->
              case w1_s4lkf of {
                GHC.Int.I16# ww3_s4lkj [Occ=Once] ->
                    case GHC.Int.$w$cdivMod ww1_s4lkh ww3_s4lkj of {
                      (#,#) ww5_s4lkl [Occ=Once] ww6_s4lkm [Occ=Once] ->
                          (,) [ww5_s4lkl ww6_s4lkm];
                    };
              };
        };

GHC.Int.$fRealInt16_$ctoRational [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int16 -> GHC.Real.Rational
[GblId, Arity=1, Str=<S(S),1*U(U)>m, Unf=OtherCon []] =
    [] \r [w_s4lkn]
        case w_s4lkn of {
          GHC.Int.I16# ww1_s4lkp [Occ=Once] ->
              case GHC.Integer.Type.smallInteger ww1_s4lkp of sat_s4lkq {
                __DEFAULT ->
                    case
                        GHC.Integer.Type.timesInteger sat_s4lkq GHC.Int.$fRealInt1
                    of
                    sat_s4lkr
                    { __DEFAULT ->
                          case GHC.Real.$w$sreduce sat_s4lkr GHC.Int.$fRealInt1 of {
                            (#,#) ww3_s4lkt [Occ=Once] ww4_s4lku [Occ=Once] ->
                                GHC.Real.:% [ww3_s4lkt ww4_s4lku];
                          };
                    };
              };
        };

GHC.Int.$fRealInt16 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Real.Real GHC.Int.Int16
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Real.C:Real! [GHC.Int.$fNumInt16
                                    GHC.Int.$fOrdInt16
                                    GHC.Int.$fRealInt16_$ctoRational];

GHC.Int.$fIntegralInt16 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Real.Integral GHC.Int.Int16
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Real.C:Integral! [GHC.Int.$fRealInt16
                                        GHC.Int.$fEnumInt16
                                        GHC.Int.$fIntegralInt16_$cquot
                                        GHC.Int.$fIntegralInt16_$crem
                                        GHC.Int.$fIntegralInt16_$cdiv
                                        GHC.Int.$fIntegralInt16_$cmod
                                        GHC.Int.$fIntegralInt16_$cquotRem
                                        GHC.Int.$fIntegralInt16_$cdivMod
                                        GHC.Int.$fIntegralInt16_$ctoInteger];

GHC.Int.$fIxInt16_$cunsafeIndex
  :: (GHC.Int.Int16, GHC.Int.Int16) -> GHC.Int.Int16 -> GHC.Types.Int
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S(S)L),1*U(1*U(U),A)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4lkv i_s4lkw]
        case ds_s4lkv of {
          (,) m_s4lky [Occ=Once!] _ [Occ=Dead] ->
              case i_s4lkw of {
                GHC.Int.I16# x#_s4lkB [Occ=Once] ->
                    case m_s4lky of {
                      GHC.Int.I16# x#1_s4lkD [Occ=Once] ->
                          case -# [x#_s4lkB x#1_s4lkD] of sat_s4lkE {
                            __DEFAULT -> GHC.Types.I# [sat_s4lkE];
                          };
                    };
              };
        };

GHC.Int.$fIxInt16_$crange
  :: (GHC.Int.Int16, GHC.Int.Int16) -> [GHC.Int.Int16]
[GblId,
 Arity=1,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>,
 Unf=OtherCon []] =
    [] \r [ds_s4lkF]
        case ds_s4lkF of {
          (,) m_s4lkH [Occ=Once] n_s4lkI [Occ=Once] ->
              GHC.Int.$fEnumInt16_$cenumFromTo m_s4lkH n_s4lkI;
        };

GHC.Int.$fIxInt16_$crangeSize
  :: (GHC.Int.Int16, GHC.Int.Int16) -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>m,
 Unf=OtherCon []] =
    [] \r [b_s4lkJ]
        case b_s4lkJ of {
          (,) _l_s4lkL [Occ=Once!] h_s4lkM [Occ=Once!] ->
              case _l_s4lkL of {
                GHC.Int.I16# x_s4lkO ->
                    case h_s4lkM of {
                      GHC.Int.I16# y_s4lkQ ->
                          case <=# [x_s4lkO y_s4lkQ] of {
                            __DEFAULT -> GHC.Int.$fIxInt1;
                            1# ->
                                case -# [y_s4lkQ x_s4lkO] of sat_s4lkS {
                                  __DEFAULT ->
                                      case +# [sat_s4lkS 1#] of sat_s4lkT {
                                        __DEFAULT -> GHC.Types.I# [sat_s4lkT];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fIxInt16_$cunsafeRangeSize
  :: (GHC.Int.Int16, GHC.Int.Int16) -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>m,
 Unf=OtherCon []] =
    [] \r [b_s4lkU]
        case b_s4lkU of {
          (,) _l_s4lkW [Occ=Once!] h_s4lkX [Occ=Once!] ->
              case h_s4lkX of {
                GHC.Int.I16# x#_s4lkZ [Occ=Once] ->
                    case _l_s4lkW of {
                      GHC.Int.I16# x#1_s4ll1 [Occ=Once] ->
                          case -# [x#_s4lkZ x#1_s4ll1] of sat_s4ll2 {
                            __DEFAULT ->
                                case +# [sat_s4ll2 1#] of sat_s4ll3 {
                                  __DEFAULT -> GHC.Types.I# [sat_s4ll3];
                                };
                          };
                    };
              };
        };

GHC.Int.$fIxInt16_$cindex [InlPrag=INLINE (sat-args=2)]
  :: (GHC.Int.Int16, GHC.Int.Int16) -> GHC.Int.Int16 -> GHC.Types.Int
[GblId,
 Arity=2,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s4ll4 eta1_s4ll5]
        case eta_s4ll4 of {
          (,) m_s4ll7 [Occ=Once!] n_s4ll8 [Occ=Once!] ->
              case m_s4ll7 of {
                GHC.Int.I16# x_s4lla ->
                    case eta1_s4ll5 of {
                      GHC.Int.I16# y_s4llc ->
                          case <=# [x_s4lla y_s4llc] of {
                            __DEFAULT -> GHC.Arr.hopelessIndexError;
                            1# ->
                                case n_s4ll8 of {
                                  GHC.Int.I16# y1_s4llf [Occ=Once] ->
                                      case <=# [y_s4llc y1_s4llf] of {
                                        __DEFAULT -> GHC.Arr.hopelessIndexError;
                                        1# ->
                                            case -# [y_s4llc x_s4lla] of sat_s4llh {
                                              __DEFAULT -> GHC.Types.I# [sat_s4llh];
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fIxInt16 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Arr.Ix GHC.Int.Int16
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Arr.C:Ix! [GHC.Int.$fOrdInt16
                                 GHC.Int.$fIxInt16_$crange
                                 GHC.Int.$fIxInt16_$cindex
                                 GHC.Int.$fIxInt16_$cunsafeIndex
                                 GHC.Int.$fIxInt16_$cinRange
                                 GHC.Int.$fIxInt16_$crangeSize
                                 GHC.Int.$fIxInt16_$cunsafeRangeSize];

GHC.Int.eqInt32 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4lli ds1_s4llj]
        case ds_s4lli of {
          GHC.Int.I32# x_s4lll [Occ=Once] ->
              case ds1_s4llj of {
                GHC.Int.I32# y_s4lln [Occ=Once] ->
                    case ==# [x_s4lll y_s4lln] of sat_s4llo {
                      __DEFAULT -> tagToEnum# [sat_s4llo];
                    };
              };
        };

GHC.Int.$fEqInt32 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.Int.Int32
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.Int.eqInt32 GHC.Int.neInt32];

GHC.Int.gtInt32 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4llp ds1_s4llq]
        case ds_s4llp of {
          GHC.Int.I32# x_s4lls [Occ=Once] ->
              case ds1_s4llq of {
                GHC.Int.I32# y_s4llu [Occ=Once] ->
                    case ># [x_s4lls y_s4llu] of sat_s4llv {
                      __DEFAULT -> tagToEnum# [sat_s4llv];
                    };
              };
        };

GHC.Int.geInt32 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4llw ds1_s4llx]
        case ds_s4llw of {
          GHC.Int.I32# x_s4llz [Occ=Once] ->
              case ds1_s4llx of {
                GHC.Int.I32# y_s4llB [Occ=Once] ->
                    case >=# [x_s4llz y_s4llB] of sat_s4llC {
                      __DEFAULT -> tagToEnum# [sat_s4llC];
                    };
              };
        };

GHC.Int.ltInt32 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4llD ds1_s4llE]
        case ds_s4llD of {
          GHC.Int.I32# x_s4llG [Occ=Once] ->
              case ds1_s4llE of {
                GHC.Int.I32# y_s4llI [Occ=Once] ->
                    case <# [x_s4llG y_s4llI] of sat_s4llJ {
                      __DEFAULT -> tagToEnum# [sat_s4llJ];
                    };
              };
        };

GHC.Int.leInt32 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4llK ds1_s4llL]
        case ds_s4llK of {
          GHC.Int.I32# x_s4llN [Occ=Once] ->
              case ds1_s4llL of {
                GHC.Int.I32# y_s4llP [Occ=Once] ->
                    case <=# [x_s4llN y_s4llP] of sat_s4llQ {
                      __DEFAULT -> tagToEnum# [sat_s4llQ];
                    };
              };
        };

GHC.Int.$fOrdInt32_$ccompare
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [x_s4llR y_s4llS]
        case x_s4llR of {
          GHC.Int.I32# x1_s4llU ->
              case y_s4llS of {
                GHC.Int.I32# y1_s4llW ->
                    case ==# [x1_s4llU y1_s4llW] of {
                      __DEFAULT ->
                          case <=# [x1_s4llU y1_s4llW] of {
                            __DEFAULT -> GHC.Types.GT [];
                            1# -> GHC.Types.LT [];
                          };
                      1# -> GHC.Types.EQ [];
                    };
              };
        };

GHC.Int.$fOrdInt32_$cmax
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> GHC.Int.Int32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s4llZ y_s4lm0]
        case x_s4llZ of wild_s4lm1 {
          GHC.Int.I32# x1_s4lm2 [Occ=Once] ->
              case y_s4lm0 of wild1_s4lm3 {
                GHC.Int.I32# y1_s4lm4 [Occ=Once] ->
                    case <=# [x1_s4lm2 y1_s4lm4] of {
                      __DEFAULT -> wild_s4lm1;
                      1# -> wild1_s4lm3;
                    };
              };
        };

GHC.Int.$fOrdInt32_$cmin
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> GHC.Int.Int32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s4lm6 y_s4lm7]
        case x_s4lm6 of wild_s4lm8 {
          GHC.Int.I32# x1_s4lm9 [Occ=Once] ->
              case y_s4lm7 of wild1_s4lma {
                GHC.Int.I32# y1_s4lmb [Occ=Once] ->
                    case <=# [x1_s4lm9 y1_s4lmb] of {
                      __DEFAULT -> wild1_s4lma;
                      1# -> wild_s4lm8;
                    };
              };
        };

GHC.Int.$fOrdInt32 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord GHC.Int.Int32
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.Int.$fEqInt32
                                      GHC.Int.$fOrdInt32_$ccompare
                                      GHC.Int.ltInt32
                                      GHC.Int.leInt32
                                      GHC.Int.gtInt32
                                      GHC.Int.geInt32
                                      GHC.Int.$fOrdInt32_$cmax
                                      GHC.Int.$fOrdInt32_$cmin];

GHC.Int.$fIxInt32_$cinRange
  :: (GHC.Int.Int32, GHC.Int.Int32)
     -> GHC.Int.Int32 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S(S)L),1*U(1*U(U),1*U(U))><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4lmd i_s4lme]
        case ds_s4lmd of {
          (,) m_s4lmg [Occ=Once!] n_s4lmh [Occ=Once!] ->
              case m_s4lmg of {
                GHC.Int.I32# x_s4lmj [Occ=Once] ->
                    case i_s4lme of {
                      GHC.Int.I32# y_s4lml ->
                          case <=# [x_s4lmj y_s4lml] of {
                            __DEFAULT -> GHC.Types.False [];
                            1# ->
                                case n_s4lmh of {
                                  GHC.Int.I32# y1_s4lmo [Occ=Once] ->
                                      case <=# [y_s4lml y1_s4lmo] of sat_s4lmp {
                                        __DEFAULT -> tagToEnum# [sat_s4lmp];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fNumInt3 :: GHC.Int.Int32
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I32#! [1#];

GHC.Int.$fNumInt32_$csignum :: GHC.Int.Int32 -> GHC.Int.Int32
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s4lmq]
        case x_s4lmq of {
          GHC.Int.I32# x1_s4lms ->
              case ># [x1_s4lms 0#] of {
                __DEFAULT ->
                    case x1_s4lms of {
                      __DEFAULT -> GHC.Int.$fNumInt4;
                      0# -> GHC.Int.$fBitsInt6;
                    };
                1# -> GHC.Int.$fNumInt3;
              };
        };

GHC.Int.$fNumInt32_$cabs :: GHC.Int.Int32 -> GHC.Int.Int32
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s4lmv]
        case x_s4lmv of wild_s4lmw {
          GHC.Int.I32# x1_s4lmx ->
              case >=# [x1_s4lmx 0#] of {
                __DEFAULT ->
                    case negateInt# [x1_s4lmx] of sat_s4lmz {
                      __DEFAULT ->
                          case narrow32Int# [sat_s4lmz] of sat_s4lmA {
                            __DEFAULT -> GHC.Int.I32# [sat_s4lmA];
                          };
                    };
                1# -> wild_s4lmw;
              };
        };

GHC.Int.$fNumInt32 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Num.Num GHC.Int.Int32
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Num.C:Num! [GHC.Int.$fNumInt32_$c+
                                  GHC.Int.$fNumInt32_$c-
                                  GHC.Int.$fNumInt32_$c*
                                  GHC.Int.$fNumInt32_$cnegate
                                  GHC.Int.$fNumInt32_$cabs
                                  GHC.Int.$fNumInt32_$csignum
                                  GHC.Int.$fNumInt32_$cfromInteger];

GHC.Int.$fBitsInt5 :: GHC.Base.Maybe GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [GHC.Int.$fBitsInt4];

GHC.Int.$fBitsInt32_$cbitSizeMaybe
  :: GHC.Int.Int32 -> GHC.Base.Maybe GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>m2, Unf=OtherCon []] =
    [] \r [i_s4lmB] GHC.Int.$fBitsInt5;

GHC.Int.$fBitsInt32_$cbit [InlPrag=INLINE (sat-args=0)]
  :: GHC.Types.Int -> GHC.Int.Int32
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [i_s4lmC]
        case i_s4lmC of {
          GHC.Types.I# i#_s4lmE ->
              case >=# [i#_s4lmE 64#] of {
                __DEFAULT ->
                    case uncheckedIShiftL# [1# i#_s4lmE] of sat_s4lmG {
                      __DEFAULT ->
                          case narrow32Int# [sat_s4lmG] of sat_s4lmH {
                            __DEFAULT -> GHC.Int.I32# [sat_s4lmH];
                          };
                    };
                1# -> GHC.Int.$fBitsInt6;
              };
        };

GHC.Int.$fBitsInt32_$ctestBit [InlPrag=INLINE (sat-args=0)]
  :: GHC.Int.Int32 -> GHC.Types.Int -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [x_s4lmI i_s4lmJ]
        case x_s4lmI of {
          GHC.Int.I32# x#_s4lmL [Occ=Once] ->
              case i_s4lmJ of {
                GHC.Types.I# i#_s4lmN ->
                    case >=# [i#_s4lmN 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftL# [1# i#_s4lmN] of sat_s4lmQ {
                            __DEFAULT ->
                                case narrow32Int# [sat_s4lmQ] of sat_s4lmR {
                                  __DEFAULT ->
                                      case int2Word# [sat_s4lmR] of sat_s4lmS {
                                        __DEFAULT ->
                                            case int2Word# [x#_s4lmL] of sat_s4lmP {
                                              __DEFAULT ->
                                                  case and# [sat_s4lmP sat_s4lmS] of sat_s4lmT {
                                                    __DEFAULT ->
                                                        case word2Int# [sat_s4lmT] of {
                                                          __DEFAULT -> GHC.Types.True [];
                                                          0# -> GHC.Types.False [];
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                      1# -> GHC.Types.False [];
                    };
              };
        };

GHC.Int.$fBitsInt32_$crotateR [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int32 -> GHC.Types.Int -> GHC.Int.Int32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s4lmV eta1_s4lmW]
        case eta_s4lmV of wild_s4lmX {
          GHC.Int.I32# x#_s4lmY [Occ=Once] ->
              case eta1_s4lmW of {
                GHC.Types.I# x1_s4ln0 [Occ=Once] ->
                    case negateInt# [x1_s4ln0] of sat_s4ln1 {
                      __DEFAULT ->
                          case int2Word# [sat_s4ln1] of sat_s4ln2 {
                            __DEFAULT ->
                                case and# [sat_s4ln2 31##] of sat_s4ln3 {
                                  __DEFAULT ->
                                      case word2Int# [sat_s4ln3] of wild2_s4ln4 {
                                        __DEFAULT ->
                                            case int2Word# [x#_s4lmY] of sat_s4ln6 {
                                              __DEFAULT ->
                                                  case
                                                      narrow32Word# [sat_s4ln6]
                                                  of
                                                  x'#_s4ln5 [Dmd=<S,U>]
                                                  { __DEFAULT ->
                                                        case -# [32# wild2_s4ln4] of sat_s4ln8 {
                                                          __DEFAULT ->
                                                              case
                                                                  uncheckedShiftRL# [x'#_s4ln5
                                                                                     sat_s4ln8]
                                                              of
                                                              sat_s4ln9
                                                              { __DEFAULT ->
                                                                    case
                                                                        uncheckedShiftL# [x'#_s4ln5
                                                                                          wild2_s4ln4]
                                                                    of
                                                                    sat_s4ln7
                                                                    { __DEFAULT ->
                                                                          case
                                                                              or# [sat_s4ln7
                                                                                   sat_s4ln9]
                                                                          of
                                                                          sat_s4lna
                                                                          { __DEFAULT ->
                                                                                case
                                                                                    word2Int# [sat_s4lna]
                                                                                of
                                                                                sat_s4lnb
                                                                                { __DEFAULT ->
                                                                                      case
                                                                                          narrow32Int# [sat_s4lnb]
                                                                                      of
                                                                                      sat_s4lnc
                                                                                      { __DEFAULT ->
                                                                                            GHC.Int.I32# [sat_s4lnc];
                                                                                      };
                                                                                };
                                                                          };
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                        0# -> wild_s4lmX;
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fBitsInt32_$ccomplementBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int32 -> GHC.Types.Int -> GHC.Int.Int32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s4lnd eta1_s4lne]
        case eta_s4lnd of wild_s4lnf {
          GHC.Int.I32# x#_s4lng [Occ=Once] ->
              case eta1_s4lne of {
                GHC.Types.I# i#_s4lni ->
                    case >=# [i#_s4lni 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftL# [1# i#_s4lni] of sat_s4lnl {
                            __DEFAULT ->
                                case narrow32Int# [sat_s4lnl] of sat_s4lnm {
                                  __DEFAULT ->
                                      case int2Word# [sat_s4lnm] of sat_s4lnn {
                                        __DEFAULT ->
                                            case int2Word# [x#_s4lng] of sat_s4lnk {
                                              __DEFAULT ->
                                                  case xor# [sat_s4lnk sat_s4lnn] of sat_s4lno {
                                                    __DEFAULT ->
                                                        case word2Int# [sat_s4lno] of sat_s4lnp {
                                                          __DEFAULT -> GHC.Int.I32# [sat_s4lnp];
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                      1# -> wild_s4lnf;
                    };
              };
        };

GHC.Int.$fBitsInt32_$cclearBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int32 -> GHC.Types.Int -> GHC.Int.Int32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s4lnq eta1_s4lnr]
        case eta_s4lnq of {
          GHC.Int.I32# x#_s4lnt [Occ=Once*] ->
              case eta1_s4lnr of {
                GHC.Types.I# i#_s4lnv ->
                    case >=# [i#_s4lnv 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftL# [1# i#_s4lnv] of sat_s4lny {
                            __DEFAULT ->
                                case narrow32Int# [sat_s4lny] of sat_s4lnz {
                                  __DEFAULT ->
                                      case int2Word# [sat_s4lnz] of sat_s4lnA {
                                        __DEFAULT ->
                                            case not# [sat_s4lnA] of sat_s4lnB {
                                              __DEFAULT ->
                                                  case int2Word# [x#_s4lnt] of sat_s4lnx {
                                                    __DEFAULT ->
                                                        case
                                                            and# [sat_s4lnx sat_s4lnB]
                                                        of
                                                        sat_s4lnC
                                                        { __DEFAULT ->
                                                              case
                                                                  word2Int# [sat_s4lnC]
                                                              of
                                                              sat_s4lnD
                                                              { __DEFAULT ->
                                                                    GHC.Int.I32# [sat_s4lnD];
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                      1# ->
                          case int2Word# [x#_s4lnt] of sat_s4lnE {
                            __DEFAULT ->
                                case and# [sat_s4lnE 18446744073709551615##] of sat_s4lnF {
                                  __DEFAULT ->
                                      case word2Int# [sat_s4lnF] of sat_s4lnG {
                                        __DEFAULT -> GHC.Int.I32# [sat_s4lnG];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fBitsInt32_$csetBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int32 -> GHC.Types.Int -> GHC.Int.Int32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s4lnH eta1_s4lnI]
        case eta_s4lnH of wild_s4lnJ {
          GHC.Int.I32# x#_s4lnK [Occ=Once] ->
              case eta1_s4lnI of {
                GHC.Types.I# i#_s4lnM ->
                    case >=# [i#_s4lnM 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftL# [1# i#_s4lnM] of sat_s4lnP {
                            __DEFAULT ->
                                case narrow32Int# [sat_s4lnP] of sat_s4lnQ {
                                  __DEFAULT ->
                                      case int2Word# [sat_s4lnQ] of sat_s4lnR {
                                        __DEFAULT ->
                                            case int2Word# [x#_s4lnK] of sat_s4lnO {
                                              __DEFAULT ->
                                                  case or# [sat_s4lnO sat_s4lnR] of sat_s4lnS {
                                                    __DEFAULT ->
                                                        case word2Int# [sat_s4lnS] of sat_s4lnT {
                                                          __DEFAULT -> GHC.Int.I32# [sat_s4lnT];
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                      1# -> wild_s4lnJ;
                    };
              };
        };

GHC.Int.$fBitsInt32_$crotateL [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int32 -> GHC.Types.Int -> GHC.Int.Int32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Int.$fBitsInt32_$crotate eta_B2 eta_B1;

GHC.Int.$fBitsInt32 [InlPrag=NOUSERINLINE CONLIKE]
  :: Data.Bits.Bits GHC.Int.Int32
[GblId[DFunId], Caf=NoCafRefs] =
    CCS_DONT_CARE Data.Bits.C:Bits! [GHC.Int.$fEqInt32
                                     GHC.Int.$fBitsInt32_$c.&.
                                     GHC.Int.$fBitsInt32_$c.|.
                                     GHC.Int.$fBitsInt32_$cxor
                                     GHC.Int.$fBitsInt32_$ccomplement
                                     GHC.Int.$fBitsInt32_$cshift
                                     GHC.Int.$fBitsInt32_$crotate
                                     GHC.Int.$fBitsInt6
                                     GHC.Int.$fBitsInt32_$cbit
                                     GHC.Int.$fBitsInt32_$csetBit
                                     GHC.Int.$fBitsInt32_$cclearBit
                                     GHC.Int.$fBitsInt32_$ccomplementBit
                                     GHC.Int.$fBitsInt32_$ctestBit
                                     GHC.Int.$fBitsInt32_$cbitSizeMaybe
                                     GHC.Int.$fBitsInt32_$cfiniteBitSize
                                     GHC.Int.$fBitsInt32_$cisSigned
                                     GHC.Int.$fBitsInt32_$cshiftL
                                     GHC.Int.$fBitsInt32_$cunsafeShiftL
                                     GHC.Int.$fBitsInt32_$cshiftR
                                     GHC.Int.$fBitsInt32_$cunsafeShiftR
                                     GHC.Int.$fBitsInt32_$crotateL
                                     GHC.Int.$fBitsInt32_$crotateR
                                     GHC.Int.$fBitsInt32_$cpopCount];

GHC.Int.$fFiniteBitsInt32 [InlPrag=NOUSERINLINE CONLIKE]
  :: Data.Bits.FiniteBits GHC.Int.Int32
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE Data.Bits.C:FiniteBits! [GHC.Int.$fBitsInt32
                                           GHC.Int.$fBitsInt32_$cfiniteBitSize
                                           GHC.Int.$fFiniteBitsInt32_$ccountLeadingZeros
                                           GHC.Int.$fFiniteBitsInt32_$ccountTrailingZeros];

GHC.Int.$fReadInt32_go [Occ=LoopBreaker]
  :: [(GHC.Types.Int, GHC.Base.String)]
     -> [(GHC.Int.Int32, GHC.Base.String)]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s4lnU]
        case ds_s4lnU of {
          [] -> [] [];
          : y_s4lnW [Occ=Once!] ys_s4lnX [Occ=Once] ->
              case y_s4lnW of {
                (,) x_s4lnZ [Occ=Once!] r_s4lo0 [Occ=Once] ->
                    let {
                      sat_s4lo6 [Occ=Once] :: [(GHC.Int.Int32, GHC.Base.String)]
                      [LclId] =
                          [ys_s4lnX] \u [] GHC.Int.$fReadInt32_go ys_s4lnX; } in
                    let {
                      sat_s4lo4 [Occ=Once] :: GHC.Int.Int32
                      [LclId] =
                          [x_s4lnZ] \u []
                              case x_s4lnZ of {
                                GHC.Types.I# x#_s4lo2 [Occ=Once] ->
                                    case narrow32Int# [x#_s4lo2] of sat_s4lo3 {
                                      __DEFAULT -> GHC.Int.I32# [sat_s4lo3];
                                    };
                              }; } in
                    let {
                      sat_s4lo5 [Occ=Once] :: (GHC.Int.Int32, GHC.Base.String)
                      [LclId] =
                          CCCS (,)! [sat_s4lo4 r_s4lo0];
                    } in  : [sat_s4lo5 sat_s4lo6];
              };
        };

GHC.Int.$fReadInt32_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS GHC.Int.Int32
[GblId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [p_s4lo7 s_s4lo8]
        case
            GHC.Read.$fReadInt_$sreadNumber
                GHC.Read.$fReadInt2
                p_s4lo7
                Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
        of
        sat_s4lo9
        { __DEFAULT ->
              case
                  Text.ParserCombinators.ReadP.run sat_s4lo9 s_s4lo8
              of
              sat_s4loa
              { __DEFAULT -> GHC.Int.$fReadInt32_go sat_s4loa;
              };
        };

GHC.Int.$fReadInt6
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Int.Int32 -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,U><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [n_s4lob eta_s4loc]
        let {
          sat_s4lod [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS GHC.Int.Int32
          [LclId] =
              [n_s4lob] \r [eta_B1]
                  GHC.Int.$fReadInt32_$creadsPrec n_s4lob eta_B1;
        } in 
          case
              Text.ParserCombinators.ReadP.$wreadS_to_P sat_s4lod eta_s4loc
          of
          { Unit# ww1_s4lof [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s4lof];
          };

GHC.Int.$fReadInt5
  :: Text.ParserCombinators.ReadP.P [GHC.Int.Int32]
[GblId] =
    [] \u []
        GHC.Read.list
            GHC.Int.$fReadInt6
            GHC.Int.$fIxInt1
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Int.$fReadInt32_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.Int.Int32]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Int.$fReadInt5 eta_B1;

GHC.Int.$fReadInt4
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        ([GHC.Int.Int32] -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,A><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [n_s4log w1_s4loh]
        case
            Text.ParserCombinators.ReadP.$wreadS_to_P
                GHC.Int.$fReadInt32_$creadList w1_s4loh
        of
        { Unit# ww1_s4loj [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s4loj];
        };

GHC.Int.$fReadInt32 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.Int.Int32
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Int.$fReadInt32_$creadsPrec
                                    GHC.Int.$fReadInt32_$creadList
                                    GHC.Int.$fReadInt6
                                    GHC.Int.$fReadInt4];

GHC.Int.$fIntegralInt32_$cquot [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> GHC.Int.Int32
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4lok w1_s4lol]
        case w_s4lok of {
          GHC.Int.I32# ww1_s4lon [Occ=Once*] ->
              case w1_s4lol of {
                GHC.Int.I32# ww3_s4lop [Occ=Once!] ->
                    case ww3_s4lop of wild_s4loq {
                      __DEFAULT ->
                          case quotInt# [ww1_s4lon wild_s4loq] of wild1_s4lor {
                            __DEFAULT ->
                                case narrow32Int# [wild1_s4lor] of sat_s4los {
                                  __DEFAULT -> GHC.Int.I32# [sat_s4los];
                                };
                          };
                      -1# ->
                          case ww1_s4lon of wild1_s4lot {
                            __DEFAULT ->
                                case quotInt# [wild1_s4lot -1#] of sat_s4lou {
                                  __DEFAULT ->
                                      case narrow32Int# [sat_s4lou] of sat_s4lov {
                                        __DEFAULT -> GHC.Int.I32# [sat_s4lov];
                                      };
                                };
                            -2147483648# -> GHC.Real.overflowError;
                          };
                      0# -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Int.$fIntegralInt32_$crem
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> GHC.Int.Int32
[GblId, Arity=2, Str=<S,1*U(U)><S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [ds_s4loy y_s4loz]
        case ds_s4loy of {
          GHC.Int.I32# x#_s4loB [Occ=Once] ->
              case y_s4loz of {
                GHC.Int.I32# y#_s4loD [Occ=Once!] ->
                    case y#_s4loD of wild2_s4loE {
                      __DEFAULT ->
                          case remInt# [x#_s4loB wild2_s4loE] of wild3_s4loF {
                            __DEFAULT ->
                                case narrow32Int# [wild3_s4loF] of sat_s4loG {
                                  __DEFAULT -> GHC.Int.I32# [sat_s4loG];
                                };
                          };
                      -1# -> GHC.Int.$fBitsInt6;
                      0# -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Int.$w$cdiv1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Str=<S,U><S,1*U>, Unf=OtherCon []] =
    [] \r [ww_s4loH ww1_s4loI]
        case ww1_s4loI of wild_s4loJ {
          __DEFAULT ->
              case GHC.Classes.divInt# ww_s4loH wild_s4loJ of wild1_s4loK {
                __DEFAULT -> narrow32Int# [wild1_s4loK];
              };
          -1# ->
              case ww_s4loH of wild1_s4loL {
                __DEFAULT ->
                    case GHC.Classes.divInt# wild1_s4loL -1# of wild2_s4loM {
                      __DEFAULT -> narrow32Int# [wild2_s4loM];
                    };
                -2147483648# -> GHC.Real.overflowError;
              };
          0# -> GHC.Real.divZeroError;
        };

GHC.Int.$fIntegralInt32_$cdiv [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> GHC.Int.Int32
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4loP w1_s4loQ]
        case w_s4loP of {
          GHC.Int.I32# ww1_s4loS [Occ=Once] ->
              case w1_s4loQ of {
                GHC.Int.I32# ww3_s4loU [Occ=Once] ->
                    case GHC.Int.$w$cdiv1 ww1_s4loS ww3_s4loU of ww4_s4loV {
                      __DEFAULT -> GHC.Int.I32# [ww4_s4loV];
                    };
              };
        };

GHC.Int.$fIntegralInt32_$cmod [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> GHC.Int.Int32
[GblId, Arity=2, Str=<S,1*U(U)><S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [w_s4loW w1_s4loX]
        case w_s4loW of {
          GHC.Int.I32# ww1_s4loZ [Occ=Once] ->
              case w1_s4loX of {
                GHC.Int.I32# ww3_s4lp1 [Occ=Once!] ->
                    case ww3_s4lp1 of wild_s4lp2 {
                      __DEFAULT ->
                          case GHC.Classes.modInt# ww1_s4loZ wild_s4lp2 of wild1_s4lp3 {
                            __DEFAULT ->
                                case narrow32Int# [wild1_s4lp3] of sat_s4lp4 {
                                  __DEFAULT -> GHC.Int.I32# [sat_s4lp4];
                                };
                          };
                      -1# -> GHC.Int.$fBitsInt6;
                      0# -> GHC.Real.divZeroError;
                    };
              };
        };

lvl8_r4kPz :: (GHC.Int.Int32, GHC.Int.Int32)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Real.overflowError GHC.Int.$fBitsInt6];

GHC.Int.$fIntegralInt32_$cquotRem [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> (GHC.Int.Int32, GHC.Int.Int32)
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4lp6 w1_s4lp7]
        case w_s4lp6 of {
          GHC.Int.I32# ww1_s4lp9 [Occ=Once*] ->
              case w1_s4lp7 of {
                GHC.Int.I32# ww3_s4lpb [Occ=Once!] ->
                    case ww3_s4lpb of wild_s4lpc {
                      __DEFAULT ->
                          case quotRemInt# [ww1_s4lp9 wild_s4lpc] of {
                            (#,#) ipv_s4lpe [Occ=Once] ipv1_s4lpf [Occ=Once] ->
                                case narrow32Int# [ipv1_s4lpf] of sat_s4lpi {
                                  __DEFAULT ->
                                      let {
                                        sat_s4lpj [Occ=Once] :: GHC.Int.Int32
                                        [LclId] =
                                            CCCS GHC.Int.I32#! [sat_s4lpi];
                                      } in 
                                        case narrow32Int# [ipv_s4lpe] of sat_s4lpg {
                                          __DEFAULT ->
                                              let {
                                                sat_s4lph [Occ=Once] :: GHC.Int.Int32
                                                [LclId] =
                                                    CCCS GHC.Int.I32#! [sat_s4lpg];
                                              } in  (,) [sat_s4lph sat_s4lpj];
                                        };
                                };
                          };
                      -1# ->
                          case ww1_s4lp9 of wild1_s4lpk {
                            __DEFAULT ->
                                case quotRemInt# [wild1_s4lpk -1#] of {
                                  (#,#) ipv_s4lpm [Occ=Once] ipv1_s4lpn [Occ=Once] ->
                                      case narrow32Int# [ipv1_s4lpn] of sat_s4lpq {
                                        __DEFAULT ->
                                            let {
                                              sat_s4lpr [Occ=Once] :: GHC.Int.Int32
                                              [LclId] =
                                                  CCCS GHC.Int.I32#! [sat_s4lpq];
                                            } in 
                                              case narrow32Int# [ipv_s4lpm] of sat_s4lpo {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s4lpp [Occ=Once] :: GHC.Int.Int32
                                                      [LclId] =
                                                          CCCS GHC.Int.I32#! [sat_s4lpo];
                                                    } in  (,) [sat_s4lpp sat_s4lpr];
                                              };
                                      };
                                };
                            -2147483648# -> lvl8_r4kPz;
                          };
                      0# -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Int.$w$cdivMod1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int#
     -> GHC.Prim.Int# -> (# GHC.Int.Int32, GHC.Int.Int32 #)
[GblId, Arity=2, Str=<S,U><S,1*U>, Unf=OtherCon []] =
    [] \r [ww_s4lpt ww1_s4lpu]
        case ww1_s4lpu of wild_s4lpv {
          __DEFAULT ->
              let-no-escape {
                $j_s4lpw [Occ=Once*T[0], Dmd=<L,1*U(U,U)>]
                  :: (# GHC.Int.Int32, GHC.Int.Int32 #)
                [LclId[JoinId(0)], Unf=OtherCon []] =
                    [ww_s4lpt wild_s4lpv] \r []
                        case ># [ww_s4lpt 0#] of {
                          __DEFAULT ->
                              case <# [ww_s4lpt 0#] of {
                                __DEFAULT ->
                                    case quotRemInt# [ww_s4lpt wild_s4lpv] of {
                                      (#,#) ipv_s4lpA [Occ=Once] ipv1_s4lpB [Occ=Once] ->
                                          case narrow32Int# [ipv1_s4lpB] of sat_s4lpE {
                                            __DEFAULT ->
                                                let {
                                                  sat_s4lpF [Occ=Once] :: GHC.Int.Int32
                                                  [LclId] =
                                                      CCCS GHC.Int.I32#! [sat_s4lpE];
                                                } in 
                                                  case narrow32Int# [ipv_s4lpA] of sat_s4lpC {
                                                    __DEFAULT ->
                                                        let {
                                                          sat_s4lpD [Occ=Once] :: GHC.Int.Int32
                                                          [LclId] =
                                                              CCCS GHC.Int.I32#! [sat_s4lpC];
                                                        } in  (#,#) [sat_s4lpD sat_s4lpF];
                                                  };
                                          };
                                    };
                                1# ->
                                    case ># [wild_s4lpv 0#] of {
                                      __DEFAULT ->
                                          case quotRemInt# [ww_s4lpt wild_s4lpv] of {
                                            (#,#) ipv_s4lpI [Occ=Once] ipv1_s4lpJ [Occ=Once] ->
                                                case narrow32Int# [ipv1_s4lpJ] of sat_s4lpM {
                                                  __DEFAULT ->
                                                      let {
                                                        sat_s4lpN [Occ=Once] :: GHC.Int.Int32
                                                        [LclId] =
                                                            CCCS GHC.Int.I32#! [sat_s4lpM];
                                                      } in 
                                                        case narrow32Int# [ipv_s4lpI] of sat_s4lpK {
                                                          __DEFAULT ->
                                                              let {
                                                                sat_s4lpL [Occ=Once]
                                                                  :: GHC.Int.Int32
                                                                [LclId] =
                                                                    CCCS GHC.Int.I32#! [sat_s4lpK];
                                                              } in  (#,#) [sat_s4lpL sat_s4lpN];
                                                        };
                                                };
                                          };
                                      1# ->
                                          case +# [ww_s4lpt 1#] of sat_s4lpO {
                                            __DEFAULT ->
                                                case quotRemInt# [sat_s4lpO wild_s4lpv] of {
                                                  (#,#) ipv_s4lpQ [Occ=Once]
                                                        ipv1_s4lpR [Occ=Once] ->
                                                      case +# [ipv1_s4lpR wild_s4lpv] of sat_s4lpV {
                                                        __DEFAULT ->
                                                            case -# [sat_s4lpV 1#] of sat_s4lpW {
                                                              __DEFAULT ->
                                                                  case
                                                                      narrow32Int# [sat_s4lpW]
                                                                  of
                                                                  sat_s4lpX
                                                                  { __DEFAULT ->
                                                                        let {
                                                                          sat_s4lpY [Occ=Once]
                                                                            :: GHC.Int.Int32
                                                                          [LclId] =
                                                                              CCCS GHC.Int.I32#! [sat_s4lpX];
                                                                        } in 
                                                                          case
                                                                              -# [ipv_s4lpQ 1#]
                                                                          of
                                                                          sat_s4lpS
                                                                          { __DEFAULT ->
                                                                                case
                                                                                    narrow32Int# [sat_s4lpS]
                                                                                of
                                                                                sat_s4lpT
                                                                                { __DEFAULT ->
                                                                                      let {
                                                                                        sat_s4lpU [Occ=Once]
                                                                                          :: GHC.Int.Int32
                                                                                        [LclId] =
                                                                                            CCCS GHC.Int.I32#! [sat_s4lpT];
                                                                                      } in 
                                                                                        (#,#) [sat_s4lpU
                                                                                               sat_s4lpY];
                                                                                };
                                                                          };
                                                                  };
                                                            };
                                                      };
                                                };
                                          };
                                    };
                              };
                          1# ->
                              case <# [wild_s4lpv 0#] of {
                                __DEFAULT ->
                                    case <# [ww_s4lpt 0#] of {
                                      __DEFAULT ->
                                          case quotRemInt# [ww_s4lpt wild_s4lpv] of {
                                            (#,#) ipv_s4lq2 [Occ=Once] ipv1_s4lq3 [Occ=Once] ->
                                                case narrow32Int# [ipv1_s4lq3] of sat_s4lq6 {
                                                  __DEFAULT ->
                                                      let {
                                                        sat_s4lq7 [Occ=Once] :: GHC.Int.Int32
                                                        [LclId] =
                                                            CCCS GHC.Int.I32#! [sat_s4lq6];
                                                      } in 
                                                        case narrow32Int# [ipv_s4lq2] of sat_s4lq4 {
                                                          __DEFAULT ->
                                                              let {
                                                                sat_s4lq5 [Occ=Once]
                                                                  :: GHC.Int.Int32
                                                                [LclId] =
                                                                    CCCS GHC.Int.I32#! [sat_s4lq4];
                                                              } in  (#,#) [sat_s4lq5 sat_s4lq7];
                                                        };
                                                };
                                          };
                                      1# ->
                                          case ># [wild_s4lpv 0#] of {
                                            __DEFAULT ->
                                                case quotRemInt# [ww_s4lpt wild_s4lpv] of {
                                                  (#,#) ipv_s4lqa [Occ=Once]
                                                        ipv1_s4lqb [Occ=Once] ->
                                                      case narrow32Int# [ipv1_s4lqb] of sat_s4lqe {
                                                        __DEFAULT ->
                                                            let {
                                                              sat_s4lqf [Occ=Once] :: GHC.Int.Int32
                                                              [LclId] =
                                                                  CCCS GHC.Int.I32#! [sat_s4lqe];
                                                            } in 
                                                              case
                                                                  narrow32Int# [ipv_s4lqa]
                                                              of
                                                              sat_s4lqc
                                                              { __DEFAULT ->
                                                                    let {
                                                                      sat_s4lqd [Occ=Once]
                                                                        :: GHC.Int.Int32
                                                                      [LclId] =
                                                                          CCCS GHC.Int.I32#! [sat_s4lqc];
                                                                    } in 
                                                                      (#,#) [sat_s4lqd sat_s4lqf];
                                                              };
                                                      };
                                                };
                                            1# ->
                                                case +# [ww_s4lpt 1#] of sat_s4lqg {
                                                  __DEFAULT ->
                                                      case quotRemInt# [sat_s4lqg wild_s4lpv] of {
                                                        (#,#) ipv_s4lqi [Occ=Once]
                                                              ipv1_s4lqj [Occ=Once] ->
                                                            case
                                                                +# [ipv1_s4lqj wild_s4lpv]
                                                            of
                                                            sat_s4lqn
                                                            { __DEFAULT ->
                                                                  case
                                                                      -# [sat_s4lqn 1#]
                                                                  of
                                                                  sat_s4lqo
                                                                  { __DEFAULT ->
                                                                        case
                                                                            narrow32Int# [sat_s4lqo]
                                                                        of
                                                                        sat_s4lqp
                                                                        { __DEFAULT ->
                                                                              let {
                                                                                sat_s4lqq [Occ=Once]
                                                                                  :: GHC.Int.Int32
                                                                                [LclId] =
                                                                                    CCCS GHC.Int.I32#! [sat_s4lqp];
                                                                              } in 
                                                                                case
                                                                                    -# [ipv_s4lqi
                                                                                        1#]
                                                                                of
                                                                                sat_s4lqk
                                                                                { __DEFAULT ->
                                                                                      case
                                                                                          narrow32Int# [sat_s4lqk]
                                                                                      of
                                                                                      sat_s4lql
                                                                                      { __DEFAULT ->
                                                                                            let {
                                                                                              sat_s4lqm [Occ=Once]
                                                                                                :: GHC.Int.Int32
                                                                                              [LclId] =
                                                                                                  CCCS GHC.Int.I32#! [sat_s4lql];
                                                                                            } in 
                                                                                              (#,#) [sat_s4lqm
                                                                                                     sat_s4lqq];
                                                                                      };
                                                                                };
                                                                        };
                                                                  };
                                                            };
                                                      };
                                                };
                                          };
                                    };
                                1# ->
                                    case -# [ww_s4lpt 1#] of sat_s4lqr {
                                      __DEFAULT ->
                                          case quotRemInt# [sat_s4lqr wild_s4lpv] of {
                                            (#,#) ipv_s4lqt [Occ=Once] ipv1_s4lqu [Occ=Once] ->
                                                case +# [ipv1_s4lqu wild_s4lpv] of sat_s4lqy {
                                                  __DEFAULT ->
                                                      case +# [sat_s4lqy 1#] of sat_s4lqz {
                                                        __DEFAULT ->
                                                            case
                                                                narrow32Int# [sat_s4lqz]
                                                            of
                                                            sat_s4lqA
                                                            { __DEFAULT ->
                                                                  let {
                                                                    sat_s4lqB [Occ=Once]
                                                                      :: GHC.Int.Int32
                                                                    [LclId] =
                                                                        CCCS GHC.Int.I32#! [sat_s4lqA];
                                                                  } in 
                                                                    case
                                                                        -# [ipv_s4lqt 1#]
                                                                    of
                                                                    sat_s4lqv
                                                                    { __DEFAULT ->
                                                                          case
                                                                              narrow32Int# [sat_s4lqv]
                                                                          of
                                                                          sat_s4lqw
                                                                          { __DEFAULT ->
                                                                                let {
                                                                                  sat_s4lqx [Occ=Once]
                                                                                    :: GHC.Int.Int32
                                                                                  [LclId] =
                                                                                      CCCS GHC.Int.I32#! [sat_s4lqw];
                                                                                } in 
                                                                                  (#,#) [sat_s4lqx
                                                                                         sat_s4lqB];
                                                                          };
                                                                    };
                                                            };
                                                      };
                                                };
                                          };
                                    };
                              };
                        };
              } in 
                case wild_s4lpv of {
                  __DEFAULT -> $j_s4lpw;
                  -1# ->
                      case ww_s4lpt of {
                        __DEFAULT -> $j_s4lpw;
                        -2147483648# -> (#,#) [GHC.Real.overflowError GHC.Int.$fBitsInt6];
                      };
                };
          0# -> GHC.Real.divZeroError;
        };

GHC.Int.$fIntegralInt32_$cdivMod [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> (GHC.Int.Int32, GHC.Int.Int32)
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4lqF w1_s4lqG]
        case w_s4lqF of {
          GHC.Int.I32# ww1_s4lqI [Occ=Once] ->
              case w1_s4lqG of {
                GHC.Int.I32# ww3_s4lqK [Occ=Once] ->
                    case GHC.Int.$w$cdivMod1 ww1_s4lqI ww3_s4lqK of {
                      (#,#) ww5_s4lqM [Occ=Once] ww6_s4lqN [Occ=Once] ->
                          (,) [ww5_s4lqM ww6_s4lqN];
                    };
              };
        };

GHC.Int.$fRealInt32_$ctoRational [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int32 -> GHC.Real.Rational
[GblId, Arity=1, Str=<S(S),1*U(U)>m, Unf=OtherCon []] =
    [] \r [w_s4lqO]
        case w_s4lqO of {
          GHC.Int.I32# ww1_s4lqQ [Occ=Once] ->
              case GHC.Integer.Type.smallInteger ww1_s4lqQ of sat_s4lqR {
                __DEFAULT ->
                    case
                        GHC.Integer.Type.timesInteger sat_s4lqR GHC.Int.$fRealInt1
                    of
                    sat_s4lqS
                    { __DEFAULT ->
                          case GHC.Real.$w$sreduce sat_s4lqS GHC.Int.$fRealInt1 of {
                            (#,#) ww3_s4lqU [Occ=Once] ww4_s4lqV [Occ=Once] ->
                                GHC.Real.:% [ww3_s4lqU ww4_s4lqV];
                          };
                    };
              };
        };

GHC.Int.$fRealInt32 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Real.Real GHC.Int.Int32
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Real.C:Real! [GHC.Int.$fNumInt32
                                    GHC.Int.$fOrdInt32
                                    GHC.Int.$fRealInt32_$ctoRational];

GHC.Int.$fIntegralInt32 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Real.Integral GHC.Int.Int32
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Real.C:Integral! [GHC.Int.$fRealInt32
                                        GHC.Int.$fEnumInt32
                                        GHC.Int.$fIntegralInt32_$cquot
                                        GHC.Int.$fIntegralInt32_$crem
                                        GHC.Int.$fIntegralInt32_$cdiv
                                        GHC.Int.$fIntegralInt32_$cmod
                                        GHC.Int.$fIntegralInt32_$cquotRem
                                        GHC.Int.$fIntegralInt32_$cdivMod
                                        GHC.Int.$fIntegralInt32_$ctoInteger];

GHC.Int.$fIxInt32_$crange
  :: (GHC.Int.Int32, GHC.Int.Int32) -> [GHC.Int.Int32]
[GblId,
 Arity=1,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>,
 Unf=OtherCon []] =
    [] \r [ds_s4lqW]
        case ds_s4lqW of {
          (,) m_s4lqY [Occ=Once] n_s4lqZ [Occ=Once] ->
              GHC.Int.$fEnumInt32_$cenumFromTo m_s4lqY n_s4lqZ;
        };

GHC.Int.$fIxInt32_$cunsafeIndex
  :: (GHC.Int.Int32, GHC.Int.Int32) -> GHC.Int.Int32 -> GHC.Types.Int
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S(S)L),1*U(1*U(U),A)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4lr0 i_s4lr1]
        case ds_s4lr0 of {
          (,) m_s4lr3 [Occ=Once!] _ [Occ=Dead] ->
              case i_s4lr1 of {
                GHC.Int.I32# x#_s4lr6 [Occ=Once] ->
                    case m_s4lr3 of {
                      GHC.Int.I32# x#1_s4lr8 [Occ=Once] ->
                          case -# [x#_s4lr6 x#1_s4lr8] of sat_s4lr9 {
                            __DEFAULT -> GHC.Types.I# [sat_s4lr9];
                          };
                    };
              };
        };

GHC.Int.$fIxInt32_$crangeSize
  :: (GHC.Int.Int32, GHC.Int.Int32) -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>m,
 Unf=OtherCon []] =
    [] \r [b_s4lra]
        case b_s4lra of {
          (,) _l_s4lrc [Occ=Once!] h_s4lrd [Occ=Once!] ->
              case _l_s4lrc of {
                GHC.Int.I32# x_s4lrf ->
                    case h_s4lrd of {
                      GHC.Int.I32# y_s4lrh ->
                          case <=# [x_s4lrf y_s4lrh] of {
                            __DEFAULT -> GHC.Int.$fIxInt1;
                            1# ->
                                case -# [y_s4lrh x_s4lrf] of sat_s4lrj {
                                  __DEFAULT ->
                                      case +# [sat_s4lrj 1#] of sat_s4lrk {
                                        __DEFAULT -> GHC.Types.I# [sat_s4lrk];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fIxInt32_$cunsafeRangeSize
  :: (GHC.Int.Int32, GHC.Int.Int32) -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>m,
 Unf=OtherCon []] =
    [] \r [b_s4lrl]
        case b_s4lrl of {
          (,) _l_s4lrn [Occ=Once!] h_s4lro [Occ=Once!] ->
              case h_s4lro of {
                GHC.Int.I32# x#_s4lrq [Occ=Once] ->
                    case _l_s4lrn of {
                      GHC.Int.I32# x#1_s4lrs [Occ=Once] ->
                          case -# [x#_s4lrq x#1_s4lrs] of sat_s4lrt {
                            __DEFAULT ->
                                case +# [sat_s4lrt 1#] of sat_s4lru {
                                  __DEFAULT -> GHC.Types.I# [sat_s4lru];
                                };
                          };
                    };
              };
        };

GHC.Int.$fIxInt32_$cindex [InlPrag=INLINE (sat-args=2)]
  :: (GHC.Int.Int32, GHC.Int.Int32) -> GHC.Int.Int32 -> GHC.Types.Int
[GblId,
 Arity=2,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s4lrv eta1_s4lrw]
        case eta_s4lrv of {
          (,) m_s4lry [Occ=Once!] n_s4lrz [Occ=Once!] ->
              case m_s4lry of {
                GHC.Int.I32# x_s4lrB ->
                    case eta1_s4lrw of {
                      GHC.Int.I32# y_s4lrD ->
                          case <=# [x_s4lrB y_s4lrD] of {
                            __DEFAULT -> GHC.Arr.hopelessIndexError;
                            1# ->
                                case n_s4lrz of {
                                  GHC.Int.I32# y1_s4lrG [Occ=Once] ->
                                      case <=# [y_s4lrD y1_s4lrG] of {
                                        __DEFAULT -> GHC.Arr.hopelessIndexError;
                                        1# ->
                                            case -# [y_s4lrD x_s4lrB] of sat_s4lrI {
                                              __DEFAULT -> GHC.Types.I# [sat_s4lrI];
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fIxInt32 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Arr.Ix GHC.Int.Int32
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Arr.C:Ix! [GHC.Int.$fOrdInt32
                                 GHC.Int.$fIxInt32_$crange
                                 GHC.Int.$fIxInt32_$cindex
                                 GHC.Int.$fIxInt32_$cunsafeIndex
                                 GHC.Int.$fIxInt32_$cinRange
                                 GHC.Int.$fIxInt32_$crangeSize
                                 GHC.Int.$fIxInt32_$cunsafeRangeSize];

GHC.Int.eqInt64 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4lrJ ds1_s4lrK]
        case ds_s4lrJ of {
          GHC.Int.I64# x_s4lrM [Occ=Once] ->
              case ds1_s4lrK of {
                GHC.Int.I64# y_s4lrO [Occ=Once] ->
                    case ==# [x_s4lrM y_s4lrO] of sat_s4lrP {
                      __DEFAULT -> tagToEnum# [sat_s4lrP];
                    };
              };
        };

GHC.Int.$fEqInt64 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.Int.Int64
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.Int.eqInt64 GHC.Int.neInt64];

GHC.Int.gtInt64 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4lrQ ds1_s4lrR]
        case ds_s4lrQ of {
          GHC.Int.I64# x_s4lrT [Occ=Once] ->
              case ds1_s4lrR of {
                GHC.Int.I64# y_s4lrV [Occ=Once] ->
                    case ># [x_s4lrT y_s4lrV] of sat_s4lrW {
                      __DEFAULT -> tagToEnum# [sat_s4lrW];
                    };
              };
        };

GHC.Int.geInt64 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4lrX ds1_s4lrY]
        case ds_s4lrX of {
          GHC.Int.I64# x_s4ls0 [Occ=Once] ->
              case ds1_s4lrY of {
                GHC.Int.I64# y_s4ls2 [Occ=Once] ->
                    case >=# [x_s4ls0 y_s4ls2] of sat_s4ls3 {
                      __DEFAULT -> tagToEnum# [sat_s4ls3];
                    };
              };
        };

GHC.Int.ltInt64 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4ls4 ds1_s4ls5]
        case ds_s4ls4 of {
          GHC.Int.I64# x_s4ls7 [Occ=Once] ->
              case ds1_s4ls5 of {
                GHC.Int.I64# y_s4ls9 [Occ=Once] ->
                    case <# [x_s4ls7 y_s4ls9] of sat_s4lsa {
                      __DEFAULT -> tagToEnum# [sat_s4lsa];
                    };
              };
        };

GHC.Int.leInt64 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4lsb ds1_s4lsc]
        case ds_s4lsb of {
          GHC.Int.I64# x_s4lse [Occ=Once] ->
              case ds1_s4lsc of {
                GHC.Int.I64# y_s4lsg [Occ=Once] ->
                    case <=# [x_s4lse y_s4lsg] of sat_s4lsh {
                      __DEFAULT -> tagToEnum# [sat_s4lsh];
                    };
              };
        };

GHC.Int.$fOrdInt64_$ccompare
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [x_s4lsi y_s4lsj]
        case x_s4lsi of {
          GHC.Int.I64# x1_s4lsl ->
              case y_s4lsj of {
                GHC.Int.I64# y1_s4lsn ->
                    case ==# [x1_s4lsl y1_s4lsn] of {
                      __DEFAULT ->
                          case <=# [x1_s4lsl y1_s4lsn] of {
                            __DEFAULT -> GHC.Types.GT [];
                            1# -> GHC.Types.LT [];
                          };
                      1# -> GHC.Types.EQ [];
                    };
              };
        };

GHC.Int.$fOrdInt64_$cmax
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> GHC.Int.Int64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s4lsq y_s4lsr]
        case x_s4lsq of wild_s4lss {
          GHC.Int.I64# x1_s4lst [Occ=Once] ->
              case y_s4lsr of wild1_s4lsu {
                GHC.Int.I64# y1_s4lsv [Occ=Once] ->
                    case <=# [x1_s4lst y1_s4lsv] of {
                      __DEFAULT -> wild_s4lss;
                      1# -> wild1_s4lsu;
                    };
              };
        };

GHC.Int.$fOrdInt64_$cmin
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> GHC.Int.Int64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s4lsx y_s4lsy]
        case x_s4lsx of wild_s4lsz {
          GHC.Int.I64# x1_s4lsA [Occ=Once] ->
              case y_s4lsy of wild1_s4lsB {
                GHC.Int.I64# y1_s4lsC [Occ=Once] ->
                    case <=# [x1_s4lsA y1_s4lsC] of {
                      __DEFAULT -> wild1_s4lsB;
                      1# -> wild_s4lsz;
                    };
              };
        };

GHC.Int.$fOrdInt64 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord GHC.Int.Int64
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.Int.$fEqInt64
                                      GHC.Int.$fOrdInt64_$ccompare
                                      GHC.Int.ltInt64
                                      GHC.Int.leInt64
                                      GHC.Int.gtInt64
                                      GHC.Int.geInt64
                                      GHC.Int.$fOrdInt64_$cmax
                                      GHC.Int.$fOrdInt64_$cmin];

GHC.Int.$fIxInt64_$cinRange
  :: (GHC.Int.Int64, GHC.Int.Int64)
     -> GHC.Int.Int64 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S(S)L),1*U(1*U(U),1*U(U))><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4lsE i_s4lsF]
        case ds_s4lsE of {
          (,) m_s4lsH [Occ=Once!] n_s4lsI [Occ=Once!] ->
              case m_s4lsH of {
                GHC.Int.I64# x_s4lsK [Occ=Once] ->
                    case i_s4lsF of {
                      GHC.Int.I64# y_s4lsM ->
                          case <=# [x_s4lsK y_s4lsM] of {
                            __DEFAULT -> GHC.Types.False [];
                            1# ->
                                case n_s4lsI of {
                                  GHC.Int.I64# y1_s4lsP [Occ=Once] ->
                                      case <=# [y_s4lsM y1_s4lsP] of sat_s4lsQ {
                                        __DEFAULT -> tagToEnum# [sat_s4lsQ];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fNumInt5 :: GHC.Int.Int64
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I64#! [1#];

GHC.Int.$fNumInt64_$csignum :: GHC.Int.Int64 -> GHC.Int.Int64
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s4lsR]
        case x_s4lsR of {
          GHC.Int.I64# x1_s4lsT ->
              case ># [x1_s4lsT 0#] of {
                __DEFAULT ->
                    case x1_s4lsT of {
                      __DEFAULT -> GHC.Int.$fNumInt6;
                      0# -> GHC.Int.$fBitsInt10;
                    };
                1# -> GHC.Int.$fNumInt5;
              };
        };

GHC.Int.$fNumInt64_$cabs :: GHC.Int.Int64 -> GHC.Int.Int64
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s4lsW]
        case x_s4lsW of wild_s4lsX {
          GHC.Int.I64# x1_s4lsY ->
              case >=# [x1_s4lsY 0#] of {
                __DEFAULT ->
                    case negateInt# [x1_s4lsY] of sat_s4lt0 {
                      __DEFAULT -> GHC.Int.I64# [sat_s4lt0];
                    };
                1# -> wild_s4lsX;
              };
        };

GHC.Int.$fNumInt64 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Num.Num GHC.Int.Int64
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Num.C:Num! [GHC.Int.$fNumInt64_$c+
                                  GHC.Int.$fNumInt64_$c-
                                  GHC.Int.$fNumInt64_$c*
                                  GHC.Int.$fNumInt64_$cnegate
                                  GHC.Int.$fNumInt64_$cabs
                                  GHC.Int.$fNumInt64_$csignum
                                  GHC.Int.$fNumInt64_$cfromInteger];

GHC.Int.$fBitsInt9 :: GHC.Base.Maybe GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [GHC.Int.$fBitsInt7];

GHC.Int.$fBitsInt64_$cbitSizeMaybe
  :: GHC.Int.Int64 -> GHC.Base.Maybe GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>m2, Unf=OtherCon []] =
    [] \r [i_s4lt1] GHC.Int.$fBitsInt9;

GHC.Int.$fBitsInt64_$cbit [InlPrag=INLINE (sat-args=0)]
  :: GHC.Types.Int -> GHC.Int.Int64
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [i_s4lt2]
        case i_s4lt2 of {
          GHC.Types.I# i#_s4lt4 ->
              case >=# [i#_s4lt4 64#] of {
                __DEFAULT ->
                    case uncheckedIShiftL# [1# i#_s4lt4] of sat_s4lt6 {
                      __DEFAULT -> GHC.Int.I64# [sat_s4lt6];
                    };
                1# -> GHC.Int.$fBitsInt10;
              };
        };

GHC.Int.$fBitsInt64_$ctestBit [InlPrag=INLINE (sat-args=0)]
  :: GHC.Int.Int64 -> GHC.Types.Int -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [x_s4lt7 i_s4lt8]
        case x_s4lt7 of {
          GHC.Int.I64# x#_s4lta [Occ=Once] ->
              case i_s4lt8 of {
                GHC.Types.I# i#_s4ltc ->
                    case >=# [i#_s4ltc 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftL# [1# i#_s4ltc] of sat_s4ltf {
                            __DEFAULT ->
                                case int2Word# [sat_s4ltf] of sat_s4ltg {
                                  __DEFAULT ->
                                      case int2Word# [x#_s4lta] of sat_s4lte {
                                        __DEFAULT ->
                                            case and# [sat_s4lte sat_s4ltg] of sat_s4lth {
                                              __DEFAULT ->
                                                  case word2Int# [sat_s4lth] of {
                                                    __DEFAULT -> GHC.Types.True [];
                                                    0# -> GHC.Types.False [];
                                                  };
                                            };
                                      };
                                };
                          };
                      1# -> GHC.Types.False [];
                    };
              };
        };

GHC.Int.$fBitsInt64_$crotateR [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int64 -> GHC.Types.Int -> GHC.Int.Int64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s4ltj eta1_s4ltk]
        case eta_s4ltj of wild_s4ltl {
          GHC.Int.I64# x#_s4ltm [Occ=Once] ->
              case eta1_s4ltk of {
                GHC.Types.I# x1_s4lto [Occ=Once] ->
                    case negateInt# [x1_s4lto] of sat_s4ltp {
                      __DEFAULT ->
                          case int2Word# [sat_s4ltp] of sat_s4ltq {
                            __DEFAULT ->
                                case and# [sat_s4ltq 63##] of sat_s4ltr {
                                  __DEFAULT ->
                                      case word2Int# [sat_s4ltr] of wild2_s4lts {
                                        __DEFAULT ->
                                            case int2Word# [x#_s4ltm] of x'#_s4ltt [Dmd=<S,U>] {
                                              __DEFAULT ->
                                                  case -# [64# wild2_s4lts] of sat_s4ltv {
                                                    __DEFAULT ->
                                                        case
                                                            uncheckedShiftRL# [x'#_s4ltt sat_s4ltv]
                                                        of
                                                        sat_s4ltw
                                                        { __DEFAULT ->
                                                              case
                                                                  uncheckedShiftL# [x'#_s4ltt
                                                                                    wild2_s4lts]
                                                              of
                                                              sat_s4ltu
                                                              { __DEFAULT ->
                                                                    case
                                                                        or# [sat_s4ltu sat_s4ltw]
                                                                    of
                                                                    sat_s4ltx
                                                                    { __DEFAULT ->
                                                                          case
                                                                              word2Int# [sat_s4ltx]
                                                                          of
                                                                          sat_s4lty
                                                                          { __DEFAULT ->
                                                                                GHC.Int.I64# [sat_s4lty];
                                                                          };
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                        0# -> wild_s4ltl;
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fBitsInt64_$ccomplementBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int64 -> GHC.Types.Int -> GHC.Int.Int64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s4ltz eta1_s4ltA]
        case eta_s4ltz of wild_s4ltB {
          GHC.Int.I64# x#_s4ltC [Occ=Once] ->
              case eta1_s4ltA of {
                GHC.Types.I# i#_s4ltE ->
                    case >=# [i#_s4ltE 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftL# [1# i#_s4ltE] of sat_s4ltH {
                            __DEFAULT ->
                                case int2Word# [sat_s4ltH] of sat_s4ltI {
                                  __DEFAULT ->
                                      case int2Word# [x#_s4ltC] of sat_s4ltG {
                                        __DEFAULT ->
                                            case xor# [sat_s4ltG sat_s4ltI] of sat_s4ltJ {
                                              __DEFAULT ->
                                                  case word2Int# [sat_s4ltJ] of sat_s4ltK {
                                                    __DEFAULT -> GHC.Int.I64# [sat_s4ltK];
                                                  };
                                            };
                                      };
                                };
                          };
                      1# -> wild_s4ltB;
                    };
              };
        };

GHC.Int.$fBitsInt64_$cclearBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int64 -> GHC.Types.Int -> GHC.Int.Int64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s4ltL eta1_s4ltM]
        case eta_s4ltL of {
          GHC.Int.I64# x#_s4ltO [Occ=Once*] ->
              case eta1_s4ltM of {
                GHC.Types.I# i#_s4ltQ ->
                    case >=# [i#_s4ltQ 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftL# [1# i#_s4ltQ] of sat_s4ltT {
                            __DEFAULT ->
                                case int2Word# [sat_s4ltT] of sat_s4ltU {
                                  __DEFAULT ->
                                      case xor# [sat_s4ltU 18446744073709551615##] of sat_s4ltV {
                                        __DEFAULT ->
                                            case int2Word# [x#_s4ltO] of sat_s4ltS {
                                              __DEFAULT ->
                                                  case and# [sat_s4ltS sat_s4ltV] of sat_s4ltW {
                                                    __DEFAULT ->
                                                        case word2Int# [sat_s4ltW] of sat_s4ltX {
                                                          __DEFAULT -> GHC.Int.I64# [sat_s4ltX];
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                      1# ->
                          case int2Word# [x#_s4ltO] of sat_s4ltY {
                            __DEFAULT ->
                                case and# [sat_s4ltY 18446744073709551615##] of sat_s4ltZ {
                                  __DEFAULT ->
                                      case word2Int# [sat_s4ltZ] of sat_s4lu0 {
                                        __DEFAULT -> GHC.Int.I64# [sat_s4lu0];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fBitsInt64_$csetBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int64 -> GHC.Types.Int -> GHC.Int.Int64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s4lu1 eta1_s4lu2]
        case eta_s4lu1 of wild_s4lu3 {
          GHC.Int.I64# x#_s4lu4 [Occ=Once] ->
              case eta1_s4lu2 of {
                GHC.Types.I# i#_s4lu6 ->
                    case >=# [i#_s4lu6 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftL# [1# i#_s4lu6] of sat_s4lu9 {
                            __DEFAULT ->
                                case int2Word# [sat_s4lu9] of sat_s4lua {
                                  __DEFAULT ->
                                      case int2Word# [x#_s4lu4] of sat_s4lu8 {
                                        __DEFAULT ->
                                            case or# [sat_s4lu8 sat_s4lua] of sat_s4lub {
                                              __DEFAULT ->
                                                  case word2Int# [sat_s4lub] of sat_s4luc {
                                                    __DEFAULT -> GHC.Int.I64# [sat_s4luc];
                                                  };
                                            };
                                      };
                                };
                          };
                      1# -> wild_s4lu3;
                    };
              };
        };

GHC.Int.$fBitsInt64_$crotateL [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int64 -> GHC.Types.Int -> GHC.Int.Int64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Int.$fBitsInt64_$crotate eta_B2 eta_B1;

GHC.Int.$fBitsInt64 [InlPrag=NOUSERINLINE CONLIKE]
  :: Data.Bits.Bits GHC.Int.Int64
[GblId[DFunId], Caf=NoCafRefs] =
    CCS_DONT_CARE Data.Bits.C:Bits! [GHC.Int.$fEqInt64
                                     GHC.Int.$fBitsInt64_$c.&.
                                     GHC.Int.$fBitsInt64_$c.|.
                                     GHC.Int.$fBitsInt64_$cxor
                                     GHC.Int.$fBitsInt64_$ccomplement
                                     GHC.Int.$fBitsInt64_$cshift
                                     GHC.Int.$fBitsInt64_$crotate
                                     GHC.Int.$fBitsInt10
                                     GHC.Int.$fBitsInt64_$cbit
                                     GHC.Int.$fBitsInt64_$csetBit
                                     GHC.Int.$fBitsInt64_$cclearBit
                                     GHC.Int.$fBitsInt64_$ccomplementBit
                                     GHC.Int.$fBitsInt64_$ctestBit
                                     GHC.Int.$fBitsInt64_$cbitSizeMaybe
                                     GHC.Int.$fBitsInt64_$cfiniteBitSize
                                     GHC.Int.$fBitsInt64_$cisSigned
                                     GHC.Int.$fBitsInt64_$cshiftL
                                     GHC.Int.$fBitsInt64_$cunsafeShiftL
                                     GHC.Int.$fBitsInt64_$cshiftR
                                     GHC.Int.$fBitsInt64_$cunsafeShiftR
                                     GHC.Int.$fBitsInt64_$crotateL
                                     GHC.Int.$fBitsInt64_$crotateR
                                     GHC.Int.$fBitsInt64_$cpopCount];

GHC.Int.$fFiniteBitsInt64 [InlPrag=NOUSERINLINE CONLIKE]
  :: Data.Bits.FiniteBits GHC.Int.Int64
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE Data.Bits.C:FiniteBits! [GHC.Int.$fBitsInt64
                                           GHC.Int.$fBitsInt64_$cfiniteBitSize
                                           GHC.Int.$fFiniteBitsInt64_$ccountLeadingZeros
                                           GHC.Int.$fFiniteBitsInt64_$ccountTrailingZeros];

GHC.Int.$fReadInt64_go [Occ=LoopBreaker]
  :: [(GHC.Types.Int, GHC.Base.String)]
     -> [(GHC.Int.Int64, GHC.Base.String)]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s4lud]
        case ds_s4lud of {
          [] -> [] [];
          : y_s4luf [Occ=Once!] ys_s4lug [Occ=Once] ->
              case y_s4luf of {
                (,) x_s4lui [Occ=Once!] r_s4luj [Occ=Once] ->
                    let {
                      sat_s4luo [Occ=Once] :: [(GHC.Int.Int64, GHC.Base.String)]
                      [LclId] =
                          [ys_s4lug] \u [] GHC.Int.$fReadInt64_go ys_s4lug; } in
                    let {
                      sat_s4lum [Occ=Once] :: GHC.Int.Int64
                      [LclId] =
                          [x_s4lui] \u []
                              case x_s4lui of {
                                GHC.Types.I# x#_s4lul [Occ=Once] -> GHC.Int.I64# [x#_s4lul];
                              }; } in
                    let {
                      sat_s4lun [Occ=Once] :: (GHC.Int.Int64, GHC.Base.String)
                      [LclId] =
                          CCCS (,)! [sat_s4lum r_s4luj];
                    } in  : [sat_s4lun sat_s4luo];
              };
        };

GHC.Int.$fReadInt64_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS GHC.Int.Int64
[GblId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [p_s4lup s_s4luq]
        case
            GHC.Read.$fReadInt_$sreadNumber
                GHC.Read.$fReadInt2
                p_s4lup
                Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
        of
        sat_s4lur
        { __DEFAULT ->
              case
                  Text.ParserCombinators.ReadP.run sat_s4lur s_s4luq
              of
              sat_s4lus
              { __DEFAULT -> GHC.Int.$fReadInt64_go sat_s4lus;
              };
        };

GHC.Int.$fReadInt10
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Int.Int64 -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,U><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [n_s4lut eta_s4luu]
        let {
          sat_s4luv [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS GHC.Int.Int64
          [LclId] =
              [n_s4lut] \r [eta_B1]
                  GHC.Int.$fReadInt64_$creadsPrec n_s4lut eta_B1;
        } in 
          case
              Text.ParserCombinators.ReadP.$wreadS_to_P sat_s4luv eta_s4luu
          of
          { Unit# ww1_s4lux [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s4lux];
          };

GHC.Int.$fReadInt9
  :: Text.ParserCombinators.ReadP.P [GHC.Int.Int64]
[GblId] =
    [] \u []
        GHC.Read.list
            GHC.Int.$fReadInt10
            GHC.Int.$fIxInt1
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Int.$fReadInt64_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.Int.Int64]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Int.$fReadInt9 eta_B1;

GHC.Int.$fReadInt7
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        ([GHC.Int.Int64] -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,A><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [n_s4luy w1_s4luz]
        case
            Text.ParserCombinators.ReadP.$wreadS_to_P
                GHC.Int.$fReadInt64_$creadList w1_s4luz
        of
        { Unit# ww1_s4luB [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s4luB];
        };

GHC.Int.$fReadInt64 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.Int.Int64
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Int.$fReadInt64_$creadsPrec
                                    GHC.Int.$fReadInt64_$creadList
                                    GHC.Int.$fReadInt10
                                    GHC.Int.$fReadInt7];

GHC.Int.$fIntegralInt64_$cquot [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> GHC.Int.Int64
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4luC w1_s4luD]
        case w_s4luC of {
          GHC.Int.I64# ww1_s4luF [Occ=Once*] ->
              case w1_s4luD of {
                GHC.Int.I64# ww3_s4luH [Occ=Once!] ->
                    case ww3_s4luH of wild_s4luI {
                      __DEFAULT ->
                          case quotInt# [ww1_s4luF wild_s4luI] of ww4_s4luJ {
                            __DEFAULT -> GHC.Int.I64# [ww4_s4luJ];
                          };
                      -1# ->
                          case ww1_s4luF of wild1_s4luK {
                            __DEFAULT ->
                                case quotInt# [wild1_s4luK -1#] of sat_s4luL {
                                  __DEFAULT -> GHC.Int.I64# [sat_s4luL];
                                };
                            -9223372036854775808# -> GHC.Real.overflowError;
                          };
                      0# -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Int.$fIntegralInt64_$crem
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> GHC.Int.Int64
[GblId, Arity=2, Str=<S,1*U(U)><S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [ds_s4luO y_s4luP]
        case ds_s4luO of {
          GHC.Int.I64# x#_s4luR [Occ=Once] ->
              case y_s4luP of {
                GHC.Int.I64# y#_s4luT [Occ=Once!] ->
                    case y#_s4luT of wild2_s4luU {
                      __DEFAULT ->
                          case remInt# [x#_s4luR wild2_s4luU] of wild3_s4luV {
                            __DEFAULT -> GHC.Int.I64# [wild3_s4luV];
                          };
                      -1# -> GHC.Int.$fBitsInt10;
                      0# -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Int.$w$cdiv2 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Str=<S,U><S,1*U>, Unf=OtherCon []] =
    [] \r [ww_s4luW ww1_s4luX]
        case ww1_s4luX of wild_s4luY {
          __DEFAULT -> GHC.Classes.divInt# ww_s4luW wild_s4luY;
          -1# ->
              case ww_s4luW of wild1_s4luZ {
                __DEFAULT -> GHC.Classes.divInt# wild1_s4luZ -1#;
                -9223372036854775808# -> GHC.Real.overflowError;
              };
          0# -> GHC.Real.divZeroError;
        };

GHC.Int.$fIntegralInt64_$cdiv [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> GHC.Int.Int64
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4lv2 w1_s4lv3]
        case w_s4lv2 of {
          GHC.Int.I64# ww1_s4lv5 [Occ=Once] ->
              case w1_s4lv3 of {
                GHC.Int.I64# ww3_s4lv7 [Occ=Once] ->
                    case GHC.Int.$w$cdiv2 ww1_s4lv5 ww3_s4lv7 of ww4_s4lv8 {
                      __DEFAULT -> GHC.Int.I64# [ww4_s4lv8];
                    };
              };
        };

GHC.Int.$fIntegralInt64_$cmod [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> GHC.Int.Int64
[GblId, Arity=2, Str=<S,1*U(U)><S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [w_s4lv9 w1_s4lva]
        case w_s4lv9 of {
          GHC.Int.I64# ww1_s4lvc [Occ=Once] ->
              case w1_s4lva of {
                GHC.Int.I64# ww3_s4lve [Occ=Once!] ->
                    case ww3_s4lve of wild_s4lvf {
                      __DEFAULT ->
                          case GHC.Classes.modInt# ww1_s4lvc wild_s4lvf of ww4_s4lvg {
                            __DEFAULT -> GHC.Int.I64# [ww4_s4lvg];
                          };
                      -1# -> GHC.Int.$fBitsInt10;
                      0# -> GHC.Real.divZeroError;
                    };
              };
        };

lvl9_r4kPA :: (GHC.Int.Int64, GHC.Int.Int64)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Real.overflowError GHC.Int.$fBitsInt10];

GHC.Int.$fIntegralInt64_$cquotRem [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> (GHC.Int.Int64, GHC.Int.Int64)
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4lvi w1_s4lvj]
        case w_s4lvi of {
          GHC.Int.I64# ww1_s4lvl [Occ=Once*] ->
              case w1_s4lvj of {
                GHC.Int.I64# ww3_s4lvn [Occ=Once!] ->
                    case ww3_s4lvn of wild_s4lvo {
                      __DEFAULT ->
                          case quotRemInt# [ww1_s4lvl wild_s4lvo] of {
                            (#,#) ipv_s4lvq [Occ=Once] ipv1_s4lvr [Occ=Once] ->
                                let {
                                  sat_s4lvt [Occ=Once] :: GHC.Int.Int64
                                  [LclId] =
                                      CCCS GHC.Int.I64#! [ipv1_s4lvr]; } in
                                let {
                                  sat_s4lvs [Occ=Once] :: GHC.Int.Int64
                                  [LclId] =
                                      CCCS GHC.Int.I64#! [ipv_s4lvq];
                                } in  (,) [sat_s4lvs sat_s4lvt];
                          };
                      -1# ->
                          case ww1_s4lvl of wild1_s4lvu {
                            __DEFAULT ->
                                case quotRemInt# [wild1_s4lvu -1#] of {
                                  (#,#) ipv_s4lvw [Occ=Once] ipv1_s4lvx [Occ=Once] ->
                                      let {
                                        sat_s4lvz [Occ=Once] :: GHC.Int.Int64
                                        [LclId] =
                                            CCCS GHC.Int.I64#! [ipv1_s4lvx]; } in
                                      let {
                                        sat_s4lvy [Occ=Once] :: GHC.Int.Int64
                                        [LclId] =
                                            CCCS GHC.Int.I64#! [ipv_s4lvw];
                                      } in  (,) [sat_s4lvy sat_s4lvz];
                                };
                            -9223372036854775808# -> lvl9_r4kPA;
                          };
                      0# -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Int.$w$cdivMod2 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int#
     -> GHC.Prim.Int# -> (# GHC.Int.Int64, GHC.Int.Int64 #)
[GblId, Arity=2, Str=<S,U><S,1*U>, Unf=OtherCon []] =
    [] \r [ww_s4lvB ww1_s4lvC]
        case ww1_s4lvC of wild_s4lvD {
          __DEFAULT ->
              let-no-escape {
                $j_s4lvE [Occ=Once*T[0], Dmd=<L,1*U(U,U)>]
                  :: (# GHC.Int.Int64, GHC.Int.Int64 #)
                [LclId[JoinId(0)], Unf=OtherCon []] =
                    [ww_s4lvB wild_s4lvD] \r []
                        case ># [ww_s4lvB 0#] of {
                          __DEFAULT ->
                              case <# [ww_s4lvB 0#] of {
                                __DEFAULT ->
                                    case quotRemInt# [ww_s4lvB wild_s4lvD] of {
                                      (#,#) ipv_s4lvI [Occ=Once] ipv1_s4lvJ [Occ=Once] ->
                                          let {
                                            sat_s4lvL [Occ=Once] :: GHC.Int.Int64
                                            [LclId] =
                                                CCCS GHC.Int.I64#! [ipv1_s4lvJ]; } in
                                          let {
                                            sat_s4lvK [Occ=Once] :: GHC.Int.Int64
                                            [LclId] =
                                                CCCS GHC.Int.I64#! [ipv_s4lvI];
                                          } in  (#,#) [sat_s4lvK sat_s4lvL];
                                    };
                                1# ->
                                    case ># [wild_s4lvD 0#] of {
                                      __DEFAULT ->
                                          case quotRemInt# [ww_s4lvB wild_s4lvD] of {
                                            (#,#) ipv_s4lvO [Occ=Once] ipv1_s4lvP [Occ=Once] ->
                                                let {
                                                  sat_s4lvR [Occ=Once] :: GHC.Int.Int64
                                                  [LclId] =
                                                      CCCS GHC.Int.I64#! [ipv1_s4lvP]; } in
                                                let {
                                                  sat_s4lvQ [Occ=Once] :: GHC.Int.Int64
                                                  [LclId] =
                                                      CCCS GHC.Int.I64#! [ipv_s4lvO];
                                                } in  (#,#) [sat_s4lvQ sat_s4lvR];
                                          };
                                      1# ->
                                          case +# [ww_s4lvB 1#] of sat_s4lvS {
                                            __DEFAULT ->
                                                case quotRemInt# [sat_s4lvS wild_s4lvD] of {
                                                  (#,#) ipv_s4lvU [Occ=Once]
                                                        ipv1_s4lvV [Occ=Once] ->
                                                      case +# [ipv1_s4lvV wild_s4lvD] of sat_s4lvY {
                                                        __DEFAULT ->
                                                            case -# [sat_s4lvY 1#] of sat_s4lvZ {
                                                              __DEFAULT ->
                                                                  let {
                                                                    sat_s4lw0 [Occ=Once]
                                                                      :: GHC.Int.Int64
                                                                    [LclId] =
                                                                        CCCS GHC.Int.I64#! [sat_s4lvZ];
                                                                  } in 
                                                                    case
                                                                        -# [ipv_s4lvU 1#]
                                                                    of
                                                                    sat_s4lvW
                                                                    { __DEFAULT ->
                                                                          let {
                                                                            sat_s4lvX [Occ=Once]
                                                                              :: GHC.Int.Int64
                                                                            [LclId] =
                                                                                CCCS GHC.Int.I64#! [sat_s4lvW];
                                                                          } in 
                                                                            (#,#) [sat_s4lvX
                                                                                   sat_s4lw0];
                                                                    };
                                                            };
                                                      };
                                                };
                                          };
                                    };
                              };
                          1# ->
                              case <# [wild_s4lvD 0#] of {
                                __DEFAULT ->
                                    case <# [ww_s4lvB 0#] of {
                                      __DEFAULT ->
                                          case quotRemInt# [ww_s4lvB wild_s4lvD] of {
                                            (#,#) ipv_s4lw4 [Occ=Once] ipv1_s4lw5 [Occ=Once] ->
                                                let {
                                                  sat_s4lw7 [Occ=Once] :: GHC.Int.Int64
                                                  [LclId] =
                                                      CCCS GHC.Int.I64#! [ipv1_s4lw5]; } in
                                                let {
                                                  sat_s4lw6 [Occ=Once] :: GHC.Int.Int64
                                                  [LclId] =
                                                      CCCS GHC.Int.I64#! [ipv_s4lw4];
                                                } in  (#,#) [sat_s4lw6 sat_s4lw7];
                                          };
                                      1# ->
                                          case ># [wild_s4lvD 0#] of {
                                            __DEFAULT ->
                                                case quotRemInt# [ww_s4lvB wild_s4lvD] of {
                                                  (#,#) ipv_s4lwa [Occ=Once]
                                                        ipv1_s4lwb [Occ=Once] ->
                                                      let {
                                                        sat_s4lwd [Occ=Once] :: GHC.Int.Int64
                                                        [LclId] =
                                                            CCCS GHC.Int.I64#! [ipv1_s4lwb]; } in
                                                      let {
                                                        sat_s4lwc [Occ=Once] :: GHC.Int.Int64
                                                        [LclId] =
                                                            CCCS GHC.Int.I64#! [ipv_s4lwa];
                                                      } in  (#,#) [sat_s4lwc sat_s4lwd];
                                                };
                                            1# ->
                                                case +# [ww_s4lvB 1#] of sat_s4lwe {
                                                  __DEFAULT ->
                                                      case quotRemInt# [sat_s4lwe wild_s4lvD] of {
                                                        (#,#) ipv_s4lwg [Occ=Once]
                                                              ipv1_s4lwh [Occ=Once] ->
                                                            case
                                                                +# [ipv1_s4lwh wild_s4lvD]
                                                            of
                                                            sat_s4lwk
                                                            { __DEFAULT ->
                                                                  case
                                                                      -# [sat_s4lwk 1#]
                                                                  of
                                                                  sat_s4lwl
                                                                  { __DEFAULT ->
                                                                        let {
                                                                          sat_s4lwm [Occ=Once]
                                                                            :: GHC.Int.Int64
                                                                          [LclId] =
                                                                              CCCS GHC.Int.I64#! [sat_s4lwl];
                                                                        } in 
                                                                          case
                                                                              -# [ipv_s4lwg 1#]
                                                                          of
                                                                          sat_s4lwi
                                                                          { __DEFAULT ->
                                                                                let {
                                                                                  sat_s4lwj [Occ=Once]
                                                                                    :: GHC.Int.Int64
                                                                                  [LclId] =
                                                                                      CCCS GHC.Int.I64#! [sat_s4lwi];
                                                                                } in 
                                                                                  (#,#) [sat_s4lwj
                                                                                         sat_s4lwm];
                                                                          };
                                                                  };
                                                            };
                                                      };
                                                };
                                          };
                                    };
                                1# ->
                                    case -# [ww_s4lvB 1#] of sat_s4lwn {
                                      __DEFAULT ->
                                          case quotRemInt# [sat_s4lwn wild_s4lvD] of {
                                            (#,#) ipv_s4lwp [Occ=Once] ipv1_s4lwq [Occ=Once] ->
                                                case +# [ipv1_s4lwq wild_s4lvD] of sat_s4lwt {
                                                  __DEFAULT ->
                                                      case +# [sat_s4lwt 1#] of sat_s4lwu {
                                                        __DEFAULT ->
                                                            let {
                                                              sat_s4lwv [Occ=Once] :: GHC.Int.Int64
                                                              [LclId] =
                                                                  CCCS GHC.Int.I64#! [sat_s4lwu];
                                                            } in 
                                                              case -# [ipv_s4lwp 1#] of sat_s4lwr {
                                                                __DEFAULT ->
                                                                    let {
                                                                      sat_s4lws [Occ=Once]
                                                                        :: GHC.Int.Int64
                                                                      [LclId] =
                                                                          CCCS GHC.Int.I64#! [sat_s4lwr];
                                                                    } in 
                                                                      (#,#) [sat_s4lws sat_s4lwv];
                                                              };
                                                      };
                                                };
                                          };
                                    };
                              };
                        };
              } in 
                case wild_s4lvD of {
                  __DEFAULT -> $j_s4lvE;
                  -1# ->
                      case ww_s4lvB of {
                        __DEFAULT -> $j_s4lvE;
                        -9223372036854775808# ->
                            (#,#) [GHC.Real.overflowError GHC.Int.$fBitsInt10];
                      };
                };
          0# -> GHC.Real.divZeroError;
        };

GHC.Int.$fIntegralInt64_$cdivMod [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> (GHC.Int.Int64, GHC.Int.Int64)
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4lwz w1_s4lwA]
        case w_s4lwz of {
          GHC.Int.I64# ww1_s4lwC [Occ=Once] ->
              case w1_s4lwA of {
                GHC.Int.I64# ww3_s4lwE [Occ=Once] ->
                    case GHC.Int.$w$cdivMod2 ww1_s4lwC ww3_s4lwE of {
                      (#,#) ww5_s4lwG [Occ=Once] ww6_s4lwH [Occ=Once] ->
                          (,) [ww5_s4lwG ww6_s4lwH];
                    };
              };
        };

GHC.Int.$fIxInt64_$crange
  :: (GHC.Int.Int64, GHC.Int.Int64) -> [GHC.Int.Int64]
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>,
 Unf=OtherCon []] =
    [] \r [ds_s4lwI]
        case ds_s4lwI of {
          (,) m_s4lwK [Occ=Once] n_s4lwL [Occ=Once] ->
              GHC.Int.$fEnumInt64_$cenumFromTo m_s4lwK n_s4lwL;
        };

GHC.Int.$fRealInt64_$ctoRational [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int64 -> GHC.Real.Rational
[GblId, Arity=1, Str=<S(S),1*U(U)>m, Unf=OtherCon []] =
    [] \r [w_s4lwM]
        case w_s4lwM of {
          GHC.Int.I64# ww1_s4lwO [Occ=Once] ->
              case GHC.Integer.Type.smallInteger ww1_s4lwO of sat_s4lwP {
                __DEFAULT ->
                    case
                        GHC.Integer.Type.timesInteger sat_s4lwP GHC.Int.$fRealInt1
                    of
                    sat_s4lwQ
                    { __DEFAULT ->
                          case GHC.Real.$w$sreduce sat_s4lwQ GHC.Int.$fRealInt1 of {
                            (#,#) ww3_s4lwS [Occ=Once] ww4_s4lwT [Occ=Once] ->
                                GHC.Real.:% [ww3_s4lwS ww4_s4lwT];
                          };
                    };
              };
        };

GHC.Int.$fRealInt64 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Real.Real GHC.Int.Int64
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Real.C:Real! [GHC.Int.$fNumInt64
                                    GHC.Int.$fOrdInt64
                                    GHC.Int.$fRealInt64_$ctoRational];

GHC.Int.$fIntegralInt64 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Real.Integral GHC.Int.Int64
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Real.C:Integral! [GHC.Int.$fRealInt64
                                        GHC.Int.$fEnumInt64
                                        GHC.Int.$fIntegralInt64_$cquot
                                        GHC.Int.$fIntegralInt64_$crem
                                        GHC.Int.$fIntegralInt64_$cdiv
                                        GHC.Int.$fIntegralInt64_$cmod
                                        GHC.Int.$fIntegralInt64_$cquotRem
                                        GHC.Int.$fIntegralInt64_$cdivMod
                                        GHC.Int.$fIntegralInt64_$ctoInteger];

GHC.Int.$fIxInt64_$cunsafeIndex
  :: (GHC.Int.Int64, GHC.Int.Int64) -> GHC.Int.Int64 -> GHC.Types.Int
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S(S)L),1*U(1*U(U),A)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4lwU i_s4lwV]
        case ds_s4lwU of {
          (,) m_s4lwX [Occ=Once!] _ [Occ=Dead] ->
              case i_s4lwV of {
                GHC.Int.I64# x#_s4lx0 [Occ=Once] ->
                    case m_s4lwX of {
                      GHC.Int.I64# x#1_s4lx2 [Occ=Once] ->
                          case -# [x#_s4lx0 x#1_s4lx2] of sat_s4lx3 {
                            __DEFAULT -> GHC.Types.I# [sat_s4lx3];
                          };
                    };
              };
        };

GHC.Int.$fIxInt64_$crangeSize
  :: (GHC.Int.Int64, GHC.Int.Int64) -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>m,
 Unf=OtherCon []] =
    [] \r [b_s4lx4]
        case b_s4lx4 of {
          (,) _l_s4lx6 [Occ=Once!] h_s4lx7 [Occ=Once!] ->
              case _l_s4lx6 of {
                GHC.Int.I64# x_s4lx9 ->
                    case h_s4lx7 of {
                      GHC.Int.I64# y_s4lxb ->
                          case <=# [x_s4lx9 y_s4lxb] of {
                            __DEFAULT -> GHC.Int.$fIxInt1;
                            1# ->
                                case -# [y_s4lxb x_s4lx9] of sat_s4lxd {
                                  __DEFAULT ->
                                      case +# [sat_s4lxd 1#] of sat_s4lxe {
                                        __DEFAULT -> GHC.Types.I# [sat_s4lxe];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fIxInt64_$cunsafeRangeSize
  :: (GHC.Int.Int64, GHC.Int.Int64) -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>m,
 Unf=OtherCon []] =
    [] \r [b_s4lxf]
        case b_s4lxf of {
          (,) _l_s4lxh [Occ=Once!] h_s4lxi [Occ=Once!] ->
              case h_s4lxi of {
                GHC.Int.I64# x#_s4lxk [Occ=Once] ->
                    case _l_s4lxh of {
                      GHC.Int.I64# x#1_s4lxm [Occ=Once] ->
                          case -# [x#_s4lxk x#1_s4lxm] of sat_s4lxn {
                            __DEFAULT ->
                                case +# [sat_s4lxn 1#] of sat_s4lxo {
                                  __DEFAULT -> GHC.Types.I# [sat_s4lxo];
                                };
                          };
                    };
              };
        };

GHC.Int.$fIxInt64_$cindex [InlPrag=INLINE (sat-args=2)]
  :: (GHC.Int.Int64, GHC.Int.Int64) -> GHC.Int.Int64 -> GHC.Types.Int
[GblId,
 Arity=2,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s4lxp eta1_s4lxq]
        case eta_s4lxp of {
          (,) m_s4lxs [Occ=Once!] n_s4lxt [Occ=Once!] ->
              case m_s4lxs of {
                GHC.Int.I64# x_s4lxv ->
                    case eta1_s4lxq of {
                      GHC.Int.I64# y_s4lxx ->
                          case <=# [x_s4lxv y_s4lxx] of {
                            __DEFAULT -> GHC.Arr.hopelessIndexError;
                            1# ->
                                case n_s4lxt of {
                                  GHC.Int.I64# y1_s4lxA [Occ=Once] ->
                                      case <=# [y_s4lxx y1_s4lxA] of {
                                        __DEFAULT -> GHC.Arr.hopelessIndexError;
                                        1# ->
                                            case -# [y_s4lxx x_s4lxv] of sat_s4lxC {
                                              __DEFAULT -> GHC.Types.I# [sat_s4lxC];
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fIxInt64 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Arr.Ix GHC.Int.Int64
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Arr.C:Ix! [GHC.Int.$fOrdInt64
                                 GHC.Int.$fIxInt64_$crange
                                 GHC.Int.$fIxInt64_$cindex
                                 GHC.Int.$fIxInt64_$cunsafeIndex
                                 GHC.Int.$fIxInt64_$cinRange
                                 GHC.Int.$fIxInt64_$crangeSize
                                 GHC.Int.$fIxInt64_$cunsafeRangeSize];

GHC.Int.$fShowInt64_$cshowsPrec
  :: GHC.Types.Int -> GHC.Int.Int64 -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [p_s4lxD x_s4lxE eta_s4lxF]
        case x_s4lxE of {
          GHC.Int.I64# x#_s4lxH [Occ=Once] ->
              case p_s4lxD of {
                GHC.Types.I# ww1_s4lxJ [Occ=Once] ->
                    case GHC.Show.$wshowSignedInt ww1_s4lxJ x#_s4lxH eta_s4lxF of {
                      (#,#) ww5_s4lxL [Occ=Once] ww6_s4lxM [Occ=Once] ->
                          : [ww5_s4lxL ww6_s4lxM];
                    };
              };
        };

GHC.Int.$fShowInt64_$cshow :: GHC.Int.Int64 -> GHC.Base.String
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m2,
 Unf=OtherCon []] =
    [] \r [x_s4lxN]
        case x_s4lxN of {
          GHC.Int.I64# x#_s4lxP [Occ=Once] ->
              case GHC.Show.$wshowSignedInt 0# x#_s4lxP GHC.Types.[] of {
                (#,#) ww5_s4lxR [Occ=Once] ww6_s4lxS [Occ=Once] ->
                    : [ww5_s4lxR ww6_s4lxS];
              };
        };

GHC.Int.$fShowInt3
  :: GHC.Int.Int64 -> GHC.Base.String -> GHC.Base.String
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [x_s4lxT eta_s4lxU]
        case x_s4lxT of {
          GHC.Int.I64# x#_s4lxW [Occ=Once] ->
              case GHC.Show.$wshowSignedInt 0# x#_s4lxW eta_s4lxU of {
                (#,#) ww5_s4lxY [Occ=Once] ww6_s4lxZ [Occ=Once] ->
                    : [ww5_s4lxY ww6_s4lxZ];
              };
        };

GHC.Int.$fShowInt64_$cshowList :: [GHC.Int.Int64] -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ls_s4ly0 s_s4ly1]
        GHC.Show.showList__ GHC.Int.$fShowInt3 ls_s4ly0 s_s4ly1;

GHC.Int.$fShowInt64 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Int.Int64
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Int.$fShowInt64_$cshowsPrec
                                    GHC.Int.$fShowInt64_$cshow
                                    GHC.Int.$fShowInt64_$cshowList];

GHC.Int.uncheckedIShiftL64#
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] uncheckedIShiftL# [eta_B2 eta_B1];

GHC.Int.uncheckedIShiftRA64#
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] uncheckedIShiftRA# [eta_B2 eta_B1];

GHC.Int.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.Int.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Int.$trModule4];

GHC.Int.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.Int"#;

GHC.Int.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Int.$trModule2];

GHC.Int.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.Int.$trModule3
                                     GHC.Int.$trModule1];

$krep_r4kPB :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcInt#
                                              GHC.Types.[]];

GHC.Int.$tcInt7 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Int.$tcInt9];

GHC.Int.$tcInt8 :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [1422706860619545536##
                                    2126344328513082648##
                                    GHC.Int.$trModule
                                    GHC.Int.$tcInt7
                                    0#
                                    GHC.Types.krep$*];

$krep1_r4kPC :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Int.$tcInt8
                                              GHC.Types.[]];

GHC.Int.$tc'I8#1 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_r4kPB $krep1_r4kPC];

GHC.Int.$tc'I8#3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'I8#"#;

GHC.Int.$tc'I8#2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Int.$tc'I8#3];

GHC.Int.$tc'I8# :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [5349338056284818619##
                                    13298037281129101406##
                                    GHC.Int.$trModule
                                    GHC.Int.$tc'I8#2
                                    0#
                                    GHC.Int.$tc'I8#1];

GHC.Int.$tcInt1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Int.$tcInt2];

GHC.Int.$tcInt16 :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [16329117591681623238##
                                    13363230803330610095##
                                    GHC.Int.$trModule
                                    GHC.Int.$tcInt1
                                    0#
                                    GHC.Types.krep$*];

$krep2_r4kPD :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Int.$tcInt16
                                              GHC.Types.[]];

GHC.Int.$tc'I16#1 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_r4kPB $krep2_r4kPD];

GHC.Int.$tc'I16#3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'I16#"#;

GHC.Int.$tc'I16#2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Int.$tc'I16#3];

GHC.Int.$tc'I16# :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [1077432500071562197##
                                    13676251251348512601##
                                    GHC.Int.$trModule
                                    GHC.Int.$tc'I16#2
                                    0#
                                    GHC.Int.$tc'I16#1];

GHC.Int.$tcInt3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Int.$tcInt4];

GHC.Int.$tcInt32 :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [5115671124548181797##
                                    6203735229629729265##
                                    GHC.Int.$trModule
                                    GHC.Int.$tcInt3
                                    0#
                                    GHC.Types.krep$*];

$krep3_r4kPE :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Int.$tcInt32
                                              GHC.Types.[]];

GHC.Int.$tc'I32#1 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_r4kPB $krep3_r4kPE];

GHC.Int.$tc'I32#3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'I32#"#;

GHC.Int.$tc'I32#2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Int.$tc'I32#3];

GHC.Int.$tc'I32# :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [14037617528454219662##
                                    2752255350980319305##
                                    GHC.Int.$trModule
                                    GHC.Int.$tc'I32#2
                                    0#
                                    GHC.Int.$tc'I32#1];

GHC.Int.$tcInt5 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Int.$tcInt6];

GHC.Int.$tcInt64 :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [15049343324344240059##
                                    14445320765379163718##
                                    GHC.Int.$trModule
                                    GHC.Int.$tcInt5
                                    0#
                                    GHC.Types.krep$*];

$krep4_r4kPF :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Int.$tcInt64
                                              GHC.Types.[]];

GHC.Int.$tc'I64#1 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_r4kPB $krep4_r4kPF];

GHC.Int.$tc'I64#3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'I64#"#;

GHC.Int.$tc'I64#2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Int.$tc'I64#3];

GHC.Int.$tc'I64# :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [7755385358338959724##
                                    8520529638322167079##
                                    GHC.Int.$trModule
                                    GHC.Int.$tc'I64#2
                                    0#
                                    GHC.Int.$tc'I64#1];

GHC.Int.I8# :: GHC.Prim.Int# -> GHC.Int.Int8
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Int.I8# [eta_B1];

GHC.Int.I16# :: GHC.Prim.Int# -> GHC.Int.Int16
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Int.I16# [eta_B1];

GHC.Int.I32# :: GHC.Prim.Int# -> GHC.Int.Int32
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Int.I32# [eta_B1];

GHC.Int.I64# :: GHC.Prim.Int# -> GHC.Int.Int64
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Int.I64# [eta_B1];


==================== Pre unarise: ====================
2018-03-16 15:59:23.530752445 UTC

GHC.Int.$fEnumInt8_$cfromEnum :: GHC.Int.Int8 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vv4]
        case ds_s4vv4 of {
          GHC.Int.I8# x#_s4vv6 [Occ=Once] -> GHC.Types.I# [x#_s4vv6];
        };

GHC.Int.$fEnumInt16_$cfromEnum :: GHC.Int.Int16 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vv7]
        case ds_s4vv7 of {
          GHC.Int.I16# x#_s4vv9 [Occ=Once] -> GHC.Types.I# [x#_s4vv9];
        };

GHC.Int.$fEnumInt32_$cfromEnum :: GHC.Int.Int32 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vva]
        case ds_s4vva of {
          GHC.Int.I32# x#_s4vvc [Occ=Once] -> GHC.Types.I# [x#_s4vvc];
        };

GHC.Int.$fEnumInt64_$cfromEnum :: GHC.Int.Int64 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vvd]
        case ds_s4vvd of {
          GHC.Int.I64# x#_s4vvf [Occ=Once] -> GHC.Types.I# [x#_s4vvf];
        };

GHC.Int.$fEnumInt64_$ctoEnum :: GHC.Types.Int -> GHC.Int.Int64
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vvg]
        case ds_s4vvg of {
          GHC.Types.I# i#_s4vvi [Occ=Once] -> GHC.Int.I64# [i#_s4vvi];
        };

GHC.Int.$w$cenumFromThenTo2 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int#
     -> GHC.Prim.Int# -> GHC.Prim.Int# -> [GHC.Int.Int64]
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S,U><S,U><S,U>,
 Unf=OtherCon []] =
    [] \r [ww_s4vvj ww1_s4vvk ww2_s4vvl]
        case >=# [ww1_s4vvk ww_s4vvj] of {
          __DEFAULT ->
              case ># [ww2_s4vvl ww1_s4vvk] of {
                __DEFAULT ->
                    let {
                      sat_s4vvy [Occ=Once] :: [GHC.Int.Int64]
                      [LclId] =
                          [ww_s4vvj ww1_s4vvk ww2_s4vvl] \u []
                              case -# [ww1_s4vvk ww_s4vvj] of delta_s4vvp [Dmd=<S,U>] {
                                __DEFAULT ->
                                    case -# [ww2_s4vvl delta_s4vvp] of y'_s4vvq [Dmd=<S,U>] {
                                      __DEFAULT ->
                                          let {
                                            go_dn_s4vvr [Occ=LoopBreaker]
                                              :: GHC.Prim.Int# -> [GHC.Int.Int64]
                                            [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                                sat-only [delta_s4vvp
                                                          y'_s4vvq
                                                          go_dn_s4vvr] \r [x_s4vvs]
                                                    case <# [x_s4vvs y'_s4vvq] of {
                                                      __DEFAULT ->
                                                          let {
                                                            sat_s4vvw [Occ=Once] :: [GHC.Int.Int64]
                                                            [LclId] =
                                                                [delta_s4vvp
                                                                 go_dn_s4vvr
                                                                 x_s4vvs] \u []
                                                                    case
                                                                        +# [x_s4vvs delta_s4vvp]
                                                                    of
                                                                    sat_s4vvv
                                                                    { __DEFAULT ->
                                                                          go_dn_s4vvr sat_s4vvv;
                                                                    }; } in
                                                          let {
                                                            sat_s4vvu [Occ=Once] :: GHC.Int.Int64
                                                            [LclId] =
                                                                CCCS GHC.Int.I64#! [x_s4vvs];
                                                          } in  : [sat_s4vvu sat_s4vvw];
                                                      1# ->
                                                          let {
                                                            sat_s4vvx [Occ=Once] :: GHC.Int.Int64
                                                            [LclId] =
                                                                CCCS GHC.Int.I64#! [x_s4vvs];
                                                          } in  : [sat_s4vvx GHC.Types.[]];
                                                    };
                                          } in  go_dn_s4vvr ww1_s4vvk;
                                    };
                              }; } in
                    let {
                      sat_s4vvo [Occ=Once] :: GHC.Int.Int64
                      [LclId] =
                          CCCS GHC.Int.I64#! [ww_s4vvj];
                    } in  : [sat_s4vvo sat_s4vvy];
                1# ->
                    case ># [ww2_s4vvl ww_s4vvj] of {
                      __DEFAULT ->
                          let {
                            sat_s4vvA [Occ=Once] :: GHC.Int.Int64
                            [LclId] =
                                CCCS GHC.Int.I64#! [ww_s4vvj];
                          } in  : [sat_s4vvA GHC.Types.[]];
                      1# -> [] [];
                    };
              };
          1# ->
              case <# [ww2_s4vvl ww1_s4vvk] of {
                __DEFAULT ->
                    let {
                      sat_s4vvM [Occ=Once] :: [GHC.Int.Int64]
                      [LclId] =
                          [ww_s4vvj ww1_s4vvk ww2_s4vvl] \u []
                              case -# [ww1_s4vvk ww_s4vvj] of delta_s4vvD [Dmd=<S,U>] {
                                __DEFAULT ->
                                    case -# [ww2_s4vvl delta_s4vvD] of y'_s4vvE [Dmd=<S,U>] {
                                      __DEFAULT ->
                                          let {
                                            go_up_s4vvF [Occ=LoopBreaker]
                                              :: GHC.Prim.Int# -> [GHC.Int.Int64]
                                            [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                                sat-only [delta_s4vvD
                                                          y'_s4vvE
                                                          go_up_s4vvF] \r [x_s4vvG]
                                                    case ># [x_s4vvG y'_s4vvE] of {
                                                      __DEFAULT ->
                                                          let {
                                                            sat_s4vvK [Occ=Once] :: [GHC.Int.Int64]
                                                            [LclId] =
                                                                [delta_s4vvD
                                                                 go_up_s4vvF
                                                                 x_s4vvG] \u []
                                                                    case
                                                                        +# [x_s4vvG delta_s4vvD]
                                                                    of
                                                                    sat_s4vvJ
                                                                    { __DEFAULT ->
                                                                          go_up_s4vvF sat_s4vvJ;
                                                                    }; } in
                                                          let {
                                                            sat_s4vvI [Occ=Once] :: GHC.Int.Int64
                                                            [LclId] =
                                                                CCCS GHC.Int.I64#! [x_s4vvG];
                                                          } in  : [sat_s4vvI sat_s4vvK];
                                                      1# ->
                                                          let {
                                                            sat_s4vvL [Occ=Once] :: GHC.Int.Int64
                                                            [LclId] =
                                                                CCCS GHC.Int.I64#! [x_s4vvG];
                                                          } in  : [sat_s4vvL GHC.Types.[]];
                                                    };
                                          } in  go_up_s4vvF ww1_s4vvk;
                                    };
                              }; } in
                    let {
                      sat_s4vvC [Occ=Once] :: GHC.Int.Int64
                      [LclId] =
                          CCCS GHC.Int.I64#! [ww_s4vvj];
                    } in  : [sat_s4vvC sat_s4vvM];
                1# ->
                    case <# [ww2_s4vvl ww_s4vvj] of {
                      __DEFAULT ->
                          let {
                            sat_s4vvO [Occ=Once] :: GHC.Int.Int64
                            [LclId] =
                                CCCS GHC.Int.I64#! [ww_s4vvj];
                          } in  : [sat_s4vvO GHC.Types.[]];
                      1# -> [] [];
                    };
              };
        };

GHC.Int.$fEnumInt64_$cenumFromThenTo [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int64
     -> GHC.Int.Int64 -> GHC.Int.Int64 -> [GHC.Int.Int64]
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [w_s4vvP w1_s4vvQ w2_s4vvR]
        case w_s4vvP of {
          GHC.Int.I64# ww1_s4vvT [Occ=Once] ->
              case w1_s4vvQ of {
                GHC.Int.I64# ww3_s4vvV [Occ=Once] ->
                    case w2_s4vvR of {
                      GHC.Int.I64# ww5_s4vvX [Occ=Once] ->
                          GHC.Int.$w$cenumFromThenTo2 ww1_s4vvT ww3_s4vvV ww5_s4vvX;
                    };
              };
        };

GHC.Int.$w$cenumFromTo2 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> [GHC.Int.Int64]
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s4vvY ww1_s4vvZ]
        case ># [ww_s4vvY ww1_s4vvZ] of {
          __DEFAULT ->
              let {
                go_s4vw1 [Occ=LoopBreaker] :: GHC.Prim.Int# -> [GHC.Int.Int64]
                [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
                    sat-only [ww1_s4vvZ go_s4vw1] \r [x_s4vw2]
                        let {
                          sat_s4vw6 [Occ=Once] :: [GHC.Int.Int64]
                          [LclId] =
                              [ww1_s4vvZ go_s4vw1 x_s4vw2] \u []
                                  case ==# [x_s4vw2 ww1_s4vvZ] of {
                                    __DEFAULT ->
                                        case +# [x_s4vw2 1#] of sat_s4vw5 {
                                          __DEFAULT -> go_s4vw1 sat_s4vw5;
                                        };
                                    1# -> [] [];
                                  }; } in
                        let {
                          sat_s4vw3 [Occ=Once] :: GHC.Int.Int64
                          [LclId] =
                              CCCS GHC.Int.I64#! [x_s4vw2];
                        } in  : [sat_s4vw3 sat_s4vw6];
              } in  go_s4vw1 ww_s4vvY;
          1# -> [] [];
        };

GHC.Int.$fEnumInt64_$cenumFromTo [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> [GHC.Int.Int64]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [w_s4vw7 w1_s4vw8]
        case w_s4vw7 of {
          GHC.Int.I64# ww1_s4vwa [Occ=Once] ->
              case w1_s4vw8 of {
                GHC.Int.I64# ww3_s4vwc [Occ=Once] ->
                    GHC.Int.$w$cenumFromTo2 ww1_s4vwa ww3_s4vwc;
              };
        };

GHC.Int.$tcInt9 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Int8"#;

GHC.Int.$fEnumInt7 :: GHC.Int.Int8
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# GHC.Int.$tcInt9 of sat_s4vwd {
          __DEFAULT -> GHC.Enum.predError sat_s4vwd;
        };

GHC.Int.$fEnumInt9 :: GHC.Int.Int8
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# GHC.Int.$tcInt9 of sat_s4vwe {
          __DEFAULT -> GHC.Enum.succError sat_s4vwe;
        };

GHC.Int.neInt8 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4vwf ds1_s4vwg]
        case ds_s4vwf of {
          GHC.Int.I8# x_s4vwi [Occ=Once] ->
              case ds1_s4vwg of {
                GHC.Int.I8# y_s4vwk [Occ=Once] ->
                    case /=# [x_s4vwi y_s4vwk] of sat_s4vwl {
                      __DEFAULT -> tagToEnum# [sat_s4vwl];
                    };
              };
        };

lvl_r4kPr :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Int.$tcInt9;

GHC.Int.$fBoundedInt8_$cminBound :: GHC.Int.Int8
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I8#! [-128#];

GHC.Int.$fEnumInt8_$cpred :: GHC.Int.Int8 -> GHC.Int.Int8
[GblId, Arity=1, Str=<S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [x_s4vwm]
        case x_s4vwm of {
          GHC.Int.I8# x1_s4vwo [Occ=Once!] ->
              case x1_s4vwo of wild1_s4vwp {
                __DEFAULT ->
                    case -# [wild1_s4vwp 1#] of sat_s4vwq {
                      __DEFAULT ->
                          case narrow8Int# [sat_s4vwq] of sat_s4vwr {
                            __DEFAULT -> GHC.Int.I8# [sat_s4vwr];
                          };
                    };
                -128# -> GHC.Int.$fEnumInt7;
              };
        };

GHC.Int.$fBoundedInt8_$cmaxBound :: GHC.Int.Int8
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I8#! [127#];

GHC.Int.$fBoundedInt8 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Bounded GHC.Int.Int8
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Bounded! [GHC.Int.$fBoundedInt8_$cminBound
                                       GHC.Int.$fBoundedInt8_$cmaxBound];

GHC.Int.$fEnumInt8_$csucc :: GHC.Int.Int8 -> GHC.Int.Int8
[GblId, Arity=1, Str=<S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [x_s4vws]
        case x_s4vws of {
          GHC.Int.I8# x1_s4vwu [Occ=Once!] ->
              case x1_s4vwu of wild1_s4vwv {
                __DEFAULT ->
                    case +# [wild1_s4vwv 1#] of sat_s4vww {
                      __DEFAULT ->
                          case narrow8Int# [sat_s4vww] of sat_s4vwx {
                            __DEFAULT -> GHC.Int.I8# [sat_s4vwx];
                          };
                    };
                127# -> GHC.Int.$fEnumInt9;
              };
        };

GHC.Int.$fShowInt8_$cshowsPrec
  :: GHC.Types.Int -> GHC.Int.Int8 -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [p_s4vwy x_s4vwz eta_s4vwA]
        case x_s4vwz of {
          GHC.Int.I8# x#_s4vwC [Occ=Once] ->
              case p_s4vwy of {
                GHC.Types.I# ww1_s4vwE [Occ=Once] ->
                    case GHC.Show.$wshowSignedInt ww1_s4vwE x#_s4vwC eta_s4vwA of {
                      (#,#) ww5_s4vwG [Occ=Once] ww6_s4vwH [Occ=Once] ->
                          : [ww5_s4vwG ww6_s4vwH];
                    };
              };
        };

GHC.Int.$fShowInt8_$cshow :: GHC.Int.Int8 -> GHC.Base.String
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m2,
 Unf=OtherCon []] =
    [] \r [x_s4vwI]
        case x_s4vwI of {
          GHC.Int.I8# x#_s4vwK [Occ=Once] ->
              case GHC.Show.$wshowSignedInt 0# x#_s4vwK GHC.Types.[] of {
                (#,#) ww5_s4vwM [Occ=Once] ww6_s4vwN [Occ=Once] ->
                    : [ww5_s4vwM ww6_s4vwN];
              };
        };

GHC.Int.$fShowInt4
  :: GHC.Int.Int8 -> GHC.Base.String -> GHC.Base.String
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [x_s4vwO eta_s4vwP]
        case x_s4vwO of {
          GHC.Int.I8# x#_s4vwR [Occ=Once] ->
              case GHC.Show.$wshowSignedInt 0# x#_s4vwR eta_s4vwP of {
                (#,#) ww5_s4vwT [Occ=Once] ww6_s4vwU [Occ=Once] ->
                    : [ww5_s4vwT ww6_s4vwU];
              };
        };

GHC.Int.$fShowInt8_$cshowList :: [GHC.Int.Int8] -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ls_s4vwV s_s4vwW]
        GHC.Show.showList__ GHC.Int.$fShowInt4 ls_s4vwV s_s4vwW;

GHC.Int.$fShowInt8 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Int.Int8
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Int.$fShowInt8_$cshowsPrec
                                    GHC.Int.$fShowInt8_$cshow
                                    GHC.Int.$fShowInt8_$cshowList];

GHC.Int.$wlvl2 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Int.Int8
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [ww_s4vwX]
        GHC.Enum.$wtoEnumError
            GHC.Int.$fShowInt8
            lvl_r4kPr
            ww_s4vwX
            GHC.Int.$fBoundedInt8_$cminBound
            GHC.Int.$fBoundedInt8_$cmaxBound;

GHC.Int.$w$ctoEnum2 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [ww_s4vwY]
        case >=# [ww_s4vwY -128#] of {
          __DEFAULT -> GHC.Int.$wlvl2 ww_s4vwY;
          1# ->
              case <=# [ww_s4vwY 127#] of {
                __DEFAULT -> GHC.Int.$wlvl2 ww_s4vwY;
                1# -> ww_s4vwY;
              };
        };

GHC.Int.$fEnumInt8_$ctoEnum [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.Int.Int8
[GblId, Arity=1, Str=<S(S),1*U(U)>m, Unf=OtherCon []] =
    [] \r [w_s4vx3]
        case w_s4vx3 of {
          GHC.Types.I# ww1_s4vx5 [Occ=Once] ->
              case GHC.Int.$w$ctoEnum2 ww1_s4vx5 of ww2_s4vx6 {
                __DEFAULT -> GHC.Int.I8# [ww2_s4vx6];
              };
        };

GHC.Int.$w$cenumFromThenTo3 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int#
     -> GHC.Prim.Int# -> GHC.Prim.Int# -> [GHC.Int.Int8]
[GblId, Arity=3, Str=<S,U><S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s4vx7 ww1_s4vx8 ww2_s4vx9]
        case >=# [ww1_s4vx8 ww_s4vx7] of {
          __DEFAULT ->
              case ># [ww2_s4vx9 ww1_s4vx8] of {
                __DEFAULT ->
                    let {
                      sat_s4vxs [Occ=Once] :: [GHC.Int.Int8]
                      [LclId] =
                          [ww_s4vx7 ww1_s4vx8 ww2_s4vx9] \u []
                              case -# [ww1_s4vx8 ww_s4vx7] of delta_s4vxf [Dmd=<S,U>] {
                                __DEFAULT ->
                                    case -# [ww2_s4vx9 delta_s4vxf] of y'_s4vxg [Dmd=<S,U>] {
                                      __DEFAULT ->
                                          let {
                                            go_dn_s4vxh [Occ=LoopBreaker]
                                              :: GHC.Prim.Int# -> [GHC.Int.Int8]
                                            [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                                sat-only [delta_s4vxf
                                                          y'_s4vxg
                                                          go_dn_s4vxh] \r [x_s4vxi]
                                                    case <# [x_s4vxi y'_s4vxg] of {
                                                      __DEFAULT ->
                                                          let {
                                                            sat_s4vxo [Occ=Once] :: [GHC.Int.Int8]
                                                            [LclId] =
                                                                [delta_s4vxf
                                                                 go_dn_s4vxh
                                                                 x_s4vxi] \u []
                                                                    case
                                                                        +# [x_s4vxi delta_s4vxf]
                                                                    of
                                                                    sat_s4vxn
                                                                    { __DEFAULT ->
                                                                          go_dn_s4vxh sat_s4vxn;
                                                                    }; } in
                                                          let {
                                                            sat_s4vxm [Occ=Once] :: GHC.Int.Int8
                                                            [LclId] =
                                                                [x_s4vxi] \u []
                                                                    case >=# [x_s4vxi -128#] of {
                                                                      __DEFAULT ->
                                                                          GHC.Int.$wlvl2 x_s4vxi;
                                                                      1# ->
                                                                          case
                                                                              <=# [x_s4vxi 127#]
                                                                          of
                                                                          { __DEFAULT ->
                                                                                GHC.Int.$wlvl2
                                                                                    x_s4vxi;
                                                                            1# ->
                                                                                GHC.Int.I8# [x_s4vxi];
                                                                          };
                                                                    };
                                                          } in  : [sat_s4vxm sat_s4vxo];
                                                      1# ->
                                                          let {
                                                            sat_s4vxr [Occ=Once] :: GHC.Int.Int8
                                                            [LclId] =
                                                                [x_s4vxi] \u []
                                                                    case >=# [x_s4vxi -128#] of {
                                                                      __DEFAULT ->
                                                                          GHC.Int.$wlvl2 x_s4vxi;
                                                                      1# ->
                                                                          case
                                                                              <=# [x_s4vxi 127#]
                                                                          of
                                                                          { __DEFAULT ->
                                                                                GHC.Int.$wlvl2
                                                                                    x_s4vxi;
                                                                            1# ->
                                                                                GHC.Int.I8# [x_s4vxi];
                                                                          };
                                                                    };
                                                          } in  : [sat_s4vxr GHC.Types.[]];
                                                    };
                                          } in  go_dn_s4vxh ww1_s4vx8;
                                    };
                              }; } in
                    let {
                      sat_s4vxe [Occ=Once] :: GHC.Int.Int8
                      [LclId] =
                          [ww_s4vx7] \u []
                              case >=# [ww_s4vx7 -128#] of {
                                __DEFAULT -> GHC.Int.$wlvl2 ww_s4vx7;
                                1# ->
                                    case <=# [ww_s4vx7 127#] of {
                                      __DEFAULT -> GHC.Int.$wlvl2 ww_s4vx7;
                                      1# -> GHC.Int.I8# [ww_s4vx7];
                                    };
                              };
                    } in  : [sat_s4vxe sat_s4vxs];
                1# ->
                    case ># [ww2_s4vx9 ww_s4vx7] of {
                      __DEFAULT ->
                          let {
                            sat_s4vxw [Occ=Once] :: GHC.Int.Int8
                            [LclId] =
                                [ww_s4vx7] \u []
                                    case >=# [ww_s4vx7 -128#] of {
                                      __DEFAULT -> GHC.Int.$wlvl2 ww_s4vx7;
                                      1# ->
                                          case <=# [ww_s4vx7 127#] of {
                                            __DEFAULT -> GHC.Int.$wlvl2 ww_s4vx7;
                                            1# -> GHC.Int.I8# [ww_s4vx7];
                                          };
                                    };
                          } in  : [sat_s4vxw GHC.Types.[]];
                      1# -> [] [];
                    };
              };
          1# ->
              case <# [ww2_s4vx9 ww1_s4vx8] of {
                __DEFAULT ->
                    let {
                      sat_s4vxO [Occ=Once] :: [GHC.Int.Int8]
                      [LclId] =
                          [ww_s4vx7 ww1_s4vx8 ww2_s4vx9] \u []
                              case -# [ww1_s4vx8 ww_s4vx7] of delta_s4vxB [Dmd=<S,U>] {
                                __DEFAULT ->
                                    case -# [ww2_s4vx9 delta_s4vxB] of y'_s4vxC [Dmd=<S,U>] {
                                      __DEFAULT ->
                                          let {
                                            go_up_s4vxD [Occ=LoopBreaker]
                                              :: GHC.Prim.Int# -> [GHC.Int.Int8]
                                            [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                                sat-only [delta_s4vxB
                                                          y'_s4vxC
                                                          go_up_s4vxD] \r [x_s4vxE]
                                                    case ># [x_s4vxE y'_s4vxC] of {
                                                      __DEFAULT ->
                                                          let {
                                                            sat_s4vxK [Occ=Once] :: [GHC.Int.Int8]
                                                            [LclId] =
                                                                [delta_s4vxB
                                                                 go_up_s4vxD
                                                                 x_s4vxE] \u []
                                                                    case
                                                                        +# [x_s4vxE delta_s4vxB]
                                                                    of
                                                                    sat_s4vxJ
                                                                    { __DEFAULT ->
                                                                          go_up_s4vxD sat_s4vxJ;
                                                                    }; } in
                                                          let {
                                                            sat_s4vxI [Occ=Once] :: GHC.Int.Int8
                                                            [LclId] =
                                                                [x_s4vxE] \u []
                                                                    case >=# [x_s4vxE -128#] of {
                                                                      __DEFAULT ->
                                                                          GHC.Int.$wlvl2 x_s4vxE;
                                                                      1# ->
                                                                          case
                                                                              <=# [x_s4vxE 127#]
                                                                          of
                                                                          { __DEFAULT ->
                                                                                GHC.Int.$wlvl2
                                                                                    x_s4vxE;
                                                                            1# ->
                                                                                GHC.Int.I8# [x_s4vxE];
                                                                          };
                                                                    };
                                                          } in  : [sat_s4vxI sat_s4vxK];
                                                      1# ->
                                                          let {
                                                            sat_s4vxN [Occ=Once] :: GHC.Int.Int8
                                                            [LclId] =
                                                                [x_s4vxE] \u []
                                                                    case >=# [x_s4vxE -128#] of {
                                                                      __DEFAULT ->
                                                                          GHC.Int.$wlvl2 x_s4vxE;
                                                                      1# ->
                                                                          case
                                                                              <=# [x_s4vxE 127#]
                                                                          of
                                                                          { __DEFAULT ->
                                                                                GHC.Int.$wlvl2
                                                                                    x_s4vxE;
                                                                            1# ->
                                                                                GHC.Int.I8# [x_s4vxE];
                                                                          };
                                                                    };
                                                          } in  : [sat_s4vxN GHC.Types.[]];
                                                    };
                                          } in  go_up_s4vxD ww1_s4vx8;
                                    };
                              }; } in
                    let {
                      sat_s4vxA [Occ=Once] :: GHC.Int.Int8
                      [LclId] =
                          [ww_s4vx7] \u []
                              case >=# [ww_s4vx7 -128#] of {
                                __DEFAULT -> GHC.Int.$wlvl2 ww_s4vx7;
                                1# ->
                                    case <=# [ww_s4vx7 127#] of {
                                      __DEFAULT -> GHC.Int.$wlvl2 ww_s4vx7;
                                      1# -> GHC.Int.I8# [ww_s4vx7];
                                    };
                              };
                    } in  : [sat_s4vxA sat_s4vxO];
                1# ->
                    case <# [ww2_s4vx9 ww_s4vx7] of {
                      __DEFAULT ->
                          let {
                            sat_s4vxS [Occ=Once] :: GHC.Int.Int8
                            [LclId] =
                                [ww_s4vx7] \u []
                                    case >=# [ww_s4vx7 -128#] of {
                                      __DEFAULT -> GHC.Int.$wlvl2 ww_s4vx7;
                                      1# ->
                                          case <=# [ww_s4vx7 127#] of {
                                            __DEFAULT -> GHC.Int.$wlvl2 ww_s4vx7;
                                            1# -> GHC.Int.I8# [ww_s4vx7];
                                          };
                                    };
                          } in  : [sat_s4vxS GHC.Types.[]];
                      1# -> [] [];
                    };
              };
        };

GHC.Int.$fEnumInt8_$cenumFromThenTo [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> GHC.Int.Int8 -> [GHC.Int.Int8]
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [w_s4vxT w1_s4vxU w2_s4vxV]
        case w_s4vxT of {
          GHC.Int.I8# ww1_s4vxX [Occ=Once] ->
              case w1_s4vxU of {
                GHC.Int.I8# ww3_s4vxZ [Occ=Once] ->
                    case w2_s4vxV of {
                      GHC.Int.I8# ww5_s4vy1 [Occ=Once] ->
                          GHC.Int.$w$cenumFromThenTo3 ww1_s4vxX ww3_s4vxZ ww5_s4vy1;
                    };
              };
        };

GHC.Int.$w$cenumFromTo3 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> [GHC.Int.Int8]
[GblId, Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s4vy2 ww1_s4vy3]
        case ># [ww_s4vy2 ww1_s4vy3] of {
          __DEFAULT ->
              let {
                go_s4vy5 [Occ=LoopBreaker] :: GHC.Prim.Int# -> [GHC.Int.Int8]
                [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
                    sat-only [ww1_s4vy3 go_s4vy5] \r [x_s4vy6]
                        let {
                          sat_s4vyc [Occ=Once] :: [GHC.Int.Int8]
                          [LclId] =
                              [ww1_s4vy3 go_s4vy5 x_s4vy6] \u []
                                  case ==# [x_s4vy6 ww1_s4vy3] of {
                                    __DEFAULT ->
                                        case +# [x_s4vy6 1#] of sat_s4vyb {
                                          __DEFAULT -> go_s4vy5 sat_s4vyb;
                                        };
                                    1# -> [] [];
                                  }; } in
                        let {
                          sat_s4vy9 [Occ=Once] :: GHC.Int.Int8
                          [LclId] =
                              [x_s4vy6] \u []
                                  case >=# [x_s4vy6 -128#] of {
                                    __DEFAULT -> GHC.Int.$wlvl2 x_s4vy6;
                                    1# ->
                                        case <=# [x_s4vy6 127#] of {
                                          __DEFAULT -> GHC.Int.$wlvl2 x_s4vy6;
                                          1# -> GHC.Int.I8# [x_s4vy6];
                                        };
                                  };
                        } in  : [sat_s4vy9 sat_s4vyc];
              } in  go_s4vy5 ww_s4vy2;
          1# -> [] [];
        };

GHC.Int.$fEnumInt8_$cenumFromTo [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> [GHC.Int.Int8]
[GblId, Arity=2, Str=<S(S),1*U(U)><S(S),1*U(U)>, Unf=OtherCon []] =
    [] \r [w_s4vyd w1_s4vye]
        case w_s4vyd of {
          GHC.Int.I8# ww1_s4vyg [Occ=Once] ->
              case w1_s4vye of {
                GHC.Int.I8# ww3_s4vyi [Occ=Once] ->
                    GHC.Int.$w$cenumFromTo3 ww1_s4vyg ww3_s4vyi;
              };
        };

GHC.Int.$wgo3 [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: GHC.Prim.Int# -> (# GHC.Int.Int8, [GHC.Int.Int8] #)
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [w_s4vyj]
        let {
          sat_s4vys [Occ=Once] :: [GHC.Int.Int8]
          [LclId] =
              [w_s4vyj] \u []
                  case w_s4vyj of wild_s4vyn {
                    __DEFAULT ->
                        case +# [wild_s4vyn 1#] of sat_s4vyo {
                          __DEFAULT ->
                              case GHC.Int.$wgo3 sat_s4vyo of {
                                (#,#) ww1_s4vyq [Occ=Once] ww2_s4vyr [Occ=Once] ->
                                    : [ww1_s4vyq ww2_s4vyr];
                              };
                        };
                    127# -> [] [];
                  }; } in
        let {
          sat_s4vym [Occ=Once] :: GHC.Int.Int8
          [LclId] =
              [w_s4vyj] \u []
                  case >=# [w_s4vyj -128#] of {
                    __DEFAULT -> GHC.Int.$wlvl2 w_s4vyj;
                    1# ->
                        case <=# [w_s4vyj 127#] of {
                          __DEFAULT -> GHC.Int.$wlvl2 w_s4vyj;
                          1# -> GHC.Int.I8# [w_s4vyj];
                        };
                  };
        } in  (#,#) [sat_s4vym sat_s4vys];

GHC.Int.$fEnumInt8_go [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> [GHC.Int.Int8]
[GblId, Arity=1, Str=<S,U>m2, Unf=OtherCon []] =
    [] \r [w_s4vyt]
        case GHC.Int.$wgo3 w_s4vyt of {
          (#,#) ww1_s4vyv [Occ=Once] ww2_s4vyw [Occ=Once] ->
              : [ww1_s4vyv ww2_s4vyw];
        };

GHC.Int.$fEnumInt8_$cenumFrom :: GHC.Int.Int8 -> [GHC.Int.Int8]
[GblId, Arity=1, Str=<S(S),1*U(U)>, Unf=OtherCon []] =
    [] \r [n_s4vyx]
        case n_s4vyx of {
          GHC.Int.I8# x#_s4vyz ->
              case ># [x#_s4vyz 127#] of {
                __DEFAULT -> GHC.Int.$fEnumInt8_go x#_s4vyz;
                1# -> [] [];
              };
        };

GHC.Int.$fEnumInt8 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Enum GHC.Int.Int8
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Enum! [GHC.Int.$fEnumInt8_$csucc
                                    GHC.Int.$fEnumInt8_$cpred
                                    GHC.Int.$fEnumInt8_$ctoEnum
                                    GHC.Int.$fEnumInt8_$cfromEnum
                                    GHC.Int.$fEnumInt8_$cenumFrom
                                    GHC.Int.$fEnumInt8_$cenumFromThen
                                    GHC.Int.$fEnumInt8_$cenumFromTo
                                    GHC.Int.$fEnumInt8_$cenumFromThenTo];
GHC.Int.$fEnumInt8_$cenumFromThen [Occ=LoopBreaker]
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> [GHC.Int.Int8]
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Enum.boundedEnumFromThen
            GHC.Int.$fEnumInt8 GHC.Int.$fBoundedInt8 eta_B2 eta_B1;

GHC.Int.$tcInt2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Int16"#;

GHC.Int.$fEnumInt1 :: GHC.Int.Int16
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# GHC.Int.$tcInt2 of sat_s4vyB {
          __DEFAULT -> GHC.Enum.predError sat_s4vyB;
        };

GHC.Int.$fEnumInt2 :: GHC.Int.Int16
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# GHC.Int.$tcInt2 of sat_s4vyC {
          __DEFAULT -> GHC.Enum.succError sat_s4vyC;
        };

GHC.Int.neInt16 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4vyD ds1_s4vyE]
        case ds_s4vyD of {
          GHC.Int.I16# x_s4vyG [Occ=Once] ->
              case ds1_s4vyE of {
                GHC.Int.I16# y_s4vyI [Occ=Once] ->
                    case /=# [x_s4vyG y_s4vyI] of sat_s4vyJ {
                      __DEFAULT -> tagToEnum# [sat_s4vyJ];
                    };
              };
        };

lvl2_r4kPt :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Int.$tcInt2;

GHC.Int.$fBoundedInt16_$cminBound :: GHC.Int.Int16
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I16#! [-32768#];

GHC.Int.$fEnumInt16_$cpred :: GHC.Int.Int16 -> GHC.Int.Int16
[GblId, Arity=1, Str=<S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [x_s4vyK]
        case x_s4vyK of {
          GHC.Int.I16# x1_s4vyM [Occ=Once!] ->
              case x1_s4vyM of wild1_s4vyN {
                __DEFAULT ->
                    case -# [wild1_s4vyN 1#] of sat_s4vyO {
                      __DEFAULT ->
                          case narrow16Int# [sat_s4vyO] of sat_s4vyP {
                            __DEFAULT -> GHC.Int.I16# [sat_s4vyP];
                          };
                    };
                -32768# -> GHC.Int.$fEnumInt1;
              };
        };

GHC.Int.$fBoundedInt16_$cmaxBound :: GHC.Int.Int16
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I16#! [32767#];

GHC.Int.$fBoundedInt16 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Bounded GHC.Int.Int16
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Bounded! [GHC.Int.$fBoundedInt16_$cminBound
                                       GHC.Int.$fBoundedInt16_$cmaxBound];

GHC.Int.$fEnumInt16_$csucc :: GHC.Int.Int16 -> GHC.Int.Int16
[GblId, Arity=1, Str=<S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [x_s4vyQ]
        case x_s4vyQ of {
          GHC.Int.I16# x1_s4vyS [Occ=Once!] ->
              case x1_s4vyS of wild1_s4vyT {
                __DEFAULT ->
                    case +# [wild1_s4vyT 1#] of sat_s4vyU {
                      __DEFAULT ->
                          case narrow16Int# [sat_s4vyU] of sat_s4vyV {
                            __DEFAULT -> GHC.Int.I16# [sat_s4vyV];
                          };
                    };
                32767# -> GHC.Int.$fEnumInt2;
              };
        };

GHC.Int.$fShowInt16_$cshowsPrec
  :: GHC.Types.Int -> GHC.Int.Int16 -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [p_s4vyW x_s4vyX eta_s4vyY]
        case x_s4vyX of {
          GHC.Int.I16# x#_s4vz0 [Occ=Once] ->
              case p_s4vyW of {
                GHC.Types.I# ww1_s4vz2 [Occ=Once] ->
                    case GHC.Show.$wshowSignedInt ww1_s4vz2 x#_s4vz0 eta_s4vyY of {
                      (#,#) ww5_s4vz4 [Occ=Once] ww6_s4vz5 [Occ=Once] ->
                          : [ww5_s4vz4 ww6_s4vz5];
                    };
              };
        };

GHC.Int.$fShowInt16_$cshow :: GHC.Int.Int16 -> GHC.Base.String
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m2,
 Unf=OtherCon []] =
    [] \r [x_s4vz6]
        case x_s4vz6 of {
          GHC.Int.I16# x#_s4vz8 [Occ=Once] ->
              case GHC.Show.$wshowSignedInt 0# x#_s4vz8 GHC.Types.[] of {
                (#,#) ww5_s4vza [Occ=Once] ww6_s4vzb [Occ=Once] ->
                    : [ww5_s4vza ww6_s4vzb];
              };
        };

GHC.Int.$fShowInt1
  :: GHC.Int.Int16 -> GHC.Base.String -> GHC.Base.String
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [x_s4vzc eta_s4vzd]
        case x_s4vzc of {
          GHC.Int.I16# x#_s4vzf [Occ=Once] ->
              case GHC.Show.$wshowSignedInt 0# x#_s4vzf eta_s4vzd of {
                (#,#) ww5_s4vzh [Occ=Once] ww6_s4vzi [Occ=Once] ->
                    : [ww5_s4vzh ww6_s4vzi];
              };
        };

GHC.Int.$fShowInt16_$cshowList :: [GHC.Int.Int16] -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ls_s4vzj s_s4vzk]
        GHC.Show.showList__ GHC.Int.$fShowInt1 ls_s4vzj s_s4vzk;

GHC.Int.$fShowInt16 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Int.Int16
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Int.$fShowInt16_$cshowsPrec
                                    GHC.Int.$fShowInt16_$cshow
                                    GHC.Int.$fShowInt16_$cshowList];

GHC.Int.$wlvl [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Int.Int16
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [ww_s4vzl]
        GHC.Enum.$wtoEnumError
            GHC.Int.$fShowInt16
            lvl2_r4kPt
            ww_s4vzl
            GHC.Int.$fBoundedInt16_$cminBound
            GHC.Int.$fBoundedInt16_$cmaxBound;

GHC.Int.$w$ctoEnum [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [ww_s4vzm]
        case >=# [ww_s4vzm -32768#] of {
          __DEFAULT -> GHC.Int.$wlvl ww_s4vzm;
          1# ->
              case <=# [ww_s4vzm 32767#] of {
                __DEFAULT -> GHC.Int.$wlvl ww_s4vzm;
                1# -> ww_s4vzm;
              };
        };

GHC.Int.$fEnumInt16_$ctoEnum [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.Int.Int16
[GblId, Arity=1, Str=<S(S),1*U(U)>m, Unf=OtherCon []] =
    [] \r [w_s4vzr]
        case w_s4vzr of {
          GHC.Types.I# ww1_s4vzt [Occ=Once] ->
              case GHC.Int.$w$ctoEnum ww1_s4vzt of ww2_s4vzu {
                __DEFAULT -> GHC.Int.I16# [ww2_s4vzu];
              };
        };

GHC.Int.$w$cenumFromThenTo [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int#
     -> GHC.Prim.Int# -> GHC.Prim.Int# -> [GHC.Int.Int16]
[GblId, Arity=3, Str=<S,U><S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s4vzv ww1_s4vzw ww2_s4vzx]
        case >=# [ww1_s4vzw ww_s4vzv] of {
          __DEFAULT ->
              case ># [ww2_s4vzx ww1_s4vzw] of {
                __DEFAULT ->
                    let {
                      sat_s4vzQ [Occ=Once] :: [GHC.Int.Int16]
                      [LclId] =
                          [ww_s4vzv ww1_s4vzw ww2_s4vzx] \u []
                              case -# [ww1_s4vzw ww_s4vzv] of delta_s4vzD [Dmd=<S,U>] {
                                __DEFAULT ->
                                    case -# [ww2_s4vzx delta_s4vzD] of y'_s4vzE [Dmd=<S,U>] {
                                      __DEFAULT ->
                                          let {
                                            go_dn_s4vzF [Occ=LoopBreaker]
                                              :: GHC.Prim.Int# -> [GHC.Int.Int16]
                                            [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                                sat-only [delta_s4vzD
                                                          y'_s4vzE
                                                          go_dn_s4vzF] \r [x_s4vzG]
                                                    case <# [x_s4vzG y'_s4vzE] of {
                                                      __DEFAULT ->
                                                          let {
                                                            sat_s4vzM [Occ=Once] :: [GHC.Int.Int16]
                                                            [LclId] =
                                                                [delta_s4vzD
                                                                 go_dn_s4vzF
                                                                 x_s4vzG] \u []
                                                                    case
                                                                        +# [x_s4vzG delta_s4vzD]
                                                                    of
                                                                    sat_s4vzL
                                                                    { __DEFAULT ->
                                                                          go_dn_s4vzF sat_s4vzL;
                                                                    }; } in
                                                          let {
                                                            sat_s4vzK [Occ=Once] :: GHC.Int.Int16
                                                            [LclId] =
                                                                [x_s4vzG] \u []
                                                                    case >=# [x_s4vzG -32768#] of {
                                                                      __DEFAULT ->
                                                                          GHC.Int.$wlvl x_s4vzG;
                                                                      1# ->
                                                                          case
                                                                              <=# [x_s4vzG 32767#]
                                                                          of
                                                                          { __DEFAULT ->
                                                                                GHC.Int.$wlvl
                                                                                    x_s4vzG;
                                                                            1# ->
                                                                                GHC.Int.I16# [x_s4vzG];
                                                                          };
                                                                    };
                                                          } in  : [sat_s4vzK sat_s4vzM];
                                                      1# ->
                                                          let {
                                                            sat_s4vzP [Occ=Once] :: GHC.Int.Int16
                                                            [LclId] =
                                                                [x_s4vzG] \u []
                                                                    case >=# [x_s4vzG -32768#] of {
                                                                      __DEFAULT ->
                                                                          GHC.Int.$wlvl x_s4vzG;
                                                                      1# ->
                                                                          case
                                                                              <=# [x_s4vzG 32767#]
                                                                          of
                                                                          { __DEFAULT ->
                                                                                GHC.Int.$wlvl
                                                                                    x_s4vzG;
                                                                            1# ->
                                                                                GHC.Int.I16# [x_s4vzG];
                                                                          };
                                                                    };
                                                          } in  : [sat_s4vzP GHC.Types.[]];
                                                    };
                                          } in  go_dn_s4vzF ww1_s4vzw;
                                    };
                              }; } in
                    let {
                      sat_s4vzC [Occ=Once] :: GHC.Int.Int16
                      [LclId] =
                          [ww_s4vzv] \u []
                              case >=# [ww_s4vzv -32768#] of {
                                __DEFAULT -> GHC.Int.$wlvl ww_s4vzv;
                                1# ->
                                    case <=# [ww_s4vzv 32767#] of {
                                      __DEFAULT -> GHC.Int.$wlvl ww_s4vzv;
                                      1# -> GHC.Int.I16# [ww_s4vzv];
                                    };
                              };
                    } in  : [sat_s4vzC sat_s4vzQ];
                1# ->
                    case ># [ww2_s4vzx ww_s4vzv] of {
                      __DEFAULT ->
                          let {
                            sat_s4vzU [Occ=Once] :: GHC.Int.Int16
                            [LclId] =
                                [ww_s4vzv] \u []
                                    case >=# [ww_s4vzv -32768#] of {
                                      __DEFAULT -> GHC.Int.$wlvl ww_s4vzv;
                                      1# ->
                                          case <=# [ww_s4vzv 32767#] of {
                                            __DEFAULT -> GHC.Int.$wlvl ww_s4vzv;
                                            1# -> GHC.Int.I16# [ww_s4vzv];
                                          };
                                    };
                          } in  : [sat_s4vzU GHC.Types.[]];
                      1# -> [] [];
                    };
              };
          1# ->
              case <# [ww2_s4vzx ww1_s4vzw] of {
                __DEFAULT ->
                    let {
                      sat_s4vAc [Occ=Once] :: [GHC.Int.Int16]
                      [LclId] =
                          [ww_s4vzv ww1_s4vzw ww2_s4vzx] \u []
                              case -# [ww1_s4vzw ww_s4vzv] of delta_s4vzZ [Dmd=<S,U>] {
                                __DEFAULT ->
                                    case -# [ww2_s4vzx delta_s4vzZ] of y'_s4vA0 [Dmd=<S,U>] {
                                      __DEFAULT ->
                                          let {
                                            go_up_s4vA1 [Occ=LoopBreaker]
                                              :: GHC.Prim.Int# -> [GHC.Int.Int16]
                                            [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                                sat-only [delta_s4vzZ
                                                          y'_s4vA0
                                                          go_up_s4vA1] \r [x_s4vA2]
                                                    case ># [x_s4vA2 y'_s4vA0] of {
                                                      __DEFAULT ->
                                                          let {
                                                            sat_s4vA8 [Occ=Once] :: [GHC.Int.Int16]
                                                            [LclId] =
                                                                [delta_s4vzZ
                                                                 go_up_s4vA1
                                                                 x_s4vA2] \u []
                                                                    case
                                                                        +# [x_s4vA2 delta_s4vzZ]
                                                                    of
                                                                    sat_s4vA7
                                                                    { __DEFAULT ->
                                                                          go_up_s4vA1 sat_s4vA7;
                                                                    }; } in
                                                          let {
                                                            sat_s4vA6 [Occ=Once] :: GHC.Int.Int16
                                                            [LclId] =
                                                                [x_s4vA2] \u []
                                                                    case >=# [x_s4vA2 -32768#] of {
                                                                      __DEFAULT ->
                                                                          GHC.Int.$wlvl x_s4vA2;
                                                                      1# ->
                                                                          case
                                                                              <=# [x_s4vA2 32767#]
                                                                          of
                                                                          { __DEFAULT ->
                                                                                GHC.Int.$wlvl
                                                                                    x_s4vA2;
                                                                            1# ->
                                                                                GHC.Int.I16# [x_s4vA2];
                                                                          };
                                                                    };
                                                          } in  : [sat_s4vA6 sat_s4vA8];
                                                      1# ->
                                                          let {
                                                            sat_s4vAb [Occ=Once] :: GHC.Int.Int16
                                                            [LclId] =
                                                                [x_s4vA2] \u []
                                                                    case >=# [x_s4vA2 -32768#] of {
                                                                      __DEFAULT ->
                                                                          GHC.Int.$wlvl x_s4vA2;
                                                                      1# ->
                                                                          case
                                                                              <=# [x_s4vA2 32767#]
                                                                          of
                                                                          { __DEFAULT ->
                                                                                GHC.Int.$wlvl
                                                                                    x_s4vA2;
                                                                            1# ->
                                                                                GHC.Int.I16# [x_s4vA2];
                                                                          };
                                                                    };
                                                          } in  : [sat_s4vAb GHC.Types.[]];
                                                    };
                                          } in  go_up_s4vA1 ww1_s4vzw;
                                    };
                              }; } in
                    let {
                      sat_s4vzY [Occ=Once] :: GHC.Int.Int16
                      [LclId] =
                          [ww_s4vzv] \u []
                              case >=# [ww_s4vzv -32768#] of {
                                __DEFAULT -> GHC.Int.$wlvl ww_s4vzv;
                                1# ->
                                    case <=# [ww_s4vzv 32767#] of {
                                      __DEFAULT -> GHC.Int.$wlvl ww_s4vzv;
                                      1# -> GHC.Int.I16# [ww_s4vzv];
                                    };
                              };
                    } in  : [sat_s4vzY sat_s4vAc];
                1# ->
                    case <# [ww2_s4vzx ww_s4vzv] of {
                      __DEFAULT ->
                          let {
                            sat_s4vAg [Occ=Once] :: GHC.Int.Int16
                            [LclId] =
                                [ww_s4vzv] \u []
                                    case >=# [ww_s4vzv -32768#] of {
                                      __DEFAULT -> GHC.Int.$wlvl ww_s4vzv;
                                      1# ->
                                          case <=# [ww_s4vzv 32767#] of {
                                            __DEFAULT -> GHC.Int.$wlvl ww_s4vzv;
                                            1# -> GHC.Int.I16# [ww_s4vzv];
                                          };
                                    };
                          } in  : [sat_s4vAg GHC.Types.[]];
                      1# -> [] [];
                    };
              };
        };

GHC.Int.$fEnumInt16_$cenumFromThenTo [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int16
     -> GHC.Int.Int16 -> GHC.Int.Int16 -> [GHC.Int.Int16]
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [w_s4vAh w1_s4vAi w2_s4vAj]
        case w_s4vAh of {
          GHC.Int.I16# ww1_s4vAl [Occ=Once] ->
              case w1_s4vAi of {
                GHC.Int.I16# ww3_s4vAn [Occ=Once] ->
                    case w2_s4vAj of {
                      GHC.Int.I16# ww5_s4vAp [Occ=Once] ->
                          GHC.Int.$w$cenumFromThenTo ww1_s4vAl ww3_s4vAn ww5_s4vAp;
                    };
              };
        };

GHC.Int.$w$cenumFromTo [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> [GHC.Int.Int16]
[GblId, Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s4vAq ww1_s4vAr]
        case ># [ww_s4vAq ww1_s4vAr] of {
          __DEFAULT ->
              let {
                go_s4vAt [Occ=LoopBreaker] :: GHC.Prim.Int# -> [GHC.Int.Int16]
                [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
                    sat-only [ww1_s4vAr go_s4vAt] \r [x_s4vAu]
                        let {
                          sat_s4vAA [Occ=Once] :: [GHC.Int.Int16]
                          [LclId] =
                              [ww1_s4vAr go_s4vAt x_s4vAu] \u []
                                  case ==# [x_s4vAu ww1_s4vAr] of {
                                    __DEFAULT ->
                                        case +# [x_s4vAu 1#] of sat_s4vAz {
                                          __DEFAULT -> go_s4vAt sat_s4vAz;
                                        };
                                    1# -> [] [];
                                  }; } in
                        let {
                          sat_s4vAx [Occ=Once] :: GHC.Int.Int16
                          [LclId] =
                              [x_s4vAu] \u []
                                  case >=# [x_s4vAu -32768#] of {
                                    __DEFAULT -> GHC.Int.$wlvl x_s4vAu;
                                    1# ->
                                        case <=# [x_s4vAu 32767#] of {
                                          __DEFAULT -> GHC.Int.$wlvl x_s4vAu;
                                          1# -> GHC.Int.I16# [x_s4vAu];
                                        };
                                  };
                        } in  : [sat_s4vAx sat_s4vAA];
              } in  go_s4vAt ww_s4vAq;
          1# -> [] [];
        };

GHC.Int.$fEnumInt16_$cenumFromTo [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> [GHC.Int.Int16]
[GblId, Arity=2, Str=<S(S),1*U(U)><S(S),1*U(U)>, Unf=OtherCon []] =
    [] \r [w_s4vAB w1_s4vAC]
        case w_s4vAB of {
          GHC.Int.I16# ww1_s4vAE [Occ=Once] ->
              case w1_s4vAC of {
                GHC.Int.I16# ww3_s4vAG [Occ=Once] ->
                    GHC.Int.$w$cenumFromTo ww1_s4vAE ww3_s4vAG;
              };
        };

GHC.Int.$wgo [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: GHC.Prim.Int# -> (# GHC.Int.Int16, [GHC.Int.Int16] #)
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [w_s4vAH]
        let {
          sat_s4vAQ [Occ=Once] :: [GHC.Int.Int16]
          [LclId] =
              [w_s4vAH] \u []
                  case w_s4vAH of wild_s4vAL {
                    __DEFAULT ->
                        case +# [wild_s4vAL 1#] of sat_s4vAM {
                          __DEFAULT ->
                              case GHC.Int.$wgo sat_s4vAM of {
                                (#,#) ww1_s4vAO [Occ=Once] ww2_s4vAP [Occ=Once] ->
                                    : [ww1_s4vAO ww2_s4vAP];
                              };
                        };
                    32767# -> [] [];
                  }; } in
        let {
          sat_s4vAK [Occ=Once] :: GHC.Int.Int16
          [LclId] =
              [w_s4vAH] \u []
                  case >=# [w_s4vAH -32768#] of {
                    __DEFAULT -> GHC.Int.$wlvl w_s4vAH;
                    1# ->
                        case <=# [w_s4vAH 32767#] of {
                          __DEFAULT -> GHC.Int.$wlvl w_s4vAH;
                          1# -> GHC.Int.I16# [w_s4vAH];
                        };
                  };
        } in  (#,#) [sat_s4vAK sat_s4vAQ];

GHC.Int.$fEnumInt16_go [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> [GHC.Int.Int16]
[GblId, Arity=1, Str=<S,U>m2, Unf=OtherCon []] =
    [] \r [w_s4vAR]
        case GHC.Int.$wgo w_s4vAR of {
          (#,#) ww1_s4vAT [Occ=Once] ww2_s4vAU [Occ=Once] ->
              : [ww1_s4vAT ww2_s4vAU];
        };

GHC.Int.$fEnumInt16_$cenumFrom :: GHC.Int.Int16 -> [GHC.Int.Int16]
[GblId, Arity=1, Str=<S(S),1*U(U)>, Unf=OtherCon []] =
    [] \r [n_s4vAV]
        case n_s4vAV of {
          GHC.Int.I16# x#_s4vAX ->
              case ># [x#_s4vAX 32767#] of {
                __DEFAULT -> GHC.Int.$fEnumInt16_go x#_s4vAX;
                1# -> [] [];
              };
        };

GHC.Int.$fEnumInt16 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Enum GHC.Int.Int16
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Enum! [GHC.Int.$fEnumInt16_$csucc
                                    GHC.Int.$fEnumInt16_$cpred
                                    GHC.Int.$fEnumInt16_$ctoEnum
                                    GHC.Int.$fEnumInt16_$cfromEnum
                                    GHC.Int.$fEnumInt16_$cenumFrom
                                    GHC.Int.$fEnumInt16_$cenumFromThen
                                    GHC.Int.$fEnumInt16_$cenumFromTo
                                    GHC.Int.$fEnumInt16_$cenumFromThenTo];
GHC.Int.$fEnumInt16_$cenumFromThen [Occ=LoopBreaker]
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> [GHC.Int.Int16]
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Enum.boundedEnumFromThen
            GHC.Int.$fEnumInt16 GHC.Int.$fBoundedInt16 eta_B2 eta_B1;

GHC.Int.$tcInt4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Int32"#;

GHC.Int.$fEnumInt3 :: GHC.Int.Int32
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# GHC.Int.$tcInt4 of sat_s4vAZ {
          __DEFAULT -> GHC.Enum.predError sat_s4vAZ;
        };

GHC.Int.$fEnumInt4 :: GHC.Int.Int32
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# GHC.Int.$tcInt4 of sat_s4vB0 {
          __DEFAULT -> GHC.Enum.succError sat_s4vB0;
        };

GHC.Int.neInt32 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4vB1 ds1_s4vB2]
        case ds_s4vB1 of {
          GHC.Int.I32# x_s4vB4 [Occ=Once] ->
              case ds1_s4vB2 of {
                GHC.Int.I32# y_s4vB6 [Occ=Once] ->
                    case /=# [x_s4vB4 y_s4vB6] of sat_s4vB7 {
                      __DEFAULT -> tagToEnum# [sat_s4vB7];
                    };
              };
        };

lvl4_r4kPv :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Int.$tcInt4;

GHC.Int.$fBoundedInt32_$cminBound :: GHC.Int.Int32
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I32#! [-2147483648#];

GHC.Int.$fEnumInt32_$cpred :: GHC.Int.Int32 -> GHC.Int.Int32
[GblId, Arity=1, Str=<S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [x_s4vB8]
        case x_s4vB8 of {
          GHC.Int.I32# x1_s4vBa [Occ=Once!] ->
              case x1_s4vBa of wild1_s4vBb {
                __DEFAULT ->
                    case -# [wild1_s4vBb 1#] of sat_s4vBc {
                      __DEFAULT ->
                          case narrow32Int# [sat_s4vBc] of sat_s4vBd {
                            __DEFAULT -> GHC.Int.I32# [sat_s4vBd];
                          };
                    };
                -2147483648# -> GHC.Int.$fEnumInt3;
              };
        };

GHC.Int.$fBoundedInt32_$cmaxBound :: GHC.Int.Int32
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I32#! [2147483647#];

GHC.Int.$fBoundedInt32 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Bounded GHC.Int.Int32
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Bounded! [GHC.Int.$fBoundedInt32_$cminBound
                                       GHC.Int.$fBoundedInt32_$cmaxBound];

GHC.Int.$fEnumInt32_$csucc :: GHC.Int.Int32 -> GHC.Int.Int32
[GblId, Arity=1, Str=<S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [x_s4vBe]
        case x_s4vBe of {
          GHC.Int.I32# x1_s4vBg [Occ=Once!] ->
              case x1_s4vBg of wild1_s4vBh {
                __DEFAULT ->
                    case +# [wild1_s4vBh 1#] of sat_s4vBi {
                      __DEFAULT ->
                          case narrow32Int# [sat_s4vBi] of sat_s4vBj {
                            __DEFAULT -> GHC.Int.I32# [sat_s4vBj];
                          };
                    };
                2147483647# -> GHC.Int.$fEnumInt4;
              };
        };

GHC.Int.$fShowInt32_$cshowsPrec
  :: GHC.Types.Int -> GHC.Int.Int32 -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [p_s4vBk x_s4vBl eta_s4vBm]
        case x_s4vBl of {
          GHC.Int.I32# x#_s4vBo [Occ=Once] ->
              case p_s4vBk of {
                GHC.Types.I# ww1_s4vBq [Occ=Once] ->
                    case GHC.Show.$wshowSignedInt ww1_s4vBq x#_s4vBo eta_s4vBm of {
                      (#,#) ww5_s4vBs [Occ=Once] ww6_s4vBt [Occ=Once] ->
                          : [ww5_s4vBs ww6_s4vBt];
                    };
              };
        };

GHC.Int.$fShowInt32_$cshow :: GHC.Int.Int32 -> GHC.Base.String
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m2,
 Unf=OtherCon []] =
    [] \r [x_s4vBu]
        case x_s4vBu of {
          GHC.Int.I32# x#_s4vBw [Occ=Once] ->
              case GHC.Show.$wshowSignedInt 0# x#_s4vBw GHC.Types.[] of {
                (#,#) ww5_s4vBy [Occ=Once] ww6_s4vBz [Occ=Once] ->
                    : [ww5_s4vBy ww6_s4vBz];
              };
        };

GHC.Int.$fShowInt2
  :: GHC.Int.Int32 -> GHC.Base.String -> GHC.Base.String
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [x_s4vBA eta_s4vBB]
        case x_s4vBA of {
          GHC.Int.I32# x#_s4vBD [Occ=Once] ->
              case GHC.Show.$wshowSignedInt 0# x#_s4vBD eta_s4vBB of {
                (#,#) ww5_s4vBF [Occ=Once] ww6_s4vBG [Occ=Once] ->
                    : [ww5_s4vBF ww6_s4vBG];
              };
        };

GHC.Int.$fShowInt32_$cshowList :: [GHC.Int.Int32] -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ls_s4vBH s_s4vBI]
        GHC.Show.showList__ GHC.Int.$fShowInt2 ls_s4vBH s_s4vBI;

GHC.Int.$fShowInt32 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Int.Int32
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Int.$fShowInt32_$cshowsPrec
                                    GHC.Int.$fShowInt32_$cshow
                                    GHC.Int.$fShowInt32_$cshowList];

GHC.Int.$wlvl1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Int.Int32
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [ww_s4vBJ]
        GHC.Enum.$wtoEnumError
            GHC.Int.$fShowInt32
            lvl4_r4kPv
            ww_s4vBJ
            GHC.Int.$fBoundedInt32_$cminBound
            GHC.Int.$fBoundedInt32_$cmaxBound;

GHC.Int.$w$ctoEnum1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [ww_s4vBK]
        case >=# [ww_s4vBK -2147483648#] of {
          __DEFAULT -> GHC.Int.$wlvl1 ww_s4vBK;
          1# ->
              case <=# [ww_s4vBK 2147483647#] of {
                __DEFAULT -> GHC.Int.$wlvl1 ww_s4vBK;
                1# -> ww_s4vBK;
              };
        };

GHC.Int.$fEnumInt32_$ctoEnum [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.Int.Int32
[GblId, Arity=1, Str=<S(S),1*U(U)>m, Unf=OtherCon []] =
    [] \r [w_s4vBP]
        case w_s4vBP of {
          GHC.Types.I# ww1_s4vBR [Occ=Once] ->
              case GHC.Int.$w$ctoEnum1 ww1_s4vBR of ww2_s4vBS {
                __DEFAULT -> GHC.Int.I32# [ww2_s4vBS];
              };
        };

GHC.Int.$w$cenumFromTo1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> [GHC.Int.Int32]
[GblId, Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s4vBT ww1_s4vBU]
        case ># [ww_s4vBT ww1_s4vBU] of {
          __DEFAULT ->
              let {
                go_s4vBW [Occ=LoopBreaker] :: GHC.Prim.Int# -> [GHC.Int.Int32]
                [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
                    sat-only [ww1_s4vBU go_s4vBW] \r [x_s4vBX]
                        let {
                          sat_s4vC3 [Occ=Once] :: [GHC.Int.Int32]
                          [LclId] =
                              [ww1_s4vBU go_s4vBW x_s4vBX] \u []
                                  case ==# [x_s4vBX ww1_s4vBU] of {
                                    __DEFAULT ->
                                        case +# [x_s4vBX 1#] of sat_s4vC2 {
                                          __DEFAULT -> go_s4vBW sat_s4vC2;
                                        };
                                    1# -> [] [];
                                  }; } in
                        let {
                          sat_s4vC0 [Occ=Once] :: GHC.Int.Int32
                          [LclId] =
                              [x_s4vBX] \u []
                                  case >=# [x_s4vBX -2147483648#] of {
                                    __DEFAULT -> GHC.Int.$wlvl1 x_s4vBX;
                                    1# ->
                                        case <=# [x_s4vBX 2147483647#] of {
                                          __DEFAULT -> GHC.Int.$wlvl1 x_s4vBX;
                                          1# -> GHC.Int.I32# [x_s4vBX];
                                        };
                                  };
                        } in  : [sat_s4vC0 sat_s4vC3];
              } in  go_s4vBW ww_s4vBT;
          1# -> [] [];
        };

GHC.Int.$fEnumInt32_$cenumFromTo [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> [GHC.Int.Int32]
[GblId, Arity=2, Str=<S(S),1*U(U)><S(S),1*U(U)>, Unf=OtherCon []] =
    [] \r [w_s4vC4 w1_s4vC5]
        case w_s4vC4 of {
          GHC.Int.I32# ww1_s4vC7 [Occ=Once] ->
              case w1_s4vC5 of {
                GHC.Int.I32# ww3_s4vC9 [Occ=Once] ->
                    GHC.Int.$w$cenumFromTo1 ww1_s4vC7 ww3_s4vC9;
              };
        };

GHC.Int.$wgo1 [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: GHC.Prim.Int# -> (# GHC.Int.Int32, [GHC.Int.Int32] #)
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [w_s4vCa]
        let {
          sat_s4vCj [Occ=Once] :: [GHC.Int.Int32]
          [LclId] =
              [w_s4vCa] \u []
                  case w_s4vCa of wild_s4vCe {
                    __DEFAULT ->
                        case +# [wild_s4vCe 1#] of sat_s4vCf {
                          __DEFAULT ->
                              case GHC.Int.$wgo1 sat_s4vCf of {
                                (#,#) ww1_s4vCh [Occ=Once] ww2_s4vCi [Occ=Once] ->
                                    : [ww1_s4vCh ww2_s4vCi];
                              };
                        };
                    2147483647# -> [] [];
                  }; } in
        let {
          sat_s4vCd [Occ=Once] :: GHC.Int.Int32
          [LclId] =
              [w_s4vCa] \u []
                  case >=# [w_s4vCa -2147483648#] of {
                    __DEFAULT -> GHC.Int.$wlvl1 w_s4vCa;
                    1# ->
                        case <=# [w_s4vCa 2147483647#] of {
                          __DEFAULT -> GHC.Int.$wlvl1 w_s4vCa;
                          1# -> GHC.Int.I32# [w_s4vCa];
                        };
                  };
        } in  (#,#) [sat_s4vCd sat_s4vCj];

GHC.Int.$fEnumInt32_go [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> [GHC.Int.Int32]
[GblId, Arity=1, Str=<S,U>m2, Unf=OtherCon []] =
    [] \r [w_s4vCk]
        case GHC.Int.$wgo1 w_s4vCk of {
          (#,#) ww1_s4vCm [Occ=Once] ww2_s4vCn [Occ=Once] ->
              : [ww1_s4vCm ww2_s4vCn];
        };

GHC.Int.$fEnumInt32_$cenumFrom :: GHC.Int.Int32 -> [GHC.Int.Int32]
[GblId, Arity=1, Str=<S(S),1*U(U)>, Unf=OtherCon []] =
    [] \r [n_s4vCo]
        case n_s4vCo of {
          GHC.Int.I32# x#_s4vCq ->
              case ># [x#_s4vCq 2147483647#] of {
                __DEFAULT -> GHC.Int.$fEnumInt32_go x#_s4vCq;
                1# -> [] [];
              };
        };

GHC.Int.$w$cenumFromThenTo1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int#
     -> GHC.Prim.Int# -> GHC.Prim.Int# -> [GHC.Int.Int32]
[GblId, Arity=3, Str=<S,U><S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s4vCs ww1_s4vCt ww2_s4vCu]
        case >=# [ww1_s4vCt ww_s4vCs] of {
          __DEFAULT ->
              case ># [ww2_s4vCu ww1_s4vCt] of {
                __DEFAULT ->
                    let {
                      sat_s4vCN [Occ=Once] :: [GHC.Int.Int32]
                      [LclId] =
                          [ww_s4vCs ww1_s4vCt ww2_s4vCu] \u []
                              case -# [ww1_s4vCt ww_s4vCs] of delta_s4vCA [Dmd=<S,U>] {
                                __DEFAULT ->
                                    case -# [ww2_s4vCu delta_s4vCA] of y'_s4vCB [Dmd=<S,U>] {
                                      __DEFAULT ->
                                          let {
                                            go_dn_s4vCC [Occ=LoopBreaker]
                                              :: GHC.Prim.Int# -> [GHC.Int.Int32]
                                            [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                                sat-only [delta_s4vCA
                                                          y'_s4vCB
                                                          go_dn_s4vCC] \r [x_s4vCD]
                                                    case <# [x_s4vCD y'_s4vCB] of {
                                                      __DEFAULT ->
                                                          let {
                                                            sat_s4vCJ [Occ=Once] :: [GHC.Int.Int32]
                                                            [LclId] =
                                                                [delta_s4vCA
                                                                 go_dn_s4vCC
                                                                 x_s4vCD] \u []
                                                                    case
                                                                        +# [x_s4vCD delta_s4vCA]
                                                                    of
                                                                    sat_s4vCI
                                                                    { __DEFAULT ->
                                                                          go_dn_s4vCC sat_s4vCI;
                                                                    }; } in
                                                          let {
                                                            sat_s4vCH [Occ=Once] :: GHC.Int.Int32
                                                            [LclId] =
                                                                [x_s4vCD] \u []
                                                                    case
                                                                        >=# [x_s4vCD -2147483648#]
                                                                    of
                                                                    { __DEFAULT ->
                                                                          GHC.Int.$wlvl1 x_s4vCD;
                                                                      1# ->
                                                                          case
                                                                              <=# [x_s4vCD
                                                                                   2147483647#]
                                                                          of
                                                                          { __DEFAULT ->
                                                                                GHC.Int.$wlvl1
                                                                                    x_s4vCD;
                                                                            1# ->
                                                                                GHC.Int.I32# [x_s4vCD];
                                                                          };
                                                                    };
                                                          } in  : [sat_s4vCH sat_s4vCJ];
                                                      1# ->
                                                          let {
                                                            sat_s4vCM [Occ=Once] :: GHC.Int.Int32
                                                            [LclId] =
                                                                [x_s4vCD] \u []
                                                                    case
                                                                        >=# [x_s4vCD -2147483648#]
                                                                    of
                                                                    { __DEFAULT ->
                                                                          GHC.Int.$wlvl1 x_s4vCD;
                                                                      1# ->
                                                                          case
                                                                              <=# [x_s4vCD
                                                                                   2147483647#]
                                                                          of
                                                                          { __DEFAULT ->
                                                                                GHC.Int.$wlvl1
                                                                                    x_s4vCD;
                                                                            1# ->
                                                                                GHC.Int.I32# [x_s4vCD];
                                                                          };
                                                                    };
                                                          } in  : [sat_s4vCM GHC.Types.[]];
                                                    };
                                          } in  go_dn_s4vCC ww1_s4vCt;
                                    };
                              }; } in
                    let {
                      sat_s4vCz [Occ=Once] :: GHC.Int.Int32
                      [LclId] =
                          [ww_s4vCs] \u []
                              case >=# [ww_s4vCs -2147483648#] of {
                                __DEFAULT -> GHC.Int.$wlvl1 ww_s4vCs;
                                1# ->
                                    case <=# [ww_s4vCs 2147483647#] of {
                                      __DEFAULT -> GHC.Int.$wlvl1 ww_s4vCs;
                                      1# -> GHC.Int.I32# [ww_s4vCs];
                                    };
                              };
                    } in  : [sat_s4vCz sat_s4vCN];
                1# ->
                    case ># [ww2_s4vCu ww_s4vCs] of {
                      __DEFAULT ->
                          let {
                            sat_s4vCR [Occ=Once] :: GHC.Int.Int32
                            [LclId] =
                                [ww_s4vCs] \u []
                                    case >=# [ww_s4vCs -2147483648#] of {
                                      __DEFAULT -> GHC.Int.$wlvl1 ww_s4vCs;
                                      1# ->
                                          case <=# [ww_s4vCs 2147483647#] of {
                                            __DEFAULT -> GHC.Int.$wlvl1 ww_s4vCs;
                                            1# -> GHC.Int.I32# [ww_s4vCs];
                                          };
                                    };
                          } in  : [sat_s4vCR GHC.Types.[]];
                      1# -> [] [];
                    };
              };
          1# ->
              case <# [ww2_s4vCu ww1_s4vCt] of {
                __DEFAULT ->
                    let {
                      sat_s4vD9 [Occ=Once] :: [GHC.Int.Int32]
                      [LclId] =
                          [ww_s4vCs ww1_s4vCt ww2_s4vCu] \u []
                              case -# [ww1_s4vCt ww_s4vCs] of delta_s4vCW [Dmd=<S,U>] {
                                __DEFAULT ->
                                    case -# [ww2_s4vCu delta_s4vCW] of y'_s4vCX [Dmd=<S,U>] {
                                      __DEFAULT ->
                                          let {
                                            go_up_s4vCY [Occ=LoopBreaker]
                                              :: GHC.Prim.Int# -> [GHC.Int.Int32]
                                            [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                                sat-only [delta_s4vCW
                                                          y'_s4vCX
                                                          go_up_s4vCY] \r [x_s4vCZ]
                                                    case ># [x_s4vCZ y'_s4vCX] of {
                                                      __DEFAULT ->
                                                          let {
                                                            sat_s4vD5 [Occ=Once] :: [GHC.Int.Int32]
                                                            [LclId] =
                                                                [delta_s4vCW
                                                                 go_up_s4vCY
                                                                 x_s4vCZ] \u []
                                                                    case
                                                                        +# [x_s4vCZ delta_s4vCW]
                                                                    of
                                                                    sat_s4vD4
                                                                    { __DEFAULT ->
                                                                          go_up_s4vCY sat_s4vD4;
                                                                    }; } in
                                                          let {
                                                            sat_s4vD3 [Occ=Once] :: GHC.Int.Int32
                                                            [LclId] =
                                                                [x_s4vCZ] \u []
                                                                    case
                                                                        >=# [x_s4vCZ -2147483648#]
                                                                    of
                                                                    { __DEFAULT ->
                                                                          GHC.Int.$wlvl1 x_s4vCZ;
                                                                      1# ->
                                                                          case
                                                                              <=# [x_s4vCZ
                                                                                   2147483647#]
                                                                          of
                                                                          { __DEFAULT ->
                                                                                GHC.Int.$wlvl1
                                                                                    x_s4vCZ;
                                                                            1# ->
                                                                                GHC.Int.I32# [x_s4vCZ];
                                                                          };
                                                                    };
                                                          } in  : [sat_s4vD3 sat_s4vD5];
                                                      1# ->
                                                          let {
                                                            sat_s4vD8 [Occ=Once] :: GHC.Int.Int32
                                                            [LclId] =
                                                                [x_s4vCZ] \u []
                                                                    case
                                                                        >=# [x_s4vCZ -2147483648#]
                                                                    of
                                                                    { __DEFAULT ->
                                                                          GHC.Int.$wlvl1 x_s4vCZ;
                                                                      1# ->
                                                                          case
                                                                              <=# [x_s4vCZ
                                                                                   2147483647#]
                                                                          of
                                                                          { __DEFAULT ->
                                                                                GHC.Int.$wlvl1
                                                                                    x_s4vCZ;
                                                                            1# ->
                                                                                GHC.Int.I32# [x_s4vCZ];
                                                                          };
                                                                    };
                                                          } in  : [sat_s4vD8 GHC.Types.[]];
                                                    };
                                          } in  go_up_s4vCY ww1_s4vCt;
                                    };
                              }; } in
                    let {
                      sat_s4vCV [Occ=Once] :: GHC.Int.Int32
                      [LclId] =
                          [ww_s4vCs] \u []
                              case >=# [ww_s4vCs -2147483648#] of {
                                __DEFAULT -> GHC.Int.$wlvl1 ww_s4vCs;
                                1# ->
                                    case <=# [ww_s4vCs 2147483647#] of {
                                      __DEFAULT -> GHC.Int.$wlvl1 ww_s4vCs;
                                      1# -> GHC.Int.I32# [ww_s4vCs];
                                    };
                              };
                    } in  : [sat_s4vCV sat_s4vD9];
                1# ->
                    case <# [ww2_s4vCu ww_s4vCs] of {
                      __DEFAULT ->
                          let {
                            sat_s4vDd [Occ=Once] :: GHC.Int.Int32
                            [LclId] =
                                [ww_s4vCs] \u []
                                    case >=# [ww_s4vCs -2147483648#] of {
                                      __DEFAULT -> GHC.Int.$wlvl1 ww_s4vCs;
                                      1# ->
                                          case <=# [ww_s4vCs 2147483647#] of {
                                            __DEFAULT -> GHC.Int.$wlvl1 ww_s4vCs;
                                            1# -> GHC.Int.I32# [ww_s4vCs];
                                          };
                                    };
                          } in  : [sat_s4vDd GHC.Types.[]];
                      1# -> [] [];
                    };
              };
        };

GHC.Int.$fEnumInt32_$cenumFromThenTo [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int32
     -> GHC.Int.Int32 -> GHC.Int.Int32 -> [GHC.Int.Int32]
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [w_s4vDe w1_s4vDf w2_s4vDg]
        case w_s4vDe of {
          GHC.Int.I32# ww1_s4vDi [Occ=Once] ->
              case w1_s4vDf of {
                GHC.Int.I32# ww3_s4vDk [Occ=Once] ->
                    case w2_s4vDg of {
                      GHC.Int.I32# ww5_s4vDm [Occ=Once] ->
                          GHC.Int.$w$cenumFromThenTo1 ww1_s4vDi ww3_s4vDk ww5_s4vDm;
                    };
              };
        };

GHC.Int.$fEnumInt32 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Enum GHC.Int.Int32
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Enum! [GHC.Int.$fEnumInt32_$csucc
                                    GHC.Int.$fEnumInt32_$cpred
                                    GHC.Int.$fEnumInt32_$ctoEnum
                                    GHC.Int.$fEnumInt32_$cfromEnum
                                    GHC.Int.$fEnumInt32_$cenumFrom
                                    GHC.Int.$fEnumInt32_$cenumFromThen
                                    GHC.Int.$fEnumInt32_$cenumFromTo
                                    GHC.Int.$fEnumInt32_$cenumFromThenTo];
GHC.Int.$fEnumInt32_$cenumFromThen [Occ=LoopBreaker]
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> [GHC.Int.Int32]
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Enum.boundedEnumFromThen
            GHC.Int.$fEnumInt32 GHC.Int.$fBoundedInt32 eta_B2 eta_B1;

GHC.Int.$tcInt6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Int64"#;

GHC.Int.$fEnumInt5 :: GHC.Int.Int64
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# GHC.Int.$tcInt6 of sat_s4vDn {
          __DEFAULT -> GHC.Enum.predError sat_s4vDn;
        };

GHC.Int.$fEnumInt6 :: GHC.Int.Int64
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# GHC.Int.$tcInt6 of sat_s4vDo {
          __DEFAULT -> GHC.Enum.succError sat_s4vDo;
        };

GHC.Int.neInt64 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4vDp ds1_s4vDq]
        case ds_s4vDp of {
          GHC.Int.I64# x_s4vDs [Occ=Once] ->
              case ds1_s4vDq of {
                GHC.Int.I64# y_s4vDu [Occ=Once] ->
                    case /=# [x_s4vDs y_s4vDu] of sat_s4vDv {
                      __DEFAULT -> tagToEnum# [sat_s4vDv];
                    };
              };
        };

GHC.Int.$fBoundedInt64_$cminBound :: GHC.Int.Int64
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I64#! [-9223372036854775808#];

GHC.Int.$fEnumInt64_$cpred :: GHC.Int.Int64 -> GHC.Int.Int64
[GblId, Arity=1, Str=<S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [x_s4vDw]
        case x_s4vDw of {
          GHC.Int.I64# x1_s4vDy [Occ=Once!] ->
              case x1_s4vDy of wild1_s4vDz {
                __DEFAULT ->
                    case -# [wild1_s4vDz 1#] of sat_s4vDA {
                      __DEFAULT -> GHC.Int.I64# [sat_s4vDA];
                    };
                -9223372036854775808# -> GHC.Int.$fEnumInt5;
              };
        };

GHC.Int.$fBoundedInt64_$cmaxBound :: GHC.Int.Int64
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I64#! [9223372036854775807#];

GHC.Int.$fBoundedInt64 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Bounded GHC.Int.Int64
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Bounded! [GHC.Int.$fBoundedInt64_$cminBound
                                       GHC.Int.$fBoundedInt64_$cmaxBound];

GHC.Int.$fEnumInt64_$csucc :: GHC.Int.Int64 -> GHC.Int.Int64
[GblId, Arity=1, Str=<S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [x_s4vDB]
        case x_s4vDB of {
          GHC.Int.I64# x1_s4vDD [Occ=Once!] ->
              case x1_s4vDD of wild1_s4vDE {
                __DEFAULT ->
                    case +# [wild1_s4vDE 1#] of sat_s4vDF {
                      __DEFAULT -> GHC.Int.I64# [sat_s4vDF];
                    };
                9223372036854775807# -> GHC.Int.$fEnumInt6;
              };
        };

GHC.Int.$wgo2 [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: GHC.Prim.Int# -> (# GHC.Int.Int64, [GHC.Int.Int64] #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [w_s4vDG]
        let {
          sat_s4vDN [Occ=Once] :: [GHC.Int.Int64]
          [LclId] =
              [w_s4vDG] \u []
                  case w_s4vDG of wild_s4vDI {
                    __DEFAULT ->
                        case +# [wild_s4vDI 1#] of sat_s4vDJ {
                          __DEFAULT ->
                              case GHC.Int.$wgo2 sat_s4vDJ of {
                                (#,#) ww1_s4vDL [Occ=Once] ww2_s4vDM [Occ=Once] ->
                                    : [ww1_s4vDL ww2_s4vDM];
                              };
                        };
                    9223372036854775807# -> [] [];
                  }; } in
        let {
          sat_s4vDH [Occ=Once] :: GHC.Int.Int64
          [LclId] =
              CCCS GHC.Int.I64#! [w_s4vDG];
        } in  (#,#) [sat_s4vDH sat_s4vDN];

GHC.Int.$fEnumInt64_go [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> [GHC.Int.Int64]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>m2, Unf=OtherCon []] =
    [] \r [w_s4vDO]
        case GHC.Int.$wgo2 w_s4vDO of {
          (#,#) ww1_s4vDQ [Occ=Once] ww2_s4vDR [Occ=Once] ->
              : [ww1_s4vDQ ww2_s4vDR];
        };

GHC.Int.$fEnumInt64_$cenumFrom :: GHC.Int.Int64 -> [GHC.Int.Int64]
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m2,
 Unf=OtherCon []] =
    [] \r [n_s4vDS]
        case n_s4vDS of {
          GHC.Int.I64# x#_s4vDU [Occ=Once] ->
              GHC.Int.$fEnumInt64_go x#_s4vDU;
        };

GHC.Int.$fEnumInt64 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Enum GHC.Int.Int64
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Enum! [GHC.Int.$fEnumInt64_$csucc
                                    GHC.Int.$fEnumInt64_$cpred
                                    GHC.Int.$fEnumInt64_$ctoEnum
                                    GHC.Int.$fEnumInt64_$cfromEnum
                                    GHC.Int.$fEnumInt64_$cenumFrom
                                    GHC.Int.$fEnumInt64_$cenumFromThen
                                    GHC.Int.$fEnumInt64_$cenumFromTo
                                    GHC.Int.$fEnumInt64_$cenumFromThenTo];
GHC.Int.$fEnumInt64_$cenumFromThen [Occ=LoopBreaker]
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> [GHC.Int.Int64]
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Enum.boundedEnumFromThen
            GHC.Int.$fEnumInt64 GHC.Int.$fBoundedInt64 eta_B2 eta_B1;

GHC.Int.$fNumInt8_$cfromInteger
  :: GHC.Integer.Type.Integer -> GHC.Int.Int8
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [i_s4vDV]
        case GHC.Integer.Type.integerToInt i_s4vDV of wild_s4vDW {
          __DEFAULT ->
              case narrow8Int# [wild_s4vDW] of sat_s4vDX {
                __DEFAULT -> GHC.Int.I8# [sat_s4vDX];
              };
        };

GHC.Int.$fNumInt8_$cnegate :: GHC.Int.Int8 -> GHC.Int.Int8
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vDY]
        case ds_s4vDY of {
          GHC.Int.I8# x#_s4vE0 [Occ=Once] ->
              case negateInt# [x#_s4vE0] of sat_s4vE1 {
                __DEFAULT ->
                    case narrow8Int# [sat_s4vE1] of sat_s4vE2 {
                      __DEFAULT -> GHC.Int.I8# [sat_s4vE2];
                    };
              };
        };

GHC.Int.$fNumInt8_$c*
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> GHC.Int.Int8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vE3 ds1_s4vE4]
        case ds_s4vE3 of {
          GHC.Int.I8# x#_s4vE6 [Occ=Once] ->
              case ds1_s4vE4 of {
                GHC.Int.I8# y#_s4vE8 [Occ=Once] ->
                    case *# [x#_s4vE6 y#_s4vE8] of sat_s4vE9 {
                      __DEFAULT ->
                          case narrow8Int# [sat_s4vE9] of sat_s4vEa {
                            __DEFAULT -> GHC.Int.I8# [sat_s4vEa];
                          };
                    };
              };
        };

GHC.Int.$fNumInt8_$c-
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> GHC.Int.Int8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vEb ds1_s4vEc]
        case ds_s4vEb of {
          GHC.Int.I8# x#_s4vEe [Occ=Once] ->
              case ds1_s4vEc of {
                GHC.Int.I8# y#_s4vEg [Occ=Once] ->
                    case -# [x#_s4vEe y#_s4vEg] of sat_s4vEh {
                      __DEFAULT ->
                          case narrow8Int# [sat_s4vEh] of sat_s4vEi {
                            __DEFAULT -> GHC.Int.I8# [sat_s4vEi];
                          };
                    };
              };
        };

GHC.Int.$fNumInt8_$c+
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> GHC.Int.Int8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vEj ds1_s4vEk]
        case ds_s4vEj of {
          GHC.Int.I8# x#_s4vEm [Occ=Once] ->
              case ds1_s4vEk of {
                GHC.Int.I8# y#_s4vEo [Occ=Once] ->
                    case +# [x#_s4vEm y#_s4vEo] of sat_s4vEp {
                      __DEFAULT ->
                          case narrow8Int# [sat_s4vEp] of sat_s4vEq {
                            __DEFAULT -> GHC.Int.I8# [sat_s4vEq];
                          };
                    };
              };
        };

GHC.Int.$fIntegralInt8_$ctoInteger
  :: GHC.Int.Int8 -> GHC.Integer.Type.Integer
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4vEr]
        case ds_s4vEr of {
          GHC.Int.I8# x#_s4vEt [Occ=Once] ->
              GHC.Integer.Type.smallInteger x#_s4vEt;
        };

GHC.Int.$fBitsInt8_$cpopCount :: GHC.Int.Int8 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vEu]
        case ds_s4vEu of {
          GHC.Int.I8# x#_s4vEw [Occ=Once] ->
              case int2Word# [x#_s4vEw] of sat_s4vEx {
                __DEFAULT ->
                    case popCnt8# [sat_s4vEx] of sat_s4vEy {
                      __DEFAULT ->
                          case word2Int# [sat_s4vEy] of sat_s4vEz {
                            __DEFAULT -> GHC.Types.I# [sat_s4vEz];
                          };
                    };
              };
        };

GHC.Int.$fBitsInt8_$cunsafeShiftR
  :: GHC.Int.Int8 -> GHC.Types.Int -> GHC.Int.Int8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vEA ds1_s4vEB]
        case ds_s4vEA of {
          GHC.Int.I8# x#_s4vED [Occ=Once] ->
              case ds1_s4vEB of {
                GHC.Types.I# i#_s4vEF [Occ=Once] ->
                    case uncheckedIShiftRA# [x#_s4vED i#_s4vEF] of sat_s4vEG {
                      __DEFAULT -> GHC.Int.I8# [sat_s4vEG];
                    };
              };
        };

GHC.Int.$fBitsInt13 :: GHC.Int.Int8
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I8#! [0#];

GHC.Int.$fNumInt9 :: GHC.Int.Int8
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I8#! [-1#];

GHC.Int.$fBitsInt8_$cshiftR [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int8 -> GHC.Types.Int -> GHC.Int.Int8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4vEH w1_s4vEI]
        case w_s4vEH of {
          GHC.Int.I8# ww1_s4vEK [Occ=Once*] ->
              case w1_s4vEI of {
                GHC.Types.I# ww3_s4vEM ->
                    case >=# [ww3_s4vEM 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftRA# [ww1_s4vEK ww3_s4vEM] of sat_s4vEO {
                            __DEFAULT -> GHC.Int.I8# [sat_s4vEO];
                          };
                      1# ->
                          case <# [ww1_s4vEK 0#] of {
                            __DEFAULT -> GHC.Int.$fBitsInt13;
                            1# -> GHC.Int.$fNumInt9;
                          };
                    };
              };
        };

GHC.Int.$fBitsInt8_$cunsafeShiftL
  :: GHC.Int.Int8 -> GHC.Types.Int -> GHC.Int.Int8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vEQ ds1_s4vER]
        case ds_s4vEQ of {
          GHC.Int.I8# x#_s4vET [Occ=Once] ->
              case ds1_s4vER of {
                GHC.Types.I# i#_s4vEV [Occ=Once] ->
                    case uncheckedIShiftL# [x#_s4vET i#_s4vEV] of sat_s4vEW {
                      __DEFAULT ->
                          case narrow8Int# [sat_s4vEW] of sat_s4vEX {
                            __DEFAULT -> GHC.Int.I8# [sat_s4vEX];
                          };
                    };
              };
        };

GHC.Int.$fBitsInt8_$cshiftL
  :: GHC.Int.Int8 -> GHC.Types.Int -> GHC.Int.Int8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vEY ds1_s4vEZ]
        case ds_s4vEY of {
          GHC.Int.I8# x#_s4vF1 [Occ=Once] ->
              case ds1_s4vEZ of {
                GHC.Types.I# i#_s4vF3 ->
                    case >=# [i#_s4vF3 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftL# [x#_s4vF1 i#_s4vF3] of sat_s4vF5 {
                            __DEFAULT ->
                                case narrow8Int# [sat_s4vF5] of sat_s4vF6 {
                                  __DEFAULT -> GHC.Int.I8# [sat_s4vF6];
                                };
                          };
                      1# -> GHC.Int.$fBitsInt13;
                    };
              };
        };

GHC.Int.$fBitsInt8_$cisSigned :: GHC.Int.Int8 -> GHC.Types.Bool
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>, Unf=OtherCon []] =
    [] \r [ds_s4vF7] GHC.Types.True [];

GHC.Int.$fBitsInt8_$crotate
  :: GHC.Int.Int8 -> GHC.Types.Int -> GHC.Int.Int8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vF8 ds1_s4vF9]
        case ds_s4vF8 of wild_s4vFa {
          GHC.Int.I8# x#_s4vFb [Occ=Once] ->
              case ds1_s4vF9 of {
                GHC.Types.I# i#_s4vFd [Occ=Once] ->
                    case int2Word# [i#_s4vFd] of sat_s4vFe {
                      __DEFAULT ->
                          case and# [sat_s4vFe 7##] of sat_s4vFf {
                            __DEFAULT ->
                                case word2Int# [sat_s4vFf] of wild2_s4vFg {
                                  __DEFAULT ->
                                      case int2Word# [x#_s4vFb] of sat_s4vFi {
                                        __DEFAULT ->
                                            case narrow8Word# [sat_s4vFi] of x'#_s4vFh [Dmd=<S,U>] {
                                              __DEFAULT ->
                                                  case -# [8# wild2_s4vFg] of sat_s4vFk {
                                                    __DEFAULT ->
                                                        case
                                                            uncheckedShiftRL# [x'#_s4vFh sat_s4vFk]
                                                        of
                                                        sat_s4vFl
                                                        { __DEFAULT ->
                                                              case
                                                                  uncheckedShiftL# [x'#_s4vFh
                                                                                    wild2_s4vFg]
                                                              of
                                                              sat_s4vFj
                                                              { __DEFAULT ->
                                                                    case
                                                                        or# [sat_s4vFj sat_s4vFl]
                                                                    of
                                                                    sat_s4vFm
                                                                    { __DEFAULT ->
                                                                          case
                                                                              word2Int# [sat_s4vFm]
                                                                          of
                                                                          sat_s4vFn
                                                                          { __DEFAULT ->
                                                                                case
                                                                                    narrow8Int# [sat_s4vFn]
                                                                                of
                                                                                sat_s4vFo
                                                                                { __DEFAULT ->
                                                                                      GHC.Int.I8# [sat_s4vFo];
                                                                                };
                                                                          };
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                  0# -> wild_s4vFa;
                                };
                          };
                    };
              };
        };

GHC.Int.$fBitsInt8_$cshift [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int8 -> GHC.Types.Int -> GHC.Int.Int8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vFp ds1_s4vFq]
        case ds_s4vFp of {
          GHC.Int.I8# x#_s4vFs [Occ=Once*] ->
              case ds1_s4vFq of {
                GHC.Types.I# i#_s4vFu ->
                    case >=# [i#_s4vFu 0#] of {
                      __DEFAULT ->
                          case negateInt# [i#_s4vFu] of b_s4vFw [Dmd=<S,U>] {
                            __DEFAULT ->
                                case >=# [b_s4vFw 64#] of {
                                  __DEFAULT ->
                                      case uncheckedIShiftRA# [x#_s4vFs b_s4vFw] of sat_s4vFy {
                                        __DEFAULT -> GHC.Int.I8# [sat_s4vFy];
                                      };
                                  1# ->
                                      case <# [x#_s4vFs 0#] of {
                                        __DEFAULT -> GHC.Int.$fBitsInt13;
                                        1# -> GHC.Int.$fNumInt9;
                                      };
                                };
                          };
                      1# ->
                          case >=# [i#_s4vFu 64#] of {
                            __DEFAULT ->
                                case uncheckedIShiftL# [x#_s4vFs i#_s4vFu] of sat_s4vFB {
                                  __DEFAULT ->
                                      case narrow8Int# [sat_s4vFB] of sat_s4vFC {
                                        __DEFAULT -> GHC.Int.I8# [sat_s4vFC];
                                      };
                                };
                            1# -> GHC.Int.$fBitsInt13;
                          };
                    };
              };
        };

GHC.Int.$fBitsInt8_$ccomplement :: GHC.Int.Int8 -> GHC.Int.Int8
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vFD]
        case ds_s4vFD of {
          GHC.Int.I8# x#_s4vFF [Occ=Once] ->
              case int2Word# [x#_s4vFF] of sat_s4vFG {
                __DEFAULT ->
                    case not# [sat_s4vFG] of sat_s4vFH {
                      __DEFAULT ->
                          case word2Int# [sat_s4vFH] of sat_s4vFI {
                            __DEFAULT -> GHC.Int.I8# [sat_s4vFI];
                          };
                    };
              };
        };

GHC.Int.$fBitsInt8_$cxor
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> GHC.Int.Int8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vFJ ds1_s4vFK]
        case ds_s4vFJ of {
          GHC.Int.I8# x#_s4vFM [Occ=Once] ->
              case ds1_s4vFK of {
                GHC.Int.I8# y#_s4vFO [Occ=Once] ->
                    case int2Word# [y#_s4vFO] of sat_s4vFQ {
                      __DEFAULT ->
                          case int2Word# [x#_s4vFM] of sat_s4vFP {
                            __DEFAULT ->
                                case xor# [sat_s4vFP sat_s4vFQ] of sat_s4vFR {
                                  __DEFAULT ->
                                      case word2Int# [sat_s4vFR] of sat_s4vFS {
                                        __DEFAULT -> GHC.Int.I8# [sat_s4vFS];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fBitsInt8_$c.|.
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> GHC.Int.Int8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vFT ds1_s4vFU]
        case ds_s4vFT of {
          GHC.Int.I8# x#_s4vFW [Occ=Once] ->
              case ds1_s4vFU of {
                GHC.Int.I8# y#_s4vFY [Occ=Once] ->
                    case int2Word# [y#_s4vFY] of sat_s4vG0 {
                      __DEFAULT ->
                          case int2Word# [x#_s4vFW] of sat_s4vFZ {
                            __DEFAULT ->
                                case or# [sat_s4vFZ sat_s4vG0] of sat_s4vG1 {
                                  __DEFAULT ->
                                      case word2Int# [sat_s4vG1] of sat_s4vG2 {
                                        __DEFAULT -> GHC.Int.I8# [sat_s4vG2];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fBitsInt8_$c.&.
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> GHC.Int.Int8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vG3 ds1_s4vG4]
        case ds_s4vG3 of {
          GHC.Int.I8# x#_s4vG6 [Occ=Once] ->
              case ds1_s4vG4 of {
                GHC.Int.I8# y#_s4vG8 [Occ=Once] ->
                    case int2Word# [y#_s4vG8] of sat_s4vGa {
                      __DEFAULT ->
                          case int2Word# [x#_s4vG6] of sat_s4vG9 {
                            __DEFAULT ->
                                case and# [sat_s4vG9 sat_s4vGa] of sat_s4vGb {
                                  __DEFAULT ->
                                      case word2Int# [sat_s4vGb] of sat_s4vGc {
                                        __DEFAULT -> GHC.Int.I8# [sat_s4vGc];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fFiniteBitsInt8_$ccountTrailingZeros
  :: GHC.Int.Int8 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vGd]
        case ds_s4vGd of {
          GHC.Int.I8# x#_s4vGf [Occ=Once] ->
              case int2Word# [x#_s4vGf] of sat_s4vGg {
                __DEFAULT ->
                    case ctz8# [sat_s4vGg] of sat_s4vGh {
                      __DEFAULT ->
                          case word2Int# [sat_s4vGh] of sat_s4vGi {
                            __DEFAULT -> GHC.Types.I# [sat_s4vGi];
                          };
                    };
              };
        };

GHC.Int.$fFiniteBitsInt8_$ccountLeadingZeros
  :: GHC.Int.Int8 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vGj]
        case ds_s4vGj of {
          GHC.Int.I8# x#_s4vGl [Occ=Once] ->
              case int2Word# [x#_s4vGl] of sat_s4vGm {
                __DEFAULT ->
                    case clz8# [sat_s4vGm] of sat_s4vGn {
                      __DEFAULT ->
                          case word2Int# [sat_s4vGn] of sat_s4vGo {
                            __DEFAULT -> GHC.Types.I# [sat_s4vGo];
                          };
                    };
              };
        };

GHC.Int.$fBitsInt11 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [8#];

GHC.Int.$fBitsInt8_$cfiniteBitSize :: GHC.Int.Int8 -> GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>m, Unf=OtherCon []] =
    [] \r [ds_s4vGp] GHC.Int.$fBitsInt11;

GHC.Int.$fNumInt16_$cfromInteger
  :: GHC.Integer.Type.Integer -> GHC.Int.Int16
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [i_s4vGq]
        case GHC.Integer.Type.integerToInt i_s4vGq of wild_s4vGr {
          __DEFAULT ->
              case narrow16Int# [wild_s4vGr] of sat_s4vGs {
                __DEFAULT -> GHC.Int.I16# [sat_s4vGs];
              };
        };

GHC.Int.$fNumInt16_$cnegate :: GHC.Int.Int16 -> GHC.Int.Int16
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vGt]
        case ds_s4vGt of {
          GHC.Int.I16# x#_s4vGv [Occ=Once] ->
              case negateInt# [x#_s4vGv] of sat_s4vGw {
                __DEFAULT ->
                    case narrow16Int# [sat_s4vGw] of sat_s4vGx {
                      __DEFAULT -> GHC.Int.I16# [sat_s4vGx];
                    };
              };
        };

GHC.Int.$fNumInt16_$c*
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Int.Int16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vGy ds1_s4vGz]
        case ds_s4vGy of {
          GHC.Int.I16# x#_s4vGB [Occ=Once] ->
              case ds1_s4vGz of {
                GHC.Int.I16# y#_s4vGD [Occ=Once] ->
                    case *# [x#_s4vGB y#_s4vGD] of sat_s4vGE {
                      __DEFAULT ->
                          case narrow16Int# [sat_s4vGE] of sat_s4vGF {
                            __DEFAULT -> GHC.Int.I16# [sat_s4vGF];
                          };
                    };
              };
        };

GHC.Int.$fNumInt16_$c-
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Int.Int16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vGG ds1_s4vGH]
        case ds_s4vGG of {
          GHC.Int.I16# x#_s4vGJ [Occ=Once] ->
              case ds1_s4vGH of {
                GHC.Int.I16# y#_s4vGL [Occ=Once] ->
                    case -# [x#_s4vGJ y#_s4vGL] of sat_s4vGM {
                      __DEFAULT ->
                          case narrow16Int# [sat_s4vGM] of sat_s4vGN {
                            __DEFAULT -> GHC.Int.I16# [sat_s4vGN];
                          };
                    };
              };
        };

GHC.Int.$fNumInt16_$c+
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Int.Int16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vGO ds1_s4vGP]
        case ds_s4vGO of {
          GHC.Int.I16# x#_s4vGR [Occ=Once] ->
              case ds1_s4vGP of {
                GHC.Int.I16# y#_s4vGT [Occ=Once] ->
                    case +# [x#_s4vGR y#_s4vGT] of sat_s4vGU {
                      __DEFAULT ->
                          case narrow16Int# [sat_s4vGU] of sat_s4vGV {
                            __DEFAULT -> GHC.Int.I16# [sat_s4vGV];
                          };
                    };
              };
        };

GHC.Int.$fIntegralInt16_$ctoInteger
  :: GHC.Int.Int16 -> GHC.Integer.Type.Integer
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4vGW]
        case ds_s4vGW of {
          GHC.Int.I16# x#_s4vGY [Occ=Once] ->
              GHC.Integer.Type.smallInteger x#_s4vGY;
        };

GHC.Int.$fBitsInt16_$cpopCount :: GHC.Int.Int16 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vGZ]
        case ds_s4vGZ of {
          GHC.Int.I16# x#_s4vH1 [Occ=Once] ->
              case int2Word# [x#_s4vH1] of sat_s4vH2 {
                __DEFAULT ->
                    case popCnt16# [sat_s4vH2] of sat_s4vH3 {
                      __DEFAULT ->
                          case word2Int# [sat_s4vH3] of sat_s4vH4 {
                            __DEFAULT -> GHC.Types.I# [sat_s4vH4];
                          };
                    };
              };
        };

GHC.Int.$fBitsInt16_$cunsafeShiftR
  :: GHC.Int.Int16 -> GHC.Types.Int -> GHC.Int.Int16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vH5 ds1_s4vH6]
        case ds_s4vH5 of {
          GHC.Int.I16# x#_s4vH8 [Occ=Once] ->
              case ds1_s4vH6 of {
                GHC.Types.I# i#_s4vHa [Occ=Once] ->
                    case uncheckedIShiftRA# [x#_s4vH8 i#_s4vHa] of sat_s4vHb {
                      __DEFAULT -> GHC.Int.I16# [sat_s4vHb];
                    };
              };
        };

GHC.Int.$fBitsInt3 :: GHC.Int.Int16
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I16#! [0#];

GHC.Int.$fNumInt2 :: GHC.Int.Int16
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I16#! [-1#];

GHC.Int.$fBitsInt16_$cshiftR [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int16 -> GHC.Types.Int -> GHC.Int.Int16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4vHc w1_s4vHd]
        case w_s4vHc of {
          GHC.Int.I16# ww1_s4vHf [Occ=Once*] ->
              case w1_s4vHd of {
                GHC.Types.I# ww3_s4vHh ->
                    case >=# [ww3_s4vHh 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftRA# [ww1_s4vHf ww3_s4vHh] of sat_s4vHj {
                            __DEFAULT -> GHC.Int.I16# [sat_s4vHj];
                          };
                      1# ->
                          case <# [ww1_s4vHf 0#] of {
                            __DEFAULT -> GHC.Int.$fBitsInt3;
                            1# -> GHC.Int.$fNumInt2;
                          };
                    };
              };
        };

GHC.Int.$fBitsInt16_$cunsafeShiftL
  :: GHC.Int.Int16 -> GHC.Types.Int -> GHC.Int.Int16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vHl ds1_s4vHm]
        case ds_s4vHl of {
          GHC.Int.I16# x#_s4vHo [Occ=Once] ->
              case ds1_s4vHm of {
                GHC.Types.I# i#_s4vHq [Occ=Once] ->
                    case uncheckedIShiftL# [x#_s4vHo i#_s4vHq] of sat_s4vHr {
                      __DEFAULT ->
                          case narrow16Int# [sat_s4vHr] of sat_s4vHs {
                            __DEFAULT -> GHC.Int.I16# [sat_s4vHs];
                          };
                    };
              };
        };

GHC.Int.$fBitsInt16_$cshiftL
  :: GHC.Int.Int16 -> GHC.Types.Int -> GHC.Int.Int16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vHt ds1_s4vHu]
        case ds_s4vHt of {
          GHC.Int.I16# x#_s4vHw [Occ=Once] ->
              case ds1_s4vHu of {
                GHC.Types.I# i#_s4vHy ->
                    case >=# [i#_s4vHy 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftL# [x#_s4vHw i#_s4vHy] of sat_s4vHA {
                            __DEFAULT ->
                                case narrow16Int# [sat_s4vHA] of sat_s4vHB {
                                  __DEFAULT -> GHC.Int.I16# [sat_s4vHB];
                                };
                          };
                      1# -> GHC.Int.$fBitsInt3;
                    };
              };
        };

GHC.Int.$fBitsInt16_$cisSigned :: GHC.Int.Int16 -> GHC.Types.Bool
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>, Unf=OtherCon []] =
    [] \r [ds_s4vHC] GHC.Types.True [];

GHC.Int.$fBitsInt16_$crotate
  :: GHC.Int.Int16 -> GHC.Types.Int -> GHC.Int.Int16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vHD ds1_s4vHE]
        case ds_s4vHD of wild_s4vHF {
          GHC.Int.I16# x#_s4vHG [Occ=Once] ->
              case ds1_s4vHE of {
                GHC.Types.I# i#_s4vHI [Occ=Once] ->
                    case int2Word# [i#_s4vHI] of sat_s4vHJ {
                      __DEFAULT ->
                          case and# [sat_s4vHJ 15##] of sat_s4vHK {
                            __DEFAULT ->
                                case word2Int# [sat_s4vHK] of wild2_s4vHL {
                                  __DEFAULT ->
                                      case int2Word# [x#_s4vHG] of sat_s4vHN {
                                        __DEFAULT ->
                                            case
                                                narrow16Word# [sat_s4vHN]
                                            of
                                            x'#_s4vHM [Dmd=<S,U>]
                                            { __DEFAULT ->
                                                  case -# [16# wild2_s4vHL] of sat_s4vHP {
                                                    __DEFAULT ->
                                                        case
                                                            uncheckedShiftRL# [x'#_s4vHM sat_s4vHP]
                                                        of
                                                        sat_s4vHQ
                                                        { __DEFAULT ->
                                                              case
                                                                  uncheckedShiftL# [x'#_s4vHM
                                                                                    wild2_s4vHL]
                                                              of
                                                              sat_s4vHO
                                                              { __DEFAULT ->
                                                                    case
                                                                        or# [sat_s4vHO sat_s4vHQ]
                                                                    of
                                                                    sat_s4vHR
                                                                    { __DEFAULT ->
                                                                          case
                                                                              word2Int# [sat_s4vHR]
                                                                          of
                                                                          sat_s4vHS
                                                                          { __DEFAULT ->
                                                                                case
                                                                                    narrow16Int# [sat_s4vHS]
                                                                                of
                                                                                sat_s4vHT
                                                                                { __DEFAULT ->
                                                                                      GHC.Int.I16# [sat_s4vHT];
                                                                                };
                                                                          };
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                  0# -> wild_s4vHF;
                                };
                          };
                    };
              };
        };

GHC.Int.$fBitsInt16_$cshift [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int16 -> GHC.Types.Int -> GHC.Int.Int16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vHU ds1_s4vHV]
        case ds_s4vHU of {
          GHC.Int.I16# x#_s4vHX [Occ=Once*] ->
              case ds1_s4vHV of {
                GHC.Types.I# i#_s4vHZ ->
                    case >=# [i#_s4vHZ 0#] of {
                      __DEFAULT ->
                          case negateInt# [i#_s4vHZ] of b_s4vI1 [Dmd=<S,U>] {
                            __DEFAULT ->
                                case >=# [b_s4vI1 64#] of {
                                  __DEFAULT ->
                                      case uncheckedIShiftRA# [x#_s4vHX b_s4vI1] of sat_s4vI3 {
                                        __DEFAULT -> GHC.Int.I16# [sat_s4vI3];
                                      };
                                  1# ->
                                      case <# [x#_s4vHX 0#] of {
                                        __DEFAULT -> GHC.Int.$fBitsInt3;
                                        1# -> GHC.Int.$fNumInt2;
                                      };
                                };
                          };
                      1# ->
                          case >=# [i#_s4vHZ 64#] of {
                            __DEFAULT ->
                                case uncheckedIShiftL# [x#_s4vHX i#_s4vHZ] of sat_s4vI6 {
                                  __DEFAULT ->
                                      case narrow16Int# [sat_s4vI6] of sat_s4vI7 {
                                        __DEFAULT -> GHC.Int.I16# [sat_s4vI7];
                                      };
                                };
                            1# -> GHC.Int.$fBitsInt3;
                          };
                    };
              };
        };

GHC.Int.$fBitsInt16_$ccomplement :: GHC.Int.Int16 -> GHC.Int.Int16
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vI8]
        case ds_s4vI8 of {
          GHC.Int.I16# x#_s4vIa [Occ=Once] ->
              case int2Word# [x#_s4vIa] of sat_s4vIb {
                __DEFAULT ->
                    case not# [sat_s4vIb] of sat_s4vIc {
                      __DEFAULT ->
                          case word2Int# [sat_s4vIc] of sat_s4vId {
                            __DEFAULT -> GHC.Int.I16# [sat_s4vId];
                          };
                    };
              };
        };

GHC.Int.$fBitsInt16_$cxor
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Int.Int16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vIe ds1_s4vIf]
        case ds_s4vIe of {
          GHC.Int.I16# x#_s4vIh [Occ=Once] ->
              case ds1_s4vIf of {
                GHC.Int.I16# y#_s4vIj [Occ=Once] ->
                    case int2Word# [y#_s4vIj] of sat_s4vIl {
                      __DEFAULT ->
                          case int2Word# [x#_s4vIh] of sat_s4vIk {
                            __DEFAULT ->
                                case xor# [sat_s4vIk sat_s4vIl] of sat_s4vIm {
                                  __DEFAULT ->
                                      case word2Int# [sat_s4vIm] of sat_s4vIn {
                                        __DEFAULT -> GHC.Int.I16# [sat_s4vIn];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fBitsInt16_$c.|.
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Int.Int16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vIo ds1_s4vIp]
        case ds_s4vIo of {
          GHC.Int.I16# x#_s4vIr [Occ=Once] ->
              case ds1_s4vIp of {
                GHC.Int.I16# y#_s4vIt [Occ=Once] ->
                    case int2Word# [y#_s4vIt] of sat_s4vIv {
                      __DEFAULT ->
                          case int2Word# [x#_s4vIr] of sat_s4vIu {
                            __DEFAULT ->
                                case or# [sat_s4vIu sat_s4vIv] of sat_s4vIw {
                                  __DEFAULT ->
                                      case word2Int# [sat_s4vIw] of sat_s4vIx {
                                        __DEFAULT -> GHC.Int.I16# [sat_s4vIx];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fBitsInt16_$c.&.
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Int.Int16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vIy ds1_s4vIz]
        case ds_s4vIy of {
          GHC.Int.I16# x#_s4vIB [Occ=Once] ->
              case ds1_s4vIz of {
                GHC.Int.I16# y#_s4vID [Occ=Once] ->
                    case int2Word# [y#_s4vID] of sat_s4vIF {
                      __DEFAULT ->
                          case int2Word# [x#_s4vIB] of sat_s4vIE {
                            __DEFAULT ->
                                case and# [sat_s4vIE sat_s4vIF] of sat_s4vIG {
                                  __DEFAULT ->
                                      case word2Int# [sat_s4vIG] of sat_s4vIH {
                                        __DEFAULT -> GHC.Int.I16# [sat_s4vIH];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fFiniteBitsInt16_$ccountTrailingZeros
  :: GHC.Int.Int16 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vII]
        case ds_s4vII of {
          GHC.Int.I16# x#_s4vIK [Occ=Once] ->
              case int2Word# [x#_s4vIK] of sat_s4vIL {
                __DEFAULT ->
                    case ctz16# [sat_s4vIL] of sat_s4vIM {
                      __DEFAULT ->
                          case word2Int# [sat_s4vIM] of sat_s4vIN {
                            __DEFAULT -> GHC.Types.I# [sat_s4vIN];
                          };
                    };
              };
        };

GHC.Int.$fFiniteBitsInt16_$ccountLeadingZeros
  :: GHC.Int.Int16 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vIO]
        case ds_s4vIO of {
          GHC.Int.I16# x#_s4vIQ [Occ=Once] ->
              case int2Word# [x#_s4vIQ] of sat_s4vIR {
                __DEFAULT ->
                    case clz16# [sat_s4vIR] of sat_s4vIS {
                      __DEFAULT ->
                          case word2Int# [sat_s4vIS] of sat_s4vIT {
                            __DEFAULT -> GHC.Types.I# [sat_s4vIT];
                          };
                    };
              };
        };

GHC.Int.$fBitsInt1 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [16#];

GHC.Int.$fBitsInt16_$cfiniteBitSize
  :: GHC.Int.Int16 -> GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>m, Unf=OtherCon []] =
    [] \r [ds_s4vIU] GHC.Int.$fBitsInt1;

GHC.Int.$fNumInt32_$cfromInteger
  :: GHC.Integer.Type.Integer -> GHC.Int.Int32
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [i_s4vIV]
        case GHC.Integer.Type.integerToInt i_s4vIV of wild_s4vIW {
          __DEFAULT ->
              case narrow32Int# [wild_s4vIW] of sat_s4vIX {
                __DEFAULT -> GHC.Int.I32# [sat_s4vIX];
              };
        };

GHC.Int.$fNumInt32_$cnegate :: GHC.Int.Int32 -> GHC.Int.Int32
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vIY]
        case ds_s4vIY of {
          GHC.Int.I32# x#_s4vJ0 [Occ=Once] ->
              case negateInt# [x#_s4vJ0] of sat_s4vJ1 {
                __DEFAULT ->
                    case narrow32Int# [sat_s4vJ1] of sat_s4vJ2 {
                      __DEFAULT -> GHC.Int.I32# [sat_s4vJ2];
                    };
              };
        };

GHC.Int.$fNumInt32_$c*
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> GHC.Int.Int32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vJ3 ds1_s4vJ4]
        case ds_s4vJ3 of {
          GHC.Int.I32# x#_s4vJ6 [Occ=Once] ->
              case ds1_s4vJ4 of {
                GHC.Int.I32# y#_s4vJ8 [Occ=Once] ->
                    case *# [x#_s4vJ6 y#_s4vJ8] of sat_s4vJ9 {
                      __DEFAULT ->
                          case narrow32Int# [sat_s4vJ9] of sat_s4vJa {
                            __DEFAULT -> GHC.Int.I32# [sat_s4vJa];
                          };
                    };
              };
        };

GHC.Int.$fNumInt32_$c-
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> GHC.Int.Int32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vJb ds1_s4vJc]
        case ds_s4vJb of {
          GHC.Int.I32# x#_s4vJe [Occ=Once] ->
              case ds1_s4vJc of {
                GHC.Int.I32# y#_s4vJg [Occ=Once] ->
                    case -# [x#_s4vJe y#_s4vJg] of sat_s4vJh {
                      __DEFAULT ->
                          case narrow32Int# [sat_s4vJh] of sat_s4vJi {
                            __DEFAULT -> GHC.Int.I32# [sat_s4vJi];
                          };
                    };
              };
        };

GHC.Int.$fNumInt32_$c+
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> GHC.Int.Int32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vJj ds1_s4vJk]
        case ds_s4vJj of {
          GHC.Int.I32# x#_s4vJm [Occ=Once] ->
              case ds1_s4vJk of {
                GHC.Int.I32# y#_s4vJo [Occ=Once] ->
                    case +# [x#_s4vJm y#_s4vJo] of sat_s4vJp {
                      __DEFAULT ->
                          case narrow32Int# [sat_s4vJp] of sat_s4vJq {
                            __DEFAULT -> GHC.Int.I32# [sat_s4vJq];
                          };
                    };
              };
        };

GHC.Int.$fIntegralInt32_$ctoInteger
  :: GHC.Int.Int32 -> GHC.Integer.Type.Integer
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4vJr]
        case ds_s4vJr of {
          GHC.Int.I32# x#_s4vJt [Occ=Once] ->
              GHC.Integer.Type.smallInteger x#_s4vJt;
        };

GHC.Int.$fBitsInt32_$cpopCount :: GHC.Int.Int32 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vJu]
        case ds_s4vJu of {
          GHC.Int.I32# x#_s4vJw [Occ=Once] ->
              case int2Word# [x#_s4vJw] of sat_s4vJx {
                __DEFAULT ->
                    case popCnt32# [sat_s4vJx] of sat_s4vJy {
                      __DEFAULT ->
                          case word2Int# [sat_s4vJy] of sat_s4vJz {
                            __DEFAULT -> GHC.Types.I# [sat_s4vJz];
                          };
                    };
              };
        };

GHC.Int.$fBitsInt32_$cunsafeShiftR
  :: GHC.Int.Int32 -> GHC.Types.Int -> GHC.Int.Int32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vJA ds1_s4vJB]
        case ds_s4vJA of {
          GHC.Int.I32# x#_s4vJD [Occ=Once] ->
              case ds1_s4vJB of {
                GHC.Types.I# i#_s4vJF [Occ=Once] ->
                    case uncheckedIShiftRA# [x#_s4vJD i#_s4vJF] of sat_s4vJG {
                      __DEFAULT -> GHC.Int.I32# [sat_s4vJG];
                    };
              };
        };

GHC.Int.$fBitsInt6 :: GHC.Int.Int32
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I32#! [0#];

GHC.Int.$fNumInt4 :: GHC.Int.Int32
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I32#! [-1#];

GHC.Int.$fBitsInt32_$cshiftR [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int32 -> GHC.Types.Int -> GHC.Int.Int32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4vJH w1_s4vJI]
        case w_s4vJH of {
          GHC.Int.I32# ww1_s4vJK [Occ=Once*] ->
              case w1_s4vJI of {
                GHC.Types.I# ww3_s4vJM ->
                    case >=# [ww3_s4vJM 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftRA# [ww1_s4vJK ww3_s4vJM] of sat_s4vJO {
                            __DEFAULT -> GHC.Int.I32# [sat_s4vJO];
                          };
                      1# ->
                          case <# [ww1_s4vJK 0#] of {
                            __DEFAULT -> GHC.Int.$fBitsInt6;
                            1# -> GHC.Int.$fNumInt4;
                          };
                    };
              };
        };

GHC.Int.$fBitsInt32_$cunsafeShiftL
  :: GHC.Int.Int32 -> GHC.Types.Int -> GHC.Int.Int32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vJQ ds1_s4vJR]
        case ds_s4vJQ of {
          GHC.Int.I32# x#_s4vJT [Occ=Once] ->
              case ds1_s4vJR of {
                GHC.Types.I# i#_s4vJV [Occ=Once] ->
                    case uncheckedIShiftL# [x#_s4vJT i#_s4vJV] of sat_s4vJW {
                      __DEFAULT ->
                          case narrow32Int# [sat_s4vJW] of sat_s4vJX {
                            __DEFAULT -> GHC.Int.I32# [sat_s4vJX];
                          };
                    };
              };
        };

GHC.Int.$fBitsInt32_$cshiftL
  :: GHC.Int.Int32 -> GHC.Types.Int -> GHC.Int.Int32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vJY ds1_s4vJZ]
        case ds_s4vJY of {
          GHC.Int.I32# x#_s4vK1 [Occ=Once] ->
              case ds1_s4vJZ of {
                GHC.Types.I# i#_s4vK3 ->
                    case >=# [i#_s4vK3 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftL# [x#_s4vK1 i#_s4vK3] of sat_s4vK5 {
                            __DEFAULT ->
                                case narrow32Int# [sat_s4vK5] of sat_s4vK6 {
                                  __DEFAULT -> GHC.Int.I32# [sat_s4vK6];
                                };
                          };
                      1# -> GHC.Int.$fBitsInt6;
                    };
              };
        };

GHC.Int.$fBitsInt32_$cisSigned :: GHC.Int.Int32 -> GHC.Types.Bool
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>, Unf=OtherCon []] =
    [] \r [ds_s4vK7] GHC.Types.True [];

GHC.Int.$fBitsInt32_$crotate
  :: GHC.Int.Int32 -> GHC.Types.Int -> GHC.Int.Int32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vK8 ds1_s4vK9]
        case ds_s4vK8 of wild_s4vKa {
          GHC.Int.I32# x#_s4vKb [Occ=Once] ->
              case ds1_s4vK9 of {
                GHC.Types.I# i#_s4vKd [Occ=Once] ->
                    case int2Word# [i#_s4vKd] of sat_s4vKe {
                      __DEFAULT ->
                          case and# [sat_s4vKe 31##] of sat_s4vKf {
                            __DEFAULT ->
                                case word2Int# [sat_s4vKf] of wild2_s4vKg {
                                  __DEFAULT ->
                                      case int2Word# [x#_s4vKb] of sat_s4vKi {
                                        __DEFAULT ->
                                            case
                                                narrow32Word# [sat_s4vKi]
                                            of
                                            x'#_s4vKh [Dmd=<S,U>]
                                            { __DEFAULT ->
                                                  case -# [32# wild2_s4vKg] of sat_s4vKk {
                                                    __DEFAULT ->
                                                        case
                                                            uncheckedShiftRL# [x'#_s4vKh sat_s4vKk]
                                                        of
                                                        sat_s4vKl
                                                        { __DEFAULT ->
                                                              case
                                                                  uncheckedShiftL# [x'#_s4vKh
                                                                                    wild2_s4vKg]
                                                              of
                                                              sat_s4vKj
                                                              { __DEFAULT ->
                                                                    case
                                                                        or# [sat_s4vKj sat_s4vKl]
                                                                    of
                                                                    sat_s4vKm
                                                                    { __DEFAULT ->
                                                                          case
                                                                              word2Int# [sat_s4vKm]
                                                                          of
                                                                          sat_s4vKn
                                                                          { __DEFAULT ->
                                                                                case
                                                                                    narrow32Int# [sat_s4vKn]
                                                                                of
                                                                                sat_s4vKo
                                                                                { __DEFAULT ->
                                                                                      GHC.Int.I32# [sat_s4vKo];
                                                                                };
                                                                          };
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                  0# -> wild_s4vKa;
                                };
                          };
                    };
              };
        };

GHC.Int.$fBitsInt32_$cshift [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int32 -> GHC.Types.Int -> GHC.Int.Int32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vKp ds1_s4vKq]
        case ds_s4vKp of {
          GHC.Int.I32# x#_s4vKs [Occ=Once*] ->
              case ds1_s4vKq of {
                GHC.Types.I# i#_s4vKu ->
                    case >=# [i#_s4vKu 0#] of {
                      __DEFAULT ->
                          case negateInt# [i#_s4vKu] of b_s4vKw [Dmd=<S,U>] {
                            __DEFAULT ->
                                case >=# [b_s4vKw 64#] of {
                                  __DEFAULT ->
                                      case uncheckedIShiftRA# [x#_s4vKs b_s4vKw] of sat_s4vKy {
                                        __DEFAULT -> GHC.Int.I32# [sat_s4vKy];
                                      };
                                  1# ->
                                      case <# [x#_s4vKs 0#] of {
                                        __DEFAULT -> GHC.Int.$fBitsInt6;
                                        1# -> GHC.Int.$fNumInt4;
                                      };
                                };
                          };
                      1# ->
                          case >=# [i#_s4vKu 64#] of {
                            __DEFAULT ->
                                case uncheckedIShiftL# [x#_s4vKs i#_s4vKu] of sat_s4vKB {
                                  __DEFAULT ->
                                      case narrow32Int# [sat_s4vKB] of sat_s4vKC {
                                        __DEFAULT -> GHC.Int.I32# [sat_s4vKC];
                                      };
                                };
                            1# -> GHC.Int.$fBitsInt6;
                          };
                    };
              };
        };

GHC.Int.$fBitsInt32_$ccomplement :: GHC.Int.Int32 -> GHC.Int.Int32
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vKD]
        case ds_s4vKD of {
          GHC.Int.I32# x#_s4vKF [Occ=Once] ->
              case int2Word# [x#_s4vKF] of sat_s4vKG {
                __DEFAULT ->
                    case not# [sat_s4vKG] of sat_s4vKH {
                      __DEFAULT ->
                          case word2Int# [sat_s4vKH] of sat_s4vKI {
                            __DEFAULT -> GHC.Int.I32# [sat_s4vKI];
                          };
                    };
              };
        };

GHC.Int.$fBitsInt32_$cxor
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> GHC.Int.Int32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vKJ ds1_s4vKK]
        case ds_s4vKJ of {
          GHC.Int.I32# x#_s4vKM [Occ=Once] ->
              case ds1_s4vKK of {
                GHC.Int.I32# y#_s4vKO [Occ=Once] ->
                    case int2Word# [y#_s4vKO] of sat_s4vKQ {
                      __DEFAULT ->
                          case int2Word# [x#_s4vKM] of sat_s4vKP {
                            __DEFAULT ->
                                case xor# [sat_s4vKP sat_s4vKQ] of sat_s4vKR {
                                  __DEFAULT ->
                                      case word2Int# [sat_s4vKR] of sat_s4vKS {
                                        __DEFAULT -> GHC.Int.I32# [sat_s4vKS];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fBitsInt32_$c.|.
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> GHC.Int.Int32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vKT ds1_s4vKU]
        case ds_s4vKT of {
          GHC.Int.I32# x#_s4vKW [Occ=Once] ->
              case ds1_s4vKU of {
                GHC.Int.I32# y#_s4vKY [Occ=Once] ->
                    case int2Word# [y#_s4vKY] of sat_s4vL0 {
                      __DEFAULT ->
                          case int2Word# [x#_s4vKW] of sat_s4vKZ {
                            __DEFAULT ->
                                case or# [sat_s4vKZ sat_s4vL0] of sat_s4vL1 {
                                  __DEFAULT ->
                                      case word2Int# [sat_s4vL1] of sat_s4vL2 {
                                        __DEFAULT -> GHC.Int.I32# [sat_s4vL2];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fBitsInt32_$c.&.
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> GHC.Int.Int32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vL3 ds1_s4vL4]
        case ds_s4vL3 of {
          GHC.Int.I32# x#_s4vL6 [Occ=Once] ->
              case ds1_s4vL4 of {
                GHC.Int.I32# y#_s4vL8 [Occ=Once] ->
                    case int2Word# [y#_s4vL8] of sat_s4vLa {
                      __DEFAULT ->
                          case int2Word# [x#_s4vL6] of sat_s4vL9 {
                            __DEFAULT ->
                                case and# [sat_s4vL9 sat_s4vLa] of sat_s4vLb {
                                  __DEFAULT ->
                                      case word2Int# [sat_s4vLb] of sat_s4vLc {
                                        __DEFAULT -> GHC.Int.I32# [sat_s4vLc];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fFiniteBitsInt32_$ccountTrailingZeros
  :: GHC.Int.Int32 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vLd]
        case ds_s4vLd of {
          GHC.Int.I32# x#_s4vLf [Occ=Once] ->
              case int2Word# [x#_s4vLf] of sat_s4vLg {
                __DEFAULT ->
                    case ctz32# [sat_s4vLg] of sat_s4vLh {
                      __DEFAULT ->
                          case word2Int# [sat_s4vLh] of sat_s4vLi {
                            __DEFAULT -> GHC.Types.I# [sat_s4vLi];
                          };
                    };
              };
        };

GHC.Int.$fFiniteBitsInt32_$ccountLeadingZeros
  :: GHC.Int.Int32 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vLj]
        case ds_s4vLj of {
          GHC.Int.I32# x#_s4vLl [Occ=Once] ->
              case int2Word# [x#_s4vLl] of sat_s4vLm {
                __DEFAULT ->
                    case clz32# [sat_s4vLm] of sat_s4vLn {
                      __DEFAULT ->
                          case word2Int# [sat_s4vLn] of sat_s4vLo {
                            __DEFAULT -> GHC.Types.I# [sat_s4vLo];
                          };
                    };
              };
        };

GHC.Int.$fBitsInt4 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [32#];

GHC.Int.$fBitsInt32_$cfiniteBitSize
  :: GHC.Int.Int32 -> GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>m, Unf=OtherCon []] =
    [] \r [ds_s4vLp] GHC.Int.$fBitsInt4;

GHC.Int.$fNumInt64_$cfromInteger
  :: GHC.Integer.Type.Integer -> GHC.Int.Int64
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [i_s4vLq]
        case GHC.Integer.Type.integerToInt i_s4vLq of wild_s4vLr {
          __DEFAULT -> GHC.Int.I64# [wild_s4vLr];
        };

GHC.Int.$fNumInt64_$cnegate :: GHC.Int.Int64 -> GHC.Int.Int64
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vLs]
        case ds_s4vLs of {
          GHC.Int.I64# x#_s4vLu [Occ=Once] ->
              case negateInt# [x#_s4vLu] of sat_s4vLv {
                __DEFAULT -> GHC.Int.I64# [sat_s4vLv];
              };
        };

GHC.Int.$fNumInt64_$c*
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> GHC.Int.Int64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vLw ds1_s4vLx]
        case ds_s4vLw of {
          GHC.Int.I64# x#_s4vLz [Occ=Once] ->
              case ds1_s4vLx of {
                GHC.Int.I64# y#_s4vLB [Occ=Once] ->
                    case *# [x#_s4vLz y#_s4vLB] of sat_s4vLC {
                      __DEFAULT -> GHC.Int.I64# [sat_s4vLC];
                    };
              };
        };

GHC.Int.$fNumInt64_$c-
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> GHC.Int.Int64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vLD ds1_s4vLE]
        case ds_s4vLD of {
          GHC.Int.I64# x#_s4vLG [Occ=Once] ->
              case ds1_s4vLE of {
                GHC.Int.I64# y#_s4vLI [Occ=Once] ->
                    case -# [x#_s4vLG y#_s4vLI] of sat_s4vLJ {
                      __DEFAULT -> GHC.Int.I64# [sat_s4vLJ];
                    };
              };
        };

GHC.Int.$fNumInt64_$c+
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> GHC.Int.Int64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vLK ds1_s4vLL]
        case ds_s4vLK of {
          GHC.Int.I64# x#_s4vLN [Occ=Once] ->
              case ds1_s4vLL of {
                GHC.Int.I64# y#_s4vLP [Occ=Once] ->
                    case +# [x#_s4vLN y#_s4vLP] of sat_s4vLQ {
                      __DEFAULT -> GHC.Int.I64# [sat_s4vLQ];
                    };
              };
        };

GHC.Int.$fIntegralInt64_$ctoInteger
  :: GHC.Int.Int64 -> GHC.Integer.Type.Integer
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4vLR]
        case ds_s4vLR of {
          GHC.Int.I64# x#_s4vLT [Occ=Once] ->
              GHC.Integer.Type.smallInteger x#_s4vLT;
        };

GHC.Int.$fBitsInt64_$cpopCount :: GHC.Int.Int64 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vLU]
        case ds_s4vLU of {
          GHC.Int.I64# x#_s4vLW [Occ=Once] ->
              case int2Word# [x#_s4vLW] of sat_s4vLX {
                __DEFAULT ->
                    case popCnt64# [sat_s4vLX] of sat_s4vLY {
                      __DEFAULT ->
                          case word2Int# [sat_s4vLY] of sat_s4vLZ {
                            __DEFAULT -> GHC.Types.I# [sat_s4vLZ];
                          };
                    };
              };
        };

GHC.Int.$fBitsInt64_$cunsafeShiftR
  :: GHC.Int.Int64 -> GHC.Types.Int -> GHC.Int.Int64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vM0 ds1_s4vM1]
        case ds_s4vM0 of {
          GHC.Int.I64# x#_s4vM3 [Occ=Once] ->
              case ds1_s4vM1 of {
                GHC.Types.I# i#_s4vM5 [Occ=Once] ->
                    case uncheckedIShiftRA# [x#_s4vM3 i#_s4vM5] of sat_s4vM6 {
                      __DEFAULT -> GHC.Int.I64# [sat_s4vM6];
                    };
              };
        };

GHC.Int.$fBitsInt10 :: GHC.Int.Int64
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I64#! [0#];

GHC.Int.$fNumInt6 :: GHC.Int.Int64
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I64#! [-1#];

GHC.Int.$fBitsInt64_$cshiftR [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int64 -> GHC.Types.Int -> GHC.Int.Int64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4vM7 w1_s4vM8]
        case w_s4vM7 of {
          GHC.Int.I64# ww1_s4vMa [Occ=Once*] ->
              case w1_s4vM8 of {
                GHC.Types.I# ww3_s4vMc ->
                    case >=# [ww3_s4vMc 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftRA# [ww1_s4vMa ww3_s4vMc] of sat_s4vMe {
                            __DEFAULT -> GHC.Int.I64# [sat_s4vMe];
                          };
                      1# ->
                          case <# [ww1_s4vMa 0#] of {
                            __DEFAULT -> GHC.Int.$fBitsInt10;
                            1# -> GHC.Int.$fNumInt6;
                          };
                    };
              };
        };

GHC.Int.$fBitsInt64_$cunsafeShiftL
  :: GHC.Int.Int64 -> GHC.Types.Int -> GHC.Int.Int64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vMg ds1_s4vMh]
        case ds_s4vMg of {
          GHC.Int.I64# x#_s4vMj [Occ=Once] ->
              case ds1_s4vMh of {
                GHC.Types.I# i#_s4vMl [Occ=Once] ->
                    case uncheckedIShiftL# [x#_s4vMj i#_s4vMl] of sat_s4vMm {
                      __DEFAULT -> GHC.Int.I64# [sat_s4vMm];
                    };
              };
        };

GHC.Int.$fBitsInt64_$cshiftL
  :: GHC.Int.Int64 -> GHC.Types.Int -> GHC.Int.Int64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vMn ds1_s4vMo]
        case ds_s4vMn of {
          GHC.Int.I64# x#_s4vMq [Occ=Once] ->
              case ds1_s4vMo of {
                GHC.Types.I# i#_s4vMs ->
                    case >=# [i#_s4vMs 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftL# [x#_s4vMq i#_s4vMs] of sat_s4vMu {
                            __DEFAULT -> GHC.Int.I64# [sat_s4vMu];
                          };
                      1# -> GHC.Int.$fBitsInt10;
                    };
              };
        };

GHC.Int.$fBitsInt64_$cisSigned :: GHC.Int.Int64 -> GHC.Types.Bool
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>, Unf=OtherCon []] =
    [] \r [ds_s4vMv] GHC.Types.True [];

GHC.Int.$fBitsInt64_$crotate
  :: GHC.Int.Int64 -> GHC.Types.Int -> GHC.Int.Int64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vMw ds1_s4vMx]
        case ds_s4vMw of wild_s4vMy {
          GHC.Int.I64# x#_s4vMz [Occ=Once] ->
              case ds1_s4vMx of {
                GHC.Types.I# i#_s4vMB [Occ=Once] ->
                    case int2Word# [i#_s4vMB] of sat_s4vMC {
                      __DEFAULT ->
                          case and# [sat_s4vMC 63##] of sat_s4vMD {
                            __DEFAULT ->
                                case word2Int# [sat_s4vMD] of wild2_s4vME {
                                  __DEFAULT ->
                                      case int2Word# [x#_s4vMz] of x'#_s4vMF [Dmd=<S,U>] {
                                        __DEFAULT ->
                                            case -# [64# wild2_s4vME] of sat_s4vMH {
                                              __DEFAULT ->
                                                  case
                                                      uncheckedShiftRL# [x'#_s4vMF sat_s4vMH]
                                                  of
                                                  sat_s4vMI
                                                  { __DEFAULT ->
                                                        case
                                                            uncheckedShiftL# [x'#_s4vMF wild2_s4vME]
                                                        of
                                                        sat_s4vMG
                                                        { __DEFAULT ->
                                                              case
                                                                  or# [sat_s4vMG sat_s4vMI]
                                                              of
                                                              sat_s4vMJ
                                                              { __DEFAULT ->
                                                                    case
                                                                        word2Int# [sat_s4vMJ]
                                                                    of
                                                                    sat_s4vMK
                                                                    { __DEFAULT ->
                                                                          GHC.Int.I64# [sat_s4vMK];
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                  0# -> wild_s4vMy;
                                };
                          };
                    };
              };
        };

GHC.Int.$fBitsInt64_$cshift [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int64 -> GHC.Types.Int -> GHC.Int.Int64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vML ds1_s4vMM]
        case ds_s4vML of {
          GHC.Int.I64# x#_s4vMO [Occ=Once*] ->
              case ds1_s4vMM of {
                GHC.Types.I# i#_s4vMQ ->
                    case >=# [i#_s4vMQ 0#] of {
                      __DEFAULT ->
                          case negateInt# [i#_s4vMQ] of b_s4vMS [Dmd=<S,U>] {
                            __DEFAULT ->
                                case >=# [b_s4vMS 64#] of {
                                  __DEFAULT ->
                                      case uncheckedIShiftRA# [x#_s4vMO b_s4vMS] of sat_s4vMU {
                                        __DEFAULT -> GHC.Int.I64# [sat_s4vMU];
                                      };
                                  1# ->
                                      case <# [x#_s4vMO 0#] of {
                                        __DEFAULT -> GHC.Int.$fBitsInt10;
                                        1# -> GHC.Int.$fNumInt6;
                                      };
                                };
                          };
                      1# ->
                          case >=# [i#_s4vMQ 64#] of {
                            __DEFAULT ->
                                case uncheckedIShiftL# [x#_s4vMO i#_s4vMQ] of sat_s4vMX {
                                  __DEFAULT -> GHC.Int.I64# [sat_s4vMX];
                                };
                            1# -> GHC.Int.$fBitsInt10;
                          };
                    };
              };
        };

GHC.Int.$fBitsInt64_$ccomplement :: GHC.Int.Int64 -> GHC.Int.Int64
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vMY]
        case ds_s4vMY of {
          GHC.Int.I64# x#_s4vN0 [Occ=Once] ->
              case int2Word# [x#_s4vN0] of sat_s4vN1 {
                __DEFAULT ->
                    case xor# [sat_s4vN1 18446744073709551615##] of sat_s4vN2 {
                      __DEFAULT ->
                          case word2Int# [sat_s4vN2] of sat_s4vN3 {
                            __DEFAULT -> GHC.Int.I64# [sat_s4vN3];
                          };
                    };
              };
        };

GHC.Int.$fBitsInt64_$cxor
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> GHC.Int.Int64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vN4 ds1_s4vN5]
        case ds_s4vN4 of {
          GHC.Int.I64# x#_s4vN7 [Occ=Once] ->
              case ds1_s4vN5 of {
                GHC.Int.I64# y#_s4vN9 [Occ=Once] ->
                    case int2Word# [y#_s4vN9] of sat_s4vNb {
                      __DEFAULT ->
                          case int2Word# [x#_s4vN7] of sat_s4vNa {
                            __DEFAULT ->
                                case xor# [sat_s4vNa sat_s4vNb] of sat_s4vNc {
                                  __DEFAULT ->
                                      case word2Int# [sat_s4vNc] of sat_s4vNd {
                                        __DEFAULT -> GHC.Int.I64# [sat_s4vNd];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fBitsInt64_$c.|.
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> GHC.Int.Int64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vNe ds1_s4vNf]
        case ds_s4vNe of {
          GHC.Int.I64# x#_s4vNh [Occ=Once] ->
              case ds1_s4vNf of {
                GHC.Int.I64# y#_s4vNj [Occ=Once] ->
                    case int2Word# [y#_s4vNj] of sat_s4vNl {
                      __DEFAULT ->
                          case int2Word# [x#_s4vNh] of sat_s4vNk {
                            __DEFAULT ->
                                case or# [sat_s4vNk sat_s4vNl] of sat_s4vNm {
                                  __DEFAULT ->
                                      case word2Int# [sat_s4vNm] of sat_s4vNn {
                                        __DEFAULT -> GHC.Int.I64# [sat_s4vNn];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fBitsInt64_$c.&.
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> GHC.Int.Int64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vNo ds1_s4vNp]
        case ds_s4vNo of {
          GHC.Int.I64# x#_s4vNr [Occ=Once] ->
              case ds1_s4vNp of {
                GHC.Int.I64# y#_s4vNt [Occ=Once] ->
                    case int2Word# [y#_s4vNt] of sat_s4vNv {
                      __DEFAULT ->
                          case int2Word# [x#_s4vNr] of sat_s4vNu {
                            __DEFAULT ->
                                case and# [sat_s4vNu sat_s4vNv] of sat_s4vNw {
                                  __DEFAULT ->
                                      case word2Int# [sat_s4vNw] of sat_s4vNx {
                                        __DEFAULT -> GHC.Int.I64# [sat_s4vNx];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fFiniteBitsInt64_$ccountTrailingZeros
  :: GHC.Int.Int64 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vNy]
        case ds_s4vNy of {
          GHC.Int.I64# x#_s4vNA [Occ=Once] ->
              case int2Word# [x#_s4vNA] of sat_s4vNB {
                __DEFAULT ->
                    case ctz64# [sat_s4vNB] of sat_s4vNC {
                      __DEFAULT ->
                          case word2Int# [sat_s4vNC] of sat_s4vND {
                            __DEFAULT -> GHC.Types.I# [sat_s4vND];
                          };
                    };
              };
        };

GHC.Int.$fFiniteBitsInt64_$ccountLeadingZeros
  :: GHC.Int.Int64 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vNE]
        case ds_s4vNE of {
          GHC.Int.I64# x#_s4vNG [Occ=Once] ->
              case int2Word# [x#_s4vNG] of sat_s4vNH {
                __DEFAULT ->
                    case clz64# [sat_s4vNH] of sat_s4vNI {
                      __DEFAULT ->
                          case word2Int# [sat_s4vNI] of sat_s4vNJ {
                            __DEFAULT -> GHC.Types.I# [sat_s4vNJ];
                          };
                    };
              };
        };

GHC.Int.$fBitsInt7 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [64#];

GHC.Int.$fBitsInt64_$cfiniteBitSize
  :: GHC.Int.Int64 -> GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>m, Unf=OtherCon []] =
    [] \r [ds_s4vNK] GHC.Int.$fBitsInt7;

GHC.Int.eqInt8 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4vNL ds1_s4vNM]
        case ds_s4vNL of {
          GHC.Int.I8# x_s4vNO [Occ=Once] ->
              case ds1_s4vNM of {
                GHC.Int.I8# y_s4vNQ [Occ=Once] ->
                    case ==# [x_s4vNO y_s4vNQ] of sat_s4vNR {
                      __DEFAULT -> tagToEnum# [sat_s4vNR];
                    };
              };
        };

GHC.Int.$fEqInt8 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.Int.Int8
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.Int.eqInt8 GHC.Int.neInt8];

GHC.Int.gtInt8 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4vNS ds1_s4vNT]
        case ds_s4vNS of {
          GHC.Int.I8# x_s4vNV [Occ=Once] ->
              case ds1_s4vNT of {
                GHC.Int.I8# y_s4vNX [Occ=Once] ->
                    case ># [x_s4vNV y_s4vNX] of sat_s4vNY {
                      __DEFAULT -> tagToEnum# [sat_s4vNY];
                    };
              };
        };

GHC.Int.geInt8 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4vNZ ds1_s4vO0]
        case ds_s4vNZ of {
          GHC.Int.I8# x_s4vO2 [Occ=Once] ->
              case ds1_s4vO0 of {
                GHC.Int.I8# y_s4vO4 [Occ=Once] ->
                    case >=# [x_s4vO2 y_s4vO4] of sat_s4vO5 {
                      __DEFAULT -> tagToEnum# [sat_s4vO5];
                    };
              };
        };

GHC.Int.ltInt8 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4vO6 ds1_s4vO7]
        case ds_s4vO6 of {
          GHC.Int.I8# x_s4vO9 [Occ=Once] ->
              case ds1_s4vO7 of {
                GHC.Int.I8# y_s4vOb [Occ=Once] ->
                    case <# [x_s4vO9 y_s4vOb] of sat_s4vOc {
                      __DEFAULT -> tagToEnum# [sat_s4vOc];
                    };
              };
        };

GHC.Int.leInt8 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4vOd ds1_s4vOe]
        case ds_s4vOd of {
          GHC.Int.I8# x_s4vOg [Occ=Once] ->
              case ds1_s4vOe of {
                GHC.Int.I8# y_s4vOi [Occ=Once] ->
                    case <=# [x_s4vOg y_s4vOi] of sat_s4vOj {
                      __DEFAULT -> tagToEnum# [sat_s4vOj];
                    };
              };
        };

GHC.Int.$fOrdInt8_$ccompare
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [x_s4vOk y_s4vOl]
        case x_s4vOk of {
          GHC.Int.I8# x1_s4vOn ->
              case y_s4vOl of {
                GHC.Int.I8# y1_s4vOp ->
                    case ==# [x1_s4vOn y1_s4vOp] of {
                      __DEFAULT ->
                          case <=# [x1_s4vOn y1_s4vOp] of {
                            __DEFAULT -> GHC.Types.GT [];
                            1# -> GHC.Types.LT [];
                          };
                      1# -> GHC.Types.EQ [];
                    };
              };
        };

GHC.Int.$fOrdInt8_$cmax
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> GHC.Int.Int8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s4vOs y_s4vOt]
        case x_s4vOs of wild_s4vOu {
          GHC.Int.I8# x1_s4vOv [Occ=Once] ->
              case y_s4vOt of wild1_s4vOw {
                GHC.Int.I8# y1_s4vOx [Occ=Once] ->
                    case <=# [x1_s4vOv y1_s4vOx] of {
                      __DEFAULT -> wild_s4vOu;
                      1# -> wild1_s4vOw;
                    };
              };
        };

GHC.Int.$fOrdInt8_$cmin
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> GHC.Int.Int8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s4vOz y_s4vOA]
        case x_s4vOz of wild_s4vOB {
          GHC.Int.I8# x1_s4vOC [Occ=Once] ->
              case y_s4vOA of wild1_s4vOD {
                GHC.Int.I8# y1_s4vOE [Occ=Once] ->
                    case <=# [x1_s4vOC y1_s4vOE] of {
                      __DEFAULT -> wild1_s4vOD;
                      1# -> wild_s4vOB;
                    };
              };
        };

GHC.Int.$fOrdInt8 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord GHC.Int.Int8
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.Int.$fEqInt8
                                      GHC.Int.$fOrdInt8_$ccompare
                                      GHC.Int.ltInt8
                                      GHC.Int.leInt8
                                      GHC.Int.gtInt8
                                      GHC.Int.geInt8
                                      GHC.Int.$fOrdInt8_$cmax
                                      GHC.Int.$fOrdInt8_$cmin];

GHC.Int.$fIxInt8_$cinRange
  :: (GHC.Int.Int8, GHC.Int.Int8) -> GHC.Int.Int8 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S(S)L),1*U(1*U(U),1*U(U))><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4vOG i_s4vOH]
        case ds_s4vOG of {
          (,) m_s4vOJ [Occ=Once!] n_s4vOK [Occ=Once!] ->
              case m_s4vOJ of {
                GHC.Int.I8# x_s4vOM [Occ=Once] ->
                    case i_s4vOH of {
                      GHC.Int.I8# y_s4vOO ->
                          case <=# [x_s4vOM y_s4vOO] of {
                            __DEFAULT -> GHC.Types.False [];
                            1# ->
                                case n_s4vOK of {
                                  GHC.Int.I8# y1_s4vOR [Occ=Once] ->
                                      case <=# [y_s4vOO y1_s4vOR] of sat_s4vOS {
                                        __DEFAULT -> tagToEnum# [sat_s4vOS];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fNumInt7 :: GHC.Int.Int8
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I8#! [1#];

GHC.Int.$fNumInt8_$csignum :: GHC.Int.Int8 -> GHC.Int.Int8
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s4vOT]
        case x_s4vOT of {
          GHC.Int.I8# x1_s4vOV ->
              case ># [x1_s4vOV 0#] of {
                __DEFAULT ->
                    case x1_s4vOV of {
                      __DEFAULT -> GHC.Int.$fNumInt9;
                      0# -> GHC.Int.$fBitsInt13;
                    };
                1# -> GHC.Int.$fNumInt7;
              };
        };

GHC.Int.$fNumInt8_$cabs :: GHC.Int.Int8 -> GHC.Int.Int8
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s4vOY]
        case x_s4vOY of wild_s4vOZ {
          GHC.Int.I8# x1_s4vP0 ->
              case >=# [x1_s4vP0 0#] of {
                __DEFAULT ->
                    case negateInt# [x1_s4vP0] of sat_s4vP2 {
                      __DEFAULT ->
                          case narrow8Int# [sat_s4vP2] of sat_s4vP3 {
                            __DEFAULT -> GHC.Int.I8# [sat_s4vP3];
                          };
                    };
                1# -> wild_s4vOZ;
              };
        };

GHC.Int.$fNumInt8 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Num.Num GHC.Int.Int8
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Num.C:Num! [GHC.Int.$fNumInt8_$c+
                                  GHC.Int.$fNumInt8_$c-
                                  GHC.Int.$fNumInt8_$c*
                                  GHC.Int.$fNumInt8_$cnegate
                                  GHC.Int.$fNumInt8_$cabs
                                  GHC.Int.$fNumInt8_$csignum
                                  GHC.Int.$fNumInt8_$cfromInteger];

GHC.Int.$fBitsInt12 :: GHC.Base.Maybe GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [GHC.Int.$fBitsInt11];

GHC.Int.$fBitsInt8_$cbitSizeMaybe
  :: GHC.Int.Int8 -> GHC.Base.Maybe GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>m2, Unf=OtherCon []] =
    [] \r [i_s4vP4] GHC.Int.$fBitsInt12;

GHC.Int.$fBitsInt8_$cbit [InlPrag=INLINE (sat-args=0)]
  :: GHC.Types.Int -> GHC.Int.Int8
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [i_s4vP5]
        case i_s4vP5 of {
          GHC.Types.I# i#_s4vP7 ->
              case >=# [i#_s4vP7 64#] of {
                __DEFAULT ->
                    case uncheckedIShiftL# [1# i#_s4vP7] of sat_s4vP9 {
                      __DEFAULT ->
                          case narrow8Int# [sat_s4vP9] of sat_s4vPa {
                            __DEFAULT -> GHC.Int.I8# [sat_s4vPa];
                          };
                    };
                1# -> GHC.Int.$fBitsInt13;
              };
        };

GHC.Int.$fBitsInt8_$ctestBit [InlPrag=INLINE (sat-args=0)]
  :: GHC.Int.Int8 -> GHC.Types.Int -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [x_s4vPb i_s4vPc]
        case x_s4vPb of {
          GHC.Int.I8# x#_s4vPe [Occ=Once] ->
              case i_s4vPc of {
                GHC.Types.I# i#_s4vPg ->
                    case >=# [i#_s4vPg 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftL# [1# i#_s4vPg] of sat_s4vPj {
                            __DEFAULT ->
                                case narrow8Int# [sat_s4vPj] of sat_s4vPk {
                                  __DEFAULT ->
                                      case int2Word# [sat_s4vPk] of sat_s4vPl {
                                        __DEFAULT ->
                                            case int2Word# [x#_s4vPe] of sat_s4vPi {
                                              __DEFAULT ->
                                                  case and# [sat_s4vPi sat_s4vPl] of sat_s4vPm {
                                                    __DEFAULT ->
                                                        case word2Int# [sat_s4vPm] of {
                                                          __DEFAULT -> GHC.Types.True [];
                                                          0# -> GHC.Types.False [];
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                      1# -> GHC.Types.False [];
                    };
              };
        };

GHC.Int.$fBitsInt8_$crotateR [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int8 -> GHC.Types.Int -> GHC.Int.Int8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s4vPo eta1_s4vPp]
        case eta_s4vPo of wild_s4vPq {
          GHC.Int.I8# x#_s4vPr [Occ=Once] ->
              case eta1_s4vPp of {
                GHC.Types.I# x1_s4vPt [Occ=Once] ->
                    case negateInt# [x1_s4vPt] of sat_s4vPu {
                      __DEFAULT ->
                          case int2Word# [sat_s4vPu] of sat_s4vPv {
                            __DEFAULT ->
                                case and# [sat_s4vPv 7##] of sat_s4vPw {
                                  __DEFAULT ->
                                      case word2Int# [sat_s4vPw] of wild2_s4vPx {
                                        __DEFAULT ->
                                            case int2Word# [x#_s4vPr] of sat_s4vPz {
                                              __DEFAULT ->
                                                  case
                                                      narrow8Word# [sat_s4vPz]
                                                  of
                                                  x'#_s4vPy [Dmd=<S,U>]
                                                  { __DEFAULT ->
                                                        case -# [8# wild2_s4vPx] of sat_s4vPB {
                                                          __DEFAULT ->
                                                              case
                                                                  uncheckedShiftRL# [x'#_s4vPy
                                                                                     sat_s4vPB]
                                                              of
                                                              sat_s4vPC
                                                              { __DEFAULT ->
                                                                    case
                                                                        uncheckedShiftL# [x'#_s4vPy
                                                                                          wild2_s4vPx]
                                                                    of
                                                                    sat_s4vPA
                                                                    { __DEFAULT ->
                                                                          case
                                                                              or# [sat_s4vPA
                                                                                   sat_s4vPC]
                                                                          of
                                                                          sat_s4vPD
                                                                          { __DEFAULT ->
                                                                                case
                                                                                    word2Int# [sat_s4vPD]
                                                                                of
                                                                                sat_s4vPE
                                                                                { __DEFAULT ->
                                                                                      case
                                                                                          narrow8Int# [sat_s4vPE]
                                                                                      of
                                                                                      sat_s4vPF
                                                                                      { __DEFAULT ->
                                                                                            GHC.Int.I8# [sat_s4vPF];
                                                                                      };
                                                                                };
                                                                          };
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                        0# -> wild_s4vPq;
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fBitsInt8_$ccomplementBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int8 -> GHC.Types.Int -> GHC.Int.Int8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s4vPG eta1_s4vPH]
        case eta_s4vPG of wild_s4vPI {
          GHC.Int.I8# x#_s4vPJ [Occ=Once] ->
              case eta1_s4vPH of {
                GHC.Types.I# i#_s4vPL ->
                    case >=# [i#_s4vPL 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftL# [1# i#_s4vPL] of sat_s4vPO {
                            __DEFAULT ->
                                case narrow8Int# [sat_s4vPO] of sat_s4vPP {
                                  __DEFAULT ->
                                      case int2Word# [sat_s4vPP] of sat_s4vPQ {
                                        __DEFAULT ->
                                            case int2Word# [x#_s4vPJ] of sat_s4vPN {
                                              __DEFAULT ->
                                                  case xor# [sat_s4vPN sat_s4vPQ] of sat_s4vPR {
                                                    __DEFAULT ->
                                                        case word2Int# [sat_s4vPR] of sat_s4vPS {
                                                          __DEFAULT -> GHC.Int.I8# [sat_s4vPS];
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                      1# -> wild_s4vPI;
                    };
              };
        };

GHC.Int.$fBitsInt8_$cclearBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int8 -> GHC.Types.Int -> GHC.Int.Int8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s4vPT eta1_s4vPU]
        case eta_s4vPT of {
          GHC.Int.I8# x#_s4vPW [Occ=Once*] ->
              case eta1_s4vPU of {
                GHC.Types.I# i#_s4vPY ->
                    case >=# [i#_s4vPY 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftL# [1# i#_s4vPY] of sat_s4vQ1 {
                            __DEFAULT ->
                                case narrow8Int# [sat_s4vQ1] of sat_s4vQ2 {
                                  __DEFAULT ->
                                      case int2Word# [sat_s4vQ2] of sat_s4vQ3 {
                                        __DEFAULT ->
                                            case not# [sat_s4vQ3] of sat_s4vQ4 {
                                              __DEFAULT ->
                                                  case int2Word# [x#_s4vPW] of sat_s4vQ0 {
                                                    __DEFAULT ->
                                                        case
                                                            and# [sat_s4vQ0 sat_s4vQ4]
                                                        of
                                                        sat_s4vQ5
                                                        { __DEFAULT ->
                                                              case
                                                                  word2Int# [sat_s4vQ5]
                                                              of
                                                              sat_s4vQ6
                                                              { __DEFAULT ->
                                                                    GHC.Int.I8# [sat_s4vQ6];
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                      1# ->
                          case int2Word# [x#_s4vPW] of sat_s4vQ7 {
                            __DEFAULT ->
                                case and# [sat_s4vQ7 18446744073709551615##] of sat_s4vQ8 {
                                  __DEFAULT ->
                                      case word2Int# [sat_s4vQ8] of sat_s4vQ9 {
                                        __DEFAULT -> GHC.Int.I8# [sat_s4vQ9];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fBitsInt8_$csetBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int8 -> GHC.Types.Int -> GHC.Int.Int8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s4vQa eta1_s4vQb]
        case eta_s4vQa of wild_s4vQc {
          GHC.Int.I8# x#_s4vQd [Occ=Once] ->
              case eta1_s4vQb of {
                GHC.Types.I# i#_s4vQf ->
                    case >=# [i#_s4vQf 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftL# [1# i#_s4vQf] of sat_s4vQi {
                            __DEFAULT ->
                                case narrow8Int# [sat_s4vQi] of sat_s4vQj {
                                  __DEFAULT ->
                                      case int2Word# [sat_s4vQj] of sat_s4vQk {
                                        __DEFAULT ->
                                            case int2Word# [x#_s4vQd] of sat_s4vQh {
                                              __DEFAULT ->
                                                  case or# [sat_s4vQh sat_s4vQk] of sat_s4vQl {
                                                    __DEFAULT ->
                                                        case word2Int# [sat_s4vQl] of sat_s4vQm {
                                                          __DEFAULT -> GHC.Int.I8# [sat_s4vQm];
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                      1# -> wild_s4vQc;
                    };
              };
        };

GHC.Int.$fBitsInt8_$crotateL [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int8 -> GHC.Types.Int -> GHC.Int.Int8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Int.$fBitsInt8_$crotate eta_B2 eta_B1;

GHC.Int.$fBitsInt8 [InlPrag=NOUSERINLINE CONLIKE]
  :: Data.Bits.Bits GHC.Int.Int8
[GblId[DFunId], Caf=NoCafRefs] =
    CCS_DONT_CARE Data.Bits.C:Bits! [GHC.Int.$fEqInt8
                                     GHC.Int.$fBitsInt8_$c.&.
                                     GHC.Int.$fBitsInt8_$c.|.
                                     GHC.Int.$fBitsInt8_$cxor
                                     GHC.Int.$fBitsInt8_$ccomplement
                                     GHC.Int.$fBitsInt8_$cshift
                                     GHC.Int.$fBitsInt8_$crotate
                                     GHC.Int.$fBitsInt13
                                     GHC.Int.$fBitsInt8_$cbit
                                     GHC.Int.$fBitsInt8_$csetBit
                                     GHC.Int.$fBitsInt8_$cclearBit
                                     GHC.Int.$fBitsInt8_$ccomplementBit
                                     GHC.Int.$fBitsInt8_$ctestBit
                                     GHC.Int.$fBitsInt8_$cbitSizeMaybe
                                     GHC.Int.$fBitsInt8_$cfiniteBitSize
                                     GHC.Int.$fBitsInt8_$cisSigned
                                     GHC.Int.$fBitsInt8_$cshiftL
                                     GHC.Int.$fBitsInt8_$cunsafeShiftL
                                     GHC.Int.$fBitsInt8_$cshiftR
                                     GHC.Int.$fBitsInt8_$cunsafeShiftR
                                     GHC.Int.$fBitsInt8_$crotateL
                                     GHC.Int.$fBitsInt8_$crotateR
                                     GHC.Int.$fBitsInt8_$cpopCount];

GHC.Int.$fFiniteBitsInt8 [InlPrag=NOUSERINLINE CONLIKE]
  :: Data.Bits.FiniteBits GHC.Int.Int8
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE Data.Bits.C:FiniteBits! [GHC.Int.$fBitsInt8
                                           GHC.Int.$fBitsInt8_$cfiniteBitSize
                                           GHC.Int.$fFiniteBitsInt8_$ccountLeadingZeros
                                           GHC.Int.$fFiniteBitsInt8_$ccountTrailingZeros];

GHC.Int.$fReadInt8_go [Occ=LoopBreaker]
  :: [(GHC.Types.Int, GHC.Base.String)]
     -> [(GHC.Int.Int8, GHC.Base.String)]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s4vQn]
        case ds_s4vQn of {
          [] -> [] [];
          : y_s4vQp [Occ=Once!] ys_s4vQq [Occ=Once] ->
              case y_s4vQp of {
                (,) x_s4vQs [Occ=Once!] r_s4vQt [Occ=Once] ->
                    let {
                      sat_s4vQz [Occ=Once] :: [(GHC.Int.Int8, GHC.Base.String)]
                      [LclId] =
                          [ys_s4vQq] \u [] GHC.Int.$fReadInt8_go ys_s4vQq; } in
                    let {
                      sat_s4vQx [Occ=Once] :: GHC.Int.Int8
                      [LclId] =
                          [x_s4vQs] \u []
                              case x_s4vQs of {
                                GHC.Types.I# x#_s4vQv [Occ=Once] ->
                                    case narrow8Int# [x#_s4vQv] of sat_s4vQw {
                                      __DEFAULT -> GHC.Int.I8# [sat_s4vQw];
                                    };
                              }; } in
                    let {
                      sat_s4vQy [Occ=Once] :: (GHC.Int.Int8, GHC.Base.String)
                      [LclId] =
                          CCCS (,)! [sat_s4vQx r_s4vQt];
                    } in  : [sat_s4vQy sat_s4vQz];
              };
        };

GHC.Int.$fReadInt8_$creadsPrec
  :: GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS GHC.Int.Int8
[GblId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [p_s4vQA s_s4vQB]
        case
            GHC.Read.$fReadInt_$sreadNumber
                GHC.Read.$fReadInt2
                p_s4vQA
                Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
        of
        sat_s4vQC
        { __DEFAULT ->
              case
                  Text.ParserCombinators.ReadP.run sat_s4vQC s_s4vQB
              of
              sat_s4vQD
              { __DEFAULT -> GHC.Int.$fReadInt8_go sat_s4vQD;
              };
        };

GHC.Int.$fReadInt13
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Int.Int8 -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,U><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [n_s4vQE eta_s4vQF]
        let {
          sat_s4vQG [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS GHC.Int.Int8
          [LclId] =
              [n_s4vQE] \r [eta_B1]
                  GHC.Int.$fReadInt8_$creadsPrec n_s4vQE eta_B1;
        } in 
          case
              Text.ParserCombinators.ReadP.$wreadS_to_P sat_s4vQG eta_s4vQF
          of
          { Unit# ww1_s4vQI [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s4vQI];
          };

GHC.Int.$fIxInt1 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

GHC.Int.$fReadInt12
  :: Text.ParserCombinators.ReadP.P [GHC.Int.Int8]
[GblId] =
    [] \u []
        GHC.Read.list
            GHC.Int.$fReadInt13
            GHC.Int.$fIxInt1
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Int.$fReadInt8_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.Int.Int8]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Int.$fReadInt12 eta_B1;

GHC.Int.$fReadInt11
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        ([GHC.Int.Int8] -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,A><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [n_s4vQJ w1_s4vQK]
        case
            Text.ParserCombinators.ReadP.$wreadS_to_P
                GHC.Int.$fReadInt8_$creadList w1_s4vQK
        of
        { Unit# ww1_s4vQM [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s4vQM];
        };

GHC.Int.$fReadInt8 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.Int.Int8
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Int.$fReadInt8_$creadsPrec
                                    GHC.Int.$fReadInt8_$creadList
                                    GHC.Int.$fReadInt13
                                    GHC.Int.$fReadInt11];

GHC.Int.$fIntegralInt8_$cquot [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> GHC.Int.Int8
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4vQN w1_s4vQO]
        case w_s4vQN of {
          GHC.Int.I8# ww1_s4vQQ [Occ=Once*] ->
              case w1_s4vQO of {
                GHC.Int.I8# ww3_s4vQS [Occ=Once!] ->
                    case ww3_s4vQS of wild_s4vQT {
                      __DEFAULT ->
                          case quotInt# [ww1_s4vQQ wild_s4vQT] of wild1_s4vQU {
                            __DEFAULT ->
                                case narrow8Int# [wild1_s4vQU] of sat_s4vQV {
                                  __DEFAULT -> GHC.Int.I8# [sat_s4vQV];
                                };
                          };
                      -1# ->
                          case ww1_s4vQQ of wild1_s4vQW {
                            __DEFAULT ->
                                case quotInt# [wild1_s4vQW -1#] of sat_s4vQX {
                                  __DEFAULT ->
                                      case narrow8Int# [sat_s4vQX] of sat_s4vQY {
                                        __DEFAULT -> GHC.Int.I8# [sat_s4vQY];
                                      };
                                };
                            -128# -> GHC.Real.overflowError;
                          };
                      0# -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Int.$fIntegralInt8_$crem
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> GHC.Int.Int8
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vR1 y_s4vR2]
        case ds_s4vR1 of {
          GHC.Int.I8# x#_s4vR4 [Occ=Once] ->
              case y_s4vR2 of {
                GHC.Int.I8# y#_s4vR6 [Occ=Once!] ->
                    case y#_s4vR6 of wild2_s4vR7 {
                      __DEFAULT ->
                          case remInt# [x#_s4vR4 wild2_s4vR7] of wild3_s4vR8 {
                            __DEFAULT ->
                                case narrow8Int# [wild3_s4vR8] of sat_s4vR9 {
                                  __DEFAULT -> GHC.Int.I8# [sat_s4vR9];
                                };
                          };
                      0# -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Int.$w$cdiv3 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Str=<S,U><S,1*U>, Unf=OtherCon []] =
    [] \r [ww_s4vRa ww1_s4vRb]
        case ww1_s4vRb of wild_s4vRc {
          __DEFAULT ->
              case GHC.Classes.divInt# ww_s4vRa wild_s4vRc of wild1_s4vRd {
                __DEFAULT -> narrow8Int# [wild1_s4vRd];
              };
          -1# ->
              case ww_s4vRa of wild1_s4vRe {
                __DEFAULT ->
                    case GHC.Classes.divInt# wild1_s4vRe -1# of wild2_s4vRf {
                      __DEFAULT -> narrow8Int# [wild2_s4vRf];
                    };
                -128# -> GHC.Real.overflowError;
              };
          0# -> GHC.Real.divZeroError;
        };

GHC.Int.$fIntegralInt8_$cdiv [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> GHC.Int.Int8
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4vRi w1_s4vRj]
        case w_s4vRi of {
          GHC.Int.I8# ww1_s4vRl [Occ=Once] ->
              case w1_s4vRj of {
                GHC.Int.I8# ww3_s4vRn [Occ=Once] ->
                    case GHC.Int.$w$cdiv3 ww1_s4vRl ww3_s4vRn of ww4_s4vRo {
                      __DEFAULT -> GHC.Int.I8# [ww4_s4vRo];
                    };
              };
        };

GHC.Int.$fIntegralInt8_$cmod [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> GHC.Int.Int8
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4vRp w1_s4vRq]
        case w_s4vRp of {
          GHC.Int.I8# ww1_s4vRs [Occ=Once] ->
              case w1_s4vRq of {
                GHC.Int.I8# ww3_s4vRu [Occ=Once!] ->
                    case ww3_s4vRu of wild_s4vRv {
                      __DEFAULT ->
                          case GHC.Classes.modInt# ww1_s4vRs wild_s4vRv of wild1_s4vRw {
                            __DEFAULT ->
                                case narrow8Int# [wild1_s4vRw] of sat_s4vRx {
                                  __DEFAULT -> GHC.Int.I8# [sat_s4vRx];
                                };
                          };
                      0# -> GHC.Real.divZeroError;
                    };
              };
        };

lvl6_r4kPx :: (GHC.Int.Int8, GHC.Int.Int8)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Real.overflowError GHC.Int.$fBitsInt13];

GHC.Int.$fIntegralInt8_$cquotRem [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> (GHC.Int.Int8, GHC.Int.Int8)
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4vRz w1_s4vRA]
        case w_s4vRz of {
          GHC.Int.I8# ww1_s4vRC [Occ=Once*] ->
              case w1_s4vRA of {
                GHC.Int.I8# ww3_s4vRE [Occ=Once!] ->
                    case ww3_s4vRE of wild_s4vRF {
                      __DEFAULT ->
                          case quotRemInt# [ww1_s4vRC wild_s4vRF] of {
                            (#,#) ipv_s4vRH [Occ=Once] ipv1_s4vRI [Occ=Once] ->
                                case narrow8Int# [ipv1_s4vRI] of sat_s4vRL {
                                  __DEFAULT ->
                                      let {
                                        sat_s4vRM [Occ=Once] :: GHC.Int.Int8
                                        [LclId] =
                                            CCCS GHC.Int.I8#! [sat_s4vRL];
                                      } in 
                                        case narrow8Int# [ipv_s4vRH] of sat_s4vRJ {
                                          __DEFAULT ->
                                              let {
                                                sat_s4vRK [Occ=Once] :: GHC.Int.Int8
                                                [LclId] =
                                                    CCCS GHC.Int.I8#! [sat_s4vRJ];
                                              } in  (,) [sat_s4vRK sat_s4vRM];
                                        };
                                };
                          };
                      -1# ->
                          case ww1_s4vRC of wild1_s4vRN {
                            __DEFAULT ->
                                case quotRemInt# [wild1_s4vRN -1#] of {
                                  (#,#) ipv_s4vRP [Occ=Once] ipv1_s4vRQ [Occ=Once] ->
                                      case narrow8Int# [ipv1_s4vRQ] of sat_s4vRT {
                                        __DEFAULT ->
                                            let {
                                              sat_s4vRU [Occ=Once] :: GHC.Int.Int8
                                              [LclId] =
                                                  CCCS GHC.Int.I8#! [sat_s4vRT];
                                            } in 
                                              case narrow8Int# [ipv_s4vRP] of sat_s4vRR {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s4vRS [Occ=Once] :: GHC.Int.Int8
                                                      [LclId] =
                                                          CCCS GHC.Int.I8#! [sat_s4vRR];
                                                    } in  (,) [sat_s4vRS sat_s4vRU];
                                              };
                                      };
                                };
                            -128# -> lvl6_r4kPx;
                          };
                      0# -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Int.$w$cdivMod3 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int#
     -> GHC.Prim.Int# -> (# GHC.Int.Int8, GHC.Int.Int8 #)
[GblId, Arity=2, Str=<S,U><S,1*U>, Unf=OtherCon []] =
    [] \r [ww_s4vRW ww1_s4vRX]
        case ww1_s4vRX of wild_s4vRY {
          __DEFAULT ->
              let-no-escape {
                $j_s4vRZ [Occ=Once*T[0], Dmd=<L,1*U(U,U)>]
                  :: (# GHC.Int.Int8, GHC.Int.Int8 #)
                [LclId[JoinId(0)], Unf=OtherCon []] =
                    [ww_s4vRW wild_s4vRY] \r []
                        case ># [ww_s4vRW 0#] of {
                          __DEFAULT ->
                              case <# [ww_s4vRW 0#] of {
                                __DEFAULT ->
                                    case quotRemInt# [ww_s4vRW wild_s4vRY] of {
                                      (#,#) ipv_s4vS3 [Occ=Once] ipv1_s4vS4 [Occ=Once] ->
                                          case narrow8Int# [ipv1_s4vS4] of sat_s4vS7 {
                                            __DEFAULT ->
                                                let {
                                                  sat_s4vS8 [Occ=Once] :: GHC.Int.Int8
                                                  [LclId] =
                                                      CCCS GHC.Int.I8#! [sat_s4vS7];
                                                } in 
                                                  case narrow8Int# [ipv_s4vS3] of sat_s4vS5 {
                                                    __DEFAULT ->
                                                        let {
                                                          sat_s4vS6 [Occ=Once] :: GHC.Int.Int8
                                                          [LclId] =
                                                              CCCS GHC.Int.I8#! [sat_s4vS5];
                                                        } in  (#,#) [sat_s4vS6 sat_s4vS8];
                                                  };
                                          };
                                    };
                                1# ->
                                    case ># [wild_s4vRY 0#] of {
                                      __DEFAULT ->
                                          case quotRemInt# [ww_s4vRW wild_s4vRY] of {
                                            (#,#) ipv_s4vSb [Occ=Once] ipv1_s4vSc [Occ=Once] ->
                                                case narrow8Int# [ipv1_s4vSc] of sat_s4vSf {
                                                  __DEFAULT ->
                                                      let {
                                                        sat_s4vSg [Occ=Once] :: GHC.Int.Int8
                                                        [LclId] =
                                                            CCCS GHC.Int.I8#! [sat_s4vSf];
                                                      } in 
                                                        case narrow8Int# [ipv_s4vSb] of sat_s4vSd {
                                                          __DEFAULT ->
                                                              let {
                                                                sat_s4vSe [Occ=Once] :: GHC.Int.Int8
                                                                [LclId] =
                                                                    CCCS GHC.Int.I8#! [sat_s4vSd];
                                                              } in  (#,#) [sat_s4vSe sat_s4vSg];
                                                        };
                                                };
                                          };
                                      1# ->
                                          case +# [ww_s4vRW 1#] of sat_s4vSh {
                                            __DEFAULT ->
                                                case quotRemInt# [sat_s4vSh wild_s4vRY] of {
                                                  (#,#) ipv_s4vSj [Occ=Once]
                                                        ipv1_s4vSk [Occ=Once] ->
                                                      case +# [ipv1_s4vSk wild_s4vRY] of sat_s4vSo {
                                                        __DEFAULT ->
                                                            case -# [sat_s4vSo 1#] of sat_s4vSp {
                                                              __DEFAULT ->
                                                                  case
                                                                      narrow8Int# [sat_s4vSp]
                                                                  of
                                                                  sat_s4vSq
                                                                  { __DEFAULT ->
                                                                        let {
                                                                          sat_s4vSr [Occ=Once]
                                                                            :: GHC.Int.Int8
                                                                          [LclId] =
                                                                              CCCS GHC.Int.I8#! [sat_s4vSq];
                                                                        } in 
                                                                          case
                                                                              -# [ipv_s4vSj 1#]
                                                                          of
                                                                          sat_s4vSl
                                                                          { __DEFAULT ->
                                                                                case
                                                                                    narrow8Int# [sat_s4vSl]
                                                                                of
                                                                                sat_s4vSm
                                                                                { __DEFAULT ->
                                                                                      let {
                                                                                        sat_s4vSn [Occ=Once]
                                                                                          :: GHC.Int.Int8
                                                                                        [LclId] =
                                                                                            CCCS GHC.Int.I8#! [sat_s4vSm];
                                                                                      } in 
                                                                                        (#,#) [sat_s4vSn
                                                                                               sat_s4vSr];
                                                                                };
                                                                          };
                                                                  };
                                                            };
                                                      };
                                                };
                                          };
                                    };
                              };
                          1# ->
                              case <# [wild_s4vRY 0#] of {
                                __DEFAULT ->
                                    case <# [ww_s4vRW 0#] of {
                                      __DEFAULT ->
                                          case quotRemInt# [ww_s4vRW wild_s4vRY] of {
                                            (#,#) ipv_s4vSv [Occ=Once] ipv1_s4vSw [Occ=Once] ->
                                                case narrow8Int# [ipv1_s4vSw] of sat_s4vSz {
                                                  __DEFAULT ->
                                                      let {
                                                        sat_s4vSA [Occ=Once] :: GHC.Int.Int8
                                                        [LclId] =
                                                            CCCS GHC.Int.I8#! [sat_s4vSz];
                                                      } in 
                                                        case narrow8Int# [ipv_s4vSv] of sat_s4vSx {
                                                          __DEFAULT ->
                                                              let {
                                                                sat_s4vSy [Occ=Once] :: GHC.Int.Int8
                                                                [LclId] =
                                                                    CCCS GHC.Int.I8#! [sat_s4vSx];
                                                              } in  (#,#) [sat_s4vSy sat_s4vSA];
                                                        };
                                                };
                                          };
                                      1# ->
                                          case ># [wild_s4vRY 0#] of {
                                            __DEFAULT ->
                                                case quotRemInt# [ww_s4vRW wild_s4vRY] of {
                                                  (#,#) ipv_s4vSD [Occ=Once]
                                                        ipv1_s4vSE [Occ=Once] ->
                                                      case narrow8Int# [ipv1_s4vSE] of sat_s4vSH {
                                                        __DEFAULT ->
                                                            let {
                                                              sat_s4vSI [Occ=Once] :: GHC.Int.Int8
                                                              [LclId] =
                                                                  CCCS GHC.Int.I8#! [sat_s4vSH];
                                                            } in 
                                                              case
                                                                  narrow8Int# [ipv_s4vSD]
                                                              of
                                                              sat_s4vSF
                                                              { __DEFAULT ->
                                                                    let {
                                                                      sat_s4vSG [Occ=Once]
                                                                        :: GHC.Int.Int8
                                                                      [LclId] =
                                                                          CCCS GHC.Int.I8#! [sat_s4vSF];
                                                                    } in 
                                                                      (#,#) [sat_s4vSG sat_s4vSI];
                                                              };
                                                      };
                                                };
                                            1# ->
                                                case +# [ww_s4vRW 1#] of sat_s4vSJ {
                                                  __DEFAULT ->
                                                      case quotRemInt# [sat_s4vSJ wild_s4vRY] of {
                                                        (#,#) ipv_s4vSL [Occ=Once]
                                                              ipv1_s4vSM [Occ=Once] ->
                                                            case
                                                                +# [ipv1_s4vSM wild_s4vRY]
                                                            of
                                                            sat_s4vSQ
                                                            { __DEFAULT ->
                                                                  case
                                                                      -# [sat_s4vSQ 1#]
                                                                  of
                                                                  sat_s4vSR
                                                                  { __DEFAULT ->
                                                                        case
                                                                            narrow8Int# [sat_s4vSR]
                                                                        of
                                                                        sat_s4vSS
                                                                        { __DEFAULT ->
                                                                              let {
                                                                                sat_s4vST [Occ=Once]
                                                                                  :: GHC.Int.Int8
                                                                                [LclId] =
                                                                                    CCCS GHC.Int.I8#! [sat_s4vSS];
                                                                              } in 
                                                                                case
                                                                                    -# [ipv_s4vSL
                                                                                        1#]
                                                                                of
                                                                                sat_s4vSN
                                                                                { __DEFAULT ->
                                                                                      case
                                                                                          narrow8Int# [sat_s4vSN]
                                                                                      of
                                                                                      sat_s4vSO
                                                                                      { __DEFAULT ->
                                                                                            let {
                                                                                              sat_s4vSP [Occ=Once]
                                                                                                :: GHC.Int.Int8
                                                                                              [LclId] =
                                                                                                  CCCS GHC.Int.I8#! [sat_s4vSO];
                                                                                            } in 
                                                                                              (#,#) [sat_s4vSP
                                                                                                     sat_s4vST];
                                                                                      };
                                                                                };
                                                                        };
                                                                  };
                                                            };
                                                      };
                                                };
                                          };
                                    };
                                1# ->
                                    case -# [ww_s4vRW 1#] of sat_s4vSU {
                                      __DEFAULT ->
                                          case quotRemInt# [sat_s4vSU wild_s4vRY] of {
                                            (#,#) ipv_s4vSW [Occ=Once] ipv1_s4vSX [Occ=Once] ->
                                                case +# [ipv1_s4vSX wild_s4vRY] of sat_s4vT1 {
                                                  __DEFAULT ->
                                                      case +# [sat_s4vT1 1#] of sat_s4vT2 {
                                                        __DEFAULT ->
                                                            case
                                                                narrow8Int# [sat_s4vT2]
                                                            of
                                                            sat_s4vT3
                                                            { __DEFAULT ->
                                                                  let {
                                                                    sat_s4vT4 [Occ=Once]
                                                                      :: GHC.Int.Int8
                                                                    [LclId] =
                                                                        CCCS GHC.Int.I8#! [sat_s4vT3];
                                                                  } in 
                                                                    case
                                                                        -# [ipv_s4vSW 1#]
                                                                    of
                                                                    sat_s4vSY
                                                                    { __DEFAULT ->
                                                                          case
                                                                              narrow8Int# [sat_s4vSY]
                                                                          of
                                                                          sat_s4vSZ
                                                                          { __DEFAULT ->
                                                                                let {
                                                                                  sat_s4vT0 [Occ=Once]
                                                                                    :: GHC.Int.Int8
                                                                                  [LclId] =
                                                                                      CCCS GHC.Int.I8#! [sat_s4vSZ];
                                                                                } in 
                                                                                  (#,#) [sat_s4vT0
                                                                                         sat_s4vT4];
                                                                          };
                                                                    };
                                                            };
                                                      };
                                                };
                                          };
                                    };
                              };
                        };
              } in 
                case wild_s4vRY of {
                  __DEFAULT -> $j_s4vRZ;
                  -1# ->
                      case ww_s4vRW of {
                        __DEFAULT -> $j_s4vRZ;
                        -128# -> (#,#) [GHC.Real.overflowError GHC.Int.$fBitsInt13];
                      };
                };
          0# -> GHC.Real.divZeroError;
        };

GHC.Int.$fIntegralInt8_$cdivMod [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> (GHC.Int.Int8, GHC.Int.Int8)
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4vT8 w1_s4vT9]
        case w_s4vT8 of {
          GHC.Int.I8# ww1_s4vTb [Occ=Once] ->
              case w1_s4vT9 of {
                GHC.Int.I8# ww3_s4vTd [Occ=Once] ->
                    case GHC.Int.$w$cdivMod3 ww1_s4vTb ww3_s4vTd of {
                      (#,#) ww5_s4vTf [Occ=Once] ww6_s4vTg [Occ=Once] ->
                          (,) [ww5_s4vTf ww6_s4vTg];
                    };
              };
        };

sat_s4vTh :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [1#];

sat_s4vTi :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_s4vTh GHC.Types.[]];

GHC.Int.$fRealInt1 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True sat_s4vTi;

GHC.Int.$fRealInt8_$ctoRational [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int8 -> GHC.Real.Rational
[GblId, Arity=1, Str=<S(S),1*U(U)>m, Unf=OtherCon []] =
    [] \r [w_s4vTj]
        case w_s4vTj of {
          GHC.Int.I8# ww1_s4vTl [Occ=Once] ->
              case GHC.Integer.Type.smallInteger ww1_s4vTl of sat_s4vTm {
                __DEFAULT ->
                    case
                        GHC.Integer.Type.timesInteger sat_s4vTm GHC.Int.$fRealInt1
                    of
                    sat_s4vTn
                    { __DEFAULT ->
                          case GHC.Real.$w$sreduce sat_s4vTn GHC.Int.$fRealInt1 of {
                            (#,#) ww3_s4vTp [Occ=Once] ww4_s4vTq [Occ=Once] ->
                                GHC.Real.:% [ww3_s4vTp ww4_s4vTq];
                          };
                    };
              };
        };

GHC.Int.$fRealInt8 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Real.Real GHC.Int.Int8
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Real.C:Real! [GHC.Int.$fNumInt8
                                    GHC.Int.$fOrdInt8
                                    GHC.Int.$fRealInt8_$ctoRational];

GHC.Int.$fIntegralInt8 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Real.Integral GHC.Int.Int8
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Real.C:Integral! [GHC.Int.$fRealInt8
                                        GHC.Int.$fEnumInt8
                                        GHC.Int.$fIntegralInt8_$cquot
                                        GHC.Int.$fIntegralInt8_$crem
                                        GHC.Int.$fIntegralInt8_$cdiv
                                        GHC.Int.$fIntegralInt8_$cmod
                                        GHC.Int.$fIntegralInt8_$cquotRem
                                        GHC.Int.$fIntegralInt8_$cdivMod
                                        GHC.Int.$fIntegralInt8_$ctoInteger];

GHC.Int.$fIxInt8_$cunsafeIndex
  :: (GHC.Int.Int8, GHC.Int.Int8) -> GHC.Int.Int8 -> GHC.Types.Int
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S(S)L),1*U(1*U(U),A)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vTr i_s4vTs]
        case ds_s4vTr of {
          (,) m_s4vTu [Occ=Once!] _ [Occ=Dead] ->
              case i_s4vTs of {
                GHC.Int.I8# x#_s4vTx [Occ=Once] ->
                    case m_s4vTu of {
                      GHC.Int.I8# x#1_s4vTz [Occ=Once] ->
                          case -# [x#_s4vTx x#1_s4vTz] of sat_s4vTA {
                            __DEFAULT -> GHC.Types.I# [sat_s4vTA];
                          };
                    };
              };
        };

GHC.Int.$fIxInt8_$crange
  :: (GHC.Int.Int8, GHC.Int.Int8) -> [GHC.Int.Int8]
[GblId,
 Arity=1,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>,
 Unf=OtherCon []] =
    [] \r [ds_s4vTB]
        case ds_s4vTB of {
          (,) m_s4vTD [Occ=Once] n_s4vTE [Occ=Once] ->
              GHC.Int.$fEnumInt8_$cenumFromTo m_s4vTD n_s4vTE;
        };

GHC.Int.$fIxInt8_$crangeSize
  :: (GHC.Int.Int8, GHC.Int.Int8) -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>m,
 Unf=OtherCon []] =
    [] \r [b_s4vTF]
        case b_s4vTF of {
          (,) _l_s4vTH [Occ=Once!] h_s4vTI [Occ=Once!] ->
              case _l_s4vTH of {
                GHC.Int.I8# x_s4vTK ->
                    case h_s4vTI of {
                      GHC.Int.I8# y_s4vTM ->
                          case <=# [x_s4vTK y_s4vTM] of {
                            __DEFAULT -> GHC.Int.$fIxInt1;
                            1# ->
                                case -# [y_s4vTM x_s4vTK] of sat_s4vTO {
                                  __DEFAULT ->
                                      case +# [sat_s4vTO 1#] of sat_s4vTP {
                                        __DEFAULT -> GHC.Types.I# [sat_s4vTP];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fIxInt8_$cunsafeRangeSize
  :: (GHC.Int.Int8, GHC.Int.Int8) -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>m,
 Unf=OtherCon []] =
    [] \r [b_s4vTQ]
        case b_s4vTQ of {
          (,) _l_s4vTS [Occ=Once!] h_s4vTT [Occ=Once!] ->
              case h_s4vTT of {
                GHC.Int.I8# x#_s4vTV [Occ=Once] ->
                    case _l_s4vTS of {
                      GHC.Int.I8# x#1_s4vTX [Occ=Once] ->
                          case -# [x#_s4vTV x#1_s4vTX] of sat_s4vTY {
                            __DEFAULT ->
                                case +# [sat_s4vTY 1#] of sat_s4vTZ {
                                  __DEFAULT -> GHC.Types.I# [sat_s4vTZ];
                                };
                          };
                    };
              };
        };

GHC.Int.$fIxInt8_$cindex [InlPrag=INLINE (sat-args=2)]
  :: (GHC.Int.Int8, GHC.Int.Int8) -> GHC.Int.Int8 -> GHC.Types.Int
[GblId,
 Arity=2,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s4vU0 eta1_s4vU1]
        case eta_s4vU0 of {
          (,) m_s4vU3 [Occ=Once!] n_s4vU4 [Occ=Once!] ->
              case m_s4vU3 of {
                GHC.Int.I8# x_s4vU6 ->
                    case eta1_s4vU1 of {
                      GHC.Int.I8# y_s4vU8 ->
                          case <=# [x_s4vU6 y_s4vU8] of {
                            __DEFAULT -> GHC.Arr.hopelessIndexError;
                            1# ->
                                case n_s4vU4 of {
                                  GHC.Int.I8# y1_s4vUb [Occ=Once] ->
                                      case <=# [y_s4vU8 y1_s4vUb] of {
                                        __DEFAULT -> GHC.Arr.hopelessIndexError;
                                        1# ->
                                            case -# [y_s4vU8 x_s4vU6] of sat_s4vUd {
                                              __DEFAULT -> GHC.Types.I# [sat_s4vUd];
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fIxInt8 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Arr.Ix GHC.Int.Int8
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Arr.C:Ix! [GHC.Int.$fOrdInt8
                                 GHC.Int.$fIxInt8_$crange
                                 GHC.Int.$fIxInt8_$cindex
                                 GHC.Int.$fIxInt8_$cunsafeIndex
                                 GHC.Int.$fIxInt8_$cinRange
                                 GHC.Int.$fIxInt8_$crangeSize
                                 GHC.Int.$fIxInt8_$cunsafeRangeSize];

GHC.Int.eqInt16 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4vUe ds1_s4vUf]
        case ds_s4vUe of {
          GHC.Int.I16# x_s4vUh [Occ=Once] ->
              case ds1_s4vUf of {
                GHC.Int.I16# y_s4vUj [Occ=Once] ->
                    case ==# [x_s4vUh y_s4vUj] of sat_s4vUk {
                      __DEFAULT -> tagToEnum# [sat_s4vUk];
                    };
              };
        };

GHC.Int.$fEqInt16 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.Int.Int16
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.Int.eqInt16 GHC.Int.neInt16];

GHC.Int.gtInt16 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4vUl ds1_s4vUm]
        case ds_s4vUl of {
          GHC.Int.I16# x_s4vUo [Occ=Once] ->
              case ds1_s4vUm of {
                GHC.Int.I16# y_s4vUq [Occ=Once] ->
                    case ># [x_s4vUo y_s4vUq] of sat_s4vUr {
                      __DEFAULT -> tagToEnum# [sat_s4vUr];
                    };
              };
        };

GHC.Int.geInt16 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4vUs ds1_s4vUt]
        case ds_s4vUs of {
          GHC.Int.I16# x_s4vUv [Occ=Once] ->
              case ds1_s4vUt of {
                GHC.Int.I16# y_s4vUx [Occ=Once] ->
                    case >=# [x_s4vUv y_s4vUx] of sat_s4vUy {
                      __DEFAULT -> tagToEnum# [sat_s4vUy];
                    };
              };
        };

GHC.Int.ltInt16 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4vUz ds1_s4vUA]
        case ds_s4vUz of {
          GHC.Int.I16# x_s4vUC [Occ=Once] ->
              case ds1_s4vUA of {
                GHC.Int.I16# y_s4vUE [Occ=Once] ->
                    case <# [x_s4vUC y_s4vUE] of sat_s4vUF {
                      __DEFAULT -> tagToEnum# [sat_s4vUF];
                    };
              };
        };

GHC.Int.leInt16 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4vUG ds1_s4vUH]
        case ds_s4vUG of {
          GHC.Int.I16# x_s4vUJ [Occ=Once] ->
              case ds1_s4vUH of {
                GHC.Int.I16# y_s4vUL [Occ=Once] ->
                    case <=# [x_s4vUJ y_s4vUL] of sat_s4vUM {
                      __DEFAULT -> tagToEnum# [sat_s4vUM];
                    };
              };
        };

GHC.Int.$fOrdInt16_$ccompare
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [x_s4vUN y_s4vUO]
        case x_s4vUN of {
          GHC.Int.I16# x1_s4vUQ ->
              case y_s4vUO of {
                GHC.Int.I16# y1_s4vUS ->
                    case ==# [x1_s4vUQ y1_s4vUS] of {
                      __DEFAULT ->
                          case <=# [x1_s4vUQ y1_s4vUS] of {
                            __DEFAULT -> GHC.Types.GT [];
                            1# -> GHC.Types.LT [];
                          };
                      1# -> GHC.Types.EQ [];
                    };
              };
        };

GHC.Int.$fOrdInt16_$cmax
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Int.Int16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s4vUV y_s4vUW]
        case x_s4vUV of wild_s4vUX {
          GHC.Int.I16# x1_s4vUY [Occ=Once] ->
              case y_s4vUW of wild1_s4vUZ {
                GHC.Int.I16# y1_s4vV0 [Occ=Once] ->
                    case <=# [x1_s4vUY y1_s4vV0] of {
                      __DEFAULT -> wild_s4vUX;
                      1# -> wild1_s4vUZ;
                    };
              };
        };

GHC.Int.$fOrdInt16_$cmin
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Int.Int16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s4vV2 y_s4vV3]
        case x_s4vV2 of wild_s4vV4 {
          GHC.Int.I16# x1_s4vV5 [Occ=Once] ->
              case y_s4vV3 of wild1_s4vV6 {
                GHC.Int.I16# y1_s4vV7 [Occ=Once] ->
                    case <=# [x1_s4vV5 y1_s4vV7] of {
                      __DEFAULT -> wild1_s4vV6;
                      1# -> wild_s4vV4;
                    };
              };
        };

GHC.Int.$fOrdInt16 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord GHC.Int.Int16
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.Int.$fEqInt16
                                      GHC.Int.$fOrdInt16_$ccompare
                                      GHC.Int.ltInt16
                                      GHC.Int.leInt16
                                      GHC.Int.gtInt16
                                      GHC.Int.geInt16
                                      GHC.Int.$fOrdInt16_$cmax
                                      GHC.Int.$fOrdInt16_$cmin];

GHC.Int.$fIxInt16_$cinRange
  :: (GHC.Int.Int16, GHC.Int.Int16)
     -> GHC.Int.Int16 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S(S)L),1*U(1*U(U),1*U(U))><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4vV9 i_s4vVa]
        case ds_s4vV9 of {
          (,) m_s4vVc [Occ=Once!] n_s4vVd [Occ=Once!] ->
              case m_s4vVc of {
                GHC.Int.I16# x_s4vVf [Occ=Once] ->
                    case i_s4vVa of {
                      GHC.Int.I16# y_s4vVh ->
                          case <=# [x_s4vVf y_s4vVh] of {
                            __DEFAULT -> GHC.Types.False [];
                            1# ->
                                case n_s4vVd of {
                                  GHC.Int.I16# y1_s4vVk [Occ=Once] ->
                                      case <=# [y_s4vVh y1_s4vVk] of sat_s4vVl {
                                        __DEFAULT -> tagToEnum# [sat_s4vVl];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fNumInt1 :: GHC.Int.Int16
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I16#! [1#];

GHC.Int.$fNumInt16_$csignum :: GHC.Int.Int16 -> GHC.Int.Int16
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s4vVm]
        case x_s4vVm of {
          GHC.Int.I16# x1_s4vVo ->
              case ># [x1_s4vVo 0#] of {
                __DEFAULT ->
                    case x1_s4vVo of {
                      __DEFAULT -> GHC.Int.$fNumInt2;
                      0# -> GHC.Int.$fBitsInt3;
                    };
                1# -> GHC.Int.$fNumInt1;
              };
        };

GHC.Int.$fNumInt16_$cabs :: GHC.Int.Int16 -> GHC.Int.Int16
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s4vVr]
        case x_s4vVr of wild_s4vVs {
          GHC.Int.I16# x1_s4vVt ->
              case >=# [x1_s4vVt 0#] of {
                __DEFAULT ->
                    case negateInt# [x1_s4vVt] of sat_s4vVv {
                      __DEFAULT ->
                          case narrow16Int# [sat_s4vVv] of sat_s4vVw {
                            __DEFAULT -> GHC.Int.I16# [sat_s4vVw];
                          };
                    };
                1# -> wild_s4vVs;
              };
        };

GHC.Int.$fNumInt16 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Num.Num GHC.Int.Int16
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Num.C:Num! [GHC.Int.$fNumInt16_$c+
                                  GHC.Int.$fNumInt16_$c-
                                  GHC.Int.$fNumInt16_$c*
                                  GHC.Int.$fNumInt16_$cnegate
                                  GHC.Int.$fNumInt16_$cabs
                                  GHC.Int.$fNumInt16_$csignum
                                  GHC.Int.$fNumInt16_$cfromInteger];

GHC.Int.$fBitsInt2 :: GHC.Base.Maybe GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [GHC.Int.$fBitsInt1];

GHC.Int.$fBitsInt16_$cbitSizeMaybe
  :: GHC.Int.Int16 -> GHC.Base.Maybe GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>m2, Unf=OtherCon []] =
    [] \r [i_s4vVx] GHC.Int.$fBitsInt2;

GHC.Int.$fBitsInt16_$cbit [InlPrag=INLINE (sat-args=0)]
  :: GHC.Types.Int -> GHC.Int.Int16
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [i_s4vVy]
        case i_s4vVy of {
          GHC.Types.I# i#_s4vVA ->
              case >=# [i#_s4vVA 64#] of {
                __DEFAULT ->
                    case uncheckedIShiftL# [1# i#_s4vVA] of sat_s4vVC {
                      __DEFAULT ->
                          case narrow16Int# [sat_s4vVC] of sat_s4vVD {
                            __DEFAULT -> GHC.Int.I16# [sat_s4vVD];
                          };
                    };
                1# -> GHC.Int.$fBitsInt3;
              };
        };

GHC.Int.$fBitsInt16_$ctestBit [InlPrag=INLINE (sat-args=0)]
  :: GHC.Int.Int16 -> GHC.Types.Int -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [x_s4vVE i_s4vVF]
        case x_s4vVE of {
          GHC.Int.I16# x#_s4vVH [Occ=Once] ->
              case i_s4vVF of {
                GHC.Types.I# i#_s4vVJ ->
                    case >=# [i#_s4vVJ 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftL# [1# i#_s4vVJ] of sat_s4vVM {
                            __DEFAULT ->
                                case narrow16Int# [sat_s4vVM] of sat_s4vVN {
                                  __DEFAULT ->
                                      case int2Word# [sat_s4vVN] of sat_s4vVO {
                                        __DEFAULT ->
                                            case int2Word# [x#_s4vVH] of sat_s4vVL {
                                              __DEFAULT ->
                                                  case and# [sat_s4vVL sat_s4vVO] of sat_s4vVP {
                                                    __DEFAULT ->
                                                        case word2Int# [sat_s4vVP] of {
                                                          __DEFAULT -> GHC.Types.True [];
                                                          0# -> GHC.Types.False [];
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                      1# -> GHC.Types.False [];
                    };
              };
        };

GHC.Int.$fBitsInt16_$crotateR [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int16 -> GHC.Types.Int -> GHC.Int.Int16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s4vVR eta1_s4vVS]
        case eta_s4vVR of wild_s4vVT {
          GHC.Int.I16# x#_s4vVU [Occ=Once] ->
              case eta1_s4vVS of {
                GHC.Types.I# x1_s4vVW [Occ=Once] ->
                    case negateInt# [x1_s4vVW] of sat_s4vVX {
                      __DEFAULT ->
                          case int2Word# [sat_s4vVX] of sat_s4vVY {
                            __DEFAULT ->
                                case and# [sat_s4vVY 15##] of sat_s4vVZ {
                                  __DEFAULT ->
                                      case word2Int# [sat_s4vVZ] of wild2_s4vW0 {
                                        __DEFAULT ->
                                            case int2Word# [x#_s4vVU] of sat_s4vW2 {
                                              __DEFAULT ->
                                                  case
                                                      narrow16Word# [sat_s4vW2]
                                                  of
                                                  x'#_s4vW1 [Dmd=<S,U>]
                                                  { __DEFAULT ->
                                                        case -# [16# wild2_s4vW0] of sat_s4vW4 {
                                                          __DEFAULT ->
                                                              case
                                                                  uncheckedShiftRL# [x'#_s4vW1
                                                                                     sat_s4vW4]
                                                              of
                                                              sat_s4vW5
                                                              { __DEFAULT ->
                                                                    case
                                                                        uncheckedShiftL# [x'#_s4vW1
                                                                                          wild2_s4vW0]
                                                                    of
                                                                    sat_s4vW3
                                                                    { __DEFAULT ->
                                                                          case
                                                                              or# [sat_s4vW3
                                                                                   sat_s4vW5]
                                                                          of
                                                                          sat_s4vW6
                                                                          { __DEFAULT ->
                                                                                case
                                                                                    word2Int# [sat_s4vW6]
                                                                                of
                                                                                sat_s4vW7
                                                                                { __DEFAULT ->
                                                                                      case
                                                                                          narrow16Int# [sat_s4vW7]
                                                                                      of
                                                                                      sat_s4vW8
                                                                                      { __DEFAULT ->
                                                                                            GHC.Int.I16# [sat_s4vW8];
                                                                                      };
                                                                                };
                                                                          };
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                        0# -> wild_s4vVT;
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fBitsInt16_$ccomplementBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int16 -> GHC.Types.Int -> GHC.Int.Int16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s4vW9 eta1_s4vWa]
        case eta_s4vW9 of wild_s4vWb {
          GHC.Int.I16# x#_s4vWc [Occ=Once] ->
              case eta1_s4vWa of {
                GHC.Types.I# i#_s4vWe ->
                    case >=# [i#_s4vWe 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftL# [1# i#_s4vWe] of sat_s4vWh {
                            __DEFAULT ->
                                case narrow16Int# [sat_s4vWh] of sat_s4vWi {
                                  __DEFAULT ->
                                      case int2Word# [sat_s4vWi] of sat_s4vWj {
                                        __DEFAULT ->
                                            case int2Word# [x#_s4vWc] of sat_s4vWg {
                                              __DEFAULT ->
                                                  case xor# [sat_s4vWg sat_s4vWj] of sat_s4vWk {
                                                    __DEFAULT ->
                                                        case word2Int# [sat_s4vWk] of sat_s4vWl {
                                                          __DEFAULT -> GHC.Int.I16# [sat_s4vWl];
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                      1# -> wild_s4vWb;
                    };
              };
        };

GHC.Int.$fBitsInt16_$cclearBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int16 -> GHC.Types.Int -> GHC.Int.Int16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s4vWm eta1_s4vWn]
        case eta_s4vWm of {
          GHC.Int.I16# x#_s4vWp [Occ=Once*] ->
              case eta1_s4vWn of {
                GHC.Types.I# i#_s4vWr ->
                    case >=# [i#_s4vWr 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftL# [1# i#_s4vWr] of sat_s4vWu {
                            __DEFAULT ->
                                case narrow16Int# [sat_s4vWu] of sat_s4vWv {
                                  __DEFAULT ->
                                      case int2Word# [sat_s4vWv] of sat_s4vWw {
                                        __DEFAULT ->
                                            case not# [sat_s4vWw] of sat_s4vWx {
                                              __DEFAULT ->
                                                  case int2Word# [x#_s4vWp] of sat_s4vWt {
                                                    __DEFAULT ->
                                                        case
                                                            and# [sat_s4vWt sat_s4vWx]
                                                        of
                                                        sat_s4vWy
                                                        { __DEFAULT ->
                                                              case
                                                                  word2Int# [sat_s4vWy]
                                                              of
                                                              sat_s4vWz
                                                              { __DEFAULT ->
                                                                    GHC.Int.I16# [sat_s4vWz];
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                      1# ->
                          case int2Word# [x#_s4vWp] of sat_s4vWA {
                            __DEFAULT ->
                                case and# [sat_s4vWA 18446744073709551615##] of sat_s4vWB {
                                  __DEFAULT ->
                                      case word2Int# [sat_s4vWB] of sat_s4vWC {
                                        __DEFAULT -> GHC.Int.I16# [sat_s4vWC];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fBitsInt16_$csetBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int16 -> GHC.Types.Int -> GHC.Int.Int16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s4vWD eta1_s4vWE]
        case eta_s4vWD of wild_s4vWF {
          GHC.Int.I16# x#_s4vWG [Occ=Once] ->
              case eta1_s4vWE of {
                GHC.Types.I# i#_s4vWI ->
                    case >=# [i#_s4vWI 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftL# [1# i#_s4vWI] of sat_s4vWL {
                            __DEFAULT ->
                                case narrow16Int# [sat_s4vWL] of sat_s4vWM {
                                  __DEFAULT ->
                                      case int2Word# [sat_s4vWM] of sat_s4vWN {
                                        __DEFAULT ->
                                            case int2Word# [x#_s4vWG] of sat_s4vWK {
                                              __DEFAULT ->
                                                  case or# [sat_s4vWK sat_s4vWN] of sat_s4vWO {
                                                    __DEFAULT ->
                                                        case word2Int# [sat_s4vWO] of sat_s4vWP {
                                                          __DEFAULT -> GHC.Int.I16# [sat_s4vWP];
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                      1# -> wild_s4vWF;
                    };
              };
        };

GHC.Int.$fBitsInt16_$crotateL [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int16 -> GHC.Types.Int -> GHC.Int.Int16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Int.$fBitsInt16_$crotate eta_B2 eta_B1;

GHC.Int.$fBitsInt16 [InlPrag=NOUSERINLINE CONLIKE]
  :: Data.Bits.Bits GHC.Int.Int16
[GblId[DFunId], Caf=NoCafRefs] =
    CCS_DONT_CARE Data.Bits.C:Bits! [GHC.Int.$fEqInt16
                                     GHC.Int.$fBitsInt16_$c.&.
                                     GHC.Int.$fBitsInt16_$c.|.
                                     GHC.Int.$fBitsInt16_$cxor
                                     GHC.Int.$fBitsInt16_$ccomplement
                                     GHC.Int.$fBitsInt16_$cshift
                                     GHC.Int.$fBitsInt16_$crotate
                                     GHC.Int.$fBitsInt3
                                     GHC.Int.$fBitsInt16_$cbit
                                     GHC.Int.$fBitsInt16_$csetBit
                                     GHC.Int.$fBitsInt16_$cclearBit
                                     GHC.Int.$fBitsInt16_$ccomplementBit
                                     GHC.Int.$fBitsInt16_$ctestBit
                                     GHC.Int.$fBitsInt16_$cbitSizeMaybe
                                     GHC.Int.$fBitsInt16_$cfiniteBitSize
                                     GHC.Int.$fBitsInt16_$cisSigned
                                     GHC.Int.$fBitsInt16_$cshiftL
                                     GHC.Int.$fBitsInt16_$cunsafeShiftL
                                     GHC.Int.$fBitsInt16_$cshiftR
                                     GHC.Int.$fBitsInt16_$cunsafeShiftR
                                     GHC.Int.$fBitsInt16_$crotateL
                                     GHC.Int.$fBitsInt16_$crotateR
                                     GHC.Int.$fBitsInt16_$cpopCount];

GHC.Int.$fFiniteBitsInt16 [InlPrag=NOUSERINLINE CONLIKE]
  :: Data.Bits.FiniteBits GHC.Int.Int16
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE Data.Bits.C:FiniteBits! [GHC.Int.$fBitsInt16
                                           GHC.Int.$fBitsInt16_$cfiniteBitSize
                                           GHC.Int.$fFiniteBitsInt16_$ccountLeadingZeros
                                           GHC.Int.$fFiniteBitsInt16_$ccountTrailingZeros];

GHC.Int.$fReadInt16_go [Occ=LoopBreaker]
  :: [(GHC.Types.Int, GHC.Base.String)]
     -> [(GHC.Int.Int16, GHC.Base.String)]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s4vWQ]
        case ds_s4vWQ of {
          [] -> [] [];
          : y_s4vWS [Occ=Once!] ys_s4vWT [Occ=Once] ->
              case y_s4vWS of {
                (,) x_s4vWV [Occ=Once!] r_s4vWW [Occ=Once] ->
                    let {
                      sat_s4vX2 [Occ=Once] :: [(GHC.Int.Int16, GHC.Base.String)]
                      [LclId] =
                          [ys_s4vWT] \u [] GHC.Int.$fReadInt16_go ys_s4vWT; } in
                    let {
                      sat_s4vX0 [Occ=Once] :: GHC.Int.Int16
                      [LclId] =
                          [x_s4vWV] \u []
                              case x_s4vWV of {
                                GHC.Types.I# x#_s4vWY [Occ=Once] ->
                                    case narrow16Int# [x#_s4vWY] of sat_s4vWZ {
                                      __DEFAULT -> GHC.Int.I16# [sat_s4vWZ];
                                    };
                              }; } in
                    let {
                      sat_s4vX1 [Occ=Once] :: (GHC.Int.Int16, GHC.Base.String)
                      [LclId] =
                          CCCS (,)! [sat_s4vX0 r_s4vWW];
                    } in  : [sat_s4vX1 sat_s4vX2];
              };
        };

GHC.Int.$fReadInt16_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS GHC.Int.Int16
[GblId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [p_s4vX3 s_s4vX4]
        case
            GHC.Read.$fReadInt_$sreadNumber
                GHC.Read.$fReadInt2
                p_s4vX3
                Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
        of
        sat_s4vX5
        { __DEFAULT ->
              case
                  Text.ParserCombinators.ReadP.run sat_s4vX5 s_s4vX4
              of
              sat_s4vX6
              { __DEFAULT -> GHC.Int.$fReadInt16_go sat_s4vX6;
              };
        };

GHC.Int.$fReadInt3
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Int.Int16 -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,U><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [n_s4vX7 eta_s4vX8]
        let {
          sat_s4vX9 [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS GHC.Int.Int16
          [LclId] =
              [n_s4vX7] \r [eta_B1]
                  GHC.Int.$fReadInt16_$creadsPrec n_s4vX7 eta_B1;
        } in 
          case
              Text.ParserCombinators.ReadP.$wreadS_to_P sat_s4vX9 eta_s4vX8
          of
          { Unit# ww1_s4vXb [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s4vXb];
          };

GHC.Int.$fReadInt2
  :: Text.ParserCombinators.ReadP.P [GHC.Int.Int16]
[GblId] =
    [] \u []
        GHC.Read.list
            GHC.Int.$fReadInt3
            GHC.Int.$fIxInt1
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Int.$fReadInt16_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.Int.Int16]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Int.$fReadInt2 eta_B1;

GHC.Int.$fReadInt1
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        ([GHC.Int.Int16] -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,A><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [n_s4vXc w1_s4vXd]
        case
            Text.ParserCombinators.ReadP.$wreadS_to_P
                GHC.Int.$fReadInt16_$creadList w1_s4vXd
        of
        { Unit# ww1_s4vXf [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s4vXf];
        };

GHC.Int.$fReadInt16 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.Int.Int16
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Int.$fReadInt16_$creadsPrec
                                    GHC.Int.$fReadInt16_$creadList
                                    GHC.Int.$fReadInt3
                                    GHC.Int.$fReadInt1];

GHC.Int.$fIntegralInt16_$cquot [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Int.Int16
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4vXg w1_s4vXh]
        case w_s4vXg of {
          GHC.Int.I16# ww1_s4vXj [Occ=Once*] ->
              case w1_s4vXh of {
                GHC.Int.I16# ww3_s4vXl [Occ=Once!] ->
                    case ww3_s4vXl of wild_s4vXm {
                      __DEFAULT ->
                          case quotInt# [ww1_s4vXj wild_s4vXm] of wild1_s4vXn {
                            __DEFAULT ->
                                case narrow16Int# [wild1_s4vXn] of sat_s4vXo {
                                  __DEFAULT -> GHC.Int.I16# [sat_s4vXo];
                                };
                          };
                      -1# ->
                          case ww1_s4vXj of wild1_s4vXp {
                            __DEFAULT ->
                                case quotInt# [wild1_s4vXp -1#] of sat_s4vXq {
                                  __DEFAULT ->
                                      case narrow16Int# [sat_s4vXq] of sat_s4vXr {
                                        __DEFAULT -> GHC.Int.I16# [sat_s4vXr];
                                      };
                                };
                            -32768# -> GHC.Real.overflowError;
                          };
                      0# -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Int.$fIntegralInt16_$crem
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Int.Int16
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vXu y_s4vXv]
        case ds_s4vXu of {
          GHC.Int.I16# x#_s4vXx [Occ=Once] ->
              case y_s4vXv of {
                GHC.Int.I16# y#_s4vXz [Occ=Once!] ->
                    case y#_s4vXz of wild2_s4vXA {
                      __DEFAULT ->
                          case remInt# [x#_s4vXx wild2_s4vXA] of wild3_s4vXB {
                            __DEFAULT ->
                                case narrow16Int# [wild3_s4vXB] of sat_s4vXC {
                                  __DEFAULT -> GHC.Int.I16# [sat_s4vXC];
                                };
                          };
                      0# -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Int.$w$cdiv [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Str=<S,U><S,1*U>, Unf=OtherCon []] =
    [] \r [ww_s4vXD ww1_s4vXE]
        case ww1_s4vXE of wild_s4vXF {
          __DEFAULT ->
              case GHC.Classes.divInt# ww_s4vXD wild_s4vXF of wild1_s4vXG {
                __DEFAULT -> narrow16Int# [wild1_s4vXG];
              };
          -1# ->
              case ww_s4vXD of wild1_s4vXH {
                __DEFAULT ->
                    case GHC.Classes.divInt# wild1_s4vXH -1# of wild2_s4vXI {
                      __DEFAULT -> narrow16Int# [wild2_s4vXI];
                    };
                -32768# -> GHC.Real.overflowError;
              };
          0# -> GHC.Real.divZeroError;
        };

GHC.Int.$fIntegralInt16_$cdiv [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Int.Int16
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4vXL w1_s4vXM]
        case w_s4vXL of {
          GHC.Int.I16# ww1_s4vXO [Occ=Once] ->
              case w1_s4vXM of {
                GHC.Int.I16# ww3_s4vXQ [Occ=Once] ->
                    case GHC.Int.$w$cdiv ww1_s4vXO ww3_s4vXQ of ww4_s4vXR {
                      __DEFAULT -> GHC.Int.I16# [ww4_s4vXR];
                    };
              };
        };

GHC.Int.$fIntegralInt16_$cmod [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Int.Int16
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4vXS w1_s4vXT]
        case w_s4vXS of {
          GHC.Int.I16# ww1_s4vXV [Occ=Once] ->
              case w1_s4vXT of {
                GHC.Int.I16# ww3_s4vXX [Occ=Once!] ->
                    case ww3_s4vXX of wild_s4vXY {
                      __DEFAULT ->
                          case GHC.Classes.modInt# ww1_s4vXV wild_s4vXY of wild1_s4vXZ {
                            __DEFAULT ->
                                case narrow16Int# [wild1_s4vXZ] of sat_s4vY0 {
                                  __DEFAULT -> GHC.Int.I16# [sat_s4vY0];
                                };
                          };
                      0# -> GHC.Real.divZeroError;
                    };
              };
        };

lvl7_r4kPy :: (GHC.Int.Int16, GHC.Int.Int16)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Real.overflowError GHC.Int.$fBitsInt3];

GHC.Int.$fIntegralInt16_$cquotRem [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> (GHC.Int.Int16, GHC.Int.Int16)
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4vY2 w1_s4vY3]
        case w_s4vY2 of {
          GHC.Int.I16# ww1_s4vY5 [Occ=Once*] ->
              case w1_s4vY3 of {
                GHC.Int.I16# ww3_s4vY7 [Occ=Once!] ->
                    case ww3_s4vY7 of wild_s4vY8 {
                      __DEFAULT ->
                          case quotRemInt# [ww1_s4vY5 wild_s4vY8] of {
                            (#,#) ipv_s4vYa [Occ=Once] ipv1_s4vYb [Occ=Once] ->
                                case narrow16Int# [ipv1_s4vYb] of sat_s4vYe {
                                  __DEFAULT ->
                                      let {
                                        sat_s4vYf [Occ=Once] :: GHC.Int.Int16
                                        [LclId] =
                                            CCCS GHC.Int.I16#! [sat_s4vYe];
                                      } in 
                                        case narrow16Int# [ipv_s4vYa] of sat_s4vYc {
                                          __DEFAULT ->
                                              let {
                                                sat_s4vYd [Occ=Once] :: GHC.Int.Int16
                                                [LclId] =
                                                    CCCS GHC.Int.I16#! [sat_s4vYc];
                                              } in  (,) [sat_s4vYd sat_s4vYf];
                                        };
                                };
                          };
                      -1# ->
                          case ww1_s4vY5 of wild1_s4vYg {
                            __DEFAULT ->
                                case quotRemInt# [wild1_s4vYg -1#] of {
                                  (#,#) ipv_s4vYi [Occ=Once] ipv1_s4vYj [Occ=Once] ->
                                      case narrow16Int# [ipv1_s4vYj] of sat_s4vYm {
                                        __DEFAULT ->
                                            let {
                                              sat_s4vYn [Occ=Once] :: GHC.Int.Int16
                                              [LclId] =
                                                  CCCS GHC.Int.I16#! [sat_s4vYm];
                                            } in 
                                              case narrow16Int# [ipv_s4vYi] of sat_s4vYk {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s4vYl [Occ=Once] :: GHC.Int.Int16
                                                      [LclId] =
                                                          CCCS GHC.Int.I16#! [sat_s4vYk];
                                                    } in  (,) [sat_s4vYl sat_s4vYn];
                                              };
                                      };
                                };
                            -32768# -> lvl7_r4kPy;
                          };
                      0# -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Int.$w$cdivMod [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int#
     -> GHC.Prim.Int# -> (# GHC.Int.Int16, GHC.Int.Int16 #)
[GblId, Arity=2, Str=<S,U><S,1*U>, Unf=OtherCon []] =
    [] \r [ww_s4vYp ww1_s4vYq]
        case ww1_s4vYq of wild_s4vYr {
          __DEFAULT ->
              let-no-escape {
                $j_s4vYs [Occ=Once*T[0], Dmd=<L,1*U(U,U)>]
                  :: (# GHC.Int.Int16, GHC.Int.Int16 #)
                [LclId[JoinId(0)], Unf=OtherCon []] =
                    [ww_s4vYp wild_s4vYr] \r []
                        case ># [ww_s4vYp 0#] of {
                          __DEFAULT ->
                              case <# [ww_s4vYp 0#] of {
                                __DEFAULT ->
                                    case quotRemInt# [ww_s4vYp wild_s4vYr] of {
                                      (#,#) ipv_s4vYw [Occ=Once] ipv1_s4vYx [Occ=Once] ->
                                          case narrow16Int# [ipv1_s4vYx] of sat_s4vYA {
                                            __DEFAULT ->
                                                let {
                                                  sat_s4vYB [Occ=Once] :: GHC.Int.Int16
                                                  [LclId] =
                                                      CCCS GHC.Int.I16#! [sat_s4vYA];
                                                } in 
                                                  case narrow16Int# [ipv_s4vYw] of sat_s4vYy {
                                                    __DEFAULT ->
                                                        let {
                                                          sat_s4vYz [Occ=Once] :: GHC.Int.Int16
                                                          [LclId] =
                                                              CCCS GHC.Int.I16#! [sat_s4vYy];
                                                        } in  (#,#) [sat_s4vYz sat_s4vYB];
                                                  };
                                          };
                                    };
                                1# ->
                                    case ># [wild_s4vYr 0#] of {
                                      __DEFAULT ->
                                          case quotRemInt# [ww_s4vYp wild_s4vYr] of {
                                            (#,#) ipv_s4vYE [Occ=Once] ipv1_s4vYF [Occ=Once] ->
                                                case narrow16Int# [ipv1_s4vYF] of sat_s4vYI {
                                                  __DEFAULT ->
                                                      let {
                                                        sat_s4vYJ [Occ=Once] :: GHC.Int.Int16
                                                        [LclId] =
                                                            CCCS GHC.Int.I16#! [sat_s4vYI];
                                                      } in 
                                                        case narrow16Int# [ipv_s4vYE] of sat_s4vYG {
                                                          __DEFAULT ->
                                                              let {
                                                                sat_s4vYH [Occ=Once]
                                                                  :: GHC.Int.Int16
                                                                [LclId] =
                                                                    CCCS GHC.Int.I16#! [sat_s4vYG];
                                                              } in  (#,#) [sat_s4vYH sat_s4vYJ];
                                                        };
                                                };
                                          };
                                      1# ->
                                          case +# [ww_s4vYp 1#] of sat_s4vYK {
                                            __DEFAULT ->
                                                case quotRemInt# [sat_s4vYK wild_s4vYr] of {
                                                  (#,#) ipv_s4vYM [Occ=Once]
                                                        ipv1_s4vYN [Occ=Once] ->
                                                      case +# [ipv1_s4vYN wild_s4vYr] of sat_s4vYR {
                                                        __DEFAULT ->
                                                            case -# [sat_s4vYR 1#] of sat_s4vYS {
                                                              __DEFAULT ->
                                                                  case
                                                                      narrow16Int# [sat_s4vYS]
                                                                  of
                                                                  sat_s4vYT
                                                                  { __DEFAULT ->
                                                                        let {
                                                                          sat_s4vYU [Occ=Once]
                                                                            :: GHC.Int.Int16
                                                                          [LclId] =
                                                                              CCCS GHC.Int.I16#! [sat_s4vYT];
                                                                        } in 
                                                                          case
                                                                              -# [ipv_s4vYM 1#]
                                                                          of
                                                                          sat_s4vYO
                                                                          { __DEFAULT ->
                                                                                case
                                                                                    narrow16Int# [sat_s4vYO]
                                                                                of
                                                                                sat_s4vYP
                                                                                { __DEFAULT ->
                                                                                      let {
                                                                                        sat_s4vYQ [Occ=Once]
                                                                                          :: GHC.Int.Int16
                                                                                        [LclId] =
                                                                                            CCCS GHC.Int.I16#! [sat_s4vYP];
                                                                                      } in 
                                                                                        (#,#) [sat_s4vYQ
                                                                                               sat_s4vYU];
                                                                                };
                                                                          };
                                                                  };
                                                            };
                                                      };
                                                };
                                          };
                                    };
                              };
                          1# ->
                              case <# [wild_s4vYr 0#] of {
                                __DEFAULT ->
                                    case <# [ww_s4vYp 0#] of {
                                      __DEFAULT ->
                                          case quotRemInt# [ww_s4vYp wild_s4vYr] of {
                                            (#,#) ipv_s4vYY [Occ=Once] ipv1_s4vYZ [Occ=Once] ->
                                                case narrow16Int# [ipv1_s4vYZ] of sat_s4vZ2 {
                                                  __DEFAULT ->
                                                      let {
                                                        sat_s4vZ3 [Occ=Once] :: GHC.Int.Int16
                                                        [LclId] =
                                                            CCCS GHC.Int.I16#! [sat_s4vZ2];
                                                      } in 
                                                        case narrow16Int# [ipv_s4vYY] of sat_s4vZ0 {
                                                          __DEFAULT ->
                                                              let {
                                                                sat_s4vZ1 [Occ=Once]
                                                                  :: GHC.Int.Int16
                                                                [LclId] =
                                                                    CCCS GHC.Int.I16#! [sat_s4vZ0];
                                                              } in  (#,#) [sat_s4vZ1 sat_s4vZ3];
                                                        };
                                                };
                                          };
                                      1# ->
                                          case ># [wild_s4vYr 0#] of {
                                            __DEFAULT ->
                                                case quotRemInt# [ww_s4vYp wild_s4vYr] of {
                                                  (#,#) ipv_s4vZ6 [Occ=Once]
                                                        ipv1_s4vZ7 [Occ=Once] ->
                                                      case narrow16Int# [ipv1_s4vZ7] of sat_s4vZa {
                                                        __DEFAULT ->
                                                            let {
                                                              sat_s4vZb [Occ=Once] :: GHC.Int.Int16
                                                              [LclId] =
                                                                  CCCS GHC.Int.I16#! [sat_s4vZa];
                                                            } in 
                                                              case
                                                                  narrow16Int# [ipv_s4vZ6]
                                                              of
                                                              sat_s4vZ8
                                                              { __DEFAULT ->
                                                                    let {
                                                                      sat_s4vZ9 [Occ=Once]
                                                                        :: GHC.Int.Int16
                                                                      [LclId] =
                                                                          CCCS GHC.Int.I16#! [sat_s4vZ8];
                                                                    } in 
                                                                      (#,#) [sat_s4vZ9 sat_s4vZb];
                                                              };
                                                      };
                                                };
                                            1# ->
                                                case +# [ww_s4vYp 1#] of sat_s4vZc {
                                                  __DEFAULT ->
                                                      case quotRemInt# [sat_s4vZc wild_s4vYr] of {
                                                        (#,#) ipv_s4vZe [Occ=Once]
                                                              ipv1_s4vZf [Occ=Once] ->
                                                            case
                                                                +# [ipv1_s4vZf wild_s4vYr]
                                                            of
                                                            sat_s4vZj
                                                            { __DEFAULT ->
                                                                  case
                                                                      -# [sat_s4vZj 1#]
                                                                  of
                                                                  sat_s4vZk
                                                                  { __DEFAULT ->
                                                                        case
                                                                            narrow16Int# [sat_s4vZk]
                                                                        of
                                                                        sat_s4vZl
                                                                        { __DEFAULT ->
                                                                              let {
                                                                                sat_s4vZm [Occ=Once]
                                                                                  :: GHC.Int.Int16
                                                                                [LclId] =
                                                                                    CCCS GHC.Int.I16#! [sat_s4vZl];
                                                                              } in 
                                                                                case
                                                                                    -# [ipv_s4vZe
                                                                                        1#]
                                                                                of
                                                                                sat_s4vZg
                                                                                { __DEFAULT ->
                                                                                      case
                                                                                          narrow16Int# [sat_s4vZg]
                                                                                      of
                                                                                      sat_s4vZh
                                                                                      { __DEFAULT ->
                                                                                            let {
                                                                                              sat_s4vZi [Occ=Once]
                                                                                                :: GHC.Int.Int16
                                                                                              [LclId] =
                                                                                                  CCCS GHC.Int.I16#! [sat_s4vZh];
                                                                                            } in 
                                                                                              (#,#) [sat_s4vZi
                                                                                                     sat_s4vZm];
                                                                                      };
                                                                                };
                                                                        };
                                                                  };
                                                            };
                                                      };
                                                };
                                          };
                                    };
                                1# ->
                                    case -# [ww_s4vYp 1#] of sat_s4vZn {
                                      __DEFAULT ->
                                          case quotRemInt# [sat_s4vZn wild_s4vYr] of {
                                            (#,#) ipv_s4vZp [Occ=Once] ipv1_s4vZq [Occ=Once] ->
                                                case +# [ipv1_s4vZq wild_s4vYr] of sat_s4vZu {
                                                  __DEFAULT ->
                                                      case +# [sat_s4vZu 1#] of sat_s4vZv {
                                                        __DEFAULT ->
                                                            case
                                                                narrow16Int# [sat_s4vZv]
                                                            of
                                                            sat_s4vZw
                                                            { __DEFAULT ->
                                                                  let {
                                                                    sat_s4vZx [Occ=Once]
                                                                      :: GHC.Int.Int16
                                                                    [LclId] =
                                                                        CCCS GHC.Int.I16#! [sat_s4vZw];
                                                                  } in 
                                                                    case
                                                                        -# [ipv_s4vZp 1#]
                                                                    of
                                                                    sat_s4vZr
                                                                    { __DEFAULT ->
                                                                          case
                                                                              narrow16Int# [sat_s4vZr]
                                                                          of
                                                                          sat_s4vZs
                                                                          { __DEFAULT ->
                                                                                let {
                                                                                  sat_s4vZt [Occ=Once]
                                                                                    :: GHC.Int.Int16
                                                                                  [LclId] =
                                                                                      CCCS GHC.Int.I16#! [sat_s4vZs];
                                                                                } in 
                                                                                  (#,#) [sat_s4vZt
                                                                                         sat_s4vZx];
                                                                          };
                                                                    };
                                                            };
                                                      };
                                                };
                                          };
                                    };
                              };
                        };
              } in 
                case wild_s4vYr of {
                  __DEFAULT -> $j_s4vYs;
                  -1# ->
                      case ww_s4vYp of {
                        __DEFAULT -> $j_s4vYs;
                        -32768# -> (#,#) [GHC.Real.overflowError GHC.Int.$fBitsInt3];
                      };
                };
          0# -> GHC.Real.divZeroError;
        };

GHC.Int.$fIntegralInt16_$cdivMod [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> (GHC.Int.Int16, GHC.Int.Int16)
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4vZB w1_s4vZC]
        case w_s4vZB of {
          GHC.Int.I16# ww1_s4vZE [Occ=Once] ->
              case w1_s4vZC of {
                GHC.Int.I16# ww3_s4vZG [Occ=Once] ->
                    case GHC.Int.$w$cdivMod ww1_s4vZE ww3_s4vZG of {
                      (#,#) ww5_s4vZI [Occ=Once] ww6_s4vZJ [Occ=Once] ->
                          (,) [ww5_s4vZI ww6_s4vZJ];
                    };
              };
        };

GHC.Int.$fRealInt16_$ctoRational [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int16 -> GHC.Real.Rational
[GblId, Arity=1, Str=<S(S),1*U(U)>m, Unf=OtherCon []] =
    [] \r [w_s4vZK]
        case w_s4vZK of {
          GHC.Int.I16# ww1_s4vZM [Occ=Once] ->
              case GHC.Integer.Type.smallInteger ww1_s4vZM of sat_s4vZN {
                __DEFAULT ->
                    case
                        GHC.Integer.Type.timesInteger sat_s4vZN GHC.Int.$fRealInt1
                    of
                    sat_s4vZO
                    { __DEFAULT ->
                          case GHC.Real.$w$sreduce sat_s4vZO GHC.Int.$fRealInt1 of {
                            (#,#) ww3_s4vZQ [Occ=Once] ww4_s4vZR [Occ=Once] ->
                                GHC.Real.:% [ww3_s4vZQ ww4_s4vZR];
                          };
                    };
              };
        };

GHC.Int.$fRealInt16 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Real.Real GHC.Int.Int16
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Real.C:Real! [GHC.Int.$fNumInt16
                                    GHC.Int.$fOrdInt16
                                    GHC.Int.$fRealInt16_$ctoRational];

GHC.Int.$fIntegralInt16 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Real.Integral GHC.Int.Int16
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Real.C:Integral! [GHC.Int.$fRealInt16
                                        GHC.Int.$fEnumInt16
                                        GHC.Int.$fIntegralInt16_$cquot
                                        GHC.Int.$fIntegralInt16_$crem
                                        GHC.Int.$fIntegralInt16_$cdiv
                                        GHC.Int.$fIntegralInt16_$cmod
                                        GHC.Int.$fIntegralInt16_$cquotRem
                                        GHC.Int.$fIntegralInt16_$cdivMod
                                        GHC.Int.$fIntegralInt16_$ctoInteger];

GHC.Int.$fIxInt16_$cunsafeIndex
  :: (GHC.Int.Int16, GHC.Int.Int16) -> GHC.Int.Int16 -> GHC.Types.Int
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S(S)L),1*U(1*U(U),A)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vZS i_s4vZT]
        case ds_s4vZS of {
          (,) m_s4vZV [Occ=Once!] _ [Occ=Dead] ->
              case i_s4vZT of {
                GHC.Int.I16# x#_s4vZY [Occ=Once] ->
                    case m_s4vZV of {
                      GHC.Int.I16# x#1_s4w00 [Occ=Once] ->
                          case -# [x#_s4vZY x#1_s4w00] of sat_s4w01 {
                            __DEFAULT -> GHC.Types.I# [sat_s4w01];
                          };
                    };
              };
        };

GHC.Int.$fIxInt16_$crange
  :: (GHC.Int.Int16, GHC.Int.Int16) -> [GHC.Int.Int16]
[GblId,
 Arity=1,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>,
 Unf=OtherCon []] =
    [] \r [ds_s4w02]
        case ds_s4w02 of {
          (,) m_s4w04 [Occ=Once] n_s4w05 [Occ=Once] ->
              GHC.Int.$fEnumInt16_$cenumFromTo m_s4w04 n_s4w05;
        };

GHC.Int.$fIxInt16_$crangeSize
  :: (GHC.Int.Int16, GHC.Int.Int16) -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>m,
 Unf=OtherCon []] =
    [] \r [b_s4w06]
        case b_s4w06 of {
          (,) _l_s4w08 [Occ=Once!] h_s4w09 [Occ=Once!] ->
              case _l_s4w08 of {
                GHC.Int.I16# x_s4w0b ->
                    case h_s4w09 of {
                      GHC.Int.I16# y_s4w0d ->
                          case <=# [x_s4w0b y_s4w0d] of {
                            __DEFAULT -> GHC.Int.$fIxInt1;
                            1# ->
                                case -# [y_s4w0d x_s4w0b] of sat_s4w0f {
                                  __DEFAULT ->
                                      case +# [sat_s4w0f 1#] of sat_s4w0g {
                                        __DEFAULT -> GHC.Types.I# [sat_s4w0g];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fIxInt16_$cunsafeRangeSize
  :: (GHC.Int.Int16, GHC.Int.Int16) -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>m,
 Unf=OtherCon []] =
    [] \r [b_s4w0h]
        case b_s4w0h of {
          (,) _l_s4w0j [Occ=Once!] h_s4w0k [Occ=Once!] ->
              case h_s4w0k of {
                GHC.Int.I16# x#_s4w0m [Occ=Once] ->
                    case _l_s4w0j of {
                      GHC.Int.I16# x#1_s4w0o [Occ=Once] ->
                          case -# [x#_s4w0m x#1_s4w0o] of sat_s4w0p {
                            __DEFAULT ->
                                case +# [sat_s4w0p 1#] of sat_s4w0q {
                                  __DEFAULT -> GHC.Types.I# [sat_s4w0q];
                                };
                          };
                    };
              };
        };

GHC.Int.$fIxInt16_$cindex [InlPrag=INLINE (sat-args=2)]
  :: (GHC.Int.Int16, GHC.Int.Int16) -> GHC.Int.Int16 -> GHC.Types.Int
[GblId,
 Arity=2,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s4w0r eta1_s4w0s]
        case eta_s4w0r of {
          (,) m_s4w0u [Occ=Once!] n_s4w0v [Occ=Once!] ->
              case m_s4w0u of {
                GHC.Int.I16# x_s4w0x ->
                    case eta1_s4w0s of {
                      GHC.Int.I16# y_s4w0z ->
                          case <=# [x_s4w0x y_s4w0z] of {
                            __DEFAULT -> GHC.Arr.hopelessIndexError;
                            1# ->
                                case n_s4w0v of {
                                  GHC.Int.I16# y1_s4w0C [Occ=Once] ->
                                      case <=# [y_s4w0z y1_s4w0C] of {
                                        __DEFAULT -> GHC.Arr.hopelessIndexError;
                                        1# ->
                                            case -# [y_s4w0z x_s4w0x] of sat_s4w0E {
                                              __DEFAULT -> GHC.Types.I# [sat_s4w0E];
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fIxInt16 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Arr.Ix GHC.Int.Int16
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Arr.C:Ix! [GHC.Int.$fOrdInt16
                                 GHC.Int.$fIxInt16_$crange
                                 GHC.Int.$fIxInt16_$cindex
                                 GHC.Int.$fIxInt16_$cunsafeIndex
                                 GHC.Int.$fIxInt16_$cinRange
                                 GHC.Int.$fIxInt16_$crangeSize
                                 GHC.Int.$fIxInt16_$cunsafeRangeSize];

GHC.Int.eqInt32 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4w0F ds1_s4w0G]
        case ds_s4w0F of {
          GHC.Int.I32# x_s4w0I [Occ=Once] ->
              case ds1_s4w0G of {
                GHC.Int.I32# y_s4w0K [Occ=Once] ->
                    case ==# [x_s4w0I y_s4w0K] of sat_s4w0L {
                      __DEFAULT -> tagToEnum# [sat_s4w0L];
                    };
              };
        };

GHC.Int.$fEqInt32 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.Int.Int32
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.Int.eqInt32 GHC.Int.neInt32];

GHC.Int.gtInt32 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4w0M ds1_s4w0N]
        case ds_s4w0M of {
          GHC.Int.I32# x_s4w0P [Occ=Once] ->
              case ds1_s4w0N of {
                GHC.Int.I32# y_s4w0R [Occ=Once] ->
                    case ># [x_s4w0P y_s4w0R] of sat_s4w0S {
                      __DEFAULT -> tagToEnum# [sat_s4w0S];
                    };
              };
        };

GHC.Int.geInt32 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4w0T ds1_s4w0U]
        case ds_s4w0T of {
          GHC.Int.I32# x_s4w0W [Occ=Once] ->
              case ds1_s4w0U of {
                GHC.Int.I32# y_s4w0Y [Occ=Once] ->
                    case >=# [x_s4w0W y_s4w0Y] of sat_s4w0Z {
                      __DEFAULT -> tagToEnum# [sat_s4w0Z];
                    };
              };
        };

GHC.Int.ltInt32 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4w10 ds1_s4w11]
        case ds_s4w10 of {
          GHC.Int.I32# x_s4w13 [Occ=Once] ->
              case ds1_s4w11 of {
                GHC.Int.I32# y_s4w15 [Occ=Once] ->
                    case <# [x_s4w13 y_s4w15] of sat_s4w16 {
                      __DEFAULT -> tagToEnum# [sat_s4w16];
                    };
              };
        };

GHC.Int.leInt32 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4w17 ds1_s4w18]
        case ds_s4w17 of {
          GHC.Int.I32# x_s4w1a [Occ=Once] ->
              case ds1_s4w18 of {
                GHC.Int.I32# y_s4w1c [Occ=Once] ->
                    case <=# [x_s4w1a y_s4w1c] of sat_s4w1d {
                      __DEFAULT -> tagToEnum# [sat_s4w1d];
                    };
              };
        };

GHC.Int.$fOrdInt32_$ccompare
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [x_s4w1e y_s4w1f]
        case x_s4w1e of {
          GHC.Int.I32# x1_s4w1h ->
              case y_s4w1f of {
                GHC.Int.I32# y1_s4w1j ->
                    case ==# [x1_s4w1h y1_s4w1j] of {
                      __DEFAULT ->
                          case <=# [x1_s4w1h y1_s4w1j] of {
                            __DEFAULT -> GHC.Types.GT [];
                            1# -> GHC.Types.LT [];
                          };
                      1# -> GHC.Types.EQ [];
                    };
              };
        };

GHC.Int.$fOrdInt32_$cmax
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> GHC.Int.Int32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s4w1m y_s4w1n]
        case x_s4w1m of wild_s4w1o {
          GHC.Int.I32# x1_s4w1p [Occ=Once] ->
              case y_s4w1n of wild1_s4w1q {
                GHC.Int.I32# y1_s4w1r [Occ=Once] ->
                    case <=# [x1_s4w1p y1_s4w1r] of {
                      __DEFAULT -> wild_s4w1o;
                      1# -> wild1_s4w1q;
                    };
              };
        };

GHC.Int.$fOrdInt32_$cmin
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> GHC.Int.Int32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s4w1t y_s4w1u]
        case x_s4w1t of wild_s4w1v {
          GHC.Int.I32# x1_s4w1w [Occ=Once] ->
              case y_s4w1u of wild1_s4w1x {
                GHC.Int.I32# y1_s4w1y [Occ=Once] ->
                    case <=# [x1_s4w1w y1_s4w1y] of {
                      __DEFAULT -> wild1_s4w1x;
                      1# -> wild_s4w1v;
                    };
              };
        };

GHC.Int.$fOrdInt32 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord GHC.Int.Int32
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.Int.$fEqInt32
                                      GHC.Int.$fOrdInt32_$ccompare
                                      GHC.Int.ltInt32
                                      GHC.Int.leInt32
                                      GHC.Int.gtInt32
                                      GHC.Int.geInt32
                                      GHC.Int.$fOrdInt32_$cmax
                                      GHC.Int.$fOrdInt32_$cmin];

GHC.Int.$fIxInt32_$cinRange
  :: (GHC.Int.Int32, GHC.Int.Int32)
     -> GHC.Int.Int32 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S(S)L),1*U(1*U(U),1*U(U))><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4w1A i_s4w1B]
        case ds_s4w1A of {
          (,) m_s4w1D [Occ=Once!] n_s4w1E [Occ=Once!] ->
              case m_s4w1D of {
                GHC.Int.I32# x_s4w1G [Occ=Once] ->
                    case i_s4w1B of {
                      GHC.Int.I32# y_s4w1I ->
                          case <=# [x_s4w1G y_s4w1I] of {
                            __DEFAULT -> GHC.Types.False [];
                            1# ->
                                case n_s4w1E of {
                                  GHC.Int.I32# y1_s4w1L [Occ=Once] ->
                                      case <=# [y_s4w1I y1_s4w1L] of sat_s4w1M {
                                        __DEFAULT -> tagToEnum# [sat_s4w1M];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fNumInt3 :: GHC.Int.Int32
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I32#! [1#];

GHC.Int.$fNumInt32_$csignum :: GHC.Int.Int32 -> GHC.Int.Int32
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s4w1N]
        case x_s4w1N of {
          GHC.Int.I32# x1_s4w1P ->
              case ># [x1_s4w1P 0#] of {
                __DEFAULT ->
                    case x1_s4w1P of {
                      __DEFAULT -> GHC.Int.$fNumInt4;
                      0# -> GHC.Int.$fBitsInt6;
                    };
                1# -> GHC.Int.$fNumInt3;
              };
        };

GHC.Int.$fNumInt32_$cabs :: GHC.Int.Int32 -> GHC.Int.Int32
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s4w1S]
        case x_s4w1S of wild_s4w1T {
          GHC.Int.I32# x1_s4w1U ->
              case >=# [x1_s4w1U 0#] of {
                __DEFAULT ->
                    case negateInt# [x1_s4w1U] of sat_s4w1W {
                      __DEFAULT ->
                          case narrow32Int# [sat_s4w1W] of sat_s4w1X {
                            __DEFAULT -> GHC.Int.I32# [sat_s4w1X];
                          };
                    };
                1# -> wild_s4w1T;
              };
        };

GHC.Int.$fNumInt32 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Num.Num GHC.Int.Int32
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Num.C:Num! [GHC.Int.$fNumInt32_$c+
                                  GHC.Int.$fNumInt32_$c-
                                  GHC.Int.$fNumInt32_$c*
                                  GHC.Int.$fNumInt32_$cnegate
                                  GHC.Int.$fNumInt32_$cabs
                                  GHC.Int.$fNumInt32_$csignum
                                  GHC.Int.$fNumInt32_$cfromInteger];

GHC.Int.$fBitsInt5 :: GHC.Base.Maybe GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [GHC.Int.$fBitsInt4];

GHC.Int.$fBitsInt32_$cbitSizeMaybe
  :: GHC.Int.Int32 -> GHC.Base.Maybe GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>m2, Unf=OtherCon []] =
    [] \r [i_s4w1Y] GHC.Int.$fBitsInt5;

GHC.Int.$fBitsInt32_$cbit [InlPrag=INLINE (sat-args=0)]
  :: GHC.Types.Int -> GHC.Int.Int32
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [i_s4w1Z]
        case i_s4w1Z of {
          GHC.Types.I# i#_s4w21 ->
              case >=# [i#_s4w21 64#] of {
                __DEFAULT ->
                    case uncheckedIShiftL# [1# i#_s4w21] of sat_s4w23 {
                      __DEFAULT ->
                          case narrow32Int# [sat_s4w23] of sat_s4w24 {
                            __DEFAULT -> GHC.Int.I32# [sat_s4w24];
                          };
                    };
                1# -> GHC.Int.$fBitsInt6;
              };
        };

GHC.Int.$fBitsInt32_$ctestBit [InlPrag=INLINE (sat-args=0)]
  :: GHC.Int.Int32 -> GHC.Types.Int -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [x_s4w25 i_s4w26]
        case x_s4w25 of {
          GHC.Int.I32# x#_s4w28 [Occ=Once] ->
              case i_s4w26 of {
                GHC.Types.I# i#_s4w2a ->
                    case >=# [i#_s4w2a 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftL# [1# i#_s4w2a] of sat_s4w2d {
                            __DEFAULT ->
                                case narrow32Int# [sat_s4w2d] of sat_s4w2e {
                                  __DEFAULT ->
                                      case int2Word# [sat_s4w2e] of sat_s4w2f {
                                        __DEFAULT ->
                                            case int2Word# [x#_s4w28] of sat_s4w2c {
                                              __DEFAULT ->
                                                  case and# [sat_s4w2c sat_s4w2f] of sat_s4w2g {
                                                    __DEFAULT ->
                                                        case word2Int# [sat_s4w2g] of {
                                                          __DEFAULT -> GHC.Types.True [];
                                                          0# -> GHC.Types.False [];
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                      1# -> GHC.Types.False [];
                    };
              };
        };

GHC.Int.$fBitsInt32_$crotateR [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int32 -> GHC.Types.Int -> GHC.Int.Int32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s4w2i eta1_s4w2j]
        case eta_s4w2i of wild_s4w2k {
          GHC.Int.I32# x#_s4w2l [Occ=Once] ->
              case eta1_s4w2j of {
                GHC.Types.I# x1_s4w2n [Occ=Once] ->
                    case negateInt# [x1_s4w2n] of sat_s4w2o {
                      __DEFAULT ->
                          case int2Word# [sat_s4w2o] of sat_s4w2p {
                            __DEFAULT ->
                                case and# [sat_s4w2p 31##] of sat_s4w2q {
                                  __DEFAULT ->
                                      case word2Int# [sat_s4w2q] of wild2_s4w2r {
                                        __DEFAULT ->
                                            case int2Word# [x#_s4w2l] of sat_s4w2t {
                                              __DEFAULT ->
                                                  case
                                                      narrow32Word# [sat_s4w2t]
                                                  of
                                                  x'#_s4w2s [Dmd=<S,U>]
                                                  { __DEFAULT ->
                                                        case -# [32# wild2_s4w2r] of sat_s4w2v {
                                                          __DEFAULT ->
                                                              case
                                                                  uncheckedShiftRL# [x'#_s4w2s
                                                                                     sat_s4w2v]
                                                              of
                                                              sat_s4w2w
                                                              { __DEFAULT ->
                                                                    case
                                                                        uncheckedShiftL# [x'#_s4w2s
                                                                                          wild2_s4w2r]
                                                                    of
                                                                    sat_s4w2u
                                                                    { __DEFAULT ->
                                                                          case
                                                                              or# [sat_s4w2u
                                                                                   sat_s4w2w]
                                                                          of
                                                                          sat_s4w2x
                                                                          { __DEFAULT ->
                                                                                case
                                                                                    word2Int# [sat_s4w2x]
                                                                                of
                                                                                sat_s4w2y
                                                                                { __DEFAULT ->
                                                                                      case
                                                                                          narrow32Int# [sat_s4w2y]
                                                                                      of
                                                                                      sat_s4w2z
                                                                                      { __DEFAULT ->
                                                                                            GHC.Int.I32# [sat_s4w2z];
                                                                                      };
                                                                                };
                                                                          };
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                        0# -> wild_s4w2k;
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fBitsInt32_$ccomplementBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int32 -> GHC.Types.Int -> GHC.Int.Int32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s4w2A eta1_s4w2B]
        case eta_s4w2A of wild_s4w2C {
          GHC.Int.I32# x#_s4w2D [Occ=Once] ->
              case eta1_s4w2B of {
                GHC.Types.I# i#_s4w2F ->
                    case >=# [i#_s4w2F 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftL# [1# i#_s4w2F] of sat_s4w2I {
                            __DEFAULT ->
                                case narrow32Int# [sat_s4w2I] of sat_s4w2J {
                                  __DEFAULT ->
                                      case int2Word# [sat_s4w2J] of sat_s4w2K {
                                        __DEFAULT ->
                                            case int2Word# [x#_s4w2D] of sat_s4w2H {
                                              __DEFAULT ->
                                                  case xor# [sat_s4w2H sat_s4w2K] of sat_s4w2L {
                                                    __DEFAULT ->
                                                        case word2Int# [sat_s4w2L] of sat_s4w2M {
                                                          __DEFAULT -> GHC.Int.I32# [sat_s4w2M];
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                      1# -> wild_s4w2C;
                    };
              };
        };

GHC.Int.$fBitsInt32_$cclearBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int32 -> GHC.Types.Int -> GHC.Int.Int32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s4w2N eta1_s4w2O]
        case eta_s4w2N of {
          GHC.Int.I32# x#_s4w2Q [Occ=Once*] ->
              case eta1_s4w2O of {
                GHC.Types.I# i#_s4w2S ->
                    case >=# [i#_s4w2S 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftL# [1# i#_s4w2S] of sat_s4w2V {
                            __DEFAULT ->
                                case narrow32Int# [sat_s4w2V] of sat_s4w2W {
                                  __DEFAULT ->
                                      case int2Word# [sat_s4w2W] of sat_s4w2X {
                                        __DEFAULT ->
                                            case not# [sat_s4w2X] of sat_s4w2Y {
                                              __DEFAULT ->
                                                  case int2Word# [x#_s4w2Q] of sat_s4w2U {
                                                    __DEFAULT ->
                                                        case
                                                            and# [sat_s4w2U sat_s4w2Y]
                                                        of
                                                        sat_s4w2Z
                                                        { __DEFAULT ->
                                                              case
                                                                  word2Int# [sat_s4w2Z]
                                                              of
                                                              sat_s4w30
                                                              { __DEFAULT ->
                                                                    GHC.Int.I32# [sat_s4w30];
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                      1# ->
                          case int2Word# [x#_s4w2Q] of sat_s4w31 {
                            __DEFAULT ->
                                case and# [sat_s4w31 18446744073709551615##] of sat_s4w32 {
                                  __DEFAULT ->
                                      case word2Int# [sat_s4w32] of sat_s4w33 {
                                        __DEFAULT -> GHC.Int.I32# [sat_s4w33];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fBitsInt32_$csetBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int32 -> GHC.Types.Int -> GHC.Int.Int32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s4w34 eta1_s4w35]
        case eta_s4w34 of wild_s4w36 {
          GHC.Int.I32# x#_s4w37 [Occ=Once] ->
              case eta1_s4w35 of {
                GHC.Types.I# i#_s4w39 ->
                    case >=# [i#_s4w39 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftL# [1# i#_s4w39] of sat_s4w3c {
                            __DEFAULT ->
                                case narrow32Int# [sat_s4w3c] of sat_s4w3d {
                                  __DEFAULT ->
                                      case int2Word# [sat_s4w3d] of sat_s4w3e {
                                        __DEFAULT ->
                                            case int2Word# [x#_s4w37] of sat_s4w3b {
                                              __DEFAULT ->
                                                  case or# [sat_s4w3b sat_s4w3e] of sat_s4w3f {
                                                    __DEFAULT ->
                                                        case word2Int# [sat_s4w3f] of sat_s4w3g {
                                                          __DEFAULT -> GHC.Int.I32# [sat_s4w3g];
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                      1# -> wild_s4w36;
                    };
              };
        };

GHC.Int.$fBitsInt32_$crotateL [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int32 -> GHC.Types.Int -> GHC.Int.Int32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Int.$fBitsInt32_$crotate eta_B2 eta_B1;

GHC.Int.$fBitsInt32 [InlPrag=NOUSERINLINE CONLIKE]
  :: Data.Bits.Bits GHC.Int.Int32
[GblId[DFunId], Caf=NoCafRefs] =
    CCS_DONT_CARE Data.Bits.C:Bits! [GHC.Int.$fEqInt32
                                     GHC.Int.$fBitsInt32_$c.&.
                                     GHC.Int.$fBitsInt32_$c.|.
                                     GHC.Int.$fBitsInt32_$cxor
                                     GHC.Int.$fBitsInt32_$ccomplement
                                     GHC.Int.$fBitsInt32_$cshift
                                     GHC.Int.$fBitsInt32_$crotate
                                     GHC.Int.$fBitsInt6
                                     GHC.Int.$fBitsInt32_$cbit
                                     GHC.Int.$fBitsInt32_$csetBit
                                     GHC.Int.$fBitsInt32_$cclearBit
                                     GHC.Int.$fBitsInt32_$ccomplementBit
                                     GHC.Int.$fBitsInt32_$ctestBit
                                     GHC.Int.$fBitsInt32_$cbitSizeMaybe
                                     GHC.Int.$fBitsInt32_$cfiniteBitSize
                                     GHC.Int.$fBitsInt32_$cisSigned
                                     GHC.Int.$fBitsInt32_$cshiftL
                                     GHC.Int.$fBitsInt32_$cunsafeShiftL
                                     GHC.Int.$fBitsInt32_$cshiftR
                                     GHC.Int.$fBitsInt32_$cunsafeShiftR
                                     GHC.Int.$fBitsInt32_$crotateL
                                     GHC.Int.$fBitsInt32_$crotateR
                                     GHC.Int.$fBitsInt32_$cpopCount];

GHC.Int.$fFiniteBitsInt32 [InlPrag=NOUSERINLINE CONLIKE]
  :: Data.Bits.FiniteBits GHC.Int.Int32
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE Data.Bits.C:FiniteBits! [GHC.Int.$fBitsInt32
                                           GHC.Int.$fBitsInt32_$cfiniteBitSize
                                           GHC.Int.$fFiniteBitsInt32_$ccountLeadingZeros
                                           GHC.Int.$fFiniteBitsInt32_$ccountTrailingZeros];

GHC.Int.$fReadInt32_go [Occ=LoopBreaker]
  :: [(GHC.Types.Int, GHC.Base.String)]
     -> [(GHC.Int.Int32, GHC.Base.String)]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s4w3h]
        case ds_s4w3h of {
          [] -> [] [];
          : y_s4w3j [Occ=Once!] ys_s4w3k [Occ=Once] ->
              case y_s4w3j of {
                (,) x_s4w3m [Occ=Once!] r_s4w3n [Occ=Once] ->
                    let {
                      sat_s4w3t [Occ=Once] :: [(GHC.Int.Int32, GHC.Base.String)]
                      [LclId] =
                          [ys_s4w3k] \u [] GHC.Int.$fReadInt32_go ys_s4w3k; } in
                    let {
                      sat_s4w3r [Occ=Once] :: GHC.Int.Int32
                      [LclId] =
                          [x_s4w3m] \u []
                              case x_s4w3m of {
                                GHC.Types.I# x#_s4w3p [Occ=Once] ->
                                    case narrow32Int# [x#_s4w3p] of sat_s4w3q {
                                      __DEFAULT -> GHC.Int.I32# [sat_s4w3q];
                                    };
                              }; } in
                    let {
                      sat_s4w3s [Occ=Once] :: (GHC.Int.Int32, GHC.Base.String)
                      [LclId] =
                          CCCS (,)! [sat_s4w3r r_s4w3n];
                    } in  : [sat_s4w3s sat_s4w3t];
              };
        };

GHC.Int.$fReadInt32_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS GHC.Int.Int32
[GblId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [p_s4w3u s_s4w3v]
        case
            GHC.Read.$fReadInt_$sreadNumber
                GHC.Read.$fReadInt2
                p_s4w3u
                Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
        of
        sat_s4w3w
        { __DEFAULT ->
              case
                  Text.ParserCombinators.ReadP.run sat_s4w3w s_s4w3v
              of
              sat_s4w3x
              { __DEFAULT -> GHC.Int.$fReadInt32_go sat_s4w3x;
              };
        };

GHC.Int.$fReadInt6
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Int.Int32 -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,U><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [n_s4w3y eta_s4w3z]
        let {
          sat_s4w3A [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS GHC.Int.Int32
          [LclId] =
              [n_s4w3y] \r [eta_B1]
                  GHC.Int.$fReadInt32_$creadsPrec n_s4w3y eta_B1;
        } in 
          case
              Text.ParserCombinators.ReadP.$wreadS_to_P sat_s4w3A eta_s4w3z
          of
          { Unit# ww1_s4w3C [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s4w3C];
          };

GHC.Int.$fReadInt5
  :: Text.ParserCombinators.ReadP.P [GHC.Int.Int32]
[GblId] =
    [] \u []
        GHC.Read.list
            GHC.Int.$fReadInt6
            GHC.Int.$fIxInt1
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Int.$fReadInt32_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.Int.Int32]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Int.$fReadInt5 eta_B1;

GHC.Int.$fReadInt4
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        ([GHC.Int.Int32] -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,A><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [n_s4w3D w1_s4w3E]
        case
            Text.ParserCombinators.ReadP.$wreadS_to_P
                GHC.Int.$fReadInt32_$creadList w1_s4w3E
        of
        { Unit# ww1_s4w3G [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s4w3G];
        };

GHC.Int.$fReadInt32 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.Int.Int32
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Int.$fReadInt32_$creadsPrec
                                    GHC.Int.$fReadInt32_$creadList
                                    GHC.Int.$fReadInt6
                                    GHC.Int.$fReadInt4];

GHC.Int.$fIntegralInt32_$cquot [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> GHC.Int.Int32
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4w3H w1_s4w3I]
        case w_s4w3H of {
          GHC.Int.I32# ww1_s4w3K [Occ=Once*] ->
              case w1_s4w3I of {
                GHC.Int.I32# ww3_s4w3M [Occ=Once!] ->
                    case ww3_s4w3M of wild_s4w3N {
                      __DEFAULT ->
                          case quotInt# [ww1_s4w3K wild_s4w3N] of wild1_s4w3O {
                            __DEFAULT ->
                                case narrow32Int# [wild1_s4w3O] of sat_s4w3P {
                                  __DEFAULT -> GHC.Int.I32# [sat_s4w3P];
                                };
                          };
                      -1# ->
                          case ww1_s4w3K of wild1_s4w3Q {
                            __DEFAULT ->
                                case quotInt# [wild1_s4w3Q -1#] of sat_s4w3R {
                                  __DEFAULT ->
                                      case narrow32Int# [sat_s4w3R] of sat_s4w3S {
                                        __DEFAULT -> GHC.Int.I32# [sat_s4w3S];
                                      };
                                };
                            -2147483648# -> GHC.Real.overflowError;
                          };
                      0# -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Int.$fIntegralInt32_$crem
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> GHC.Int.Int32
[GblId, Arity=2, Str=<S,1*U(U)><S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [ds_s4w3V y_s4w3W]
        case ds_s4w3V of {
          GHC.Int.I32# x#_s4w3Y [Occ=Once] ->
              case y_s4w3W of {
                GHC.Int.I32# y#_s4w40 [Occ=Once!] ->
                    case y#_s4w40 of wild2_s4w41 {
                      __DEFAULT ->
                          case remInt# [x#_s4w3Y wild2_s4w41] of wild3_s4w42 {
                            __DEFAULT ->
                                case narrow32Int# [wild3_s4w42] of sat_s4w43 {
                                  __DEFAULT -> GHC.Int.I32# [sat_s4w43];
                                };
                          };
                      -1# -> GHC.Int.$fBitsInt6;
                      0# -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Int.$w$cdiv1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Str=<S,U><S,1*U>, Unf=OtherCon []] =
    [] \r [ww_s4w44 ww1_s4w45]
        case ww1_s4w45 of wild_s4w46 {
          __DEFAULT ->
              case GHC.Classes.divInt# ww_s4w44 wild_s4w46 of wild1_s4w47 {
                __DEFAULT -> narrow32Int# [wild1_s4w47];
              };
          -1# ->
              case ww_s4w44 of wild1_s4w48 {
                __DEFAULT ->
                    case GHC.Classes.divInt# wild1_s4w48 -1# of wild2_s4w49 {
                      __DEFAULT -> narrow32Int# [wild2_s4w49];
                    };
                -2147483648# -> GHC.Real.overflowError;
              };
          0# -> GHC.Real.divZeroError;
        };

GHC.Int.$fIntegralInt32_$cdiv [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> GHC.Int.Int32
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4w4c w1_s4w4d]
        case w_s4w4c of {
          GHC.Int.I32# ww1_s4w4f [Occ=Once] ->
              case w1_s4w4d of {
                GHC.Int.I32# ww3_s4w4h [Occ=Once] ->
                    case GHC.Int.$w$cdiv1 ww1_s4w4f ww3_s4w4h of ww4_s4w4i {
                      __DEFAULT -> GHC.Int.I32# [ww4_s4w4i];
                    };
              };
        };

GHC.Int.$fIntegralInt32_$cmod [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> GHC.Int.Int32
[GblId, Arity=2, Str=<S,1*U(U)><S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [w_s4w4j w1_s4w4k]
        case w_s4w4j of {
          GHC.Int.I32# ww1_s4w4m [Occ=Once] ->
              case w1_s4w4k of {
                GHC.Int.I32# ww3_s4w4o [Occ=Once!] ->
                    case ww3_s4w4o of wild_s4w4p {
                      __DEFAULT ->
                          case GHC.Classes.modInt# ww1_s4w4m wild_s4w4p of wild1_s4w4q {
                            __DEFAULT ->
                                case narrow32Int# [wild1_s4w4q] of sat_s4w4r {
                                  __DEFAULT -> GHC.Int.I32# [sat_s4w4r];
                                };
                          };
                      -1# -> GHC.Int.$fBitsInt6;
                      0# -> GHC.Real.divZeroError;
                    };
              };
        };

lvl8_r4kPz :: (GHC.Int.Int32, GHC.Int.Int32)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Real.overflowError GHC.Int.$fBitsInt6];

GHC.Int.$fIntegralInt32_$cquotRem [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> (GHC.Int.Int32, GHC.Int.Int32)
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4w4t w1_s4w4u]
        case w_s4w4t of {
          GHC.Int.I32# ww1_s4w4w [Occ=Once*] ->
              case w1_s4w4u of {
                GHC.Int.I32# ww3_s4w4y [Occ=Once!] ->
                    case ww3_s4w4y of wild_s4w4z {
                      __DEFAULT ->
                          case quotRemInt# [ww1_s4w4w wild_s4w4z] of {
                            (#,#) ipv_s4w4B [Occ=Once] ipv1_s4w4C [Occ=Once] ->
                                case narrow32Int# [ipv1_s4w4C] of sat_s4w4F {
                                  __DEFAULT ->
                                      let {
                                        sat_s4w4G [Occ=Once] :: GHC.Int.Int32
                                        [LclId] =
                                            CCCS GHC.Int.I32#! [sat_s4w4F];
                                      } in 
                                        case narrow32Int# [ipv_s4w4B] of sat_s4w4D {
                                          __DEFAULT ->
                                              let {
                                                sat_s4w4E [Occ=Once] :: GHC.Int.Int32
                                                [LclId] =
                                                    CCCS GHC.Int.I32#! [sat_s4w4D];
                                              } in  (,) [sat_s4w4E sat_s4w4G];
                                        };
                                };
                          };
                      -1# ->
                          case ww1_s4w4w of wild1_s4w4H {
                            __DEFAULT ->
                                case quotRemInt# [wild1_s4w4H -1#] of {
                                  (#,#) ipv_s4w4J [Occ=Once] ipv1_s4w4K [Occ=Once] ->
                                      case narrow32Int# [ipv1_s4w4K] of sat_s4w4N {
                                        __DEFAULT ->
                                            let {
                                              sat_s4w4O [Occ=Once] :: GHC.Int.Int32
                                              [LclId] =
                                                  CCCS GHC.Int.I32#! [sat_s4w4N];
                                            } in 
                                              case narrow32Int# [ipv_s4w4J] of sat_s4w4L {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s4w4M [Occ=Once] :: GHC.Int.Int32
                                                      [LclId] =
                                                          CCCS GHC.Int.I32#! [sat_s4w4L];
                                                    } in  (,) [sat_s4w4M sat_s4w4O];
                                              };
                                      };
                                };
                            -2147483648# -> lvl8_r4kPz;
                          };
                      0# -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Int.$w$cdivMod1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int#
     -> GHC.Prim.Int# -> (# GHC.Int.Int32, GHC.Int.Int32 #)
[GblId, Arity=2, Str=<S,U><S,1*U>, Unf=OtherCon []] =
    [] \r [ww_s4w4Q ww1_s4w4R]
        case ww1_s4w4R of wild_s4w4S {
          __DEFAULT ->
              let-no-escape {
                $j_s4w4T [Occ=Once*T[0], Dmd=<L,1*U(U,U)>]
                  :: (# GHC.Int.Int32, GHC.Int.Int32 #)
                [LclId[JoinId(0)], Unf=OtherCon []] =
                    [ww_s4w4Q wild_s4w4S] \r []
                        case ># [ww_s4w4Q 0#] of {
                          __DEFAULT ->
                              case <# [ww_s4w4Q 0#] of {
                                __DEFAULT ->
                                    case quotRemInt# [ww_s4w4Q wild_s4w4S] of {
                                      (#,#) ipv_s4w4X [Occ=Once] ipv1_s4w4Y [Occ=Once] ->
                                          case narrow32Int# [ipv1_s4w4Y] of sat_s4w51 {
                                            __DEFAULT ->
                                                let {
                                                  sat_s4w52 [Occ=Once] :: GHC.Int.Int32
                                                  [LclId] =
                                                      CCCS GHC.Int.I32#! [sat_s4w51];
                                                } in 
                                                  case narrow32Int# [ipv_s4w4X] of sat_s4w4Z {
                                                    __DEFAULT ->
                                                        let {
                                                          sat_s4w50 [Occ=Once] :: GHC.Int.Int32
                                                          [LclId] =
                                                              CCCS GHC.Int.I32#! [sat_s4w4Z];
                                                        } in  (#,#) [sat_s4w50 sat_s4w52];
                                                  };
                                          };
                                    };
                                1# ->
                                    case ># [wild_s4w4S 0#] of {
                                      __DEFAULT ->
                                          case quotRemInt# [ww_s4w4Q wild_s4w4S] of {
                                            (#,#) ipv_s4w55 [Occ=Once] ipv1_s4w56 [Occ=Once] ->
                                                case narrow32Int# [ipv1_s4w56] of sat_s4w59 {
                                                  __DEFAULT ->
                                                      let {
                                                        sat_s4w5a [Occ=Once] :: GHC.Int.Int32
                                                        [LclId] =
                                                            CCCS GHC.Int.I32#! [sat_s4w59];
                                                      } in 
                                                        case narrow32Int# [ipv_s4w55] of sat_s4w57 {
                                                          __DEFAULT ->
                                                              let {
                                                                sat_s4w58 [Occ=Once]
                                                                  :: GHC.Int.Int32
                                                                [LclId] =
                                                                    CCCS GHC.Int.I32#! [sat_s4w57];
                                                              } in  (#,#) [sat_s4w58 sat_s4w5a];
                                                        };
                                                };
                                          };
                                      1# ->
                                          case +# [ww_s4w4Q 1#] of sat_s4w5b {
                                            __DEFAULT ->
                                                case quotRemInt# [sat_s4w5b wild_s4w4S] of {
                                                  (#,#) ipv_s4w5d [Occ=Once]
                                                        ipv1_s4w5e [Occ=Once] ->
                                                      case +# [ipv1_s4w5e wild_s4w4S] of sat_s4w5i {
                                                        __DEFAULT ->
                                                            case -# [sat_s4w5i 1#] of sat_s4w5j {
                                                              __DEFAULT ->
                                                                  case
                                                                      narrow32Int# [sat_s4w5j]
                                                                  of
                                                                  sat_s4w5k
                                                                  { __DEFAULT ->
                                                                        let {
                                                                          sat_s4w5l [Occ=Once]
                                                                            :: GHC.Int.Int32
                                                                          [LclId] =
                                                                              CCCS GHC.Int.I32#! [sat_s4w5k];
                                                                        } in 
                                                                          case
                                                                              -# [ipv_s4w5d 1#]
                                                                          of
                                                                          sat_s4w5f
                                                                          { __DEFAULT ->
                                                                                case
                                                                                    narrow32Int# [sat_s4w5f]
                                                                                of
                                                                                sat_s4w5g
                                                                                { __DEFAULT ->
                                                                                      let {
                                                                                        sat_s4w5h [Occ=Once]
                                                                                          :: GHC.Int.Int32
                                                                                        [LclId] =
                                                                                            CCCS GHC.Int.I32#! [sat_s4w5g];
                                                                                      } in 
                                                                                        (#,#) [sat_s4w5h
                                                                                               sat_s4w5l];
                                                                                };
                                                                          };
                                                                  };
                                                            };
                                                      };
                                                };
                                          };
                                    };
                              };
                          1# ->
                              case <# [wild_s4w4S 0#] of {
                                __DEFAULT ->
                                    case <# [ww_s4w4Q 0#] of {
                                      __DEFAULT ->
                                          case quotRemInt# [ww_s4w4Q wild_s4w4S] of {
                                            (#,#) ipv_s4w5p [Occ=Once] ipv1_s4w5q [Occ=Once] ->
                                                case narrow32Int# [ipv1_s4w5q] of sat_s4w5t {
                                                  __DEFAULT ->
                                                      let {
                                                        sat_s4w5u [Occ=Once] :: GHC.Int.Int32
                                                        [LclId] =
                                                            CCCS GHC.Int.I32#! [sat_s4w5t];
                                                      } in 
                                                        case narrow32Int# [ipv_s4w5p] of sat_s4w5r {
                                                          __DEFAULT ->
                                                              let {
                                                                sat_s4w5s [Occ=Once]
                                                                  :: GHC.Int.Int32
                                                                [LclId] =
                                                                    CCCS GHC.Int.I32#! [sat_s4w5r];
                                                              } in  (#,#) [sat_s4w5s sat_s4w5u];
                                                        };
                                                };
                                          };
                                      1# ->
                                          case ># [wild_s4w4S 0#] of {
                                            __DEFAULT ->
                                                case quotRemInt# [ww_s4w4Q wild_s4w4S] of {
                                                  (#,#) ipv_s4w5x [Occ=Once]
                                                        ipv1_s4w5y [Occ=Once] ->
                                                      case narrow32Int# [ipv1_s4w5y] of sat_s4w5B {
                                                        __DEFAULT ->
                                                            let {
                                                              sat_s4w5C [Occ=Once] :: GHC.Int.Int32
                                                              [LclId] =
                                                                  CCCS GHC.Int.I32#! [sat_s4w5B];
                                                            } in 
                                                              case
                                                                  narrow32Int# [ipv_s4w5x]
                                                              of
                                                              sat_s4w5z
                                                              { __DEFAULT ->
                                                                    let {
                                                                      sat_s4w5A [Occ=Once]
                                                                        :: GHC.Int.Int32
                                                                      [LclId] =
                                                                          CCCS GHC.Int.I32#! [sat_s4w5z];
                                                                    } in 
                                                                      (#,#) [sat_s4w5A sat_s4w5C];
                                                              };
                                                      };
                                                };
                                            1# ->
                                                case +# [ww_s4w4Q 1#] of sat_s4w5D {
                                                  __DEFAULT ->
                                                      case quotRemInt# [sat_s4w5D wild_s4w4S] of {
                                                        (#,#) ipv_s4w5F [Occ=Once]
                                                              ipv1_s4w5G [Occ=Once] ->
                                                            case
                                                                +# [ipv1_s4w5G wild_s4w4S]
                                                            of
                                                            sat_s4w5K
                                                            { __DEFAULT ->
                                                                  case
                                                                      -# [sat_s4w5K 1#]
                                                                  of
                                                                  sat_s4w5L
                                                                  { __DEFAULT ->
                                                                        case
                                                                            narrow32Int# [sat_s4w5L]
                                                                        of
                                                                        sat_s4w5M
                                                                        { __DEFAULT ->
                                                                              let {
                                                                                sat_s4w5N [Occ=Once]
                                                                                  :: GHC.Int.Int32
                                                                                [LclId] =
                                                                                    CCCS GHC.Int.I32#! [sat_s4w5M];
                                                                              } in 
                                                                                case
                                                                                    -# [ipv_s4w5F
                                                                                        1#]
                                                                                of
                                                                                sat_s4w5H
                                                                                { __DEFAULT ->
                                                                                      case
                                                                                          narrow32Int# [sat_s4w5H]
                                                                                      of
                                                                                      sat_s4w5I
                                                                                      { __DEFAULT ->
                                                                                            let {
                                                                                              sat_s4w5J [Occ=Once]
                                                                                                :: GHC.Int.Int32
                                                                                              [LclId] =
                                                                                                  CCCS GHC.Int.I32#! [sat_s4w5I];
                                                                                            } in 
                                                                                              (#,#) [sat_s4w5J
                                                                                                     sat_s4w5N];
                                                                                      };
                                                                                };
                                                                        };
                                                                  };
                                                            };
                                                      };
                                                };
                                          };
                                    };
                                1# ->
                                    case -# [ww_s4w4Q 1#] of sat_s4w5O {
                                      __DEFAULT ->
                                          case quotRemInt# [sat_s4w5O wild_s4w4S] of {
                                            (#,#) ipv_s4w5Q [Occ=Once] ipv1_s4w5R [Occ=Once] ->
                                                case +# [ipv1_s4w5R wild_s4w4S] of sat_s4w5V {
                                                  __DEFAULT ->
                                                      case +# [sat_s4w5V 1#] of sat_s4w5W {
                                                        __DEFAULT ->
                                                            case
                                                                narrow32Int# [sat_s4w5W]
                                                            of
                                                            sat_s4w5X
                                                            { __DEFAULT ->
                                                                  let {
                                                                    sat_s4w5Y [Occ=Once]
                                                                      :: GHC.Int.Int32
                                                                    [LclId] =
                                                                        CCCS GHC.Int.I32#! [sat_s4w5X];
                                                                  } in 
                                                                    case
                                                                        -# [ipv_s4w5Q 1#]
                                                                    of
                                                                    sat_s4w5S
                                                                    { __DEFAULT ->
                                                                          case
                                                                              narrow32Int# [sat_s4w5S]
                                                                          of
                                                                          sat_s4w5T
                                                                          { __DEFAULT ->
                                                                                let {
                                                                                  sat_s4w5U [Occ=Once]
                                                                                    :: GHC.Int.Int32
                                                                                  [LclId] =
                                                                                      CCCS GHC.Int.I32#! [sat_s4w5T];
                                                                                } in 
                                                                                  (#,#) [sat_s4w5U
                                                                                         sat_s4w5Y];
                                                                          };
                                                                    };
                                                            };
                                                      };
                                                };
                                          };
                                    };
                              };
                        };
              } in 
                case wild_s4w4S of {
                  __DEFAULT -> $j_s4w4T;
                  -1# ->
                      case ww_s4w4Q of {
                        __DEFAULT -> $j_s4w4T;
                        -2147483648# -> (#,#) [GHC.Real.overflowError GHC.Int.$fBitsInt6];
                      };
                };
          0# -> GHC.Real.divZeroError;
        };

GHC.Int.$fIntegralInt32_$cdivMod [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> (GHC.Int.Int32, GHC.Int.Int32)
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4w62 w1_s4w63]
        case w_s4w62 of {
          GHC.Int.I32# ww1_s4w65 [Occ=Once] ->
              case w1_s4w63 of {
                GHC.Int.I32# ww3_s4w67 [Occ=Once] ->
                    case GHC.Int.$w$cdivMod1 ww1_s4w65 ww3_s4w67 of {
                      (#,#) ww5_s4w69 [Occ=Once] ww6_s4w6a [Occ=Once] ->
                          (,) [ww5_s4w69 ww6_s4w6a];
                    };
              };
        };

GHC.Int.$fRealInt32_$ctoRational [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int32 -> GHC.Real.Rational
[GblId, Arity=1, Str=<S(S),1*U(U)>m, Unf=OtherCon []] =
    [] \r [w_s4w6b]
        case w_s4w6b of {
          GHC.Int.I32# ww1_s4w6d [Occ=Once] ->
              case GHC.Integer.Type.smallInteger ww1_s4w6d of sat_s4w6e {
                __DEFAULT ->
                    case
                        GHC.Integer.Type.timesInteger sat_s4w6e GHC.Int.$fRealInt1
                    of
                    sat_s4w6f
                    { __DEFAULT ->
                          case GHC.Real.$w$sreduce sat_s4w6f GHC.Int.$fRealInt1 of {
                            (#,#) ww3_s4w6h [Occ=Once] ww4_s4w6i [Occ=Once] ->
                                GHC.Real.:% [ww3_s4w6h ww4_s4w6i];
                          };
                    };
              };
        };

GHC.Int.$fRealInt32 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Real.Real GHC.Int.Int32
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Real.C:Real! [GHC.Int.$fNumInt32
                                    GHC.Int.$fOrdInt32
                                    GHC.Int.$fRealInt32_$ctoRational];

GHC.Int.$fIntegralInt32 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Real.Integral GHC.Int.Int32
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Real.C:Integral! [GHC.Int.$fRealInt32
                                        GHC.Int.$fEnumInt32
                                        GHC.Int.$fIntegralInt32_$cquot
                                        GHC.Int.$fIntegralInt32_$crem
                                        GHC.Int.$fIntegralInt32_$cdiv
                                        GHC.Int.$fIntegralInt32_$cmod
                                        GHC.Int.$fIntegralInt32_$cquotRem
                                        GHC.Int.$fIntegralInt32_$cdivMod
                                        GHC.Int.$fIntegralInt32_$ctoInteger];

GHC.Int.$fIxInt32_$crange
  :: (GHC.Int.Int32, GHC.Int.Int32) -> [GHC.Int.Int32]
[GblId,
 Arity=1,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>,
 Unf=OtherCon []] =
    [] \r [ds_s4w6j]
        case ds_s4w6j of {
          (,) m_s4w6l [Occ=Once] n_s4w6m [Occ=Once] ->
              GHC.Int.$fEnumInt32_$cenumFromTo m_s4w6l n_s4w6m;
        };

GHC.Int.$fIxInt32_$cunsafeIndex
  :: (GHC.Int.Int32, GHC.Int.Int32) -> GHC.Int.Int32 -> GHC.Types.Int
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S(S)L),1*U(1*U(U),A)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4w6n i_s4w6o]
        case ds_s4w6n of {
          (,) m_s4w6q [Occ=Once!] _ [Occ=Dead] ->
              case i_s4w6o of {
                GHC.Int.I32# x#_s4w6t [Occ=Once] ->
                    case m_s4w6q of {
                      GHC.Int.I32# x#1_s4w6v [Occ=Once] ->
                          case -# [x#_s4w6t x#1_s4w6v] of sat_s4w6w {
                            __DEFAULT -> GHC.Types.I# [sat_s4w6w];
                          };
                    };
              };
        };

GHC.Int.$fIxInt32_$crangeSize
  :: (GHC.Int.Int32, GHC.Int.Int32) -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>m,
 Unf=OtherCon []] =
    [] \r [b_s4w6x]
        case b_s4w6x of {
          (,) _l_s4w6z [Occ=Once!] h_s4w6A [Occ=Once!] ->
              case _l_s4w6z of {
                GHC.Int.I32# x_s4w6C ->
                    case h_s4w6A of {
                      GHC.Int.I32# y_s4w6E ->
                          case <=# [x_s4w6C y_s4w6E] of {
                            __DEFAULT -> GHC.Int.$fIxInt1;
                            1# ->
                                case -# [y_s4w6E x_s4w6C] of sat_s4w6G {
                                  __DEFAULT ->
                                      case +# [sat_s4w6G 1#] of sat_s4w6H {
                                        __DEFAULT -> GHC.Types.I# [sat_s4w6H];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fIxInt32_$cunsafeRangeSize
  :: (GHC.Int.Int32, GHC.Int.Int32) -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>m,
 Unf=OtherCon []] =
    [] \r [b_s4w6I]
        case b_s4w6I of {
          (,) _l_s4w6K [Occ=Once!] h_s4w6L [Occ=Once!] ->
              case h_s4w6L of {
                GHC.Int.I32# x#_s4w6N [Occ=Once] ->
                    case _l_s4w6K of {
                      GHC.Int.I32# x#1_s4w6P [Occ=Once] ->
                          case -# [x#_s4w6N x#1_s4w6P] of sat_s4w6Q {
                            __DEFAULT ->
                                case +# [sat_s4w6Q 1#] of sat_s4w6R {
                                  __DEFAULT -> GHC.Types.I# [sat_s4w6R];
                                };
                          };
                    };
              };
        };

GHC.Int.$fIxInt32_$cindex [InlPrag=INLINE (sat-args=2)]
  :: (GHC.Int.Int32, GHC.Int.Int32) -> GHC.Int.Int32 -> GHC.Types.Int
[GblId,
 Arity=2,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s4w6S eta1_s4w6T]
        case eta_s4w6S of {
          (,) m_s4w6V [Occ=Once!] n_s4w6W [Occ=Once!] ->
              case m_s4w6V of {
                GHC.Int.I32# x_s4w6Y ->
                    case eta1_s4w6T of {
                      GHC.Int.I32# y_s4w70 ->
                          case <=# [x_s4w6Y y_s4w70] of {
                            __DEFAULT -> GHC.Arr.hopelessIndexError;
                            1# ->
                                case n_s4w6W of {
                                  GHC.Int.I32# y1_s4w73 [Occ=Once] ->
                                      case <=# [y_s4w70 y1_s4w73] of {
                                        __DEFAULT -> GHC.Arr.hopelessIndexError;
                                        1# ->
                                            case -# [y_s4w70 x_s4w6Y] of sat_s4w75 {
                                              __DEFAULT -> GHC.Types.I# [sat_s4w75];
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fIxInt32 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Arr.Ix GHC.Int.Int32
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Arr.C:Ix! [GHC.Int.$fOrdInt32
                                 GHC.Int.$fIxInt32_$crange
                                 GHC.Int.$fIxInt32_$cindex
                                 GHC.Int.$fIxInt32_$cunsafeIndex
                                 GHC.Int.$fIxInt32_$cinRange
                                 GHC.Int.$fIxInt32_$crangeSize
                                 GHC.Int.$fIxInt32_$cunsafeRangeSize];

GHC.Int.eqInt64 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4w76 ds1_s4w77]
        case ds_s4w76 of {
          GHC.Int.I64# x_s4w79 [Occ=Once] ->
              case ds1_s4w77 of {
                GHC.Int.I64# y_s4w7b [Occ=Once] ->
                    case ==# [x_s4w79 y_s4w7b] of sat_s4w7c {
                      __DEFAULT -> tagToEnum# [sat_s4w7c];
                    };
              };
        };

GHC.Int.$fEqInt64 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.Int.Int64
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.Int.eqInt64 GHC.Int.neInt64];

GHC.Int.gtInt64 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4w7d ds1_s4w7e]
        case ds_s4w7d of {
          GHC.Int.I64# x_s4w7g [Occ=Once] ->
              case ds1_s4w7e of {
                GHC.Int.I64# y_s4w7i [Occ=Once] ->
                    case ># [x_s4w7g y_s4w7i] of sat_s4w7j {
                      __DEFAULT -> tagToEnum# [sat_s4w7j];
                    };
              };
        };

GHC.Int.geInt64 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4w7k ds1_s4w7l]
        case ds_s4w7k of {
          GHC.Int.I64# x_s4w7n [Occ=Once] ->
              case ds1_s4w7l of {
                GHC.Int.I64# y_s4w7p [Occ=Once] ->
                    case >=# [x_s4w7n y_s4w7p] of sat_s4w7q {
                      __DEFAULT -> tagToEnum# [sat_s4w7q];
                    };
              };
        };

GHC.Int.ltInt64 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4w7r ds1_s4w7s]
        case ds_s4w7r of {
          GHC.Int.I64# x_s4w7u [Occ=Once] ->
              case ds1_s4w7s of {
                GHC.Int.I64# y_s4w7w [Occ=Once] ->
                    case <# [x_s4w7u y_s4w7w] of sat_s4w7x {
                      __DEFAULT -> tagToEnum# [sat_s4w7x];
                    };
              };
        };

GHC.Int.leInt64 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4w7y ds1_s4w7z]
        case ds_s4w7y of {
          GHC.Int.I64# x_s4w7B [Occ=Once] ->
              case ds1_s4w7z of {
                GHC.Int.I64# y_s4w7D [Occ=Once] ->
                    case <=# [x_s4w7B y_s4w7D] of sat_s4w7E {
                      __DEFAULT -> tagToEnum# [sat_s4w7E];
                    };
              };
        };

GHC.Int.$fOrdInt64_$ccompare
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [x_s4w7F y_s4w7G]
        case x_s4w7F of {
          GHC.Int.I64# x1_s4w7I ->
              case y_s4w7G of {
                GHC.Int.I64# y1_s4w7K ->
                    case ==# [x1_s4w7I y1_s4w7K] of {
                      __DEFAULT ->
                          case <=# [x1_s4w7I y1_s4w7K] of {
                            __DEFAULT -> GHC.Types.GT [];
                            1# -> GHC.Types.LT [];
                          };
                      1# -> GHC.Types.EQ [];
                    };
              };
        };

GHC.Int.$fOrdInt64_$cmax
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> GHC.Int.Int64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s4w7N y_s4w7O]
        case x_s4w7N of wild_s4w7P {
          GHC.Int.I64# x1_s4w7Q [Occ=Once] ->
              case y_s4w7O of wild1_s4w7R {
                GHC.Int.I64# y1_s4w7S [Occ=Once] ->
                    case <=# [x1_s4w7Q y1_s4w7S] of {
                      __DEFAULT -> wild_s4w7P;
                      1# -> wild1_s4w7R;
                    };
              };
        };

GHC.Int.$fOrdInt64_$cmin
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> GHC.Int.Int64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s4w7U y_s4w7V]
        case x_s4w7U of wild_s4w7W {
          GHC.Int.I64# x1_s4w7X [Occ=Once] ->
              case y_s4w7V of wild1_s4w7Y {
                GHC.Int.I64# y1_s4w7Z [Occ=Once] ->
                    case <=# [x1_s4w7X y1_s4w7Z] of {
                      __DEFAULT -> wild1_s4w7Y;
                      1# -> wild_s4w7W;
                    };
              };
        };

GHC.Int.$fOrdInt64 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord GHC.Int.Int64
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.Int.$fEqInt64
                                      GHC.Int.$fOrdInt64_$ccompare
                                      GHC.Int.ltInt64
                                      GHC.Int.leInt64
                                      GHC.Int.gtInt64
                                      GHC.Int.geInt64
                                      GHC.Int.$fOrdInt64_$cmax
                                      GHC.Int.$fOrdInt64_$cmin];

GHC.Int.$fIxInt64_$cinRange
  :: (GHC.Int.Int64, GHC.Int.Int64)
     -> GHC.Int.Int64 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S(S)L),1*U(1*U(U),1*U(U))><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4w81 i_s4w82]
        case ds_s4w81 of {
          (,) m_s4w84 [Occ=Once!] n_s4w85 [Occ=Once!] ->
              case m_s4w84 of {
                GHC.Int.I64# x_s4w87 [Occ=Once] ->
                    case i_s4w82 of {
                      GHC.Int.I64# y_s4w89 ->
                          case <=# [x_s4w87 y_s4w89] of {
                            __DEFAULT -> GHC.Types.False [];
                            1# ->
                                case n_s4w85 of {
                                  GHC.Int.I64# y1_s4w8c [Occ=Once] ->
                                      case <=# [y_s4w89 y1_s4w8c] of sat_s4w8d {
                                        __DEFAULT -> tagToEnum# [sat_s4w8d];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fNumInt5 :: GHC.Int.Int64
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I64#! [1#];

GHC.Int.$fNumInt64_$csignum :: GHC.Int.Int64 -> GHC.Int.Int64
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s4w8e]
        case x_s4w8e of {
          GHC.Int.I64# x1_s4w8g ->
              case ># [x1_s4w8g 0#] of {
                __DEFAULT ->
                    case x1_s4w8g of {
                      __DEFAULT -> GHC.Int.$fNumInt6;
                      0# -> GHC.Int.$fBitsInt10;
                    };
                1# -> GHC.Int.$fNumInt5;
              };
        };

GHC.Int.$fNumInt64_$cabs :: GHC.Int.Int64 -> GHC.Int.Int64
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s4w8j]
        case x_s4w8j of wild_s4w8k {
          GHC.Int.I64# x1_s4w8l ->
              case >=# [x1_s4w8l 0#] of {
                __DEFAULT ->
                    case negateInt# [x1_s4w8l] of sat_s4w8n {
                      __DEFAULT -> GHC.Int.I64# [sat_s4w8n];
                    };
                1# -> wild_s4w8k;
              };
        };

GHC.Int.$fNumInt64 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Num.Num GHC.Int.Int64
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Num.C:Num! [GHC.Int.$fNumInt64_$c+
                                  GHC.Int.$fNumInt64_$c-
                                  GHC.Int.$fNumInt64_$c*
                                  GHC.Int.$fNumInt64_$cnegate
                                  GHC.Int.$fNumInt64_$cabs
                                  GHC.Int.$fNumInt64_$csignum
                                  GHC.Int.$fNumInt64_$cfromInteger];

GHC.Int.$fBitsInt9 :: GHC.Base.Maybe GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [GHC.Int.$fBitsInt7];

GHC.Int.$fBitsInt64_$cbitSizeMaybe
  :: GHC.Int.Int64 -> GHC.Base.Maybe GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>m2, Unf=OtherCon []] =
    [] \r [i_s4w8o] GHC.Int.$fBitsInt9;

GHC.Int.$fBitsInt64_$cbit [InlPrag=INLINE (sat-args=0)]
  :: GHC.Types.Int -> GHC.Int.Int64
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [i_s4w8p]
        case i_s4w8p of {
          GHC.Types.I# i#_s4w8r ->
              case >=# [i#_s4w8r 64#] of {
                __DEFAULT ->
                    case uncheckedIShiftL# [1# i#_s4w8r] of sat_s4w8t {
                      __DEFAULT -> GHC.Int.I64# [sat_s4w8t];
                    };
                1# -> GHC.Int.$fBitsInt10;
              };
        };

GHC.Int.$fBitsInt64_$ctestBit [InlPrag=INLINE (sat-args=0)]
  :: GHC.Int.Int64 -> GHC.Types.Int -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [x_s4w8u i_s4w8v]
        case x_s4w8u of {
          GHC.Int.I64# x#_s4w8x [Occ=Once] ->
              case i_s4w8v of {
                GHC.Types.I# i#_s4w8z ->
                    case >=# [i#_s4w8z 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftL# [1# i#_s4w8z] of sat_s4w8C {
                            __DEFAULT ->
                                case int2Word# [sat_s4w8C] of sat_s4w8D {
                                  __DEFAULT ->
                                      case int2Word# [x#_s4w8x] of sat_s4w8B {
                                        __DEFAULT ->
                                            case and# [sat_s4w8B sat_s4w8D] of sat_s4w8E {
                                              __DEFAULT ->
                                                  case word2Int# [sat_s4w8E] of {
                                                    __DEFAULT -> GHC.Types.True [];
                                                    0# -> GHC.Types.False [];
                                                  };
                                            };
                                      };
                                };
                          };
                      1# -> GHC.Types.False [];
                    };
              };
        };

GHC.Int.$fBitsInt64_$crotateR [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int64 -> GHC.Types.Int -> GHC.Int.Int64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s4w8G eta1_s4w8H]
        case eta_s4w8G of wild_s4w8I {
          GHC.Int.I64# x#_s4w8J [Occ=Once] ->
              case eta1_s4w8H of {
                GHC.Types.I# x1_s4w8L [Occ=Once] ->
                    case negateInt# [x1_s4w8L] of sat_s4w8M {
                      __DEFAULT ->
                          case int2Word# [sat_s4w8M] of sat_s4w8N {
                            __DEFAULT ->
                                case and# [sat_s4w8N 63##] of sat_s4w8O {
                                  __DEFAULT ->
                                      case word2Int# [sat_s4w8O] of wild2_s4w8P {
                                        __DEFAULT ->
                                            case int2Word# [x#_s4w8J] of x'#_s4w8Q [Dmd=<S,U>] {
                                              __DEFAULT ->
                                                  case -# [64# wild2_s4w8P] of sat_s4w8S {
                                                    __DEFAULT ->
                                                        case
                                                            uncheckedShiftRL# [x'#_s4w8Q sat_s4w8S]
                                                        of
                                                        sat_s4w8T
                                                        { __DEFAULT ->
                                                              case
                                                                  uncheckedShiftL# [x'#_s4w8Q
                                                                                    wild2_s4w8P]
                                                              of
                                                              sat_s4w8R
                                                              { __DEFAULT ->
                                                                    case
                                                                        or# [sat_s4w8R sat_s4w8T]
                                                                    of
                                                                    sat_s4w8U
                                                                    { __DEFAULT ->
                                                                          case
                                                                              word2Int# [sat_s4w8U]
                                                                          of
                                                                          sat_s4w8V
                                                                          { __DEFAULT ->
                                                                                GHC.Int.I64# [sat_s4w8V];
                                                                          };
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                        0# -> wild_s4w8I;
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fBitsInt64_$ccomplementBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int64 -> GHC.Types.Int -> GHC.Int.Int64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s4w8W eta1_s4w8X]
        case eta_s4w8W of wild_s4w8Y {
          GHC.Int.I64# x#_s4w8Z [Occ=Once] ->
              case eta1_s4w8X of {
                GHC.Types.I# i#_s4w91 ->
                    case >=# [i#_s4w91 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftL# [1# i#_s4w91] of sat_s4w94 {
                            __DEFAULT ->
                                case int2Word# [sat_s4w94] of sat_s4w95 {
                                  __DEFAULT ->
                                      case int2Word# [x#_s4w8Z] of sat_s4w93 {
                                        __DEFAULT ->
                                            case xor# [sat_s4w93 sat_s4w95] of sat_s4w96 {
                                              __DEFAULT ->
                                                  case word2Int# [sat_s4w96] of sat_s4w97 {
                                                    __DEFAULT -> GHC.Int.I64# [sat_s4w97];
                                                  };
                                            };
                                      };
                                };
                          };
                      1# -> wild_s4w8Y;
                    };
              };
        };

GHC.Int.$fBitsInt64_$cclearBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int64 -> GHC.Types.Int -> GHC.Int.Int64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s4w98 eta1_s4w99]
        case eta_s4w98 of {
          GHC.Int.I64# x#_s4w9b [Occ=Once*] ->
              case eta1_s4w99 of {
                GHC.Types.I# i#_s4w9d ->
                    case >=# [i#_s4w9d 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftL# [1# i#_s4w9d] of sat_s4w9g {
                            __DEFAULT ->
                                case int2Word# [sat_s4w9g] of sat_s4w9h {
                                  __DEFAULT ->
                                      case xor# [sat_s4w9h 18446744073709551615##] of sat_s4w9i {
                                        __DEFAULT ->
                                            case int2Word# [x#_s4w9b] of sat_s4w9f {
                                              __DEFAULT ->
                                                  case and# [sat_s4w9f sat_s4w9i] of sat_s4w9j {
                                                    __DEFAULT ->
                                                        case word2Int# [sat_s4w9j] of sat_s4w9k {
                                                          __DEFAULT -> GHC.Int.I64# [sat_s4w9k];
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                      1# ->
                          case int2Word# [x#_s4w9b] of sat_s4w9l {
                            __DEFAULT ->
                                case and# [sat_s4w9l 18446744073709551615##] of sat_s4w9m {
                                  __DEFAULT ->
                                      case word2Int# [sat_s4w9m] of sat_s4w9n {
                                        __DEFAULT -> GHC.Int.I64# [sat_s4w9n];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fBitsInt64_$csetBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int64 -> GHC.Types.Int -> GHC.Int.Int64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s4w9o eta1_s4w9p]
        case eta_s4w9o of wild_s4w9q {
          GHC.Int.I64# x#_s4w9r [Occ=Once] ->
              case eta1_s4w9p of {
                GHC.Types.I# i#_s4w9t ->
                    case >=# [i#_s4w9t 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftL# [1# i#_s4w9t] of sat_s4w9w {
                            __DEFAULT ->
                                case int2Word# [sat_s4w9w] of sat_s4w9x {
                                  __DEFAULT ->
                                      case int2Word# [x#_s4w9r] of sat_s4w9v {
                                        __DEFAULT ->
                                            case or# [sat_s4w9v sat_s4w9x] of sat_s4w9y {
                                              __DEFAULT ->
                                                  case word2Int# [sat_s4w9y] of sat_s4w9z {
                                                    __DEFAULT -> GHC.Int.I64# [sat_s4w9z];
                                                  };
                                            };
                                      };
                                };
                          };
                      1# -> wild_s4w9q;
                    };
              };
        };

GHC.Int.$fBitsInt64_$crotateL [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int64 -> GHC.Types.Int -> GHC.Int.Int64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Int.$fBitsInt64_$crotate eta_B2 eta_B1;

GHC.Int.$fBitsInt64 [InlPrag=NOUSERINLINE CONLIKE]
  :: Data.Bits.Bits GHC.Int.Int64
[GblId[DFunId], Caf=NoCafRefs] =
    CCS_DONT_CARE Data.Bits.C:Bits! [GHC.Int.$fEqInt64
                                     GHC.Int.$fBitsInt64_$c.&.
                                     GHC.Int.$fBitsInt64_$c.|.
                                     GHC.Int.$fBitsInt64_$cxor
                                     GHC.Int.$fBitsInt64_$ccomplement
                                     GHC.Int.$fBitsInt64_$cshift
                                     GHC.Int.$fBitsInt64_$crotate
                                     GHC.Int.$fBitsInt10
                                     GHC.Int.$fBitsInt64_$cbit
                                     GHC.Int.$fBitsInt64_$csetBit
                                     GHC.Int.$fBitsInt64_$cclearBit
                                     GHC.Int.$fBitsInt64_$ccomplementBit
                                     GHC.Int.$fBitsInt64_$ctestBit
                                     GHC.Int.$fBitsInt64_$cbitSizeMaybe
                                     GHC.Int.$fBitsInt64_$cfiniteBitSize
                                     GHC.Int.$fBitsInt64_$cisSigned
                                     GHC.Int.$fBitsInt64_$cshiftL
                                     GHC.Int.$fBitsInt64_$cunsafeShiftL
                                     GHC.Int.$fBitsInt64_$cshiftR
                                     GHC.Int.$fBitsInt64_$cunsafeShiftR
                                     GHC.Int.$fBitsInt64_$crotateL
                                     GHC.Int.$fBitsInt64_$crotateR
                                     GHC.Int.$fBitsInt64_$cpopCount];

GHC.Int.$fFiniteBitsInt64 [InlPrag=NOUSERINLINE CONLIKE]
  :: Data.Bits.FiniteBits GHC.Int.Int64
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE Data.Bits.C:FiniteBits! [GHC.Int.$fBitsInt64
                                           GHC.Int.$fBitsInt64_$cfiniteBitSize
                                           GHC.Int.$fFiniteBitsInt64_$ccountLeadingZeros
                                           GHC.Int.$fFiniteBitsInt64_$ccountTrailingZeros];

GHC.Int.$fReadInt64_go [Occ=LoopBreaker]
  :: [(GHC.Types.Int, GHC.Base.String)]
     -> [(GHC.Int.Int64, GHC.Base.String)]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s4w9A]
        case ds_s4w9A of {
          [] -> [] [];
          : y_s4w9C [Occ=Once!] ys_s4w9D [Occ=Once] ->
              case y_s4w9C of {
                (,) x_s4w9F [Occ=Once!] r_s4w9G [Occ=Once] ->
                    let {
                      sat_s4w9L [Occ=Once] :: [(GHC.Int.Int64, GHC.Base.String)]
                      [LclId] =
                          [ys_s4w9D] \u [] GHC.Int.$fReadInt64_go ys_s4w9D; } in
                    let {
                      sat_s4w9J [Occ=Once] :: GHC.Int.Int64
                      [LclId] =
                          [x_s4w9F] \u []
                              case x_s4w9F of {
                                GHC.Types.I# x#_s4w9I [Occ=Once] -> GHC.Int.I64# [x#_s4w9I];
                              }; } in
                    let {
                      sat_s4w9K [Occ=Once] :: (GHC.Int.Int64, GHC.Base.String)
                      [LclId] =
                          CCCS (,)! [sat_s4w9J r_s4w9G];
                    } in  : [sat_s4w9K sat_s4w9L];
              };
        };

GHC.Int.$fReadInt64_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS GHC.Int.Int64
[GblId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [p_s4w9M s_s4w9N]
        case
            GHC.Read.$fReadInt_$sreadNumber
                GHC.Read.$fReadInt2
                p_s4w9M
                Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
        of
        sat_s4w9O
        { __DEFAULT ->
              case
                  Text.ParserCombinators.ReadP.run sat_s4w9O s_s4w9N
              of
              sat_s4w9P
              { __DEFAULT -> GHC.Int.$fReadInt64_go sat_s4w9P;
              };
        };

GHC.Int.$fReadInt10
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Int.Int64 -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,U><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [n_s4w9Q eta_s4w9R]
        let {
          sat_s4w9S [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS GHC.Int.Int64
          [LclId] =
              [n_s4w9Q] \r [eta_B1]
                  GHC.Int.$fReadInt64_$creadsPrec n_s4w9Q eta_B1;
        } in 
          case
              Text.ParserCombinators.ReadP.$wreadS_to_P sat_s4w9S eta_s4w9R
          of
          { Unit# ww1_s4w9U [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s4w9U];
          };

GHC.Int.$fReadInt9
  :: Text.ParserCombinators.ReadP.P [GHC.Int.Int64]
[GblId] =
    [] \u []
        GHC.Read.list
            GHC.Int.$fReadInt10
            GHC.Int.$fIxInt1
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Int.$fReadInt64_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.Int.Int64]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Int.$fReadInt9 eta_B1;

GHC.Int.$fReadInt7
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        ([GHC.Int.Int64] -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,A><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [n_s4w9V w1_s4w9W]
        case
            Text.ParserCombinators.ReadP.$wreadS_to_P
                GHC.Int.$fReadInt64_$creadList w1_s4w9W
        of
        { Unit# ww1_s4w9Y [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s4w9Y];
        };

GHC.Int.$fReadInt64 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.Int.Int64
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Int.$fReadInt64_$creadsPrec
                                    GHC.Int.$fReadInt64_$creadList
                                    GHC.Int.$fReadInt10
                                    GHC.Int.$fReadInt7];

GHC.Int.$fIntegralInt64_$cquot [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> GHC.Int.Int64
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4w9Z w1_s4wa0]
        case w_s4w9Z of {
          GHC.Int.I64# ww1_s4wa2 [Occ=Once*] ->
              case w1_s4wa0 of {
                GHC.Int.I64# ww3_s4wa4 [Occ=Once!] ->
                    case ww3_s4wa4 of wild_s4wa5 {
                      __DEFAULT ->
                          case quotInt# [ww1_s4wa2 wild_s4wa5] of ww4_s4wa6 {
                            __DEFAULT -> GHC.Int.I64# [ww4_s4wa6];
                          };
                      -1# ->
                          case ww1_s4wa2 of wild1_s4wa7 {
                            __DEFAULT ->
                                case quotInt# [wild1_s4wa7 -1#] of sat_s4wa8 {
                                  __DEFAULT -> GHC.Int.I64# [sat_s4wa8];
                                };
                            -9223372036854775808# -> GHC.Real.overflowError;
                          };
                      0# -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Int.$fIntegralInt64_$crem
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> GHC.Int.Int64
[GblId, Arity=2, Str=<S,1*U(U)><S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [ds_s4wab y_s4wac]
        case ds_s4wab of {
          GHC.Int.I64# x#_s4wae [Occ=Once] ->
              case y_s4wac of {
                GHC.Int.I64# y#_s4wag [Occ=Once!] ->
                    case y#_s4wag of wild2_s4wah {
                      __DEFAULT ->
                          case remInt# [x#_s4wae wild2_s4wah] of wild3_s4wai {
                            __DEFAULT -> GHC.Int.I64# [wild3_s4wai];
                          };
                      -1# -> GHC.Int.$fBitsInt10;
                      0# -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Int.$w$cdiv2 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Str=<S,U><S,1*U>, Unf=OtherCon []] =
    [] \r [ww_s4waj ww1_s4wak]
        case ww1_s4wak of wild_s4wal {
          __DEFAULT -> GHC.Classes.divInt# ww_s4waj wild_s4wal;
          -1# ->
              case ww_s4waj of wild1_s4wam {
                __DEFAULT -> GHC.Classes.divInt# wild1_s4wam -1#;
                -9223372036854775808# -> GHC.Real.overflowError;
              };
          0# -> GHC.Real.divZeroError;
        };

GHC.Int.$fIntegralInt64_$cdiv [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> GHC.Int.Int64
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4wap w1_s4waq]
        case w_s4wap of {
          GHC.Int.I64# ww1_s4was [Occ=Once] ->
              case w1_s4waq of {
                GHC.Int.I64# ww3_s4wau [Occ=Once] ->
                    case GHC.Int.$w$cdiv2 ww1_s4was ww3_s4wau of ww4_s4wav {
                      __DEFAULT -> GHC.Int.I64# [ww4_s4wav];
                    };
              };
        };

GHC.Int.$fIntegralInt64_$cmod [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> GHC.Int.Int64
[GblId, Arity=2, Str=<S,1*U(U)><S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [w_s4waw w1_s4wax]
        case w_s4waw of {
          GHC.Int.I64# ww1_s4waz [Occ=Once] ->
              case w1_s4wax of {
                GHC.Int.I64# ww3_s4waB [Occ=Once!] ->
                    case ww3_s4waB of wild_s4waC {
                      __DEFAULT ->
                          case GHC.Classes.modInt# ww1_s4waz wild_s4waC of ww4_s4waD {
                            __DEFAULT -> GHC.Int.I64# [ww4_s4waD];
                          };
                      -1# -> GHC.Int.$fBitsInt10;
                      0# -> GHC.Real.divZeroError;
                    };
              };
        };

lvl9_r4kPA :: (GHC.Int.Int64, GHC.Int.Int64)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Real.overflowError GHC.Int.$fBitsInt10];

GHC.Int.$fIntegralInt64_$cquotRem [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> (GHC.Int.Int64, GHC.Int.Int64)
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4waF w1_s4waG]
        case w_s4waF of {
          GHC.Int.I64# ww1_s4waI [Occ=Once*] ->
              case w1_s4waG of {
                GHC.Int.I64# ww3_s4waK [Occ=Once!] ->
                    case ww3_s4waK of wild_s4waL {
                      __DEFAULT ->
                          case quotRemInt# [ww1_s4waI wild_s4waL] of {
                            (#,#) ipv_s4waN [Occ=Once] ipv1_s4waO [Occ=Once] ->
                                let {
                                  sat_s4waQ [Occ=Once] :: GHC.Int.Int64
                                  [LclId] =
                                      CCCS GHC.Int.I64#! [ipv1_s4waO]; } in
                                let {
                                  sat_s4waP [Occ=Once] :: GHC.Int.Int64
                                  [LclId] =
                                      CCCS GHC.Int.I64#! [ipv_s4waN];
                                } in  (,) [sat_s4waP sat_s4waQ];
                          };
                      -1# ->
                          case ww1_s4waI of wild1_s4waR {
                            __DEFAULT ->
                                case quotRemInt# [wild1_s4waR -1#] of {
                                  (#,#) ipv_s4waT [Occ=Once] ipv1_s4waU [Occ=Once] ->
                                      let {
                                        sat_s4waW [Occ=Once] :: GHC.Int.Int64
                                        [LclId] =
                                            CCCS GHC.Int.I64#! [ipv1_s4waU]; } in
                                      let {
                                        sat_s4waV [Occ=Once] :: GHC.Int.Int64
                                        [LclId] =
                                            CCCS GHC.Int.I64#! [ipv_s4waT];
                                      } in  (,) [sat_s4waV sat_s4waW];
                                };
                            -9223372036854775808# -> lvl9_r4kPA;
                          };
                      0# -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Int.$w$cdivMod2 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int#
     -> GHC.Prim.Int# -> (# GHC.Int.Int64, GHC.Int.Int64 #)
[GblId, Arity=2, Str=<S,U><S,1*U>, Unf=OtherCon []] =
    [] \r [ww_s4waY ww1_s4waZ]
        case ww1_s4waZ of wild_s4wb0 {
          __DEFAULT ->
              let-no-escape {
                $j_s4wb1 [Occ=Once*T[0], Dmd=<L,1*U(U,U)>]
                  :: (# GHC.Int.Int64, GHC.Int.Int64 #)
                [LclId[JoinId(0)], Unf=OtherCon []] =
                    [ww_s4waY wild_s4wb0] \r []
                        case ># [ww_s4waY 0#] of {
                          __DEFAULT ->
                              case <# [ww_s4waY 0#] of {
                                __DEFAULT ->
                                    case quotRemInt# [ww_s4waY wild_s4wb0] of {
                                      (#,#) ipv_s4wb5 [Occ=Once] ipv1_s4wb6 [Occ=Once] ->
                                          let {
                                            sat_s4wb8 [Occ=Once] :: GHC.Int.Int64
                                            [LclId] =
                                                CCCS GHC.Int.I64#! [ipv1_s4wb6]; } in
                                          let {
                                            sat_s4wb7 [Occ=Once] :: GHC.Int.Int64
                                            [LclId] =
                                                CCCS GHC.Int.I64#! [ipv_s4wb5];
                                          } in  (#,#) [sat_s4wb7 sat_s4wb8];
                                    };
                                1# ->
                                    case ># [wild_s4wb0 0#] of {
                                      __DEFAULT ->
                                          case quotRemInt# [ww_s4waY wild_s4wb0] of {
                                            (#,#) ipv_s4wbb [Occ=Once] ipv1_s4wbc [Occ=Once] ->
                                                let {
                                                  sat_s4wbe [Occ=Once] :: GHC.Int.Int64
                                                  [LclId] =
                                                      CCCS GHC.Int.I64#! [ipv1_s4wbc]; } in
                                                let {
                                                  sat_s4wbd [Occ=Once] :: GHC.Int.Int64
                                                  [LclId] =
                                                      CCCS GHC.Int.I64#! [ipv_s4wbb];
                                                } in  (#,#) [sat_s4wbd sat_s4wbe];
                                          };
                                      1# ->
                                          case +# [ww_s4waY 1#] of sat_s4wbf {
                                            __DEFAULT ->
                                                case quotRemInt# [sat_s4wbf wild_s4wb0] of {
                                                  (#,#) ipv_s4wbh [Occ=Once]
                                                        ipv1_s4wbi [Occ=Once] ->
                                                      case +# [ipv1_s4wbi wild_s4wb0] of sat_s4wbl {
                                                        __DEFAULT ->
                                                            case -# [sat_s4wbl 1#] of sat_s4wbm {
                                                              __DEFAULT ->
                                                                  let {
                                                                    sat_s4wbn [Occ=Once]
                                                                      :: GHC.Int.Int64
                                                                    [LclId] =
                                                                        CCCS GHC.Int.I64#! [sat_s4wbm];
                                                                  } in 
                                                                    case
                                                                        -# [ipv_s4wbh 1#]
                                                                    of
                                                                    sat_s4wbj
                                                                    { __DEFAULT ->
                                                                          let {
                                                                            sat_s4wbk [Occ=Once]
                                                                              :: GHC.Int.Int64
                                                                            [LclId] =
                                                                                CCCS GHC.Int.I64#! [sat_s4wbj];
                                                                          } in 
                                                                            (#,#) [sat_s4wbk
                                                                                   sat_s4wbn];
                                                                    };
                                                            };
                                                      };
                                                };
                                          };
                                    };
                              };
                          1# ->
                              case <# [wild_s4wb0 0#] of {
                                __DEFAULT ->
                                    case <# [ww_s4waY 0#] of {
                                      __DEFAULT ->
                                          case quotRemInt# [ww_s4waY wild_s4wb0] of {
                                            (#,#) ipv_s4wbr [Occ=Once] ipv1_s4wbs [Occ=Once] ->
                                                let {
                                                  sat_s4wbu [Occ=Once] :: GHC.Int.Int64
                                                  [LclId] =
                                                      CCCS GHC.Int.I64#! [ipv1_s4wbs]; } in
                                                let {
                                                  sat_s4wbt [Occ=Once] :: GHC.Int.Int64
                                                  [LclId] =
                                                      CCCS GHC.Int.I64#! [ipv_s4wbr];
                                                } in  (#,#) [sat_s4wbt sat_s4wbu];
                                          };
                                      1# ->
                                          case ># [wild_s4wb0 0#] of {
                                            __DEFAULT ->
                                                case quotRemInt# [ww_s4waY wild_s4wb0] of {
                                                  (#,#) ipv_s4wbx [Occ=Once]
                                                        ipv1_s4wby [Occ=Once] ->
                                                      let {
                                                        sat_s4wbA [Occ=Once] :: GHC.Int.Int64
                                                        [LclId] =
                                                            CCCS GHC.Int.I64#! [ipv1_s4wby]; } in
                                                      let {
                                                        sat_s4wbz [Occ=Once] :: GHC.Int.Int64
                                                        [LclId] =
                                                            CCCS GHC.Int.I64#! [ipv_s4wbx];
                                                      } in  (#,#) [sat_s4wbz sat_s4wbA];
                                                };
                                            1# ->
                                                case +# [ww_s4waY 1#] of sat_s4wbB {
                                                  __DEFAULT ->
                                                      case quotRemInt# [sat_s4wbB wild_s4wb0] of {
                                                        (#,#) ipv_s4wbD [Occ=Once]
                                                              ipv1_s4wbE [Occ=Once] ->
                                                            case
                                                                +# [ipv1_s4wbE wild_s4wb0]
                                                            of
                                                            sat_s4wbH
                                                            { __DEFAULT ->
                                                                  case
                                                                      -# [sat_s4wbH 1#]
                                                                  of
                                                                  sat_s4wbI
                                                                  { __DEFAULT ->
                                                                        let {
                                                                          sat_s4wbJ [Occ=Once]
                                                                            :: GHC.Int.Int64
                                                                          [LclId] =
                                                                              CCCS GHC.Int.I64#! [sat_s4wbI];
                                                                        } in 
                                                                          case
                                                                              -# [ipv_s4wbD 1#]
                                                                          of
                                                                          sat_s4wbF
                                                                          { __DEFAULT ->
                                                                                let {
                                                                                  sat_s4wbG [Occ=Once]
                                                                                    :: GHC.Int.Int64
                                                                                  [LclId] =
                                                                                      CCCS GHC.Int.I64#! [sat_s4wbF];
                                                                                } in 
                                                                                  (#,#) [sat_s4wbG
                                                                                         sat_s4wbJ];
                                                                          };
                                                                  };
                                                            };
                                                      };
                                                };
                                          };
                                    };
                                1# ->
                                    case -# [ww_s4waY 1#] of sat_s4wbK {
                                      __DEFAULT ->
                                          case quotRemInt# [sat_s4wbK wild_s4wb0] of {
                                            (#,#) ipv_s4wbM [Occ=Once] ipv1_s4wbN [Occ=Once] ->
                                                case +# [ipv1_s4wbN wild_s4wb0] of sat_s4wbQ {
                                                  __DEFAULT ->
                                                      case +# [sat_s4wbQ 1#] of sat_s4wbR {
                                                        __DEFAULT ->
                                                            let {
                                                              sat_s4wbS [Occ=Once] :: GHC.Int.Int64
                                                              [LclId] =
                                                                  CCCS GHC.Int.I64#! [sat_s4wbR];
                                                            } in 
                                                              case -# [ipv_s4wbM 1#] of sat_s4wbO {
                                                                __DEFAULT ->
                                                                    let {
                                                                      sat_s4wbP [Occ=Once]
                                                                        :: GHC.Int.Int64
                                                                      [LclId] =
                                                                          CCCS GHC.Int.I64#! [sat_s4wbO];
                                                                    } in 
                                                                      (#,#) [sat_s4wbP sat_s4wbS];
                                                              };
                                                      };
                                                };
                                          };
                                    };
                              };
                        };
              } in 
                case wild_s4wb0 of {
                  __DEFAULT -> $j_s4wb1;
                  -1# ->
                      case ww_s4waY of {
                        __DEFAULT -> $j_s4wb1;
                        -9223372036854775808# ->
                            (#,#) [GHC.Real.overflowError GHC.Int.$fBitsInt10];
                      };
                };
          0# -> GHC.Real.divZeroError;
        };

GHC.Int.$fIntegralInt64_$cdivMod [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> (GHC.Int.Int64, GHC.Int.Int64)
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4wbW w1_s4wbX]
        case w_s4wbW of {
          GHC.Int.I64# ww1_s4wbZ [Occ=Once] ->
              case w1_s4wbX of {
                GHC.Int.I64# ww3_s4wc1 [Occ=Once] ->
                    case GHC.Int.$w$cdivMod2 ww1_s4wbZ ww3_s4wc1 of {
                      (#,#) ww5_s4wc3 [Occ=Once] ww6_s4wc4 [Occ=Once] ->
                          (,) [ww5_s4wc3 ww6_s4wc4];
                    };
              };
        };

GHC.Int.$fIxInt64_$crange
  :: (GHC.Int.Int64, GHC.Int.Int64) -> [GHC.Int.Int64]
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>,
 Unf=OtherCon []] =
    [] \r [ds_s4wc5]
        case ds_s4wc5 of {
          (,) m_s4wc7 [Occ=Once] n_s4wc8 [Occ=Once] ->
              GHC.Int.$fEnumInt64_$cenumFromTo m_s4wc7 n_s4wc8;
        };

GHC.Int.$fRealInt64_$ctoRational [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int64 -> GHC.Real.Rational
[GblId, Arity=1, Str=<S(S),1*U(U)>m, Unf=OtherCon []] =
    [] \r [w_s4wc9]
        case w_s4wc9 of {
          GHC.Int.I64# ww1_s4wcb [Occ=Once] ->
              case GHC.Integer.Type.smallInteger ww1_s4wcb of sat_s4wcc {
                __DEFAULT ->
                    case
                        GHC.Integer.Type.timesInteger sat_s4wcc GHC.Int.$fRealInt1
                    of
                    sat_s4wcd
                    { __DEFAULT ->
                          case GHC.Real.$w$sreduce sat_s4wcd GHC.Int.$fRealInt1 of {
                            (#,#) ww3_s4wcf [Occ=Once] ww4_s4wcg [Occ=Once] ->
                                GHC.Real.:% [ww3_s4wcf ww4_s4wcg];
                          };
                    };
              };
        };

GHC.Int.$fRealInt64 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Real.Real GHC.Int.Int64
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Real.C:Real! [GHC.Int.$fNumInt64
                                    GHC.Int.$fOrdInt64
                                    GHC.Int.$fRealInt64_$ctoRational];

GHC.Int.$fIntegralInt64 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Real.Integral GHC.Int.Int64
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Real.C:Integral! [GHC.Int.$fRealInt64
                                        GHC.Int.$fEnumInt64
                                        GHC.Int.$fIntegralInt64_$cquot
                                        GHC.Int.$fIntegralInt64_$crem
                                        GHC.Int.$fIntegralInt64_$cdiv
                                        GHC.Int.$fIntegralInt64_$cmod
                                        GHC.Int.$fIntegralInt64_$cquotRem
                                        GHC.Int.$fIntegralInt64_$cdivMod
                                        GHC.Int.$fIntegralInt64_$ctoInteger];

GHC.Int.$fIxInt64_$cunsafeIndex
  :: (GHC.Int.Int64, GHC.Int.Int64) -> GHC.Int.Int64 -> GHC.Types.Int
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S(S)L),1*U(1*U(U),A)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4wch i_s4wci]
        case ds_s4wch of {
          (,) m_s4wck [Occ=Once!] _ [Occ=Dead] ->
              case i_s4wci of {
                GHC.Int.I64# x#_s4wcn [Occ=Once] ->
                    case m_s4wck of {
                      GHC.Int.I64# x#1_s4wcp [Occ=Once] ->
                          case -# [x#_s4wcn x#1_s4wcp] of sat_s4wcq {
                            __DEFAULT -> GHC.Types.I# [sat_s4wcq];
                          };
                    };
              };
        };

GHC.Int.$fIxInt64_$crangeSize
  :: (GHC.Int.Int64, GHC.Int.Int64) -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>m,
 Unf=OtherCon []] =
    [] \r [b_s4wcr]
        case b_s4wcr of {
          (,) _l_s4wct [Occ=Once!] h_s4wcu [Occ=Once!] ->
              case _l_s4wct of {
                GHC.Int.I64# x_s4wcw ->
                    case h_s4wcu of {
                      GHC.Int.I64# y_s4wcy ->
                          case <=# [x_s4wcw y_s4wcy] of {
                            __DEFAULT -> GHC.Int.$fIxInt1;
                            1# ->
                                case -# [y_s4wcy x_s4wcw] of sat_s4wcA {
                                  __DEFAULT ->
                                      case +# [sat_s4wcA 1#] of sat_s4wcB {
                                        __DEFAULT -> GHC.Types.I# [sat_s4wcB];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fIxInt64_$cunsafeRangeSize
  :: (GHC.Int.Int64, GHC.Int.Int64) -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>m,
 Unf=OtherCon []] =
    [] \r [b_s4wcC]
        case b_s4wcC of {
          (,) _l_s4wcE [Occ=Once!] h_s4wcF [Occ=Once!] ->
              case h_s4wcF of {
                GHC.Int.I64# x#_s4wcH [Occ=Once] ->
                    case _l_s4wcE of {
                      GHC.Int.I64# x#1_s4wcJ [Occ=Once] ->
                          case -# [x#_s4wcH x#1_s4wcJ] of sat_s4wcK {
                            __DEFAULT ->
                                case +# [sat_s4wcK 1#] of sat_s4wcL {
                                  __DEFAULT -> GHC.Types.I# [sat_s4wcL];
                                };
                          };
                    };
              };
        };

GHC.Int.$fIxInt64_$cindex [InlPrag=INLINE (sat-args=2)]
  :: (GHC.Int.Int64, GHC.Int.Int64) -> GHC.Int.Int64 -> GHC.Types.Int
[GblId,
 Arity=2,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s4wcM eta1_s4wcN]
        case eta_s4wcM of {
          (,) m_s4wcP [Occ=Once!] n_s4wcQ [Occ=Once!] ->
              case m_s4wcP of {
                GHC.Int.I64# x_s4wcS ->
                    case eta1_s4wcN of {
                      GHC.Int.I64# y_s4wcU ->
                          case <=# [x_s4wcS y_s4wcU] of {
                            __DEFAULT -> GHC.Arr.hopelessIndexError;
                            1# ->
                                case n_s4wcQ of {
                                  GHC.Int.I64# y1_s4wcX [Occ=Once] ->
                                      case <=# [y_s4wcU y1_s4wcX] of {
                                        __DEFAULT -> GHC.Arr.hopelessIndexError;
                                        1# ->
                                            case -# [y_s4wcU x_s4wcS] of sat_s4wcZ {
                                              __DEFAULT -> GHC.Types.I# [sat_s4wcZ];
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fIxInt64 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Arr.Ix GHC.Int.Int64
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Arr.C:Ix! [GHC.Int.$fOrdInt64
                                 GHC.Int.$fIxInt64_$crange
                                 GHC.Int.$fIxInt64_$cindex
                                 GHC.Int.$fIxInt64_$cunsafeIndex
                                 GHC.Int.$fIxInt64_$cinRange
                                 GHC.Int.$fIxInt64_$crangeSize
                                 GHC.Int.$fIxInt64_$cunsafeRangeSize];

GHC.Int.$fShowInt64_$cshowsPrec
  :: GHC.Types.Int -> GHC.Int.Int64 -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [p_s4wd0 x_s4wd1 eta_s4wd2]
        case x_s4wd1 of {
          GHC.Int.I64# x#_s4wd4 [Occ=Once] ->
              case p_s4wd0 of {
                GHC.Types.I# ww1_s4wd6 [Occ=Once] ->
                    case GHC.Show.$wshowSignedInt ww1_s4wd6 x#_s4wd4 eta_s4wd2 of {
                      (#,#) ww5_s4wd8 [Occ=Once] ww6_s4wd9 [Occ=Once] ->
                          : [ww5_s4wd8 ww6_s4wd9];
                    };
              };
        };

GHC.Int.$fShowInt64_$cshow :: GHC.Int.Int64 -> GHC.Base.String
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m2,
 Unf=OtherCon []] =
    [] \r [x_s4wda]
        case x_s4wda of {
          GHC.Int.I64# x#_s4wdc [Occ=Once] ->
              case GHC.Show.$wshowSignedInt 0# x#_s4wdc GHC.Types.[] of {
                (#,#) ww5_s4wde [Occ=Once] ww6_s4wdf [Occ=Once] ->
                    : [ww5_s4wde ww6_s4wdf];
              };
        };

GHC.Int.$fShowInt3
  :: GHC.Int.Int64 -> GHC.Base.String -> GHC.Base.String
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [x_s4wdg eta_s4wdh]
        case x_s4wdg of {
          GHC.Int.I64# x#_s4wdj [Occ=Once] ->
              case GHC.Show.$wshowSignedInt 0# x#_s4wdj eta_s4wdh of {
                (#,#) ww5_s4wdl [Occ=Once] ww6_s4wdm [Occ=Once] ->
                    : [ww5_s4wdl ww6_s4wdm];
              };
        };

GHC.Int.$fShowInt64_$cshowList :: [GHC.Int.Int64] -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ls_s4wdn s_s4wdo]
        GHC.Show.showList__ GHC.Int.$fShowInt3 ls_s4wdn s_s4wdo;

GHC.Int.$fShowInt64 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Int.Int64
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Int.$fShowInt64_$cshowsPrec
                                    GHC.Int.$fShowInt64_$cshow
                                    GHC.Int.$fShowInt64_$cshowList];

GHC.Int.uncheckedIShiftL64#
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] uncheckedIShiftL# [eta_B2 eta_B1];

GHC.Int.uncheckedIShiftRA64#
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] uncheckedIShiftRA# [eta_B2 eta_B1];

GHC.Int.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.Int.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Int.$trModule4];

GHC.Int.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.Int"#;

GHC.Int.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Int.$trModule2];

GHC.Int.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.Int.$trModule3
                                     GHC.Int.$trModule1];

$krep_r4kPB :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcInt#
                                              GHC.Types.[]];

GHC.Int.$tcInt7 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Int.$tcInt9];

GHC.Int.$tcInt8 :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [1422706860619545536##
                                    2126344328513082648##
                                    GHC.Int.$trModule
                                    GHC.Int.$tcInt7
                                    0#
                                    GHC.Types.krep$*];

$krep1_r4kPC :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Int.$tcInt8
                                              GHC.Types.[]];

GHC.Int.$tc'I8#1 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_r4kPB $krep1_r4kPC];

GHC.Int.$tc'I8#3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'I8#"#;

GHC.Int.$tc'I8#2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Int.$tc'I8#3];

GHC.Int.$tc'I8# :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [5349338056284818619##
                                    13298037281129101406##
                                    GHC.Int.$trModule
                                    GHC.Int.$tc'I8#2
                                    0#
                                    GHC.Int.$tc'I8#1];

GHC.Int.$tcInt1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Int.$tcInt2];

GHC.Int.$tcInt16 :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [16329117591681623238##
                                    13363230803330610095##
                                    GHC.Int.$trModule
                                    GHC.Int.$tcInt1
                                    0#
                                    GHC.Types.krep$*];

$krep2_r4kPD :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Int.$tcInt16
                                              GHC.Types.[]];

GHC.Int.$tc'I16#1 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_r4kPB $krep2_r4kPD];

GHC.Int.$tc'I16#3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'I16#"#;

GHC.Int.$tc'I16#2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Int.$tc'I16#3];

GHC.Int.$tc'I16# :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [1077432500071562197##
                                    13676251251348512601##
                                    GHC.Int.$trModule
                                    GHC.Int.$tc'I16#2
                                    0#
                                    GHC.Int.$tc'I16#1];

GHC.Int.$tcInt3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Int.$tcInt4];

GHC.Int.$tcInt32 :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [5115671124548181797##
                                    6203735229629729265##
                                    GHC.Int.$trModule
                                    GHC.Int.$tcInt3
                                    0#
                                    GHC.Types.krep$*];

$krep3_r4kPE :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Int.$tcInt32
                                              GHC.Types.[]];

GHC.Int.$tc'I32#1 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_r4kPB $krep3_r4kPE];

GHC.Int.$tc'I32#3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'I32#"#;

GHC.Int.$tc'I32#2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Int.$tc'I32#3];

GHC.Int.$tc'I32# :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [14037617528454219662##
                                    2752255350980319305##
                                    GHC.Int.$trModule
                                    GHC.Int.$tc'I32#2
                                    0#
                                    GHC.Int.$tc'I32#1];

GHC.Int.$tcInt5 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Int.$tcInt6];

GHC.Int.$tcInt64 :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [15049343324344240059##
                                    14445320765379163718##
                                    GHC.Int.$trModule
                                    GHC.Int.$tcInt5
                                    0#
                                    GHC.Types.krep$*];

$krep4_r4kPF :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Int.$tcInt64
                                              GHC.Types.[]];

GHC.Int.$tc'I64#1 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_r4kPB $krep4_r4kPF];

GHC.Int.$tc'I64#3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'I64#"#;

GHC.Int.$tc'I64#2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Int.$tc'I64#3];

GHC.Int.$tc'I64# :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [7755385358338959724##
                                    8520529638322167079##
                                    GHC.Int.$trModule
                                    GHC.Int.$tc'I64#2
                                    0#
                                    GHC.Int.$tc'I64#1];

GHC.Int.I8# :: GHC.Prim.Int# -> GHC.Int.Int8
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Int.I8# [eta_B1];

GHC.Int.I16# :: GHC.Prim.Int# -> GHC.Int.Int16
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Int.I16# [eta_B1];

GHC.Int.I32# :: GHC.Prim.Int# -> GHC.Int.Int32
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Int.I32# [eta_B1];

GHC.Int.I64# :: GHC.Prim.Int# -> GHC.Int.Int64
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Int.I64# [eta_B1];


==================== STG syntax: ====================
2018-03-16 15:59:23.740019836 UTC

GHC.Int.$fEnumInt8_$cfromEnum :: GHC.Int.Int8 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vv4]
        case ds_s4vv4 of {
          GHC.Int.I8# x#_s4vv6 [Occ=Once] -> GHC.Types.I# [x#_s4vv6];
        };

GHC.Int.$fEnumInt16_$cfromEnum :: GHC.Int.Int16 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vv7]
        case ds_s4vv7 of {
          GHC.Int.I16# x#_s4vv9 [Occ=Once] -> GHC.Types.I# [x#_s4vv9];
        };

GHC.Int.$fEnumInt32_$cfromEnum :: GHC.Int.Int32 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vva]
        case ds_s4vva of {
          GHC.Int.I32# x#_s4vvc [Occ=Once] -> GHC.Types.I# [x#_s4vvc];
        };

GHC.Int.$fEnumInt64_$cfromEnum :: GHC.Int.Int64 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vvd]
        case ds_s4vvd of {
          GHC.Int.I64# x#_s4vvf [Occ=Once] -> GHC.Types.I# [x#_s4vvf];
        };

GHC.Int.$fEnumInt64_$ctoEnum :: GHC.Types.Int -> GHC.Int.Int64
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vvg]
        case ds_s4vvg of {
          GHC.Types.I# i#_s4vvi [Occ=Once] -> GHC.Int.I64# [i#_s4vvi];
        };

GHC.Int.$w$cenumFromThenTo2 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int#
     -> GHC.Prim.Int# -> GHC.Prim.Int# -> [GHC.Int.Int64]
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S,U><S,U><S,U>,
 Unf=OtherCon []] =
    [] \r [ww_s4vvj ww1_s4vvk ww2_s4vvl]
        case >=# [ww1_s4vvk ww_s4vvj] of {
          __DEFAULT ->
              case ># [ww2_s4vvl ww1_s4vvk] of {
                __DEFAULT ->
                    let {
                      sat_s4vvy [Occ=Once] :: [GHC.Int.Int64]
                      [LclId] =
                          [ww_s4vvj ww1_s4vvk ww2_s4vvl] \u []
                              case -# [ww1_s4vvk ww_s4vvj] of delta_s4vvp [Dmd=<S,U>] {
                                __DEFAULT ->
                                    case -# [ww2_s4vvl delta_s4vvp] of y'_s4vvq [Dmd=<S,U>] {
                                      __DEFAULT ->
                                          let {
                                            go_dn_s4vvr [Occ=LoopBreaker]
                                              :: GHC.Prim.Int# -> [GHC.Int.Int64]
                                            [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                                sat-only [delta_s4vvp
                                                          y'_s4vvq
                                                          go_dn_s4vvr] \r [x_s4vvs]
                                                    case <# [x_s4vvs y'_s4vvq] of {
                                                      __DEFAULT ->
                                                          let {
                                                            sat_s4vvw [Occ=Once] :: [GHC.Int.Int64]
                                                            [LclId] =
                                                                [delta_s4vvp
                                                                 go_dn_s4vvr
                                                                 x_s4vvs] \u []
                                                                    case
                                                                        +# [x_s4vvs delta_s4vvp]
                                                                    of
                                                                    sat_s4vvv
                                                                    { __DEFAULT ->
                                                                          go_dn_s4vvr sat_s4vvv;
                                                                    }; } in
                                                          let {
                                                            sat_s4vvu [Occ=Once] :: GHC.Int.Int64
                                                            [LclId] =
                                                                CCCS GHC.Int.I64#! [x_s4vvs];
                                                          } in  : [sat_s4vvu sat_s4vvw];
                                                      1# ->
                                                          let {
                                                            sat_s4vvx [Occ=Once] :: GHC.Int.Int64
                                                            [LclId] =
                                                                CCCS GHC.Int.I64#! [x_s4vvs];
                                                          } in  : [sat_s4vvx GHC.Types.[]];
                                                    };
                                          } in  go_dn_s4vvr ww1_s4vvk;
                                    };
                              }; } in
                    let {
                      sat_s4vvo [Occ=Once] :: GHC.Int.Int64
                      [LclId] =
                          CCCS GHC.Int.I64#! [ww_s4vvj];
                    } in  : [sat_s4vvo sat_s4vvy];
                1# ->
                    case ># [ww2_s4vvl ww_s4vvj] of {
                      __DEFAULT ->
                          let {
                            sat_s4vvA [Occ=Once] :: GHC.Int.Int64
                            [LclId] =
                                CCCS GHC.Int.I64#! [ww_s4vvj];
                          } in  : [sat_s4vvA GHC.Types.[]];
                      1# -> [] [];
                    };
              };
          1# ->
              case <# [ww2_s4vvl ww1_s4vvk] of {
                __DEFAULT ->
                    let {
                      sat_s4vvM [Occ=Once] :: [GHC.Int.Int64]
                      [LclId] =
                          [ww_s4vvj ww1_s4vvk ww2_s4vvl] \u []
                              case -# [ww1_s4vvk ww_s4vvj] of delta_s4vvD [Dmd=<S,U>] {
                                __DEFAULT ->
                                    case -# [ww2_s4vvl delta_s4vvD] of y'_s4vvE [Dmd=<S,U>] {
                                      __DEFAULT ->
                                          let {
                                            go_up_s4vvF [Occ=LoopBreaker]
                                              :: GHC.Prim.Int# -> [GHC.Int.Int64]
                                            [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                                sat-only [delta_s4vvD
                                                          y'_s4vvE
                                                          go_up_s4vvF] \r [x_s4vvG]
                                                    case ># [x_s4vvG y'_s4vvE] of {
                                                      __DEFAULT ->
                                                          let {
                                                            sat_s4vvK [Occ=Once] :: [GHC.Int.Int64]
                                                            [LclId] =
                                                                [delta_s4vvD
                                                                 go_up_s4vvF
                                                                 x_s4vvG] \u []
                                                                    case
                                                                        +# [x_s4vvG delta_s4vvD]
                                                                    of
                                                                    sat_s4vvJ
                                                                    { __DEFAULT ->
                                                                          go_up_s4vvF sat_s4vvJ;
                                                                    }; } in
                                                          let {
                                                            sat_s4vvI [Occ=Once] :: GHC.Int.Int64
                                                            [LclId] =
                                                                CCCS GHC.Int.I64#! [x_s4vvG];
                                                          } in  : [sat_s4vvI sat_s4vvK];
                                                      1# ->
                                                          let {
                                                            sat_s4vvL [Occ=Once] :: GHC.Int.Int64
                                                            [LclId] =
                                                                CCCS GHC.Int.I64#! [x_s4vvG];
                                                          } in  : [sat_s4vvL GHC.Types.[]];
                                                    };
                                          } in  go_up_s4vvF ww1_s4vvk;
                                    };
                              }; } in
                    let {
                      sat_s4vvC [Occ=Once] :: GHC.Int.Int64
                      [LclId] =
                          CCCS GHC.Int.I64#! [ww_s4vvj];
                    } in  : [sat_s4vvC sat_s4vvM];
                1# ->
                    case <# [ww2_s4vvl ww_s4vvj] of {
                      __DEFAULT ->
                          let {
                            sat_s4vvO [Occ=Once] :: GHC.Int.Int64
                            [LclId] =
                                CCCS GHC.Int.I64#! [ww_s4vvj];
                          } in  : [sat_s4vvO GHC.Types.[]];
                      1# -> [] [];
                    };
              };
        };

GHC.Int.$fEnumInt64_$cenumFromThenTo [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int64
     -> GHC.Int.Int64 -> GHC.Int.Int64 -> [GHC.Int.Int64]
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [w_s4vvP w1_s4vvQ w2_s4vvR]
        case w_s4vvP of {
          GHC.Int.I64# ww1_s4vvT [Occ=Once] ->
              case w1_s4vvQ of {
                GHC.Int.I64# ww3_s4vvV [Occ=Once] ->
                    case w2_s4vvR of {
                      GHC.Int.I64# ww5_s4vvX [Occ=Once] ->
                          GHC.Int.$w$cenumFromThenTo2 ww1_s4vvT ww3_s4vvV ww5_s4vvX;
                    };
              };
        };

GHC.Int.$w$cenumFromTo2 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> [GHC.Int.Int64]
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s4vvY ww1_s4vvZ]
        case ># [ww_s4vvY ww1_s4vvZ] of {
          __DEFAULT ->
              let {
                go_s4vw1 [Occ=LoopBreaker] :: GHC.Prim.Int# -> [GHC.Int.Int64]
                [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
                    sat-only [ww1_s4vvZ go_s4vw1] \r [x_s4vw2]
                        let {
                          sat_s4vw6 [Occ=Once] :: [GHC.Int.Int64]
                          [LclId] =
                              [ww1_s4vvZ go_s4vw1 x_s4vw2] \u []
                                  case ==# [x_s4vw2 ww1_s4vvZ] of {
                                    __DEFAULT ->
                                        case +# [x_s4vw2 1#] of sat_s4vw5 {
                                          __DEFAULT -> go_s4vw1 sat_s4vw5;
                                        };
                                    1# -> [] [];
                                  }; } in
                        let {
                          sat_s4vw3 [Occ=Once] :: GHC.Int.Int64
                          [LclId] =
                              CCCS GHC.Int.I64#! [x_s4vw2];
                        } in  : [sat_s4vw3 sat_s4vw6];
              } in  go_s4vw1 ww_s4vvY;
          1# -> [] [];
        };

GHC.Int.$fEnumInt64_$cenumFromTo [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> [GHC.Int.Int64]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [w_s4vw7 w1_s4vw8]
        case w_s4vw7 of {
          GHC.Int.I64# ww1_s4vwa [Occ=Once] ->
              case w1_s4vw8 of {
                GHC.Int.I64# ww3_s4vwc [Occ=Once] ->
                    GHC.Int.$w$cenumFromTo2 ww1_s4vwa ww3_s4vwc;
              };
        };

GHC.Int.$tcInt9 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Int8"#;

GHC.Int.$fEnumInt7 :: GHC.Int.Int8
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# GHC.Int.$tcInt9 of sat_s4vwd {
          __DEFAULT -> GHC.Enum.predError sat_s4vwd;
        };

GHC.Int.$fEnumInt9 :: GHC.Int.Int8
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# GHC.Int.$tcInt9 of sat_s4vwe {
          __DEFAULT -> GHC.Enum.succError sat_s4vwe;
        };

GHC.Int.neInt8 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4vwf ds1_s4vwg]
        case ds_s4vwf of {
          GHC.Int.I8# x_s4vwi [Occ=Once] ->
              case ds1_s4vwg of {
                GHC.Int.I8# y_s4vwk [Occ=Once] ->
                    case /=# [x_s4vwi y_s4vwk] of sat_s4vwl {
                      __DEFAULT -> tagToEnum# [sat_s4vwl];
                    };
              };
        };

lvl_r4kPr :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Int.$tcInt9;

GHC.Int.$fBoundedInt8_$cminBound :: GHC.Int.Int8
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I8#! [-128#];

GHC.Int.$fEnumInt8_$cpred :: GHC.Int.Int8 -> GHC.Int.Int8
[GblId, Arity=1, Str=<S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [x_s4vwm]
        case x_s4vwm of {
          GHC.Int.I8# x1_s4vwo [Occ=Once!] ->
              case x1_s4vwo of wild1_s4vwp {
                __DEFAULT ->
                    case -# [wild1_s4vwp 1#] of sat_s4vwq {
                      __DEFAULT ->
                          case narrow8Int# [sat_s4vwq] of sat_s4vwr {
                            __DEFAULT -> GHC.Int.I8# [sat_s4vwr];
                          };
                    };
                -128# -> GHC.Int.$fEnumInt7;
              };
        };

GHC.Int.$fBoundedInt8_$cmaxBound :: GHC.Int.Int8
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I8#! [127#];

GHC.Int.$fBoundedInt8 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Bounded GHC.Int.Int8
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Bounded! [GHC.Int.$fBoundedInt8_$cminBound
                                       GHC.Int.$fBoundedInt8_$cmaxBound];

GHC.Int.$fEnumInt8_$csucc :: GHC.Int.Int8 -> GHC.Int.Int8
[GblId, Arity=1, Str=<S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [x_s4vws]
        case x_s4vws of {
          GHC.Int.I8# x1_s4vwu [Occ=Once!] ->
              case x1_s4vwu of wild1_s4vwv {
                __DEFAULT ->
                    case +# [wild1_s4vwv 1#] of sat_s4vww {
                      __DEFAULT ->
                          case narrow8Int# [sat_s4vww] of sat_s4vwx {
                            __DEFAULT -> GHC.Int.I8# [sat_s4vwx];
                          };
                    };
                127# -> GHC.Int.$fEnumInt9;
              };
        };

GHC.Int.$fShowInt8_$cshowsPrec
  :: GHC.Types.Int -> GHC.Int.Int8 -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [p_s4vwy x_s4vwz eta_s4vwA]
        case x_s4vwz of {
          GHC.Int.I8# x#_s4vwC [Occ=Once] ->
              case p_s4vwy of {
                GHC.Types.I# ww1_s4vwE [Occ=Once] ->
                    case GHC.Show.$wshowSignedInt ww1_s4vwE x#_s4vwC eta_s4vwA of {
                      (#,#) ww5_s4vwG [Occ=Once] ww6_s4vwH [Occ=Once] ->
                          : [ww5_s4vwG ww6_s4vwH];
                    };
              };
        };

GHC.Int.$fShowInt8_$cshow :: GHC.Int.Int8 -> GHC.Base.String
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m2,
 Unf=OtherCon []] =
    [] \r [x_s4vwI]
        case x_s4vwI of {
          GHC.Int.I8# x#_s4vwK [Occ=Once] ->
              case GHC.Show.$wshowSignedInt 0# x#_s4vwK GHC.Types.[] of {
                (#,#) ww5_s4vwM [Occ=Once] ww6_s4vwN [Occ=Once] ->
                    : [ww5_s4vwM ww6_s4vwN];
              };
        };

GHC.Int.$fShowInt4
  :: GHC.Int.Int8 -> GHC.Base.String -> GHC.Base.String
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [x_s4vwO eta_s4vwP]
        case x_s4vwO of {
          GHC.Int.I8# x#_s4vwR [Occ=Once] ->
              case GHC.Show.$wshowSignedInt 0# x#_s4vwR eta_s4vwP of {
                (#,#) ww5_s4vwT [Occ=Once] ww6_s4vwU [Occ=Once] ->
                    : [ww5_s4vwT ww6_s4vwU];
              };
        };

GHC.Int.$fShowInt8_$cshowList :: [GHC.Int.Int8] -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ls_s4vwV s_s4vwW]
        GHC.Show.showList__ GHC.Int.$fShowInt4 ls_s4vwV s_s4vwW;

GHC.Int.$fShowInt8 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Int.Int8
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Int.$fShowInt8_$cshowsPrec
                                    GHC.Int.$fShowInt8_$cshow
                                    GHC.Int.$fShowInt8_$cshowList];

GHC.Int.$wlvl2 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Int.Int8
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [ww_s4vwX]
        GHC.Enum.$wtoEnumError
            GHC.Int.$fShowInt8
            lvl_r4kPr
            ww_s4vwX
            GHC.Int.$fBoundedInt8_$cminBound
            GHC.Int.$fBoundedInt8_$cmaxBound;

GHC.Int.$w$ctoEnum2 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [ww_s4vwY]
        case >=# [ww_s4vwY -128#] of {
          __DEFAULT -> GHC.Int.$wlvl2 ww_s4vwY;
          1# ->
              case <=# [ww_s4vwY 127#] of {
                __DEFAULT -> GHC.Int.$wlvl2 ww_s4vwY;
                1# -> ww_s4vwY;
              };
        };

GHC.Int.$fEnumInt8_$ctoEnum [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.Int.Int8
[GblId, Arity=1, Str=<S(S),1*U(U)>m, Unf=OtherCon []] =
    [] \r [w_s4vx3]
        case w_s4vx3 of {
          GHC.Types.I# ww1_s4vx5 [Occ=Once] ->
              case GHC.Int.$w$ctoEnum2 ww1_s4vx5 of ww2_s4vx6 {
                __DEFAULT -> GHC.Int.I8# [ww2_s4vx6];
              };
        };

GHC.Int.$w$cenumFromThenTo3 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int#
     -> GHC.Prim.Int# -> GHC.Prim.Int# -> [GHC.Int.Int8]
[GblId, Arity=3, Str=<S,U><S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s4vx7 ww1_s4vx8 ww2_s4vx9]
        case >=# [ww1_s4vx8 ww_s4vx7] of {
          __DEFAULT ->
              case ># [ww2_s4vx9 ww1_s4vx8] of {
                __DEFAULT ->
                    let {
                      sat_s4vxs [Occ=Once] :: [GHC.Int.Int8]
                      [LclId] =
                          [ww_s4vx7 ww1_s4vx8 ww2_s4vx9] \u []
                              case -# [ww1_s4vx8 ww_s4vx7] of delta_s4vxf [Dmd=<S,U>] {
                                __DEFAULT ->
                                    case -# [ww2_s4vx9 delta_s4vxf] of y'_s4vxg [Dmd=<S,U>] {
                                      __DEFAULT ->
                                          let {
                                            go_dn_s4vxh [Occ=LoopBreaker]
                                              :: GHC.Prim.Int# -> [GHC.Int.Int8]
                                            [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                                sat-only [delta_s4vxf
                                                          y'_s4vxg
                                                          go_dn_s4vxh] \r [x_s4vxi]
                                                    case <# [x_s4vxi y'_s4vxg] of {
                                                      __DEFAULT ->
                                                          let {
                                                            sat_s4vxo [Occ=Once] :: [GHC.Int.Int8]
                                                            [LclId] =
                                                                [delta_s4vxf
                                                                 go_dn_s4vxh
                                                                 x_s4vxi] \u []
                                                                    case
                                                                        +# [x_s4vxi delta_s4vxf]
                                                                    of
                                                                    sat_s4vxn
                                                                    { __DEFAULT ->
                                                                          go_dn_s4vxh sat_s4vxn;
                                                                    }; } in
                                                          let {
                                                            sat_s4vxm [Occ=Once] :: GHC.Int.Int8
                                                            [LclId] =
                                                                [x_s4vxi] \u []
                                                                    case >=# [x_s4vxi -128#] of {
                                                                      __DEFAULT ->
                                                                          GHC.Int.$wlvl2 x_s4vxi;
                                                                      1# ->
                                                                          case
                                                                              <=# [x_s4vxi 127#]
                                                                          of
                                                                          { __DEFAULT ->
                                                                                GHC.Int.$wlvl2
                                                                                    x_s4vxi;
                                                                            1# ->
                                                                                GHC.Int.I8# [x_s4vxi];
                                                                          };
                                                                    };
                                                          } in  : [sat_s4vxm sat_s4vxo];
                                                      1# ->
                                                          let {
                                                            sat_s4vxr [Occ=Once] :: GHC.Int.Int8
                                                            [LclId] =
                                                                [x_s4vxi] \u []
                                                                    case >=# [x_s4vxi -128#] of {
                                                                      __DEFAULT ->
                                                                          GHC.Int.$wlvl2 x_s4vxi;
                                                                      1# ->
                                                                          case
                                                                              <=# [x_s4vxi 127#]
                                                                          of
                                                                          { __DEFAULT ->
                                                                                GHC.Int.$wlvl2
                                                                                    x_s4vxi;
                                                                            1# ->
                                                                                GHC.Int.I8# [x_s4vxi];
                                                                          };
                                                                    };
                                                          } in  : [sat_s4vxr GHC.Types.[]];
                                                    };
                                          } in  go_dn_s4vxh ww1_s4vx8;
                                    };
                              }; } in
                    let {
                      sat_s4vxe [Occ=Once] :: GHC.Int.Int8
                      [LclId] =
                          [ww_s4vx7] \u []
                              case >=# [ww_s4vx7 -128#] of {
                                __DEFAULT -> GHC.Int.$wlvl2 ww_s4vx7;
                                1# ->
                                    case <=# [ww_s4vx7 127#] of {
                                      __DEFAULT -> GHC.Int.$wlvl2 ww_s4vx7;
                                      1# -> GHC.Int.I8# [ww_s4vx7];
                                    };
                              };
                    } in  : [sat_s4vxe sat_s4vxs];
                1# ->
                    case ># [ww2_s4vx9 ww_s4vx7] of {
                      __DEFAULT ->
                          let {
                            sat_s4vxw [Occ=Once] :: GHC.Int.Int8
                            [LclId] =
                                [ww_s4vx7] \u []
                                    case >=# [ww_s4vx7 -128#] of {
                                      __DEFAULT -> GHC.Int.$wlvl2 ww_s4vx7;
                                      1# ->
                                          case <=# [ww_s4vx7 127#] of {
                                            __DEFAULT -> GHC.Int.$wlvl2 ww_s4vx7;
                                            1# -> GHC.Int.I8# [ww_s4vx7];
                                          };
                                    };
                          } in  : [sat_s4vxw GHC.Types.[]];
                      1# -> [] [];
                    };
              };
          1# ->
              case <# [ww2_s4vx9 ww1_s4vx8] of {
                __DEFAULT ->
                    let {
                      sat_s4vxO [Occ=Once] :: [GHC.Int.Int8]
                      [LclId] =
                          [ww_s4vx7 ww1_s4vx8 ww2_s4vx9] \u []
                              case -# [ww1_s4vx8 ww_s4vx7] of delta_s4vxB [Dmd=<S,U>] {
                                __DEFAULT ->
                                    case -# [ww2_s4vx9 delta_s4vxB] of y'_s4vxC [Dmd=<S,U>] {
                                      __DEFAULT ->
                                          let {
                                            go_up_s4vxD [Occ=LoopBreaker]
                                              :: GHC.Prim.Int# -> [GHC.Int.Int8]
                                            [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                                sat-only [delta_s4vxB
                                                          y'_s4vxC
                                                          go_up_s4vxD] \r [x_s4vxE]
                                                    case ># [x_s4vxE y'_s4vxC] of {
                                                      __DEFAULT ->
                                                          let {
                                                            sat_s4vxK [Occ=Once] :: [GHC.Int.Int8]
                                                            [LclId] =
                                                                [delta_s4vxB
                                                                 go_up_s4vxD
                                                                 x_s4vxE] \u []
                                                                    case
                                                                        +# [x_s4vxE delta_s4vxB]
                                                                    of
                                                                    sat_s4vxJ
                                                                    { __DEFAULT ->
                                                                          go_up_s4vxD sat_s4vxJ;
                                                                    }; } in
                                                          let {
                                                            sat_s4vxI [Occ=Once] :: GHC.Int.Int8
                                                            [LclId] =
                                                                [x_s4vxE] \u []
                                                                    case >=# [x_s4vxE -128#] of {
                                                                      __DEFAULT ->
                                                                          GHC.Int.$wlvl2 x_s4vxE;
                                                                      1# ->
                                                                          case
                                                                              <=# [x_s4vxE 127#]
                                                                          of
                                                                          { __DEFAULT ->
                                                                                GHC.Int.$wlvl2
                                                                                    x_s4vxE;
                                                                            1# ->
                                                                                GHC.Int.I8# [x_s4vxE];
                                                                          };
                                                                    };
                                                          } in  : [sat_s4vxI sat_s4vxK];
                                                      1# ->
                                                          let {
                                                            sat_s4vxN [Occ=Once] :: GHC.Int.Int8
                                                            [LclId] =
                                                                [x_s4vxE] \u []
                                                                    case >=# [x_s4vxE -128#] of {
                                                                      __DEFAULT ->
                                                                          GHC.Int.$wlvl2 x_s4vxE;
                                                                      1# ->
                                                                          case
                                                                              <=# [x_s4vxE 127#]
                                                                          of
                                                                          { __DEFAULT ->
                                                                                GHC.Int.$wlvl2
                                                                                    x_s4vxE;
                                                                            1# ->
                                                                                GHC.Int.I8# [x_s4vxE];
                                                                          };
                                                                    };
                                                          } in  : [sat_s4vxN GHC.Types.[]];
                                                    };
                                          } in  go_up_s4vxD ww1_s4vx8;
                                    };
                              }; } in
                    let {
                      sat_s4vxA [Occ=Once] :: GHC.Int.Int8
                      [LclId] =
                          [ww_s4vx7] \u []
                              case >=# [ww_s4vx7 -128#] of {
                                __DEFAULT -> GHC.Int.$wlvl2 ww_s4vx7;
                                1# ->
                                    case <=# [ww_s4vx7 127#] of {
                                      __DEFAULT -> GHC.Int.$wlvl2 ww_s4vx7;
                                      1# -> GHC.Int.I8# [ww_s4vx7];
                                    };
                              };
                    } in  : [sat_s4vxA sat_s4vxO];
                1# ->
                    case <# [ww2_s4vx9 ww_s4vx7] of {
                      __DEFAULT ->
                          let {
                            sat_s4vxS [Occ=Once] :: GHC.Int.Int8
                            [LclId] =
                                [ww_s4vx7] \u []
                                    case >=# [ww_s4vx7 -128#] of {
                                      __DEFAULT -> GHC.Int.$wlvl2 ww_s4vx7;
                                      1# ->
                                          case <=# [ww_s4vx7 127#] of {
                                            __DEFAULT -> GHC.Int.$wlvl2 ww_s4vx7;
                                            1# -> GHC.Int.I8# [ww_s4vx7];
                                          };
                                    };
                          } in  : [sat_s4vxS GHC.Types.[]];
                      1# -> [] [];
                    };
              };
        };

GHC.Int.$fEnumInt8_$cenumFromThenTo [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> GHC.Int.Int8 -> [GHC.Int.Int8]
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [w_s4vxT w1_s4vxU w2_s4vxV]
        case w_s4vxT of {
          GHC.Int.I8# ww1_s4vxX [Occ=Once] ->
              case w1_s4vxU of {
                GHC.Int.I8# ww3_s4vxZ [Occ=Once] ->
                    case w2_s4vxV of {
                      GHC.Int.I8# ww5_s4vy1 [Occ=Once] ->
                          GHC.Int.$w$cenumFromThenTo3 ww1_s4vxX ww3_s4vxZ ww5_s4vy1;
                    };
              };
        };

GHC.Int.$w$cenumFromTo3 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> [GHC.Int.Int8]
[GblId, Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s4vy2 ww1_s4vy3]
        case ># [ww_s4vy2 ww1_s4vy3] of {
          __DEFAULT ->
              let {
                go_s4vy5 [Occ=LoopBreaker] :: GHC.Prim.Int# -> [GHC.Int.Int8]
                [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
                    sat-only [ww1_s4vy3 go_s4vy5] \r [x_s4vy6]
                        let {
                          sat_s4vyc [Occ=Once] :: [GHC.Int.Int8]
                          [LclId] =
                              [ww1_s4vy3 go_s4vy5 x_s4vy6] \u []
                                  case ==# [x_s4vy6 ww1_s4vy3] of {
                                    __DEFAULT ->
                                        case +# [x_s4vy6 1#] of sat_s4vyb {
                                          __DEFAULT -> go_s4vy5 sat_s4vyb;
                                        };
                                    1# -> [] [];
                                  }; } in
                        let {
                          sat_s4vy9 [Occ=Once] :: GHC.Int.Int8
                          [LclId] =
                              [x_s4vy6] \u []
                                  case >=# [x_s4vy6 -128#] of {
                                    __DEFAULT -> GHC.Int.$wlvl2 x_s4vy6;
                                    1# ->
                                        case <=# [x_s4vy6 127#] of {
                                          __DEFAULT -> GHC.Int.$wlvl2 x_s4vy6;
                                          1# -> GHC.Int.I8# [x_s4vy6];
                                        };
                                  };
                        } in  : [sat_s4vy9 sat_s4vyc];
              } in  go_s4vy5 ww_s4vy2;
          1# -> [] [];
        };

GHC.Int.$fEnumInt8_$cenumFromTo [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> [GHC.Int.Int8]
[GblId, Arity=2, Str=<S(S),1*U(U)><S(S),1*U(U)>, Unf=OtherCon []] =
    [] \r [w_s4vyd w1_s4vye]
        case w_s4vyd of {
          GHC.Int.I8# ww1_s4vyg [Occ=Once] ->
              case w1_s4vye of {
                GHC.Int.I8# ww3_s4vyi [Occ=Once] ->
                    GHC.Int.$w$cenumFromTo3 ww1_s4vyg ww3_s4vyi;
              };
        };

GHC.Int.$wgo3 [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: GHC.Prim.Int# -> (# GHC.Int.Int8, [GHC.Int.Int8] #)
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [w_s4vyj]
        let {
          sat_s4vys [Occ=Once] :: [GHC.Int.Int8]
          [LclId] =
              [w_s4vyj] \u []
                  case w_s4vyj of wild_s4vyn {
                    __DEFAULT ->
                        case +# [wild_s4vyn 1#] of sat_s4vyo {
                          __DEFAULT ->
                              case GHC.Int.$wgo3 sat_s4vyo of {
                                (#,#) ww1_s4vyq [Occ=Once] ww2_s4vyr [Occ=Once] ->
                                    : [ww1_s4vyq ww2_s4vyr];
                              };
                        };
                    127# -> [] [];
                  }; } in
        let {
          sat_s4vym [Occ=Once] :: GHC.Int.Int8
          [LclId] =
              [w_s4vyj] \u []
                  case >=# [w_s4vyj -128#] of {
                    __DEFAULT -> GHC.Int.$wlvl2 w_s4vyj;
                    1# ->
                        case <=# [w_s4vyj 127#] of {
                          __DEFAULT -> GHC.Int.$wlvl2 w_s4vyj;
                          1# -> GHC.Int.I8# [w_s4vyj];
                        };
                  };
        } in  (#,#) [sat_s4vym sat_s4vys];

GHC.Int.$fEnumInt8_go [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> [GHC.Int.Int8]
[GblId, Arity=1, Str=<S,U>m2, Unf=OtherCon []] =
    [] \r [w_s4vyt]
        case GHC.Int.$wgo3 w_s4vyt of {
          (#,#) ww1_s4vyv [Occ=Once] ww2_s4vyw [Occ=Once] ->
              : [ww1_s4vyv ww2_s4vyw];
        };

GHC.Int.$fEnumInt8_$cenumFrom :: GHC.Int.Int8 -> [GHC.Int.Int8]
[GblId, Arity=1, Str=<S(S),1*U(U)>, Unf=OtherCon []] =
    [] \r [n_s4vyx]
        case n_s4vyx of {
          GHC.Int.I8# x#_s4vyz ->
              case ># [x#_s4vyz 127#] of {
                __DEFAULT -> GHC.Int.$fEnumInt8_go x#_s4vyz;
                1# -> [] [];
              };
        };

GHC.Int.$fEnumInt8 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Enum GHC.Int.Int8
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Enum! [GHC.Int.$fEnumInt8_$csucc
                                    GHC.Int.$fEnumInt8_$cpred
                                    GHC.Int.$fEnumInt8_$ctoEnum
                                    GHC.Int.$fEnumInt8_$cfromEnum
                                    GHC.Int.$fEnumInt8_$cenumFrom
                                    GHC.Int.$fEnumInt8_$cenumFromThen
                                    GHC.Int.$fEnumInt8_$cenumFromTo
                                    GHC.Int.$fEnumInt8_$cenumFromThenTo];
GHC.Int.$fEnumInt8_$cenumFromThen [Occ=LoopBreaker]
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> [GHC.Int.Int8]
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Enum.boundedEnumFromThen
            GHC.Int.$fEnumInt8 GHC.Int.$fBoundedInt8 eta_B2 eta_B1;

GHC.Int.$tcInt2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Int16"#;

GHC.Int.$fEnumInt1 :: GHC.Int.Int16
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# GHC.Int.$tcInt2 of sat_s4vyB {
          __DEFAULT -> GHC.Enum.predError sat_s4vyB;
        };

GHC.Int.$fEnumInt2 :: GHC.Int.Int16
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# GHC.Int.$tcInt2 of sat_s4vyC {
          __DEFAULT -> GHC.Enum.succError sat_s4vyC;
        };

GHC.Int.neInt16 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4vyD ds1_s4vyE]
        case ds_s4vyD of {
          GHC.Int.I16# x_s4vyG [Occ=Once] ->
              case ds1_s4vyE of {
                GHC.Int.I16# y_s4vyI [Occ=Once] ->
                    case /=# [x_s4vyG y_s4vyI] of sat_s4vyJ {
                      __DEFAULT -> tagToEnum# [sat_s4vyJ];
                    };
              };
        };

lvl2_r4kPt :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Int.$tcInt2;

GHC.Int.$fBoundedInt16_$cminBound :: GHC.Int.Int16
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I16#! [-32768#];

GHC.Int.$fEnumInt16_$cpred :: GHC.Int.Int16 -> GHC.Int.Int16
[GblId, Arity=1, Str=<S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [x_s4vyK]
        case x_s4vyK of {
          GHC.Int.I16# x1_s4vyM [Occ=Once!] ->
              case x1_s4vyM of wild1_s4vyN {
                __DEFAULT ->
                    case -# [wild1_s4vyN 1#] of sat_s4vyO {
                      __DEFAULT ->
                          case narrow16Int# [sat_s4vyO] of sat_s4vyP {
                            __DEFAULT -> GHC.Int.I16# [sat_s4vyP];
                          };
                    };
                -32768# -> GHC.Int.$fEnumInt1;
              };
        };

GHC.Int.$fBoundedInt16_$cmaxBound :: GHC.Int.Int16
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I16#! [32767#];

GHC.Int.$fBoundedInt16 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Bounded GHC.Int.Int16
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Bounded! [GHC.Int.$fBoundedInt16_$cminBound
                                       GHC.Int.$fBoundedInt16_$cmaxBound];

GHC.Int.$fEnumInt16_$csucc :: GHC.Int.Int16 -> GHC.Int.Int16
[GblId, Arity=1, Str=<S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [x_s4vyQ]
        case x_s4vyQ of {
          GHC.Int.I16# x1_s4vyS [Occ=Once!] ->
              case x1_s4vyS of wild1_s4vyT {
                __DEFAULT ->
                    case +# [wild1_s4vyT 1#] of sat_s4vyU {
                      __DEFAULT ->
                          case narrow16Int# [sat_s4vyU] of sat_s4vyV {
                            __DEFAULT -> GHC.Int.I16# [sat_s4vyV];
                          };
                    };
                32767# -> GHC.Int.$fEnumInt2;
              };
        };

GHC.Int.$fShowInt16_$cshowsPrec
  :: GHC.Types.Int -> GHC.Int.Int16 -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [p_s4vyW x_s4vyX eta_s4vyY]
        case x_s4vyX of {
          GHC.Int.I16# x#_s4vz0 [Occ=Once] ->
              case p_s4vyW of {
                GHC.Types.I# ww1_s4vz2 [Occ=Once] ->
                    case GHC.Show.$wshowSignedInt ww1_s4vz2 x#_s4vz0 eta_s4vyY of {
                      (#,#) ww5_s4vz4 [Occ=Once] ww6_s4vz5 [Occ=Once] ->
                          : [ww5_s4vz4 ww6_s4vz5];
                    };
              };
        };

GHC.Int.$fShowInt16_$cshow :: GHC.Int.Int16 -> GHC.Base.String
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m2,
 Unf=OtherCon []] =
    [] \r [x_s4vz6]
        case x_s4vz6 of {
          GHC.Int.I16# x#_s4vz8 [Occ=Once] ->
              case GHC.Show.$wshowSignedInt 0# x#_s4vz8 GHC.Types.[] of {
                (#,#) ww5_s4vza [Occ=Once] ww6_s4vzb [Occ=Once] ->
                    : [ww5_s4vza ww6_s4vzb];
              };
        };

GHC.Int.$fShowInt1
  :: GHC.Int.Int16 -> GHC.Base.String -> GHC.Base.String
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [x_s4vzc eta_s4vzd]
        case x_s4vzc of {
          GHC.Int.I16# x#_s4vzf [Occ=Once] ->
              case GHC.Show.$wshowSignedInt 0# x#_s4vzf eta_s4vzd of {
                (#,#) ww5_s4vzh [Occ=Once] ww6_s4vzi [Occ=Once] ->
                    : [ww5_s4vzh ww6_s4vzi];
              };
        };

GHC.Int.$fShowInt16_$cshowList :: [GHC.Int.Int16] -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ls_s4vzj s_s4vzk]
        GHC.Show.showList__ GHC.Int.$fShowInt1 ls_s4vzj s_s4vzk;

GHC.Int.$fShowInt16 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Int.Int16
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Int.$fShowInt16_$cshowsPrec
                                    GHC.Int.$fShowInt16_$cshow
                                    GHC.Int.$fShowInt16_$cshowList];

GHC.Int.$wlvl [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Int.Int16
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [ww_s4vzl]
        GHC.Enum.$wtoEnumError
            GHC.Int.$fShowInt16
            lvl2_r4kPt
            ww_s4vzl
            GHC.Int.$fBoundedInt16_$cminBound
            GHC.Int.$fBoundedInt16_$cmaxBound;

GHC.Int.$w$ctoEnum [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [ww_s4vzm]
        case >=# [ww_s4vzm -32768#] of {
          __DEFAULT -> GHC.Int.$wlvl ww_s4vzm;
          1# ->
              case <=# [ww_s4vzm 32767#] of {
                __DEFAULT -> GHC.Int.$wlvl ww_s4vzm;
                1# -> ww_s4vzm;
              };
        };

GHC.Int.$fEnumInt16_$ctoEnum [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.Int.Int16
[GblId, Arity=1, Str=<S(S),1*U(U)>m, Unf=OtherCon []] =
    [] \r [w_s4vzr]
        case w_s4vzr of {
          GHC.Types.I# ww1_s4vzt [Occ=Once] ->
              case GHC.Int.$w$ctoEnum ww1_s4vzt of ww2_s4vzu {
                __DEFAULT -> GHC.Int.I16# [ww2_s4vzu];
              };
        };

GHC.Int.$w$cenumFromThenTo [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int#
     -> GHC.Prim.Int# -> GHC.Prim.Int# -> [GHC.Int.Int16]
[GblId, Arity=3, Str=<S,U><S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s4vzv ww1_s4vzw ww2_s4vzx]
        case >=# [ww1_s4vzw ww_s4vzv] of {
          __DEFAULT ->
              case ># [ww2_s4vzx ww1_s4vzw] of {
                __DEFAULT ->
                    let {
                      sat_s4vzQ [Occ=Once] :: [GHC.Int.Int16]
                      [LclId] =
                          [ww_s4vzv ww1_s4vzw ww2_s4vzx] \u []
                              case -# [ww1_s4vzw ww_s4vzv] of delta_s4vzD [Dmd=<S,U>] {
                                __DEFAULT ->
                                    case -# [ww2_s4vzx delta_s4vzD] of y'_s4vzE [Dmd=<S,U>] {
                                      __DEFAULT ->
                                          let {
                                            go_dn_s4vzF [Occ=LoopBreaker]
                                              :: GHC.Prim.Int# -> [GHC.Int.Int16]
                                            [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                                sat-only [delta_s4vzD
                                                          y'_s4vzE
                                                          go_dn_s4vzF] \r [x_s4vzG]
                                                    case <# [x_s4vzG y'_s4vzE] of {
                                                      __DEFAULT ->
                                                          let {
                                                            sat_s4vzM [Occ=Once] :: [GHC.Int.Int16]
                                                            [LclId] =
                                                                [delta_s4vzD
                                                                 go_dn_s4vzF
                                                                 x_s4vzG] \u []
                                                                    case
                                                                        +# [x_s4vzG delta_s4vzD]
                                                                    of
                                                                    sat_s4vzL
                                                                    { __DEFAULT ->
                                                                          go_dn_s4vzF sat_s4vzL;
                                                                    }; } in
                                                          let {
                                                            sat_s4vzK [Occ=Once] :: GHC.Int.Int16
                                                            [LclId] =
                                                                [x_s4vzG] \u []
                                                                    case >=# [x_s4vzG -32768#] of {
                                                                      __DEFAULT ->
                                                                          GHC.Int.$wlvl x_s4vzG;
                                                                      1# ->
                                                                          case
                                                                              <=# [x_s4vzG 32767#]
                                                                          of
                                                                          { __DEFAULT ->
                                                                                GHC.Int.$wlvl
                                                                                    x_s4vzG;
                                                                            1# ->
                                                                                GHC.Int.I16# [x_s4vzG];
                                                                          };
                                                                    };
                                                          } in  : [sat_s4vzK sat_s4vzM];
                                                      1# ->
                                                          let {
                                                            sat_s4vzP [Occ=Once] :: GHC.Int.Int16
                                                            [LclId] =
                                                                [x_s4vzG] \u []
                                                                    case >=# [x_s4vzG -32768#] of {
                                                                      __DEFAULT ->
                                                                          GHC.Int.$wlvl x_s4vzG;
                                                                      1# ->
                                                                          case
                                                                              <=# [x_s4vzG 32767#]
                                                                          of
                                                                          { __DEFAULT ->
                                                                                GHC.Int.$wlvl
                                                                                    x_s4vzG;
                                                                            1# ->
                                                                                GHC.Int.I16# [x_s4vzG];
                                                                          };
                                                                    };
                                                          } in  : [sat_s4vzP GHC.Types.[]];
                                                    };
                                          } in  go_dn_s4vzF ww1_s4vzw;
                                    };
                              }; } in
                    let {
                      sat_s4vzC [Occ=Once] :: GHC.Int.Int16
                      [LclId] =
                          [ww_s4vzv] \u []
                              case >=# [ww_s4vzv -32768#] of {
                                __DEFAULT -> GHC.Int.$wlvl ww_s4vzv;
                                1# ->
                                    case <=# [ww_s4vzv 32767#] of {
                                      __DEFAULT -> GHC.Int.$wlvl ww_s4vzv;
                                      1# -> GHC.Int.I16# [ww_s4vzv];
                                    };
                              };
                    } in  : [sat_s4vzC sat_s4vzQ];
                1# ->
                    case ># [ww2_s4vzx ww_s4vzv] of {
                      __DEFAULT ->
                          let {
                            sat_s4vzU [Occ=Once] :: GHC.Int.Int16
                            [LclId] =
                                [ww_s4vzv] \u []
                                    case >=# [ww_s4vzv -32768#] of {
                                      __DEFAULT -> GHC.Int.$wlvl ww_s4vzv;
                                      1# ->
                                          case <=# [ww_s4vzv 32767#] of {
                                            __DEFAULT -> GHC.Int.$wlvl ww_s4vzv;
                                            1# -> GHC.Int.I16# [ww_s4vzv];
                                          };
                                    };
                          } in  : [sat_s4vzU GHC.Types.[]];
                      1# -> [] [];
                    };
              };
          1# ->
              case <# [ww2_s4vzx ww1_s4vzw] of {
                __DEFAULT ->
                    let {
                      sat_s4vAc [Occ=Once] :: [GHC.Int.Int16]
                      [LclId] =
                          [ww_s4vzv ww1_s4vzw ww2_s4vzx] \u []
                              case -# [ww1_s4vzw ww_s4vzv] of delta_s4vzZ [Dmd=<S,U>] {
                                __DEFAULT ->
                                    case -# [ww2_s4vzx delta_s4vzZ] of y'_s4vA0 [Dmd=<S,U>] {
                                      __DEFAULT ->
                                          let {
                                            go_up_s4vA1 [Occ=LoopBreaker]
                                              :: GHC.Prim.Int# -> [GHC.Int.Int16]
                                            [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                                sat-only [delta_s4vzZ
                                                          y'_s4vA0
                                                          go_up_s4vA1] \r [x_s4vA2]
                                                    case ># [x_s4vA2 y'_s4vA0] of {
                                                      __DEFAULT ->
                                                          let {
                                                            sat_s4vA8 [Occ=Once] :: [GHC.Int.Int16]
                                                            [LclId] =
                                                                [delta_s4vzZ
                                                                 go_up_s4vA1
                                                                 x_s4vA2] \u []
                                                                    case
                                                                        +# [x_s4vA2 delta_s4vzZ]
                                                                    of
                                                                    sat_s4vA7
                                                                    { __DEFAULT ->
                                                                          go_up_s4vA1 sat_s4vA7;
                                                                    }; } in
                                                          let {
                                                            sat_s4vA6 [Occ=Once] :: GHC.Int.Int16
                                                            [LclId] =
                                                                [x_s4vA2] \u []
                                                                    case >=# [x_s4vA2 -32768#] of {
                                                                      __DEFAULT ->
                                                                          GHC.Int.$wlvl x_s4vA2;
                                                                      1# ->
                                                                          case
                                                                              <=# [x_s4vA2 32767#]
                                                                          of
                                                                          { __DEFAULT ->
                                                                                GHC.Int.$wlvl
                                                                                    x_s4vA2;
                                                                            1# ->
                                                                                GHC.Int.I16# [x_s4vA2];
                                                                          };
                                                                    };
                                                          } in  : [sat_s4vA6 sat_s4vA8];
                                                      1# ->
                                                          let {
                                                            sat_s4vAb [Occ=Once] :: GHC.Int.Int16
                                                            [LclId] =
                                                                [x_s4vA2] \u []
                                                                    case >=# [x_s4vA2 -32768#] of {
                                                                      __DEFAULT ->
                                                                          GHC.Int.$wlvl x_s4vA2;
                                                                      1# ->
                                                                          case
                                                                              <=# [x_s4vA2 32767#]
                                                                          of
                                                                          { __DEFAULT ->
                                                                                GHC.Int.$wlvl
                                                                                    x_s4vA2;
                                                                            1# ->
                                                                                GHC.Int.I16# [x_s4vA2];
                                                                          };
                                                                    };
                                                          } in  : [sat_s4vAb GHC.Types.[]];
                                                    };
                                          } in  go_up_s4vA1 ww1_s4vzw;
                                    };
                              }; } in
                    let {
                      sat_s4vzY [Occ=Once] :: GHC.Int.Int16
                      [LclId] =
                          [ww_s4vzv] \u []
                              case >=# [ww_s4vzv -32768#] of {
                                __DEFAULT -> GHC.Int.$wlvl ww_s4vzv;
                                1# ->
                                    case <=# [ww_s4vzv 32767#] of {
                                      __DEFAULT -> GHC.Int.$wlvl ww_s4vzv;
                                      1# -> GHC.Int.I16# [ww_s4vzv];
                                    };
                              };
                    } in  : [sat_s4vzY sat_s4vAc];
                1# ->
                    case <# [ww2_s4vzx ww_s4vzv] of {
                      __DEFAULT ->
                          let {
                            sat_s4vAg [Occ=Once] :: GHC.Int.Int16
                            [LclId] =
                                [ww_s4vzv] \u []
                                    case >=# [ww_s4vzv -32768#] of {
                                      __DEFAULT -> GHC.Int.$wlvl ww_s4vzv;
                                      1# ->
                                          case <=# [ww_s4vzv 32767#] of {
                                            __DEFAULT -> GHC.Int.$wlvl ww_s4vzv;
                                            1# -> GHC.Int.I16# [ww_s4vzv];
                                          };
                                    };
                          } in  : [sat_s4vAg GHC.Types.[]];
                      1# -> [] [];
                    };
              };
        };

GHC.Int.$fEnumInt16_$cenumFromThenTo [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int16
     -> GHC.Int.Int16 -> GHC.Int.Int16 -> [GHC.Int.Int16]
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [w_s4vAh w1_s4vAi w2_s4vAj]
        case w_s4vAh of {
          GHC.Int.I16# ww1_s4vAl [Occ=Once] ->
              case w1_s4vAi of {
                GHC.Int.I16# ww3_s4vAn [Occ=Once] ->
                    case w2_s4vAj of {
                      GHC.Int.I16# ww5_s4vAp [Occ=Once] ->
                          GHC.Int.$w$cenumFromThenTo ww1_s4vAl ww3_s4vAn ww5_s4vAp;
                    };
              };
        };

GHC.Int.$w$cenumFromTo [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> [GHC.Int.Int16]
[GblId, Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s4vAq ww1_s4vAr]
        case ># [ww_s4vAq ww1_s4vAr] of {
          __DEFAULT ->
              let {
                go_s4vAt [Occ=LoopBreaker] :: GHC.Prim.Int# -> [GHC.Int.Int16]
                [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
                    sat-only [ww1_s4vAr go_s4vAt] \r [x_s4vAu]
                        let {
                          sat_s4vAA [Occ=Once] :: [GHC.Int.Int16]
                          [LclId] =
                              [ww1_s4vAr go_s4vAt x_s4vAu] \u []
                                  case ==# [x_s4vAu ww1_s4vAr] of {
                                    __DEFAULT ->
                                        case +# [x_s4vAu 1#] of sat_s4vAz {
                                          __DEFAULT -> go_s4vAt sat_s4vAz;
                                        };
                                    1# -> [] [];
                                  }; } in
                        let {
                          sat_s4vAx [Occ=Once] :: GHC.Int.Int16
                          [LclId] =
                              [x_s4vAu] \u []
                                  case >=# [x_s4vAu -32768#] of {
                                    __DEFAULT -> GHC.Int.$wlvl x_s4vAu;
                                    1# ->
                                        case <=# [x_s4vAu 32767#] of {
                                          __DEFAULT -> GHC.Int.$wlvl x_s4vAu;
                                          1# -> GHC.Int.I16# [x_s4vAu];
                                        };
                                  };
                        } in  : [sat_s4vAx sat_s4vAA];
              } in  go_s4vAt ww_s4vAq;
          1# -> [] [];
        };

GHC.Int.$fEnumInt16_$cenumFromTo [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> [GHC.Int.Int16]
[GblId, Arity=2, Str=<S(S),1*U(U)><S(S),1*U(U)>, Unf=OtherCon []] =
    [] \r [w_s4vAB w1_s4vAC]
        case w_s4vAB of {
          GHC.Int.I16# ww1_s4vAE [Occ=Once] ->
              case w1_s4vAC of {
                GHC.Int.I16# ww3_s4vAG [Occ=Once] ->
                    GHC.Int.$w$cenumFromTo ww1_s4vAE ww3_s4vAG;
              };
        };

GHC.Int.$wgo [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: GHC.Prim.Int# -> (# GHC.Int.Int16, [GHC.Int.Int16] #)
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [w_s4vAH]
        let {
          sat_s4vAQ [Occ=Once] :: [GHC.Int.Int16]
          [LclId] =
              [w_s4vAH] \u []
                  case w_s4vAH of wild_s4vAL {
                    __DEFAULT ->
                        case +# [wild_s4vAL 1#] of sat_s4vAM {
                          __DEFAULT ->
                              case GHC.Int.$wgo sat_s4vAM of {
                                (#,#) ww1_s4vAO [Occ=Once] ww2_s4vAP [Occ=Once] ->
                                    : [ww1_s4vAO ww2_s4vAP];
                              };
                        };
                    32767# -> [] [];
                  }; } in
        let {
          sat_s4vAK [Occ=Once] :: GHC.Int.Int16
          [LclId] =
              [w_s4vAH] \u []
                  case >=# [w_s4vAH -32768#] of {
                    __DEFAULT -> GHC.Int.$wlvl w_s4vAH;
                    1# ->
                        case <=# [w_s4vAH 32767#] of {
                          __DEFAULT -> GHC.Int.$wlvl w_s4vAH;
                          1# -> GHC.Int.I16# [w_s4vAH];
                        };
                  };
        } in  (#,#) [sat_s4vAK sat_s4vAQ];

GHC.Int.$fEnumInt16_go [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> [GHC.Int.Int16]
[GblId, Arity=1, Str=<S,U>m2, Unf=OtherCon []] =
    [] \r [w_s4vAR]
        case GHC.Int.$wgo w_s4vAR of {
          (#,#) ww1_s4vAT [Occ=Once] ww2_s4vAU [Occ=Once] ->
              : [ww1_s4vAT ww2_s4vAU];
        };

GHC.Int.$fEnumInt16_$cenumFrom :: GHC.Int.Int16 -> [GHC.Int.Int16]
[GblId, Arity=1, Str=<S(S),1*U(U)>, Unf=OtherCon []] =
    [] \r [n_s4vAV]
        case n_s4vAV of {
          GHC.Int.I16# x#_s4vAX ->
              case ># [x#_s4vAX 32767#] of {
                __DEFAULT -> GHC.Int.$fEnumInt16_go x#_s4vAX;
                1# -> [] [];
              };
        };

GHC.Int.$fEnumInt16 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Enum GHC.Int.Int16
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Enum! [GHC.Int.$fEnumInt16_$csucc
                                    GHC.Int.$fEnumInt16_$cpred
                                    GHC.Int.$fEnumInt16_$ctoEnum
                                    GHC.Int.$fEnumInt16_$cfromEnum
                                    GHC.Int.$fEnumInt16_$cenumFrom
                                    GHC.Int.$fEnumInt16_$cenumFromThen
                                    GHC.Int.$fEnumInt16_$cenumFromTo
                                    GHC.Int.$fEnumInt16_$cenumFromThenTo];
GHC.Int.$fEnumInt16_$cenumFromThen [Occ=LoopBreaker]
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> [GHC.Int.Int16]
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Enum.boundedEnumFromThen
            GHC.Int.$fEnumInt16 GHC.Int.$fBoundedInt16 eta_B2 eta_B1;

GHC.Int.$tcInt4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Int32"#;

GHC.Int.$fEnumInt3 :: GHC.Int.Int32
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# GHC.Int.$tcInt4 of sat_s4vAZ {
          __DEFAULT -> GHC.Enum.predError sat_s4vAZ;
        };

GHC.Int.$fEnumInt4 :: GHC.Int.Int32
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# GHC.Int.$tcInt4 of sat_s4vB0 {
          __DEFAULT -> GHC.Enum.succError sat_s4vB0;
        };

GHC.Int.neInt32 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4vB1 ds1_s4vB2]
        case ds_s4vB1 of {
          GHC.Int.I32# x_s4vB4 [Occ=Once] ->
              case ds1_s4vB2 of {
                GHC.Int.I32# y_s4vB6 [Occ=Once] ->
                    case /=# [x_s4vB4 y_s4vB6] of sat_s4vB7 {
                      __DEFAULT -> tagToEnum# [sat_s4vB7];
                    };
              };
        };

lvl4_r4kPv :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Int.$tcInt4;

GHC.Int.$fBoundedInt32_$cminBound :: GHC.Int.Int32
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I32#! [-2147483648#];

GHC.Int.$fEnumInt32_$cpred :: GHC.Int.Int32 -> GHC.Int.Int32
[GblId, Arity=1, Str=<S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [x_s4vB8]
        case x_s4vB8 of {
          GHC.Int.I32# x1_s4vBa [Occ=Once!] ->
              case x1_s4vBa of wild1_s4vBb {
                __DEFAULT ->
                    case -# [wild1_s4vBb 1#] of sat_s4vBc {
                      __DEFAULT ->
                          case narrow32Int# [sat_s4vBc] of sat_s4vBd {
                            __DEFAULT -> GHC.Int.I32# [sat_s4vBd];
                          };
                    };
                -2147483648# -> GHC.Int.$fEnumInt3;
              };
        };

GHC.Int.$fBoundedInt32_$cmaxBound :: GHC.Int.Int32
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I32#! [2147483647#];

GHC.Int.$fBoundedInt32 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Bounded GHC.Int.Int32
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Bounded! [GHC.Int.$fBoundedInt32_$cminBound
                                       GHC.Int.$fBoundedInt32_$cmaxBound];

GHC.Int.$fEnumInt32_$csucc :: GHC.Int.Int32 -> GHC.Int.Int32
[GblId, Arity=1, Str=<S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [x_s4vBe]
        case x_s4vBe of {
          GHC.Int.I32# x1_s4vBg [Occ=Once!] ->
              case x1_s4vBg of wild1_s4vBh {
                __DEFAULT ->
                    case +# [wild1_s4vBh 1#] of sat_s4vBi {
                      __DEFAULT ->
                          case narrow32Int# [sat_s4vBi] of sat_s4vBj {
                            __DEFAULT -> GHC.Int.I32# [sat_s4vBj];
                          };
                    };
                2147483647# -> GHC.Int.$fEnumInt4;
              };
        };

GHC.Int.$fShowInt32_$cshowsPrec
  :: GHC.Types.Int -> GHC.Int.Int32 -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [p_s4vBk x_s4vBl eta_s4vBm]
        case x_s4vBl of {
          GHC.Int.I32# x#_s4vBo [Occ=Once] ->
              case p_s4vBk of {
                GHC.Types.I# ww1_s4vBq [Occ=Once] ->
                    case GHC.Show.$wshowSignedInt ww1_s4vBq x#_s4vBo eta_s4vBm of {
                      (#,#) ww5_s4vBs [Occ=Once] ww6_s4vBt [Occ=Once] ->
                          : [ww5_s4vBs ww6_s4vBt];
                    };
              };
        };

GHC.Int.$fShowInt32_$cshow :: GHC.Int.Int32 -> GHC.Base.String
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m2,
 Unf=OtherCon []] =
    [] \r [x_s4vBu]
        case x_s4vBu of {
          GHC.Int.I32# x#_s4vBw [Occ=Once] ->
              case GHC.Show.$wshowSignedInt 0# x#_s4vBw GHC.Types.[] of {
                (#,#) ww5_s4vBy [Occ=Once] ww6_s4vBz [Occ=Once] ->
                    : [ww5_s4vBy ww6_s4vBz];
              };
        };

GHC.Int.$fShowInt2
  :: GHC.Int.Int32 -> GHC.Base.String -> GHC.Base.String
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [x_s4vBA eta_s4vBB]
        case x_s4vBA of {
          GHC.Int.I32# x#_s4vBD [Occ=Once] ->
              case GHC.Show.$wshowSignedInt 0# x#_s4vBD eta_s4vBB of {
                (#,#) ww5_s4vBF [Occ=Once] ww6_s4vBG [Occ=Once] ->
                    : [ww5_s4vBF ww6_s4vBG];
              };
        };

GHC.Int.$fShowInt32_$cshowList :: [GHC.Int.Int32] -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ls_s4vBH s_s4vBI]
        GHC.Show.showList__ GHC.Int.$fShowInt2 ls_s4vBH s_s4vBI;

GHC.Int.$fShowInt32 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Int.Int32
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Int.$fShowInt32_$cshowsPrec
                                    GHC.Int.$fShowInt32_$cshow
                                    GHC.Int.$fShowInt32_$cshowList];

GHC.Int.$wlvl1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Int.Int32
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [ww_s4vBJ]
        GHC.Enum.$wtoEnumError
            GHC.Int.$fShowInt32
            lvl4_r4kPv
            ww_s4vBJ
            GHC.Int.$fBoundedInt32_$cminBound
            GHC.Int.$fBoundedInt32_$cmaxBound;

GHC.Int.$w$ctoEnum1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [ww_s4vBK]
        case >=# [ww_s4vBK -2147483648#] of {
          __DEFAULT -> GHC.Int.$wlvl1 ww_s4vBK;
          1# ->
              case <=# [ww_s4vBK 2147483647#] of {
                __DEFAULT -> GHC.Int.$wlvl1 ww_s4vBK;
                1# -> ww_s4vBK;
              };
        };

GHC.Int.$fEnumInt32_$ctoEnum [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.Int.Int32
[GblId, Arity=1, Str=<S(S),1*U(U)>m, Unf=OtherCon []] =
    [] \r [w_s4vBP]
        case w_s4vBP of {
          GHC.Types.I# ww1_s4vBR [Occ=Once] ->
              case GHC.Int.$w$ctoEnum1 ww1_s4vBR of ww2_s4vBS {
                __DEFAULT -> GHC.Int.I32# [ww2_s4vBS];
              };
        };

GHC.Int.$w$cenumFromTo1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> [GHC.Int.Int32]
[GblId, Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s4vBT ww1_s4vBU]
        case ># [ww_s4vBT ww1_s4vBU] of {
          __DEFAULT ->
              let {
                go_s4vBW [Occ=LoopBreaker] :: GHC.Prim.Int# -> [GHC.Int.Int32]
                [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
                    sat-only [ww1_s4vBU go_s4vBW] \r [x_s4vBX]
                        let {
                          sat_s4vC3 [Occ=Once] :: [GHC.Int.Int32]
                          [LclId] =
                              [ww1_s4vBU go_s4vBW x_s4vBX] \u []
                                  case ==# [x_s4vBX ww1_s4vBU] of {
                                    __DEFAULT ->
                                        case +# [x_s4vBX 1#] of sat_s4vC2 {
                                          __DEFAULT -> go_s4vBW sat_s4vC2;
                                        };
                                    1# -> [] [];
                                  }; } in
                        let {
                          sat_s4vC0 [Occ=Once] :: GHC.Int.Int32
                          [LclId] =
                              [x_s4vBX] \u []
                                  case >=# [x_s4vBX -2147483648#] of {
                                    __DEFAULT -> GHC.Int.$wlvl1 x_s4vBX;
                                    1# ->
                                        case <=# [x_s4vBX 2147483647#] of {
                                          __DEFAULT -> GHC.Int.$wlvl1 x_s4vBX;
                                          1# -> GHC.Int.I32# [x_s4vBX];
                                        };
                                  };
                        } in  : [sat_s4vC0 sat_s4vC3];
              } in  go_s4vBW ww_s4vBT;
          1# -> [] [];
        };

GHC.Int.$fEnumInt32_$cenumFromTo [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> [GHC.Int.Int32]
[GblId, Arity=2, Str=<S(S),1*U(U)><S(S),1*U(U)>, Unf=OtherCon []] =
    [] \r [w_s4vC4 w1_s4vC5]
        case w_s4vC4 of {
          GHC.Int.I32# ww1_s4vC7 [Occ=Once] ->
              case w1_s4vC5 of {
                GHC.Int.I32# ww3_s4vC9 [Occ=Once] ->
                    GHC.Int.$w$cenumFromTo1 ww1_s4vC7 ww3_s4vC9;
              };
        };

GHC.Int.$wgo1 [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: GHC.Prim.Int# -> (# GHC.Int.Int32, [GHC.Int.Int32] #)
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [w_s4vCa]
        let {
          sat_s4vCj [Occ=Once] :: [GHC.Int.Int32]
          [LclId] =
              [w_s4vCa] \u []
                  case w_s4vCa of wild_s4vCe {
                    __DEFAULT ->
                        case +# [wild_s4vCe 1#] of sat_s4vCf {
                          __DEFAULT ->
                              case GHC.Int.$wgo1 sat_s4vCf of {
                                (#,#) ww1_s4vCh [Occ=Once] ww2_s4vCi [Occ=Once] ->
                                    : [ww1_s4vCh ww2_s4vCi];
                              };
                        };
                    2147483647# -> [] [];
                  }; } in
        let {
          sat_s4vCd [Occ=Once] :: GHC.Int.Int32
          [LclId] =
              [w_s4vCa] \u []
                  case >=# [w_s4vCa -2147483648#] of {
                    __DEFAULT -> GHC.Int.$wlvl1 w_s4vCa;
                    1# ->
                        case <=# [w_s4vCa 2147483647#] of {
                          __DEFAULT -> GHC.Int.$wlvl1 w_s4vCa;
                          1# -> GHC.Int.I32# [w_s4vCa];
                        };
                  };
        } in  (#,#) [sat_s4vCd sat_s4vCj];

GHC.Int.$fEnumInt32_go [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> [GHC.Int.Int32]
[GblId, Arity=1, Str=<S,U>m2, Unf=OtherCon []] =
    [] \r [w_s4vCk]
        case GHC.Int.$wgo1 w_s4vCk of {
          (#,#) ww1_s4vCm [Occ=Once] ww2_s4vCn [Occ=Once] ->
              : [ww1_s4vCm ww2_s4vCn];
        };

GHC.Int.$fEnumInt32_$cenumFrom :: GHC.Int.Int32 -> [GHC.Int.Int32]
[GblId, Arity=1, Str=<S(S),1*U(U)>, Unf=OtherCon []] =
    [] \r [n_s4vCo]
        case n_s4vCo of {
          GHC.Int.I32# x#_s4vCq ->
              case ># [x#_s4vCq 2147483647#] of {
                __DEFAULT -> GHC.Int.$fEnumInt32_go x#_s4vCq;
                1# -> [] [];
              };
        };

GHC.Int.$w$cenumFromThenTo1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int#
     -> GHC.Prim.Int# -> GHC.Prim.Int# -> [GHC.Int.Int32]
[GblId, Arity=3, Str=<S,U><S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s4vCs ww1_s4vCt ww2_s4vCu]
        case >=# [ww1_s4vCt ww_s4vCs] of {
          __DEFAULT ->
              case ># [ww2_s4vCu ww1_s4vCt] of {
                __DEFAULT ->
                    let {
                      sat_s4vCN [Occ=Once] :: [GHC.Int.Int32]
                      [LclId] =
                          [ww_s4vCs ww1_s4vCt ww2_s4vCu] \u []
                              case -# [ww1_s4vCt ww_s4vCs] of delta_s4vCA [Dmd=<S,U>] {
                                __DEFAULT ->
                                    case -# [ww2_s4vCu delta_s4vCA] of y'_s4vCB [Dmd=<S,U>] {
                                      __DEFAULT ->
                                          let {
                                            go_dn_s4vCC [Occ=LoopBreaker]
                                              :: GHC.Prim.Int# -> [GHC.Int.Int32]
                                            [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                                sat-only [delta_s4vCA
                                                          y'_s4vCB
                                                          go_dn_s4vCC] \r [x_s4vCD]
                                                    case <# [x_s4vCD y'_s4vCB] of {
                                                      __DEFAULT ->
                                                          let {
                                                            sat_s4vCJ [Occ=Once] :: [GHC.Int.Int32]
                                                            [LclId] =
                                                                [delta_s4vCA
                                                                 go_dn_s4vCC
                                                                 x_s4vCD] \u []
                                                                    case
                                                                        +# [x_s4vCD delta_s4vCA]
                                                                    of
                                                                    sat_s4vCI
                                                                    { __DEFAULT ->
                                                                          go_dn_s4vCC sat_s4vCI;
                                                                    }; } in
                                                          let {
                                                            sat_s4vCH [Occ=Once] :: GHC.Int.Int32
                                                            [LclId] =
                                                                [x_s4vCD] \u []
                                                                    case
                                                                        >=# [x_s4vCD -2147483648#]
                                                                    of
                                                                    { __DEFAULT ->
                                                                          GHC.Int.$wlvl1 x_s4vCD;
                                                                      1# ->
                                                                          case
                                                                              <=# [x_s4vCD
                                                                                   2147483647#]
                                                                          of
                                                                          { __DEFAULT ->
                                                                                GHC.Int.$wlvl1
                                                                                    x_s4vCD;
                                                                            1# ->
                                                                                GHC.Int.I32# [x_s4vCD];
                                                                          };
                                                                    };
                                                          } in  : [sat_s4vCH sat_s4vCJ];
                                                      1# ->
                                                          let {
                                                            sat_s4vCM [Occ=Once] :: GHC.Int.Int32
                                                            [LclId] =
                                                                [x_s4vCD] \u []
                                                                    case
                                                                        >=# [x_s4vCD -2147483648#]
                                                                    of
                                                                    { __DEFAULT ->
                                                                          GHC.Int.$wlvl1 x_s4vCD;
                                                                      1# ->
                                                                          case
                                                                              <=# [x_s4vCD
                                                                                   2147483647#]
                                                                          of
                                                                          { __DEFAULT ->
                                                                                GHC.Int.$wlvl1
                                                                                    x_s4vCD;
                                                                            1# ->
                                                                                GHC.Int.I32# [x_s4vCD];
                                                                          };
                                                                    };
                                                          } in  : [sat_s4vCM GHC.Types.[]];
                                                    };
                                          } in  go_dn_s4vCC ww1_s4vCt;
                                    };
                              }; } in
                    let {
                      sat_s4vCz [Occ=Once] :: GHC.Int.Int32
                      [LclId] =
                          [ww_s4vCs] \u []
                              case >=# [ww_s4vCs -2147483648#] of {
                                __DEFAULT -> GHC.Int.$wlvl1 ww_s4vCs;
                                1# ->
                                    case <=# [ww_s4vCs 2147483647#] of {
                                      __DEFAULT -> GHC.Int.$wlvl1 ww_s4vCs;
                                      1# -> GHC.Int.I32# [ww_s4vCs];
                                    };
                              };
                    } in  : [sat_s4vCz sat_s4vCN];
                1# ->
                    case ># [ww2_s4vCu ww_s4vCs] of {
                      __DEFAULT ->
                          let {
                            sat_s4vCR [Occ=Once] :: GHC.Int.Int32
                            [LclId] =
                                [ww_s4vCs] \u []
                                    case >=# [ww_s4vCs -2147483648#] of {
                                      __DEFAULT -> GHC.Int.$wlvl1 ww_s4vCs;
                                      1# ->
                                          case <=# [ww_s4vCs 2147483647#] of {
                                            __DEFAULT -> GHC.Int.$wlvl1 ww_s4vCs;
                                            1# -> GHC.Int.I32# [ww_s4vCs];
                                          };
                                    };
                          } in  : [sat_s4vCR GHC.Types.[]];
                      1# -> [] [];
                    };
              };
          1# ->
              case <# [ww2_s4vCu ww1_s4vCt] of {
                __DEFAULT ->
                    let {
                      sat_s4vD9 [Occ=Once] :: [GHC.Int.Int32]
                      [LclId] =
                          [ww_s4vCs ww1_s4vCt ww2_s4vCu] \u []
                              case -# [ww1_s4vCt ww_s4vCs] of delta_s4vCW [Dmd=<S,U>] {
                                __DEFAULT ->
                                    case -# [ww2_s4vCu delta_s4vCW] of y'_s4vCX [Dmd=<S,U>] {
                                      __DEFAULT ->
                                          let {
                                            go_up_s4vCY [Occ=LoopBreaker]
                                              :: GHC.Prim.Int# -> [GHC.Int.Int32]
                                            [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                                sat-only [delta_s4vCW
                                                          y'_s4vCX
                                                          go_up_s4vCY] \r [x_s4vCZ]
                                                    case ># [x_s4vCZ y'_s4vCX] of {
                                                      __DEFAULT ->
                                                          let {
                                                            sat_s4vD5 [Occ=Once] :: [GHC.Int.Int32]
                                                            [LclId] =
                                                                [delta_s4vCW
                                                                 go_up_s4vCY
                                                                 x_s4vCZ] \u []
                                                                    case
                                                                        +# [x_s4vCZ delta_s4vCW]
                                                                    of
                                                                    sat_s4vD4
                                                                    { __DEFAULT ->
                                                                          go_up_s4vCY sat_s4vD4;
                                                                    }; } in
                                                          let {
                                                            sat_s4vD3 [Occ=Once] :: GHC.Int.Int32
                                                            [LclId] =
                                                                [x_s4vCZ] \u []
                                                                    case
                                                                        >=# [x_s4vCZ -2147483648#]
                                                                    of
                                                                    { __DEFAULT ->
                                                                          GHC.Int.$wlvl1 x_s4vCZ;
                                                                      1# ->
                                                                          case
                                                                              <=# [x_s4vCZ
                                                                                   2147483647#]
                                                                          of
                                                                          { __DEFAULT ->
                                                                                GHC.Int.$wlvl1
                                                                                    x_s4vCZ;
                                                                            1# ->
                                                                                GHC.Int.I32# [x_s4vCZ];
                                                                          };
                                                                    };
                                                          } in  : [sat_s4vD3 sat_s4vD5];
                                                      1# ->
                                                          let {
                                                            sat_s4vD8 [Occ=Once] :: GHC.Int.Int32
                                                            [LclId] =
                                                                [x_s4vCZ] \u []
                                                                    case
                                                                        >=# [x_s4vCZ -2147483648#]
                                                                    of
                                                                    { __DEFAULT ->
                                                                          GHC.Int.$wlvl1 x_s4vCZ;
                                                                      1# ->
                                                                          case
                                                                              <=# [x_s4vCZ
                                                                                   2147483647#]
                                                                          of
                                                                          { __DEFAULT ->
                                                                                GHC.Int.$wlvl1
                                                                                    x_s4vCZ;
                                                                            1# ->
                                                                                GHC.Int.I32# [x_s4vCZ];
                                                                          };
                                                                    };
                                                          } in  : [sat_s4vD8 GHC.Types.[]];
                                                    };
                                          } in  go_up_s4vCY ww1_s4vCt;
                                    };
                              }; } in
                    let {
                      sat_s4vCV [Occ=Once] :: GHC.Int.Int32
                      [LclId] =
                          [ww_s4vCs] \u []
                              case >=# [ww_s4vCs -2147483648#] of {
                                __DEFAULT -> GHC.Int.$wlvl1 ww_s4vCs;
                                1# ->
                                    case <=# [ww_s4vCs 2147483647#] of {
                                      __DEFAULT -> GHC.Int.$wlvl1 ww_s4vCs;
                                      1# -> GHC.Int.I32# [ww_s4vCs];
                                    };
                              };
                    } in  : [sat_s4vCV sat_s4vD9];
                1# ->
                    case <# [ww2_s4vCu ww_s4vCs] of {
                      __DEFAULT ->
                          let {
                            sat_s4vDd [Occ=Once] :: GHC.Int.Int32
                            [LclId] =
                                [ww_s4vCs] \u []
                                    case >=# [ww_s4vCs -2147483648#] of {
                                      __DEFAULT -> GHC.Int.$wlvl1 ww_s4vCs;
                                      1# ->
                                          case <=# [ww_s4vCs 2147483647#] of {
                                            __DEFAULT -> GHC.Int.$wlvl1 ww_s4vCs;
                                            1# -> GHC.Int.I32# [ww_s4vCs];
                                          };
                                    };
                          } in  : [sat_s4vDd GHC.Types.[]];
                      1# -> [] [];
                    };
              };
        };

GHC.Int.$fEnumInt32_$cenumFromThenTo [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int32
     -> GHC.Int.Int32 -> GHC.Int.Int32 -> [GHC.Int.Int32]
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [w_s4vDe w1_s4vDf w2_s4vDg]
        case w_s4vDe of {
          GHC.Int.I32# ww1_s4vDi [Occ=Once] ->
              case w1_s4vDf of {
                GHC.Int.I32# ww3_s4vDk [Occ=Once] ->
                    case w2_s4vDg of {
                      GHC.Int.I32# ww5_s4vDm [Occ=Once] ->
                          GHC.Int.$w$cenumFromThenTo1 ww1_s4vDi ww3_s4vDk ww5_s4vDm;
                    };
              };
        };

GHC.Int.$fEnumInt32 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Enum GHC.Int.Int32
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Enum! [GHC.Int.$fEnumInt32_$csucc
                                    GHC.Int.$fEnumInt32_$cpred
                                    GHC.Int.$fEnumInt32_$ctoEnum
                                    GHC.Int.$fEnumInt32_$cfromEnum
                                    GHC.Int.$fEnumInt32_$cenumFrom
                                    GHC.Int.$fEnumInt32_$cenumFromThen
                                    GHC.Int.$fEnumInt32_$cenumFromTo
                                    GHC.Int.$fEnumInt32_$cenumFromThenTo];
GHC.Int.$fEnumInt32_$cenumFromThen [Occ=LoopBreaker]
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> [GHC.Int.Int32]
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Enum.boundedEnumFromThen
            GHC.Int.$fEnumInt32 GHC.Int.$fBoundedInt32 eta_B2 eta_B1;

GHC.Int.$tcInt6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Int64"#;

GHC.Int.$fEnumInt5 :: GHC.Int.Int64
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# GHC.Int.$tcInt6 of sat_s4vDn {
          __DEFAULT -> GHC.Enum.predError sat_s4vDn;
        };

GHC.Int.$fEnumInt6 :: GHC.Int.Int64
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# GHC.Int.$tcInt6 of sat_s4vDo {
          __DEFAULT -> GHC.Enum.succError sat_s4vDo;
        };

GHC.Int.neInt64 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4vDp ds1_s4vDq]
        case ds_s4vDp of {
          GHC.Int.I64# x_s4vDs [Occ=Once] ->
              case ds1_s4vDq of {
                GHC.Int.I64# y_s4vDu [Occ=Once] ->
                    case /=# [x_s4vDs y_s4vDu] of sat_s4vDv {
                      __DEFAULT -> tagToEnum# [sat_s4vDv];
                    };
              };
        };

GHC.Int.$fBoundedInt64_$cminBound :: GHC.Int.Int64
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I64#! [-9223372036854775808#];

GHC.Int.$fEnumInt64_$cpred :: GHC.Int.Int64 -> GHC.Int.Int64
[GblId, Arity=1, Str=<S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [x_s4vDw]
        case x_s4vDw of {
          GHC.Int.I64# x1_s4vDy [Occ=Once!] ->
              case x1_s4vDy of wild1_s4vDz {
                __DEFAULT ->
                    case -# [wild1_s4vDz 1#] of sat_s4vDA {
                      __DEFAULT -> GHC.Int.I64# [sat_s4vDA];
                    };
                -9223372036854775808# -> GHC.Int.$fEnumInt5;
              };
        };

GHC.Int.$fBoundedInt64_$cmaxBound :: GHC.Int.Int64
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I64#! [9223372036854775807#];

GHC.Int.$fBoundedInt64 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Bounded GHC.Int.Int64
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Bounded! [GHC.Int.$fBoundedInt64_$cminBound
                                       GHC.Int.$fBoundedInt64_$cmaxBound];

GHC.Int.$fEnumInt64_$csucc :: GHC.Int.Int64 -> GHC.Int.Int64
[GblId, Arity=1, Str=<S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [x_s4vDB]
        case x_s4vDB of {
          GHC.Int.I64# x1_s4vDD [Occ=Once!] ->
              case x1_s4vDD of wild1_s4vDE {
                __DEFAULT ->
                    case +# [wild1_s4vDE 1#] of sat_s4vDF {
                      __DEFAULT -> GHC.Int.I64# [sat_s4vDF];
                    };
                9223372036854775807# -> GHC.Int.$fEnumInt6;
              };
        };

GHC.Int.$wgo2 [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: GHC.Prim.Int# -> (# GHC.Int.Int64, [GHC.Int.Int64] #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [w_s4vDG]
        let {
          sat_s4vDN [Occ=Once] :: [GHC.Int.Int64]
          [LclId] =
              [w_s4vDG] \u []
                  case w_s4vDG of wild_s4vDI {
                    __DEFAULT ->
                        case +# [wild_s4vDI 1#] of sat_s4vDJ {
                          __DEFAULT ->
                              case GHC.Int.$wgo2 sat_s4vDJ of {
                                (#,#) ww1_s4vDL [Occ=Once] ww2_s4vDM [Occ=Once] ->
                                    : [ww1_s4vDL ww2_s4vDM];
                              };
                        };
                    9223372036854775807# -> [] [];
                  }; } in
        let {
          sat_s4vDH [Occ=Once] :: GHC.Int.Int64
          [LclId] =
              CCCS GHC.Int.I64#! [w_s4vDG];
        } in  (#,#) [sat_s4vDH sat_s4vDN];

GHC.Int.$fEnumInt64_go [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> [GHC.Int.Int64]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>m2, Unf=OtherCon []] =
    [] \r [w_s4vDO]
        case GHC.Int.$wgo2 w_s4vDO of {
          (#,#) ww1_s4vDQ [Occ=Once] ww2_s4vDR [Occ=Once] ->
              : [ww1_s4vDQ ww2_s4vDR];
        };

GHC.Int.$fEnumInt64_$cenumFrom :: GHC.Int.Int64 -> [GHC.Int.Int64]
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m2,
 Unf=OtherCon []] =
    [] \r [n_s4vDS]
        case n_s4vDS of {
          GHC.Int.I64# x#_s4vDU [Occ=Once] ->
              GHC.Int.$fEnumInt64_go x#_s4vDU;
        };

GHC.Int.$fEnumInt64 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Enum GHC.Int.Int64
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Enum! [GHC.Int.$fEnumInt64_$csucc
                                    GHC.Int.$fEnumInt64_$cpred
                                    GHC.Int.$fEnumInt64_$ctoEnum
                                    GHC.Int.$fEnumInt64_$cfromEnum
                                    GHC.Int.$fEnumInt64_$cenumFrom
                                    GHC.Int.$fEnumInt64_$cenumFromThen
                                    GHC.Int.$fEnumInt64_$cenumFromTo
                                    GHC.Int.$fEnumInt64_$cenumFromThenTo];
GHC.Int.$fEnumInt64_$cenumFromThen [Occ=LoopBreaker]
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> [GHC.Int.Int64]
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Enum.boundedEnumFromThen
            GHC.Int.$fEnumInt64 GHC.Int.$fBoundedInt64 eta_B2 eta_B1;

GHC.Int.$fNumInt8_$cfromInteger
  :: GHC.Integer.Type.Integer -> GHC.Int.Int8
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [i_s4vDV]
        case GHC.Integer.Type.integerToInt i_s4vDV of wild_s4vDW {
          __DEFAULT ->
              case narrow8Int# [wild_s4vDW] of sat_s4vDX {
                __DEFAULT -> GHC.Int.I8# [sat_s4vDX];
              };
        };

GHC.Int.$fNumInt8_$cnegate :: GHC.Int.Int8 -> GHC.Int.Int8
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vDY]
        case ds_s4vDY of {
          GHC.Int.I8# x#_s4vE0 [Occ=Once] ->
              case negateInt# [x#_s4vE0] of sat_s4vE1 {
                __DEFAULT ->
                    case narrow8Int# [sat_s4vE1] of sat_s4vE2 {
                      __DEFAULT -> GHC.Int.I8# [sat_s4vE2];
                    };
              };
        };

GHC.Int.$fNumInt8_$c*
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> GHC.Int.Int8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vE3 ds1_s4vE4]
        case ds_s4vE3 of {
          GHC.Int.I8# x#_s4vE6 [Occ=Once] ->
              case ds1_s4vE4 of {
                GHC.Int.I8# y#_s4vE8 [Occ=Once] ->
                    case *# [x#_s4vE6 y#_s4vE8] of sat_s4vE9 {
                      __DEFAULT ->
                          case narrow8Int# [sat_s4vE9] of sat_s4vEa {
                            __DEFAULT -> GHC.Int.I8# [sat_s4vEa];
                          };
                    };
              };
        };

GHC.Int.$fNumInt8_$c-
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> GHC.Int.Int8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vEb ds1_s4vEc]
        case ds_s4vEb of {
          GHC.Int.I8# x#_s4vEe [Occ=Once] ->
              case ds1_s4vEc of {
                GHC.Int.I8# y#_s4vEg [Occ=Once] ->
                    case -# [x#_s4vEe y#_s4vEg] of sat_s4vEh {
                      __DEFAULT ->
                          case narrow8Int# [sat_s4vEh] of sat_s4vEi {
                            __DEFAULT -> GHC.Int.I8# [sat_s4vEi];
                          };
                    };
              };
        };

GHC.Int.$fNumInt8_$c+
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> GHC.Int.Int8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vEj ds1_s4vEk]
        case ds_s4vEj of {
          GHC.Int.I8# x#_s4vEm [Occ=Once] ->
              case ds1_s4vEk of {
                GHC.Int.I8# y#_s4vEo [Occ=Once] ->
                    case +# [x#_s4vEm y#_s4vEo] of sat_s4vEp {
                      __DEFAULT ->
                          case narrow8Int# [sat_s4vEp] of sat_s4vEq {
                            __DEFAULT -> GHC.Int.I8# [sat_s4vEq];
                          };
                    };
              };
        };

GHC.Int.$fIntegralInt8_$ctoInteger
  :: GHC.Int.Int8 -> GHC.Integer.Type.Integer
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4vEr]
        case ds_s4vEr of {
          GHC.Int.I8# x#_s4vEt [Occ=Once] ->
              GHC.Integer.Type.smallInteger x#_s4vEt;
        };

GHC.Int.$fBitsInt8_$cpopCount :: GHC.Int.Int8 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vEu]
        case ds_s4vEu of {
          GHC.Int.I8# x#_s4vEw [Occ=Once] ->
              case int2Word# [x#_s4vEw] of sat_s4vEx {
                __DEFAULT ->
                    case popCnt8# [sat_s4vEx] of sat_s4vEy {
                      __DEFAULT ->
                          case word2Int# [sat_s4vEy] of sat_s4vEz {
                            __DEFAULT -> GHC.Types.I# [sat_s4vEz];
                          };
                    };
              };
        };

GHC.Int.$fBitsInt8_$cunsafeShiftR
  :: GHC.Int.Int8 -> GHC.Types.Int -> GHC.Int.Int8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vEA ds1_s4vEB]
        case ds_s4vEA of {
          GHC.Int.I8# x#_s4vED [Occ=Once] ->
              case ds1_s4vEB of {
                GHC.Types.I# i#_s4vEF [Occ=Once] ->
                    case uncheckedIShiftRA# [x#_s4vED i#_s4vEF] of sat_s4vEG {
                      __DEFAULT -> GHC.Int.I8# [sat_s4vEG];
                    };
              };
        };

GHC.Int.$fBitsInt13 :: GHC.Int.Int8
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I8#! [0#];

GHC.Int.$fNumInt9 :: GHC.Int.Int8
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I8#! [-1#];

GHC.Int.$fBitsInt8_$cshiftR [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int8 -> GHC.Types.Int -> GHC.Int.Int8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4vEH w1_s4vEI]
        case w_s4vEH of {
          GHC.Int.I8# ww1_s4vEK [Occ=Once*] ->
              case w1_s4vEI of {
                GHC.Types.I# ww3_s4vEM ->
                    case >=# [ww3_s4vEM 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftRA# [ww1_s4vEK ww3_s4vEM] of sat_s4vEO {
                            __DEFAULT -> GHC.Int.I8# [sat_s4vEO];
                          };
                      1# ->
                          case <# [ww1_s4vEK 0#] of {
                            __DEFAULT -> GHC.Int.$fBitsInt13;
                            1# -> GHC.Int.$fNumInt9;
                          };
                    };
              };
        };

GHC.Int.$fBitsInt8_$cunsafeShiftL
  :: GHC.Int.Int8 -> GHC.Types.Int -> GHC.Int.Int8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vEQ ds1_s4vER]
        case ds_s4vEQ of {
          GHC.Int.I8# x#_s4vET [Occ=Once] ->
              case ds1_s4vER of {
                GHC.Types.I# i#_s4vEV [Occ=Once] ->
                    case uncheckedIShiftL# [x#_s4vET i#_s4vEV] of sat_s4vEW {
                      __DEFAULT ->
                          case narrow8Int# [sat_s4vEW] of sat_s4vEX {
                            __DEFAULT -> GHC.Int.I8# [sat_s4vEX];
                          };
                    };
              };
        };

GHC.Int.$fBitsInt8_$cshiftL
  :: GHC.Int.Int8 -> GHC.Types.Int -> GHC.Int.Int8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vEY ds1_s4vEZ]
        case ds_s4vEY of {
          GHC.Int.I8# x#_s4vF1 [Occ=Once] ->
              case ds1_s4vEZ of {
                GHC.Types.I# i#_s4vF3 ->
                    case >=# [i#_s4vF3 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftL# [x#_s4vF1 i#_s4vF3] of sat_s4vF5 {
                            __DEFAULT ->
                                case narrow8Int# [sat_s4vF5] of sat_s4vF6 {
                                  __DEFAULT -> GHC.Int.I8# [sat_s4vF6];
                                };
                          };
                      1# -> GHC.Int.$fBitsInt13;
                    };
              };
        };

GHC.Int.$fBitsInt8_$cisSigned :: GHC.Int.Int8 -> GHC.Types.Bool
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>, Unf=OtherCon []] =
    [] \r [ds_s4vF7] GHC.Types.True [];

GHC.Int.$fBitsInt8_$crotate
  :: GHC.Int.Int8 -> GHC.Types.Int -> GHC.Int.Int8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vF8 ds1_s4vF9]
        case ds_s4vF8 of wild_s4vFa {
          GHC.Int.I8# x#_s4vFb [Occ=Once] ->
              case ds1_s4vF9 of {
                GHC.Types.I# i#_s4vFd [Occ=Once] ->
                    case int2Word# [i#_s4vFd] of sat_s4vFe {
                      __DEFAULT ->
                          case and# [sat_s4vFe 7##] of sat_s4vFf {
                            __DEFAULT ->
                                case word2Int# [sat_s4vFf] of wild2_s4vFg {
                                  __DEFAULT ->
                                      case int2Word# [x#_s4vFb] of sat_s4vFi {
                                        __DEFAULT ->
                                            case narrow8Word# [sat_s4vFi] of x'#_s4vFh [Dmd=<S,U>] {
                                              __DEFAULT ->
                                                  case -# [8# wild2_s4vFg] of sat_s4vFk {
                                                    __DEFAULT ->
                                                        case
                                                            uncheckedShiftRL# [x'#_s4vFh sat_s4vFk]
                                                        of
                                                        sat_s4vFl
                                                        { __DEFAULT ->
                                                              case
                                                                  uncheckedShiftL# [x'#_s4vFh
                                                                                    wild2_s4vFg]
                                                              of
                                                              sat_s4vFj
                                                              { __DEFAULT ->
                                                                    case
                                                                        or# [sat_s4vFj sat_s4vFl]
                                                                    of
                                                                    sat_s4vFm
                                                                    { __DEFAULT ->
                                                                          case
                                                                              word2Int# [sat_s4vFm]
                                                                          of
                                                                          sat_s4vFn
                                                                          { __DEFAULT ->
                                                                                case
                                                                                    narrow8Int# [sat_s4vFn]
                                                                                of
                                                                                sat_s4vFo
                                                                                { __DEFAULT ->
                                                                                      GHC.Int.I8# [sat_s4vFo];
                                                                                };
                                                                          };
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                  0# -> wild_s4vFa;
                                };
                          };
                    };
              };
        };

GHC.Int.$fBitsInt8_$cshift [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int8 -> GHC.Types.Int -> GHC.Int.Int8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vFp ds1_s4vFq]
        case ds_s4vFp of {
          GHC.Int.I8# x#_s4vFs [Occ=Once*] ->
              case ds1_s4vFq of {
                GHC.Types.I# i#_s4vFu ->
                    case >=# [i#_s4vFu 0#] of {
                      __DEFAULT ->
                          case negateInt# [i#_s4vFu] of b_s4vFw [Dmd=<S,U>] {
                            __DEFAULT ->
                                case >=# [b_s4vFw 64#] of {
                                  __DEFAULT ->
                                      case uncheckedIShiftRA# [x#_s4vFs b_s4vFw] of sat_s4vFy {
                                        __DEFAULT -> GHC.Int.I8# [sat_s4vFy];
                                      };
                                  1# ->
                                      case <# [x#_s4vFs 0#] of {
                                        __DEFAULT -> GHC.Int.$fBitsInt13;
                                        1# -> GHC.Int.$fNumInt9;
                                      };
                                };
                          };
                      1# ->
                          case >=# [i#_s4vFu 64#] of {
                            __DEFAULT ->
                                case uncheckedIShiftL# [x#_s4vFs i#_s4vFu] of sat_s4vFB {
                                  __DEFAULT ->
                                      case narrow8Int# [sat_s4vFB] of sat_s4vFC {
                                        __DEFAULT -> GHC.Int.I8# [sat_s4vFC];
                                      };
                                };
                            1# -> GHC.Int.$fBitsInt13;
                          };
                    };
              };
        };

GHC.Int.$fBitsInt8_$ccomplement :: GHC.Int.Int8 -> GHC.Int.Int8
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vFD]
        case ds_s4vFD of {
          GHC.Int.I8# x#_s4vFF [Occ=Once] ->
              case int2Word# [x#_s4vFF] of sat_s4vFG {
                __DEFAULT ->
                    case not# [sat_s4vFG] of sat_s4vFH {
                      __DEFAULT ->
                          case word2Int# [sat_s4vFH] of sat_s4vFI {
                            __DEFAULT -> GHC.Int.I8# [sat_s4vFI];
                          };
                    };
              };
        };

GHC.Int.$fBitsInt8_$cxor
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> GHC.Int.Int8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vFJ ds1_s4vFK]
        case ds_s4vFJ of {
          GHC.Int.I8# x#_s4vFM [Occ=Once] ->
              case ds1_s4vFK of {
                GHC.Int.I8# y#_s4vFO [Occ=Once] ->
                    case int2Word# [y#_s4vFO] of sat_s4vFQ {
                      __DEFAULT ->
                          case int2Word# [x#_s4vFM] of sat_s4vFP {
                            __DEFAULT ->
                                case xor# [sat_s4vFP sat_s4vFQ] of sat_s4vFR {
                                  __DEFAULT ->
                                      case word2Int# [sat_s4vFR] of sat_s4vFS {
                                        __DEFAULT -> GHC.Int.I8# [sat_s4vFS];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fBitsInt8_$c.|.
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> GHC.Int.Int8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vFT ds1_s4vFU]
        case ds_s4vFT of {
          GHC.Int.I8# x#_s4vFW [Occ=Once] ->
              case ds1_s4vFU of {
                GHC.Int.I8# y#_s4vFY [Occ=Once] ->
                    case int2Word# [y#_s4vFY] of sat_s4vG0 {
                      __DEFAULT ->
                          case int2Word# [x#_s4vFW] of sat_s4vFZ {
                            __DEFAULT ->
                                case or# [sat_s4vFZ sat_s4vG0] of sat_s4vG1 {
                                  __DEFAULT ->
                                      case word2Int# [sat_s4vG1] of sat_s4vG2 {
                                        __DEFAULT -> GHC.Int.I8# [sat_s4vG2];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fBitsInt8_$c.&.
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> GHC.Int.Int8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vG3 ds1_s4vG4]
        case ds_s4vG3 of {
          GHC.Int.I8# x#_s4vG6 [Occ=Once] ->
              case ds1_s4vG4 of {
                GHC.Int.I8# y#_s4vG8 [Occ=Once] ->
                    case int2Word# [y#_s4vG8] of sat_s4vGa {
                      __DEFAULT ->
                          case int2Word# [x#_s4vG6] of sat_s4vG9 {
                            __DEFAULT ->
                                case and# [sat_s4vG9 sat_s4vGa] of sat_s4vGb {
                                  __DEFAULT ->
                                      case word2Int# [sat_s4vGb] of sat_s4vGc {
                                        __DEFAULT -> GHC.Int.I8# [sat_s4vGc];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fFiniteBitsInt8_$ccountTrailingZeros
  :: GHC.Int.Int8 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vGd]
        case ds_s4vGd of {
          GHC.Int.I8# x#_s4vGf [Occ=Once] ->
              case int2Word# [x#_s4vGf] of sat_s4vGg {
                __DEFAULT ->
                    case ctz8# [sat_s4vGg] of sat_s4vGh {
                      __DEFAULT ->
                          case word2Int# [sat_s4vGh] of sat_s4vGi {
                            __DEFAULT -> GHC.Types.I# [sat_s4vGi];
                          };
                    };
              };
        };

GHC.Int.$fFiniteBitsInt8_$ccountLeadingZeros
  :: GHC.Int.Int8 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vGj]
        case ds_s4vGj of {
          GHC.Int.I8# x#_s4vGl [Occ=Once] ->
              case int2Word# [x#_s4vGl] of sat_s4vGm {
                __DEFAULT ->
                    case clz8# [sat_s4vGm] of sat_s4vGn {
                      __DEFAULT ->
                          case word2Int# [sat_s4vGn] of sat_s4vGo {
                            __DEFAULT -> GHC.Types.I# [sat_s4vGo];
                          };
                    };
              };
        };

GHC.Int.$fBitsInt11 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [8#];

GHC.Int.$fBitsInt8_$cfiniteBitSize :: GHC.Int.Int8 -> GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>m, Unf=OtherCon []] =
    [] \r [ds_s4vGp] GHC.Int.$fBitsInt11;

GHC.Int.$fNumInt16_$cfromInteger
  :: GHC.Integer.Type.Integer -> GHC.Int.Int16
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [i_s4vGq]
        case GHC.Integer.Type.integerToInt i_s4vGq of wild_s4vGr {
          __DEFAULT ->
              case narrow16Int# [wild_s4vGr] of sat_s4vGs {
                __DEFAULT -> GHC.Int.I16# [sat_s4vGs];
              };
        };

GHC.Int.$fNumInt16_$cnegate :: GHC.Int.Int16 -> GHC.Int.Int16
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vGt]
        case ds_s4vGt of {
          GHC.Int.I16# x#_s4vGv [Occ=Once] ->
              case negateInt# [x#_s4vGv] of sat_s4vGw {
                __DEFAULT ->
                    case narrow16Int# [sat_s4vGw] of sat_s4vGx {
                      __DEFAULT -> GHC.Int.I16# [sat_s4vGx];
                    };
              };
        };

GHC.Int.$fNumInt16_$c*
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Int.Int16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vGy ds1_s4vGz]
        case ds_s4vGy of {
          GHC.Int.I16# x#_s4vGB [Occ=Once] ->
              case ds1_s4vGz of {
                GHC.Int.I16# y#_s4vGD [Occ=Once] ->
                    case *# [x#_s4vGB y#_s4vGD] of sat_s4vGE {
                      __DEFAULT ->
                          case narrow16Int# [sat_s4vGE] of sat_s4vGF {
                            __DEFAULT -> GHC.Int.I16# [sat_s4vGF];
                          };
                    };
              };
        };

GHC.Int.$fNumInt16_$c-
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Int.Int16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vGG ds1_s4vGH]
        case ds_s4vGG of {
          GHC.Int.I16# x#_s4vGJ [Occ=Once] ->
              case ds1_s4vGH of {
                GHC.Int.I16# y#_s4vGL [Occ=Once] ->
                    case -# [x#_s4vGJ y#_s4vGL] of sat_s4vGM {
                      __DEFAULT ->
                          case narrow16Int# [sat_s4vGM] of sat_s4vGN {
                            __DEFAULT -> GHC.Int.I16# [sat_s4vGN];
                          };
                    };
              };
        };

GHC.Int.$fNumInt16_$c+
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Int.Int16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vGO ds1_s4vGP]
        case ds_s4vGO of {
          GHC.Int.I16# x#_s4vGR [Occ=Once] ->
              case ds1_s4vGP of {
                GHC.Int.I16# y#_s4vGT [Occ=Once] ->
                    case +# [x#_s4vGR y#_s4vGT] of sat_s4vGU {
                      __DEFAULT ->
                          case narrow16Int# [sat_s4vGU] of sat_s4vGV {
                            __DEFAULT -> GHC.Int.I16# [sat_s4vGV];
                          };
                    };
              };
        };

GHC.Int.$fIntegralInt16_$ctoInteger
  :: GHC.Int.Int16 -> GHC.Integer.Type.Integer
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4vGW]
        case ds_s4vGW of {
          GHC.Int.I16# x#_s4vGY [Occ=Once] ->
              GHC.Integer.Type.smallInteger x#_s4vGY;
        };

GHC.Int.$fBitsInt16_$cpopCount :: GHC.Int.Int16 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vGZ]
        case ds_s4vGZ of {
          GHC.Int.I16# x#_s4vH1 [Occ=Once] ->
              case int2Word# [x#_s4vH1] of sat_s4vH2 {
                __DEFAULT ->
                    case popCnt16# [sat_s4vH2] of sat_s4vH3 {
                      __DEFAULT ->
                          case word2Int# [sat_s4vH3] of sat_s4vH4 {
                            __DEFAULT -> GHC.Types.I# [sat_s4vH4];
                          };
                    };
              };
        };

GHC.Int.$fBitsInt16_$cunsafeShiftR
  :: GHC.Int.Int16 -> GHC.Types.Int -> GHC.Int.Int16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vH5 ds1_s4vH6]
        case ds_s4vH5 of {
          GHC.Int.I16# x#_s4vH8 [Occ=Once] ->
              case ds1_s4vH6 of {
                GHC.Types.I# i#_s4vHa [Occ=Once] ->
                    case uncheckedIShiftRA# [x#_s4vH8 i#_s4vHa] of sat_s4vHb {
                      __DEFAULT -> GHC.Int.I16# [sat_s4vHb];
                    };
              };
        };

GHC.Int.$fBitsInt3 :: GHC.Int.Int16
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I16#! [0#];

GHC.Int.$fNumInt2 :: GHC.Int.Int16
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I16#! [-1#];

GHC.Int.$fBitsInt16_$cshiftR [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int16 -> GHC.Types.Int -> GHC.Int.Int16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4vHc w1_s4vHd]
        case w_s4vHc of {
          GHC.Int.I16# ww1_s4vHf [Occ=Once*] ->
              case w1_s4vHd of {
                GHC.Types.I# ww3_s4vHh ->
                    case >=# [ww3_s4vHh 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftRA# [ww1_s4vHf ww3_s4vHh] of sat_s4vHj {
                            __DEFAULT -> GHC.Int.I16# [sat_s4vHj];
                          };
                      1# ->
                          case <# [ww1_s4vHf 0#] of {
                            __DEFAULT -> GHC.Int.$fBitsInt3;
                            1# -> GHC.Int.$fNumInt2;
                          };
                    };
              };
        };

GHC.Int.$fBitsInt16_$cunsafeShiftL
  :: GHC.Int.Int16 -> GHC.Types.Int -> GHC.Int.Int16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vHl ds1_s4vHm]
        case ds_s4vHl of {
          GHC.Int.I16# x#_s4vHo [Occ=Once] ->
              case ds1_s4vHm of {
                GHC.Types.I# i#_s4vHq [Occ=Once] ->
                    case uncheckedIShiftL# [x#_s4vHo i#_s4vHq] of sat_s4vHr {
                      __DEFAULT ->
                          case narrow16Int# [sat_s4vHr] of sat_s4vHs {
                            __DEFAULT -> GHC.Int.I16# [sat_s4vHs];
                          };
                    };
              };
        };

GHC.Int.$fBitsInt16_$cshiftL
  :: GHC.Int.Int16 -> GHC.Types.Int -> GHC.Int.Int16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vHt ds1_s4vHu]
        case ds_s4vHt of {
          GHC.Int.I16# x#_s4vHw [Occ=Once] ->
              case ds1_s4vHu of {
                GHC.Types.I# i#_s4vHy ->
                    case >=# [i#_s4vHy 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftL# [x#_s4vHw i#_s4vHy] of sat_s4vHA {
                            __DEFAULT ->
                                case narrow16Int# [sat_s4vHA] of sat_s4vHB {
                                  __DEFAULT -> GHC.Int.I16# [sat_s4vHB];
                                };
                          };
                      1# -> GHC.Int.$fBitsInt3;
                    };
              };
        };

GHC.Int.$fBitsInt16_$cisSigned :: GHC.Int.Int16 -> GHC.Types.Bool
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>, Unf=OtherCon []] =
    [] \r [ds_s4vHC] GHC.Types.True [];

GHC.Int.$fBitsInt16_$crotate
  :: GHC.Int.Int16 -> GHC.Types.Int -> GHC.Int.Int16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vHD ds1_s4vHE]
        case ds_s4vHD of wild_s4vHF {
          GHC.Int.I16# x#_s4vHG [Occ=Once] ->
              case ds1_s4vHE of {
                GHC.Types.I# i#_s4vHI [Occ=Once] ->
                    case int2Word# [i#_s4vHI] of sat_s4vHJ {
                      __DEFAULT ->
                          case and# [sat_s4vHJ 15##] of sat_s4vHK {
                            __DEFAULT ->
                                case word2Int# [sat_s4vHK] of wild2_s4vHL {
                                  __DEFAULT ->
                                      case int2Word# [x#_s4vHG] of sat_s4vHN {
                                        __DEFAULT ->
                                            case
                                                narrow16Word# [sat_s4vHN]
                                            of
                                            x'#_s4vHM [Dmd=<S,U>]
                                            { __DEFAULT ->
                                                  case -# [16# wild2_s4vHL] of sat_s4vHP {
                                                    __DEFAULT ->
                                                        case
                                                            uncheckedShiftRL# [x'#_s4vHM sat_s4vHP]
                                                        of
                                                        sat_s4vHQ
                                                        { __DEFAULT ->
                                                              case
                                                                  uncheckedShiftL# [x'#_s4vHM
                                                                                    wild2_s4vHL]
                                                              of
                                                              sat_s4vHO
                                                              { __DEFAULT ->
                                                                    case
                                                                        or# [sat_s4vHO sat_s4vHQ]
                                                                    of
                                                                    sat_s4vHR
                                                                    { __DEFAULT ->
                                                                          case
                                                                              word2Int# [sat_s4vHR]
                                                                          of
                                                                          sat_s4vHS
                                                                          { __DEFAULT ->
                                                                                case
                                                                                    narrow16Int# [sat_s4vHS]
                                                                                of
                                                                                sat_s4vHT
                                                                                { __DEFAULT ->
                                                                                      GHC.Int.I16# [sat_s4vHT];
                                                                                };
                                                                          };
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                  0# -> wild_s4vHF;
                                };
                          };
                    };
              };
        };

GHC.Int.$fBitsInt16_$cshift [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int16 -> GHC.Types.Int -> GHC.Int.Int16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vHU ds1_s4vHV]
        case ds_s4vHU of {
          GHC.Int.I16# x#_s4vHX [Occ=Once*] ->
              case ds1_s4vHV of {
                GHC.Types.I# i#_s4vHZ ->
                    case >=# [i#_s4vHZ 0#] of {
                      __DEFAULT ->
                          case negateInt# [i#_s4vHZ] of b_s4vI1 [Dmd=<S,U>] {
                            __DEFAULT ->
                                case >=# [b_s4vI1 64#] of {
                                  __DEFAULT ->
                                      case uncheckedIShiftRA# [x#_s4vHX b_s4vI1] of sat_s4vI3 {
                                        __DEFAULT -> GHC.Int.I16# [sat_s4vI3];
                                      };
                                  1# ->
                                      case <# [x#_s4vHX 0#] of {
                                        __DEFAULT -> GHC.Int.$fBitsInt3;
                                        1# -> GHC.Int.$fNumInt2;
                                      };
                                };
                          };
                      1# ->
                          case >=# [i#_s4vHZ 64#] of {
                            __DEFAULT ->
                                case uncheckedIShiftL# [x#_s4vHX i#_s4vHZ] of sat_s4vI6 {
                                  __DEFAULT ->
                                      case narrow16Int# [sat_s4vI6] of sat_s4vI7 {
                                        __DEFAULT -> GHC.Int.I16# [sat_s4vI7];
                                      };
                                };
                            1# -> GHC.Int.$fBitsInt3;
                          };
                    };
              };
        };

GHC.Int.$fBitsInt16_$ccomplement :: GHC.Int.Int16 -> GHC.Int.Int16
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vI8]
        case ds_s4vI8 of {
          GHC.Int.I16# x#_s4vIa [Occ=Once] ->
              case int2Word# [x#_s4vIa] of sat_s4vIb {
                __DEFAULT ->
                    case not# [sat_s4vIb] of sat_s4vIc {
                      __DEFAULT ->
                          case word2Int# [sat_s4vIc] of sat_s4vId {
                            __DEFAULT -> GHC.Int.I16# [sat_s4vId];
                          };
                    };
              };
        };

GHC.Int.$fBitsInt16_$cxor
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Int.Int16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vIe ds1_s4vIf]
        case ds_s4vIe of {
          GHC.Int.I16# x#_s4vIh [Occ=Once] ->
              case ds1_s4vIf of {
                GHC.Int.I16# y#_s4vIj [Occ=Once] ->
                    case int2Word# [y#_s4vIj] of sat_s4vIl {
                      __DEFAULT ->
                          case int2Word# [x#_s4vIh] of sat_s4vIk {
                            __DEFAULT ->
                                case xor# [sat_s4vIk sat_s4vIl] of sat_s4vIm {
                                  __DEFAULT ->
                                      case word2Int# [sat_s4vIm] of sat_s4vIn {
                                        __DEFAULT -> GHC.Int.I16# [sat_s4vIn];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fBitsInt16_$c.|.
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Int.Int16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vIo ds1_s4vIp]
        case ds_s4vIo of {
          GHC.Int.I16# x#_s4vIr [Occ=Once] ->
              case ds1_s4vIp of {
                GHC.Int.I16# y#_s4vIt [Occ=Once] ->
                    case int2Word# [y#_s4vIt] of sat_s4vIv {
                      __DEFAULT ->
                          case int2Word# [x#_s4vIr] of sat_s4vIu {
                            __DEFAULT ->
                                case or# [sat_s4vIu sat_s4vIv] of sat_s4vIw {
                                  __DEFAULT ->
                                      case word2Int# [sat_s4vIw] of sat_s4vIx {
                                        __DEFAULT -> GHC.Int.I16# [sat_s4vIx];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fBitsInt16_$c.&.
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Int.Int16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vIy ds1_s4vIz]
        case ds_s4vIy of {
          GHC.Int.I16# x#_s4vIB [Occ=Once] ->
              case ds1_s4vIz of {
                GHC.Int.I16# y#_s4vID [Occ=Once] ->
                    case int2Word# [y#_s4vID] of sat_s4vIF {
                      __DEFAULT ->
                          case int2Word# [x#_s4vIB] of sat_s4vIE {
                            __DEFAULT ->
                                case and# [sat_s4vIE sat_s4vIF] of sat_s4vIG {
                                  __DEFAULT ->
                                      case word2Int# [sat_s4vIG] of sat_s4vIH {
                                        __DEFAULT -> GHC.Int.I16# [sat_s4vIH];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fFiniteBitsInt16_$ccountTrailingZeros
  :: GHC.Int.Int16 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vII]
        case ds_s4vII of {
          GHC.Int.I16# x#_s4vIK [Occ=Once] ->
              case int2Word# [x#_s4vIK] of sat_s4vIL {
                __DEFAULT ->
                    case ctz16# [sat_s4vIL] of sat_s4vIM {
                      __DEFAULT ->
                          case word2Int# [sat_s4vIM] of sat_s4vIN {
                            __DEFAULT -> GHC.Types.I# [sat_s4vIN];
                          };
                    };
              };
        };

GHC.Int.$fFiniteBitsInt16_$ccountLeadingZeros
  :: GHC.Int.Int16 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vIO]
        case ds_s4vIO of {
          GHC.Int.I16# x#_s4vIQ [Occ=Once] ->
              case int2Word# [x#_s4vIQ] of sat_s4vIR {
                __DEFAULT ->
                    case clz16# [sat_s4vIR] of sat_s4vIS {
                      __DEFAULT ->
                          case word2Int# [sat_s4vIS] of sat_s4vIT {
                            __DEFAULT -> GHC.Types.I# [sat_s4vIT];
                          };
                    };
              };
        };

GHC.Int.$fBitsInt1 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [16#];

GHC.Int.$fBitsInt16_$cfiniteBitSize
  :: GHC.Int.Int16 -> GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>m, Unf=OtherCon []] =
    [] \r [ds_s4vIU] GHC.Int.$fBitsInt1;

GHC.Int.$fNumInt32_$cfromInteger
  :: GHC.Integer.Type.Integer -> GHC.Int.Int32
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [i_s4vIV]
        case GHC.Integer.Type.integerToInt i_s4vIV of wild_s4vIW {
          __DEFAULT ->
              case narrow32Int# [wild_s4vIW] of sat_s4vIX {
                __DEFAULT -> GHC.Int.I32# [sat_s4vIX];
              };
        };

GHC.Int.$fNumInt32_$cnegate :: GHC.Int.Int32 -> GHC.Int.Int32
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vIY]
        case ds_s4vIY of {
          GHC.Int.I32# x#_s4vJ0 [Occ=Once] ->
              case negateInt# [x#_s4vJ0] of sat_s4vJ1 {
                __DEFAULT ->
                    case narrow32Int# [sat_s4vJ1] of sat_s4vJ2 {
                      __DEFAULT -> GHC.Int.I32# [sat_s4vJ2];
                    };
              };
        };

GHC.Int.$fNumInt32_$c*
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> GHC.Int.Int32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vJ3 ds1_s4vJ4]
        case ds_s4vJ3 of {
          GHC.Int.I32# x#_s4vJ6 [Occ=Once] ->
              case ds1_s4vJ4 of {
                GHC.Int.I32# y#_s4vJ8 [Occ=Once] ->
                    case *# [x#_s4vJ6 y#_s4vJ8] of sat_s4vJ9 {
                      __DEFAULT ->
                          case narrow32Int# [sat_s4vJ9] of sat_s4vJa {
                            __DEFAULT -> GHC.Int.I32# [sat_s4vJa];
                          };
                    };
              };
        };

GHC.Int.$fNumInt32_$c-
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> GHC.Int.Int32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vJb ds1_s4vJc]
        case ds_s4vJb of {
          GHC.Int.I32# x#_s4vJe [Occ=Once] ->
              case ds1_s4vJc of {
                GHC.Int.I32# y#_s4vJg [Occ=Once] ->
                    case -# [x#_s4vJe y#_s4vJg] of sat_s4vJh {
                      __DEFAULT ->
                          case narrow32Int# [sat_s4vJh] of sat_s4vJi {
                            __DEFAULT -> GHC.Int.I32# [sat_s4vJi];
                          };
                    };
              };
        };

GHC.Int.$fNumInt32_$c+
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> GHC.Int.Int32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vJj ds1_s4vJk]
        case ds_s4vJj of {
          GHC.Int.I32# x#_s4vJm [Occ=Once] ->
              case ds1_s4vJk of {
                GHC.Int.I32# y#_s4vJo [Occ=Once] ->
                    case +# [x#_s4vJm y#_s4vJo] of sat_s4vJp {
                      __DEFAULT ->
                          case narrow32Int# [sat_s4vJp] of sat_s4vJq {
                            __DEFAULT -> GHC.Int.I32# [sat_s4vJq];
                          };
                    };
              };
        };

GHC.Int.$fIntegralInt32_$ctoInteger
  :: GHC.Int.Int32 -> GHC.Integer.Type.Integer
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4vJr]
        case ds_s4vJr of {
          GHC.Int.I32# x#_s4vJt [Occ=Once] ->
              GHC.Integer.Type.smallInteger x#_s4vJt;
        };

GHC.Int.$fBitsInt32_$cpopCount :: GHC.Int.Int32 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vJu]
        case ds_s4vJu of {
          GHC.Int.I32# x#_s4vJw [Occ=Once] ->
              case int2Word# [x#_s4vJw] of sat_s4vJx {
                __DEFAULT ->
                    case popCnt32# [sat_s4vJx] of sat_s4vJy {
                      __DEFAULT ->
                          case word2Int# [sat_s4vJy] of sat_s4vJz {
                            __DEFAULT -> GHC.Types.I# [sat_s4vJz];
                          };
                    };
              };
        };

GHC.Int.$fBitsInt32_$cunsafeShiftR
  :: GHC.Int.Int32 -> GHC.Types.Int -> GHC.Int.Int32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vJA ds1_s4vJB]
        case ds_s4vJA of {
          GHC.Int.I32# x#_s4vJD [Occ=Once] ->
              case ds1_s4vJB of {
                GHC.Types.I# i#_s4vJF [Occ=Once] ->
                    case uncheckedIShiftRA# [x#_s4vJD i#_s4vJF] of sat_s4vJG {
                      __DEFAULT -> GHC.Int.I32# [sat_s4vJG];
                    };
              };
        };

GHC.Int.$fBitsInt6 :: GHC.Int.Int32
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I32#! [0#];

GHC.Int.$fNumInt4 :: GHC.Int.Int32
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I32#! [-1#];

GHC.Int.$fBitsInt32_$cshiftR [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int32 -> GHC.Types.Int -> GHC.Int.Int32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4vJH w1_s4vJI]
        case w_s4vJH of {
          GHC.Int.I32# ww1_s4vJK [Occ=Once*] ->
              case w1_s4vJI of {
                GHC.Types.I# ww3_s4vJM ->
                    case >=# [ww3_s4vJM 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftRA# [ww1_s4vJK ww3_s4vJM] of sat_s4vJO {
                            __DEFAULT -> GHC.Int.I32# [sat_s4vJO];
                          };
                      1# ->
                          case <# [ww1_s4vJK 0#] of {
                            __DEFAULT -> GHC.Int.$fBitsInt6;
                            1# -> GHC.Int.$fNumInt4;
                          };
                    };
              };
        };

GHC.Int.$fBitsInt32_$cunsafeShiftL
  :: GHC.Int.Int32 -> GHC.Types.Int -> GHC.Int.Int32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vJQ ds1_s4vJR]
        case ds_s4vJQ of {
          GHC.Int.I32# x#_s4vJT [Occ=Once] ->
              case ds1_s4vJR of {
                GHC.Types.I# i#_s4vJV [Occ=Once] ->
                    case uncheckedIShiftL# [x#_s4vJT i#_s4vJV] of sat_s4vJW {
                      __DEFAULT ->
                          case narrow32Int# [sat_s4vJW] of sat_s4vJX {
                            __DEFAULT -> GHC.Int.I32# [sat_s4vJX];
                          };
                    };
              };
        };

GHC.Int.$fBitsInt32_$cshiftL
  :: GHC.Int.Int32 -> GHC.Types.Int -> GHC.Int.Int32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vJY ds1_s4vJZ]
        case ds_s4vJY of {
          GHC.Int.I32# x#_s4vK1 [Occ=Once] ->
              case ds1_s4vJZ of {
                GHC.Types.I# i#_s4vK3 ->
                    case >=# [i#_s4vK3 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftL# [x#_s4vK1 i#_s4vK3] of sat_s4vK5 {
                            __DEFAULT ->
                                case narrow32Int# [sat_s4vK5] of sat_s4vK6 {
                                  __DEFAULT -> GHC.Int.I32# [sat_s4vK6];
                                };
                          };
                      1# -> GHC.Int.$fBitsInt6;
                    };
              };
        };

GHC.Int.$fBitsInt32_$cisSigned :: GHC.Int.Int32 -> GHC.Types.Bool
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>, Unf=OtherCon []] =
    [] \r [ds_s4vK7] GHC.Types.True [];

GHC.Int.$fBitsInt32_$crotate
  :: GHC.Int.Int32 -> GHC.Types.Int -> GHC.Int.Int32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vK8 ds1_s4vK9]
        case ds_s4vK8 of wild_s4vKa {
          GHC.Int.I32# x#_s4vKb [Occ=Once] ->
              case ds1_s4vK9 of {
                GHC.Types.I# i#_s4vKd [Occ=Once] ->
                    case int2Word# [i#_s4vKd] of sat_s4vKe {
                      __DEFAULT ->
                          case and# [sat_s4vKe 31##] of sat_s4vKf {
                            __DEFAULT ->
                                case word2Int# [sat_s4vKf] of wild2_s4vKg {
                                  __DEFAULT ->
                                      case int2Word# [x#_s4vKb] of sat_s4vKi {
                                        __DEFAULT ->
                                            case
                                                narrow32Word# [sat_s4vKi]
                                            of
                                            x'#_s4vKh [Dmd=<S,U>]
                                            { __DEFAULT ->
                                                  case -# [32# wild2_s4vKg] of sat_s4vKk {
                                                    __DEFAULT ->
                                                        case
                                                            uncheckedShiftRL# [x'#_s4vKh sat_s4vKk]
                                                        of
                                                        sat_s4vKl
                                                        { __DEFAULT ->
                                                              case
                                                                  uncheckedShiftL# [x'#_s4vKh
                                                                                    wild2_s4vKg]
                                                              of
                                                              sat_s4vKj
                                                              { __DEFAULT ->
                                                                    case
                                                                        or# [sat_s4vKj sat_s4vKl]
                                                                    of
                                                                    sat_s4vKm
                                                                    { __DEFAULT ->
                                                                          case
                                                                              word2Int# [sat_s4vKm]
                                                                          of
                                                                          sat_s4vKn
                                                                          { __DEFAULT ->
                                                                                case
                                                                                    narrow32Int# [sat_s4vKn]
                                                                                of
                                                                                sat_s4vKo
                                                                                { __DEFAULT ->
                                                                                      GHC.Int.I32# [sat_s4vKo];
                                                                                };
                                                                          };
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                  0# -> wild_s4vKa;
                                };
                          };
                    };
              };
        };

GHC.Int.$fBitsInt32_$cshift [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int32 -> GHC.Types.Int -> GHC.Int.Int32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vKp ds1_s4vKq]
        case ds_s4vKp of {
          GHC.Int.I32# x#_s4vKs [Occ=Once*] ->
              case ds1_s4vKq of {
                GHC.Types.I# i#_s4vKu ->
                    case >=# [i#_s4vKu 0#] of {
                      __DEFAULT ->
                          case negateInt# [i#_s4vKu] of b_s4vKw [Dmd=<S,U>] {
                            __DEFAULT ->
                                case >=# [b_s4vKw 64#] of {
                                  __DEFAULT ->
                                      case uncheckedIShiftRA# [x#_s4vKs b_s4vKw] of sat_s4vKy {
                                        __DEFAULT -> GHC.Int.I32# [sat_s4vKy];
                                      };
                                  1# ->
                                      case <# [x#_s4vKs 0#] of {
                                        __DEFAULT -> GHC.Int.$fBitsInt6;
                                        1# -> GHC.Int.$fNumInt4;
                                      };
                                };
                          };
                      1# ->
                          case >=# [i#_s4vKu 64#] of {
                            __DEFAULT ->
                                case uncheckedIShiftL# [x#_s4vKs i#_s4vKu] of sat_s4vKB {
                                  __DEFAULT ->
                                      case narrow32Int# [sat_s4vKB] of sat_s4vKC {
                                        __DEFAULT -> GHC.Int.I32# [sat_s4vKC];
                                      };
                                };
                            1# -> GHC.Int.$fBitsInt6;
                          };
                    };
              };
        };

GHC.Int.$fBitsInt32_$ccomplement :: GHC.Int.Int32 -> GHC.Int.Int32
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vKD]
        case ds_s4vKD of {
          GHC.Int.I32# x#_s4vKF [Occ=Once] ->
              case int2Word# [x#_s4vKF] of sat_s4vKG {
                __DEFAULT ->
                    case not# [sat_s4vKG] of sat_s4vKH {
                      __DEFAULT ->
                          case word2Int# [sat_s4vKH] of sat_s4vKI {
                            __DEFAULT -> GHC.Int.I32# [sat_s4vKI];
                          };
                    };
              };
        };

GHC.Int.$fBitsInt32_$cxor
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> GHC.Int.Int32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vKJ ds1_s4vKK]
        case ds_s4vKJ of {
          GHC.Int.I32# x#_s4vKM [Occ=Once] ->
              case ds1_s4vKK of {
                GHC.Int.I32# y#_s4vKO [Occ=Once] ->
                    case int2Word# [y#_s4vKO] of sat_s4vKQ {
                      __DEFAULT ->
                          case int2Word# [x#_s4vKM] of sat_s4vKP {
                            __DEFAULT ->
                                case xor# [sat_s4vKP sat_s4vKQ] of sat_s4vKR {
                                  __DEFAULT ->
                                      case word2Int# [sat_s4vKR] of sat_s4vKS {
                                        __DEFAULT -> GHC.Int.I32# [sat_s4vKS];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fBitsInt32_$c.|.
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> GHC.Int.Int32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vKT ds1_s4vKU]
        case ds_s4vKT of {
          GHC.Int.I32# x#_s4vKW [Occ=Once] ->
              case ds1_s4vKU of {
                GHC.Int.I32# y#_s4vKY [Occ=Once] ->
                    case int2Word# [y#_s4vKY] of sat_s4vL0 {
                      __DEFAULT ->
                          case int2Word# [x#_s4vKW] of sat_s4vKZ {
                            __DEFAULT ->
                                case or# [sat_s4vKZ sat_s4vL0] of sat_s4vL1 {
                                  __DEFAULT ->
                                      case word2Int# [sat_s4vL1] of sat_s4vL2 {
                                        __DEFAULT -> GHC.Int.I32# [sat_s4vL2];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fBitsInt32_$c.&.
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> GHC.Int.Int32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vL3 ds1_s4vL4]
        case ds_s4vL3 of {
          GHC.Int.I32# x#_s4vL6 [Occ=Once] ->
              case ds1_s4vL4 of {
                GHC.Int.I32# y#_s4vL8 [Occ=Once] ->
                    case int2Word# [y#_s4vL8] of sat_s4vLa {
                      __DEFAULT ->
                          case int2Word# [x#_s4vL6] of sat_s4vL9 {
                            __DEFAULT ->
                                case and# [sat_s4vL9 sat_s4vLa] of sat_s4vLb {
                                  __DEFAULT ->
                                      case word2Int# [sat_s4vLb] of sat_s4vLc {
                                        __DEFAULT -> GHC.Int.I32# [sat_s4vLc];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fFiniteBitsInt32_$ccountTrailingZeros
  :: GHC.Int.Int32 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vLd]
        case ds_s4vLd of {
          GHC.Int.I32# x#_s4vLf [Occ=Once] ->
              case int2Word# [x#_s4vLf] of sat_s4vLg {
                __DEFAULT ->
                    case ctz32# [sat_s4vLg] of sat_s4vLh {
                      __DEFAULT ->
                          case word2Int# [sat_s4vLh] of sat_s4vLi {
                            __DEFAULT -> GHC.Types.I# [sat_s4vLi];
                          };
                    };
              };
        };

GHC.Int.$fFiniteBitsInt32_$ccountLeadingZeros
  :: GHC.Int.Int32 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vLj]
        case ds_s4vLj of {
          GHC.Int.I32# x#_s4vLl [Occ=Once] ->
              case int2Word# [x#_s4vLl] of sat_s4vLm {
                __DEFAULT ->
                    case clz32# [sat_s4vLm] of sat_s4vLn {
                      __DEFAULT ->
                          case word2Int# [sat_s4vLn] of sat_s4vLo {
                            __DEFAULT -> GHC.Types.I# [sat_s4vLo];
                          };
                    };
              };
        };

GHC.Int.$fBitsInt4 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [32#];

GHC.Int.$fBitsInt32_$cfiniteBitSize
  :: GHC.Int.Int32 -> GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>m, Unf=OtherCon []] =
    [] \r [ds_s4vLp] GHC.Int.$fBitsInt4;

GHC.Int.$fNumInt64_$cfromInteger
  :: GHC.Integer.Type.Integer -> GHC.Int.Int64
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [i_s4vLq]
        case GHC.Integer.Type.integerToInt i_s4vLq of wild_s4vLr {
          __DEFAULT -> GHC.Int.I64# [wild_s4vLr];
        };

GHC.Int.$fNumInt64_$cnegate :: GHC.Int.Int64 -> GHC.Int.Int64
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vLs]
        case ds_s4vLs of {
          GHC.Int.I64# x#_s4vLu [Occ=Once] ->
              case negateInt# [x#_s4vLu] of sat_s4vLv {
                __DEFAULT -> GHC.Int.I64# [sat_s4vLv];
              };
        };

GHC.Int.$fNumInt64_$c*
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> GHC.Int.Int64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vLw ds1_s4vLx]
        case ds_s4vLw of {
          GHC.Int.I64# x#_s4vLz [Occ=Once] ->
              case ds1_s4vLx of {
                GHC.Int.I64# y#_s4vLB [Occ=Once] ->
                    case *# [x#_s4vLz y#_s4vLB] of sat_s4vLC {
                      __DEFAULT -> GHC.Int.I64# [sat_s4vLC];
                    };
              };
        };

GHC.Int.$fNumInt64_$c-
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> GHC.Int.Int64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vLD ds1_s4vLE]
        case ds_s4vLD of {
          GHC.Int.I64# x#_s4vLG [Occ=Once] ->
              case ds1_s4vLE of {
                GHC.Int.I64# y#_s4vLI [Occ=Once] ->
                    case -# [x#_s4vLG y#_s4vLI] of sat_s4vLJ {
                      __DEFAULT -> GHC.Int.I64# [sat_s4vLJ];
                    };
              };
        };

GHC.Int.$fNumInt64_$c+
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> GHC.Int.Int64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vLK ds1_s4vLL]
        case ds_s4vLK of {
          GHC.Int.I64# x#_s4vLN [Occ=Once] ->
              case ds1_s4vLL of {
                GHC.Int.I64# y#_s4vLP [Occ=Once] ->
                    case +# [x#_s4vLN y#_s4vLP] of sat_s4vLQ {
                      __DEFAULT -> GHC.Int.I64# [sat_s4vLQ];
                    };
              };
        };

GHC.Int.$fIntegralInt64_$ctoInteger
  :: GHC.Int.Int64 -> GHC.Integer.Type.Integer
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4vLR]
        case ds_s4vLR of {
          GHC.Int.I64# x#_s4vLT [Occ=Once] ->
              GHC.Integer.Type.smallInteger x#_s4vLT;
        };

GHC.Int.$fBitsInt64_$cpopCount :: GHC.Int.Int64 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vLU]
        case ds_s4vLU of {
          GHC.Int.I64# x#_s4vLW [Occ=Once] ->
              case int2Word# [x#_s4vLW] of sat_s4vLX {
                __DEFAULT ->
                    case popCnt64# [sat_s4vLX] of sat_s4vLY {
                      __DEFAULT ->
                          case word2Int# [sat_s4vLY] of sat_s4vLZ {
                            __DEFAULT -> GHC.Types.I# [sat_s4vLZ];
                          };
                    };
              };
        };

GHC.Int.$fBitsInt64_$cunsafeShiftR
  :: GHC.Int.Int64 -> GHC.Types.Int -> GHC.Int.Int64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vM0 ds1_s4vM1]
        case ds_s4vM0 of {
          GHC.Int.I64# x#_s4vM3 [Occ=Once] ->
              case ds1_s4vM1 of {
                GHC.Types.I# i#_s4vM5 [Occ=Once] ->
                    case uncheckedIShiftRA# [x#_s4vM3 i#_s4vM5] of sat_s4vM6 {
                      __DEFAULT -> GHC.Int.I64# [sat_s4vM6];
                    };
              };
        };

GHC.Int.$fBitsInt10 :: GHC.Int.Int64
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I64#! [0#];

GHC.Int.$fNumInt6 :: GHC.Int.Int64
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I64#! [-1#];

GHC.Int.$fBitsInt64_$cshiftR [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int64 -> GHC.Types.Int -> GHC.Int.Int64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4vM7 w1_s4vM8]
        case w_s4vM7 of {
          GHC.Int.I64# ww1_s4vMa [Occ=Once*] ->
              case w1_s4vM8 of {
                GHC.Types.I# ww3_s4vMc ->
                    case >=# [ww3_s4vMc 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftRA# [ww1_s4vMa ww3_s4vMc] of sat_s4vMe {
                            __DEFAULT -> GHC.Int.I64# [sat_s4vMe];
                          };
                      1# ->
                          case <# [ww1_s4vMa 0#] of {
                            __DEFAULT -> GHC.Int.$fBitsInt10;
                            1# -> GHC.Int.$fNumInt6;
                          };
                    };
              };
        };

GHC.Int.$fBitsInt64_$cunsafeShiftL
  :: GHC.Int.Int64 -> GHC.Types.Int -> GHC.Int.Int64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vMg ds1_s4vMh]
        case ds_s4vMg of {
          GHC.Int.I64# x#_s4vMj [Occ=Once] ->
              case ds1_s4vMh of {
                GHC.Types.I# i#_s4vMl [Occ=Once] ->
                    case uncheckedIShiftL# [x#_s4vMj i#_s4vMl] of sat_s4vMm {
                      __DEFAULT -> GHC.Int.I64# [sat_s4vMm];
                    };
              };
        };

GHC.Int.$fBitsInt64_$cshiftL
  :: GHC.Int.Int64 -> GHC.Types.Int -> GHC.Int.Int64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vMn ds1_s4vMo]
        case ds_s4vMn of {
          GHC.Int.I64# x#_s4vMq [Occ=Once] ->
              case ds1_s4vMo of {
                GHC.Types.I# i#_s4vMs ->
                    case >=# [i#_s4vMs 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftL# [x#_s4vMq i#_s4vMs] of sat_s4vMu {
                            __DEFAULT -> GHC.Int.I64# [sat_s4vMu];
                          };
                      1# -> GHC.Int.$fBitsInt10;
                    };
              };
        };

GHC.Int.$fBitsInt64_$cisSigned :: GHC.Int.Int64 -> GHC.Types.Bool
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>, Unf=OtherCon []] =
    [] \r [ds_s4vMv] GHC.Types.True [];

GHC.Int.$fBitsInt64_$crotate
  :: GHC.Int.Int64 -> GHC.Types.Int -> GHC.Int.Int64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vMw ds1_s4vMx]
        case ds_s4vMw of wild_s4vMy {
          GHC.Int.I64# x#_s4vMz [Occ=Once] ->
              case ds1_s4vMx of {
                GHC.Types.I# i#_s4vMB [Occ=Once] ->
                    case int2Word# [i#_s4vMB] of sat_s4vMC {
                      __DEFAULT ->
                          case and# [sat_s4vMC 63##] of sat_s4vMD {
                            __DEFAULT ->
                                case word2Int# [sat_s4vMD] of wild2_s4vME {
                                  __DEFAULT ->
                                      case int2Word# [x#_s4vMz] of x'#_s4vMF [Dmd=<S,U>] {
                                        __DEFAULT ->
                                            case -# [64# wild2_s4vME] of sat_s4vMH {
                                              __DEFAULT ->
                                                  case
                                                      uncheckedShiftRL# [x'#_s4vMF sat_s4vMH]
                                                  of
                                                  sat_s4vMI
                                                  { __DEFAULT ->
                                                        case
                                                            uncheckedShiftL# [x'#_s4vMF wild2_s4vME]
                                                        of
                                                        sat_s4vMG
                                                        { __DEFAULT ->
                                                              case
                                                                  or# [sat_s4vMG sat_s4vMI]
                                                              of
                                                              sat_s4vMJ
                                                              { __DEFAULT ->
                                                                    case
                                                                        word2Int# [sat_s4vMJ]
                                                                    of
                                                                    sat_s4vMK
                                                                    { __DEFAULT ->
                                                                          GHC.Int.I64# [sat_s4vMK];
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                  0# -> wild_s4vMy;
                                };
                          };
                    };
              };
        };

GHC.Int.$fBitsInt64_$cshift [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int64 -> GHC.Types.Int -> GHC.Int.Int64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vML ds1_s4vMM]
        case ds_s4vML of {
          GHC.Int.I64# x#_s4vMO [Occ=Once*] ->
              case ds1_s4vMM of {
                GHC.Types.I# i#_s4vMQ ->
                    case >=# [i#_s4vMQ 0#] of {
                      __DEFAULT ->
                          case negateInt# [i#_s4vMQ] of b_s4vMS [Dmd=<S,U>] {
                            __DEFAULT ->
                                case >=# [b_s4vMS 64#] of {
                                  __DEFAULT ->
                                      case uncheckedIShiftRA# [x#_s4vMO b_s4vMS] of sat_s4vMU {
                                        __DEFAULT -> GHC.Int.I64# [sat_s4vMU];
                                      };
                                  1# ->
                                      case <# [x#_s4vMO 0#] of {
                                        __DEFAULT -> GHC.Int.$fBitsInt10;
                                        1# -> GHC.Int.$fNumInt6;
                                      };
                                };
                          };
                      1# ->
                          case >=# [i#_s4vMQ 64#] of {
                            __DEFAULT ->
                                case uncheckedIShiftL# [x#_s4vMO i#_s4vMQ] of sat_s4vMX {
                                  __DEFAULT -> GHC.Int.I64# [sat_s4vMX];
                                };
                            1# -> GHC.Int.$fBitsInt10;
                          };
                    };
              };
        };

GHC.Int.$fBitsInt64_$ccomplement :: GHC.Int.Int64 -> GHC.Int.Int64
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vMY]
        case ds_s4vMY of {
          GHC.Int.I64# x#_s4vN0 [Occ=Once] ->
              case int2Word# [x#_s4vN0] of sat_s4vN1 {
                __DEFAULT ->
                    case xor# [sat_s4vN1 18446744073709551615##] of sat_s4vN2 {
                      __DEFAULT ->
                          case word2Int# [sat_s4vN2] of sat_s4vN3 {
                            __DEFAULT -> GHC.Int.I64# [sat_s4vN3];
                          };
                    };
              };
        };

GHC.Int.$fBitsInt64_$cxor
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> GHC.Int.Int64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vN4 ds1_s4vN5]
        case ds_s4vN4 of {
          GHC.Int.I64# x#_s4vN7 [Occ=Once] ->
              case ds1_s4vN5 of {
                GHC.Int.I64# y#_s4vN9 [Occ=Once] ->
                    case int2Word# [y#_s4vN9] of sat_s4vNb {
                      __DEFAULT ->
                          case int2Word# [x#_s4vN7] of sat_s4vNa {
                            __DEFAULT ->
                                case xor# [sat_s4vNa sat_s4vNb] of sat_s4vNc {
                                  __DEFAULT ->
                                      case word2Int# [sat_s4vNc] of sat_s4vNd {
                                        __DEFAULT -> GHC.Int.I64# [sat_s4vNd];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fBitsInt64_$c.|.
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> GHC.Int.Int64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vNe ds1_s4vNf]
        case ds_s4vNe of {
          GHC.Int.I64# x#_s4vNh [Occ=Once] ->
              case ds1_s4vNf of {
                GHC.Int.I64# y#_s4vNj [Occ=Once] ->
                    case int2Word# [y#_s4vNj] of sat_s4vNl {
                      __DEFAULT ->
                          case int2Word# [x#_s4vNh] of sat_s4vNk {
                            __DEFAULT ->
                                case or# [sat_s4vNk sat_s4vNl] of sat_s4vNm {
                                  __DEFAULT ->
                                      case word2Int# [sat_s4vNm] of sat_s4vNn {
                                        __DEFAULT -> GHC.Int.I64# [sat_s4vNn];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fBitsInt64_$c.&.
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> GHC.Int.Int64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vNo ds1_s4vNp]
        case ds_s4vNo of {
          GHC.Int.I64# x#_s4vNr [Occ=Once] ->
              case ds1_s4vNp of {
                GHC.Int.I64# y#_s4vNt [Occ=Once] ->
                    case int2Word# [y#_s4vNt] of sat_s4vNv {
                      __DEFAULT ->
                          case int2Word# [x#_s4vNr] of sat_s4vNu {
                            __DEFAULT ->
                                case and# [sat_s4vNu sat_s4vNv] of sat_s4vNw {
                                  __DEFAULT ->
                                      case word2Int# [sat_s4vNw] of sat_s4vNx {
                                        __DEFAULT -> GHC.Int.I64# [sat_s4vNx];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fFiniteBitsInt64_$ccountTrailingZeros
  :: GHC.Int.Int64 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vNy]
        case ds_s4vNy of {
          GHC.Int.I64# x#_s4vNA [Occ=Once] ->
              case int2Word# [x#_s4vNA] of sat_s4vNB {
                __DEFAULT ->
                    case ctz64# [sat_s4vNB] of sat_s4vNC {
                      __DEFAULT ->
                          case word2Int# [sat_s4vNC] of sat_s4vND {
                            __DEFAULT -> GHC.Types.I# [sat_s4vND];
                          };
                    };
              };
        };

GHC.Int.$fFiniteBitsInt64_$ccountLeadingZeros
  :: GHC.Int.Int64 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vNE]
        case ds_s4vNE of {
          GHC.Int.I64# x#_s4vNG [Occ=Once] ->
              case int2Word# [x#_s4vNG] of sat_s4vNH {
                __DEFAULT ->
                    case clz64# [sat_s4vNH] of sat_s4vNI {
                      __DEFAULT ->
                          case word2Int# [sat_s4vNI] of sat_s4vNJ {
                            __DEFAULT -> GHC.Types.I# [sat_s4vNJ];
                          };
                    };
              };
        };

GHC.Int.$fBitsInt7 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [64#];

GHC.Int.$fBitsInt64_$cfiniteBitSize
  :: GHC.Int.Int64 -> GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>m, Unf=OtherCon []] =
    [] \r [ds_s4vNK] GHC.Int.$fBitsInt7;

GHC.Int.eqInt8 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4vNL ds1_s4vNM]
        case ds_s4vNL of {
          GHC.Int.I8# x_s4vNO [Occ=Once] ->
              case ds1_s4vNM of {
                GHC.Int.I8# y_s4vNQ [Occ=Once] ->
                    case ==# [x_s4vNO y_s4vNQ] of sat_s4vNR {
                      __DEFAULT -> tagToEnum# [sat_s4vNR];
                    };
              };
        };

GHC.Int.$fEqInt8 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.Int.Int8
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.Int.eqInt8 GHC.Int.neInt8];

GHC.Int.gtInt8 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4vNS ds1_s4vNT]
        case ds_s4vNS of {
          GHC.Int.I8# x_s4vNV [Occ=Once] ->
              case ds1_s4vNT of {
                GHC.Int.I8# y_s4vNX [Occ=Once] ->
                    case ># [x_s4vNV y_s4vNX] of sat_s4vNY {
                      __DEFAULT -> tagToEnum# [sat_s4vNY];
                    };
              };
        };

GHC.Int.geInt8 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4vNZ ds1_s4vO0]
        case ds_s4vNZ of {
          GHC.Int.I8# x_s4vO2 [Occ=Once] ->
              case ds1_s4vO0 of {
                GHC.Int.I8# y_s4vO4 [Occ=Once] ->
                    case >=# [x_s4vO2 y_s4vO4] of sat_s4vO5 {
                      __DEFAULT -> tagToEnum# [sat_s4vO5];
                    };
              };
        };

GHC.Int.ltInt8 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4vO6 ds1_s4vO7]
        case ds_s4vO6 of {
          GHC.Int.I8# x_s4vO9 [Occ=Once] ->
              case ds1_s4vO7 of {
                GHC.Int.I8# y_s4vOb [Occ=Once] ->
                    case <# [x_s4vO9 y_s4vOb] of sat_s4vOc {
                      __DEFAULT -> tagToEnum# [sat_s4vOc];
                    };
              };
        };

GHC.Int.leInt8 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4vOd ds1_s4vOe]
        case ds_s4vOd of {
          GHC.Int.I8# x_s4vOg [Occ=Once] ->
              case ds1_s4vOe of {
                GHC.Int.I8# y_s4vOi [Occ=Once] ->
                    case <=# [x_s4vOg y_s4vOi] of sat_s4vOj {
                      __DEFAULT -> tagToEnum# [sat_s4vOj];
                    };
              };
        };

GHC.Int.$fOrdInt8_$ccompare
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [x_s4vOk y_s4vOl]
        case x_s4vOk of {
          GHC.Int.I8# x1_s4vOn ->
              case y_s4vOl of {
                GHC.Int.I8# y1_s4vOp ->
                    case ==# [x1_s4vOn y1_s4vOp] of {
                      __DEFAULT ->
                          case <=# [x1_s4vOn y1_s4vOp] of {
                            __DEFAULT -> GHC.Types.GT [];
                            1# -> GHC.Types.LT [];
                          };
                      1# -> GHC.Types.EQ [];
                    };
              };
        };

GHC.Int.$fOrdInt8_$cmax
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> GHC.Int.Int8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s4vOs y_s4vOt]
        case x_s4vOs of wild_s4vOu {
          GHC.Int.I8# x1_s4vOv [Occ=Once] ->
              case y_s4vOt of wild1_s4vOw {
                GHC.Int.I8# y1_s4vOx [Occ=Once] ->
                    case <=# [x1_s4vOv y1_s4vOx] of {
                      __DEFAULT -> wild_s4vOu;
                      1# -> wild1_s4vOw;
                    };
              };
        };

GHC.Int.$fOrdInt8_$cmin
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> GHC.Int.Int8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s4vOz y_s4vOA]
        case x_s4vOz of wild_s4vOB {
          GHC.Int.I8# x1_s4vOC [Occ=Once] ->
              case y_s4vOA of wild1_s4vOD {
                GHC.Int.I8# y1_s4vOE [Occ=Once] ->
                    case <=# [x1_s4vOC y1_s4vOE] of {
                      __DEFAULT -> wild1_s4vOD;
                      1# -> wild_s4vOB;
                    };
              };
        };

GHC.Int.$fOrdInt8 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord GHC.Int.Int8
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.Int.$fEqInt8
                                      GHC.Int.$fOrdInt8_$ccompare
                                      GHC.Int.ltInt8
                                      GHC.Int.leInt8
                                      GHC.Int.gtInt8
                                      GHC.Int.geInt8
                                      GHC.Int.$fOrdInt8_$cmax
                                      GHC.Int.$fOrdInt8_$cmin];

GHC.Int.$fIxInt8_$cinRange
  :: (GHC.Int.Int8, GHC.Int.Int8) -> GHC.Int.Int8 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S(S)L),1*U(1*U(U),1*U(U))><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4vOG i_s4vOH]
        case ds_s4vOG of {
          (,) m_s4vOJ [Occ=Once!] n_s4vOK [Occ=Once!] ->
              case m_s4vOJ of {
                GHC.Int.I8# x_s4vOM [Occ=Once] ->
                    case i_s4vOH of {
                      GHC.Int.I8# y_s4vOO ->
                          case <=# [x_s4vOM y_s4vOO] of {
                            __DEFAULT -> GHC.Types.False [];
                            1# ->
                                case n_s4vOK of {
                                  GHC.Int.I8# y1_s4vOR [Occ=Once] ->
                                      case <=# [y_s4vOO y1_s4vOR] of sat_s4vOS {
                                        __DEFAULT -> tagToEnum# [sat_s4vOS];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fNumInt7 :: GHC.Int.Int8
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I8#! [1#];

GHC.Int.$fNumInt8_$csignum :: GHC.Int.Int8 -> GHC.Int.Int8
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s4vOT]
        case x_s4vOT of {
          GHC.Int.I8# x1_s4vOV ->
              case ># [x1_s4vOV 0#] of {
                __DEFAULT ->
                    case x1_s4vOV of {
                      __DEFAULT -> GHC.Int.$fNumInt9;
                      0# -> GHC.Int.$fBitsInt13;
                    };
                1# -> GHC.Int.$fNumInt7;
              };
        };

GHC.Int.$fNumInt8_$cabs :: GHC.Int.Int8 -> GHC.Int.Int8
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s4vOY]
        case x_s4vOY of wild_s4vOZ {
          GHC.Int.I8# x1_s4vP0 ->
              case >=# [x1_s4vP0 0#] of {
                __DEFAULT ->
                    case negateInt# [x1_s4vP0] of sat_s4vP2 {
                      __DEFAULT ->
                          case narrow8Int# [sat_s4vP2] of sat_s4vP3 {
                            __DEFAULT -> GHC.Int.I8# [sat_s4vP3];
                          };
                    };
                1# -> wild_s4vOZ;
              };
        };

GHC.Int.$fNumInt8 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Num.Num GHC.Int.Int8
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Num.C:Num! [GHC.Int.$fNumInt8_$c+
                                  GHC.Int.$fNumInt8_$c-
                                  GHC.Int.$fNumInt8_$c*
                                  GHC.Int.$fNumInt8_$cnegate
                                  GHC.Int.$fNumInt8_$cabs
                                  GHC.Int.$fNumInt8_$csignum
                                  GHC.Int.$fNumInt8_$cfromInteger];

GHC.Int.$fBitsInt12 :: GHC.Base.Maybe GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [GHC.Int.$fBitsInt11];

GHC.Int.$fBitsInt8_$cbitSizeMaybe
  :: GHC.Int.Int8 -> GHC.Base.Maybe GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>m2, Unf=OtherCon []] =
    [] \r [i_s4vP4] GHC.Int.$fBitsInt12;

GHC.Int.$fBitsInt8_$cbit [InlPrag=INLINE (sat-args=0)]
  :: GHC.Types.Int -> GHC.Int.Int8
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [i_s4vP5]
        case i_s4vP5 of {
          GHC.Types.I# i#_s4vP7 ->
              case >=# [i#_s4vP7 64#] of {
                __DEFAULT ->
                    case uncheckedIShiftL# [1# i#_s4vP7] of sat_s4vP9 {
                      __DEFAULT ->
                          case narrow8Int# [sat_s4vP9] of sat_s4vPa {
                            __DEFAULT -> GHC.Int.I8# [sat_s4vPa];
                          };
                    };
                1# -> GHC.Int.$fBitsInt13;
              };
        };

GHC.Int.$fBitsInt8_$ctestBit [InlPrag=INLINE (sat-args=0)]
  :: GHC.Int.Int8 -> GHC.Types.Int -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [x_s4vPb i_s4vPc]
        case x_s4vPb of {
          GHC.Int.I8# x#_s4vPe [Occ=Once] ->
              case i_s4vPc of {
                GHC.Types.I# i#_s4vPg ->
                    case >=# [i#_s4vPg 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftL# [1# i#_s4vPg] of sat_s4vPj {
                            __DEFAULT ->
                                case narrow8Int# [sat_s4vPj] of sat_s4vPk {
                                  __DEFAULT ->
                                      case int2Word# [sat_s4vPk] of sat_s4vPl {
                                        __DEFAULT ->
                                            case int2Word# [x#_s4vPe] of sat_s4vPi {
                                              __DEFAULT ->
                                                  case and# [sat_s4vPi sat_s4vPl] of sat_s4vPm {
                                                    __DEFAULT ->
                                                        case word2Int# [sat_s4vPm] of {
                                                          __DEFAULT -> GHC.Types.True [];
                                                          0# -> GHC.Types.False [];
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                      1# -> GHC.Types.False [];
                    };
              };
        };

GHC.Int.$fBitsInt8_$crotateR [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int8 -> GHC.Types.Int -> GHC.Int.Int8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s4vPo eta1_s4vPp]
        case eta_s4vPo of wild_s4vPq {
          GHC.Int.I8# x#_s4vPr [Occ=Once] ->
              case eta1_s4vPp of {
                GHC.Types.I# x1_s4vPt [Occ=Once] ->
                    case negateInt# [x1_s4vPt] of sat_s4vPu {
                      __DEFAULT ->
                          case int2Word# [sat_s4vPu] of sat_s4vPv {
                            __DEFAULT ->
                                case and# [sat_s4vPv 7##] of sat_s4vPw {
                                  __DEFAULT ->
                                      case word2Int# [sat_s4vPw] of wild2_s4vPx {
                                        __DEFAULT ->
                                            case int2Word# [x#_s4vPr] of sat_s4vPz {
                                              __DEFAULT ->
                                                  case
                                                      narrow8Word# [sat_s4vPz]
                                                  of
                                                  x'#_s4vPy [Dmd=<S,U>]
                                                  { __DEFAULT ->
                                                        case -# [8# wild2_s4vPx] of sat_s4vPB {
                                                          __DEFAULT ->
                                                              case
                                                                  uncheckedShiftRL# [x'#_s4vPy
                                                                                     sat_s4vPB]
                                                              of
                                                              sat_s4vPC
                                                              { __DEFAULT ->
                                                                    case
                                                                        uncheckedShiftL# [x'#_s4vPy
                                                                                          wild2_s4vPx]
                                                                    of
                                                                    sat_s4vPA
                                                                    { __DEFAULT ->
                                                                          case
                                                                              or# [sat_s4vPA
                                                                                   sat_s4vPC]
                                                                          of
                                                                          sat_s4vPD
                                                                          { __DEFAULT ->
                                                                                case
                                                                                    word2Int# [sat_s4vPD]
                                                                                of
                                                                                sat_s4vPE
                                                                                { __DEFAULT ->
                                                                                      case
                                                                                          narrow8Int# [sat_s4vPE]
                                                                                      of
                                                                                      sat_s4vPF
                                                                                      { __DEFAULT ->
                                                                                            GHC.Int.I8# [sat_s4vPF];
                                                                                      };
                                                                                };
                                                                          };
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                        0# -> wild_s4vPq;
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fBitsInt8_$ccomplementBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int8 -> GHC.Types.Int -> GHC.Int.Int8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s4vPG eta1_s4vPH]
        case eta_s4vPG of wild_s4vPI {
          GHC.Int.I8# x#_s4vPJ [Occ=Once] ->
              case eta1_s4vPH of {
                GHC.Types.I# i#_s4vPL ->
                    case >=# [i#_s4vPL 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftL# [1# i#_s4vPL] of sat_s4vPO {
                            __DEFAULT ->
                                case narrow8Int# [sat_s4vPO] of sat_s4vPP {
                                  __DEFAULT ->
                                      case int2Word# [sat_s4vPP] of sat_s4vPQ {
                                        __DEFAULT ->
                                            case int2Word# [x#_s4vPJ] of sat_s4vPN {
                                              __DEFAULT ->
                                                  case xor# [sat_s4vPN sat_s4vPQ] of sat_s4vPR {
                                                    __DEFAULT ->
                                                        case word2Int# [sat_s4vPR] of sat_s4vPS {
                                                          __DEFAULT -> GHC.Int.I8# [sat_s4vPS];
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                      1# -> wild_s4vPI;
                    };
              };
        };

GHC.Int.$fBitsInt8_$cclearBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int8 -> GHC.Types.Int -> GHC.Int.Int8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s4vPT eta1_s4vPU]
        case eta_s4vPT of {
          GHC.Int.I8# x#_s4vPW [Occ=Once*] ->
              case eta1_s4vPU of {
                GHC.Types.I# i#_s4vPY ->
                    case >=# [i#_s4vPY 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftL# [1# i#_s4vPY] of sat_s4vQ1 {
                            __DEFAULT ->
                                case narrow8Int# [sat_s4vQ1] of sat_s4vQ2 {
                                  __DEFAULT ->
                                      case int2Word# [sat_s4vQ2] of sat_s4vQ3 {
                                        __DEFAULT ->
                                            case not# [sat_s4vQ3] of sat_s4vQ4 {
                                              __DEFAULT ->
                                                  case int2Word# [x#_s4vPW] of sat_s4vQ0 {
                                                    __DEFAULT ->
                                                        case
                                                            and# [sat_s4vQ0 sat_s4vQ4]
                                                        of
                                                        sat_s4vQ5
                                                        { __DEFAULT ->
                                                              case
                                                                  word2Int# [sat_s4vQ5]
                                                              of
                                                              sat_s4vQ6
                                                              { __DEFAULT ->
                                                                    GHC.Int.I8# [sat_s4vQ6];
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                      1# ->
                          case int2Word# [x#_s4vPW] of sat_s4vQ7 {
                            __DEFAULT ->
                                case and# [sat_s4vQ7 18446744073709551615##] of sat_s4vQ8 {
                                  __DEFAULT ->
                                      case word2Int# [sat_s4vQ8] of sat_s4vQ9 {
                                        __DEFAULT -> GHC.Int.I8# [sat_s4vQ9];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fBitsInt8_$csetBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int8 -> GHC.Types.Int -> GHC.Int.Int8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s4vQa eta1_s4vQb]
        case eta_s4vQa of wild_s4vQc {
          GHC.Int.I8# x#_s4vQd [Occ=Once] ->
              case eta1_s4vQb of {
                GHC.Types.I# i#_s4vQf ->
                    case >=# [i#_s4vQf 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftL# [1# i#_s4vQf] of sat_s4vQi {
                            __DEFAULT ->
                                case narrow8Int# [sat_s4vQi] of sat_s4vQj {
                                  __DEFAULT ->
                                      case int2Word# [sat_s4vQj] of sat_s4vQk {
                                        __DEFAULT ->
                                            case int2Word# [x#_s4vQd] of sat_s4vQh {
                                              __DEFAULT ->
                                                  case or# [sat_s4vQh sat_s4vQk] of sat_s4vQl {
                                                    __DEFAULT ->
                                                        case word2Int# [sat_s4vQl] of sat_s4vQm {
                                                          __DEFAULT -> GHC.Int.I8# [sat_s4vQm];
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                      1# -> wild_s4vQc;
                    };
              };
        };

GHC.Int.$fBitsInt8_$crotateL [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int8 -> GHC.Types.Int -> GHC.Int.Int8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Int.$fBitsInt8_$crotate eta_B2 eta_B1;

GHC.Int.$fBitsInt8 [InlPrag=NOUSERINLINE CONLIKE]
  :: Data.Bits.Bits GHC.Int.Int8
[GblId[DFunId], Caf=NoCafRefs] =
    CCS_DONT_CARE Data.Bits.C:Bits! [GHC.Int.$fEqInt8
                                     GHC.Int.$fBitsInt8_$c.&.
                                     GHC.Int.$fBitsInt8_$c.|.
                                     GHC.Int.$fBitsInt8_$cxor
                                     GHC.Int.$fBitsInt8_$ccomplement
                                     GHC.Int.$fBitsInt8_$cshift
                                     GHC.Int.$fBitsInt8_$crotate
                                     GHC.Int.$fBitsInt13
                                     GHC.Int.$fBitsInt8_$cbit
                                     GHC.Int.$fBitsInt8_$csetBit
                                     GHC.Int.$fBitsInt8_$cclearBit
                                     GHC.Int.$fBitsInt8_$ccomplementBit
                                     GHC.Int.$fBitsInt8_$ctestBit
                                     GHC.Int.$fBitsInt8_$cbitSizeMaybe
                                     GHC.Int.$fBitsInt8_$cfiniteBitSize
                                     GHC.Int.$fBitsInt8_$cisSigned
                                     GHC.Int.$fBitsInt8_$cshiftL
                                     GHC.Int.$fBitsInt8_$cunsafeShiftL
                                     GHC.Int.$fBitsInt8_$cshiftR
                                     GHC.Int.$fBitsInt8_$cunsafeShiftR
                                     GHC.Int.$fBitsInt8_$crotateL
                                     GHC.Int.$fBitsInt8_$crotateR
                                     GHC.Int.$fBitsInt8_$cpopCount];

GHC.Int.$fFiniteBitsInt8 [InlPrag=NOUSERINLINE CONLIKE]
  :: Data.Bits.FiniteBits GHC.Int.Int8
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE Data.Bits.C:FiniteBits! [GHC.Int.$fBitsInt8
                                           GHC.Int.$fBitsInt8_$cfiniteBitSize
                                           GHC.Int.$fFiniteBitsInt8_$ccountLeadingZeros
                                           GHC.Int.$fFiniteBitsInt8_$ccountTrailingZeros];

GHC.Int.$fReadInt8_go [Occ=LoopBreaker]
  :: [(GHC.Types.Int, GHC.Base.String)]
     -> [(GHC.Int.Int8, GHC.Base.String)]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s4vQn]
        case ds_s4vQn of {
          [] -> [] [];
          : y_s4vQp [Occ=Once!] ys_s4vQq [Occ=Once] ->
              case y_s4vQp of {
                (,) x_s4vQs [Occ=Once!] r_s4vQt [Occ=Once] ->
                    let {
                      sat_s4vQz [Occ=Once] :: [(GHC.Int.Int8, GHC.Base.String)]
                      [LclId] =
                          [ys_s4vQq] \u [] GHC.Int.$fReadInt8_go ys_s4vQq; } in
                    let {
                      sat_s4vQx [Occ=Once] :: GHC.Int.Int8
                      [LclId] =
                          [x_s4vQs] \u []
                              case x_s4vQs of {
                                GHC.Types.I# x#_s4vQv [Occ=Once] ->
                                    case narrow8Int# [x#_s4vQv] of sat_s4vQw {
                                      __DEFAULT -> GHC.Int.I8# [sat_s4vQw];
                                    };
                              }; } in
                    let {
                      sat_s4vQy [Occ=Once] :: (GHC.Int.Int8, GHC.Base.String)
                      [LclId] =
                          CCCS (,)! [sat_s4vQx r_s4vQt];
                    } in  : [sat_s4vQy sat_s4vQz];
              };
        };

GHC.Int.$fReadInt8_$creadsPrec
  :: GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS GHC.Int.Int8
[GblId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [p_s4vQA s_s4vQB]
        case
            GHC.Read.$fReadInt_$sreadNumber
                GHC.Read.$fReadInt2
                p_s4vQA
                Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
        of
        sat_s4vQC
        { __DEFAULT ->
              case
                  Text.ParserCombinators.ReadP.run sat_s4vQC s_s4vQB
              of
              sat_s4vQD
              { __DEFAULT -> GHC.Int.$fReadInt8_go sat_s4vQD;
              };
        };

GHC.Int.$fReadInt13
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Int.Int8 -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,U><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [n_s4vQE eta_s4vQF]
        let {
          sat_s4vQG [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS GHC.Int.Int8
          [LclId] =
              [n_s4vQE] \r [eta_B1]
                  GHC.Int.$fReadInt8_$creadsPrec n_s4vQE eta_B1;
        } in 
          case
              Text.ParserCombinators.ReadP.$wreadS_to_P sat_s4vQG eta_s4vQF
          of
          { Unit# ww1_s4vQI [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s4vQI];
          };

GHC.Int.$fIxInt1 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

GHC.Int.$fReadInt12
  :: Text.ParserCombinators.ReadP.P [GHC.Int.Int8]
[GblId] =
    [] \u []
        GHC.Read.list
            GHC.Int.$fReadInt13
            GHC.Int.$fIxInt1
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Int.$fReadInt8_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.Int.Int8]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Int.$fReadInt12 eta_B1;

GHC.Int.$fReadInt11
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        ([GHC.Int.Int8] -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,A><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [n_s4vQJ w1_s4vQK]
        case
            Text.ParserCombinators.ReadP.$wreadS_to_P
                GHC.Int.$fReadInt8_$creadList w1_s4vQK
        of
        { Unit# ww1_s4vQM [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s4vQM];
        };

GHC.Int.$fReadInt8 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.Int.Int8
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Int.$fReadInt8_$creadsPrec
                                    GHC.Int.$fReadInt8_$creadList
                                    GHC.Int.$fReadInt13
                                    GHC.Int.$fReadInt11];

GHC.Int.$fIntegralInt8_$cquot [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> GHC.Int.Int8
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4vQN w1_s4vQO]
        case w_s4vQN of {
          GHC.Int.I8# ww1_s4vQQ [Occ=Once*] ->
              case w1_s4vQO of {
                GHC.Int.I8# ww3_s4vQS [Occ=Once!] ->
                    case ww3_s4vQS of wild_s4vQT {
                      __DEFAULT ->
                          case quotInt# [ww1_s4vQQ wild_s4vQT] of wild1_s4vQU {
                            __DEFAULT ->
                                case narrow8Int# [wild1_s4vQU] of sat_s4vQV {
                                  __DEFAULT -> GHC.Int.I8# [sat_s4vQV];
                                };
                          };
                      -1# ->
                          case ww1_s4vQQ of wild1_s4vQW {
                            __DEFAULT ->
                                case quotInt# [wild1_s4vQW -1#] of sat_s4vQX {
                                  __DEFAULT ->
                                      case narrow8Int# [sat_s4vQX] of sat_s4vQY {
                                        __DEFAULT -> GHC.Int.I8# [sat_s4vQY];
                                      };
                                };
                            -128# -> GHC.Real.overflowError;
                          };
                      0# -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Int.$fIntegralInt8_$crem
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> GHC.Int.Int8
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vR1 y_s4vR2]
        case ds_s4vR1 of {
          GHC.Int.I8# x#_s4vR4 [Occ=Once] ->
              case y_s4vR2 of {
                GHC.Int.I8# y#_s4vR6 [Occ=Once!] ->
                    case y#_s4vR6 of wild2_s4vR7 {
                      __DEFAULT ->
                          case remInt# [x#_s4vR4 wild2_s4vR7] of wild3_s4vR8 {
                            __DEFAULT ->
                                case narrow8Int# [wild3_s4vR8] of sat_s4vR9 {
                                  __DEFAULT -> GHC.Int.I8# [sat_s4vR9];
                                };
                          };
                      0# -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Int.$w$cdiv3 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Str=<S,U><S,1*U>, Unf=OtherCon []] =
    [] \r [ww_s4vRa ww1_s4vRb]
        case ww1_s4vRb of wild_s4vRc {
          __DEFAULT ->
              case GHC.Classes.divInt# ww_s4vRa wild_s4vRc of wild1_s4vRd {
                __DEFAULT -> narrow8Int# [wild1_s4vRd];
              };
          -1# ->
              case ww_s4vRa of wild1_s4vRe {
                __DEFAULT ->
                    case GHC.Classes.divInt# wild1_s4vRe -1# of wild2_s4vRf {
                      __DEFAULT -> narrow8Int# [wild2_s4vRf];
                    };
                -128# -> GHC.Real.overflowError;
              };
          0# -> GHC.Real.divZeroError;
        };

GHC.Int.$fIntegralInt8_$cdiv [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> GHC.Int.Int8
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4vRi w1_s4vRj]
        case w_s4vRi of {
          GHC.Int.I8# ww1_s4vRl [Occ=Once] ->
              case w1_s4vRj of {
                GHC.Int.I8# ww3_s4vRn [Occ=Once] ->
                    case GHC.Int.$w$cdiv3 ww1_s4vRl ww3_s4vRn of ww4_s4vRo {
                      __DEFAULT -> GHC.Int.I8# [ww4_s4vRo];
                    };
              };
        };

GHC.Int.$fIntegralInt8_$cmod [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> GHC.Int.Int8
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4vRp w1_s4vRq]
        case w_s4vRp of {
          GHC.Int.I8# ww1_s4vRs [Occ=Once] ->
              case w1_s4vRq of {
                GHC.Int.I8# ww3_s4vRu [Occ=Once!] ->
                    case ww3_s4vRu of wild_s4vRv {
                      __DEFAULT ->
                          case GHC.Classes.modInt# ww1_s4vRs wild_s4vRv of wild1_s4vRw {
                            __DEFAULT ->
                                case narrow8Int# [wild1_s4vRw] of sat_s4vRx {
                                  __DEFAULT -> GHC.Int.I8# [sat_s4vRx];
                                };
                          };
                      0# -> GHC.Real.divZeroError;
                    };
              };
        };

lvl6_r4kPx :: (GHC.Int.Int8, GHC.Int.Int8)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Real.overflowError GHC.Int.$fBitsInt13];

GHC.Int.$fIntegralInt8_$cquotRem [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> (GHC.Int.Int8, GHC.Int.Int8)
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4vRz w1_s4vRA]
        case w_s4vRz of {
          GHC.Int.I8# ww1_s4vRC [Occ=Once*] ->
              case w1_s4vRA of {
                GHC.Int.I8# ww3_s4vRE [Occ=Once!] ->
                    case ww3_s4vRE of wild_s4vRF {
                      __DEFAULT ->
                          case quotRemInt# [ww1_s4vRC wild_s4vRF] of {
                            (#,#) ipv_s4vRH [Occ=Once] ipv1_s4vRI [Occ=Once] ->
                                case narrow8Int# [ipv1_s4vRI] of sat_s4vRL {
                                  __DEFAULT ->
                                      let {
                                        sat_s4vRM [Occ=Once] :: GHC.Int.Int8
                                        [LclId] =
                                            CCCS GHC.Int.I8#! [sat_s4vRL];
                                      } in 
                                        case narrow8Int# [ipv_s4vRH] of sat_s4vRJ {
                                          __DEFAULT ->
                                              let {
                                                sat_s4vRK [Occ=Once] :: GHC.Int.Int8
                                                [LclId] =
                                                    CCCS GHC.Int.I8#! [sat_s4vRJ];
                                              } in  (,) [sat_s4vRK sat_s4vRM];
                                        };
                                };
                          };
                      -1# ->
                          case ww1_s4vRC of wild1_s4vRN {
                            __DEFAULT ->
                                case quotRemInt# [wild1_s4vRN -1#] of {
                                  (#,#) ipv_s4vRP [Occ=Once] ipv1_s4vRQ [Occ=Once] ->
                                      case narrow8Int# [ipv1_s4vRQ] of sat_s4vRT {
                                        __DEFAULT ->
                                            let {
                                              sat_s4vRU [Occ=Once] :: GHC.Int.Int8
                                              [LclId] =
                                                  CCCS GHC.Int.I8#! [sat_s4vRT];
                                            } in 
                                              case narrow8Int# [ipv_s4vRP] of sat_s4vRR {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s4vRS [Occ=Once] :: GHC.Int.Int8
                                                      [LclId] =
                                                          CCCS GHC.Int.I8#! [sat_s4vRR];
                                                    } in  (,) [sat_s4vRS sat_s4vRU];
                                              };
                                      };
                                };
                            -128# -> lvl6_r4kPx;
                          };
                      0# -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Int.$w$cdivMod3 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int#
     -> GHC.Prim.Int# -> (# GHC.Int.Int8, GHC.Int.Int8 #)
[GblId, Arity=2, Str=<S,U><S,1*U>, Unf=OtherCon []] =
    [] \r [ww_s4vRW ww1_s4vRX]
        case ww1_s4vRX of wild_s4vRY {
          __DEFAULT ->
              let-no-escape {
                $j_s4vRZ [Occ=Once*T[0], Dmd=<L,1*U(U,U)>]
                  :: (# GHC.Int.Int8, GHC.Int.Int8 #)
                [LclId[JoinId(0)], Unf=OtherCon []] =
                    [ww_s4vRW wild_s4vRY] \r []
                        case ># [ww_s4vRW 0#] of {
                          __DEFAULT ->
                              case <# [ww_s4vRW 0#] of {
                                __DEFAULT ->
                                    case quotRemInt# [ww_s4vRW wild_s4vRY] of {
                                      (#,#) ipv_s4vS3 [Occ=Once] ipv1_s4vS4 [Occ=Once] ->
                                          case narrow8Int# [ipv1_s4vS4] of sat_s4vS7 {
                                            __DEFAULT ->
                                                let {
                                                  sat_s4vS8 [Occ=Once] :: GHC.Int.Int8
                                                  [LclId] =
                                                      CCCS GHC.Int.I8#! [sat_s4vS7];
                                                } in 
                                                  case narrow8Int# [ipv_s4vS3] of sat_s4vS5 {
                                                    __DEFAULT ->
                                                        let {
                                                          sat_s4vS6 [Occ=Once] :: GHC.Int.Int8
                                                          [LclId] =
                                                              CCCS GHC.Int.I8#! [sat_s4vS5];
                                                        } in  (#,#) [sat_s4vS6 sat_s4vS8];
                                                  };
                                          };
                                    };
                                1# ->
                                    case ># [wild_s4vRY 0#] of {
                                      __DEFAULT ->
                                          case quotRemInt# [ww_s4vRW wild_s4vRY] of {
                                            (#,#) ipv_s4vSb [Occ=Once] ipv1_s4vSc [Occ=Once] ->
                                                case narrow8Int# [ipv1_s4vSc] of sat_s4vSf {
                                                  __DEFAULT ->
                                                      let {
                                                        sat_s4vSg [Occ=Once] :: GHC.Int.Int8
                                                        [LclId] =
                                                            CCCS GHC.Int.I8#! [sat_s4vSf];
                                                      } in 
                                                        case narrow8Int# [ipv_s4vSb] of sat_s4vSd {
                                                          __DEFAULT ->
                                                              let {
                                                                sat_s4vSe [Occ=Once] :: GHC.Int.Int8
                                                                [LclId] =
                                                                    CCCS GHC.Int.I8#! [sat_s4vSd];
                                                              } in  (#,#) [sat_s4vSe sat_s4vSg];
                                                        };
                                                };
                                          };
                                      1# ->
                                          case +# [ww_s4vRW 1#] of sat_s4vSh {
                                            __DEFAULT ->
                                                case quotRemInt# [sat_s4vSh wild_s4vRY] of {
                                                  (#,#) ipv_s4vSj [Occ=Once]
                                                        ipv1_s4vSk [Occ=Once] ->
                                                      case +# [ipv1_s4vSk wild_s4vRY] of sat_s4vSo {
                                                        __DEFAULT ->
                                                            case -# [sat_s4vSo 1#] of sat_s4vSp {
                                                              __DEFAULT ->
                                                                  case
                                                                      narrow8Int# [sat_s4vSp]
                                                                  of
                                                                  sat_s4vSq
                                                                  { __DEFAULT ->
                                                                        let {
                                                                          sat_s4vSr [Occ=Once]
                                                                            :: GHC.Int.Int8
                                                                          [LclId] =
                                                                              CCCS GHC.Int.I8#! [sat_s4vSq];
                                                                        } in 
                                                                          case
                                                                              -# [ipv_s4vSj 1#]
                                                                          of
                                                                          sat_s4vSl
                                                                          { __DEFAULT ->
                                                                                case
                                                                                    narrow8Int# [sat_s4vSl]
                                                                                of
                                                                                sat_s4vSm
                                                                                { __DEFAULT ->
                                                                                      let {
                                                                                        sat_s4vSn [Occ=Once]
                                                                                          :: GHC.Int.Int8
                                                                                        [LclId] =
                                                                                            CCCS GHC.Int.I8#! [sat_s4vSm];
                                                                                      } in 
                                                                                        (#,#) [sat_s4vSn
                                                                                               sat_s4vSr];
                                                                                };
                                                                          };
                                                                  };
                                                            };
                                                      };
                                                };
                                          };
                                    };
                              };
                          1# ->
                              case <# [wild_s4vRY 0#] of {
                                __DEFAULT ->
                                    case <# [ww_s4vRW 0#] of {
                                      __DEFAULT ->
                                          case quotRemInt# [ww_s4vRW wild_s4vRY] of {
                                            (#,#) ipv_s4vSv [Occ=Once] ipv1_s4vSw [Occ=Once] ->
                                                case narrow8Int# [ipv1_s4vSw] of sat_s4vSz {
                                                  __DEFAULT ->
                                                      let {
                                                        sat_s4vSA [Occ=Once] :: GHC.Int.Int8
                                                        [LclId] =
                                                            CCCS GHC.Int.I8#! [sat_s4vSz];
                                                      } in 
                                                        case narrow8Int# [ipv_s4vSv] of sat_s4vSx {
                                                          __DEFAULT ->
                                                              let {
                                                                sat_s4vSy [Occ=Once] :: GHC.Int.Int8
                                                                [LclId] =
                                                                    CCCS GHC.Int.I8#! [sat_s4vSx];
                                                              } in  (#,#) [sat_s4vSy sat_s4vSA];
                                                        };
                                                };
                                          };
                                      1# ->
                                          case ># [wild_s4vRY 0#] of {
                                            __DEFAULT ->
                                                case quotRemInt# [ww_s4vRW wild_s4vRY] of {
                                                  (#,#) ipv_s4vSD [Occ=Once]
                                                        ipv1_s4vSE [Occ=Once] ->
                                                      case narrow8Int# [ipv1_s4vSE] of sat_s4vSH {
                                                        __DEFAULT ->
                                                            let {
                                                              sat_s4vSI [Occ=Once] :: GHC.Int.Int8
                                                              [LclId] =
                                                                  CCCS GHC.Int.I8#! [sat_s4vSH];
                                                            } in 
                                                              case
                                                                  narrow8Int# [ipv_s4vSD]
                                                              of
                                                              sat_s4vSF
                                                              { __DEFAULT ->
                                                                    let {
                                                                      sat_s4vSG [Occ=Once]
                                                                        :: GHC.Int.Int8
                                                                      [LclId] =
                                                                          CCCS GHC.Int.I8#! [sat_s4vSF];
                                                                    } in 
                                                                      (#,#) [sat_s4vSG sat_s4vSI];
                                                              };
                                                      };
                                                };
                                            1# ->
                                                case +# [ww_s4vRW 1#] of sat_s4vSJ {
                                                  __DEFAULT ->
                                                      case quotRemInt# [sat_s4vSJ wild_s4vRY] of {
                                                        (#,#) ipv_s4vSL [Occ=Once]
                                                              ipv1_s4vSM [Occ=Once] ->
                                                            case
                                                                +# [ipv1_s4vSM wild_s4vRY]
                                                            of
                                                            sat_s4vSQ
                                                            { __DEFAULT ->
                                                                  case
                                                                      -# [sat_s4vSQ 1#]
                                                                  of
                                                                  sat_s4vSR
                                                                  { __DEFAULT ->
                                                                        case
                                                                            narrow8Int# [sat_s4vSR]
                                                                        of
                                                                        sat_s4vSS
                                                                        { __DEFAULT ->
                                                                              let {
                                                                                sat_s4vST [Occ=Once]
                                                                                  :: GHC.Int.Int8
                                                                                [LclId] =
                                                                                    CCCS GHC.Int.I8#! [sat_s4vSS];
                                                                              } in 
                                                                                case
                                                                                    -# [ipv_s4vSL
                                                                                        1#]
                                                                                of
                                                                                sat_s4vSN
                                                                                { __DEFAULT ->
                                                                                      case
                                                                                          narrow8Int# [sat_s4vSN]
                                                                                      of
                                                                                      sat_s4vSO
                                                                                      { __DEFAULT ->
                                                                                            let {
                                                                                              sat_s4vSP [Occ=Once]
                                                                                                :: GHC.Int.Int8
                                                                                              [LclId] =
                                                                                                  CCCS GHC.Int.I8#! [sat_s4vSO];
                                                                                            } in 
                                                                                              (#,#) [sat_s4vSP
                                                                                                     sat_s4vST];
                                                                                      };
                                                                                };
                                                                        };
                                                                  };
                                                            };
                                                      };
                                                };
                                          };
                                    };
                                1# ->
                                    case -# [ww_s4vRW 1#] of sat_s4vSU {
                                      __DEFAULT ->
                                          case quotRemInt# [sat_s4vSU wild_s4vRY] of {
                                            (#,#) ipv_s4vSW [Occ=Once] ipv1_s4vSX [Occ=Once] ->
                                                case +# [ipv1_s4vSX wild_s4vRY] of sat_s4vT1 {
                                                  __DEFAULT ->
                                                      case +# [sat_s4vT1 1#] of sat_s4vT2 {
                                                        __DEFAULT ->
                                                            case
                                                                narrow8Int# [sat_s4vT2]
                                                            of
                                                            sat_s4vT3
                                                            { __DEFAULT ->
                                                                  let {
                                                                    sat_s4vT4 [Occ=Once]
                                                                      :: GHC.Int.Int8
                                                                    [LclId] =
                                                                        CCCS GHC.Int.I8#! [sat_s4vT3];
                                                                  } in 
                                                                    case
                                                                        -# [ipv_s4vSW 1#]
                                                                    of
                                                                    sat_s4vSY
                                                                    { __DEFAULT ->
                                                                          case
                                                                              narrow8Int# [sat_s4vSY]
                                                                          of
                                                                          sat_s4vSZ
                                                                          { __DEFAULT ->
                                                                                let {
                                                                                  sat_s4vT0 [Occ=Once]
                                                                                    :: GHC.Int.Int8
                                                                                  [LclId] =
                                                                                      CCCS GHC.Int.I8#! [sat_s4vSZ];
                                                                                } in 
                                                                                  (#,#) [sat_s4vT0
                                                                                         sat_s4vT4];
                                                                          };
                                                                    };
                                                            };
                                                      };
                                                };
                                          };
                                    };
                              };
                        };
              } in 
                case wild_s4vRY of {
                  __DEFAULT -> $j_s4vRZ;
                  -1# ->
                      case ww_s4vRW of {
                        __DEFAULT -> $j_s4vRZ;
                        -128# -> (#,#) [GHC.Real.overflowError GHC.Int.$fBitsInt13];
                      };
                };
          0# -> GHC.Real.divZeroError;
        };

GHC.Int.$fIntegralInt8_$cdivMod [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int8 -> GHC.Int.Int8 -> (GHC.Int.Int8, GHC.Int.Int8)
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4vT8 w1_s4vT9]
        case w_s4vT8 of {
          GHC.Int.I8# ww1_s4vTb [Occ=Once] ->
              case w1_s4vT9 of {
                GHC.Int.I8# ww3_s4vTd [Occ=Once] ->
                    case GHC.Int.$w$cdivMod3 ww1_s4vTb ww3_s4vTd of {
                      (#,#) ww5_s4vTf [Occ=Once] ww6_s4vTg [Occ=Once] ->
                          (,) [ww5_s4vTf ww6_s4vTg];
                    };
              };
        };

sat_s4vTh :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [1#];

sat_s4vTi :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_s4vTh GHC.Types.[]];

GHC.Int.$fRealInt1 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True sat_s4vTi;

GHC.Int.$fRealInt8_$ctoRational [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int8 -> GHC.Real.Rational
[GblId, Arity=1, Str=<S(S),1*U(U)>m, Unf=OtherCon []] =
    [] \r [w_s4vTj]
        case w_s4vTj of {
          GHC.Int.I8# ww1_s4vTl [Occ=Once] ->
              case GHC.Integer.Type.smallInteger ww1_s4vTl of sat_s4vTm {
                __DEFAULT ->
                    case
                        GHC.Integer.Type.timesInteger sat_s4vTm GHC.Int.$fRealInt1
                    of
                    sat_s4vTn
                    { __DEFAULT ->
                          case GHC.Real.$w$sreduce sat_s4vTn GHC.Int.$fRealInt1 of {
                            (#,#) ww3_s4vTp [Occ=Once] ww4_s4vTq [Occ=Once] ->
                                GHC.Real.:% [ww3_s4vTp ww4_s4vTq];
                          };
                    };
              };
        };

GHC.Int.$fRealInt8 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Real.Real GHC.Int.Int8
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Real.C:Real! [GHC.Int.$fNumInt8
                                    GHC.Int.$fOrdInt8
                                    GHC.Int.$fRealInt8_$ctoRational];

GHC.Int.$fIntegralInt8 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Real.Integral GHC.Int.Int8
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Real.C:Integral! [GHC.Int.$fRealInt8
                                        GHC.Int.$fEnumInt8
                                        GHC.Int.$fIntegralInt8_$cquot
                                        GHC.Int.$fIntegralInt8_$crem
                                        GHC.Int.$fIntegralInt8_$cdiv
                                        GHC.Int.$fIntegralInt8_$cmod
                                        GHC.Int.$fIntegralInt8_$cquotRem
                                        GHC.Int.$fIntegralInt8_$cdivMod
                                        GHC.Int.$fIntegralInt8_$ctoInteger];

GHC.Int.$fIxInt8_$cunsafeIndex
  :: (GHC.Int.Int8, GHC.Int.Int8) -> GHC.Int.Int8 -> GHC.Types.Int
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S(S)L),1*U(1*U(U),A)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vTr i_s4vTs]
        case ds_s4vTr of {
          (,) m_s4vTu [Occ=Once!] _ [Occ=Dead] ->
              case i_s4vTs of {
                GHC.Int.I8# x#_s4vTx [Occ=Once] ->
                    case m_s4vTu of {
                      GHC.Int.I8# x#1_s4vTz [Occ=Once] ->
                          case -# [x#_s4vTx x#1_s4vTz] of sat_s4vTA {
                            __DEFAULT -> GHC.Types.I# [sat_s4vTA];
                          };
                    };
              };
        };

GHC.Int.$fIxInt8_$crange
  :: (GHC.Int.Int8, GHC.Int.Int8) -> [GHC.Int.Int8]
[GblId,
 Arity=1,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>,
 Unf=OtherCon []] =
    [] \r [ds_s4vTB]
        case ds_s4vTB of {
          (,) m_s4vTD [Occ=Once] n_s4vTE [Occ=Once] ->
              GHC.Int.$fEnumInt8_$cenumFromTo m_s4vTD n_s4vTE;
        };

GHC.Int.$fIxInt8_$crangeSize
  :: (GHC.Int.Int8, GHC.Int.Int8) -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>m,
 Unf=OtherCon []] =
    [] \r [b_s4vTF]
        case b_s4vTF of {
          (,) _l_s4vTH [Occ=Once!] h_s4vTI [Occ=Once!] ->
              case _l_s4vTH of {
                GHC.Int.I8# x_s4vTK ->
                    case h_s4vTI of {
                      GHC.Int.I8# y_s4vTM ->
                          case <=# [x_s4vTK y_s4vTM] of {
                            __DEFAULT -> GHC.Int.$fIxInt1;
                            1# ->
                                case -# [y_s4vTM x_s4vTK] of sat_s4vTO {
                                  __DEFAULT ->
                                      case +# [sat_s4vTO 1#] of sat_s4vTP {
                                        __DEFAULT -> GHC.Types.I# [sat_s4vTP];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fIxInt8_$cunsafeRangeSize
  :: (GHC.Int.Int8, GHC.Int.Int8) -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>m,
 Unf=OtherCon []] =
    [] \r [b_s4vTQ]
        case b_s4vTQ of {
          (,) _l_s4vTS [Occ=Once!] h_s4vTT [Occ=Once!] ->
              case h_s4vTT of {
                GHC.Int.I8# x#_s4vTV [Occ=Once] ->
                    case _l_s4vTS of {
                      GHC.Int.I8# x#1_s4vTX [Occ=Once] ->
                          case -# [x#_s4vTV x#1_s4vTX] of sat_s4vTY {
                            __DEFAULT ->
                                case +# [sat_s4vTY 1#] of sat_s4vTZ {
                                  __DEFAULT -> GHC.Types.I# [sat_s4vTZ];
                                };
                          };
                    };
              };
        };

GHC.Int.$fIxInt8_$cindex [InlPrag=INLINE (sat-args=2)]
  :: (GHC.Int.Int8, GHC.Int.Int8) -> GHC.Int.Int8 -> GHC.Types.Int
[GblId,
 Arity=2,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s4vU0 eta1_s4vU1]
        case eta_s4vU0 of {
          (,) m_s4vU3 [Occ=Once!] n_s4vU4 [Occ=Once!] ->
              case m_s4vU3 of {
                GHC.Int.I8# x_s4vU6 ->
                    case eta1_s4vU1 of {
                      GHC.Int.I8# y_s4vU8 ->
                          case <=# [x_s4vU6 y_s4vU8] of {
                            __DEFAULT -> GHC.Arr.hopelessIndexError;
                            1# ->
                                case n_s4vU4 of {
                                  GHC.Int.I8# y1_s4vUb [Occ=Once] ->
                                      case <=# [y_s4vU8 y1_s4vUb] of {
                                        __DEFAULT -> GHC.Arr.hopelessIndexError;
                                        1# ->
                                            case -# [y_s4vU8 x_s4vU6] of sat_s4vUd {
                                              __DEFAULT -> GHC.Types.I# [sat_s4vUd];
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fIxInt8 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Arr.Ix GHC.Int.Int8
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Arr.C:Ix! [GHC.Int.$fOrdInt8
                                 GHC.Int.$fIxInt8_$crange
                                 GHC.Int.$fIxInt8_$cindex
                                 GHC.Int.$fIxInt8_$cunsafeIndex
                                 GHC.Int.$fIxInt8_$cinRange
                                 GHC.Int.$fIxInt8_$crangeSize
                                 GHC.Int.$fIxInt8_$cunsafeRangeSize];

GHC.Int.eqInt16 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4vUe ds1_s4vUf]
        case ds_s4vUe of {
          GHC.Int.I16# x_s4vUh [Occ=Once] ->
              case ds1_s4vUf of {
                GHC.Int.I16# y_s4vUj [Occ=Once] ->
                    case ==# [x_s4vUh y_s4vUj] of sat_s4vUk {
                      __DEFAULT -> tagToEnum# [sat_s4vUk];
                    };
              };
        };

GHC.Int.$fEqInt16 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.Int.Int16
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.Int.eqInt16 GHC.Int.neInt16];

GHC.Int.gtInt16 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4vUl ds1_s4vUm]
        case ds_s4vUl of {
          GHC.Int.I16# x_s4vUo [Occ=Once] ->
              case ds1_s4vUm of {
                GHC.Int.I16# y_s4vUq [Occ=Once] ->
                    case ># [x_s4vUo y_s4vUq] of sat_s4vUr {
                      __DEFAULT -> tagToEnum# [sat_s4vUr];
                    };
              };
        };

GHC.Int.geInt16 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4vUs ds1_s4vUt]
        case ds_s4vUs of {
          GHC.Int.I16# x_s4vUv [Occ=Once] ->
              case ds1_s4vUt of {
                GHC.Int.I16# y_s4vUx [Occ=Once] ->
                    case >=# [x_s4vUv y_s4vUx] of sat_s4vUy {
                      __DEFAULT -> tagToEnum# [sat_s4vUy];
                    };
              };
        };

GHC.Int.ltInt16 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4vUz ds1_s4vUA]
        case ds_s4vUz of {
          GHC.Int.I16# x_s4vUC [Occ=Once] ->
              case ds1_s4vUA of {
                GHC.Int.I16# y_s4vUE [Occ=Once] ->
                    case <# [x_s4vUC y_s4vUE] of sat_s4vUF {
                      __DEFAULT -> tagToEnum# [sat_s4vUF];
                    };
              };
        };

GHC.Int.leInt16 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4vUG ds1_s4vUH]
        case ds_s4vUG of {
          GHC.Int.I16# x_s4vUJ [Occ=Once] ->
              case ds1_s4vUH of {
                GHC.Int.I16# y_s4vUL [Occ=Once] ->
                    case <=# [x_s4vUJ y_s4vUL] of sat_s4vUM {
                      __DEFAULT -> tagToEnum# [sat_s4vUM];
                    };
              };
        };

GHC.Int.$fOrdInt16_$ccompare
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [x_s4vUN y_s4vUO]
        case x_s4vUN of {
          GHC.Int.I16# x1_s4vUQ ->
              case y_s4vUO of {
                GHC.Int.I16# y1_s4vUS ->
                    case ==# [x1_s4vUQ y1_s4vUS] of {
                      __DEFAULT ->
                          case <=# [x1_s4vUQ y1_s4vUS] of {
                            __DEFAULT -> GHC.Types.GT [];
                            1# -> GHC.Types.LT [];
                          };
                      1# -> GHC.Types.EQ [];
                    };
              };
        };

GHC.Int.$fOrdInt16_$cmax
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Int.Int16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s4vUV y_s4vUW]
        case x_s4vUV of wild_s4vUX {
          GHC.Int.I16# x1_s4vUY [Occ=Once] ->
              case y_s4vUW of wild1_s4vUZ {
                GHC.Int.I16# y1_s4vV0 [Occ=Once] ->
                    case <=# [x1_s4vUY y1_s4vV0] of {
                      __DEFAULT -> wild_s4vUX;
                      1# -> wild1_s4vUZ;
                    };
              };
        };

GHC.Int.$fOrdInt16_$cmin
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Int.Int16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s4vV2 y_s4vV3]
        case x_s4vV2 of wild_s4vV4 {
          GHC.Int.I16# x1_s4vV5 [Occ=Once] ->
              case y_s4vV3 of wild1_s4vV6 {
                GHC.Int.I16# y1_s4vV7 [Occ=Once] ->
                    case <=# [x1_s4vV5 y1_s4vV7] of {
                      __DEFAULT -> wild1_s4vV6;
                      1# -> wild_s4vV4;
                    };
              };
        };

GHC.Int.$fOrdInt16 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord GHC.Int.Int16
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.Int.$fEqInt16
                                      GHC.Int.$fOrdInt16_$ccompare
                                      GHC.Int.ltInt16
                                      GHC.Int.leInt16
                                      GHC.Int.gtInt16
                                      GHC.Int.geInt16
                                      GHC.Int.$fOrdInt16_$cmax
                                      GHC.Int.$fOrdInt16_$cmin];

GHC.Int.$fIxInt16_$cinRange
  :: (GHC.Int.Int16, GHC.Int.Int16)
     -> GHC.Int.Int16 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S(S)L),1*U(1*U(U),1*U(U))><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4vV9 i_s4vVa]
        case ds_s4vV9 of {
          (,) m_s4vVc [Occ=Once!] n_s4vVd [Occ=Once!] ->
              case m_s4vVc of {
                GHC.Int.I16# x_s4vVf [Occ=Once] ->
                    case i_s4vVa of {
                      GHC.Int.I16# y_s4vVh ->
                          case <=# [x_s4vVf y_s4vVh] of {
                            __DEFAULT -> GHC.Types.False [];
                            1# ->
                                case n_s4vVd of {
                                  GHC.Int.I16# y1_s4vVk [Occ=Once] ->
                                      case <=# [y_s4vVh y1_s4vVk] of sat_s4vVl {
                                        __DEFAULT -> tagToEnum# [sat_s4vVl];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fNumInt1 :: GHC.Int.Int16
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I16#! [1#];

GHC.Int.$fNumInt16_$csignum :: GHC.Int.Int16 -> GHC.Int.Int16
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s4vVm]
        case x_s4vVm of {
          GHC.Int.I16# x1_s4vVo ->
              case ># [x1_s4vVo 0#] of {
                __DEFAULT ->
                    case x1_s4vVo of {
                      __DEFAULT -> GHC.Int.$fNumInt2;
                      0# -> GHC.Int.$fBitsInt3;
                    };
                1# -> GHC.Int.$fNumInt1;
              };
        };

GHC.Int.$fNumInt16_$cabs :: GHC.Int.Int16 -> GHC.Int.Int16
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s4vVr]
        case x_s4vVr of wild_s4vVs {
          GHC.Int.I16# x1_s4vVt ->
              case >=# [x1_s4vVt 0#] of {
                __DEFAULT ->
                    case negateInt# [x1_s4vVt] of sat_s4vVv {
                      __DEFAULT ->
                          case narrow16Int# [sat_s4vVv] of sat_s4vVw {
                            __DEFAULT -> GHC.Int.I16# [sat_s4vVw];
                          };
                    };
                1# -> wild_s4vVs;
              };
        };

GHC.Int.$fNumInt16 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Num.Num GHC.Int.Int16
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Num.C:Num! [GHC.Int.$fNumInt16_$c+
                                  GHC.Int.$fNumInt16_$c-
                                  GHC.Int.$fNumInt16_$c*
                                  GHC.Int.$fNumInt16_$cnegate
                                  GHC.Int.$fNumInt16_$cabs
                                  GHC.Int.$fNumInt16_$csignum
                                  GHC.Int.$fNumInt16_$cfromInteger];

GHC.Int.$fBitsInt2 :: GHC.Base.Maybe GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [GHC.Int.$fBitsInt1];

GHC.Int.$fBitsInt16_$cbitSizeMaybe
  :: GHC.Int.Int16 -> GHC.Base.Maybe GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>m2, Unf=OtherCon []] =
    [] \r [i_s4vVx] GHC.Int.$fBitsInt2;

GHC.Int.$fBitsInt16_$cbit [InlPrag=INLINE (sat-args=0)]
  :: GHC.Types.Int -> GHC.Int.Int16
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [i_s4vVy]
        case i_s4vVy of {
          GHC.Types.I# i#_s4vVA ->
              case >=# [i#_s4vVA 64#] of {
                __DEFAULT ->
                    case uncheckedIShiftL# [1# i#_s4vVA] of sat_s4vVC {
                      __DEFAULT ->
                          case narrow16Int# [sat_s4vVC] of sat_s4vVD {
                            __DEFAULT -> GHC.Int.I16# [sat_s4vVD];
                          };
                    };
                1# -> GHC.Int.$fBitsInt3;
              };
        };

GHC.Int.$fBitsInt16_$ctestBit [InlPrag=INLINE (sat-args=0)]
  :: GHC.Int.Int16 -> GHC.Types.Int -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [x_s4vVE i_s4vVF]
        case x_s4vVE of {
          GHC.Int.I16# x#_s4vVH [Occ=Once] ->
              case i_s4vVF of {
                GHC.Types.I# i#_s4vVJ ->
                    case >=# [i#_s4vVJ 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftL# [1# i#_s4vVJ] of sat_s4vVM {
                            __DEFAULT ->
                                case narrow16Int# [sat_s4vVM] of sat_s4vVN {
                                  __DEFAULT ->
                                      case int2Word# [sat_s4vVN] of sat_s4vVO {
                                        __DEFAULT ->
                                            case int2Word# [x#_s4vVH] of sat_s4vVL {
                                              __DEFAULT ->
                                                  case and# [sat_s4vVL sat_s4vVO] of sat_s4vVP {
                                                    __DEFAULT ->
                                                        case word2Int# [sat_s4vVP] of {
                                                          __DEFAULT -> GHC.Types.True [];
                                                          0# -> GHC.Types.False [];
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                      1# -> GHC.Types.False [];
                    };
              };
        };

GHC.Int.$fBitsInt16_$crotateR [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int16 -> GHC.Types.Int -> GHC.Int.Int16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s4vVR eta1_s4vVS]
        case eta_s4vVR of wild_s4vVT {
          GHC.Int.I16# x#_s4vVU [Occ=Once] ->
              case eta1_s4vVS of {
                GHC.Types.I# x1_s4vVW [Occ=Once] ->
                    case negateInt# [x1_s4vVW] of sat_s4vVX {
                      __DEFAULT ->
                          case int2Word# [sat_s4vVX] of sat_s4vVY {
                            __DEFAULT ->
                                case and# [sat_s4vVY 15##] of sat_s4vVZ {
                                  __DEFAULT ->
                                      case word2Int# [sat_s4vVZ] of wild2_s4vW0 {
                                        __DEFAULT ->
                                            case int2Word# [x#_s4vVU] of sat_s4vW2 {
                                              __DEFAULT ->
                                                  case
                                                      narrow16Word# [sat_s4vW2]
                                                  of
                                                  x'#_s4vW1 [Dmd=<S,U>]
                                                  { __DEFAULT ->
                                                        case -# [16# wild2_s4vW0] of sat_s4vW4 {
                                                          __DEFAULT ->
                                                              case
                                                                  uncheckedShiftRL# [x'#_s4vW1
                                                                                     sat_s4vW4]
                                                              of
                                                              sat_s4vW5
                                                              { __DEFAULT ->
                                                                    case
                                                                        uncheckedShiftL# [x'#_s4vW1
                                                                                          wild2_s4vW0]
                                                                    of
                                                                    sat_s4vW3
                                                                    { __DEFAULT ->
                                                                          case
                                                                              or# [sat_s4vW3
                                                                                   sat_s4vW5]
                                                                          of
                                                                          sat_s4vW6
                                                                          { __DEFAULT ->
                                                                                case
                                                                                    word2Int# [sat_s4vW6]
                                                                                of
                                                                                sat_s4vW7
                                                                                { __DEFAULT ->
                                                                                      case
                                                                                          narrow16Int# [sat_s4vW7]
                                                                                      of
                                                                                      sat_s4vW8
                                                                                      { __DEFAULT ->
                                                                                            GHC.Int.I16# [sat_s4vW8];
                                                                                      };
                                                                                };
                                                                          };
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                        0# -> wild_s4vVT;
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fBitsInt16_$ccomplementBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int16 -> GHC.Types.Int -> GHC.Int.Int16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s4vW9 eta1_s4vWa]
        case eta_s4vW9 of wild_s4vWb {
          GHC.Int.I16# x#_s4vWc [Occ=Once] ->
              case eta1_s4vWa of {
                GHC.Types.I# i#_s4vWe ->
                    case >=# [i#_s4vWe 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftL# [1# i#_s4vWe] of sat_s4vWh {
                            __DEFAULT ->
                                case narrow16Int# [sat_s4vWh] of sat_s4vWi {
                                  __DEFAULT ->
                                      case int2Word# [sat_s4vWi] of sat_s4vWj {
                                        __DEFAULT ->
                                            case int2Word# [x#_s4vWc] of sat_s4vWg {
                                              __DEFAULT ->
                                                  case xor# [sat_s4vWg sat_s4vWj] of sat_s4vWk {
                                                    __DEFAULT ->
                                                        case word2Int# [sat_s4vWk] of sat_s4vWl {
                                                          __DEFAULT -> GHC.Int.I16# [sat_s4vWl];
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                      1# -> wild_s4vWb;
                    };
              };
        };

GHC.Int.$fBitsInt16_$cclearBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int16 -> GHC.Types.Int -> GHC.Int.Int16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s4vWm eta1_s4vWn]
        case eta_s4vWm of {
          GHC.Int.I16# x#_s4vWp [Occ=Once*] ->
              case eta1_s4vWn of {
                GHC.Types.I# i#_s4vWr ->
                    case >=# [i#_s4vWr 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftL# [1# i#_s4vWr] of sat_s4vWu {
                            __DEFAULT ->
                                case narrow16Int# [sat_s4vWu] of sat_s4vWv {
                                  __DEFAULT ->
                                      case int2Word# [sat_s4vWv] of sat_s4vWw {
                                        __DEFAULT ->
                                            case not# [sat_s4vWw] of sat_s4vWx {
                                              __DEFAULT ->
                                                  case int2Word# [x#_s4vWp] of sat_s4vWt {
                                                    __DEFAULT ->
                                                        case
                                                            and# [sat_s4vWt sat_s4vWx]
                                                        of
                                                        sat_s4vWy
                                                        { __DEFAULT ->
                                                              case
                                                                  word2Int# [sat_s4vWy]
                                                              of
                                                              sat_s4vWz
                                                              { __DEFAULT ->
                                                                    GHC.Int.I16# [sat_s4vWz];
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                      1# ->
                          case int2Word# [x#_s4vWp] of sat_s4vWA {
                            __DEFAULT ->
                                case and# [sat_s4vWA 18446744073709551615##] of sat_s4vWB {
                                  __DEFAULT ->
                                      case word2Int# [sat_s4vWB] of sat_s4vWC {
                                        __DEFAULT -> GHC.Int.I16# [sat_s4vWC];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fBitsInt16_$csetBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int16 -> GHC.Types.Int -> GHC.Int.Int16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s4vWD eta1_s4vWE]
        case eta_s4vWD of wild_s4vWF {
          GHC.Int.I16# x#_s4vWG [Occ=Once] ->
              case eta1_s4vWE of {
                GHC.Types.I# i#_s4vWI ->
                    case >=# [i#_s4vWI 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftL# [1# i#_s4vWI] of sat_s4vWL {
                            __DEFAULT ->
                                case narrow16Int# [sat_s4vWL] of sat_s4vWM {
                                  __DEFAULT ->
                                      case int2Word# [sat_s4vWM] of sat_s4vWN {
                                        __DEFAULT ->
                                            case int2Word# [x#_s4vWG] of sat_s4vWK {
                                              __DEFAULT ->
                                                  case or# [sat_s4vWK sat_s4vWN] of sat_s4vWO {
                                                    __DEFAULT ->
                                                        case word2Int# [sat_s4vWO] of sat_s4vWP {
                                                          __DEFAULT -> GHC.Int.I16# [sat_s4vWP];
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                      1# -> wild_s4vWF;
                    };
              };
        };

GHC.Int.$fBitsInt16_$crotateL [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int16 -> GHC.Types.Int -> GHC.Int.Int16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Int.$fBitsInt16_$crotate eta_B2 eta_B1;

GHC.Int.$fBitsInt16 [InlPrag=NOUSERINLINE CONLIKE]
  :: Data.Bits.Bits GHC.Int.Int16
[GblId[DFunId], Caf=NoCafRefs] =
    CCS_DONT_CARE Data.Bits.C:Bits! [GHC.Int.$fEqInt16
                                     GHC.Int.$fBitsInt16_$c.&.
                                     GHC.Int.$fBitsInt16_$c.|.
                                     GHC.Int.$fBitsInt16_$cxor
                                     GHC.Int.$fBitsInt16_$ccomplement
                                     GHC.Int.$fBitsInt16_$cshift
                                     GHC.Int.$fBitsInt16_$crotate
                                     GHC.Int.$fBitsInt3
                                     GHC.Int.$fBitsInt16_$cbit
                                     GHC.Int.$fBitsInt16_$csetBit
                                     GHC.Int.$fBitsInt16_$cclearBit
                                     GHC.Int.$fBitsInt16_$ccomplementBit
                                     GHC.Int.$fBitsInt16_$ctestBit
                                     GHC.Int.$fBitsInt16_$cbitSizeMaybe
                                     GHC.Int.$fBitsInt16_$cfiniteBitSize
                                     GHC.Int.$fBitsInt16_$cisSigned
                                     GHC.Int.$fBitsInt16_$cshiftL
                                     GHC.Int.$fBitsInt16_$cunsafeShiftL
                                     GHC.Int.$fBitsInt16_$cshiftR
                                     GHC.Int.$fBitsInt16_$cunsafeShiftR
                                     GHC.Int.$fBitsInt16_$crotateL
                                     GHC.Int.$fBitsInt16_$crotateR
                                     GHC.Int.$fBitsInt16_$cpopCount];

GHC.Int.$fFiniteBitsInt16 [InlPrag=NOUSERINLINE CONLIKE]
  :: Data.Bits.FiniteBits GHC.Int.Int16
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE Data.Bits.C:FiniteBits! [GHC.Int.$fBitsInt16
                                           GHC.Int.$fBitsInt16_$cfiniteBitSize
                                           GHC.Int.$fFiniteBitsInt16_$ccountLeadingZeros
                                           GHC.Int.$fFiniteBitsInt16_$ccountTrailingZeros];

GHC.Int.$fReadInt16_go [Occ=LoopBreaker]
  :: [(GHC.Types.Int, GHC.Base.String)]
     -> [(GHC.Int.Int16, GHC.Base.String)]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s4vWQ]
        case ds_s4vWQ of {
          [] -> [] [];
          : y_s4vWS [Occ=Once!] ys_s4vWT [Occ=Once] ->
              case y_s4vWS of {
                (,) x_s4vWV [Occ=Once!] r_s4vWW [Occ=Once] ->
                    let {
                      sat_s4vX2 [Occ=Once] :: [(GHC.Int.Int16, GHC.Base.String)]
                      [LclId] =
                          [ys_s4vWT] \u [] GHC.Int.$fReadInt16_go ys_s4vWT; } in
                    let {
                      sat_s4vX0 [Occ=Once] :: GHC.Int.Int16
                      [LclId] =
                          [x_s4vWV] \u []
                              case x_s4vWV of {
                                GHC.Types.I# x#_s4vWY [Occ=Once] ->
                                    case narrow16Int# [x#_s4vWY] of sat_s4vWZ {
                                      __DEFAULT -> GHC.Int.I16# [sat_s4vWZ];
                                    };
                              }; } in
                    let {
                      sat_s4vX1 [Occ=Once] :: (GHC.Int.Int16, GHC.Base.String)
                      [LclId] =
                          CCCS (,)! [sat_s4vX0 r_s4vWW];
                    } in  : [sat_s4vX1 sat_s4vX2];
              };
        };

GHC.Int.$fReadInt16_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS GHC.Int.Int16
[GblId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [p_s4vX3 s_s4vX4]
        case
            GHC.Read.$fReadInt_$sreadNumber
                GHC.Read.$fReadInt2
                p_s4vX3
                Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
        of
        sat_s4vX5
        { __DEFAULT ->
              case
                  Text.ParserCombinators.ReadP.run sat_s4vX5 s_s4vX4
              of
              sat_s4vX6
              { __DEFAULT -> GHC.Int.$fReadInt16_go sat_s4vX6;
              };
        };

GHC.Int.$fReadInt3
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Int.Int16 -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,U><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [n_s4vX7 eta_s4vX8]
        let {
          sat_s4vX9 [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS GHC.Int.Int16
          [LclId] =
              [n_s4vX7] \r [eta_B1]
                  GHC.Int.$fReadInt16_$creadsPrec n_s4vX7 eta_B1;
        } in 
          case
              Text.ParserCombinators.ReadP.$wreadS_to_P sat_s4vX9 eta_s4vX8
          of
          { Unit# ww1_s4vXb [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s4vXb];
          };

GHC.Int.$fReadInt2
  :: Text.ParserCombinators.ReadP.P [GHC.Int.Int16]
[GblId] =
    [] \u []
        GHC.Read.list
            GHC.Int.$fReadInt3
            GHC.Int.$fIxInt1
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Int.$fReadInt16_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.Int.Int16]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Int.$fReadInt2 eta_B1;

GHC.Int.$fReadInt1
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        ([GHC.Int.Int16] -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,A><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [n_s4vXc w1_s4vXd]
        case
            Text.ParserCombinators.ReadP.$wreadS_to_P
                GHC.Int.$fReadInt16_$creadList w1_s4vXd
        of
        { Unit# ww1_s4vXf [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s4vXf];
        };

GHC.Int.$fReadInt16 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.Int.Int16
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Int.$fReadInt16_$creadsPrec
                                    GHC.Int.$fReadInt16_$creadList
                                    GHC.Int.$fReadInt3
                                    GHC.Int.$fReadInt1];

GHC.Int.$fIntegralInt16_$cquot [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Int.Int16
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4vXg w1_s4vXh]
        case w_s4vXg of {
          GHC.Int.I16# ww1_s4vXj [Occ=Once*] ->
              case w1_s4vXh of {
                GHC.Int.I16# ww3_s4vXl [Occ=Once!] ->
                    case ww3_s4vXl of wild_s4vXm {
                      __DEFAULT ->
                          case quotInt# [ww1_s4vXj wild_s4vXm] of wild1_s4vXn {
                            __DEFAULT ->
                                case narrow16Int# [wild1_s4vXn] of sat_s4vXo {
                                  __DEFAULT -> GHC.Int.I16# [sat_s4vXo];
                                };
                          };
                      -1# ->
                          case ww1_s4vXj of wild1_s4vXp {
                            __DEFAULT ->
                                case quotInt# [wild1_s4vXp -1#] of sat_s4vXq {
                                  __DEFAULT ->
                                      case narrow16Int# [sat_s4vXq] of sat_s4vXr {
                                        __DEFAULT -> GHC.Int.I16# [sat_s4vXr];
                                      };
                                };
                            -32768# -> GHC.Real.overflowError;
                          };
                      0# -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Int.$fIntegralInt16_$crem
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Int.Int16
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vXu y_s4vXv]
        case ds_s4vXu of {
          GHC.Int.I16# x#_s4vXx [Occ=Once] ->
              case y_s4vXv of {
                GHC.Int.I16# y#_s4vXz [Occ=Once!] ->
                    case y#_s4vXz of wild2_s4vXA {
                      __DEFAULT ->
                          case remInt# [x#_s4vXx wild2_s4vXA] of wild3_s4vXB {
                            __DEFAULT ->
                                case narrow16Int# [wild3_s4vXB] of sat_s4vXC {
                                  __DEFAULT -> GHC.Int.I16# [sat_s4vXC];
                                };
                          };
                      0# -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Int.$w$cdiv [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Str=<S,U><S,1*U>, Unf=OtherCon []] =
    [] \r [ww_s4vXD ww1_s4vXE]
        case ww1_s4vXE of wild_s4vXF {
          __DEFAULT ->
              case GHC.Classes.divInt# ww_s4vXD wild_s4vXF of wild1_s4vXG {
                __DEFAULT -> narrow16Int# [wild1_s4vXG];
              };
          -1# ->
              case ww_s4vXD of wild1_s4vXH {
                __DEFAULT ->
                    case GHC.Classes.divInt# wild1_s4vXH -1# of wild2_s4vXI {
                      __DEFAULT -> narrow16Int# [wild2_s4vXI];
                    };
                -32768# -> GHC.Real.overflowError;
              };
          0# -> GHC.Real.divZeroError;
        };

GHC.Int.$fIntegralInt16_$cdiv [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Int.Int16
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4vXL w1_s4vXM]
        case w_s4vXL of {
          GHC.Int.I16# ww1_s4vXO [Occ=Once] ->
              case w1_s4vXM of {
                GHC.Int.I16# ww3_s4vXQ [Occ=Once] ->
                    case GHC.Int.$w$cdiv ww1_s4vXO ww3_s4vXQ of ww4_s4vXR {
                      __DEFAULT -> GHC.Int.I16# [ww4_s4vXR];
                    };
              };
        };

GHC.Int.$fIntegralInt16_$cmod [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Int.Int16
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4vXS w1_s4vXT]
        case w_s4vXS of {
          GHC.Int.I16# ww1_s4vXV [Occ=Once] ->
              case w1_s4vXT of {
                GHC.Int.I16# ww3_s4vXX [Occ=Once!] ->
                    case ww3_s4vXX of wild_s4vXY {
                      __DEFAULT ->
                          case GHC.Classes.modInt# ww1_s4vXV wild_s4vXY of wild1_s4vXZ {
                            __DEFAULT ->
                                case narrow16Int# [wild1_s4vXZ] of sat_s4vY0 {
                                  __DEFAULT -> GHC.Int.I16# [sat_s4vY0];
                                };
                          };
                      0# -> GHC.Real.divZeroError;
                    };
              };
        };

lvl7_r4kPy :: (GHC.Int.Int16, GHC.Int.Int16)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Real.overflowError GHC.Int.$fBitsInt3];

GHC.Int.$fIntegralInt16_$cquotRem [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> (GHC.Int.Int16, GHC.Int.Int16)
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4vY2 w1_s4vY3]
        case w_s4vY2 of {
          GHC.Int.I16# ww1_s4vY5 [Occ=Once*] ->
              case w1_s4vY3 of {
                GHC.Int.I16# ww3_s4vY7 [Occ=Once!] ->
                    case ww3_s4vY7 of wild_s4vY8 {
                      __DEFAULT ->
                          case quotRemInt# [ww1_s4vY5 wild_s4vY8] of {
                            (#,#) ipv_s4vYa [Occ=Once] ipv1_s4vYb [Occ=Once] ->
                                case narrow16Int# [ipv1_s4vYb] of sat_s4vYe {
                                  __DEFAULT ->
                                      let {
                                        sat_s4vYf [Occ=Once] :: GHC.Int.Int16
                                        [LclId] =
                                            CCCS GHC.Int.I16#! [sat_s4vYe];
                                      } in 
                                        case narrow16Int# [ipv_s4vYa] of sat_s4vYc {
                                          __DEFAULT ->
                                              let {
                                                sat_s4vYd [Occ=Once] :: GHC.Int.Int16
                                                [LclId] =
                                                    CCCS GHC.Int.I16#! [sat_s4vYc];
                                              } in  (,) [sat_s4vYd sat_s4vYf];
                                        };
                                };
                          };
                      -1# ->
                          case ww1_s4vY5 of wild1_s4vYg {
                            __DEFAULT ->
                                case quotRemInt# [wild1_s4vYg -1#] of {
                                  (#,#) ipv_s4vYi [Occ=Once] ipv1_s4vYj [Occ=Once] ->
                                      case narrow16Int# [ipv1_s4vYj] of sat_s4vYm {
                                        __DEFAULT ->
                                            let {
                                              sat_s4vYn [Occ=Once] :: GHC.Int.Int16
                                              [LclId] =
                                                  CCCS GHC.Int.I16#! [sat_s4vYm];
                                            } in 
                                              case narrow16Int# [ipv_s4vYi] of sat_s4vYk {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s4vYl [Occ=Once] :: GHC.Int.Int16
                                                      [LclId] =
                                                          CCCS GHC.Int.I16#! [sat_s4vYk];
                                                    } in  (,) [sat_s4vYl sat_s4vYn];
                                              };
                                      };
                                };
                            -32768# -> lvl7_r4kPy;
                          };
                      0# -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Int.$w$cdivMod [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int#
     -> GHC.Prim.Int# -> (# GHC.Int.Int16, GHC.Int.Int16 #)
[GblId, Arity=2, Str=<S,U><S,1*U>, Unf=OtherCon []] =
    [] \r [ww_s4vYp ww1_s4vYq]
        case ww1_s4vYq of wild_s4vYr {
          __DEFAULT ->
              let-no-escape {
                $j_s4vYs [Occ=Once*T[0], Dmd=<L,1*U(U,U)>]
                  :: (# GHC.Int.Int16, GHC.Int.Int16 #)
                [LclId[JoinId(0)], Unf=OtherCon []] =
                    [ww_s4vYp wild_s4vYr] \r []
                        case ># [ww_s4vYp 0#] of {
                          __DEFAULT ->
                              case <# [ww_s4vYp 0#] of {
                                __DEFAULT ->
                                    case quotRemInt# [ww_s4vYp wild_s4vYr] of {
                                      (#,#) ipv_s4vYw [Occ=Once] ipv1_s4vYx [Occ=Once] ->
                                          case narrow16Int# [ipv1_s4vYx] of sat_s4vYA {
                                            __DEFAULT ->
                                                let {
                                                  sat_s4vYB [Occ=Once] :: GHC.Int.Int16
                                                  [LclId] =
                                                      CCCS GHC.Int.I16#! [sat_s4vYA];
                                                } in 
                                                  case narrow16Int# [ipv_s4vYw] of sat_s4vYy {
                                                    __DEFAULT ->
                                                        let {
                                                          sat_s4vYz [Occ=Once] :: GHC.Int.Int16
                                                          [LclId] =
                                                              CCCS GHC.Int.I16#! [sat_s4vYy];
                                                        } in  (#,#) [sat_s4vYz sat_s4vYB];
                                                  };
                                          };
                                    };
                                1# ->
                                    case ># [wild_s4vYr 0#] of {
                                      __DEFAULT ->
                                          case quotRemInt# [ww_s4vYp wild_s4vYr] of {
                                            (#,#) ipv_s4vYE [Occ=Once] ipv1_s4vYF [Occ=Once] ->
                                                case narrow16Int# [ipv1_s4vYF] of sat_s4vYI {
                                                  __DEFAULT ->
                                                      let {
                                                        sat_s4vYJ [Occ=Once] :: GHC.Int.Int16
                                                        [LclId] =
                                                            CCCS GHC.Int.I16#! [sat_s4vYI];
                                                      } in 
                                                        case narrow16Int# [ipv_s4vYE] of sat_s4vYG {
                                                          __DEFAULT ->
                                                              let {
                                                                sat_s4vYH [Occ=Once]
                                                                  :: GHC.Int.Int16
                                                                [LclId] =
                                                                    CCCS GHC.Int.I16#! [sat_s4vYG];
                                                              } in  (#,#) [sat_s4vYH sat_s4vYJ];
                                                        };
                                                };
                                          };
                                      1# ->
                                          case +# [ww_s4vYp 1#] of sat_s4vYK {
                                            __DEFAULT ->
                                                case quotRemInt# [sat_s4vYK wild_s4vYr] of {
                                                  (#,#) ipv_s4vYM [Occ=Once]
                                                        ipv1_s4vYN [Occ=Once] ->
                                                      case +# [ipv1_s4vYN wild_s4vYr] of sat_s4vYR {
                                                        __DEFAULT ->
                                                            case -# [sat_s4vYR 1#] of sat_s4vYS {
                                                              __DEFAULT ->
                                                                  case
                                                                      narrow16Int# [sat_s4vYS]
                                                                  of
                                                                  sat_s4vYT
                                                                  { __DEFAULT ->
                                                                        let {
                                                                          sat_s4vYU [Occ=Once]
                                                                            :: GHC.Int.Int16
                                                                          [LclId] =
                                                                              CCCS GHC.Int.I16#! [sat_s4vYT];
                                                                        } in 
                                                                          case
                                                                              -# [ipv_s4vYM 1#]
                                                                          of
                                                                          sat_s4vYO
                                                                          { __DEFAULT ->
                                                                                case
                                                                                    narrow16Int# [sat_s4vYO]
                                                                                of
                                                                                sat_s4vYP
                                                                                { __DEFAULT ->
                                                                                      let {
                                                                                        sat_s4vYQ [Occ=Once]
                                                                                          :: GHC.Int.Int16
                                                                                        [LclId] =
                                                                                            CCCS GHC.Int.I16#! [sat_s4vYP];
                                                                                      } in 
                                                                                        (#,#) [sat_s4vYQ
                                                                                               sat_s4vYU];
                                                                                };
                                                                          };
                                                                  };
                                                            };
                                                      };
                                                };
                                          };
                                    };
                              };
                          1# ->
                              case <# [wild_s4vYr 0#] of {
                                __DEFAULT ->
                                    case <# [ww_s4vYp 0#] of {
                                      __DEFAULT ->
                                          case quotRemInt# [ww_s4vYp wild_s4vYr] of {
                                            (#,#) ipv_s4vYY [Occ=Once] ipv1_s4vYZ [Occ=Once] ->
                                                case narrow16Int# [ipv1_s4vYZ] of sat_s4vZ2 {
                                                  __DEFAULT ->
                                                      let {
                                                        sat_s4vZ3 [Occ=Once] :: GHC.Int.Int16
                                                        [LclId] =
                                                            CCCS GHC.Int.I16#! [sat_s4vZ2];
                                                      } in 
                                                        case narrow16Int# [ipv_s4vYY] of sat_s4vZ0 {
                                                          __DEFAULT ->
                                                              let {
                                                                sat_s4vZ1 [Occ=Once]
                                                                  :: GHC.Int.Int16
                                                                [LclId] =
                                                                    CCCS GHC.Int.I16#! [sat_s4vZ0];
                                                              } in  (#,#) [sat_s4vZ1 sat_s4vZ3];
                                                        };
                                                };
                                          };
                                      1# ->
                                          case ># [wild_s4vYr 0#] of {
                                            __DEFAULT ->
                                                case quotRemInt# [ww_s4vYp wild_s4vYr] of {
                                                  (#,#) ipv_s4vZ6 [Occ=Once]
                                                        ipv1_s4vZ7 [Occ=Once] ->
                                                      case narrow16Int# [ipv1_s4vZ7] of sat_s4vZa {
                                                        __DEFAULT ->
                                                            let {
                                                              sat_s4vZb [Occ=Once] :: GHC.Int.Int16
                                                              [LclId] =
                                                                  CCCS GHC.Int.I16#! [sat_s4vZa];
                                                            } in 
                                                              case
                                                                  narrow16Int# [ipv_s4vZ6]
                                                              of
                                                              sat_s4vZ8
                                                              { __DEFAULT ->
                                                                    let {
                                                                      sat_s4vZ9 [Occ=Once]
                                                                        :: GHC.Int.Int16
                                                                      [LclId] =
                                                                          CCCS GHC.Int.I16#! [sat_s4vZ8];
                                                                    } in 
                                                                      (#,#) [sat_s4vZ9 sat_s4vZb];
                                                              };
                                                      };
                                                };
                                            1# ->
                                                case +# [ww_s4vYp 1#] of sat_s4vZc {
                                                  __DEFAULT ->
                                                      case quotRemInt# [sat_s4vZc wild_s4vYr] of {
                                                        (#,#) ipv_s4vZe [Occ=Once]
                                                              ipv1_s4vZf [Occ=Once] ->
                                                            case
                                                                +# [ipv1_s4vZf wild_s4vYr]
                                                            of
                                                            sat_s4vZj
                                                            { __DEFAULT ->
                                                                  case
                                                                      -# [sat_s4vZj 1#]
                                                                  of
                                                                  sat_s4vZk
                                                                  { __DEFAULT ->
                                                                        case
                                                                            narrow16Int# [sat_s4vZk]
                                                                        of
                                                                        sat_s4vZl
                                                                        { __DEFAULT ->
                                                                              let {
                                                                                sat_s4vZm [Occ=Once]
                                                                                  :: GHC.Int.Int16
                                                                                [LclId] =
                                                                                    CCCS GHC.Int.I16#! [sat_s4vZl];
                                                                              } in 
                                                                                case
                                                                                    -# [ipv_s4vZe
                                                                                        1#]
                                                                                of
                                                                                sat_s4vZg
                                                                                { __DEFAULT ->
                                                                                      case
                                                                                          narrow16Int# [sat_s4vZg]
                                                                                      of
                                                                                      sat_s4vZh
                                                                                      { __DEFAULT ->
                                                                                            let {
                                                                                              sat_s4vZi [Occ=Once]
                                                                                                :: GHC.Int.Int16
                                                                                              [LclId] =
                                                                                                  CCCS GHC.Int.I16#! [sat_s4vZh];
                                                                                            } in 
                                                                                              (#,#) [sat_s4vZi
                                                                                                     sat_s4vZm];
                                                                                      };
                                                                                };
                                                                        };
                                                                  };
                                                            };
                                                      };
                                                };
                                          };
                                    };
                                1# ->
                                    case -# [ww_s4vYp 1#] of sat_s4vZn {
                                      __DEFAULT ->
                                          case quotRemInt# [sat_s4vZn wild_s4vYr] of {
                                            (#,#) ipv_s4vZp [Occ=Once] ipv1_s4vZq [Occ=Once] ->
                                                case +# [ipv1_s4vZq wild_s4vYr] of sat_s4vZu {
                                                  __DEFAULT ->
                                                      case +# [sat_s4vZu 1#] of sat_s4vZv {
                                                        __DEFAULT ->
                                                            case
                                                                narrow16Int# [sat_s4vZv]
                                                            of
                                                            sat_s4vZw
                                                            { __DEFAULT ->
                                                                  let {
                                                                    sat_s4vZx [Occ=Once]
                                                                      :: GHC.Int.Int16
                                                                    [LclId] =
                                                                        CCCS GHC.Int.I16#! [sat_s4vZw];
                                                                  } in 
                                                                    case
                                                                        -# [ipv_s4vZp 1#]
                                                                    of
                                                                    sat_s4vZr
                                                                    { __DEFAULT ->
                                                                          case
                                                                              narrow16Int# [sat_s4vZr]
                                                                          of
                                                                          sat_s4vZs
                                                                          { __DEFAULT ->
                                                                                let {
                                                                                  sat_s4vZt [Occ=Once]
                                                                                    :: GHC.Int.Int16
                                                                                  [LclId] =
                                                                                      CCCS GHC.Int.I16#! [sat_s4vZs];
                                                                                } in 
                                                                                  (#,#) [sat_s4vZt
                                                                                         sat_s4vZx];
                                                                          };
                                                                    };
                                                            };
                                                      };
                                                };
                                          };
                                    };
                              };
                        };
              } in 
                case wild_s4vYr of {
                  __DEFAULT -> $j_s4vYs;
                  -1# ->
                      case ww_s4vYp of {
                        __DEFAULT -> $j_s4vYs;
                        -32768# -> (#,#) [GHC.Real.overflowError GHC.Int.$fBitsInt3];
                      };
                };
          0# -> GHC.Real.divZeroError;
        };

GHC.Int.$fIntegralInt16_$cdivMod [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int16 -> GHC.Int.Int16 -> (GHC.Int.Int16, GHC.Int.Int16)
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4vZB w1_s4vZC]
        case w_s4vZB of {
          GHC.Int.I16# ww1_s4vZE [Occ=Once] ->
              case w1_s4vZC of {
                GHC.Int.I16# ww3_s4vZG [Occ=Once] ->
                    case GHC.Int.$w$cdivMod ww1_s4vZE ww3_s4vZG of {
                      (#,#) ww5_s4vZI [Occ=Once] ww6_s4vZJ [Occ=Once] ->
                          (,) [ww5_s4vZI ww6_s4vZJ];
                    };
              };
        };

GHC.Int.$fRealInt16_$ctoRational [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int16 -> GHC.Real.Rational
[GblId, Arity=1, Str=<S(S),1*U(U)>m, Unf=OtherCon []] =
    [] \r [w_s4vZK]
        case w_s4vZK of {
          GHC.Int.I16# ww1_s4vZM [Occ=Once] ->
              case GHC.Integer.Type.smallInteger ww1_s4vZM of sat_s4vZN {
                __DEFAULT ->
                    case
                        GHC.Integer.Type.timesInteger sat_s4vZN GHC.Int.$fRealInt1
                    of
                    sat_s4vZO
                    { __DEFAULT ->
                          case GHC.Real.$w$sreduce sat_s4vZO GHC.Int.$fRealInt1 of {
                            (#,#) ww3_s4vZQ [Occ=Once] ww4_s4vZR [Occ=Once] ->
                                GHC.Real.:% [ww3_s4vZQ ww4_s4vZR];
                          };
                    };
              };
        };

GHC.Int.$fRealInt16 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Real.Real GHC.Int.Int16
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Real.C:Real! [GHC.Int.$fNumInt16
                                    GHC.Int.$fOrdInt16
                                    GHC.Int.$fRealInt16_$ctoRational];

GHC.Int.$fIntegralInt16 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Real.Integral GHC.Int.Int16
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Real.C:Integral! [GHC.Int.$fRealInt16
                                        GHC.Int.$fEnumInt16
                                        GHC.Int.$fIntegralInt16_$cquot
                                        GHC.Int.$fIntegralInt16_$crem
                                        GHC.Int.$fIntegralInt16_$cdiv
                                        GHC.Int.$fIntegralInt16_$cmod
                                        GHC.Int.$fIntegralInt16_$cquotRem
                                        GHC.Int.$fIntegralInt16_$cdivMod
                                        GHC.Int.$fIntegralInt16_$ctoInteger];

GHC.Int.$fIxInt16_$cunsafeIndex
  :: (GHC.Int.Int16, GHC.Int.Int16) -> GHC.Int.Int16 -> GHC.Types.Int
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S(S)L),1*U(1*U(U),A)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4vZS i_s4vZT]
        case ds_s4vZS of {
          (,) m_s4vZV [Occ=Once!] _ [Occ=Dead] ->
              case i_s4vZT of {
                GHC.Int.I16# x#_s4vZY [Occ=Once] ->
                    case m_s4vZV of {
                      GHC.Int.I16# x#1_s4w00 [Occ=Once] ->
                          case -# [x#_s4vZY x#1_s4w00] of sat_s4w01 {
                            __DEFAULT -> GHC.Types.I# [sat_s4w01];
                          };
                    };
              };
        };

GHC.Int.$fIxInt16_$crange
  :: (GHC.Int.Int16, GHC.Int.Int16) -> [GHC.Int.Int16]
[GblId,
 Arity=1,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>,
 Unf=OtherCon []] =
    [] \r [ds_s4w02]
        case ds_s4w02 of {
          (,) m_s4w04 [Occ=Once] n_s4w05 [Occ=Once] ->
              GHC.Int.$fEnumInt16_$cenumFromTo m_s4w04 n_s4w05;
        };

GHC.Int.$fIxInt16_$crangeSize
  :: (GHC.Int.Int16, GHC.Int.Int16) -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>m,
 Unf=OtherCon []] =
    [] \r [b_s4w06]
        case b_s4w06 of {
          (,) _l_s4w08 [Occ=Once!] h_s4w09 [Occ=Once!] ->
              case _l_s4w08 of {
                GHC.Int.I16# x_s4w0b ->
                    case h_s4w09 of {
                      GHC.Int.I16# y_s4w0d ->
                          case <=# [x_s4w0b y_s4w0d] of {
                            __DEFAULT -> GHC.Int.$fIxInt1;
                            1# ->
                                case -# [y_s4w0d x_s4w0b] of sat_s4w0f {
                                  __DEFAULT ->
                                      case +# [sat_s4w0f 1#] of sat_s4w0g {
                                        __DEFAULT -> GHC.Types.I# [sat_s4w0g];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fIxInt16_$cunsafeRangeSize
  :: (GHC.Int.Int16, GHC.Int.Int16) -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>m,
 Unf=OtherCon []] =
    [] \r [b_s4w0h]
        case b_s4w0h of {
          (,) _l_s4w0j [Occ=Once!] h_s4w0k [Occ=Once!] ->
              case h_s4w0k of {
                GHC.Int.I16# x#_s4w0m [Occ=Once] ->
                    case _l_s4w0j of {
                      GHC.Int.I16# x#1_s4w0o [Occ=Once] ->
                          case -# [x#_s4w0m x#1_s4w0o] of sat_s4w0p {
                            __DEFAULT ->
                                case +# [sat_s4w0p 1#] of sat_s4w0q {
                                  __DEFAULT -> GHC.Types.I# [sat_s4w0q];
                                };
                          };
                    };
              };
        };

GHC.Int.$fIxInt16_$cindex [InlPrag=INLINE (sat-args=2)]
  :: (GHC.Int.Int16, GHC.Int.Int16) -> GHC.Int.Int16 -> GHC.Types.Int
[GblId,
 Arity=2,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s4w0r eta1_s4w0s]
        case eta_s4w0r of {
          (,) m_s4w0u [Occ=Once!] n_s4w0v [Occ=Once!] ->
              case m_s4w0u of {
                GHC.Int.I16# x_s4w0x ->
                    case eta1_s4w0s of {
                      GHC.Int.I16# y_s4w0z ->
                          case <=# [x_s4w0x y_s4w0z] of {
                            __DEFAULT -> GHC.Arr.hopelessIndexError;
                            1# ->
                                case n_s4w0v of {
                                  GHC.Int.I16# y1_s4w0C [Occ=Once] ->
                                      case <=# [y_s4w0z y1_s4w0C] of {
                                        __DEFAULT -> GHC.Arr.hopelessIndexError;
                                        1# ->
                                            case -# [y_s4w0z x_s4w0x] of sat_s4w0E {
                                              __DEFAULT -> GHC.Types.I# [sat_s4w0E];
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fIxInt16 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Arr.Ix GHC.Int.Int16
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Arr.C:Ix! [GHC.Int.$fOrdInt16
                                 GHC.Int.$fIxInt16_$crange
                                 GHC.Int.$fIxInt16_$cindex
                                 GHC.Int.$fIxInt16_$cunsafeIndex
                                 GHC.Int.$fIxInt16_$cinRange
                                 GHC.Int.$fIxInt16_$crangeSize
                                 GHC.Int.$fIxInt16_$cunsafeRangeSize];

GHC.Int.eqInt32 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4w0F ds1_s4w0G]
        case ds_s4w0F of {
          GHC.Int.I32# x_s4w0I [Occ=Once] ->
              case ds1_s4w0G of {
                GHC.Int.I32# y_s4w0K [Occ=Once] ->
                    case ==# [x_s4w0I y_s4w0K] of sat_s4w0L {
                      __DEFAULT -> tagToEnum# [sat_s4w0L];
                    };
              };
        };

GHC.Int.$fEqInt32 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.Int.Int32
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.Int.eqInt32 GHC.Int.neInt32];

GHC.Int.gtInt32 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4w0M ds1_s4w0N]
        case ds_s4w0M of {
          GHC.Int.I32# x_s4w0P [Occ=Once] ->
              case ds1_s4w0N of {
                GHC.Int.I32# y_s4w0R [Occ=Once] ->
                    case ># [x_s4w0P y_s4w0R] of sat_s4w0S {
                      __DEFAULT -> tagToEnum# [sat_s4w0S];
                    };
              };
        };

GHC.Int.geInt32 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4w0T ds1_s4w0U]
        case ds_s4w0T of {
          GHC.Int.I32# x_s4w0W [Occ=Once] ->
              case ds1_s4w0U of {
                GHC.Int.I32# y_s4w0Y [Occ=Once] ->
                    case >=# [x_s4w0W y_s4w0Y] of sat_s4w0Z {
                      __DEFAULT -> tagToEnum# [sat_s4w0Z];
                    };
              };
        };

GHC.Int.ltInt32 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4w10 ds1_s4w11]
        case ds_s4w10 of {
          GHC.Int.I32# x_s4w13 [Occ=Once] ->
              case ds1_s4w11 of {
                GHC.Int.I32# y_s4w15 [Occ=Once] ->
                    case <# [x_s4w13 y_s4w15] of sat_s4w16 {
                      __DEFAULT -> tagToEnum# [sat_s4w16];
                    };
              };
        };

GHC.Int.leInt32 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4w17 ds1_s4w18]
        case ds_s4w17 of {
          GHC.Int.I32# x_s4w1a [Occ=Once] ->
              case ds1_s4w18 of {
                GHC.Int.I32# y_s4w1c [Occ=Once] ->
                    case <=# [x_s4w1a y_s4w1c] of sat_s4w1d {
                      __DEFAULT -> tagToEnum# [sat_s4w1d];
                    };
              };
        };

GHC.Int.$fOrdInt32_$ccompare
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [x_s4w1e y_s4w1f]
        case x_s4w1e of {
          GHC.Int.I32# x1_s4w1h ->
              case y_s4w1f of {
                GHC.Int.I32# y1_s4w1j ->
                    case ==# [x1_s4w1h y1_s4w1j] of {
                      __DEFAULT ->
                          case <=# [x1_s4w1h y1_s4w1j] of {
                            __DEFAULT -> GHC.Types.GT [];
                            1# -> GHC.Types.LT [];
                          };
                      1# -> GHC.Types.EQ [];
                    };
              };
        };

GHC.Int.$fOrdInt32_$cmax
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> GHC.Int.Int32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s4w1m y_s4w1n]
        case x_s4w1m of wild_s4w1o {
          GHC.Int.I32# x1_s4w1p [Occ=Once] ->
              case y_s4w1n of wild1_s4w1q {
                GHC.Int.I32# y1_s4w1r [Occ=Once] ->
                    case <=# [x1_s4w1p y1_s4w1r] of {
                      __DEFAULT -> wild_s4w1o;
                      1# -> wild1_s4w1q;
                    };
              };
        };

GHC.Int.$fOrdInt32_$cmin
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> GHC.Int.Int32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s4w1t y_s4w1u]
        case x_s4w1t of wild_s4w1v {
          GHC.Int.I32# x1_s4w1w [Occ=Once] ->
              case y_s4w1u of wild1_s4w1x {
                GHC.Int.I32# y1_s4w1y [Occ=Once] ->
                    case <=# [x1_s4w1w y1_s4w1y] of {
                      __DEFAULT -> wild1_s4w1x;
                      1# -> wild_s4w1v;
                    };
              };
        };

GHC.Int.$fOrdInt32 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord GHC.Int.Int32
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.Int.$fEqInt32
                                      GHC.Int.$fOrdInt32_$ccompare
                                      GHC.Int.ltInt32
                                      GHC.Int.leInt32
                                      GHC.Int.gtInt32
                                      GHC.Int.geInt32
                                      GHC.Int.$fOrdInt32_$cmax
                                      GHC.Int.$fOrdInt32_$cmin];

GHC.Int.$fIxInt32_$cinRange
  :: (GHC.Int.Int32, GHC.Int.Int32)
     -> GHC.Int.Int32 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S(S)L),1*U(1*U(U),1*U(U))><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4w1A i_s4w1B]
        case ds_s4w1A of {
          (,) m_s4w1D [Occ=Once!] n_s4w1E [Occ=Once!] ->
              case m_s4w1D of {
                GHC.Int.I32# x_s4w1G [Occ=Once] ->
                    case i_s4w1B of {
                      GHC.Int.I32# y_s4w1I ->
                          case <=# [x_s4w1G y_s4w1I] of {
                            __DEFAULT -> GHC.Types.False [];
                            1# ->
                                case n_s4w1E of {
                                  GHC.Int.I32# y1_s4w1L [Occ=Once] ->
                                      case <=# [y_s4w1I y1_s4w1L] of sat_s4w1M {
                                        __DEFAULT -> tagToEnum# [sat_s4w1M];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fNumInt3 :: GHC.Int.Int32
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I32#! [1#];

GHC.Int.$fNumInt32_$csignum :: GHC.Int.Int32 -> GHC.Int.Int32
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s4w1N]
        case x_s4w1N of {
          GHC.Int.I32# x1_s4w1P ->
              case ># [x1_s4w1P 0#] of {
                __DEFAULT ->
                    case x1_s4w1P of {
                      __DEFAULT -> GHC.Int.$fNumInt4;
                      0# -> GHC.Int.$fBitsInt6;
                    };
                1# -> GHC.Int.$fNumInt3;
              };
        };

GHC.Int.$fNumInt32_$cabs :: GHC.Int.Int32 -> GHC.Int.Int32
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s4w1S]
        case x_s4w1S of wild_s4w1T {
          GHC.Int.I32# x1_s4w1U ->
              case >=# [x1_s4w1U 0#] of {
                __DEFAULT ->
                    case negateInt# [x1_s4w1U] of sat_s4w1W {
                      __DEFAULT ->
                          case narrow32Int# [sat_s4w1W] of sat_s4w1X {
                            __DEFAULT -> GHC.Int.I32# [sat_s4w1X];
                          };
                    };
                1# -> wild_s4w1T;
              };
        };

GHC.Int.$fNumInt32 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Num.Num GHC.Int.Int32
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Num.C:Num! [GHC.Int.$fNumInt32_$c+
                                  GHC.Int.$fNumInt32_$c-
                                  GHC.Int.$fNumInt32_$c*
                                  GHC.Int.$fNumInt32_$cnegate
                                  GHC.Int.$fNumInt32_$cabs
                                  GHC.Int.$fNumInt32_$csignum
                                  GHC.Int.$fNumInt32_$cfromInteger];

GHC.Int.$fBitsInt5 :: GHC.Base.Maybe GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [GHC.Int.$fBitsInt4];

GHC.Int.$fBitsInt32_$cbitSizeMaybe
  :: GHC.Int.Int32 -> GHC.Base.Maybe GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>m2, Unf=OtherCon []] =
    [] \r [i_s4w1Y] GHC.Int.$fBitsInt5;

GHC.Int.$fBitsInt32_$cbit [InlPrag=INLINE (sat-args=0)]
  :: GHC.Types.Int -> GHC.Int.Int32
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [i_s4w1Z]
        case i_s4w1Z of {
          GHC.Types.I# i#_s4w21 ->
              case >=# [i#_s4w21 64#] of {
                __DEFAULT ->
                    case uncheckedIShiftL# [1# i#_s4w21] of sat_s4w23 {
                      __DEFAULT ->
                          case narrow32Int# [sat_s4w23] of sat_s4w24 {
                            __DEFAULT -> GHC.Int.I32# [sat_s4w24];
                          };
                    };
                1# -> GHC.Int.$fBitsInt6;
              };
        };

GHC.Int.$fBitsInt32_$ctestBit [InlPrag=INLINE (sat-args=0)]
  :: GHC.Int.Int32 -> GHC.Types.Int -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [x_s4w25 i_s4w26]
        case x_s4w25 of {
          GHC.Int.I32# x#_s4w28 [Occ=Once] ->
              case i_s4w26 of {
                GHC.Types.I# i#_s4w2a ->
                    case >=# [i#_s4w2a 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftL# [1# i#_s4w2a] of sat_s4w2d {
                            __DEFAULT ->
                                case narrow32Int# [sat_s4w2d] of sat_s4w2e {
                                  __DEFAULT ->
                                      case int2Word# [sat_s4w2e] of sat_s4w2f {
                                        __DEFAULT ->
                                            case int2Word# [x#_s4w28] of sat_s4w2c {
                                              __DEFAULT ->
                                                  case and# [sat_s4w2c sat_s4w2f] of sat_s4w2g {
                                                    __DEFAULT ->
                                                        case word2Int# [sat_s4w2g] of {
                                                          __DEFAULT -> GHC.Types.True [];
                                                          0# -> GHC.Types.False [];
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                      1# -> GHC.Types.False [];
                    };
              };
        };

GHC.Int.$fBitsInt32_$crotateR [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int32 -> GHC.Types.Int -> GHC.Int.Int32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s4w2i eta1_s4w2j]
        case eta_s4w2i of wild_s4w2k {
          GHC.Int.I32# x#_s4w2l [Occ=Once] ->
              case eta1_s4w2j of {
                GHC.Types.I# x1_s4w2n [Occ=Once] ->
                    case negateInt# [x1_s4w2n] of sat_s4w2o {
                      __DEFAULT ->
                          case int2Word# [sat_s4w2o] of sat_s4w2p {
                            __DEFAULT ->
                                case and# [sat_s4w2p 31##] of sat_s4w2q {
                                  __DEFAULT ->
                                      case word2Int# [sat_s4w2q] of wild2_s4w2r {
                                        __DEFAULT ->
                                            case int2Word# [x#_s4w2l] of sat_s4w2t {
                                              __DEFAULT ->
                                                  case
                                                      narrow32Word# [sat_s4w2t]
                                                  of
                                                  x'#_s4w2s [Dmd=<S,U>]
                                                  { __DEFAULT ->
                                                        case -# [32# wild2_s4w2r] of sat_s4w2v {
                                                          __DEFAULT ->
                                                              case
                                                                  uncheckedShiftRL# [x'#_s4w2s
                                                                                     sat_s4w2v]
                                                              of
                                                              sat_s4w2w
                                                              { __DEFAULT ->
                                                                    case
                                                                        uncheckedShiftL# [x'#_s4w2s
                                                                                          wild2_s4w2r]
                                                                    of
                                                                    sat_s4w2u
                                                                    { __DEFAULT ->
                                                                          case
                                                                              or# [sat_s4w2u
                                                                                   sat_s4w2w]
                                                                          of
                                                                          sat_s4w2x
                                                                          { __DEFAULT ->
                                                                                case
                                                                                    word2Int# [sat_s4w2x]
                                                                                of
                                                                                sat_s4w2y
                                                                                { __DEFAULT ->
                                                                                      case
                                                                                          narrow32Int# [sat_s4w2y]
                                                                                      of
                                                                                      sat_s4w2z
                                                                                      { __DEFAULT ->
                                                                                            GHC.Int.I32# [sat_s4w2z];
                                                                                      };
                                                                                };
                                                                          };
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                        0# -> wild_s4w2k;
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fBitsInt32_$ccomplementBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int32 -> GHC.Types.Int -> GHC.Int.Int32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s4w2A eta1_s4w2B]
        case eta_s4w2A of wild_s4w2C {
          GHC.Int.I32# x#_s4w2D [Occ=Once] ->
              case eta1_s4w2B of {
                GHC.Types.I# i#_s4w2F ->
                    case >=# [i#_s4w2F 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftL# [1# i#_s4w2F] of sat_s4w2I {
                            __DEFAULT ->
                                case narrow32Int# [sat_s4w2I] of sat_s4w2J {
                                  __DEFAULT ->
                                      case int2Word# [sat_s4w2J] of sat_s4w2K {
                                        __DEFAULT ->
                                            case int2Word# [x#_s4w2D] of sat_s4w2H {
                                              __DEFAULT ->
                                                  case xor# [sat_s4w2H sat_s4w2K] of sat_s4w2L {
                                                    __DEFAULT ->
                                                        case word2Int# [sat_s4w2L] of sat_s4w2M {
                                                          __DEFAULT -> GHC.Int.I32# [sat_s4w2M];
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                      1# -> wild_s4w2C;
                    };
              };
        };

GHC.Int.$fBitsInt32_$cclearBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int32 -> GHC.Types.Int -> GHC.Int.Int32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s4w2N eta1_s4w2O]
        case eta_s4w2N of {
          GHC.Int.I32# x#_s4w2Q [Occ=Once*] ->
              case eta1_s4w2O of {
                GHC.Types.I# i#_s4w2S ->
                    case >=# [i#_s4w2S 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftL# [1# i#_s4w2S] of sat_s4w2V {
                            __DEFAULT ->
                                case narrow32Int# [sat_s4w2V] of sat_s4w2W {
                                  __DEFAULT ->
                                      case int2Word# [sat_s4w2W] of sat_s4w2X {
                                        __DEFAULT ->
                                            case not# [sat_s4w2X] of sat_s4w2Y {
                                              __DEFAULT ->
                                                  case int2Word# [x#_s4w2Q] of sat_s4w2U {
                                                    __DEFAULT ->
                                                        case
                                                            and# [sat_s4w2U sat_s4w2Y]
                                                        of
                                                        sat_s4w2Z
                                                        { __DEFAULT ->
                                                              case
                                                                  word2Int# [sat_s4w2Z]
                                                              of
                                                              sat_s4w30
                                                              { __DEFAULT ->
                                                                    GHC.Int.I32# [sat_s4w30];
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                      1# ->
                          case int2Word# [x#_s4w2Q] of sat_s4w31 {
                            __DEFAULT ->
                                case and# [sat_s4w31 18446744073709551615##] of sat_s4w32 {
                                  __DEFAULT ->
                                      case word2Int# [sat_s4w32] of sat_s4w33 {
                                        __DEFAULT -> GHC.Int.I32# [sat_s4w33];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fBitsInt32_$csetBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int32 -> GHC.Types.Int -> GHC.Int.Int32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s4w34 eta1_s4w35]
        case eta_s4w34 of wild_s4w36 {
          GHC.Int.I32# x#_s4w37 [Occ=Once] ->
              case eta1_s4w35 of {
                GHC.Types.I# i#_s4w39 ->
                    case >=# [i#_s4w39 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftL# [1# i#_s4w39] of sat_s4w3c {
                            __DEFAULT ->
                                case narrow32Int# [sat_s4w3c] of sat_s4w3d {
                                  __DEFAULT ->
                                      case int2Word# [sat_s4w3d] of sat_s4w3e {
                                        __DEFAULT ->
                                            case int2Word# [x#_s4w37] of sat_s4w3b {
                                              __DEFAULT ->
                                                  case or# [sat_s4w3b sat_s4w3e] of sat_s4w3f {
                                                    __DEFAULT ->
                                                        case word2Int# [sat_s4w3f] of sat_s4w3g {
                                                          __DEFAULT -> GHC.Int.I32# [sat_s4w3g];
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                      1# -> wild_s4w36;
                    };
              };
        };

GHC.Int.$fBitsInt32_$crotateL [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int32 -> GHC.Types.Int -> GHC.Int.Int32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Int.$fBitsInt32_$crotate eta_B2 eta_B1;

GHC.Int.$fBitsInt32 [InlPrag=NOUSERINLINE CONLIKE]
  :: Data.Bits.Bits GHC.Int.Int32
[GblId[DFunId], Caf=NoCafRefs] =
    CCS_DONT_CARE Data.Bits.C:Bits! [GHC.Int.$fEqInt32
                                     GHC.Int.$fBitsInt32_$c.&.
                                     GHC.Int.$fBitsInt32_$c.|.
                                     GHC.Int.$fBitsInt32_$cxor
                                     GHC.Int.$fBitsInt32_$ccomplement
                                     GHC.Int.$fBitsInt32_$cshift
                                     GHC.Int.$fBitsInt32_$crotate
                                     GHC.Int.$fBitsInt6
                                     GHC.Int.$fBitsInt32_$cbit
                                     GHC.Int.$fBitsInt32_$csetBit
                                     GHC.Int.$fBitsInt32_$cclearBit
                                     GHC.Int.$fBitsInt32_$ccomplementBit
                                     GHC.Int.$fBitsInt32_$ctestBit
                                     GHC.Int.$fBitsInt32_$cbitSizeMaybe
                                     GHC.Int.$fBitsInt32_$cfiniteBitSize
                                     GHC.Int.$fBitsInt32_$cisSigned
                                     GHC.Int.$fBitsInt32_$cshiftL
                                     GHC.Int.$fBitsInt32_$cunsafeShiftL
                                     GHC.Int.$fBitsInt32_$cshiftR
                                     GHC.Int.$fBitsInt32_$cunsafeShiftR
                                     GHC.Int.$fBitsInt32_$crotateL
                                     GHC.Int.$fBitsInt32_$crotateR
                                     GHC.Int.$fBitsInt32_$cpopCount];

GHC.Int.$fFiniteBitsInt32 [InlPrag=NOUSERINLINE CONLIKE]
  :: Data.Bits.FiniteBits GHC.Int.Int32
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE Data.Bits.C:FiniteBits! [GHC.Int.$fBitsInt32
                                           GHC.Int.$fBitsInt32_$cfiniteBitSize
                                           GHC.Int.$fFiniteBitsInt32_$ccountLeadingZeros
                                           GHC.Int.$fFiniteBitsInt32_$ccountTrailingZeros];

GHC.Int.$fReadInt32_go [Occ=LoopBreaker]
  :: [(GHC.Types.Int, GHC.Base.String)]
     -> [(GHC.Int.Int32, GHC.Base.String)]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s4w3h]
        case ds_s4w3h of {
          [] -> [] [];
          : y_s4w3j [Occ=Once!] ys_s4w3k [Occ=Once] ->
              case y_s4w3j of {
                (,) x_s4w3m [Occ=Once!] r_s4w3n [Occ=Once] ->
                    let {
                      sat_s4w3t [Occ=Once] :: [(GHC.Int.Int32, GHC.Base.String)]
                      [LclId] =
                          [ys_s4w3k] \u [] GHC.Int.$fReadInt32_go ys_s4w3k; } in
                    let {
                      sat_s4w3r [Occ=Once] :: GHC.Int.Int32
                      [LclId] =
                          [x_s4w3m] \u []
                              case x_s4w3m of {
                                GHC.Types.I# x#_s4w3p [Occ=Once] ->
                                    case narrow32Int# [x#_s4w3p] of sat_s4w3q {
                                      __DEFAULT -> GHC.Int.I32# [sat_s4w3q];
                                    };
                              }; } in
                    let {
                      sat_s4w3s [Occ=Once] :: (GHC.Int.Int32, GHC.Base.String)
                      [LclId] =
                          CCCS (,)! [sat_s4w3r r_s4w3n];
                    } in  : [sat_s4w3s sat_s4w3t];
              };
        };

GHC.Int.$fReadInt32_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS GHC.Int.Int32
[GblId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [p_s4w3u s_s4w3v]
        case
            GHC.Read.$fReadInt_$sreadNumber
                GHC.Read.$fReadInt2
                p_s4w3u
                Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
        of
        sat_s4w3w
        { __DEFAULT ->
              case
                  Text.ParserCombinators.ReadP.run sat_s4w3w s_s4w3v
              of
              sat_s4w3x
              { __DEFAULT -> GHC.Int.$fReadInt32_go sat_s4w3x;
              };
        };

GHC.Int.$fReadInt6
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Int.Int32 -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,U><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [n_s4w3y eta_s4w3z]
        let {
          sat_s4w3A [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS GHC.Int.Int32
          [LclId] =
              [n_s4w3y] \r [eta_B1]
                  GHC.Int.$fReadInt32_$creadsPrec n_s4w3y eta_B1;
        } in 
          case
              Text.ParserCombinators.ReadP.$wreadS_to_P sat_s4w3A eta_s4w3z
          of
          { Unit# ww1_s4w3C [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s4w3C];
          };

GHC.Int.$fReadInt5
  :: Text.ParserCombinators.ReadP.P [GHC.Int.Int32]
[GblId] =
    [] \u []
        GHC.Read.list
            GHC.Int.$fReadInt6
            GHC.Int.$fIxInt1
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Int.$fReadInt32_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.Int.Int32]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Int.$fReadInt5 eta_B1;

GHC.Int.$fReadInt4
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        ([GHC.Int.Int32] -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,A><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [n_s4w3D w1_s4w3E]
        case
            Text.ParserCombinators.ReadP.$wreadS_to_P
                GHC.Int.$fReadInt32_$creadList w1_s4w3E
        of
        { Unit# ww1_s4w3G [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s4w3G];
        };

GHC.Int.$fReadInt32 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.Int.Int32
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Int.$fReadInt32_$creadsPrec
                                    GHC.Int.$fReadInt32_$creadList
                                    GHC.Int.$fReadInt6
                                    GHC.Int.$fReadInt4];

GHC.Int.$fIntegralInt32_$cquot [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> GHC.Int.Int32
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4w3H w1_s4w3I]
        case w_s4w3H of {
          GHC.Int.I32# ww1_s4w3K [Occ=Once*] ->
              case w1_s4w3I of {
                GHC.Int.I32# ww3_s4w3M [Occ=Once!] ->
                    case ww3_s4w3M of wild_s4w3N {
                      __DEFAULT ->
                          case quotInt# [ww1_s4w3K wild_s4w3N] of wild1_s4w3O {
                            __DEFAULT ->
                                case narrow32Int# [wild1_s4w3O] of sat_s4w3P {
                                  __DEFAULT -> GHC.Int.I32# [sat_s4w3P];
                                };
                          };
                      -1# ->
                          case ww1_s4w3K of wild1_s4w3Q {
                            __DEFAULT ->
                                case quotInt# [wild1_s4w3Q -1#] of sat_s4w3R {
                                  __DEFAULT ->
                                      case narrow32Int# [sat_s4w3R] of sat_s4w3S {
                                        __DEFAULT -> GHC.Int.I32# [sat_s4w3S];
                                      };
                                };
                            -2147483648# -> GHC.Real.overflowError;
                          };
                      0# -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Int.$fIntegralInt32_$crem
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> GHC.Int.Int32
[GblId, Arity=2, Str=<S,1*U(U)><S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [ds_s4w3V y_s4w3W]
        case ds_s4w3V of {
          GHC.Int.I32# x#_s4w3Y [Occ=Once] ->
              case y_s4w3W of {
                GHC.Int.I32# y#_s4w40 [Occ=Once!] ->
                    case y#_s4w40 of wild2_s4w41 {
                      __DEFAULT ->
                          case remInt# [x#_s4w3Y wild2_s4w41] of wild3_s4w42 {
                            __DEFAULT ->
                                case narrow32Int# [wild3_s4w42] of sat_s4w43 {
                                  __DEFAULT -> GHC.Int.I32# [sat_s4w43];
                                };
                          };
                      -1# -> GHC.Int.$fBitsInt6;
                      0# -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Int.$w$cdiv1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Str=<S,U><S,1*U>, Unf=OtherCon []] =
    [] \r [ww_s4w44 ww1_s4w45]
        case ww1_s4w45 of wild_s4w46 {
          __DEFAULT ->
              case GHC.Classes.divInt# ww_s4w44 wild_s4w46 of wild1_s4w47 {
                __DEFAULT -> narrow32Int# [wild1_s4w47];
              };
          -1# ->
              case ww_s4w44 of wild1_s4w48 {
                __DEFAULT ->
                    case GHC.Classes.divInt# wild1_s4w48 -1# of wild2_s4w49 {
                      __DEFAULT -> narrow32Int# [wild2_s4w49];
                    };
                -2147483648# -> GHC.Real.overflowError;
              };
          0# -> GHC.Real.divZeroError;
        };

GHC.Int.$fIntegralInt32_$cdiv [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> GHC.Int.Int32
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4w4c w1_s4w4d]
        case w_s4w4c of {
          GHC.Int.I32# ww1_s4w4f [Occ=Once] ->
              case w1_s4w4d of {
                GHC.Int.I32# ww3_s4w4h [Occ=Once] ->
                    case GHC.Int.$w$cdiv1 ww1_s4w4f ww3_s4w4h of ww4_s4w4i {
                      __DEFAULT -> GHC.Int.I32# [ww4_s4w4i];
                    };
              };
        };

GHC.Int.$fIntegralInt32_$cmod [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> GHC.Int.Int32
[GblId, Arity=2, Str=<S,1*U(U)><S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [w_s4w4j w1_s4w4k]
        case w_s4w4j of {
          GHC.Int.I32# ww1_s4w4m [Occ=Once] ->
              case w1_s4w4k of {
                GHC.Int.I32# ww3_s4w4o [Occ=Once!] ->
                    case ww3_s4w4o of wild_s4w4p {
                      __DEFAULT ->
                          case GHC.Classes.modInt# ww1_s4w4m wild_s4w4p of wild1_s4w4q {
                            __DEFAULT ->
                                case narrow32Int# [wild1_s4w4q] of sat_s4w4r {
                                  __DEFAULT -> GHC.Int.I32# [sat_s4w4r];
                                };
                          };
                      -1# -> GHC.Int.$fBitsInt6;
                      0# -> GHC.Real.divZeroError;
                    };
              };
        };

lvl8_r4kPz :: (GHC.Int.Int32, GHC.Int.Int32)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Real.overflowError GHC.Int.$fBitsInt6];

GHC.Int.$fIntegralInt32_$cquotRem [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> (GHC.Int.Int32, GHC.Int.Int32)
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4w4t w1_s4w4u]
        case w_s4w4t of {
          GHC.Int.I32# ww1_s4w4w [Occ=Once*] ->
              case w1_s4w4u of {
                GHC.Int.I32# ww3_s4w4y [Occ=Once!] ->
                    case ww3_s4w4y of wild_s4w4z {
                      __DEFAULT ->
                          case quotRemInt# [ww1_s4w4w wild_s4w4z] of {
                            (#,#) ipv_s4w4B [Occ=Once] ipv1_s4w4C [Occ=Once] ->
                                case narrow32Int# [ipv1_s4w4C] of sat_s4w4F {
                                  __DEFAULT ->
                                      let {
                                        sat_s4w4G [Occ=Once] :: GHC.Int.Int32
                                        [LclId] =
                                            CCCS GHC.Int.I32#! [sat_s4w4F];
                                      } in 
                                        case narrow32Int# [ipv_s4w4B] of sat_s4w4D {
                                          __DEFAULT ->
                                              let {
                                                sat_s4w4E [Occ=Once] :: GHC.Int.Int32
                                                [LclId] =
                                                    CCCS GHC.Int.I32#! [sat_s4w4D];
                                              } in  (,) [sat_s4w4E sat_s4w4G];
                                        };
                                };
                          };
                      -1# ->
                          case ww1_s4w4w of wild1_s4w4H {
                            __DEFAULT ->
                                case quotRemInt# [wild1_s4w4H -1#] of {
                                  (#,#) ipv_s4w4J [Occ=Once] ipv1_s4w4K [Occ=Once] ->
                                      case narrow32Int# [ipv1_s4w4K] of sat_s4w4N {
                                        __DEFAULT ->
                                            let {
                                              sat_s4w4O [Occ=Once] :: GHC.Int.Int32
                                              [LclId] =
                                                  CCCS GHC.Int.I32#! [sat_s4w4N];
                                            } in 
                                              case narrow32Int# [ipv_s4w4J] of sat_s4w4L {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s4w4M [Occ=Once] :: GHC.Int.Int32
                                                      [LclId] =
                                                          CCCS GHC.Int.I32#! [sat_s4w4L];
                                                    } in  (,) [sat_s4w4M sat_s4w4O];
                                              };
                                      };
                                };
                            -2147483648# -> lvl8_r4kPz;
                          };
                      0# -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Int.$w$cdivMod1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int#
     -> GHC.Prim.Int# -> (# GHC.Int.Int32, GHC.Int.Int32 #)
[GblId, Arity=2, Str=<S,U><S,1*U>, Unf=OtherCon []] =
    [] \r [ww_s4w4Q ww1_s4w4R]
        case ww1_s4w4R of wild_s4w4S {
          __DEFAULT ->
              let-no-escape {
                $j_s4w4T [Occ=Once*T[0], Dmd=<L,1*U(U,U)>]
                  :: (# GHC.Int.Int32, GHC.Int.Int32 #)
                [LclId[JoinId(0)], Unf=OtherCon []] =
                    [ww_s4w4Q wild_s4w4S] \r []
                        case ># [ww_s4w4Q 0#] of {
                          __DEFAULT ->
                              case <# [ww_s4w4Q 0#] of {
                                __DEFAULT ->
                                    case quotRemInt# [ww_s4w4Q wild_s4w4S] of {
                                      (#,#) ipv_s4w4X [Occ=Once] ipv1_s4w4Y [Occ=Once] ->
                                          case narrow32Int# [ipv1_s4w4Y] of sat_s4w51 {
                                            __DEFAULT ->
                                                let {
                                                  sat_s4w52 [Occ=Once] :: GHC.Int.Int32
                                                  [LclId] =
                                                      CCCS GHC.Int.I32#! [sat_s4w51];
                                                } in 
                                                  case narrow32Int# [ipv_s4w4X] of sat_s4w4Z {
                                                    __DEFAULT ->
                                                        let {
                                                          sat_s4w50 [Occ=Once] :: GHC.Int.Int32
                                                          [LclId] =
                                                              CCCS GHC.Int.I32#! [sat_s4w4Z];
                                                        } in  (#,#) [sat_s4w50 sat_s4w52];
                                                  };
                                          };
                                    };
                                1# ->
                                    case ># [wild_s4w4S 0#] of {
                                      __DEFAULT ->
                                          case quotRemInt# [ww_s4w4Q wild_s4w4S] of {
                                            (#,#) ipv_s4w55 [Occ=Once] ipv1_s4w56 [Occ=Once] ->
                                                case narrow32Int# [ipv1_s4w56] of sat_s4w59 {
                                                  __DEFAULT ->
                                                      let {
                                                        sat_s4w5a [Occ=Once] :: GHC.Int.Int32
                                                        [LclId] =
                                                            CCCS GHC.Int.I32#! [sat_s4w59];
                                                      } in 
                                                        case narrow32Int# [ipv_s4w55] of sat_s4w57 {
                                                          __DEFAULT ->
                                                              let {
                                                                sat_s4w58 [Occ=Once]
                                                                  :: GHC.Int.Int32
                                                                [LclId] =
                                                                    CCCS GHC.Int.I32#! [sat_s4w57];
                                                              } in  (#,#) [sat_s4w58 sat_s4w5a];
                                                        };
                                                };
                                          };
                                      1# ->
                                          case +# [ww_s4w4Q 1#] of sat_s4w5b {
                                            __DEFAULT ->
                                                case quotRemInt# [sat_s4w5b wild_s4w4S] of {
                                                  (#,#) ipv_s4w5d [Occ=Once]
                                                        ipv1_s4w5e [Occ=Once] ->
                                                      case +# [ipv1_s4w5e wild_s4w4S] of sat_s4w5i {
                                                        __DEFAULT ->
                                                            case -# [sat_s4w5i 1#] of sat_s4w5j {
                                                              __DEFAULT ->
                                                                  case
                                                                      narrow32Int# [sat_s4w5j]
                                                                  of
                                                                  sat_s4w5k
                                                                  { __DEFAULT ->
                                                                        let {
                                                                          sat_s4w5l [Occ=Once]
                                                                            :: GHC.Int.Int32
                                                                          [LclId] =
                                                                              CCCS GHC.Int.I32#! [sat_s4w5k];
                                                                        } in 
                                                                          case
                                                                              -# [ipv_s4w5d 1#]
                                                                          of
                                                                          sat_s4w5f
                                                                          { __DEFAULT ->
                                                                                case
                                                                                    narrow32Int# [sat_s4w5f]
                                                                                of
                                                                                sat_s4w5g
                                                                                { __DEFAULT ->
                                                                                      let {
                                                                                        sat_s4w5h [Occ=Once]
                                                                                          :: GHC.Int.Int32
                                                                                        [LclId] =
                                                                                            CCCS GHC.Int.I32#! [sat_s4w5g];
                                                                                      } in 
                                                                                        (#,#) [sat_s4w5h
                                                                                               sat_s4w5l];
                                                                                };
                                                                          };
                                                                  };
                                                            };
                                                      };
                                                };
                                          };
                                    };
                              };
                          1# ->
                              case <# [wild_s4w4S 0#] of {
                                __DEFAULT ->
                                    case <# [ww_s4w4Q 0#] of {
                                      __DEFAULT ->
                                          case quotRemInt# [ww_s4w4Q wild_s4w4S] of {
                                            (#,#) ipv_s4w5p [Occ=Once] ipv1_s4w5q [Occ=Once] ->
                                                case narrow32Int# [ipv1_s4w5q] of sat_s4w5t {
                                                  __DEFAULT ->
                                                      let {
                                                        sat_s4w5u [Occ=Once] :: GHC.Int.Int32
                                                        [LclId] =
                                                            CCCS GHC.Int.I32#! [sat_s4w5t];
                                                      } in 
                                                        case narrow32Int# [ipv_s4w5p] of sat_s4w5r {
                                                          __DEFAULT ->
                                                              let {
                                                                sat_s4w5s [Occ=Once]
                                                                  :: GHC.Int.Int32
                                                                [LclId] =
                                                                    CCCS GHC.Int.I32#! [sat_s4w5r];
                                                              } in  (#,#) [sat_s4w5s sat_s4w5u];
                                                        };
                                                };
                                          };
                                      1# ->
                                          case ># [wild_s4w4S 0#] of {
                                            __DEFAULT ->
                                                case quotRemInt# [ww_s4w4Q wild_s4w4S] of {
                                                  (#,#) ipv_s4w5x [Occ=Once]
                                                        ipv1_s4w5y [Occ=Once] ->
                                                      case narrow32Int# [ipv1_s4w5y] of sat_s4w5B {
                                                        __DEFAULT ->
                                                            let {
                                                              sat_s4w5C [Occ=Once] :: GHC.Int.Int32
                                                              [LclId] =
                                                                  CCCS GHC.Int.I32#! [sat_s4w5B];
                                                            } in 
                                                              case
                                                                  narrow32Int# [ipv_s4w5x]
                                                              of
                                                              sat_s4w5z
                                                              { __DEFAULT ->
                                                                    let {
                                                                      sat_s4w5A [Occ=Once]
                                                                        :: GHC.Int.Int32
                                                                      [LclId] =
                                                                          CCCS GHC.Int.I32#! [sat_s4w5z];
                                                                    } in 
                                                                      (#,#) [sat_s4w5A sat_s4w5C];
                                                              };
                                                      };
                                                };
                                            1# ->
                                                case +# [ww_s4w4Q 1#] of sat_s4w5D {
                                                  __DEFAULT ->
                                                      case quotRemInt# [sat_s4w5D wild_s4w4S] of {
                                                        (#,#) ipv_s4w5F [Occ=Once]
                                                              ipv1_s4w5G [Occ=Once] ->
                                                            case
                                                                +# [ipv1_s4w5G wild_s4w4S]
                                                            of
                                                            sat_s4w5K
                                                            { __DEFAULT ->
                                                                  case
                                                                      -# [sat_s4w5K 1#]
                                                                  of
                                                                  sat_s4w5L
                                                                  { __DEFAULT ->
                                                                        case
                                                                            narrow32Int# [sat_s4w5L]
                                                                        of
                                                                        sat_s4w5M
                                                                        { __DEFAULT ->
                                                                              let {
                                                                                sat_s4w5N [Occ=Once]
                                                                                  :: GHC.Int.Int32
                                                                                [LclId] =
                                                                                    CCCS GHC.Int.I32#! [sat_s4w5M];
                                                                              } in 
                                                                                case
                                                                                    -# [ipv_s4w5F
                                                                                        1#]
                                                                                of
                                                                                sat_s4w5H
                                                                                { __DEFAULT ->
                                                                                      case
                                                                                          narrow32Int# [sat_s4w5H]
                                                                                      of
                                                                                      sat_s4w5I
                                                                                      { __DEFAULT ->
                                                                                            let {
                                                                                              sat_s4w5J [Occ=Once]
                                                                                                :: GHC.Int.Int32
                                                                                              [LclId] =
                                                                                                  CCCS GHC.Int.I32#! [sat_s4w5I];
                                                                                            } in 
                                                                                              (#,#) [sat_s4w5J
                                                                                                     sat_s4w5N];
                                                                                      };
                                                                                };
                                                                        };
                                                                  };
                                                            };
                                                      };
                                                };
                                          };
                                    };
                                1# ->
                                    case -# [ww_s4w4Q 1#] of sat_s4w5O {
                                      __DEFAULT ->
                                          case quotRemInt# [sat_s4w5O wild_s4w4S] of {
                                            (#,#) ipv_s4w5Q [Occ=Once] ipv1_s4w5R [Occ=Once] ->
                                                case +# [ipv1_s4w5R wild_s4w4S] of sat_s4w5V {
                                                  __DEFAULT ->
                                                      case +# [sat_s4w5V 1#] of sat_s4w5W {
                                                        __DEFAULT ->
                                                            case
                                                                narrow32Int# [sat_s4w5W]
                                                            of
                                                            sat_s4w5X
                                                            { __DEFAULT ->
                                                                  let {
                                                                    sat_s4w5Y [Occ=Once]
                                                                      :: GHC.Int.Int32
                                                                    [LclId] =
                                                                        CCCS GHC.Int.I32#! [sat_s4w5X];
                                                                  } in 
                                                                    case
                                                                        -# [ipv_s4w5Q 1#]
                                                                    of
                                                                    sat_s4w5S
                                                                    { __DEFAULT ->
                                                                          case
                                                                              narrow32Int# [sat_s4w5S]
                                                                          of
                                                                          sat_s4w5T
                                                                          { __DEFAULT ->
                                                                                let {
                                                                                  sat_s4w5U [Occ=Once]
                                                                                    :: GHC.Int.Int32
                                                                                  [LclId] =
                                                                                      CCCS GHC.Int.I32#! [sat_s4w5T];
                                                                                } in 
                                                                                  (#,#) [sat_s4w5U
                                                                                         sat_s4w5Y];
                                                                          };
                                                                    };
                                                            };
                                                      };
                                                };
                                          };
                                    };
                              };
                        };
              } in 
                case wild_s4w4S of {
                  __DEFAULT -> $j_s4w4T;
                  -1# ->
                      case ww_s4w4Q of {
                        __DEFAULT -> $j_s4w4T;
                        -2147483648# -> (#,#) [GHC.Real.overflowError GHC.Int.$fBitsInt6];
                      };
                };
          0# -> GHC.Real.divZeroError;
        };

GHC.Int.$fIntegralInt32_$cdivMod [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int32 -> GHC.Int.Int32 -> (GHC.Int.Int32, GHC.Int.Int32)
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4w62 w1_s4w63]
        case w_s4w62 of {
          GHC.Int.I32# ww1_s4w65 [Occ=Once] ->
              case w1_s4w63 of {
                GHC.Int.I32# ww3_s4w67 [Occ=Once] ->
                    case GHC.Int.$w$cdivMod1 ww1_s4w65 ww3_s4w67 of {
                      (#,#) ww5_s4w69 [Occ=Once] ww6_s4w6a [Occ=Once] ->
                          (,) [ww5_s4w69 ww6_s4w6a];
                    };
              };
        };

GHC.Int.$fRealInt32_$ctoRational [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int32 -> GHC.Real.Rational
[GblId, Arity=1, Str=<S(S),1*U(U)>m, Unf=OtherCon []] =
    [] \r [w_s4w6b]
        case w_s4w6b of {
          GHC.Int.I32# ww1_s4w6d [Occ=Once] ->
              case GHC.Integer.Type.smallInteger ww1_s4w6d of sat_s4w6e {
                __DEFAULT ->
                    case
                        GHC.Integer.Type.timesInteger sat_s4w6e GHC.Int.$fRealInt1
                    of
                    sat_s4w6f
                    { __DEFAULT ->
                          case GHC.Real.$w$sreduce sat_s4w6f GHC.Int.$fRealInt1 of {
                            (#,#) ww3_s4w6h [Occ=Once] ww4_s4w6i [Occ=Once] ->
                                GHC.Real.:% [ww3_s4w6h ww4_s4w6i];
                          };
                    };
              };
        };

GHC.Int.$fRealInt32 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Real.Real GHC.Int.Int32
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Real.C:Real! [GHC.Int.$fNumInt32
                                    GHC.Int.$fOrdInt32
                                    GHC.Int.$fRealInt32_$ctoRational];

GHC.Int.$fIntegralInt32 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Real.Integral GHC.Int.Int32
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Real.C:Integral! [GHC.Int.$fRealInt32
                                        GHC.Int.$fEnumInt32
                                        GHC.Int.$fIntegralInt32_$cquot
                                        GHC.Int.$fIntegralInt32_$crem
                                        GHC.Int.$fIntegralInt32_$cdiv
                                        GHC.Int.$fIntegralInt32_$cmod
                                        GHC.Int.$fIntegralInt32_$cquotRem
                                        GHC.Int.$fIntegralInt32_$cdivMod
                                        GHC.Int.$fIntegralInt32_$ctoInteger];

GHC.Int.$fIxInt32_$crange
  :: (GHC.Int.Int32, GHC.Int.Int32) -> [GHC.Int.Int32]
[GblId,
 Arity=1,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>,
 Unf=OtherCon []] =
    [] \r [ds_s4w6j]
        case ds_s4w6j of {
          (,) m_s4w6l [Occ=Once] n_s4w6m [Occ=Once] ->
              GHC.Int.$fEnumInt32_$cenumFromTo m_s4w6l n_s4w6m;
        };

GHC.Int.$fIxInt32_$cunsafeIndex
  :: (GHC.Int.Int32, GHC.Int.Int32) -> GHC.Int.Int32 -> GHC.Types.Int
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S(S)L),1*U(1*U(U),A)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4w6n i_s4w6o]
        case ds_s4w6n of {
          (,) m_s4w6q [Occ=Once!] _ [Occ=Dead] ->
              case i_s4w6o of {
                GHC.Int.I32# x#_s4w6t [Occ=Once] ->
                    case m_s4w6q of {
                      GHC.Int.I32# x#1_s4w6v [Occ=Once] ->
                          case -# [x#_s4w6t x#1_s4w6v] of sat_s4w6w {
                            __DEFAULT -> GHC.Types.I# [sat_s4w6w];
                          };
                    };
              };
        };

GHC.Int.$fIxInt32_$crangeSize
  :: (GHC.Int.Int32, GHC.Int.Int32) -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>m,
 Unf=OtherCon []] =
    [] \r [b_s4w6x]
        case b_s4w6x of {
          (,) _l_s4w6z [Occ=Once!] h_s4w6A [Occ=Once!] ->
              case _l_s4w6z of {
                GHC.Int.I32# x_s4w6C ->
                    case h_s4w6A of {
                      GHC.Int.I32# y_s4w6E ->
                          case <=# [x_s4w6C y_s4w6E] of {
                            __DEFAULT -> GHC.Int.$fIxInt1;
                            1# ->
                                case -# [y_s4w6E x_s4w6C] of sat_s4w6G {
                                  __DEFAULT ->
                                      case +# [sat_s4w6G 1#] of sat_s4w6H {
                                        __DEFAULT -> GHC.Types.I# [sat_s4w6H];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fIxInt32_$cunsafeRangeSize
  :: (GHC.Int.Int32, GHC.Int.Int32) -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>m,
 Unf=OtherCon []] =
    [] \r [b_s4w6I]
        case b_s4w6I of {
          (,) _l_s4w6K [Occ=Once!] h_s4w6L [Occ=Once!] ->
              case h_s4w6L of {
                GHC.Int.I32# x#_s4w6N [Occ=Once] ->
                    case _l_s4w6K of {
                      GHC.Int.I32# x#1_s4w6P [Occ=Once] ->
                          case -# [x#_s4w6N x#1_s4w6P] of sat_s4w6Q {
                            __DEFAULT ->
                                case +# [sat_s4w6Q 1#] of sat_s4w6R {
                                  __DEFAULT -> GHC.Types.I# [sat_s4w6R];
                                };
                          };
                    };
              };
        };

GHC.Int.$fIxInt32_$cindex [InlPrag=INLINE (sat-args=2)]
  :: (GHC.Int.Int32, GHC.Int.Int32) -> GHC.Int.Int32 -> GHC.Types.Int
[GblId,
 Arity=2,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s4w6S eta1_s4w6T]
        case eta_s4w6S of {
          (,) m_s4w6V [Occ=Once!] n_s4w6W [Occ=Once!] ->
              case m_s4w6V of {
                GHC.Int.I32# x_s4w6Y ->
                    case eta1_s4w6T of {
                      GHC.Int.I32# y_s4w70 ->
                          case <=# [x_s4w6Y y_s4w70] of {
                            __DEFAULT -> GHC.Arr.hopelessIndexError;
                            1# ->
                                case n_s4w6W of {
                                  GHC.Int.I32# y1_s4w73 [Occ=Once] ->
                                      case <=# [y_s4w70 y1_s4w73] of {
                                        __DEFAULT -> GHC.Arr.hopelessIndexError;
                                        1# ->
                                            case -# [y_s4w70 x_s4w6Y] of sat_s4w75 {
                                              __DEFAULT -> GHC.Types.I# [sat_s4w75];
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fIxInt32 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Arr.Ix GHC.Int.Int32
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Arr.C:Ix! [GHC.Int.$fOrdInt32
                                 GHC.Int.$fIxInt32_$crange
                                 GHC.Int.$fIxInt32_$cindex
                                 GHC.Int.$fIxInt32_$cunsafeIndex
                                 GHC.Int.$fIxInt32_$cinRange
                                 GHC.Int.$fIxInt32_$crangeSize
                                 GHC.Int.$fIxInt32_$cunsafeRangeSize];

GHC.Int.eqInt64 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4w76 ds1_s4w77]
        case ds_s4w76 of {
          GHC.Int.I64# x_s4w79 [Occ=Once] ->
              case ds1_s4w77 of {
                GHC.Int.I64# y_s4w7b [Occ=Once] ->
                    case ==# [x_s4w79 y_s4w7b] of sat_s4w7c {
                      __DEFAULT -> tagToEnum# [sat_s4w7c];
                    };
              };
        };

GHC.Int.$fEqInt64 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.Int.Int64
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.Int.eqInt64 GHC.Int.neInt64];

GHC.Int.gtInt64 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4w7d ds1_s4w7e]
        case ds_s4w7d of {
          GHC.Int.I64# x_s4w7g [Occ=Once] ->
              case ds1_s4w7e of {
                GHC.Int.I64# y_s4w7i [Occ=Once] ->
                    case ># [x_s4w7g y_s4w7i] of sat_s4w7j {
                      __DEFAULT -> tagToEnum# [sat_s4w7j];
                    };
              };
        };

GHC.Int.geInt64 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4w7k ds1_s4w7l]
        case ds_s4w7k of {
          GHC.Int.I64# x_s4w7n [Occ=Once] ->
              case ds1_s4w7l of {
                GHC.Int.I64# y_s4w7p [Occ=Once] ->
                    case >=# [x_s4w7n y_s4w7p] of sat_s4w7q {
                      __DEFAULT -> tagToEnum# [sat_s4w7q];
                    };
              };
        };

GHC.Int.ltInt64 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4w7r ds1_s4w7s]
        case ds_s4w7r of {
          GHC.Int.I64# x_s4w7u [Occ=Once] ->
              case ds1_s4w7s of {
                GHC.Int.I64# y_s4w7w [Occ=Once] ->
                    case <# [x_s4w7u y_s4w7w] of sat_s4w7x {
                      __DEFAULT -> tagToEnum# [sat_s4w7x];
                    };
              };
        };

GHC.Int.leInt64 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4w7y ds1_s4w7z]
        case ds_s4w7y of {
          GHC.Int.I64# x_s4w7B [Occ=Once] ->
              case ds1_s4w7z of {
                GHC.Int.I64# y_s4w7D [Occ=Once] ->
                    case <=# [x_s4w7B y_s4w7D] of sat_s4w7E {
                      __DEFAULT -> tagToEnum# [sat_s4w7E];
                    };
              };
        };

GHC.Int.$fOrdInt64_$ccompare
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [x_s4w7F y_s4w7G]
        case x_s4w7F of {
          GHC.Int.I64# x1_s4w7I ->
              case y_s4w7G of {
                GHC.Int.I64# y1_s4w7K ->
                    case ==# [x1_s4w7I y1_s4w7K] of {
                      __DEFAULT ->
                          case <=# [x1_s4w7I y1_s4w7K] of {
                            __DEFAULT -> GHC.Types.GT [];
                            1# -> GHC.Types.LT [];
                          };
                      1# -> GHC.Types.EQ [];
                    };
              };
        };

GHC.Int.$fOrdInt64_$cmax
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> GHC.Int.Int64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s4w7N y_s4w7O]
        case x_s4w7N of wild_s4w7P {
          GHC.Int.I64# x1_s4w7Q [Occ=Once] ->
              case y_s4w7O of wild1_s4w7R {
                GHC.Int.I64# y1_s4w7S [Occ=Once] ->
                    case <=# [x1_s4w7Q y1_s4w7S] of {
                      __DEFAULT -> wild_s4w7P;
                      1# -> wild1_s4w7R;
                    };
              };
        };

GHC.Int.$fOrdInt64_$cmin
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> GHC.Int.Int64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s4w7U y_s4w7V]
        case x_s4w7U of wild_s4w7W {
          GHC.Int.I64# x1_s4w7X [Occ=Once] ->
              case y_s4w7V of wild1_s4w7Y {
                GHC.Int.I64# y1_s4w7Z [Occ=Once] ->
                    case <=# [x1_s4w7X y1_s4w7Z] of {
                      __DEFAULT -> wild1_s4w7Y;
                      1# -> wild_s4w7W;
                    };
              };
        };

GHC.Int.$fOrdInt64 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord GHC.Int.Int64
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.Int.$fEqInt64
                                      GHC.Int.$fOrdInt64_$ccompare
                                      GHC.Int.ltInt64
                                      GHC.Int.leInt64
                                      GHC.Int.gtInt64
                                      GHC.Int.geInt64
                                      GHC.Int.$fOrdInt64_$cmax
                                      GHC.Int.$fOrdInt64_$cmin];

GHC.Int.$fIxInt64_$cinRange
  :: (GHC.Int.Int64, GHC.Int.Int64)
     -> GHC.Int.Int64 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S(S)L),1*U(1*U(U),1*U(U))><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4w81 i_s4w82]
        case ds_s4w81 of {
          (,) m_s4w84 [Occ=Once!] n_s4w85 [Occ=Once!] ->
              case m_s4w84 of {
                GHC.Int.I64# x_s4w87 [Occ=Once] ->
                    case i_s4w82 of {
                      GHC.Int.I64# y_s4w89 ->
                          case <=# [x_s4w87 y_s4w89] of {
                            __DEFAULT -> GHC.Types.False [];
                            1# ->
                                case n_s4w85 of {
                                  GHC.Int.I64# y1_s4w8c [Occ=Once] ->
                                      case <=# [y_s4w89 y1_s4w8c] of sat_s4w8d {
                                        __DEFAULT -> tagToEnum# [sat_s4w8d];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fNumInt5 :: GHC.Int.Int64
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I64#! [1#];

GHC.Int.$fNumInt64_$csignum :: GHC.Int.Int64 -> GHC.Int.Int64
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s4w8e]
        case x_s4w8e of {
          GHC.Int.I64# x1_s4w8g ->
              case ># [x1_s4w8g 0#] of {
                __DEFAULT ->
                    case x1_s4w8g of {
                      __DEFAULT -> GHC.Int.$fNumInt6;
                      0# -> GHC.Int.$fBitsInt10;
                    };
                1# -> GHC.Int.$fNumInt5;
              };
        };

GHC.Int.$fNumInt64_$cabs :: GHC.Int.Int64 -> GHC.Int.Int64
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s4w8j]
        case x_s4w8j of wild_s4w8k {
          GHC.Int.I64# x1_s4w8l ->
              case >=# [x1_s4w8l 0#] of {
                __DEFAULT ->
                    case negateInt# [x1_s4w8l] of sat_s4w8n {
                      __DEFAULT -> GHC.Int.I64# [sat_s4w8n];
                    };
                1# -> wild_s4w8k;
              };
        };

GHC.Int.$fNumInt64 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Num.Num GHC.Int.Int64
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Num.C:Num! [GHC.Int.$fNumInt64_$c+
                                  GHC.Int.$fNumInt64_$c-
                                  GHC.Int.$fNumInt64_$c*
                                  GHC.Int.$fNumInt64_$cnegate
                                  GHC.Int.$fNumInt64_$cabs
                                  GHC.Int.$fNumInt64_$csignum
                                  GHC.Int.$fNumInt64_$cfromInteger];

GHC.Int.$fBitsInt9 :: GHC.Base.Maybe GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [GHC.Int.$fBitsInt7];

GHC.Int.$fBitsInt64_$cbitSizeMaybe
  :: GHC.Int.Int64 -> GHC.Base.Maybe GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>m2, Unf=OtherCon []] =
    [] \r [i_s4w8o] GHC.Int.$fBitsInt9;

GHC.Int.$fBitsInt64_$cbit [InlPrag=INLINE (sat-args=0)]
  :: GHC.Types.Int -> GHC.Int.Int64
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [i_s4w8p]
        case i_s4w8p of {
          GHC.Types.I# i#_s4w8r ->
              case >=# [i#_s4w8r 64#] of {
                __DEFAULT ->
                    case uncheckedIShiftL# [1# i#_s4w8r] of sat_s4w8t {
                      __DEFAULT -> GHC.Int.I64# [sat_s4w8t];
                    };
                1# -> GHC.Int.$fBitsInt10;
              };
        };

GHC.Int.$fBitsInt64_$ctestBit [InlPrag=INLINE (sat-args=0)]
  :: GHC.Int.Int64 -> GHC.Types.Int -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [x_s4w8u i_s4w8v]
        case x_s4w8u of {
          GHC.Int.I64# x#_s4w8x [Occ=Once] ->
              case i_s4w8v of {
                GHC.Types.I# i#_s4w8z ->
                    case >=# [i#_s4w8z 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftL# [1# i#_s4w8z] of sat_s4w8C {
                            __DEFAULT ->
                                case int2Word# [sat_s4w8C] of sat_s4w8D {
                                  __DEFAULT ->
                                      case int2Word# [x#_s4w8x] of sat_s4w8B {
                                        __DEFAULT ->
                                            case and# [sat_s4w8B sat_s4w8D] of sat_s4w8E {
                                              __DEFAULT ->
                                                  case word2Int# [sat_s4w8E] of {
                                                    __DEFAULT -> GHC.Types.True [];
                                                    0# -> GHC.Types.False [];
                                                  };
                                            };
                                      };
                                };
                          };
                      1# -> GHC.Types.False [];
                    };
              };
        };

GHC.Int.$fBitsInt64_$crotateR [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int64 -> GHC.Types.Int -> GHC.Int.Int64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s4w8G eta1_s4w8H]
        case eta_s4w8G of wild_s4w8I {
          GHC.Int.I64# x#_s4w8J [Occ=Once] ->
              case eta1_s4w8H of {
                GHC.Types.I# x1_s4w8L [Occ=Once] ->
                    case negateInt# [x1_s4w8L] of sat_s4w8M {
                      __DEFAULT ->
                          case int2Word# [sat_s4w8M] of sat_s4w8N {
                            __DEFAULT ->
                                case and# [sat_s4w8N 63##] of sat_s4w8O {
                                  __DEFAULT ->
                                      case word2Int# [sat_s4w8O] of wild2_s4w8P {
                                        __DEFAULT ->
                                            case int2Word# [x#_s4w8J] of x'#_s4w8Q [Dmd=<S,U>] {
                                              __DEFAULT ->
                                                  case -# [64# wild2_s4w8P] of sat_s4w8S {
                                                    __DEFAULT ->
                                                        case
                                                            uncheckedShiftRL# [x'#_s4w8Q sat_s4w8S]
                                                        of
                                                        sat_s4w8T
                                                        { __DEFAULT ->
                                                              case
                                                                  uncheckedShiftL# [x'#_s4w8Q
                                                                                    wild2_s4w8P]
                                                              of
                                                              sat_s4w8R
                                                              { __DEFAULT ->
                                                                    case
                                                                        or# [sat_s4w8R sat_s4w8T]
                                                                    of
                                                                    sat_s4w8U
                                                                    { __DEFAULT ->
                                                                          case
                                                                              word2Int# [sat_s4w8U]
                                                                          of
                                                                          sat_s4w8V
                                                                          { __DEFAULT ->
                                                                                GHC.Int.I64# [sat_s4w8V];
                                                                          };
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                        0# -> wild_s4w8I;
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fBitsInt64_$ccomplementBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int64 -> GHC.Types.Int -> GHC.Int.Int64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s4w8W eta1_s4w8X]
        case eta_s4w8W of wild_s4w8Y {
          GHC.Int.I64# x#_s4w8Z [Occ=Once] ->
              case eta1_s4w8X of {
                GHC.Types.I# i#_s4w91 ->
                    case >=# [i#_s4w91 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftL# [1# i#_s4w91] of sat_s4w94 {
                            __DEFAULT ->
                                case int2Word# [sat_s4w94] of sat_s4w95 {
                                  __DEFAULT ->
                                      case int2Word# [x#_s4w8Z] of sat_s4w93 {
                                        __DEFAULT ->
                                            case xor# [sat_s4w93 sat_s4w95] of sat_s4w96 {
                                              __DEFAULT ->
                                                  case word2Int# [sat_s4w96] of sat_s4w97 {
                                                    __DEFAULT -> GHC.Int.I64# [sat_s4w97];
                                                  };
                                            };
                                      };
                                };
                          };
                      1# -> wild_s4w8Y;
                    };
              };
        };

GHC.Int.$fBitsInt64_$cclearBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int64 -> GHC.Types.Int -> GHC.Int.Int64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s4w98 eta1_s4w99]
        case eta_s4w98 of {
          GHC.Int.I64# x#_s4w9b [Occ=Once*] ->
              case eta1_s4w99 of {
                GHC.Types.I# i#_s4w9d ->
                    case >=# [i#_s4w9d 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftL# [1# i#_s4w9d] of sat_s4w9g {
                            __DEFAULT ->
                                case int2Word# [sat_s4w9g] of sat_s4w9h {
                                  __DEFAULT ->
                                      case xor# [sat_s4w9h 18446744073709551615##] of sat_s4w9i {
                                        __DEFAULT ->
                                            case int2Word# [x#_s4w9b] of sat_s4w9f {
                                              __DEFAULT ->
                                                  case and# [sat_s4w9f sat_s4w9i] of sat_s4w9j {
                                                    __DEFAULT ->
                                                        case word2Int# [sat_s4w9j] of sat_s4w9k {
                                                          __DEFAULT -> GHC.Int.I64# [sat_s4w9k];
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                      1# ->
                          case int2Word# [x#_s4w9b] of sat_s4w9l {
                            __DEFAULT ->
                                case and# [sat_s4w9l 18446744073709551615##] of sat_s4w9m {
                                  __DEFAULT ->
                                      case word2Int# [sat_s4w9m] of sat_s4w9n {
                                        __DEFAULT -> GHC.Int.I64# [sat_s4w9n];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fBitsInt64_$csetBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int64 -> GHC.Types.Int -> GHC.Int.Int64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s4w9o eta1_s4w9p]
        case eta_s4w9o of wild_s4w9q {
          GHC.Int.I64# x#_s4w9r [Occ=Once] ->
              case eta1_s4w9p of {
                GHC.Types.I# i#_s4w9t ->
                    case >=# [i#_s4w9t 64#] of {
                      __DEFAULT ->
                          case uncheckedIShiftL# [1# i#_s4w9t] of sat_s4w9w {
                            __DEFAULT ->
                                case int2Word# [sat_s4w9w] of sat_s4w9x {
                                  __DEFAULT ->
                                      case int2Word# [x#_s4w9r] of sat_s4w9v {
                                        __DEFAULT ->
                                            case or# [sat_s4w9v sat_s4w9x] of sat_s4w9y {
                                              __DEFAULT ->
                                                  case word2Int# [sat_s4w9y] of sat_s4w9z {
                                                    __DEFAULT -> GHC.Int.I64# [sat_s4w9z];
                                                  };
                                            };
                                      };
                                };
                          };
                      1# -> wild_s4w9q;
                    };
              };
        };

GHC.Int.$fBitsInt64_$crotateL [InlPrag=INLINE (sat-args=2)]
  :: GHC.Int.Int64 -> GHC.Types.Int -> GHC.Int.Int64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Int.$fBitsInt64_$crotate eta_B2 eta_B1;

GHC.Int.$fBitsInt64 [InlPrag=NOUSERINLINE CONLIKE]
  :: Data.Bits.Bits GHC.Int.Int64
[GblId[DFunId], Caf=NoCafRefs] =
    CCS_DONT_CARE Data.Bits.C:Bits! [GHC.Int.$fEqInt64
                                     GHC.Int.$fBitsInt64_$c.&.
                                     GHC.Int.$fBitsInt64_$c.|.
                                     GHC.Int.$fBitsInt64_$cxor
                                     GHC.Int.$fBitsInt64_$ccomplement
                                     GHC.Int.$fBitsInt64_$cshift
                                     GHC.Int.$fBitsInt64_$crotate
                                     GHC.Int.$fBitsInt10
                                     GHC.Int.$fBitsInt64_$cbit
                                     GHC.Int.$fBitsInt64_$csetBit
                                     GHC.Int.$fBitsInt64_$cclearBit
                                     GHC.Int.$fBitsInt64_$ccomplementBit
                                     GHC.Int.$fBitsInt64_$ctestBit
                                     GHC.Int.$fBitsInt64_$cbitSizeMaybe
                                     GHC.Int.$fBitsInt64_$cfiniteBitSize
                                     GHC.Int.$fBitsInt64_$cisSigned
                                     GHC.Int.$fBitsInt64_$cshiftL
                                     GHC.Int.$fBitsInt64_$cunsafeShiftL
                                     GHC.Int.$fBitsInt64_$cshiftR
                                     GHC.Int.$fBitsInt64_$cunsafeShiftR
                                     GHC.Int.$fBitsInt64_$crotateL
                                     GHC.Int.$fBitsInt64_$crotateR
                                     GHC.Int.$fBitsInt64_$cpopCount];

GHC.Int.$fFiniteBitsInt64 [InlPrag=NOUSERINLINE CONLIKE]
  :: Data.Bits.FiniteBits GHC.Int.Int64
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE Data.Bits.C:FiniteBits! [GHC.Int.$fBitsInt64
                                           GHC.Int.$fBitsInt64_$cfiniteBitSize
                                           GHC.Int.$fFiniteBitsInt64_$ccountLeadingZeros
                                           GHC.Int.$fFiniteBitsInt64_$ccountTrailingZeros];

GHC.Int.$fReadInt64_go [Occ=LoopBreaker]
  :: [(GHC.Types.Int, GHC.Base.String)]
     -> [(GHC.Int.Int64, GHC.Base.String)]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s4w9A]
        case ds_s4w9A of {
          [] -> [] [];
          : y_s4w9C [Occ=Once!] ys_s4w9D [Occ=Once] ->
              case y_s4w9C of {
                (,) x_s4w9F [Occ=Once!] r_s4w9G [Occ=Once] ->
                    let {
                      sat_s4w9L [Occ=Once] :: [(GHC.Int.Int64, GHC.Base.String)]
                      [LclId] =
                          [ys_s4w9D] \u [] GHC.Int.$fReadInt64_go ys_s4w9D; } in
                    let {
                      sat_s4w9J [Occ=Once] :: GHC.Int.Int64
                      [LclId] =
                          [x_s4w9F] \u []
                              case x_s4w9F of {
                                GHC.Types.I# x#_s4w9I [Occ=Once] -> GHC.Int.I64# [x#_s4w9I];
                              }; } in
                    let {
                      sat_s4w9K [Occ=Once] :: (GHC.Int.Int64, GHC.Base.String)
                      [LclId] =
                          CCCS (,)! [sat_s4w9J r_s4w9G];
                    } in  : [sat_s4w9K sat_s4w9L];
              };
        };

GHC.Int.$fReadInt64_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS GHC.Int.Int64
[GblId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [p_s4w9M s_s4w9N]
        case
            GHC.Read.$fReadInt_$sreadNumber
                GHC.Read.$fReadInt2
                p_s4w9M
                Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
        of
        sat_s4w9O
        { __DEFAULT ->
              case
                  Text.ParserCombinators.ReadP.run sat_s4w9O s_s4w9N
              of
              sat_s4w9P
              { __DEFAULT -> GHC.Int.$fReadInt64_go sat_s4w9P;
              };
        };

GHC.Int.$fReadInt10
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Int.Int64 -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,U><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [n_s4w9Q eta_s4w9R]
        let {
          sat_s4w9S [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS GHC.Int.Int64
          [LclId] =
              [n_s4w9Q] \r [eta_B1]
                  GHC.Int.$fReadInt64_$creadsPrec n_s4w9Q eta_B1;
        } in 
          case
              Text.ParserCombinators.ReadP.$wreadS_to_P sat_s4w9S eta_s4w9R
          of
          { Unit# ww1_s4w9U [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s4w9U];
          };

GHC.Int.$fReadInt9
  :: Text.ParserCombinators.ReadP.P [GHC.Int.Int64]
[GblId] =
    [] \u []
        GHC.Read.list
            GHC.Int.$fReadInt10
            GHC.Int.$fIxInt1
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Int.$fReadInt64_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.Int.Int64]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Int.$fReadInt9 eta_B1;

GHC.Int.$fReadInt7
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        ([GHC.Int.Int64] -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,A><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [n_s4w9V w1_s4w9W]
        case
            Text.ParserCombinators.ReadP.$wreadS_to_P
                GHC.Int.$fReadInt64_$creadList w1_s4w9W
        of
        { Unit# ww1_s4w9Y [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s4w9Y];
        };

GHC.Int.$fReadInt64 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.Int.Int64
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Int.$fReadInt64_$creadsPrec
                                    GHC.Int.$fReadInt64_$creadList
                                    GHC.Int.$fReadInt10
                                    GHC.Int.$fReadInt7];

GHC.Int.$fIntegralInt64_$cquot [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> GHC.Int.Int64
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4w9Z w1_s4wa0]
        case w_s4w9Z of {
          GHC.Int.I64# ww1_s4wa2 [Occ=Once*] ->
              case w1_s4wa0 of {
                GHC.Int.I64# ww3_s4wa4 [Occ=Once!] ->
                    case ww3_s4wa4 of wild_s4wa5 {
                      __DEFAULT ->
                          case quotInt# [ww1_s4wa2 wild_s4wa5] of ww4_s4wa6 {
                            __DEFAULT -> GHC.Int.I64# [ww4_s4wa6];
                          };
                      -1# ->
                          case ww1_s4wa2 of wild1_s4wa7 {
                            __DEFAULT ->
                                case quotInt# [wild1_s4wa7 -1#] of sat_s4wa8 {
                                  __DEFAULT -> GHC.Int.I64# [sat_s4wa8];
                                };
                            -9223372036854775808# -> GHC.Real.overflowError;
                          };
                      0# -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Int.$fIntegralInt64_$crem
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> GHC.Int.Int64
[GblId, Arity=2, Str=<S,1*U(U)><S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [ds_s4wab y_s4wac]
        case ds_s4wab of {
          GHC.Int.I64# x#_s4wae [Occ=Once] ->
              case y_s4wac of {
                GHC.Int.I64# y#_s4wag [Occ=Once!] ->
                    case y#_s4wag of wild2_s4wah {
                      __DEFAULT ->
                          case remInt# [x#_s4wae wild2_s4wah] of wild3_s4wai {
                            __DEFAULT -> GHC.Int.I64# [wild3_s4wai];
                          };
                      -1# -> GHC.Int.$fBitsInt10;
                      0# -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Int.$w$cdiv2 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Str=<S,U><S,1*U>, Unf=OtherCon []] =
    [] \r [ww_s4waj ww1_s4wak]
        case ww1_s4wak of wild_s4wal {
          __DEFAULT -> GHC.Classes.divInt# ww_s4waj wild_s4wal;
          -1# ->
              case ww_s4waj of wild1_s4wam {
                __DEFAULT -> GHC.Classes.divInt# wild1_s4wam -1#;
                -9223372036854775808# -> GHC.Real.overflowError;
              };
          0# -> GHC.Real.divZeroError;
        };

GHC.Int.$fIntegralInt64_$cdiv [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> GHC.Int.Int64
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4wap w1_s4waq]
        case w_s4wap of {
          GHC.Int.I64# ww1_s4was [Occ=Once] ->
              case w1_s4waq of {
                GHC.Int.I64# ww3_s4wau [Occ=Once] ->
                    case GHC.Int.$w$cdiv2 ww1_s4was ww3_s4wau of ww4_s4wav {
                      __DEFAULT -> GHC.Int.I64# [ww4_s4wav];
                    };
              };
        };

GHC.Int.$fIntegralInt64_$cmod [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> GHC.Int.Int64
[GblId, Arity=2, Str=<S,1*U(U)><S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [w_s4waw w1_s4wax]
        case w_s4waw of {
          GHC.Int.I64# ww1_s4waz [Occ=Once] ->
              case w1_s4wax of {
                GHC.Int.I64# ww3_s4waB [Occ=Once!] ->
                    case ww3_s4waB of wild_s4waC {
                      __DEFAULT ->
                          case GHC.Classes.modInt# ww1_s4waz wild_s4waC of ww4_s4waD {
                            __DEFAULT -> GHC.Int.I64# [ww4_s4waD];
                          };
                      -1# -> GHC.Int.$fBitsInt10;
                      0# -> GHC.Real.divZeroError;
                    };
              };
        };

lvl9_r4kPA :: (GHC.Int.Int64, GHC.Int.Int64)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Real.overflowError GHC.Int.$fBitsInt10];

GHC.Int.$fIntegralInt64_$cquotRem [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> (GHC.Int.Int64, GHC.Int.Int64)
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4waF w1_s4waG]
        case w_s4waF of {
          GHC.Int.I64# ww1_s4waI [Occ=Once*] ->
              case w1_s4waG of {
                GHC.Int.I64# ww3_s4waK [Occ=Once!] ->
                    case ww3_s4waK of wild_s4waL {
                      __DEFAULT ->
                          case quotRemInt# [ww1_s4waI wild_s4waL] of {
                            (#,#) ipv_s4waN [Occ=Once] ipv1_s4waO [Occ=Once] ->
                                let {
                                  sat_s4waQ [Occ=Once] :: GHC.Int.Int64
                                  [LclId] =
                                      CCCS GHC.Int.I64#! [ipv1_s4waO]; } in
                                let {
                                  sat_s4waP [Occ=Once] :: GHC.Int.Int64
                                  [LclId] =
                                      CCCS GHC.Int.I64#! [ipv_s4waN];
                                } in  (,) [sat_s4waP sat_s4waQ];
                          };
                      -1# ->
                          case ww1_s4waI of wild1_s4waR {
                            __DEFAULT ->
                                case quotRemInt# [wild1_s4waR -1#] of {
                                  (#,#) ipv_s4waT [Occ=Once] ipv1_s4waU [Occ=Once] ->
                                      let {
                                        sat_s4waW [Occ=Once] :: GHC.Int.Int64
                                        [LclId] =
                                            CCCS GHC.Int.I64#! [ipv1_s4waU]; } in
                                      let {
                                        sat_s4waV [Occ=Once] :: GHC.Int.Int64
                                        [LclId] =
                                            CCCS GHC.Int.I64#! [ipv_s4waT];
                                      } in  (,) [sat_s4waV sat_s4waW];
                                };
                            -9223372036854775808# -> lvl9_r4kPA;
                          };
                      0# -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Int.$w$cdivMod2 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int#
     -> GHC.Prim.Int# -> (# GHC.Int.Int64, GHC.Int.Int64 #)
[GblId, Arity=2, Str=<S,U><S,1*U>, Unf=OtherCon []] =
    [] \r [ww_s4waY ww1_s4waZ]
        case ww1_s4waZ of wild_s4wb0 {
          __DEFAULT ->
              let-no-escape {
                $j_s4wb1 [Occ=Once*T[0], Dmd=<L,1*U(U,U)>]
                  :: (# GHC.Int.Int64, GHC.Int.Int64 #)
                [LclId[JoinId(0)], Unf=OtherCon []] =
                    [ww_s4waY wild_s4wb0] \r []
                        case ># [ww_s4waY 0#] of {
                          __DEFAULT ->
                              case <# [ww_s4waY 0#] of {
                                __DEFAULT ->
                                    case quotRemInt# [ww_s4waY wild_s4wb0] of {
                                      (#,#) ipv_s4wb5 [Occ=Once] ipv1_s4wb6 [Occ=Once] ->
                                          let {
                                            sat_s4wb8 [Occ=Once] :: GHC.Int.Int64
                                            [LclId] =
                                                CCCS GHC.Int.I64#! [ipv1_s4wb6]; } in
                                          let {
                                            sat_s4wb7 [Occ=Once] :: GHC.Int.Int64
                                            [LclId] =
                                                CCCS GHC.Int.I64#! [ipv_s4wb5];
                                          } in  (#,#) [sat_s4wb7 sat_s4wb8];
                                    };
                                1# ->
                                    case ># [wild_s4wb0 0#] of {
                                      __DEFAULT ->
                                          case quotRemInt# [ww_s4waY wild_s4wb0] of {
                                            (#,#) ipv_s4wbb [Occ=Once] ipv1_s4wbc [Occ=Once] ->
                                                let {
                                                  sat_s4wbe [Occ=Once] :: GHC.Int.Int64
                                                  [LclId] =
                                                      CCCS GHC.Int.I64#! [ipv1_s4wbc]; } in
                                                let {
                                                  sat_s4wbd [Occ=Once] :: GHC.Int.Int64
                                                  [LclId] =
                                                      CCCS GHC.Int.I64#! [ipv_s4wbb];
                                                } in  (#,#) [sat_s4wbd sat_s4wbe];
                                          };
                                      1# ->
                                          case +# [ww_s4waY 1#] of sat_s4wbf {
                                            __DEFAULT ->
                                                case quotRemInt# [sat_s4wbf wild_s4wb0] of {
                                                  (#,#) ipv_s4wbh [Occ=Once]
                                                        ipv1_s4wbi [Occ=Once] ->
                                                      case +# [ipv1_s4wbi wild_s4wb0] of sat_s4wbl {
                                                        __DEFAULT ->
                                                            case -# [sat_s4wbl 1#] of sat_s4wbm {
                                                              __DEFAULT ->
                                                                  let {
                                                                    sat_s4wbn [Occ=Once]
                                                                      :: GHC.Int.Int64
                                                                    [LclId] =
                                                                        CCCS GHC.Int.I64#! [sat_s4wbm];
                                                                  } in 
                                                                    case
                                                                        -# [ipv_s4wbh 1#]
                                                                    of
                                                                    sat_s4wbj
                                                                    { __DEFAULT ->
                                                                          let {
                                                                            sat_s4wbk [Occ=Once]
                                                                              :: GHC.Int.Int64
                                                                            [LclId] =
                                                                                CCCS GHC.Int.I64#! [sat_s4wbj];
                                                                          } in 
                                                                            (#,#) [sat_s4wbk
                                                                                   sat_s4wbn];
                                                                    };
                                                            };
                                                      };
                                                };
                                          };
                                    };
                              };
                          1# ->
                              case <# [wild_s4wb0 0#] of {
                                __DEFAULT ->
                                    case <# [ww_s4waY 0#] of {
                                      __DEFAULT ->
                                          case quotRemInt# [ww_s4waY wild_s4wb0] of {
                                            (#,#) ipv_s4wbr [Occ=Once] ipv1_s4wbs [Occ=Once] ->
                                                let {
                                                  sat_s4wbu [Occ=Once] :: GHC.Int.Int64
                                                  [LclId] =
                                                      CCCS GHC.Int.I64#! [ipv1_s4wbs]; } in
                                                let {
                                                  sat_s4wbt [Occ=Once] :: GHC.Int.Int64
                                                  [LclId] =
                                                      CCCS GHC.Int.I64#! [ipv_s4wbr];
                                                } in  (#,#) [sat_s4wbt sat_s4wbu];
                                          };
                                      1# ->
                                          case ># [wild_s4wb0 0#] of {
                                            __DEFAULT ->
                                                case quotRemInt# [ww_s4waY wild_s4wb0] of {
                                                  (#,#) ipv_s4wbx [Occ=Once]
                                                        ipv1_s4wby [Occ=Once] ->
                                                      let {
                                                        sat_s4wbA [Occ=Once] :: GHC.Int.Int64
                                                        [LclId] =
                                                            CCCS GHC.Int.I64#! [ipv1_s4wby]; } in
                                                      let {
                                                        sat_s4wbz [Occ=Once] :: GHC.Int.Int64
                                                        [LclId] =
                                                            CCCS GHC.Int.I64#! [ipv_s4wbx];
                                                      } in  (#,#) [sat_s4wbz sat_s4wbA];
                                                };
                                            1# ->
                                                case +# [ww_s4waY 1#] of sat_s4wbB {
                                                  __DEFAULT ->
                                                      case quotRemInt# [sat_s4wbB wild_s4wb0] of {
                                                        (#,#) ipv_s4wbD [Occ=Once]
                                                              ipv1_s4wbE [Occ=Once] ->
                                                            case
                                                                +# [ipv1_s4wbE wild_s4wb0]
                                                            of
                                                            sat_s4wbH
                                                            { __DEFAULT ->
                                                                  case
                                                                      -# [sat_s4wbH 1#]
                                                                  of
                                                                  sat_s4wbI
                                                                  { __DEFAULT ->
                                                                        let {
                                                                          sat_s4wbJ [Occ=Once]
                                                                            :: GHC.Int.Int64
                                                                          [LclId] =
                                                                              CCCS GHC.Int.I64#! [sat_s4wbI];
                                                                        } in 
                                                                          case
                                                                              -# [ipv_s4wbD 1#]
                                                                          of
                                                                          sat_s4wbF
                                                                          { __DEFAULT ->
                                                                                let {
                                                                                  sat_s4wbG [Occ=Once]
                                                                                    :: GHC.Int.Int64
                                                                                  [LclId] =
                                                                                      CCCS GHC.Int.I64#! [sat_s4wbF];
                                                                                } in 
                                                                                  (#,#) [sat_s4wbG
                                                                                         sat_s4wbJ];
                                                                          };
                                                                  };
                                                            };
                                                      };
                                                };
                                          };
                                    };
                                1# ->
                                    case -# [ww_s4waY 1#] of sat_s4wbK {
                                      __DEFAULT ->
                                          case quotRemInt# [sat_s4wbK wild_s4wb0] of {
                                            (#,#) ipv_s4wbM [Occ=Once] ipv1_s4wbN [Occ=Once] ->
                                                case +# [ipv1_s4wbN wild_s4wb0] of sat_s4wbQ {
                                                  __DEFAULT ->
                                                      case +# [sat_s4wbQ 1#] of sat_s4wbR {
                                                        __DEFAULT ->
                                                            let {
                                                              sat_s4wbS [Occ=Once] :: GHC.Int.Int64
                                                              [LclId] =
                                                                  CCCS GHC.Int.I64#! [sat_s4wbR];
                                                            } in 
                                                              case -# [ipv_s4wbM 1#] of sat_s4wbO {
                                                                __DEFAULT ->
                                                                    let {
                                                                      sat_s4wbP [Occ=Once]
                                                                        :: GHC.Int.Int64
                                                                      [LclId] =
                                                                          CCCS GHC.Int.I64#! [sat_s4wbO];
                                                                    } in 
                                                                      (#,#) [sat_s4wbP sat_s4wbS];
                                                              };
                                                      };
                                                };
                                          };
                                    };
                              };
                        };
              } in 
                case wild_s4wb0 of {
                  __DEFAULT -> $j_s4wb1;
                  -1# ->
                      case ww_s4waY of {
                        __DEFAULT -> $j_s4wb1;
                        -9223372036854775808# ->
                            (#,#) [GHC.Real.overflowError GHC.Int.$fBitsInt10];
                      };
                };
          0# -> GHC.Real.divZeroError;
        };

GHC.Int.$fIntegralInt64_$cdivMod [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int64 -> GHC.Int.Int64 -> (GHC.Int.Int64, GHC.Int.Int64)
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4wbW w1_s4wbX]
        case w_s4wbW of {
          GHC.Int.I64# ww1_s4wbZ [Occ=Once] ->
              case w1_s4wbX of {
                GHC.Int.I64# ww3_s4wc1 [Occ=Once] ->
                    case GHC.Int.$w$cdivMod2 ww1_s4wbZ ww3_s4wc1 of {
                      (#,#) ww5_s4wc3 [Occ=Once] ww6_s4wc4 [Occ=Once] ->
                          (,) [ww5_s4wc3 ww6_s4wc4];
                    };
              };
        };

GHC.Int.$fIxInt64_$crange
  :: (GHC.Int.Int64, GHC.Int.Int64) -> [GHC.Int.Int64]
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>,
 Unf=OtherCon []] =
    [] \r [ds_s4wc5]
        case ds_s4wc5 of {
          (,) m_s4wc7 [Occ=Once] n_s4wc8 [Occ=Once] ->
              GHC.Int.$fEnumInt64_$cenumFromTo m_s4wc7 n_s4wc8;
        };

GHC.Int.$fRealInt64_$ctoRational [InlPrag=NOUSERINLINE[0]]
  :: GHC.Int.Int64 -> GHC.Real.Rational
[GblId, Arity=1, Str=<S(S),1*U(U)>m, Unf=OtherCon []] =
    [] \r [w_s4wc9]
        case w_s4wc9 of {
          GHC.Int.I64# ww1_s4wcb [Occ=Once] ->
              case GHC.Integer.Type.smallInteger ww1_s4wcb of sat_s4wcc {
                __DEFAULT ->
                    case
                        GHC.Integer.Type.timesInteger sat_s4wcc GHC.Int.$fRealInt1
                    of
                    sat_s4wcd
                    { __DEFAULT ->
                          case GHC.Real.$w$sreduce sat_s4wcd GHC.Int.$fRealInt1 of {
                            (#,#) ww3_s4wcf [Occ=Once] ww4_s4wcg [Occ=Once] ->
                                GHC.Real.:% [ww3_s4wcf ww4_s4wcg];
                          };
                    };
              };
        };

GHC.Int.$fRealInt64 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Real.Real GHC.Int.Int64
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Real.C:Real! [GHC.Int.$fNumInt64
                                    GHC.Int.$fOrdInt64
                                    GHC.Int.$fRealInt64_$ctoRational];

GHC.Int.$fIntegralInt64 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Real.Integral GHC.Int.Int64
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Real.C:Integral! [GHC.Int.$fRealInt64
                                        GHC.Int.$fEnumInt64
                                        GHC.Int.$fIntegralInt64_$cquot
                                        GHC.Int.$fIntegralInt64_$crem
                                        GHC.Int.$fIntegralInt64_$cdiv
                                        GHC.Int.$fIntegralInt64_$cmod
                                        GHC.Int.$fIntegralInt64_$cquotRem
                                        GHC.Int.$fIntegralInt64_$cdivMod
                                        GHC.Int.$fIntegralInt64_$ctoInteger];

GHC.Int.$fIxInt64_$cunsafeIndex
  :: (GHC.Int.Int64, GHC.Int.Int64) -> GHC.Int.Int64 -> GHC.Types.Int
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S(S)L),1*U(1*U(U),A)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s4wch i_s4wci]
        case ds_s4wch of {
          (,) m_s4wck [Occ=Once!] _ [Occ=Dead] ->
              case i_s4wci of {
                GHC.Int.I64# x#_s4wcn [Occ=Once] ->
                    case m_s4wck of {
                      GHC.Int.I64# x#1_s4wcp [Occ=Once] ->
                          case -# [x#_s4wcn x#1_s4wcp] of sat_s4wcq {
                            __DEFAULT -> GHC.Types.I# [sat_s4wcq];
                          };
                    };
              };
        };

GHC.Int.$fIxInt64_$crangeSize
  :: (GHC.Int.Int64, GHC.Int.Int64) -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>m,
 Unf=OtherCon []] =
    [] \r [b_s4wcr]
        case b_s4wcr of {
          (,) _l_s4wct [Occ=Once!] h_s4wcu [Occ=Once!] ->
              case _l_s4wct of {
                GHC.Int.I64# x_s4wcw ->
                    case h_s4wcu of {
                      GHC.Int.I64# y_s4wcy ->
                          case <=# [x_s4wcw y_s4wcy] of {
                            __DEFAULT -> GHC.Int.$fIxInt1;
                            1# ->
                                case -# [y_s4wcy x_s4wcw] of sat_s4wcA {
                                  __DEFAULT ->
                                      case +# [sat_s4wcA 1#] of sat_s4wcB {
                                        __DEFAULT -> GHC.Types.I# [sat_s4wcB];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fIxInt64_$cunsafeRangeSize
  :: (GHC.Int.Int64, GHC.Int.Int64) -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>m,
 Unf=OtherCon []] =
    [] \r [b_s4wcC]
        case b_s4wcC of {
          (,) _l_s4wcE [Occ=Once!] h_s4wcF [Occ=Once!] ->
              case h_s4wcF of {
                GHC.Int.I64# x#_s4wcH [Occ=Once] ->
                    case _l_s4wcE of {
                      GHC.Int.I64# x#1_s4wcJ [Occ=Once] ->
                          case -# [x#_s4wcH x#1_s4wcJ] of sat_s4wcK {
                            __DEFAULT ->
                                case +# [sat_s4wcK 1#] of sat_s4wcL {
                                  __DEFAULT -> GHC.Types.I# [sat_s4wcL];
                                };
                          };
                    };
              };
        };

GHC.Int.$fIxInt64_$cindex [InlPrag=INLINE (sat-args=2)]
  :: (GHC.Int.Int64, GHC.Int.Int64) -> GHC.Int.Int64 -> GHC.Types.Int
[GblId,
 Arity=2,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s4wcM eta1_s4wcN]
        case eta_s4wcM of {
          (,) m_s4wcP [Occ=Once!] n_s4wcQ [Occ=Once!] ->
              case m_s4wcP of {
                GHC.Int.I64# x_s4wcS ->
                    case eta1_s4wcN of {
                      GHC.Int.I64# y_s4wcU ->
                          case <=# [x_s4wcS y_s4wcU] of {
                            __DEFAULT -> GHC.Arr.hopelessIndexError;
                            1# ->
                                case n_s4wcQ of {
                                  GHC.Int.I64# y1_s4wcX [Occ=Once] ->
                                      case <=# [y_s4wcU y1_s4wcX] of {
                                        __DEFAULT -> GHC.Arr.hopelessIndexError;
                                        1# ->
                                            case -# [y_s4wcU x_s4wcS] of sat_s4wcZ {
                                              __DEFAULT -> GHC.Types.I# [sat_s4wcZ];
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.Int.$fIxInt64 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Arr.Ix GHC.Int.Int64
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Arr.C:Ix! [GHC.Int.$fOrdInt64
                                 GHC.Int.$fIxInt64_$crange
                                 GHC.Int.$fIxInt64_$cindex
                                 GHC.Int.$fIxInt64_$cunsafeIndex
                                 GHC.Int.$fIxInt64_$cinRange
                                 GHC.Int.$fIxInt64_$crangeSize
                                 GHC.Int.$fIxInt64_$cunsafeRangeSize];

GHC.Int.$fShowInt64_$cshowsPrec
  :: GHC.Types.Int -> GHC.Int.Int64 -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [p_s4wd0 x_s4wd1 eta_s4wd2]
        case x_s4wd1 of {
          GHC.Int.I64# x#_s4wd4 [Occ=Once] ->
              case p_s4wd0 of {
                GHC.Types.I# ww1_s4wd6 [Occ=Once] ->
                    case GHC.Show.$wshowSignedInt ww1_s4wd6 x#_s4wd4 eta_s4wd2 of {
                      (#,#) ww5_s4wd8 [Occ=Once] ww6_s4wd9 [Occ=Once] ->
                          : [ww5_s4wd8 ww6_s4wd9];
                    };
              };
        };

GHC.Int.$fShowInt64_$cshow :: GHC.Int.Int64 -> GHC.Base.String
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m2,
 Unf=OtherCon []] =
    [] \r [x_s4wda]
        case x_s4wda of {
          GHC.Int.I64# x#_s4wdc [Occ=Once] ->
              case GHC.Show.$wshowSignedInt 0# x#_s4wdc GHC.Types.[] of {
                (#,#) ww5_s4wde [Occ=Once] ww6_s4wdf [Occ=Once] ->
                    : [ww5_s4wde ww6_s4wdf];
              };
        };

GHC.Int.$fShowInt3
  :: GHC.Int.Int64 -> GHC.Base.String -> GHC.Base.String
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [x_s4wdg eta_s4wdh]
        case x_s4wdg of {
          GHC.Int.I64# x#_s4wdj [Occ=Once] ->
              case GHC.Show.$wshowSignedInt 0# x#_s4wdj eta_s4wdh of {
                (#,#) ww5_s4wdl [Occ=Once] ww6_s4wdm [Occ=Once] ->
                    : [ww5_s4wdl ww6_s4wdm];
              };
        };

GHC.Int.$fShowInt64_$cshowList :: [GHC.Int.Int64] -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ls_s4wdn s_s4wdo]
        GHC.Show.showList__ GHC.Int.$fShowInt3 ls_s4wdn s_s4wdo;

GHC.Int.$fShowInt64 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Int.Int64
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Int.$fShowInt64_$cshowsPrec
                                    GHC.Int.$fShowInt64_$cshow
                                    GHC.Int.$fShowInt64_$cshowList];

GHC.Int.uncheckedIShiftL64#
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] uncheckedIShiftL# [eta_B2 eta_B1];

GHC.Int.uncheckedIShiftRA64#
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] uncheckedIShiftRA# [eta_B2 eta_B1];

GHC.Int.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.Int.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Int.$trModule4];

GHC.Int.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.Int"#;

GHC.Int.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Int.$trModule2];

GHC.Int.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.Int.$trModule3
                                     GHC.Int.$trModule1];

$krep_r4kPB :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcInt#
                                              GHC.Types.[]];

GHC.Int.$tcInt7 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Int.$tcInt9];

GHC.Int.$tcInt8 :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [1422706860619545536##
                                    2126344328513082648##
                                    GHC.Int.$trModule
                                    GHC.Int.$tcInt7
                                    0#
                                    GHC.Types.krep$*];

$krep1_r4kPC :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Int.$tcInt8
                                              GHC.Types.[]];

GHC.Int.$tc'I8#1 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_r4kPB $krep1_r4kPC];

GHC.Int.$tc'I8#3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'I8#"#;

GHC.Int.$tc'I8#2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Int.$tc'I8#3];

GHC.Int.$tc'I8# :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [5349338056284818619##
                                    13298037281129101406##
                                    GHC.Int.$trModule
                                    GHC.Int.$tc'I8#2
                                    0#
                                    GHC.Int.$tc'I8#1];

GHC.Int.$tcInt1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Int.$tcInt2];

GHC.Int.$tcInt16 :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [16329117591681623238##
                                    13363230803330610095##
                                    GHC.Int.$trModule
                                    GHC.Int.$tcInt1
                                    0#
                                    GHC.Types.krep$*];

$krep2_r4kPD :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Int.$tcInt16
                                              GHC.Types.[]];

GHC.Int.$tc'I16#1 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_r4kPB $krep2_r4kPD];

GHC.Int.$tc'I16#3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'I16#"#;

GHC.Int.$tc'I16#2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Int.$tc'I16#3];

GHC.Int.$tc'I16# :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [1077432500071562197##
                                    13676251251348512601##
                                    GHC.Int.$trModule
                                    GHC.Int.$tc'I16#2
                                    0#
                                    GHC.Int.$tc'I16#1];

GHC.Int.$tcInt3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Int.$tcInt4];

GHC.Int.$tcInt32 :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [5115671124548181797##
                                    6203735229629729265##
                                    GHC.Int.$trModule
                                    GHC.Int.$tcInt3
                                    0#
                                    GHC.Types.krep$*];

$krep3_r4kPE :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Int.$tcInt32
                                              GHC.Types.[]];

GHC.Int.$tc'I32#1 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_r4kPB $krep3_r4kPE];

GHC.Int.$tc'I32#3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'I32#"#;

GHC.Int.$tc'I32#2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Int.$tc'I32#3];

GHC.Int.$tc'I32# :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [14037617528454219662##
                                    2752255350980319305##
                                    GHC.Int.$trModule
                                    GHC.Int.$tc'I32#2
                                    0#
                                    GHC.Int.$tc'I32#1];

GHC.Int.$tcInt5 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Int.$tcInt6];

GHC.Int.$tcInt64 :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [15049343324344240059##
                                    14445320765379163718##
                                    GHC.Int.$trModule
                                    GHC.Int.$tcInt5
                                    0#
                                    GHC.Types.krep$*];

$krep4_r4kPF :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Int.$tcInt64
                                              GHC.Types.[]];

GHC.Int.$tc'I64#1 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_r4kPB $krep4_r4kPF];

GHC.Int.$tc'I64#3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'I64#"#;

GHC.Int.$tc'I64#2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Int.$tc'I64#3];

GHC.Int.$tc'I64# :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [7755385358338959724##
                                    8520529638322167079##
                                    GHC.Int.$trModule
                                    GHC.Int.$tc'I64#2
                                    0#
                                    GHC.Int.$tc'I64#1];

GHC.Int.I8# :: GHC.Prim.Int# -> GHC.Int.Int8
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Int.I8# [eta_B1];

GHC.Int.I16# :: GHC.Prim.Int# -> GHC.Int.Int16
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Int.I16# [eta_B1];

GHC.Int.I32# :: GHC.Prim.Int# -> GHC.Int.Int32
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Int.I32# [eta_B1];

GHC.Int.I64# :: GHC.Prim.Int# -> GHC.Int.Int64
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Int.I64# [eta_B1];

